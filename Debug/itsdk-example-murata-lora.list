
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f470  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e10  0801f530  0801f530  0002f530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021340  08021340  00040118  2**0
                  CONTENTS
  4 .ARM          00000008  08021340  08021340  00031340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021348  08021348  00040118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021348  08021348  00031348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802134c  0802134c  0003134c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08021350  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001514  20000118  08021468  00040118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000162c  08021468  0004162c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00040118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006b7b9  00000000  00000000  00040140  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ad22  00000000  00000000  000ab8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002ad8  00000000  00000000  000b6620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026b8  00000000  00000000  000b90f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000283a7  00000000  00000000  000bb7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003b4b4  00000000  00000000  000e3b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000afea2  00000000  00000000  0011f00b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ceead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009988  00000000  00000000  001cef28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000118 	.word	0x20000118
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801f518 	.word	0x0801f518

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000011c 	.word	0x2000011c
 8000104:	0801f518 	.word	0x0801f518

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fa5f 	bl	80018d8 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9b7 	bl	8001798 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa51 	bl	80018d8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa47 	bl	80018d8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9cf 	bl	8001810 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f930 	bl	800071c <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f84e 	bl	8000598 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4647      	mov	r7, r8
 800050e:	0415      	lsls	r5, r2, #16
 8000510:	0c2d      	lsrs	r5, r5, #16
 8000512:	002e      	movs	r6, r5
 8000514:	b580      	push	{r7, lr}
 8000516:	0407      	lsls	r7, r0, #16
 8000518:	0c14      	lsrs	r4, r2, #16
 800051a:	0c3f      	lsrs	r7, r7, #16
 800051c:	4699      	mov	r9, r3
 800051e:	0c03      	lsrs	r3, r0, #16
 8000520:	437e      	muls	r6, r7
 8000522:	435d      	muls	r5, r3
 8000524:	4367      	muls	r7, r4
 8000526:	4363      	muls	r3, r4
 8000528:	197f      	adds	r7, r7, r5
 800052a:	0c34      	lsrs	r4, r6, #16
 800052c:	19e4      	adds	r4, r4, r7
 800052e:	469c      	mov	ip, r3
 8000530:	42a5      	cmp	r5, r4
 8000532:	d903      	bls.n	800053c <__aeabi_lmul+0x34>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	025b      	lsls	r3, r3, #9
 8000538:	4698      	mov	r8, r3
 800053a:	44c4      	add	ip, r8
 800053c:	464b      	mov	r3, r9
 800053e:	4343      	muls	r3, r0
 8000540:	4351      	muls	r1, r2
 8000542:	0c25      	lsrs	r5, r4, #16
 8000544:	0436      	lsls	r6, r6, #16
 8000546:	4465      	add	r5, ip
 8000548:	0c36      	lsrs	r6, r6, #16
 800054a:	0424      	lsls	r4, r4, #16
 800054c:	19a4      	adds	r4, r4, r6
 800054e:	195b      	adds	r3, r3, r5
 8000550:	1859      	adds	r1, r3, r1
 8000552:	0020      	movs	r0, r4
 8000554:	bc0c      	pop	{r2, r3}
 8000556:	4690      	mov	r8, r2
 8000558:	4699      	mov	r9, r3
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055c <__aeabi_d2uiz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <__aeabi_d2uiz+0x38>)
 8000562:	0004      	movs	r4, r0
 8000564:	000d      	movs	r5, r1
 8000566:	f7ff ff81 	bl	800046c <__aeabi_dcmpge>
 800056a:	2800      	cmp	r0, #0
 800056c:	d104      	bne.n	8000578 <__aeabi_d2uiz+0x1c>
 800056e:	0020      	movs	r0, r4
 8000570:	0029      	movs	r1, r5
 8000572:	f001 ffd3 	bl	800251c <__aeabi_d2iz>
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <__aeabi_d2uiz+0x38>)
 800057a:	2200      	movs	r2, #0
 800057c:	0020      	movs	r0, r4
 800057e:	0029      	movs	r1, r5
 8000580:	f001 fc84 	bl	8001e8c <__aeabi_dsub>
 8000584:	f001 ffca 	bl	800251c <__aeabi_d2iz>
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	061b      	lsls	r3, r3, #24
 800058c:	469c      	mov	ip, r3
 800058e:	4460      	add	r0, ip
 8000590:	e7f1      	b.n	8000576 <__aeabi_d2uiz+0x1a>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	41e00000 	.word	0x41e00000

08000598 <__udivmoddi4>:
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	464f      	mov	r7, r9
 800059c:	4646      	mov	r6, r8
 800059e:	46d6      	mov	lr, sl
 80005a0:	b5c0      	push	{r6, r7, lr}
 80005a2:	0004      	movs	r4, r0
 80005a4:	b082      	sub	sp, #8
 80005a6:	000d      	movs	r5, r1
 80005a8:	4691      	mov	r9, r2
 80005aa:	4698      	mov	r8, r3
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d82f      	bhi.n	8000610 <__udivmoddi4+0x78>
 80005b0:	d02c      	beq.n	800060c <__udivmoddi4+0x74>
 80005b2:	4641      	mov	r1, r8
 80005b4:	4648      	mov	r0, r9
 80005b6:	f002 f8c3 	bl	8002740 <__clzdi2>
 80005ba:	0029      	movs	r1, r5
 80005bc:	0006      	movs	r6, r0
 80005be:	0020      	movs	r0, r4
 80005c0:	f002 f8be 	bl	8002740 <__clzdi2>
 80005c4:	1a33      	subs	r3, r6, r0
 80005c6:	469c      	mov	ip, r3
 80005c8:	3b20      	subs	r3, #32
 80005ca:	469a      	mov	sl, r3
 80005cc:	d500      	bpl.n	80005d0 <__udivmoddi4+0x38>
 80005ce:	e076      	b.n	80006be <__udivmoddi4+0x126>
 80005d0:	464b      	mov	r3, r9
 80005d2:	4652      	mov	r2, sl
 80005d4:	4093      	lsls	r3, r2
 80005d6:	001f      	movs	r7, r3
 80005d8:	464b      	mov	r3, r9
 80005da:	4662      	mov	r2, ip
 80005dc:	4093      	lsls	r3, r2
 80005de:	001e      	movs	r6, r3
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d828      	bhi.n	8000636 <__udivmoddi4+0x9e>
 80005e4:	d025      	beq.n	8000632 <__udivmoddi4+0x9a>
 80005e6:	4653      	mov	r3, sl
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5a>
 80005f0:	e07b      	b.n	80006ea <__udivmoddi4+0x152>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4652      	mov	r2, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4662      	mov	r2, ip
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e018      	b.n	800063e <__udivmoddi4+0xa6>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9d0      	bls.n	80005b2 <__udivmoddi4+0x1a>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8a>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b002      	add	sp, #8
 8000628:	bc1c      	pop	{r2, r3, r4}
 800062a:	4690      	mov	r8, r2
 800062c:	4699      	mov	r9, r3
 800062e:	46a2      	mov	sl, r4
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	42a3      	cmp	r3, r4
 8000634:	d9d7      	bls.n	80005e6 <__udivmoddi4+0x4e>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4663      	mov	r3, ip
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0e9      	beq.n	8000618 <__udivmoddi4+0x80>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	4698      	mov	r8, r3
 8000648:	4641      	mov	r1, r8
 800064a:	0872      	lsrs	r2, r6, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	087b      	lsrs	r3, r7, #1
 8000650:	4666      	mov	r6, ip
 8000652:	e00e      	b.n	8000672 <__udivmoddi4+0xda>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d101      	bne.n	800065c <__udivmoddi4+0xc4>
 8000658:	42a2      	cmp	r2, r4
 800065a:	d80c      	bhi.n	8000676 <__udivmoddi4+0xde>
 800065c:	1aa4      	subs	r4, r4, r2
 800065e:	419d      	sbcs	r5, r3
 8000660:	2001      	movs	r0, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2100      	movs	r1, #0
 8000668:	3e01      	subs	r6, #1
 800066a:	1824      	adds	r4, r4, r0
 800066c:	414d      	adcs	r5, r1
 800066e:	2e00      	cmp	r6, #0
 8000670:	d006      	beq.n	8000680 <__udivmoddi4+0xe8>
 8000672:	42ab      	cmp	r3, r5
 8000674:	d9ee      	bls.n	8000654 <__udivmoddi4+0xbc>
 8000676:	3e01      	subs	r6, #1
 8000678:	1924      	adds	r4, r4, r4
 800067a:	416d      	adcs	r5, r5
 800067c:	2e00      	cmp	r6, #0
 800067e:	d1f8      	bne.n	8000672 <__udivmoddi4+0xda>
 8000680:	9800      	ldr	r0, [sp, #0]
 8000682:	9901      	ldr	r1, [sp, #4]
 8000684:	4653      	mov	r3, sl
 8000686:	1900      	adds	r0, r0, r4
 8000688:	4169      	adcs	r1, r5
 800068a:	2b00      	cmp	r3, #0
 800068c:	db23      	blt.n	80006d6 <__udivmoddi4+0x13e>
 800068e:	002b      	movs	r3, r5
 8000690:	4652      	mov	r2, sl
 8000692:	40d3      	lsrs	r3, r2
 8000694:	002a      	movs	r2, r5
 8000696:	4664      	mov	r4, ip
 8000698:	40e2      	lsrs	r2, r4
 800069a:	001c      	movs	r4, r3
 800069c:	4653      	mov	r3, sl
 800069e:	0015      	movs	r5, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db2d      	blt.n	8000700 <__udivmoddi4+0x168>
 80006a4:	0026      	movs	r6, r4
 80006a6:	4657      	mov	r7, sl
 80006a8:	40be      	lsls	r6, r7
 80006aa:	0033      	movs	r3, r6
 80006ac:	0026      	movs	r6, r4
 80006ae:	4667      	mov	r7, ip
 80006b0:	40be      	lsls	r6, r7
 80006b2:	0032      	movs	r2, r6
 80006b4:	1a80      	subs	r0, r0, r2
 80006b6:	4199      	sbcs	r1, r3
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e7ac      	b.n	8000618 <__udivmoddi4+0x80>
 80006be:	4662      	mov	r2, ip
 80006c0:	2320      	movs	r3, #32
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	464a      	mov	r2, r9
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	4661      	mov	r1, ip
 80006ca:	0013      	movs	r3, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	408a      	lsls	r2, r1
 80006d0:	0017      	movs	r7, r2
 80006d2:	431f      	orrs	r7, r3
 80006d4:	e780      	b.n	80005d8 <__udivmoddi4+0x40>
 80006d6:	4662      	mov	r2, ip
 80006d8:	2320      	movs	r3, #32
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	002a      	movs	r2, r5
 80006de:	4666      	mov	r6, ip
 80006e0:	409a      	lsls	r2, r3
 80006e2:	0023      	movs	r3, r4
 80006e4:	40f3      	lsrs	r3, r6
 80006e6:	4313      	orrs	r3, r2
 80006e8:	e7d4      	b.n	8000694 <__udivmoddi4+0xfc>
 80006ea:	4662      	mov	r2, ip
 80006ec:	2320      	movs	r3, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	9100      	str	r1, [sp, #0]
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	40da      	lsrs	r2, r3
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	e780      	b.n	8000602 <__udivmoddi4+0x6a>
 8000700:	2320      	movs	r3, #32
 8000702:	4662      	mov	r2, ip
 8000704:	0026      	movs	r6, r4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	40de      	lsrs	r6, r3
 800070a:	002f      	movs	r7, r5
 800070c:	46b0      	mov	r8, r6
 800070e:	4666      	mov	r6, ip
 8000710:	40b7      	lsls	r7, r6
 8000712:	4646      	mov	r6, r8
 8000714:	003b      	movs	r3, r7
 8000716:	4333      	orrs	r3, r6
 8000718:	e7c8      	b.n	80006ac <__udivmoddi4+0x114>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gnu_ldivmod_helper>:
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	0016      	movs	r6, r2
 8000722:	001f      	movs	r7, r3
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	f002 f816 	bl	8002758 <__divdi3>
 800072c:	0004      	movs	r4, r0
 800072e:	000d      	movs	r5, r1
 8000730:	0002      	movs	r2, r0
 8000732:	000b      	movs	r3, r1
 8000734:	0030      	movs	r0, r6
 8000736:	0039      	movs	r1, r7
 8000738:	f7ff fee6 	bl	8000508 <__aeabi_lmul>
 800073c:	9a00      	ldr	r2, [sp, #0]
 800073e:	9b01      	ldr	r3, [sp, #4]
 8000740:	1a12      	subs	r2, r2, r0
 8000742:	418b      	sbcs	r3, r1
 8000744:	9908      	ldr	r1, [sp, #32]
 8000746:	0020      	movs	r0, r4
 8000748:	600a      	str	r2, [r1, #0]
 800074a:	604b      	str	r3, [r1, #4]
 800074c:	0029      	movs	r1, r5
 800074e:	b003      	add	sp, #12
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)

08000754 <__aeabi_fsub>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	4647      	mov	r7, r8
 8000758:	46ce      	mov	lr, r9
 800075a:	0044      	lsls	r4, r0, #1
 800075c:	0fc2      	lsrs	r2, r0, #31
 800075e:	b580      	push	{r7, lr}
 8000760:	0247      	lsls	r7, r0, #9
 8000762:	0248      	lsls	r0, r1, #9
 8000764:	0a40      	lsrs	r0, r0, #9
 8000766:	4684      	mov	ip, r0
 8000768:	4666      	mov	r6, ip
 800076a:	0048      	lsls	r0, r1, #1
 800076c:	0a7f      	lsrs	r7, r7, #9
 800076e:	0e24      	lsrs	r4, r4, #24
 8000770:	00f6      	lsls	r6, r6, #3
 8000772:	0025      	movs	r5, r4
 8000774:	4690      	mov	r8, r2
 8000776:	00fb      	lsls	r3, r7, #3
 8000778:	0e00      	lsrs	r0, r0, #24
 800077a:	0fc9      	lsrs	r1, r1, #31
 800077c:	46b1      	mov	r9, r6
 800077e:	28ff      	cmp	r0, #255	; 0xff
 8000780:	d100      	bne.n	8000784 <__aeabi_fsub+0x30>
 8000782:	e085      	b.n	8000890 <__aeabi_fsub+0x13c>
 8000784:	2601      	movs	r6, #1
 8000786:	4071      	eors	r1, r6
 8000788:	1a26      	subs	r6, r4, r0
 800078a:	4291      	cmp	r1, r2
 800078c:	d057      	beq.n	800083e <__aeabi_fsub+0xea>
 800078e:	2e00      	cmp	r6, #0
 8000790:	dd43      	ble.n	800081a <__aeabi_fsub+0xc6>
 8000792:	2800      	cmp	r0, #0
 8000794:	d000      	beq.n	8000798 <__aeabi_fsub+0x44>
 8000796:	e07f      	b.n	8000898 <__aeabi_fsub+0x144>
 8000798:	4649      	mov	r1, r9
 800079a:	2900      	cmp	r1, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fsub+0x4c>
 800079e:	e0aa      	b.n	80008f6 <__aeabi_fsub+0x1a2>
 80007a0:	3e01      	subs	r6, #1
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fsub+0x54>
 80007a6:	e0f7      	b.n	8000998 <__aeabi_fsub+0x244>
 80007a8:	1a5b      	subs	r3, r3, r1
 80007aa:	015a      	lsls	r2, r3, #5
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_fsub+0x5c>
 80007ae:	e08b      	b.n	80008c8 <__aeabi_fsub+0x174>
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	099c      	lsrs	r4, r3, #6
 80007b4:	0020      	movs	r0, r4
 80007b6:	f001 ffa5 	bl	8002704 <__clzsi2>
 80007ba:	3805      	subs	r0, #5
 80007bc:	4084      	lsls	r4, r0
 80007be:	4285      	cmp	r5, r0
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_fsub+0x70>
 80007c2:	e0d3      	b.n	800096c <__aeabi_fsub+0x218>
 80007c4:	1b45      	subs	r5, r0, r5
 80007c6:	0023      	movs	r3, r4
 80007c8:	2020      	movs	r0, #32
 80007ca:	3501      	adds	r5, #1
 80007cc:	40eb      	lsrs	r3, r5
 80007ce:	1b45      	subs	r5, r0, r5
 80007d0:	40ac      	lsls	r4, r5
 80007d2:	1e62      	subs	r2, r4, #1
 80007d4:	4194      	sbcs	r4, r2
 80007d6:	4323      	orrs	r3, r4
 80007d8:	2407      	movs	r4, #7
 80007da:	2500      	movs	r5, #0
 80007dc:	401c      	ands	r4, r3
 80007de:	2201      	movs	r2, #1
 80007e0:	4641      	mov	r1, r8
 80007e2:	400a      	ands	r2, r1
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d004      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007e8:	210f      	movs	r1, #15
 80007ea:	4019      	ands	r1, r3
 80007ec:	2904      	cmp	r1, #4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fsub+0x9e>
 80007f0:	3304      	adds	r3, #4
 80007f2:	0159      	lsls	r1, r3, #5
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fsub+0xa4>
 80007f6:	e080      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80007f8:	3501      	adds	r5, #1
 80007fa:	b2ec      	uxtb	r4, r5
 80007fc:	2dff      	cmp	r5, #255	; 0xff
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0xae>
 8000800:	e0a3      	b.n	800094a <__aeabi_fsub+0x1f6>
 8000802:	24ff      	movs	r4, #255	; 0xff
 8000804:	2300      	movs	r3, #0
 8000806:	025b      	lsls	r3, r3, #9
 8000808:	05e4      	lsls	r4, r4, #23
 800080a:	0a58      	lsrs	r0, r3, #9
 800080c:	07d2      	lsls	r2, r2, #31
 800080e:	4320      	orrs	r0, r4
 8000810:	4310      	orrs	r0, r2
 8000812:	bc0c      	pop	{r2, r3}
 8000814:	4690      	mov	r8, r2
 8000816:	4699      	mov	r9, r3
 8000818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081a:	2e00      	cmp	r6, #0
 800081c:	d174      	bne.n	8000908 <__aeabi_fsub+0x1b4>
 800081e:	1c60      	adds	r0, r4, #1
 8000820:	b2c0      	uxtb	r0, r0
 8000822:	2801      	cmp	r0, #1
 8000824:	dc00      	bgt.n	8000828 <__aeabi_fsub+0xd4>
 8000826:	e0a7      	b.n	8000978 <__aeabi_fsub+0x224>
 8000828:	464a      	mov	r2, r9
 800082a:	1a9c      	subs	r4, r3, r2
 800082c:	0162      	lsls	r2, r4, #5
 800082e:	d500      	bpl.n	8000832 <__aeabi_fsub+0xde>
 8000830:	e0b6      	b.n	80009a0 <__aeabi_fsub+0x24c>
 8000832:	2c00      	cmp	r4, #0
 8000834:	d1be      	bne.n	80007b4 <__aeabi_fsub+0x60>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	2300      	movs	r3, #0
 800083c:	e7e3      	b.n	8000806 <__aeabi_fsub+0xb2>
 800083e:	2e00      	cmp	r6, #0
 8000840:	dc00      	bgt.n	8000844 <__aeabi_fsub+0xf0>
 8000842:	e085      	b.n	8000950 <__aeabi_fsub+0x1fc>
 8000844:	2800      	cmp	r0, #0
 8000846:	d046      	beq.n	80008d6 <__aeabi_fsub+0x182>
 8000848:	2cff      	cmp	r4, #255	; 0xff
 800084a:	d049      	beq.n	80008e0 <__aeabi_fsub+0x18c>
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	4648      	mov	r0, r9
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4310      	orrs	r0, r2
 8000854:	4681      	mov	r9, r0
 8000856:	2201      	movs	r2, #1
 8000858:	2e1b      	cmp	r6, #27
 800085a:	dc09      	bgt.n	8000870 <__aeabi_fsub+0x11c>
 800085c:	2020      	movs	r0, #32
 800085e:	464c      	mov	r4, r9
 8000860:	1b80      	subs	r0, r0, r6
 8000862:	4084      	lsls	r4, r0
 8000864:	464a      	mov	r2, r9
 8000866:	0020      	movs	r0, r4
 8000868:	40f2      	lsrs	r2, r6
 800086a:	1e44      	subs	r4, r0, #1
 800086c:	41a0      	sbcs	r0, r4
 800086e:	4302      	orrs	r2, r0
 8000870:	189b      	adds	r3, r3, r2
 8000872:	015a      	lsls	r2, r3, #5
 8000874:	d528      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 8000876:	3501      	adds	r5, #1
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x12a>
 800087c:	e0a8      	b.n	80009d0 <__aeabi_fsub+0x27c>
 800087e:	2201      	movs	r2, #1
 8000880:	2407      	movs	r4, #7
 8000882:	4994      	ldr	r1, [pc, #592]	; (8000ad4 <__aeabi_fsub+0x380>)
 8000884:	401a      	ands	r2, r3
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	400b      	ands	r3, r1
 800088a:	4313      	orrs	r3, r2
 800088c:	401c      	ands	r4, r3
 800088e:	e7a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000890:	2e00      	cmp	r6, #0
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x142>
 8000894:	e778      	b.n	8000788 <__aeabi_fsub+0x34>
 8000896:	e775      	b.n	8000784 <__aeabi_fsub+0x30>
 8000898:	2cff      	cmp	r4, #255	; 0xff
 800089a:	d054      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	4649      	mov	r1, r9
 80008a0:	04d2      	lsls	r2, r2, #19
 80008a2:	4311      	orrs	r1, r2
 80008a4:	4689      	mov	r9, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	2e1b      	cmp	r6, #27
 80008aa:	dc09      	bgt.n	80008c0 <__aeabi_fsub+0x16c>
 80008ac:	2120      	movs	r1, #32
 80008ae:	4648      	mov	r0, r9
 80008b0:	1b89      	subs	r1, r1, r6
 80008b2:	4088      	lsls	r0, r1
 80008b4:	464a      	mov	r2, r9
 80008b6:	0001      	movs	r1, r0
 80008b8:	40f2      	lsrs	r2, r6
 80008ba:	1e48      	subs	r0, r1, #1
 80008bc:	4181      	sbcs	r1, r0
 80008be:	430a      	orrs	r2, r1
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	d500      	bpl.n	80008c8 <__aeabi_fsub+0x174>
 80008c6:	e773      	b.n	80007b0 <__aeabi_fsub+0x5c>
 80008c8:	2201      	movs	r2, #1
 80008ca:	4641      	mov	r1, r8
 80008cc:	400a      	ands	r2, r1
 80008ce:	0759      	lsls	r1, r3, #29
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fsub+0x180>
 80008d2:	e789      	b.n	80007e8 <__aeabi_fsub+0x94>
 80008d4:	e011      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80008d6:	4648      	mov	r0, r9
 80008d8:	2800      	cmp	r0, #0
 80008da:	d158      	bne.n	800098e <__aeabi_fsub+0x23a>
 80008dc:	2cff      	cmp	r4, #255	; 0xff
 80008de:	d10c      	bne.n	80008fa <__aeabi_fsub+0x1a6>
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fsub+0x194>
 80008e6:	e78c      	b.n	8000802 <__aeabi_fsub+0xae>
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	03c0      	lsls	r0, r0, #15
 80008ec:	4303      	orrs	r3, r0
 80008ee:	025b      	lsls	r3, r3, #9
 80008f0:	0a5b      	lsrs	r3, r3, #9
 80008f2:	24ff      	movs	r4, #255	; 0xff
 80008f4:	e787      	b.n	8000806 <__aeabi_fsub+0xb2>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d025      	beq.n	8000946 <__aeabi_fsub+0x1f2>
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	2dff      	cmp	r5, #255	; 0xff
 80008fe:	d0f0      	beq.n	80008e2 <__aeabi_fsub+0x18e>
 8000900:	025b      	lsls	r3, r3, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	b2ec      	uxtb	r4, r5
 8000906:	e77e      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000908:	2c00      	cmp	r4, #0
 800090a:	d04d      	beq.n	80009a8 <__aeabi_fsub+0x254>
 800090c:	28ff      	cmp	r0, #255	; 0xff
 800090e:	d018      	beq.n	8000942 <__aeabi_fsub+0x1ee>
 8000910:	2480      	movs	r4, #128	; 0x80
 8000912:	04e4      	lsls	r4, r4, #19
 8000914:	4272      	negs	r2, r6
 8000916:	4323      	orrs	r3, r4
 8000918:	2a1b      	cmp	r2, #27
 800091a:	dd00      	ble.n	800091e <__aeabi_fsub+0x1ca>
 800091c:	e0c4      	b.n	8000aa8 <__aeabi_fsub+0x354>
 800091e:	001c      	movs	r4, r3
 8000920:	2520      	movs	r5, #32
 8000922:	40d4      	lsrs	r4, r2
 8000924:	1aaa      	subs	r2, r5, r2
 8000926:	4093      	lsls	r3, r2
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	4193      	sbcs	r3, r2
 800092c:	4323      	orrs	r3, r4
 800092e:	464a      	mov	r2, r9
 8000930:	0005      	movs	r5, r0
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4688      	mov	r8, r1
 8000936:	e738      	b.n	80007aa <__aeabi_fsub+0x56>
 8000938:	1c72      	adds	r2, r6, #1
 800093a:	d0f8      	beq.n	800092e <__aeabi_fsub+0x1da>
 800093c:	43f2      	mvns	r2, r6
 800093e:	28ff      	cmp	r0, #255	; 0xff
 8000940:	d1ea      	bne.n	8000918 <__aeabi_fsub+0x1c4>
 8000942:	000a      	movs	r2, r1
 8000944:	464b      	mov	r3, r9
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	e7d7      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800094a:	019b      	lsls	r3, r3, #6
 800094c:	0a5b      	lsrs	r3, r3, #9
 800094e:	e75a      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000950:	2e00      	cmp	r6, #0
 8000952:	d141      	bne.n	80009d8 <__aeabi_fsub+0x284>
 8000954:	1c65      	adds	r5, r4, #1
 8000956:	b2e9      	uxtb	r1, r5
 8000958:	2901      	cmp	r1, #1
 800095a:	dd45      	ble.n	80009e8 <__aeabi_fsub+0x294>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x20e>
 8000960:	e74f      	b.n	8000802 <__aeabi_fsub+0xae>
 8000962:	2407      	movs	r4, #7
 8000964:	444b      	add	r3, r9
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	401c      	ands	r4, r3
 800096a:	e738      	b.n	80007de <__aeabi_fsub+0x8a>
 800096c:	2207      	movs	r2, #7
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000970:	1a2d      	subs	r5, r5, r0
 8000972:	4023      	ands	r3, r4
 8000974:	4014      	ands	r4, r2
 8000976:	e732      	b.n	80007de <__aeabi_fsub+0x8a>
 8000978:	2c00      	cmp	r4, #0
 800097a:	d11d      	bne.n	80009b8 <__aeabi_fsub+0x264>
 800097c:	2b00      	cmp	r3, #0
 800097e:	d17a      	bne.n	8000a76 <__aeabi_fsub+0x322>
 8000980:	464b      	mov	r3, r9
 8000982:	2b00      	cmp	r3, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_fsub+0x234>
 8000986:	e091      	b.n	8000aac <__aeabi_fsub+0x358>
 8000988:	000a      	movs	r2, r1
 800098a:	2500      	movs	r5, #0
 800098c:	e7b5      	b.n	80008fa <__aeabi_fsub+0x1a6>
 800098e:	3e01      	subs	r6, #1
 8000990:	2e00      	cmp	r6, #0
 8000992:	d119      	bne.n	80009c8 <__aeabi_fsub+0x274>
 8000994:	444b      	add	r3, r9
 8000996:	e76c      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000998:	2cff      	cmp	r4, #255	; 0xff
 800099a:	d184      	bne.n	80008a6 <__aeabi_fsub+0x152>
 800099c:	25ff      	movs	r5, #255	; 0xff
 800099e:	e7ac      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009a0:	464a      	mov	r2, r9
 80009a2:	4688      	mov	r8, r1
 80009a4:	1ad4      	subs	r4, r2, r3
 80009a6:	e705      	b.n	80007b4 <__aeabi_fsub+0x60>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1c5      	bne.n	8000938 <__aeabi_fsub+0x1e4>
 80009ac:	000a      	movs	r2, r1
 80009ae:	28ff      	cmp	r0, #255	; 0xff
 80009b0:	d0c8      	beq.n	8000944 <__aeabi_fsub+0x1f0>
 80009b2:	0005      	movs	r5, r0
 80009b4:	464b      	mov	r3, r9
 80009b6:	e7a0      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d149      	bne.n	8000a50 <__aeabi_fsub+0x2fc>
 80009bc:	464b      	mov	r3, r9
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d077      	beq.n	8000ab2 <__aeabi_fsub+0x35e>
 80009c2:	000a      	movs	r2, r1
 80009c4:	25ff      	movs	r5, #255	; 0xff
 80009c6:	e798      	b.n	80008fa <__aeabi_fsub+0x1a6>
 80009c8:	2cff      	cmp	r4, #255	; 0xff
 80009ca:	d000      	beq.n	80009ce <__aeabi_fsub+0x27a>
 80009cc:	e743      	b.n	8000856 <__aeabi_fsub+0x102>
 80009ce:	e787      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009d0:	000a      	movs	r2, r1
 80009d2:	24ff      	movs	r4, #255	; 0xff
 80009d4:	2300      	movs	r3, #0
 80009d6:	e716      	b.n	8000806 <__aeabi_fsub+0xb2>
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d115      	bne.n	8000a08 <__aeabi_fsub+0x2b4>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d157      	bne.n	8000a90 <__aeabi_fsub+0x33c>
 80009e0:	28ff      	cmp	r0, #255	; 0xff
 80009e2:	d1e6      	bne.n	80009b2 <__aeabi_fsub+0x25e>
 80009e4:	464b      	mov	r3, r9
 80009e6:	e77b      	b.n	80008e0 <__aeabi_fsub+0x18c>
 80009e8:	2c00      	cmp	r4, #0
 80009ea:	d120      	bne.n	8000a2e <__aeabi_fsub+0x2da>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d057      	beq.n	8000aa0 <__aeabi_fsub+0x34c>
 80009f0:	4649      	mov	r1, r9
 80009f2:	2900      	cmp	r1, #0
 80009f4:	d053      	beq.n	8000a9e <__aeabi_fsub+0x34a>
 80009f6:	444b      	add	r3, r9
 80009f8:	015a      	lsls	r2, r3, #5
 80009fa:	d568      	bpl.n	8000ace <__aeabi_fsub+0x37a>
 80009fc:	2407      	movs	r4, #7
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <__aeabi_fsub+0x384>)
 8000a00:	401c      	ands	r4, r3
 8000a02:	2501      	movs	r5, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	e6ea      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a08:	28ff      	cmp	r0, #255	; 0xff
 8000a0a:	d0eb      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	04d2      	lsls	r2, r2, #19
 8000a10:	4276      	negs	r6, r6
 8000a12:	4313      	orrs	r3, r2
 8000a14:	2e1b      	cmp	r6, #27
 8000a16:	dc53      	bgt.n	8000ac0 <__aeabi_fsub+0x36c>
 8000a18:	2520      	movs	r5, #32
 8000a1a:	1bad      	subs	r5, r5, r6
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	40ab      	lsls	r3, r5
 8000a20:	40f2      	lsrs	r2, r6
 8000a22:	1e5c      	subs	r4, r3, #1
 8000a24:	41a3      	sbcs	r3, r4
 8000a26:	4313      	orrs	r3, r2
 8000a28:	444b      	add	r3, r9
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	e721      	b.n	8000872 <__aeabi_fsub+0x11e>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0d8      	beq.n	80009e4 <__aeabi_fsub+0x290>
 8000a32:	4649      	mov	r1, r9
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x2e6>
 8000a38:	e752      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	03c9      	lsls	r1, r1, #15
 8000a3e:	420f      	tst	r7, r1
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x2f0>
 8000a42:	e74d      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a44:	4660      	mov	r0, ip
 8000a46:	4208      	tst	r0, r1
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x2f8>
 8000a4a:	e749      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	e747      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a50:	4648      	mov	r0, r9
 8000a52:	25ff      	movs	r5, #255	; 0xff
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fsub+0x306>
 8000a58:	e74f      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	03d2      	lsls	r2, r2, #15
 8000a5e:	4217      	tst	r7, r2
 8000a60:	d004      	beq.n	8000a6c <__aeabi_fsub+0x318>
 8000a62:	4660      	mov	r0, ip
 8000a64:	4210      	tst	r0, r2
 8000a66:	d101      	bne.n	8000a6c <__aeabi_fsub+0x318>
 8000a68:	464b      	mov	r3, r9
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4641      	mov	r1, r8
 8000a70:	25ff      	movs	r5, #255	; 0xff
 8000a72:	400a      	ands	r2, r1
 8000a74:	e741      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000a76:	4648      	mov	r0, r9
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d01f      	beq.n	8000abc <__aeabi_fsub+0x368>
 8000a7c:	1a1a      	subs	r2, r3, r0
 8000a7e:	0150      	lsls	r0, r2, #5
 8000a80:	d520      	bpl.n	8000ac4 <__aeabi_fsub+0x370>
 8000a82:	464a      	mov	r2, r9
 8000a84:	2407      	movs	r4, #7
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	401c      	ands	r4, r3
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	e6a6      	b.n	80007de <__aeabi_fsub+0x8a>
 8000a90:	1c74      	adds	r4, r6, #1
 8000a92:	d0c9      	beq.n	8000a28 <__aeabi_fsub+0x2d4>
 8000a94:	43f6      	mvns	r6, r6
 8000a96:	28ff      	cmp	r0, #255	; 0xff
 8000a98:	d1bc      	bne.n	8000a14 <__aeabi_fsub+0x2c0>
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	e720      	b.n	80008e0 <__aeabi_fsub+0x18c>
 8000a9e:	4699      	mov	r9, r3
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	e72b      	b.n	8000900 <__aeabi_fsub+0x1ac>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e740      	b.n	800092e <__aeabi_fsub+0x1da>
 8000aac:	2200      	movs	r2, #0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e6a9      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	03db      	lsls	r3, r3, #15
 8000ab8:	24ff      	movs	r4, #255	; 0xff
 8000aba:	e6a4      	b.n	8000806 <__aeabi_fsub+0xb2>
 8000abc:	2500      	movs	r5, #0
 8000abe:	e71c      	b.n	80008fa <__aeabi_fsub+0x1a6>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e7b1      	b.n	8000a28 <__aeabi_fsub+0x2d4>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d0f1      	beq.n	8000aac <__aeabi_fsub+0x358>
 8000ac8:	0013      	movs	r3, r2
 8000aca:	2500      	movs	r5, #0
 8000acc:	e6fc      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ace:	2500      	movs	r5, #0
 8000ad0:	e6fa      	b.n	80008c8 <__aeabi_fsub+0x174>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	7dffffff 	.word	0x7dffffff
 8000ad8:	fbffffff 	.word	0xfbffffff

08000adc <__aeabi_ui2f>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	1e04      	subs	r4, r0, #0
 8000ae0:	d034      	beq.n	8000b4c <__aeabi_ui2f+0x70>
 8000ae2:	f001 fe0f 	bl	8002704 <__clzsi2>
 8000ae6:	229e      	movs	r2, #158	; 0x9e
 8000ae8:	1a12      	subs	r2, r2, r0
 8000aea:	2a96      	cmp	r2, #150	; 0x96
 8000aec:	dc07      	bgt.n	8000afe <__aeabi_ui2f+0x22>
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	2808      	cmp	r0, #8
 8000af2:	dd2e      	ble.n	8000b52 <__aeabi_ui2f+0x76>
 8000af4:	3808      	subs	r0, #8
 8000af6:	4084      	lsls	r4, r0
 8000af8:	0260      	lsls	r0, r4, #9
 8000afa:	0a40      	lsrs	r0, r0, #9
 8000afc:	e021      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000afe:	2a99      	cmp	r2, #153	; 0x99
 8000b00:	dd09      	ble.n	8000b16 <__aeabi_ui2f+0x3a>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0021      	movs	r1, r4
 8000b06:	331b      	adds	r3, #27
 8000b08:	4099      	lsls	r1, r3
 8000b0a:	1e4b      	subs	r3, r1, #1
 8000b0c:	4199      	sbcs	r1, r3
 8000b0e:	2305      	movs	r3, #5
 8000b10:	1a1b      	subs	r3, r3, r0
 8000b12:	40dc      	lsrs	r4, r3
 8000b14:	430c      	orrs	r4, r1
 8000b16:	2805      	cmp	r0, #5
 8000b18:	dd01      	ble.n	8000b1e <__aeabi_ui2f+0x42>
 8000b1a:	1f43      	subs	r3, r0, #5
 8000b1c:	409c      	lsls	r4, r3
 8000b1e:	0023      	movs	r3, r4
 8000b20:	490d      	ldr	r1, [pc, #52]	; (8000b58 <__aeabi_ui2f+0x7c>)
 8000b22:	400b      	ands	r3, r1
 8000b24:	0765      	lsls	r5, r4, #29
 8000b26:	d009      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b28:	250f      	movs	r5, #15
 8000b2a:	402c      	ands	r4, r5
 8000b2c:	2c04      	cmp	r4, #4
 8000b2e:	d005      	beq.n	8000b3c <__aeabi_ui2f+0x60>
 8000b30:	3304      	adds	r3, #4
 8000b32:	015c      	lsls	r4, r3, #5
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_ui2f+0x60>
 8000b36:	229f      	movs	r2, #159	; 0x9f
 8000b38:	400b      	ands	r3, r1
 8000b3a:	1a12      	subs	r2, r2, r0
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	0a58      	lsrs	r0, r3, #9
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	0240      	lsls	r0, r0, #9
 8000b44:	05d2      	lsls	r2, r2, #23
 8000b46:	0a40      	lsrs	r0, r0, #9
 8000b48:	4310      	orrs	r0, r2
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	e7f7      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b52:	0260      	lsls	r0, r4, #9
 8000b54:	0a40      	lsrs	r0, r0, #9
 8000b56:	e7f4      	b.n	8000b42 <__aeabi_ui2f+0x66>
 8000b58:	fbffffff 	.word	0xfbffffff

08000b5c <__aeabi_dadd>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	000c      	movs	r4, r1
 8000b66:	0309      	lsls	r1, r1, #12
 8000b68:	b5c0      	push	{r6, r7, lr}
 8000b6a:	0a49      	lsrs	r1, r1, #9
 8000b6c:	0f47      	lsrs	r7, r0, #29
 8000b6e:	005e      	lsls	r6, r3, #1
 8000b70:	4339      	orrs	r1, r7
 8000b72:	031f      	lsls	r7, r3, #12
 8000b74:	0fdb      	lsrs	r3, r3, #31
 8000b76:	469c      	mov	ip, r3
 8000b78:	0065      	lsls	r5, r4, #1
 8000b7a:	0a7b      	lsrs	r3, r7, #9
 8000b7c:	0f57      	lsrs	r7, r2, #29
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	0d6d      	lsrs	r5, r5, #21
 8000b82:	0fe4      	lsrs	r4, r4, #31
 8000b84:	0d76      	lsrs	r6, r6, #21
 8000b86:	46a1      	mov	r9, r4
 8000b88:	00c0      	lsls	r0, r0, #3
 8000b8a:	46b8      	mov	r8, r7
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	1bab      	subs	r3, r5, r6
 8000b90:	4564      	cmp	r4, ip
 8000b92:	d07b      	beq.n	8000c8c <__aeabi_dadd+0x130>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dd5f      	ble.n	8000c58 <__aeabi_dadd+0xfc>
 8000b98:	2e00      	cmp	r6, #0
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dadd+0x42>
 8000b9c:	e0a4      	b.n	8000ce8 <__aeabi_dadd+0x18c>
 8000b9e:	003e      	movs	r6, r7
 8000ba0:	4316      	orrs	r6, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4a>
 8000ba4:	e112      	b.n	8000dcc <__aeabi_dadd+0x270>
 8000ba6:	1e5e      	subs	r6, r3, #1
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x52>
 8000bac:	e19e      	b.n	8000eec <__aeabi_dadd+0x390>
 8000bae:	1a87      	subs	r7, r0, r2
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	42b8      	cmp	r0, r7
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	1ac9      	subs	r1, r1, r3
 8000bba:	4240      	negs	r0, r0
 8000bbc:	1a09      	subs	r1, r1, r0
 8000bbe:	020b      	lsls	r3, r1, #8
 8000bc0:	d400      	bmi.n	8000bc4 <__aeabi_dadd+0x68>
 8000bc2:	e131      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000bc4:	0249      	lsls	r1, r1, #9
 8000bc6:	0a4e      	lsrs	r6, r1, #9
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x72>
 8000bcc:	e16e      	b.n	8000eac <__aeabi_dadd+0x350>
 8000bce:	0030      	movs	r0, r6
 8000bd0:	f001 fd98 	bl	8002704 <__clzsi2>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	dd00      	ble.n	8000bde <__aeabi_dadd+0x82>
 8000bdc:	e161      	b.n	8000ea2 <__aeabi_dadd+0x346>
 8000bde:	2220      	movs	r2, #32
 8000be0:	0039      	movs	r1, r7
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	409e      	lsls	r6, r3
 8000be6:	40d1      	lsrs	r1, r2
 8000be8:	409f      	lsls	r7, r3
 8000bea:	430e      	orrs	r6, r1
 8000bec:	429d      	cmp	r5, r3
 8000bee:	dd00      	ble.n	8000bf2 <__aeabi_dadd+0x96>
 8000bf0:	e151      	b.n	8000e96 <__aeabi_dadd+0x33a>
 8000bf2:	1b5d      	subs	r5, r3, r5
 8000bf4:	1c6b      	adds	r3, r5, #1
 8000bf6:	2b1f      	cmp	r3, #31
 8000bf8:	dd00      	ble.n	8000bfc <__aeabi_dadd+0xa0>
 8000bfa:	e17c      	b.n	8000ef6 <__aeabi_dadd+0x39a>
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	1ac9      	subs	r1, r1, r3
 8000c00:	003d      	movs	r5, r7
 8000c02:	0030      	movs	r0, r6
 8000c04:	408f      	lsls	r7, r1
 8000c06:	4088      	lsls	r0, r1
 8000c08:	40dd      	lsrs	r5, r3
 8000c0a:	1e79      	subs	r1, r7, #1
 8000c0c:	418f      	sbcs	r7, r1
 8000c0e:	0031      	movs	r1, r6
 8000c10:	2207      	movs	r2, #7
 8000c12:	4328      	orrs	r0, r5
 8000c14:	40d9      	lsrs	r1, r3
 8000c16:	2500      	movs	r5, #0
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	403a      	ands	r2, r7
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d009      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c20:	230f      	movs	r3, #15
 8000c22:	403b      	ands	r3, r7
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dadd+0xd8>
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	42bb      	cmp	r3, r7
 8000c2c:	41bf      	sbcs	r7, r7
 8000c2e:	427f      	negs	r7, r7
 8000c30:	19c9      	adds	r1, r1, r7
 8000c32:	001f      	movs	r7, r3
 8000c34:	020b      	lsls	r3, r1, #8
 8000c36:	d400      	bmi.n	8000c3a <__aeabi_dadd+0xde>
 8000c38:	e226      	b.n	8001088 <__aeabi_dadd+0x52c>
 8000c3a:	1c6a      	adds	r2, r5, #1
 8000c3c:	4bc6      	ldr	r3, [pc, #792]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c3e:	0555      	lsls	r5, r2, #21
 8000c40:	0d6d      	lsrs	r5, r5, #21
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0xec>
 8000c46:	e106      	b.n	8000e56 <__aeabi_dadd+0x2fa>
 8000c48:	4ac4      	ldr	r2, [pc, #784]	; (8000f5c <__aeabi_dadd+0x400>)
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	0753      	lsls	r3, r2, #29
 8000c50:	0252      	lsls	r2, r2, #9
 8000c52:	433b      	orrs	r3, r7
 8000c54:	0b12      	lsrs	r2, r2, #12
 8000c56:	e08e      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dadd+0x102>
 8000c5c:	e0b8      	b.n	8000dd0 <__aeabi_dadd+0x274>
 8000c5e:	1c6b      	adds	r3, r5, #1
 8000c60:	055b      	lsls	r3, r3, #21
 8000c62:	0d5b      	lsrs	r3, r3, #21
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_dadd+0x10e>
 8000c68:	e130      	b.n	8000ecc <__aeabi_dadd+0x370>
 8000c6a:	1a87      	subs	r7, r0, r2
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	42b8      	cmp	r0, r7
 8000c70:	41b6      	sbcs	r6, r6
 8000c72:	1acb      	subs	r3, r1, r3
 8000c74:	4276      	negs	r6, r6
 8000c76:	1b9e      	subs	r6, r3, r6
 8000c78:	0233      	lsls	r3, r6, #8
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_dadd+0x122>
 8000c7c:	e14c      	b.n	8000f18 <__aeabi_dadd+0x3bc>
 8000c7e:	003b      	movs	r3, r7
 8000c80:	4333      	orrs	r3, r6
 8000c82:	d1a1      	bne.n	8000bc8 <__aeabi_dadd+0x6c>
 8000c84:	2200      	movs	r2, #0
 8000c86:	2400      	movs	r4, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	e070      	b.n	8000d6e <__aeabi_dadd+0x212>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_dadd+0x136>
 8000c90:	e0e5      	b.n	8000e5e <__aeabi_dadd+0x302>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x13c>
 8000c96:	e083      	b.n	8000da0 <__aeabi_dadd+0x244>
 8000c98:	4eaf      	ldr	r6, [pc, #700]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000c9a:	42b5      	cmp	r5, r6
 8000c9c:	d060      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000c9e:	2680      	movs	r6, #128	; 0x80
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4337      	orrs	r7, r6
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	2b38      	cmp	r3, #56	; 0x38
 8000ca8:	dc00      	bgt.n	8000cac <__aeabi_dadd+0x150>
 8000caa:	e13e      	b.n	8000f2a <__aeabi_dadd+0x3ce>
 8000cac:	4643      	mov	r3, r8
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	001f      	movs	r7, r3
 8000cb2:	1e7a      	subs	r2, r7, #1
 8000cb4:	4197      	sbcs	r7, r2
 8000cb6:	183f      	adds	r7, r7, r0
 8000cb8:	4287      	cmp	r7, r0
 8000cba:	4180      	sbcs	r0, r0
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	1809      	adds	r1, r1, r0
 8000cc0:	020b      	lsls	r3, r1, #8
 8000cc2:	d400      	bmi.n	8000cc6 <__aeabi_dadd+0x16a>
 8000cc4:	e0b0      	b.n	8000e28 <__aeabi_dadd+0x2cc>
 8000cc6:	4ba4      	ldr	r3, [pc, #656]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cc8:	3501      	adds	r5, #1
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_dadd+0x174>
 8000cce:	e0c3      	b.n	8000e58 <__aeabi_dadd+0x2fc>
 8000cd0:	4aa2      	ldr	r2, [pc, #648]	; (8000f5c <__aeabi_dadd+0x400>)
 8000cd2:	087b      	lsrs	r3, r7, #1
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	400f      	ands	r7, r1
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	0851      	lsrs	r1, r2, #1
 8000cde:	07d3      	lsls	r3, r2, #31
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	403a      	ands	r2, r7
 8000ce6:	e799      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ce8:	4e9b      	ldr	r6, [pc, #620]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000cea:	42b5      	cmp	r5, r6
 8000cec:	d038      	beq.n	8000d60 <__aeabi_dadd+0x204>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0436      	lsls	r6, r6, #16
 8000cf2:	4337      	orrs	r7, r6
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	2b38      	cmp	r3, #56	; 0x38
 8000cf8:	dd00      	ble.n	8000cfc <__aeabi_dadd+0x1a0>
 8000cfa:	e0dc      	b.n	8000eb6 <__aeabi_dadd+0x35a>
 8000cfc:	2b1f      	cmp	r3, #31
 8000cfe:	dc00      	bgt.n	8000d02 <__aeabi_dadd+0x1a6>
 8000d00:	e130      	b.n	8000f64 <__aeabi_dadd+0x408>
 8000d02:	001e      	movs	r6, r3
 8000d04:	4647      	mov	r7, r8
 8000d06:	3e20      	subs	r6, #32
 8000d08:	40f7      	lsrs	r7, r6
 8000d0a:	46bc      	mov	ip, r7
 8000d0c:	2b20      	cmp	r3, #32
 8000d0e:	d004      	beq.n	8000d1a <__aeabi_dadd+0x1be>
 8000d10:	2640      	movs	r6, #64	; 0x40
 8000d12:	1af3      	subs	r3, r6, r3
 8000d14:	4646      	mov	r6, r8
 8000d16:	409e      	lsls	r6, r3
 8000d18:	4332      	orrs	r2, r6
 8000d1a:	0017      	movs	r7, r2
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	1e7a      	subs	r2, r7, #1
 8000d20:	4197      	sbcs	r7, r2
 8000d22:	431f      	orrs	r7, r3
 8000d24:	e0cc      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x1d0>
 8000d2a:	e204      	b.n	8001136 <__aeabi_dadd+0x5da>
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x1d8>
 8000d32:	e159      	b.n	8000fe8 <__aeabi_dadd+0x48c>
 8000d34:	074b      	lsls	r3, r1, #29
 8000d36:	08c0      	lsrs	r0, r0, #3
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	08c9      	lsrs	r1, r1, #3
 8000d3e:	031b      	lsls	r3, r3, #12
 8000d40:	4219      	tst	r1, r3
 8000d42:	d008      	beq.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d44:	4645      	mov	r5, r8
 8000d46:	08ed      	lsrs	r5, r5, #3
 8000d48:	421d      	tst	r5, r3
 8000d4a:	d104      	bne.n	8000d56 <__aeabi_dadd+0x1fa>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	08d0      	lsrs	r0, r2, #3
 8000d50:	0759      	lsls	r1, r3, #29
 8000d52:	4308      	orrs	r0, r1
 8000d54:	0029      	movs	r1, r5
 8000d56:	0f42      	lsrs	r2, r0, #29
 8000d58:	00c9      	lsls	r1, r1, #3
 8000d5a:	4d7f      	ldr	r5, [pc, #508]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	00c0      	lsls	r0, r0, #3
 8000d60:	074b      	lsls	r3, r1, #29
 8000d62:	08ca      	lsrs	r2, r1, #3
 8000d64:	497c      	ldr	r1, [pc, #496]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	4303      	orrs	r3, r0
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	d068      	beq.n	8000e40 <__aeabi_dadd+0x2e4>
 8000d6e:	0312      	lsls	r2, r2, #12
 8000d70:	056d      	lsls	r5, r5, #21
 8000d72:	0b12      	lsrs	r2, r2, #12
 8000d74:	0d6d      	lsrs	r5, r5, #21
 8000d76:	2100      	movs	r1, #0
 8000d78:	0312      	lsls	r2, r2, #12
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	0b13      	lsrs	r3, r2, #12
 8000d7e:	0d0a      	lsrs	r2, r1, #20
 8000d80:	0512      	lsls	r2, r2, #20
 8000d82:	431a      	orrs	r2, r3
 8000d84:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <__aeabi_dadd+0x404>)
 8000d86:	052d      	lsls	r5, r5, #20
 8000d88:	4013      	ands	r3, r2
 8000d8a:	432b      	orrs	r3, r5
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	07e4      	lsls	r4, r4, #31
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	4323      	orrs	r3, r4
 8000d94:	0019      	movs	r1, r3
 8000d96:	bc1c      	pop	{r2, r3, r4}
 8000d98:	4690      	mov	r8, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	46a2      	mov	sl, r4
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	003e      	movs	r6, r7
 8000da2:	4316      	orrs	r6, r2
 8000da4:	d012      	beq.n	8000dcc <__aeabi_dadd+0x270>
 8000da6:	1e5e      	subs	r6, r3, #1
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x252>
 8000dac:	e100      	b.n	8000fb0 <__aeabi_dadd+0x454>
 8000dae:	1887      	adds	r7, r0, r2
 8000db0:	4287      	cmp	r7, r0
 8000db2:	4180      	sbcs	r0, r0
 8000db4:	4441      	add	r1, r8
 8000db6:	4240      	negs	r0, r0
 8000db8:	1809      	adds	r1, r1, r0
 8000dba:	2501      	movs	r5, #1
 8000dbc:	020b      	lsls	r3, r1, #8
 8000dbe:	d533      	bpl.n	8000e28 <__aeabi_dadd+0x2cc>
 8000dc0:	2502      	movs	r5, #2
 8000dc2:	e785      	b.n	8000cd0 <__aeabi_dadd+0x174>
 8000dc4:	4664      	mov	r4, ip
 8000dc6:	0033      	movs	r3, r6
 8000dc8:	4641      	mov	r1, r8
 8000dca:	0010      	movs	r0, r2
 8000dcc:	001d      	movs	r5, r3
 8000dce:	e7c7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dadd+0x27a>
 8000dd4:	e0da      	b.n	8000f8c <__aeabi_dadd+0x430>
 8000dd6:	000c      	movs	r4, r1
 8000dd8:	4304      	orrs	r4, r0
 8000dda:	d0f3      	beq.n	8000dc4 <__aeabi_dadd+0x268>
 8000ddc:	1c5c      	adds	r4, r3, #1
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x286>
 8000de0:	e19f      	b.n	8001122 <__aeabi_dadd+0x5c6>
 8000de2:	4c5d      	ldr	r4, [pc, #372]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000de4:	42a6      	cmp	r6, r4
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x28e>
 8000de8:	e12f      	b.n	800104a <__aeabi_dadd+0x4ee>
 8000dea:	43db      	mvns	r3, r3
 8000dec:	2b38      	cmp	r3, #56	; 0x38
 8000dee:	dd00      	ble.n	8000df2 <__aeabi_dadd+0x296>
 8000df0:	e166      	b.n	80010c0 <__aeabi_dadd+0x564>
 8000df2:	2b1f      	cmp	r3, #31
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x29c>
 8000df6:	e183      	b.n	8001100 <__aeabi_dadd+0x5a4>
 8000df8:	2420      	movs	r4, #32
 8000dfa:	0005      	movs	r5, r0
 8000dfc:	1ae4      	subs	r4, r4, r3
 8000dfe:	000f      	movs	r7, r1
 8000e00:	40dd      	lsrs	r5, r3
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	40a0      	lsls	r0, r4
 8000e06:	4643      	mov	r3, r8
 8000e08:	40a7      	lsls	r7, r4
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	1e44      	subs	r4, r0, #1
 8000e0e:	41a0      	sbcs	r0, r4
 8000e10:	4698      	mov	r8, r3
 8000e12:	432f      	orrs	r7, r5
 8000e14:	4338      	orrs	r0, r7
 8000e16:	1a17      	subs	r7, r2, r0
 8000e18:	42ba      	cmp	r2, r7
 8000e1a:	4192      	sbcs	r2, r2
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4252      	negs	r2, r2
 8000e20:	1a99      	subs	r1, r3, r2
 8000e22:	4664      	mov	r4, ip
 8000e24:	0035      	movs	r5, r6
 8000e26:	e6ca      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000e28:	2207      	movs	r2, #7
 8000e2a:	403a      	ands	r2, r7
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x2d6>
 8000e30:	e6f6      	b.n	8000c20 <__aeabi_dadd+0xc4>
 8000e32:	074b      	lsls	r3, r1, #29
 8000e34:	08ca      	lsrs	r2, r1, #3
 8000e36:	4948      	ldr	r1, [pc, #288]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e38:	08ff      	lsrs	r7, r7, #3
 8000e3a:	433b      	orrs	r3, r7
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d196      	bne.n	8000d6e <__aeabi_dadd+0x212>
 8000e40:	0019      	movs	r1, r3
 8000e42:	4311      	orrs	r1, r2
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x2ec>
 8000e46:	e19e      	b.n	8001186 <__aeabi_dadd+0x62a>
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0309      	lsls	r1, r1, #12
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	0312      	lsls	r2, r2, #12
 8000e50:	0b12      	lsrs	r2, r2, #12
 8000e52:	4d41      	ldr	r5, [pc, #260]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e54:	e78f      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e56:	0015      	movs	r5, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e78b      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d000      	beq.n	8000e64 <__aeabi_dadd+0x308>
 8000e62:	e0c7      	b.n	8000ff4 <__aeabi_dadd+0x498>
 8000e64:	1c6b      	adds	r3, r5, #1
 8000e66:	055f      	lsls	r7, r3, #21
 8000e68:	0d7f      	lsrs	r7, r7, #21
 8000e6a:	2f01      	cmp	r7, #1
 8000e6c:	dc00      	bgt.n	8000e70 <__aeabi_dadd+0x314>
 8000e6e:	e0f1      	b.n	8001054 <__aeabi_dadd+0x4f8>
 8000e70:	4d39      	ldr	r5, [pc, #228]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x31c>
 8000e76:	e0b9      	b.n	8000fec <__aeabi_dadd+0x490>
 8000e78:	1885      	adds	r5, r0, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	4285      	cmp	r5, r0
 8000e7e:	4189      	sbcs	r1, r1
 8000e80:	4442      	add	r2, r8
 8000e82:	4249      	negs	r1, r1
 8000e84:	1851      	adds	r1, r2, r1
 8000e86:	2207      	movs	r2, #7
 8000e88:	07cf      	lsls	r7, r1, #31
 8000e8a:	086d      	lsrs	r5, r5, #1
 8000e8c:	432f      	orrs	r7, r5
 8000e8e:	0849      	lsrs	r1, r1, #1
 8000e90:	403a      	ands	r2, r7
 8000e92:	001d      	movs	r5, r3
 8000e94:	e6c2      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000e96:	2207      	movs	r2, #7
 8000e98:	4930      	ldr	r1, [pc, #192]	; (8000f5c <__aeabi_dadd+0x400>)
 8000e9a:	1aed      	subs	r5, r5, r3
 8000e9c:	4031      	ands	r1, r6
 8000e9e:	403a      	ands	r2, r7
 8000ea0:	e6bc      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8000ea2:	003e      	movs	r6, r7
 8000ea4:	3828      	subs	r0, #40	; 0x28
 8000ea6:	4086      	lsls	r6, r0
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	e69f      	b.n	8000bec <__aeabi_dadd+0x90>
 8000eac:	0038      	movs	r0, r7
 8000eae:	f001 fc29 	bl	8002704 <__clzsi2>
 8000eb2:	3020      	adds	r0, #32
 8000eb4:	e68e      	b.n	8000bd4 <__aeabi_dadd+0x78>
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	001f      	movs	r7, r3
 8000ebc:	1e7a      	subs	r2, r7, #1
 8000ebe:	4197      	sbcs	r7, r2
 8000ec0:	1bc7      	subs	r7, r0, r7
 8000ec2:	42b8      	cmp	r0, r7
 8000ec4:	4180      	sbcs	r0, r0
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	1a09      	subs	r1, r1, r0
 8000eca:	e678      	b.n	8000bbe <__aeabi_dadd+0x62>
 8000ecc:	000e      	movs	r6, r1
 8000ece:	003b      	movs	r3, r7
 8000ed0:	4306      	orrs	r6, r0
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d161      	bne.n	8000f9c <__aeabi_dadd+0x440>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dadd+0x382>
 8000edc:	e0f4      	b.n	80010c8 <__aeabi_dadd+0x56c>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x388>
 8000ee2:	e11b      	b.n	800111c <__aeabi_dadd+0x5c0>
 8000ee4:	4664      	mov	r4, ip
 8000ee6:	0039      	movs	r1, r7
 8000ee8:	0010      	movs	r0, r2
 8000eea:	e739      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000eec:	4f1a      	ldr	r7, [pc, #104]	; (8000f58 <__aeabi_dadd+0x3fc>)
 8000eee:	42bb      	cmp	r3, r7
 8000ef0:	d07a      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000ef2:	0033      	movs	r3, r6
 8000ef4:	e6ff      	b.n	8000cf6 <__aeabi_dadd+0x19a>
 8000ef6:	0030      	movs	r0, r6
 8000ef8:	3d1f      	subs	r5, #31
 8000efa:	40e8      	lsrs	r0, r5
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d003      	beq.n	8000f08 <__aeabi_dadd+0x3ac>
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	1acb      	subs	r3, r1, r3
 8000f04:	409e      	lsls	r6, r3
 8000f06:	4337      	orrs	r7, r6
 8000f08:	1e7b      	subs	r3, r7, #1
 8000f0a:	419f      	sbcs	r7, r3
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	4307      	orrs	r7, r0
 8000f10:	403a      	ands	r2, r7
 8000f12:	2100      	movs	r1, #0
 8000f14:	2500      	movs	r5, #0
 8000f16:	e789      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8000f18:	1a17      	subs	r7, r2, r0
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	42ba      	cmp	r2, r7
 8000f1e:	41b6      	sbcs	r6, r6
 8000f20:	1a59      	subs	r1, r3, r1
 8000f22:	4276      	negs	r6, r6
 8000f24:	1b8e      	subs	r6, r1, r6
 8000f26:	4664      	mov	r4, ip
 8000f28:	e64e      	b.n	8000bc8 <__aeabi_dadd+0x6c>
 8000f2a:	2b1f      	cmp	r3, #31
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dadd+0x3d4>
 8000f2e:	e0ad      	b.n	800108c <__aeabi_dadd+0x530>
 8000f30:	2620      	movs	r6, #32
 8000f32:	4647      	mov	r7, r8
 8000f34:	1af6      	subs	r6, r6, r3
 8000f36:	40b7      	lsls	r7, r6
 8000f38:	46b9      	mov	r9, r7
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	46b2      	mov	sl, r6
 8000f3e:	40df      	lsrs	r7, r3
 8000f40:	464e      	mov	r6, r9
 8000f42:	433e      	orrs	r6, r7
 8000f44:	0037      	movs	r7, r6
 8000f46:	4656      	mov	r6, sl
 8000f48:	40b2      	lsls	r2, r6
 8000f4a:	1e56      	subs	r6, r2, #1
 8000f4c:	41b2      	sbcs	r2, r6
 8000f4e:	4317      	orrs	r7, r2
 8000f50:	4642      	mov	r2, r8
 8000f52:	40da      	lsrs	r2, r3
 8000f54:	1889      	adds	r1, r1, r2
 8000f56:	e6ae      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 8000f58:	000007ff 	.word	0x000007ff
 8000f5c:	ff7fffff 	.word	0xff7fffff
 8000f60:	800fffff 	.word	0x800fffff
 8000f64:	2620      	movs	r6, #32
 8000f66:	4647      	mov	r7, r8
 8000f68:	1af6      	subs	r6, r6, r3
 8000f6a:	40b7      	lsls	r7, r6
 8000f6c:	46b9      	mov	r9, r7
 8000f6e:	0017      	movs	r7, r2
 8000f70:	46b2      	mov	sl, r6
 8000f72:	40df      	lsrs	r7, r3
 8000f74:	464e      	mov	r6, r9
 8000f76:	433e      	orrs	r6, r7
 8000f78:	0037      	movs	r7, r6
 8000f7a:	4656      	mov	r6, sl
 8000f7c:	40b2      	lsls	r2, r6
 8000f7e:	1e56      	subs	r6, r2, #1
 8000f80:	41b2      	sbcs	r2, r6
 8000f82:	4317      	orrs	r7, r2
 8000f84:	4642      	mov	r2, r8
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	e799      	b.n	8000ec0 <__aeabi_dadd+0x364>
 8000f8c:	4c7f      	ldr	r4, [pc, #508]	; (800118c <__aeabi_dadd+0x630>)
 8000f8e:	42a6      	cmp	r6, r4
 8000f90:	d05b      	beq.n	800104a <__aeabi_dadd+0x4ee>
 8000f92:	2480      	movs	r4, #128	; 0x80
 8000f94:	0424      	lsls	r4, r4, #16
 8000f96:	425b      	negs	r3, r3
 8000f98:	4321      	orrs	r1, r4
 8000f9a:	e727      	b.n	8000dec <__aeabi_dadd+0x290>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d10c      	bne.n	8000fba <__aeabi_dadd+0x45e>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dadd+0x44a>
 8000fa4:	e0cb      	b.n	800113e <__aeabi_dadd+0x5e2>
 8000fa6:	4664      	mov	r4, ip
 8000fa8:	0039      	movs	r1, r7
 8000faa:	0010      	movs	r0, r2
 8000fac:	4d77      	ldr	r5, [pc, #476]	; (800118c <__aeabi_dadd+0x630>)
 8000fae:	e6d7      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fb0:	4f76      	ldr	r7, [pc, #472]	; (800118c <__aeabi_dadd+0x630>)
 8000fb2:	42bb      	cmp	r3, r7
 8000fb4:	d018      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fb6:	0033      	movs	r3, r6
 8000fb8:	e675      	b.n	8000ca6 <__aeabi_dadd+0x14a>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d014      	beq.n	8000fe8 <__aeabi_dadd+0x48c>
 8000fbe:	074b      	lsls	r3, r1, #29
 8000fc0:	08c0      	lsrs	r0, r0, #3
 8000fc2:	4318      	orrs	r0, r3
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	08c9      	lsrs	r1, r1, #3
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	4219      	tst	r1, r3
 8000fcc:	d007      	beq.n	8000fde <__aeabi_dadd+0x482>
 8000fce:	08fc      	lsrs	r4, r7, #3
 8000fd0:	421c      	tst	r4, r3
 8000fd2:	d104      	bne.n	8000fde <__aeabi_dadd+0x482>
 8000fd4:	0779      	lsls	r1, r7, #29
 8000fd6:	08d0      	lsrs	r0, r2, #3
 8000fd8:	4308      	orrs	r0, r1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	0021      	movs	r1, r4
 8000fde:	464c      	mov	r4, r9
 8000fe0:	0f42      	lsrs	r2, r0, #29
 8000fe2:	00c9      	lsls	r1, r1, #3
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	00c0      	lsls	r0, r0, #3
 8000fe8:	4d68      	ldr	r5, [pc, #416]	; (800118c <__aeabi_dadd+0x630>)
 8000fea:	e6b9      	b.n	8000d60 <__aeabi_dadd+0x204>
 8000fec:	001d      	movs	r5, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e6c0      	b.n	8000d76 <__aeabi_dadd+0x21a>
 8000ff4:	2d00      	cmp	r5, #0
 8000ff6:	d15b      	bne.n	80010b0 <__aeabi_dadd+0x554>
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dadd+0x4a4>
 8000ffe:	e6e2      	b.n	8000dc6 <__aeabi_dadd+0x26a>
 8001000:	1c5d      	adds	r5, r3, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x4aa>
 8001004:	e0b0      	b.n	8001168 <__aeabi_dadd+0x60c>
 8001006:	4d61      	ldr	r5, [pc, #388]	; (800118c <__aeabi_dadd+0x630>)
 8001008:	42ae      	cmp	r6, r5
 800100a:	d01f      	beq.n	800104c <__aeabi_dadd+0x4f0>
 800100c:	43db      	mvns	r3, r3
 800100e:	2b38      	cmp	r3, #56	; 0x38
 8001010:	dc71      	bgt.n	80010f6 <__aeabi_dadd+0x59a>
 8001012:	2b1f      	cmp	r3, #31
 8001014:	dd00      	ble.n	8001018 <__aeabi_dadd+0x4bc>
 8001016:	e096      	b.n	8001146 <__aeabi_dadd+0x5ea>
 8001018:	2520      	movs	r5, #32
 800101a:	000f      	movs	r7, r1
 800101c:	1aed      	subs	r5, r5, r3
 800101e:	40af      	lsls	r7, r5
 8001020:	46b9      	mov	r9, r7
 8001022:	0007      	movs	r7, r0
 8001024:	46aa      	mov	sl, r5
 8001026:	40df      	lsrs	r7, r3
 8001028:	464d      	mov	r5, r9
 800102a:	433d      	orrs	r5, r7
 800102c:	002f      	movs	r7, r5
 800102e:	4655      	mov	r5, sl
 8001030:	40a8      	lsls	r0, r5
 8001032:	40d9      	lsrs	r1, r3
 8001034:	1e45      	subs	r5, r0, #1
 8001036:	41a8      	sbcs	r0, r5
 8001038:	4488      	add	r8, r1
 800103a:	4307      	orrs	r7, r0
 800103c:	18bf      	adds	r7, r7, r2
 800103e:	4297      	cmp	r7, r2
 8001040:	4192      	sbcs	r2, r2
 8001042:	4251      	negs	r1, r2
 8001044:	4441      	add	r1, r8
 8001046:	0035      	movs	r5, r6
 8001048:	e63a      	b.n	8000cc0 <__aeabi_dadd+0x164>
 800104a:	4664      	mov	r4, ip
 800104c:	0035      	movs	r5, r6
 800104e:	4641      	mov	r1, r8
 8001050:	0010      	movs	r0, r2
 8001052:	e685      	b.n	8000d60 <__aeabi_dadd+0x204>
 8001054:	000b      	movs	r3, r1
 8001056:	4303      	orrs	r3, r0
 8001058:	2d00      	cmp	r5, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dadd+0x502>
 800105c:	e663      	b.n	8000d26 <__aeabi_dadd+0x1ca>
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f5      	beq.n	800104e <__aeabi_dadd+0x4f2>
 8001062:	4643      	mov	r3, r8
 8001064:	4313      	orrs	r3, r2
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x50e>
 8001068:	e67a      	b.n	8000d60 <__aeabi_dadd+0x204>
 800106a:	1887      	adds	r7, r0, r2
 800106c:	4287      	cmp	r7, r0
 800106e:	4180      	sbcs	r0, r0
 8001070:	2207      	movs	r2, #7
 8001072:	4441      	add	r1, r8
 8001074:	4240      	negs	r0, r0
 8001076:	1809      	adds	r1, r1, r0
 8001078:	403a      	ands	r2, r7
 800107a:	020b      	lsls	r3, r1, #8
 800107c:	d400      	bmi.n	8001080 <__aeabi_dadd+0x524>
 800107e:	e6d5      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <__aeabi_dadd+0x634>)
 8001082:	3501      	adds	r5, #1
 8001084:	4019      	ands	r1, r3
 8001086:	e5c9      	b.n	8000c1c <__aeabi_dadd+0xc0>
 8001088:	0038      	movs	r0, r7
 800108a:	e669      	b.n	8000d60 <__aeabi_dadd+0x204>
 800108c:	001e      	movs	r6, r3
 800108e:	4647      	mov	r7, r8
 8001090:	3e20      	subs	r6, #32
 8001092:	40f7      	lsrs	r7, r6
 8001094:	46bc      	mov	ip, r7
 8001096:	2b20      	cmp	r3, #32
 8001098:	d004      	beq.n	80010a4 <__aeabi_dadd+0x548>
 800109a:	2640      	movs	r6, #64	; 0x40
 800109c:	1af3      	subs	r3, r6, r3
 800109e:	4646      	mov	r6, r8
 80010a0:	409e      	lsls	r6, r3
 80010a2:	4332      	orrs	r2, r6
 80010a4:	0017      	movs	r7, r2
 80010a6:	4663      	mov	r3, ip
 80010a8:	1e7a      	subs	r2, r7, #1
 80010aa:	4197      	sbcs	r7, r2
 80010ac:	431f      	orrs	r7, r3
 80010ae:	e602      	b.n	8000cb6 <__aeabi_dadd+0x15a>
 80010b0:	4d36      	ldr	r5, [pc, #216]	; (800118c <__aeabi_dadd+0x630>)
 80010b2:	42ae      	cmp	r6, r5
 80010b4:	d0ca      	beq.n	800104c <__aeabi_dadd+0x4f0>
 80010b6:	2580      	movs	r5, #128	; 0x80
 80010b8:	042d      	lsls	r5, r5, #16
 80010ba:	425b      	negs	r3, r3
 80010bc:	4329      	orrs	r1, r5
 80010be:	e7a6      	b.n	800100e <__aeabi_dadd+0x4b2>
 80010c0:	4308      	orrs	r0, r1
 80010c2:	1e41      	subs	r1, r0, #1
 80010c4:	4188      	sbcs	r0, r1
 80010c6:	e6a6      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x572>
 80010cc:	e648      	b.n	8000d60 <__aeabi_dadd+0x204>
 80010ce:	1a87      	subs	r7, r0, r2
 80010d0:	4643      	mov	r3, r8
 80010d2:	42b8      	cmp	r0, r7
 80010d4:	41b6      	sbcs	r6, r6
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	4276      	negs	r6, r6
 80010da:	1b9e      	subs	r6, r3, r6
 80010dc:	0233      	lsls	r3, r6, #8
 80010de:	d54b      	bpl.n	8001178 <__aeabi_dadd+0x61c>
 80010e0:	1a17      	subs	r7, r2, r0
 80010e2:	4643      	mov	r3, r8
 80010e4:	42ba      	cmp	r2, r7
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	1a59      	subs	r1, r3, r1
 80010ea:	4252      	negs	r2, r2
 80010ec:	1a89      	subs	r1, r1, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	4664      	mov	r4, ip
 80010f2:	403a      	ands	r2, r7
 80010f4:	e592      	b.n	8000c1c <__aeabi_dadd+0xc0>
 80010f6:	4301      	orrs	r1, r0
 80010f8:	000f      	movs	r7, r1
 80010fa:	1e79      	subs	r1, r7, #1
 80010fc:	418f      	sbcs	r7, r1
 80010fe:	e79d      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001100:	001c      	movs	r4, r3
 8001102:	000f      	movs	r7, r1
 8001104:	3c20      	subs	r4, #32
 8001106:	40e7      	lsrs	r7, r4
 8001108:	2b20      	cmp	r3, #32
 800110a:	d003      	beq.n	8001114 <__aeabi_dadd+0x5b8>
 800110c:	2440      	movs	r4, #64	; 0x40
 800110e:	1ae3      	subs	r3, r4, r3
 8001110:	4099      	lsls	r1, r3
 8001112:	4308      	orrs	r0, r1
 8001114:	1e41      	subs	r1, r0, #1
 8001116:	4188      	sbcs	r0, r1
 8001118:	4338      	orrs	r0, r7
 800111a:	e67c      	b.n	8000e16 <__aeabi_dadd+0x2ba>
 800111c:	2200      	movs	r2, #0
 800111e:	2400      	movs	r4, #0
 8001120:	e625      	b.n	8000d6e <__aeabi_dadd+0x212>
 8001122:	1a17      	subs	r7, r2, r0
 8001124:	4643      	mov	r3, r8
 8001126:	42ba      	cmp	r2, r7
 8001128:	4192      	sbcs	r2, r2
 800112a:	1a59      	subs	r1, r3, r1
 800112c:	4252      	negs	r2, r2
 800112e:	1a89      	subs	r1, r1, r2
 8001130:	4664      	mov	r4, ip
 8001132:	0035      	movs	r5, r6
 8001134:	e543      	b.n	8000bbe <__aeabi_dadd+0x62>
 8001136:	4641      	mov	r1, r8
 8001138:	0010      	movs	r0, r2
 800113a:	4d14      	ldr	r5, [pc, #80]	; (800118c <__aeabi_dadd+0x630>)
 800113c:	e610      	b.n	8000d60 <__aeabi_dadd+0x204>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	2400      	movs	r4, #0
 8001142:	0312      	lsls	r2, r2, #12
 8001144:	e680      	b.n	8000e48 <__aeabi_dadd+0x2ec>
 8001146:	001d      	movs	r5, r3
 8001148:	000f      	movs	r7, r1
 800114a:	3d20      	subs	r5, #32
 800114c:	40ef      	lsrs	r7, r5
 800114e:	46bc      	mov	ip, r7
 8001150:	2b20      	cmp	r3, #32
 8001152:	d003      	beq.n	800115c <__aeabi_dadd+0x600>
 8001154:	2540      	movs	r5, #64	; 0x40
 8001156:	1aeb      	subs	r3, r5, r3
 8001158:	4099      	lsls	r1, r3
 800115a:	4308      	orrs	r0, r1
 800115c:	0007      	movs	r7, r0
 800115e:	4663      	mov	r3, ip
 8001160:	1e78      	subs	r0, r7, #1
 8001162:	4187      	sbcs	r7, r0
 8001164:	431f      	orrs	r7, r3
 8001166:	e769      	b.n	800103c <__aeabi_dadd+0x4e0>
 8001168:	1887      	adds	r7, r0, r2
 800116a:	4297      	cmp	r7, r2
 800116c:	419b      	sbcs	r3, r3
 800116e:	4441      	add	r1, r8
 8001170:	425b      	negs	r3, r3
 8001172:	18c9      	adds	r1, r1, r3
 8001174:	0035      	movs	r5, r6
 8001176:	e5a3      	b.n	8000cc0 <__aeabi_dadd+0x164>
 8001178:	003b      	movs	r3, r7
 800117a:	4333      	orrs	r3, r6
 800117c:	d0ce      	beq.n	800111c <__aeabi_dadd+0x5c0>
 800117e:	2207      	movs	r2, #7
 8001180:	0031      	movs	r1, r6
 8001182:	403a      	ands	r2, r7
 8001184:	e652      	b.n	8000e2c <__aeabi_dadd+0x2d0>
 8001186:	2300      	movs	r3, #0
 8001188:	001a      	movs	r2, r3
 800118a:	e5f4      	b.n	8000d76 <__aeabi_dadd+0x21a>
 800118c:	000007ff 	.word	0x000007ff
 8001190:	ff7fffff 	.word	0xff7fffff

08001194 <__aeabi_ddiv>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	4657      	mov	r7, sl
 8001198:	46de      	mov	lr, fp
 800119a:	464e      	mov	r6, r9
 800119c:	4645      	mov	r5, r8
 800119e:	b5e0      	push	{r5, r6, r7, lr}
 80011a0:	4683      	mov	fp, r0
 80011a2:	0007      	movs	r7, r0
 80011a4:	030e      	lsls	r6, r1, #12
 80011a6:	0048      	lsls	r0, r1, #1
 80011a8:	b085      	sub	sp, #20
 80011aa:	4692      	mov	sl, r2
 80011ac:	001c      	movs	r4, r3
 80011ae:	0b36      	lsrs	r6, r6, #12
 80011b0:	0d40      	lsrs	r0, r0, #21
 80011b2:	0fcd      	lsrs	r5, r1, #31
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_ddiv+0x26>
 80011b8:	e09d      	b.n	80012f6 <__aeabi_ddiv+0x162>
 80011ba:	4b95      	ldr	r3, [pc, #596]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011bc:	4298      	cmp	r0, r3
 80011be:	d039      	beq.n	8001234 <__aeabi_ddiv+0xa0>
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	00f6      	lsls	r6, r6, #3
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	431e      	orrs	r6, r3
 80011c8:	4a92      	ldr	r2, [pc, #584]	; (8001414 <__aeabi_ddiv+0x280>)
 80011ca:	0f7b      	lsrs	r3, r7, #29
 80011cc:	4333      	orrs	r3, r6
 80011ce:	4699      	mov	r9, r3
 80011d0:	4694      	mov	ip, r2
 80011d2:	0003      	movs	r3, r0
 80011d4:	4463      	add	r3, ip
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	2600      	movs	r6, #0
 80011dc:	00ff      	lsls	r7, r7, #3
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	0323      	lsls	r3, r4, #12
 80011e2:	0b1b      	lsrs	r3, r3, #12
 80011e4:	4698      	mov	r8, r3
 80011e6:	0063      	lsls	r3, r4, #1
 80011e8:	0fe4      	lsrs	r4, r4, #31
 80011ea:	4652      	mov	r2, sl
 80011ec:	0d5b      	lsrs	r3, r3, #21
 80011ee:	9401      	str	r4, [sp, #4]
 80011f0:	d100      	bne.n	80011f4 <__aeabi_ddiv+0x60>
 80011f2:	e0b3      	b.n	800135c <__aeabi_ddiv+0x1c8>
 80011f4:	4986      	ldr	r1, [pc, #536]	; (8001410 <__aeabi_ddiv+0x27c>)
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d100      	bne.n	80011fc <__aeabi_ddiv+0x68>
 80011fa:	e09e      	b.n	800133a <__aeabi_ddiv+0x1a6>
 80011fc:	4642      	mov	r2, r8
 80011fe:	00d1      	lsls	r1, r2, #3
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	430a      	orrs	r2, r1
 8001206:	4651      	mov	r1, sl
 8001208:	0f49      	lsrs	r1, r1, #29
 800120a:	4311      	orrs	r1, r2
 800120c:	468b      	mov	fp, r1
 800120e:	4981      	ldr	r1, [pc, #516]	; (8001414 <__aeabi_ddiv+0x280>)
 8001210:	4652      	mov	r2, sl
 8001212:	468c      	mov	ip, r1
 8001214:	9900      	ldr	r1, [sp, #0]
 8001216:	4463      	add	r3, ip
 8001218:	1acb      	subs	r3, r1, r3
 800121a:	2100      	movs	r1, #0
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	002b      	movs	r3, r5
 8001222:	4063      	eors	r3, r4
 8001224:	469a      	mov	sl, r3
 8001226:	2e0f      	cmp	r6, #15
 8001228:	d900      	bls.n	800122c <__aeabi_ddiv+0x98>
 800122a:	e105      	b.n	8001438 <__aeabi_ddiv+0x2a4>
 800122c:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <__aeabi_ddiv+0x284>)
 800122e:	00b6      	lsls	r6, r6, #2
 8001230:	599b      	ldr	r3, [r3, r6]
 8001232:	469f      	mov	pc, r3
 8001234:	465b      	mov	r3, fp
 8001236:	4333      	orrs	r3, r6
 8001238:	4699      	mov	r9, r3
 800123a:	d000      	beq.n	800123e <__aeabi_ddiv+0xaa>
 800123c:	e0b8      	b.n	80013b0 <__aeabi_ddiv+0x21c>
 800123e:	2302      	movs	r3, #2
 8001240:	2608      	movs	r6, #8
 8001242:	2700      	movs	r7, #0
 8001244:	9000      	str	r0, [sp, #0]
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	e7ca      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800124a:	46cb      	mov	fp, r9
 800124c:	003a      	movs	r2, r7
 800124e:	9902      	ldr	r1, [sp, #8]
 8001250:	9501      	str	r5, [sp, #4]
 8001252:	9b01      	ldr	r3, [sp, #4]
 8001254:	469a      	mov	sl, r3
 8001256:	2902      	cmp	r1, #2
 8001258:	d027      	beq.n	80012aa <__aeabi_ddiv+0x116>
 800125a:	2903      	cmp	r1, #3
 800125c:	d100      	bne.n	8001260 <__aeabi_ddiv+0xcc>
 800125e:	e280      	b.n	8001762 <__aeabi_ddiv+0x5ce>
 8001260:	2901      	cmp	r1, #1
 8001262:	d044      	beq.n	80012ee <__aeabi_ddiv+0x15a>
 8001264:	496d      	ldr	r1, [pc, #436]	; (800141c <__aeabi_ddiv+0x288>)
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	468c      	mov	ip, r1
 800126a:	4463      	add	r3, ip
 800126c:	001c      	movs	r4, r3
 800126e:	2c00      	cmp	r4, #0
 8001270:	dd38      	ble.n	80012e4 <__aeabi_ddiv+0x150>
 8001272:	0753      	lsls	r3, r2, #29
 8001274:	d000      	beq.n	8001278 <__aeabi_ddiv+0xe4>
 8001276:	e213      	b.n	80016a0 <__aeabi_ddiv+0x50c>
 8001278:	08d2      	lsrs	r2, r2, #3
 800127a:	465b      	mov	r3, fp
 800127c:	01db      	lsls	r3, r3, #7
 800127e:	d509      	bpl.n	8001294 <__aeabi_ddiv+0x100>
 8001280:	4659      	mov	r1, fp
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <__aeabi_ddiv+0x28c>)
 8001284:	4019      	ands	r1, r3
 8001286:	468b      	mov	fp, r1
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	00c9      	lsls	r1, r1, #3
 800128c:	468c      	mov	ip, r1
 800128e:	9b00      	ldr	r3, [sp, #0]
 8001290:	4463      	add	r3, ip
 8001292:	001c      	movs	r4, r3
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <__aeabi_ddiv+0x290>)
 8001296:	429c      	cmp	r4, r3
 8001298:	dc07      	bgt.n	80012aa <__aeabi_ddiv+0x116>
 800129a:	465b      	mov	r3, fp
 800129c:	0564      	lsls	r4, r4, #21
 800129e:	075f      	lsls	r7, r3, #29
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4317      	orrs	r7, r2
 80012a4:	0b1b      	lsrs	r3, r3, #12
 80012a6:	0d62      	lsrs	r2, r4, #21
 80012a8:	e002      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012aa:	2300      	movs	r3, #0
 80012ac:	2700      	movs	r7, #0
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <__aeabi_ddiv+0x27c>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	031b      	lsls	r3, r3, #12
 80012b4:	0b1c      	lsrs	r4, r3, #12
 80012b6:	0d0b      	lsrs	r3, r1, #20
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	4323      	orrs	r3, r4
 80012bc:	0514      	lsls	r4, r2, #20
 80012be:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <__aeabi_ddiv+0x294>)
 80012c0:	0038      	movs	r0, r7
 80012c2:	4013      	ands	r3, r2
 80012c4:	431c      	orrs	r4, r3
 80012c6:	4653      	mov	r3, sl
 80012c8:	0064      	lsls	r4, r4, #1
 80012ca:	07db      	lsls	r3, r3, #31
 80012cc:	0864      	lsrs	r4, r4, #1
 80012ce:	431c      	orrs	r4, r3
 80012d0:	0021      	movs	r1, r4
 80012d2:	b005      	add	sp, #20
 80012d4:	bc3c      	pop	{r2, r3, r4, r5}
 80012d6:	4690      	mov	r8, r2
 80012d8:	4699      	mov	r9, r3
 80012da:	46a2      	mov	sl, r4
 80012dc:	46ab      	mov	fp, r5
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e0:	2201      	movs	r2, #1
 80012e2:	4252      	negs	r2, r2
 80012e4:	2301      	movs	r3, #1
 80012e6:	1b1b      	subs	r3, r3, r4
 80012e8:	2b38      	cmp	r3, #56	; 0x38
 80012ea:	dc00      	bgt.n	80012ee <__aeabi_ddiv+0x15a>
 80012ec:	e1ad      	b.n	800164a <__aeabi_ddiv+0x4b6>
 80012ee:	2200      	movs	r2, #0
 80012f0:	2300      	movs	r3, #0
 80012f2:	2700      	movs	r7, #0
 80012f4:	e7dc      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80012f6:	465b      	mov	r3, fp
 80012f8:	4333      	orrs	r3, r6
 80012fa:	4699      	mov	r9, r3
 80012fc:	d05e      	beq.n	80013bc <__aeabi_ddiv+0x228>
 80012fe:	2e00      	cmp	r6, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_ddiv+0x170>
 8001302:	e18a      	b.n	800161a <__aeabi_ddiv+0x486>
 8001304:	0030      	movs	r0, r6
 8001306:	f001 f9fd 	bl	8002704 <__clzsi2>
 800130a:	0003      	movs	r3, r0
 800130c:	3b0b      	subs	r3, #11
 800130e:	2b1c      	cmp	r3, #28
 8001310:	dd00      	ble.n	8001314 <__aeabi_ddiv+0x180>
 8001312:	e17b      	b.n	800160c <__aeabi_ddiv+0x478>
 8001314:	221d      	movs	r2, #29
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	465a      	mov	r2, fp
 800131a:	0001      	movs	r1, r0
 800131c:	40da      	lsrs	r2, r3
 800131e:	3908      	subs	r1, #8
 8001320:	408e      	lsls	r6, r1
 8001322:	0013      	movs	r3, r2
 8001324:	465f      	mov	r7, fp
 8001326:	4333      	orrs	r3, r6
 8001328:	4699      	mov	r9, r3
 800132a:	408f      	lsls	r7, r1
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <__aeabi_ddiv+0x298>)
 800132e:	2600      	movs	r6, #0
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	e752      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 800133a:	4641      	mov	r1, r8
 800133c:	4653      	mov	r3, sl
 800133e:	430b      	orrs	r3, r1
 8001340:	493b      	ldr	r1, [pc, #236]	; (8001430 <__aeabi_ddiv+0x29c>)
 8001342:	469b      	mov	fp, r3
 8001344:	468c      	mov	ip, r1
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	4463      	add	r3, ip
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	465b      	mov	r3, fp
 800134e:	2b00      	cmp	r3, #0
 8001350:	d13b      	bne.n	80013ca <__aeabi_ddiv+0x236>
 8001352:	2302      	movs	r3, #2
 8001354:	2200      	movs	r2, #0
 8001356:	431e      	orrs	r6, r3
 8001358:	2102      	movs	r1, #2
 800135a:	e761      	b.n	8001220 <__aeabi_ddiv+0x8c>
 800135c:	4643      	mov	r3, r8
 800135e:	4313      	orrs	r3, r2
 8001360:	469b      	mov	fp, r3
 8001362:	d037      	beq.n	80013d4 <__aeabi_ddiv+0x240>
 8001364:	4643      	mov	r3, r8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_ddiv+0x1d8>
 800136a:	e162      	b.n	8001632 <__aeabi_ddiv+0x49e>
 800136c:	4640      	mov	r0, r8
 800136e:	f001 f9c9 	bl	8002704 <__clzsi2>
 8001372:	0003      	movs	r3, r0
 8001374:	3b0b      	subs	r3, #11
 8001376:	2b1c      	cmp	r3, #28
 8001378:	dd00      	ble.n	800137c <__aeabi_ddiv+0x1e8>
 800137a:	e153      	b.n	8001624 <__aeabi_ddiv+0x490>
 800137c:	0002      	movs	r2, r0
 800137e:	4641      	mov	r1, r8
 8001380:	3a08      	subs	r2, #8
 8001382:	4091      	lsls	r1, r2
 8001384:	4688      	mov	r8, r1
 8001386:	211d      	movs	r1, #29
 8001388:	1acb      	subs	r3, r1, r3
 800138a:	4651      	mov	r1, sl
 800138c:	40d9      	lsrs	r1, r3
 800138e:	000b      	movs	r3, r1
 8001390:	4641      	mov	r1, r8
 8001392:	430b      	orrs	r3, r1
 8001394:	469b      	mov	fp, r3
 8001396:	4653      	mov	r3, sl
 8001398:	4093      	lsls	r3, r2
 800139a:	001a      	movs	r2, r3
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	4925      	ldr	r1, [pc, #148]	; (8001434 <__aeabi_ddiv+0x2a0>)
 80013a0:	469c      	mov	ip, r3
 80013a2:	4460      	add	r0, ip
 80013a4:	0003      	movs	r3, r0
 80013a6:	468c      	mov	ip, r1
 80013a8:	4463      	add	r3, ip
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	e737      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013b0:	2303      	movs	r3, #3
 80013b2:	46b1      	mov	r9, r6
 80013b4:	9000      	str	r0, [sp, #0]
 80013b6:	260c      	movs	r6, #12
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	e711      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013bc:	2300      	movs	r3, #0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	2604      	movs	r6, #4
 80013c4:	2700      	movs	r7, #0
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	e70a      	b.n	80011e0 <__aeabi_ddiv+0x4c>
 80013ca:	2303      	movs	r3, #3
 80013cc:	46c3      	mov	fp, r8
 80013ce:	431e      	orrs	r6, r3
 80013d0:	2103      	movs	r1, #3
 80013d2:	e725      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013d4:	3301      	adds	r3, #1
 80013d6:	431e      	orrs	r6, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	2101      	movs	r1, #1
 80013dc:	e720      	b.n	8001220 <__aeabi_ddiv+0x8c>
 80013de:	2300      	movs	r3, #0
 80013e0:	469a      	mov	sl, r3
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	2700      	movs	r7, #0
 80013e6:	031b      	lsls	r3, r3, #12
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <__aeabi_ddiv+0x27c>)
 80013ea:	e761      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	4649      	mov	r1, r9
 80013f0:	031b      	lsls	r3, r3, #12
 80013f2:	4219      	tst	r1, r3
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x264>
 80013f6:	e0e2      	b.n	80015be <__aeabi_ddiv+0x42a>
 80013f8:	4659      	mov	r1, fp
 80013fa:	4219      	tst	r1, r3
 80013fc:	d000      	beq.n	8001400 <__aeabi_ddiv+0x26c>
 80013fe:	e0de      	b.n	80015be <__aeabi_ddiv+0x42a>
 8001400:	430b      	orrs	r3, r1
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	0017      	movs	r7, r2
 8001406:	0b1b      	lsrs	r3, r3, #12
 8001408:	46a2      	mov	sl, r4
 800140a:	4a01      	ldr	r2, [pc, #4]	; (8001410 <__aeabi_ddiv+0x27c>)
 800140c:	e750      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff
 8001414:	fffffc01 	.word	0xfffffc01
 8001418:	08020228 	.word	0x08020228
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	800fffff 	.word	0x800fffff
 800142c:	fffffc0d 	.word	0xfffffc0d
 8001430:	fffff801 	.word	0xfffff801
 8001434:	000003f3 	.word	0x000003f3
 8001438:	45d9      	cmp	r9, fp
 800143a:	d900      	bls.n	800143e <__aeabi_ddiv+0x2aa>
 800143c:	e0cb      	b.n	80015d6 <__aeabi_ddiv+0x442>
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0x2ae>
 8001440:	e0c6      	b.n	80015d0 <__aeabi_ddiv+0x43c>
 8001442:	003c      	movs	r4, r7
 8001444:	4648      	mov	r0, r9
 8001446:	2700      	movs	r7, #0
 8001448:	9b00      	ldr	r3, [sp, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	465b      	mov	r3, fp
 8001450:	0e16      	lsrs	r6, r2, #24
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	431e      	orrs	r6, r3
 8001456:	0213      	lsls	r3, r2, #8
 8001458:	4698      	mov	r8, r3
 800145a:	0433      	lsls	r3, r6, #16
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	4699      	mov	r9, r3
 8001460:	0c31      	lsrs	r1, r6, #16
 8001462:	9101      	str	r1, [sp, #4]
 8001464:	f7fe fede 	bl	8000224 <__aeabi_uidivmod>
 8001468:	464a      	mov	r2, r9
 800146a:	4342      	muls	r2, r0
 800146c:	040b      	lsls	r3, r1, #16
 800146e:	0c21      	lsrs	r1, r4, #16
 8001470:	0005      	movs	r5, r0
 8001472:	4319      	orrs	r1, r3
 8001474:	428a      	cmp	r2, r1
 8001476:	d907      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001478:	1989      	adds	r1, r1, r6
 800147a:	3d01      	subs	r5, #1
 800147c:	428e      	cmp	r6, r1
 800147e:	d803      	bhi.n	8001488 <__aeabi_ddiv+0x2f4>
 8001480:	428a      	cmp	r2, r1
 8001482:	d901      	bls.n	8001488 <__aeabi_ddiv+0x2f4>
 8001484:	1e85      	subs	r5, r0, #2
 8001486:	1989      	adds	r1, r1, r6
 8001488:	1a88      	subs	r0, r1, r2
 800148a:	9901      	ldr	r1, [sp, #4]
 800148c:	f7fe feca 	bl	8000224 <__aeabi_uidivmod>
 8001490:	0409      	lsls	r1, r1, #16
 8001492:	468c      	mov	ip, r1
 8001494:	464a      	mov	r2, r9
 8001496:	0421      	lsls	r1, r4, #16
 8001498:	4664      	mov	r4, ip
 800149a:	4342      	muls	r2, r0
 800149c:	0c09      	lsrs	r1, r1, #16
 800149e:	0003      	movs	r3, r0
 80014a0:	4321      	orrs	r1, r4
 80014a2:	428a      	cmp	r2, r1
 80014a4:	d904      	bls.n	80014b0 <__aeabi_ddiv+0x31c>
 80014a6:	1989      	adds	r1, r1, r6
 80014a8:	3b01      	subs	r3, #1
 80014aa:	428e      	cmp	r6, r1
 80014ac:	d800      	bhi.n	80014b0 <__aeabi_ddiv+0x31c>
 80014ae:	e0f1      	b.n	8001694 <__aeabi_ddiv+0x500>
 80014b0:	042d      	lsls	r5, r5, #16
 80014b2:	431d      	orrs	r5, r3
 80014b4:	46ab      	mov	fp, r5
 80014b6:	4643      	mov	r3, r8
 80014b8:	1a89      	subs	r1, r1, r2
 80014ba:	4642      	mov	r2, r8
 80014bc:	0c28      	lsrs	r0, r5, #16
 80014be:	0412      	lsls	r2, r2, #16
 80014c0:	0c1d      	lsrs	r5, r3, #16
 80014c2:	465b      	mov	r3, fp
 80014c4:	0c14      	lsrs	r4, r2, #16
 80014c6:	0022      	movs	r2, r4
 80014c8:	041b      	lsls	r3, r3, #16
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	435a      	muls	r2, r3
 80014ce:	9403      	str	r4, [sp, #12]
 80014d0:	436b      	muls	r3, r5
 80014d2:	4344      	muls	r4, r0
 80014d4:	9502      	str	r5, [sp, #8]
 80014d6:	4368      	muls	r0, r5
 80014d8:	191b      	adds	r3, r3, r4
 80014da:	0c15      	lsrs	r5, r2, #16
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	429c      	cmp	r4, r3
 80014e0:	d903      	bls.n	80014ea <__aeabi_ddiv+0x356>
 80014e2:	2480      	movs	r4, #128	; 0x80
 80014e4:	0264      	lsls	r4, r4, #9
 80014e6:	46a4      	mov	ip, r4
 80014e8:	4460      	add	r0, ip
 80014ea:	0c1c      	lsrs	r4, r3, #16
 80014ec:	0415      	lsls	r5, r2, #16
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	0c2d      	lsrs	r5, r5, #16
 80014f2:	1820      	adds	r0, r4, r0
 80014f4:	195d      	adds	r5, r3, r5
 80014f6:	4281      	cmp	r1, r0
 80014f8:	d377      	bcc.n	80015ea <__aeabi_ddiv+0x456>
 80014fa:	d073      	beq.n	80015e4 <__aeabi_ddiv+0x450>
 80014fc:	1a0c      	subs	r4, r1, r0
 80014fe:	4aa2      	ldr	r2, [pc, #648]	; (8001788 <__aeabi_ddiv+0x5f4>)
 8001500:	1b7d      	subs	r5, r7, r5
 8001502:	42af      	cmp	r7, r5
 8001504:	41bf      	sbcs	r7, r7
 8001506:	4694      	mov	ip, r2
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	427f      	negs	r7, r7
 800150c:	4463      	add	r3, ip
 800150e:	1be0      	subs	r0, r4, r7
 8001510:	001c      	movs	r4, r3
 8001512:	4286      	cmp	r6, r0
 8001514:	d100      	bne.n	8001518 <__aeabi_ddiv+0x384>
 8001516:	e0db      	b.n	80016d0 <__aeabi_ddiv+0x53c>
 8001518:	9901      	ldr	r1, [sp, #4]
 800151a:	f7fe fe83 	bl	8000224 <__aeabi_uidivmod>
 800151e:	464a      	mov	r2, r9
 8001520:	4342      	muls	r2, r0
 8001522:	040b      	lsls	r3, r1, #16
 8001524:	0c29      	lsrs	r1, r5, #16
 8001526:	0007      	movs	r7, r0
 8001528:	4319      	orrs	r1, r3
 800152a:	428a      	cmp	r2, r1
 800152c:	d907      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800152e:	1989      	adds	r1, r1, r6
 8001530:	3f01      	subs	r7, #1
 8001532:	428e      	cmp	r6, r1
 8001534:	d803      	bhi.n	800153e <__aeabi_ddiv+0x3aa>
 8001536:	428a      	cmp	r2, r1
 8001538:	d901      	bls.n	800153e <__aeabi_ddiv+0x3aa>
 800153a:	1e87      	subs	r7, r0, #2
 800153c:	1989      	adds	r1, r1, r6
 800153e:	1a88      	subs	r0, r1, r2
 8001540:	9901      	ldr	r1, [sp, #4]
 8001542:	f7fe fe6f 	bl	8000224 <__aeabi_uidivmod>
 8001546:	0409      	lsls	r1, r1, #16
 8001548:	464a      	mov	r2, r9
 800154a:	4689      	mov	r9, r1
 800154c:	0429      	lsls	r1, r5, #16
 800154e:	464d      	mov	r5, r9
 8001550:	4342      	muls	r2, r0
 8001552:	0c09      	lsrs	r1, r1, #16
 8001554:	0003      	movs	r3, r0
 8001556:	4329      	orrs	r1, r5
 8001558:	428a      	cmp	r2, r1
 800155a:	d907      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 800155c:	1989      	adds	r1, r1, r6
 800155e:	3b01      	subs	r3, #1
 8001560:	428e      	cmp	r6, r1
 8001562:	d803      	bhi.n	800156c <__aeabi_ddiv+0x3d8>
 8001564:	428a      	cmp	r2, r1
 8001566:	d901      	bls.n	800156c <__aeabi_ddiv+0x3d8>
 8001568:	1e83      	subs	r3, r0, #2
 800156a:	1989      	adds	r1, r1, r6
 800156c:	043f      	lsls	r7, r7, #16
 800156e:	1a89      	subs	r1, r1, r2
 8001570:	003a      	movs	r2, r7
 8001572:	9f03      	ldr	r7, [sp, #12]
 8001574:	431a      	orrs	r2, r3
 8001576:	0038      	movs	r0, r7
 8001578:	0413      	lsls	r3, r2, #16
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4358      	muls	r0, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9802      	ldr	r0, [sp, #8]
 8001582:	0c15      	lsrs	r5, r2, #16
 8001584:	436f      	muls	r7, r5
 8001586:	4343      	muls	r3, r0
 8001588:	4345      	muls	r5, r0
 800158a:	4648      	mov	r0, r9
 800158c:	0c00      	lsrs	r0, r0, #16
 800158e:	4684      	mov	ip, r0
 8001590:	19db      	adds	r3, r3, r7
 8001592:	4463      	add	r3, ip
 8001594:	429f      	cmp	r7, r3
 8001596:	d903      	bls.n	80015a0 <__aeabi_ddiv+0x40c>
 8001598:	2080      	movs	r0, #128	; 0x80
 800159a:	0240      	lsls	r0, r0, #9
 800159c:	4684      	mov	ip, r0
 800159e:	4465      	add	r5, ip
 80015a0:	4648      	mov	r0, r9
 80015a2:	0c1f      	lsrs	r7, r3, #16
 80015a4:	0400      	lsls	r0, r0, #16
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	0c00      	lsrs	r0, r0, #16
 80015aa:	197d      	adds	r5, r7, r5
 80015ac:	1818      	adds	r0, r3, r0
 80015ae:	42a9      	cmp	r1, r5
 80015b0:	d200      	bcs.n	80015b4 <__aeabi_ddiv+0x420>
 80015b2:	e084      	b.n	80016be <__aeabi_ddiv+0x52a>
 80015b4:	d100      	bne.n	80015b8 <__aeabi_ddiv+0x424>
 80015b6:	e07f      	b.n	80016b8 <__aeabi_ddiv+0x524>
 80015b8:	2301      	movs	r3, #1
 80015ba:	431a      	orrs	r2, r3
 80015bc:	e657      	b.n	800126e <__aeabi_ddiv+0xda>
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	464a      	mov	r2, r9
 80015c2:	031b      	lsls	r3, r3, #12
 80015c4:	4313      	orrs	r3, r2
 80015c6:	031b      	lsls	r3, r3, #12
 80015c8:	0b1b      	lsrs	r3, r3, #12
 80015ca:	46aa      	mov	sl, r5
 80015cc:	4a6f      	ldr	r2, [pc, #444]	; (800178c <__aeabi_ddiv+0x5f8>)
 80015ce:	e66f      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 80015d0:	42ba      	cmp	r2, r7
 80015d2:	d900      	bls.n	80015d6 <__aeabi_ddiv+0x442>
 80015d4:	e735      	b.n	8001442 <__aeabi_ddiv+0x2ae>
 80015d6:	464b      	mov	r3, r9
 80015d8:	07dc      	lsls	r4, r3, #31
 80015da:	0858      	lsrs	r0, r3, #1
 80015dc:	087b      	lsrs	r3, r7, #1
 80015de:	431c      	orrs	r4, r3
 80015e0:	07ff      	lsls	r7, r7, #31
 80015e2:	e734      	b.n	800144e <__aeabi_ddiv+0x2ba>
 80015e4:	2400      	movs	r4, #0
 80015e6:	42af      	cmp	r7, r5
 80015e8:	d289      	bcs.n	80014fe <__aeabi_ddiv+0x36a>
 80015ea:	4447      	add	r7, r8
 80015ec:	4547      	cmp	r7, r8
 80015ee:	41a4      	sbcs	r4, r4
 80015f0:	465b      	mov	r3, fp
 80015f2:	4264      	negs	r4, r4
 80015f4:	19a4      	adds	r4, r4, r6
 80015f6:	1864      	adds	r4, r4, r1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	42a6      	cmp	r6, r4
 80015fc:	d21e      	bcs.n	800163c <__aeabi_ddiv+0x4a8>
 80015fe:	42a0      	cmp	r0, r4
 8001600:	d86d      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001604:	e0b6      	b.n	8001774 <__aeabi_ddiv+0x5e0>
 8001606:	1a24      	subs	r4, r4, r0
 8001608:	469b      	mov	fp, r3
 800160a:	e778      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800160c:	0003      	movs	r3, r0
 800160e:	465a      	mov	r2, fp
 8001610:	3b28      	subs	r3, #40	; 0x28
 8001612:	409a      	lsls	r2, r3
 8001614:	2700      	movs	r7, #0
 8001616:	4691      	mov	r9, r2
 8001618:	e688      	b.n	800132c <__aeabi_ddiv+0x198>
 800161a:	4658      	mov	r0, fp
 800161c:	f001 f872 	bl	8002704 <__clzsi2>
 8001620:	3020      	adds	r0, #32
 8001622:	e672      	b.n	800130a <__aeabi_ddiv+0x176>
 8001624:	0003      	movs	r3, r0
 8001626:	4652      	mov	r2, sl
 8001628:	3b28      	subs	r3, #40	; 0x28
 800162a:	409a      	lsls	r2, r3
 800162c:	4693      	mov	fp, r2
 800162e:	2200      	movs	r2, #0
 8001630:	e6b4      	b.n	800139c <__aeabi_ddiv+0x208>
 8001632:	4650      	mov	r0, sl
 8001634:	f001 f866 	bl	8002704 <__clzsi2>
 8001638:	3020      	adds	r0, #32
 800163a:	e69a      	b.n	8001372 <__aeabi_ddiv+0x1de>
 800163c:	42a6      	cmp	r6, r4
 800163e:	d1e2      	bne.n	8001606 <__aeabi_ddiv+0x472>
 8001640:	45b8      	cmp	r8, r7
 8001642:	d9dc      	bls.n	80015fe <__aeabi_ddiv+0x46a>
 8001644:	1a34      	subs	r4, r6, r0
 8001646:	469b      	mov	fp, r3
 8001648:	e759      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800164a:	2b1f      	cmp	r3, #31
 800164c:	dc65      	bgt.n	800171a <__aeabi_ddiv+0x586>
 800164e:	4c50      	ldr	r4, [pc, #320]	; (8001790 <__aeabi_ddiv+0x5fc>)
 8001650:	9900      	ldr	r1, [sp, #0]
 8001652:	46a4      	mov	ip, r4
 8001654:	465c      	mov	r4, fp
 8001656:	4461      	add	r1, ip
 8001658:	0008      	movs	r0, r1
 800165a:	408c      	lsls	r4, r1
 800165c:	0011      	movs	r1, r2
 800165e:	4082      	lsls	r2, r0
 8001660:	40d9      	lsrs	r1, r3
 8001662:	1e50      	subs	r0, r2, #1
 8001664:	4182      	sbcs	r2, r0
 8001666:	430c      	orrs	r4, r1
 8001668:	4314      	orrs	r4, r2
 800166a:	465a      	mov	r2, fp
 800166c:	40da      	lsrs	r2, r3
 800166e:	0013      	movs	r3, r2
 8001670:	0762      	lsls	r2, r4, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 8001674:	220f      	movs	r2, #15
 8001676:	4022      	ands	r2, r4
 8001678:	2a04      	cmp	r2, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_ddiv+0x4f4>
 800167c:	0022      	movs	r2, r4
 800167e:	1d14      	adds	r4, r2, #4
 8001680:	4294      	cmp	r4, r2
 8001682:	4189      	sbcs	r1, r1
 8001684:	4249      	negs	r1, r1
 8001686:	185b      	adds	r3, r3, r1
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	d562      	bpl.n	8001752 <__aeabi_ddiv+0x5be>
 800168c:	2201      	movs	r2, #1
 800168e:	2300      	movs	r3, #0
 8001690:	2700      	movs	r7, #0
 8001692:	e60d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001694:	428a      	cmp	r2, r1
 8001696:	d800      	bhi.n	800169a <__aeabi_ddiv+0x506>
 8001698:	e70a      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 800169a:	1e83      	subs	r3, r0, #2
 800169c:	1989      	adds	r1, r1, r6
 800169e:	e707      	b.n	80014b0 <__aeabi_ddiv+0x31c>
 80016a0:	230f      	movs	r3, #15
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d100      	bne.n	80016aa <__aeabi_ddiv+0x516>
 80016a8:	e5e6      	b.n	8001278 <__aeabi_ddiv+0xe4>
 80016aa:	1d17      	adds	r7, r2, #4
 80016ac:	4297      	cmp	r7, r2
 80016ae:	4192      	sbcs	r2, r2
 80016b0:	4253      	negs	r3, r2
 80016b2:	449b      	add	fp, r3
 80016b4:	08fa      	lsrs	r2, r7, #3
 80016b6:	e5e0      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x52a>
 80016bc:	e5d7      	b.n	800126e <__aeabi_ddiv+0xda>
 80016be:	1871      	adds	r1, r6, r1
 80016c0:	1e53      	subs	r3, r2, #1
 80016c2:	42b1      	cmp	r1, r6
 80016c4:	d327      	bcc.n	8001716 <__aeabi_ddiv+0x582>
 80016c6:	42a9      	cmp	r1, r5
 80016c8:	d315      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 80016ca:	d058      	beq.n	800177e <__aeabi_ddiv+0x5ea>
 80016cc:	001a      	movs	r2, r3
 80016ce:	e773      	b.n	80015b8 <__aeabi_ddiv+0x424>
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x542>
 80016d4:	e604      	b.n	80012e0 <__aeabi_ddiv+0x14c>
 80016d6:	2301      	movs	r3, #1
 80016d8:	2200      	movs	r2, #0
 80016da:	449b      	add	fp, r3
 80016dc:	e5cd      	b.n	800127a <__aeabi_ddiv+0xe6>
 80016de:	2302      	movs	r3, #2
 80016e0:	4447      	add	r7, r8
 80016e2:	4547      	cmp	r7, r8
 80016e4:	4189      	sbcs	r1, r1
 80016e6:	425b      	negs	r3, r3
 80016e8:	469c      	mov	ip, r3
 80016ea:	4249      	negs	r1, r1
 80016ec:	1989      	adds	r1, r1, r6
 80016ee:	190c      	adds	r4, r1, r4
 80016f0:	44e3      	add	fp, ip
 80016f2:	1a24      	subs	r4, r4, r0
 80016f4:	e703      	b.n	80014fe <__aeabi_ddiv+0x36a>
 80016f6:	4643      	mov	r3, r8
 80016f8:	005f      	lsls	r7, r3, #1
 80016fa:	4547      	cmp	r7, r8
 80016fc:	419b      	sbcs	r3, r3
 80016fe:	46b8      	mov	r8, r7
 8001700:	425b      	negs	r3, r3
 8001702:	199e      	adds	r6, r3, r6
 8001704:	3a02      	subs	r2, #2
 8001706:	1989      	adds	r1, r1, r6
 8001708:	42a9      	cmp	r1, r5
 800170a:	d000      	beq.n	800170e <__aeabi_ddiv+0x57a>
 800170c:	e754      	b.n	80015b8 <__aeabi_ddiv+0x424>
 800170e:	4540      	cmp	r0, r8
 8001710:	d000      	beq.n	8001714 <__aeabi_ddiv+0x580>
 8001712:	e751      	b.n	80015b8 <__aeabi_ddiv+0x424>
 8001714:	e5ab      	b.n	800126e <__aeabi_ddiv+0xda>
 8001716:	001a      	movs	r2, r3
 8001718:	e7f6      	b.n	8001708 <__aeabi_ddiv+0x574>
 800171a:	211f      	movs	r1, #31
 800171c:	465f      	mov	r7, fp
 800171e:	4249      	negs	r1, r1
 8001720:	1b0c      	subs	r4, r1, r4
 8001722:	40e7      	lsrs	r7, r4
 8001724:	2b20      	cmp	r3, #32
 8001726:	d007      	beq.n	8001738 <__aeabi_ddiv+0x5a4>
 8001728:	491a      	ldr	r1, [pc, #104]	; (8001794 <__aeabi_ddiv+0x600>)
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	468c      	mov	ip, r1
 800172e:	4463      	add	r3, ip
 8001730:	0018      	movs	r0, r3
 8001732:	465b      	mov	r3, fp
 8001734:	4083      	lsls	r3, r0
 8001736:	431a      	orrs	r2, r3
 8001738:	1e50      	subs	r0, r2, #1
 800173a:	4182      	sbcs	r2, r0
 800173c:	433a      	orrs	r2, r7
 800173e:	2707      	movs	r7, #7
 8001740:	2300      	movs	r3, #0
 8001742:	4017      	ands	r7, r2
 8001744:	d009      	beq.n	800175a <__aeabi_ddiv+0x5c6>
 8001746:	210f      	movs	r1, #15
 8001748:	2300      	movs	r3, #0
 800174a:	4011      	ands	r1, r2
 800174c:	0014      	movs	r4, r2
 800174e:	2904      	cmp	r1, #4
 8001750:	d195      	bne.n	800167e <__aeabi_ddiv+0x4ea>
 8001752:	0022      	movs	r2, r4
 8001754:	075f      	lsls	r7, r3, #29
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	0b1b      	lsrs	r3, r3, #12
 800175a:	08d2      	lsrs	r2, r2, #3
 800175c:	4317      	orrs	r7, r2
 800175e:	2200      	movs	r2, #0
 8001760:	e5a6      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	4659      	mov	r1, fp
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	430b      	orrs	r3, r1
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	0017      	movs	r7, r2
 800176e:	0b1b      	lsrs	r3, r3, #12
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <__aeabi_ddiv+0x5f8>)
 8001772:	e59d      	b.n	80012b0 <__aeabi_ddiv+0x11c>
 8001774:	42bd      	cmp	r5, r7
 8001776:	d8b2      	bhi.n	80016de <__aeabi_ddiv+0x54a>
 8001778:	469b      	mov	fp, r3
 800177a:	2400      	movs	r4, #0
 800177c:	e6bf      	b.n	80014fe <__aeabi_ddiv+0x36a>
 800177e:	4580      	cmp	r8, r0
 8001780:	d3b9      	bcc.n	80016f6 <__aeabi_ddiv+0x562>
 8001782:	001a      	movs	r2, r3
 8001784:	e7c3      	b.n	800170e <__aeabi_ddiv+0x57a>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	000003ff 	.word	0x000003ff
 800178c:	000007ff 	.word	0x000007ff
 8001790:	0000041e 	.word	0x0000041e
 8001794:	0000043e 	.word	0x0000043e

08001798 <__eqdf2>:
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	464f      	mov	r7, r9
 800179c:	4646      	mov	r6, r8
 800179e:	46d6      	mov	lr, sl
 80017a0:	4684      	mov	ip, r0
 80017a2:	b5c0      	push	{r6, r7, lr}
 80017a4:	4680      	mov	r8, r0
 80017a6:	4e19      	ldr	r6, [pc, #100]	; (800180c <__eqdf2+0x74>)
 80017a8:	0318      	lsls	r0, r3, #12
 80017aa:	030f      	lsls	r7, r1, #12
 80017ac:	004d      	lsls	r5, r1, #1
 80017ae:	0b00      	lsrs	r0, r0, #12
 80017b0:	005c      	lsls	r4, r3, #1
 80017b2:	4682      	mov	sl, r0
 80017b4:	0b3f      	lsrs	r7, r7, #12
 80017b6:	0d6d      	lsrs	r5, r5, #21
 80017b8:	0fc9      	lsrs	r1, r1, #31
 80017ba:	4691      	mov	r9, r2
 80017bc:	0d64      	lsrs	r4, r4, #21
 80017be:	0fdb      	lsrs	r3, r3, #31
 80017c0:	2001      	movs	r0, #1
 80017c2:	42b5      	cmp	r5, r6
 80017c4:	d00a      	beq.n	80017dc <__eqdf2+0x44>
 80017c6:	42b4      	cmp	r4, r6
 80017c8:	d003      	beq.n	80017d2 <__eqdf2+0x3a>
 80017ca:	42a5      	cmp	r5, r4
 80017cc:	d101      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ce:	4557      	cmp	r7, sl
 80017d0:	d00c      	beq.n	80017ec <__eqdf2+0x54>
 80017d2:	bc1c      	pop	{r2, r3, r4}
 80017d4:	4690      	mov	r8, r2
 80017d6:	4699      	mov	r9, r3
 80017d8:	46a2      	mov	sl, r4
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017dc:	4666      	mov	r6, ip
 80017de:	433e      	orrs	r6, r7
 80017e0:	d1f7      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e2:	42ac      	cmp	r4, r5
 80017e4:	d1f5      	bne.n	80017d2 <__eqdf2+0x3a>
 80017e6:	4654      	mov	r4, sl
 80017e8:	4314      	orrs	r4, r2
 80017ea:	d1f2      	bne.n	80017d2 <__eqdf2+0x3a>
 80017ec:	2001      	movs	r0, #1
 80017ee:	45c8      	cmp	r8, r9
 80017f0:	d1ef      	bne.n	80017d2 <__eqdf2+0x3a>
 80017f2:	4299      	cmp	r1, r3
 80017f4:	d007      	beq.n	8001806 <__eqdf2+0x6e>
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	d1eb      	bne.n	80017d2 <__eqdf2+0x3a>
 80017fa:	4663      	mov	r3, ip
 80017fc:	431f      	orrs	r7, r3
 80017fe:	0038      	movs	r0, r7
 8001800:	1e47      	subs	r7, r0, #1
 8001802:	41b8      	sbcs	r0, r7
 8001804:	e7e5      	b.n	80017d2 <__eqdf2+0x3a>
 8001806:	2000      	movs	r0, #0
 8001808:	e7e3      	b.n	80017d2 <__eqdf2+0x3a>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	000007ff 	.word	0x000007ff

08001810 <__gedf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464f      	mov	r7, r9
 8001814:	4646      	mov	r6, r8
 8001816:	46d6      	mov	lr, sl
 8001818:	004d      	lsls	r5, r1, #1
 800181a:	b5c0      	push	{r6, r7, lr}
 800181c:	030e      	lsls	r6, r1, #12
 800181e:	0fc9      	lsrs	r1, r1, #31
 8001820:	468a      	mov	sl, r1
 8001822:	492c      	ldr	r1, [pc, #176]	; (80018d4 <__gedf2+0xc4>)
 8001824:	031f      	lsls	r7, r3, #12
 8001826:	005c      	lsls	r4, r3, #1
 8001828:	4680      	mov	r8, r0
 800182a:	0b36      	lsrs	r6, r6, #12
 800182c:	0d6d      	lsrs	r5, r5, #21
 800182e:	4691      	mov	r9, r2
 8001830:	0b3f      	lsrs	r7, r7, #12
 8001832:	0d64      	lsrs	r4, r4, #21
 8001834:	0fdb      	lsrs	r3, r3, #31
 8001836:	428d      	cmp	r5, r1
 8001838:	d01e      	beq.n	8001878 <__gedf2+0x68>
 800183a:	428c      	cmp	r4, r1
 800183c:	d016      	beq.n	800186c <__gedf2+0x5c>
 800183e:	2d00      	cmp	r5, #0
 8001840:	d11e      	bne.n	8001880 <__gedf2+0x70>
 8001842:	4330      	orrs	r0, r6
 8001844:	4684      	mov	ip, r0
 8001846:	2c00      	cmp	r4, #0
 8001848:	d101      	bne.n	800184e <__gedf2+0x3e>
 800184a:	433a      	orrs	r2, r7
 800184c:	d023      	beq.n	8001896 <__gedf2+0x86>
 800184e:	4662      	mov	r2, ip
 8001850:	2a00      	cmp	r2, #0
 8001852:	d01a      	beq.n	800188a <__gedf2+0x7a>
 8001854:	459a      	cmp	sl, r3
 8001856:	d029      	beq.n	80018ac <__gedf2+0x9c>
 8001858:	4651      	mov	r1, sl
 800185a:	2002      	movs	r0, #2
 800185c:	3901      	subs	r1, #1
 800185e:	4008      	ands	r0, r1
 8001860:	3801      	subs	r0, #1
 8001862:	bc1c      	pop	{r2, r3, r4}
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	46a2      	mov	sl, r4
 800186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186c:	0039      	movs	r1, r7
 800186e:	4311      	orrs	r1, r2
 8001870:	d0e5      	beq.n	800183e <__gedf2+0x2e>
 8001872:	2002      	movs	r0, #2
 8001874:	4240      	negs	r0, r0
 8001876:	e7f4      	b.n	8001862 <__gedf2+0x52>
 8001878:	4330      	orrs	r0, r6
 800187a:	d1fa      	bne.n	8001872 <__gedf2+0x62>
 800187c:	42ac      	cmp	r4, r5
 800187e:	d00f      	beq.n	80018a0 <__gedf2+0x90>
 8001880:	2c00      	cmp	r4, #0
 8001882:	d10f      	bne.n	80018a4 <__gedf2+0x94>
 8001884:	433a      	orrs	r2, r7
 8001886:	d0e7      	beq.n	8001858 <__gedf2+0x48>
 8001888:	e00c      	b.n	80018a4 <__gedf2+0x94>
 800188a:	2201      	movs	r2, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	4393      	bics	r3, r2
 8001890:	0018      	movs	r0, r3
 8001892:	3001      	adds	r0, #1
 8001894:	e7e5      	b.n	8001862 <__gedf2+0x52>
 8001896:	4663      	mov	r3, ip
 8001898:	2000      	movs	r0, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0e1      	beq.n	8001862 <__gedf2+0x52>
 800189e:	e7db      	b.n	8001858 <__gedf2+0x48>
 80018a0:	433a      	orrs	r2, r7
 80018a2:	d1e6      	bne.n	8001872 <__gedf2+0x62>
 80018a4:	459a      	cmp	sl, r3
 80018a6:	d1d7      	bne.n	8001858 <__gedf2+0x48>
 80018a8:	42a5      	cmp	r5, r4
 80018aa:	dcd5      	bgt.n	8001858 <__gedf2+0x48>
 80018ac:	42a5      	cmp	r5, r4
 80018ae:	db05      	blt.n	80018bc <__gedf2+0xac>
 80018b0:	42be      	cmp	r6, r7
 80018b2:	d8d1      	bhi.n	8001858 <__gedf2+0x48>
 80018b4:	d008      	beq.n	80018c8 <__gedf2+0xb8>
 80018b6:	2000      	movs	r0, #0
 80018b8:	42be      	cmp	r6, r7
 80018ba:	d2d2      	bcs.n	8001862 <__gedf2+0x52>
 80018bc:	4650      	mov	r0, sl
 80018be:	2301      	movs	r3, #1
 80018c0:	3801      	subs	r0, #1
 80018c2:	4398      	bics	r0, r3
 80018c4:	3001      	adds	r0, #1
 80018c6:	e7cc      	b.n	8001862 <__gedf2+0x52>
 80018c8:	45c8      	cmp	r8, r9
 80018ca:	d8c5      	bhi.n	8001858 <__gedf2+0x48>
 80018cc:	2000      	movs	r0, #0
 80018ce:	45c8      	cmp	r8, r9
 80018d0:	d3f4      	bcc.n	80018bc <__gedf2+0xac>
 80018d2:	e7c6      	b.n	8001862 <__gedf2+0x52>
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__ledf2>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	464f      	mov	r7, r9
 80018dc:	4646      	mov	r6, r8
 80018de:	46d6      	mov	lr, sl
 80018e0:	004d      	lsls	r5, r1, #1
 80018e2:	b5c0      	push	{r6, r7, lr}
 80018e4:	030e      	lsls	r6, r1, #12
 80018e6:	0fc9      	lsrs	r1, r1, #31
 80018e8:	468a      	mov	sl, r1
 80018ea:	492e      	ldr	r1, [pc, #184]	; (80019a4 <__ledf2+0xcc>)
 80018ec:	031f      	lsls	r7, r3, #12
 80018ee:	005c      	lsls	r4, r3, #1
 80018f0:	4680      	mov	r8, r0
 80018f2:	0b36      	lsrs	r6, r6, #12
 80018f4:	0d6d      	lsrs	r5, r5, #21
 80018f6:	4691      	mov	r9, r2
 80018f8:	0b3f      	lsrs	r7, r7, #12
 80018fa:	0d64      	lsrs	r4, r4, #21
 80018fc:	0fdb      	lsrs	r3, r3, #31
 80018fe:	428d      	cmp	r5, r1
 8001900:	d018      	beq.n	8001934 <__ledf2+0x5c>
 8001902:	428c      	cmp	r4, r1
 8001904:	d011      	beq.n	800192a <__ledf2+0x52>
 8001906:	2d00      	cmp	r5, #0
 8001908:	d118      	bne.n	800193c <__ledf2+0x64>
 800190a:	4330      	orrs	r0, r6
 800190c:	4684      	mov	ip, r0
 800190e:	2c00      	cmp	r4, #0
 8001910:	d11e      	bne.n	8001950 <__ledf2+0x78>
 8001912:	433a      	orrs	r2, r7
 8001914:	d11c      	bne.n	8001950 <__ledf2+0x78>
 8001916:	4663      	mov	r3, ip
 8001918:	2000      	movs	r0, #0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d030      	beq.n	8001980 <__ledf2+0xa8>
 800191e:	4651      	mov	r1, sl
 8001920:	2002      	movs	r0, #2
 8001922:	3901      	subs	r1, #1
 8001924:	4008      	ands	r0, r1
 8001926:	3801      	subs	r0, #1
 8001928:	e02a      	b.n	8001980 <__ledf2+0xa8>
 800192a:	0039      	movs	r1, r7
 800192c:	4311      	orrs	r1, r2
 800192e:	d0ea      	beq.n	8001906 <__ledf2+0x2e>
 8001930:	2002      	movs	r0, #2
 8001932:	e025      	b.n	8001980 <__ledf2+0xa8>
 8001934:	4330      	orrs	r0, r6
 8001936:	d1fb      	bne.n	8001930 <__ledf2+0x58>
 8001938:	42ac      	cmp	r4, r5
 800193a:	d026      	beq.n	800198a <__ledf2+0xb2>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d126      	bne.n	800198e <__ledf2+0xb6>
 8001940:	433a      	orrs	r2, r7
 8001942:	d124      	bne.n	800198e <__ledf2+0xb6>
 8001944:	4651      	mov	r1, sl
 8001946:	2002      	movs	r0, #2
 8001948:	3901      	subs	r1, #1
 800194a:	4008      	ands	r0, r1
 800194c:	3801      	subs	r0, #1
 800194e:	e017      	b.n	8001980 <__ledf2+0xa8>
 8001950:	4662      	mov	r2, ip
 8001952:	2a00      	cmp	r2, #0
 8001954:	d00f      	beq.n	8001976 <__ledf2+0x9e>
 8001956:	459a      	cmp	sl, r3
 8001958:	d1e1      	bne.n	800191e <__ledf2+0x46>
 800195a:	42a5      	cmp	r5, r4
 800195c:	db05      	blt.n	800196a <__ledf2+0x92>
 800195e:	42be      	cmp	r6, r7
 8001960:	d8dd      	bhi.n	800191e <__ledf2+0x46>
 8001962:	d019      	beq.n	8001998 <__ledf2+0xc0>
 8001964:	2000      	movs	r0, #0
 8001966:	42be      	cmp	r6, r7
 8001968:	d20a      	bcs.n	8001980 <__ledf2+0xa8>
 800196a:	4650      	mov	r0, sl
 800196c:	2301      	movs	r3, #1
 800196e:	3801      	subs	r0, #1
 8001970:	4398      	bics	r0, r3
 8001972:	3001      	adds	r0, #1
 8001974:	e004      	b.n	8001980 <__ledf2+0xa8>
 8001976:	2201      	movs	r2, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	4393      	bics	r3, r2
 800197c:	0018      	movs	r0, r3
 800197e:	3001      	adds	r0, #1
 8001980:	bc1c      	pop	{r2, r3, r4}
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	46a2      	mov	sl, r4
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	433a      	orrs	r2, r7
 800198c:	d1d0      	bne.n	8001930 <__ledf2+0x58>
 800198e:	459a      	cmp	sl, r3
 8001990:	d1c5      	bne.n	800191e <__ledf2+0x46>
 8001992:	42a5      	cmp	r5, r4
 8001994:	dcc3      	bgt.n	800191e <__ledf2+0x46>
 8001996:	e7e0      	b.n	800195a <__ledf2+0x82>
 8001998:	45c8      	cmp	r8, r9
 800199a:	d8c0      	bhi.n	800191e <__ledf2+0x46>
 800199c:	2000      	movs	r0, #0
 800199e:	45c8      	cmp	r8, r9
 80019a0:	d3e3      	bcc.n	800196a <__ledf2+0x92>
 80019a2:	e7ed      	b.n	8001980 <__ledf2+0xa8>
 80019a4:	000007ff 	.word	0x000007ff

080019a8 <__aeabi_dmul>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4657      	mov	r7, sl
 80019ac:	46de      	mov	lr, fp
 80019ae:	464e      	mov	r6, r9
 80019b0:	4645      	mov	r5, r8
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	4683      	mov	fp, r0
 80019b6:	0006      	movs	r6, r0
 80019b8:	030f      	lsls	r7, r1, #12
 80019ba:	0048      	lsls	r0, r1, #1
 80019bc:	b087      	sub	sp, #28
 80019be:	4692      	mov	sl, r2
 80019c0:	001d      	movs	r5, r3
 80019c2:	0b3f      	lsrs	r7, r7, #12
 80019c4:	0d40      	lsrs	r0, r0, #21
 80019c6:	0fcc      	lsrs	r4, r1, #31
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d100      	bne.n	80019ce <__aeabi_dmul+0x26>
 80019cc:	e06f      	b.n	8001aae <__aeabi_dmul+0x106>
 80019ce:	4bde      	ldr	r3, [pc, #888]	; (8001d48 <__aeabi_dmul+0x3a0>)
 80019d0:	4298      	cmp	r0, r3
 80019d2:	d038      	beq.n	8001a46 <__aeabi_dmul+0x9e>
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00ff      	lsls	r7, r7, #3
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431f      	orrs	r7, r3
 80019dc:	0f73      	lsrs	r3, r6, #29
 80019de:	433b      	orrs	r3, r7
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	4bda      	ldr	r3, [pc, #872]	; (8001d4c <__aeabi_dmul+0x3a4>)
 80019e4:	2700      	movs	r7, #0
 80019e6:	4699      	mov	r9, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	469b      	mov	fp, r3
 80019ec:	00f6      	lsls	r6, r6, #3
 80019ee:	4481      	add	r9, r0
 80019f0:	032b      	lsls	r3, r5, #12
 80019f2:	0069      	lsls	r1, r5, #1
 80019f4:	0b1b      	lsrs	r3, r3, #12
 80019f6:	4652      	mov	r2, sl
 80019f8:	4698      	mov	r8, r3
 80019fa:	0d49      	lsrs	r1, r1, #21
 80019fc:	0fed      	lsrs	r5, r5, #31
 80019fe:	2900      	cmp	r1, #0
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dmul+0x5c>
 8001a02:	e085      	b.n	8001b10 <__aeabi_dmul+0x168>
 8001a04:	4bd0      	ldr	r3, [pc, #832]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001a06:	4299      	cmp	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dmul+0x64>
 8001a0a:	e073      	b.n	8001af4 <__aeabi_dmul+0x14c>
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	00da      	lsls	r2, r3, #3
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	041b      	lsls	r3, r3, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	4652      	mov	r2, sl
 8001a18:	48cc      	ldr	r0, [pc, #816]	; (8001d4c <__aeabi_dmul+0x3a4>)
 8001a1a:	0f52      	lsrs	r2, r2, #29
 8001a1c:	4684      	mov	ip, r0
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	4652      	mov	r2, sl
 8001a22:	2000      	movs	r0, #0
 8001a24:	4461      	add	r1, ip
 8001a26:	00d2      	lsls	r2, r2, #3
 8001a28:	4489      	add	r9, r1
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	4069      	eors	r1, r5
 8001a2e:	9100      	str	r1, [sp, #0]
 8001a30:	468c      	mov	ip, r1
 8001a32:	2101      	movs	r1, #1
 8001a34:	4449      	add	r1, r9
 8001a36:	468a      	mov	sl, r1
 8001a38:	2f0f      	cmp	r7, #15
 8001a3a:	d900      	bls.n	8001a3e <__aeabi_dmul+0x96>
 8001a3c:	e090      	b.n	8001b60 <__aeabi_dmul+0x1b8>
 8001a3e:	49c4      	ldr	r1, [pc, #784]	; (8001d50 <__aeabi_dmul+0x3a8>)
 8001a40:	00bf      	lsls	r7, r7, #2
 8001a42:	59cf      	ldr	r7, [r1, r7]
 8001a44:	46bf      	mov	pc, r7
 8001a46:	465b      	mov	r3, fp
 8001a48:	433b      	orrs	r3, r7
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dmul+0xa8>
 8001a4e:	e16a      	b.n	8001d26 <__aeabi_dmul+0x37e>
 8001a50:	2302      	movs	r3, #2
 8001a52:	2708      	movs	r7, #8
 8001a54:	2600      	movs	r6, #0
 8001a56:	4681      	mov	r9, r0
 8001a58:	469b      	mov	fp, r3
 8001a5a:	e7c9      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001a5c:	0032      	movs	r2, r6
 8001a5e:	4658      	mov	r0, fp
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	4661      	mov	r1, ip
 8001a64:	9100      	str	r1, [sp, #0]
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0xc4>
 8001a6a:	e075      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001a6c:	2803      	cmp	r0, #3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0xca>
 8001a70:	e1fe      	b.n	8001e70 <__aeabi_dmul+0x4c8>
 8001a72:	2801      	cmp	r0, #1
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dmul+0xd0>
 8001a76:	e12c      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2700      	movs	r7, #0
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	2500      	movs	r5, #0
 8001a80:	033f      	lsls	r7, r7, #12
 8001a82:	0d2a      	lsrs	r2, r5, #20
 8001a84:	0b3f      	lsrs	r7, r7, #12
 8001a86:	48b3      	ldr	r0, [pc, #716]	; (8001d54 <__aeabi_dmul+0x3ac>)
 8001a88:	0512      	lsls	r2, r2, #20
 8001a8a:	433a      	orrs	r2, r7
 8001a8c:	4002      	ands	r2, r0
 8001a8e:	051b      	lsls	r3, r3, #20
 8001a90:	4313      	orrs	r3, r2
 8001a92:	9a00      	ldr	r2, [sp, #0]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	07d1      	lsls	r1, r2, #31
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	0030      	movs	r0, r6
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bc3c      	pop	{r2, r3, r4, r5}
 8001aa4:	4690      	mov	r8, r2
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	46a2      	mov	sl, r4
 8001aaa:	46ab      	mov	fp, r5
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	465b      	mov	r3, fp
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dmul+0x110>
 8001ab6:	e12f      	b.n	8001d18 <__aeabi_dmul+0x370>
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	d100      	bne.n	8001abe <__aeabi_dmul+0x116>
 8001abc:	e1a5      	b.n	8001e0a <__aeabi_dmul+0x462>
 8001abe:	0038      	movs	r0, r7
 8001ac0:	f000 fe20 	bl	8002704 <__clzsi2>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	3b0b      	subs	r3, #11
 8001ac8:	2b1c      	cmp	r3, #28
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dmul+0x126>
 8001acc:	e196      	b.n	8001dfc <__aeabi_dmul+0x454>
 8001ace:	221d      	movs	r2, #29
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	465a      	mov	r2, fp
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	40da      	lsrs	r2, r3
 8001ad8:	465e      	mov	r6, fp
 8001ada:	3908      	subs	r1, #8
 8001adc:	408f      	lsls	r7, r1
 8001ade:	0013      	movs	r3, r2
 8001ae0:	408e      	lsls	r6, r1
 8001ae2:	433b      	orrs	r3, r7
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001ae8:	2700      	movs	r7, #0
 8001aea:	1a1b      	subs	r3, r3, r0
 8001aec:	4699      	mov	r9, r3
 8001aee:	2300      	movs	r3, #0
 8001af0:	469b      	mov	fp, r3
 8001af2:	e77d      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4653      	mov	r3, sl
 8001af8:	430b      	orrs	r3, r1
 8001afa:	4993      	ldr	r1, [pc, #588]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001afc:	468c      	mov	ip, r1
 8001afe:	44e1      	add	r9, ip
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dmul+0x15e>
 8001b04:	e11a      	b.n	8001d3c <__aeabi_dmul+0x394>
 8001b06:	2202      	movs	r2, #2
 8001b08:	2002      	movs	r0, #2
 8001b0a:	4317      	orrs	r7, r2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	e78c      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b10:	4313      	orrs	r3, r2
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0x16e>
 8001b14:	e10d      	b.n	8001d32 <__aeabi_dmul+0x38a>
 8001b16:	4643      	mov	r3, r8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0x176>
 8001b1c:	e181      	b.n	8001e22 <__aeabi_dmul+0x47a>
 8001b1e:	4640      	mov	r0, r8
 8001b20:	f000 fdf0 	bl	8002704 <__clzsi2>
 8001b24:	0002      	movs	r2, r0
 8001b26:	3a0b      	subs	r2, #11
 8001b28:	2a1c      	cmp	r2, #28
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dmul+0x186>
 8001b2c:	e172      	b.n	8001e14 <__aeabi_dmul+0x46c>
 8001b2e:	0001      	movs	r1, r0
 8001b30:	4643      	mov	r3, r8
 8001b32:	3908      	subs	r1, #8
 8001b34:	408b      	lsls	r3, r1
 8001b36:	4698      	mov	r8, r3
 8001b38:	231d      	movs	r3, #29
 8001b3a:	1a9a      	subs	r2, r3, r2
 8001b3c:	4653      	mov	r3, sl
 8001b3e:	40d3      	lsrs	r3, r2
 8001b40:	001a      	movs	r2, r3
 8001b42:	4643      	mov	r3, r8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	4652      	mov	r2, sl
 8001b48:	408a      	lsls	r2, r1
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	1a08      	subs	r0, r1, r0
 8001b4e:	4982      	ldr	r1, [pc, #520]	; (8001d58 <__aeabi_dmul+0x3b0>)
 8001b50:	4689      	mov	r9, r1
 8001b52:	4481      	add	r9, r0
 8001b54:	2000      	movs	r0, #0
 8001b56:	e768      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <__aeabi_dmul+0x3a0>)
 8001b5a:	2700      	movs	r7, #0
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	e78e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001b60:	0c14      	lsrs	r4, r2, #16
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	0011      	movs	r1, r2
 8001b68:	0c37      	lsrs	r7, r6, #16
 8001b6a:	0436      	lsls	r6, r6, #16
 8001b6c:	0c35      	lsrs	r5, r6, #16
 8001b6e:	4379      	muls	r1, r7
 8001b70:	0028      	movs	r0, r5
 8001b72:	468c      	mov	ip, r1
 8001b74:	002e      	movs	r6, r5
 8001b76:	4360      	muls	r0, r4
 8001b78:	4460      	add	r0, ip
 8001b7a:	4683      	mov	fp, r0
 8001b7c:	4356      	muls	r6, r2
 8001b7e:	0021      	movs	r1, r4
 8001b80:	0c30      	lsrs	r0, r6, #16
 8001b82:	4680      	mov	r8, r0
 8001b84:	4658      	mov	r0, fp
 8001b86:	4379      	muls	r1, r7
 8001b88:	4440      	add	r0, r8
 8001b8a:	9102      	str	r1, [sp, #8]
 8001b8c:	4584      	cmp	ip, r0
 8001b8e:	d906      	bls.n	8001b9e <__aeabi_dmul+0x1f6>
 8001b90:	4688      	mov	r8, r1
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0249      	lsls	r1, r1, #9
 8001b96:	468c      	mov	ip, r1
 8001b98:	44e0      	add	r8, ip
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	9102      	str	r1, [sp, #8]
 8001b9e:	0436      	lsls	r6, r6, #16
 8001ba0:	0c01      	lsrs	r1, r0, #16
 8001ba2:	0c36      	lsrs	r6, r6, #16
 8001ba4:	0400      	lsls	r0, r0, #16
 8001ba6:	468b      	mov	fp, r1
 8001ba8:	1981      	adds	r1, r0, r6
 8001baa:	0c1e      	lsrs	r6, r3, #16
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	9103      	str	r1, [sp, #12]
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4379      	muls	r1, r7
 8001bb6:	468c      	mov	ip, r1
 8001bb8:	0028      	movs	r0, r5
 8001bba:	4375      	muls	r5, r6
 8001bbc:	4465      	add	r5, ip
 8001bbe:	46a8      	mov	r8, r5
 8001bc0:	4358      	muls	r0, r3
 8001bc2:	0c05      	lsrs	r5, r0, #16
 8001bc4:	4445      	add	r5, r8
 8001bc6:	4377      	muls	r7, r6
 8001bc8:	42a9      	cmp	r1, r5
 8001bca:	d903      	bls.n	8001bd4 <__aeabi_dmul+0x22c>
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	468c      	mov	ip, r1
 8001bd2:	4467      	add	r7, ip
 8001bd4:	0c29      	lsrs	r1, r5, #16
 8001bd6:	468c      	mov	ip, r1
 8001bd8:	0039      	movs	r1, r7
 8001bda:	0400      	lsls	r0, r0, #16
 8001bdc:	0c00      	lsrs	r0, r0, #16
 8001bde:	042d      	lsls	r5, r5, #16
 8001be0:	182d      	adds	r5, r5, r0
 8001be2:	4461      	add	r1, ip
 8001be4:	44ab      	add	fp, r5
 8001be6:	9105      	str	r1, [sp, #20]
 8001be8:	4659      	mov	r1, fp
 8001bea:	9104      	str	r1, [sp, #16]
 8001bec:	9901      	ldr	r1, [sp, #4]
 8001bee:	040f      	lsls	r7, r1, #16
 8001bf0:	0c3f      	lsrs	r7, r7, #16
 8001bf2:	0c08      	lsrs	r0, r1, #16
 8001bf4:	0039      	movs	r1, r7
 8001bf6:	4351      	muls	r1, r2
 8001bf8:	4342      	muls	r2, r0
 8001bfa:	4690      	mov	r8, r2
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	468c      	mov	ip, r1
 8001c00:	0c09      	lsrs	r1, r1, #16
 8001c02:	468b      	mov	fp, r1
 8001c04:	4362      	muls	r2, r4
 8001c06:	437c      	muls	r4, r7
 8001c08:	4444      	add	r4, r8
 8001c0a:	445c      	add	r4, fp
 8001c0c:	45a0      	cmp	r8, r4
 8001c0e:	d903      	bls.n	8001c18 <__aeabi_dmul+0x270>
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	0249      	lsls	r1, r1, #9
 8001c14:	4688      	mov	r8, r1
 8001c16:	4442      	add	r2, r8
 8001c18:	0c21      	lsrs	r1, r4, #16
 8001c1a:	4688      	mov	r8, r1
 8001c1c:	4661      	mov	r1, ip
 8001c1e:	0409      	lsls	r1, r1, #16
 8001c20:	0c09      	lsrs	r1, r1, #16
 8001c22:	468c      	mov	ip, r1
 8001c24:	0039      	movs	r1, r7
 8001c26:	4359      	muls	r1, r3
 8001c28:	4343      	muls	r3, r0
 8001c2a:	4370      	muls	r0, r6
 8001c2c:	437e      	muls	r6, r7
 8001c2e:	0c0f      	lsrs	r7, r1, #16
 8001c30:	18f6      	adds	r6, r6, r3
 8001c32:	0424      	lsls	r4, r4, #16
 8001c34:	19be      	adds	r6, r7, r6
 8001c36:	4464      	add	r4, ip
 8001c38:	4442      	add	r2, r8
 8001c3a:	468c      	mov	ip, r1
 8001c3c:	42b3      	cmp	r3, r6
 8001c3e:	d903      	bls.n	8001c48 <__aeabi_dmul+0x2a0>
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	4698      	mov	r8, r3
 8001c46:	4440      	add	r0, r8
 8001c48:	9b02      	ldr	r3, [sp, #8]
 8001c4a:	4661      	mov	r1, ip
 8001c4c:	4698      	mov	r8, r3
 8001c4e:	9b04      	ldr	r3, [sp, #16]
 8001c50:	0437      	lsls	r7, r6, #16
 8001c52:	4443      	add	r3, r8
 8001c54:	469b      	mov	fp, r3
 8001c56:	45ab      	cmp	fp, r5
 8001c58:	41ad      	sbcs	r5, r5
 8001c5a:	426b      	negs	r3, r5
 8001c5c:	040d      	lsls	r5, r1, #16
 8001c5e:	9905      	ldr	r1, [sp, #20]
 8001c60:	0c2d      	lsrs	r5, r5, #16
 8001c62:	468c      	mov	ip, r1
 8001c64:	197f      	adds	r7, r7, r5
 8001c66:	4467      	add	r7, ip
 8001c68:	18fd      	adds	r5, r7, r3
 8001c6a:	46a8      	mov	r8, r5
 8001c6c:	465d      	mov	r5, fp
 8001c6e:	192d      	adds	r5, r5, r4
 8001c70:	42a5      	cmp	r5, r4
 8001c72:	41a4      	sbcs	r4, r4
 8001c74:	4693      	mov	fp, r2
 8001c76:	4264      	negs	r4, r4
 8001c78:	46a4      	mov	ip, r4
 8001c7a:	44c3      	add	fp, r8
 8001c7c:	44dc      	add	ip, fp
 8001c7e:	428f      	cmp	r7, r1
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4598      	cmp	r8, r3
 8001c84:	419b      	sbcs	r3, r3
 8001c86:	4593      	cmp	fp, r2
 8001c88:	4192      	sbcs	r2, r2
 8001c8a:	45a4      	cmp	ip, r4
 8001c8c:	41a4      	sbcs	r4, r4
 8001c8e:	425b      	negs	r3, r3
 8001c90:	427f      	negs	r7, r7
 8001c92:	431f      	orrs	r7, r3
 8001c94:	0c36      	lsrs	r6, r6, #16
 8001c96:	4252      	negs	r2, r2
 8001c98:	4264      	negs	r4, r4
 8001c9a:	19bf      	adds	r7, r7, r6
 8001c9c:	4322      	orrs	r2, r4
 8001c9e:	18bf      	adds	r7, r7, r2
 8001ca0:	4662      	mov	r2, ip
 8001ca2:	1838      	adds	r0, r7, r0
 8001ca4:	0243      	lsls	r3, r0, #9
 8001ca6:	0dd2      	lsrs	r2, r2, #23
 8001ca8:	9903      	ldr	r1, [sp, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	026a      	lsls	r2, r5, #9
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	1e50      	subs	r0, r2, #1
 8001cb2:	4182      	sbcs	r2, r0
 8001cb4:	4661      	mov	r1, ip
 8001cb6:	0ded      	lsrs	r5, r5, #23
 8001cb8:	432a      	orrs	r2, r5
 8001cba:	024e      	lsls	r6, r1, #9
 8001cbc:	4332      	orrs	r2, r6
 8001cbe:	01d9      	lsls	r1, r3, #7
 8001cc0:	d400      	bmi.n	8001cc4 <__aeabi_dmul+0x31c>
 8001cc2:	e0b3      	b.n	8001e2c <__aeabi_dmul+0x484>
 8001cc4:	2601      	movs	r6, #1
 8001cc6:	0850      	lsrs	r0, r2, #1
 8001cc8:	4032      	ands	r2, r6
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	07de      	lsls	r6, r3, #31
 8001cce:	4332      	orrs	r2, r6
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	4c22      	ldr	r4, [pc, #136]	; (8001d5c <__aeabi_dmul+0x3b4>)
 8001cd4:	4454      	add	r4, sl
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	dd62      	ble.n	8001da0 <__aeabi_dmul+0x3f8>
 8001cda:	0751      	lsls	r1, r2, #29
 8001cdc:	d009      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001cde:	200f      	movs	r0, #15
 8001ce0:	4010      	ands	r0, r2
 8001ce2:	2804      	cmp	r0, #4
 8001ce4:	d005      	beq.n	8001cf2 <__aeabi_dmul+0x34a>
 8001ce6:	1d10      	adds	r0, r2, #4
 8001ce8:	4290      	cmp	r0, r2
 8001cea:	4192      	sbcs	r2, r2
 8001cec:	4252      	negs	r2, r2
 8001cee:	189b      	adds	r3, r3, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	01d9      	lsls	r1, r3, #7
 8001cf4:	d504      	bpl.n	8001d00 <__aeabi_dmul+0x358>
 8001cf6:	2480      	movs	r4, #128	; 0x80
 8001cf8:	4819      	ldr	r0, [pc, #100]	; (8001d60 <__aeabi_dmul+0x3b8>)
 8001cfa:	00e4      	lsls	r4, r4, #3
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	4454      	add	r4, sl
 8001d00:	4818      	ldr	r0, [pc, #96]	; (8001d64 <__aeabi_dmul+0x3bc>)
 8001d02:	4284      	cmp	r4, r0
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dmul+0x360>
 8001d06:	e727      	b.n	8001b58 <__aeabi_dmul+0x1b0>
 8001d08:	075e      	lsls	r6, r3, #29
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	08d2      	lsrs	r2, r2, #3
 8001d0e:	0b1f      	lsrs	r7, r3, #12
 8001d10:	0563      	lsls	r3, r4, #21
 8001d12:	4316      	orrs	r6, r2
 8001d14:	0d5b      	lsrs	r3, r3, #21
 8001d16:	e6b2      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	2704      	movs	r7, #4
 8001d20:	2600      	movs	r6, #0
 8001d22:	469b      	mov	fp, r3
 8001d24:	e664      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d26:	2303      	movs	r3, #3
 8001d28:	9701      	str	r7, [sp, #4]
 8001d2a:	4681      	mov	r9, r0
 8001d2c:	270c      	movs	r7, #12
 8001d2e:	469b      	mov	fp, r3
 8001d30:	e65e      	b.n	80019f0 <__aeabi_dmul+0x48>
 8001d32:	2201      	movs	r2, #1
 8001d34:	2001      	movs	r0, #1
 8001d36:	4317      	orrs	r7, r2
 8001d38:	2200      	movs	r2, #0
 8001d3a:	e676      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	2003      	movs	r0, #3
 8001d40:	431f      	orrs	r7, r3
 8001d42:	4643      	mov	r3, r8
 8001d44:	e671      	b.n	8001a2a <__aeabi_dmul+0x82>
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	000007ff 	.word	0x000007ff
 8001d4c:	fffffc01 	.word	0xfffffc01
 8001d50:	08020268 	.word	0x08020268
 8001d54:	800fffff 	.word	0x800fffff
 8001d58:	fffffc0d 	.word	0xfffffc0d
 8001d5c:	000003ff 	.word	0x000003ff
 8001d60:	feffffff 	.word	0xfeffffff
 8001d64:	000007fe 	.word	0x000007fe
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2780      	movs	r7, #128	; 0x80
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	033f      	lsls	r7, r7, #12
 8001d70:	2600      	movs	r6, #0
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d74:	e683      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	0032      	movs	r2, r6
 8001d7a:	46a4      	mov	ip, r4
 8001d7c:	4658      	mov	r0, fp
 8001d7e:	e670      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d80:	46ac      	mov	ip, r5
 8001d82:	e66e      	b.n	8001a62 <__aeabi_dmul+0xba>
 8001d84:	2780      	movs	r7, #128	; 0x80
 8001d86:	9901      	ldr	r1, [sp, #4]
 8001d88:	033f      	lsls	r7, r7, #12
 8001d8a:	4239      	tst	r1, r7
 8001d8c:	d02d      	beq.n	8001dea <__aeabi_dmul+0x442>
 8001d8e:	423b      	tst	r3, r7
 8001d90:	d12b      	bne.n	8001dea <__aeabi_dmul+0x442>
 8001d92:	431f      	orrs	r7, r3
 8001d94:	033f      	lsls	r7, r7, #12
 8001d96:	0b3f      	lsrs	r7, r7, #12
 8001d98:	9500      	str	r5, [sp, #0]
 8001d9a:	0016      	movs	r6, r2
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001d9e:	e66e      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001da0:	2501      	movs	r5, #1
 8001da2:	1b2d      	subs	r5, r5, r4
 8001da4:	2d38      	cmp	r5, #56	; 0x38
 8001da6:	dd00      	ble.n	8001daa <__aeabi_dmul+0x402>
 8001da8:	e666      	b.n	8001a78 <__aeabi_dmul+0xd0>
 8001daa:	2d1f      	cmp	r5, #31
 8001dac:	dc40      	bgt.n	8001e30 <__aeabi_dmul+0x488>
 8001dae:	4835      	ldr	r0, [pc, #212]	; (8001e84 <__aeabi_dmul+0x4dc>)
 8001db0:	001c      	movs	r4, r3
 8001db2:	4450      	add	r0, sl
 8001db4:	0016      	movs	r6, r2
 8001db6:	4082      	lsls	r2, r0
 8001db8:	4084      	lsls	r4, r0
 8001dba:	40ee      	lsrs	r6, r5
 8001dbc:	1e50      	subs	r0, r2, #1
 8001dbe:	4182      	sbcs	r2, r0
 8001dc0:	4334      	orrs	r4, r6
 8001dc2:	4314      	orrs	r4, r2
 8001dc4:	40eb      	lsrs	r3, r5
 8001dc6:	0762      	lsls	r2, r4, #29
 8001dc8:	d009      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dca:	220f      	movs	r2, #15
 8001dcc:	4022      	ands	r2, r4
 8001dce:	2a04      	cmp	r2, #4
 8001dd0:	d005      	beq.n	8001dde <__aeabi_dmul+0x436>
 8001dd2:	0022      	movs	r2, r4
 8001dd4:	1d14      	adds	r4, r2, #4
 8001dd6:	4294      	cmp	r4, r2
 8001dd8:	4180      	sbcs	r0, r0
 8001dda:	4240      	negs	r0, r0
 8001ddc:	181b      	adds	r3, r3, r0
 8001dde:	021a      	lsls	r2, r3, #8
 8001de0:	d53e      	bpl.n	8001e60 <__aeabi_dmul+0x4b8>
 8001de2:	2301      	movs	r3, #1
 8001de4:	2700      	movs	r7, #0
 8001de6:	2600      	movs	r6, #0
 8001de8:	e649      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dea:	2780      	movs	r7, #128	; 0x80
 8001dec:	9b01      	ldr	r3, [sp, #4]
 8001dee:	033f      	lsls	r7, r7, #12
 8001df0:	431f      	orrs	r7, r3
 8001df2:	033f      	lsls	r7, r7, #12
 8001df4:	0b3f      	lsrs	r7, r7, #12
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001dfa:	e640      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	465a      	mov	r2, fp
 8001e00:	3b28      	subs	r3, #40	; 0x28
 8001e02:	409a      	lsls	r2, r3
 8001e04:	2600      	movs	r6, #0
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	e66d      	b.n	8001ae6 <__aeabi_dmul+0x13e>
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	f000 fc7a 	bl	8002704 <__clzsi2>
 8001e10:	3020      	adds	r0, #32
 8001e12:	e657      	b.n	8001ac4 <__aeabi_dmul+0x11c>
 8001e14:	0003      	movs	r3, r0
 8001e16:	4652      	mov	r2, sl
 8001e18:	3b28      	subs	r3, #40	; 0x28
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e693      	b.n	8001b4a <__aeabi_dmul+0x1a2>
 8001e22:	4650      	mov	r0, sl
 8001e24:	f000 fc6e 	bl	8002704 <__clzsi2>
 8001e28:	3020      	adds	r0, #32
 8001e2a:	e67b      	b.n	8001b24 <__aeabi_dmul+0x17c>
 8001e2c:	46ca      	mov	sl, r9
 8001e2e:	e750      	b.n	8001cd2 <__aeabi_dmul+0x32a>
 8001e30:	201f      	movs	r0, #31
 8001e32:	001e      	movs	r6, r3
 8001e34:	4240      	negs	r0, r0
 8001e36:	1b04      	subs	r4, r0, r4
 8001e38:	40e6      	lsrs	r6, r4
 8001e3a:	2d20      	cmp	r5, #32
 8001e3c:	d003      	beq.n	8001e46 <__aeabi_dmul+0x49e>
 8001e3e:	4c12      	ldr	r4, [pc, #72]	; (8001e88 <__aeabi_dmul+0x4e0>)
 8001e40:	4454      	add	r4, sl
 8001e42:	40a3      	lsls	r3, r4
 8001e44:	431a      	orrs	r2, r3
 8001e46:	1e50      	subs	r0, r2, #1
 8001e48:	4182      	sbcs	r2, r0
 8001e4a:	4332      	orrs	r2, r6
 8001e4c:	2607      	movs	r6, #7
 8001e4e:	2700      	movs	r7, #0
 8001e50:	4016      	ands	r6, r2
 8001e52:	d009      	beq.n	8001e68 <__aeabi_dmul+0x4c0>
 8001e54:	200f      	movs	r0, #15
 8001e56:	2300      	movs	r3, #0
 8001e58:	4010      	ands	r0, r2
 8001e5a:	0014      	movs	r4, r2
 8001e5c:	2804      	cmp	r0, #4
 8001e5e:	d1b9      	bne.n	8001dd4 <__aeabi_dmul+0x42c>
 8001e60:	0022      	movs	r2, r4
 8001e62:	075e      	lsls	r6, r3, #29
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	0b1f      	lsrs	r7, r3, #12
 8001e68:	08d2      	lsrs	r2, r2, #3
 8001e6a:	4316      	orrs	r6, r2
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e606      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e70:	2780      	movs	r7, #128	; 0x80
 8001e72:	033f      	lsls	r7, r7, #12
 8001e74:	431f      	orrs	r7, r3
 8001e76:	033f      	lsls	r7, r7, #12
 8001e78:	0b3f      	lsrs	r7, r7, #12
 8001e7a:	0016      	movs	r6, r2
 8001e7c:	4b00      	ldr	r3, [pc, #0]	; (8001e80 <__aeabi_dmul+0x4d8>)
 8001e7e:	e5fe      	b.n	8001a7e <__aeabi_dmul+0xd6>
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	0000041e 	.word	0x0000041e
 8001e88:	0000043e 	.word	0x0000043e

08001e8c <__aeabi_dsub>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	4657      	mov	r7, sl
 8001e90:	464e      	mov	r6, r9
 8001e92:	4645      	mov	r5, r8
 8001e94:	46de      	mov	lr, fp
 8001e96:	000c      	movs	r4, r1
 8001e98:	0309      	lsls	r1, r1, #12
 8001e9a:	b5e0      	push	{r5, r6, r7, lr}
 8001e9c:	0a49      	lsrs	r1, r1, #9
 8001e9e:	0f46      	lsrs	r6, r0, #29
 8001ea0:	005f      	lsls	r7, r3, #1
 8001ea2:	4331      	orrs	r1, r6
 8001ea4:	031e      	lsls	r6, r3, #12
 8001ea6:	0fdb      	lsrs	r3, r3, #31
 8001ea8:	0a76      	lsrs	r6, r6, #9
 8001eaa:	469b      	mov	fp, r3
 8001eac:	0f53      	lsrs	r3, r2, #29
 8001eae:	4333      	orrs	r3, r6
 8001eb0:	4ec8      	ldr	r6, [pc, #800]	; (80021d4 <__aeabi_dsub+0x348>)
 8001eb2:	0065      	lsls	r5, r4, #1
 8001eb4:	00c0      	lsls	r0, r0, #3
 8001eb6:	0fe4      	lsrs	r4, r4, #31
 8001eb8:	00d2      	lsls	r2, r2, #3
 8001eba:	0d6d      	lsrs	r5, r5, #21
 8001ebc:	46a2      	mov	sl, r4
 8001ebe:	4681      	mov	r9, r0
 8001ec0:	0d7f      	lsrs	r7, r7, #21
 8001ec2:	469c      	mov	ip, r3
 8001ec4:	4690      	mov	r8, r2
 8001ec6:	42b7      	cmp	r7, r6
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dsub+0x40>
 8001eca:	e0b9      	b.n	8002040 <__aeabi_dsub+0x1b4>
 8001ecc:	465b      	mov	r3, fp
 8001ece:	2601      	movs	r6, #1
 8001ed0:	4073      	eors	r3, r6
 8001ed2:	469b      	mov	fp, r3
 8001ed4:	1bee      	subs	r6, r5, r7
 8001ed6:	45a3      	cmp	fp, r4
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x50>
 8001eda:	e083      	b.n	8001fe4 <__aeabi_dsub+0x158>
 8001edc:	2e00      	cmp	r6, #0
 8001ede:	dd63      	ble.n	8001fa8 <__aeabi_dsub+0x11c>
 8001ee0:	2f00      	cmp	r7, #0
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x5a>
 8001ee4:	e0b1      	b.n	800204a <__aeabi_dsub+0x1be>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x62>
 8001eec:	e123      	b.n	8002136 <__aeabi_dsub+0x2aa>
 8001eee:	1e73      	subs	r3, r6, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_dsub+0x6a>
 8001ef4:	e1ba      	b.n	800226c <__aeabi_dsub+0x3e0>
 8001ef6:	1a86      	subs	r6, r0, r2
 8001ef8:	4663      	mov	r3, ip
 8001efa:	42b0      	cmp	r0, r6
 8001efc:	4180      	sbcs	r0, r0
 8001efe:	2501      	movs	r5, #1
 8001f00:	1ac9      	subs	r1, r1, r3
 8001f02:	4240      	negs	r0, r0
 8001f04:	1a09      	subs	r1, r1, r0
 8001f06:	020b      	lsls	r3, r1, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x80>
 8001f0a:	e147      	b.n	800219c <__aeabi_dsub+0x310>
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	0a4b      	lsrs	r3, r1, #9
 8001f10:	4698      	mov	r8, r3
 8001f12:	4643      	mov	r3, r8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x8e>
 8001f18:	e189      	b.n	800222e <__aeabi_dsub+0x3a2>
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f000 fbf2 	bl	8002704 <__clzsi2>
 8001f20:	0003      	movs	r3, r0
 8001f22:	3b08      	subs	r3, #8
 8001f24:	2b1f      	cmp	r3, #31
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0x9e>
 8001f28:	e17c      	b.n	8002224 <__aeabi_dsub+0x398>
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	0030      	movs	r0, r6
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	4641      	mov	r1, r8
 8001f32:	40d0      	lsrs	r0, r2
 8001f34:	4099      	lsls	r1, r3
 8001f36:	0002      	movs	r2, r0
 8001f38:	409e      	lsls	r6, r3
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	429d      	cmp	r5, r3
 8001f3e:	dd00      	ble.n	8001f42 <__aeabi_dsub+0xb6>
 8001f40:	e16a      	b.n	8002218 <__aeabi_dsub+0x38c>
 8001f42:	1b5d      	subs	r5, r3, r5
 8001f44:	1c6b      	adds	r3, r5, #1
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dd00      	ble.n	8001f4c <__aeabi_dsub+0xc0>
 8001f4a:	e194      	b.n	8002276 <__aeabi_dsub+0x3ea>
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	0010      	movs	r0, r2
 8001f50:	0035      	movs	r5, r6
 8001f52:	1ac9      	subs	r1, r1, r3
 8001f54:	408e      	lsls	r6, r1
 8001f56:	40da      	lsrs	r2, r3
 8001f58:	4088      	lsls	r0, r1
 8001f5a:	40dd      	lsrs	r5, r3
 8001f5c:	1e71      	subs	r1, r6, #1
 8001f5e:	418e      	sbcs	r6, r1
 8001f60:	0011      	movs	r1, r2
 8001f62:	2207      	movs	r2, #7
 8001f64:	4328      	orrs	r0, r5
 8001f66:	2500      	movs	r5, #0
 8001f68:	4306      	orrs	r6, r0
 8001f6a:	4032      	ands	r2, r6
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d009      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f70:	230f      	movs	r3, #15
 8001f72:	4033      	ands	r3, r6
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d005      	beq.n	8001f84 <__aeabi_dsub+0xf8>
 8001f78:	1d33      	adds	r3, r6, #4
 8001f7a:	42b3      	cmp	r3, r6
 8001f7c:	41b6      	sbcs	r6, r6
 8001f7e:	4276      	negs	r6, r6
 8001f80:	1989      	adds	r1, r1, r6
 8001f82:	001e      	movs	r6, r3
 8001f84:	020b      	lsls	r3, r1, #8
 8001f86:	d400      	bmi.n	8001f8a <__aeabi_dsub+0xfe>
 8001f88:	e23d      	b.n	8002406 <__aeabi_dsub+0x57a>
 8001f8a:	1c6a      	adds	r2, r5, #1
 8001f8c:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <__aeabi_dsub+0x348>)
 8001f8e:	0555      	lsls	r5, r2, #21
 8001f90:	0d6d      	lsrs	r5, r5, #21
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x10c>
 8001f96:	e119      	b.n	80021cc <__aeabi_dsub+0x340>
 8001f98:	4a8f      	ldr	r2, [pc, #572]	; (80021d8 <__aeabi_dsub+0x34c>)
 8001f9a:	08f6      	lsrs	r6, r6, #3
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	0757      	lsls	r7, r2, #29
 8001fa0:	0252      	lsls	r2, r2, #9
 8001fa2:	4337      	orrs	r7, r6
 8001fa4:	0b12      	lsrs	r2, r2, #12
 8001fa6:	e09b      	b.n	80020e0 <__aeabi_dsub+0x254>
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	d000      	beq.n	8001fae <__aeabi_dsub+0x122>
 8001fac:	e0c5      	b.n	800213a <__aeabi_dsub+0x2ae>
 8001fae:	1c6e      	adds	r6, r5, #1
 8001fb0:	0576      	lsls	r6, r6, #21
 8001fb2:	0d76      	lsrs	r6, r6, #21
 8001fb4:	2e01      	cmp	r6, #1
 8001fb6:	dc00      	bgt.n	8001fba <__aeabi_dsub+0x12e>
 8001fb8:	e148      	b.n	800224c <__aeabi_dsub+0x3c0>
 8001fba:	4667      	mov	r7, ip
 8001fbc:	1a86      	subs	r6, r0, r2
 8001fbe:	1bcb      	subs	r3, r1, r7
 8001fc0:	42b0      	cmp	r0, r6
 8001fc2:	41bf      	sbcs	r7, r7
 8001fc4:	427f      	negs	r7, r7
 8001fc6:	46b8      	mov	r8, r7
 8001fc8:	001f      	movs	r7, r3
 8001fca:	4643      	mov	r3, r8
 8001fcc:	1aff      	subs	r7, r7, r3
 8001fce:	003b      	movs	r3, r7
 8001fd0:	46b8      	mov	r8, r7
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	d500      	bpl.n	8001fd8 <__aeabi_dsub+0x14c>
 8001fd6:	e15f      	b.n	8002298 <__aeabi_dsub+0x40c>
 8001fd8:	4337      	orrs	r7, r6
 8001fda:	d19a      	bne.n	8001f12 <__aeabi_dsub+0x86>
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2400      	movs	r4, #0
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	e079      	b.n	80020d8 <__aeabi_dsub+0x24c>
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x15e>
 8001fe8:	e0fa      	b.n	80021e0 <__aeabi_dsub+0x354>
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x164>
 8001fee:	e08d      	b.n	800210c <__aeabi_dsub+0x280>
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <__aeabi_dsub+0x348>)
 8001ff2:	429d      	cmp	r5, r3
 8001ff4:	d067      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	4667      	mov	r7, ip
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	431f      	orrs	r7, r3
 8001ffe:	46bc      	mov	ip, r7
 8002000:	2e38      	cmp	r6, #56	; 0x38
 8002002:	dc00      	bgt.n	8002006 <__aeabi_dsub+0x17a>
 8002004:	e152      	b.n	80022ac <__aeabi_dsub+0x420>
 8002006:	4663      	mov	r3, ip
 8002008:	4313      	orrs	r3, r2
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	4193      	sbcs	r3, r2
 800200e:	181e      	adds	r6, r3, r0
 8002010:	4286      	cmp	r6, r0
 8002012:	4180      	sbcs	r0, r0
 8002014:	4240      	negs	r0, r0
 8002016:	1809      	adds	r1, r1, r0
 8002018:	020b      	lsls	r3, r1, #8
 800201a:	d400      	bmi.n	800201e <__aeabi_dsub+0x192>
 800201c:	e0be      	b.n	800219c <__aeabi_dsub+0x310>
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <__aeabi_dsub+0x348>)
 8002020:	3501      	adds	r5, #1
 8002022:	429d      	cmp	r5, r3
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x19c>
 8002026:	e0d2      	b.n	80021ce <__aeabi_dsub+0x342>
 8002028:	4a6b      	ldr	r2, [pc, #428]	; (80021d8 <__aeabi_dsub+0x34c>)
 800202a:	0873      	lsrs	r3, r6, #1
 800202c:	400a      	ands	r2, r1
 800202e:	2101      	movs	r1, #1
 8002030:	400e      	ands	r6, r1
 8002032:	431e      	orrs	r6, r3
 8002034:	0851      	lsrs	r1, r2, #1
 8002036:	07d3      	lsls	r3, r2, #31
 8002038:	2207      	movs	r2, #7
 800203a:	431e      	orrs	r6, r3
 800203c:	4032      	ands	r2, r6
 800203e:	e795      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002040:	001e      	movs	r6, r3
 8002042:	4316      	orrs	r6, r2
 8002044:	d000      	beq.n	8002048 <__aeabi_dsub+0x1bc>
 8002046:	e745      	b.n	8001ed4 <__aeabi_dsub+0x48>
 8002048:	e740      	b.n	8001ecc <__aeabi_dsub+0x40>
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <__aeabi_dsub+0x348>)
 800204c:	429d      	cmp	r5, r3
 800204e:	d03a      	beq.n	80020c6 <__aeabi_dsub+0x23a>
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	4667      	mov	r7, ip
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431f      	orrs	r7, r3
 8002058:	46bc      	mov	ip, r7
 800205a:	2e38      	cmp	r6, #56	; 0x38
 800205c:	dd00      	ble.n	8002060 <__aeabi_dsub+0x1d4>
 800205e:	e0eb      	b.n	8002238 <__aeabi_dsub+0x3ac>
 8002060:	2e1f      	cmp	r6, #31
 8002062:	dc00      	bgt.n	8002066 <__aeabi_dsub+0x1da>
 8002064:	e13a      	b.n	80022dc <__aeabi_dsub+0x450>
 8002066:	0033      	movs	r3, r6
 8002068:	4667      	mov	r7, ip
 800206a:	3b20      	subs	r3, #32
 800206c:	40df      	lsrs	r7, r3
 800206e:	003b      	movs	r3, r7
 8002070:	2e20      	cmp	r6, #32
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x1f4>
 8002074:	2740      	movs	r7, #64	; 0x40
 8002076:	1bbf      	subs	r7, r7, r6
 8002078:	4666      	mov	r6, ip
 800207a:	40be      	lsls	r6, r7
 800207c:	4332      	orrs	r2, r6
 800207e:	4690      	mov	r8, r2
 8002080:	4646      	mov	r6, r8
 8002082:	1e72      	subs	r2, r6, #1
 8002084:	4196      	sbcs	r6, r2
 8002086:	4333      	orrs	r3, r6
 8002088:	e0da      	b.n	8002240 <__aeabi_dsub+0x3b4>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x204>
 800208e:	e214      	b.n	80024ba <__aeabi_dsub+0x62e>
 8002090:	4663      	mov	r3, ip
 8002092:	4313      	orrs	r3, r2
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x20c>
 8002096:	e168      	b.n	800236a <__aeabi_dsub+0x4de>
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	074e      	lsls	r6, r1, #29
 800209c:	08c0      	lsrs	r0, r0, #3
 800209e:	08c9      	lsrs	r1, r1, #3
 80020a0:	031b      	lsls	r3, r3, #12
 80020a2:	4306      	orrs	r6, r0
 80020a4:	4219      	tst	r1, r3
 80020a6:	d008      	beq.n	80020ba <__aeabi_dsub+0x22e>
 80020a8:	4660      	mov	r0, ip
 80020aa:	08c0      	lsrs	r0, r0, #3
 80020ac:	4218      	tst	r0, r3
 80020ae:	d104      	bne.n	80020ba <__aeabi_dsub+0x22e>
 80020b0:	4663      	mov	r3, ip
 80020b2:	0001      	movs	r1, r0
 80020b4:	08d2      	lsrs	r2, r2, #3
 80020b6:	075e      	lsls	r6, r3, #29
 80020b8:	4316      	orrs	r6, r2
 80020ba:	00f3      	lsls	r3, r6, #3
 80020bc:	4699      	mov	r9, r3
 80020be:	00c9      	lsls	r1, r1, #3
 80020c0:	0f72      	lsrs	r2, r6, #29
 80020c2:	4d44      	ldr	r5, [pc, #272]	; (80021d4 <__aeabi_dsub+0x348>)
 80020c4:	4311      	orrs	r1, r2
 80020c6:	464b      	mov	r3, r9
 80020c8:	08de      	lsrs	r6, r3, #3
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <__aeabi_dsub+0x348>)
 80020cc:	074f      	lsls	r7, r1, #29
 80020ce:	4337      	orrs	r7, r6
 80020d0:	08ca      	lsrs	r2, r1, #3
 80020d2:	429d      	cmp	r5, r3
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x24c>
 80020d6:	e06e      	b.n	80021b6 <__aeabi_dsub+0x32a>
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	056d      	lsls	r5, r5, #21
 80020dc:	0b12      	lsrs	r2, r2, #12
 80020de:	0d6d      	lsrs	r5, r5, #21
 80020e0:	2100      	movs	r1, #0
 80020e2:	0312      	lsls	r2, r2, #12
 80020e4:	0b13      	lsrs	r3, r2, #12
 80020e6:	0d0a      	lsrs	r2, r1, #20
 80020e8:	0512      	lsls	r2, r2, #20
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <__aeabi_dsub+0x350>)
 80020ee:	052d      	lsls	r5, r5, #20
 80020f0:	4013      	ands	r3, r2
 80020f2:	432b      	orrs	r3, r5
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	07e4      	lsls	r4, r4, #31
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	4323      	orrs	r3, r4
 80020fc:	0038      	movs	r0, r7
 80020fe:	0019      	movs	r1, r3
 8002100:	bc3c      	pop	{r2, r3, r4, r5}
 8002102:	4690      	mov	r8, r2
 8002104:	4699      	mov	r9, r3
 8002106:	46a2      	mov	sl, r4
 8002108:	46ab      	mov	fp, r5
 800210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800210c:	4663      	mov	r3, ip
 800210e:	4313      	orrs	r3, r2
 8002110:	d011      	beq.n	8002136 <__aeabi_dsub+0x2aa>
 8002112:	1e73      	subs	r3, r6, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d000      	beq.n	800211a <__aeabi_dsub+0x28e>
 8002118:	e107      	b.n	800232a <__aeabi_dsub+0x49e>
 800211a:	1886      	adds	r6, r0, r2
 800211c:	4286      	cmp	r6, r0
 800211e:	4180      	sbcs	r0, r0
 8002120:	4461      	add	r1, ip
 8002122:	4240      	negs	r0, r0
 8002124:	1809      	adds	r1, r1, r0
 8002126:	2501      	movs	r5, #1
 8002128:	020b      	lsls	r3, r1, #8
 800212a:	d537      	bpl.n	800219c <__aeabi_dsub+0x310>
 800212c:	2502      	movs	r5, #2
 800212e:	e77b      	b.n	8002028 <__aeabi_dsub+0x19c>
 8002130:	003e      	movs	r6, r7
 8002132:	4661      	mov	r1, ip
 8002134:	4691      	mov	r9, r2
 8002136:	0035      	movs	r5, r6
 8002138:	e7c5      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800213a:	465c      	mov	r4, fp
 800213c:	2d00      	cmp	r5, #0
 800213e:	d000      	beq.n	8002142 <__aeabi_dsub+0x2b6>
 8002140:	e0e1      	b.n	8002306 <__aeabi_dsub+0x47a>
 8002142:	000b      	movs	r3, r1
 8002144:	4303      	orrs	r3, r0
 8002146:	d0f3      	beq.n	8002130 <__aeabi_dsub+0x2a4>
 8002148:	1c73      	adds	r3, r6, #1
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x2c2>
 800214c:	e1ac      	b.n	80024a8 <__aeabi_dsub+0x61c>
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <__aeabi_dsub+0x348>)
 8002150:	429f      	cmp	r7, r3
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x2ca>
 8002154:	e13a      	b.n	80023cc <__aeabi_dsub+0x540>
 8002156:	43f3      	mvns	r3, r6
 8002158:	2b38      	cmp	r3, #56	; 0x38
 800215a:	dd00      	ble.n	800215e <__aeabi_dsub+0x2d2>
 800215c:	e16f      	b.n	800243e <__aeabi_dsub+0x5b2>
 800215e:	2b1f      	cmp	r3, #31
 8002160:	dd00      	ble.n	8002164 <__aeabi_dsub+0x2d8>
 8002162:	e18c      	b.n	800247e <__aeabi_dsub+0x5f2>
 8002164:	2520      	movs	r5, #32
 8002166:	000e      	movs	r6, r1
 8002168:	1aed      	subs	r5, r5, r3
 800216a:	40ae      	lsls	r6, r5
 800216c:	46b0      	mov	r8, r6
 800216e:	0006      	movs	r6, r0
 8002170:	46aa      	mov	sl, r5
 8002172:	40de      	lsrs	r6, r3
 8002174:	4645      	mov	r5, r8
 8002176:	4335      	orrs	r5, r6
 8002178:	002e      	movs	r6, r5
 800217a:	4655      	mov	r5, sl
 800217c:	40d9      	lsrs	r1, r3
 800217e:	40a8      	lsls	r0, r5
 8002180:	4663      	mov	r3, ip
 8002182:	1e45      	subs	r5, r0, #1
 8002184:	41a8      	sbcs	r0, r5
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	469c      	mov	ip, r3
 800218a:	4330      	orrs	r0, r6
 800218c:	1a16      	subs	r6, r2, r0
 800218e:	42b2      	cmp	r2, r6
 8002190:	4192      	sbcs	r2, r2
 8002192:	4663      	mov	r3, ip
 8002194:	4252      	negs	r2, r2
 8002196:	1a99      	subs	r1, r3, r2
 8002198:	003d      	movs	r5, r7
 800219a:	e6b4      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800219c:	2207      	movs	r2, #7
 800219e:	4032      	ands	r2, r6
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d000      	beq.n	80021a6 <__aeabi_dsub+0x31a>
 80021a4:	e6e4      	b.n	8001f70 <__aeabi_dsub+0xe4>
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <__aeabi_dsub+0x348>)
 80021a8:	08f6      	lsrs	r6, r6, #3
 80021aa:	074f      	lsls	r7, r1, #29
 80021ac:	4337      	orrs	r7, r6
 80021ae:	08ca      	lsrs	r2, r1, #3
 80021b0:	429d      	cmp	r5, r3
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dsub+0x32a>
 80021b4:	e790      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80021b6:	003b      	movs	r3, r7
 80021b8:	4313      	orrs	r3, r2
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x332>
 80021bc:	e1a6      	b.n	800250c <__aeabi_dsub+0x680>
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	031b      	lsls	r3, r3, #12
 80021c2:	431a      	orrs	r2, r3
 80021c4:	0312      	lsls	r2, r2, #12
 80021c6:	0b12      	lsrs	r2, r2, #12
 80021c8:	4d02      	ldr	r5, [pc, #8]	; (80021d4 <__aeabi_dsub+0x348>)
 80021ca:	e789      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021cc:	0015      	movs	r5, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	2700      	movs	r7, #0
 80021d2:	e785      	b.n	80020e0 <__aeabi_dsub+0x254>
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	ff7fffff 	.word	0xff7fffff
 80021dc:	800fffff 	.word	0x800fffff
 80021e0:	2e00      	cmp	r6, #0
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x35a>
 80021e4:	e0c7      	b.n	8002376 <__aeabi_dsub+0x4ea>
 80021e6:	1c6b      	adds	r3, r5, #1
 80021e8:	055e      	lsls	r6, r3, #21
 80021ea:	0d76      	lsrs	r6, r6, #21
 80021ec:	2e01      	cmp	r6, #1
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dsub+0x366>
 80021f0:	e0f0      	b.n	80023d4 <__aeabi_dsub+0x548>
 80021f2:	4dc8      	ldr	r5, [pc, #800]	; (8002514 <__aeabi_dsub+0x688>)
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x36e>
 80021f8:	e0b9      	b.n	800236e <__aeabi_dsub+0x4e2>
 80021fa:	1885      	adds	r5, r0, r2
 80021fc:	000a      	movs	r2, r1
 80021fe:	4285      	cmp	r5, r0
 8002200:	4189      	sbcs	r1, r1
 8002202:	4462      	add	r2, ip
 8002204:	4249      	negs	r1, r1
 8002206:	1851      	adds	r1, r2, r1
 8002208:	2207      	movs	r2, #7
 800220a:	07ce      	lsls	r6, r1, #31
 800220c:	086d      	lsrs	r5, r5, #1
 800220e:	432e      	orrs	r6, r5
 8002210:	0849      	lsrs	r1, r1, #1
 8002212:	4032      	ands	r2, r6
 8002214:	001d      	movs	r5, r3
 8002216:	e6a9      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002218:	49bf      	ldr	r1, [pc, #764]	; (8002518 <__aeabi_dsub+0x68c>)
 800221a:	1aed      	subs	r5, r5, r3
 800221c:	4011      	ands	r1, r2
 800221e:	2207      	movs	r2, #7
 8002220:	4032      	ands	r2, r6
 8002222:	e6a3      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002224:	0032      	movs	r2, r6
 8002226:	3828      	subs	r0, #40	; 0x28
 8002228:	4082      	lsls	r2, r0
 800222a:	2600      	movs	r6, #0
 800222c:	e686      	b.n	8001f3c <__aeabi_dsub+0xb0>
 800222e:	0030      	movs	r0, r6
 8002230:	f000 fa68 	bl	8002704 <__clzsi2>
 8002234:	3020      	adds	r0, #32
 8002236:	e673      	b.n	8001f20 <__aeabi_dsub+0x94>
 8002238:	4663      	mov	r3, ip
 800223a:	4313      	orrs	r3, r2
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	4193      	sbcs	r3, r2
 8002240:	1ac6      	subs	r6, r0, r3
 8002242:	42b0      	cmp	r0, r6
 8002244:	4180      	sbcs	r0, r0
 8002246:	4240      	negs	r0, r0
 8002248:	1a09      	subs	r1, r1, r0
 800224a:	e65c      	b.n	8001f06 <__aeabi_dsub+0x7a>
 800224c:	000e      	movs	r6, r1
 800224e:	4667      	mov	r7, ip
 8002250:	4306      	orrs	r6, r0
 8002252:	4317      	orrs	r7, r2
 8002254:	2d00      	cmp	r5, #0
 8002256:	d15e      	bne.n	8002316 <__aeabi_dsub+0x48a>
 8002258:	2e00      	cmp	r6, #0
 800225a:	d000      	beq.n	800225e <__aeabi_dsub+0x3d2>
 800225c:	e0f3      	b.n	8002446 <__aeabi_dsub+0x5ba>
 800225e:	2f00      	cmp	r7, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x3d8>
 8002262:	e11e      	b.n	80024a2 <__aeabi_dsub+0x616>
 8002264:	465c      	mov	r4, fp
 8002266:	4661      	mov	r1, ip
 8002268:	4691      	mov	r9, r2
 800226a:	e72c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800226c:	4fa9      	ldr	r7, [pc, #676]	; (8002514 <__aeabi_dsub+0x688>)
 800226e:	42be      	cmp	r6, r7
 8002270:	d07b      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002272:	001e      	movs	r6, r3
 8002274:	e6f1      	b.n	800205a <__aeabi_dsub+0x1ce>
 8002276:	0010      	movs	r0, r2
 8002278:	3d1f      	subs	r5, #31
 800227a:	40e8      	lsrs	r0, r5
 800227c:	2b20      	cmp	r3, #32
 800227e:	d003      	beq.n	8002288 <__aeabi_dsub+0x3fc>
 8002280:	2140      	movs	r1, #64	; 0x40
 8002282:	1acb      	subs	r3, r1, r3
 8002284:	409a      	lsls	r2, r3
 8002286:	4316      	orrs	r6, r2
 8002288:	1e73      	subs	r3, r6, #1
 800228a:	419e      	sbcs	r6, r3
 800228c:	2207      	movs	r2, #7
 800228e:	4306      	orrs	r6, r0
 8002290:	4032      	ands	r2, r6
 8002292:	2100      	movs	r1, #0
 8002294:	2500      	movs	r5, #0
 8002296:	e783      	b.n	80021a0 <__aeabi_dsub+0x314>
 8002298:	1a16      	subs	r6, r2, r0
 800229a:	4663      	mov	r3, ip
 800229c:	42b2      	cmp	r2, r6
 800229e:	4180      	sbcs	r0, r0
 80022a0:	1a59      	subs	r1, r3, r1
 80022a2:	4240      	negs	r0, r0
 80022a4:	1a0b      	subs	r3, r1, r0
 80022a6:	4698      	mov	r8, r3
 80022a8:	465c      	mov	r4, fp
 80022aa:	e632      	b.n	8001f12 <__aeabi_dsub+0x86>
 80022ac:	2e1f      	cmp	r6, #31
 80022ae:	dd00      	ble.n	80022b2 <__aeabi_dsub+0x426>
 80022b0:	e0ab      	b.n	800240a <__aeabi_dsub+0x57e>
 80022b2:	2720      	movs	r7, #32
 80022b4:	1bbb      	subs	r3, r7, r6
 80022b6:	469a      	mov	sl, r3
 80022b8:	4663      	mov	r3, ip
 80022ba:	4657      	mov	r7, sl
 80022bc:	40bb      	lsls	r3, r7
 80022be:	4699      	mov	r9, r3
 80022c0:	0013      	movs	r3, r2
 80022c2:	464f      	mov	r7, r9
 80022c4:	40f3      	lsrs	r3, r6
 80022c6:	431f      	orrs	r7, r3
 80022c8:	003b      	movs	r3, r7
 80022ca:	4657      	mov	r7, sl
 80022cc:	40ba      	lsls	r2, r7
 80022ce:	1e57      	subs	r7, r2, #1
 80022d0:	41ba      	sbcs	r2, r7
 80022d2:	4313      	orrs	r3, r2
 80022d4:	4662      	mov	r2, ip
 80022d6:	40f2      	lsrs	r2, r6
 80022d8:	1889      	adds	r1, r1, r2
 80022da:	e698      	b.n	800200e <__aeabi_dsub+0x182>
 80022dc:	2720      	movs	r7, #32
 80022de:	1bbb      	subs	r3, r7, r6
 80022e0:	469a      	mov	sl, r3
 80022e2:	4663      	mov	r3, ip
 80022e4:	4657      	mov	r7, sl
 80022e6:	40bb      	lsls	r3, r7
 80022e8:	4699      	mov	r9, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	464f      	mov	r7, r9
 80022ee:	40f3      	lsrs	r3, r6
 80022f0:	431f      	orrs	r7, r3
 80022f2:	003b      	movs	r3, r7
 80022f4:	4657      	mov	r7, sl
 80022f6:	40ba      	lsls	r2, r7
 80022f8:	1e57      	subs	r7, r2, #1
 80022fa:	41ba      	sbcs	r2, r7
 80022fc:	4313      	orrs	r3, r2
 80022fe:	4662      	mov	r2, ip
 8002300:	40f2      	lsrs	r2, r6
 8002302:	1a89      	subs	r1, r1, r2
 8002304:	e79c      	b.n	8002240 <__aeabi_dsub+0x3b4>
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <__aeabi_dsub+0x688>)
 8002308:	429f      	cmp	r7, r3
 800230a:	d05f      	beq.n	80023cc <__aeabi_dsub+0x540>
 800230c:	2580      	movs	r5, #128	; 0x80
 800230e:	042d      	lsls	r5, r5, #16
 8002310:	4273      	negs	r3, r6
 8002312:	4329      	orrs	r1, r5
 8002314:	e720      	b.n	8002158 <__aeabi_dsub+0x2cc>
 8002316:	2e00      	cmp	r6, #0
 8002318:	d10c      	bne.n	8002334 <__aeabi_dsub+0x4a8>
 800231a:	2f00      	cmp	r7, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x494>
 800231e:	e0d0      	b.n	80024c2 <__aeabi_dsub+0x636>
 8002320:	465c      	mov	r4, fp
 8002322:	4661      	mov	r1, ip
 8002324:	4691      	mov	r9, r2
 8002326:	4d7b      	ldr	r5, [pc, #492]	; (8002514 <__aeabi_dsub+0x688>)
 8002328:	e6cd      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800232a:	4f7a      	ldr	r7, [pc, #488]	; (8002514 <__aeabi_dsub+0x688>)
 800232c:	42be      	cmp	r6, r7
 800232e:	d01c      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002330:	001e      	movs	r6, r3
 8002332:	e665      	b.n	8002000 <__aeabi_dsub+0x174>
 8002334:	2f00      	cmp	r7, #0
 8002336:	d018      	beq.n	800236a <__aeabi_dsub+0x4de>
 8002338:	08c0      	lsrs	r0, r0, #3
 800233a:	074e      	lsls	r6, r1, #29
 800233c:	4306      	orrs	r6, r0
 800233e:	2080      	movs	r0, #128	; 0x80
 8002340:	08c9      	lsrs	r1, r1, #3
 8002342:	0300      	lsls	r0, r0, #12
 8002344:	4201      	tst	r1, r0
 8002346:	d008      	beq.n	800235a <__aeabi_dsub+0x4ce>
 8002348:	4663      	mov	r3, ip
 800234a:	08dc      	lsrs	r4, r3, #3
 800234c:	4204      	tst	r4, r0
 800234e:	d104      	bne.n	800235a <__aeabi_dsub+0x4ce>
 8002350:	0021      	movs	r1, r4
 8002352:	46da      	mov	sl, fp
 8002354:	08d2      	lsrs	r2, r2, #3
 8002356:	075e      	lsls	r6, r3, #29
 8002358:	4316      	orrs	r6, r2
 800235a:	00f3      	lsls	r3, r6, #3
 800235c:	4699      	mov	r9, r3
 800235e:	2401      	movs	r4, #1
 8002360:	4653      	mov	r3, sl
 8002362:	00c9      	lsls	r1, r1, #3
 8002364:	0f72      	lsrs	r2, r6, #29
 8002366:	4311      	orrs	r1, r2
 8002368:	401c      	ands	r4, r3
 800236a:	4d6a      	ldr	r5, [pc, #424]	; (8002514 <__aeabi_dsub+0x688>)
 800236c:	e6ab      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800236e:	001d      	movs	r5, r3
 8002370:	2200      	movs	r2, #0
 8002372:	2700      	movs	r7, #0
 8002374:	e6b4      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002376:	2d00      	cmp	r5, #0
 8002378:	d159      	bne.n	800242e <__aeabi_dsub+0x5a2>
 800237a:	000b      	movs	r3, r1
 800237c:	4303      	orrs	r3, r0
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x4f6>
 8002380:	e6d6      	b.n	8002130 <__aeabi_dsub+0x2a4>
 8002382:	1c73      	adds	r3, r6, #1
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x4fc>
 8002386:	e0b2      	b.n	80024ee <__aeabi_dsub+0x662>
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <__aeabi_dsub+0x688>)
 800238a:	429f      	cmp	r7, r3
 800238c:	d01e      	beq.n	80023cc <__aeabi_dsub+0x540>
 800238e:	43f3      	mvns	r3, r6
 8002390:	2b38      	cmp	r3, #56	; 0x38
 8002392:	dc6f      	bgt.n	8002474 <__aeabi_dsub+0x5e8>
 8002394:	2b1f      	cmp	r3, #31
 8002396:	dd00      	ble.n	800239a <__aeabi_dsub+0x50e>
 8002398:	e097      	b.n	80024ca <__aeabi_dsub+0x63e>
 800239a:	2520      	movs	r5, #32
 800239c:	000e      	movs	r6, r1
 800239e:	1aed      	subs	r5, r5, r3
 80023a0:	40ae      	lsls	r6, r5
 80023a2:	46b0      	mov	r8, r6
 80023a4:	0006      	movs	r6, r0
 80023a6:	46aa      	mov	sl, r5
 80023a8:	40de      	lsrs	r6, r3
 80023aa:	4645      	mov	r5, r8
 80023ac:	4335      	orrs	r5, r6
 80023ae:	002e      	movs	r6, r5
 80023b0:	4655      	mov	r5, sl
 80023b2:	40a8      	lsls	r0, r5
 80023b4:	40d9      	lsrs	r1, r3
 80023b6:	1e45      	subs	r5, r0, #1
 80023b8:	41a8      	sbcs	r0, r5
 80023ba:	448c      	add	ip, r1
 80023bc:	4306      	orrs	r6, r0
 80023be:	18b6      	adds	r6, r6, r2
 80023c0:	4296      	cmp	r6, r2
 80023c2:	4192      	sbcs	r2, r2
 80023c4:	4251      	negs	r1, r2
 80023c6:	4461      	add	r1, ip
 80023c8:	003d      	movs	r5, r7
 80023ca:	e625      	b.n	8002018 <__aeabi_dsub+0x18c>
 80023cc:	003d      	movs	r5, r7
 80023ce:	4661      	mov	r1, ip
 80023d0:	4691      	mov	r9, r2
 80023d2:	e678      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023d4:	000b      	movs	r3, r1
 80023d6:	4303      	orrs	r3, r0
 80023d8:	2d00      	cmp	r5, #0
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x552>
 80023dc:	e655      	b.n	800208a <__aeabi_dsub+0x1fe>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f5      	beq.n	80023ce <__aeabi_dsub+0x542>
 80023e2:	4663      	mov	r3, ip
 80023e4:	4313      	orrs	r3, r2
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x55e>
 80023e8:	e66d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80023ea:	1886      	adds	r6, r0, r2
 80023ec:	4286      	cmp	r6, r0
 80023ee:	4180      	sbcs	r0, r0
 80023f0:	4461      	add	r1, ip
 80023f2:	4240      	negs	r0, r0
 80023f4:	1809      	adds	r1, r1, r0
 80023f6:	2200      	movs	r2, #0
 80023f8:	020b      	lsls	r3, r1, #8
 80023fa:	d400      	bmi.n	80023fe <__aeabi_dsub+0x572>
 80023fc:	e6d0      	b.n	80021a0 <__aeabi_dsub+0x314>
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <__aeabi_dsub+0x68c>)
 8002400:	3501      	adds	r5, #1
 8002402:	4019      	ands	r1, r3
 8002404:	e5b2      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002406:	46b1      	mov	r9, r6
 8002408:	e65d      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800240a:	0033      	movs	r3, r6
 800240c:	4667      	mov	r7, ip
 800240e:	3b20      	subs	r3, #32
 8002410:	40df      	lsrs	r7, r3
 8002412:	003b      	movs	r3, r7
 8002414:	2e20      	cmp	r6, #32
 8002416:	d005      	beq.n	8002424 <__aeabi_dsub+0x598>
 8002418:	2740      	movs	r7, #64	; 0x40
 800241a:	1bbf      	subs	r7, r7, r6
 800241c:	4666      	mov	r6, ip
 800241e:	40be      	lsls	r6, r7
 8002420:	4332      	orrs	r2, r6
 8002422:	4690      	mov	r8, r2
 8002424:	4646      	mov	r6, r8
 8002426:	1e72      	subs	r2, r6, #1
 8002428:	4196      	sbcs	r6, r2
 800242a:	4333      	orrs	r3, r6
 800242c:	e5ef      	b.n	800200e <__aeabi_dsub+0x182>
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <__aeabi_dsub+0x688>)
 8002430:	429f      	cmp	r7, r3
 8002432:	d0cb      	beq.n	80023cc <__aeabi_dsub+0x540>
 8002434:	2580      	movs	r5, #128	; 0x80
 8002436:	042d      	lsls	r5, r5, #16
 8002438:	4273      	negs	r3, r6
 800243a:	4329      	orrs	r1, r5
 800243c:	e7a8      	b.n	8002390 <__aeabi_dsub+0x504>
 800243e:	4308      	orrs	r0, r1
 8002440:	1e41      	subs	r1, r0, #1
 8002442:	4188      	sbcs	r0, r1
 8002444:	e6a2      	b.n	800218c <__aeabi_dsub+0x300>
 8002446:	2f00      	cmp	r7, #0
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x5c0>
 800244a:	e63c      	b.n	80020c6 <__aeabi_dsub+0x23a>
 800244c:	4663      	mov	r3, ip
 800244e:	1a86      	subs	r6, r0, r2
 8002450:	1acf      	subs	r7, r1, r3
 8002452:	42b0      	cmp	r0, r6
 8002454:	419b      	sbcs	r3, r3
 8002456:	425b      	negs	r3, r3
 8002458:	1afb      	subs	r3, r7, r3
 800245a:	4698      	mov	r8, r3
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	d54e      	bpl.n	80024fe <__aeabi_dsub+0x672>
 8002460:	1a16      	subs	r6, r2, r0
 8002462:	4663      	mov	r3, ip
 8002464:	42b2      	cmp	r2, r6
 8002466:	4192      	sbcs	r2, r2
 8002468:	1a59      	subs	r1, r3, r1
 800246a:	4252      	negs	r2, r2
 800246c:	1a89      	subs	r1, r1, r2
 800246e:	465c      	mov	r4, fp
 8002470:	2200      	movs	r2, #0
 8002472:	e57b      	b.n	8001f6c <__aeabi_dsub+0xe0>
 8002474:	4301      	orrs	r1, r0
 8002476:	000e      	movs	r6, r1
 8002478:	1e71      	subs	r1, r6, #1
 800247a:	418e      	sbcs	r6, r1
 800247c:	e79f      	b.n	80023be <__aeabi_dsub+0x532>
 800247e:	001d      	movs	r5, r3
 8002480:	000e      	movs	r6, r1
 8002482:	3d20      	subs	r5, #32
 8002484:	40ee      	lsrs	r6, r5
 8002486:	46b0      	mov	r8, r6
 8002488:	2b20      	cmp	r3, #32
 800248a:	d004      	beq.n	8002496 <__aeabi_dsub+0x60a>
 800248c:	2540      	movs	r5, #64	; 0x40
 800248e:	1aeb      	subs	r3, r5, r3
 8002490:	4099      	lsls	r1, r3
 8002492:	4308      	orrs	r0, r1
 8002494:	4681      	mov	r9, r0
 8002496:	4648      	mov	r0, r9
 8002498:	4643      	mov	r3, r8
 800249a:	1e41      	subs	r1, r0, #1
 800249c:	4188      	sbcs	r0, r1
 800249e:	4318      	orrs	r0, r3
 80024a0:	e674      	b.n	800218c <__aeabi_dsub+0x300>
 80024a2:	2200      	movs	r2, #0
 80024a4:	2400      	movs	r4, #0
 80024a6:	e617      	b.n	80020d8 <__aeabi_dsub+0x24c>
 80024a8:	1a16      	subs	r6, r2, r0
 80024aa:	4663      	mov	r3, ip
 80024ac:	42b2      	cmp	r2, r6
 80024ae:	4192      	sbcs	r2, r2
 80024b0:	1a59      	subs	r1, r3, r1
 80024b2:	4252      	negs	r2, r2
 80024b4:	1a89      	subs	r1, r1, r2
 80024b6:	003d      	movs	r5, r7
 80024b8:	e525      	b.n	8001f06 <__aeabi_dsub+0x7a>
 80024ba:	4661      	mov	r1, ip
 80024bc:	4691      	mov	r9, r2
 80024be:	4d15      	ldr	r5, [pc, #84]	; (8002514 <__aeabi_dsub+0x688>)
 80024c0:	e601      	b.n	80020c6 <__aeabi_dsub+0x23a>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2400      	movs	r4, #0
 80024c6:	0312      	lsls	r2, r2, #12
 80024c8:	e679      	b.n	80021be <__aeabi_dsub+0x332>
 80024ca:	001d      	movs	r5, r3
 80024cc:	000e      	movs	r6, r1
 80024ce:	3d20      	subs	r5, #32
 80024d0:	40ee      	lsrs	r6, r5
 80024d2:	46b0      	mov	r8, r6
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d004      	beq.n	80024e2 <__aeabi_dsub+0x656>
 80024d8:	2540      	movs	r5, #64	; 0x40
 80024da:	1aeb      	subs	r3, r5, r3
 80024dc:	4099      	lsls	r1, r3
 80024de:	4308      	orrs	r0, r1
 80024e0:	4681      	mov	r9, r0
 80024e2:	464e      	mov	r6, r9
 80024e4:	4643      	mov	r3, r8
 80024e6:	1e71      	subs	r1, r6, #1
 80024e8:	418e      	sbcs	r6, r1
 80024ea:	431e      	orrs	r6, r3
 80024ec:	e767      	b.n	80023be <__aeabi_dsub+0x532>
 80024ee:	1886      	adds	r6, r0, r2
 80024f0:	4296      	cmp	r6, r2
 80024f2:	419b      	sbcs	r3, r3
 80024f4:	4461      	add	r1, ip
 80024f6:	425b      	negs	r3, r3
 80024f8:	18c9      	adds	r1, r1, r3
 80024fa:	003d      	movs	r5, r7
 80024fc:	e58c      	b.n	8002018 <__aeabi_dsub+0x18c>
 80024fe:	4647      	mov	r7, r8
 8002500:	4337      	orrs	r7, r6
 8002502:	d0ce      	beq.n	80024a2 <__aeabi_dsub+0x616>
 8002504:	2207      	movs	r2, #7
 8002506:	4641      	mov	r1, r8
 8002508:	4032      	ands	r2, r6
 800250a:	e649      	b.n	80021a0 <__aeabi_dsub+0x314>
 800250c:	2700      	movs	r7, #0
 800250e:	003a      	movs	r2, r7
 8002510:	e5e6      	b.n	80020e0 <__aeabi_dsub+0x254>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	000007ff 	.word	0x000007ff
 8002518:	ff7fffff 	.word	0xff7fffff

0800251c <__aeabi_d2iz>:
 800251c:	b530      	push	{r4, r5, lr}
 800251e:	4d14      	ldr	r5, [pc, #80]	; (8002570 <__aeabi_d2iz+0x54>)
 8002520:	030a      	lsls	r2, r1, #12
 8002522:	004b      	lsls	r3, r1, #1
 8002524:	0b12      	lsrs	r2, r2, #12
 8002526:	0d5b      	lsrs	r3, r3, #21
 8002528:	0fc9      	lsrs	r1, r1, #31
 800252a:	2400      	movs	r4, #0
 800252c:	42ab      	cmp	r3, r5
 800252e:	dd11      	ble.n	8002554 <__aeabi_d2iz+0x38>
 8002530:	4c10      	ldr	r4, [pc, #64]	; (8002574 <__aeabi_d2iz+0x58>)
 8002532:	42a3      	cmp	r3, r4
 8002534:	dc10      	bgt.n	8002558 <__aeabi_d2iz+0x3c>
 8002536:	2480      	movs	r4, #128	; 0x80
 8002538:	0364      	lsls	r4, r4, #13
 800253a:	4322      	orrs	r2, r4
 800253c:	4c0e      	ldr	r4, [pc, #56]	; (8002578 <__aeabi_d2iz+0x5c>)
 800253e:	1ae4      	subs	r4, r4, r3
 8002540:	2c1f      	cmp	r4, #31
 8002542:	dd0c      	ble.n	800255e <__aeabi_d2iz+0x42>
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <__aeabi_d2iz+0x60>)
 8002546:	1ac3      	subs	r3, r0, r3
 8002548:	40da      	lsrs	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	425c      	negs	r4, r3
 800254e:	2900      	cmp	r1, #0
 8002550:	d100      	bne.n	8002554 <__aeabi_d2iz+0x38>
 8002552:	001c      	movs	r4, r3
 8002554:	0020      	movs	r0, r4
 8002556:	bd30      	pop	{r4, r5, pc}
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <__aeabi_d2iz+0x64>)
 800255a:	18cc      	adds	r4, r1, r3
 800255c:	e7fa      	b.n	8002554 <__aeabi_d2iz+0x38>
 800255e:	4d09      	ldr	r5, [pc, #36]	; (8002584 <__aeabi_d2iz+0x68>)
 8002560:	40e0      	lsrs	r0, r4
 8002562:	46ac      	mov	ip, r5
 8002564:	4463      	add	r3, ip
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	4303      	orrs	r3, r0
 800256c:	e7ee      	b.n	800254c <__aeabi_d2iz+0x30>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	000003fe 	.word	0x000003fe
 8002574:	0000041d 	.word	0x0000041d
 8002578:	00000433 	.word	0x00000433
 800257c:	00000413 	.word	0x00000413
 8002580:	7fffffff 	.word	0x7fffffff
 8002584:	fffffbed 	.word	0xfffffbed

08002588 <__aeabi_i2d>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2800      	cmp	r0, #0
 800258c:	d02d      	beq.n	80025ea <__aeabi_i2d+0x62>
 800258e:	17c3      	asrs	r3, r0, #31
 8002590:	18c5      	adds	r5, r0, r3
 8002592:	405d      	eors	r5, r3
 8002594:	0fc4      	lsrs	r4, r0, #31
 8002596:	0028      	movs	r0, r5
 8002598:	f000 f8b4 	bl	8002704 <__clzsi2>
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <__aeabi_i2d+0x6c>)
 800259e:	1a1b      	subs	r3, r3, r0
 80025a0:	055b      	lsls	r3, r3, #21
 80025a2:	0d5b      	lsrs	r3, r3, #21
 80025a4:	280a      	cmp	r0, #10
 80025a6:	dd15      	ble.n	80025d4 <__aeabi_i2d+0x4c>
 80025a8:	380b      	subs	r0, #11
 80025aa:	4085      	lsls	r5, r0
 80025ac:	2200      	movs	r2, #0
 80025ae:	032d      	lsls	r5, r5, #12
 80025b0:	0b2d      	lsrs	r5, r5, #12
 80025b2:	2100      	movs	r1, #0
 80025b4:	0010      	movs	r0, r2
 80025b6:	032d      	lsls	r5, r5, #12
 80025b8:	0d0a      	lsrs	r2, r1, #20
 80025ba:	0b2d      	lsrs	r5, r5, #12
 80025bc:	0512      	lsls	r2, r2, #20
 80025be:	432a      	orrs	r2, r5
 80025c0:	4d0d      	ldr	r5, [pc, #52]	; (80025f8 <__aeabi_i2d+0x70>)
 80025c2:	051b      	lsls	r3, r3, #20
 80025c4:	402a      	ands	r2, r5
 80025c6:	4313      	orrs	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	07e4      	lsls	r4, r4, #31
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	4323      	orrs	r3, r4
 80025d0:	0019      	movs	r1, r3
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
 80025d4:	0002      	movs	r2, r0
 80025d6:	0029      	movs	r1, r5
 80025d8:	3215      	adds	r2, #21
 80025da:	4091      	lsls	r1, r2
 80025dc:	000a      	movs	r2, r1
 80025de:	210b      	movs	r1, #11
 80025e0:	1a08      	subs	r0, r1, r0
 80025e2:	40c5      	lsrs	r5, r0
 80025e4:	032d      	lsls	r5, r5, #12
 80025e6:	0b2d      	lsrs	r5, r5, #12
 80025e8:	e7e3      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025ea:	2400      	movs	r4, #0
 80025ec:	2300      	movs	r3, #0
 80025ee:	2500      	movs	r5, #0
 80025f0:	2200      	movs	r2, #0
 80025f2:	e7de      	b.n	80025b2 <__aeabi_i2d+0x2a>
 80025f4:	0000041e 	.word	0x0000041e
 80025f8:	800fffff 	.word	0x800fffff

080025fc <__aeabi_ui2d>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	1e04      	subs	r4, r0, #0
 8002600:	d025      	beq.n	800264e <__aeabi_ui2d+0x52>
 8002602:	f000 f87f 	bl	8002704 <__clzsi2>
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <__aeabi_ui2d+0x5c>)
 8002608:	1a1b      	subs	r3, r3, r0
 800260a:	055b      	lsls	r3, r3, #21
 800260c:	0d5b      	lsrs	r3, r3, #21
 800260e:	280a      	cmp	r0, #10
 8002610:	dd12      	ble.n	8002638 <__aeabi_ui2d+0x3c>
 8002612:	380b      	subs	r0, #11
 8002614:	4084      	lsls	r4, r0
 8002616:	2200      	movs	r2, #0
 8002618:	0324      	lsls	r4, r4, #12
 800261a:	0b24      	lsrs	r4, r4, #12
 800261c:	2100      	movs	r1, #0
 800261e:	0010      	movs	r0, r2
 8002620:	0324      	lsls	r4, r4, #12
 8002622:	0d0a      	lsrs	r2, r1, #20
 8002624:	0b24      	lsrs	r4, r4, #12
 8002626:	0512      	lsls	r2, r2, #20
 8002628:	4322      	orrs	r2, r4
 800262a:	4c0c      	ldr	r4, [pc, #48]	; (800265c <__aeabi_ui2d+0x60>)
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	4022      	ands	r2, r4
 8002630:	4313      	orrs	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	0859      	lsrs	r1, r3, #1
 8002636:	bd10      	pop	{r4, pc}
 8002638:	0002      	movs	r2, r0
 800263a:	0021      	movs	r1, r4
 800263c:	3215      	adds	r2, #21
 800263e:	4091      	lsls	r1, r2
 8002640:	000a      	movs	r2, r1
 8002642:	210b      	movs	r1, #11
 8002644:	1a08      	subs	r0, r1, r0
 8002646:	40c4      	lsrs	r4, r0
 8002648:	0324      	lsls	r4, r4, #12
 800264a:	0b24      	lsrs	r4, r4, #12
 800264c:	e7e6      	b.n	800261c <__aeabi_ui2d+0x20>
 800264e:	2300      	movs	r3, #0
 8002650:	2400      	movs	r4, #0
 8002652:	2200      	movs	r2, #0
 8002654:	e7e2      	b.n	800261c <__aeabi_ui2d+0x20>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	0000041e 	.word	0x0000041e
 800265c:	800fffff 	.word	0x800fffff

08002660 <__aeabi_f2d>:
 8002660:	0041      	lsls	r1, r0, #1
 8002662:	0e09      	lsrs	r1, r1, #24
 8002664:	1c4b      	adds	r3, r1, #1
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	b2db      	uxtb	r3, r3
 800266a:	0246      	lsls	r6, r0, #9
 800266c:	0a75      	lsrs	r5, r6, #9
 800266e:	0fc4      	lsrs	r4, r0, #31
 8002670:	2b01      	cmp	r3, #1
 8002672:	dd14      	ble.n	800269e <__aeabi_f2d+0x3e>
 8002674:	23e0      	movs	r3, #224	; 0xe0
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	076d      	lsls	r5, r5, #29
 800267a:	0b36      	lsrs	r6, r6, #12
 800267c:	18cb      	adds	r3, r1, r3
 800267e:	2100      	movs	r1, #0
 8002680:	0d0a      	lsrs	r2, r1, #20
 8002682:	0028      	movs	r0, r5
 8002684:	0512      	lsls	r2, r2, #20
 8002686:	4d1c      	ldr	r5, [pc, #112]	; (80026f8 <__aeabi_f2d+0x98>)
 8002688:	4332      	orrs	r2, r6
 800268a:	055b      	lsls	r3, r3, #21
 800268c:	402a      	ands	r2, r5
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	4313      	orrs	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	07e4      	lsls	r4, r4, #31
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	4323      	orrs	r3, r4
 800269a:	0019      	movs	r1, r3
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	2900      	cmp	r1, #0
 80026a0:	d114      	bne.n	80026cc <__aeabi_f2d+0x6c>
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	d01e      	beq.n	80026e4 <__aeabi_f2d+0x84>
 80026a6:	0028      	movs	r0, r5
 80026a8:	f000 f82c 	bl	8002704 <__clzsi2>
 80026ac:	280a      	cmp	r0, #10
 80026ae:	dc1c      	bgt.n	80026ea <__aeabi_f2d+0x8a>
 80026b0:	230b      	movs	r3, #11
 80026b2:	002a      	movs	r2, r5
 80026b4:	1a1b      	subs	r3, r3, r0
 80026b6:	40da      	lsrs	r2, r3
 80026b8:	0003      	movs	r3, r0
 80026ba:	3315      	adds	r3, #21
 80026bc:	409d      	lsls	r5, r3
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <__aeabi_f2d+0x9c>)
 80026c0:	0312      	lsls	r2, r2, #12
 80026c2:	1a1b      	subs	r3, r3, r0
 80026c4:	055b      	lsls	r3, r3, #21
 80026c6:	0b16      	lsrs	r6, r2, #12
 80026c8:	0d5b      	lsrs	r3, r3, #21
 80026ca:	e7d8      	b.n	800267e <__aeabi_f2d+0x1e>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d006      	beq.n	80026de <__aeabi_f2d+0x7e>
 80026d0:	0b32      	lsrs	r2, r6, #12
 80026d2:	2680      	movs	r6, #128	; 0x80
 80026d4:	0336      	lsls	r6, r6, #12
 80026d6:	076d      	lsls	r5, r5, #29
 80026d8:	4316      	orrs	r6, r2
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <__aeabi_f2d+0xa0>)
 80026dc:	e7cf      	b.n	800267e <__aeabi_f2d+0x1e>
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <__aeabi_f2d+0xa0>)
 80026e0:	2600      	movs	r6, #0
 80026e2:	e7cc      	b.n	800267e <__aeabi_f2d+0x1e>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2600      	movs	r6, #0
 80026e8:	e7c9      	b.n	800267e <__aeabi_f2d+0x1e>
 80026ea:	0003      	movs	r3, r0
 80026ec:	002a      	movs	r2, r5
 80026ee:	3b0b      	subs	r3, #11
 80026f0:	409a      	lsls	r2, r3
 80026f2:	2500      	movs	r5, #0
 80026f4:	e7e3      	b.n	80026be <__aeabi_f2d+0x5e>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	800fffff 	.word	0x800fffff
 80026fc:	00000389 	.word	0x00000389
 8002700:	000007ff 	.word	0x000007ff

08002704 <__clzsi2>:
 8002704:	211c      	movs	r1, #28
 8002706:	2301      	movs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	4298      	cmp	r0, r3
 800270c:	d301      	bcc.n	8002712 <__clzsi2+0xe>
 800270e:	0c00      	lsrs	r0, r0, #16
 8002710:	3910      	subs	r1, #16
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	4298      	cmp	r0, r3
 8002716:	d301      	bcc.n	800271c <__clzsi2+0x18>
 8002718:	0a00      	lsrs	r0, r0, #8
 800271a:	3908      	subs	r1, #8
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	4298      	cmp	r0, r3
 8002720:	d301      	bcc.n	8002726 <__clzsi2+0x22>
 8002722:	0900      	lsrs	r0, r0, #4
 8002724:	3904      	subs	r1, #4
 8002726:	a202      	add	r2, pc, #8	; (adr r2, 8002730 <__clzsi2+0x2c>)
 8002728:	5c10      	ldrb	r0, [r2, r0]
 800272a:	1840      	adds	r0, r0, r1
 800272c:	4770      	bx	lr
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	02020304 	.word	0x02020304
 8002734:	01010101 	.word	0x01010101
	...

08002740 <__clzdi2>:
 8002740:	b510      	push	{r4, lr}
 8002742:	2900      	cmp	r1, #0
 8002744:	d103      	bne.n	800274e <__clzdi2+0xe>
 8002746:	f7ff ffdd 	bl	8002704 <__clzsi2>
 800274a:	3020      	adds	r0, #32
 800274c:	e002      	b.n	8002754 <__clzdi2+0x14>
 800274e:	1c08      	adds	r0, r1, #0
 8002750:	f7ff ffd8 	bl	8002704 <__clzsi2>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			; (mov r8, r8)

08002758 <__divdi3>:
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	464e      	mov	r6, r9
 800275c:	4657      	mov	r7, sl
 800275e:	46de      	mov	lr, fp
 8002760:	4645      	mov	r5, r8
 8002762:	b5e0      	push	{r5, r6, r7, lr}
 8002764:	000f      	movs	r7, r1
 8002766:	2100      	movs	r1, #0
 8002768:	b083      	sub	sp, #12
 800276a:	0006      	movs	r6, r0
 800276c:	4689      	mov	r9, r1
 800276e:	2f00      	cmp	r7, #0
 8002770:	da06      	bge.n	8002780 <__divdi3+0x28>
 8002772:	0039      	movs	r1, r7
 8002774:	2700      	movs	r7, #0
 8002776:	4246      	negs	r6, r0
 8002778:	418f      	sbcs	r7, r1
 800277a:	2101      	movs	r1, #1
 800277c:	4249      	negs	r1, r1
 800277e:	4689      	mov	r9, r1
 8002780:	2b00      	cmp	r3, #0
 8002782:	da07      	bge.n	8002794 <__divdi3+0x3c>
 8002784:	4649      	mov	r1, r9
 8002786:	43c9      	mvns	r1, r1
 8002788:	0010      	movs	r0, r2
 800278a:	4689      	mov	r9, r1
 800278c:	0019      	movs	r1, r3
 800278e:	2300      	movs	r3, #0
 8002790:	4242      	negs	r2, r0
 8002792:	418b      	sbcs	r3, r1
 8002794:	0034      	movs	r4, r6
 8002796:	003d      	movs	r5, r7
 8002798:	4692      	mov	sl, r2
 800279a:	4698      	mov	r8, r3
 800279c:	42bb      	cmp	r3, r7
 800279e:	d869      	bhi.n	8002874 <__divdi3+0x11c>
 80027a0:	d066      	beq.n	8002870 <__divdi3+0x118>
 80027a2:	4641      	mov	r1, r8
 80027a4:	4650      	mov	r0, sl
 80027a6:	f7ff ffcb 	bl	8002740 <__clzdi2>
 80027aa:	4683      	mov	fp, r0
 80027ac:	0039      	movs	r1, r7
 80027ae:	0030      	movs	r0, r6
 80027b0:	f7ff ffc6 	bl	8002740 <__clzdi2>
 80027b4:	465b      	mov	r3, fp
 80027b6:	1a1b      	subs	r3, r3, r0
 80027b8:	469c      	mov	ip, r3
 80027ba:	3b20      	subs	r3, #32
 80027bc:	469b      	mov	fp, r3
 80027be:	d500      	bpl.n	80027c2 <__divdi3+0x6a>
 80027c0:	e075      	b.n	80028ae <__divdi3+0x156>
 80027c2:	4651      	mov	r1, sl
 80027c4:	4658      	mov	r0, fp
 80027c6:	4081      	lsls	r1, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	4651      	mov	r1, sl
 80027cc:	4660      	mov	r0, ip
 80027ce:	4081      	lsls	r1, r0
 80027d0:	000a      	movs	r2, r1
 80027d2:	42bb      	cmp	r3, r7
 80027d4:	d861      	bhi.n	800289a <__divdi3+0x142>
 80027d6:	d05e      	beq.n	8002896 <__divdi3+0x13e>
 80027d8:	0034      	movs	r4, r6
 80027da:	003d      	movs	r5, r7
 80027dc:	4659      	mov	r1, fp
 80027de:	1aa4      	subs	r4, r4, r2
 80027e0:	419d      	sbcs	r5, r3
 80027e2:	2900      	cmp	r1, #0
 80027e4:	da00      	bge.n	80027e8 <__divdi3+0x90>
 80027e6:	e07a      	b.n	80028de <__divdi3+0x186>
 80027e8:	2100      	movs	r1, #0
 80027ea:	2000      	movs	r0, #0
 80027ec:	2601      	movs	r6, #1
 80027ee:	9000      	str	r0, [sp, #0]
 80027f0:	9101      	str	r1, [sp, #4]
 80027f2:	4659      	mov	r1, fp
 80027f4:	408e      	lsls	r6, r1
 80027f6:	9601      	str	r6, [sp, #4]
 80027f8:	4661      	mov	r1, ip
 80027fa:	2601      	movs	r6, #1
 80027fc:	408e      	lsls	r6, r1
 80027fe:	4661      	mov	r1, ip
 8002800:	9600      	str	r6, [sp, #0]
 8002802:	2900      	cmp	r1, #0
 8002804:	d050      	beq.n	80028a8 <__divdi3+0x150>
 8002806:	07d9      	lsls	r1, r3, #31
 8002808:	0856      	lsrs	r6, r2, #1
 800280a:	085f      	lsrs	r7, r3, #1
 800280c:	430e      	orrs	r6, r1
 800280e:	4663      	mov	r3, ip
 8002810:	e00e      	b.n	8002830 <__divdi3+0xd8>
 8002812:	42af      	cmp	r7, r5
 8002814:	d101      	bne.n	800281a <__divdi3+0xc2>
 8002816:	42a6      	cmp	r6, r4
 8002818:	d80c      	bhi.n	8002834 <__divdi3+0xdc>
 800281a:	1ba4      	subs	r4, r4, r6
 800281c:	41bd      	sbcs	r5, r7
 800281e:	2101      	movs	r1, #1
 8002820:	1924      	adds	r4, r4, r4
 8002822:	416d      	adcs	r5, r5
 8002824:	2200      	movs	r2, #0
 8002826:	3b01      	subs	r3, #1
 8002828:	1864      	adds	r4, r4, r1
 800282a:	4155      	adcs	r5, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <__divdi3+0xe6>
 8002830:	42af      	cmp	r7, r5
 8002832:	d9ee      	bls.n	8002812 <__divdi3+0xba>
 8002834:	3b01      	subs	r3, #1
 8002836:	1924      	adds	r4, r4, r4
 8002838:	416d      	adcs	r5, r5
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f8      	bne.n	8002830 <__divdi3+0xd8>
 800283e:	9800      	ldr	r0, [sp, #0]
 8002840:	9901      	ldr	r1, [sp, #4]
 8002842:	465b      	mov	r3, fp
 8002844:	1900      	adds	r0, r0, r4
 8002846:	4169      	adcs	r1, r5
 8002848:	2b00      	cmp	r3, #0
 800284a:	db3d      	blt.n	80028c8 <__divdi3+0x170>
 800284c:	002e      	movs	r6, r5
 800284e:	40de      	lsrs	r6, r3
 8002850:	4663      	mov	r3, ip
 8002852:	002c      	movs	r4, r5
 8002854:	40dc      	lsrs	r4, r3
 8002856:	465b      	mov	r3, fp
 8002858:	2b00      	cmp	r3, #0
 800285a:	db4b      	blt.n	80028f4 <__divdi3+0x19c>
 800285c:	0034      	movs	r4, r6
 800285e:	465d      	mov	r5, fp
 8002860:	40ac      	lsls	r4, r5
 8002862:	0023      	movs	r3, r4
 8002864:	4664      	mov	r4, ip
 8002866:	40a6      	lsls	r6, r4
 8002868:	0032      	movs	r2, r6
 800286a:	1a80      	subs	r0, r0, r2
 800286c:	4199      	sbcs	r1, r3
 800286e:	e003      	b.n	8002878 <__divdi3+0x120>
 8002870:	42b2      	cmp	r2, r6
 8002872:	d996      	bls.n	80027a2 <__divdi3+0x4a>
 8002874:	2000      	movs	r0, #0
 8002876:	2100      	movs	r1, #0
 8002878:	464b      	mov	r3, r9
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <__divdi3+0x130>
 800287e:	0003      	movs	r3, r0
 8002880:	000c      	movs	r4, r1
 8002882:	2100      	movs	r1, #0
 8002884:	4258      	negs	r0, r3
 8002886:	41a1      	sbcs	r1, r4
 8002888:	b003      	add	sp, #12
 800288a:	bc3c      	pop	{r2, r3, r4, r5}
 800288c:	4690      	mov	r8, r2
 800288e:	4699      	mov	r9, r3
 8002890:	46a2      	mov	sl, r4
 8002892:	46ab      	mov	fp, r5
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	42b1      	cmp	r1, r6
 8002898:	d99e      	bls.n	80027d8 <__divdi3+0x80>
 800289a:	2100      	movs	r1, #0
 800289c:	2000      	movs	r0, #0
 800289e:	9000      	str	r0, [sp, #0]
 80028a0:	9101      	str	r1, [sp, #4]
 80028a2:	4661      	mov	r1, ip
 80028a4:	2900      	cmp	r1, #0
 80028a6:	d1ae      	bne.n	8002806 <__divdi3+0xae>
 80028a8:	9800      	ldr	r0, [sp, #0]
 80028aa:	9901      	ldr	r1, [sp, #4]
 80028ac:	e7e4      	b.n	8002878 <__divdi3+0x120>
 80028ae:	2320      	movs	r3, #32
 80028b0:	4662      	mov	r2, ip
 80028b2:	4651      	mov	r1, sl
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	40d9      	lsrs	r1, r3
 80028b8:	4640      	mov	r0, r8
 80028ba:	9100      	str	r1, [sp, #0]
 80028bc:	4661      	mov	r1, ip
 80028be:	4088      	lsls	r0, r1
 80028c0:	0003      	movs	r3, r0
 80028c2:	9900      	ldr	r1, [sp, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	e780      	b.n	80027ca <__divdi3+0x72>
 80028c8:	4662      	mov	r2, ip
 80028ca:	2320      	movs	r3, #32
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	002a      	movs	r2, r5
 80028d0:	409a      	lsls	r2, r3
 80028d2:	0026      	movs	r6, r4
 80028d4:	0013      	movs	r3, r2
 80028d6:	4662      	mov	r2, ip
 80028d8:	40d6      	lsrs	r6, r2
 80028da:	431e      	orrs	r6, r3
 80028dc:	e7b8      	b.n	8002850 <__divdi3+0xf8>
 80028de:	4661      	mov	r1, ip
 80028e0:	2620      	movs	r6, #32
 80028e2:	2701      	movs	r7, #1
 80028e4:	1a76      	subs	r6, r6, r1
 80028e6:	2000      	movs	r0, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	40f7      	lsrs	r7, r6
 80028ec:	9000      	str	r0, [sp, #0]
 80028ee:	9101      	str	r1, [sp, #4]
 80028f0:	9701      	str	r7, [sp, #4]
 80028f2:	e781      	b.n	80027f8 <__divdi3+0xa0>
 80028f4:	4667      	mov	r7, ip
 80028f6:	2320      	movs	r3, #32
 80028f8:	4662      	mov	r2, ip
 80028fa:	0035      	movs	r5, r6
 80028fc:	40bc      	lsls	r4, r7
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	40dd      	lsrs	r5, r3
 8002902:	0023      	movs	r3, r4
 8002904:	432b      	orrs	r3, r5
 8002906:	e7ad      	b.n	8002864 <__divdi3+0x10c>

08002908 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800290e:	003b      	movs	r3, r7
 8002910:	0018      	movs	r0, r3
 8002912:	2308      	movs	r3, #8
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f01c f8a4 	bl	801ea64 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <MX_ADC_Init+0xc0>)
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <MX_ADC_Init+0xc4>)
 8002920:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002924:	2200      	movs	r2, #0
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <MX_ADC_Init+0xc0>)
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	05d2      	lsls	r2, r2, #23
 800292e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <MX_ADC_Init+0xc0>)
 800293e:	2201      	movs	r2, #1
 8002940:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_ADC_Init+0xc0>)
 800294a:	2220      	movs	r2, #32
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_ADC_Init+0xc0>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002960:	22c2      	movs	r2, #194	; 0xc2
 8002962:	32ff      	adds	r2, #255	; 0xff
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002968:	222c      	movs	r2, #44	; 0x2c
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002970:	2204      	movs	r2, #4
 8002972:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_ADC_Init+0xc0>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002982:	2200      	movs	r2, #0
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <MX_ADC_Init+0xc0>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_ADC_Init+0xc0>)
 800298e:	0018      	movs	r0, r3
 8002990:	f001 f9ae 	bl	8003cf0 <HAL_ADC_Init>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002998:	f000 fb02 	bl	8002fa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800299c:	003b      	movs	r3, r7
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <MX_ADC_Init+0xc8>)
 80029a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80029a2:	003b      	movs	r3, r7
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0152      	lsls	r2, r2, #5
 80029a8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029aa:	003a      	movs	r2, r7
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_ADC_Init+0xc0>)
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 fb11 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80029ba:	f000 faf1 	bl	8002fa0 <Error_Handler>
  }

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	20001178 	.word	0x20001178
 80029cc:	40012400 	.word	0x40012400
 80029d0:	48040000 	.word	0x48040000

080029d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_ADC_MspInit+0x28>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d106      	bne.n	80029f4 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_ADC_MspInit+0x2c>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0089      	lsls	r1, r1, #2
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012400 	.word	0x40012400
 8002a00:	40021000 	.word	0x40021000

08002a04 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b08f      	sub	sp, #60	; 0x3c
 8002a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0a:	2424      	movs	r4, #36	; 0x24
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2314      	movs	r3, #20
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f01c f825 	bl	801ea64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	4bbf      	ldr	r3, [pc, #764]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4bbe      	ldr	r3, [pc, #760]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a26:	4bbc      	ldr	r3, [pc, #752]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4bb9      	ldr	r3, [pc, #740]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4bb8      	ldr	r3, [pc, #736]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a38:	2102      	movs	r1, #2
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3e:	4bb6      	ldr	r3, [pc, #728]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	4bb3      	ldr	r3, [pc, #716]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4e:	4bb2      	ldr	r3, [pc, #712]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a50:	2104      	movs	r1, #4
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a56:	4bb0      	ldr	r3, [pc, #704]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a62:	4bad      	ldr	r3, [pc, #692]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a66:	4bac      	ldr	r3, [pc, #688]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a6e:	4baa      	ldr	r3, [pc, #680]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	4013      	ands	r3, r2
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a7a:	49a8      	ldr	r1, [pc, #672]	; (8002d1c <MX_GPIO_Init+0x318>)
 8002a7c:	23a0      	movs	r3, #160	; 0xa0
 8002a7e:	05db      	lsls	r3, r3, #23
 8002a80:	2200      	movs	r2, #0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f001 fe3c 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002a88:	4ba5      	ldr	r3, [pc, #660]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	21e0      	movs	r1, #224	; 0xe0
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f001 fe36 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8002a94:	4ba3      	ldr	r3, [pc, #652]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	2107      	movs	r1, #7
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f001 fe30 	bl	8004700 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	4aa1      	ldr	r2, [pc, #644]	; (8002d28 <MX_GPIO_Init+0x324>)
 8002aa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	193a      	adds	r2, r7, r4
 8002aba:	23a0      	movs	r3, #160	; 0xa0
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	0011      	movs	r1, r2
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 fc9f 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 8002ac6:	0021      	movs	r1, r4
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	22e0      	movs	r2, #224	; 0xe0
 8002acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	000c      	movs	r4, r1
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	0010      	movs	r0, r2
 8002aea:	f001 fc8b 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 8002aee:	0021      	movs	r1, r4
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	22f0      	movs	r2, #240	; 0xf0
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af8:	000c      	movs	r4, r1
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2203      	movs	r2, #3
 8002afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	193b      	adds	r3, r7, r4
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	4a85      	ldr	r2, [pc, #532]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f001 fc79 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA10 PA13 PA8
                           PA11 PA9 PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	4a85      	ldr	r2, [pc, #532]	; (8002d2c <MX_GPIO_Init+0x328>)
 8002b16:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	193a      	adds	r2, r7, r4
 8002b26:	23a0      	movs	r3, #160	; 0xa0
 8002b28:	05db      	lsls	r3, r3, #23
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f001 fc69 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	2213      	movs	r2, #19
 8002b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f001 fc5a 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002b50:	0021      	movs	r1, r4
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0192      	lsls	r2, r2, #6
 8002b58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5a:	000c      	movs	r4, r1
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	4a74      	ldr	r2, [pc, #464]	; (8002d30 <MX_GPIO_Init+0x32c>)
 8002b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	0010      	movs	r0, r2
 8002b70:	f001 fc48 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2207      	movs	r2, #7
 8002b78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	2202      	movs	r2, #2
 8002b8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <MX_GPIO_Init+0x320>)
 8002b90:	0019      	movs	r1, r3
 8002b92:	0010      	movs	r0, r2
 8002b94:	f001 fc36 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9e:	193b      	adds	r3, r7, r4
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002baa:	193b      	adds	r3, r7, r4
 8002bac:	4a5c      	ldr	r2, [pc, #368]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f001 fc27 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	2220      	movs	r2, #32
 8002bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bce:	193a      	adds	r2, r7, r4
 8002bd0:	23a0      	movs	r3, #160	; 0xa0
 8002bd2:	05db      	lsls	r3, r3, #23
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 fc14 	bl	8004404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2005      	movs	r0, #5
 8002be2:	f001 fb85 	bl	80042f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002be6:	2005      	movs	r0, #5
 8002be8:	f001 fb97 	bl	800431a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2007      	movs	r0, #7
 8002bf2:	f001 fb7d 	bl	80042f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002bf6:	2007      	movs	r0, #7
 8002bf8:	f001 fb8f 	bl	800431a <HAL_NVIC_EnableIRQ>

  /* pim testing low power */


  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_5| GPIO_PIN_4 | GPIO_PIN_2| GPIO_PIN_0;
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <MX_GPIO_Init+0x330>)
 8002c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2203      	movs	r2, #3
 8002c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	193a      	adds	r2, r7, r4
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 fbf4 	bl	8004404 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2208      	movs	r2, #8
 8002c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2203      	movs	r2, #3
 8002c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	23a0      	movs	r3, #160	; 0xa0
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 fbe4 	bl	8004404 <HAL_GPIO_Init>



  // disable power supply & relay
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_8;
 8002c3c:	0021      	movs	r1, r4
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	2290      	movs	r2, #144	; 0x90
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	000c      	movs	r4, r1
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	193a      	adds	r2, r7, r4
 8002c5c:	23a0      	movs	r3, #160	; 0xa0
 8002c5e:	05db      	lsls	r3, r3, #23
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f001 fbce 	bl	8004404 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b299      	uxth	r1, r3
 8002c6e:	23a0      	movs	r3, #160	; 0xa0
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	2200      	movs	r2, #0
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fd43 	bl	8004700 <HAL_GPIO_WritePin>

  // disable bat mes & spi_cs
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <MX_GPIO_Init+0x334>)
 8002c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2201      	movs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002c96:	0019      	movs	r1, r3
 8002c98:	0010      	movs	r0, r2
 8002c9a:	f001 fbb3 	bl	8004404 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	481e      	ldr	r0, [pc, #120]	; (8002d20 <MX_GPIO_Init+0x31c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	0019      	movs	r1, r3
 8002caa:	f001 fd29 	bl	8004700 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0| GPIO_PIN_1;
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <MX_GPIO_Init+0x338>)
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	f001 fb9c 	bl	8004404 <HAL_GPIO_Init>


  //desable for lowpower
  GPIO_InitTypeDef GPIO_InitStructure;

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8002ccc:	2110      	movs	r1, #16
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStructure.Pin = (GPIO_PIN_13 | GPIO_PIN_14);
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	22c0      	movs	r2, #192	; 0xc0
 8002cde:	01d2      	lsls	r2, r2, #7
 8002ce0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ce2:	187a      	adds	r2, r7, r1
 8002ce4:	23a0      	movs	r3, #160	; 0xa0
 8002ce6:	05db      	lsls	r3, r3, #23
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f001 fb8a 	bl	8004404 <HAL_GPIO_Init>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	03c9      	lsls	r1, r1, #15
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DBGMCU_DisableDBGStopMode();
 8002cfe:	f000 ffe9 	bl	8003cd4 <HAL_DBGMCU_DisableDBGStopMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <MX_GPIO_Init+0x314>)
 8002d08:	490d      	ldr	r1, [pc, #52]	; (8002d40 <MX_GPIO_Init+0x33c>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b00f      	add	sp, #60	; 0x3c
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	00009022 	.word	0x00009022
 8002d20:	50000400 	.word	0x50000400
 8002d24:	50000800 	.word	0x50000800
 8002d28:	00009002 	.word	0x00009002
 8002d2c:	00006f11 	.word	0x00006f11
 8002d30:	10110000 	.word	0x10110000
 8002d34:	00006735 	.word	0x00006735
 8002d38:	00001004 	.word	0x00001004
 8002d3c:	50001c00 	.word	0x50001c00
 8002d40:	ffbfffff 	.word	0xffbfffff

08002d44 <stm32l_lowPowerRestoreGpioConfig>:

/* USER CODE BEGIN 2 */
void stm32l_lowPowerRestoreGpioConfig() {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d56:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d68:	2102      	movs	r1, #2
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	2202      	movs	r2, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d80:	2104      	movs	r1, #4
 8002d82:	430a      	orrs	r2, r1
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	4013      	ands	r3, r2
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]

	  // RF sw
	  gpio_configure_ext(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2301      	movs	r3, #1
 8002db0:	2200      	movs	r2, #0
 8002db2:	2102      	movs	r1, #2
 8002db4:	2000      	movs	r0, #0
 8002db6:	f01a fbeb 	bl	801d590 <gpio_configure_ext>

	  // LoRa NSS
	  gpio_configure_ext(ITSDK_SX1276_NSS_BANK,ITSDK_SX1276_NSS_PIN,GPIO_OUTPUT_PULLUP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	0219      	lsls	r1, r3, #8
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f01a fbe2 	bl	801d590 <gpio_configure_ext>

	  // LoRa TCXO
	  gpio_configure_ext(ITSDK_SX1276_TCXO_VCC_BANK,ITSDK_SX1276_TCXO_VCC_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_LOW,ITSDK_GPIO_ALT_NONE);
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	0159      	lsls	r1, r3, #5
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f01a fbd9 	bl	801d590 <gpio_configure_ext>

	  // LoRa DIO0-1-2-3-4
	  gpio_configure_ext(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dde:	2300      	movs	r3, #0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2301      	movs	r3, #1
 8002de4:	2207      	movs	r2, #7
 8002de6:	2110      	movs	r1, #16
 8002de8:	2001      	movs	r0, #1
 8002dea:	f01a fbd1 	bl	801d590 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dee:	2300      	movs	r3, #0
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2301      	movs	r3, #1
 8002df4:	2207      	movs	r2, #7
 8002df6:	2102      	movs	r1, #2
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f01a fbc9 	bl	801d590 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2301      	movs	r3, #1
 8002e04:	2207      	movs	r2, #7
 8002e06:	2101      	movs	r1, #1
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f01a fbc1 	bl	801d590 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	0199      	lsls	r1, r3, #6
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2301      	movs	r3, #1
 8002e18:	2207      	movs	r2, #7
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f01a fbb8 	bl	801d590 <gpio_configure_ext>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	2005      	movs	r0, #5
 8002e26:	f001 fa63 	bl	80042f0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e2a:	2005      	movs	r0, #5
 8002e2c:	f001 fa75 	bl	800431a <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2100      	movs	r1, #0
 8002e34:	2007      	movs	r0, #7
 8002e36:	f001 fa5b 	bl	80042f0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e3a:	2007      	movs	r0, #7
 8002e3c:	f001 fa6d 	bl	800431a <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Pin = LD4_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b004      	add	sp, #16
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <main>:

/**
 * main loop
 */
int main(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e50:	f000 fea4 	bl	8003b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e54:	f000 f816 	bl	8002e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e58:	f7ff fdd4 	bl	8002a04 <MX_GPIO_Init>
  MX_RTC_Init();
 8002e5c:	f000 faae 	bl	80033bc <MX_RTC_Init>
  MX_SPI1_Init();
 8002e60:	f000 fb74 	bl	800354c <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8002e64:	f000 fdba 	bl	80039dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002e68:	f000 fd88 	bl	800397c <MX_USART1_UART_Init>

//  MX_IWDG_Init();
  MX_ADC_Init();
 8002e6c:	f7ff fd4c 	bl	8002908 <MX_ADC_Init>
//  MX_TIM21_Init();

  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8002e70:	f019 f9d8 	bl	801c224 <itsdk_setup>
  /* Infinite loop */

  /* USER CODE BEGIN WHILE */

#if(USE_PULSE_COUNTER==1)
  MX_LPTIM1_Init();
 8002e74:	f000 fa72 	bl	800335c <MX_LPTIM1_Init>
  start_pulse_counter();
 8002e78:	f000 fa64 	bl	8003344 <start_pulse_counter>
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */


	 itsdk_loop();
 8002e7c:	f019 fa06 	bl	801c28c <itsdk_loop>
 8002e80:	e7fc      	b.n	8002e7c <main+0x30>
	...

08002e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b09d      	sub	sp, #116	; 0x74
 8002e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	2438      	movs	r4, #56	; 0x38
 8002e8c:	193b      	adds	r3, r7, r4
 8002e8e:	0018      	movs	r0, r3
 8002e90:	2338      	movs	r3, #56	; 0x38
 8002e92:	001a      	movs	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	f01b fde5 	bl	801ea64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e9a:	2324      	movs	r3, #36	; 0x24
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	2314      	movs	r3, #20
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	f01b fddd 	bl	801ea64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eaa:	003b      	movs	r3, r7
 8002eac:	0018      	movs	r0, r3
 8002eae:	2324      	movs	r3, #36	; 0x24
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f01b fdd6 	bl	801ea64 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb8:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <SystemClock_Config+0x110>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a36      	ldr	r2, [pc, #216]	; (8002f98 <SystemClock_Config+0x114>)
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <SystemClock_Config+0x110>)
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	0109      	lsls	r1, r1, #4
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002eca:	f001 fd27 	bl	800491c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ece:	4b33      	ldr	r3, [pc, #204]	; (8002f9c <SystemClock_Config+0x118>)
 8002ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed2:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <SystemClock_Config+0x118>)
 8002ed4:	4930      	ldr	r1, [pc, #192]	; (8002f98 <SystemClock_Config+0x114>)
 8002ed6:	400a      	ands	r2, r1
 8002ed8:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	220e      	movs	r2, #14
 8002ede:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ee0:	193b      	adds	r3, r7, r4
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	0052      	lsls	r2, r2, #1
 8002ee6:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee8:	0021      	movs	r1, r4
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	2201      	movs	r2, #1
 8002eee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ef0:	187b      	adds	r3, r7, r1
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ef6:	187b      	adds	r3, r7, r1
 8002ef8:	2201      	movs	r2, #1
 8002efa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002efc:	187b      	adds	r3, r7, r1
 8002efe:	2202      	movs	r2, #2
 8002f00:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f02:	187b      	adds	r3, r7, r1
 8002f04:	2200      	movs	r2, #0
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002f08:	187b      	adds	r3, r7, r1
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	0312      	lsls	r2, r2, #12
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	0412      	lsls	r2, r2, #16
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f001 fd5c 	bl	80049d8 <HAL_RCC_OscConfig>
 8002f20:	1e03      	subs	r3, r0, #0
 8002f22:	d001      	beq.n	8002f28 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002f24:	f000 f83c 	bl	8002fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f28:	2124      	movs	r1, #36	; 0x24
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	2203      	movs	r2, #3
 8002f34:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f002 f913 	bl	8005178 <HAL_RCC_ClockConfig>
 8002f52:	1e03      	subs	r3, r0, #0
 8002f54:	d001      	beq.n	8002f5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002f56:	f000 f823 	bl	8002fa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8002f5a:	003b      	movs	r3, r7
 8002f5c:	22a3      	movs	r2, #163	; 0xa3
 8002f5e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8002f60:	003b      	movs	r3, r7
 8002f62:	2208      	movs	r2, #8
 8002f64:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f66:	003b      	movs	r3, r7
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f6c:	003b      	movs	r3, r7
 8002f6e:	2280      	movs	r2, #128	; 0x80
 8002f70:	0252      	lsls	r2, r2, #9
 8002f72:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8002f74:	003b      	movs	r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f7a:	003b      	movs	r3, r7
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f002 fadf 	bl	8005540 <HAL_RCCEx_PeriphCLKConfig>
 8002f82:	1e03      	subs	r3, r0, #0
 8002f84:	d001      	beq.n	8002f8a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8002f86:	f000 f80b 	bl	8002fa0 <Error_Handler>
  }



}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b01d      	add	sp, #116	; 0x74
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	40007000 	.word	0x40007000
 8002f98:	ffffe7ff 	.word	0xffffe7ff
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <task>:
	uint32_t instantaneous_flow (); //flow in l/min
	uint32_t total_liters = 0; // increment each time timer reached 10,it said 10liters
#endif


void task() {
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	46de      	mov	lr, fp
 8002fb0:	4657      	mov	r7, sl
 8002fb2:	464e      	mov	r6, r9
 8002fb4:	4645      	mov	r5, r8
 8002fb6:	b5e0      	push	{r5, r6, r7, lr}
 8002fb8:	b09f      	sub	sp, #124	; 0x7c
 8002fba:	af0e      	add	r7, sp, #56	; 0x38
//	instantaneous_flow();

	/**
	 * if not joined set the green led to 1
	 */
	if(!itsdk_lorawan_hasjoined()){
 8002fbc:	f018 ff90 	bl	801bee0 <itsdk_lorawan_hasjoined>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4053      	eors	r3, r2
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <task+0x2a>
		gpio_set(LEDGreen_PORT,LEDGreen_PIN);
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f01a fcc7 	bl	801d964 <gpio_set>
	}

	// wait for the board configuration
	uint8_t i = 0;
 8002fd6:	2327      	movs	r3, #39	; 0x27
 8002fd8:	2218      	movs	r2, #24
 8002fda:	4694      	mov	ip, r2
 8002fdc:	44bc      	add	ip, r7
 8002fde:	4463      	add	r3, ip
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
	uint8_t devEui[8] = {0};
 8002fe4:	241c      	movs	r4, #28
 8002fe6:	2618      	movs	r6, #24
 8002fe8:	19bb      	adds	r3, r7, r6
 8002fea:	191b      	adds	r3, r3, r4
 8002fec:	0018      	movs	r0, r3
 8002fee:	2308      	movs	r3, #8
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	f01b fd36 	bl	801ea64 <memset>
	uint8_t appEui[8] = {0};
 8002ff8:	2514      	movs	r5, #20
 8002ffa:	19bb      	adds	r3, r7, r6
 8002ffc:	195b      	adds	r3, r3, r5
 8002ffe:	0018      	movs	r0, r3
 8003000:	2308      	movs	r3, #8
 8003002:	001a      	movs	r2, r3
 8003004:	2100      	movs	r1, #0
 8003006:	f01b fd2d 	bl	801ea64 <memset>
	uint8_t appKey[16] = {0};
 800300a:	231c      	movs	r3, #28
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	0018      	movs	r0, r3
 8003010:	2310      	movs	r3, #16
 8003012:	001a      	movs	r2, r3
 8003014:	2100      	movs	r1, #0
 8003016:	f01b fd25 	bl	801ea64 <memset>

	itsdk_lorawan_getDeviceEUI(devEui);
 800301a:	19ba      	adds	r2, r7, r6
 800301c:	1913      	adds	r3, r2, r4
 800301e:	0018      	movs	r0, r3
 8003020:	f018 ffd2 	bl	801bfc8 <itsdk_lorawan_getDeviceEUI>
	itsdk_lorawan_getAppEUI(appEui);
 8003024:	19ba      	adds	r2, r7, r6
 8003026:	1953      	adds	r3, r2, r5
 8003028:	0018      	movs	r0, r3
 800302a:	f018 ffff 	bl	801c02c <itsdk_lorawan_getAppEUI>
	itsdk_lorawan_getAppKEY(appKey);
 800302e:	231c      	movs	r3, #28
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	0018      	movs	r0, r3
 8003034:	f019 f82c 	bl	801c090 <itsdk_lorawan_getAppKEY>
	while ( i < 8 && devEui[i] == 0 ) i++;
 8003038:	e008      	b.n	800304c <task+0xa0>
 800303a:	2127      	movs	r1, #39	; 0x27
 800303c:	2018      	movs	r0, #24
 800303e:	183b      	adds	r3, r7, r0
 8003040:	185b      	adds	r3, r3, r1
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	183b      	adds	r3, r7, r0
 8003046:	185b      	adds	r3, r3, r1
 8003048:	3201      	adds	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	2327      	movs	r3, #39	; 0x27
 800304e:	2218      	movs	r2, #24
 8003050:	4694      	mov	ip, r2
 8003052:	44bc      	add	ip, r7
 8003054:	4463      	add	r3, ip
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b07      	cmp	r3, #7
 800305a:	d80d      	bhi.n	8003078 <task+0xcc>
 800305c:	2327      	movs	r3, #39	; 0x27
 800305e:	2218      	movs	r2, #24
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	221c      	movs	r2, #28
 800306a:	2118      	movs	r1, #24
 800306c:	468c      	mov	ip, r1
 800306e:	44bc      	add	ip, r7
 8003070:	4462      	add	r2, ip
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0e0      	beq.n	800303a <task+0x8e>
	if  ( i < 8 ) {
 8003078:	2327      	movs	r3, #39	; 0x27
 800307a:	2218      	movs	r2, #24
 800307c:	4694      	mov	ip, r2
 800307e:	44bc      	add	ip, r7
 8003080:	4463      	add	r3, ip
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b07      	cmp	r3, #7
 8003086:	d900      	bls.n	800308a <task+0xde>
 8003088:	e105      	b.n	8003296 <task+0x2ea>
		if ( s_state.setup == BOOL_FALSE) {
 800308a:	4b87      	ldr	r3, [pc, #540]	; (80032a8 <task+0x2fc>)
 800308c:	791b      	ldrb	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d000      	beq.n	8003094 <task+0xe8>
 8003092:	e0c5      	b.n	8003220 <task+0x274>
			log_info("Init LoRawan Stack \n\r");
 8003094:	4b85      	ldr	r3, [pc, #532]	; (80032ac <task+0x300>)
 8003096:	0018      	movs	r0, r3
 8003098:	f018 fdb4 	bl	801bc04 <log_info>
			log_info("devEUI : 0x%02X %02X %02X %02X %02X %02X %02X 02%X \n\r",devEui[0],devEui[1],devEui[2],devEui[3],devEui[4],devEui[5],devEui[6],devEui[7]);
 800309c:	201c      	movs	r0, #28
 800309e:	2518      	movs	r5, #24
 80030a0:	197b      	adds	r3, r7, r5
 80030a2:	181b      	adds	r3, r3, r0
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	001e      	movs	r6, r3
 80030a8:	197b      	adds	r3, r7, r5
 80030aa:	181b      	adds	r3, r3, r0
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	197b      	adds	r3, r7, r5
 80030b2:	181b      	adds	r3, r3, r0
 80030b4:	789b      	ldrb	r3, [r3, #2]
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	197b      	adds	r3, r7, r5
 80030ba:	181b      	adds	r3, r3, r0
 80030bc:	78db      	ldrb	r3, [r3, #3]
 80030be:	001a      	movs	r2, r3
 80030c0:	197b      	adds	r3, r7, r5
 80030c2:	181b      	adds	r3, r3, r0
 80030c4:	791b      	ldrb	r3, [r3, #4]
 80030c6:	0019      	movs	r1, r3
 80030c8:	197b      	adds	r3, r7, r5
 80030ca:	181b      	adds	r3, r3, r0
 80030cc:	795b      	ldrb	r3, [r3, #5]
 80030ce:	001c      	movs	r4, r3
 80030d0:	197b      	adds	r3, r7, r5
 80030d2:	181b      	adds	r3, r3, r0
 80030d4:	799b      	ldrb	r3, [r3, #6]
 80030d6:	001d      	movs	r5, r3
 80030d8:	2318      	movs	r3, #24
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	181b      	adds	r3, r3, r0
 80030de:	79db      	ldrb	r3, [r3, #7]
 80030e0:	4873      	ldr	r0, [pc, #460]	; (80032b0 <task+0x304>)
 80030e2:	9304      	str	r3, [sp, #16]
 80030e4:	9503      	str	r5, [sp, #12]
 80030e6:	9402      	str	r4, [sp, #8]
 80030e8:	9101      	str	r1, [sp, #4]
 80030ea:	9200      	str	r2, [sp, #0]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	0031      	movs	r1, r6
 80030f2:	f018 fd87 	bl	801bc04 <log_info>
			log_info("appEUI : 0x%02X %02X %02X %02X %02X %02X %02X %02X \n\r",appEui[0],appEui[1],appEui[2],appEui[3],appEui[4],appEui[5],appEui[6],appEui[7]);
 80030f6:	2014      	movs	r0, #20
 80030f8:	2518      	movs	r5, #24
 80030fa:	197b      	adds	r3, r7, r5
 80030fc:	181b      	adds	r3, r3, r0
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	001e      	movs	r6, r3
 8003102:	197b      	adds	r3, r7, r5
 8003104:	181b      	adds	r3, r3, r0
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	197b      	adds	r3, r7, r5
 800310c:	181b      	adds	r3, r3, r0
 800310e:	789b      	ldrb	r3, [r3, #2]
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	197b      	adds	r3, r7, r5
 8003114:	181b      	adds	r3, r3, r0
 8003116:	78db      	ldrb	r3, [r3, #3]
 8003118:	001a      	movs	r2, r3
 800311a:	197b      	adds	r3, r7, r5
 800311c:	181b      	adds	r3, r3, r0
 800311e:	791b      	ldrb	r3, [r3, #4]
 8003120:	0019      	movs	r1, r3
 8003122:	197b      	adds	r3, r7, r5
 8003124:	181b      	adds	r3, r3, r0
 8003126:	795b      	ldrb	r3, [r3, #5]
 8003128:	001c      	movs	r4, r3
 800312a:	197b      	adds	r3, r7, r5
 800312c:	181b      	adds	r3, r3, r0
 800312e:	799b      	ldrb	r3, [r3, #6]
 8003130:	001d      	movs	r5, r3
 8003132:	2318      	movs	r3, #24
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	181b      	adds	r3, r3, r0
 8003138:	79db      	ldrb	r3, [r3, #7]
 800313a:	485e      	ldr	r0, [pc, #376]	; (80032b4 <task+0x308>)
 800313c:	9304      	str	r3, [sp, #16]
 800313e:	9503      	str	r5, [sp, #12]
 8003140:	9402      	str	r4, [sp, #8]
 8003142:	9101      	str	r1, [sp, #4]
 8003144:	9200      	str	r2, [sp, #0]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	0031      	movs	r1, r6
 800314c:	f018 fd5a 	bl	801bc04 <log_info>
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 8003150:	201c      	movs	r0, #28
 8003152:	183b      	adds	r3, r7, r0
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	183b      	adds	r3, r7, r0
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	183b      	adds	r3, r7, r0
 8003160:	789b      	ldrb	r3, [r3, #2]
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	183b      	adds	r3, r7, r0
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	001d      	movs	r5, r3
 800316a:	183b      	adds	r3, r7, r0
 800316c:	791b      	ldrb	r3, [r3, #4]
 800316e:	001e      	movs	r6, r3
 8003170:	183b      	adds	r3, r7, r0
 8003172:	795b      	ldrb	r3, [r3, #5]
 8003174:	469c      	mov	ip, r3
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 8003176:	183b      	adds	r3, r7, r0
 8003178:	799b      	ldrb	r3, [r3, #6]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 800317a:	4698      	mov	r8, r3
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 800317c:	183b      	adds	r3, r7, r0
 800317e:	79db      	ldrb	r3, [r3, #7]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 8003180:	4699      	mov	r9, r3
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 8003182:	183b      	adds	r3, r7, r0
 8003184:	7a1b      	ldrb	r3, [r3, #8]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 8003186:	469a      	mov	sl, r3
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 8003188:	183b      	adds	r3, r7, r0
 800318a:	7a5b      	ldrb	r3, [r3, #9]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 800318c:	469b      	mov	fp, r3
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 800318e:	183b      	adds	r3, r7, r0
 8003190:	7a9b      	ldrb	r3, [r3, #10]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 8003192:	60bb      	str	r3, [r7, #8]
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 8003194:	183b      	adds	r3, r7, r0
 8003196:	7adb      	ldrb	r3, [r3, #11]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 8003198:	607b      	str	r3, [r7, #4]
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 800319a:	183b      	adds	r3, r7, r0
 800319c:	7b1b      	ldrb	r3, [r3, #12]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 800319e:	001c      	movs	r4, r3
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 80031a0:	183b      	adds	r3, r7, r0
 80031a2:	7b5b      	ldrb	r3, [r3, #13]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 80031a4:	0019      	movs	r1, r3
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	7b9b      	ldrb	r3, [r3, #14]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 80031aa:	001a      	movs	r2, r3
					,appKey[6],appKey[7],appKey[8],appKey[9],appKey[10],appKey[11],appKey[12],appKey[13],appKey[14],appKey[15]);
 80031ac:	183b      	adds	r3, r7, r0
 80031ae:	7bdb      	ldrb	r3, [r3, #15]
			log_info("appKey : 0x%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r",appKey[0],appKey[1],appKey[2],appKey[3],appKey[4],appKey[5]
 80031b0:	4841      	ldr	r0, [pc, #260]	; (80032b8 <task+0x30c>)
 80031b2:	930c      	str	r3, [sp, #48]	; 0x30
 80031b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80031b6:	910a      	str	r1, [sp, #40]	; 0x28
 80031b8:	9409      	str	r4, [sp, #36]	; 0x24
 80031ba:	687c      	ldr	r4, [r7, #4]
 80031bc:	9408      	str	r4, [sp, #32]
 80031be:	68bc      	ldr	r4, [r7, #8]
 80031c0:	9407      	str	r4, [sp, #28]
 80031c2:	465c      	mov	r4, fp
 80031c4:	9406      	str	r4, [sp, #24]
 80031c6:	4654      	mov	r4, sl
 80031c8:	9405      	str	r4, [sp, #20]
 80031ca:	464c      	mov	r4, r9
 80031cc:	9404      	str	r4, [sp, #16]
 80031ce:	4644      	mov	r4, r8
 80031d0:	9403      	str	r4, [sp, #12]
 80031d2:	4664      	mov	r4, ip
 80031d4:	9402      	str	r4, [sp, #8]
 80031d6:	9601      	str	r6, [sp, #4]
 80031d8:	9500      	str	r5, [sp, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	6979      	ldr	r1, [r7, #20]
 80031e0:	f018 fd10 	bl	801bc04 <log_info>

			itsdk_lorawan_init_t r;
			#ifdef ITSDK_LORAWAN_CHANNEL
				static itsdk_lorawan_channelInit_t channels= ITSDK_LORAWAN_CHANNEL;
				r = itsdk_lorawan_setup(itsdk_config.sdk.activeRegion,&channels);
 80031e4:	4b35      	ldr	r3, [pc, #212]	; (80032bc <task+0x310>)
 80031e6:	891b      	ldrh	r3, [r3, #8]
 80031e8:	2526      	movs	r5, #38	; 0x26
 80031ea:	2618      	movs	r6, #24
 80031ec:	19ba      	adds	r2, r7, r6
 80031ee:	1954      	adds	r4, r2, r5
 80031f0:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <task+0x314>)
 80031f2:	0011      	movs	r1, r2
 80031f4:	0018      	movs	r0, r3
 80031f6:	f018 fd4b 	bl	801bc90 <itsdk_lorawan_setup>
 80031fa:	0003      	movs	r3, r0
 80031fc:	7023      	strb	r3, [r4, #0]
			#else
				r = itsdk_lorawan_setup(itsdk_config.sdk.activeRegion,NULL);
			#endif
			if ( r == LORAWAN_INIT_SUCESS ) {
 80031fe:	19bb      	adds	r3, r7, r6
 8003200:	195b      	adds	r3, r3, r5
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <task+0x26c>
				log_info("success\r\n");
 8003208:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <task+0x318>)
 800320a:	0018      	movs	r0, r3
 800320c:	f018 fcfa 	bl	801bc04 <log_info>
				s_state.setup = BOOL_TRUE;
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <task+0x2fc>)
 8003212:	2201      	movs	r2, #1
 8003214:	711a      	strb	r2, [r3, #4]
 8003216:	e003      	b.n	8003220 <task+0x274>
			} else {
				log_info("failed\r\n");
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <task+0x31c>)
 800321a:	0018      	movs	r0, r3
 800321c:	f018 fcf2 	bl	801bc04 <log_info>
			}
		}
		if ( s_state.setup == BOOL_TRUE && s_state.lastComMS > COMFREQS) {
 8003220:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <task+0x2fc>)
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d12f      	bne.n	8003288 <task+0x2dc>
 8003228:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <task+0x2fc>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <task+0x320>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	dd29      	ble.n	8003288 <task+0x2dc>
			//check if joined
			if ( !itsdk_lorawan_hasjoined() ) {
 8003234:	f018 fe54 	bl	801bee0 <itsdk_lorawan_hasjoined>
 8003238:	0003      	movs	r3, r0
 800323a:	001a      	movs	r2, r3
 800323c:	2301      	movs	r3, #1
 800323e:	4053      	eors	r3, r2
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01c      	beq.n	8003280 <task+0x2d4>
				log_info("Connecting LoRaWAN ");
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <task+0x324>)
 8003248:	0018      	movs	r0, r3
 800324a:	f018 fcdb 	bl	801bc04 <log_info>
				if ( itsdk_lorawan_join_sync() == LORAWAN_JOIN_SUCCESS ) {
 800324e:	f018 fe1d 	bl	801be8c <itsdk_lorawan_join_sync>
 8003252:	0003      	movs	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d108      	bne.n	800326a <task+0x2be>
					gpio_reset(LEDGreen_PORT,LEDGreen_PIN);
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	2001      	movs	r0, #1
 800325c:	f01a fb9a 	bl	801d994 <gpio_reset>
					log_info("success\r\n");
 8003260:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <task+0x318>)
 8003262:	0018      	movs	r0, r3
 8003264:	f018 fcce 	bl	801bc04 <log_info>
			if ( !itsdk_lorawan_hasjoined() ) {
 8003268:	e015      	b.n	8003296 <task+0x2ea>
				} else {
					log_info("failed\r\n");
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <task+0x31c>)
 800326c:	0018      	movs	r0, r3
 800326e:	f018 fcc9 	bl	801bc04 <log_info>
					s_state.lastComMS = COMFREQS - 30*1000; // retry in 30 seconds
 8003272:	4b16      	ldr	r3, [pc, #88]	; (80032cc <task+0x320>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <task+0x328>)
 8003278:	189a      	adds	r2, r3, r2
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <task+0x2fc>)
 800327c:	601a      	str	r2, [r3, #0]
			if ( !itsdk_lorawan_hasjoined() ) {
 800327e:	e00a      	b.n	8003296 <task+0x2ea>
#endif
#if(USE_PULSE_COUNTER==1)

#endif

				s_state.lastComMS = 0;
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <task+0x2fc>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
			if ( !itsdk_lorawan_hasjoined() ) {
 8003286:	e006      	b.n	8003296 <task+0x2ea>
			}
		} else {
			s_state.lastComMS += TASKDELAYMS;
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <task+0x2fc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <task+0x32c>)
 800328e:	189a      	adds	r2, r3, r2
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <task+0x2fc>)
 8003292:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003294:	e7ff      	b.n	8003296 <task+0x2ea>
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b011      	add	sp, #68	; 0x44
 800329c:	bc3c      	pop	{r2, r3, r4, r5}
 800329e:	4690      	mov	r8, r2
 80032a0:	4699      	mov	r9, r3
 80032a2:	46a2      	mov	sl, r4
 80032a4:	46ab      	mov	fp, r5
 80032a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a8:	200011d4 	.word	0x200011d4
 80032ac:	0801f530 	.word	0x0801f530
 80032b0:	0801f548 	.word	0x0801f548
 80032b4:	0801f580 	.word	0x0801f580
 80032b8:	0801f5b8 	.word	0x0801f5b8
 80032bc:	20001540 	.word	0x20001540
 80032c0:	20000004 	.word	0x20000004
 80032c4:	0801f618 	.word	0x0801f618
 80032c8:	0801f624 	.word	0x0801f624
 80032cc:	20000000 	.word	0x20000000
 80032d0:	0801f630 	.word	0x0801f630
 80032d4:	ffff8ad0 	.word	0xffff8ad0
 80032d8:	00000bb8 	.word	0x00000bb8

080032dc <project_setup>:
}

/****************************************************************************************
 * Setup
 ****************************************************************************************/
void project_setup() {
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
	SX1276InitLowPower();
 80032e0:	f012 f91c 	bl	801551c <SX1276InitLowPower>
	log_info("Starting up\r\n");				// print a message on the USART2
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <project_setup+0x44>)
 80032e6:	0018      	movs	r0, r3
 80032e8:	f018 fc8c 	bl	801bc04 <log_info>
	itsdk_delayMs(2000);
 80032ec:	23fa      	movs	r3, #250	; 0xfa
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	0018      	movs	r0, r3
 80032f2:	f01a fc93 	bl	801dc1c <itsdk_delayMs>
	s_state.lastComMS = COMFREQS;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <project_setup+0x48>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <project_setup+0x4c>)
 80032fc:	601a      	str	r2, [r3, #0]
	s_state.setup = BOOL_FALSE;
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <project_setup+0x4c>)
 8003300:	2200      	movs	r2, #0
 8003302:	711a      	strb	r2, [r3, #4]
	gpio_reset(LEDGreen_PORT,LEDGreen_PIN);		//set led to 0
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	2001      	movs	r0, #1
 8003308:	f01a fb44 	bl	801d994 <gpio_reset>
	itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <project_setup+0x50>)
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4807      	ldr	r0, [pc, #28]	; (8003330 <project_setup+0x54>)
 8003314:	0019      	movs	r1, r3
 8003316:	f019 f9a7 	bl	801c668 <itdt_sched_registerSched>
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	0801f6e0 	.word	0x0801f6e0
 8003324:	20000000 	.word	0x20000000
 8003328:	200011d4 	.word	0x200011d4
 800332c:	08002fad 	.word	0x08002fad
 8003330:	00000bb8 	.word	0x00000bb8

08003334 <project_loop>:

/****************************************************************************************
 * Project loop may not contain functional stuff
 * Keep in this loop only really short operations
 ****************************************************************************************/
void project_loop() {
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
    itsdk_lorawan_loop();
 8003338:	f018 ff28 	bl	801c18c <itsdk_lorawan_loop>

}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <start_pulse_counter>:
#if(USE_PULSE_COUNTER==1)

	/**
	 * Start LPTIM for pulse counting
	 */
	void start_pulse_counter(){
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
		  HAL_LPTIM_Counter_Start_IT(&hlptim1, 20);
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <start_pulse_counter+0x14>)
 800334a:	2114      	movs	r1, #20
 800334c:	0018      	movs	r0, r3
 800334e:	f001 fa91 	bl	8004874 <HAL_LPTIM_Counter_Start_IT>
	}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	200011dc 	.word	0x200011dc

0800335c <MX_LPTIM1_Init>:
	  * @brief LPTIM1 Initialization Function
	  * @param None
	  * @retval None
	  */
	void MX_LPTIM1_Init(void)
	{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
	  /* USER CODE END LPTIM1_Init 0 */

	  /* USER CODE BEGIN LPTIM1_Init 1 */

	  /* USER CODE END LPTIM1_Init 1 */
	  hlptim1.Instance = LPTIM1;
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 8003362:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <MX_LPTIM1_Init+0x58>)
 8003364:	601a      	str	r2, [r3, #0]
	  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_ULPTIM;
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 8003368:	2201      	movs	r2, #1
 800336a:	605a      	str	r2, [r3, #4]
	  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
	  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
	  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
	  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <MX_LPTIM1_Init+0x5c>)
 8003382:	615a      	str	r2, [r3, #20]
	  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 8003386:	2200      	movs	r2, #0
 8003388:	621a      	str	r2, [r3, #32]
	  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 800338c:	2200      	movs	r2, #0
 800338e:	625a      	str	r2, [r3, #36]	; 0x24
	  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	0412      	lsls	r2, r2, #16
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <MX_LPTIM1_Init+0x54>)
 800339a:	0018      	movs	r0, r3
 800339c:	f001 f9ea 	bl	8004774 <HAL_LPTIM_Init>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d001      	beq.n	80033a8 <MX_LPTIM1_Init+0x4c>
	  {
		Error_Handler();
 80033a4:	f7ff fdfc 	bl	8002fa0 <Error_Handler>
	  }
	  /* USER CODE BEGIN LPTIM1_Init 2 */

	  /* USER CODE END LPTIM1_Init 2 */

	}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	200011dc 	.word	0x200011dc
 80033b4:	40007c00 	.word	0x40007c00
 80033b8:	0000ffff 	.word	0x0000ffff

080033bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b090      	sub	sp, #64	; 0x40
 80033c0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80033c2:	232c      	movs	r3, #44	; 0x2c
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	0018      	movs	r0, r3
 80033c8:	2314      	movs	r3, #20
 80033ca:	001a      	movs	r2, r3
 80033cc:	2100      	movs	r1, #0
 80033ce:	f01b fb49 	bl	801ea64 <memset>
  RTC_DateTypeDef sDate = {0};
 80033d2:	2328      	movs	r3, #40	; 0x28
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80033da:	003b      	movs	r3, r7
 80033dc:	0018      	movs	r0, r3
 80033de:	2328      	movs	r3, #40	; 0x28
 80033e0:	001a      	movs	r2, r3
 80033e2:	2100      	movs	r1, #0
 80033e4:	f01b fb3e 	bl	801ea64 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <MX_RTC_Init+0x148>)
 80033ea:	4a47      	ldr	r2, [pc, #284]	; (8003508 <MX_RTC_Init+0x14c>)
 80033ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80033ee:	4b45      	ldr	r3, [pc, #276]	; (8003504 <MX_RTC_Init+0x148>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80033f4:	4b43      	ldr	r3, [pc, #268]	; (8003504 <MX_RTC_Init+0x148>)
 80033f6:	227f      	movs	r2, #127	; 0x7f
 80033f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80033fa:	4b42      	ldr	r3, [pc, #264]	; (8003504 <MX_RTC_Init+0x148>)
 80033fc:	22ff      	movs	r2, #255	; 0xff
 80033fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <MX_RTC_Init+0x148>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003406:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <MX_RTC_Init+0x148>)
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800340c:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <MX_RTC_Init+0x148>)
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <MX_RTC_Init+0x148>)
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003418:	4b3a      	ldr	r3, [pc, #232]	; (8003504 <MX_RTC_Init+0x148>)
 800341a:	0018      	movs	r0, r3
 800341c:	f002 f9e8 	bl	80057f0 <HAL_RTC_Init>
 8003420:	1e03      	subs	r3, r0, #0
 8003422:	d001      	beq.n	8003428 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003424:	f7ff fdbc 	bl	8002fa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2200      	movs	r2, #0
 8003434:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2200      	movs	r2, #0
 800343a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800343c:	187b      	adds	r3, r7, r1
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2200      	movs	r2, #0
 8003446:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003448:	1879      	adds	r1, r7, r1
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <MX_RTC_Init+0x148>)
 800344c:	2200      	movs	r2, #0
 800344e:	0018      	movs	r0, r3
 8003450:	f002 fa6c 	bl	800592c <HAL_RTC_SetTime>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d001      	beq.n	800345c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003458:	f7ff fda2 	bl	8002fa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800345c:	2128      	movs	r1, #40	; 0x28
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003464:	187b      	adds	r3, r7, r1
 8003466:	2201      	movs	r2, #1
 8003468:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2201      	movs	r2, #1
 800346e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2200      	movs	r2, #0
 8003474:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003476:	1879      	adds	r1, r7, r1
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <MX_RTC_Init+0x148>)
 800347a:	2200      	movs	r2, #0
 800347c:	0018      	movs	r0, r3
 800347e:	f002 fb75 	bl	8005b6c <HAL_RTC_SetDate>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d001      	beq.n	800348a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003486:	f7ff fd8b 	bl	8002fa0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800348a:	003b      	movs	r3, r7
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003490:	003b      	movs	r3, r7
 8003492:	2200      	movs	r2, #0
 8003494:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003496:	003b      	movs	r3, r7
 8003498:	2200      	movs	r2, #0
 800349a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800349c:	003b      	movs	r3, r7
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80034a2:	003b      	movs	r3, r7
 80034a4:	2200      	movs	r2, #0
 80034a6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80034a8:	003b      	movs	r3, r7
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80034ae:	003b      	movs	r3, r7
 80034b0:	2200      	movs	r2, #0
 80034b2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80034b4:	003b      	movs	r3, r7
 80034b6:	22f0      	movs	r2, #240	; 0xf0
 80034b8:	0512      	lsls	r2, r2, #20
 80034ba:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80034bc:	003b      	movs	r3, r7
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80034c2:	003b      	movs	r3, r7
 80034c4:	2220      	movs	r2, #32
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80034ca:	003b      	movs	r3, r7
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	0052      	lsls	r2, r2, #1
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80034d2:	0039      	movs	r1, r7
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <MX_RTC_Init+0x148>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	0018      	movs	r0, r3
 80034da:	f002 fc43 	bl	8005d64 <HAL_RTC_SetAlarm_IT>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d001      	beq.n	80034e6 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80034e2:	f7ff fd5d 	bl	8002fa0 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <MX_RTC_Init+0x148>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	0018      	movs	r0, r3
 80034ee:	f002 fe73 	bl	80061d8 <HAL_RTCEx_SetWakeUpTimer_IT>
 80034f2:	1e03      	subs	r3, r0, #0
 80034f4:	d001      	beq.n	80034fa <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 80034f6:	f7ff fd53 	bl	8002fa0 <Error_Handler>
  }

}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b010      	add	sp, #64	; 0x40
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	2000120c 	.word	0x2000120c
 8003508:	40002800 	.word	0x40002800

0800350c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <HAL_RTC_MspInit+0x38>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10e      	bne.n	800353c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_RTC_MspInit+0x3c>)
 8003520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RTC_MspInit+0x3c>)
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	02c9      	lsls	r1, r1, #11
 8003528:	430a      	orrs	r2, r1
 800352a:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	2100      	movs	r1, #0
 8003530:	2002      	movs	r0, #2
 8003532:	f000 fedd 	bl	80042f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003536:	2002      	movs	r0, #2
 8003538:	f000 feef 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40002800 	.word	0x40002800
 8003548:	40021000 	.word	0x40021000

0800354c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003552:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <MX_SPI1_Init+0x6c>)
 8003554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003558:	2282      	movs	r2, #130	; 0x82
 800355a:	0052      	lsls	r2, r2, #1
 800355c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003564:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003566:	2200      	movs	r2, #0
 8003568:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <MX_SPI1_Init+0x68>)
 800356c:	2200      	movs	r2, #0
 800356e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003570:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003572:	2200      	movs	r2, #0
 8003574:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	0092      	lsls	r2, r2, #2
 800357c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003580:	2220      	movs	r2, #32
 8003582:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003586:	2200      	movs	r2, #0
 8003588:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <MX_SPI1_Init+0x68>)
 800358c:	2200      	movs	r2, #0
 800358e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003592:	2200      	movs	r2, #0
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <MX_SPI1_Init+0x68>)
 8003598:	2207      	movs	r2, #7
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <MX_SPI1_Init+0x68>)
 800359e:	0018      	movs	r0, r3
 80035a0:	f002 ff74 	bl	800648c <HAL_SPI_Init>
 80035a4:	1e03      	subs	r3, r0, #0
 80035a6:	d001      	beq.n	80035ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035a8:	f7ff fcfa 	bl	8002fa0 <Error_Handler>
  }

}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	20001288 	.word	0x20001288
 80035b8:	40013000 	.word	0x40013000

080035bc <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b08b      	sub	sp, #44	; 0x2c
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	2314      	movs	r3, #20
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	0018      	movs	r0, r3
 80035ca:	2314      	movs	r3, #20
 80035cc:	001a      	movs	r2, r3
 80035ce:	2100      	movs	r1, #0
 80035d0:	f01b fa48 	bl	801ea64 <memset>
  if(spiHandle->Instance==SPI1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a41      	ldr	r2, [pc, #260]	; (80036e0 <HAL_SPI_MspInit+0x124>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d14d      	bne.n	800367a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035de:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 80035e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e2:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0149      	lsls	r1, r1, #5
 80035e8:	430a      	orrs	r2, r1
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ec:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 80035f2:	2102      	movs	r1, #2
 80035f4:	430a      	orrs	r2, r1
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80035f8:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	2202      	movs	r2, #2
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003604:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 800360a:	2101      	movs	r1, #1
 800360c:	430a      	orrs	r2, r1
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003610:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	2201      	movs	r2, #1
 8003616:	4013      	ands	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 800361c:	2114      	movs	r1, #20
 800361e:	187b      	adds	r3, r7, r1
 8003620:	2208      	movs	r2, #8
 8003622:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	187b      	adds	r3, r7, r1
 8003626:	2202      	movs	r2, #2
 8003628:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	187b      	adds	r3, r7, r1
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003630:	187b      	adds	r3, r7, r1
 8003632:	2203      	movs	r2, #3
 8003634:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003636:	187b      	adds	r3, r7, r1
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 800363c:	000c      	movs	r4, r1
 800363e:	187b      	adds	r3, r7, r1
 8003640:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <HAL_SPI_MspInit+0x12c>)
 8003642:	0019      	movs	r1, r3
 8003644:	0010      	movs	r0, r2
 8003646:	f000 fedd 	bl	8004404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 800364a:	0021      	movs	r1, r4
 800364c:	187b      	adds	r3, r7, r1
 800364e:	22c0      	movs	r2, #192	; 0xc0
 8003650:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2202      	movs	r2, #2
 8003656:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365e:	187b      	adds	r3, r7, r1
 8003660:	2203      	movs	r2, #3
 8003662:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003664:	187b      	adds	r3, r7, r1
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	187a      	adds	r2, r7, r1
 800366c:	23a0      	movs	r3, #160	; 0xa0
 800366e:	05db      	lsls	r3, r3, #23
 8003670:	0011      	movs	r1, r2
 8003672:	0018      	movs	r0, r3
 8003674:	f000 fec6 	bl	8004404 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003678:	e02e      	b.n	80036d8 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_SPI_MspInit+0x130>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d129      	bne.n	80036d8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 8003686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 800368a:	2180      	movs	r1, #128	; 0x80
 800368c:	01c9      	lsls	r1, r1, #7
 800368e:	430a      	orrs	r2, r1
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 8003698:	2102      	movs	r1, #2
 800369a:	430a      	orrs	r2, r1
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_SPI_MspInit+0x128>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	2202      	movs	r2, #2
 80036a4:	4013      	ands	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80036aa:	2114      	movs	r1, #20
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	22f0      	movs	r2, #240	; 0xf0
 80036b0:	0212      	lsls	r2, r2, #8
 80036b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2202      	movs	r2, #2
 80036b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	2203      	movs	r2, #3
 80036c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <HAL_SPI_MspInit+0x12c>)
 80036d0:	0019      	movs	r1, r3
 80036d2:	0010      	movs	r0, r2
 80036d4:	f000 fe96 	bl	8004404 <HAL_GPIO_Init>
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b00b      	add	sp, #44	; 0x2c
 80036de:	bd90      	pop	{r4, r7, pc}
 80036e0:	40013000 	.word	0x40013000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	50000400 	.word	0x50000400
 80036ec:	40003800 	.word	0x40003800

080036f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_MspInit+0x24>)
 80036f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_MspInit+0x24>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	430a      	orrs	r2, r1
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <HAL_MspInit+0x24>)
 8003702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_MspInit+0x24>)
 8003706:	2180      	movs	r1, #128	; 0x80
 8003708:	0549      	lsls	r1, r1, #21
 800370a:	430a      	orrs	r2, r1
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000

08003718 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	230c      	movs	r3, #12
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	0018      	movs	r0, r3
 8003726:	2314      	movs	r3, #20
 8003728:	001a      	movs	r2, r3
 800372a:	2100      	movs	r1, #0
 800372c:	f01b f99a 	bl	801ea64 <memset>
  if(hlptim->Instance==LPTIM1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_LPTIM_MspInit+0x8c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d130      	bne.n	800379c <HAL_LPTIM_MspInit+0x84>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_LPTIM_MspInit+0x90>)
 800373c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_LPTIM_MspInit+0x90>)
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	0609      	lsls	r1, r1, #24
 8003744:	430a      	orrs	r2, r1
 8003746:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003748:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_LPTIM_MspInit+0x90>)
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <HAL_LPTIM_MspInit+0x90>)
 800374e:	2102      	movs	r1, #2
 8003750:	430a      	orrs	r2, r1
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_LPTIM_MspInit+0x90>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2202      	movs	r2, #2
 800375a:	4013      	ands	r3, r2
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003760:	210c      	movs	r1, #12
 8003762:	187b      	adds	r3, r7, r1
 8003764:	2220      	movs	r2, #32
 8003766:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2202      	movs	r2, #2
 800376c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 800377a:	187b      	adds	r3, r7, r1
 800377c:	2202      	movs	r2, #2
 800377e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003780:	187b      	adds	r3, r7, r1
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_LPTIM_MspInit+0x94>)
 8003784:	0019      	movs	r1, r3
 8003786:	0010      	movs	r0, r2
 8003788:	f000 fe3c 	bl	8004404 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	200d      	movs	r0, #13
 8003792:	f000 fdad 	bl	80042f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003796:	200d      	movs	r0, #13
 8003798:	f000 fdbf 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b008      	add	sp, #32
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40007c00 	.word	0x40007c00
 80037a8:	40021000 	.word	0x40021000
 80037ac:	50000400 	.word	0x50000400

080037b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037be:	e7fe      	b.n	80037be <HardFault_Handler+0x4>

080037c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037d8:	f01b f836 	bl	801e848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <RTC_IRQHandler+0x1c>)
 80037ea:	0018      	movs	r0, r3
 80037ec:	f002 fc06 	bl	8005ffc <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <RTC_IRQHandler+0x1c>)
 80037f2:	0018      	movs	r0, r3
 80037f4:	f002 fe18 	bl	8006428 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	2000120c 	.word	0x2000120c

08003804 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003808:	2001      	movs	r0, #1
 800380a:	f000 ff97 	bl	800473c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800380e:	2002      	movs	r0, #2
 8003810:	f000 ff94 	bl	800473c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800381e:	2010      	movs	r0, #16
 8003820:	f000 ff8c 	bl	800473c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	019b      	lsls	r3, r3, #6
 8003828:	0018      	movs	r0, r3
 800382a:	f000 ff87 	bl	800473c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <USART1_IRQHandler+0x14>)
 800383a:	0018      	movs	r0, r3
 800383c:	f003 f9f6 	bl	8006c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	2000131c 	.word	0x2000131c

0800384c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <USART2_IRQHandler+0x14>)
 8003852:	0018      	movs	r0, r3
 8003854:	f003 f9ea 	bl	8006c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	2000139c 	.word	0x2000139c

08003864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <_sbrk+0x5c>)
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <_sbrk+0x60>)
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <_sbrk+0x64>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <_sbrk+0x64>)
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <_sbrk+0x68>)
 8003884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <_sbrk+0x64>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	18d3      	adds	r3, r2, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	429a      	cmp	r2, r3
 8003892:	d207      	bcs.n	80038a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003894:	f01b f8a0 	bl	801e9d8 <__errno>
 8003898:	0003      	movs	r3, r0
 800389a:	220c      	movs	r2, #12
 800389c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800389e:	2301      	movs	r3, #1
 80038a0:	425b      	negs	r3, r3
 80038a2:	e009      	b.n	80038b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <_sbrk+0x64>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <_sbrk+0x64>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <_sbrk+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038b6:	68fb      	ldr	r3, [r7, #12]
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b006      	add	sp, #24
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20005000 	.word	0x20005000
 80038c4:	00000400 	.word	0x00000400
 80038c8:	20000134 	.word	0x20000134
 80038cc:	20001630 	.word	0x20001630

080038d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80038d4:	4b17      	ldr	r3, [pc, #92]	; (8003934 <SystemInit+0x64>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <SystemInit+0x64>)
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	0049      	lsls	r1, r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <SystemInit+0x64>)
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <SystemInit+0x64>)
 80038e8:	4913      	ldr	r1, [pc, #76]	; (8003938 <SystemInit+0x68>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <SystemInit+0x64>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <SystemInit+0x64>)
 80038f4:	4911      	ldr	r1, [pc, #68]	; (800393c <SystemInit+0x6c>)
 80038f6:	400a      	ands	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <SystemInit+0x64>)
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <SystemInit+0x64>)
 8003900:	2101      	movs	r1, #1
 8003902:	438a      	bics	r2, r1
 8003904:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <SystemInit+0x64>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <SystemInit+0x64>)
 800390c:	490c      	ldr	r1, [pc, #48]	; (8003940 <SystemInit+0x70>)
 800390e:	400a      	ands	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <SystemInit+0x64>)
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <SystemInit+0x64>)
 8003918:	490a      	ldr	r1, [pc, #40]	; (8003944 <SystemInit+0x74>)
 800391a:	400a      	ands	r2, r1
 800391c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <SystemInit+0x64>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <SystemInit+0x78>)
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	0512      	lsls	r2, r2, #20
 800392a:	609a      	str	r2, [r3, #8]
#endif
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	40021000 	.word	0x40021000
 8003938:	88ff400c 	.word	0x88ff400c
 800393c:	fef6fff6 	.word	0xfef6fff6
 8003940:	fffbffff 	.word	0xfffbffff
 8003944:	ff02ffff 	.word	0xff02ffff
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a06      	ldr	r2, [pc, #24]	; (8003974 <HAL_TIM_Base_MspInit+0x28>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d105      	bne.n	800396a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_TIM_Base_MspInit+0x2c>)
 8003960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_TIM_Base_MspInit+0x2c>)
 8003964:	2104      	movs	r1, #4
 8003966:	430a      	orrs	r2, r1
 8003968:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	b002      	add	sp, #8
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	40010800 	.word	0x40010800
 8003978:	40021000 	.word	0x40021000

0800397c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <MX_USART1_UART_Init+0x5c>)
 8003984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 8003988:	2296      	movs	r2, #150	; 0x96
 800398a:	0192      	lsls	r2, r2, #6
 800398c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 800399c:	2200      	movs	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;//;
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 80039a2:	220c      	movs	r2, #12
 80039a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	621a      	str	r2, [r3, #32]
  //huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
  //huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  //huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <MX_USART1_UART_Init+0x58>)
 80039c0:	0018      	movs	r0, r3
 80039c2:	f003 f837 	bl	8006a34 <HAL_UART_Init>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d001      	beq.n	80039ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80039ca:	f7ff fae9 	bl	8002fa0 <Error_Handler>
  }

}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	2000131c 	.word	0x2000131c
 80039d8:	40013800 	.word	0x40013800

080039dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <MX_USART2_UART_Init+0x5c>)
 80039e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 80039e8:	2296      	movs	r2, #150	; 0x96
 80039ea:	0192      	lsls	r2, r2, #6
 80039ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 8003a02:	220c      	movs	r2, #12
 8003a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <MX_USART2_UART_Init+0x58>)
 8003a20:	0018      	movs	r0, r3
 8003a22:	f003 f807 	bl	8006a34 <HAL_UART_Init>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a2a:	f7ff fab9 	bl	8002fa0 <Error_Handler>
  }

}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000139c 	.word	0x2000139c
 8003a38:	40004400 	.word	0x40004400

08003a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	2314      	movs	r3, #20
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	0018      	movs	r0, r3
 8003a4a:	2314      	movs	r3, #20
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	2100      	movs	r1, #0
 8003a50:	f01b f808 	bl	801ea64 <memset>
  if(uartHandle->Instance==USART1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a38      	ldr	r2, [pc, #224]	; (8003b3c <HAL_UART_MspInit+0x100>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d133      	bne.n	8003ac6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a5e:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a62:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	01c9      	lsls	r1, r1, #7
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6c:	4b34      	ldr	r3, [pc, #208]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	430a      	orrs	r2, r1
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a78:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003a84:	2114      	movs	r1, #20
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	22c0      	movs	r2, #192	; 0xc0
 8003a8a:	00d2      	lsls	r2, r2, #3
 8003a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	2202      	movs	r2, #2
 8003a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa6:	187a      	adds	r2, r7, r1
 8003aa8:	23a0      	movs	r3, #160	; 0xa0
 8003aaa:	05db      	lsls	r3, r3, #23
 8003aac:	0011      	movs	r1, r2
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 fca8 	bl	8004404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	201b      	movs	r0, #27
 8003aba:	f000 fc19 	bl	80042f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003abe:	201b      	movs	r0, #27
 8003ac0:	f000 fc2b 	bl	800431a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ac4:	e036      	b.n	8003b34 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <HAL_UART_MspInit+0x108>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d131      	bne.n	8003b34 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	0289      	lsls	r1, r1, #10
 8003ada:	430a      	orrs	r2, r1
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <HAL_UART_MspInit+0x104>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	2201      	movs	r2, #1
 8003af0:	4013      	ands	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003af6:	2114      	movs	r1, #20
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	220c      	movs	r2, #12
 8003afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2202      	movs	r2, #2
 8003b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_NOPULL
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	2201      	movs	r2, #1
 8003b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	2204      	movs	r2, #4
 8003b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	187a      	adds	r2, r7, r1
 8003b18:	23a0      	movs	r3, #160	; 0xa0
 8003b1a:	05db      	lsls	r3, r3, #23
 8003b1c:	0011      	movs	r1, r2
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 fc70 	bl	8004404 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b24:	2200      	movs	r2, #0
 8003b26:	2100      	movs	r1, #0
 8003b28:	201c      	movs	r0, #28
 8003b2a:	f000 fbe1 	bl	80042f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b2e:	201c      	movs	r0, #28
 8003b30:	f000 fbf3 	bl	800431a <HAL_NVIC_EnableIRQ>
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b00a      	add	sp, #40	; 0x28
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40013800 	.word	0x40013800
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40004400 	.word	0x40004400

08003b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b48:	480d      	ldr	r0, [pc, #52]	; (8003b80 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003b4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b4e:	e003      	b.n	8003b58 <LoopCopyDataInit>

08003b50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003b52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b56:	3104      	adds	r1, #4

08003b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b58:	480b      	ldr	r0, [pc, #44]	; (8003b88 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <LoopForever+0xe>)
  adds  r2, r0, r1
 8003b5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b60:	d3f6      	bcc.n	8003b50 <CopyDataInit>
  ldr  r2, =_sbss
 8003b62:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003b64:	e002      	b.n	8003b6c <LoopFillZerobss>

08003b66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003b66:	2300      	movs	r3, #0
  str  r3, [r2]
 8003b68:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b6a:	3204      	adds	r2, #4

08003b6c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <LoopForever+0x16>)
  cmp  r2, r3
 8003b6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b70:	d3f9      	bcc.n	8003b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b72:	f7ff fead 	bl	80038d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b76:	f01a ff35 	bl	801e9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b7a:	f7ff f967 	bl	8002e4c <main>

08003b7e <LoopForever>:

LoopForever:
    b LoopForever
 8003b7e:	e7fe      	b.n	8003b7e <LoopForever>
   ldr   r0, =_estack
 8003b80:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003b84:	08021350 	.word	0x08021350
  ldr  r0, =_sdata
 8003b88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b8c:	20000118 	.word	0x20000118
  ldr  r2, =_sbss
 8003b90:	20000118 	.word	0x20000118
  ldr  r3, = _ebss
 8003b94:	2000162c 	.word	0x2000162c

08003b98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b98:	e7fe      	b.n	8003b98 <ADC1_COMP_IRQHandler>
	...

08003b9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_Init+0x3c>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_Init+0x3c>)
 8003bae:	2140      	movs	r1, #64	; 0x40
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f000 f811 	bl	8003bdc <HAL_InitTick>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e001      	b.n	8003bca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bc6:	f7ff fd93 	bl	80036f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bca:	1dfb      	adds	r3, r7, #7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	40022000 	.word	0x40022000

08003bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_InitTick+0x5c>)
 8003be6:	681c      	ldr	r4, [r3, #0]
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_InitTick+0x60>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	0019      	movs	r1, r3
 8003bee:	23fa      	movs	r3, #250	; 0xfa
 8003bf0:	0098      	lsls	r0, r3, #2
 8003bf2:	f7fc fa91 	bl	8000118 <__udivsi3>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	0020      	movs	r0, r4
 8003bfc:	f7fc fa8c 	bl	8000118 <__udivsi3>
 8003c00:	0003      	movs	r3, r0
 8003c02:	0018      	movs	r0, r3
 8003c04:	f000 fba9 	bl	800435a <HAL_SYSTICK_Config>
 8003c08:	1e03      	subs	r3, r0, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e00f      	b.n	8003c30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d80b      	bhi.n	8003c2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	2301      	movs	r3, #1
 8003c1a:	425b      	negs	r3, r3
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 fb66 	bl	80042f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_InitTick+0x64>)
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b003      	add	sp, #12
 8003c36:	bd90      	pop	{r4, r7, pc}
 8003c38:	20000058 	.word	0x20000058
 8003c3c:	20000060 	.word	0x20000060
 8003c40:	2000005c 	.word	0x2000005c

08003c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  return uwTick;
 8003c48:	4b02      	ldr	r3, [pc, #8]	; (8003c54 <HAL_GetTick+0x10>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	2000141c 	.word	0x2000141c

08003c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c60:	f7ff fff0 	bl	8003c44 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	d005      	beq.n	8003c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_Delay+0x40>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	001a      	movs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	f7ff ffe0 	bl	8003c44 <HAL_GetTick>
 8003c84:	0002      	movs	r2, r0
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d8f7      	bhi.n	8003c80 <HAL_Delay+0x28>
  {
  }
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b004      	add	sp, #16
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000060 	.word	0x20000060

08003c9c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <HAL_SuspendTick+0x18>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_SuspendTick+0x18>)
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	438a      	bics	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	e000e010 	.word	0xe000e010

08003cb8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <HAL_ResumeTick+0x18>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_ResumeTick+0x18>)
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	e000e010 	.word	0xe000e010

08003cd4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003cde:	2102      	movs	r1, #2
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	40015800 	.word	0x40015800

08003cf0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e159      	b.n	8003fb6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2250      	movs	r2, #80	; 0x50
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7fe fe5a 	bl	80029d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	2210      	movs	r2, #16
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d005      	beq.n	8003d38 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2204      	movs	r2, #4
 8003d34:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003d36:	d00b      	beq.n	8003d50 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2250      	movs	r2, #80	; 0x50
 8003d48:	2100      	movs	r1, #0
 8003d4a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e132      	b.n	8003fb6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	4a9a      	ldr	r2, [pc, #616]	; (8003fc0 <HAL_ADC_Init+0x2d0>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	2202      	movs	r2, #2
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2203      	movs	r2, #3
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d108      	bne.n	8003d80 <HAL_ADC_Init+0x90>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_ADC_Init+0x90>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_ADC_Init+0x92>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d149      	bne.n	8003e1a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	23c0      	movs	r3, #192	; 0xc0
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d00b      	beq.n	8003daa <HAL_ADC_Init+0xba>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	05db      	lsls	r3, r3, #23
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d005      	beq.n	8003daa <HAL_ADC_Init+0xba>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d111      	bne.n	8003dce <HAL_ADC_Init+0xde>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	0892      	lsrs	r2, r2, #2
 8003db8:	611a      	str	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6919      	ldr	r1, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	611a      	str	r2, [r3, #16]
 8003dcc:	e014      	b.n	8003df8 <HAL_ADC_Init+0x108>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0092      	lsls	r2, r2, #2
 8003dda:	0892      	lsrs	r2, r2, #2
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	4b79      	ldr	r3, [pc, #484]	; (8003fc4 <HAL_ADC_Init+0x2d4>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <HAL_ADC_Init+0x2d4>)
 8003de4:	4978      	ldr	r1, [pc, #480]	; (8003fc8 <HAL_ADC_Init+0x2d8>)
 8003de6:	400a      	ands	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_ADC_Init+0x2d4>)
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	4b74      	ldr	r3, [pc, #464]	; (8003fc4 <HAL_ADC_Init+0x2d4>)
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2118      	movs	r1, #24
 8003e04:	438a      	bics	r2, r1
 8003e06:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68d9      	ldr	r1, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003e1a:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <HAL_ADC_Init+0x2d4>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b69      	ldr	r3, [pc, #420]	; (8003fc4 <HAL_ADC_Init+0x2d4>)
 8003e20:	496a      	ldr	r1, [pc, #424]	; (8003fcc <HAL_ADC_Init+0x2dc>)
 8003e22:	400a      	ands	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003e26:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <HAL_ADC_Init+0x2d4>)
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	065a      	lsls	r2, r3, #25
 8003e30:	4b64      	ldr	r3, [pc, #400]	; (8003fc4 <HAL_ADC_Init+0x2d4>)
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	055b      	lsls	r3, r3, #21
 8003e40:	4013      	ands	r3, r2
 8003e42:	d108      	bne.n	8003e56 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	0549      	lsls	r1, r1, #21
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	495b      	ldr	r1, [pc, #364]	; (8003fd0 <HAL_ADC_Init+0x2e0>)
 8003e62:	400a      	ands	r2, r1
 8003e64:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d101      	bne.n	8003e7c <HAL_ADC_Init+0x18c>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e000      	b.n	8003e7e <HAL_ADC_Init+0x18e>
 8003e7c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e7e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2020      	movs	r0, #32
 8003e84:	5c1b      	ldrb	r3, [r3, r0]
 8003e86:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003e88:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	202c      	movs	r0, #44	; 0x2c
 8003e8e:	5c1b      	ldrb	r3, [r3, r0]
 8003e90:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e92:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e98:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003ea0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003ea8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb6:	23c2      	movs	r3, #194	; 0xc2
 8003eb8:	33ff      	adds	r3, #255	; 0xff
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68d9      	ldr	r1, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2221      	movs	r2, #33	; 0x21
 8003eda:	5c9b      	ldrb	r3, [r3, r2]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d11a      	bne.n	8003f16 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	5c9b      	ldrb	r3, [r3, r2]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2180      	movs	r1, #128	; 0x80
 8003ef6:	0249      	lsls	r1, r1, #9
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	e00b      	b.n	8003f16 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	2220      	movs	r2, #32
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	2201      	movs	r2, #1
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d11f      	bne.n	8003f5e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	492a      	ldr	r1, [pc, #168]	; (8003fd4 <HAL_ADC_Init+0x2e4>)
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6919      	ldr	r1, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f3c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003f42:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2101      	movs	r1, #1
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	611a      	str	r2, [r3, #16]
 8003f5c:	e00e      	b.n	8003f7c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d107      	bne.n	8003f7c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	438a      	bics	r2, r1
 8003f7a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2107      	movs	r1, #7
 8003f88:	438a      	bics	r2, r1
 8003f8a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6959      	ldr	r1, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4393      	bics	r3, r2
 8003fac:	2201      	movs	r2, #1
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	fffffefd 	.word	0xfffffefd
 8003fc4:	40012708 	.word	0x40012708
 8003fc8:	ffc3ffff 	.word	0xffc3ffff
 8003fcc:	fdffffff 	.word	0xfdffffff
 8003fd0:	fffe0219 	.word	0xfffe0219
 8003fd4:	fffffc03 	.word	0xfffffc03

08003fd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2250      	movs	r2, #80	; 0x50
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x18>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e06c      	b.n	80040ca <HAL_ADC_ConfigChannel+0xf2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2250      	movs	r2, #80	; 0x50
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2204      	movs	r2, #4
 8004000:	4013      	ands	r3, r2
 8004002:	d00b      	beq.n	800401c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	2220      	movs	r2, #32
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2250      	movs	r2, #80	; 0x50
 8004014:	2100      	movs	r1, #0
 8004016:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e056      	b.n	80040ca <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <HAL_ADC_ConfigChannel+0xfc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d028      	beq.n	8004078 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	035b      	lsls	r3, r3, #13
 8004032:	0b5a      	lsrs	r2, r3, #13
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	02db      	lsls	r3, r3, #11
 8004044:	4013      	ands	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <HAL_ADC_ConfigChannel+0x100>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <HAL_ADC_ConfigChannel+0x100>)
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	0409      	lsls	r1, r1, #16
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004056:	200a      	movs	r0, #10
 8004058:	f000 f844 	bl	80040e4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	029b      	lsls	r3, r3, #10
 8004064:	4013      	ands	r3, r2
 8004066:	d02b      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <HAL_ADC_ConfigChannel+0x100>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <HAL_ADC_ConfigChannel+0x100>)
 800406e:	2180      	movs	r1, #128	; 0x80
 8004070:	03c9      	lsls	r1, r1, #15
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e023      	b.n	80040c0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	035b      	lsls	r3, r3, #13
 8004084:	0b5b      	lsrs	r3, r3, #13
 8004086:	43d9      	mvns	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	400a      	ands	r2, r1
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	02db      	lsls	r3, r3, #11
 8004098:	4013      	ands	r3, r2
 800409a:	d005      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_ADC_ConfigChannel+0x100>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <HAL_ADC_ConfigChannel+0x100>)
 80040a2:	490e      	ldr	r1, [pc, #56]	; (80040dc <HAL_ADC_ConfigChannel+0x104>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	029b      	lsls	r3, r3, #10
 80040b0:	4013      	ands	r3, r2
 80040b2:	d005      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_ADC_ConfigChannel+0x100>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <HAL_ADC_ConfigChannel+0x100>)
 80040ba:	4909      	ldr	r1, [pc, #36]	; (80040e0 <HAL_ADC_ConfigChannel+0x108>)
 80040bc:	400a      	ands	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2250      	movs	r2, #80	; 0x50
 80040c4:	2100      	movs	r1, #0
 80040c6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b002      	add	sp, #8
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	00001001 	.word	0x00001001
 80040d8:	40012708 	.word	0x40012708
 80040dc:	ff7fffff 	.word	0xff7fffff
 80040e0:	ffbfffff 	.word	0xffbfffff

080040e4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <ADC_DelayMicroSecond+0x34>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	490a      	ldr	r1, [pc, #40]	; (800411c <ADC_DelayMicroSecond+0x38>)
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7fc f810 	bl	8000118 <__udivsi3>
 80040f8:	0003      	movs	r3, r0
 80040fa:	001a      	movs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4353      	muls	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004102:	e002      	b.n	800410a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b01      	subs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f9      	bne.n	8004104 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b004      	add	sp, #16
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000058 	.word	0x20000058
 800411c:	000f4240 	.word	0x000f4240

08004120 <HAL_ADCEx_EnableVREFINT>:
  *         For more details on procedure and buffer current consumption, refer to device reference manual.
  * @note   This is functional only if the LOCK is not set.
  * @retval None
*/
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
  
  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_ADCEx_EnableVREFINT+0x4c>)
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	0049      	lsls	r1, r1, #1
 8004134:	430a      	orrs	r2, r1
 8004136:	621a      	str	r2, [r3, #32]
  
  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004138:	f7ff fd84 	bl	8003c44 <HAL_GetTick>
 800413c:	0003      	movs	r3, r0
 800413e:	607b      	str	r3, [r7, #4]
  
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8004140:	e008      	b.n	8004154 <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 8004142:	f7ff fd7f 	bl	8003c44 <HAL_GetTick>
 8004146:	0002      	movs	r2, r0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b03      	cmp	r3, #3
 800414e:	d901      	bls.n	8004154 <HAL_ADCEx_EnableVREFINT+0x34>
    { 
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e006      	b.n	8004162 <HAL_ADCEx_EnableVREFINT+0x42>
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	05db      	lsls	r3, r3, #23
 800415c:	4013      	ands	r3, r2
 800415e:	d0f0      	beq.n	8004142 <HAL_ADCEx_EnableVREFINT+0x22>
    }
  }
  
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	0018      	movs	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	b002      	add	sp, #8
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	40010000 	.word	0x40010000

08004170 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	0002      	movs	r2, r0
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800417c:	1dfb      	adds	r3, r7, #7
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	001a      	movs	r2, r3
 8004182:	231f      	movs	r3, #31
 8004184:	401a      	ands	r2, r3
 8004186:	4b04      	ldr	r3, [pc, #16]	; (8004198 <NVIC_EnableIRQ+0x28>)
 8004188:	2101      	movs	r1, #1
 800418a:	4091      	lsls	r1, r2
 800418c:	000a      	movs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b002      	add	sp, #8
 8004196:	bd80      	pop	{r7, pc}
 8004198:	e000e100 	.word	0xe000e100

0800419c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	0002      	movs	r2, r0
 80041a4:	1dfb      	adds	r3, r7, #7
 80041a6:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	001a      	movs	r2, r3
 80041ae:	231f      	movs	r3, #31
 80041b0:	4013      	ands	r3, r2
 80041b2:	4905      	ldr	r1, [pc, #20]	; (80041c8 <NVIC_DisableIRQ+0x2c>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	409a      	lsls	r2, r3
 80041b8:	0013      	movs	r3, r2
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	508b      	str	r3, [r1, r2]
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b002      	add	sp, #8
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	e000e100 	.word	0xe000e100

080041cc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	0002      	movs	r2, r0
 80041d4:	6039      	str	r1, [r7, #0]
 80041d6:	1dfb      	adds	r3, r7, #7
 80041d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80041da:	1dfb      	adds	r3, r7, #7
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b7f      	cmp	r3, #127	; 0x7f
 80041e0:	d932      	bls.n	8004248 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041e2:	4a2f      	ldr	r2, [pc, #188]	; (80042a0 <NVIC_SetPriority+0xd4>)
 80041e4:	1dfb      	adds	r3, r7, #7
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	0019      	movs	r1, r3
 80041ea:	230f      	movs	r3, #15
 80041ec:	400b      	ands	r3, r1
 80041ee:	3b08      	subs	r3, #8
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	3306      	adds	r3, #6
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	3304      	adds	r3, #4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	1dfa      	adds	r2, r7, #7
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	0011      	movs	r1, r2
 8004202:	2203      	movs	r2, #3
 8004204:	400a      	ands	r2, r1
 8004206:	00d2      	lsls	r2, r2, #3
 8004208:	21ff      	movs	r1, #255	; 0xff
 800420a:	4091      	lsls	r1, r2
 800420c:	000a      	movs	r2, r1
 800420e:	43d2      	mvns	r2, r2
 8004210:	401a      	ands	r2, r3
 8004212:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	019b      	lsls	r3, r3, #6
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	401a      	ands	r2, r3
 800421c:	1dfb      	adds	r3, r7, #7
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	0018      	movs	r0, r3
 8004222:	2303      	movs	r3, #3
 8004224:	4003      	ands	r3, r0
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800422a:	481d      	ldr	r0, [pc, #116]	; (80042a0 <NVIC_SetPriority+0xd4>)
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	001c      	movs	r4, r3
 8004232:	230f      	movs	r3, #15
 8004234:	4023      	ands	r3, r4
 8004236:	3b08      	subs	r3, #8
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	430a      	orrs	r2, r1
 800423c:	3306      	adds	r3, #6
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	18c3      	adds	r3, r0, r3
 8004242:	3304      	adds	r3, #4
 8004244:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004246:	e027      	b.n	8004298 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004248:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <NVIC_SetPriority+0xd8>)
 800424a:	1dfb      	adds	r3, r7, #7
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b25b      	sxtb	r3, r3
 8004250:	089b      	lsrs	r3, r3, #2
 8004252:	33c0      	adds	r3, #192	; 0xc0
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	589b      	ldr	r3, [r3, r2]
 8004258:	1dfa      	adds	r2, r7, #7
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	0011      	movs	r1, r2
 800425e:	2203      	movs	r2, #3
 8004260:	400a      	ands	r2, r1
 8004262:	00d2      	lsls	r2, r2, #3
 8004264:	21ff      	movs	r1, #255	; 0xff
 8004266:	4091      	lsls	r1, r2
 8004268:	000a      	movs	r2, r1
 800426a:	43d2      	mvns	r2, r2
 800426c:	401a      	ands	r2, r3
 800426e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	019b      	lsls	r3, r3, #6
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	401a      	ands	r2, r3
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	0018      	movs	r0, r3
 800427e:	2303      	movs	r3, #3
 8004280:	4003      	ands	r3, r0
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004286:	4807      	ldr	r0, [pc, #28]	; (80042a4 <NVIC_SetPriority+0xd8>)
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b25b      	sxtb	r3, r3
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	430a      	orrs	r2, r1
 8004292:	33c0      	adds	r3, #192	; 0xc0
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	501a      	str	r2, [r3, r0]
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	b003      	add	sp, #12
 800429e:	bd90      	pop	{r4, r7, pc}
 80042a0:	e000ed00 	.word	0xe000ed00
 80042a4:	e000e100 	.word	0xe000e100

080042a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <SysTick_Config+0x40>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ba:	2301      	movs	r3, #1
 80042bc:	e010      	b.n	80042e0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <SysTick_Config+0x44>)
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	3a01      	subs	r2, #1
 80042c4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c6:	2301      	movs	r3, #1
 80042c8:	425b      	negs	r3, r3
 80042ca:	2103      	movs	r1, #3
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7ff ff7d 	bl	80041cc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <SysTick_Config+0x44>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <SysTick_Config+0x44>)
 80042da:	2207      	movs	r2, #7
 80042dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042de:	2300      	movs	r3, #0
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b002      	add	sp, #8
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	00ffffff 	.word	0x00ffffff
 80042ec:	e000e010 	.word	0xe000e010

080042f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	210f      	movs	r1, #15
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	1c02      	adds	r2, r0, #0
 8004300:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	187b      	adds	r3, r7, r1
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b25b      	sxtb	r3, r3
 800430a:	0011      	movs	r1, r2
 800430c:	0018      	movs	r0, r3
 800430e:	f7ff ff5d 	bl	80041cc <NVIC_SetPriority>
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b004      	add	sp, #16
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	0002      	movs	r2, r0
 8004322:	1dfb      	adds	r3, r7, #7
 8004324:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004326:	1dfb      	adds	r3, r7, #7
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b25b      	sxtb	r3, r3
 800432c:	0018      	movs	r0, r3
 800432e:	f7ff ff1f 	bl	8004170 <NVIC_EnableIRQ>
}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	b002      	add	sp, #8
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	0002      	movs	r2, r0
 8004342:	1dfb      	adds	r3, r7, #7
 8004344:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004346:	1dfb      	adds	r3, r7, #7
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b25b      	sxtb	r3, r3
 800434c:	0018      	movs	r0, r3
 800434e:	f7ff ff25 	bl	800419c <NVIC_DisableIRQ>
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff ff9f 	bl	80042a8 <SysTick_Config>
 800436a:	0003      	movs	r3, r0
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800437c:	230f      	movs	r3, #15
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2225      	movs	r2, #37	; 0x25
 8004388:	5c9b      	ldrb	r3, [r3, r2]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d007      	beq.n	80043a0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2204      	movs	r2, #4
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004396:	230f      	movs	r3, #15
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e02a      	b.n	80043f6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	210e      	movs	r1, #14
 80043ac:	438a      	bics	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2101      	movs	r1, #1
 80043bc:	438a      	bics	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	221c      	movs	r2, #28
 80043c6:	401a      	ands	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2101      	movs	r1, #1
 80043ce:	4091      	lsls	r1, r2
 80043d0:	000a      	movs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2225      	movs	r2, #37	; 0x25
 80043d8:	2101      	movs	r1, #1
 80043da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	2100      	movs	r1, #0
 80043e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	0010      	movs	r0, r2
 80043f4:	4798      	blx	r3
    }
  }
  return status;
 80043f6:	230f      	movs	r3, #15
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	781b      	ldrb	r3, [r3, #0]
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	b004      	add	sp, #16
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800441a:	e155      	b.n	80046c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2101      	movs	r1, #1
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4091      	lsls	r1, r2
 8004426:	000a      	movs	r2, r1
 8004428:	4013      	ands	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d100      	bne.n	8004434 <HAL_GPIO_Init+0x30>
 8004432:	e146      	b.n	80046c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d00b      	beq.n	8004454 <HAL_GPIO_Init+0x50>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d007      	beq.n	8004454 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004448:	2b11      	cmp	r3, #17
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b12      	cmp	r3, #18
 8004452:	d130      	bne.n	80044b6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2203      	movs	r2, #3
 8004460:	409a      	lsls	r2, r3
 8004462:	0013      	movs	r3, r2
 8004464:	43da      	mvns	r2, r3
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	409a      	lsls	r2, r3
 8004476:	0013      	movs	r3, r2
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800448a:	2201      	movs	r2, #1
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	409a      	lsls	r2, r3
 8004490:	0013      	movs	r3, r2
 8004492:	43da      	mvns	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	2201      	movs	r2, #1
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
 80044a8:	0013      	movs	r3, r2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	2203      	movs	r2, #3
 80044c2:	409a      	lsls	r2, r3
 80044c4:	0013      	movs	r3, r2
 80044c6:	43da      	mvns	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4013      	ands	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	409a      	lsls	r2, r3
 80044d8:	0013      	movs	r3, r2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0xf2>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b12      	cmp	r3, #18
 80044f4:	d123      	bne.n	800453e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	08da      	lsrs	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3208      	adds	r2, #8
 80044fe:	0092      	lsls	r2, r2, #2
 8004500:	58d3      	ldr	r3, [r2, r3]
 8004502:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2207      	movs	r2, #7
 8004508:	4013      	ands	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	220f      	movs	r2, #15
 800450e:	409a      	lsls	r2, r3
 8004510:	0013      	movs	r3, r2
 8004512:	43da      	mvns	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2107      	movs	r1, #7
 8004522:	400b      	ands	r3, r1
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	409a      	lsls	r2, r3
 8004528:	0013      	movs	r3, r2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	08da      	lsrs	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3208      	adds	r2, #8
 8004538:	0092      	lsls	r2, r2, #2
 800453a:	6939      	ldr	r1, [r7, #16]
 800453c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	2203      	movs	r2, #3
 800454a:	409a      	lsls	r2, r3
 800454c:	0013      	movs	r3, r2
 800454e:	43da      	mvns	r2, r3
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4013      	ands	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2203      	movs	r2, #3
 800455c:	401a      	ands	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	409a      	lsls	r2, r3
 8004564:	0013      	movs	r3, r2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	055b      	lsls	r3, r3, #21
 800457a:	4013      	ands	r3, r2
 800457c:	d100      	bne.n	8004580 <HAL_GPIO_Init+0x17c>
 800457e:	e0a0      	b.n	80046c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004580:	4b57      	ldr	r3, [pc, #348]	; (80046e0 <HAL_GPIO_Init+0x2dc>)
 8004582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004584:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <HAL_GPIO_Init+0x2dc>)
 8004586:	2101      	movs	r1, #1
 8004588:	430a      	orrs	r2, r1
 800458a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800458c:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <HAL_GPIO_Init+0x2e0>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	589b      	ldr	r3, [r3, r2]
 8004598:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2203      	movs	r2, #3
 800459e:	4013      	ands	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	220f      	movs	r2, #15
 80045a4:	409a      	lsls	r2, r3
 80045a6:	0013      	movs	r3, r2
 80045a8:	43da      	mvns	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	23a0      	movs	r3, #160	; 0xa0
 80045b4:	05db      	lsls	r3, r3, #23
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d01f      	beq.n	80045fa <HAL_GPIO_Init+0x1f6>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a4a      	ldr	r2, [pc, #296]	; (80046e8 <HAL_GPIO_Init+0x2e4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d019      	beq.n	80045f6 <HAL_GPIO_Init+0x1f2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a49      	ldr	r2, [pc, #292]	; (80046ec <HAL_GPIO_Init+0x2e8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <HAL_GPIO_Init+0x1ee>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a48      	ldr	r2, [pc, #288]	; (80046f0 <HAL_GPIO_Init+0x2ec>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00d      	beq.n	80045ee <HAL_GPIO_Init+0x1ea>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a47      	ldr	r2, [pc, #284]	; (80046f4 <HAL_GPIO_Init+0x2f0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <HAL_GPIO_Init+0x1e6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a46      	ldr	r2, [pc, #280]	; (80046f8 <HAL_GPIO_Init+0x2f4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_GPIO_Init+0x1e2>
 80045e2:	2305      	movs	r3, #5
 80045e4:	e00a      	b.n	80045fc <HAL_GPIO_Init+0x1f8>
 80045e6:	2306      	movs	r3, #6
 80045e8:	e008      	b.n	80045fc <HAL_GPIO_Init+0x1f8>
 80045ea:	2304      	movs	r3, #4
 80045ec:	e006      	b.n	80045fc <HAL_GPIO_Init+0x1f8>
 80045ee:	2303      	movs	r3, #3
 80045f0:	e004      	b.n	80045fc <HAL_GPIO_Init+0x1f8>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e002      	b.n	80045fc <HAL_GPIO_Init+0x1f8>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <HAL_GPIO_Init+0x1f8>
 80045fa:	2300      	movs	r3, #0
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	2103      	movs	r1, #3
 8004600:	400a      	ands	r2, r1
 8004602:	0092      	lsls	r2, r2, #2
 8004604:	4093      	lsls	r3, r2
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800460c:	4935      	ldr	r1, [pc, #212]	; (80046e4 <HAL_GPIO_Init+0x2e0>)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	3302      	adds	r3, #2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800461a:	4b38      	ldr	r3, [pc, #224]	; (80046fc <HAL_GPIO_Init+0x2f8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43da      	mvns	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	025b      	lsls	r3, r3, #9
 8004632:	4013      	ands	r3, r2
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800463e:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <HAL_GPIO_Init+0x2f8>)
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004644:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <HAL_GPIO_Init+0x2f8>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	43da      	mvns	r2, r3
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	4013      	ands	r3, r2
 800465e:	d003      	beq.n	8004668 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004668:	4b24      	ldr	r3, [pc, #144]	; (80046fc <HAL_GPIO_Init+0x2f8>)
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800466e:	4b23      	ldr	r3, [pc, #140]	; (80046fc <HAL_GPIO_Init+0x2f8>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	43da      	mvns	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	035b      	lsls	r3, r3, #13
 8004686:	4013      	ands	r3, r2
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <HAL_GPIO_Init+0x2f8>)
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004698:	4b18      	ldr	r3, [pc, #96]	; (80046fc <HAL_GPIO_Init+0x2f8>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	43da      	mvns	r2, r3
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	039b      	lsls	r3, r3, #14
 80046b0:	4013      	ands	r3, r2
 80046b2:	d003      	beq.n	80046bc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80046bc:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <HAL_GPIO_Init+0x2f8>)
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	3301      	adds	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	40da      	lsrs	r2, r3
 80046d0:	1e13      	subs	r3, r2, #0
 80046d2:	d000      	beq.n	80046d6 <HAL_GPIO_Init+0x2d2>
 80046d4:	e6a2      	b.n	800441c <HAL_GPIO_Init+0x18>
  }
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b006      	add	sp, #24
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40010000 	.word	0x40010000
 80046e8:	50000400 	.word	0x50000400
 80046ec:	50000800 	.word	0x50000800
 80046f0:	50000c00 	.word	0x50000c00
 80046f4:	50001000 	.word	0x50001000
 80046f8:	50001c00 	.word	0x50001c00
 80046fc:	40010400 	.word	0x40010400

08004700 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	0008      	movs	r0, r1
 800470a:	0011      	movs	r1, r2
 800470c:	1cbb      	adds	r3, r7, #2
 800470e:	1c02      	adds	r2, r0, #0
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	1c7b      	adds	r3, r7, #1
 8004714:	1c0a      	adds	r2, r1, #0
 8004716:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004718:	1c7b      	adds	r3, r7, #1
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004720:	1cbb      	adds	r3, r7, #2
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004728:	e003      	b.n	8004732 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800472a:	1cbb      	adds	r3, r7, #2
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	0002      	movs	r2, r0
 8004744:	1dbb      	adds	r3, r7, #6
 8004746:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	1dba      	adds	r2, r7, #6
 800474e:	8812      	ldrh	r2, [r2, #0]
 8004750:	4013      	ands	r3, r2
 8004752:	d008      	beq.n	8004766 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004756:	1dba      	adds	r2, r7, #6
 8004758:	8812      	ldrh	r2, [r2, #0]
 800475a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800475c:	1dbb      	adds	r3, r7, #6
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	0018      	movs	r0, r3
 8004762:	f019 f98f 	bl	801da84 <HAL_GPIO_EXTI_Callback>
  }
}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	b002      	add	sp, #8
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	40010400 	.word	0x40010400

08004774 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e06c      	b.n	8004860 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	222e      	movs	r2, #46	; 0x2e
 800478a:	5c9b      	ldrb	r3, [r3, r2]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	222d      	movs	r2, #45	; 0x2d
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f7fe ffbb 	bl	8003718 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	222e      	movs	r2, #46	; 0x2e
 80047a6:	2102      	movs	r1, #2
 80047a8:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d005      	beq.n	80047c6 <HAL_LPTIM_Init+0x52>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d103      	bne.n	80047ce <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	221e      	movs	r2, #30
 80047ca:	4393      	bics	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	4a25      	ldr	r2, [pc, #148]	; (8004868 <HAL_LPTIM_Init+0xf4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4a24      	ldr	r2, [pc, #144]	; (800486c <HAL_LPTIM_Init+0xf8>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a23      	ldr	r2, [pc, #140]	; (8004870 <HAL_LPTIM_Init+0xfc>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047f0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80047f6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80047fc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004802:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d005      	beq.n	800481e <HAL_LPTIM_Init+0xaa>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	429a      	cmp	r2, r3
 800481c:	d107      	bne.n	800482e <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004826:	4313      	orrs	r3, r2
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_LPTIM_Init+0xf4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00a      	beq.n	800484e <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004840:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004846:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	222e      	movs	r2, #46	; 0x2e
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	0018      	movs	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	b004      	add	sp, #16
 8004866:	bd80      	pop	{r7, pc}
 8004868:	0000ffff 	.word	0x0000ffff
 800486c:	ffff1f3f 	.word	0xffff1f3f
 8004870:	ff19f1f8 	.word	0xff19f1f8

08004874 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	222e      	movs	r2, #46	; 0x2e
 8004882:	2102      	movs	r1, #2
 8004884:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004886:	4b23      	ldr	r3, [pc, #140]	; (8004914 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b22      	ldr	r3, [pc, #136]	; (8004914 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	0589      	lsls	r1, r1, #22
 8004890:	430a      	orrs	r2, r1
 8004892:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d00d      	beq.n	80048b8 <HAL_LPTIM_Counter_Start_IT+0x44>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d107      	bne.n	80048b8 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4919      	ldr	r1, [pc, #100]	; (8004918 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2110      	movs	r1, #16
 80048c4:	430a      	orrs	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2102      	movs	r1, #2
 80048d4:	430a      	orrs	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2101      	movs	r1, #1
 80048e4:	430a      	orrs	r2, r1
 80048e6:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2104      	movs	r1, #4
 80048fc:	430a      	orrs	r2, r1
 80048fe:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	222e      	movs	r2, #46	; 0x2e
 8004904:	2101      	movs	r1, #1
 8004906:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b002      	add	sp, #8
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	40010400 	.word	0x40010400
 8004918:	fffff1ff 	.word	0xfffff1ff

0800491c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	0049      	lsls	r1, r1, #1
 800492a:	430a      	orrs	r2, r1
 800492c:	601a      	str	r2, [r3, #0]
}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40007000 	.word	0x40007000

08004938 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	000a      	movs	r2, r1
 8004942:	1cfb      	adds	r3, r7, #3
 8004944:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800494a:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_PWR_EnterSTOPMode+0x60>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2203      	movs	r2, #3
 8004954:	4393      	bics	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_PWR_EnterSTOPMode+0x60>)
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <HAL_PWR_EnterSTOPMode+0x64>)
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	4b0c      	ldr	r3, [pc, #48]	; (800499c <HAL_PWR_EnterSTOPMode+0x64>)
 800496c:	2104      	movs	r1, #4
 800496e:	430a      	orrs	r2, r1
 8004970:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004972:	1cfb      	adds	r3, r7, #3
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800497a:	bf30      	wfi
 800497c:	e002      	b.n	8004984 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800497e:	bf40      	sev
  __ASM volatile ("wfe");
 8004980:	bf20      	wfe
 8004982:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_PWR_EnterSTOPMode+0x64>)
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	4b04      	ldr	r3, [pc, #16]	; (800499c <HAL_PWR_EnterSTOPMode+0x64>)
 800498a:	2104      	movs	r1, #4
 800498c:	438a      	bics	r2, r1
 800498e:	611a      	str	r2, [r3, #16]

}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b004      	add	sp, #16
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40007000 	.word	0x40007000
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <HAL_PWREx_EnableFastWakeUp+0x18>)
 80049aa:	2180      	movs	r1, #128	; 0x80
 80049ac:	00c9      	lsls	r1, r1, #3
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40007000 	.word	0x40007000

080049bc <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80049c6:	2180      	movs	r1, #128	; 0x80
 80049c8:	0089      	lsls	r1, r1, #2
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40007000 	.word	0x40007000

080049d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d8:	b5b0      	push	{r4, r5, r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f000 fbbc 	bl	8005164 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ec:	4bc8      	ldr	r3, [pc, #800]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	220c      	movs	r2, #12
 80049f2:	4013      	ands	r3, r2
 80049f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f6:	4bc6      	ldr	r3, [pc, #792]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	025b      	lsls	r3, r3, #9
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2201      	movs	r2, #1
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d100      	bne.n	8004a0e <HAL_RCC_OscConfig+0x36>
 8004a0c:	e07e      	b.n	8004b0c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d007      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d112      	bne.n	8004a40 <HAL_RCC_OscConfig+0x68>
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	025b      	lsls	r3, r3, #9
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d10d      	bne.n	8004a40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4bba      	ldr	r3, [pc, #744]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	029b      	lsls	r3, r3, #10
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <HAL_RCC_OscConfig+0x5a>
 8004a30:	e06b      	b.n	8004b0a <HAL_RCC_OscConfig+0x132>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d167      	bne.n	8004b0a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f000 fb92 	bl	8005164 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x84>
 8004a4c:	4bb0      	ldr	r3, [pc, #704]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4baf      	ldr	r3, [pc, #700]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	0249      	lsls	r1, r1, #9
 8004a56:	430a      	orrs	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e027      	b.n	8004aac <HAL_RCC_OscConfig+0xd4>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	23a0      	movs	r3, #160	; 0xa0
 8004a62:	02db      	lsls	r3, r3, #11
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d10e      	bne.n	8004a86 <HAL_RCC_OscConfig+0xae>
 8004a68:	4ba9      	ldr	r3, [pc, #676]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4ba8      	ldr	r3, [pc, #672]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	02c9      	lsls	r1, r1, #11
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	4ba6      	ldr	r3, [pc, #664]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4ba5      	ldr	r3, [pc, #660]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	0249      	lsls	r1, r1, #9
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e012      	b.n	8004aac <HAL_RCC_OscConfig+0xd4>
 8004a86:	4ba2      	ldr	r3, [pc, #648]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4ba1      	ldr	r3, [pc, #644]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a8c:	49a1      	ldr	r1, [pc, #644]	; (8004d14 <HAL_RCC_OscConfig+0x33c>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	4b9f      	ldr	r3, [pc, #636]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	025b      	lsls	r3, r3, #9
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4b9b      	ldr	r3, [pc, #620]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b9a      	ldr	r3, [pc, #616]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004aa6:	499c      	ldr	r1, [pc, #624]	; (8004d18 <HAL_RCC_OscConfig+0x340>)
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7ff f8c6 	bl	8003c44 <HAL_GetTick>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004abc:	e009      	b.n	8004ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004abe:	f7ff f8c1 	bl	8003c44 <HAL_GetTick>
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b64      	cmp	r3, #100	; 0x64
 8004aca:	d902      	bls.n	8004ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	f000 fb49 	bl	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad2:	4b8f      	ldr	r3, [pc, #572]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	4013      	ands	r3, r2
 8004adc:	d0ef      	beq.n	8004abe <HAL_RCC_OscConfig+0xe6>
 8004ade:	e015      	b.n	8004b0c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7ff f8b0 	bl	8003c44 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aea:	f7ff f8ab 	bl	8003c44 <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b64      	cmp	r3, #100	; 0x64
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e333      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004afc:	4b84      	ldr	r3, [pc, #528]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	4013      	ands	r3, r2
 8004b06:	d1f0      	bne.n	8004aea <HAL_RCC_OscConfig+0x112>
 8004b08:	e000      	b.n	8004b0c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2202      	movs	r2, #2
 8004b12:	4013      	ands	r3, r2
 8004b14:	d100      	bne.n	8004b18 <HAL_RCC_OscConfig+0x140>
 8004b16:	e098      	b.n	8004c4a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	2220      	movs	r2, #32
 8004b22:	4013      	ands	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004b26:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b79      	ldr	r3, [pc, #484]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b2c:	2120      	movs	r1, #32
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	2220      	movs	r2, #32
 8004b36:	4393      	bics	r3, r2
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d13d      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x1ea>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d13a      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004b4c:	4b70      	ldr	r3, [pc, #448]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2204      	movs	r2, #4
 8004b52:	4013      	ands	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_RCC_OscConfig+0x188>
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e301      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b6b      	ldr	r3, [pc, #428]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a6d      	ldr	r2, [pc, #436]	; (8004d1c <HAL_RCC_OscConfig+0x344>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	021a      	lsls	r2, r3, #8
 8004b70:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004b76:	4b66      	ldr	r3, [pc, #408]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2209      	movs	r2, #9
 8004b7c:	4393      	bics	r3, r2
 8004b7e:	0019      	movs	r1, r3
 8004b80:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b88:	f000 fc20 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 8004b8c:	0001      	movs	r1, r0
 8004b8e:	4b60      	ldr	r3, [pc, #384]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	220f      	movs	r2, #15
 8004b96:	4013      	ands	r3, r2
 8004b98:	4a61      	ldr	r2, [pc, #388]	; (8004d20 <HAL_RCC_OscConfig+0x348>)
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	000a      	movs	r2, r1
 8004b9e:	40da      	lsrs	r2, r3
 8004ba0:	4b60      	ldr	r3, [pc, #384]	; (8004d24 <HAL_RCC_OscConfig+0x34c>)
 8004ba2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004ba4:	2513      	movs	r5, #19
 8004ba6:	197c      	adds	r4, r7, r5
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7ff f817 	bl	8003bdc <HAL_InitTick>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004bb2:	197b      	adds	r3, r7, r5
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d047      	beq.n	8004c4a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004bba:	2313      	movs	r3, #19
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	e2d0      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d027      	beq.n	8004c18 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004bc8:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2209      	movs	r2, #9
 8004bce:	4393      	bics	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	4b4f      	ldr	r3, [pc, #316]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7ff f833 	bl	8003c44 <HAL_GetTick>
 8004bde:	0003      	movs	r3, r0
 8004be0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be4:	f7ff f82e 	bl	8003c44 <HAL_GetTick>
 8004be8:	0002      	movs	r2, r0
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e2b6      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d0f1      	beq.n	8004be4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c00:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a45      	ldr	r2, [pc, #276]	; (8004d1c <HAL_RCC_OscConfig+0x344>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	021a      	lsls	r2, r3, #8
 8004c10:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	e018      	b.n	8004c4a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c18:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c1e:	2101      	movs	r1, #1
 8004c20:	438a      	bics	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7ff f80e 	bl	8003c44 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2e:	f7ff f809 	bl	8003c44 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e291      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c40:	4b33      	ldr	r3, [pc, #204]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2204      	movs	r2, #4
 8004c46:	4013      	ands	r3, r2
 8004c48:	d1f1      	bne.n	8004c2e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	4013      	ands	r3, r2
 8004c52:	d100      	bne.n	8004c56 <HAL_RCC_OscConfig+0x27e>
 8004c54:	e09f      	b.n	8004d96 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d13f      	bne.n	8004cdc <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_OscConfig+0x29c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e277      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c74:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a2b      	ldr	r2, [pc, #172]	; (8004d28 <HAL_RCC_OscConfig+0x350>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	0a19      	lsrs	r1, r3, #8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	061a      	lsls	r2, r3, #24
 8004c96:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	0b5b      	lsrs	r3, r3, #13
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	0212      	lsls	r2, r2, #8
 8004ca8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004caa:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	210f      	movs	r1, #15
 8004cb2:	400b      	ands	r3, r1
 8004cb4:	491a      	ldr	r1, [pc, #104]	; (8004d20 <HAL_RCC_OscConfig+0x348>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <HAL_RCC_OscConfig+0x34c>)
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004cbe:	2513      	movs	r5, #19
 8004cc0:	197c      	adds	r4, r7, r5
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fe ff8a 	bl	8003bdc <HAL_InitTick>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004ccc:	197b      	adds	r3, r7, r5
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d060      	beq.n	8004d96 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004cd4:	2313      	movs	r3, #19
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	e243      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d03e      	beq.n	8004d62 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_RCC_OscConfig+0x338>)
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	0049      	lsls	r1, r1, #1
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fe ffa7 	bl	8003c44 <HAL_GetTick>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cfa:	e017      	b.n	8004d2c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cfc:	f7fe ffa2 	bl	8003c44 <HAL_GetTick>
 8004d00:	0002      	movs	r2, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d910      	bls.n	8004d2c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e22a      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	40021000 	.word	0x40021000
 8004d14:	fffeffff 	.word	0xfffeffff
 8004d18:	fffbffff 	.word	0xfffbffff
 8004d1c:	ffffe0ff 	.word	0xffffe0ff
 8004d20:	080202a8 	.word	0x080202a8
 8004d24:	20000058 	.word	0x20000058
 8004d28:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d2c:	4bc6      	ldr	r3, [pc, #792]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4013      	ands	r3, r2
 8004d36:	d0e1      	beq.n	8004cfc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d38:	4bc3      	ldr	r3, [pc, #780]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4ac3      	ldr	r2, [pc, #780]	; (800504c <HAL_RCC_OscConfig+0x674>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	0019      	movs	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d46:	4bc0      	ldr	r3, [pc, #768]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d4c:	4bbe      	ldr	r3, [pc, #760]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	0a19      	lsrs	r1, r3, #8
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	061a      	lsls	r2, r3, #24
 8004d5a:	4bbb      	ldr	r3, [pc, #748]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	e019      	b.n	8004d96 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d62:	4bb9      	ldr	r3, [pc, #740]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4bb8      	ldr	r3, [pc, #736]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004d68:	49b9      	ldr	r1, [pc, #740]	; (8005050 <HAL_RCC_OscConfig+0x678>)
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6e:	f7fe ff69 	bl	8003c44 <HAL_GetTick>
 8004d72:	0003      	movs	r3, r0
 8004d74:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d78:	f7fe ff64 	bl	8003c44 <HAL_GetTick>
 8004d7c:	0002      	movs	r2, r0
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e1ec      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d8a:	4baf      	ldr	r3, [pc, #700]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4013      	ands	r3, r2
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d036      	beq.n	8004e0e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d019      	beq.n	8004ddc <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004da8:	4ba7      	ldr	r3, [pc, #668]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004daa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dac:	4ba6      	ldr	r3, [pc, #664]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004dae:	2101      	movs	r1, #1
 8004db0:	430a      	orrs	r2, r1
 8004db2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db4:	f7fe ff46 	bl	8003c44 <HAL_GetTick>
 8004db8:	0003      	movs	r3, r0
 8004dba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbe:	f7fe ff41 	bl	8003c44 <HAL_GetTick>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e1c9      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dd0:	4b9d      	ldr	r3, [pc, #628]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d0f1      	beq.n	8004dbe <HAL_RCC_OscConfig+0x3e6>
 8004dda:	e018      	b.n	8004e0e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ddc:	4b9a      	ldr	r3, [pc, #616]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004de0:	4b99      	ldr	r3, [pc, #612]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004de2:	2101      	movs	r1, #1
 8004de4:	438a      	bics	r2, r1
 8004de6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de8:	f7fe ff2c 	bl	8003c44 <HAL_GetTick>
 8004dec:	0003      	movs	r3, r0
 8004dee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df2:	f7fe ff27 	bl	8003c44 <HAL_GetTick>
 8004df6:	0002      	movs	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e1af      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e04:	4b90      	ldr	r3, [pc, #576]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e08:	2202      	movs	r2, #2
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d1f1      	bne.n	8004df2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2204      	movs	r2, #4
 8004e14:	4013      	ands	r3, r2
 8004e16:	d100      	bne.n	8004e1a <HAL_RCC_OscConfig+0x442>
 8004e18:	e0af      	b.n	8004f7a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1a:	2323      	movs	r3, #35	; 0x23
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e22:	4b89      	ldr	r3, [pc, #548]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	055b      	lsls	r3, r3, #21
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d10a      	bne.n	8004e44 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2e:	4b86      	ldr	r3, [pc, #536]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e32:	4b85      	ldr	r3, [pc, #532]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004e34:	2180      	movs	r1, #128	; 0x80
 8004e36:	0549      	lsls	r1, r1, #21
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004e3c:	2323      	movs	r3, #35	; 0x23
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	2201      	movs	r2, #1
 8004e42:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	4b83      	ldr	r3, [pc, #524]	; (8005054 <HAL_RCC_OscConfig+0x67c>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d11a      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e50:	4b80      	ldr	r3, [pc, #512]	; (8005054 <HAL_RCC_OscConfig+0x67c>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b7f      	ldr	r3, [pc, #508]	; (8005054 <HAL_RCC_OscConfig+0x67c>)
 8004e56:	2180      	movs	r1, #128	; 0x80
 8004e58:	0049      	lsls	r1, r1, #1
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5e:	f7fe fef1 	bl	8003c44 <HAL_GetTick>
 8004e62:	0003      	movs	r3, r0
 8004e64:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7fe feec 	bl	8003c44 <HAL_GetTick>
 8004e6c:	0002      	movs	r2, r0
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	; 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e174      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7a:	4b76      	ldr	r3, [pc, #472]	; (8005054 <HAL_RCC_OscConfig+0x67c>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4013      	ands	r3, r2
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x4ca>
 8004e92:	4b6d      	ldr	r3, [pc, #436]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e96:	4b6c      	ldr	r3, [pc, #432]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	0049      	lsls	r1, r1, #1
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	651a      	str	r2, [r3, #80]	; 0x50
 8004ea0:	e031      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4ec>
 8004eaa:	4b67      	ldr	r3, [pc, #412]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eae:	4b66      	ldr	r3, [pc, #408]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004eb0:	4967      	ldr	r1, [pc, #412]	; (8005050 <HAL_RCC_OscConfig+0x678>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	651a      	str	r2, [r3, #80]	; 0x50
 8004eb6:	4b64      	ldr	r3, [pc, #400]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eba:	4b63      	ldr	r3, [pc, #396]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004ebc:	4966      	ldr	r1, [pc, #408]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ec2:	e020      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	23a0      	movs	r3, #160	; 0xa0
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d10e      	bne.n	8004eee <HAL_RCC_OscConfig+0x516>
 8004ed0:	4b5d      	ldr	r3, [pc, #372]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004ed2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ed4:	4b5c      	ldr	r3, [pc, #368]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	00c9      	lsls	r1, r1, #3
 8004eda:	430a      	orrs	r2, r1
 8004edc:	651a      	str	r2, [r3, #80]	; 0x50
 8004ede:	4b5a      	ldr	r3, [pc, #360]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee2:	4b59      	ldr	r3, [pc, #356]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	0049      	lsls	r1, r1, #1
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	651a      	str	r2, [r3, #80]	; 0x50
 8004eec:	e00b      	b.n	8004f06 <HAL_RCC_OscConfig+0x52e>
 8004eee:	4b56      	ldr	r3, [pc, #344]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ef2:	4b55      	ldr	r3, [pc, #340]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004ef4:	4956      	ldr	r1, [pc, #344]	; (8005050 <HAL_RCC_OscConfig+0x678>)
 8004ef6:	400a      	ands	r2, r1
 8004ef8:	651a      	str	r2, [r3, #80]	; 0x50
 8004efa:	4b53      	ldr	r3, [pc, #332]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004efe:	4b52      	ldr	r3, [pc, #328]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f00:	4955      	ldr	r1, [pc, #340]	; (8005058 <HAL_RCC_OscConfig+0x680>)
 8004f02:	400a      	ands	r2, r1
 8004f04:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d015      	beq.n	8004f3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0e:	f7fe fe99 	bl	8003c44 <HAL_GetTick>
 8004f12:	0003      	movs	r3, r0
 8004f14:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f16:	e009      	b.n	8004f2c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f18:	f7fe fe94 	bl	8003c44 <HAL_GetTick>
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	4a4e      	ldr	r2, [pc, #312]	; (800505c <HAL_RCC_OscConfig+0x684>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e11b      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f2c:	4b46      	ldr	r3, [pc, #280]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4013      	ands	r3, r2
 8004f36:	d0ef      	beq.n	8004f18 <HAL_RCC_OscConfig+0x540>
 8004f38:	e014      	b.n	8004f64 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3a:	f7fe fe83 	bl	8003c44 <HAL_GetTick>
 8004f3e:	0003      	movs	r3, r0
 8004f40:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f42:	e009      	b.n	8004f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f44:	f7fe fe7e 	bl	8003c44 <HAL_GetTick>
 8004f48:	0002      	movs	r2, r0
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	4a43      	ldr	r2, [pc, #268]	; (800505c <HAL_RCC_OscConfig+0x684>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e105      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f58:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4013      	ands	r3, r2
 8004f62:	d1ef      	bne.n	8004f44 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f64:	2323      	movs	r3, #35	; 0x23
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d105      	bne.n	8004f7a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6e:	4b36      	ldr	r3, [pc, #216]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f72:	4b35      	ldr	r3, [pc, #212]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f74:	493a      	ldr	r1, [pc, #232]	; (8005060 <HAL_RCC_OscConfig+0x688>)
 8004f76:	400a      	ands	r2, r1
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	4013      	ands	r3, r2
 8004f82:	d049      	beq.n	8005018 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d026      	beq.n	8004fda <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004f8c:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f92:	2101      	movs	r1, #1
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	635a      	str	r2, [r3, #52]	; 0x34
 8004fa4:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <HAL_RCC_OscConfig+0x68c>)
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <HAL_RCC_OscConfig+0x68c>)
 8004faa:	2180      	movs	r1, #128	; 0x80
 8004fac:	0189      	lsls	r1, r1, #6
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb2:	f7fe fe47 	bl	8003c44 <HAL_GetTick>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fbc:	f7fe fe42 	bl	8003c44 <HAL_GetTick>
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e0ca      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fce:	4b1e      	ldr	r3, [pc, #120]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d0f1      	beq.n	8004fbc <HAL_RCC_OscConfig+0x5e4>
 8004fd8:	e01e      	b.n	8005018 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004fda:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	438a      	bics	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]
 8004fe6:	4b1f      	ldr	r3, [pc, #124]	; (8005064 <HAL_RCC_OscConfig+0x68c>)
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <HAL_RCC_OscConfig+0x68c>)
 8004fec:	491e      	ldr	r1, [pc, #120]	; (8005068 <HAL_RCC_OscConfig+0x690>)
 8004fee:	400a      	ands	r2, r1
 8004ff0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff2:	f7fe fe27 	bl	8003c44 <HAL_GetTick>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ffc:	f7fe fe22 	bl	8003c44 <HAL_GetTick>
 8005000:	0002      	movs	r2, r0
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0aa      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2202      	movs	r2, #2
 8005014:	4013      	ands	r3, r2
 8005016:	d1f1      	bne.n	8004ffc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	d100      	bne.n	8005022 <HAL_RCC_OscConfig+0x64a>
 8005020:	e09f      	b.n	8005162 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2b0c      	cmp	r3, #12
 8005026:	d100      	bne.n	800502a <HAL_RCC_OscConfig+0x652>
 8005028:	e078      	b.n	800511c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	2b02      	cmp	r3, #2
 8005030:	d159      	bne.n	80050e6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b04      	ldr	r3, [pc, #16]	; (8005048 <HAL_RCC_OscConfig+0x670>)
 8005038:	490c      	ldr	r1, [pc, #48]	; (800506c <HAL_RCC_OscConfig+0x694>)
 800503a:	400a      	ands	r2, r1
 800503c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503e:	f7fe fe01 	bl	8003c44 <HAL_GetTick>
 8005042:	0003      	movs	r3, r0
 8005044:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005046:	e01c      	b.n	8005082 <HAL_RCC_OscConfig+0x6aa>
 8005048:	40021000 	.word	0x40021000
 800504c:	ffff1fff 	.word	0xffff1fff
 8005050:	fffffeff 	.word	0xfffffeff
 8005054:	40007000 	.word	0x40007000
 8005058:	fffffbff 	.word	0xfffffbff
 800505c:	00001388 	.word	0x00001388
 8005060:	efffffff 	.word	0xefffffff
 8005064:	40010000 	.word	0x40010000
 8005068:	ffffdfff 	.word	0xffffdfff
 800506c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fe fde8 	bl	8003c44 <HAL_GetTick>
 8005074:	0002      	movs	r2, r0
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e070      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005082:	4b3a      	ldr	r3, [pc, #232]	; (800516c <HAL_RCC_OscConfig+0x794>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	049b      	lsls	r3, r3, #18
 800508a:	4013      	ands	r3, r2
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800508e:	4b37      	ldr	r3, [pc, #220]	; (800516c <HAL_RCC_OscConfig+0x794>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4a37      	ldr	r2, [pc, #220]	; (8005170 <HAL_RCC_OscConfig+0x798>)
 8005094:	4013      	ands	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	431a      	orrs	r2, r3
 80050a8:	4b30      	ldr	r3, [pc, #192]	; (800516c <HAL_RCC_OscConfig+0x794>)
 80050aa:	430a      	orrs	r2, r1
 80050ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ae:	4b2f      	ldr	r3, [pc, #188]	; (800516c <HAL_RCC_OscConfig+0x794>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b2e      	ldr	r3, [pc, #184]	; (800516c <HAL_RCC_OscConfig+0x794>)
 80050b4:	2180      	movs	r1, #128	; 0x80
 80050b6:	0449      	lsls	r1, r1, #17
 80050b8:	430a      	orrs	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050bc:	f7fe fdc2 	bl	8003c44 <HAL_GetTick>
 80050c0:	0003      	movs	r3, r0
 80050c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c6:	f7fe fdbd 	bl	8003c44 <HAL_GetTick>
 80050ca:	0002      	movs	r2, r0
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e045      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80050d8:	4b24      	ldr	r3, [pc, #144]	; (800516c <HAL_RCC_OscConfig+0x794>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	049b      	lsls	r3, r3, #18
 80050e0:	4013      	ands	r3, r2
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x6ee>
 80050e4:	e03d      	b.n	8005162 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e6:	4b21      	ldr	r3, [pc, #132]	; (800516c <HAL_RCC_OscConfig+0x794>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_OscConfig+0x794>)
 80050ec:	4921      	ldr	r1, [pc, #132]	; (8005174 <HAL_RCC_OscConfig+0x79c>)
 80050ee:	400a      	ands	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f2:	f7fe fda7 	bl	8003c44 <HAL_GetTick>
 80050f6:	0003      	movs	r3, r0
 80050f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fe fda2 	bl	8003c44 <HAL_GetTick>
 8005100:	0002      	movs	r2, r0
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e02a      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800510e:	4b17      	ldr	r3, [pc, #92]	; (800516c <HAL_RCC_OscConfig+0x794>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	049b      	lsls	r3, r3, #18
 8005116:	4013      	ands	r3, r2
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x724>
 800511a:	e022      	b.n	8005162 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e01d      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005128:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_RCC_OscConfig+0x794>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	025b      	lsls	r3, r3, #9
 8005134:	401a      	ands	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	429a      	cmp	r2, r3
 800513c:	d10f      	bne.n	800515e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	23f0      	movs	r3, #240	; 0xf0
 8005142:	039b      	lsls	r3, r3, #14
 8005144:	401a      	ands	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d107      	bne.n	800515e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	23c0      	movs	r3, #192	; 0xc0
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	401a      	ands	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b00a      	add	sp, #40	; 0x28
 800516a:	bdb0      	pop	{r4, r5, r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	ff02ffff 	.word	0xff02ffff
 8005174:	feffffff 	.word	0xfeffffff

08005178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005178:	b5b0      	push	{r4, r5, r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e10d      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800518c:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCC_ClockConfig+0x238>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2201      	movs	r2, #1
 8005192:	4013      	ands	r3, r2
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d911      	bls.n	80051be <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519a:	4b85      	ldr	r3, [pc, #532]	; (80053b0 <HAL_RCC_ClockConfig+0x238>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2201      	movs	r2, #1
 80051a0:	4393      	bics	r3, r2
 80051a2:	0019      	movs	r1, r3
 80051a4:	4b82      	ldr	r3, [pc, #520]	; (80053b0 <HAL_RCC_ClockConfig+0x238>)
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ac:	4b80      	ldr	r3, [pc, #512]	; (80053b0 <HAL_RCC_ClockConfig+0x238>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	4013      	ands	r3, r2
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d001      	beq.n	80051be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e0f4      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2202      	movs	r2, #2
 80051c4:	4013      	ands	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c8:	4b7a      	ldr	r3, [pc, #488]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	22f0      	movs	r2, #240	; 0xf0
 80051ce:	4393      	bics	r3, r2
 80051d0:	0019      	movs	r1, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	4b77      	ldr	r3, [pc, #476]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 80051d8:	430a      	orrs	r2, r1
 80051da:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2201      	movs	r2, #1
 80051e2:	4013      	ands	r3, r2
 80051e4:	d100      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x70>
 80051e6:	e089      	b.n	80052fc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051f0:	4b70      	ldr	r3, [pc, #448]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	029b      	lsls	r3, r3, #10
 80051f8:	4013      	ands	r3, r2
 80051fa:	d120      	bne.n	800523e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0d3      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d107      	bne.n	8005218 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	049b      	lsls	r3, r3, #18
 8005210:	4013      	ands	r3, r2
 8005212:	d114      	bne.n	800523e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0c7      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d106      	bne.n	800522e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005220:	4b64      	ldr	r3, [pc, #400]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2204      	movs	r2, #4
 8005226:	4013      	ands	r3, r2
 8005228:	d109      	bne.n	800523e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0bc      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800522e:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4013      	ands	r3, r2
 8005238:	d101      	bne.n	800523e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0b4      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800523e:	4b5d      	ldr	r3, [pc, #372]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2203      	movs	r2, #3
 8005244:	4393      	bics	r3, r2
 8005246:	0019      	movs	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 800524e:	430a      	orrs	r2, r1
 8005250:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005252:	f7fe fcf7 	bl	8003c44 <HAL_GetTick>
 8005256:	0003      	movs	r3, r0
 8005258:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d111      	bne.n	8005286 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005262:	e009      	b.n	8005278 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005264:	f7fe fcee 	bl	8003c44 <HAL_GetTick>
 8005268:	0002      	movs	r2, r0
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e097      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005278:	4b4e      	ldr	r3, [pc, #312]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	220c      	movs	r2, #12
 800527e:	4013      	ands	r3, r2
 8005280:	2b08      	cmp	r3, #8
 8005282:	d1ef      	bne.n	8005264 <HAL_RCC_ClockConfig+0xec>
 8005284:	e03a      	b.n	80052fc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d111      	bne.n	80052b2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800528e:	e009      	b.n	80052a4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005290:	f7fe fcd8 	bl	8003c44 <HAL_GetTick>
 8005294:	0002      	movs	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	4a47      	ldr	r2, [pc, #284]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e081      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052a4:	4b43      	ldr	r3, [pc, #268]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	220c      	movs	r2, #12
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b0c      	cmp	r3, #12
 80052ae:	d1ef      	bne.n	8005290 <HAL_RCC_ClockConfig+0x118>
 80052b0:	e024      	b.n	80052fc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d11b      	bne.n	80052f2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ba:	e009      	b.n	80052d0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052bc:	f7fe fcc2 	bl	8003c44 <HAL_GetTick>
 80052c0:	0002      	movs	r2, r0
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	4a3c      	ldr	r2, [pc, #240]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e06b      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052d0:	4b38      	ldr	r3, [pc, #224]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	220c      	movs	r2, #12
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d1ef      	bne.n	80052bc <HAL_RCC_ClockConfig+0x144>
 80052dc:	e00e      	b.n	80052fc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052de:	f7fe fcb1 	bl	8003c44 <HAL_GetTick>
 80052e2:	0002      	movs	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	4a33      	ldr	r2, [pc, #204]	; (80053b8 <HAL_RCC_ClockConfig+0x240>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e05a      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80052f2:	4b30      	ldr	r3, [pc, #192]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	220c      	movs	r2, #12
 80052f8:	4013      	ands	r3, r2
 80052fa:	d1f0      	bne.n	80052de <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052fc:	4b2c      	ldr	r3, [pc, #176]	; (80053b0 <HAL_RCC_ClockConfig+0x238>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2201      	movs	r2, #1
 8005302:	4013      	ands	r3, r2
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d211      	bcs.n	800532e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530a:	4b29      	ldr	r3, [pc, #164]	; (80053b0 <HAL_RCC_ClockConfig+0x238>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2201      	movs	r2, #1
 8005310:	4393      	bics	r3, r2
 8005312:	0019      	movs	r1, r3
 8005314:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <HAL_RCC_ClockConfig+0x238>)
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531c:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCC_ClockConfig+0x238>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	4013      	ands	r3, r2
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d001      	beq.n	800532e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e03c      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2204      	movs	r2, #4
 8005334:	4013      	ands	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <HAL_RCC_ClockConfig+0x244>)
 800533e:	4013      	ands	r3, r2
 8005340:	0019      	movs	r1, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 8005348:	430a      	orrs	r2, r1
 800534a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2208      	movs	r2, #8
 8005352:	4013      	ands	r3, r2
 8005354:	d00a      	beq.n	800536c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005356:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <HAL_RCC_ClockConfig+0x248>)
 800535c:	4013      	ands	r3, r2
 800535e:	0019      	movs	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	00da      	lsls	r2, r3, #3
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 8005368:	430a      	orrs	r2, r1
 800536a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800536c:	f000 f82e 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 8005370:	0001      	movs	r1, r0
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <HAL_RCC_ClockConfig+0x23c>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	220f      	movs	r2, #15
 800537a:	4013      	ands	r3, r2
 800537c:	4a11      	ldr	r2, [pc, #68]	; (80053c4 <HAL_RCC_ClockConfig+0x24c>)
 800537e:	5cd3      	ldrb	r3, [r2, r3]
 8005380:	000a      	movs	r2, r1
 8005382:	40da      	lsrs	r2, r3
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <HAL_RCC_ClockConfig+0x250>)
 8005386:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005388:	250b      	movs	r5, #11
 800538a:	197c      	adds	r4, r7, r5
 800538c:	2000      	movs	r0, #0
 800538e:	f7fe fc25 	bl	8003bdc <HAL_InitTick>
 8005392:	0003      	movs	r3, r0
 8005394:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005396:	197b      	adds	r3, r7, r5
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800539e:	230b      	movs	r3, #11
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	e000      	b.n	80053a8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	0018      	movs	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b004      	add	sp, #16
 80053ae:	bdb0      	pop	{r4, r5, r7, pc}
 80053b0:	40022000 	.word	0x40022000
 80053b4:	40021000 	.word	0x40021000
 80053b8:	00001388 	.word	0x00001388
 80053bc:	fffff8ff 	.word	0xfffff8ff
 80053c0:	ffffc7ff 	.word	0xffffc7ff
 80053c4:	080202a8 	.word	0x080202a8
 80053c8:	20000058 	.word	0x20000058

080053cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	220c      	movs	r2, #12
 80053dc:	4013      	ands	r3, r2
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d00e      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x34>
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d00f      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x3a>
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d157      	bne.n	800549a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80053ea:	4b35      	ldr	r3, [pc, #212]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2210      	movs	r2, #16
 80053f0:	4013      	ands	r3, r2
 80053f2:	d002      	beq.n	80053fa <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80053f4:	4b33      	ldr	r3, [pc, #204]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80053f8:	e05d      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80053fa:	4b33      	ldr	r3, [pc, #204]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80053fc:	613b      	str	r3, [r7, #16]
      break;
 80053fe:	e05a      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005400:	4b32      	ldr	r3, [pc, #200]	; (80054cc <HAL_RCC_GetSysClockFreq+0x100>)
 8005402:	613b      	str	r3, [r7, #16]
      break;
 8005404:	e057      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	0c9b      	lsrs	r3, r3, #18
 800540a:	220f      	movs	r2, #15
 800540c:	4013      	ands	r3, r2
 800540e:	4a30      	ldr	r2, [pc, #192]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005410:	5cd3      	ldrb	r3, [r2, r3]
 8005412:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	0d9b      	lsrs	r3, r3, #22
 8005418:	2203      	movs	r2, #3
 800541a:	4013      	ands	r3, r2
 800541c:	3301      	adds	r3, #1
 800541e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	2380      	movs	r3, #128	; 0x80
 8005426:	025b      	lsls	r3, r3, #9
 8005428:	4013      	ands	r3, r2
 800542a:	d00f      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	000a      	movs	r2, r1
 8005430:	0152      	lsls	r2, r2, #5
 8005432:	1a52      	subs	r2, r2, r1
 8005434:	0193      	lsls	r3, r2, #6
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	185b      	adds	r3, r3, r1
 800543c:	025b      	lsls	r3, r3, #9
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	0018      	movs	r0, r3
 8005442:	f7fa fe69 	bl	8000118 <__udivsi3>
 8005446:	0003      	movs	r3, r0
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	e023      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800544c:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2210      	movs	r2, #16
 8005452:	4013      	ands	r3, r2
 8005454:	d00f      	beq.n	8005476 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	000a      	movs	r2, r1
 800545a:	0152      	lsls	r2, r2, #5
 800545c:	1a52      	subs	r2, r2, r1
 800545e:	0193      	lsls	r3, r2, #6
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	185b      	adds	r3, r3, r1
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	0018      	movs	r0, r3
 800546c:	f7fa fe54 	bl	8000118 <__udivsi3>
 8005470:	0003      	movs	r3, r0
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	e00e      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	000a      	movs	r2, r1
 800547a:	0152      	lsls	r2, r2, #5
 800547c:	1a52      	subs	r2, r2, r1
 800547e:	0193      	lsls	r3, r2, #6
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	185b      	adds	r3, r3, r1
 8005486:	029b      	lsls	r3, r3, #10
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	0018      	movs	r0, r3
 800548c:	f7fa fe44 	bl	8000118 <__udivsi3>
 8005490:	0003      	movs	r3, r0
 8005492:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	613b      	str	r3, [r7, #16]
      break;
 8005498:	e00d      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	0b5b      	lsrs	r3, r3, #13
 80054a0:	2207      	movs	r2, #7
 80054a2:	4013      	ands	r3, r2
 80054a4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	0212      	lsls	r2, r2, #8
 80054ae:	409a      	lsls	r2, r3
 80054b0:	0013      	movs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
      break;
 80054b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80054b6:	693b      	ldr	r3, [r7, #16]
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b006      	add	sp, #24
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	003d0900 	.word	0x003d0900
 80054c8:	00f42400 	.word	0x00f42400
 80054cc:	007a1200 	.word	0x007a1200
 80054d0:	080202c0 	.word	0x080202c0

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b02      	ldr	r3, [pc, #8]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	20000058 	.word	0x20000058

080054e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054ec:	f7ff fff2 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f0:	0001      	movs	r1, r0
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	2207      	movs	r2, #7
 80054fa:	4013      	ands	r3, r2
 80054fc:	4a04      	ldr	r2, [pc, #16]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	40d9      	lsrs	r1, r3
 8005502:	000b      	movs	r3, r1
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	40021000 	.word	0x40021000
 8005510:	080202b8 	.word	0x080202b8

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005518:	f7ff ffdc 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 800551c:	0001      	movs	r1, r0
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	0adb      	lsrs	r3, r3, #11
 8005524:	2207      	movs	r2, #7
 8005526:	4013      	ands	r3, r2
 8005528:	4a04      	ldr	r2, [pc, #16]	; (800553c <HAL_RCC_GetPCLK2Freq+0x28>)
 800552a:	5cd3      	ldrb	r3, [r2, r3]
 800552c:	40d9      	lsrs	r1, r3
 800552e:	000b      	movs	r3, r1
}
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	40021000 	.word	0x40021000
 800553c:	080202b8 	.word	0x080202b8

08005540 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2220      	movs	r2, #32
 800554e:	4013      	ands	r3, r2
 8005550:	d100      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8005552:	e0c7      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005554:	2317      	movs	r3, #23
 8005556:	18fb      	adds	r3, r7, r3
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555c:	4b99      	ldr	r3, [pc, #612]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800555e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	055b      	lsls	r3, r3, #21
 8005564:	4013      	ands	r3, r2
 8005566:	d10a      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005568:	4b96      	ldr	r3, [pc, #600]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800556a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556c:	4b95      	ldr	r3, [pc, #596]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800556e:	2180      	movs	r1, #128	; 0x80
 8005570:	0549      	lsls	r1, r1, #21
 8005572:	430a      	orrs	r2, r1
 8005574:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005576:	2317      	movs	r3, #23
 8005578:	18fb      	adds	r3, r7, r3
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557e:	4b92      	ldr	r3, [pc, #584]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	2380      	movs	r3, #128	; 0x80
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	4013      	ands	r3, r2
 8005588:	d11a      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800558a:	4b8f      	ldr	r3, [pc, #572]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b8e      	ldr	r3, [pc, #568]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005590:	2180      	movs	r1, #128	; 0x80
 8005592:	0049      	lsls	r1, r1, #1
 8005594:	430a      	orrs	r2, r1
 8005596:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005598:	f7fe fb54 	bl	8003c44 <HAL_GetTick>
 800559c:	0003      	movs	r3, r0
 800559e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a0:	e008      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a2:	f7fe fb4f 	bl	8003c44 <HAL_GetTick>
 80055a6:	0002      	movs	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b64      	cmp	r3, #100	; 0x64
 80055ae:	d901      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e102      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b4:	4b84      	ldr	r3, [pc, #528]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4013      	ands	r3, r2
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80055c0:	4b80      	ldr	r3, [pc, #512]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	23c0      	movs	r3, #192	; 0xc0
 80055c6:	039b      	lsls	r3, r3, #14
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	23c0      	movs	r3, #192	; 0xc0
 80055d2:	039b      	lsls	r3, r3, #14
 80055d4:	4013      	ands	r3, r2
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d013      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	23c0      	movs	r3, #192	; 0xc0
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	401a      	ands	r2, r3
 80055e6:	23c0      	movs	r3, #192	; 0xc0
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10a      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055ee:	4b75      	ldr	r3, [pc, #468]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	401a      	ands	r2, r3
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	029b      	lsls	r3, r3, #10
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d101      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0da      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005604:	4b6f      	ldr	r3, [pc, #444]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005608:	23c0      	movs	r3, #192	; 0xc0
 800560a:	029b      	lsls	r3, r3, #10
 800560c:	4013      	ands	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d03b      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	23c0      	movs	r3, #192	; 0xc0
 800561c:	029b      	lsls	r3, r3, #10
 800561e:	4013      	ands	r3, r2
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	429a      	cmp	r2, r3
 8005624:	d033      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2220      	movs	r2, #32
 800562c:	4013      	ands	r3, r2
 800562e:	d02e      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005630:	4b64      	ldr	r3, [pc, #400]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	4a65      	ldr	r2, [pc, #404]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005636:	4013      	ands	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800563a:	4b62      	ldr	r3, [pc, #392]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800563c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800563e:	4b61      	ldr	r3, [pc, #388]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	0309      	lsls	r1, r1, #12
 8005644:	430a      	orrs	r2, r1
 8005646:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005648:	4b5e      	ldr	r3, [pc, #376]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800564a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800564c:	4b5d      	ldr	r3, [pc, #372]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800564e:	4960      	ldr	r1, [pc, #384]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005650:	400a      	ands	r2, r1
 8005652:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005654:	4b5b      	ldr	r3, [pc, #364]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4013      	ands	r3, r2
 8005662:	d014      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005664:	f7fe faee 	bl	8003c44 <HAL_GetTick>
 8005668:	0003      	movs	r3, r0
 800566a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800566c:	e009      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fe fae9 	bl	8003c44 <HAL_GetTick>
 8005672:	0002      	movs	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	4a56      	ldr	r2, [pc, #344]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e09b      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005682:	4b50      	ldr	r3, [pc, #320]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005686:	2380      	movs	r3, #128	; 0x80
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4013      	ands	r3, r2
 800568c:	d0ef      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	23c0      	movs	r3, #192	; 0xc0
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	401a      	ands	r2, r3
 8005698:	23c0      	movs	r3, #192	; 0xc0
 800569a:	029b      	lsls	r3, r3, #10
 800569c:	429a      	cmp	r2, r3
 800569e:	d10c      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80056a0:	4b48      	ldr	r3, [pc, #288]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a4c      	ldr	r2, [pc, #304]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	23c0      	movs	r3, #192	; 0xc0
 80056b0:	039b      	lsls	r3, r3, #14
 80056b2:	401a      	ands	r2, r3
 80056b4:	4b43      	ldr	r3, [pc, #268]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	4b42      	ldr	r3, [pc, #264]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	23c0      	movs	r3, #192	; 0xc0
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	401a      	ands	r2, r3
 80056c8:	4b3e      	ldr	r3, [pc, #248]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056ca:	430a      	orrs	r2, r1
 80056cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056ce:	2317      	movs	r3, #23
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d105      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d8:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056dc:	4b39      	ldr	r3, [pc, #228]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056de:	493f      	ldr	r1, [pc, #252]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80056e0:	400a      	ands	r2, r1
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2201      	movs	r2, #1
 80056ea:	4013      	ands	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ee:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	2203      	movs	r2, #3
 80056f4:	4393      	bics	r3, r2
 80056f6:	0019      	movs	r1, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056fe:	430a      	orrs	r2, r1
 8005700:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2202      	movs	r2, #2
 8005708:	4013      	ands	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800570c:	4b2d      	ldr	r3, [pc, #180]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800570e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005710:	220c      	movs	r2, #12
 8005712:	4393      	bics	r3, r2
 8005714:	0019      	movs	r1, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	4b2a      	ldr	r3, [pc, #168]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800571c:	430a      	orrs	r2, r1
 800571e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2204      	movs	r2, #4
 8005726:	4013      	ands	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800572a:	4b26      	ldr	r3, [pc, #152]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800572c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572e:	4a2c      	ldr	r2, [pc, #176]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005730:	4013      	ands	r3, r2
 8005732:	0019      	movs	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800573a:	430a      	orrs	r2, r1
 800573c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2208      	movs	r2, #8
 8005744:	4013      	ands	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005748:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800574a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800574e:	4013      	ands	r3, r2
 8005750:	0019      	movs	r1, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005758:	430a      	orrs	r2, r1
 800575a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	4013      	ands	r3, r2
 8005766:	d009      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005768:	4b16      	ldr	r3, [pc, #88]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576c:	4a17      	ldr	r2, [pc, #92]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800576e:	4013      	ands	r3, r2
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005778:	430a      	orrs	r2, r1
 800577a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2240      	movs	r2, #64	; 0x40
 8005782:	4013      	ands	r3, r2
 8005784:	d009      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005786:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800578c:	4013      	ands	r3, r2
 800578e:	0019      	movs	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1a      	ldr	r2, [r3, #32]
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005796:	430a      	orrs	r2, r1
 8005798:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	4013      	ands	r3, r2
 80057a2:	d009      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80057a4:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a8:	4a10      	ldr	r2, [pc, #64]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057b4:	430a      	orrs	r2, r1
 80057b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	0018      	movs	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	b006      	add	sp, #24
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40007000 	.word	0x40007000
 80057cc:	fffcffff 	.word	0xfffcffff
 80057d0:	fff7ffff 	.word	0xfff7ffff
 80057d4:	00001388 	.word	0x00001388
 80057d8:	ffcfffff 	.word	0xffcfffff
 80057dc:	efffffff 	.word	0xefffffff
 80057e0:	fffff3ff 	.word	0xfffff3ff
 80057e4:	ffffcfff 	.word	0xffffcfff
 80057e8:	fbffffff 	.word	0xfbffffff
 80057ec:	fff3ffff 	.word	0xfff3ffff

080057f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e08e      	b.n	8005920 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2221      	movs	r2, #33	; 0x21
 8005806:	5c9b      	ldrb	r3, [r3, r2]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	2100      	movs	r1, #0
 8005814:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0018      	movs	r0, r3
 800581a:	f7fd fe77 	bl	800350c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2221      	movs	r2, #33	; 0x21
 8005822:	2102      	movs	r1, #2
 8005824:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	22ca      	movs	r2, #202	; 0xca
 800582c:	625a      	str	r2, [r3, #36]	; 0x24
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2253      	movs	r2, #83	; 0x53
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0018      	movs	r0, r3
 800583a:	f000 fc5c 	bl	80060f6 <RTC_EnterInitMode>
 800583e:	1e03      	subs	r3, r0, #0
 8005840:	d009      	beq.n	8005856 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	22ff      	movs	r2, #255	; 0xff
 8005848:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2221      	movs	r2, #33	; 0x21
 800584e:	2104      	movs	r1, #4
 8005850:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e064      	b.n	8005920 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4931      	ldr	r1, [pc, #196]	; (8005928 <HAL_RTC_Init+0x138>)
 8005862:	400a      	ands	r2, r1
 8005864:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6899      	ldr	r1, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	68d2      	ldr	r2, [r2, #12]
 800588c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6919      	ldr	r1, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	041a      	lsls	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2180      	movs	r1, #128	; 0x80
 80058ae:	438a      	bics	r2, r1
 80058b0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2103      	movs	r1, #3
 80058be:	438a      	bics	r2, r1
 80058c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2220      	movs	r2, #32
 80058e2:	4013      	ands	r3, r2
 80058e4:	d113      	bne.n	800590e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f000 fbdd 	bl	80060a8 <HAL_RTC_WaitForSynchro>
 80058ee:	1e03      	subs	r3, r0, #0
 80058f0:	d00d      	beq.n	800590e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	22ff      	movs	r2, #255	; 0xff
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2221      	movs	r2, #33	; 0x21
 80058fe:	2104      	movs	r1, #4
 8005900:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	2100      	movs	r1, #0
 8005908:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e008      	b.n	8005920 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	22ff      	movs	r2, #255	; 0xff
 8005914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2221      	movs	r2, #33	; 0x21
 800591a:	2101      	movs	r1, #1
 800591c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800591e:	2300      	movs	r3, #0
  }
}
 8005920:	0018      	movs	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	b002      	add	sp, #8
 8005926:	bd80      	pop	{r7, pc}
 8005928:	ff8fffbf 	.word	0xff8fffbf

0800592c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	5c9b      	ldrb	r3, [r3, r2]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_RTC_SetTime+0x1a>
 8005942:	2302      	movs	r3, #2
 8005944:	e0ad      	b.n	8005aa2 <HAL_RTC_SetTime+0x176>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	2101      	movs	r1, #1
 800594c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2221      	movs	r2, #33	; 0x21
 8005952:	2102      	movs	r1, #2
 8005954:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d125      	bne.n	80059a8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2240      	movs	r2, #64	; 0x40
 8005964:	4013      	ands	r3, r2
 8005966:	d102      	bne.n	800596e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2200      	movs	r2, #0
 800596c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	0018      	movs	r0, r3
 8005974:	f000 fbe9 	bl	800614a <RTC_ByteToBcd2>
 8005978:	0003      	movs	r3, r0
 800597a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	785b      	ldrb	r3, [r3, #1]
 8005980:	0018      	movs	r0, r3
 8005982:	f000 fbe2 	bl	800614a <RTC_ByteToBcd2>
 8005986:	0003      	movs	r3, r0
 8005988:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800598a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	789b      	ldrb	r3, [r3, #2]
 8005990:	0018      	movs	r0, r3
 8005992:	f000 fbda 	bl	800614a <RTC_ByteToBcd2>
 8005996:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005998:	0022      	movs	r2, r4
 800599a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	78db      	ldrb	r3, [r3, #3]
 80059a0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	e017      	b.n	80059d8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2240      	movs	r2, #64	; 0x40
 80059b0:	4013      	ands	r3, r2
 80059b2:	d102      	bne.n	80059ba <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2200      	movs	r2, #0
 80059b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059c6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80059cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	78db      	ldrb	r3, [r3, #3]
 80059d2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	22ca      	movs	r2, #202	; 0xca
 80059de:	625a      	str	r2, [r3, #36]	; 0x24
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2253      	movs	r2, #83	; 0x53
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 fb83 	bl	80060f6 <RTC_EnterInitMode>
 80059f0:	1e03      	subs	r3, r0, #0
 80059f2:	d00d      	beq.n	8005a10 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	22ff      	movs	r2, #255	; 0xff
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2221      	movs	r2, #33	; 0x21
 8005a00:	2104      	movs	r1, #4
 8005a02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	2100      	movs	r1, #0
 8005a0a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e048      	b.n	8005aa2 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4925      	ldr	r1, [pc, #148]	; (8005aac <HAL_RTC_SetTime+0x180>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4922      	ldr	r1, [pc, #136]	; (8005ab0 <HAL_RTC_SetTime+0x184>)
 8005a28:	400a      	ands	r2, r1
 8005a2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	438a      	bics	r2, r1
 8005a52:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d113      	bne.n	8005a88 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 fb20 	bl	80060a8 <HAL_RTC_WaitForSynchro>
 8005a68:	1e03      	subs	r3, r0, #0
 8005a6a:	d00d      	beq.n	8005a88 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	22ff      	movs	r2, #255	; 0xff
 8005a72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2221      	movs	r2, #33	; 0x21
 8005a78:	2104      	movs	r1, #4
 8005a7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	2100      	movs	r1, #0
 8005a82:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e00c      	b.n	8005aa2 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	22ff      	movs	r2, #255	; 0xff
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2221      	movs	r2, #33	; 0x21
 8005a94:	2101      	movs	r1, #1
 8005a96:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
  }
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b007      	add	sp, #28
 8005aa8:	bd90      	pop	{r4, r7, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	007f7f7f 	.word	0x007f7f7f
 8005ab0:	fffbffff 	.word	0xfffbffff

08005ab4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	045b      	lsls	r3, r3, #17
 8005ad2:	0c5a      	lsrs	r2, r3, #17
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a22      	ldr	r2, [pc, #136]	; (8005b68 <HAL_RTC_GetTime+0xb4>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	0c1b      	lsrs	r3, r3, #16
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	223f      	movs	r2, #63	; 0x3f
 8005aec:	4013      	ands	r3, r2
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	227f      	movs	r2, #127	; 0x7f
 8005afc:	4013      	ands	r3, r2
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	227f      	movs	r2, #127	; 0x7f
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11a      	bne.n	8005b5e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 fb35 	bl	800619c <RTC_Bcd2ToByte>
 8005b32:	0003      	movs	r3, r0
 8005b34:	001a      	movs	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 fb2c 	bl	800619c <RTC_Bcd2ToByte>
 8005b44:	0003      	movs	r3, r0
 8005b46:	001a      	movs	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	789b      	ldrb	r3, [r3, #2]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 fb23 	bl	800619c <RTC_Bcd2ToByte>
 8005b56:	0003      	movs	r3, r0
 8005b58:	001a      	movs	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	0018      	movs	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b006      	add	sp, #24
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	007f7f7f 	.word	0x007f7f7f

08005b6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	5c9b      	ldrb	r3, [r3, r2]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_RTC_SetDate+0x1a>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e099      	b.n	8005cba <HAL_RTC_SetDate+0x14e>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2221      	movs	r2, #33	; 0x21
 8005b92:	2102      	movs	r1, #2
 8005b94:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10e      	bne.n	8005bba <HAL_RTC_SetDate+0x4e>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	2310      	movs	r3, #16
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d008      	beq.n	8005bba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2210      	movs	r2, #16
 8005bae:	4393      	bics	r3, r2
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	330a      	adds	r3, #10
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d11c      	bne.n	8005bfa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	78db      	ldrb	r3, [r3, #3]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f000 fac0 	bl	800614a <RTC_ByteToBcd2>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 fab9 	bl	800614a <RTC_ByteToBcd2>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005bdc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	789b      	ldrb	r3, [r3, #2]
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 fab1 	bl	800614a <RTC_ByteToBcd2>
 8005be8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005bea:	0022      	movs	r2, r4
 8005bec:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e00e      	b.n	8005c18 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c06:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	22ca      	movs	r2, #202	; 0xca
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2253      	movs	r2, #83	; 0x53
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 fa63 	bl	80060f6 <RTC_EnterInitMode>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d00d      	beq.n	8005c50 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2221      	movs	r2, #33	; 0x21
 8005c40:	2104      	movs	r1, #4
 8005c42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	2100      	movs	r1, #0
 8005c4a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e034      	b.n	8005cba <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	491b      	ldr	r1, [pc, #108]	; (8005cc4 <HAL_RTC_SetDate+0x158>)
 8005c58:	400a      	ands	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	438a      	bics	r2, r1
 8005c6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2220      	movs	r2, #32
 8005c74:	4013      	ands	r3, r2
 8005c76:	d113      	bne.n	8005ca0 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f000 fa14 	bl	80060a8 <HAL_RTC_WaitForSynchro>
 8005c80:	1e03      	subs	r3, r0, #0
 8005c82:	d00d      	beq.n	8005ca0 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	22ff      	movs	r2, #255	; 0xff
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2221      	movs	r2, #33	; 0x21
 8005c90:	2104      	movs	r1, #4
 8005c92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	2100      	movs	r1, #0
 8005c9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e00c      	b.n	8005cba <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2221      	movs	r2, #33	; 0x21
 8005cac:	2101      	movs	r1, #1
 8005cae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
  }
}
 8005cba:	0018      	movs	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b007      	add	sp, #28
 8005cc0:	bd90      	pop	{r4, r7, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	00ffff3f 	.word	0x00ffff3f

08005cc8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4a21      	ldr	r2, [pc, #132]	; (8005d60 <HAL_RTC_GetDate+0x98>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	0c1b      	lsrs	r3, r3, #16
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	221f      	movs	r2, #31
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	223f      	movs	r2, #63	; 0x3f
 8005d00:	4013      	ands	r3, r2
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	0b5b      	lsrs	r3, r3, #13
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2207      	movs	r2, #7
 8005d10:	4013      	ands	r3, r2
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11a      	bne.n	8005d54 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	78db      	ldrb	r3, [r3, #3]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 fa3a 	bl	800619c <RTC_Bcd2ToByte>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 fa31 	bl	800619c <RTC_Bcd2ToByte>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	789b      	ldrb	r3, [r3, #2]
 8005d46:	0018      	movs	r0, r3
 8005d48:	f000 fa28 	bl	800619c <RTC_Bcd2ToByte>
 8005d4c:	0003      	movs	r3, r0
 8005d4e:	001a      	movs	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	0018      	movs	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b006      	add	sp, #24
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	00ffff3f 	.word	0x00ffff3f

08005d64 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b089      	sub	sp, #36	; 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	5c9b      	ldrb	r3, [r3, r2]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_RTC_SetAlarm_IT+0x1a>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e130      	b.n	8005fe0 <HAL_RTC_SetAlarm_IT+0x27c>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2220      	movs	r2, #32
 8005d82:	2101      	movs	r1, #1
 8005d84:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2221      	movs	r2, #33	; 0x21
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d136      	bne.n	8005e02 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2240      	movs	r2, #64	; 0x40
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d102      	bne.n	8005da6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f9cd 	bl	800614a <RTC_ByteToBcd2>
 8005db0:	0003      	movs	r3, r0
 8005db2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	0018      	movs	r0, r3
 8005dba:	f000 f9c6 	bl	800614a <RTC_ByteToBcd2>
 8005dbe:	0003      	movs	r3, r0
 8005dc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005dc2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	789b      	ldrb	r3, [r3, #2]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f000 f9be 	bl	800614a <RTC_ByteToBcd2>
 8005dce:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005dd0:	0022      	movs	r2, r4
 8005dd2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2220      	movs	r2, #32
 8005de2:	5c9b      	ldrb	r3, [r3, r2]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 f9b0 	bl	800614a <RTC_ByteToBcd2>
 8005dea:	0003      	movs	r3, r0
 8005dec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005dee:	0022      	movs	r2, r4
 8005df0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005df6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e022      	b.n	8005e48 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2240      	movs	r2, #64	; 0x40
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d102      	bne.n	8005e14 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e20:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005e26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005e2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2120      	movs	r1, #32
 8005e34:	5c5b      	ldrb	r3, [r3, r1]
 8005e36:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005e38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005e3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005e44:	4313      	orrs	r3, r2
 8005e46:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	22ca      	movs	r2, #202	; 0xca
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2253      	movs	r2, #83	; 0x53
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d14e      	bne.n	8005f0e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	495b      	ldr	r1, [pc, #364]	; (8005fe8 <HAL_RTC_SetAlarm_IT+0x284>)
 8005e7c:	400a      	ands	r2, r1
 8005e7e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	22ff      	movs	r2, #255	; 0xff
 8005e88:	401a      	ands	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4957      	ldr	r1, [pc, #348]	; (8005fec <HAL_RTC_SetAlarm_IT+0x288>)
 8005e90:	430a      	orrs	r2, r1
 8005e92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e94:	f7fd fed6 	bl	8003c44 <HAL_GetTick>
 8005e98:	0003      	movs	r3, r0
 8005e9a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005e9c:	e016      	b.n	8005ecc <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e9e:	f7fd fed1 	bl	8003c44 <HAL_GetTick>
 8005ea2:	0002      	movs	r2, r0
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	23fa      	movs	r3, #250	; 0xfa
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d90d      	bls.n	8005ecc <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	22ff      	movs	r2, #255	; 0xff
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2221      	movs	r2, #33	; 0x21
 8005ebc:	2103      	movs	r1, #3
 8005ebe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e089      	b.n	8005fe0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d0e2      	beq.n	8005e9e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2180      	movs	r1, #128	; 0x80
 8005ef4:	0049      	lsls	r1, r1, #1
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2180      	movs	r1, #128	; 0x80
 8005f06:	0149      	lsls	r1, r1, #5
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	e04d      	b.n	8005faa <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4935      	ldr	r1, [pc, #212]	; (8005ff0 <HAL_RTC_SetAlarm_IT+0x28c>)
 8005f1a:	400a      	ands	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	401a      	ands	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4931      	ldr	r1, [pc, #196]	; (8005ff4 <HAL_RTC_SetAlarm_IT+0x290>)
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f32:	f7fd fe87 	bl	8003c44 <HAL_GetTick>
 8005f36:	0003      	movs	r3, r0
 8005f38:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005f3a:	e016      	b.n	8005f6a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f3c:	f7fd fe82 	bl	8003c44 <HAL_GetTick>
 8005f40:	0002      	movs	r2, r0
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	1ad2      	subs	r2, r2, r3
 8005f46:	23fa      	movs	r3, #250	; 0xfa
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d90d      	bls.n	8005f6a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	22ff      	movs	r2, #255	; 0xff
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2221      	movs	r2, #33	; 0x21
 8005f5a:	2103      	movs	r1, #3
 8005f5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	2100      	movs	r1, #0
 8005f64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e03a      	b.n	8005fe0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2202      	movs	r2, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d0e2      	beq.n	8005f3c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2180      	movs	r1, #128	; 0x80
 8005f92:	0089      	lsls	r1, r1, #2
 8005f94:	430a      	orrs	r2, r1
 8005f96:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	0189      	lsls	r1, r1, #6
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005faa:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005fb0:	2180      	movs	r1, #128	; 0x80
 8005fb2:	0289      	lsls	r1, r1, #10
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005fbe:	2180      	movs	r1, #128	; 0x80
 8005fc0:	0289      	lsls	r1, r1, #10
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	22ff      	movs	r2, #255	; 0xff
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2221      	movs	r2, #33	; 0x21
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b009      	add	sp, #36	; 0x24
 8005fe6:	bd90      	pop	{r4, r7, pc}
 8005fe8:	fffffeff 	.word	0xfffffeff
 8005fec:	fffffe7f 	.word	0xfffffe7f
 8005ff0:	fffffdff 	.word	0xfffffdff
 8005ff4:	fffffd7f 	.word	0xfffffd7f
 8005ff8:	40010400 	.word	0x40010400

08005ffc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	2380      	movs	r3, #128	; 0x80
 800600c:	015b      	lsls	r3, r3, #5
 800600e:	4013      	ands	r3, r2
 8006010:	d014      	beq.n	800603c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	2380      	movs	r3, #128	; 0x80
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	4013      	ands	r3, r2
 800601e:	d00d      	beq.n	800603c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	0018      	movs	r0, r3
 8006024:	f000 f838 	bl	8006098 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	22ff      	movs	r2, #255	; 0xff
 8006030:	401a      	ands	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4915      	ldr	r1, [pc, #84]	; (800608c <HAL_RTC_AlarmIRQHandler+0x90>)
 8006038:	430a      	orrs	r2, r1
 800603a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	019b      	lsls	r3, r3, #6
 8006046:	4013      	ands	r3, r2
 8006048:	d014      	beq.n	8006074 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4013      	ands	r3, r2
 8006056:	d00d      	beq.n	8006074 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 fa0e 	bl	800647c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	22ff      	movs	r2, #255	; 0xff
 8006068:	401a      	ands	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4908      	ldr	r1, [pc, #32]	; (8006090 <HAL_RTC_AlarmIRQHandler+0x94>)
 8006070:	430a      	orrs	r2, r1
 8006072:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006074:	4b07      	ldr	r3, [pc, #28]	; (8006094 <HAL_RTC_AlarmIRQHandler+0x98>)
 8006076:	2280      	movs	r2, #128	; 0x80
 8006078:	0292      	lsls	r2, r2, #10
 800607a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2221      	movs	r2, #33	; 0x21
 8006080:	2101      	movs	r1, #1
 8006082:	5499      	strb	r1, [r3, r2]
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}
 800608c:	fffffe7f 	.word	0xfffffe7f
 8006090:	fffffd7f 	.word	0xfffffd7f
 8006094:	40010400 	.word	0x40010400

08006098 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80060a0:	46c0      	nop			; (mov r8, r8)
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b002      	add	sp, #8
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	21a0      	movs	r1, #160	; 0xa0
 80060bc:	438a      	bics	r2, r1
 80060be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80060c0:	f7fd fdc0 	bl	8003c44 <HAL_GetTick>
 80060c4:	0003      	movs	r3, r0
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060c8:	e00a      	b.n	80060e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060ca:	f7fd fdbb 	bl	8003c44 <HAL_GetTick>
 80060ce:	0002      	movs	r2, r0
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1ad2      	subs	r2, r2, r3
 80060d4:	23fa      	movs	r3, #250	; 0xfa
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d901      	bls.n	80060e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e006      	b.n	80060ee <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	4013      	ands	r3, r2
 80060ea:	d0ee      	beq.n	80060ca <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	0018      	movs	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	b004      	add	sp, #16
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2240      	movs	r2, #64	; 0x40
 8006106:	4013      	ands	r3, r2
 8006108:	d11a      	bne.n	8006140 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2201      	movs	r2, #1
 8006110:	4252      	negs	r2, r2
 8006112:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006114:	f7fd fd96 	bl	8003c44 <HAL_GetTick>
 8006118:	0003      	movs	r3, r0
 800611a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800611c:	e00a      	b.n	8006134 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800611e:	f7fd fd91 	bl	8003c44 <HAL_GetTick>
 8006122:	0002      	movs	r2, r0
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	1ad2      	subs	r2, r2, r3
 8006128:	23fa      	movs	r3, #250	; 0xfa
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	429a      	cmp	r2, r3
 800612e:	d901      	bls.n	8006134 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e006      	b.n	8006142 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2240      	movs	r2, #64	; 0x40
 800613c:	4013      	ands	r3, r2
 800613e:	d0ee      	beq.n	800611e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	0018      	movs	r0, r3
 8006144:	46bd      	mov	sp, r7
 8006146:	b004      	add	sp, #16
 8006148:	bd80      	pop	{r7, pc}

0800614a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	0002      	movs	r2, r0
 8006152:	1dfb      	adds	r3, r7, #7
 8006154:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800615a:	230b      	movs	r3, #11
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	1dfa      	adds	r2, r7, #7
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006164:	e008      	b.n	8006178 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3301      	adds	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800616c:	220b      	movs	r2, #11
 800616e:	18bb      	adds	r3, r7, r2
 8006170:	18ba      	adds	r2, r7, r2
 8006172:	7812      	ldrb	r2, [r2, #0]
 8006174:	3a0a      	subs	r2, #10
 8006176:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006178:	230b      	movs	r3, #11
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b09      	cmp	r3, #9
 8006180:	d8f1      	bhi.n	8006166 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	b2da      	uxtb	r2, r3
 800618a:	230b      	movs	r3, #11
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	4313      	orrs	r3, r2
 8006192:	b2db      	uxtb	r3, r3
}
 8006194:	0018      	movs	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	b004      	add	sp, #16
 800619a:	bd80      	pop	{r7, pc}

0800619c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	0002      	movs	r2, r0
 80061a4:	1dfb      	adds	r3, r7, #7
 80061a6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80061a8:	1dfb      	adds	r3, r7, #7
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	001a      	movs	r2, r3
 80061b2:	0013      	movs	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	189b      	adds	r3, r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	1dfb      	adds	r3, r7, #7
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	210f      	movs	r1, #15
 80061c6:	400b      	ands	r3, r1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	18d3      	adds	r3, r2, r3
 80061cc:	b2db      	uxtb	r3, r3
}
 80061ce:	0018      	movs	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	b004      	add	sp, #16
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	5c9b      	ldrb	r3, [r3, r2]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e0ad      	b.n	800634e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	2101      	movs	r1, #1
 80061f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2221      	movs	r2, #33	; 0x21
 80061fe:	2102      	movs	r1, #2
 8006200:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	22ca      	movs	r2, #202	; 0xca
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2253      	movs	r2, #83	; 0x53
 8006210:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4013      	ands	r3, r2
 800621e:	d021      	beq.n	8006264 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8006220:	f7fd fd10 	bl	8003c44 <HAL_GetTick>
 8006224:	0003      	movs	r3, r0
 8006226:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006228:	e016      	b.n	8006258 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800622a:	f7fd fd0b 	bl	8003c44 <HAL_GetTick>
 800622e:	0002      	movs	r2, r0
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	23fa      	movs	r3, #250	; 0xfa
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	429a      	cmp	r2, r3
 800623a:	d90d      	bls.n	8006258 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	22ff      	movs	r2, #255	; 0xff
 8006242:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2221      	movs	r2, #33	; 0x21
 8006248:	2103      	movs	r1, #3
 800624a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	2100      	movs	r1, #0
 8006252:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e07a      	b.n	800634e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2204      	movs	r2, #4
 8006260:	4013      	ands	r3, r2
 8006262:	d1e2      	bne.n	800622a <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	493a      	ldr	r1, [pc, #232]	; (8006358 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8006270:	400a      	ands	r2, r1
 8006272:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	22ff      	movs	r2, #255	; 0xff
 800627c:	401a      	ands	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4936      	ldr	r1, [pc, #216]	; (800635c <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8006284:	430a      	orrs	r2, r1
 8006286:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006288:	f7fd fcdc 	bl	8003c44 <HAL_GetTick>
 800628c:	0003      	movs	r3, r0
 800628e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006290:	e016      	b.n	80062c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006292:	f7fd fcd7 	bl	8003c44 <HAL_GetTick>
 8006296:	0002      	movs	r2, r0
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	1ad2      	subs	r2, r2, r3
 800629c:	23fa      	movs	r3, #250	; 0xfa
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d90d      	bls.n	80062c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2221      	movs	r2, #33	; 0x21
 80062b0:	2103      	movs	r1, #3
 80062b2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	2100      	movs	r1, #0
 80062ba:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e046      	b.n	800634e <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2204      	movs	r2, #4
 80062c8:	4013      	ands	r3, r2
 80062ca:	d0e2      	beq.n	8006292 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2107      	movs	r1, #7
 80062e0:	438a      	bics	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6899      	ldr	r1, [r3, #8]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80062f4:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	4b19      	ldr	r3, [pc, #100]	; (8006360 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	0349      	lsls	r1, r1, #13
 80062fe:	430a      	orrs	r2, r1
 8006300:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006302:	4b17      	ldr	r3, [pc, #92]	; (8006360 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	4b16      	ldr	r3, [pc, #88]	; (8006360 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	0349      	lsls	r1, r1, #13
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2180      	movs	r1, #128	; 0x80
 800631c:	01c9      	lsls	r1, r1, #7
 800631e:	430a      	orrs	r2, r1
 8006320:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	00c9      	lsls	r1, r1, #3
 8006330:	430a      	orrs	r2, r1
 8006332:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	22ff      	movs	r2, #255	; 0xff
 800633a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2221      	movs	r2, #33	; 0x21
 8006340:	2101      	movs	r1, #1
 8006342:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	2100      	movs	r1, #0
 800634a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	0018      	movs	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	b006      	add	sp, #24
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	fffffbff 	.word	0xfffffbff
 800635c:	fffffb7f 	.word	0xfffffb7f
 8006360:	40010400 	.word	0x40010400

08006364 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	5c9b      	ldrb	r3, [r3, r2]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006376:	2302      	movs	r3, #2
 8006378:	e04e      	b.n	8006418 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	2101      	movs	r1, #1
 8006380:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2221      	movs	r2, #33	; 0x21
 8006386:	2102      	movs	r1, #2
 8006388:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	22ca      	movs	r2, #202	; 0xca
 8006390:	625a      	str	r2, [r3, #36]	; 0x24
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2253      	movs	r2, #83	; 0x53
 8006398:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	491e      	ldr	r1, [pc, #120]	; (8006420 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 80063a6:	400a      	ands	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	491b      	ldr	r1, [pc, #108]	; (8006424 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80063b6:	400a      	ands	r2, r1
 80063b8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80063ba:	f7fd fc43 	bl	8003c44 <HAL_GetTick>
 80063be:	0003      	movs	r3, r0
 80063c0:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80063c2:	e016      	b.n	80063f2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063c4:	f7fd fc3e 	bl	8003c44 <HAL_GetTick>
 80063c8:	0002      	movs	r2, r0
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1ad2      	subs	r2, r2, r3
 80063ce:	23fa      	movs	r3, #250	; 0xfa
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d90d      	bls.n	80063f2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	22ff      	movs	r2, #255	; 0xff
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2221      	movs	r2, #33	; 0x21
 80063e2:	2103      	movs	r1, #3
 80063e4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	2100      	movs	r1, #0
 80063ec:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e012      	b.n	8006418 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2204      	movs	r2, #4
 80063fa:	4013      	ands	r3, r2
 80063fc:	d0e2      	beq.n	80063c4 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	22ff      	movs	r2, #255	; 0xff
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2221      	movs	r2, #33	; 0x21
 800640a:	2101      	movs	r1, #1
 800640c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	2100      	movs	r1, #0
 8006414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	0018      	movs	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	b004      	add	sp, #16
 800641e:	bd80      	pop	{r7, pc}
 8006420:	fffffbff 	.word	0xfffffbff
 8006424:	ffffbfff 	.word	0xffffbfff

08006428 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4013      	ands	r3, r2
 800643c:	d00d      	beq.n	800645a <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	0018      	movs	r0, r3
 8006442:	f018 f9a5 	bl	801e790 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	22ff      	movs	r2, #255	; 0xff
 800644e:	401a      	ands	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4907      	ldr	r1, [pc, #28]	; (8006474 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8006456:	430a      	orrs	r2, r1
 8006458:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 800645c:	2280      	movs	r2, #128	; 0x80
 800645e:	0352      	lsls	r2, r2, #13
 8006460:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2221      	movs	r2, #33	; 0x21
 8006466:	2101      	movs	r1, #1
 8006468:	5499      	strb	r1, [r3, r2]
}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b002      	add	sp, #8
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	fffffb7f 	.word	0xfffffb7f
 8006478:	40010400 	.word	0x40010400

0800647c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006484:	46c0      	nop			; (mov r8, r8)
 8006486:	46bd      	mov	sp, r7
 8006488:	b002      	add	sp, #8
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e059      	b.n	8006552 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2251      	movs	r2, #81	; 0x51
 80064a8:	5c9b      	ldrb	r3, [r3, r2]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d107      	bne.n	80064c0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2250      	movs	r2, #80	; 0x50
 80064b4:	2100      	movs	r1, #0
 80064b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f7fd f87e 	bl	80035bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2251      	movs	r2, #81	; 0x51
 80064c4:	2102      	movs	r1, #2
 80064c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2140      	movs	r1, #64	; 0x40
 80064d4:	438a      	bics	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6999      	ldr	r1, [r3, #24]
 80064f8:	2380      	movs	r3, #128	; 0x80
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	400b      	ands	r3, r1
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	431a      	orrs	r2, r3
 800650c:	0011      	movs	r1, r2
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	2204      	movs	r2, #4
 8006522:	4013      	ands	r3, r2
 8006524:	0019      	movs	r1, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4907      	ldr	r1, [pc, #28]	; (800655c <HAL_SPI_Init+0xd0>)
 800653e:	400a      	ands	r2, r1
 8006540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2251      	movs	r2, #81	; 0x51
 800654c:	2101      	movs	r1, #1
 800654e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b002      	add	sp, #8
 8006558:	bd80      	pop	{r7, pc}
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	fffff7ff 	.word	0xfffff7ff

08006560 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	001a      	movs	r2, r3
 800656e:	1cbb      	adds	r3, r7, #2
 8006570:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006572:	2301      	movs	r3, #1
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006576:	232b      	movs	r3, #43	; 0x2b
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	2200      	movs	r2, #0
 800657c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2250      	movs	r2, #80	; 0x50
 8006582:	5c9b      	ldrb	r3, [r3, r2]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_SPI_TransmitReceive+0x2c>
 8006588:	2302      	movs	r3, #2
 800658a:	e1a1      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x370>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2250      	movs	r2, #80	; 0x50
 8006590:	2101      	movs	r1, #1
 8006592:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006594:	f7fd fb56 	bl	8003c44 <HAL_GetTick>
 8006598:	0003      	movs	r3, r0
 800659a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800659c:	2023      	movs	r0, #35	; 0x23
 800659e:	183b      	adds	r3, r7, r0
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	2151      	movs	r1, #81	; 0x51
 80065a4:	5c52      	ldrb	r2, [r2, r1]
 80065a6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065ae:	231a      	movs	r3, #26
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	1cba      	adds	r2, r7, #2
 80065b4:	8812      	ldrh	r2, [r2, #0]
 80065b6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065b8:	183b      	adds	r3, r7, r0
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d012      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x86>
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	2382      	movs	r3, #130	; 0x82
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d108      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <HAL_SPI_TransmitReceive+0x7c>
 80065d2:	2323      	movs	r3, #35	; 0x23
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d004      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80065dc:	232b      	movs	r3, #43	; 0x2b
 80065de:	18fb      	adds	r3, r7, r3
 80065e0:	2202      	movs	r2, #2
 80065e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80065e4:	e169      	b.n	80068ba <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <HAL_SPI_TransmitReceive+0x9a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_SPI_TransmitReceive+0x9a>
 80065f2:	1cbb      	adds	r3, r7, #2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80065fa:	232b      	movs	r3, #43	; 0x2b
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	2201      	movs	r2, #1
 8006600:	701a      	strb	r2, [r3, #0]
    goto error;
 8006602:	e15a      	b.n	80068ba <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2251      	movs	r2, #81	; 0x51
 8006608:	5c9b      	ldrb	r3, [r3, r2]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b04      	cmp	r3, #4
 800660e:	d003      	beq.n	8006618 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2251      	movs	r2, #81	; 0x51
 8006614:	2105      	movs	r1, #5
 8006616:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1cba      	adds	r2, r7, #2
 8006628:	8812      	ldrh	r2, [r2, #0]
 800662a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	1cba      	adds	r2, r7, #2
 8006630:	8812      	ldrh	r2, [r2, #0]
 8006632:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	1cba      	adds	r2, r7, #2
 800663e:	8812      	ldrh	r2, [r2, #0]
 8006640:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1cba      	adds	r2, r7, #2
 8006646:	8812      	ldrh	r2, [r2, #0]
 8006648:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2240      	movs	r2, #64	; 0x40
 800665e:	4013      	ands	r3, r2
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d007      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2140      	movs	r1, #64	; 0x40
 8006670:	430a      	orrs	r2, r1
 8006672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	2380      	movs	r3, #128	; 0x80
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	429a      	cmp	r2, r3
 800667e:	d000      	beq.n	8006682 <HAL_SPI_TransmitReceive+0x122>
 8006680:	e07a      	b.n	8006778 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <HAL_SPI_TransmitReceive+0x134>
 800668a:	231a      	movs	r3, #26
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d166      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	881a      	ldrh	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	1c9a      	adds	r2, r3, #2
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b8:	e053      	b.n	8006762 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2202      	movs	r2, #2
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d11b      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x1a0>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d016      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x1a0>
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d113      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	881a      	ldrh	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	1c9a      	adds	r2, r3, #2
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2201      	movs	r2, #1
 8006708:	4013      	ands	r3, r2
 800670a:	2b01      	cmp	r3, #1
 800670c:	d119      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x1e2>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d014      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	b292      	uxth	r2, r2
 8006724:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800673e:	2301      	movs	r3, #1
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006742:	f7fd fa7f 	bl	8003c44 <HAL_GetTick>
 8006746:	0002      	movs	r2, r0
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800674e:	429a      	cmp	r2, r3
 8006750:	d807      	bhi.n	8006762 <HAL_SPI_TransmitReceive+0x202>
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	3301      	adds	r3, #1
 8006756:	d004      	beq.n	8006762 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8006758:	232b      	movs	r3, #43	; 0x2b
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	2203      	movs	r2, #3
 800675e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006760:	e0ab      	b.n	80068ba <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1a6      	bne.n	80066ba <HAL_SPI_TransmitReceive+0x15a>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1a1      	bne.n	80066ba <HAL_SPI_TransmitReceive+0x15a>
 8006776:	e07f      	b.n	8006878 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_SPI_TransmitReceive+0x22c>
 8006780:	231a      	movs	r3, #26
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d000      	beq.n	800678c <HAL_SPI_TransmitReceive+0x22c>
 800678a:	e06b      	b.n	8006864 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	330c      	adds	r3, #12
 8006796:	7812      	ldrb	r2, [r2, #0]
 8006798:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b2:	e057      	b.n	8006864 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2202      	movs	r2, #2
 80067bc:	4013      	ands	r3, r2
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d11c      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x29c>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d017      	beq.n	80067fc <HAL_SPI_TransmitReceive+0x29c>
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d114      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	7812      	ldrb	r2, [r2, #0]
 80067de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2201      	movs	r2, #1
 8006804:	4013      	ands	r3, r2
 8006806:	2b01      	cmp	r3, #1
 8006808:	d119      	bne.n	800683e <HAL_SPI_TransmitReceive+0x2de>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d014      	beq.n	800683e <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800683a:	2301      	movs	r3, #1
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800683e:	f7fd fa01 	bl	8003c44 <HAL_GetTick>
 8006842:	0002      	movs	r2, r0
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684a:	429a      	cmp	r2, r3
 800684c:	d802      	bhi.n	8006854 <HAL_SPI_TransmitReceive+0x2f4>
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	3301      	adds	r3, #1
 8006852:	d102      	bne.n	800685a <HAL_SPI_TransmitReceive+0x2fa>
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	2b00      	cmp	r3, #0
 8006858:	d104      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800685a:	232b      	movs	r3, #43	; 0x2b
 800685c:	18fb      	adds	r3, r7, r3
 800685e:	2203      	movs	r2, #3
 8006860:	701a      	strb	r2, [r3, #0]
        goto error;
 8006862:	e02a      	b.n	80068ba <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1a2      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x254>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d19d      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	0018      	movs	r0, r3
 8006880:	f000 f89a 	bl	80069b8 <SPI_EndRxTxTransaction>
 8006884:	1e03      	subs	r3, r0, #0
 8006886:	d007      	beq.n	8006898 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8006888:	232b      	movs	r3, #43	; 0x2b
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	2201      	movs	r2, #1
 800688e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006896:	e010      	b.n	80068ba <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	e000      	b.n	80068ba <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80068b8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2251      	movs	r2, #81	; 0x51
 80068be:	2101      	movs	r1, #1
 80068c0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2250      	movs	r2, #80	; 0x50
 80068c6:	2100      	movs	r1, #0
 80068c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80068ca:	232b      	movs	r3, #43	; 0x2b
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	781b      	ldrb	r3, [r3, #0]
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b00c      	add	sp, #48	; 0x30
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	1dfb      	adds	r3, r7, #7
 80068e6:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068e8:	e050      	b.n	800698c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	d04d      	beq.n	800698c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80068f0:	f7fd f9a8 	bl	8003c44 <HAL_GetTick>
 80068f4:	0002      	movs	r2, r0
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d902      	bls.n	8006906 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d142      	bne.n	800698c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	21e0      	movs	r1, #224	; 0xe0
 8006912:	438a      	bics	r2, r1
 8006914:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	2382      	movs	r3, #130	; 0x82
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	429a      	cmp	r2, r3
 8006920:	d113      	bne.n	800694a <SPI_WaitFlagStateUntilTimeout+0x72>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	2380      	movs	r3, #128	; 0x80
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	429a      	cmp	r2, r3
 800692c:	d005      	beq.n	800693a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	429a      	cmp	r2, r3
 8006938:	d107      	bne.n	800694a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2140      	movs	r1, #64	; 0x40
 8006946:	438a      	bics	r2, r1
 8006948:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800694e:	2380      	movs	r3, #128	; 0x80
 8006950:	019b      	lsls	r3, r3, #6
 8006952:	429a      	cmp	r2, r3
 8006954:	d110      	bne.n	8006978 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4914      	ldr	r1, [pc, #80]	; (80069b4 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8006962:	400a      	ands	r2, r1
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2180      	movs	r1, #128	; 0x80
 8006972:	0189      	lsls	r1, r1, #6
 8006974:	430a      	orrs	r2, r1
 8006976:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2251      	movs	r2, #81	; 0x51
 800697c:	2101      	movs	r1, #1
 800697e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2250      	movs	r2, #80	; 0x50
 8006984:	2100      	movs	r1, #0
 8006986:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e00f      	b.n	80069ac <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	4013      	ands	r3, r2
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	425a      	negs	r2, r3
 800699c:	4153      	adcs	r3, r2
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	001a      	movs	r2, r3
 80069a2:	1dfb      	adds	r3, r7, #7
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d19f      	bne.n	80068ea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	0018      	movs	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	b004      	add	sp, #16
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	ffffdfff 	.word	0xffffdfff

080069b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	2382      	movs	r3, #130	; 0x82
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d112      	bne.n	80069f6 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	0013      	movs	r3, r2
 80069da:	2200      	movs	r2, #0
 80069dc:	2180      	movs	r1, #128	; 0x80
 80069de:	f7ff ff7b 	bl	80068d8 <SPI_WaitFlagStateUntilTimeout>
 80069e2:	1e03      	subs	r3, r0, #0
 80069e4:	d020      	beq.n	8006a28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	2220      	movs	r2, #32
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e019      	b.n	8006a2a <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2251      	movs	r2, #81	; 0x51
 80069fa:	5c9b      	ldrb	r3, [r3, r2]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b05      	cmp	r3, #5
 8006a00:	d112      	bne.n	8006a28 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	0013      	movs	r3, r2
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2101      	movs	r1, #1
 8006a10:	f7ff ff62 	bl	80068d8 <SPI_WaitFlagStateUntilTimeout>
 8006a14:	1e03      	subs	r3, r0, #0
 8006a16:	d007      	beq.n	8006a28 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e000      	b.n	8006a2a <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b004      	add	sp, #16
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e044      	b.n	8006ad0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d107      	bne.n	8006a5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2270      	movs	r2, #112	; 0x70
 8006a52:	2100      	movs	r1, #0
 8006a54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f7fc ffef 	bl	8003a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2224      	movs	r2, #36	; 0x24
 8006a62:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2101      	movs	r1, #1
 8006a70:	438a      	bics	r2, r1
 8006a72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 fa06 	bl	8006e88 <UART_SetConfig>
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e024      	b.n	8006ad0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	0018      	movs	r0, r3
 8006a92:	f000 fd2d 	bl	80074f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	490d      	ldr	r1, [pc, #52]	; (8006ad8 <HAL_UART_Init+0xa4>)
 8006aa2:	400a      	ands	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	212a      	movs	r1, #42	; 0x2a
 8006ab2:	438a      	bics	r2, r1
 8006ab4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 fdc5 	bl	8007658 <UART_CheckIdleState>
 8006ace:	0003      	movs	r3, r0
}
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b002      	add	sp, #8
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	ffffb7ff 	.word	0xffffb7ff

08006adc <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	1dbb      	adds	r3, r7, #6
 8006aea:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d000      	beq.n	8006af6 <HAL_UART_Transmit+0x1a>
 8006af4:	e094      	b.n	8006c20 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_UART_Transmit+0x28>
 8006afc:	1dbb      	adds	r3, r7, #6
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e08c      	b.n	8006c22 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	015b      	lsls	r3, r3, #5
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d109      	bne.n	8006b28 <HAL_UART_Transmit+0x4c>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	4013      	ands	r3, r2
 8006b22:	d001      	beq.n	8006b28 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e07c      	b.n	8006c22 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2270      	movs	r2, #112	; 0x70
 8006b2c:	5c9b      	ldrb	r3, [r3, r2]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Transmit+0x5a>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e075      	b.n	8006c22 <HAL_UART_Transmit+0x146>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2270      	movs	r2, #112	; 0x70
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2221      	movs	r2, #33	; 0x21
 8006b48:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006b4a:	f7fd f87b 	bl	8003c44 <HAL_GetTick>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1dba      	adds	r2, r7, #6
 8006b56:	2150      	movs	r1, #80	; 0x50
 8006b58:	8812      	ldrh	r2, [r2, #0]
 8006b5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	1dba      	adds	r2, r7, #6
 8006b60:	2152      	movs	r1, #82	; 0x52
 8006b62:	8812      	ldrh	r2, [r2, #0]
 8006b64:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	2380      	movs	r3, #128	; 0x80
 8006b6c:	015b      	lsls	r3, r3, #5
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d108      	bne.n	8006b84 <HAL_UART_Transmit+0xa8>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	e003      	b.n	8006b8c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b8c:	e02c      	b.n	8006be8 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	0013      	movs	r3, r2
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2180      	movs	r1, #128	; 0x80
 8006b9c:	f000 fda2 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 8006ba0:	1e03      	subs	r3, r0, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e03c      	b.n	8006c22 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	05d2      	lsls	r2, r2, #23
 8006bba:	0dd2      	lsrs	r2, r2, #23
 8006bbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e007      	b.n	8006bd6 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2252      	movs	r2, #82	; 0x52
 8006bda:	5a9b      	ldrh	r3, [r3, r2]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b299      	uxth	r1, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2252      	movs	r2, #82	; 0x52
 8006be6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2252      	movs	r2, #82	; 0x52
 8006bec:	5a9b      	ldrh	r3, [r3, r2]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1cc      	bne.n	8006b8e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	0013      	movs	r3, r2
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2140      	movs	r1, #64	; 0x40
 8006c02:	f000 fd6f 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 8006c06:	1e03      	subs	r3, r0, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e009      	b.n	8006c22 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2270      	movs	r2, #112	; 0x70
 8006c18:	2100      	movs	r1, #0
 8006c1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e000      	b.n	8006c22 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
  }
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b008      	add	sp, #32
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	220f      	movs	r2, #15
 8006c50:	4013      	ands	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d112      	bne.n	8006c80 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d00e      	beq.n	8006c80 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2220      	movs	r2, #32
 8006c66:	4013      	ands	r3, r2
 8006c68:	d00a      	beq.n	8006c80 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d100      	bne.n	8006c74 <HAL_UART_IRQHandler+0x48>
 8006c72:	e0f6      	b.n	8006e62 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	0010      	movs	r0, r2
 8006c7c:	4798      	blx	r3
      }
      return;
 8006c7e:	e0f0      	b.n	8006e62 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d100      	bne.n	8006c88 <HAL_UART_IRQHandler+0x5c>
 8006c86:	e0b8      	b.n	8006dfa <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d105      	bne.n	8006c9c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	2390      	movs	r3, #144	; 0x90
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4013      	ands	r3, r2
 8006c98:	d100      	bne.n	8006c9c <HAL_UART_IRQHandler+0x70>
 8006c9a:	e0ae      	b.n	8006dfa <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x96>
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	2380      	movs	r3, #128	; 0x80
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	4013      	ands	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x96>
    {

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cba:	2201      	movs	r2, #1
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d00d      	beq.n	8006ce6 <HAL_UART_IRQHandler+0xba>
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d009      	beq.n	8006ce6 <HAL_UART_IRQHandler+0xba>
    {
    	 // log_info("error frame stm32l0xx_hal_uart L2245");

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cde:	2204      	movs	r2, #4
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	4013      	ands	r3, r2
 8006cec:	d00d      	beq.n	8006d0a <HAL_UART_IRQHandler+0xde>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d02:	2202      	movs	r2, #2
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d011      	beq.n	8006d36 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2220      	movs	r2, #32
 8006d16:	4013      	ands	r3, r2
 8006d18:	d103      	bne.n	8006d22 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d20:	d009      	beq.n	8006d36 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2208      	movs	r2, #8
 8006d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d2e:	2208      	movs	r2, #8
 8006d30:	431a      	orrs	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d100      	bne.n	8006d40 <HAL_UART_IRQHandler+0x114>
 8006d3e:	e092      	b.n	8006e66 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	2220      	movs	r2, #32
 8006d44:	4013      	ands	r3, r2
 8006d46:	d00c      	beq.n	8006d62 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	d008      	beq.n	8006d62 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	0010      	movs	r0, r2
 8006d60:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d66:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2240      	movs	r2, #64	; 0x40
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d003      	beq.n	8006d7e <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d7c:	d033      	beq.n	8006de6 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 fcf9 	bl	8007778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2240      	movs	r2, #64	; 0x40
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d123      	bne.n	8006ddc <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2140      	movs	r1, #64	; 0x40
 8006da0:	438a      	bics	r2, r1
 8006da2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d012      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db0:	4a30      	ldr	r2, [pc, #192]	; (8006e74 <HAL_UART_IRQHandler+0x248>)
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7fd fadb 	bl	8004374 <HAL_DMA_Abort_IT>
 8006dbe:	1e03      	subs	r3, r0, #0
 8006dc0:	d019      	beq.n	8006df6 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dcc:	0018      	movs	r0, r3
 8006dce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd0:	e011      	b.n	8006df6 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f017 f83b 	bl	801de50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	e00c      	b.n	8006df6 <HAL_UART_IRQHandler+0x1ca>
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/

          HAL_UART_ErrorCallback(huart);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0018      	movs	r0, r3
 8006de0:	f017 f836 	bl	801de50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	e007      	b.n	8006df6 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0018      	movs	r0, r3
 8006dea:	f017 f831 	bl	801de50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006df4:	e037      	b.n	8006e66 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df6:	46c0      	nop			; (mov r8, r8)
    return;
 8006df8:	e035      	b.n	8006e66 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	2380      	movs	r3, #128	; 0x80
 8006dfe:	035b      	lsls	r3, r3, #13
 8006e00:	4013      	ands	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_UART_IRQHandler+0x1f6>
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	03db      	lsls	r3, r3, #15
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	0352      	lsls	r2, r2, #13
 8006e16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f017 fae6 	bl	801e3ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e20:	e024      	b.n	8006e6c <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	2280      	movs	r2, #128	; 0x80
 8006e26:	4013      	ands	r3, r2
 8006e28:	d00d      	beq.n	8006e46 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2280      	movs	r2, #128	; 0x80
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d009      	beq.n	8006e46 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d017      	beq.n	8006e6a <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	0010      	movs	r0, r2
 8006e42:	4798      	blx	r3
    }
    return;
 8006e44:	e011      	b.n	8006e6a <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	2240      	movs	r2, #64	; 0x40
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	d00e      	beq.n	8006e6c <HAL_UART_IRQHandler+0x240>
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	2240      	movs	r2, #64	; 0x40
 8006e52:	4013      	ands	r3, r2
 8006e54:	d00a      	beq.n	8006e6c <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 fcc4 	bl	80077e6 <UART_EndTransmit_IT>
    return;
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	e004      	b.n	8006e6c <HAL_UART_IRQHandler+0x240>
      return;
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	e002      	b.n	8006e6c <HAL_UART_IRQHandler+0x240>
    return;
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	e000      	b.n	8006e6c <HAL_UART_IRQHandler+0x240>
    return;
 8006e6a:	46c0      	nop			; (mov r8, r8)
  }

}
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	b008      	add	sp, #32
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	080077b9 	.word	0x080077b9

08006e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e80:	46c0      	nop			; (mov r8, r8)
 8006e82:	46bd      	mov	sp, r7
 8006e84:	b002      	add	sp, #8
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e88:	b5b0      	push	{r4, r5, r7, lr}
 8006e8a:	b08e      	sub	sp, #56	; 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006e90:	231b      	movs	r3, #27
 8006e92:	2218      	movs	r2, #24
 8006e94:	4694      	mov	ip, r2
 8006e96:	44bc      	add	ip, r7
 8006e98:	4463      	add	r3, ip
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ea2:	2313      	movs	r3, #19
 8006ea4:	2218      	movs	r2, #24
 8006ea6:	4694      	mov	ip, r2
 8006ea8:	44bc      	add	ip, r7
 8006eaa:	4463      	add	r3, ip
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4aca      	ldr	r2, [pc, #808]	; (80071fc <UART_SetConfig+0x374>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	0019      	movs	r1, r3
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4ac5      	ldr	r2, [pc, #788]	; (8007200 <UART_SetConfig+0x378>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	0019      	movs	r1, r3
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4abf      	ldr	r2, [pc, #764]	; (8007204 <UART_SetConfig+0x37c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d004      	beq.n	8006f14 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f10:	4313      	orrs	r3, r2
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	4abb      	ldr	r2, [pc, #748]	; (8007208 <UART_SetConfig+0x380>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	0019      	movs	r1, r3
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4ab7      	ldr	r2, [pc, #732]	; (800720c <UART_SetConfig+0x384>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d134      	bne.n	8006f9e <UART_SetConfig+0x116>
 8006f34:	4bb6      	ldr	r3, [pc, #728]	; (8007210 <UART_SetConfig+0x388>)
 8006f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f38:	2203      	movs	r2, #3
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d015      	beq.n	8006f6c <UART_SetConfig+0xe4>
 8006f40:	d304      	bcc.n	8006f4c <UART_SetConfig+0xc4>
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d00a      	beq.n	8006f5c <UART_SetConfig+0xd4>
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d018      	beq.n	8006f7c <UART_SetConfig+0xf4>
 8006f4a:	e01f      	b.n	8006f8c <UART_SetConfig+0x104>
 8006f4c:	231b      	movs	r3, #27
 8006f4e:	2218      	movs	r2, #24
 8006f50:	4694      	mov	ip, r2
 8006f52:	44bc      	add	ip, r7
 8006f54:	4463      	add	r3, ip
 8006f56:	2201      	movs	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e0c5      	b.n	80070e8 <UART_SetConfig+0x260>
 8006f5c:	231b      	movs	r3, #27
 8006f5e:	2218      	movs	r2, #24
 8006f60:	4694      	mov	ip, r2
 8006f62:	44bc      	add	ip, r7
 8006f64:	4463      	add	r3, ip
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	e0bd      	b.n	80070e8 <UART_SetConfig+0x260>
 8006f6c:	231b      	movs	r3, #27
 8006f6e:	2218      	movs	r2, #24
 8006f70:	4694      	mov	ip, r2
 8006f72:	44bc      	add	ip, r7
 8006f74:	4463      	add	r3, ip
 8006f76:	2204      	movs	r2, #4
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	e0b5      	b.n	80070e8 <UART_SetConfig+0x260>
 8006f7c:	231b      	movs	r3, #27
 8006f7e:	2218      	movs	r2, #24
 8006f80:	4694      	mov	ip, r2
 8006f82:	44bc      	add	ip, r7
 8006f84:	4463      	add	r3, ip
 8006f86:	2208      	movs	r2, #8
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	e0ad      	b.n	80070e8 <UART_SetConfig+0x260>
 8006f8c:	231b      	movs	r3, #27
 8006f8e:	2218      	movs	r2, #24
 8006f90:	4694      	mov	ip, r2
 8006f92:	44bc      	add	ip, r7
 8006f94:	4463      	add	r3, ip
 8006f96:	2210      	movs	r2, #16
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	e0a4      	b.n	80070e8 <UART_SetConfig+0x260>
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a9c      	ldr	r2, [pc, #624]	; (8007214 <UART_SetConfig+0x38c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d137      	bne.n	8007018 <UART_SetConfig+0x190>
 8006fa8:	4b99      	ldr	r3, [pc, #612]	; (8007210 <UART_SetConfig+0x388>)
 8006faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fac:	220c      	movs	r2, #12
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d018      	beq.n	8006fe6 <UART_SetConfig+0x15e>
 8006fb4:	d802      	bhi.n	8006fbc <UART_SetConfig+0x134>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <UART_SetConfig+0x13e>
 8006fba:	e024      	b.n	8007006 <UART_SetConfig+0x17e>
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d00a      	beq.n	8006fd6 <UART_SetConfig+0x14e>
 8006fc0:	2b0c      	cmp	r3, #12
 8006fc2:	d018      	beq.n	8006ff6 <UART_SetConfig+0x16e>
 8006fc4:	e01f      	b.n	8007006 <UART_SetConfig+0x17e>
 8006fc6:	231b      	movs	r3, #27
 8006fc8:	2218      	movs	r2, #24
 8006fca:	4694      	mov	ip, r2
 8006fcc:	44bc      	add	ip, r7
 8006fce:	4463      	add	r3, ip
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	e088      	b.n	80070e8 <UART_SetConfig+0x260>
 8006fd6:	231b      	movs	r3, #27
 8006fd8:	2218      	movs	r2, #24
 8006fda:	4694      	mov	ip, r2
 8006fdc:	44bc      	add	ip, r7
 8006fde:	4463      	add	r3, ip
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e080      	b.n	80070e8 <UART_SetConfig+0x260>
 8006fe6:	231b      	movs	r3, #27
 8006fe8:	2218      	movs	r2, #24
 8006fea:	4694      	mov	ip, r2
 8006fec:	44bc      	add	ip, r7
 8006fee:	4463      	add	r3, ip
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	e078      	b.n	80070e8 <UART_SetConfig+0x260>
 8006ff6:	231b      	movs	r3, #27
 8006ff8:	2218      	movs	r2, #24
 8006ffa:	4694      	mov	ip, r2
 8006ffc:	44bc      	add	ip, r7
 8006ffe:	4463      	add	r3, ip
 8007000:	2208      	movs	r2, #8
 8007002:	701a      	strb	r2, [r3, #0]
 8007004:	e070      	b.n	80070e8 <UART_SetConfig+0x260>
 8007006:	231b      	movs	r3, #27
 8007008:	2218      	movs	r2, #24
 800700a:	4694      	mov	ip, r2
 800700c:	44bc      	add	ip, r7
 800700e:	4463      	add	r3, ip
 8007010:	2210      	movs	r2, #16
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	46c0      	nop			; (mov r8, r8)
 8007016:	e067      	b.n	80070e8 <UART_SetConfig+0x260>
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a7e      	ldr	r2, [pc, #504]	; (8007218 <UART_SetConfig+0x390>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d107      	bne.n	8007032 <UART_SetConfig+0x1aa>
 8007022:	231b      	movs	r3, #27
 8007024:	2218      	movs	r2, #24
 8007026:	4694      	mov	ip, r2
 8007028:	44bc      	add	ip, r7
 800702a:	4463      	add	r3, ip
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e05a      	b.n	80070e8 <UART_SetConfig+0x260>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a79      	ldr	r2, [pc, #484]	; (800721c <UART_SetConfig+0x394>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d107      	bne.n	800704c <UART_SetConfig+0x1c4>
 800703c:	231b      	movs	r3, #27
 800703e:	2218      	movs	r2, #24
 8007040:	4694      	mov	ip, r2
 8007042:	44bc      	add	ip, r7
 8007044:	4463      	add	r3, ip
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e04d      	b.n	80070e8 <UART_SetConfig+0x260>
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a6c      	ldr	r2, [pc, #432]	; (8007204 <UART_SetConfig+0x37c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d141      	bne.n	80070da <UART_SetConfig+0x252>
 8007056:	4b6e      	ldr	r3, [pc, #440]	; (8007210 <UART_SetConfig+0x388>)
 8007058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800705a:	23c0      	movs	r3, #192	; 0xc0
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	4013      	ands	r3, r2
 8007060:	2280      	movs	r2, #128	; 0x80
 8007062:	00d2      	lsls	r2, r2, #3
 8007064:	4293      	cmp	r3, r2
 8007066:	d01f      	beq.n	80070a8 <UART_SetConfig+0x220>
 8007068:	2280      	movs	r2, #128	; 0x80
 800706a:	00d2      	lsls	r2, r2, #3
 800706c:	4293      	cmp	r3, r2
 800706e:	d802      	bhi.n	8007076 <UART_SetConfig+0x1ee>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d009      	beq.n	8007088 <UART_SetConfig+0x200>
 8007074:	e028      	b.n	80070c8 <UART_SetConfig+0x240>
 8007076:	2280      	movs	r2, #128	; 0x80
 8007078:	0112      	lsls	r2, r2, #4
 800707a:	4293      	cmp	r3, r2
 800707c:	d00c      	beq.n	8007098 <UART_SetConfig+0x210>
 800707e:	22c0      	movs	r2, #192	; 0xc0
 8007080:	0112      	lsls	r2, r2, #4
 8007082:	4293      	cmp	r3, r2
 8007084:	d018      	beq.n	80070b8 <UART_SetConfig+0x230>
 8007086:	e01f      	b.n	80070c8 <UART_SetConfig+0x240>
 8007088:	231b      	movs	r3, #27
 800708a:	2218      	movs	r2, #24
 800708c:	4694      	mov	ip, r2
 800708e:	44bc      	add	ip, r7
 8007090:	4463      	add	r3, ip
 8007092:	2200      	movs	r2, #0
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e027      	b.n	80070e8 <UART_SetConfig+0x260>
 8007098:	231b      	movs	r3, #27
 800709a:	2218      	movs	r2, #24
 800709c:	4694      	mov	ip, r2
 800709e:	44bc      	add	ip, r7
 80070a0:	4463      	add	r3, ip
 80070a2:	2202      	movs	r2, #2
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	e01f      	b.n	80070e8 <UART_SetConfig+0x260>
 80070a8:	231b      	movs	r3, #27
 80070aa:	2218      	movs	r2, #24
 80070ac:	4694      	mov	ip, r2
 80070ae:	44bc      	add	ip, r7
 80070b0:	4463      	add	r3, ip
 80070b2:	2204      	movs	r2, #4
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	e017      	b.n	80070e8 <UART_SetConfig+0x260>
 80070b8:	231b      	movs	r3, #27
 80070ba:	2218      	movs	r2, #24
 80070bc:	4694      	mov	ip, r2
 80070be:	44bc      	add	ip, r7
 80070c0:	4463      	add	r3, ip
 80070c2:	2208      	movs	r2, #8
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	e00f      	b.n	80070e8 <UART_SetConfig+0x260>
 80070c8:	231b      	movs	r3, #27
 80070ca:	2218      	movs	r2, #24
 80070cc:	4694      	mov	ip, r2
 80070ce:	44bc      	add	ip, r7
 80070d0:	4463      	add	r3, ip
 80070d2:	2210      	movs	r2, #16
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	e006      	b.n	80070e8 <UART_SetConfig+0x260>
 80070da:	231b      	movs	r3, #27
 80070dc:	2218      	movs	r2, #24
 80070de:	4694      	mov	ip, r2
 80070e0:	44bc      	add	ip, r7
 80070e2:	4463      	add	r3, ip
 80070e4:	2210      	movs	r2, #16
 80070e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a45      	ldr	r2, [pc, #276]	; (8007204 <UART_SetConfig+0x37c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d000      	beq.n	80070f4 <UART_SetConfig+0x26c>
 80070f2:	e09d      	b.n	8007230 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070f4:	231b      	movs	r3, #27
 80070f6:	2218      	movs	r2, #24
 80070f8:	4694      	mov	ip, r2
 80070fa:	44bc      	add	ip, r7
 80070fc:	4463      	add	r3, ip
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d00d      	beq.n	8007120 <UART_SetConfig+0x298>
 8007104:	dc02      	bgt.n	800710c <UART_SetConfig+0x284>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <UART_SetConfig+0x28e>
 800710a:	e01d      	b.n	8007148 <UART_SetConfig+0x2c0>
 800710c:	2b04      	cmp	r3, #4
 800710e:	d012      	beq.n	8007136 <UART_SetConfig+0x2ae>
 8007110:	2b08      	cmp	r3, #8
 8007112:	d015      	beq.n	8007140 <UART_SetConfig+0x2b8>
 8007114:	e018      	b.n	8007148 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007116:	f7fe f9e7 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 800711a:	0003      	movs	r3, r0
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800711e:	e01b      	b.n	8007158 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007120:	4b3b      	ldr	r3, [pc, #236]	; (8007210 <UART_SetConfig+0x388>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2210      	movs	r2, #16
 8007126:	4013      	ands	r3, r2
 8007128:	d002      	beq.n	8007130 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800712a:	4b3d      	ldr	r3, [pc, #244]	; (8007220 <UART_SetConfig+0x398>)
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800712e:	e013      	b.n	8007158 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007130:	4b3c      	ldr	r3, [pc, #240]	; (8007224 <UART_SetConfig+0x39c>)
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007134:	e010      	b.n	8007158 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007136:	f7fe f949 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 800713a:	0003      	movs	r3, r0
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800713e:	e00b      	b.n	8007158 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007140:	2380      	movs	r3, #128	; 0x80
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007146:	e007      	b.n	8007158 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007148:	2313      	movs	r3, #19
 800714a:	2218      	movs	r2, #24
 800714c:	4694      	mov	ip, r2
 800714e:	44bc      	add	ip, r7
 8007150:	4463      	add	r3, ip
 8007152:	2201      	movs	r2, #1
 8007154:	701a      	strb	r2, [r3, #0]
        break;
 8007156:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	2b00      	cmp	r3, #0
 800715c:	d100      	bne.n	8007160 <UART_SetConfig+0x2d8>
 800715e:	e1a6      	b.n	80074ae <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	0013      	movs	r3, r2
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	189b      	adds	r3, r3, r2
 800716a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716c:	429a      	cmp	r2, r3
 800716e:	d305      	bcc.n	800717c <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007178:	429a      	cmp	r2, r3
 800717a:	d907      	bls.n	800718c <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 800717c:	2313      	movs	r3, #19
 800717e:	2218      	movs	r2, #24
 8007180:	4694      	mov	ip, r2
 8007182:	44bc      	add	ip, r7
 8007184:	4463      	add	r3, ip
 8007186:	2201      	movs	r2, #1
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	e190      	b.n	80074ae <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	2300      	movs	r3, #0
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	6939      	ldr	r1, [r7, #16]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	000b      	movs	r3, r1
 800719a:	0e1b      	lsrs	r3, r3, #24
 800719c:	0010      	movs	r0, r2
 800719e:	0205      	lsls	r5, r0, #8
 80071a0:	431d      	orrs	r5, r3
 80071a2:	000b      	movs	r3, r1
 80071a4:	021c      	lsls	r4, r3, #8
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	68b8      	ldr	r0, [r7, #8]
 80071b4:	68f9      	ldr	r1, [r7, #12]
 80071b6:	1900      	adds	r0, r0, r4
 80071b8:	4169      	adcs	r1, r5
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	2300      	movs	r3, #0
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f7f9 f97e 	bl	80004c8 <__aeabi_uldivmod>
 80071cc:	0003      	movs	r3, r0
 80071ce:	000c      	movs	r4, r1
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	4a14      	ldr	r2, [pc, #80]	; (8007228 <UART_SetConfig+0x3a0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d908      	bls.n	80071ec <UART_SetConfig+0x364>
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	4a13      	ldr	r2, [pc, #76]	; (800722c <UART_SetConfig+0x3a4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d804      	bhi.n	80071ec <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	e160      	b.n	80074ae <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 80071ec:	2313      	movs	r3, #19
 80071ee:	2218      	movs	r2, #24
 80071f0:	4694      	mov	ip, r2
 80071f2:	44bc      	add	ip, r7
 80071f4:	4463      	add	r3, ip
 80071f6:	2201      	movs	r2, #1
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e158      	b.n	80074ae <UART_SetConfig+0x626>
 80071fc:	efff69f3 	.word	0xefff69f3
 8007200:	ffffcfff 	.word	0xffffcfff
 8007204:	40004800 	.word	0x40004800
 8007208:	fffff4ff 	.word	0xfffff4ff
 800720c:	40013800 	.word	0x40013800
 8007210:	40021000 	.word	0x40021000
 8007214:	40004400 	.word	0x40004400
 8007218:	40004c00 	.word	0x40004c00
 800721c:	40005000 	.word	0x40005000
 8007220:	003d0900 	.word	0x003d0900
 8007224:	00f42400 	.word	0x00f42400
 8007228:	000002ff 	.word	0x000002ff
 800722c:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	2380      	movs	r3, #128	; 0x80
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	429a      	cmp	r2, r3
 800723a:	d000      	beq.n	800723e <UART_SetConfig+0x3b6>
 800723c:	e0a9      	b.n	8007392 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800723e:	231b      	movs	r3, #27
 8007240:	2218      	movs	r2, #24
 8007242:	4694      	mov	ip, r2
 8007244:	44bc      	add	ip, r7
 8007246:	4463      	add	r3, ip
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b08      	cmp	r3, #8
 800724c:	d86d      	bhi.n	800732a <UART_SetConfig+0x4a2>
 800724e:	009a      	lsls	r2, r3, #2
 8007250:	4b9f      	ldr	r3, [pc, #636]	; (80074d0 <UART_SetConfig+0x648>)
 8007252:	18d3      	adds	r3, r2, r3
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007258:	f7fe f946 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 800725c:	0003      	movs	r3, r0
 800725e:	005a      	lsls	r2, r3, #1
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	18d2      	adds	r2, r2, r3
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	0019      	movs	r1, r3
 800726e:	0010      	movs	r0, r2
 8007270:	f7f8 ff52 	bl	8000118 <__udivsi3>
 8007274:	0003      	movs	r3, r0
 8007276:	b29b      	uxth	r3, r3
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800727a:	e05e      	b.n	800733a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800727c:	f7fe f94a 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8007280:	0003      	movs	r3, r0
 8007282:	005a      	lsls	r2, r3, #1
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	18d2      	adds	r2, r2, r3
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	0019      	movs	r1, r3
 8007292:	0010      	movs	r0, r2
 8007294:	f7f8 ff40 	bl	8000118 <__udivsi3>
 8007298:	0003      	movs	r3, r0
 800729a:	b29b      	uxth	r3, r3
 800729c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800729e:	e04c      	b.n	800733a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072a0:	4b8c      	ldr	r3, [pc, #560]	; (80074d4 <UART_SetConfig+0x64c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2210      	movs	r2, #16
 80072a6:	4013      	ands	r3, r2
 80072a8:	d00e      	beq.n	80072c8 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	4a89      	ldr	r2, [pc, #548]	; (80074d8 <UART_SetConfig+0x650>)
 80072b2:	189a      	adds	r2, r3, r2
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	0019      	movs	r1, r3
 80072ba:	0010      	movs	r0, r2
 80072bc:	f7f8 ff2c 	bl	8000118 <__udivsi3>
 80072c0:	0003      	movs	r3, r0
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80072c6:	e038      	b.n	800733a <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	4a83      	ldr	r2, [pc, #524]	; (80074dc <UART_SetConfig+0x654>)
 80072d0:	189a      	adds	r2, r3, r2
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	0019      	movs	r1, r3
 80072d8:	0010      	movs	r0, r2
 80072da:	f7f8 ff1d 	bl	8000118 <__udivsi3>
 80072de:	0003      	movs	r3, r0
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072e4:	e029      	b.n	800733a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80072e6:	f7fe f871 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 80072ea:	0003      	movs	r3, r0
 80072ec:	005a      	lsls	r2, r3, #1
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	18d2      	adds	r2, r2, r3
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	0019      	movs	r1, r3
 80072fc:	0010      	movs	r0, r2
 80072fe:	f7f8 ff0b 	bl	8000118 <__udivsi3>
 8007302:	0003      	movs	r3, r0
 8007304:	b29b      	uxth	r3, r3
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007308:	e017      	b.n	800733a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	085b      	lsrs	r3, r3, #1
 8007310:	2280      	movs	r2, #128	; 0x80
 8007312:	0252      	lsls	r2, r2, #9
 8007314:	189a      	adds	r2, r3, r2
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	0019      	movs	r1, r3
 800731c:	0010      	movs	r0, r2
 800731e:	f7f8 fefb 	bl	8000118 <__udivsi3>
 8007322:	0003      	movs	r3, r0
 8007324:	b29b      	uxth	r3, r3
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007328:	e007      	b.n	800733a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800732a:	2313      	movs	r3, #19
 800732c:	2218      	movs	r2, #24
 800732e:	4694      	mov	ip, r2
 8007330:	44bc      	add	ip, r7
 8007332:	4463      	add	r3, ip
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
        break;
 8007338:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	2b0f      	cmp	r3, #15
 800733e:	d920      	bls.n	8007382 <UART_SetConfig+0x4fa>
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	4a67      	ldr	r2, [pc, #412]	; (80074e0 <UART_SetConfig+0x658>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d81c      	bhi.n	8007382 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	b29a      	uxth	r2, r3
 800734c:	200a      	movs	r0, #10
 800734e:	2418      	movs	r4, #24
 8007350:	193b      	adds	r3, r7, r4
 8007352:	181b      	adds	r3, r3, r0
 8007354:	210f      	movs	r1, #15
 8007356:	438a      	bics	r2, r1
 8007358:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	b29b      	uxth	r3, r3
 8007360:	2207      	movs	r2, #7
 8007362:	4013      	ands	r3, r2
 8007364:	b299      	uxth	r1, r3
 8007366:	193b      	adds	r3, r7, r4
 8007368:	181b      	adds	r3, r3, r0
 800736a:	193a      	adds	r2, r7, r4
 800736c:	1812      	adds	r2, r2, r0
 800736e:	8812      	ldrh	r2, [r2, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	193a      	adds	r2, r7, r4
 800737a:	1812      	adds	r2, r2, r0
 800737c:	8812      	ldrh	r2, [r2, #0]
 800737e:	60da      	str	r2, [r3, #12]
 8007380:	e095      	b.n	80074ae <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8007382:	2313      	movs	r3, #19
 8007384:	2218      	movs	r2, #24
 8007386:	4694      	mov	ip, r2
 8007388:	44bc      	add	ip, r7
 800738a:	4463      	add	r3, ip
 800738c:	2201      	movs	r2, #1
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e08d      	b.n	80074ae <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8007392:	231b      	movs	r3, #27
 8007394:	2218      	movs	r2, #24
 8007396:	4694      	mov	ip, r2
 8007398:	44bc      	add	ip, r7
 800739a:	4463      	add	r3, ip
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d86a      	bhi.n	8007478 <UART_SetConfig+0x5f0>
 80073a2:	009a      	lsls	r2, r3, #2
 80073a4:	4b4f      	ldr	r3, [pc, #316]	; (80074e4 <UART_SetConfig+0x65c>)
 80073a6:	18d3      	adds	r3, r2, r3
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80073ac:	f7fe f89c 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 80073b0:	0002      	movs	r2, r0
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	18d2      	adds	r2, r2, r3
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	0019      	movs	r1, r3
 80073c0:	0010      	movs	r0, r2
 80073c2:	f7f8 fea9 	bl	8000118 <__udivsi3>
 80073c6:	0003      	movs	r3, r0
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073cc:	e05c      	b.n	8007488 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80073ce:	f7fe f8a1 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 80073d2:	0002      	movs	r2, r0
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	085b      	lsrs	r3, r3, #1
 80073da:	18d2      	adds	r2, r2, r3
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	0019      	movs	r1, r3
 80073e2:	0010      	movs	r0, r2
 80073e4:	f7f8 fe98 	bl	8000118 <__udivsi3>
 80073e8:	0003      	movs	r3, r0
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073ee:	e04b      	b.n	8007488 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f0:	4b38      	ldr	r3, [pc, #224]	; (80074d4 <UART_SetConfig+0x64c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2210      	movs	r2, #16
 80073f6:	4013      	ands	r3, r2
 80073f8:	d00e      	beq.n	8007418 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	4a39      	ldr	r2, [pc, #228]	; (80074e8 <UART_SetConfig+0x660>)
 8007402:	189a      	adds	r2, r3, r2
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	0019      	movs	r1, r3
 800740a:	0010      	movs	r0, r2
 800740c:	f7f8 fe84 	bl	8000118 <__udivsi3>
 8007410:	0003      	movs	r3, r0
 8007412:	b29b      	uxth	r3, r3
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8007416:	e037      	b.n	8007488 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	4a33      	ldr	r2, [pc, #204]	; (80074ec <UART_SetConfig+0x664>)
 8007420:	189a      	adds	r2, r3, r2
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	0019      	movs	r1, r3
 8007428:	0010      	movs	r0, r2
 800742a:	f7f8 fe75 	bl	8000118 <__udivsi3>
 800742e:	0003      	movs	r3, r0
 8007430:	b29b      	uxth	r3, r3
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007434:	e028      	b.n	8007488 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007436:	f7fd ffc9 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 800743a:	0002      	movs	r2, r0
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	18d2      	adds	r2, r2, r3
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	0019      	movs	r1, r3
 800744a:	0010      	movs	r0, r2
 800744c:	f7f8 fe64 	bl	8000118 <__udivsi3>
 8007450:	0003      	movs	r3, r0
 8007452:	b29b      	uxth	r3, r3
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007456:	e017      	b.n	8007488 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	085b      	lsrs	r3, r3, #1
 800745e:	2280      	movs	r2, #128	; 0x80
 8007460:	0212      	lsls	r2, r2, #8
 8007462:	189a      	adds	r2, r3, r2
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	0019      	movs	r1, r3
 800746a:	0010      	movs	r0, r2
 800746c:	f7f8 fe54 	bl	8000118 <__udivsi3>
 8007470:	0003      	movs	r3, r0
 8007472:	b29b      	uxth	r3, r3
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007476:	e007      	b.n	8007488 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007478:	2313      	movs	r3, #19
 800747a:	2218      	movs	r2, #24
 800747c:	4694      	mov	ip, r2
 800747e:	44bc      	add	ip, r7
 8007480:	4463      	add	r3, ip
 8007482:	2201      	movs	r2, #1
 8007484:	701a      	strb	r2, [r3, #0]
        break;
 8007486:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	2b0f      	cmp	r3, #15
 800748c:	d908      	bls.n	80074a0 <UART_SetConfig+0x618>
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <UART_SetConfig+0x658>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d804      	bhi.n	80074a0 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800749c:	60da      	str	r2, [r3, #12]
 800749e:	e006      	b.n	80074ae <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80074a0:	2313      	movs	r3, #19
 80074a2:	2218      	movs	r2, #24
 80074a4:	4694      	mov	ip, r2
 80074a6:	44bc      	add	ip, r7
 80074a8:	4463      	add	r3, ip
 80074aa:	2201      	movs	r2, #1
 80074ac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	2200      	movs	r2, #0
 80074b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2200      	movs	r2, #0
 80074b8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80074ba:	2313      	movs	r3, #19
 80074bc:	2218      	movs	r2, #24
 80074be:	4694      	mov	ip, r2
 80074c0:	44bc      	add	ip, r7
 80074c2:	4463      	add	r3, ip
 80074c4:	781b      	ldrb	r3, [r3, #0]
}
 80074c6:	0018      	movs	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	b00e      	add	sp, #56	; 0x38
 80074cc:	bdb0      	pop	{r4, r5, r7, pc}
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	080202cc 	.word	0x080202cc
 80074d4:	40021000 	.word	0x40021000
 80074d8:	007a1200 	.word	0x007a1200
 80074dc:	01e84800 	.word	0x01e84800
 80074e0:	0000ffff 	.word	0x0000ffff
 80074e4:	080202f0 	.word	0x080202f0
 80074e8:	003d0900 	.word	0x003d0900
 80074ec:	00f42400 	.word	0x00f42400

080074f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2201      	movs	r2, #1
 80074fe:	4013      	ands	r3, r2
 8007500:	d00b      	beq.n	800751a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4a4a      	ldr	r2, [pc, #296]	; (8007634 <UART_AdvFeatureConfig+0x144>)
 800750a:	4013      	ands	r3, r2
 800750c:	0019      	movs	r1, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	2202      	movs	r2, #2
 8007520:	4013      	ands	r3, r2
 8007522:	d00b      	beq.n	800753c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4a43      	ldr	r2, [pc, #268]	; (8007638 <UART_AdvFeatureConfig+0x148>)
 800752c:	4013      	ands	r3, r2
 800752e:	0019      	movs	r1, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	2204      	movs	r2, #4
 8007542:	4013      	ands	r3, r2
 8007544:	d00b      	beq.n	800755e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a3b      	ldr	r2, [pc, #236]	; (800763c <UART_AdvFeatureConfig+0x14c>)
 800754e:	4013      	ands	r3, r2
 8007550:	0019      	movs	r1, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	2208      	movs	r2, #8
 8007564:	4013      	ands	r3, r2
 8007566:	d00b      	beq.n	8007580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	4a34      	ldr	r2, [pc, #208]	; (8007640 <UART_AdvFeatureConfig+0x150>)
 8007570:	4013      	ands	r3, r2
 8007572:	0019      	movs	r1, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	2210      	movs	r2, #16
 8007586:	4013      	ands	r3, r2
 8007588:	d00b      	beq.n	80075a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	4a2c      	ldr	r2, [pc, #176]	; (8007644 <UART_AdvFeatureConfig+0x154>)
 8007592:	4013      	ands	r3, r2
 8007594:	0019      	movs	r1, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2220      	movs	r2, #32
 80075a8:	4013      	ands	r3, r2
 80075aa:	d00b      	beq.n	80075c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	4a25      	ldr	r2, [pc, #148]	; (8007648 <UART_AdvFeatureConfig+0x158>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	0019      	movs	r1, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2240      	movs	r2, #64	; 0x40
 80075ca:	4013      	ands	r3, r2
 80075cc:	d01d      	beq.n	800760a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <UART_AdvFeatureConfig+0x15c>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	0019      	movs	r1, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	035b      	lsls	r3, r3, #13
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d10b      	bne.n	800760a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	4a15      	ldr	r2, [pc, #84]	; (8007650 <UART_AdvFeatureConfig+0x160>)
 80075fa:	4013      	ands	r3, r2
 80075fc:	0019      	movs	r1, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	2280      	movs	r2, #128	; 0x80
 8007610:	4013      	ands	r3, r2
 8007612:	d00b      	beq.n	800762c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	4a0e      	ldr	r2, [pc, #56]	; (8007654 <UART_AdvFeatureConfig+0x164>)
 800761c:	4013      	ands	r3, r2
 800761e:	0019      	movs	r1, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
  }
}
 800762c:	46c0      	nop			; (mov r8, r8)
 800762e:	46bd      	mov	sp, r7
 8007630:	b002      	add	sp, #8
 8007632:	bd80      	pop	{r7, pc}
 8007634:	fffdffff 	.word	0xfffdffff
 8007638:	fffeffff 	.word	0xfffeffff
 800763c:	fffbffff 	.word	0xfffbffff
 8007640:	ffff7fff 	.word	0xffff7fff
 8007644:	ffffefff 	.word	0xffffefff
 8007648:	ffffdfff 	.word	0xffffdfff
 800764c:	ffefffff 	.word	0xffefffff
 8007650:	ff9fffff 	.word	0xff9fffff
 8007654:	fff7ffff 	.word	0xfff7ffff

08007658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af02      	add	r7, sp, #8
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007666:	f7fc faed 	bl	8003c44 <HAL_GetTick>
 800766a:	0003      	movs	r3, r0
 800766c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2208      	movs	r2, #8
 8007676:	4013      	ands	r3, r2
 8007678:	2b08      	cmp	r3, #8
 800767a:	d10d      	bne.n	8007698 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	2380      	movs	r3, #128	; 0x80
 8007680:	0399      	lsls	r1, r3, #14
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <UART_CheckIdleState+0x88>)
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	0013      	movs	r3, r2
 800768a:	2200      	movs	r2, #0
 800768c:	f000 f82a 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 8007690:	1e03      	subs	r3, r0, #0
 8007692:	d001      	beq.n	8007698 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e01f      	b.n	80076d8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2204      	movs	r2, #4
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d10d      	bne.n	80076c2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	2380      	movs	r3, #128	; 0x80
 80076aa:	03d9      	lsls	r1, r3, #15
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <UART_CheckIdleState+0x88>)
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	0013      	movs	r3, r2
 80076b4:	2200      	movs	r2, #0
 80076b6:	f000 f815 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 80076ba:	1e03      	subs	r3, r0, #0
 80076bc:	d001      	beq.n	80076c2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e00a      	b.n	80076d8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2270      	movs	r2, #112	; 0x70
 80076d2:	2100      	movs	r1, #0
 80076d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	0018      	movs	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	b004      	add	sp, #16
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	01ffffff 	.word	0x01ffffff

080076e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	1dfb      	adds	r3, r7, #7
 80076f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f4:	e029      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	3301      	adds	r3, #1
 80076fa:	d026      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fc:	f7fc faa2 	bl	8003c44 <HAL_GetTick>
 8007700:	0002      	movs	r2, r0
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	429a      	cmp	r2, r3
 800770a:	d302      	bcc.n	8007712 <UART_WaitOnFlagUntilTimeout+0x2e>
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d11b      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4915      	ldr	r1, [pc, #84]	; (8007774 <UART_WaitOnFlagUntilTimeout+0x90>)
 800771e:	400a      	ands	r2, r1
 8007720:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2101      	movs	r1, #1
 800772e:	438a      	bics	r2, r1
 8007730:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2270      	movs	r2, #112	; 0x70
 8007742:	2100      	movs	r1, #0
 8007744:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e00f      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	4013      	ands	r3, r2
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	425a      	negs	r2, r3
 800775a:	4153      	adcs	r3, r2
 800775c:	b2db      	uxtb	r3, r3
 800775e:	001a      	movs	r2, r3
 8007760:	1dfb      	adds	r3, r7, #7
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d0c6      	beq.n	80076f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	0018      	movs	r0, r3
 800776c:	46bd      	mov	sp, r7
 800776e:	b004      	add	sp, #16
 8007770:	bd80      	pop	{r7, pc}
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	fffffe5f 	.word	0xfffffe5f

08007778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	490a      	ldr	r1, [pc, #40]	; (80077b4 <UART_EndRxTransfer+0x3c>)
 800778c:	400a      	ands	r2, r1
 800778e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2101      	movs	r1, #1
 800779c:	438a      	bics	r2, r1
 800779e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	661a      	str	r2, [r3, #96]	; 0x60
}
 80077ac:	46c0      	nop			; (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b002      	add	sp, #8
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	fffffedf 	.word	0xfffffedf

080077b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	225a      	movs	r2, #90	; 0x5a
 80077ca:	2100      	movs	r1, #0
 80077cc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2252      	movs	r2, #82	; 0x52
 80077d2:	2100      	movs	r1, #0
 80077d4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	0018      	movs	r0, r3
 80077da:	f016 fb39 	bl	801de50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b004      	add	sp, #16
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2140      	movs	r1, #64	; 0x40
 80077fa:	438a      	bics	r2, r1
 80077fc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	0018      	movs	r0, r3
 800780e:	f7ff fb33 	bl	8006e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	46bd      	mov	sp, r7
 8007816:	b002      	add	sp, #8
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	1d3b      	adds	r3, r7, #4
 8007826:	6019      	str	r1, [r3, #0]
 8007828:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800782a:	2317      	movs	r3, #23
 800782c:	18fb      	adds	r3, r7, r3
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2270      	movs	r2, #112	; 0x70
 8007836:	5c9b      	ldrb	r3, [r3, r2]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800783c:	2302      	movs	r3, #2
 800783e:	e04b      	b.n	80078d8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xbc>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2270      	movs	r2, #112	; 0x70
 8007844:	2101      	movs	r1, #1
 8007846:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2224      	movs	r2, #36	; 0x24
 800784c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2101      	movs	r1, #1
 800785a:	438a      	bics	r2, r1
 800785c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	4a1e      	ldr	r2, [pc, #120]	; (80078e0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8007866:	4013      	ands	r3, r2
 8007868:	0019      	movs	r1, r3
 800786a:	1d3b      	adds	r3, r7, #4
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007876:	1d3b      	adds	r3, r7, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d105      	bne.n	800788a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800787e:	1d3b      	adds	r3, r7, #4
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	6819      	ldr	r1, [r3, #0]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	f000 f84f 	bl	8007928 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2101      	movs	r1, #1
 8007896:	430a      	orrs	r2, r1
 8007898:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800789a:	f7fc f9d3 	bl	8003c44 <HAL_GetTick>
 800789e:	0003      	movs	r3, r0
 80078a0:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	2380      	movs	r3, #128	; 0x80
 80078a6:	03d9      	lsls	r1, r3, #15
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	4b0e      	ldr	r3, [pc, #56]	; (80078e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	0013      	movs	r3, r2
 80078b0:	2200      	movs	r2, #0
 80078b2:	f7ff ff17 	bl	80076e4 <UART_WaitOnFlagUntilTimeout>
 80078b6:	1e03      	subs	r3, r0, #0
 80078b8:	d004      	beq.n	80078c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa8>
  {
    status = HAL_TIMEOUT;
 80078ba:	2317      	movs	r3, #23
 80078bc:	18fb      	adds	r3, r7, r3
 80078be:	2203      	movs	r2, #3
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e002      	b.n	80078ca <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2270      	movs	r2, #112	; 0x70
 80078ce:	2100      	movs	r1, #0
 80078d0:	5499      	strb	r1, [r3, r2]

  return status;
 80078d2:	2317      	movs	r3, #23
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	781b      	ldrb	r3, [r3, #0]
}
 80078d8:	0018      	movs	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	b006      	add	sp, #24
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	ffcfffff 	.word	0xffcfffff
 80078e4:	01ffffff 	.word	0x01ffffff

080078e8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2270      	movs	r2, #112	; 0x70
 80078f4:	5c9b      	ldrb	r3, [r3, r2]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_UARTEx_EnableStopMode+0x16>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e010      	b.n	8007920 <HAL_UARTEx_EnableStopMode+0x38>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2270      	movs	r2, #112	; 0x70
 8007902:	2101      	movs	r1, #1
 8007904:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2102      	movs	r1, #2
 8007912:	430a      	orrs	r2, r1
 8007914:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2270      	movs	r2, #112	; 0x70
 800791a:	2100      	movs	r1, #0
 800791c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	0018      	movs	r0, r3
 8007922:	46bd      	mov	sp, r7
 8007924:	b002      	add	sp, #8
 8007926:	bd80      	pop	{r7, pc}

08007928 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	6019      	str	r1, [r3, #0]
 8007934:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2210      	movs	r2, #16
 800793e:	4393      	bics	r3, r2
 8007940:	001a      	movs	r2, r3
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	889b      	ldrh	r3, [r3, #4]
 8007946:	0019      	movs	r1, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	0a19      	lsrs	r1, r3, #8
 800795a:	1d3b      	adds	r3, r7, #4
 800795c:	799b      	ldrb	r3, [r3, #6]
 800795e:	061a      	lsls	r2, r3, #24
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	605a      	str	r2, [r3, #4]
}
 8007968:	46c0      	nop			; (mov r8, r8)
 800796a:	46bd      	mov	sp, r7
 800796c:	b004      	add	sp, #16
 800796e:	bd80      	pop	{r7, pc}

08007970 <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
    return certifParam.Running;
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <certif_running+0x10>)
 8007976:	781b      	ldrb	r3, [r3, #0]
}
 8007978:	0018      	movs	r0, r3
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	20000150 	.word	0x20000150

08007984 <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <certif_DownLinkIncrement+0x1c>)
 800798a:	2244      	movs	r2, #68	; 0x44
 800798c:	5a9b      	ldrh	r3, [r3, r2]
 800798e:	3301      	adds	r3, #1
 8007990:	b299      	uxth	r1, r3
 8007992:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <certif_DownLinkIncrement+0x1c>)
 8007994:	2244      	movs	r2, #68	; 0x44
 8007996:	5299      	strh	r1, [r3, r2]
}
 8007998:	46c0      	nop			; (mov r8, r8)
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	20000150 	.word	0x20000150

080079a4 <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 80079ac:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <certif_linkCheck+0x2c>)
 80079ae:	2246      	movs	r2, #70	; 0x46
 80079b0:	2101      	movs	r1, #1
 80079b2:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	7a19      	ldrb	r1, [r3, #8]
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <certif_linkCheck+0x2c>)
 80079ba:	2247      	movs	r2, #71	; 0x47
 80079bc:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	7a59      	ldrb	r1, [r3, #9]
 80079c2:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <certif_linkCheck+0x2c>)
 80079c4:	2248      	movs	r2, #72	; 0x48
 80079c6:	5499      	strb	r1, [r3, r2]
}
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	46bd      	mov	sp, r7
 80079cc:	b002      	add	sp, #8
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000150 	.word	0x20000150

080079d4 <certif_tx>:

static bool certif_tx( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 80079da:	4b47      	ldr	r3, [pc, #284]	; (8007af8 <certif_tx+0x124>)
 80079dc:	2246      	movs	r2, #70	; 0x46
 80079de:	5c9b      	ldrb	r3, [r3, r2]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d017      	beq.n	8007a14 <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 80079e4:	4b44      	ldr	r3, [pc, #272]	; (8007af8 <certif_tx+0x124>)
 80079e6:	2246      	movs	r2, #70	; 0x46
 80079e8:	2100      	movs	r1, #0
 80079ea:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 80079ec:	4b42      	ldr	r3, [pc, #264]	; (8007af8 <certif_tx+0x124>)
 80079ee:	2203      	movs	r2, #3
 80079f0:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 80079f2:	4b41      	ldr	r3, [pc, #260]	; (8007af8 <certif_tx+0x124>)
 80079f4:	2205      	movs	r2, #5
 80079f6:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 80079f8:	4b3f      	ldr	r3, [pc, #252]	; (8007af8 <certif_tx+0x124>)
 80079fa:	2247      	movs	r2, #71	; 0x47
 80079fc:	5c9a      	ldrb	r2, [r3, r2]
 80079fe:	4b3e      	ldr	r3, [pc, #248]	; (8007af8 <certif_tx+0x124>)
 8007a00:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8007a02:	4b3d      	ldr	r3, [pc, #244]	; (8007af8 <certif_tx+0x124>)
 8007a04:	2248      	movs	r2, #72	; 0x48
 8007a06:	5c9a      	ldrb	r2, [r3, r2]
 8007a08:	4b3b      	ldr	r3, [pc, #236]	; (8007af8 <certif_tx+0x124>)
 8007a0a:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8007a0c:	4b3a      	ldr	r3, [pc, #232]	; (8007af8 <certif_tx+0x124>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	705a      	strb	r2, [r3, #1]
 8007a12:	e01b      	b.n	8007a4c <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8007a14:	4b38      	ldr	r3, [pc, #224]	; (8007af8 <certif_tx+0x124>)
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d005      	beq.n	8007a28 <certif_tx+0x54>
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d115      	bne.n	8007a4c <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8007a20:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <certif_tx+0x124>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	705a      	strb	r2, [r3, #1]
      break;
 8007a26:	e011      	b.n	8007a4c <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8007a28:	4b33      	ldr	r3, [pc, #204]	; (8007af8 <certif_tx+0x124>)
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8007a2e:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <certif_tx+0x124>)
 8007a30:	2244      	movs	r2, #68	; 0x44
 8007a32:	5a9b      	ldrh	r3, [r3, r2]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	4b2f      	ldr	r3, [pc, #188]	; (8007af8 <certif_tx+0x124>)
 8007a3c:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8007a3e:	4b2e      	ldr	r3, [pc, #184]	; (8007af8 <certif_tx+0x124>)
 8007a40:	2244      	movs	r2, #68	; 0x44
 8007a42:	5a9b      	ldrh	r3, [r3, r2]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	4b2c      	ldr	r3, [pc, #176]	; (8007af8 <certif_tx+0x124>)
 8007a48:	715a      	strb	r2, [r3, #5]
      break;
 8007a4a:	46c0      	nop			; (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007a4c:	4b2a      	ldr	r3, [pc, #168]	; (8007af8 <certif_tx+0x124>)
 8007a4e:	78db      	ldrb	r3, [r3, #3]
 8007a50:	1d3a      	adds	r2, r7, #4
 8007a52:	0011      	movs	r1, r2
 8007a54:	0018      	movs	r0, r3
 8007a56:	f006 fcad 	bl	800e3b4 <LoRaMacQueryTxPossible>
 8007a5a:	1e03      	subs	r3, r0, #0
 8007a5c:	d00d      	beq.n	8007a7a <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8007a5e:	2108      	movs	r1, #8
 8007a60:	187b      	adds	r3, r7, r1
 8007a62:	2200      	movs	r2, #0
 8007a64:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007a66:	187b      	adds	r3, r7, r1
 8007a68:	2200      	movs	r2, #0
 8007a6a:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007a6c:	187b      	adds	r3, r7, r1
 8007a6e:	2200      	movs	r2, #0
 8007a70:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8007a72:	187b      	adds	r3, r7, r1
 8007a74:	2200      	movs	r2, #0
 8007a76:	739a      	strb	r2, [r3, #14]
 8007a78:	e02b      	b.n	8007ad2 <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8007a7a:	4b20      	ldr	r3, [pc, #128]	; (8007afc <certif_tx+0x128>)
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d112      	bne.n	8007aa8 <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8007a82:	2108      	movs	r1, #8
 8007a84:	187b      	adds	r3, r7, r1
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	22e0      	movs	r2, #224	; 0xe0
 8007a8e:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8007a90:	4b19      	ldr	r3, [pc, #100]	; (8007af8 <certif_tx+0x124>)
 8007a92:	78db      	ldrb	r3, [r3, #3]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	187b      	adds	r3, r7, r1
 8007a98:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8007a9a:	187b      	adds	r3, r7, r1
 8007a9c:	4a18      	ldr	r2, [pc, #96]	; (8007b00 <certif_tx+0x12c>)
 8007a9e:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8007aa0:	187b      	adds	r3, r7, r1
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	739a      	strb	r2, [r3, #14]
 8007aa6:	e014      	b.n	8007ad2 <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8007aa8:	2108      	movs	r1, #8
 8007aaa:	187b      	adds	r3, r7, r1
 8007aac:	2201      	movs	r2, #1
 8007aae:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8007ab0:	187b      	adds	r3, r7, r1
 8007ab2:	22e0      	movs	r2, #224	; 0xe0
 8007ab4:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <certif_tx+0x124>)
 8007ab8:	78db      	ldrb	r3, [r3, #3]
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	187b      	adds	r3, r7, r1
 8007abe:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8007ac0:	187b      	adds	r3, r7, r1
 8007ac2:	4a0f      	ldr	r2, [pc, #60]	; (8007b00 <certif_tx+0x12c>)
 8007ac4:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8007ac6:	187b      	adds	r3, r7, r1
 8007ac8:	2208      	movs	r2, #8
 8007aca:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8007acc:	187b      	adds	r3, r7, r1
 8007ace:	2200      	movs	r2, #0
 8007ad0:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8007ad2:	4b0c      	ldr	r3, [pc, #48]	; (8007b04 <certif_tx+0x130>)
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f00d fbe1 	bl	801529c <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8007ada:	2308      	movs	r3, #8
 8007adc:	18fb      	adds	r3, r7, r3
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f007 fc98 	bl	800f414 <LoRaMacMcpsRequest>
 8007ae4:	1e03      	subs	r3, r0, #0
 8007ae6:	d101      	bne.n	8007aec <certif_tx+0x118>
  {
      return false;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e000      	b.n	8007aee <certif_tx+0x11a>
  }
    return true;
 8007aec:	2301      	movs	r3, #1
}
 8007aee:	0018      	movs	r0, r3
 8007af0:	46bd      	mov	sp, r7
 8007af2:	b006      	add	sp, #24
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	20000150 	.word	0x20000150
 8007afc:	2000019a 	.word	0x2000019a
 8007b00:	20000154 	.word	0x20000154
 8007b04:	20000138 	.word	0x20000138

08007b08 <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8007b08:	b5b0      	push	{r4, r5, r7, lr}
 8007b0a:	b0a6      	sub	sp, #152	; 0x98
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8007b12:	4bb0      	ldr	r3, [pc, #704]	; (8007dd4 <certif_rx+0x2cc>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2201      	movs	r2, #1
 8007b18:	4053      	eors	r3, r2
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d065      	beq.n	8007bec <certif_rx+0xe4>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7b1b      	ldrb	r3, [r3, #12]
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d000      	beq.n	8007b2a <certif_rx+0x22>
 8007b28:	e145      	b.n	8007db6 <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d000      	beq.n	8007b36 <certif_rx+0x2e>
 8007b34:	e13f      	b.n	8007db6 <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d000      	beq.n	8007b44 <certif_rx+0x3c>
 8007b42:	e138      	b.n	8007db6 <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	3302      	adds	r3, #2
 8007b4a:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d000      	beq.n	8007b52 <certif_rx+0x4a>
 8007b50:	e131      	b.n	8007db6 <certif_rx+0x2ae>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	3303      	adds	r3, #3
 8007b58:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d000      	beq.n	8007b60 <certif_rx+0x58>
 8007b5e:	e12a      	b.n	8007db6 <certif_rx+0x2ae>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8007b60:	4b9d      	ldr	r3, [pc, #628]	; (8007dd8 <certif_rx+0x2d0>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8007b66:	4b9b      	ldr	r3, [pc, #620]	; (8007dd4 <certif_rx+0x2cc>)
 8007b68:	2202      	movs	r2, #2
 8007b6a:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8007b6c:	4b99      	ldr	r3, [pc, #612]	; (8007dd4 <certif_rx+0x2cc>)
 8007b6e:	2244      	movs	r2, #68	; 0x44
 8007b70:	2100      	movs	r1, #0
 8007b72:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8007b74:	4b97      	ldr	r3, [pc, #604]	; (8007dd4 <certif_rx+0x2cc>)
 8007b76:	2246      	movs	r2, #70	; 0x46
 8007b78:	2100      	movs	r1, #0
 8007b7a:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8007b7c:	4b95      	ldr	r3, [pc, #596]	; (8007dd4 <certif_rx+0x2cc>)
 8007b7e:	2247      	movs	r2, #71	; 0x47
 8007b80:	2100      	movs	r1, #0
 8007b82:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8007b84:	4b93      	ldr	r3, [pc, #588]	; (8007dd4 <certif_rx+0x2cc>)
 8007b86:	2248      	movs	r2, #72	; 0x48
 8007b88:	2100      	movs	r1, #0
 8007b8a:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8007b8c:	4b91      	ldr	r3, [pc, #580]	; (8007dd4 <certif_rx+0x2cc>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007b92:	4b90      	ldr	r3, [pc, #576]	; (8007dd4 <certif_rx+0x2cc>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8007b98:	217c      	movs	r1, #124	; 0x7c
 8007b9a:	187b      	adds	r3, r7, r1
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8007ba0:	000c      	movs	r4, r1
 8007ba2:	187b      	adds	r3, r7, r1
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f006 fcbf 	bl	800e528 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8007baa:	0021      	movs	r1, r4
 8007bac:	187b      	adds	r3, r7, r1
 8007bae:	791a      	ldrb	r2, [r3, #4]
 8007bb0:	4b8a      	ldr	r3, [pc, #552]	; (8007ddc <certif_rx+0x2d4>)
 8007bb2:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8007bb4:	187b      	adds	r3, r7, r1
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8007bba:	187b      	adds	r3, r7, r1
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8007bc0:	187b      	adds	r3, r7, r1
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f006 fdfc 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  #if defined( REGION_EU868 )
          LoRaMacTestSetDutyCycleOn( false );
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f007 fd73 	bl	800f6b4 <LoRaMacTestSetDutyCycleOn>
  #endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8007bce:	4a84      	ldr	r2, [pc, #528]	; (8007de0 <certif_rx+0x2d8>)
 8007bd0:	4b84      	ldr	r3, [pc, #528]	; (8007de4 <certif_rx+0x2dc>)
 8007bd2:	0011      	movs	r1, r2
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f00d fb17 	bl	8015208 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8007bda:	4a83      	ldr	r2, [pc, #524]	; (8007de8 <certif_rx+0x2e0>)
 8007bdc:	4b81      	ldr	r3, [pc, #516]	; (8007de4 <certif_rx+0x2dc>)
 8007bde:	0011      	movs	r1, r2
 8007be0:	0018      	movs	r0, r3
 8007be2:	f00d fb2f 	bl	8015244 <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8007be6:	f7ff fef5 	bl	80079d4 <certif_tx>
 8007bea:	e0e4      	b.n	8007db6 <certif_rx+0x2ae>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	4b78      	ldr	r3, [pc, #480]	; (8007dd4 <certif_rx+0x2cc>)
 8007bf4:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8007bf6:	4b77      	ldr	r3, [pc, #476]	; (8007dd4 <certif_rx+0x2cc>)
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	2b07      	cmp	r3, #7
 8007bfc:	d900      	bls.n	8007c00 <certif_rx+0xf8>
 8007bfe:	e0d9      	b.n	8007db4 <certif_rx+0x2ac>
 8007c00:	009a      	lsls	r2, r3, #2
 8007c02:	4b7a      	ldr	r3, [pc, #488]	; (8007dec <certif_rx+0x2e4>)
 8007c04:	18d3      	adds	r3, r2, r3
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8007c0a:	4b72      	ldr	r3, [pc, #456]	; (8007dd4 <certif_rx+0x2cc>)
 8007c0c:	2244      	movs	r2, #68	; 0x44
 8007c0e:	2100      	movs	r1, #0
 8007c10:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8007c12:	4b70      	ldr	r3, [pc, #448]	; (8007dd4 <certif_rx+0x2cc>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8007c18:	2164      	movs	r1, #100	; 0x64
 8007c1a:	187b      	adds	r3, r7, r1
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8007c20:	4b6e      	ldr	r3, [pc, #440]	; (8007ddc <certif_rx+0x2d4>)
 8007c22:	781a      	ldrb	r2, [r3, #0]
 8007c24:	187b      	adds	r3, r7, r1
 8007c26:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8007c28:	187b      	adds	r3, r7, r1
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f006 fdc8 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>
  #if defined( REGION_EU868 )
          LoRaMacTestSetDutyCycleOn( true );
 8007c30:	2001      	movs	r0, #1
 8007c32:	f007 fd3f 	bl	800f6b4 <LoRaMacTestSetDutyCycleOn>
  #endif
          
          break;
 8007c36:	46c0      	nop			; (mov r8, r8)
 8007c38:	e0bd      	b.n	8007db6 <certif_rx+0x2ae>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8007c3a:	4b66      	ldr	r3, [pc, #408]	; (8007dd4 <certif_rx+0x2cc>)
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	70da      	strb	r2, [r3, #3]
          break;
 8007c40:	e0b9      	b.n	8007db6 <certif_rx+0x2ae>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8007c42:	4b65      	ldr	r3, [pc, #404]	; (8007dd8 <certif_rx+0x2d0>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007c48:	4b62      	ldr	r3, [pc, #392]	; (8007dd4 <certif_rx+0x2cc>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	705a      	strb	r2, [r3, #1]
          break;
 8007c4e:	e0b2      	b.n	8007db6 <certif_rx+0x2ae>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8007c50:	4b61      	ldr	r3, [pc, #388]	; (8007dd8 <certif_rx+0x2d0>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8007c56:	4b5f      	ldr	r3, [pc, #380]	; (8007dd4 <certif_rx+0x2cc>)
 8007c58:	2201      	movs	r2, #1
 8007c5a:	705a      	strb	r2, [r3, #1]
          break;
 8007c5c:	e0ab      	b.n	8007db6 <certif_rx+0x2ae>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7b1a      	ldrb	r2, [r3, #12]
 8007c62:	4b5c      	ldr	r3, [pc, #368]	; (8007dd4 <certif_rx+0x2cc>)
 8007c64:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8007c66:	4b5b      	ldr	r3, [pc, #364]	; (8007dd4 <certif_rx+0x2cc>)
 8007c68:	2204      	movs	r2, #4
 8007c6a:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8007c6c:	2397      	movs	r3, #151	; 0x97
 8007c6e:	18fb      	adds	r3, r7, r3
 8007c70:	2201      	movs	r2, #1
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	e013      	b.n	8007c9e <certif_rx+0x196>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	2097      	movs	r0, #151	; 0x97
 8007c7c:	183b      	adds	r3, r7, r0
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	18d3      	adds	r3, r2, r3
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	183b      	adds	r3, r7, r0
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	3201      	adds	r2, #1
 8007c8a:	b2d1      	uxtb	r1, r2
 8007c8c:	4a51      	ldr	r2, [pc, #324]	; (8007dd4 <certif_rx+0x2cc>)
 8007c8e:	18d3      	adds	r3, r2, r3
 8007c90:	1c0a      	adds	r2, r1, #0
 8007c92:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8007c94:	183b      	adds	r3, r7, r0
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	183b      	adds	r3, r7, r0
 8007c9a:	3201      	adds	r2, #1
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	4b4d      	ldr	r3, [pc, #308]	; (8007dd4 <certif_rx+0x2cc>)
 8007ca0:	78db      	ldrb	r3, [r3, #3]
 8007ca2:	2297      	movs	r2, #151	; 0x97
 8007ca4:	18ba      	adds	r2, r7, r2
 8007ca6:	7812      	ldrb	r2, [r2, #0]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d3e4      	bcc.n	8007c76 <certif_rx+0x16e>
          }
          break;
 8007cac:	e083      	b.n	8007db6 <certif_rx+0x2ae>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8007cae:	2154      	movs	r1, #84	; 0x54
 8007cb0:	187b      	adds	r3, r7, r1
 8007cb2:	2203      	movs	r2, #3
 8007cb4:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 8007cb6:	187b      	adds	r3, r7, r1
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f007 fa39 	bl	800f130 <LoRaMacMlmeRequest>
          break;
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	e079      	b.n	8007db6 <certif_rx+0x2ae>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 8007cc2:	4b44      	ldr	r3, [pc, #272]	; (8007dd4 <certif_rx+0x2cc>)
 8007cc4:	2244      	movs	r2, #68	; 0x44
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 8007cca:	4b42      	ldr	r3, [pc, #264]	; (8007dd4 <certif_rx+0x2cc>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8007cd0:	212c      	movs	r1, #44	; 0x2c
 8007cd2:	187b      	adds	r3, r7, r1
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 8007cd8:	4b40      	ldr	r3, [pc, #256]	; (8007ddc <certif_rx+0x2d4>)
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	187b      	adds	r3, r7, r1
 8007cde:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007ce0:	187b      	adds	r3, r7, r1
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	f006 fd6c 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 8007ce8:	2144      	movs	r1, #68	; 0x44
 8007cea:	187b      	adds	r3, r7, r1
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8007cf0:	187b      	adds	r3, r7, r1
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8007cf8:	c331      	stmia	r3!, {r0, r4, r5}

            LoRaMacMlmeRequest( &mlmeReq );
 8007cfa:	187b      	adds	r3, r7, r1
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f007 fa17 	bl	800f130 <LoRaMacMlmeRequest>
            break;
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	e057      	b.n	8007db6 <certif_rx+0x2ae>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7b1b      	ldrb	r3, [r3, #12]
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d118      	bne.n	8007d40 <certif_rx+0x238>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8007d0e:	211c      	movs	r1, #28
 8007d10:	187b      	adds	r3, r7, r1
 8007d12:	2204      	movs	r2, #4
 8007d14:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	b21a      	sxth	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	3302      	adds	r3, #2
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b21b      	sxth	r3, r3
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	b21b      	sxth	r3, r3
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	187b      	adds	r3, r7, r1
 8007d34:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 8007d36:	187b      	adds	r3, r7, r1
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f007 f9f9 	bl	800f130 <LoRaMacMlmeRequest>
 8007d3e:	e035      	b.n	8007dac <certif_rx+0x2a4>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7b1b      	ldrb	r3, [r3, #12]
 8007d44:	2b07      	cmp	r3, #7
 8007d46:	d131      	bne.n	8007dac <certif_rx+0x2a4>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 8007d48:	210c      	movs	r1, #12
 8007d4a:	187b      	adds	r3, r7, r1
 8007d4c:	2205      	movs	r2, #5
 8007d4e:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	3301      	adds	r3, #1
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	b21a      	sxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	3302      	adds	r3, #2
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	b21b      	sxth	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	b21b      	sxth	r3, r3
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	187b      	adds	r3, r7, r1
 8007d6e:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	3303      	adds	r3, #3
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	041a      	lsls	r2, r3, #16
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	3305      	adds	r3, #5
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	001a      	movs	r2, r3
 8007d92:	2364      	movs	r3, #100	; 0x64
 8007d94:	435a      	muls	r2, r3
 8007d96:	187b      	adds	r3, r7, r1
 8007d98:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	799a      	ldrb	r2, [r3, #6]
 8007da0:	187b      	adds	r3, r7, r1
 8007da2:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	0018      	movs	r0, r3
 8007da8:	f007 f9c2 	bl	800f130 <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <certif_rx+0x2cc>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	705a      	strb	r2, [r3, #1]
          break;
 8007db2:	e000      	b.n	8007db6 <certif_rx+0x2ae>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 8007db4:	46c0      	nop			; (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 8007db6:	4b07      	ldr	r3, [pc, #28]	; (8007dd4 <certif_rx+0x2cc>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	4053      	eors	r3, r2
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <certif_rx+0x2c4>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 8007dc4:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <certif_rx+0x2dc>)
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	f00d fabe 	bl	8015348 <TimerStop>
    }
}
 8007dcc:	46c0      	nop			; (mov r8, r8)
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	b026      	add	sp, #152	; 0x98
 8007dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8007dd4:	20000150 	.word	0x20000150
 8007dd8:	2000019a 	.word	0x2000019a
 8007ddc:	2000019b 	.word	0x2000019b
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	20000138 	.word	0x20000138
 8007de8:	00001388 	.word	0x00001388
 8007dec:	08020314 	.word	0x08020314

08007df0 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
    certif_tx( );
 8007df8:	f7ff fdec 	bl	80079d4 <certif_tx>

}
 8007dfc:	46c0      	nop			; (mov r8, r8)
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b002      	add	sp, #8
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <lorawan_driver_loop>:
 * lorawan loop : process the LoRaMac
 * This need to be called as much as possible.
 * in Sync mode the function is call by the waitUntilEndOfExecution
 * when switch in async mode you need to call this function as much as possible
 */
void lorawan_driver_loop() {
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0

	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007e08:	e004      	b.n	8007e14 <lorawan_driver_loop+0x10>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
			&& __loraWanState.reqPending ) {
		__loraWanState.reqPending=false;
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <lorawan_driver_loop+0x34>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	721a      	strb	r2, [r3, #8]
        LoRaMacProcess( );
 8007e10:	f003 fb38 	bl	800b484 <LoRaMacProcess>
	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007e14:	4b08      	ldr	r3, [pc, #32]	; (8007e38 <lorawan_driver_loop+0x34>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d008      	beq.n	8007e30 <lorawan_driver_loop+0x2c>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
 8007e1e:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <lorawan_driver_loop+0x34>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d003      	beq.n	8007e30 <lorawan_driver_loop+0x2c>
			&& __loraWanState.reqPending ) {
 8007e28:	4b03      	ldr	r3, [pc, #12]	; (8007e38 <lorawan_driver_loop+0x34>)
 8007e2a:	7a1b      	ldrb	r3, [r3, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1ec      	bne.n	8007e0a <lorawan_driver_loop+0x6>
	}

}
 8007e30:	46c0      	nop			; (mov r8, r8)
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	200001bc 	.word	0x200001bc

08007e3c <lorawan_driver_waitUntilEndOfExecution>:

__weak void lorawan_driver_waitUntilEndOfExecution() {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0

	lorawan_driver_loop();
 8007e40:	f7ff ffe0 	bl	8007e04 <lorawan_driver_loop>
	#if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
    itsdk_stimer_run();
 8007e44:	f014 ff8a 	bl	801cd5c <itsdk_stimer_run>

}
 8007e48:	46c0      	nop			; (mov r8, r8)
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <lorawan_driver_battery_level>:
/**
 * Return a batteryLevel from 1 to 254
 * 1 = VBAT_MIN
 * 254 = VBAT_MAX
 */
__weak uint8_t lorawan_driver_battery_level() {
 8007e50:	b590      	push	{r4, r7, lr}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
	 uint16_t mv = adc_getVBat();
 8007e56:	1dbc      	adds	r4, r7, #6
 8007e58:	f015 f9d0 	bl	801d1fc <adc_getVBat>
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	8023      	strh	r3, [r4, #0]
	 if ( mv <= ITSDK_VBAT_MIN ) return 1;
 8007e60:	1dbb      	adds	r3, r7, #6
 8007e62:	881a      	ldrh	r2, [r3, #0]
 8007e64:	23fa      	movs	r3, #250	; 0xfa
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d801      	bhi.n	8007e70 <lorawan_driver_battery_level+0x20>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e014      	b.n	8007e9a <lorawan_driver_battery_level+0x4a>
	 if ( mv >= ITSDK_VBAT_MAX ) return 254;
 8007e70:	1dbb      	adds	r3, r7, #6
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	4a0b      	ldr	r2, [pc, #44]	; (8007ea4 <lorawan_driver_battery_level+0x54>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d901      	bls.n	8007e7e <lorawan_driver_battery_level+0x2e>
 8007e7a:	23fe      	movs	r3, #254	; 0xfe
 8007e7c:	e00d      	b.n	8007e9a <lorawan_driver_battery_level+0x4a>
	 return (( (uint32_t) (mv - ITSDK_VBAT_MIN)*ITSDK_VBAT_MAX) /(ITSDK_VBAT_MAX-ITSDK_VBAT_MIN) );
 8007e7e:	1dbb      	adds	r3, r7, #6
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	4a09      	ldr	r2, [pc, #36]	; (8007ea8 <lorawan_driver_battery_level+0x58>)
 8007e84:	4694      	mov	ip, r2
 8007e86:	4463      	add	r3, ip
 8007e88:	001a      	movs	r2, r3
 8007e8a:	4b08      	ldr	r3, [pc, #32]	; (8007eac <lorawan_driver_battery_level+0x5c>)
 8007e8c:	4353      	muls	r3, r2
 8007e8e:	4908      	ldr	r1, [pc, #32]	; (8007eb0 <lorawan_driver_battery_level+0x60>)
 8007e90:	0018      	movs	r0, r3
 8007e92:	f7f8 f941 	bl	8000118 <__udivsi3>
 8007e96:	0003      	movs	r3, r0
 8007e98:	b2db      	uxtb	r3, r3
}
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b003      	add	sp, #12
 8007ea0:	bd90      	pop	{r4, r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	00000ce3 	.word	0x00000ce3
 8007ea8:	fffff830 	.word	0xfffff830
 8007eac:	00000ce4 	.word	0x00000ce4
 8007eb0:	00000514 	.word	0x00000514

08007eb4 <lorawan_driver_temperature>:

/**
 * Return the temperature
 * temperature in fixed decimal : 8b integer + 8b decimal
 */
__weak uint16_t lorawan_driver_temperature() {
 8007eb4:	b590      	push	{r4, r7, lr}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
	int16_t t = adc_getTemperature();
 8007eba:	1dbc      	adds	r4, r7, #6
 8007ebc:	f015 f916 	bl	801d0ec <adc_getTemperature>
 8007ec0:	0003      	movs	r3, r0
 8007ec2:	8023      	strh	r3, [r4, #0]
	t = (int16_t)(((int32_t)t << 8)/100);
 8007ec4:	1dbb      	adds	r3, r7, #6
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	5e9b      	ldrsh	r3, [r3, r2]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	2164      	movs	r1, #100	; 0x64
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f7f8 f9ac 	bl	800022c <__divsi3>
 8007ed4:	0003      	movs	r3, r0
 8007ed6:	001a      	movs	r2, r3
 8007ed8:	1dbb      	adds	r3, r7, #6
 8007eda:	801a      	strh	r2, [r3, #0]
	return (uint16_t)t;
 8007edc:	1dbb      	adds	r3, r7, #6
 8007ede:	881b      	ldrh	r3, [r3, #0]
}
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b003      	add	sp, #12
 8007ee6:	bd90      	pop	{r4, r7, pc}

08007ee8 <lorawan_driver_macProcessNotify>:

/**
 * Called after IRQ processing
 */
void lorawan_driver_macProcessNotify(void) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  __loraWanState.reqPending=true;
 8007eec:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <lorawan_driver_macProcessNotify+0x10>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	721a      	strb	r2, [r3, #8]
}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	200001bc 	.word	0x200001bc

08007efc <lorawan_driver_onTxNeeded>:
}

/**
 * Callback function requesting transmission
 */
__weak void lorawan_driver_onTxNeeded() {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWAN(("[LoRaWAN] Network Server is asking for an uplink transmission\r\n"));
}
 8007f00:	46c0      	nop			; (mov r8, r8)
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <__convertDR>:


/**
 * Convert Datarate define from ITSDK to LoRaMac
 */
static uint8_t __convertDR(uint8_t itsdkDr) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	0002      	movs	r2, r0
 8007f10:	1dfb      	adds	r3, r7, #7
 8007f12:	701a      	strb	r2, [r3, #0]
	switch (itsdkDr) {
 8007f14:	1dfb      	adds	r3, r7, #7
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b16      	cmp	r3, #22
 8007f1a:	d824      	bhi.n	8007f66 <__convertDR+0x5e>
 8007f1c:	009a      	lsls	r2, r3, #2
 8007f1e:	4b18      	ldr	r3, [pc, #96]	; (8007f80 <__convertDR+0x78>)
 8007f20:	18d3      	adds	r3, r2, r3
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	469f      	mov	pc, r3
	case __LORAWAN_DR_0: return DR_0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e026      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_1: return DR_1;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e024      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_2: return DR_2;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e022      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_3: return DR_3;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e020      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_4: return DR_4;
 8007f36:	2304      	movs	r3, #4
 8007f38:	e01e      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_5: return DR_5;
 8007f3a:	2305      	movs	r3, #5
 8007f3c:	e01c      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_6: return DR_6;
 8007f3e:	2306      	movs	r3, #6
 8007f40:	e01a      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_7: return DR_7;
 8007f42:	2307      	movs	r3, #7
 8007f44:	e018      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_8: return DR_8;
 8007f46:	2308      	movs	r3, #8
 8007f48:	e016      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_9: return DR_9;
 8007f4a:	2309      	movs	r3, #9
 8007f4c:	e014      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_10: return DR_10;
 8007f4e:	230a      	movs	r3, #10
 8007f50:	e012      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_11: return DR_11;
 8007f52:	230b      	movs	r3, #11
 8007f54:	e010      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_12: return DR_12;
 8007f56:	230c      	movs	r3, #12
 8007f58:	e00e      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_13: return DR_13;
 8007f5a:	230d      	movs	r3, #13
 8007f5c:	e00c      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_14: return DR_14;
 8007f5e:	230e      	movs	r3, #14
 8007f60:	e00a      	b.n	8007f78 <__convertDR+0x70>
	case __LORAWAN_DR_15: return DR_15;
 8007f62:	230f      	movs	r3, #15
 8007f64:	e008      	b.n	8007f78 <__convertDR+0x70>
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_DR,(uint16_t)itsdkDr);
 8007f66:	1dfb      	adds	r3, r7, #7
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	4a05      	ldr	r2, [pc, #20]	; (8007f84 <__convertDR+0x7c>)
 8007f6e:	0019      	movs	r1, r3
 8007f70:	0010      	movs	r0, r2
 8007f72:	f013 fb2f 	bl	801b5d4 <itsdk_error_report>
	}
	return 0;	// never reached
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	0018      	movs	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b002      	add	sp, #8
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	08020334 	.word	0x08020334
 8007f84:	d0000100 	.word	0xd0000100

08007f88 <lorawan_driver_LORA_Init>:
 *  lora Init - initialize the stack and the associated hardware
 *
 */
void lorawan_driver_LORA_Init(
		lorawan_driver_config_t * config
){
 8007f88:	b590      	push	{r4, r7, lr}
 8007f8a:	b089      	sub	sp, #36	; 0x24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  LOG_INFO_LORAWAN(("lorawan_driver_LORA_Init\r\n"));

  __loraWanState.joinState = LORAWAN_STATE_NONE;
 8007f90:	4b95      	ldr	r3, [pc, #596]	; (80081e8 <lorawan_driver_LORA_Init+0x260>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	701a      	strb	r2, [r3, #0]
  __loraWanState.upLinkCounter = 0;
 8007f96:	4b94      	ldr	r3, [pc, #592]	; (80081e8 <lorawan_driver_LORA_Init+0x260>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	815a      	strh	r2, [r3, #10]
  __loraWanState.downlinkCounter = 0;
 8007f9c:	4b92      	ldr	r3, [pc, #584]	; (80081e8 <lorawan_driver_LORA_Init+0x260>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	819a      	strh	r2, [r3, #12]
  __loraWanState.lastRssi = LORAWAN_DRIVER_INVALID_RSSI;
 8007fa2:	4b91      	ldr	r3, [pc, #580]	; (80081e8 <lorawan_driver_LORA_Init+0x260>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4252      	negs	r2, r2
 8007fa8:	81da      	strh	r2, [r3, #14]
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007faa:	4b90      	ldr	r3, [pc, #576]	; (80081ec <lorawan_driver_LORA_Init+0x264>)
 8007fac:	4a90      	ldr	r2, [pc, #576]	; (80081f0 <lorawan_driver_LORA_Init+0x268>)
 8007fae:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007fb0:	4b8e      	ldr	r3, [pc, #568]	; (80081ec <lorawan_driver_LORA_Init+0x264>)
 8007fb2:	4a90      	ldr	r2, [pc, #576]	; (80081f4 <lorawan_driver_LORA_Init+0x26c>)
 8007fb4:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007fb6:	4b8d      	ldr	r3, [pc, #564]	; (80081ec <lorawan_driver_LORA_Init+0x264>)
 8007fb8:	4a8f      	ldr	r2, [pc, #572]	; (80081f8 <lorawan_driver_LORA_Init+0x270>)
 8007fba:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007fbc:	4b8b      	ldr	r3, [pc, #556]	; (80081ec <lorawan_driver_LORA_Init+0x264>)
 8007fbe:	4a8f      	ldr	r2, [pc, #572]	; (80081fc <lorawan_driver_LORA_Init+0x274>)
 8007fc0:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = lorawan_driver_battery_level;
 8007fc2:	4b8f      	ldr	r3, [pc, #572]	; (8008200 <lorawan_driver_LORA_Init+0x278>)
 8007fc4:	4a8f      	ldr	r2, [pc, #572]	; (8008204 <lorawan_driver_LORA_Init+0x27c>)
 8007fc6:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = lorawan_driver_temperature;
 8007fc8:	4b8d      	ldr	r3, [pc, #564]	; (8008200 <lorawan_driver_LORA_Init+0x278>)
 8007fca:	4a8f      	ldr	r2, [pc, #572]	; (8008208 <lorawan_driver_LORA_Init+0x280>)
 8007fcc:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = lorawan_driver_macProcessNotify;
 8007fce:	4b8c      	ldr	r3, [pc, #560]	; (8008200 <lorawan_driver_LORA_Init+0x278>)
 8007fd0:	4a8e      	ldr	r2, [pc, #568]	; (800820c <lorawan_driver_LORA_Init+0x284>)
 8007fd2:	60da      	str	r2, [r3, #12]



  // Set the Radio configuration
  switch ( config->region ) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	889b      	ldrh	r3, [r3, #4]
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d146      	bne.n	800806a <lorawan_driver_LORA_Init+0xe2>
        	LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
        	break;
		#endif
		#if defined( REGION_EU868 )
        case __LORAWAN_REGION_EU868:
        	LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU868 );
 8007fdc:	4988      	ldr	r1, [pc, #544]	; (8008200 <lorawan_driver_LORA_Init+0x278>)
 8007fde:	4b83      	ldr	r3, [pc, #524]	; (80081ec <lorawan_driver_LORA_Init+0x264>)
 8007fe0:	2205      	movs	r2, #5
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f005 fdfe 	bl	800dbe4 <LoRaMacInitialization>
        	LoRaMacTestSetDutyCycleOn( true );	// activate duty cycle
 8007fe8:	2001      	movs	r0, #1
 8007fea:	f007 fb63 	bl	800f6b4 <LoRaMacTestSetDutyCycleOn>
        	break;
 8007fee:	46c0      	nop			; (mov r8, r8)
  	  	mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;	// Change the default RX window margin error (default is +/- 10ms)
  	  	mibReq.Param.SystemMaxRxError = ITSDK_LORAWAN_MAX_RX_ERROR;
  	  	LoRaMacMibSetRequestConfirm( &mibReq );
		#endif

  	    mibReq.Type = MIB_ADR;
 8007ff0:	2408      	movs	r4, #8
 8007ff2:	193b      	adds	r3, r7, r4
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.AdrEnable = config->adrEnable;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	193b      	adds	r3, r7, r4
 8007ffe:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 8008000:	193b      	adds	r3, r7, r4
 8008002:	0018      	movs	r0, r3
 8008004:	f006 fbdc 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008008:	193b      	adds	r3, r7, r4
 800800a:	221a      	movs	r2, #26
 800800c:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.EnablePublicNetwork = config->enablePublicNetwork;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	789a      	ldrb	r2, [r3, #2]
 8008012:	193b      	adds	r3, r7, r4
 8008014:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 8008016:	193b      	adds	r3, r7, r4
 8008018:	0018      	movs	r0, r3
 800801a:	f006 fbd1 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    __loraWanState.txDatarate = __convertDR(config->txDatarate);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	b25b      	sxtb	r3, r3
 8008024:	b2db      	uxtb	r3, r3
 8008026:	0018      	movs	r0, r3
 8008028:	f7ff ff6e 	bl	8007f08 <__convertDR>
 800802c:	0003      	movs	r3, r0
 800802e:	001a      	movs	r2, r3
 8008030:	4b6d      	ldr	r3, [pc, #436]	; (80081e8 <lorawan_driver_LORA_Init+0x260>)
 8008032:	749a      	strb	r2, [r3, #18]
  	    mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8008034:	193b      	adds	r3, r7, r4
 8008036:	2227      	movs	r2, #39	; 0x27
 8008038:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.ChannelsDefaultDatarate = __convertDR(config->txDatarate);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	b25b      	sxtb	r3, r3
 8008040:	b2db      	uxtb	r3, r3
 8008042:	0018      	movs	r0, r3
 8008044:	f7ff ff60 	bl	8007f08 <__convertDR>
 8008048:	0003      	movs	r3, r0
 800804a:	b25a      	sxtb	r2, r3
 800804c:	193b      	adds	r3, r7, r4
 800804e:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 8008050:	193b      	adds	r3, r7, r4
 8008052:	0018      	movs	r0, r3
 8008054:	f006 fbb4 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    __loraWanState.JoinType = config->JoinType;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	799a      	ldrb	r2, [r3, #6]
 800805c:	4b62      	ldr	r3, [pc, #392]	; (80081e8 <lorawan_driver_LORA_Init+0x260>)
 800805e:	74da      	strb	r2, [r3, #19]
  	    if ( config->JoinType == __LORAWAN_OTAA ) {
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	799b      	ldrb	r3, [r3, #6]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d130      	bne.n	80080ca <lorawan_driver_LORA_Init+0x142>
 8008068:	e007      	b.n	800807a <lorawan_driver_LORA_Init+0xf2>
    		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_REGION,(uint16_t)config->region);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	889b      	ldrh	r3, [r3, #4]
 800806e:	4a68      	ldr	r2, [pc, #416]	; (8008210 <lorawan_driver_LORA_Init+0x288>)
 8008070:	0019      	movs	r1, r3
 8008072:	0010      	movs	r0, r2
 8008074:	f013 faae 	bl	801b5d4 <itsdk_error_report>
 8008078:	e0b2      	b.n	80081e0 <lorawan_driver_LORA_Init+0x258>
  	    	mibReq.Type = MIB_APP_KEY;
 800807a:	2108      	movs	r1, #8
 800807c:	187b      	adds	r3, r7, r1
 800807e:	2205      	movs	r2, #5
 8008080:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.AppKey = config->config.otaa.appKey;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691a      	ldr	r2, [r3, #16]
 8008086:	187b      	adds	r3, r7, r1
 8008088:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 800808a:	000c      	movs	r4, r1
 800808c:	187b      	adds	r3, r7, r1
 800808e:	0018      	movs	r0, r3
 8008090:	f006 fb96 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NWK_KEY;
 8008094:	0021      	movs	r1, r4
 8008096:	187b      	adds	r3, r7, r1
 8008098:	2206      	movs	r2, #6
 800809a:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NwkKey = config->config.otaa.nwkKey;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695a      	ldr	r2, [r3, #20]
 80080a0:	187b      	adds	r3, r7, r1
 80080a2:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80080a4:	187b      	adds	r3, r7, r1
 80080a6:	0018      	movs	r0, r3
 80080a8:	f006 fb8a 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    	// Store the config element not in MIB
  	        bcopy(config->devEui,__loraWanState.join.otaa.devEui,8);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	4958      	ldr	r1, [pc, #352]	; (8008214 <lorawan_driver_LORA_Init+0x28c>)
 80080b2:	2208      	movs	r2, #8
 80080b4:	0018      	movs	r0, r3
 80080b6:	f016 fc82 	bl	801e9be <bcopy>
  	        bcopy(config->config.otaa.appEui,__loraWanState.join.otaa.appEui,8);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	4956      	ldr	r1, [pc, #344]	; (8008218 <lorawan_driver_LORA_Init+0x290>)
 80080c0:	2208      	movs	r2, #8
 80080c2:	0018      	movs	r0, r3
 80080c4:	f016 fc7b 	bl	801e9be <bcopy>
 80080c8:	e06e      	b.n	80081a8 <lorawan_driver_LORA_Init+0x220>

  	    } else if (config->JoinType == __LORAWAN_ABP) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	799b      	ldrb	r3, [r3, #6]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d16a      	bne.n	80081a8 <lorawan_driver_LORA_Init+0x220>

  	    	if (config->config.abp.devAddr == 0) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10e      	bne.n	80080f8 <lorawan_driver_LORA_Init+0x170>
				// Choose a random device address
				srand1( itsdk_getRandomSeed( ) );
 80080da:	f015 fde5 	bl	801dca8 <itsdk_getRandomSeed>
 80080de:	0003      	movs	r3, r0
 80080e0:	0018      	movs	r0, r3
 80080e2:	f00d f99d 	bl	8015420 <srand1>
				config->config.abp.devAddr = randr( 0, 0x01FFFFFF );
 80080e6:	4b4d      	ldr	r3, [pc, #308]	; (800821c <lorawan_driver_LORA_Init+0x294>)
 80080e8:	0019      	movs	r1, r3
 80080ea:	2000      	movs	r0, #0
 80080ec:	f00d f9a6 	bl	801543c <randr>
 80080f0:	0003      	movs	r3, r0
 80080f2:	001a      	movs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	61da      	str	r2, [r3, #28]
  	    	}

  	    	mibReq.Type = MIB_DEV_ADDR;
 80080f8:	2108      	movs	r1, #8
 80080fa:	187b      	adds	r3, r7, r1
 80080fc:	2204      	movs	r2, #4
 80080fe:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.DevAddr = config->config.abp.devAddr;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	187b      	adds	r3, r7, r1
 8008106:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008108:	000c      	movs	r4, r1
 800810a:	187b      	adds	r3, r7, r1
 800810c:	0018      	movs	r0, r3
 800810e:	f006 fb57 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NET_ID;
 8008112:	0021      	movs	r1, r4
 8008114:	187b      	adds	r3, r7, r1
 8008116:	2203      	movs	r2, #3
 8008118:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NetID = ITSDK_LORAWAN_NETWORKID;
 800811a:	187b      	adds	r3, r7, r1
 800811c:	2200      	movs	r2, #0
 800811e:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008120:	000c      	movs	r4, r1
 8008122:	187b      	adds	r3, r7, r1
 8008124:	0018      	movs	r0, r3
 8008126:	f006 fb4b 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_F_NWK_S_INT_KEY;
 800812a:	0021      	movs	r1, r4
 800812c:	187b      	adds	r3, r7, r1
 800812e:	2209      	movs	r2, #9
 8008130:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.FNwkSIntKey = config->config.abp.FNwkSIntKey;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	187b      	adds	r3, r7, r1
 8008138:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 800813a:	000c      	movs	r4, r1
 800813c:	187b      	adds	r3, r7, r1
 800813e:	0018      	movs	r0, r3
 8008140:	f006 fb3e 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_S_NWK_S_INT_KEY;
 8008144:	0021      	movs	r1, r4
 8008146:	187b      	adds	r3, r7, r1
 8008148:	220a      	movs	r2, #10
 800814a:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.SNwkSIntKey = config->config.abp.SNwkSIntKey;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	187b      	adds	r3, r7, r1
 8008152:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008154:	000c      	movs	r4, r1
 8008156:	187b      	adds	r3, r7, r1
 8008158:	0018      	movs	r0, r3
 800815a:	f006 fb31 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NWK_S_ENC_KEY;
 800815e:	0021      	movs	r1, r4
 8008160:	187b      	adds	r3, r7, r1
 8008162:	220b      	movs	r2, #11
 8008164:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NwkSEncKey = config->config.abp.nwkSEncKey;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695a      	ldr	r2, [r3, #20]
 800816a:	187b      	adds	r3, r7, r1
 800816c:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 800816e:	000c      	movs	r4, r1
 8008170:	187b      	adds	r3, r7, r1
 8008172:	0018      	movs	r0, r3
 8008174:	f006 fb24 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_APP_S_KEY;
 8008178:	0021      	movs	r1, r4
 800817a:	187b      	adds	r3, r7, r1
 800817c:	220c      	movs	r2, #12
 800817e:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.AppSKey = config->config.abp.appSKey;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	187b      	adds	r3, r7, r1
 8008186:	605a      	str	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 8008188:	000c      	movs	r4, r1
 800818a:	187b      	adds	r3, r7, r1
 800818c:	0018      	movs	r0, r3
 800818e:	f006 fb17 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    	mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008192:	0021      	movs	r1, r4
 8008194:	187b      	adds	r3, r7, r1
 8008196:	2201      	movs	r2, #1
 8008198:	701a      	strb	r2, [r3, #0]
  	    	mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800819a:	187b      	adds	r3, r7, r1
 800819c:	2201      	movs	r2, #1
 800819e:	711a      	strb	r2, [r3, #4]
  	    	LoRaMacMibSetRequestConfirm( &mibReq );
 80081a0:	187b      	adds	r3, r7, r1
 80081a2:	0018      	movs	r0, r3
 80081a4:	f006 fb0c 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

  	    }
  	    mibReq.Type = MIB_DEVICE_CLASS;
 80081a8:	2108      	movs	r1, #8
 80081aa:	187b      	adds	r3, r7, r1
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
  	    mibReq.Param.Class= CLASS_A;
 80081b0:	187b      	adds	r3, r7, r1
 80081b2:	2200      	movs	r2, #0
 80081b4:	711a      	strb	r2, [r3, #4]
  	    LoRaMacMibSetRequestConfirm( &mibReq );
 80081b6:	000c      	movs	r4, r1
 80081b8:	187b      	adds	r3, r7, r1
 80081ba:	0018      	movs	r0, r3
 80081bc:	f006 fb00 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>

	    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80081c0:	0021      	movs	r1, r4
 80081c2:	187b      	adds	r3, r7, r1
 80081c4:	222b      	movs	r2, #43	; 0x2b
 80081c6:	701a      	strb	r2, [r3, #0]
		mibReq.Param.SystemMaxRxError = ITSDK_LORAWAN_MAX_RX_ERROR;
 80081c8:	187b      	adds	r3, r7, r1
 80081ca:	2200      	movs	r2, #0
 80081cc:	605a      	str	r2, [r3, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 80081ce:	187b      	adds	r3, r7, r1
 80081d0:	0018      	movs	r0, r3
 80081d2:	f006 faf5 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>
                LoRaMacMibSetRequestConfirm( &mibReq );
		#endif


         // Init the Mac layer
         LoRaMacStart();
 80081d6:	f006 f8df 	bl	800e398 <LoRaMacStart>
         __loraWanState.joinState = LORAWAN_STATE_INITIALIZED;
 80081da:	4b03      	ldr	r3, [pc, #12]	; (80081e8 <lorawan_driver_LORA_Init+0x260>)
 80081dc:	2201      	movs	r2, #1
 80081de:	701a      	strb	r2, [r3, #0]

}
 80081e0:	46bd      	mov	sp, r7
 80081e2:	b009      	add	sp, #36	; 0x24
 80081e4:	bd90      	pop	{r4, r7, pc}
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	200001bc 	.word	0x200001bc
 80081ec:	2000019c 	.word	0x2000019c
 80081f0:	0800846d 	.word	0x0800846d
 80081f4:	08008509 	.word	0x08008509
 80081f8:	08008611 	.word	0x08008611
 80081fc:	08008685 	.word	0x08008685
 8008200:	200001ac 	.word	0x200001ac
 8008204:	08007e51 	.word	0x08007e51
 8008208:	08007eb5 	.word	0x08007eb5
 800820c:	08007ee9 	.word	0x08007ee9
 8008210:	d0000102 	.word	0xd0000102
 8008214:	200001d0 	.word	0x200001d0
 8008218:	200001d8 	.word	0x200001d8
 800821c:	01ffffff 	.word	0x01ffffff

08008220 <lorawan_driver_LORA_Join>:
// =======================================================================================

static MlmeReqJoin_t JoinParameters;
itsdk_lorawan_join_t lorawan_driver_LORA_Join(
		itsdk_lorawan_run_t 	  runMode
){
 8008220:	b5b0      	push	{r4, r5, r7, lr}
 8008222:	b08e      	sub	sp, #56	; 0x38
 8008224:	af00      	add	r7, sp, #0
 8008226:	0002      	movs	r2, r0
 8008228:	1dfb      	adds	r3, r7, #7
 800822a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_Join (mode:%d)\r\n",runMode));

    switch (__loraWanState.JoinType) {
 800822c:	4b3d      	ldr	r3, [pc, #244]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 800822e:	7cdb      	ldrb	r3, [r3, #19]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d002      	beq.n	800823a <lorawan_driver_LORA_Join+0x1a>
 8008234:	2b02      	cmp	r3, #2
 8008236:	d029      	beq.n	800828c <lorawan_driver_LORA_Join+0x6c>
 8008238:	e052      	b.n	80082e0 <lorawan_driver_LORA_Join+0xc0>
    case __LORAWAN_OTAA:
    	{
    	    MlmeReq_t mlmeReq;
    	    mlmeReq.Type = MLME_JOIN;
 800823a:	2124      	movs	r1, #36	; 0x24
 800823c:	187b      	adds	r3, r7, r1
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
    	    mlmeReq.Req.Join.DevEui = __loraWanState.join.otaa.devEui;
 8008242:	187b      	adds	r3, r7, r1
 8008244:	4a38      	ldr	r2, [pc, #224]	; (8008328 <lorawan_driver_LORA_Join+0x108>)
 8008246:	605a      	str	r2, [r3, #4]
    	    mlmeReq.Req.Join.JoinEui = __loraWanState.join.otaa.appEui;
 8008248:	187b      	adds	r3, r7, r1
 800824a:	4a38      	ldr	r2, [pc, #224]	; (800832c <lorawan_driver_LORA_Join+0x10c>)
 800824c:	609a      	str	r2, [r3, #8]
    	    mlmeReq.Req.Join.Datarate = __loraWanState.txDatarate;
 800824e:	4b35      	ldr	r3, [pc, #212]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 8008250:	7c9a      	ldrb	r2, [r3, #18]
 8008252:	187b      	adds	r3, r7, r1
 8008254:	731a      	strb	r2, [r3, #12]
    	    JoinParameters = mlmeReq.Req.Join;
 8008256:	4a36      	ldr	r2, [pc, #216]	; (8008330 <lorawan_driver_LORA_Join+0x110>)
 8008258:	187b      	adds	r3, r7, r1
 800825a:	3304      	adds	r3, #4
 800825c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800825e:	c231      	stmia	r2!, {r0, r4, r5}

    	    LoRaMacStatus_t r = LoRaMacMlmeRequest( &mlmeReq );
 8008260:	2537      	movs	r5, #55	; 0x37
 8008262:	197c      	adds	r4, r7, r5
 8008264:	187b      	adds	r3, r7, r1
 8008266:	0018      	movs	r0, r3
 8008268:	f006 ff62 	bl	800f130 <LoRaMacMlmeRequest>
 800826c:	0003      	movs	r3, r0
 800826e:	7023      	strb	r3, [r4, #0]
			if ( r != LORAMAC_STATUS_OK ) {
 8008270:	197b      	adds	r3, r7, r5
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d005      	beq.n	8008284 <lorawan_driver_LORA_Join+0x64>
				LOG_WARN_LORAWAN(("LoRaMacMlmeRequest return error(%d)\r\n",r));
				__loraWanState.joinState = LORAWAN_STATE_JOIN_FAILED;
 8008278:	4b2a      	ldr	r3, [pc, #168]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 800827a:	2204      	movs	r2, #4
 800827c:	701a      	strb	r2, [r3, #0]
				lorawan_driver_onJoinFailed();
 800827e:	f013 fe1f 	bl	801bec0 <lorawan_driver_onJoinFailed>
			} else {
				__loraWanState.joinState = LORAWAN_STATE_JOINING;
			}
    	}
        break;
 8008282:	e035      	b.n	80082f0 <lorawan_driver_LORA_Join+0xd0>
				__loraWanState.joinState = LORAWAN_STATE_JOINING;
 8008284:	4b27      	ldr	r3, [pc, #156]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 8008286:	2202      	movs	r2, #2
 8008288:	701a      	strb	r2, [r3, #0]
        break;
 800828a:	e031      	b.n	80082f0 <lorawan_driver_LORA_Join+0xd0>
    	{
			// Enable legacy mode to operate according to LoRaWAN Spec. 1.0.3
			Version_t abpLrWanVersion;
			MibRequestConfirm_t mibReq;

			abpLrWanVersion.Fields.Major    = 1;
 800828c:	2120      	movs	r1, #32
 800828e:	187b      	adds	r3, r7, r1
 8008290:	2201      	movs	r2, #1
 8008292:	70da      	strb	r2, [r3, #3]
			abpLrWanVersion.Fields.Minor    = 0;
 8008294:	187b      	adds	r3, r7, r1
 8008296:	2200      	movs	r2, #0
 8008298:	709a      	strb	r2, [r3, #2]
			abpLrWanVersion.Fields.Revision = 3;
 800829a:	187b      	adds	r3, r7, r1
 800829c:	2203      	movs	r2, #3
 800829e:	705a      	strb	r2, [r3, #1]
			abpLrWanVersion.Fields.Rfu      = 0;
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	2200      	movs	r2, #0
 80082a4:	701a      	strb	r2, [r3, #0]

			mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80082a6:	2108      	movs	r1, #8
 80082a8:	187b      	adds	r3, r7, r1
 80082aa:	2230      	movs	r2, #48	; 0x30
 80082ac:	701a      	strb	r2, [r3, #0]
			mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 80082ae:	187b      	adds	r3, r7, r1
 80082b0:	6a3a      	ldr	r2, [r7, #32]
 80082b2:	605a      	str	r2, [r3, #4]
			LoRaMacMibSetRequestConfirm( &mibReq );
 80082b4:	187b      	adds	r3, r7, r1
 80082b6:	0018      	movs	r0, r3
 80082b8:	f006 fa82 	bl	800e7c0 <LoRaMacMibSetRequestConfirm>
			__loraWanState.joinState = LORAWAN_STATE_JOIN_SUCCESS;
 80082bc:	4b19      	ldr	r3, [pc, #100]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 80082be:	2203      	movs	r2, #3
 80082c0:	701a      	strb	r2, [r3, #0]
			__loraWanState.joinTime = (uint32_t)(itsdk_time_get_ms()/1000);
 80082c2:	f014 fc01 	bl	801cac8 <itsdk_time_get_ms>
 80082c6:	22fa      	movs	r2, #250	; 0xfa
 80082c8:	0092      	lsls	r2, r2, #2
 80082ca:	2300      	movs	r3, #0
 80082cc:	f7f8 f8fc 	bl	80004c8 <__aeabi_uldivmod>
 80082d0:	0003      	movs	r3, r0
 80082d2:	000c      	movs	r4, r1
 80082d4:	001a      	movs	r2, r3
 80082d6:	4b13      	ldr	r3, [pc, #76]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 80082d8:	605a      	str	r2, [r3, #4]


			lorawan_driver_onJoinSuccess();
 80082da:	f013 fde1 	bl	801bea0 <lorawan_driver_onJoinSuccess>
    	}
        break;
 80082de:	e007      	b.n	80082f0 <lorawan_driver_LORA_Join+0xd0>
    default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_INVALID_JOIN,(uint16_t)__loraWanState.JoinType);
 80082e0:	4b10      	ldr	r3, [pc, #64]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 80082e2:	7cdb      	ldrb	r3, [r3, #19]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	4a13      	ldr	r2, [pc, #76]	; (8008334 <lorawan_driver_LORA_Join+0x114>)
 80082e8:	0019      	movs	r1, r3
 80082ea:	0010      	movs	r0, r2
 80082ec:	f013 f972 	bl	801b5d4 <itsdk_error_report>
    }

    if (runMode==LORAWAN_RUN_SYNC) {
 80082f0:	1dfb      	adds	r3, r7, #7
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d110      	bne.n	800831a <lorawan_driver_LORA_Join+0xfa>
        // Go for synchronous
    	while(__loraWanState.joinState == LORAWAN_STATE_JOINING) {
 80082f8:	e001      	b.n	80082fe <lorawan_driver_LORA_Join+0xde>
    		lorawan_driver_waitUntilEndOfExecution();
 80082fa:	f7ff fd9f 	bl	8007e3c <lorawan_driver_waitUntilEndOfExecution>
    	while(__loraWanState.joinState == LORAWAN_STATE_JOINING) {
 80082fe:	4b09      	ldr	r3, [pc, #36]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d0f8      	beq.n	80082fa <lorawan_driver_LORA_Join+0xda>
    	}
    	if ( __loraWanState.joinState == LORAWAN_STATE_JOIN_SUCCESS ) {
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <lorawan_driver_LORA_Join+0x104>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b03      	cmp	r3, #3
 8008310:	d101      	bne.n	8008316 <lorawan_driver_LORA_Join+0xf6>
    		return LORAWAN_JOIN_SUCCESS;
 8008312:	2301      	movs	r3, #1
 8008314:	e002      	b.n	800831c <lorawan_driver_LORA_Join+0xfc>
    	} else {
    		return LORAWAN_JOIN_FAILED;
 8008316:	2302      	movs	r3, #2
 8008318:	e000      	b.n	800831c <lorawan_driver_LORA_Join+0xfc>
    	}
    } else {
    	return LORAWAN_JOIN_PENDING;
 800831a:	2300      	movs	r3, #0
    }

}
 800831c:	0018      	movs	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	b00e      	add	sp, #56	; 0x38
 8008322:	bdb0      	pop	{r4, r5, r7, pc}
 8008324:	200001bc 	.word	0x200001bc
 8008328:	200001d0 	.word	0x200001d0
 800832c:	200001d8 	.word	0x200001d8
 8008330:	20000204 	.word	0x20000204
 8008334:	d0000103 	.word	0xd0000103

08008338 <lorawan_driver_LORA_AddChannel>:
		uint32_t 	frequency,
		uint32_t	rx1Frequency,
		uint8_t		minDataRate,
		uint8_t		maxDataRate,
		uint8_t		band
){
 8008338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800833a:	b089      	sub	sp, #36	; 0x24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	0019      	movs	r1, r3
 8008344:	260f      	movs	r6, #15
 8008346:	19bb      	adds	r3, r7, r6
 8008348:	1c02      	adds	r2, r0, #0
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	200e      	movs	r0, #14
 800834e:	183b      	adds	r3, r7, r0
 8008350:	1c0a      	adds	r2, r1, #0
 8008352:	701a      	strb	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_AddChannel (%d)\r\n",channelId));

	ChannelParams_t params;
	params.Frequency=frequency;
 8008354:	2410      	movs	r4, #16
 8008356:	193b      	adds	r3, r7, r4
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	601a      	str	r2, [r3, #0]
	params.Rx1Frequency=rx1Frequency;
 800835c:	193b      	adds	r3, r7, r4
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	605a      	str	r2, [r3, #4]
	params.Band=band;					// Sounds like this parameter is completed during initialization
 8008362:	193b      	adds	r3, r7, r4
 8008364:	2234      	movs	r2, #52	; 0x34
 8008366:	2108      	movs	r1, #8
 8008368:	468c      	mov	ip, r1
 800836a:	44bc      	add	ip, r7
 800836c:	4462      	add	r2, ip
 800836e:	7812      	ldrb	r2, [r2, #0]
 8008370:	725a      	strb	r2, [r3, #9]
										// Band definitions are in the different RegionXXMMM.h file
										// This entry is the index in the band definition
	params.DrRange.Fields.Min=__convertDR(minDataRate);
 8008372:	183b      	adds	r3, r7, r0
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	0018      	movs	r0, r3
 8008378:	f7ff fdc6 	bl	8007f08 <__convertDR>
 800837c:	0003      	movs	r3, r0
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	b25b      	sxtb	r3, r3
 8008382:	111b      	asrs	r3, r3, #4
 8008384:	b25a      	sxtb	r2, r3
 8008386:	193b      	adds	r3, r7, r4
 8008388:	1c11      	adds	r1, r2, #0
 800838a:	220f      	movs	r2, #15
 800838c:	0008      	movs	r0, r1
 800838e:	4010      	ands	r0, r2
 8008390:	7a1a      	ldrb	r2, [r3, #8]
 8008392:	210f      	movs	r1, #15
 8008394:	438a      	bics	r2, r1
 8008396:	1c11      	adds	r1, r2, #0
 8008398:	1c02      	adds	r2, r0, #0
 800839a:	430a      	orrs	r2, r1
 800839c:	721a      	strb	r2, [r3, #8]
	params.DrRange.Fields.Max=__convertDR(maxDataRate);
 800839e:	2330      	movs	r3, #48	; 0x30
 80083a0:	2208      	movs	r2, #8
 80083a2:	4694      	mov	ip, r2
 80083a4:	44bc      	add	ip, r7
 80083a6:	4463      	add	r3, ip
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	0018      	movs	r0, r3
 80083ac:	f7ff fdac 	bl	8007f08 <__convertDR>
 80083b0:	0003      	movs	r3, r0
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	b25b      	sxtb	r3, r3
 80083b6:	111b      	asrs	r3, r3, #4
 80083b8:	b25a      	sxtb	r2, r3
 80083ba:	0025      	movs	r5, r4
 80083bc:	193b      	adds	r3, r7, r4
 80083be:	0110      	lsls	r0, r2, #4
 80083c0:	7a1a      	ldrb	r2, [r3, #8]
 80083c2:	210f      	movs	r1, #15
 80083c4:	400a      	ands	r2, r1
 80083c6:	1c11      	adds	r1, r2, #0
 80083c8:	1c02      	adds	r2, r0, #0
 80083ca:	430a      	orrs	r2, r1
 80083cc:	721a      	strb	r2, [r3, #8]

	LoRaMacStatus_t r = LoRaMacChannelAdd(channelId, params);
 80083ce:	231f      	movs	r3, #31
 80083d0:	18fc      	adds	r4, r7, r3
 80083d2:	197b      	adds	r3, r7, r5
 80083d4:	19ba      	adds	r2, r7, r6
 80083d6:	7810      	ldrb	r0, [r2, #0]
 80083d8:	6819      	ldr	r1, [r3, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f006 fe6f 	bl	800f0c0 <LoRaMacChannelAdd>
 80083e2:	0003      	movs	r3, r0
 80083e4:	7023      	strb	r3, [r4, #0]
	switch ( r ) {
 80083e6:	231f      	movs	r3, #31
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d004      	beq.n	80083fa <lorawan_driver_LORA_AddChannel+0xc2>
 80083f0:	db07      	blt.n	8008402 <lorawan_driver_LORA_AddChannel+0xca>
 80083f2:	3b03      	subs	r3, #3
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d804      	bhi.n	8008402 <lorawan_driver_LORA_AddChannel+0xca>
 80083f8:	e001      	b.n	80083fe <lorawan_driver_LORA_AddChannel+0xc6>
		case LORAMAC_STATUS_OK:
			return LORAWAN_CHANNEL_SUCCESS;
 80083fa:	2300      	movs	r3, #0
 80083fc:	e002      	b.n	8008404 <lorawan_driver_LORA_AddChannel+0xcc>
		case LORAMAC_STATUS_PARAMETER_INVALID:
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		case LORAMAC_STATUS_DATARATE_INVALID:
		case LORAMAC_STATUS_FREQUENCY_INVALID:
			LOG_WARN_LORAWAN(("[LoRaWan] Invalid channel configuration (%d)\r\n",r));
			return LORAWAN_CHANNEL_INVALID_PARAMS;
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <lorawan_driver_LORA_AddChannel+0xcc>
		default:
			LOG_WARN_LORAWAN(("[LoRaWan] Channel configuration error (%d)\r\n",r));
			return LORAWAN_CHANNEL_FAILED;
 8008402:	2302      	movs	r3, #2
	}
}
 8008404:	0018      	movs	r0, r3
 8008406:	46bd      	mov	sp, r7
 8008408:	b009      	add	sp, #36	; 0x24
 800840a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800840c <lorawan_driver_LORA_SelectChannels>:
 * Change channel mask to enable only the one we need
 * The channels parameter is a table containing x time 16b corresponding
 * to the possible channels
 * for US915 as an example we have 6 entries of 16b in the tab for the 72 possible channels
 */
itsdk_lorawan_channel_t lorawan_driver_LORA_SelectChannels(uint16_t region, uint16_t * channels ){
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	0002      	movs	r2, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	1dbb      	adds	r3, r7, #6
 8008418:	801a      	strh	r2, [r3, #0]
	LOG_INFO_LORAWAN(("lorawan_driver_LORA_SelectChannels (%d)\r\n",region));
	ChanMaskSetParams_t chanMaskSet;
	chanMaskSet.ChannelsMaskType = CHANNELS_REINIT_MASK;
 800841a:	2108      	movs	r1, #8
 800841c:	187b      	adds	r3, r7, r1
 800841e:	2202      	movs	r2, #2
 8008420:	711a      	strb	r2, [r3, #4]
	chanMaskSet.ChannelsMaskIn = channels;
 8008422:	187b      	adds	r3, r7, r1
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	601a      	str	r2, [r3, #0]
	switch ( region ) {
 8008428:	1dbb      	adds	r3, r7, #6
 800842a:	881a      	ldrh	r2, [r3, #0]
 800842c:	2380      	movs	r3, #128	; 0x80
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	429a      	cmp	r2, r3
 8008432:	d000      	beq.n	8008436 <lorawan_driver_LORA_SelectChannels+0x2a>
		if ( RegionChanMaskSet(LORAMAC_REGION_US915,&chanMaskSet) ) {
			return LORAWAN_CHANNEL_SUCCESS;
		}
		break;
	default:
		break;
 8008434:	e00a      	b.n	800844c <lorawan_driver_LORA_SelectChannels+0x40>
		if ( RegionChanMaskSet(LORAMAC_REGION_US915,&chanMaskSet) ) {
 8008436:	2308      	movs	r3, #8
 8008438:	18fb      	adds	r3, r7, r3
 800843a:	0019      	movs	r1, r3
 800843c:	2008      	movs	r0, #8
 800843e:	f00a faef 	bl	8012a20 <RegionChanMaskSet>
 8008442:	1e03      	subs	r3, r0, #0
 8008444:	d001      	beq.n	800844a <lorawan_driver_LORA_SelectChannels+0x3e>
			return LORAWAN_CHANNEL_SUCCESS;
 8008446:	2300      	movs	r3, #0
 8008448:	e001      	b.n	800844e <lorawan_driver_LORA_SelectChannels+0x42>
		break;
 800844a:	46c0      	nop			; (mov r8, r8)
	}
	LOG_WARN_LORAWAN(("[LoRaWan] Channel configuration error\r\n"));
	return LORAWAN_CHANNEL_FAILED;
 800844c:	2302      	movs	r3, #2
}
 800844e:	0018      	movs	r0, r3
 8008450:	46bd      	mov	sp, r7
 8008452:	b004      	add	sp, #16
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <lorawan_driver_LORA_getJoinState>:

/**
 * Return the current JoinState - use to follow the async join procedure
 * if used in polling mode
 */
lorawan_driver_joinState lorawan_driver_LORA_getJoinState(){
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWAN(("lorawan_driver_LORA_getJoinState\r\n"));
	return __loraWanState.joinState;
 800845c:	4b02      	ldr	r3, [pc, #8]	; (8008468 <lorawan_driver_LORA_getJoinState+0x10>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b2db      	uxtb	r3, r3
}
 8008462:	0018      	movs	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200001bc 	.word	0x200001bc

0800846c <McpsConfirm>:
// MCPS ( TX & RX Operations ) LAYER
// =============================================================================================


static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]

    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )

	switch (mcpsConfirm->Status){
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <McpsConfirm+0x16>
 800847c:	2b04      	cmp	r3, #4
 800847e:	d028      	beq.n	80084d2 <McpsConfirm+0x66>
 8008480:	e02f      	b.n	80084e2 <McpsConfirm+0x76>
	case LORAMAC_EVENT_INFO_STATUS_OK:
        switch( mcpsConfirm->McpsRequest )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d009      	beq.n	800849e <McpsConfirm+0x32>
 800848a:	2b03      	cmp	r3, #3
 800848c:	d018      	beq.n	80084c0 <McpsConfirm+0x54>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d11a      	bne.n	80084c8 <McpsConfirm+0x5c>
        {
            case MCPS_UNCONFIRMED:
            {
                // Check Datarate
                // Check TxPower
            	__loraWanState.sendState = LORAWAN_SEND_STATE_SENT;
 8008492:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <McpsConfirm+0x98>)
 8008494:	2202      	movs	r2, #2
 8008496:	705a      	strb	r2, [r3, #1]
            	lorawan_driver_onSendSuccess();
 8008498:	f013 fd52 	bl	801bf40 <lorawan_driver_onSendSuccess>
                break;
 800849c:	e018      	b.n	80084d0 <McpsConfirm+0x64>
            case MCPS_CONFIRMED:
            {
                // Check Datarate
                // Check TxPower
                // Check AckReceived
            	if(mcpsConfirm->AckReceived){
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <McpsConfirm+0x44>
            		// There are two type of ACK : w & w/o downlink, we will set the status later in the MLME layer
                	//__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED;
                	lorawan_driver_onSendSuccess();
 80084a6:	f013 fd4b 	bl	801bf40 <lorawan_driver_onSendSuccess>
                	lorawan_driver_onSendAckSuccess();
 80084aa:	f013 fd37 	bl	801bf1c <lorawan_driver_onSendAckSuccess>
                	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
                	lorawan_driver_onSendSuccess();
                	lorawan_driver_onSendSuccessAckFailed();
            	}
                // Check NbTrials
                break;
 80084ae:	e00f      	b.n	80084d0 <McpsConfirm+0x64>
                	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
 80084b0:	4b14      	ldr	r3, [pc, #80]	; (8008504 <McpsConfirm+0x98>)
 80084b2:	2207      	movs	r2, #7
 80084b4:	705a      	strb	r2, [r3, #1]
                	lorawan_driver_onSendSuccess();
 80084b6:	f013 fd43 	bl	801bf40 <lorawan_driver_onSendSuccess>
                	lorawan_driver_onSendSuccessAckFailed();
 80084ba:	f013 fd1d 	bl	801bef8 <lorawan_driver_onSendSuccessAckFailed>
                break;
 80084be:	e007      	b.n	80084d0 <McpsConfirm+0x64>
            }
            case MCPS_PROPRIETARY:
            {
            	__loraWanState.sendState = LORAWAN_SEND_STATE_NONE;
 80084c0:	4b10      	ldr	r3, [pc, #64]	; (8008504 <McpsConfirm+0x98>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	705a      	strb	r2, [r3, #1]
            	break;
 80084c6:	e003      	b.n	80084d0 <McpsConfirm+0x64>
            }
            default:
            	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 80084c8:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <McpsConfirm+0x98>)
 80084ca:	2208      	movs	r2, #8
 80084cc:	705a      	strb	r2, [r3, #1]
                break;
 80084ce:	46c0      	nop			; (mov r8, r8)
        }
        break;
 80084d0:	e00a      	b.n	80084e8 <McpsConfirm+0x7c>
    case LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT:
    	__loraWanState.sendState = LORAWAN_SEND_STATE_NOTACKED;
 80084d2:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <McpsConfirm+0x98>)
 80084d4:	2207      	movs	r2, #7
 80084d6:	705a      	strb	r2, [r3, #1]
    	lorawan_driver_onSendSuccess();
 80084d8:	f013 fd32 	bl	801bf40 <lorawan_driver_onSendSuccess>
    	lorawan_driver_onSendSuccessAckFailed();
 80084dc:	f013 fd0c 	bl	801bef8 <lorawan_driver_onSendSuccessAckFailed>
    	break;
 80084e0:	e002      	b.n	80084e8 <McpsConfirm+0x7c>
    default:
    	LOG_WARN_LORAWAN(("[LoRaWan] MCPSc returns(%d)\r\n",mcpsConfirm->Status));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 80084e2:	4b08      	ldr	r3, [pc, #32]	; (8008504 <McpsConfirm+0x98>)
 80084e4:	2208      	movs	r2, #8
 80084e6:	705a      	strb	r2, [r3, #1]
	}

    __loraWanState.upLinkCounter = mcpsConfirm->UpLinkCounter;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <McpsConfirm+0x98>)
 80084f0:	815a      	strh	r2, [r3, #10]
    __loraWanState.lastRetries = mcpsConfirm->NbRetries;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	795a      	ldrb	r2, [r3, #5]
 80084f6:	4b03      	ldr	r3, [pc, #12]	; (8008504 <McpsConfirm+0x98>)
 80084f8:	745a      	strb	r2, [r3, #17]

    //implicitely desactivated when VERBOSE_LEVEL < 2
    //TraceUpLinkFrame(mcpsConfirm);

}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	46bd      	mov	sp, r7
 80084fe:	b002      	add	sp, #8
 8008500:	bd80      	pop	{r7, pc}
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	200001bc 	.word	0x200001bc

08008508 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)

    //lora_AppData_t _AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	785b      	ldrb	r3, [r3, #1]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d003      	beq.n	8008520 <McpsIndication+0x18>
    {
    	LOG_WARN_LORAWAN(("[LoRaWan] MCPSi returns(%d)\r\n",mcpsIndication->Status));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_FAILED;
 8008518:	4b39      	ldr	r3, [pc, #228]	; (8008600 <McpsIndication+0xf8>)
 800851a:	2208      	movs	r2, #8
 800851c:	705a      	strb	r2, [r3, #1]
        return;
 800851e:	e06c      	b.n	80085fa <McpsIndication+0xf2>
    }

    switch( mcpsIndication->McpsIndication )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d008      	beq.n	800853a <McpsIndication+0x32>
 8008528:	dc02      	bgt.n	8008530 <McpsIndication+0x28>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <McpsIndication+0x36>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 800852e:	e00b      	b.n	8008548 <McpsIndication+0x40>
    switch( mcpsIndication->McpsIndication )
 8008530:	2b02      	cmp	r3, #2
 8008532:	d006      	beq.n	8008542 <McpsIndication+0x3a>
 8008534:	2b03      	cmp	r3, #3
 8008536:	d006      	beq.n	8008546 <McpsIndication+0x3e>
            break;
 8008538:	e006      	b.n	8008548 <McpsIndication+0x40>
            break;
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	e004      	b.n	8008548 <McpsIndication+0x40>
            break;
 800853e:	46c0      	nop			; (mov r8, r8)
 8008540:	e002      	b.n	8008548 <McpsIndication+0x40>
            break;
 8008542:	46c0      	nop			; (mov r8, r8)
 8008544:	e000      	b.n	8008548 <McpsIndication+0x40>
            break;
 8008546:	46c0      	nop			; (mov r8, r8)
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 8008548:	f7ff fa12 	bl	8007970 <certif_running>
 800854c:	1e03      	subs	r3, r0, #0
 800854e:	d001      	beq.n	8008554 <McpsIndication+0x4c>
    {
      certif_DownLinkIncrement( );
 8008550:	f7ff fa18 	bl	8007984 <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7b5b      	ldrb	r3, [r3, #13]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d033      	beq.n	80085c4 <McpsIndication+0xbc>
    {
      switch( mcpsIndication->Port )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	78db      	ldrb	r3, [r3, #3]
 8008560:	2be0      	cmp	r3, #224	; 0xe0
 8008562:	d109      	bne.n	8008578 <McpsIndication+0x70>
      {
        case CERTIF_PORT:
          // revoir cette partie... pas top de garder des param comme ca en rab
          certif_rx( mcpsIndication, &JoinParameters );
 8008564:	4a27      	ldr	r2, [pc, #156]	; (8008604 <McpsIndication+0xfc>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	0011      	movs	r1, r2
 800856a:	0018      	movs	r0, r3
 800856c:	f7ff facc 	bl	8007b08 <certif_rx>
          __loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK;
 8008570:	4b23      	ldr	r3, [pc, #140]	; (8008600 <McpsIndication+0xf8>)
 8008572:	2205      	movs	r2, #5
 8008574:	705a      	strb	r2, [r3, #1]
          break;
 8008576:	e028      	b.n	80085ca <McpsIndication+0xc2>
        default:

          LOG_INFO_LORAWAN(("### Data received\r\n"));
          __lorawan_driver_lastDownlink.size = mcpsIndication->BufferSize;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7b1a      	ldrb	r2, [r3, #12]
 800857c:	4b22      	ldr	r3, [pc, #136]	; (8008608 <McpsIndication+0x100>)
 800857e:	705a      	strb	r2, [r3, #1]
          __lorawan_driver_lastDownlink.port = mcpsIndication->Port;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	78da      	ldrb	r2, [r3, #3]
 8008584:	4b20      	ldr	r3, [pc, #128]	; (8008608 <McpsIndication+0x100>)
 8008586:	701a      	strb	r2, [r3, #0]
		  bcopy(
				mcpsIndication->Buffer,
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6898      	ldr	r0, [r3, #8]
				__lorawan_driver_lastDownlink.data,
				((mcpsIndication->BufferSize<=ITSDK_LORAWAN_MAX_DWNLNKSZ)?mcpsIndication->BufferSize:ITSDK_LORAWAN_MAX_DWNLNKSZ)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	7b1b      	ldrb	r3, [r3, #12]
 8008590:	1c1a      	adds	r2, r3, #0
 8008592:	b2d3      	uxtb	r3, r2
 8008594:	2b20      	cmp	r3, #32
 8008596:	d901      	bls.n	800859c <McpsIndication+0x94>
 8008598:	2320      	movs	r3, #32
 800859a:	1c1a      	adds	r2, r3, #0
 800859c:	b2d3      	uxtb	r3, r2
		  bcopy(
 800859e:	001a      	movs	r2, r3
 80085a0:	4b1a      	ldr	r3, [pc, #104]	; (800860c <McpsIndication+0x104>)
 80085a2:	0019      	movs	r1, r3
 80085a4:	f016 fa0b 	bl	801e9be <bcopy>
          );
          lorawan_driver_onDataReception(
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	78d8      	ldrb	r0, [r3, #3]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6899      	ldr	r1, [r3, #8]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	7b1b      	ldrb	r3, [r3, #12]
 80085b4:	001a      	movs	r2, r3
 80085b6:	f013 fcd5 	bl	801bf64 <lorawan_driver_onDataReception>
        		  mcpsIndication->Port,
				  mcpsIndication->Buffer,
				  mcpsIndication->BufferSize
          );
          __loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_WITH_DOWNLINK;
 80085ba:	4b11      	ldr	r3, [pc, #68]	; (8008600 <McpsIndication+0xf8>)
 80085bc:	2205      	movs	r2, #5
 80085be:	705a      	strb	r2, [r3, #1]
          break;
 80085c0:	46c0      	nop			; (mov r8, r8)
 80085c2:	e002      	b.n	80085ca <McpsIndication+0xc2>
      }
    } else {
    	__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_NO_DOWNLINK;
 80085c4:	4b0e      	ldr	r3, [pc, #56]	; (8008600 <McpsIndication+0xf8>)
 80085c6:	2204      	movs	r2, #4
 80085c8:	705a      	strb	r2, [r3, #1]

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	795b      	ldrb	r3, [r3, #5]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d104      	bne.n	80085dc <McpsIndication+0xd4>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
    	LOG_INFO_LORAWAN(("[LoRaWAN] Network Server is asking for an uplink transmission\r\n"));
    	__loraWanState.sendState = LORAWAN_SEND_STATE_ACKED_DOWNLINK_PENDING;
 80085d2:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <McpsIndication+0xf8>)
 80085d4:	2206      	movs	r2, #6
 80085d6:	705a      	strb	r2, [r3, #1]
    	lorawan_driver_onPendingDownlink();
 80085d8:	f013 fce4 	bl	801bfa4 <lorawan_driver_onPendingDownlink>

    }

    __loraWanState.lastRssi = mcpsIndication->Rssi;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	220e      	movs	r2, #14
 80085e0:	5e9a      	ldrsh	r2, [r3, r2]
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <McpsIndication+0xf8>)
 80085e4:	81da      	strh	r2, [r3, #14]
    __loraWanState.downlinkCounter = mcpsIndication->DownLinkCounter;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	4b04      	ldr	r3, [pc, #16]	; (8008600 <McpsIndication+0xf8>)
 80085ee:	819a      	strh	r2, [r3, #12]
    __loraWanState.lastSnr = mcpsIndication->Snr;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2210      	movs	r2, #16
 80085f4:	569a      	ldrsb	r2, [r3, r2]
 80085f6:	4b02      	ldr	r3, [pc, #8]	; (8008600 <McpsIndication+0xf8>)
 80085f8:	741a      	strb	r2, [r3, #16]

}
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b002      	add	sp, #8
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	200001bc 	.word	0x200001bc
 8008604:	20000204 	.word	0x20000204
 8008608:	200001e0 	.word	0x200001e0
 800860c:	200001e2 	.word	0x200001e2

08008610 <MlmeConfirm>:
// =============================================================================================
// MLME ( Management ) LAYER
// =============================================================================================

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8008610:	b590      	push	{r4, r7, lr}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)

    switch( mlmeConfirm->MlmeRequest )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <MlmeConfirm+0x16>
 8008620:	2b03      	cmp	r3, #3
 8008622:	d01c      	beq.n	800865e <MlmeConfirm+0x4e>
            }
        }
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8008624:	e028      	b.n	8008678 <MlmeConfirm+0x68>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d111      	bne.n	8008652 <MlmeConfirm+0x42>
              __loraWanState.joinState = LORAWAN_STATE_JOIN_SUCCESS;
 800862e:	4b14      	ldr	r3, [pc, #80]	; (8008680 <MlmeConfirm+0x70>)
 8008630:	2203      	movs	r2, #3
 8008632:	701a      	strb	r2, [r3, #0]
              __loraWanState.joinTime = (uint32_t)(itsdk_time_get_ms()/1000);
 8008634:	f014 fa48 	bl	801cac8 <itsdk_time_get_ms>
 8008638:	22fa      	movs	r2, #250	; 0xfa
 800863a:	0092      	lsls	r2, r2, #2
 800863c:	2300      	movs	r3, #0
 800863e:	f7f7 ff43 	bl	80004c8 <__aeabi_uldivmod>
 8008642:	0003      	movs	r3, r0
 8008644:	000c      	movs	r4, r1
 8008646:	001a      	movs	r2, r3
 8008648:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <MlmeConfirm+0x70>)
 800864a:	605a      	str	r2, [r3, #4]
              lorawan_driver_onJoinSuccess();
 800864c:	f013 fc28 	bl	801bea0 <lorawan_driver_onJoinSuccess>
            break;
 8008650:	e012      	b.n	8008678 <MlmeConfirm+0x68>
            	__loraWanState.joinState = LORAWAN_STATE_JOIN_FAILED;
 8008652:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <MlmeConfirm+0x70>)
 8008654:	2204      	movs	r2, #4
 8008656:	701a      	strb	r2, [r3, #0]
            	lorawan_driver_onJoinFailed();
 8008658:	f013 fc32 	bl	801bec0 <lorawan_driver_onJoinFailed>
            break;
 800865c:	e00c      	b.n	8008678 <MlmeConfirm+0x68>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	785b      	ldrb	r3, [r3, #1]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d107      	bne.n	8008676 <MlmeConfirm+0x66>
                if (certif_running() == true ){
 8008666:	f7ff f983 	bl	8007970 <certif_running>
 800866a:	1e03      	subs	r3, r0, #0
 800866c:	d003      	beq.n	8008676 <MlmeConfirm+0x66>
                     certif_linkCheck(mlmeConfirm);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	0018      	movs	r0, r3
 8008672:	f7ff f997 	bl	80079a4 <certif_linkCheck>
            break;
 8008676:	46c0      	nop			; (mov r8, r8)
    }
}
 8008678:	46c0      	nop			; (mov r8, r8)
 800867a:	46bd      	mov	sp, r7
 800867c:	b003      	add	sp, #12
 800867e:	bd90      	pop	{r4, r7, pc}
 8008680:	200001bc 	.word	0x200001bc

08008684 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b06      	cmp	r3, #6
 8008692:	d000      	beq.n	8008696 <MlmeIndication+0x12>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8008694:	e002      	b.n	800869c <MlmeIndication+0x18>
        	lorawan_driver_onTxNeeded();
 8008696:	f7ff fc31 	bl	8007efc <lorawan_driver_onTxNeeded>
            break;
 800869a:	46c0      	nop			; (mov r8, r8)
    }
}
 800869c:	46c0      	nop			; (mov r8, r8)
 800869e:	46bd      	mov	sp, r7
 80086a0:	b002      	add	sp, #8
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3301      	adds	r3, #1
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	7852      	ldrb	r2, [r2, #1]
 80086be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3302      	adds	r3, #2
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	7892      	ldrb	r2, [r2, #2]
 80086c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3303      	adds	r3, #3
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	78d2      	ldrb	r2, [r2, #3]
 80086d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	7912      	ldrb	r2, [r2, #4]
 80086dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3305      	adds	r3, #5
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	7952      	ldrb	r2, [r2, #5]
 80086e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3306      	adds	r3, #6
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	7992      	ldrb	r2, [r2, #6]
 80086f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3307      	adds	r3, #7
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	79d2      	ldrb	r2, [r2, #7]
 80086fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3308      	adds	r3, #8
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	7a12      	ldrb	r2, [r2, #8]
 8008704:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3309      	adds	r3, #9
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	7a52      	ldrb	r2, [r2, #9]
 800870e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	330a      	adds	r3, #10
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	7a92      	ldrb	r2, [r2, #10]
 8008718:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	330b      	adds	r3, #11
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	7ad2      	ldrb	r2, [r2, #11]
 8008722:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	330c      	adds	r3, #12
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	7b12      	ldrb	r2, [r2, #12]
 800872c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	330d      	adds	r3, #13
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	7b52      	ldrb	r2, [r2, #13]
 8008736:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	330e      	adds	r3, #14
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	7b92      	ldrb	r2, [r2, #14]
 8008740:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	330f      	adds	r3, #15
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	7bd2      	ldrb	r2, [r2, #15]
 800874a:	701a      	strb	r2, [r3, #0]
#endif
}
 800874c:	46c0      	nop			; (mov r8, r8)
 800874e:	46bd      	mov	sp, r7
 8008750:	b002      	add	sp, #8
 8008752:	bd80      	pop	{r7, pc}

08008754 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	1dfb      	adds	r3, r7, #7
 8008760:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8008762:	e007      	b.n	8008774 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	1c53      	adds	r3, r2, #1
 8008768:	60bb      	str	r3, [r7, #8]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	1c59      	adds	r1, r3, #1
 800876e:	60f9      	str	r1, [r7, #12]
 8008770:	7812      	ldrb	r2, [r2, #0]
 8008772:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8008774:	1dfb      	adds	r3, r7, #7
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	1dfa      	adds	r2, r7, #7
 800877a:	1e59      	subs	r1, r3, #1
 800877c:	7011      	strb	r1, [r2, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f0      	bne.n	8008764 <copy_block_nn+0x10>
}
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	46bd      	mov	sp, r7
 8008786:	b004      	add	sp, #16
 8008788:	bd80      	pop	{r7, pc}

0800878a <xor_block>:

static void xor_block( void *d, const void *s )
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	4053      	eors	r3, r2
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3301      	adds	r3, #1
 80087a8:	7819      	ldrb	r1, [r3, #0]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	3301      	adds	r3, #1
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3301      	adds	r3, #1
 80087b4:	404a      	eors	r2, r1
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3302      	adds	r3, #2
 80087be:	7819      	ldrb	r1, [r3, #0]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	3302      	adds	r3, #2
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	3302      	adds	r3, #2
 80087ca:	404a      	eors	r2, r1
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3303      	adds	r3, #3
 80087d4:	7819      	ldrb	r1, [r3, #0]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	3303      	adds	r3, #3
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3303      	adds	r3, #3
 80087e0:	404a      	eors	r2, r1
 80087e2:	b2d2      	uxtb	r2, r2
 80087e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	3304      	adds	r3, #4
 80087ea:	7819      	ldrb	r1, [r3, #0]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	3304      	adds	r3, #4
 80087f0:	781a      	ldrb	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3304      	adds	r3, #4
 80087f6:	404a      	eors	r2, r1
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3305      	adds	r3, #5
 8008800:	7819      	ldrb	r1, [r3, #0]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	3305      	adds	r3, #5
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3305      	adds	r3, #5
 800880c:	404a      	eors	r2, r1
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3306      	adds	r3, #6
 8008816:	7819      	ldrb	r1, [r3, #0]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	3306      	adds	r3, #6
 800881c:	781a      	ldrb	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3306      	adds	r3, #6
 8008822:	404a      	eors	r2, r1
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3307      	adds	r3, #7
 800882c:	7819      	ldrb	r1, [r3, #0]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3307      	adds	r3, #7
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3307      	adds	r3, #7
 8008838:	404a      	eors	r2, r1
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3308      	adds	r3, #8
 8008842:	7819      	ldrb	r1, [r3, #0]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	781a      	ldrb	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3308      	adds	r3, #8
 800884e:	404a      	eors	r2, r1
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3309      	adds	r3, #9
 8008858:	7819      	ldrb	r1, [r3, #0]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	3309      	adds	r3, #9
 800885e:	781a      	ldrb	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3309      	adds	r3, #9
 8008864:	404a      	eors	r2, r1
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	330a      	adds	r3, #10
 800886e:	7819      	ldrb	r1, [r3, #0]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	330a      	adds	r3, #10
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	330a      	adds	r3, #10
 800887a:	404a      	eors	r2, r1
 800887c:	b2d2      	uxtb	r2, r2
 800887e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	330b      	adds	r3, #11
 8008884:	7819      	ldrb	r1, [r3, #0]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	330b      	adds	r3, #11
 800888a:	781a      	ldrb	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	330b      	adds	r3, #11
 8008890:	404a      	eors	r2, r1
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	330c      	adds	r3, #12
 800889a:	7819      	ldrb	r1, [r3, #0]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	330c      	adds	r3, #12
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	330c      	adds	r3, #12
 80088a6:	404a      	eors	r2, r1
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	330d      	adds	r3, #13
 80088b0:	7819      	ldrb	r1, [r3, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	330d      	adds	r3, #13
 80088b6:	781a      	ldrb	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	330d      	adds	r3, #13
 80088bc:	404a      	eors	r2, r1
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	330e      	adds	r3, #14
 80088c6:	7819      	ldrb	r1, [r3, #0]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	330e      	adds	r3, #14
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	330e      	adds	r3, #14
 80088d2:	404a      	eors	r2, r1
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	330f      	adds	r3, #15
 80088dc:	7819      	ldrb	r1, [r3, #0]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	330f      	adds	r3, #15
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	330f      	adds	r3, #15
 80088e8:	404a      	eors	r2, r1
 80088ea:	b2d2      	uxtb	r2, r2
 80088ec:	701a      	strb	r2, [r3, #0]
#endif
}
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	46bd      	mov	sp, r7
 80088f2:	b002      	add	sp, #8
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	4053      	eors	r3, r2
 800890c:	b2da      	uxtb	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	3301      	adds	r3, #1
 8008916:	7819      	ldrb	r1, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3301      	adds	r3, #1
 800891c:	781a      	ldrb	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	404a      	eors	r2, r1
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	3302      	adds	r3, #2
 800892c:	7819      	ldrb	r1, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3302      	adds	r3, #2
 8008932:	781a      	ldrb	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3302      	adds	r3, #2
 8008938:	404a      	eors	r2, r1
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3303      	adds	r3, #3
 8008942:	7819      	ldrb	r1, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3303      	adds	r3, #3
 8008948:	781a      	ldrb	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3303      	adds	r3, #3
 800894e:	404a      	eors	r2, r1
 8008950:	b2d2      	uxtb	r2, r2
 8008952:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	3304      	adds	r3, #4
 8008958:	7819      	ldrb	r1, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3304      	adds	r3, #4
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3304      	adds	r3, #4
 8008964:	404a      	eors	r2, r1
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3305      	adds	r3, #5
 800896e:	7819      	ldrb	r1, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3305      	adds	r3, #5
 8008974:	781a      	ldrb	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3305      	adds	r3, #5
 800897a:	404a      	eors	r2, r1
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	3306      	adds	r3, #6
 8008984:	7819      	ldrb	r1, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3306      	adds	r3, #6
 800898a:	781a      	ldrb	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3306      	adds	r3, #6
 8008990:	404a      	eors	r2, r1
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	3307      	adds	r3, #7
 800899a:	7819      	ldrb	r1, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3307      	adds	r3, #7
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3307      	adds	r3, #7
 80089a6:	404a      	eors	r2, r1
 80089a8:	b2d2      	uxtb	r2, r2
 80089aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	3308      	adds	r3, #8
 80089b0:	7819      	ldrb	r1, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3308      	adds	r3, #8
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3308      	adds	r3, #8
 80089bc:	404a      	eors	r2, r1
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	3309      	adds	r3, #9
 80089c6:	7819      	ldrb	r1, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3309      	adds	r3, #9
 80089cc:	781a      	ldrb	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3309      	adds	r3, #9
 80089d2:	404a      	eors	r2, r1
 80089d4:	b2d2      	uxtb	r2, r2
 80089d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	330a      	adds	r3, #10
 80089dc:	7819      	ldrb	r1, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	330a      	adds	r3, #10
 80089e2:	781a      	ldrb	r2, [r3, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	330a      	adds	r3, #10
 80089e8:	404a      	eors	r2, r1
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	330b      	adds	r3, #11
 80089f2:	7819      	ldrb	r1, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	330b      	adds	r3, #11
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	330b      	adds	r3, #11
 80089fe:	404a      	eors	r2, r1
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	330c      	adds	r3, #12
 8008a08:	7819      	ldrb	r1, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	330c      	adds	r3, #12
 8008a14:	404a      	eors	r2, r1
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	330d      	adds	r3, #13
 8008a1e:	7819      	ldrb	r1, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	330d      	adds	r3, #13
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	330d      	adds	r3, #13
 8008a2a:	404a      	eors	r2, r1
 8008a2c:	b2d2      	uxtb	r2, r2
 8008a2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	330e      	adds	r3, #14
 8008a34:	7819      	ldrb	r1, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	330e      	adds	r3, #14
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	330e      	adds	r3, #14
 8008a40:	404a      	eors	r2, r1
 8008a42:	b2d2      	uxtb	r2, r2
 8008a44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	330f      	adds	r3, #15
 8008a4a:	7819      	ldrb	r1, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	330f      	adds	r3, #15
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	330f      	adds	r3, #15
 8008a56:	404a      	eors	r2, r1
 8008a58:	b2d2      	uxtb	r2, r2
 8008a5a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8008a5c:	46c0      	nop			; (mov r8, r8)
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	b004      	add	sp, #16
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	0011      	movs	r1, r2
 8008a74:	0018      	movs	r0, r3
 8008a76:	f7ff fe88 	bl	800878a <xor_block>
}
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	b002      	add	sp, #8
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	001a      	movs	r2, r3
 8008a92:	4b4c      	ldr	r3, [pc, #304]	; (8008bc4 <shift_sub_rows+0x140>)
 8008a94:	5c9a      	ldrb	r2, [r3, r2]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	4a47      	ldr	r2, [pc, #284]	; (8008bc4 <shift_sub_rows+0x140>)
 8008aa8:	5c52      	ldrb	r2, [r2, r1]
 8008aaa:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	0019      	movs	r1, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	4a42      	ldr	r2, [pc, #264]	; (8008bc4 <shift_sub_rows+0x140>)
 8008aba:	5c52      	ldrb	r2, [r2, r1]
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	0019      	movs	r1, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	330c      	adds	r3, #12
 8008aca:	4a3e      	ldr	r2, [pc, #248]	; (8008bc4 <shift_sub_rows+0x140>)
 8008acc:	5c52      	ldrb	r2, [r2, r1]
 8008ace:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8008ad0:	200f      	movs	r0, #15
 8008ad2:	183b      	adds	r3, r7, r0
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	7852      	ldrb	r2, [r2, #1]
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3305      	adds	r3, #5
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	0019      	movs	r1, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	4a37      	ldr	r2, [pc, #220]	; (8008bc4 <shift_sub_rows+0x140>)
 8008ae8:	5c52      	ldrb	r2, [r2, r1]
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3309      	adds	r3, #9
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	0019      	movs	r1, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3305      	adds	r3, #5
 8008af8:	4a32      	ldr	r2, [pc, #200]	; (8008bc4 <shift_sub_rows+0x140>)
 8008afa:	5c52      	ldrb	r2, [r2, r1]
 8008afc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	330d      	adds	r3, #13
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	0019      	movs	r1, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3309      	adds	r3, #9
 8008b0a:	4a2e      	ldr	r2, [pc, #184]	; (8008bc4 <shift_sub_rows+0x140>)
 8008b0c:	5c52      	ldrb	r2, [r2, r1]
 8008b0e:	701a      	strb	r2, [r3, #0]
 8008b10:	183b      	adds	r3, r7, r0
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	330d      	adds	r3, #13
 8008b18:	492a      	ldr	r1, [pc, #168]	; (8008bc4 <shift_sub_rows+0x140>)
 8008b1a:	5c8a      	ldrb	r2, [r1, r2]
 8008b1c:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8008b1e:	183b      	adds	r3, r7, r0
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	7892      	ldrb	r2, [r2, #2]
 8008b24:	701a      	strb	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	330a      	adds	r3, #10
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	0019      	movs	r1, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3302      	adds	r3, #2
 8008b32:	4a24      	ldr	r2, [pc, #144]	; (8008bc4 <shift_sub_rows+0x140>)
 8008b34:	5c52      	ldrb	r2, [r2, r1]
 8008b36:	701a      	strb	r2, [r3, #0]
 8008b38:	183b      	adds	r3, r7, r0
 8008b3a:	781a      	ldrb	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	330a      	adds	r3, #10
 8008b40:	4920      	ldr	r1, [pc, #128]	; (8008bc4 <shift_sub_rows+0x140>)
 8008b42:	5c8a      	ldrb	r2, [r1, r2]
 8008b44:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8008b46:	183b      	adds	r3, r7, r0
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	7992      	ldrb	r2, [r2, #6]
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	330e      	adds	r3, #14
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	0019      	movs	r1, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3306      	adds	r3, #6
 8008b5a:	4a1a      	ldr	r2, [pc, #104]	; (8008bc4 <shift_sub_rows+0x140>)
 8008b5c:	5c52      	ldrb	r2, [r2, r1]
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	183b      	adds	r3, r7, r0
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	330e      	adds	r3, #14
 8008b68:	4916      	ldr	r1, [pc, #88]	; (8008bc4 <shift_sub_rows+0x140>)
 8008b6a:	5c8a      	ldrb	r2, [r1, r2]
 8008b6c:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8008b6e:	183b      	adds	r3, r7, r0
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	7bd2      	ldrb	r2, [r2, #15]
 8008b74:	701a      	strb	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	330b      	adds	r3, #11
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	0019      	movs	r1, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	330f      	adds	r3, #15
 8008b82:	4a10      	ldr	r2, [pc, #64]	; (8008bc4 <shift_sub_rows+0x140>)
 8008b84:	5c52      	ldrb	r2, [r2, r1]
 8008b86:	701a      	strb	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3307      	adds	r3, #7
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	0019      	movs	r1, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	330b      	adds	r3, #11
 8008b94:	4a0b      	ldr	r2, [pc, #44]	; (8008bc4 <shift_sub_rows+0x140>)
 8008b96:	5c52      	ldrb	r2, [r2, r1]
 8008b98:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3303      	adds	r3, #3
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3307      	adds	r3, #7
 8008ba6:	4a07      	ldr	r2, [pc, #28]	; (8008bc4 <shift_sub_rows+0x140>)
 8008ba8:	5c52      	ldrb	r2, [r2, r1]
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	183b      	adds	r3, r7, r0
 8008bae:	781a      	ldrb	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3303      	adds	r3, #3
 8008bb4:	4903      	ldr	r1, [pc, #12]	; (8008bc4 <shift_sub_rows+0x140>)
 8008bb6:	5c8a      	ldrb	r2, [r1, r2]
 8008bb8:	701a      	strb	r2, [r3, #0]
}
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b004      	add	sp, #16
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	08020390 	.word	0x08020390

08008bc8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	2008      	movs	r0, #8
 8008bd4:	0004      	movs	r4, r0
 8008bd6:	183b      	adds	r3, r7, r0
 8008bd8:	0011      	movs	r1, r2
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f7ff fd62 	bl	80086a4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8008be0:	0020      	movs	r0, r4
 8008be2:	183b      	adds	r3, r7, r0
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	001a      	movs	r2, r3
 8008be8:	4be7      	ldr	r3, [pc, #924]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008bea:	5c9a      	ldrb	r2, [r3, r2]
 8008bec:	183b      	adds	r3, r7, r0
 8008bee:	795b      	ldrb	r3, [r3, #5]
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	4be6      	ldr	r3, [pc, #920]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008bf4:	5c5b      	ldrb	r3, [r3, r1]
 8008bf6:	4053      	eors	r3, r2
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	183b      	adds	r3, r7, r0
 8008bfc:	7a9b      	ldrb	r3, [r3, #10]
 8008bfe:	0019      	movs	r1, r3
 8008c00:	4be3      	ldr	r3, [pc, #908]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008c02:	5c5b      	ldrb	r3, [r3, r1]
 8008c04:	4053      	eors	r3, r2
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	183b      	adds	r3, r7, r0
 8008c0a:	7bdb      	ldrb	r3, [r3, #15]
 8008c0c:	0019      	movs	r1, r3
 8008c0e:	4be0      	ldr	r3, [pc, #896]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008c10:	5c5b      	ldrb	r3, [r3, r1]
 8008c12:	4053      	eors	r3, r2
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8008c1a:	183b      	adds	r3, r7, r0
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	001a      	movs	r2, r3
 8008c20:	4bdb      	ldr	r3, [pc, #876]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008c22:	5c9a      	ldrb	r2, [r3, r2]
 8008c24:	183b      	adds	r3, r7, r0
 8008c26:	795b      	ldrb	r3, [r3, #5]
 8008c28:	0019      	movs	r1, r3
 8008c2a:	4bd7      	ldr	r3, [pc, #860]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008c2c:	5c5b      	ldrb	r3, [r3, r1]
 8008c2e:	4053      	eors	r3, r2
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	183b      	adds	r3, r7, r0
 8008c34:	7a9b      	ldrb	r3, [r3, #10]
 8008c36:	0019      	movs	r1, r3
 8008c38:	4bd4      	ldr	r3, [pc, #848]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008c3a:	5c5b      	ldrb	r3, [r3, r1]
 8008c3c:	4053      	eors	r3, r2
 8008c3e:	b2d9      	uxtb	r1, r3
 8008c40:	183b      	adds	r3, r7, r0
 8008c42:	7bdb      	ldrb	r3, [r3, #15]
 8008c44:	001a      	movs	r2, r3
 8008c46:	4bd2      	ldr	r3, [pc, #840]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008c48:	5c9a      	ldrb	r2, [r3, r2]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	404a      	eors	r2, r1
 8008c50:	b2d2      	uxtb	r2, r2
 8008c52:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8008c54:	183b      	adds	r3, r7, r0
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	001a      	movs	r2, r3
 8008c5a:	4bcd      	ldr	r3, [pc, #820]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008c5c:	5c9a      	ldrb	r2, [r3, r2]
 8008c5e:	183b      	adds	r3, r7, r0
 8008c60:	795b      	ldrb	r3, [r3, #5]
 8008c62:	0019      	movs	r1, r3
 8008c64:	4bca      	ldr	r3, [pc, #808]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008c66:	5c5b      	ldrb	r3, [r3, r1]
 8008c68:	4053      	eors	r3, r2
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	183b      	adds	r3, r7, r0
 8008c6e:	7a9b      	ldrb	r3, [r3, #10]
 8008c70:	0019      	movs	r1, r3
 8008c72:	4bc5      	ldr	r3, [pc, #788]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008c74:	5c5b      	ldrb	r3, [r3, r1]
 8008c76:	4053      	eors	r3, r2
 8008c78:	b2d9      	uxtb	r1, r3
 8008c7a:	183b      	adds	r3, r7, r0
 8008c7c:	7bdb      	ldrb	r3, [r3, #15]
 8008c7e:	001a      	movs	r2, r3
 8008c80:	4bc2      	ldr	r3, [pc, #776]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008c82:	5c9a      	ldrb	r2, [r3, r2]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3302      	adds	r3, #2
 8008c88:	404a      	eors	r2, r1
 8008c8a:	b2d2      	uxtb	r2, r2
 8008c8c:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8008c8e:	183b      	adds	r3, r7, r0
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	001a      	movs	r2, r3
 8008c94:	4bbd      	ldr	r3, [pc, #756]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008c96:	5c9a      	ldrb	r2, [r3, r2]
 8008c98:	183b      	adds	r3, r7, r0
 8008c9a:	795b      	ldrb	r3, [r3, #5]
 8008c9c:	0019      	movs	r1, r3
 8008c9e:	4bbc      	ldr	r3, [pc, #752]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008ca0:	5c5b      	ldrb	r3, [r3, r1]
 8008ca2:	4053      	eors	r3, r2
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	183b      	adds	r3, r7, r0
 8008ca8:	7a9b      	ldrb	r3, [r3, #10]
 8008caa:	0019      	movs	r1, r3
 8008cac:	4bb8      	ldr	r3, [pc, #736]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008cae:	5c5b      	ldrb	r3, [r3, r1]
 8008cb0:	4053      	eors	r3, r2
 8008cb2:	b2d9      	uxtb	r1, r3
 8008cb4:	183b      	adds	r3, r7, r0
 8008cb6:	7bdb      	ldrb	r3, [r3, #15]
 8008cb8:	001a      	movs	r2, r3
 8008cba:	4bb3      	ldr	r3, [pc, #716]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008cbc:	5c9a      	ldrb	r2, [r3, r2]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3303      	adds	r3, #3
 8008cc2:	404a      	eors	r2, r1
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8008cc8:	183b      	adds	r3, r7, r0
 8008cca:	791b      	ldrb	r3, [r3, #4]
 8008ccc:	001a      	movs	r2, r3
 8008cce:	4bae      	ldr	r3, [pc, #696]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008cd0:	5c9a      	ldrb	r2, [r3, r2]
 8008cd2:	183b      	adds	r3, r7, r0
 8008cd4:	7a5b      	ldrb	r3, [r3, #9]
 8008cd6:	0019      	movs	r1, r3
 8008cd8:	4bac      	ldr	r3, [pc, #688]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008cda:	5c5b      	ldrb	r3, [r3, r1]
 8008cdc:	4053      	eors	r3, r2
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	183b      	adds	r3, r7, r0
 8008ce2:	7b9b      	ldrb	r3, [r3, #14]
 8008ce4:	0019      	movs	r1, r3
 8008ce6:	4baa      	ldr	r3, [pc, #680]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008ce8:	5c5b      	ldrb	r3, [r3, r1]
 8008cea:	4053      	eors	r3, r2
 8008cec:	b2d9      	uxtb	r1, r3
 8008cee:	183b      	adds	r3, r7, r0
 8008cf0:	78db      	ldrb	r3, [r3, #3]
 8008cf2:	001a      	movs	r2, r3
 8008cf4:	4ba6      	ldr	r3, [pc, #664]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008cf6:	5c9a      	ldrb	r2, [r3, r2]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	404a      	eors	r2, r1
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8008d02:	183b      	adds	r3, r7, r0
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	001a      	movs	r2, r3
 8008d08:	4ba1      	ldr	r3, [pc, #644]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008d0a:	5c9a      	ldrb	r2, [r3, r2]
 8008d0c:	183b      	adds	r3, r7, r0
 8008d0e:	7a5b      	ldrb	r3, [r3, #9]
 8008d10:	0019      	movs	r1, r3
 8008d12:	4b9d      	ldr	r3, [pc, #628]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008d14:	5c5b      	ldrb	r3, [r3, r1]
 8008d16:	4053      	eors	r3, r2
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	183b      	adds	r3, r7, r0
 8008d1c:	7b9b      	ldrb	r3, [r3, #14]
 8008d1e:	0019      	movs	r1, r3
 8008d20:	4b9a      	ldr	r3, [pc, #616]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008d22:	5c5b      	ldrb	r3, [r3, r1]
 8008d24:	4053      	eors	r3, r2
 8008d26:	b2d9      	uxtb	r1, r3
 8008d28:	183b      	adds	r3, r7, r0
 8008d2a:	78db      	ldrb	r3, [r3, #3]
 8008d2c:	001a      	movs	r2, r3
 8008d2e:	4b98      	ldr	r3, [pc, #608]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008d30:	5c9a      	ldrb	r2, [r3, r2]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	3305      	adds	r3, #5
 8008d36:	404a      	eors	r2, r1
 8008d38:	b2d2      	uxtb	r2, r2
 8008d3a:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8008d3c:	183b      	adds	r3, r7, r0
 8008d3e:	791b      	ldrb	r3, [r3, #4]
 8008d40:	001a      	movs	r2, r3
 8008d42:	4b93      	ldr	r3, [pc, #588]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008d44:	5c9a      	ldrb	r2, [r3, r2]
 8008d46:	183b      	adds	r3, r7, r0
 8008d48:	7a5b      	ldrb	r3, [r3, #9]
 8008d4a:	0019      	movs	r1, r3
 8008d4c:	4b90      	ldr	r3, [pc, #576]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008d4e:	5c5b      	ldrb	r3, [r3, r1]
 8008d50:	4053      	eors	r3, r2
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	183b      	adds	r3, r7, r0
 8008d56:	7b9b      	ldrb	r3, [r3, #14]
 8008d58:	0019      	movs	r1, r3
 8008d5a:	4b8b      	ldr	r3, [pc, #556]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008d5c:	5c5b      	ldrb	r3, [r3, r1]
 8008d5e:	4053      	eors	r3, r2
 8008d60:	b2d9      	uxtb	r1, r3
 8008d62:	183b      	adds	r3, r7, r0
 8008d64:	78db      	ldrb	r3, [r3, #3]
 8008d66:	001a      	movs	r2, r3
 8008d68:	4b88      	ldr	r3, [pc, #544]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008d6a:	5c9a      	ldrb	r2, [r3, r2]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3306      	adds	r3, #6
 8008d70:	404a      	eors	r2, r1
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8008d76:	183b      	adds	r3, r7, r0
 8008d78:	791b      	ldrb	r3, [r3, #4]
 8008d7a:	001a      	movs	r2, r3
 8008d7c:	4b83      	ldr	r3, [pc, #524]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008d7e:	5c9a      	ldrb	r2, [r3, r2]
 8008d80:	183b      	adds	r3, r7, r0
 8008d82:	7a5b      	ldrb	r3, [r3, #9]
 8008d84:	0019      	movs	r1, r3
 8008d86:	4b82      	ldr	r3, [pc, #520]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008d88:	5c5b      	ldrb	r3, [r3, r1]
 8008d8a:	4053      	eors	r3, r2
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	183b      	adds	r3, r7, r0
 8008d90:	7b9b      	ldrb	r3, [r3, #14]
 8008d92:	0019      	movs	r1, r3
 8008d94:	4b7e      	ldr	r3, [pc, #504]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008d96:	5c5b      	ldrb	r3, [r3, r1]
 8008d98:	4053      	eors	r3, r2
 8008d9a:	b2d9      	uxtb	r1, r3
 8008d9c:	183b      	adds	r3, r7, r0
 8008d9e:	78db      	ldrb	r3, [r3, #3]
 8008da0:	001a      	movs	r2, r3
 8008da2:	4b79      	ldr	r3, [pc, #484]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008da4:	5c9a      	ldrb	r2, [r3, r2]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3307      	adds	r3, #7
 8008daa:	404a      	eors	r2, r1
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8008db0:	183b      	adds	r3, r7, r0
 8008db2:	7a1b      	ldrb	r3, [r3, #8]
 8008db4:	001a      	movs	r2, r3
 8008db6:	4b74      	ldr	r3, [pc, #464]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008db8:	5c9a      	ldrb	r2, [r3, r2]
 8008dba:	183b      	adds	r3, r7, r0
 8008dbc:	7b5b      	ldrb	r3, [r3, #13]
 8008dbe:	0019      	movs	r1, r3
 8008dc0:	4b72      	ldr	r3, [pc, #456]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008dc2:	5c5b      	ldrb	r3, [r3, r1]
 8008dc4:	4053      	eors	r3, r2
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	183b      	adds	r3, r7, r0
 8008dca:	789b      	ldrb	r3, [r3, #2]
 8008dcc:	0019      	movs	r1, r3
 8008dce:	4b70      	ldr	r3, [pc, #448]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008dd0:	5c5b      	ldrb	r3, [r3, r1]
 8008dd2:	4053      	eors	r3, r2
 8008dd4:	b2d9      	uxtb	r1, r3
 8008dd6:	183b      	adds	r3, r7, r0
 8008dd8:	79db      	ldrb	r3, [r3, #7]
 8008dda:	001a      	movs	r2, r3
 8008ddc:	4b6c      	ldr	r3, [pc, #432]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008dde:	5c9a      	ldrb	r2, [r3, r2]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3308      	adds	r3, #8
 8008de4:	404a      	eors	r2, r1
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8008dea:	183b      	adds	r3, r7, r0
 8008dec:	7a1b      	ldrb	r3, [r3, #8]
 8008dee:	001a      	movs	r2, r3
 8008df0:	4b67      	ldr	r3, [pc, #412]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008df2:	5c9a      	ldrb	r2, [r3, r2]
 8008df4:	183b      	adds	r3, r7, r0
 8008df6:	7b5b      	ldrb	r3, [r3, #13]
 8008df8:	0019      	movs	r1, r3
 8008dfa:	4b63      	ldr	r3, [pc, #396]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008dfc:	5c5b      	ldrb	r3, [r3, r1]
 8008dfe:	4053      	eors	r3, r2
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	183b      	adds	r3, r7, r0
 8008e04:	789b      	ldrb	r3, [r3, #2]
 8008e06:	0019      	movs	r1, r3
 8008e08:	4b60      	ldr	r3, [pc, #384]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008e0a:	5c5b      	ldrb	r3, [r3, r1]
 8008e0c:	4053      	eors	r3, r2
 8008e0e:	b2d9      	uxtb	r1, r3
 8008e10:	183b      	adds	r3, r7, r0
 8008e12:	79db      	ldrb	r3, [r3, #7]
 8008e14:	001a      	movs	r2, r3
 8008e16:	4b5e      	ldr	r3, [pc, #376]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008e18:	5c9a      	ldrb	r2, [r3, r2]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	3309      	adds	r3, #9
 8008e1e:	404a      	eors	r2, r1
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8008e24:	183b      	adds	r3, r7, r0
 8008e26:	7a1b      	ldrb	r3, [r3, #8]
 8008e28:	001a      	movs	r2, r3
 8008e2a:	4b59      	ldr	r3, [pc, #356]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008e2c:	5c9a      	ldrb	r2, [r3, r2]
 8008e2e:	183b      	adds	r3, r7, r0
 8008e30:	7b5b      	ldrb	r3, [r3, #13]
 8008e32:	0019      	movs	r1, r3
 8008e34:	4b56      	ldr	r3, [pc, #344]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008e36:	5c5b      	ldrb	r3, [r3, r1]
 8008e38:	4053      	eors	r3, r2
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	183b      	adds	r3, r7, r0
 8008e3e:	789b      	ldrb	r3, [r3, #2]
 8008e40:	0019      	movs	r1, r3
 8008e42:	4b51      	ldr	r3, [pc, #324]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008e44:	5c5b      	ldrb	r3, [r3, r1]
 8008e46:	4053      	eors	r3, r2
 8008e48:	b2d9      	uxtb	r1, r3
 8008e4a:	183b      	adds	r3, r7, r0
 8008e4c:	79db      	ldrb	r3, [r3, #7]
 8008e4e:	001a      	movs	r2, r3
 8008e50:	4b4e      	ldr	r3, [pc, #312]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008e52:	5c9a      	ldrb	r2, [r3, r2]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	330a      	adds	r3, #10
 8008e58:	404a      	eors	r2, r1
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8008e5e:	183b      	adds	r3, r7, r0
 8008e60:	7a1b      	ldrb	r3, [r3, #8]
 8008e62:	001a      	movs	r2, r3
 8008e64:	4b49      	ldr	r3, [pc, #292]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008e66:	5c9a      	ldrb	r2, [r3, r2]
 8008e68:	183b      	adds	r3, r7, r0
 8008e6a:	7b5b      	ldrb	r3, [r3, #13]
 8008e6c:	0019      	movs	r1, r3
 8008e6e:	4b48      	ldr	r3, [pc, #288]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008e70:	5c5b      	ldrb	r3, [r3, r1]
 8008e72:	4053      	eors	r3, r2
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	183b      	adds	r3, r7, r0
 8008e78:	789b      	ldrb	r3, [r3, #2]
 8008e7a:	0019      	movs	r1, r3
 8008e7c:	4b44      	ldr	r3, [pc, #272]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008e7e:	5c5b      	ldrb	r3, [r3, r1]
 8008e80:	4053      	eors	r3, r2
 8008e82:	b2d9      	uxtb	r1, r3
 8008e84:	183b      	adds	r3, r7, r0
 8008e86:	79db      	ldrb	r3, [r3, #7]
 8008e88:	001a      	movs	r2, r3
 8008e8a:	4b3f      	ldr	r3, [pc, #252]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008e8c:	5c9a      	ldrb	r2, [r3, r2]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	330b      	adds	r3, #11
 8008e92:	404a      	eors	r2, r1
 8008e94:	b2d2      	uxtb	r2, r2
 8008e96:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8008e98:	183b      	adds	r3, r7, r0
 8008e9a:	7b1b      	ldrb	r3, [r3, #12]
 8008e9c:	001a      	movs	r2, r3
 8008e9e:	4b3a      	ldr	r3, [pc, #232]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008ea0:	5c9a      	ldrb	r2, [r3, r2]
 8008ea2:	183b      	adds	r3, r7, r0
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	0019      	movs	r1, r3
 8008ea8:	4b38      	ldr	r3, [pc, #224]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008eaa:	5c5b      	ldrb	r3, [r3, r1]
 8008eac:	4053      	eors	r3, r2
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	183b      	adds	r3, r7, r0
 8008eb2:	799b      	ldrb	r3, [r3, #6]
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	4b36      	ldr	r3, [pc, #216]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008eb8:	5c5b      	ldrb	r3, [r3, r1]
 8008eba:	4053      	eors	r3, r2
 8008ebc:	b2d9      	uxtb	r1, r3
 8008ebe:	183b      	adds	r3, r7, r0
 8008ec0:	7adb      	ldrb	r3, [r3, #11]
 8008ec2:	001a      	movs	r2, r3
 8008ec4:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008ec6:	5c9a      	ldrb	r2, [r3, r2]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	330c      	adds	r3, #12
 8008ecc:	404a      	eors	r2, r1
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8008ed2:	183b      	adds	r3, r7, r0
 8008ed4:	7b1b      	ldrb	r3, [r3, #12]
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	4b2d      	ldr	r3, [pc, #180]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008eda:	5c9a      	ldrb	r2, [r3, r2]
 8008edc:	183b      	adds	r3, r7, r0
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	0019      	movs	r1, r3
 8008ee2:	4b29      	ldr	r3, [pc, #164]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008ee4:	5c5b      	ldrb	r3, [r3, r1]
 8008ee6:	4053      	eors	r3, r2
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	183b      	adds	r3, r7, r0
 8008eec:	799b      	ldrb	r3, [r3, #6]
 8008eee:	0019      	movs	r1, r3
 8008ef0:	4b26      	ldr	r3, [pc, #152]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008ef2:	5c5b      	ldrb	r3, [r3, r1]
 8008ef4:	4053      	eors	r3, r2
 8008ef6:	b2d9      	uxtb	r1, r3
 8008ef8:	183b      	adds	r3, r7, r0
 8008efa:	7adb      	ldrb	r3, [r3, #11]
 8008efc:	001a      	movs	r2, r3
 8008efe:	4b24      	ldr	r3, [pc, #144]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008f00:	5c9a      	ldrb	r2, [r3, r2]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	330d      	adds	r3, #13
 8008f06:	404a      	eors	r2, r1
 8008f08:	b2d2      	uxtb	r2, r2
 8008f0a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8008f0c:	183b      	adds	r3, r7, r0
 8008f0e:	7b1b      	ldrb	r3, [r3, #12]
 8008f10:	001a      	movs	r2, r3
 8008f12:	4b1f      	ldr	r3, [pc, #124]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008f14:	5c9a      	ldrb	r2, [r3, r2]
 8008f16:	183b      	adds	r3, r7, r0
 8008f18:	785b      	ldrb	r3, [r3, #1]
 8008f1a:	0019      	movs	r1, r3
 8008f1c:	4b1c      	ldr	r3, [pc, #112]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008f1e:	5c5b      	ldrb	r3, [r3, r1]
 8008f20:	4053      	eors	r3, r2
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	183b      	adds	r3, r7, r0
 8008f26:	799b      	ldrb	r3, [r3, #6]
 8008f28:	0019      	movs	r1, r3
 8008f2a:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008f2c:	5c5b      	ldrb	r3, [r3, r1]
 8008f2e:	4053      	eors	r3, r2
 8008f30:	b2d9      	uxtb	r1, r3
 8008f32:	183b      	adds	r3, r7, r0
 8008f34:	7adb      	ldrb	r3, [r3, #11]
 8008f36:	001a      	movs	r2, r3
 8008f38:	4b14      	ldr	r3, [pc, #80]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008f3a:	5c9a      	ldrb	r2, [r3, r2]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	330e      	adds	r3, #14
 8008f40:	404a      	eors	r2, r1
 8008f42:	b2d2      	uxtb	r2, r2
 8008f44:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8008f46:	183b      	adds	r3, r7, r0
 8008f48:	7b1b      	ldrb	r3, [r3, #12]
 8008f4a:	001a      	movs	r2, r3
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <mix_sub_columns+0x3c4>)
 8008f4e:	5c9a      	ldrb	r2, [r3, r2]
 8008f50:	183b      	adds	r3, r7, r0
 8008f52:	785b      	ldrb	r3, [r3, #1]
 8008f54:	0019      	movs	r1, r3
 8008f56:	4b0e      	ldr	r3, [pc, #56]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008f58:	5c5b      	ldrb	r3, [r3, r1]
 8008f5a:	4053      	eors	r3, r2
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	183b      	adds	r3, r7, r0
 8008f60:	799b      	ldrb	r3, [r3, #6]
 8008f62:	0019      	movs	r1, r3
 8008f64:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <mix_sub_columns+0x3c8>)
 8008f66:	5c5b      	ldrb	r3, [r3, r1]
 8008f68:	4053      	eors	r3, r2
 8008f6a:	b2d9      	uxtb	r1, r3
 8008f6c:	183b      	adds	r3, r7, r0
 8008f6e:	7adb      	ldrb	r3, [r3, #11]
 8008f70:	001a      	movs	r2, r3
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <mix_sub_columns+0x3c0>)
 8008f74:	5c9a      	ldrb	r2, [r3, r2]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	330f      	adds	r3, #15
 8008f7a:	404a      	eors	r2, r1
 8008f7c:	b2d2      	uxtb	r2, r2
 8008f7e:	701a      	strb	r2, [r3, #0]
  }
 8008f80:	46c0      	nop			; (mov r8, r8)
 8008f82:	46bd      	mov	sp, r7
 8008f84:	b007      	add	sp, #28
 8008f86:	bd90      	pop	{r4, r7, pc}
 8008f88:	08020490 	.word	0x08020490
 8008f8c:	08020590 	.word	0x08020590
 8008f90:	08020390 	.word	0x08020390

08008f94 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8008f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	607a      	str	r2, [r7, #4]
 8008f9e:	200b      	movs	r0, #11
 8008fa0:	183b      	adds	r3, r7, r0
 8008fa2:	1c0a      	adds	r2, r1, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 8008fa6:	183b      	adds	r3, r7, r0
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b18      	cmp	r3, #24
 8008fac:	d009      	beq.n	8008fc2 <aes_set_key+0x2e>
 8008fae:	2b20      	cmp	r3, #32
 8008fb0:	d007      	beq.n	8008fc2 <aes_set_key+0x2e>
 8008fb2:	2b10      	cmp	r3, #16
 8008fb4:	d005      	beq.n	8008fc2 <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	22f0      	movs	r2, #240	; 0xf0
 8008fba:	2100      	movs	r1, #0
 8008fbc:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 8008fbe:	23ff      	movs	r3, #255	; 0xff
 8008fc0:	e113      	b.n	80091ea <aes_set_key+0x256>
        break;
 8008fc2:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	240b      	movs	r4, #11
 8008fc8:	193b      	adds	r3, r7, r4
 8008fca:	781a      	ldrb	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	0019      	movs	r1, r3
 8008fd0:	f7ff fbc0 	bl	8008754 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8008fd4:	0020      	movs	r0, r4
 8008fd6:	183b      	adds	r3, r7, r0
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	331c      	adds	r3, #28
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	2111      	movs	r1, #17
 8008fe0:	187b      	adds	r3, r7, r1
 8008fe2:	0092      	lsls	r2, r2, #2
 8008fe4:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 8008fe6:	187b      	adds	r3, r7, r1
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	091b      	lsrs	r3, r3, #4
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b2d9      	uxtb	r1, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	22f0      	movs	r2, #240	; 0xf0
 8008ff6:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8008ff8:	2317      	movs	r3, #23
 8008ffa:	18fb      	adds	r3, r7, r3
 8008ffc:	183a      	adds	r2, r7, r0
 8008ffe:	7812      	ldrb	r2, [r2, #0]
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	2316      	movs	r3, #22
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	2201      	movs	r2, #1
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	e0e4      	b.n	80091d6 <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800900c:	2017      	movs	r0, #23
 800900e:	183b      	adds	r3, r7, r0
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	1f1a      	subs	r2, r3, #4
 8009014:	2315      	movs	r3, #21
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	5c8a      	ldrb	r2, [r1, r2]
 800901c:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800901e:	183b      	adds	r3, r7, r0
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	1eda      	subs	r2, r3, #3
 8009024:	2314      	movs	r3, #20
 8009026:	18fb      	adds	r3, r7, r3
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	5c8a      	ldrb	r2, [r1, r2]
 800902c:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800902e:	183b      	adds	r3, r7, r0
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	1e9a      	subs	r2, r3, #2
 8009034:	2313      	movs	r3, #19
 8009036:	18fb      	adds	r3, r7, r3
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	5c8a      	ldrb	r2, [r1, r2]
 800903c:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800903e:	183b      	adds	r3, r7, r0
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	1e5a      	subs	r2, r3, #1
 8009044:	2312      	movs	r3, #18
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	5c8a      	ldrb	r2, [r1, r2]
 800904c:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800904e:	183a      	adds	r2, r7, r0
 8009050:	230b      	movs	r3, #11
 8009052:	18fb      	adds	r3, r7, r3
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	0019      	movs	r1, r3
 800905a:	0010      	movs	r0, r2
 800905c:	f7f7 f8e2 	bl	8000224 <__aeabi_uidivmod>
 8009060:	000b      	movs	r3, r1
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d13e      	bne.n	80090e6 <aes_set_key+0x152>
        {
            tt = t0;
 8009068:	2410      	movs	r4, #16
 800906a:	193b      	adds	r3, r7, r4
 800906c:	2015      	movs	r0, #21
 800906e:	183a      	adds	r2, r7, r0
 8009070:	7812      	ldrb	r2, [r2, #0]
 8009072:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 8009074:	2514      	movs	r5, #20
 8009076:	197b      	adds	r3, r7, r5
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	4a5e      	ldr	r2, [pc, #376]	; (80091f4 <aes_set_key+0x260>)
 800907c:	5cd1      	ldrb	r1, [r2, r3]
 800907e:	183b      	adds	r3, r7, r0
 8009080:	2016      	movs	r0, #22
 8009082:	183a      	adds	r2, r7, r0
 8009084:	7812      	ldrb	r2, [r2, #0]
 8009086:	404a      	eors	r2, r1
 8009088:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800908a:	2613      	movs	r6, #19
 800908c:	19bb      	adds	r3, r7, r6
 800908e:	781a      	ldrb	r2, [r3, #0]
 8009090:	197b      	adds	r3, r7, r5
 8009092:	4958      	ldr	r1, [pc, #352]	; (80091f4 <aes_set_key+0x260>)
 8009094:	5c8a      	ldrb	r2, [r1, r2]
 8009096:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 8009098:	2512      	movs	r5, #18
 800909a:	197b      	adds	r3, r7, r5
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	19bb      	adds	r3, r7, r6
 80090a0:	4954      	ldr	r1, [pc, #336]	; (80091f4 <aes_set_key+0x260>)
 80090a2:	5c8a      	ldrb	r2, [r1, r2]
 80090a4:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 80090a6:	193b      	adds	r3, r7, r4
 80090a8:	781a      	ldrb	r2, [r3, #0]
 80090aa:	197b      	adds	r3, r7, r5
 80090ac:	4951      	ldr	r1, [pc, #324]	; (80091f4 <aes_set_key+0x260>)
 80090ae:	5c8a      	ldrb	r2, [r1, r2]
 80090b0:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 80090b2:	183b      	adds	r3, r7, r0
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	b25a      	sxtb	r2, r3
 80090ba:	0004      	movs	r4, r0
 80090bc:	183b      	adds	r3, r7, r0
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	09db      	lsrs	r3, r3, #7
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	1c19      	adds	r1, r3, #0
 80090c6:	1c0b      	adds	r3, r1, #0
 80090c8:	18db      	adds	r3, r3, r3
 80090ca:	185b      	adds	r3, r3, r1
 80090cc:	1c19      	adds	r1, r3, #0
 80090ce:	00c8      	lsls	r0, r1, #3
 80090d0:	1c19      	adds	r1, r3, #0
 80090d2:	1c03      	adds	r3, r0, #0
 80090d4:	18cb      	adds	r3, r1, r3
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	b25b      	sxtb	r3, r3
 80090da:	4053      	eors	r3, r2
 80090dc:	b25a      	sxtb	r2, r3
 80090de:	0020      	movs	r0, r4
 80090e0:	183b      	adds	r3, r7, r0
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	e02e      	b.n	8009144 <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 80090e6:	230b      	movs	r3, #11
 80090e8:	18fb      	adds	r3, r7, r3
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b18      	cmp	r3, #24
 80090ee:	d929      	bls.n	8009144 <aes_set_key+0x1b0>
 80090f0:	2317      	movs	r3, #23
 80090f2:	18fa      	adds	r2, r7, r3
 80090f4:	230b      	movs	r3, #11
 80090f6:	18fb      	adds	r3, r7, r3
 80090f8:	7812      	ldrb	r2, [r2, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	0019      	movs	r1, r3
 80090fe:	0010      	movs	r0, r2
 8009100:	f7f7 f890 	bl	8000224 <__aeabi_uidivmod>
 8009104:	000b      	movs	r3, r1
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b10      	cmp	r3, #16
 800910a:	d11b      	bne.n	8009144 <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 800910c:	2115      	movs	r1, #21
 800910e:	187b      	adds	r3, r7, r1
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	187b      	adds	r3, r7, r1
 8009114:	4937      	ldr	r1, [pc, #220]	; (80091f4 <aes_set_key+0x260>)
 8009116:	5c8a      	ldrb	r2, [r1, r2]
 8009118:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800911a:	2114      	movs	r1, #20
 800911c:	187b      	adds	r3, r7, r1
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	187b      	adds	r3, r7, r1
 8009122:	4934      	ldr	r1, [pc, #208]	; (80091f4 <aes_set_key+0x260>)
 8009124:	5c8a      	ldrb	r2, [r1, r2]
 8009126:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 8009128:	2113      	movs	r1, #19
 800912a:	187b      	adds	r3, r7, r1
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	187b      	adds	r3, r7, r1
 8009130:	4930      	ldr	r1, [pc, #192]	; (80091f4 <aes_set_key+0x260>)
 8009132:	5c8a      	ldrb	r2, [r1, r2]
 8009134:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 8009136:	2112      	movs	r1, #18
 8009138:	187b      	adds	r3, r7, r1
 800913a:	781a      	ldrb	r2, [r3, #0]
 800913c:	187b      	adds	r3, r7, r1
 800913e:	492d      	ldr	r1, [pc, #180]	; (80091f4 <aes_set_key+0x260>)
 8009140:	5c8a      	ldrb	r2, [r1, r2]
 8009142:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 8009144:	2410      	movs	r4, #16
 8009146:	193b      	adds	r3, r7, r4
 8009148:	2017      	movs	r0, #23
 800914a:	1839      	adds	r1, r7, r0
 800914c:	220b      	movs	r2, #11
 800914e:	18ba      	adds	r2, r7, r2
 8009150:	7809      	ldrb	r1, [r1, #0]
 8009152:	7812      	ldrb	r2, [r2, #0]
 8009154:	1a8a      	subs	r2, r1, r2
 8009156:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8009158:	193b      	adds	r3, r7, r4
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	5cd1      	ldrb	r1, [r2, r3]
 8009160:	183b      	adds	r3, r7, r0
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	2215      	movs	r2, #21
 8009166:	18ba      	adds	r2, r7, r2
 8009168:	7812      	ldrb	r2, [r2, #0]
 800916a:	404a      	eors	r2, r1
 800916c:	b2d1      	uxtb	r1, r2
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8009172:	193b      	adds	r3, r7, r4
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	5cd1      	ldrb	r1, [r2, r3]
 800917c:	183b      	adds	r3, r7, r0
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	3301      	adds	r3, #1
 8009182:	2214      	movs	r2, #20
 8009184:	18ba      	adds	r2, r7, r2
 8009186:	7812      	ldrb	r2, [r2, #0]
 8009188:	404a      	eors	r2, r1
 800918a:	b2d1      	uxtb	r1, r2
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8009190:	193b      	adds	r3, r7, r4
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	3302      	adds	r3, #2
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	5cd1      	ldrb	r1, [r2, r3]
 800919a:	183b      	adds	r3, r7, r0
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	3302      	adds	r3, #2
 80091a0:	2213      	movs	r2, #19
 80091a2:	18ba      	adds	r2, r7, r2
 80091a4:	7812      	ldrb	r2, [r2, #0]
 80091a6:	404a      	eors	r2, r1
 80091a8:	b2d1      	uxtb	r1, r2
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80091ae:	193b      	adds	r3, r7, r4
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	3303      	adds	r3, #3
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	5cd1      	ldrb	r1, [r2, r3]
 80091b8:	183b      	adds	r3, r7, r0
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	3303      	adds	r3, #3
 80091be:	2212      	movs	r2, #18
 80091c0:	18ba      	adds	r2, r7, r2
 80091c2:	7812      	ldrb	r2, [r2, #0]
 80091c4:	404a      	eors	r2, r1
 80091c6:	b2d1      	uxtb	r1, r2
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80091cc:	183b      	adds	r3, r7, r0
 80091ce:	183a      	adds	r2, r7, r0
 80091d0:	7812      	ldrb	r2, [r2, #0]
 80091d2:	3204      	adds	r2, #4
 80091d4:	701a      	strb	r2, [r3, #0]
 80091d6:	2317      	movs	r3, #23
 80091d8:	18fa      	adds	r2, r7, r3
 80091da:	2311      	movs	r3, #17
 80091dc:	18fb      	adds	r3, r7, r3
 80091de:	7812      	ldrb	r2, [r2, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d200      	bcs.n	80091e8 <aes_set_key+0x254>
 80091e6:	e711      	b.n	800900c <aes_set_key+0x78>
    }
    return 0;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	0018      	movs	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b007      	add	sp, #28
 80091f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	08020390 	.word	0x08020390

080091f8 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 80091f8:	b5b0      	push	{r4, r5, r7, lr}
 80091fa:	b08a      	sub	sp, #40	; 0x28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	22f0      	movs	r2, #240	; 0xf0
 8009208:	5c9b      	ldrb	r3, [r3, r2]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d03a      	beq.n	8009284 <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	68f9      	ldr	r1, [r7, #12]
 8009212:	2314      	movs	r3, #20
 8009214:	18fb      	adds	r3, r7, r3
 8009216:	0018      	movs	r0, r3
 8009218:	f7ff fb6d 	bl	80088f6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800921c:	2327      	movs	r3, #39	; 0x27
 800921e:	18fb      	adds	r3, r7, r3
 8009220:	2201      	movs	r2, #1
 8009222:	701a      	strb	r2, [r3, #0]
 8009224:	e014      	b.n	8009250 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8009226:	2514      	movs	r5, #20
 8009228:	197b      	adds	r3, r7, r5
 800922a:	0018      	movs	r0, r3
 800922c:	f7ff fccc 	bl	8008bc8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2427      	movs	r4, #39	; 0x27
 8009234:	193a      	adds	r2, r7, r4
 8009236:	7812      	ldrb	r2, [r2, #0]
 8009238:	0112      	lsls	r2, r2, #4
 800923a:	189a      	adds	r2, r3, r2
 800923c:	197b      	adds	r3, r7, r5
 800923e:	0011      	movs	r1, r2
 8009240:	0018      	movs	r0, r3
 8009242:	f7ff fc0f 	bl	8008a64 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8009246:	193b      	adds	r3, r7, r4
 8009248:	193a      	adds	r2, r7, r4
 800924a:	7812      	ldrb	r2, [r2, #0]
 800924c:	3201      	adds	r2, #1
 800924e:	701a      	strb	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	22f0      	movs	r2, #240	; 0xf0
 8009254:	5c9b      	ldrb	r3, [r3, r2]
 8009256:	2227      	movs	r2, #39	; 0x27
 8009258:	18ba      	adds	r2, r7, r2
 800925a:	7812      	ldrb	r2, [r2, #0]
 800925c:	429a      	cmp	r2, r3
 800925e:	d3e2      	bcc.n	8009226 <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8009260:	2414      	movs	r4, #20
 8009262:	193b      	adds	r3, r7, r4
 8009264:	0018      	movs	r0, r3
 8009266:	f7ff fc0d 	bl	8008a84 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2227      	movs	r2, #39	; 0x27
 800926e:	18ba      	adds	r2, r7, r2
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	0112      	lsls	r2, r2, #4
 8009274:	189a      	adds	r2, r3, r2
 8009276:	1939      	adds	r1, r7, r4
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	0018      	movs	r0, r3
 800927c:	f7ff fb3b 	bl	80088f6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8009280:	2300      	movs	r3, #0
 8009282:	e000      	b.n	8009286 <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 8009284:	23ff      	movs	r3, #255	; 0xff
}
 8009286:	0018      	movs	r0, r3
 8009288:	46bd      	mov	sp, r7
 800928a:	b00a      	add	sp, #40	; 0x28
 800928c:	bdb0      	pop	{r4, r5, r7, pc}

0800928e <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	33f1      	adds	r3, #241	; 0xf1
 800929a:	2210      	movs	r2, #16
 800929c:	2100      	movs	r1, #0
 800929e:	0018      	movs	r0, r3
 80092a0:	f00c f91e 	bl	80154e0 <memset1>
            ctx->M_n = 0;
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	238a      	movs	r3, #138	; 0x8a
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	2100      	movs	r1, #0
 80092ac:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	22f0      	movs	r2, #240	; 0xf0
 80092b2:	2100      	movs	r1, #0
 80092b4:	0018      	movs	r0, r3
 80092b6:	f00c f913 	bl	80154e0 <memset1>
}
 80092ba:	46c0      	nop			; (mov r8, r8)
 80092bc:	46bd      	mov	sp, r7
 80092be:	b002      	add	sp, #8
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2110      	movs	r1, #16
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7ff fe5e 	bl	8008f94 <aes_set_key>
}
 80092d8:	46c0      	nop			; (mov r8, r8)
 80092da:	46bd      	mov	sp, r7
 80092dc:	b002      	add	sp, #8
 80092de:	bd80      	pop	{r7, pc}

080092e0 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 80092e0:	b590      	push	{r4, r7, lr}
 80092e2:	b08d      	sub	sp, #52	; 0x34
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	238a      	movs	r3, #138	; 0x8a
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	58d3      	ldr	r3, [r2, r3]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d100      	bne.n	80092fa <AES_CMAC_Update+0x1a>
 80092f8:	e097      	b.n	800942a <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	238a      	movs	r3, #138	; 0x8a
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	58d3      	ldr	r3, [r2, r3]
 8009302:	2210      	movs	r2, #16
 8009304:	1ad2      	subs	r2, r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4293      	cmp	r3, r2
 800930a:	d900      	bls.n	800930e <AES_CMAC_Update+0x2e>
 800930c:	0013      	movs	r3, r2
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	1c9a      	adds	r2, r3, #2
 8009314:	32ff      	adds	r2, #255	; 0xff
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	238a      	movs	r3, #138	; 0x8a
 800931a:	005b      	lsls	r3, r3, #1
 800931c:	58cb      	ldr	r3, [r1, r3]
 800931e:	18d3      	adds	r3, r2, r3
 8009320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009322:	b292      	uxth	r2, r2
 8009324:	68b9      	ldr	r1, [r7, #8]
 8009326:	0018      	movs	r0, r3
 8009328:	f00c f89e 	bl	8015468 <memcpy1>
                    ctx->M_n += mlen;
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	238a      	movs	r3, #138	; 0x8a
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	58d2      	ldr	r2, [r2, r3]
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	18d1      	adds	r1, r2, r3
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	238a      	movs	r3, #138	; 0x8a
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	238a      	movs	r3, #138	; 0x8a
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	58d3      	ldr	r3, [r2, r3]
 8009348:	2b0f      	cmp	r3, #15
 800934a:	d800      	bhi.n	800934e <AES_CMAC_Update+0x6e>
 800934c:	e07f      	b.n	800944e <AES_CMAC_Update+0x16e>
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	429a      	cmp	r2, r3
 8009354:	d100      	bne.n	8009358 <AES_CMAC_Update+0x78>
 8009356:	e07a      	b.n	800944e <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 8009358:	2300      	movs	r3, #0
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800935c:	e018      	b.n	8009390 <AES_CMAC_Update+0xb0>
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	21f1      	movs	r1, #241	; 0xf1
 8009362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009364:	18d3      	adds	r3, r2, r3
 8009366:	185b      	adds	r3, r3, r1
 8009368:	781a      	ldrb	r2, [r3, #0]
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	2302      	movs	r3, #2
 800936e:	33ff      	adds	r3, #255	; 0xff
 8009370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009372:	1841      	adds	r1, r0, r1
 8009374:	18cb      	adds	r3, r1, r3
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	4053      	eors	r3, r2
 800937a:	b2d8      	uxtb	r0, r3
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	21f1      	movs	r1, #241	; 0xf1
 8009380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009382:	18d3      	adds	r3, r2, r3
 8009384:	185b      	adds	r3, r3, r1
 8009386:	1c02      	adds	r2, r0, #0
 8009388:	701a      	strb	r2, [r3, #0]
 800938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938c:	3301      	adds	r3, #1
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	2b0f      	cmp	r3, #15
 8009394:	dde3      	ble.n	800935e <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	33f1      	adds	r3, #241	; 0xf1
 800939a:	0018      	movs	r0, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	33f1      	adds	r3, #241	; 0xf1
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	0019      	movs	r1, r3
 80093a4:	f7ff ff28 	bl	80091f8 <aes_encrypt>
                    data += mlen;
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	18d3      	adds	r3, r2, r3
 80093ae:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 80093b8:	e037      	b.n	800942a <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 80093ba:	2300      	movs	r3, #0
 80093bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093be:	e015      	b.n	80093ec <AES_CMAC_Update+0x10c>
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	21f1      	movs	r1, #241	; 0xf1
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	18d3      	adds	r3, r2, r3
 80093c8:	185b      	adds	r3, r3, r1
 80093ca:	781a      	ldrb	r2, [r3, #0]
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	18cb      	adds	r3, r1, r3
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	4053      	eors	r3, r2
 80093d6:	b2d8      	uxtb	r0, r3
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	21f1      	movs	r1, #241	; 0xf1
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	18d3      	adds	r3, r2, r3
 80093e0:	185b      	adds	r3, r3, r1
 80093e2:	1c02      	adds	r2, r0, #0
 80093e4:	701a      	strb	r2, [r3, #0]
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	3301      	adds	r3, #1
 80093ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	2b0f      	cmp	r3, #15
 80093f0:	dde6      	ble.n	80093c0 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	33f1      	adds	r3, #241	; 0xf1
 80093f6:	0019      	movs	r1, r3
 80093f8:	2414      	movs	r4, #20
 80093fa:	193b      	adds	r3, r7, r4
 80093fc:	2210      	movs	r2, #16
 80093fe:	0018      	movs	r0, r3
 8009400:	f00c f832 	bl	8015468 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	1939      	adds	r1, r7, r4
 8009408:	193b      	adds	r3, r7, r4
 800940a:	0018      	movs	r0, r3
 800940c:	f7ff fef4 	bl	80091f8 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	33f1      	adds	r3, #241	; 0xf1
 8009414:	1939      	adds	r1, r7, r4
 8009416:	2210      	movs	r2, #16
 8009418:	0018      	movs	r0, r3
 800941a:	f00c f825 	bl	8015468 <memcpy1>

                    data += 16;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	3310      	adds	r3, #16
 8009422:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3b10      	subs	r3, #16
 8009428:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b10      	cmp	r3, #16
 800942e:	d8c4      	bhi.n	80093ba <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3302      	adds	r3, #2
 8009434:	33ff      	adds	r3, #255	; 0xff
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	b292      	uxth	r2, r2
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	0018      	movs	r0, r3
 800943e:	f00c f813 	bl	8015468 <memcpy1>
            ctx->M_n = len;
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	238a      	movs	r3, #138	; 0x8a
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	50d1      	str	r1, [r2, r3]
 800944c:	e000      	b.n	8009450 <AES_CMAC_Update+0x170>
                            return;
 800944e:	46c0      	nop			; (mov r8, r8)
}
 8009450:	46bd      	mov	sp, r7
 8009452:	b00d      	add	sp, #52	; 0x34
 8009454:	bd90      	pop	{r4, r7, pc}

08009456 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8009456:	b590      	push	{r4, r7, lr}
 8009458:	b093      	sub	sp, #76	; 0x4c
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8009460:	241c      	movs	r4, #28
 8009462:	193b      	adds	r3, r7, r4
 8009464:	2210      	movs	r2, #16
 8009466:	2100      	movs	r1, #0
 8009468:	0018      	movs	r0, r3
 800946a:	f00c f839 	bl	80154e0 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	1939      	adds	r1, r7, r4
 8009472:	193b      	adds	r3, r7, r4
 8009474:	0018      	movs	r0, r3
 8009476:	f7ff febf 	bl	80091f8 <aes_encrypt>

            if (K[0] & 0x80) {
 800947a:	193b      	adds	r3, r7, r4
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	b25b      	sxtb	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	da2e      	bge.n	80094e2 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 8009484:	2300      	movs	r3, #0
 8009486:	647b      	str	r3, [r7, #68]	; 0x44
 8009488:	e018      	b.n	80094bc <AES_CMAC_Final+0x66>
 800948a:	201c      	movs	r0, #28
 800948c:	183a      	adds	r2, r7, r0
 800948e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009490:	18d3      	adds	r3, r2, r3
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	b25a      	sxtb	r2, r3
 8009498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949a:	3301      	adds	r3, #1
 800949c:	1839      	adds	r1, r7, r0
 800949e:	5ccb      	ldrb	r3, [r1, r3]
 80094a0:	09db      	lsrs	r3, r3, #7
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	b25b      	sxtb	r3, r3
 80094a6:	4313      	orrs	r3, r2
 80094a8:	b25b      	sxtb	r3, r3
 80094aa:	b2d9      	uxtb	r1, r3
 80094ac:	183a      	adds	r2, r7, r0
 80094ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b0:	18d3      	adds	r3, r2, r3
 80094b2:	1c0a      	adds	r2, r1, #0
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b8:	3301      	adds	r3, #1
 80094ba:	647b      	str	r3, [r7, #68]	; 0x44
 80094bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094be:	2b0e      	cmp	r3, #14
 80094c0:	dde3      	ble.n	800948a <AES_CMAC_Final+0x34>
 80094c2:	211c      	movs	r1, #28
 80094c4:	187b      	adds	r3, r7, r1
 80094c6:	7bdb      	ldrb	r3, [r3, #15]
 80094c8:	18db      	adds	r3, r3, r3
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	187b      	adds	r3, r7, r1
 80094ce:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 80094d0:	187b      	adds	r3, r7, r1
 80094d2:	7bdb      	ldrb	r3, [r3, #15]
 80094d4:	2279      	movs	r2, #121	; 0x79
 80094d6:	4252      	negs	r2, r2
 80094d8:	4053      	eors	r3, r2
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	187b      	adds	r3, r7, r1
 80094de:	73da      	strb	r2, [r3, #15]
 80094e0:	e025      	b.n	800952e <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 80094e2:	2300      	movs	r3, #0
 80094e4:	643b      	str	r3, [r7, #64]	; 0x40
 80094e6:	e018      	b.n	800951a <AES_CMAC_Final+0xc4>
 80094e8:	201c      	movs	r0, #28
 80094ea:	183a      	adds	r2, r7, r0
 80094ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ee:	18d3      	adds	r3, r2, r3
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	b25a      	sxtb	r2, r3
 80094f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f8:	3301      	adds	r3, #1
 80094fa:	1839      	adds	r1, r7, r0
 80094fc:	5ccb      	ldrb	r3, [r1, r3]
 80094fe:	09db      	lsrs	r3, r3, #7
 8009500:	b2db      	uxtb	r3, r3
 8009502:	b25b      	sxtb	r3, r3
 8009504:	4313      	orrs	r3, r2
 8009506:	b25b      	sxtb	r3, r3
 8009508:	b2d9      	uxtb	r1, r3
 800950a:	183a      	adds	r2, r7, r0
 800950c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950e:	18d3      	adds	r3, r2, r3
 8009510:	1c0a      	adds	r2, r1, #0
 8009512:	701a      	strb	r2, [r3, #0]
 8009514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009516:	3301      	adds	r3, #1
 8009518:	643b      	str	r3, [r7, #64]	; 0x40
 800951a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800951c:	2b0e      	cmp	r3, #14
 800951e:	dde3      	ble.n	80094e8 <AES_CMAC_Final+0x92>
 8009520:	211c      	movs	r1, #28
 8009522:	187b      	adds	r3, r7, r1
 8009524:	7bdb      	ldrb	r3, [r3, #15]
 8009526:	18db      	adds	r3, r3, r3
 8009528:	b2da      	uxtb	r2, r3
 800952a:	187b      	adds	r3, r7, r1
 800952c:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	238a      	movs	r3, #138	; 0x8a
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	58d3      	ldr	r3, [r2, r3]
 8009536:	2b10      	cmp	r3, #16
 8009538:	d11f      	bne.n	800957a <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800953a:	2300      	movs	r3, #0
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800953e:	e018      	b.n	8009572 <AES_CMAC_Final+0x11c>
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	2302      	movs	r3, #2
 8009544:	33ff      	adds	r3, #255	; 0xff
 8009546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009548:	188a      	adds	r2, r1, r2
 800954a:	18d3      	adds	r3, r2, r3
 800954c:	781a      	ldrb	r2, [r3, #0]
 800954e:	231c      	movs	r3, #28
 8009550:	18f9      	adds	r1, r7, r3
 8009552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009554:	18cb      	adds	r3, r1, r3
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	4053      	eors	r3, r2
 800955a:	b2d8      	uxtb	r0, r3
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	2302      	movs	r3, #2
 8009560:	33ff      	adds	r3, #255	; 0xff
 8009562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009564:	188a      	adds	r2, r1, r2
 8009566:	18d3      	adds	r3, r2, r3
 8009568:	1c02      	adds	r2, r0, #0
 800956a:	701a      	strb	r2, [r3, #0]
 800956c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956e:	3301      	adds	r3, #1
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009574:	2b0f      	cmp	r3, #15
 8009576:	dde3      	ble.n	8009540 <AES_CMAC_Final+0xea>
 8009578:	e09f      	b.n	80096ba <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 800957a:	231c      	movs	r3, #28
 800957c:	18fb      	adds	r3, r7, r3
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	b25b      	sxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	da2e      	bge.n	80095e4 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 8009586:	2300      	movs	r3, #0
 8009588:	63bb      	str	r3, [r7, #56]	; 0x38
 800958a:	e018      	b.n	80095be <AES_CMAC_Final+0x168>
 800958c:	201c      	movs	r0, #28
 800958e:	183a      	adds	r2, r7, r0
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	18d3      	adds	r3, r2, r3
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	b25a      	sxtb	r2, r3
 800959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959c:	3301      	adds	r3, #1
 800959e:	1839      	adds	r1, r7, r0
 80095a0:	5ccb      	ldrb	r3, [r1, r3]
 80095a2:	09db      	lsrs	r3, r3, #7
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	b25b      	sxtb	r3, r3
 80095a8:	4313      	orrs	r3, r2
 80095aa:	b25b      	sxtb	r3, r3
 80095ac:	b2d9      	uxtb	r1, r3
 80095ae:	183a      	adds	r2, r7, r0
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	18d3      	adds	r3, r2, r3
 80095b4:	1c0a      	adds	r2, r1, #0
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ba:	3301      	adds	r3, #1
 80095bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	2b0e      	cmp	r3, #14
 80095c2:	dde3      	ble.n	800958c <AES_CMAC_Final+0x136>
 80095c4:	211c      	movs	r1, #28
 80095c6:	187b      	adds	r3, r7, r1
 80095c8:	7bdb      	ldrb	r3, [r3, #15]
 80095ca:	18db      	adds	r3, r3, r3
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	187b      	adds	r3, r7, r1
 80095d0:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 80095d2:	187b      	adds	r3, r7, r1
 80095d4:	7bdb      	ldrb	r3, [r3, #15]
 80095d6:	2279      	movs	r2, #121	; 0x79
 80095d8:	4252      	negs	r2, r2
 80095da:	4053      	eors	r3, r2
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	187b      	adds	r3, r7, r1
 80095e0:	73da      	strb	r2, [r3, #15]
 80095e2:	e025      	b.n	8009630 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 80095e4:	2300      	movs	r3, #0
 80095e6:	637b      	str	r3, [r7, #52]	; 0x34
 80095e8:	e018      	b.n	800961c <AES_CMAC_Final+0x1c6>
 80095ea:	201c      	movs	r0, #28
 80095ec:	183a      	adds	r2, r7, r0
 80095ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f0:	18d3      	adds	r3, r2, r3
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	b25a      	sxtb	r2, r3
 80095f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fa:	3301      	adds	r3, #1
 80095fc:	1839      	adds	r1, r7, r0
 80095fe:	5ccb      	ldrb	r3, [r1, r3]
 8009600:	09db      	lsrs	r3, r3, #7
 8009602:	b2db      	uxtb	r3, r3
 8009604:	b25b      	sxtb	r3, r3
 8009606:	4313      	orrs	r3, r2
 8009608:	b25b      	sxtb	r3, r3
 800960a:	b2d9      	uxtb	r1, r3
 800960c:	183a      	adds	r2, r7, r0
 800960e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009610:	18d3      	adds	r3, r2, r3
 8009612:	1c0a      	adds	r2, r1, #0
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009618:	3301      	adds	r3, #1
 800961a:	637b      	str	r3, [r7, #52]	; 0x34
 800961c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961e:	2b0e      	cmp	r3, #14
 8009620:	dde3      	ble.n	80095ea <AES_CMAC_Final+0x194>
 8009622:	211c      	movs	r1, #28
 8009624:	187b      	adds	r3, r7, r1
 8009626:	7bdb      	ldrb	r3, [r3, #15]
 8009628:	18db      	adds	r3, r3, r3
 800962a:	b2da      	uxtb	r2, r3
 800962c:	187b      	adds	r3, r7, r1
 800962e:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	238a      	movs	r3, #138	; 0x8a
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	58d2      	ldr	r2, [r2, r3]
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	2302      	movs	r3, #2
 800963c:	33ff      	adds	r3, #255	; 0xff
 800963e:	188a      	adds	r2, r1, r2
 8009640:	18d3      	adds	r3, r2, r3
 8009642:	2280      	movs	r2, #128	; 0x80
 8009644:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8009646:	e00a      	b.n	800965e <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	238a      	movs	r3, #138	; 0x8a
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	58d2      	ldr	r2, [r2, r3]
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	2302      	movs	r3, #2
 8009654:	33ff      	adds	r3, #255	; 0xff
 8009656:	188a      	adds	r2, r1, r2
 8009658:	18d3      	adds	r3, r2, r3
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	238a      	movs	r3, #138	; 0x8a
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	58d3      	ldr	r3, [r2, r3]
 8009666:	1c59      	adds	r1, r3, #1
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	238a      	movs	r3, #138	; 0x8a
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	50d1      	str	r1, [r2, r3]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	238a      	movs	r3, #138	; 0x8a
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	58d3      	ldr	r3, [r2, r3]
 8009678:	2b0f      	cmp	r3, #15
 800967a:	d9e5      	bls.n	8009648 <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 800967c:	2300      	movs	r3, #0
 800967e:	633b      	str	r3, [r7, #48]	; 0x30
 8009680:	e018      	b.n	80096b4 <AES_CMAC_Final+0x25e>
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	2302      	movs	r3, #2
 8009686:	33ff      	adds	r3, #255	; 0xff
 8009688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800968a:	188a      	adds	r2, r1, r2
 800968c:	18d3      	adds	r3, r2, r3
 800968e:	781a      	ldrb	r2, [r3, #0]
 8009690:	231c      	movs	r3, #28
 8009692:	18f9      	adds	r1, r7, r3
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	18cb      	adds	r3, r1, r3
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	4053      	eors	r3, r2
 800969c:	b2d8      	uxtb	r0, r3
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	2302      	movs	r3, #2
 80096a2:	33ff      	adds	r3, #255	; 0xff
 80096a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096a6:	188a      	adds	r2, r1, r2
 80096a8:	18d3      	adds	r3, r2, r3
 80096aa:	1c02      	adds	r2, r0, #0
 80096ac:	701a      	strb	r2, [r3, #0]
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	3301      	adds	r3, #1
 80096b2:	633b      	str	r3, [r7, #48]	; 0x30
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	2b0f      	cmp	r3, #15
 80096b8:	dde3      	ble.n	8009682 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 80096ba:	2300      	movs	r3, #0
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096be:	e018      	b.n	80096f2 <AES_CMAC_Final+0x29c>
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	21f1      	movs	r1, #241	; 0xf1
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	18d3      	adds	r3, r2, r3
 80096c8:	185b      	adds	r3, r3, r1
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	6838      	ldr	r0, [r7, #0]
 80096ce:	2302      	movs	r3, #2
 80096d0:	33ff      	adds	r3, #255	; 0xff
 80096d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096d4:	1841      	adds	r1, r0, r1
 80096d6:	18cb      	adds	r3, r1, r3
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	4053      	eors	r3, r2
 80096dc:	b2d8      	uxtb	r0, r3
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	21f1      	movs	r1, #241	; 0xf1
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	18d3      	adds	r3, r2, r3
 80096e6:	185b      	adds	r3, r3, r1
 80096e8:	1c02      	adds	r2, r0, #0
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	3301      	adds	r3, #1
 80096f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f4:	2b0f      	cmp	r3, #15
 80096f6:	dde3      	ble.n	80096c0 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	33f1      	adds	r3, #241	; 0xf1
 80096fc:	0019      	movs	r1, r3
 80096fe:	240c      	movs	r4, #12
 8009700:	193b      	adds	r3, r7, r4
 8009702:	2210      	movs	r2, #16
 8009704:	0018      	movs	r0, r3
 8009706:	f00b feaf 	bl	8015468 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	193b      	adds	r3, r7, r4
 8009710:	0018      	movs	r0, r3
 8009712:	f7ff fd71 	bl	80091f8 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8009716:	231c      	movs	r3, #28
 8009718:	18fb      	adds	r3, r7, r3
 800971a:	2210      	movs	r2, #16
 800971c:	2100      	movs	r1, #0
 800971e:	0018      	movs	r0, r3
 8009720:	f00b fede 	bl	80154e0 <memset1>

}
 8009724:	46c0      	nop			; (mov r8, r8)
 8009726:	46bd      	mov	sp, r7
 8009728:	b013      	add	sp, #76	; 0x4c
 800972a:	bd90      	pop	{r4, r7, pc}

0800972c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	0002      	movs	r2, r0
 8009734:	6039      	str	r1, [r7, #0]
 8009736:	1dfb      	adds	r3, r7, #7
 8009738:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800973a:	230f      	movs	r3, #15
 800973c:	18fb      	adds	r3, r7, r3
 800973e:	2200      	movs	r2, #0
 8009740:	701a      	strb	r2, [r3, #0]
 8009742:	e025      	b.n	8009790 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8009744:	230f      	movs	r3, #15
 8009746:	18fb      	adds	r3, r7, r3
 8009748:	781a      	ldrb	r2, [r3, #0]
 800974a:	4816      	ldr	r0, [pc, #88]	; (80097a4 <GetKeyByID+0x78>)
 800974c:	2383      	movs	r3, #131	; 0x83
 800974e:	0099      	lsls	r1, r3, #2
 8009750:	0013      	movs	r3, r2
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	189b      	adds	r3, r3, r2
 8009756:	18c3      	adds	r3, r0, r3
 8009758:	185b      	adds	r3, r3, r1
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	1dfa      	adds	r2, r7, #7
 800975e:	7812      	ldrb	r2, [r2, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d10f      	bne.n	8009784 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8009764:	230f      	movs	r3, #15
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	781a      	ldrb	r2, [r3, #0]
 800976a:	0013      	movs	r3, r2
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	189b      	adds	r3, r3, r2
 8009770:	2282      	movs	r2, #130	; 0x82
 8009772:	0092      	lsls	r2, r2, #2
 8009774:	189a      	adds	r2, r3, r2
 8009776:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <GetKeyByID+0x78>)
 8009778:	18d3      	adds	r3, r2, r3
 800977a:	1d1a      	adds	r2, r3, #4
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8009780:	2300      	movs	r3, #0
 8009782:	e00b      	b.n	800979c <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009784:	210f      	movs	r1, #15
 8009786:	187b      	adds	r3, r7, r1
 8009788:	781a      	ldrb	r2, [r3, #0]
 800978a:	187b      	adds	r3, r7, r1
 800978c:	3201      	adds	r2, #1
 800978e:	701a      	strb	r2, [r3, #0]
 8009790:	230f      	movs	r3, #15
 8009792:	18fb      	adds	r3, r7, r3
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b15      	cmp	r3, #21
 8009798:	d9d4      	bls.n	8009744 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800979a:	2303      	movs	r3, #3
}
 800979c:	0018      	movs	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	b004      	add	sp, #16
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000210 	.word	0x20000210

080097a8 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 80097a8:	b5b0      	push	{r4, r5, r7, lr}
 80097aa:	b08a      	sub	sp, #40	; 0x28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	0008      	movs	r0, r1
 80097b2:	0011      	movs	r1, r2
 80097b4:	607b      	str	r3, [r7, #4]
 80097b6:	230a      	movs	r3, #10
 80097b8:	18fb      	adds	r3, r7, r3
 80097ba:	1c02      	adds	r2, r0, #0
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	2309      	movs	r3, #9
 80097c0:	18fb      	adds	r3, r7, r3
 80097c2:	1c0a      	adds	r2, r1, #0
 80097c4:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <ComputeCmac+0x2a>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80097d2:	2302      	movs	r3, #2
 80097d4:	e03f      	b.n	8009856 <ComputeCmac+0xae>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 80097d6:	4b22      	ldr	r3, [pc, #136]	; (8009860 <ComputeCmac+0xb8>)
 80097d8:	0018      	movs	r0, r3
 80097da:	f7ff fd58 	bl	800928e <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80097de:	2527      	movs	r5, #39	; 0x27
 80097e0:	197c      	adds	r4, r7, r5
 80097e2:	2310      	movs	r3, #16
 80097e4:	18fa      	adds	r2, r7, r3
 80097e6:	2309      	movs	r3, #9
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	0011      	movs	r1, r2
 80097ee:	0018      	movs	r0, r3
 80097f0:	f7ff ff9c 	bl	800972c <GetKeyByID>
 80097f4:	0003      	movs	r3, r0
 80097f6:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 80097f8:	197b      	adds	r3, r7, r5
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d127      	bne.n	8009850 <ComputeCmac+0xa8>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	4b16      	ldr	r3, [pc, #88]	; (8009860 <ComputeCmac+0xb8>)
 8009806:	0011      	movs	r1, r2
 8009808:	0018      	movs	r0, r3
 800980a:	f7ff fd5a 	bl	80092c2 <AES_CMAC_SetKey>

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 800980e:	230a      	movs	r3, #10
 8009810:	18fb      	adds	r3, r7, r3
 8009812:	881a      	ldrh	r2, [r3, #0]
 8009814:	68f9      	ldr	r1, [r7, #12]
 8009816:	4b12      	ldr	r3, [pc, #72]	; (8009860 <ComputeCmac+0xb8>)
 8009818:	0018      	movs	r0, r3
 800981a:	f7ff fd61 	bl	80092e0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 800981e:	4a10      	ldr	r2, [pc, #64]	; (8009860 <ComputeCmac+0xb8>)
 8009820:	2114      	movs	r1, #20
 8009822:	000c      	movs	r4, r1
 8009824:	187b      	adds	r3, r7, r1
 8009826:	0011      	movs	r1, r2
 8009828:	0018      	movs	r0, r3
 800982a:	f7ff fe14 	bl	8009456 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 800982e:	0021      	movs	r1, r4
 8009830:	187b      	adds	r3, r7, r1
 8009832:	78db      	ldrb	r3, [r3, #3]
 8009834:	061a      	lsls	r2, r3, #24
 8009836:	187b      	adds	r3, r7, r1
 8009838:	789b      	ldrb	r3, [r3, #2]
 800983a:	041b      	lsls	r3, r3, #16
 800983c:	431a      	orrs	r2, r3
 800983e:	187b      	adds	r3, r7, r1
 8009840:	785b      	ldrb	r3, [r3, #1]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	4313      	orrs	r3, r2
 8009846:	187a      	adds	r2, r7, r1
 8009848:	7812      	ldrb	r2, [r2, #0]
 800984a:	431a      	orrs	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8009850:	2327      	movs	r3, #39	; 0x27
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	781b      	ldrb	r3, [r3, #0]
}
 8009856:	0018      	movs	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	b00a      	add	sp, #40	; 0x28
 800985c:	bdb0      	pop	{r4, r5, r7, pc}
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	20000304 	.word	0x20000304

08009864 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
    return;
 8009868:	46c0      	nop			; (mov r8, r8)
}
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( EventNvmCtxChanged seNvmCtxChanged )
{
 8009870:	b590      	push	{r4, r7, lr}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
    // Initialize with defaults
    uint8_t itr = 0;
 8009878:	240f      	movs	r4, #15
 800987a:	193b      	adds	r3, r7, r4
 800987c:	2200      	movs	r2, #0
 800987e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8009880:	193b      	adds	r3, r7, r4
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	193a      	adds	r2, r7, r4
 8009886:	1c59      	adds	r1, r3, #1
 8009888:	7011      	strb	r1, [r2, #0]
 800988a:	0018      	movs	r0, r3
 800988c:	49b4      	ldr	r1, [pc, #720]	; (8009b60 <SecureElementInit+0x2f0>)
 800988e:	2383      	movs	r3, #131	; 0x83
 8009890:	009a      	lsls	r2, r3, #2
 8009892:	0003      	movs	r3, r0
 8009894:	011b      	lsls	r3, r3, #4
 8009896:	181b      	adds	r3, r3, r0
 8009898:	18cb      	adds	r3, r1, r3
 800989a:	189b      	adds	r3, r3, r2
 800989c:	2200      	movs	r2, #0
 800989e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 80098a0:	193b      	adds	r3, r7, r4
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	193a      	adds	r2, r7, r4
 80098a6:	1c59      	adds	r1, r3, #1
 80098a8:	7011      	strb	r1, [r2, #0]
 80098aa:	0018      	movs	r0, r3
 80098ac:	49ac      	ldr	r1, [pc, #688]	; (8009b60 <SecureElementInit+0x2f0>)
 80098ae:	2383      	movs	r3, #131	; 0x83
 80098b0:	009a      	lsls	r2, r3, #2
 80098b2:	0003      	movs	r3, r0
 80098b4:	011b      	lsls	r3, r3, #4
 80098b6:	181b      	adds	r3, r3, r0
 80098b8:	18cb      	adds	r3, r1, r3
 80098ba:	189b      	adds	r3, r3, r2
 80098bc:	2201      	movs	r2, #1
 80098be:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 80098c0:	193b      	adds	r3, r7, r4
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	193a      	adds	r2, r7, r4
 80098c6:	1c59      	adds	r1, r3, #1
 80098c8:	7011      	strb	r1, [r2, #0]
 80098ca:	0018      	movs	r0, r3
 80098cc:	49a4      	ldr	r1, [pc, #656]	; (8009b60 <SecureElementInit+0x2f0>)
 80098ce:	2383      	movs	r3, #131	; 0x83
 80098d0:	009a      	lsls	r2, r3, #2
 80098d2:	0003      	movs	r3, r0
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	181b      	adds	r3, r3, r0
 80098d8:	18cb      	adds	r3, r1, r3
 80098da:	189b      	adds	r3, r3, r2
 80098dc:	2202      	movs	r2, #2
 80098de:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 80098e0:	193b      	adds	r3, r7, r4
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	193a      	adds	r2, r7, r4
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	7011      	strb	r1, [r2, #0]
 80098ea:	0018      	movs	r0, r3
 80098ec:	499c      	ldr	r1, [pc, #624]	; (8009b60 <SecureElementInit+0x2f0>)
 80098ee:	2383      	movs	r3, #131	; 0x83
 80098f0:	009a      	lsls	r2, r3, #2
 80098f2:	0003      	movs	r3, r0
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	181b      	adds	r3, r3, r0
 80098f8:	18cb      	adds	r3, r1, r3
 80098fa:	189b      	adds	r3, r3, r2
 80098fc:	2203      	movs	r2, #3
 80098fe:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8009900:	193b      	adds	r3, r7, r4
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	193a      	adds	r2, r7, r4
 8009906:	1c59      	adds	r1, r3, #1
 8009908:	7011      	strb	r1, [r2, #0]
 800990a:	0018      	movs	r0, r3
 800990c:	4994      	ldr	r1, [pc, #592]	; (8009b60 <SecureElementInit+0x2f0>)
 800990e:	2383      	movs	r3, #131	; 0x83
 8009910:	009a      	lsls	r2, r3, #2
 8009912:	0003      	movs	r3, r0
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	181b      	adds	r3, r3, r0
 8009918:	18cb      	adds	r3, r1, r3
 800991a:	189b      	adds	r3, r3, r2
 800991c:	2204      	movs	r2, #4
 800991e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8009920:	193b      	adds	r3, r7, r4
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	193a      	adds	r2, r7, r4
 8009926:	1c59      	adds	r1, r3, #1
 8009928:	7011      	strb	r1, [r2, #0]
 800992a:	0018      	movs	r0, r3
 800992c:	498c      	ldr	r1, [pc, #560]	; (8009b60 <SecureElementInit+0x2f0>)
 800992e:	2383      	movs	r3, #131	; 0x83
 8009930:	009a      	lsls	r2, r3, #2
 8009932:	0003      	movs	r3, r0
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	181b      	adds	r3, r3, r0
 8009938:	18cb      	adds	r3, r1, r3
 800993a:	189b      	adds	r3, r3, r2
 800993c:	2205      	movs	r2, #5
 800993e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8009940:	193b      	adds	r3, r7, r4
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	193a      	adds	r2, r7, r4
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	7011      	strb	r1, [r2, #0]
 800994a:	0018      	movs	r0, r3
 800994c:	4984      	ldr	r1, [pc, #528]	; (8009b60 <SecureElementInit+0x2f0>)
 800994e:	2383      	movs	r3, #131	; 0x83
 8009950:	009a      	lsls	r2, r3, #2
 8009952:	0003      	movs	r3, r0
 8009954:	011b      	lsls	r3, r3, #4
 8009956:	181b      	adds	r3, r3, r0
 8009958:	18cb      	adds	r3, r1, r3
 800995a:	189b      	adds	r3, r3, r2
 800995c:	2206      	movs	r2, #6
 800995e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8009960:	193b      	adds	r3, r7, r4
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	193a      	adds	r2, r7, r4
 8009966:	1c59      	adds	r1, r3, #1
 8009968:	7011      	strb	r1, [r2, #0]
 800996a:	0018      	movs	r0, r3
 800996c:	497c      	ldr	r1, [pc, #496]	; (8009b60 <SecureElementInit+0x2f0>)
 800996e:	2383      	movs	r3, #131	; 0x83
 8009970:	009a      	lsls	r2, r3, #2
 8009972:	0003      	movs	r3, r0
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	181b      	adds	r3, r3, r0
 8009978:	18cb      	adds	r3, r1, r3
 800997a:	189b      	adds	r3, r3, r2
 800997c:	2207      	movs	r2, #7
 800997e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8009980:	193b      	adds	r3, r7, r4
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	193a      	adds	r2, r7, r4
 8009986:	1c59      	adds	r1, r3, #1
 8009988:	7011      	strb	r1, [r2, #0]
 800998a:	0018      	movs	r0, r3
 800998c:	4974      	ldr	r1, [pc, #464]	; (8009b60 <SecureElementInit+0x2f0>)
 800998e:	2383      	movs	r3, #131	; 0x83
 8009990:	009a      	lsls	r2, r3, #2
 8009992:	0003      	movs	r3, r0
 8009994:	011b      	lsls	r3, r3, #4
 8009996:	181b      	adds	r3, r3, r0
 8009998:	18cb      	adds	r3, r1, r3
 800999a:	189b      	adds	r3, r3, r2
 800999c:	227f      	movs	r2, #127	; 0x7f
 800999e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 80099a0:	193b      	adds	r3, r7, r4
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	193a      	adds	r2, r7, r4
 80099a6:	1c59      	adds	r1, r3, #1
 80099a8:	7011      	strb	r1, [r2, #0]
 80099aa:	0018      	movs	r0, r3
 80099ac:	496c      	ldr	r1, [pc, #432]	; (8009b60 <SecureElementInit+0x2f0>)
 80099ae:	2383      	movs	r3, #131	; 0x83
 80099b0:	009a      	lsls	r2, r3, #2
 80099b2:	0003      	movs	r3, r0
 80099b4:	011b      	lsls	r3, r3, #4
 80099b6:	181b      	adds	r3, r3, r0
 80099b8:	18cb      	adds	r3, r1, r3
 80099ba:	189b      	adds	r3, r3, r2
 80099bc:	2280      	movs	r2, #128	; 0x80
 80099be:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 80099c0:	193b      	adds	r3, r7, r4
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	193a      	adds	r2, r7, r4
 80099c6:	1c59      	adds	r1, r3, #1
 80099c8:	7011      	strb	r1, [r2, #0]
 80099ca:	0018      	movs	r0, r3
 80099cc:	4964      	ldr	r1, [pc, #400]	; (8009b60 <SecureElementInit+0x2f0>)
 80099ce:	2383      	movs	r3, #131	; 0x83
 80099d0:	009a      	lsls	r2, r3, #2
 80099d2:	0003      	movs	r3, r0
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	181b      	adds	r3, r3, r0
 80099d8:	18cb      	adds	r3, r1, r3
 80099da:	189b      	adds	r3, r3, r2
 80099dc:	2281      	movs	r2, #129	; 0x81
 80099de:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 80099e0:	193b      	adds	r3, r7, r4
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	193a      	adds	r2, r7, r4
 80099e6:	1c59      	adds	r1, r3, #1
 80099e8:	7011      	strb	r1, [r2, #0]
 80099ea:	0018      	movs	r0, r3
 80099ec:	495c      	ldr	r1, [pc, #368]	; (8009b60 <SecureElementInit+0x2f0>)
 80099ee:	2383      	movs	r3, #131	; 0x83
 80099f0:	009a      	lsls	r2, r3, #2
 80099f2:	0003      	movs	r3, r0
 80099f4:	011b      	lsls	r3, r3, #4
 80099f6:	181b      	adds	r3, r3, r0
 80099f8:	18cb      	adds	r3, r1, r3
 80099fa:	189b      	adds	r3, r3, r2
 80099fc:	2282      	movs	r2, #130	; 0x82
 80099fe:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8009a00:	193b      	adds	r3, r7, r4
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	193a      	adds	r2, r7, r4
 8009a06:	1c59      	adds	r1, r3, #1
 8009a08:	7011      	strb	r1, [r2, #0]
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	4954      	ldr	r1, [pc, #336]	; (8009b60 <SecureElementInit+0x2f0>)
 8009a0e:	2383      	movs	r3, #131	; 0x83
 8009a10:	009a      	lsls	r2, r3, #2
 8009a12:	0003      	movs	r3, r0
 8009a14:	011b      	lsls	r3, r3, #4
 8009a16:	181b      	adds	r3, r3, r0
 8009a18:	18cb      	adds	r3, r1, r3
 8009a1a:	189b      	adds	r3, r3, r2
 8009a1c:	2283      	movs	r2, #131	; 0x83
 8009a1e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8009a20:	193b      	adds	r3, r7, r4
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	193a      	adds	r2, r7, r4
 8009a26:	1c59      	adds	r1, r3, #1
 8009a28:	7011      	strb	r1, [r2, #0]
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	494c      	ldr	r1, [pc, #304]	; (8009b60 <SecureElementInit+0x2f0>)
 8009a2e:	2383      	movs	r3, #131	; 0x83
 8009a30:	009a      	lsls	r2, r3, #2
 8009a32:	0003      	movs	r3, r0
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	181b      	adds	r3, r3, r0
 8009a38:	18cb      	adds	r3, r1, r3
 8009a3a:	189b      	adds	r3, r3, r2
 8009a3c:	2284      	movs	r2, #132	; 0x84
 8009a3e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8009a40:	193b      	adds	r3, r7, r4
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	193a      	adds	r2, r7, r4
 8009a46:	1c59      	adds	r1, r3, #1
 8009a48:	7011      	strb	r1, [r2, #0]
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	4944      	ldr	r1, [pc, #272]	; (8009b60 <SecureElementInit+0x2f0>)
 8009a4e:	2383      	movs	r3, #131	; 0x83
 8009a50:	009a      	lsls	r2, r3, #2
 8009a52:	0003      	movs	r3, r0
 8009a54:	011b      	lsls	r3, r3, #4
 8009a56:	181b      	adds	r3, r3, r0
 8009a58:	18cb      	adds	r3, r1, r3
 8009a5a:	189b      	adds	r3, r3, r2
 8009a5c:	2285      	movs	r2, #133	; 0x85
 8009a5e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8009a60:	193b      	adds	r3, r7, r4
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	193a      	adds	r2, r7, r4
 8009a66:	1c59      	adds	r1, r3, #1
 8009a68:	7011      	strb	r1, [r2, #0]
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	493c      	ldr	r1, [pc, #240]	; (8009b60 <SecureElementInit+0x2f0>)
 8009a6e:	2383      	movs	r3, #131	; 0x83
 8009a70:	009a      	lsls	r2, r3, #2
 8009a72:	0003      	movs	r3, r0
 8009a74:	011b      	lsls	r3, r3, #4
 8009a76:	181b      	adds	r3, r3, r0
 8009a78:	18cb      	adds	r3, r1, r3
 8009a7a:	189b      	adds	r3, r3, r2
 8009a7c:	2286      	movs	r2, #134	; 0x86
 8009a7e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 8009a80:	193b      	adds	r3, r7, r4
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	193a      	adds	r2, r7, r4
 8009a86:	1c59      	adds	r1, r3, #1
 8009a88:	7011      	strb	r1, [r2, #0]
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	4934      	ldr	r1, [pc, #208]	; (8009b60 <SecureElementInit+0x2f0>)
 8009a8e:	2383      	movs	r3, #131	; 0x83
 8009a90:	009a      	lsls	r2, r3, #2
 8009a92:	0003      	movs	r3, r0
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	181b      	adds	r3, r3, r0
 8009a98:	18cb      	adds	r3, r1, r3
 8009a9a:	189b      	adds	r3, r3, r2
 8009a9c:	2287      	movs	r2, #135	; 0x87
 8009a9e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8009aa0:	193b      	adds	r3, r7, r4
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	193a      	adds	r2, r7, r4
 8009aa6:	1c59      	adds	r1, r3, #1
 8009aa8:	7011      	strb	r1, [r2, #0]
 8009aaa:	0018      	movs	r0, r3
 8009aac:	492c      	ldr	r1, [pc, #176]	; (8009b60 <SecureElementInit+0x2f0>)
 8009aae:	2383      	movs	r3, #131	; 0x83
 8009ab0:	009a      	lsls	r2, r3, #2
 8009ab2:	0003      	movs	r3, r0
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	181b      	adds	r3, r3, r0
 8009ab8:	18cb      	adds	r3, r1, r3
 8009aba:	189b      	adds	r3, r3, r2
 8009abc:	2288      	movs	r2, #136	; 0x88
 8009abe:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8009ac0:	193b      	adds	r3, r7, r4
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	193a      	adds	r2, r7, r4
 8009ac6:	1c59      	adds	r1, r3, #1
 8009ac8:	7011      	strb	r1, [r2, #0]
 8009aca:	0018      	movs	r0, r3
 8009acc:	4924      	ldr	r1, [pc, #144]	; (8009b60 <SecureElementInit+0x2f0>)
 8009ace:	2383      	movs	r3, #131	; 0x83
 8009ad0:	009a      	lsls	r2, r3, #2
 8009ad2:	0003      	movs	r3, r0
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	181b      	adds	r3, r3, r0
 8009ad8:	18cb      	adds	r3, r1, r3
 8009ada:	189b      	adds	r3, r3, r2
 8009adc:	2289      	movs	r2, #137	; 0x89
 8009ade:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8009ae0:	193b      	adds	r3, r7, r4
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	193a      	adds	r2, r7, r4
 8009ae6:	1c59      	adds	r1, r3, #1
 8009ae8:	7011      	strb	r1, [r2, #0]
 8009aea:	0018      	movs	r0, r3
 8009aec:	491c      	ldr	r1, [pc, #112]	; (8009b60 <SecureElementInit+0x2f0>)
 8009aee:	2383      	movs	r3, #131	; 0x83
 8009af0:	009a      	lsls	r2, r3, #2
 8009af2:	0003      	movs	r3, r0
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	181b      	adds	r3, r3, r0
 8009af8:	18cb      	adds	r3, r1, r3
 8009afa:	189b      	adds	r3, r3, r2
 8009afc:	228a      	movs	r2, #138	; 0x8a
 8009afe:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8009b00:	193b      	adds	r3, r7, r4
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	193a      	adds	r2, r7, r4
 8009b06:	1c59      	adds	r1, r3, #1
 8009b08:	7011      	strb	r1, [r2, #0]
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	4914      	ldr	r1, [pc, #80]	; (8009b60 <SecureElementInit+0x2f0>)
 8009b0e:	2383      	movs	r3, #131	; 0x83
 8009b10:	009a      	lsls	r2, r3, #2
 8009b12:	0003      	movs	r3, r0
 8009b14:	011b      	lsls	r3, r3, #4
 8009b16:	181b      	adds	r3, r3, r0
 8009b18:	18cb      	adds	r3, r1, r3
 8009b1a:	189b      	adds	r3, r3, r2
 8009b1c:	228b      	movs	r2, #139	; 0x8b
 8009b1e:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = SLOT_RAND_ZERO_KEY;
 8009b20:	193b      	adds	r3, r7, r4
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	193a      	adds	r2, r7, r4
 8009b26:	1c59      	adds	r1, r3, #1
 8009b28:	7011      	strb	r1, [r2, #0]
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	490c      	ldr	r1, [pc, #48]	; (8009b60 <SecureElementInit+0x2f0>)
 8009b2e:	2383      	movs	r3, #131	; 0x83
 8009b30:	009a      	lsls	r2, r3, #2
 8009b32:	0003      	movs	r3, r0
 8009b34:	011b      	lsls	r3, r3, #4
 8009b36:	181b      	adds	r3, r3, r0
 8009b38:	18cb      	adds	r3, r1, r3
 8009b3a:	189b      	adds	r3, r3, r2
 8009b3c:	228c      	movs	r2, #140	; 0x8c
 8009b3e:	701a      	strb	r2, [r3, #0]

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <SecureElementInit+0x2de>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8009b46:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <SecureElementInit+0x2f4>)
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	e002      	b.n	8009b54 <SecureElementInit+0x2e4>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 8009b4e:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <SecureElementInit+0x2f4>)
 8009b50:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <SecureElementInit+0x2f8>)
 8009b52:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	0018      	movs	r0, r3
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	b005      	add	sp, #20
 8009b5c:	bd90      	pop	{r4, r7, pc}
 8009b5e:	46c0      	nop			; (mov r8, r8)
 8009b60:	20000210 	.word	0x20000210
 8009b64:	20000594 	.word	0x20000594
 8009b68:	08009865 	.word	0x08009865

08009b6c <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d008      	beq.n	8009b8c <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 8009b7a:	23e1      	movs	r3, #225	; 0xe1
 8009b7c:	009a      	lsls	r2, r3, #2
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <SecureElementRestoreNvmCtx+0x2c>)
 8009b82:	0018      	movs	r0, r3
 8009b84:	f00b fc70 	bl	8015468 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e000      	b.n	8009b8e <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009b8c:	2302      	movs	r3, #2
    }
}
 8009b8e:	0018      	movs	r0, r3
 8009b90:	46bd      	mov	sp, r7
 8009b92:	b002      	add	sp, #8
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	46c0      	nop			; (mov r8, r8)
 8009b98:	20000210 	.word	0x20000210

08009b9c <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	22e1      	movs	r2, #225	; 0xe1
 8009ba8:	0092      	lsls	r2, r2, #2
 8009baa:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 8009bac:	4b02      	ldr	r3, [pc, #8]	; (8009bb8 <SecureElementGetNvmCtx+0x1c>)
}
 8009bae:	0018      	movs	r0, r3
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	b002      	add	sp, #8
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	20000210 	.word	0x20000210

08009bbc <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8009bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bbe:	b089      	sub	sp, #36	; 0x24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	0002      	movs	r2, r0
 8009bc4:	6039      	str	r1, [r7, #0]
 8009bc6:	1dfb      	adds	r3, r7, #7
 8009bc8:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e063      	b.n	8009c9c <SecureElementSetKey+0xe0>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8009bd4:	231e      	movs	r3, #30
 8009bd6:	18fb      	adds	r3, r7, r3
 8009bd8:	2206      	movs	r2, #6
 8009bda:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009bdc:	231f      	movs	r3, #31
 8009bde:	18fb      	adds	r3, r7, r3
 8009be0:	2200      	movs	r2, #0
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	e054      	b.n	8009c90 <SecureElementSetKey+0xd4>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8009be6:	231f      	movs	r3, #31
 8009be8:	18fb      	adds	r3, r7, r3
 8009bea:	781a      	ldrb	r2, [r3, #0]
 8009bec:	482d      	ldr	r0, [pc, #180]	; (8009ca4 <SecureElementSetKey+0xe8>)
 8009bee:	2383      	movs	r3, #131	; 0x83
 8009bf0:	0099      	lsls	r1, r3, #2
 8009bf2:	0013      	movs	r3, r2
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	189b      	adds	r3, r3, r2
 8009bf8:	18c3      	adds	r3, r0, r3
 8009bfa:	185b      	adds	r3, r3, r1
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	1dfa      	adds	r2, r7, #7
 8009c00:	7812      	ldrb	r2, [r2, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d13e      	bne.n	8009c84 <SecureElementSetKey+0xc8>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
 8009c06:	231f      	movs	r3, #31
 8009c08:	18fb      	adds	r3, r7, r3
 8009c0a:	781a      	ldrb	r2, [r3, #0]
 8009c0c:	4825      	ldr	r0, [pc, #148]	; (8009ca4 <SecureElementSetKey+0xe8>)
 8009c0e:	2383      	movs	r3, #131	; 0x83
 8009c10:	0099      	lsls	r1, r3, #2
 8009c12:	0013      	movs	r3, r2
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	189b      	adds	r3, r3, r2
 8009c18:	18c3      	adds	r3, r0, r3
 8009c1a:	185b      	adds	r3, r3, r1
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b25b      	sxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da19      	bge.n	8009c58 <SecureElementSetKey+0x9c>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
 8009c24:	250c      	movs	r5, #12
 8009c26:	197b      	adds	r3, r7, r5
 8009c28:	0018      	movs	r0, r3
 8009c2a:	2310      	movs	r3, #16
 8009c2c:	001a      	movs	r2, r3
 8009c2e:	2100      	movs	r1, #0
 8009c30:	f014 ff18 	bl	801ea64 <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8009c34:	261e      	movs	r6, #30
 8009c36:	19bc      	adds	r4, r7, r6
 8009c38:	197b      	adds	r3, r7, r5
 8009c3a:	6838      	ldr	r0, [r7, #0]
 8009c3c:	227f      	movs	r2, #127	; 0x7f
 8009c3e:	2110      	movs	r1, #16
 8009c40:	f000 f89a 	bl	8009d78 <SecureElementAesEncrypt>
 8009c44:	0003      	movs	r3, r0
 8009c46:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
 8009c48:	19bb      	adds	r3, r7, r6
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d019      	beq.n	8009c84 <SecureElementSetKey+0xc8>
                {
                    return retval;
 8009c50:	231e      	movs	r3, #30
 8009c52:	18fb      	adds	r3, r7, r3
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	e021      	b.n	8009c9c <SecureElementSetKey+0xe0>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8009c58:	231f      	movs	r3, #31
 8009c5a:	18fb      	adds	r3, r7, r3
 8009c5c:	781a      	ldrb	r2, [r3, #0]
 8009c5e:	0013      	movs	r3, r2
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	189b      	adds	r3, r3, r2
 8009c64:	2282      	movs	r2, #130	; 0x82
 8009c66:	0092      	lsls	r2, r2, #2
 8009c68:	189a      	adds	r2, r3, r2
 8009c6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <SecureElementSetKey+0xe8>)
 8009c6c:	18d3      	adds	r3, r2, r3
 8009c6e:	3305      	adds	r3, #5
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	2210      	movs	r2, #16
 8009c74:	0018      	movs	r0, r3
 8009c76:	f00b fbf7 	bl	8015468 <memcpy1>
                SeNvmCtxChanged( );
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <SecureElementSetKey+0xec>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e00b      	b.n	8009c9c <SecureElementSetKey+0xe0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8009c84:	211f      	movs	r1, #31
 8009c86:	187b      	adds	r3, r7, r1
 8009c88:	781a      	ldrb	r2, [r3, #0]
 8009c8a:	187b      	adds	r3, r7, r1
 8009c8c:	3201      	adds	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	231f      	movs	r3, #31
 8009c92:	18fb      	adds	r3, r7, r3
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b15      	cmp	r3, #21
 8009c98:	d9a5      	bls.n	8009be6 <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009c9a:	2303      	movs	r3, #3
}
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	b009      	add	sp, #36	; 0x24
 8009ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca4:	20000210 	.word	0x20000210
 8009ca8:	20000594 	.word	0x20000594

08009cac <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8009cac:	b590      	push	{r4, r7, lr}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	0008      	movs	r0, r1
 8009cb6:	0011      	movs	r1, r2
 8009cb8:	607b      	str	r3, [r7, #4]
 8009cba:	230a      	movs	r3, #10
 8009cbc:	18fb      	adds	r3, r7, r3
 8009cbe:	1c02      	adds	r2, r0, #0
 8009cc0:	801a      	strh	r2, [r3, #0]
 8009cc2:	2009      	movs	r0, #9
 8009cc4:	183b      	adds	r3, r7, r0
 8009cc6:	1c0a      	adds	r2, r1, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
 8009cca:	183b      	adds	r3, r7, r0
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	2b7e      	cmp	r3, #126	; 0x7e
 8009cd0:	d901      	bls.n	8009cd6 <SecureElementComputeAesCmac+0x2a>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e00b      	b.n	8009cee <SecureElementComputeAesCmac+0x42>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
 8009cd6:	687c      	ldr	r4, [r7, #4]
 8009cd8:	2309      	movs	r3, #9
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	781a      	ldrb	r2, [r3, #0]
 8009cde:	230a      	movs	r3, #10
 8009ce0:	18fb      	adds	r3, r7, r3
 8009ce2:	8819      	ldrh	r1, [r3, #0]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	0023      	movs	r3, r4
 8009ce8:	f7ff fd5e 	bl	80097a8 <ComputeCmac>
 8009cec:	0003      	movs	r3, r0
}
 8009cee:	0018      	movs	r0, r3
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	b005      	add	sp, #20
 8009cf4:	bd90      	pop	{r4, r7, pc}

08009cf6 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8009cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cf8:	b087      	sub	sp, #28
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	0008      	movs	r0, r1
 8009d00:	607a      	str	r2, [r7, #4]
 8009d02:	0019      	movs	r1, r3
 8009d04:	230a      	movs	r3, #10
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	1c02      	adds	r2, r0, #0
 8009d0a:	801a      	strh	r2, [r3, #0]
 8009d0c:	2309      	movs	r3, #9
 8009d0e:	18fb      	adds	r3, r7, r3
 8009d10:	1c0a      	adds	r2, r1, #0
 8009d12:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d101      	bne.n	8009d1e <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	e027      	b.n	8009d6e <SecureElementVerifyAesCmac+0x78>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8009d1e:	2617      	movs	r6, #23
 8009d20:	19bb      	adds	r3, r7, r6
 8009d22:	2206      	movs	r2, #6
 8009d24:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
 8009d2a:	19bc      	adds	r4, r7, r6
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	18fd      	adds	r5, r7, r3
 8009d30:	2309      	movs	r3, #9
 8009d32:	18fb      	adds	r3, r7, r3
 8009d34:	781a      	ldrb	r2, [r3, #0]
 8009d36:	230a      	movs	r3, #10
 8009d38:	18fb      	adds	r3, r7, r3
 8009d3a:	8819      	ldrh	r1, [r3, #0]
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	002b      	movs	r3, r5
 8009d40:	f7ff fd32 	bl	80097a8 <ComputeCmac>
 8009d44:	0003      	movs	r3, r0
 8009d46:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009d48:	19bb      	adds	r3, r7, r6
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <SecureElementVerifyAesCmac+0x62>
    {
        return retval;
 8009d50:	2317      	movs	r3, #23
 8009d52:	18fb      	adds	r3, r7, r3
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	e00a      	b.n	8009d6e <SecureElementVerifyAesCmac+0x78>
    }

    if( expectedCmac != compCmac )
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d003      	beq.n	8009d68 <SecureElementVerifyAesCmac+0x72>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8009d60:	2317      	movs	r3, #23
 8009d62:	18fb      	adds	r3, r7, r3
 8009d64:	2201      	movs	r2, #1
 8009d66:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 8009d68:	2317      	movs	r3, #23
 8009d6a:	18fb      	adds	r3, r7, r3
 8009d6c:	781b      	ldrb	r3, [r3, #0]
}
 8009d6e:	0018      	movs	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	b007      	add	sp, #28
 8009d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009d78 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8009d78:	b5b0      	push	{r4, r5, r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	0008      	movs	r0, r1
 8009d82:	0011      	movs	r1, r2
 8009d84:	607b      	str	r3, [r7, #4]
 8009d86:	230a      	movs	r3, #10
 8009d88:	18fb      	adds	r3, r7, r3
 8009d8a:	1c02      	adds	r2, r0, #0
 8009d8c:	801a      	strh	r2, [r3, #0]
 8009d8e:	2309      	movs	r3, #9
 8009d90:	18fb      	adds	r3, r7, r3
 8009d92:	1c0a      	adds	r2, r1, #0
 8009d94:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <SecureElementAesEncrypt+0x2a>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009da2:	2302      	movs	r3, #2
 8009da4:	e04c      	b.n	8009e40 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8009da6:	230a      	movs	r3, #10
 8009da8:	18fb      	adds	r3, r7, r3
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	220f      	movs	r2, #15
 8009dae:	4013      	ands	r3, r2
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8009db6:	2305      	movs	r3, #5
 8009db8:	e042      	b.n	8009e40 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8009dba:	4b23      	ldr	r3, [pc, #140]	; (8009e48 <SecureElementAesEncrypt+0xd0>)
 8009dbc:	22f0      	movs	r2, #240	; 0xf0
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	f00b fb8d 	bl	80154e0 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8009dc6:	2516      	movs	r5, #22
 8009dc8:	197c      	adds	r4, r7, r5
 8009dca:	2310      	movs	r3, #16
 8009dcc:	18fa      	adds	r2, r7, r3
 8009dce:	2309      	movs	r3, #9
 8009dd0:	18fb      	adds	r3, r7, r3
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	0011      	movs	r1, r2
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	f7ff fca8 	bl	800972c <GetKeyByID>
 8009ddc:	0003      	movs	r3, r0
 8009dde:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8009de0:	197b      	adds	r3, r7, r5
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d128      	bne.n	8009e3a <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	3301      	adds	r3, #1
 8009dec:	4a16      	ldr	r2, [pc, #88]	; (8009e48 <SecureElementAesEncrypt+0xd0>)
 8009dee:	2110      	movs	r1, #16
 8009df0:	0018      	movs	r0, r3
 8009df2:	f7ff f8cf 	bl	8008f94 <aes_set_key>

        uint8_t block = 0;
 8009df6:	2317      	movs	r3, #23
 8009df8:	18fb      	adds	r3, r7, r3
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 8009dfe:	e017      	b.n	8009e30 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8009e00:	2417      	movs	r4, #23
 8009e02:	193b      	adds	r3, r7, r4
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	18d0      	adds	r0, r2, r3
 8009e0a:	193b      	adds	r3, r7, r4
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	18d3      	adds	r3, r2, r3
 8009e12:	4a0d      	ldr	r2, [pc, #52]	; (8009e48 <SecureElementAesEncrypt+0xd0>)
 8009e14:	0019      	movs	r1, r3
 8009e16:	f7ff f9ef 	bl	80091f8 <aes_encrypt>
            block = block + 16;
 8009e1a:	193b      	adds	r3, r7, r4
 8009e1c:	193a      	adds	r2, r7, r4
 8009e1e:	7812      	ldrb	r2, [r2, #0]
 8009e20:	3210      	adds	r2, #16
 8009e22:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 8009e24:	220a      	movs	r2, #10
 8009e26:	18bb      	adds	r3, r7, r2
 8009e28:	18ba      	adds	r2, r7, r2
 8009e2a:	8812      	ldrh	r2, [r2, #0]
 8009e2c:	3a10      	subs	r2, #16
 8009e2e:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 8009e30:	230a      	movs	r3, #10
 8009e32:	18fb      	adds	r3, r7, r3
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e2      	bne.n	8009e00 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 8009e3a:	2316      	movs	r3, #22
 8009e3c:	18fb      	adds	r3, r7, r3
 8009e3e:	781b      	ldrb	r3, [r3, #0]
}
 8009e40:	0018      	movs	r0, r3
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b006      	add	sp, #24
 8009e46:	bdb0      	pop	{r4, r5, r7, pc}
 8009e48:	20000210 	.word	0x20000210

08009e4c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8009e4c:	b5b0      	push	{r4, r5, r7, lr}
 8009e4e:	b08a      	sub	sp, #40	; 0x28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	0019      	movs	r1, r3
 8009e58:	1dfb      	adds	r3, r7, #7
 8009e5a:	701a      	strb	r2, [r3, #0]
 8009e5c:	1dbb      	adds	r3, r7, #6
 8009e5e:	1c0a      	adds	r2, r1, #0
 8009e60:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e066      	b.n	8009f3a <SecureElementDeriveAndStoreKey+0xee>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8009e6c:	2327      	movs	r3, #39	; 0x27
 8009e6e:	18fb      	adds	r3, r7, r3
 8009e70:	2206      	movs	r2, #6
 8009e72:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 8009e74:	2314      	movs	r3, #20
 8009e76:	18fb      	adds	r3, r7, r3
 8009e78:	0018      	movs	r0, r3
 8009e7a:	2310      	movs	r3, #16
 8009e7c:	001a      	movs	r2, r3
 8009e7e:	2100      	movs	r1, #0
 8009e80:	f014 fdf0 	bl	801ea64 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8009e84:	1dbb      	adds	r3, r7, #6
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b7f      	cmp	r3, #127	; 0x7f
 8009e8a:	d10e      	bne.n	8009eaa <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8009e8c:	1dfb      	adds	r3, r7, #7
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <SecureElementDeriveAndStoreKey+0x52>
 8009e94:	230c      	movs	r3, #12
 8009e96:	18fb      	adds	r3, r7, r3
 8009e98:	789b      	ldrb	r3, [r3, #2]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <SecureElementDeriveAndStoreKey+0x5a>
 8009e9e:	1dfb      	adds	r3, r7, #7
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d101      	bne.n	8009eaa <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e047      	b.n	8009f3a <SecureElementDeriveAndStoreKey+0xee>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	781a      	ldrb	r2, [r3, #0]
 8009eae:	2124      	movs	r1, #36	; 0x24
 8009eb0:	187b      	adds	r3, r7, r1
 8009eb2:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	021b      	lsls	r3, r3, #8
 8009ebc:	b21a      	sxth	r2, r3
 8009ebe:	187b      	adds	r3, r7, r1
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	5e1b      	ldrsh	r3, [r3, r0]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	b21a      	sxth	r2, r3
 8009ec8:	187b      	adds	r3, r7, r1
 8009eca:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 8009ecc:	1dbb      	adds	r3, r7, #6
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8009ed2:	d108      	bne.n	8009ee6 <SecureElementDeriveAndStoreKey+0x9a>
 8009ed4:	2324      	movs	r3, #36	; 0x24
 8009ed6:	18fb      	adds	r3, r7, r3
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	2b0f      	cmp	r3, #15
 8009edc:	d803      	bhi.n	8009ee6 <SecureElementDeriveAndStoreKey+0x9a>
    {
        return retval;
 8009ede:	2327      	movs	r3, #39	; 0x27
 8009ee0:	18fb      	adds	r3, r7, r3
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	e029      	b.n	8009f3a <SecureElementDeriveAndStoreKey+0xee>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8009ee6:	2527      	movs	r5, #39	; 0x27
 8009ee8:	197c      	adds	r4, r7, r5
 8009eea:	2314      	movs	r3, #20
 8009eec:	18f9      	adds	r1, r7, r3
 8009eee:	1dfb      	adds	r3, r7, #7
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	000b      	movs	r3, r1
 8009ef6:	2110      	movs	r1, #16
 8009ef8:	f7ff ff3e 	bl	8009d78 <SecureElementAesEncrypt>
 8009efc:	0003      	movs	r3, r0
 8009efe:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009f00:	197b      	adds	r3, r7, r5
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <SecureElementDeriveAndStoreKey+0xc4>
    {
        return retval;
 8009f08:	2327      	movs	r3, #39	; 0x27
 8009f0a:	18fb      	adds	r3, r7, r3
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	e014      	b.n	8009f3a <SecureElementDeriveAndStoreKey+0xee>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 8009f10:	2527      	movs	r5, #39	; 0x27
 8009f12:	197c      	adds	r4, r7, r5
 8009f14:	2314      	movs	r3, #20
 8009f16:	18fa      	adds	r2, r7, r3
 8009f18:	1dbb      	adds	r3, r7, #6
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	0011      	movs	r1, r2
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f7ff fe4c 	bl	8009bbc <SecureElementSetKey>
 8009f24:	0003      	movs	r3, r0
 8009f26:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009f28:	197b      	adds	r3, r7, r5
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <SecureElementDeriveAndStoreKey+0xec>
    {
        return retval;
 8009f30:	2327      	movs	r3, #39	; 0x27
 8009f32:	18fb      	adds	r3, r7, r3
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	e000      	b.n	8009f3a <SecureElementDeriveAndStoreKey+0xee>
    }

    return SECURE_ELEMENT_SUCCESS;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	b00a      	add	sp, #40	; 0x28
 8009f40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009f44 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009f4a:	f00b fa37 	bl	80153bc <TimerGetCurrentTime>
 8009f4e:	0002      	movs	r2, r0
 8009f50:	4b1f      	ldr	r3, [pc, #124]	; (8009fd0 <OnRadioTxDone+0x8c>)
 8009f52:	601a      	str	r2, [r3, #0]
    uint64_t tm = itsdk_time_get_ms();
 8009f54:	f012 fdb8 	bl	801cac8 <itsdk_time_get_ms>
 8009f58:	0003      	movs	r3, r0
 8009f5a:	000c      	movs	r4, r1
 8009f5c:	603b      	str	r3, [r7, #0]
 8009f5e:	607c      	str	r4, [r7, #4]
    MacCtx.LastTxSysTime.Seconds = tm/1000;
 8009f60:	6838      	ldr	r0, [r7, #0]
 8009f62:	6879      	ldr	r1, [r7, #4]
 8009f64:	22fa      	movs	r2, #250	; 0xfa
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f7f6 faad 	bl	80004c8 <__aeabi_uldivmod>
 8009f6e:	0003      	movs	r3, r0
 8009f70:	000c      	movs	r4, r1
 8009f72:	0019      	movs	r1, r3
 8009f74:	4a17      	ldr	r2, [pc, #92]	; (8009fd4 <OnRadioTxDone+0x90>)
 8009f76:	23d3      	movs	r3, #211	; 0xd3
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	50d1      	str	r1, [r2, r3]
    MacCtx.LastTxSysTime.SubSeconds = tm % 1000;
 8009f7c:	6838      	ldr	r0, [r7, #0]
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	22fa      	movs	r2, #250	; 0xfa
 8009f82:	0092      	lsls	r2, r2, #2
 8009f84:	2300      	movs	r3, #0
 8009f86:	f7f6 fa9f 	bl	80004c8 <__aeabi_uldivmod>
 8009f8a:	001c      	movs	r4, r3
 8009f8c:	0013      	movs	r3, r2
 8009f8e:	b219      	sxth	r1, r3
 8009f90:	4a10      	ldr	r2, [pc, #64]	; (8009fd4 <OnRadioTxDone+0x90>)
 8009f92:	23d4      	movs	r3, #212	; 0xd4
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	52d1      	strh	r1, [r2, r3]

    LoRaMacRadioEvents.Events.TxDone = 1;
 8009f98:	4b0f      	ldr	r3, [pc, #60]	; (8009fd8 <OnRadioTxDone+0x94>)
 8009f9a:	781a      	ldrb	r2, [r3, #0]
 8009f9c:	2110      	movs	r1, #16
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009fa2:	4a0c      	ldr	r2, [pc, #48]	; (8009fd4 <OnRadioTxDone+0x90>)
 8009fa4:	23d7      	movs	r3, #215	; 0xd7
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	58d3      	ldr	r3, [r2, r3]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <OnRadioTxDone+0x84>
 8009fae:	4a09      	ldr	r2, [pc, #36]	; (8009fd4 <OnRadioTxDone+0x90>)
 8009fb0:	23d7      	movs	r3, #215	; 0xd7
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	58d3      	ldr	r3, [r2, r3]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d005      	beq.n	8009fc8 <OnRadioTxDone+0x84>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009fbc:	4a05      	ldr	r2, [pc, #20]	; (8009fd4 <OnRadioTxDone+0x90>)
 8009fbe:	23d7      	movs	r3, #215	; 0xd7
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	58d3      	ldr	r3, [r2, r3]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
#endif
}
 8009fc8:	46c0      	nop			; (mov r8, r8)
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	b003      	add	sp, #12
 8009fce:	bd90      	pop	{r4, r7, pc}
 8009fd0:	20001420 	.word	0x20001420
 8009fd4:	20000598 	.word	0x20000598
 8009fd8:	20000c38 	.word	0x20000c38

08009fdc <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8009fdc:	b5b0      	push	{r4, r5, r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	000c      	movs	r4, r1
 8009fe6:	0010      	movs	r0, r2
 8009fe8:	0019      	movs	r1, r3
 8009fea:	250a      	movs	r5, #10
 8009fec:	197b      	adds	r3, r7, r5
 8009fee:	1c22      	adds	r2, r4, #0
 8009ff0:	801a      	strh	r2, [r3, #0]
 8009ff2:	2408      	movs	r4, #8
 8009ff4:	193b      	adds	r3, r7, r4
 8009ff6:	1c02      	adds	r2, r0, #0
 8009ff8:	801a      	strh	r2, [r3, #0]
 8009ffa:	1dfb      	adds	r3, r7, #7
 8009ffc:	1c0a      	adds	r2, r1, #0
 8009ffe:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a000:	f00b f9dc 	bl	80153bc <TimerGetCurrentTime>
 800a004:	0002      	movs	r2, r0
 800a006:	4b16      	ldr	r3, [pc, #88]	; (800a060 <OnRadioRxDone+0x84>)
 800a008:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800a00a:	4b15      	ldr	r3, [pc, #84]	; (800a060 <OnRadioRxDone+0x84>)
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800a010:	4b13      	ldr	r3, [pc, #76]	; (800a060 <OnRadioRxDone+0x84>)
 800a012:	197a      	adds	r2, r7, r5
 800a014:	8812      	ldrh	r2, [r2, #0]
 800a016:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800a018:	4b11      	ldr	r3, [pc, #68]	; (800a060 <OnRadioRxDone+0x84>)
 800a01a:	193a      	adds	r2, r7, r4
 800a01c:	8812      	ldrh	r2, [r2, #0]
 800a01e:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800a020:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <OnRadioRxDone+0x84>)
 800a022:	1dfa      	adds	r2, r7, #7
 800a024:	7812      	ldrb	r2, [r2, #0]
 800a026:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800a028:	4b0e      	ldr	r3, [pc, #56]	; (800a064 <OnRadioRxDone+0x88>)
 800a02a:	781a      	ldrb	r2, [r3, #0]
 800a02c:	2108      	movs	r1, #8
 800a02e:	430a      	orrs	r2, r1
 800a030:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a032:	4a0d      	ldr	r2, [pc, #52]	; (800a068 <OnRadioRxDone+0x8c>)
 800a034:	23d7      	movs	r3, #215	; 0xd7
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	58d3      	ldr	r3, [r2, r3]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00c      	beq.n	800a058 <OnRadioRxDone+0x7c>
 800a03e:	4a0a      	ldr	r2, [pc, #40]	; (800a068 <OnRadioRxDone+0x8c>)
 800a040:	23d7      	movs	r3, #215	; 0xd7
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	58d3      	ldr	r3, [r2, r3]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d005      	beq.n	800a058 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a04c:	4a06      	ldr	r2, [pc, #24]	; (800a068 <OnRadioRxDone+0x8c>)
 800a04e:	23d7      	movs	r3, #215	; 0xd7
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	58d3      	ldr	r3, [r2, r3]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
#endif
}
 800a058:	46c0      	nop			; (mov r8, r8)
 800a05a:	46bd      	mov	sp, r7
 800a05c:	b004      	add	sp, #16
 800a05e:	bdb0      	pop	{r4, r5, r7, pc}
 800a060:	20001424 	.word	0x20001424
 800a064:	20000c38 	.word	0x20000c38
 800a068:	20000598 	.word	0x20000598

0800a06c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a070:	4b0d      	ldr	r3, [pc, #52]	; (800a0a8 <OnRadioTxTimeout+0x3c>)
 800a072:	781a      	ldrb	r2, [r3, #0]
 800a074:	2104      	movs	r1, #4
 800a076:	430a      	orrs	r2, r1
 800a078:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a07a:	4a0c      	ldr	r2, [pc, #48]	; (800a0ac <OnRadioTxTimeout+0x40>)
 800a07c:	23d7      	movs	r3, #215	; 0xd7
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	58d3      	ldr	r3, [r2, r3]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00c      	beq.n	800a0a0 <OnRadioTxTimeout+0x34>
 800a086:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <OnRadioTxTimeout+0x40>)
 800a088:	23d7      	movs	r3, #215	; 0xd7
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	58d3      	ldr	r3, [r2, r3]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a094:	4a05      	ldr	r2, [pc, #20]	; (800a0ac <OnRadioTxTimeout+0x40>)
 800a096:	23d7      	movs	r3, #215	; 0xd7
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	58d3      	ldr	r3, [r2, r3]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
#endif
}
 800a0a0:	46c0      	nop			; (mov r8, r8)
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	20000c38 	.word	0x20000c38
 800a0ac:	20000598 	.word	0x20000598

0800a0b0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800a0b4:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <OnRadioRxError+0x3c>)
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	2102      	movs	r1, #2
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a0be:	4a0c      	ldr	r2, [pc, #48]	; (800a0f0 <OnRadioRxError+0x40>)
 800a0c0:	23d7      	movs	r3, #215	; 0xd7
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	58d3      	ldr	r3, [r2, r3]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00c      	beq.n	800a0e4 <OnRadioRxError+0x34>
 800a0ca:	4a09      	ldr	r2, [pc, #36]	; (800a0f0 <OnRadioRxError+0x40>)
 800a0cc:	23d7      	movs	r3, #215	; 0xd7
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	58d3      	ldr	r3, [r2, r3]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d005      	beq.n	800a0e4 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a0d8:	4a05      	ldr	r2, [pc, #20]	; (800a0f0 <OnRadioRxError+0x40>)
 800a0da:	23d7      	movs	r3, #215	; 0xd7
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	58d3      	ldr	r3, [r2, r3]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	4798      	blx	r3
    }
}
 800a0e4:	46c0      	nop			; (mov r8, r8)
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	20000c38 	.word	0x20000c38
 800a0f0:	20000598 	.word	0x20000598

0800a0f4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <OnRadioRxTimeout+0x3c>)
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	430a      	orrs	r2, r1
 800a100:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a102:	4a0c      	ldr	r2, [pc, #48]	; (800a134 <OnRadioRxTimeout+0x40>)
 800a104:	23d7      	movs	r3, #215	; 0xd7
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	58d3      	ldr	r3, [r2, r3]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00c      	beq.n	800a128 <OnRadioRxTimeout+0x34>
 800a10e:	4a09      	ldr	r2, [pc, #36]	; (800a134 <OnRadioRxTimeout+0x40>)
 800a110:	23d7      	movs	r3, #215	; 0xd7
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	58d3      	ldr	r3, [r2, r3]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a11c:	4a05      	ldr	r2, [pc, #20]	; (800a134 <OnRadioRxTimeout+0x40>)
 800a11e:	23d7      	movs	r3, #215	; 0xd7
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	58d3      	ldr	r3, [r2, r3]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
#endif
}
 800a128:	46c0      	nop			; (mov r8, r8)
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	46c0      	nop			; (mov r8, r8)
 800a130:	20000c38 	.word	0x20000c38
 800a134:	20000598 	.word	0x20000598

0800a138 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a13e:	4a5e      	ldr	r2, [pc, #376]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a140:	238e      	movs	r3, #142	; 0x8e
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	58d3      	ldr	r3, [r2, r3]
 800a146:	22c8      	movs	r2, #200	; 0xc8
 800a148:	5c9b      	ldrb	r3, [r3, r2]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d003      	beq.n	800a156 <ProcessRadioTxDone+0x1e>
    {
        Radio.Sleep( );
 800a14e:	4b5b      	ldr	r3, [pc, #364]	; (800a2bc <ProcessRadioTxDone+0x184>)
 800a150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a152:	4798      	blx	r3
 800a154:	e001      	b.n	800a15a <ProcessRadioTxDone+0x22>
    }
    else
    {
        OpenContinuousRx2Window( );
 800a156:	f002 ff95 	bl	800d084 <OpenContinuousRx2Window>
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800a15a:	4a57      	ldr	r2, [pc, #348]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a15c:	23f1      	movs	r3, #241	; 0xf1
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	58d2      	ldr	r2, [r2, r3]
 800a162:	4b57      	ldr	r3, [pc, #348]	; (800a2c0 <ProcessRadioTxDone+0x188>)
 800a164:	0011      	movs	r1, r2
 800a166:	0018      	movs	r0, r3
 800a168:	f00b f86c 	bl	8015244 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800a16c:	4b54      	ldr	r3, [pc, #336]	; (800a2c0 <ProcessRadioTxDone+0x188>)
 800a16e:	0018      	movs	r0, r3
 800a170:	f00b f894 	bl	801529c <TimerStart>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a174:	4a50      	ldr	r2, [pc, #320]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a176:	238e      	movs	r3, #142	; 0x8e
 800a178:	00db      	lsls	r3, r3, #3
 800a17a:	58d3      	ldr	r3, [r2, r3]
 800a17c:	22c8      	movs	r2, #200	; 0xc8
 800a17e:	5c9b      	ldrb	r3, [r3, r2]
 800a180:	2b02      	cmp	r3, #2
 800a182:	d00c      	beq.n	800a19e <ProcessRadioTxDone+0x66>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800a184:	4a4c      	ldr	r2, [pc, #304]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a186:	23f2      	movs	r3, #242	; 0xf2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	58d2      	ldr	r2, [r2, r3]
 800a18c:	4b4d      	ldr	r3, [pc, #308]	; (800a2c4 <ProcessRadioTxDone+0x18c>)
 800a18e:	0011      	movs	r1, r2
 800a190:	0018      	movs	r0, r3
 800a192:	f00b f857 	bl	8015244 <TimerSetValue>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800a196:	4b4b      	ldr	r3, [pc, #300]	; (800a2c4 <ProcessRadioTxDone+0x18c>)
 800a198:	0018      	movs	r0, r3
 800a19a:	f00b f87f 	bl	801529c <TimerStart>
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
 800a19e:	4a46      	ldr	r2, [pc, #280]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a1a0:	238e      	movs	r3, #142	; 0x8e
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	58d3      	ldr	r3, [r2, r3]
 800a1a6:	22c8      	movs	r2, #200	; 0xc8
 800a1a8:	5c9b      	ldrb	r3, [r3, r2]
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d007      	beq.n	800a1be <ProcessRadioTxDone+0x86>
 800a1ae:	4a42      	ldr	r2, [pc, #264]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a1b0:	238e      	movs	r3, #142	; 0x8e
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	58d3      	ldr	r3, [r2, r3]
 800a1b6:	4a44      	ldr	r2, [pc, #272]	; (800a2c8 <ProcessRadioTxDone+0x190>)
 800a1b8:	5c9b      	ldrb	r3, [r3, r2]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d022      	beq.n	800a204 <ProcessRadioTxDone+0xcc>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800a1be:	210c      	movs	r1, #12
 800a1c0:	187b      	adds	r3, r7, r1
 800a1c2:	2215      	movs	r2, #21
 800a1c4:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a1c6:	4a3c      	ldr	r2, [pc, #240]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a1c8:	238e      	movs	r3, #142	; 0x8e
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	58d3      	ldr	r3, [r2, r3]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	187a      	adds	r2, r7, r1
 800a1d2:	0011      	movs	r1, r2
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f008 fb8a 	bl	80128ee <RegionGetPhyParam>
 800a1da:	0003      	movs	r3, r0
 800a1dc:	001a      	movs	r2, r3
 800a1de:	2108      	movs	r1, #8
 800a1e0:	187b      	adds	r3, r7, r1
 800a1e2:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a1e4:	4a34      	ldr	r2, [pc, #208]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a1e6:	23f2      	movs	r3, #242	; 0xf2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	58d2      	ldr	r2, [r2, r3]
 800a1ec:	187b      	adds	r3, r7, r1
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	18d2      	adds	r2, r2, r3
 800a1f2:	4b36      	ldr	r3, [pc, #216]	; (800a2cc <ProcessRadioTxDone+0x194>)
 800a1f4:	0011      	movs	r1, r2
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	f00b f824 	bl	8015244 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800a1fc:	4b33      	ldr	r3, [pc, #204]	; (800a2cc <ProcessRadioTxDone+0x194>)
 800a1fe:	0018      	movs	r0, r3
 800a200:	f00b f84c 	bl	801529c <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800a204:	4a2c      	ldr	r2, [pc, #176]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a206:	238e      	movs	r3, #142	; 0x8e
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	58d1      	ldr	r1, [r2, r3]
 800a20c:	4a2a      	ldr	r2, [pc, #168]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a20e:	238e      	movs	r3, #142	; 0x8e
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	58d2      	ldr	r2, [r2, r3]
 800a214:	2314      	movs	r3, #20
 800a216:	33ff      	adds	r3, #255	; 0xff
 800a218:	5cc9      	ldrb	r1, [r1, r3]
 800a21a:	238a      	movs	r3, #138	; 0x8a
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
 800a220:	4a25      	ldr	r2, [pc, #148]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a222:	238e      	movs	r3, #142	; 0x8e
 800a224:	00db      	lsls	r3, r3, #3
 800a226:	58d2      	ldr	r2, [r2, r3]
 800a228:	2314      	movs	r3, #20
 800a22a:	33ff      	adds	r3, #255	; 0xff
 800a22c:	5cd2      	ldrb	r2, [r2, r3]
 800a22e:	003b      	movs	r3, r7
 800a230:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a232:	4a21      	ldr	r2, [pc, #132]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a234:	238e      	movs	r3, #142	; 0x8e
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	58d2      	ldr	r2, [r2, r3]
 800a23a:	2389      	movs	r3, #137	; 0x89
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	5cd3      	ldrb	r3, [r2, r3]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d103      	bne.n	800a24c <ProcessRadioTxDone+0x114>
    {
        txDone.Joined  = false;
 800a244:	003b      	movs	r3, r7
 800a246:	2200      	movs	r2, #0
 800a248:	705a      	strb	r2, [r3, #1]
 800a24a:	e002      	b.n	800a252 <ProcessRadioTxDone+0x11a>
    }
    else
    {
        txDone.Joined  = true;
 800a24c:	003b      	movs	r3, r7
 800a24e:	2201      	movs	r2, #1
 800a250:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800a252:	4b1f      	ldr	r3, [pc, #124]	; (800a2d0 <ProcessRadioTxDone+0x198>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	003b      	movs	r3, r7
 800a258:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800a25a:	4a17      	ldr	r2, [pc, #92]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a25c:	238e      	movs	r3, #142	; 0x8e
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	58d3      	ldr	r3, [r2, r3]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	003a      	movs	r2, r7
 800a266:	0011      	movs	r1, r2
 800a268:	0018      	movs	r0, r3
 800a26a:	f008 fb68 	bl	801293e <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
 800a26e:	4b18      	ldr	r3, [pc, #96]	; (800a2d0 <ProcessRadioTxDone+0x198>)
 800a270:	6819      	ldr	r1, [r3, #0]
 800a272:	4a11      	ldr	r2, [pc, #68]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a274:	23d0      	movs	r3, #208	; 0xd0
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
 800a27a:	4a0f      	ldr	r2, [pc, #60]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a27c:	238e      	movs	r3, #142	; 0x8e
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	58d3      	ldr	r3, [r2, r3]
 800a282:	4a11      	ldr	r2, [pc, #68]	; (800a2c8 <ProcessRadioTxDone+0x190>)
 800a284:	5c9b      	ldrb	r3, [r3, r2]
 800a286:	2201      	movs	r2, #1
 800a288:	4053      	eors	r3, r2
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00f      	beq.n	800a2b0 <ProcessRadioTxDone+0x178>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a290:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a292:	4a10      	ldr	r2, [pc, #64]	; (800a2d4 <ProcessRadioTxDone+0x19c>)
 800a294:	2100      	movs	r1, #0
 800a296:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 800a298:	4a07      	ldr	r2, [pc, #28]	; (800a2b8 <ProcessRadioTxDone+0x180>)
 800a29a:	238e      	movs	r3, #142	; 0x8e
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	58d3      	ldr	r3, [r2, r3]
 800a2a0:	2288      	movs	r2, #136	; 0x88
 800a2a2:	0052      	lsls	r2, r2, #1
 800a2a4:	5c9a      	ldrb	r2, [r3, r2]
 800a2a6:	3201      	adds	r2, #1
 800a2a8:	b2d1      	uxtb	r1, r2
 800a2aa:	2288      	movs	r2, #136	; 0x88
 800a2ac:	0052      	lsls	r2, r2, #1
 800a2ae:	5499      	strb	r1, [r3, r2]
    }
}
 800a2b0:	46c0      	nop			; (mov r8, r8)
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	b004      	add	sp, #16
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20000598 	.word	0x20000598
 800a2bc:	08020a5c 	.word	0x08020a5c
 800a2c0:	2000092c 	.word	0x2000092c
 800a2c4:	20000944 	.word	0x20000944
 800a2c8:	00000219 	.word	0x00000219
 800a2cc:	2000098c 	.word	0x2000098c
 800a2d0:	20001420 	.word	0x20001420
 800a2d4:	0000042d 	.word	0x0000042d

0800a2d8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a2dc:	4a12      	ldr	r2, [pc, #72]	; (800a328 <PrepareRxDoneAbort+0x50>)
 800a2de:	23d5      	movs	r3, #213	; 0xd5
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	58d3      	ldr	r3, [r2, r3]
 800a2e4:	2280      	movs	r2, #128	; 0x80
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	0011      	movs	r1, r2
 800a2ea:	4a0f      	ldr	r2, [pc, #60]	; (800a328 <PrepareRxDoneAbort+0x50>)
 800a2ec:	23d5      	movs	r3, #213	; 0xd5
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
 800a2f2:	4a0d      	ldr	r2, [pc, #52]	; (800a328 <PrepareRxDoneAbort+0x50>)
 800a2f4:	238e      	movs	r3, #142	; 0x8e
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	58d3      	ldr	r3, [r2, r3]
 800a2fa:	4a0c      	ldr	r2, [pc, #48]	; (800a32c <PrepareRxDoneAbort+0x54>)
 800a2fc:	5c9b      	ldrb	r3, [r3, r2]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <PrepareRxDoneAbort+0x30>
    {
        OnAckTimeoutTimerEvent( NULL );
 800a302:	2000      	movs	r0, #0
 800a304:	f001 fa66 	bl	800b7d4 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800a308:	4b07      	ldr	r3, [pc, #28]	; (800a328 <PrepareRxDoneAbort+0x50>)
 800a30a:	4a09      	ldr	r2, [pc, #36]	; (800a330 <PrepareRxDoneAbort+0x58>)
 800a30c:	5c99      	ldrb	r1, [r3, r2]
 800a30e:	2002      	movs	r0, #2
 800a310:	4301      	orrs	r1, r0
 800a312:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <PrepareRxDoneAbort+0x50>)
 800a316:	4a06      	ldr	r2, [pc, #24]	; (800a330 <PrepareRxDoneAbort+0x58>)
 800a318:	5c99      	ldrb	r1, [r3, r2]
 800a31a:	2010      	movs	r0, #16
 800a31c:	4301      	orrs	r1, r0
 800a31e:	5499      	strb	r1, [r3, r2]
}
 800a320:	46c0      	nop			; (mov r8, r8)
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	46c0      	nop			; (mov r8, r8)
 800a328:	20000598 	.word	0x20000598
 800a32c:	00000219 	.word	0x00000219
 800a330:	0000046d 	.word	0x0000046d

0800a334 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800a334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a336:	b0a7      	sub	sp, #156	; 0x9c
 800a338:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800a33a:	2380      	movs	r3, #128	; 0x80
 800a33c:	18fb      	adds	r3, r7, r3
 800a33e:	2210      	movs	r2, #16
 800a340:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800a342:	4bda      	ldr	r3, [pc, #872]	; (800a6ac <ProcessRadioRxDone+0x378>)
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800a348:	247a      	movs	r4, #122	; 0x7a
 800a34a:	193b      	adds	r3, r7, r4
 800a34c:	4ad7      	ldr	r2, [pc, #860]	; (800a6ac <ProcessRadioRxDone+0x378>)
 800a34e:	8912      	ldrh	r2, [r2, #8]
 800a350:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800a352:	2078      	movs	r0, #120	; 0x78
 800a354:	183b      	adds	r3, r7, r0
 800a356:	4ad5      	ldr	r2, [pc, #852]	; (800a6ac <ProcessRadioRxDone+0x378>)
 800a358:	8952      	ldrh	r2, [r2, #10]
 800a35a:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800a35c:	2577      	movs	r5, #119	; 0x77
 800a35e:	197b      	adds	r3, r7, r5
 800a360:	4ad2      	ldr	r2, [pc, #840]	; (800a6ac <ProcessRadioRxDone+0x378>)
 800a362:	7b12      	ldrb	r2, [r2, #12]
 800a364:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800a366:	2376      	movs	r3, #118	; 0x76
 800a368:	18fb      	adds	r3, r7, r3
 800a36a:	2200      	movs	r2, #0
 800a36c:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800a36e:	2300      	movs	r3, #0
 800a370:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a372:	4acf      	ldr	r2, [pc, #828]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a374:	238e      	movs	r3, #142	; 0x8e
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	58d3      	ldr	r3, [r2, r3]
 800a37a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a37c:	2284      	movs	r2, #132	; 0x84
 800a37e:	18ba      	adds	r2, r7, r2
 800a380:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800a382:	2383      	movs	r3, #131	; 0x83
 800a384:	18fb      	adds	r3, r7, r3
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a38a:	2382      	movs	r3, #130	; 0x82
 800a38c:	18fb      	adds	r3, r7, r3
 800a38e:	2204      	movs	r2, #4
 800a390:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800a392:	4ac7      	ldr	r2, [pc, #796]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a394:	2386      	movs	r3, #134	; 0x86
 800a396:	00db      	lsls	r3, r3, #3
 800a398:	2100      	movs	r1, #0
 800a39a:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800a39c:	4bc4      	ldr	r3, [pc, #784]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a39e:	183a      	adds	r2, r7, r0
 800a3a0:	49c4      	ldr	r1, [pc, #784]	; (800a6b4 <ProcessRadioRxDone+0x380>)
 800a3a2:	8812      	ldrh	r2, [r2, #0]
 800a3a4:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800a3a6:	4ac2      	ldr	r2, [pc, #776]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3a8:	1979      	adds	r1, r7, r5
 800a3aa:	2384      	movs	r3, #132	; 0x84
 800a3ac:	00db      	lsls	r3, r3, #3
 800a3ae:	7809      	ldrb	r1, [r1, #0]
 800a3b0:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800a3b2:	4bbf      	ldr	r3, [pc, #764]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3b4:	4ac0      	ldr	r2, [pc, #768]	; (800a6b8 <ProcessRadioRxDone+0x384>)
 800a3b6:	5c99      	ldrb	r1, [r3, r2]
 800a3b8:	4bbd      	ldr	r3, [pc, #756]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3ba:	4ac0      	ldr	r2, [pc, #768]	; (800a6bc <ProcessRadioRxDone+0x388>)
 800a3bc:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800a3be:	4bbc      	ldr	r3, [pc, #752]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3c0:	4abf      	ldr	r2, [pc, #764]	; (800a6c0 <ProcessRadioRxDone+0x38c>)
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800a3c6:	4bba      	ldr	r3, [pc, #744]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3c8:	4abe      	ldr	r2, [pc, #760]	; (800a6c4 <ProcessRadioRxDone+0x390>)
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800a3ce:	4bb8      	ldr	r3, [pc, #736]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3d0:	4abd      	ldr	r2, [pc, #756]	; (800a6c8 <ProcessRadioRxDone+0x394>)
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800a3d6:	4ab6      	ldr	r2, [pc, #728]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3d8:	2383      	movs	r3, #131	; 0x83
 800a3da:	00db      	lsls	r3, r3, #3
 800a3dc:	2100      	movs	r1, #0
 800a3de:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 800a3e0:	4bb3      	ldr	r3, [pc, #716]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3e2:	4aba      	ldr	r2, [pc, #744]	; (800a6cc <ProcessRadioRxDone+0x398>)
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.RxData = false;
 800a3e8:	4bb1      	ldr	r3, [pc, #708]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3ea:	4ab9      	ldr	r2, [pc, #740]	; (800a6d0 <ProcessRadioRxDone+0x39c>)
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800a3f0:	4baf      	ldr	r3, [pc, #700]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3f2:	4ab8      	ldr	r2, [pc, #736]	; (800a6d4 <ProcessRadioRxDone+0x3a0>)
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a3f8:	4bad      	ldr	r3, [pc, #692]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a3fa:	4ab7      	ldr	r2, [pc, #732]	; (800a6d8 <ProcessRadioRxDone+0x3a4>)
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a400:	4aab      	ldr	r2, [pc, #684]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a402:	2382      	movs	r3, #130	; 0x82
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	2100      	movs	r1, #0
 800a408:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 800a40a:	4aa9      	ldr	r2, [pc, #676]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a40c:	2385      	movs	r3, #133	; 0x85
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	2100      	movs	r1, #0
 800a412:	50d1      	str	r1, [r2, r3]

    Radio.Sleep( );
 800a414:	4bb1      	ldr	r3, [pc, #708]	; (800a6dc <ProcessRadioRxDone+0x3a8>)
 800a416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a418:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a41a:	4bb1      	ldr	r3, [pc, #708]	; (800a6e0 <ProcessRadioRxDone+0x3ac>)
 800a41c:	0018      	movs	r0, r3
 800a41e:	f00a ff93 	bl	8015348 <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a422:	193b      	adds	r3, r7, r4
 800a424:	881a      	ldrh	r2, [r3, #0]
 800a426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a428:	0011      	movs	r1, r2
 800a42a:	0018      	movs	r0, r3
 800a42c:	f005 fab3 	bl	800f996 <LoRaMacClassBRxBeacon>
 800a430:	1e03      	subs	r3, r0, #0
 800a432:	d00d      	beq.n	800a450 <ProcessRadioRxDone+0x11c>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a434:	4b9e      	ldr	r3, [pc, #632]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a436:	2278      	movs	r2, #120	; 0x78
 800a438:	18ba      	adds	r2, r7, r2
 800a43a:	49aa      	ldr	r1, [pc, #680]	; (800a6e4 <ProcessRadioRxDone+0x3b0>)
 800a43c:	8812      	ldrh	r2, [r2, #0]
 800a43e:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a440:	4b9b      	ldr	r3, [pc, #620]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a442:	2277      	movs	r2, #119	; 0x77
 800a444:	18ba      	adds	r2, r7, r2
 800a446:	49a8      	ldr	r1, [pc, #672]	; (800a6e8 <ProcessRadioRxDone+0x3b4>)
 800a448:	7812      	ldrb	r2, [r2, #0]
 800a44a:	545a      	strb	r2, [r3, r1]
        return;
 800a44c:	f000 fc85 	bl	800ad5a <ProcessRadioRxDone+0xa26>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a450:	4a97      	ldr	r2, [pc, #604]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a452:	238e      	movs	r3, #142	; 0x8e
 800a454:	00db      	lsls	r3, r3, #3
 800a456:	58d3      	ldr	r3, [r2, r3]
 800a458:	22c8      	movs	r2, #200	; 0xc8
 800a45a:	5c9b      	ldrb	r3, [r3, r2]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d11c      	bne.n	800a49a <ProcessRadioRxDone+0x166>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a460:	f005 faab 	bl	800f9ba <LoRaMacClassBIsPingExpected>
 800a464:	1e03      	subs	r3, r0, #0
 800a466:	d00a      	beq.n	800a47e <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a468:	2000      	movs	r0, #0
 800a46a:	f005 fa62 	bl	800f932 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a46e:	2000      	movs	r0, #0
 800a470:	f005 fa81 	bl	800f976 <LoRaMacClassBPingSlotTimerEvent>
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
 800a474:	4b8e      	ldr	r3, [pc, #568]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a476:	4a91      	ldr	r2, [pc, #580]	; (800a6bc <ProcessRadioRxDone+0x388>)
 800a478:	2103      	movs	r1, #3
 800a47a:	5499      	strb	r1, [r3, r2]
 800a47c:	e00d      	b.n	800a49a <ProcessRadioRxDone+0x166>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a47e:	f005 faa2 	bl	800f9c6 <LoRaMacClassBIsMulticastExpected>
 800a482:	1e03      	subs	r3, r0, #0
 800a484:	d009      	beq.n	800a49a <ProcessRadioRxDone+0x166>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a486:	2000      	movs	r0, #0
 800a488:	f005 fa5d 	bl	800f946 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a48c:	2000      	movs	r0, #0
 800a48e:	f005 fa7a 	bl	800f986 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 800a492:	4b87      	ldr	r3, [pc, #540]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a494:	4a89      	ldr	r2, [pc, #548]	; (800a6bc <ProcessRadioRxDone+0x388>)
 800a496:	2104      	movs	r1, #4
 800a498:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800a49a:	2276      	movs	r2, #118	; 0x76
 800a49c:	18bb      	adds	r3, r7, r2
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	18ba      	adds	r2, r7, r2
 800a4a2:	1c59      	adds	r1, r3, #1
 800a4a4:	7011      	strb	r1, [r2, #0]
 800a4a6:	001a      	movs	r2, r3
 800a4a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4aa:	189b      	adds	r3, r3, r2
 800a4ac:	781a      	ldrb	r2, [r3, #0]
 800a4ae:	2174      	movs	r1, #116	; 0x74
 800a4b0:	187b      	adds	r3, r7, r1
 800a4b2:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800a4b4:	187b      	adds	r3, r7, r1
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	061b      	lsls	r3, r3, #24
 800a4ba:	0f5b      	lsrs	r3, r3, #29
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d100      	bne.n	800a4c4 <ProcessRadioRxDone+0x190>
 800a4c2:	e11c      	b.n	800a6fe <ProcessRadioRxDone+0x3ca>
 800a4c4:	dc03      	bgt.n	800a4ce <ProcessRadioRxDone+0x19a>
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d00a      	beq.n	800a4e0 <ProcessRadioRxDone+0x1ac>
 800a4ca:	f000 fc18 	bl	800acfe <ProcessRadioRxDone+0x9ca>
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	d100      	bne.n	800a4d4 <ProcessRadioRxDone+0x1a0>
 800a4d2:	e10f      	b.n	800a6f4 <ProcessRadioRxDone+0x3c0>
 800a4d4:	2b07      	cmp	r3, #7
 800a4d6:	d101      	bne.n	800a4dc <ProcessRadioRxDone+0x1a8>
 800a4d8:	f000 fbe6 	bl	800aca8 <ProcessRadioRxDone+0x974>
 800a4dc:	f000 fc0f 	bl	800acfe <ProcessRadioRxDone+0x9ca>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800a4e0:	210c      	movs	r1, #12
 800a4e2:	187b      	adds	r3, r7, r1
 800a4e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a4e6:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800a4e8:	237a      	movs	r3, #122	; 0x7a
 800a4ea:	18fb      	adds	r3, r7, r3
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	187b      	adds	r3, r7, r1
 800a4f2:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a4f4:	4a6e      	ldr	r2, [pc, #440]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a4f6:	238e      	movs	r3, #142	; 0x8e
 800a4f8:	00db      	lsls	r3, r3, #3
 800a4fa:	58d2      	ldr	r2, [r2, r3]
 800a4fc:	2389      	movs	r3, #137	; 0x89
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	5cd3      	ldrb	r3, [r2, r3]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d007      	beq.n	800a516 <ProcessRadioRxDone+0x1e2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a506:	4b6a      	ldr	r3, [pc, #424]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a508:	4a78      	ldr	r2, [pc, #480]	; (800a6ec <ProcessRadioRxDone+0x3b8>)
 800a50a:	2101      	movs	r1, #1
 800a50c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a50e:	f7ff fee3 	bl	800a2d8 <PrepareRxDoneAbort>
                return;
 800a512:	f000 fc22 	bl	800ad5a <ProcessRadioRxDone+0xa26>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
 800a516:	4b66      	ldr	r3, [pc, #408]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	2580      	movs	r5, #128	; 0x80
 800a51c:	197c      	adds	r4, r7, r5
 800a51e:	220c      	movs	r2, #12
 800a520:	18ba      	adds	r2, r7, r2
 800a522:	0019      	movs	r1, r3
 800a524:	20ff      	movs	r0, #255	; 0xff
 800a526:	f006 ffe9 	bl	80114fc <LoRaMacCryptoHandleJoinAccept>
 800a52a:	0003      	movs	r3, r0
 800a52c:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a52e:	197b      	adds	r3, r7, r5
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d000      	beq.n	800a538 <ProcessRadioRxDone+0x204>
 800a536:	e0ad      	b.n	800a694 <ProcessRadioRxDone+0x360>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a538:	240c      	movs	r4, #12
 800a53a:	193b      	adds	r3, r7, r4
 800a53c:	7a59      	ldrb	r1, [r3, #9]
 800a53e:	4a5c      	ldr	r2, [pc, #368]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a540:	238e      	movs	r3, #142	; 0x8e
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	58d3      	ldr	r3, [r2, r3]
 800a546:	000a      	movs	r2, r1
 800a548:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a54a:	4a59      	ldr	r2, [pc, #356]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a54c:	238e      	movs	r3, #142	; 0x8e
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	58d3      	ldr	r3, [r2, r3]
 800a552:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a554:	193b      	adds	r3, r7, r4
 800a556:	7a9b      	ldrb	r3, [r3, #10]
 800a558:	021a      	lsls	r2, r3, #8
 800a55a:	4855      	ldr	r0, [pc, #340]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a55c:	238e      	movs	r3, #142	; 0x8e
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	58c3      	ldr	r3, [r0, r3]
 800a562:	430a      	orrs	r2, r1
 800a564:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a566:	4a52      	ldr	r2, [pc, #328]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a568:	238e      	movs	r3, #142	; 0x8e
 800a56a:	00db      	lsls	r3, r3, #3
 800a56c:	58d3      	ldr	r3, [r2, r3]
 800a56e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a570:	193b      	adds	r3, r7, r4
 800a572:	7adb      	ldrb	r3, [r3, #11]
 800a574:	041a      	lsls	r2, r3, #16
 800a576:	484e      	ldr	r0, [pc, #312]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a578:	238e      	movs	r3, #142	; 0x8e
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	58c3      	ldr	r3, [r0, r3]
 800a57e:	430a      	orrs	r2, r1
 800a580:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800a582:	4a4b      	ldr	r2, [pc, #300]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a584:	238e      	movs	r3, #142	; 0x8e
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	58d3      	ldr	r3, [r2, r3]
 800a58a:	193a      	adds	r2, r7, r4
 800a58c:	68d2      	ldr	r2, [r2, #12]
 800a58e:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a590:	193b      	adds	r3, r7, r4
 800a592:	7c1b      	ldrb	r3, [r3, #16]
 800a594:	065b      	lsls	r3, r3, #25
 800a596:	0f5b      	lsrs	r3, r3, #29
 800a598:	b2d9      	uxtb	r1, r3
 800a59a:	4a45      	ldr	r2, [pc, #276]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a59c:	238e      	movs	r3, #142	; 0x8e
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	58d3      	ldr	r3, [r2, r3]
 800a5a2:	22f5      	movs	r2, #245	; 0xf5
 800a5a4:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a5a6:	193b      	adds	r3, r7, r4
 800a5a8:	7c1b      	ldrb	r3, [r3, #16]
 800a5aa:	071b      	lsls	r3, r3, #28
 800a5ac:	0f1b      	lsrs	r3, r3, #28
 800a5ae:	b2d9      	uxtb	r1, r3
 800a5b0:	4a3f      	ldr	r2, [pc, #252]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a5b2:	238e      	movs	r3, #142	; 0x8e
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	58d3      	ldr	r3, [r2, r3]
 800a5b8:	22fc      	movs	r2, #252	; 0xfc
 800a5ba:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a5bc:	193b      	adds	r3, r7, r4
 800a5be:	7c59      	ldrb	r1, [r3, #17]
 800a5c0:	4a3b      	ldr	r2, [pc, #236]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a5c2:	238e      	movs	r3, #142	; 0x8e
 800a5c4:	00db      	lsls	r3, r3, #3
 800a5c6:	58d3      	ldr	r3, [r2, r3]
 800a5c8:	22e4      	movs	r2, #228	; 0xe4
 800a5ca:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800a5cc:	4a38      	ldr	r2, [pc, #224]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a5ce:	238e      	movs	r3, #142	; 0x8e
 800a5d0:	00db      	lsls	r3, r3, #3
 800a5d2:	58d3      	ldr	r3, [r2, r3]
 800a5d4:	22e4      	movs	r2, #228	; 0xe4
 800a5d6:	589b      	ldr	r3, [r3, r2]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d106      	bne.n	800a5ea <ProcessRadioRxDone+0x2b6>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800a5dc:	4a34      	ldr	r2, [pc, #208]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a5de:	238e      	movs	r3, #142	; 0x8e
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	58d3      	ldr	r3, [r2, r3]
 800a5e4:	22e4      	movs	r2, #228	; 0xe4
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800a5ea:	4a31      	ldr	r2, [pc, #196]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a5ec:	238e      	movs	r3, #142	; 0x8e
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	58d3      	ldr	r3, [r2, r3]
 800a5f2:	22e4      	movs	r2, #228	; 0xe4
 800a5f4:	589a      	ldr	r2, [r3, r2]
 800a5f6:	492e      	ldr	r1, [pc, #184]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a5f8:	238e      	movs	r3, #142	; 0x8e
 800a5fa:	00db      	lsls	r3, r3, #3
 800a5fc:	58c9      	ldr	r1, [r1, r3]
 800a5fe:	0013      	movs	r3, r2
 800a600:	015b      	lsls	r3, r3, #5
 800a602:	1a9b      	subs	r3, r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	189b      	adds	r3, r3, r2
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	001a      	movs	r2, r3
 800a60c:	23e4      	movs	r3, #228	; 0xe4
 800a60e:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800a610:	4a27      	ldr	r2, [pc, #156]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a612:	238e      	movs	r3, #142	; 0x8e
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	58d3      	ldr	r3, [r2, r3]
 800a618:	22e4      	movs	r2, #228	; 0xe4
 800a61a:	589a      	ldr	r2, [r3, r2]
 800a61c:	4924      	ldr	r1, [pc, #144]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a61e:	238e      	movs	r3, #142	; 0x8e
 800a620:	00db      	lsls	r3, r3, #3
 800a622:	58cb      	ldr	r3, [r1, r3]
 800a624:	21fa      	movs	r1, #250	; 0xfa
 800a626:	0089      	lsls	r1, r1, #2
 800a628:	468c      	mov	ip, r1
 800a62a:	4462      	add	r2, ip
 800a62c:	21e8      	movs	r1, #232	; 0xe8
 800a62e:	505a      	str	r2, [r3, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800a630:	4a1f      	ldr	r2, [pc, #124]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a632:	238e      	movs	r3, #142	; 0x8e
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	58d3      	ldr	r3, [r2, r3]
 800a638:	4a2d      	ldr	r2, [pc, #180]	; (800a6f0 <ProcessRadioRxDone+0x3bc>)
 800a63a:	2100      	movs	r1, #0
 800a63c:	5499      	strb	r1, [r3, r2]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a63e:	216c      	movs	r1, #108	; 0x6c
 800a640:	187b      	adds	r3, r7, r1
 800a642:	220c      	movs	r2, #12
 800a644:	18ba      	adds	r2, r7, r2
 800a646:	3212      	adds	r2, #18
 800a648:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800a64a:	237a      	movs	r3, #122	; 0x7a
 800a64c:	18fb      	adds	r3, r7, r3
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	b2db      	uxtb	r3, r3
 800a652:	3b11      	subs	r3, #17
 800a654:	b2da      	uxtb	r2, r3
 800a656:	187b      	adds	r3, r7, r1
 800a658:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800a65a:	4a15      	ldr	r2, [pc, #84]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a65c:	238e      	movs	r3, #142	; 0x8e
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	58d3      	ldr	r3, [r2, r3]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	187a      	adds	r2, r7, r1
 800a666:	0011      	movs	r1, r2
 800a668:	0018      	movs	r0, r3
 800a66a:	f008 f9c4 	bl	80129f6 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a66e:	4a10      	ldr	r2, [pc, #64]	; (800a6b0 <ProcessRadioRxDone+0x37c>)
 800a670:	238e      	movs	r3, #142	; 0x8e
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	58d2      	ldr	r2, [r2, r3]
 800a676:	2389      	movs	r3, #137	; 0x89
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	2102      	movs	r1, #2
 800a67c:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a67e:	2000      	movs	r0, #0
 800a680:	f005 fe6c 	bl	801035c <LoRaMacConfirmQueueIsCmdActive>
 800a684:	1e03      	subs	r3, r0, #0
 800a686:	d100      	bne.n	800a68a <ProcessRadioRxDone+0x356>
 800a688:	e340      	b.n	800ad0c <ProcessRadioRxDone+0x9d8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a68a:	2100      	movs	r1, #0
 800a68c:	2000      	movs	r0, #0
 800a68e:	f005 fdd7 	bl	8010240 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800a692:	e33b      	b.n	800ad0c <ProcessRadioRxDone+0x9d8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a694:	2000      	movs	r0, #0
 800a696:	f005 fe61 	bl	801035c <LoRaMacConfirmQueueIsCmdActive>
 800a69a:	1e03      	subs	r3, r0, #0
 800a69c:	d100      	bne.n	800a6a0 <ProcessRadioRxDone+0x36c>
 800a69e:	e335      	b.n	800ad0c <ProcessRadioRxDone+0x9d8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	2007      	movs	r0, #7
 800a6a4:	f005 fdcc 	bl	8010240 <LoRaMacConfirmQueueSetStatus>
            break;
 800a6a8:	e330      	b.n	800ad0c <ProcessRadioRxDone+0x9d8>
 800a6aa:	46c0      	nop			; (mov r8, r8)
 800a6ac:	20001424 	.word	0x20001424
 800a6b0:	20000598 	.word	0x20000598
 800a6b4:	0000041e 	.word	0x0000041e
 800a6b8:	0000046c 	.word	0x0000046c
 800a6bc:	00000421 	.word	0x00000421
 800a6c0:	00000413 	.word	0x00000413
 800a6c4:	00000412 	.word	0x00000412
 800a6c8:	00000415 	.word	0x00000415
 800a6cc:	0000041c 	.word	0x0000041c
 800a6d0:	0000041d 	.word	0x0000041d
 800a6d4:	00000422 	.word	0x00000422
 800a6d8:	00000424 	.word	0x00000424
 800a6dc:	08020a5c 	.word	0x08020a5c
 800a6e0:	20000944 	.word	0x20000944
 800a6e4:	00000462 	.word	0x00000462
 800a6e8:	00000464 	.word	0x00000464
 800a6ec:	00000411 	.word	0x00000411
 800a6f0:	00000222 	.word	0x00000222
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a6f4:	4ac7      	ldr	r2, [pc, #796]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a6f6:	2382      	movs	r3, #130	; 0x82
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	54d1      	strb	r1, [r2, r3]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a6fe:	4ac5      	ldr	r2, [pc, #788]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a700:	238e      	movs	r3, #142	; 0x8e
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	58d2      	ldr	r2, [r2, r3]
 800a706:	2302      	movs	r3, #2
 800a708:	33ff      	adds	r3, #255	; 0xff
 800a70a:	5cd2      	ldrb	r2, [r2, r3]
 800a70c:	2168      	movs	r1, #104	; 0x68
 800a70e:	187b      	adds	r3, r7, r1
 800a710:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a712:	4bc0      	ldr	r3, [pc, #768]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a714:	4ac0      	ldr	r2, [pc, #768]	; (800aa18 <ProcessRadioRxDone+0x6e4>)
 800a716:	5c9b      	ldrb	r3, [r3, r2]
 800a718:	b25a      	sxtb	r2, r3
 800a71a:	187b      	adds	r3, r7, r1
 800a71c:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a71e:	187b      	adds	r3, r7, r1
 800a720:	220c      	movs	r2, #12
 800a722:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800a724:	4abb      	ldr	r2, [pc, #748]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a726:	238e      	movs	r3, #142	; 0x8e
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	58d2      	ldr	r2, [r2, r3]
 800a72c:	2316      	movs	r3, #22
 800a72e:	33ff      	adds	r3, #255	; 0xff
 800a730:	5cd3      	ldrb	r3, [r2, r3]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <ProcessRadioRxDone+0x40a>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a736:	2368      	movs	r3, #104	; 0x68
 800a738:	18fb      	adds	r3, r7, r3
 800a73a:	220d      	movs	r2, #13
 800a73c:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a73e:	4ab5      	ldr	r2, [pc, #724]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a740:	238e      	movs	r3, #142	; 0x8e
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	58d3      	ldr	r3, [r2, r3]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2268      	movs	r2, #104	; 0x68
 800a74a:	18ba      	adds	r2, r7, r2
 800a74c:	0011      	movs	r1, r2
 800a74e:	0018      	movs	r0, r3
 800a750:	f008 f8cd 	bl	80128ee <RegionGetPhyParam>
 800a754:	0003      	movs	r3, r0
 800a756:	001a      	movs	r2, r3
 800a758:	2364      	movs	r3, #100	; 0x64
 800a75a:	18fb      	adds	r3, r7, r3
 800a75c:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800a75e:	237a      	movs	r3, #122	; 0x7a
 800a760:	18fb      	adds	r3, r7, r3
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	3b0d      	subs	r3, #13
 800a766:	b29b      	uxth	r3, r3
 800a768:	b21b      	sxth	r3, r3
 800a76a:	1c1a      	adds	r2, r3, #0
 800a76c:	b213      	sxth	r3, r2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da01      	bge.n	800a776 <ProcessRadioRxDone+0x442>
 800a772:	2300      	movs	r3, #0
 800a774:	1c1a      	adds	r2, r3, #0
 800a776:	b212      	sxth	r2, r2
 800a778:	2364      	movs	r3, #100	; 0x64
 800a77a:	18fb      	adds	r3, r7, r3
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	b21b      	sxth	r3, r3
 800a780:	429a      	cmp	r2, r3
 800a782:	dd06      	ble.n	800a792 <ProcessRadioRxDone+0x45e>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a784:	4ba3      	ldr	r3, [pc, #652]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a786:	4aa5      	ldr	r2, [pc, #660]	; (800aa1c <ProcessRadioRxDone+0x6e8>)
 800a788:	2101      	movs	r1, #1
 800a78a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a78c:	f7ff fda4 	bl	800a2d8 <PrepareRxDoneAbort>
                return;
 800a790:	e2e3      	b.n	800ad5a <ProcessRadioRxDone+0xa26>
            }
            macMsgData.Buffer = payload;
 800a792:	2134      	movs	r1, #52	; 0x34
 800a794:	187b      	adds	r3, r7, r1
 800a796:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a798:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800a79a:	237a      	movs	r3, #122	; 0x7a
 800a79c:	18fb      	adds	r3, r7, r3
 800a79e:	881b      	ldrh	r3, [r3, #0]
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	187b      	adds	r3, r7, r1
 800a7a4:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a7a6:	187b      	adds	r3, r7, r1
 800a7a8:	4a9d      	ldr	r2, [pc, #628]	; (800aa20 <ProcessRadioRxDone+0x6ec>)
 800a7aa:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a7ac:	0008      	movs	r0, r1
 800a7ae:	187b      	adds	r3, r7, r1
 800a7b0:	2228      	movs	r2, #40	; 0x28
 800a7b2:	21ff      	movs	r1, #255	; 0xff
 800a7b4:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a7b6:	183b      	adds	r3, r7, r0
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f007 fdb8 	bl	801232e <LoRaMacParserData>
 800a7be:	1e03      	subs	r3, r0, #0
 800a7c0:	d006      	beq.n	800a7d0 <ProcessRadioRxDone+0x49c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7c2:	4b94      	ldr	r3, [pc, #592]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a7c4:	4a95      	ldr	r2, [pc, #596]	; (800aa1c <ProcessRadioRxDone+0x6e8>)
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a7ca:	f7ff fd85 	bl	800a2d8 <PrepareRxDoneAbort>
                return;
 800a7ce:	e2c4      	b.n	800ad5a <ProcessRadioRxDone+0xa26>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a7d0:	2034      	movs	r0, #52	; 0x34
 800a7d2:	183b      	adds	r3, r7, r0
 800a7d4:	6899      	ldr	r1, [r3, #8]
 800a7d6:	4a8f      	ldr	r2, [pc, #572]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a7d8:	2385      	movs	r3, #133	; 0x85
 800a7da:	00db      	lsls	r3, r3, #3
 800a7dc:	50d1      	str	r1, [r2, r3]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a7de:	1dba      	adds	r2, r7, #6
 800a7e0:	183b      	adds	r3, r7, r0
 800a7e2:	0011      	movs	r1, r2
 800a7e4:	0018      	movs	r0, r3
 800a7e6:	f002 ffcd 	bl	800d784 <DetermineFrameType>
 800a7ea:	1e03      	subs	r3, r0, #0
 800a7ec:	d006      	beq.n	800a7fc <ProcessRadioRxDone+0x4c8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a7ee:	4b89      	ldr	r3, [pc, #548]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a7f0:	4a8a      	ldr	r2, [pc, #552]	; (800aa1c <ProcessRadioRxDone+0x6e8>)
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a7f6:	f7ff fd6f 	bl	800a2d8 <PrepareRxDoneAbort>
                return;
 800a7fa:	e2ae      	b.n	800ad5a <ProcessRadioRxDone+0xa26>
            }

            //Check if it is a multicast message
            multicast = 0;
 800a7fc:	2383      	movs	r3, #131	; 0x83
 800a7fe:	18fb      	adds	r3, r7, r3
 800a800:	2200      	movs	r2, #0
 800a802:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a808:	2381      	movs	r3, #129	; 0x81
 800a80a:	18fb      	adds	r3, r7, r3
 800a80c:	2200      	movs	r2, #0
 800a80e:	701a      	strb	r2, [r3, #0]
 800a810:	e051      	b.n	800a8b6 <ProcessRadioRxDone+0x582>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800a812:	4a80      	ldr	r2, [pc, #512]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a814:	238e      	movs	r3, #142	; 0x8e
 800a816:	00db      	lsls	r3, r3, #3
 800a818:	58d2      	ldr	r2, [r2, r3]
 800a81a:	2381      	movs	r3, #129	; 0x81
 800a81c:	18fb      	adds	r3, r7, r3
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	015b      	lsls	r3, r3, #5
 800a822:	18d3      	adds	r3, r2, r3
 800a824:	334c      	adds	r3, #76	; 0x4c
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	2334      	movs	r3, #52	; 0x34
 800a82a:	18fb      	adds	r3, r7, r3
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d13b      	bne.n	800a8aa <ProcessRadioRxDone+0x576>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
 800a832:	4a78      	ldr	r2, [pc, #480]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a834:	238e      	movs	r3, #142	; 0x8e
 800a836:	00db      	lsls	r3, r3, #3
 800a838:	58d2      	ldr	r2, [r2, r3]
 800a83a:	2381      	movs	r3, #129	; 0x81
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2154      	movs	r1, #84	; 0x54
 800a842:	015b      	lsls	r3, r3, #5
 800a844:	18d3      	adds	r3, r2, r3
 800a846:	185b      	adds	r3, r3, r1
 800a848:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d02d      	beq.n	800a8aa <ProcessRadioRxDone+0x576>
                {
                    multicast = 1;
 800a84e:	2383      	movs	r3, #131	; 0x83
 800a850:	18fb      	adds	r3, r7, r3
 800a852:	2201      	movs	r2, #1
 800a854:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 800a856:	4a6f      	ldr	r2, [pc, #444]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a858:	238e      	movs	r3, #142	; 0x8e
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	58d1      	ldr	r1, [r2, r3]
 800a85e:	2481      	movs	r4, #129	; 0x81
 800a860:	193b      	adds	r3, r7, r4
 800a862:	781a      	ldrb	r2, [r3, #0]
 800a864:	2382      	movs	r3, #130	; 0x82
 800a866:	18fb      	adds	r3, r7, r3
 800a868:	2048      	movs	r0, #72	; 0x48
 800a86a:	0152      	lsls	r2, r2, #5
 800a86c:	188a      	adds	r2, r1, r2
 800a86e:	1812      	adds	r2, r2, r0
 800a870:	7812      	ldrb	r2, [r2, #0]
 800a872:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800a874:	4a67      	ldr	r2, [pc, #412]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a876:	238e      	movs	r3, #142	; 0x8e
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	58d2      	ldr	r2, [r2, r3]
 800a87c:	0021      	movs	r1, r4
 800a87e:	187b      	adds	r3, r7, r1
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	015b      	lsls	r3, r3, #5
 800a884:	18d3      	adds	r3, r2, r3
 800a886:	3350      	adds	r3, #80	; 0x50
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
 800a88e:	4a61      	ldr	r2, [pc, #388]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a890:	238e      	movs	r3, #142	; 0x8e
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	58d2      	ldr	r2, [r2, r3]
 800a896:	187b      	adds	r3, r7, r1
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	015b      	lsls	r3, r3, #5
 800a89c:	18d3      	adds	r3, r2, r3
 800a89e:	334c      	adds	r3, #76	; 0x4c
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2284      	movs	r2, #132	; 0x84
 800a8a4:	18ba      	adds	r2, r7, r2
 800a8a6:	6013      	str	r3, [r2, #0]
                    break;
 800a8a8:	e00a      	b.n	800a8c0 <ProcessRadioRxDone+0x58c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a8aa:	2181      	movs	r1, #129	; 0x81
 800a8ac:	187b      	adds	r3, r7, r1
 800a8ae:	781a      	ldrb	r2, [r3, #0]
 800a8b0:	187b      	adds	r3, r7, r1
 800a8b2:	3201      	adds	r2, #1
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	2381      	movs	r3, #129	; 0x81
 800a8b8:	18fb      	adds	r3, r7, r3
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d9a8      	bls.n	800a812 <ProcessRadioRxDone+0x4de>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a8c0:	2168      	movs	r1, #104	; 0x68
 800a8c2:	187b      	adds	r3, r7, r1
 800a8c4:	2214      	movs	r2, #20
 800a8c6:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8c8:	4a52      	ldr	r2, [pc, #328]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a8ca:	238e      	movs	r3, #142	; 0x8e
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	58d3      	ldr	r3, [r2, r3]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	187a      	adds	r2, r7, r1
 800a8d4:	0011      	movs	r1, r2
 800a8d6:	0018      	movs	r0, r3
 800a8d8:	f008 f809 	bl	80128ee <RegionGetPhyParam>
 800a8dc:	0003      	movs	r3, r0
 800a8de:	001a      	movs	r2, r3
 800a8e0:	2064      	movs	r0, #100	; 0x64
 800a8e2:	183b      	adds	r3, r7, r0
 800a8e4:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a8e6:	1dbb      	adds	r3, r7, #6
 800a8e8:	781d      	ldrb	r5, [r3, #0]
 800a8ea:	4a4a      	ldr	r2, [pc, #296]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a8ec:	238e      	movs	r3, #142	; 0x8e
 800a8ee:	00db      	lsls	r3, r3, #3
 800a8f0:	58d1      	ldr	r1, [r2, r3]
 800a8f2:	183b      	adds	r3, r7, r0
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	2275      	movs	r2, #117	; 0x75
 800a8fa:	18bc      	adds	r4, r7, r2
 800a8fc:	2288      	movs	r2, #136	; 0x88
 800a8fe:	0092      	lsls	r2, r2, #2
 800a900:	588e      	ldr	r6, [r1, r2]
 800a902:	2134      	movs	r1, #52	; 0x34
 800a904:	1879      	adds	r1, r7, r1
 800a906:	2082      	movs	r0, #130	; 0x82
 800a908:	183a      	adds	r2, r7, r0
 800a90a:	7810      	ldrb	r0, [r2, #0]
 800a90c:	2208      	movs	r2, #8
 800a90e:	18ba      	adds	r2, r7, r2
 800a910:	9202      	str	r2, [sp, #8]
 800a912:	1dfa      	adds	r2, r7, #7
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	0033      	movs	r3, r6
 800a91a:	000a      	movs	r2, r1
 800a91c:	0029      	movs	r1, r5
 800a91e:	f007 fab5 	bl	8011e8c <LoRaMacGetFCntDown>
 800a922:	0003      	movs	r3, r0
 800a924:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
 800a926:	2275      	movs	r2, #117	; 0x75
 800a928:	18bb      	adds	r3, r7, r2
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d041      	beq.n	800a9b4 <ProcessRadioRxDone+0x680>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
 800a930:	2375      	movs	r3, #117	; 0x75
 800a932:	18fb      	adds	r3, r7, r3
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d127      	bne.n	800a98a <ProcessRadioRxDone+0x656>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a93a:	4b36      	ldr	r3, [pc, #216]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a93c:	4a37      	ldr	r2, [pc, #220]	; (800aa1c <ProcessRadioRxDone+0x6e8>)
 800a93e:	2108      	movs	r1, #8
 800a940:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800a942:	4a34      	ldr	r2, [pc, #208]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a944:	238e      	movs	r3, #142	; 0x8e
 800a946:	00db      	lsls	r3, r3, #3
 800a948:	58d3      	ldr	r3, [r2, r3]
 800a94a:	4a36      	ldr	r2, [pc, #216]	; (800aa24 <ProcessRadioRxDone+0x6f0>)
 800a94c:	5c9b      	ldrb	r3, [r3, r2]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d129      	bne.n	800a9a6 <ProcessRadioRxDone+0x672>
 800a952:	2374      	movs	r3, #116	; 0x74
 800a954:	18fb      	adds	r3, r7, r3
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	221f      	movs	r2, #31
 800a95a:	4393      	bics	r3, r2
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2ba0      	cmp	r3, #160	; 0xa0
 800a960:	d121      	bne.n	800a9a6 <ProcessRadioRxDone+0x672>
 800a962:	4a2c      	ldr	r2, [pc, #176]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a964:	238e      	movs	r3, #142	; 0x8e
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	58d2      	ldr	r2, [r2, r3]
 800a96a:	238a      	movs	r3, #138	; 0x8a
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	58d2      	ldr	r2, [r2, r3]
 800a970:	2334      	movs	r3, #52	; 0x34
 800a972:	18fb      	adds	r3, r7, r3
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	429a      	cmp	r2, r3
 800a978:	d115      	bne.n	800a9a6 <ProcessRadioRxDone+0x672>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800a97a:	4a26      	ldr	r2, [pc, #152]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a97c:	238e      	movs	r3, #142	; 0x8e
 800a97e:	00db      	lsls	r3, r3, #3
 800a980:	58d3      	ldr	r3, [r2, r3]
 800a982:	4a29      	ldr	r2, [pc, #164]	; (800aa28 <ProcessRadioRxDone+0x6f4>)
 800a984:	2101      	movs	r1, #1
 800a986:	5499      	strb	r1, [r3, r2]
 800a988:	e00d      	b.n	800a9a6 <ProcessRadioRxDone+0x672>
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
 800a98a:	2375      	movs	r3, #117	; 0x75
 800a98c:	18fb      	adds	r3, r7, r3
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b02      	cmp	r3, #2
 800a992:	d104      	bne.n	800a99e <ProcessRadioRxDone+0x66a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a994:	4b1f      	ldr	r3, [pc, #124]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a996:	4a21      	ldr	r2, [pc, #132]	; (800aa1c <ProcessRadioRxDone+0x6e8>)
 800a998:	210a      	movs	r1, #10
 800a99a:	5499      	strb	r1, [r3, r2]
 800a99c:	e003      	b.n	800a9a6 <ProcessRadioRxDone+0x672>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a99e:	4b1d      	ldr	r3, [pc, #116]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a9a0:	4a1e      	ldr	r2, [pc, #120]	; (800aa1c <ProcessRadioRxDone+0x6e8>)
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	4b1a      	ldr	r3, [pc, #104]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a9aa:	4920      	ldr	r1, [pc, #128]	; (800aa2c <ProcessRadioRxDone+0x6f8>)
 800a9ac:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 800a9ae:	f7ff fc93 	bl	800a2d8 <PrepareRxDoneAbort>
                return;
 800a9b2:	e1d2      	b.n	800ad5a <ProcessRadioRxDone+0xa26>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a9b4:	1dfb      	adds	r3, r7, #7
 800a9b6:	781a      	ldrb	r2, [r3, #0]
 800a9b8:	68bd      	ldr	r5, [r7, #8]
 800a9ba:	2680      	movs	r6, #128	; 0x80
 800a9bc:	19bc      	adds	r4, r7, r6
 800a9be:	2384      	movs	r3, #132	; 0x84
 800a9c0:	18fb      	adds	r3, r7, r3
 800a9c2:	6819      	ldr	r1, [r3, #0]
 800a9c4:	2382      	movs	r3, #130	; 0x82
 800a9c6:	18fb      	adds	r3, r7, r3
 800a9c8:	7818      	ldrb	r0, [r3, #0]
 800a9ca:	2334      	movs	r3, #52	; 0x34
 800a9cc:	18fb      	adds	r3, r7, r3
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	002b      	movs	r3, r5
 800a9d2:	f007 f92f 	bl	8011c34 <LoRaMacCryptoUnsecureMessage>
 800a9d6:	0003      	movs	r3, r0
 800a9d8:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a9da:	19bb      	adds	r3, r7, r6
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d028      	beq.n	800aa34 <ProcessRadioRxDone+0x700>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a9e2:	2380      	movs	r3, #128	; 0x80
 800a9e4:	18fb      	adds	r3, r7, r3
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d10c      	bne.n	800aa06 <ProcessRadioRxDone+0x6d2>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a9ec:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a9ee:	4a0b      	ldr	r2, [pc, #44]	; (800aa1c <ProcessRadioRxDone+0x6e8>)
 800a9f0:	210b      	movs	r1, #11
 800a9f2:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 800a9f4:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800a9f6:	4a0e      	ldr	r2, [pc, #56]	; (800aa30 <ProcessRadioRxDone+0x6fc>)
 800a9f8:	5c9b      	ldrb	r3, [r3, r2]
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d100      	bne.n	800aa00 <ProcessRadioRxDone+0x6cc>
 800a9fe:	e1ab      	b.n	800ad58 <ProcessRadioRxDone+0xa24>
                    {
                        PrepareRxDoneAbort( );
 800aa00:	f7ff fc6a 	bl	800a2d8 <PrepareRxDoneAbort>
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
 800aa04:	e1a8      	b.n	800ad58 <ProcessRadioRxDone+0xa24>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <ProcessRadioRxDone+0x6e0>)
 800aa08:	4a04      	ldr	r2, [pc, #16]	; (800aa1c <ProcessRadioRxDone+0x6e8>)
 800aa0a:	210c      	movs	r1, #12
 800aa0c:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800aa0e:	f7ff fc63 	bl	800a2d8 <PrepareRxDoneAbort>
                return;
 800aa12:	e1a1      	b.n	800ad58 <ProcessRadioRxDone+0xa24>
 800aa14:	20000598 	.word	0x20000598
 800aa18:	00000414 	.word	0x00000414
 800aa1c:	00000411 	.word	0x00000411
 800aa20:	200007d8 	.word	0x200007d8
 800aa24:	00000222 	.word	0x00000222
 800aa28:	0000021a 	.word	0x0000021a
 800aa2c:	00000424 	.word	0x00000424
 800aa30:	00000421 	.word	0x00000421
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800aa34:	4bca      	ldr	r3, [pc, #808]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aa36:	4acb      	ldr	r2, [pc, #812]	; (800ad64 <ProcessRadioRxDone+0xa30>)
 800aa38:	2100      	movs	r1, #0
 800aa3a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800aa3c:	4bc8      	ldr	r3, [pc, #800]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aa3e:	2483      	movs	r4, #131	; 0x83
 800aa40:	193a      	adds	r2, r7, r4
 800aa42:	49c9      	ldr	r1, [pc, #804]	; (800ad68 <ProcessRadioRxDone+0xa34>)
 800aa44:	7812      	ldrb	r2, [r2, #0]
 800aa46:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800aa48:	2034      	movs	r0, #52	; 0x34
 800aa4a:	183b      	adds	r3, r7, r0
 800aa4c:	7b1b      	ldrb	r3, [r3, #12]
 800aa4e:	06db      	lsls	r3, r3, #27
 800aa50:	0fdb      	lsrs	r3, r3, #31
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	0019      	movs	r1, r3
 800aa56:	4bc2      	ldr	r3, [pc, #776]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aa58:	4ac4      	ldr	r2, [pc, #784]	; (800ad6c <ProcessRadioRxDone+0xa38>)
 800aa5a:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800aa5c:	4ac0      	ldr	r2, [pc, #768]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aa5e:	2383      	movs	r3, #131	; 0x83
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	2100      	movs	r1, #0
 800aa64:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = 0;
 800aa66:	4bbe      	ldr	r3, [pc, #760]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aa68:	4ac1      	ldr	r2, [pc, #772]	; (800ad70 <ProcessRadioRxDone+0xa3c>)
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	4bbb      	ldr	r3, [pc, #748]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aa72:	49c0      	ldr	r1, [pc, #768]	; (800ad74 <ProcessRadioRxDone+0xa40>)
 800aa74:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800aa76:	183b      	adds	r3, r7, r0
 800aa78:	7b1b      	ldrb	r3, [r3, #12]
 800aa7a:	069b      	lsls	r3, r3, #26
 800aa7c:	0fdb      	lsrs	r3, r3, #31
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	1e5a      	subs	r2, r3, #1
 800aa82:	4193      	sbcs	r3, r2
 800aa84:	b2d9      	uxtb	r1, r3
 800aa86:	4bb6      	ldr	r3, [pc, #728]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aa88:	4abb      	ldr	r2, [pc, #748]	; (800ad78 <ProcessRadioRxDone+0xa44>)
 800aa8a:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800aa8c:	4bb4      	ldr	r3, [pc, #720]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aa8e:	4abb      	ldr	r2, [pc, #748]	; (800ad7c <ProcessRadioRxDone+0xa48>)
 800aa90:	2100      	movs	r1, #0
 800aa92:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800aa94:	183b      	adds	r3, r7, r0
 800aa96:	7b1b      	ldrb	r3, [r3, #12]
 800aa98:	069b      	lsls	r3, r3, #26
 800aa9a:	0fdb      	lsrs	r3, r3, #31
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	1e5a      	subs	r2, r3, #1
 800aaa0:	4193      	sbcs	r3, r2
 800aaa2:	b2d9      	uxtb	r1, r3
 800aaa4:	4aae      	ldr	r2, [pc, #696]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aaa6:	2386      	movs	r3, #134	; 0x86
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	54d1      	strb	r1, [r2, r3]

            MacCtx.NvmCtx->AdrAckCounter = 0;
 800aaac:	4aac      	ldr	r2, [pc, #688]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aaae:	238e      	movs	r3, #142	; 0x8e
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	58d3      	ldr	r3, [r2, r3]
 800aab4:	22cc      	movs	r2, #204	; 0xcc
 800aab6:	2100      	movs	r1, #0
 800aab8:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800aaba:	193b      	adds	r3, r7, r4
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d105      	bne.n	800aace <ProcessRadioRxDone+0x79a>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800aac2:	4aa7      	ldr	r2, [pc, #668]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aac4:	2382      	movs	r3, #130	; 0x82
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	2102      	movs	r1, #2
 800aaca:	54d1      	strb	r1, [r2, r3]
 800aacc:	e032      	b.n	800ab34 <ProcessRadioRxDone+0x800>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800aace:	2374      	movs	r3, #116	; 0x74
 800aad0:	18fb      	adds	r3, r7, r3
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	221f      	movs	r2, #31
 800aad6:	4393      	bics	r3, r2
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2ba0      	cmp	r3, #160	; 0xa0
 800aadc:	d11e      	bne.n	800ab1c <ProcessRadioRxDone+0x7e8>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800aade:	4aa0      	ldr	r2, [pc, #640]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aae0:	238e      	movs	r3, #142	; 0x8e
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	58d3      	ldr	r3, [r2, r3]
 800aae6:	4aa6      	ldr	r2, [pc, #664]	; (800ad80 <ProcessRadioRxDone+0xa4c>)
 800aae8:	2101      	movs	r1, #1
 800aaea:	5499      	strb	r1, [r3, r2]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800aaec:	4a9c      	ldr	r2, [pc, #624]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aaee:	238e      	movs	r3, #142	; 0x8e
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	58d3      	ldr	r3, [r2, r3]
 800aaf4:	4aa3      	ldr	r2, [pc, #652]	; (800ad84 <ProcessRadioRxDone+0xa50>)
 800aaf6:	5c9b      	ldrb	r3, [r3, r2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d109      	bne.n	800ab10 <ProcessRadioRxDone+0x7dc>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800aafc:	4a98      	ldr	r2, [pc, #608]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800aafe:	238e      	movs	r3, #142	; 0x8e
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	58d2      	ldr	r2, [r2, r3]
 800ab04:	2334      	movs	r3, #52	; 0x34
 800ab06:	18fb      	adds	r3, r7, r3
 800ab08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ab0a:	238a      	movs	r3, #138	; 0x8a
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ab10:	4a93      	ldr	r2, [pc, #588]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ab12:	2382      	movs	r3, #130	; 0x82
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	2101      	movs	r1, #1
 800ab18:	54d1      	strb	r1, [r2, r3]
 800ab1a:	e00b      	b.n	800ab34 <ProcessRadioRxDone+0x800>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800ab1c:	4a90      	ldr	r2, [pc, #576]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ab1e:	238e      	movs	r3, #142	; 0x8e
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	58d3      	ldr	r3, [r2, r3]
 800ab24:	4a96      	ldr	r2, [pc, #600]	; (800ad80 <ProcessRadioRxDone+0xa4c>)
 800ab26:	2100      	movs	r1, #0
 800ab28:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ab2a:	4a8d      	ldr	r2, [pc, #564]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ab2c:	2382      	movs	r3, #130	; 0x82
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	2100      	movs	r1, #0
 800ab32:	54d1      	strb	r1, [r2, r3]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
 800ab34:	1dfb      	adds	r3, r7, #7
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	0011      	movs	r1, r2
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	f007 fa53 	bl	8011fe8 <LoRaMacSetFCntDown>
 800ab42:	1e03      	subs	r3, r0, #0
 800ab44:	d007      	beq.n	800ab56 <ProcessRadioRxDone+0x822>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ab46:	4b86      	ldr	r3, [pc, #536]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ab48:	4a86      	ldr	r2, [pc, #536]	; (800ad64 <ProcessRadioRxDone+0xa30>)
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ab4e:	f7ff fbc3 	bl	800a2d8 <PrepareRxDoneAbort>
                return;
 800ab52:	46c0      	nop			; (mov r8, r8)
 800ab54:	e101      	b.n	800ad5a <ProcessRadioRxDone+0xa26>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ab56:	4b82      	ldr	r3, [pc, #520]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ab58:	4a8b      	ldr	r2, [pc, #556]	; (800ad88 <ProcessRadioRxDone+0xa54>)
 800ab5a:	5c98      	ldrb	r0, [r3, r2]
 800ab5c:	4b80      	ldr	r3, [pc, #512]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ab5e:	4a8b      	ldr	r2, [pc, #556]	; (800ad8c <ProcessRadioRxDone+0xa58>)
 800ab60:	5c9a      	ldrb	r2, [r3, r2]
 800ab62:	2334      	movs	r3, #52	; 0x34
 800ab64:	18fb      	adds	r3, r7, r3
 800ab66:	7b1b      	ldrb	r3, [r3, #12]
 800ab68:	1c19      	adds	r1, r3, #0
 800ab6a:	f002 f97b 	bl	800ce64 <RemoveMacCommands>

            switch( fType )
 800ab6e:	1dbb      	adds	r3, r7, #6
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d038      	beq.n	800abe8 <ProcessRadioRxDone+0x8b4>
 800ab76:	dc02      	bgt.n	800ab7e <ProcessRadioRxDone+0x84a>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <ProcessRadioRxDone+0x854>
 800ab7c:	e086      	b.n	800ac8c <ProcessRadioRxDone+0x958>
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d052      	beq.n	800ac28 <ProcessRadioRxDone+0x8f4>
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d06a      	beq.n	800ac5c <ProcessRadioRxDone+0x928>
 800ab86:	e081      	b.n	800ac8c <ProcessRadioRxDone+0x958>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800ab88:	2034      	movs	r0, #52	; 0x34
 800ab8a:	183b      	adds	r3, r7, r0
 800ab8c:	7b1b      	ldrb	r3, [r3, #12]
 800ab8e:	071b      	lsls	r3, r3, #28
 800ab90:	0f1b      	lsrs	r3, r3, #28
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	001c      	movs	r4, r3
 800ab96:	4b72      	ldr	r3, [pc, #456]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ab98:	4a7b      	ldr	r2, [pc, #492]	; (800ad88 <ProcessRadioRxDone+0xa54>)
 800ab9a:	5c9b      	ldrb	r3, [r3, r2]
 800ab9c:	2277      	movs	r2, #119	; 0x77
 800ab9e:	18ba      	adds	r2, r7, r2
 800aba0:	2100      	movs	r1, #0
 800aba2:	5651      	ldrsb	r1, [r2, r1]
 800aba4:	0005      	movs	r5, r0
 800aba6:	183a      	adds	r2, r7, r0
 800aba8:	3210      	adds	r2, #16
 800abaa:	0010      	movs	r0, r2
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	000b      	movs	r3, r1
 800abb0:	0022      	movs	r2, r4
 800abb2:	2100      	movs	r1, #0
 800abb4:	f000 ffae 	bl	800bb14 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800abb8:	0028      	movs	r0, r5
 800abba:	183b      	adds	r3, r7, r0
 800abbc:	2220      	movs	r2, #32
 800abbe:	5c99      	ldrb	r1, [r3, r2]
 800abc0:	4b67      	ldr	r3, [pc, #412]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800abc2:	4a73      	ldr	r2, [pc, #460]	; (800ad90 <ProcessRadioRxDone+0xa5c>)
 800abc4:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800abc6:	183b      	adds	r3, r7, r0
 800abc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800abca:	4a65      	ldr	r2, [pc, #404]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800abcc:	2383      	movs	r3, #131	; 0x83
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800abd2:	183b      	adds	r3, r7, r0
 800abd4:	2228      	movs	r2, #40	; 0x28
 800abd6:	5c99      	ldrb	r1, [r3, r2]
 800abd8:	4b61      	ldr	r3, [pc, #388]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800abda:	4a65      	ldr	r2, [pc, #404]	; (800ad70 <ProcessRadioRxDone+0xa3c>)
 800abdc:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800abde:	4b60      	ldr	r3, [pc, #384]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800abe0:	4a6c      	ldr	r2, [pc, #432]	; (800ad94 <ProcessRadioRxDone+0xa60>)
 800abe2:	2101      	movs	r1, #1
 800abe4:	5499      	strb	r1, [r3, r2]
                    break;
 800abe6:	e058      	b.n	800ac9a <ProcessRadioRxDone+0x966>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800abe8:	2034      	movs	r0, #52	; 0x34
 800abea:	183b      	adds	r3, r7, r0
 800abec:	7b1b      	ldrb	r3, [r3, #12]
 800abee:	071b      	lsls	r3, r3, #28
 800abf0:	0f1b      	lsrs	r3, r3, #28
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	001c      	movs	r4, r3
 800abf6:	4b5a      	ldr	r3, [pc, #360]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800abf8:	4a63      	ldr	r2, [pc, #396]	; (800ad88 <ProcessRadioRxDone+0xa54>)
 800abfa:	5c9b      	ldrb	r3, [r3, r2]
 800abfc:	2277      	movs	r2, #119	; 0x77
 800abfe:	18ba      	adds	r2, r7, r2
 800ac00:	2100      	movs	r1, #0
 800ac02:	5651      	ldrsb	r1, [r2, r1]
 800ac04:	0005      	movs	r5, r0
 800ac06:	183a      	adds	r2, r7, r0
 800ac08:	3210      	adds	r2, #16
 800ac0a:	0010      	movs	r0, r2
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	000b      	movs	r3, r1
 800ac10:	0022      	movs	r2, r4
 800ac12:	2100      	movs	r1, #0
 800ac14:	f000 ff7e 	bl	800bb14 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ac18:	0028      	movs	r0, r5
 800ac1a:	183b      	adds	r3, r7, r0
 800ac1c:	2220      	movs	r2, #32
 800ac1e:	5c99      	ldrb	r1, [r3, r2]
 800ac20:	4b4f      	ldr	r3, [pc, #316]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac22:	4a5b      	ldr	r2, [pc, #364]	; (800ad90 <ProcessRadioRxDone+0xa5c>)
 800ac24:	5499      	strb	r1, [r3, r2]
                    break;
 800ac26:	e038      	b.n	800ac9a <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800ac28:	2434      	movs	r4, #52	; 0x34
 800ac2a:	193b      	adds	r3, r7, r4
 800ac2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ac2e:	193b      	adds	r3, r7, r4
 800ac30:	2228      	movs	r2, #40	; 0x28
 800ac32:	5c99      	ldrb	r1, [r3, r2]
 800ac34:	4b4a      	ldr	r3, [pc, #296]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac36:	4a54      	ldr	r2, [pc, #336]	; (800ad88 <ProcessRadioRxDone+0xa54>)
 800ac38:	5c9b      	ldrb	r3, [r3, r2]
 800ac3a:	2277      	movs	r2, #119	; 0x77
 800ac3c:	18ba      	adds	r2, r7, r2
 800ac3e:	7812      	ldrb	r2, [r2, #0]
 800ac40:	b252      	sxtb	r2, r2
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	0013      	movs	r3, r2
 800ac46:	000a      	movs	r2, r1
 800ac48:	2100      	movs	r1, #0
 800ac4a:	f000 ff63 	bl	800bb14 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ac4e:	193b      	adds	r3, r7, r4
 800ac50:	2220      	movs	r2, #32
 800ac52:	5c99      	ldrb	r1, [r3, r2]
 800ac54:	4b42      	ldr	r3, [pc, #264]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac56:	4a4e      	ldr	r2, [pc, #312]	; (800ad90 <ProcessRadioRxDone+0xa5c>)
 800ac58:	5499      	strb	r1, [r3, r2]
                    break;
 800ac5a:	e01e      	b.n	800ac9a <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ac5c:	2034      	movs	r0, #52	; 0x34
 800ac5e:	183b      	adds	r3, r7, r0
 800ac60:	2220      	movs	r2, #32
 800ac62:	5c99      	ldrb	r1, [r3, r2]
 800ac64:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac66:	4a4a      	ldr	r2, [pc, #296]	; (800ad90 <ProcessRadioRxDone+0xa5c>)
 800ac68:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ac6a:	183b      	adds	r3, r7, r0
 800ac6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ac6e:	4a3c      	ldr	r2, [pc, #240]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac70:	2383      	movs	r3, #131	; 0x83
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ac76:	183b      	adds	r3, r7, r0
 800ac78:	2228      	movs	r2, #40	; 0x28
 800ac7a:	5c99      	ldrb	r1, [r3, r2]
 800ac7c:	4b38      	ldr	r3, [pc, #224]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac7e:	4a3c      	ldr	r2, [pc, #240]	; (800ad70 <ProcessRadioRxDone+0xa3c>)
 800ac80:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 800ac82:	4b37      	ldr	r3, [pc, #220]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac84:	4a43      	ldr	r2, [pc, #268]	; (800ad94 <ProcessRadioRxDone+0xa60>)
 800ac86:	2101      	movs	r1, #1
 800ac88:	5499      	strb	r1, [r3, r2]
                    break;
 800ac8a:	e006      	b.n	800ac9a <ProcessRadioRxDone+0x966>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ac8c:	4b34      	ldr	r3, [pc, #208]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac8e:	4a35      	ldr	r2, [pc, #212]	; (800ad64 <ProcessRadioRxDone+0xa30>)
 800ac90:	2101      	movs	r1, #1
 800ac92:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800ac94:	f7ff fb20 	bl	800a2d8 <PrepareRxDoneAbort>
                    break;
 800ac98:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ac9a:	4b31      	ldr	r3, [pc, #196]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ac9c:	4a3e      	ldr	r2, [pc, #248]	; (800ad98 <ProcessRadioRxDone+0xa64>)
 800ac9e:	5c99      	ldrb	r1, [r3, r2]
 800aca0:	2002      	movs	r0, #2
 800aca2:	4301      	orrs	r1, r0
 800aca4:	5499      	strb	r1, [r3, r2]

            break;
 800aca6:	e032      	b.n	800ad0e <ProcessRadioRxDone+0x9da>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
 800aca8:	2476      	movs	r4, #118	; 0x76
 800acaa:	193b      	adds	r3, r7, r4
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800acb0:	18d1      	adds	r1, r2, r3
 800acb2:	257a      	movs	r5, #122	; 0x7a
 800acb4:	197b      	adds	r3, r7, r5
 800acb6:	881a      	ldrh	r2, [r3, #0]
 800acb8:	4b38      	ldr	r3, [pc, #224]	; (800ad9c <ProcessRadioRxDone+0xa68>)
 800acba:	0018      	movs	r0, r3
 800acbc:	f00a fbd4 	bl	8015468 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800acc0:	4a27      	ldr	r2, [pc, #156]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800acc2:	2382      	movs	r3, #130	; 0x82
 800acc4:	00db      	lsls	r3, r3, #3
 800acc6:	2103      	movs	r1, #3
 800acc8:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800acca:	4b25      	ldr	r3, [pc, #148]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800accc:	4a25      	ldr	r2, [pc, #148]	; (800ad64 <ProcessRadioRxDone+0xa30>)
 800acce:	2100      	movs	r1, #0
 800acd0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800acd2:	4a23      	ldr	r2, [pc, #140]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800acd4:	2383      	movs	r3, #131	; 0x83
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	4930      	ldr	r1, [pc, #192]	; (800ad9c <ProcessRadioRxDone+0xa68>)
 800acda:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800acdc:	197b      	adds	r3, r7, r5
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	193b      	adds	r3, r7, r4
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	b2d9      	uxtb	r1, r3
 800acea:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800acec:	4a20      	ldr	r2, [pc, #128]	; (800ad70 <ProcessRadioRxDone+0xa3c>)
 800acee:	5499      	strb	r1, [r3, r2]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800acf0:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800acf2:	4a29      	ldr	r2, [pc, #164]	; (800ad98 <ProcessRadioRxDone+0xa64>)
 800acf4:	5c99      	ldrb	r1, [r3, r2]
 800acf6:	2002      	movs	r0, #2
 800acf8:	4301      	orrs	r1, r0
 800acfa:	5499      	strb	r1, [r3, r2]
            break;
 800acfc:	e007      	b.n	800ad0e <ProcessRadioRxDone+0x9da>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800acfe:	4b18      	ldr	r3, [pc, #96]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ad00:	4a18      	ldr	r2, [pc, #96]	; (800ad64 <ProcessRadioRxDone+0xa30>)
 800ad02:	2101      	movs	r1, #1
 800ad04:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800ad06:	f7ff fae7 	bl	800a2d8 <PrepareRxDoneAbort>
            break;
 800ad0a:	e000      	b.n	800ad0e <ProcessRadioRxDone+0x9da>
            break;
 800ad0c:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 800ad0e:	4a14      	ldr	r2, [pc, #80]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ad10:	238e      	movs	r3, #142	; 0x8e
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	58d3      	ldr	r3, [r2, r3]
 800ad16:	4a22      	ldr	r2, [pc, #136]	; (800ada0 <ProcessRadioRxDone+0xa6c>)
 800ad18:	5c98      	ldrb	r0, [r3, r2]
 800ad1a:	4a11      	ldr	r2, [pc, #68]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ad1c:	238e      	movs	r3, #142	; 0x8e
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	58d3      	ldr	r3, [r2, r3]
 800ad22:	22c8      	movs	r2, #200	; 0xc8
 800ad24:	5c99      	ldrb	r1, [r3, r2]
 800ad26:	4a0e      	ldr	r2, [pc, #56]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ad28:	2386      	movs	r3, #134	; 0x86
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	5cd3      	ldrb	r3, [r2, r3]
 800ad2e:	001a      	movs	r2, r3
 800ad30:	f000 fd26 	bl	800b780 <CheckToDisableAckTimeout>

    if( TimerIsStarted( &MacCtx.AckTimeoutTimer ) == false )
 800ad34:	4b1b      	ldr	r3, [pc, #108]	; (800ada4 <ProcessRadioRxDone+0xa70>)
 800ad36:	0018      	movs	r0, r3
 800ad38:	f00a fb36 	bl	80153a8 <TimerIsStarted>
 800ad3c:	0003      	movs	r3, r0
 800ad3e:	001a      	movs	r2, r3
 800ad40:	2301      	movs	r3, #1
 800ad42:	4053      	eors	r3, r2
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d007      	beq.n	800ad5a <ProcessRadioRxDone+0xa26>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ad4a:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <ProcessRadioRxDone+0xa2c>)
 800ad4c:	4a12      	ldr	r2, [pc, #72]	; (800ad98 <ProcessRadioRxDone+0xa64>)
 800ad4e:	5c99      	ldrb	r1, [r3, r2]
 800ad50:	2010      	movs	r0, #16
 800ad52:	4301      	orrs	r1, r0
 800ad54:	5499      	strb	r1, [r3, r2]
 800ad56:	e000      	b.n	800ad5a <ProcessRadioRxDone+0xa26>
                return;
 800ad58:	46c0      	nop			; (mov r8, r8)
    }
}
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	b023      	add	sp, #140	; 0x8c
 800ad5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad60:	20000598 	.word	0x20000598
 800ad64:	00000411 	.word	0x00000411
 800ad68:	00000412 	.word	0x00000412
 800ad6c:	00000415 	.word	0x00000415
 800ad70:	0000041c 	.word	0x0000041c
 800ad74:	00000424 	.word	0x00000424
 800ad78:	00000422 	.word	0x00000422
 800ad7c:	0000042d 	.word	0x0000042d
 800ad80:	0000021a 	.word	0x0000021a
 800ad84:	00000222 	.word	0x00000222
 800ad88:	00000421 	.word	0x00000421
 800ad8c:	0000042c 	.word	0x0000042c
 800ad90:	00000413 	.word	0x00000413
 800ad94:	0000041d 	.word	0x0000041d
 800ad98:	0000046d 	.word	0x0000046d
 800ad9c:	200007d8 	.word	0x200007d8
 800ada0:	00000219 	.word	0x00000219
 800ada4:	2000098c 	.word	0x2000098c

0800ada8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800adac:	4a0e      	ldr	r2, [pc, #56]	; (800ade8 <ProcessRadioTxTimeout+0x40>)
 800adae:	238e      	movs	r3, #142	; 0x8e
 800adb0:	00db      	lsls	r3, r3, #3
 800adb2:	58d3      	ldr	r3, [r2, r3]
 800adb4:	22c8      	movs	r2, #200	; 0xc8
 800adb6:	5c9b      	ldrb	r3, [r3, r2]
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d003      	beq.n	800adc4 <ProcessRadioTxTimeout+0x1c>
    {
        Radio.Sleep( );
 800adbc:	4b0b      	ldr	r3, [pc, #44]	; (800adec <ProcessRadioTxTimeout+0x44>)
 800adbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc0:	4798      	blx	r3
 800adc2:	e001      	b.n	800adc8 <ProcessRadioTxTimeout+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 800adc4:	f002 f95e 	bl	800d084 <OpenContinuousRx2Window>
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800adc8:	4b07      	ldr	r3, [pc, #28]	; (800ade8 <ProcessRadioTxTimeout+0x40>)
 800adca:	4a09      	ldr	r2, [pc, #36]	; (800adf0 <ProcessRadioTxTimeout+0x48>)
 800adcc:	2102      	movs	r1, #2
 800adce:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800add0:	2002      	movs	r0, #2
 800add2:	f005 fa87 	bl	80102e4 <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800add6:	4b04      	ldr	r3, [pc, #16]	; (800ade8 <ProcessRadioTxTimeout+0x40>)
 800add8:	4a06      	ldr	r2, [pc, #24]	; (800adf4 <ProcessRadioTxTimeout+0x4c>)
 800adda:	5c99      	ldrb	r1, [r3, r2]
 800addc:	2010      	movs	r0, #16
 800adde:	4301      	orrs	r1, r0
 800ade0:	5499      	strb	r1, [r3, r2]
}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	20000598 	.word	0x20000598
 800adec:	08020a5c 	.word	0x08020a5c
 800adf0:	0000042d 	.word	0x0000042d
 800adf4:	0000046d 	.word	0x0000046d

0800adf8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	0002      	movs	r2, r0
 800ae00:	1dfb      	adds	r3, r7, #7
 800ae02:	701a      	strb	r2, [r3, #0]
 800ae04:	1dbb      	adds	r3, r7, #6
 800ae06:	1c0a      	adds	r2, r1, #0
 800ae08:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800ae0a:	230f      	movs	r3, #15
 800ae0c:	18fb      	adds	r3, r7, r3
 800ae0e:	2200      	movs	r2, #0
 800ae10:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800ae12:	4a55      	ldr	r2, [pc, #340]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800ae14:	238e      	movs	r3, #142	; 0x8e
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	58d3      	ldr	r3, [r2, r3]
 800ae1a:	22c8      	movs	r2, #200	; 0xc8
 800ae1c:	5c9b      	ldrb	r3, [r3, r2]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d002      	beq.n	800ae28 <HandleRadioRxErrorTimeout+0x30>
    {
        Radio.Sleep( );
 800ae22:	4b52      	ldr	r3, [pc, #328]	; (800af6c <HandleRadioRxErrorTimeout+0x174>)
 800ae24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae26:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ae28:	f004 fdc1 	bl	800f9ae <LoRaMacClassBIsBeaconExpected>
 800ae2c:	1e03      	subs	r3, r0, #0
 800ae2e:	d009      	beq.n	800ae44 <HandleRadioRxErrorTimeout+0x4c>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ae30:	2002      	movs	r0, #2
 800ae32:	f004 fd74 	bl	800f91e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ae36:	2000      	movs	r0, #0
 800ae38:	f004 fd95 	bl	800f966 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ae3c:	230f      	movs	r3, #15
 800ae3e:	18fb      	adds	r3, r7, r3
 800ae40:	2201      	movs	r2, #1
 800ae42:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800ae44:	4a48      	ldr	r2, [pc, #288]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800ae46:	238e      	movs	r3, #142	; 0x8e
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	58d3      	ldr	r3, [r2, r3]
 800ae4c:	22c8      	movs	r2, #200	; 0xc8
 800ae4e:	5c9b      	ldrb	r3, [r3, r2]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d11b      	bne.n	800ae8c <HandleRadioRxErrorTimeout+0x94>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ae54:	f004 fdb1 	bl	800f9ba <LoRaMacClassBIsPingExpected>
 800ae58:	1e03      	subs	r3, r0, #0
 800ae5a:	d009      	beq.n	800ae70 <HandleRadioRxErrorTimeout+0x78>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f004 fd68 	bl	800f932 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ae62:	2000      	movs	r0, #0
 800ae64:	f004 fd87 	bl	800f976 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ae68:	230f      	movs	r3, #15
 800ae6a:	18fb      	adds	r3, r7, r3
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ae70:	f004 fda9 	bl	800f9c6 <LoRaMacClassBIsMulticastExpected>
 800ae74:	1e03      	subs	r3, r0, #0
 800ae76:	d009      	beq.n	800ae8c <HandleRadioRxErrorTimeout+0x94>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ae78:	2000      	movs	r0, #0
 800ae7a:	f004 fd64 	bl	800f946 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ae7e:	2000      	movs	r0, #0
 800ae80:	f004 fd81 	bl	800f986 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800ae84:	230f      	movs	r3, #15
 800ae86:	18fb      	adds	r3, r7, r3
 800ae88:	2201      	movs	r2, #1
 800ae8a:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800ae8c:	230f      	movs	r3, #15
 800ae8e:	18fb      	adds	r3, r7, r3
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2201      	movs	r2, #1
 800ae94:	4053      	eors	r3, r2
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d057      	beq.n	800af4c <HandleRadioRxErrorTimeout+0x154>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ae9c:	4b32      	ldr	r3, [pc, #200]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800ae9e:	4a34      	ldr	r2, [pc, #208]	; (800af70 <HandleRadioRxErrorTimeout+0x178>)
 800aea0:	5c9b      	ldrb	r3, [r3, r2]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d132      	bne.n	800af0c <HandleRadioRxErrorTimeout+0x114>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800aea6:	4a30      	ldr	r2, [pc, #192]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800aea8:	238e      	movs	r3, #142	; 0x8e
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	58d3      	ldr	r3, [r2, r3]
 800aeae:	4a31      	ldr	r2, [pc, #196]	; (800af74 <HandleRadioRxErrorTimeout+0x17c>)
 800aeb0:	5c9b      	ldrb	r3, [r3, r2]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d004      	beq.n	800aec0 <HandleRadioRxErrorTimeout+0xc8>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800aeb6:	4b2c      	ldr	r3, [pc, #176]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800aeb8:	1dfa      	adds	r2, r7, #7
 800aeba:	492f      	ldr	r1, [pc, #188]	; (800af78 <HandleRadioRxErrorTimeout+0x180>)
 800aebc:	7812      	ldrb	r2, [r2, #0]
 800aebe:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800aec0:	1dfb      	adds	r3, r7, #7
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	0018      	movs	r0, r3
 800aec6:	f005 fa0d 	bl	80102e4 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800aeca:	4a27      	ldr	r2, [pc, #156]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800aecc:	238e      	movs	r3, #142	; 0x8e
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	58d3      	ldr	r3, [r2, r3]
 800aed2:	22c8      	movs	r2, #200	; 0xc8
 800aed4:	5c9b      	ldrb	r3, [r3, r2]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d038      	beq.n	800af4c <HandleRadioRxErrorTimeout+0x154>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800aeda:	4a23      	ldr	r2, [pc, #140]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800aedc:	23d0      	movs	r3, #208	; 0xd0
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	58d3      	ldr	r3, [r2, r3]
 800aee2:	0018      	movs	r0, r3
 800aee4:	f00a fa73 	bl	80153ce <TimerGetElapsedTime>
 800aee8:	0001      	movs	r1, r0
 800aeea:	4a1f      	ldr	r2, [pc, #124]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800aeec:	23f2      	movs	r3, #242	; 0xf2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	58d3      	ldr	r3, [r2, r3]
 800aef2:	4299      	cmp	r1, r3
 800aef4:	d32a      	bcc.n	800af4c <HandleRadioRxErrorTimeout+0x154>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
 800aef6:	4b21      	ldr	r3, [pc, #132]	; (800af7c <HandleRadioRxErrorTimeout+0x184>)
 800aef8:	0018      	movs	r0, r3
 800aefa:	f00a fa25 	bl	8015348 <TimerStop>
                    MacCtx.MacFlags.Bits.MacDone = 1;
 800aefe:	4b1a      	ldr	r3, [pc, #104]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800af00:	4a1f      	ldr	r2, [pc, #124]	; (800af80 <HandleRadioRxErrorTimeout+0x188>)
 800af02:	5c99      	ldrb	r1, [r3, r2]
 800af04:	2010      	movs	r0, #16
 800af06:	4301      	orrs	r1, r0
 800af08:	5499      	strb	r1, [r3, r2]
 800af0a:	e01f      	b.n	800af4c <HandleRadioRxErrorTimeout+0x154>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 800af0c:	4a16      	ldr	r2, [pc, #88]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800af0e:	238e      	movs	r3, #142	; 0x8e
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	58d3      	ldr	r3, [r2, r3]
 800af14:	4a17      	ldr	r2, [pc, #92]	; (800af74 <HandleRadioRxErrorTimeout+0x17c>)
 800af16:	5c9b      	ldrb	r3, [r3, r2]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d004      	beq.n	800af26 <HandleRadioRxErrorTimeout+0x12e>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800af1c:	4b12      	ldr	r3, [pc, #72]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800af1e:	1dba      	adds	r2, r7, #6
 800af20:	4915      	ldr	r1, [pc, #84]	; (800af78 <HandleRadioRxErrorTimeout+0x180>)
 800af22:	7812      	ldrb	r2, [r2, #0]
 800af24:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800af26:	1dbb      	adds	r3, r7, #6
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	0018      	movs	r0, r3
 800af2c:	f005 f9da 	bl	80102e4 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800af30:	4a0d      	ldr	r2, [pc, #52]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800af32:	238e      	movs	r3, #142	; 0x8e
 800af34:	00db      	lsls	r3, r3, #3
 800af36:	58d3      	ldr	r3, [r2, r3]
 800af38:	22c8      	movs	r2, #200	; 0xc8
 800af3a:	5c9b      	ldrb	r3, [r3, r2]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d005      	beq.n	800af4c <HandleRadioRxErrorTimeout+0x154>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800af40:	4b09      	ldr	r3, [pc, #36]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800af42:	4a0f      	ldr	r2, [pc, #60]	; (800af80 <HandleRadioRxErrorTimeout+0x188>)
 800af44:	5c99      	ldrb	r1, [r3, r2]
 800af46:	2010      	movs	r0, #16
 800af48:	4301      	orrs	r1, r0
 800af4a:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800af4c:	4a06      	ldr	r2, [pc, #24]	; (800af68 <HandleRadioRxErrorTimeout+0x170>)
 800af4e:	238e      	movs	r3, #142	; 0x8e
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	58d3      	ldr	r3, [r2, r3]
 800af54:	22c8      	movs	r2, #200	; 0xc8
 800af56:	5c9b      	ldrb	r3, [r3, r2]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d101      	bne.n	800af60 <HandleRadioRxErrorTimeout+0x168>
    {
        OpenContinuousRx2Window( );
 800af5c:	f002 f892 	bl	800d084 <OpenContinuousRx2Window>
    }
}
 800af60:	46c0      	nop			; (mov r8, r8)
 800af62:	46bd      	mov	sp, r7
 800af64:	b004      	add	sp, #16
 800af66:	bd80      	pop	{r7, pc}
 800af68:	20000598 	.word	0x20000598
 800af6c:	08020a5c 	.word	0x08020a5c
 800af70:	0000046c 	.word	0x0000046c
 800af74:	00000219 	.word	0x00000219
 800af78:	0000042d 	.word	0x0000042d
 800af7c:	20000944 	.word	0x20000944
 800af80:	0000046d 	.word	0x0000046d

0800af84 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800af88:	2106      	movs	r1, #6
 800af8a:	2005      	movs	r0, #5
 800af8c:	f7ff ff34 	bl	800adf8 <HandleRadioRxErrorTimeout>
}
 800af90:	46c0      	nop			; (mov r8, r8)
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800af96:	b580      	push	{r7, lr}
 800af98:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800af9a:	2104      	movs	r1, #4
 800af9c:	2003      	movs	r0, #3
 800af9e:	f7ff ff2b 	bl	800adf8 <HandleRadioRxErrorTimeout>
}
 800afa2:	46c0      	nop			; (mov r8, r8)
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800afae:	f012 fe5b 	bl	801dc68 <itsdk_enterCriticalSection>
    events = LoRaMacRadioEvents;
 800afb2:	4b1e      	ldr	r3, [pc, #120]	; (800b02c <LoRaMacHandleIrqEvents+0x84>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
 800afb8:	4b1c      	ldr	r3, [pc, #112]	; (800b02c <LoRaMacHandleIrqEvents+0x84>)
 800afba:	2200      	movs	r2, #0
 800afbc:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 800afbe:	f012 fe67 	bl	801dc90 <itsdk_leaveCriticalSection>

    if( events.Value != 0 )
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d02c      	beq.n	800b022 <LoRaMacHandleIrqEvents+0x7a>
    {
        if( events.Events.TxDone == 1 )
 800afc8:	1d3b      	adds	r3, r7, #4
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2210      	movs	r2, #16
 800afce:	4013      	ands	r3, r2
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <LoRaMacHandleIrqEvents+0x32>
        {
            ProcessRadioTxDone( );
 800afd6:	f7ff f8af 	bl	800a138 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800afda:	1d3b      	adds	r3, r7, #4
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2208      	movs	r2, #8
 800afe0:	4013      	ands	r3, r2
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioRxDone( );
 800afe8:	f7ff f9a4 	bl	800a334 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800afec:	1d3b      	adds	r3, r7, #4
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2204      	movs	r2, #4
 800aff2:	4013      	ands	r3, r2
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioTxTimeout( );
 800affa:	f7ff fed5 	bl	800ada8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800affe:	1d3b      	adds	r3, r7, #4
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	2202      	movs	r2, #2
 800b004:	4013      	ands	r3, r2
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioRxError( );
 800b00c:	f7ff ffba 	bl	800af84 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800b010:	1d3b      	adds	r3, r7, #4
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2201      	movs	r2, #1
 800b016:	4013      	ands	r3, r2
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxTimeout( );
 800b01e:	f7ff ffba 	bl	800af96 <ProcessRadioRxTimeout>
        }
    }
}
 800b022:	46c0      	nop			; (mov r8, r8)
 800b024:	46bd      	mov	sp, r7
 800b026:	b002      	add	sp, #8
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	46c0      	nop			; (mov r8, r8)
 800b02c:	20000c38 	.word	0x20000c38

0800b030 <LoRaMacIsBusy>:

static LoRaMacBoolean_t LoRaMacIsBusy( void )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b034:	4a08      	ldr	r2, [pc, #32]	; (800b058 <LoRaMacIsBusy+0x28>)
 800b036:	23d5      	movs	r3, #213	; 0xd5
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	58d3      	ldr	r3, [r2, r3]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d106      	bne.n	800b04e <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b040:	4b05      	ldr	r3, [pc, #20]	; (800b058 <LoRaMacIsBusy+0x28>)
 800b042:	4a06      	ldr	r2, [pc, #24]	; (800b05c <LoRaMacIsBusy+0x2c>)
 800b044:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b046:	2b01      	cmp	r3, #1
 800b048:	d101      	bne.n	800b04e <LoRaMacIsBusy+0x1e>
    {
        return LORAMAC_FALSE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	e000      	b.n	800b050 <LoRaMacIsBusy+0x20>
    }
    return LORAMAC_TRUE;
 800b04e:	2301      	movs	r3, #1
}
 800b050:	0018      	movs	r0, r3
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	46c0      	nop			; (mov r8, r8)
 800b058:	20000598 	.word	0x20000598
 800b05c:	0000046e 	.word	0x0000046e

0800b060 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	0002      	movs	r2, r0
 800b068:	1dfb      	adds	r3, r7, #7
 800b06a:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800b06c:	4b04      	ldr	r3, [pc, #16]	; (800b080 <LoRaMacEnableRequests+0x20>)
 800b06e:	1dfa      	adds	r2, r7, #7
 800b070:	4904      	ldr	r1, [pc, #16]	; (800b084 <LoRaMacEnableRequests+0x24>)
 800b072:	7812      	ldrb	r2, [r2, #0]
 800b074:	545a      	strb	r2, [r3, r1]
}
 800b076:	46c0      	nop			; (mov r8, r8)
 800b078:	46bd      	mov	sp, r7
 800b07a:	b002      	add	sp, #8
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	46c0      	nop			; (mov r8, r8)
 800b080:	20000598 	.word	0x20000598
 800b084:	0000046e 	.word	0x0000046e

0800b088 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800b08e:	1d3b      	adds	r3, r7, #4
 800b090:	4a2c      	ldr	r2, [pc, #176]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b092:	492d      	ldr	r1, [pc, #180]	; (800b148 <LoRaMacHandleRequestEvents+0xc0>)
 800b094:	5c52      	ldrb	r2, [r2, r1]
 800b096:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800b098:	4a2a      	ldr	r2, [pc, #168]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b09a:	23d5      	movs	r3, #213	; 0xd5
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	58d3      	ldr	r3, [r2, r3]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d14a      	bne.n	800b13a <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b0a4:	4b27      	ldr	r3, [pc, #156]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b0a6:	4a28      	ldr	r2, [pc, #160]	; (800b148 <LoRaMacHandleRequestEvents+0xc0>)
 800b0a8:	5c9b      	ldrb	r3, [r3, r2]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b0b4:	4b23      	ldr	r3, [pc, #140]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b0b6:	4a24      	ldr	r2, [pc, #144]	; (800b148 <LoRaMacHandleRequestEvents+0xc0>)
 800b0b8:	5c99      	ldrb	r1, [r3, r2]
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	4381      	bics	r1, r0
 800b0be:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b0c0:	4b20      	ldr	r3, [pc, #128]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b0c2:	4a21      	ldr	r2, [pc, #132]	; (800b148 <LoRaMacHandleRequestEvents+0xc0>)
 800b0c4:	5c9b      	ldrb	r3, [r3, r2]
 800b0c6:	2204      	movs	r2, #4
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d005      	beq.n	800b0dc <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b0d0:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b0d2:	4a1d      	ldr	r2, [pc, #116]	; (800b148 <LoRaMacHandleRequestEvents+0xc0>)
 800b0d4:	5c99      	ldrb	r1, [r3, r2]
 800b0d6:	2004      	movs	r0, #4
 800b0d8:	4381      	bics	r1, r0
 800b0da:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b0dc:	2001      	movs	r0, #1
 800b0de:	f7ff ffbf 	bl	800b060 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800b0e2:	1d3b      	adds	r3, r7, #4
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d007      	beq.n	800b100 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b0f0:	4a14      	ldr	r2, [pc, #80]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b0f2:	23d6      	movs	r3, #214	; 0xd6
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	58d3      	ldr	r3, [r2, r3]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a14      	ldr	r2, [pc, #80]	; (800b14c <LoRaMacHandleRequestEvents+0xc4>)
 800b0fc:	0010      	movs	r0, r2
 800b0fe:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800b100:	1d3b      	adds	r3, r7, #4
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2204      	movs	r2, #4
 800b106:	4013      	ands	r3, r2
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00d      	beq.n	800b12a <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b10e:	4b10      	ldr	r3, [pc, #64]	; (800b150 <LoRaMacHandleRequestEvents+0xc8>)
 800b110:	0018      	movs	r0, r3
 800b112:	f005 f93d 	bl	8010390 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b116:	f005 f99d 	bl	8010454 <LoRaMacConfirmQueueGetCnt>
 800b11a:	1e03      	subs	r3, r0, #0
 800b11c:	d005      	beq.n	800b12a <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b11e:	4b09      	ldr	r3, [pc, #36]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b120:	4a09      	ldr	r2, [pc, #36]	; (800b148 <LoRaMacHandleRequestEvents+0xc0>)
 800b122:	5c99      	ldrb	r1, [r3, r2]
 800b124:	2004      	movs	r0, #4
 800b126:	4301      	orrs	r1, r0
 800b128:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800b12a:	f004 fc67 	bl	800f9fc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b12e:	4b05      	ldr	r3, [pc, #20]	; (800b144 <LoRaMacHandleRequestEvents+0xbc>)
 800b130:	4a05      	ldr	r2, [pc, #20]	; (800b148 <LoRaMacHandleRequestEvents+0xc0>)
 800b132:	5c99      	ldrb	r1, [r3, r2]
 800b134:	2010      	movs	r0, #16
 800b136:	4381      	bics	r1, r0
 800b138:	5499      	strb	r1, [r3, r2]
    }
}
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	46bd      	mov	sp, r7
 800b13e:	b002      	add	sp, #8
 800b140:	bd80      	pop	{r7, pc}
 800b142:	46c0      	nop			; (mov r8, r8)
 800b144:	20000598 	.word	0x20000598
 800b148:	0000046d 	.word	0x0000046d
 800b14c:	200009c4 	.word	0x200009c4
 800b150:	200009d8 	.word	0x200009d8

0800b154 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b15a:	4b2d      	ldr	r3, [pc, #180]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b15c:	4a2d      	ldr	r2, [pc, #180]	; (800b214 <LoRaMacHandleIndicationEvents+0xc0>)
 800b15e:	5c9b      	ldrb	r3, [r3, r2]
 800b160:	2208      	movs	r2, #8
 800b162:	4013      	ands	r3, r2
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00d      	beq.n	800b186 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800b16a:	4a29      	ldr	r2, [pc, #164]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b16c:	23d6      	movs	r3, #214	; 0xd6
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	58d3      	ldr	r3, [r2, r3]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	4a28      	ldr	r2, [pc, #160]	; (800b218 <LoRaMacHandleIndicationEvents+0xc4>)
 800b176:	0010      	movs	r0, r2
 800b178:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b17a:	4b25      	ldr	r3, [pc, #148]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b17c:	4a25      	ldr	r2, [pc, #148]	; (800b214 <LoRaMacHandleIndicationEvents+0xc0>)
 800b17e:	5c99      	ldrb	r1, [r3, r2]
 800b180:	2008      	movs	r0, #8
 800b182:	4381      	bics	r1, r0
 800b184:	5499      	strb	r1, [r3, r2]
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800b186:	4a22      	ldr	r2, [pc, #136]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b188:	23d5      	movs	r3, #213	; 0xd5
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	58d3      	ldr	r3, [r2, r3]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d114      	bne.n	800b1bc <LoRaMacHandleIndicationEvents+0x68>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800b192:	1dfb      	adds	r3, r7, #7
 800b194:	2200      	movs	r2, #0
 800b196:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800b198:	1dfb      	adds	r3, r7, #7
 800b19a:	0018      	movs	r0, r3
 800b19c:	f004 ff48 	bl	8010030 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800b1a0:	1dfb      	adds	r3, r7, #7
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d009      	beq.n	800b1bc <LoRaMacHandleIndicationEvents+0x68>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800b1a8:	f000 fc9e 	bl	800bae8 <SetMlmeScheduleUplinkIndication>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800b1ac:	4a18      	ldr	r2, [pc, #96]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b1ae:	23d6      	movs	r3, #214	; 0xd6
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	58d3      	ldr	r3, [r2, r3]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	4a18      	ldr	r2, [pc, #96]	; (800b218 <LoRaMacHandleIndicationEvents+0xc4>)
 800b1b8:	0010      	movs	r0, r2
 800b1ba:	4798      	blx	r3
        }
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b1bc:	4b14      	ldr	r3, [pc, #80]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b1be:	4a15      	ldr	r2, [pc, #84]	; (800b214 <LoRaMacHandleIndicationEvents+0xc0>)
 800b1c0:	5c9b      	ldrb	r3, [r3, r2]
 800b1c2:	2202      	movs	r2, #2
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d01d      	beq.n	800b208 <LoRaMacHandleIndicationEvents+0xb4>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b1cc:	4b10      	ldr	r3, [pc, #64]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b1ce:	4a11      	ldr	r2, [pc, #68]	; (800b214 <LoRaMacHandleIndicationEvents+0xc0>)
 800b1d0:	5c99      	ldrb	r1, [r3, r2]
 800b1d2:	2002      	movs	r0, #2
 800b1d4:	4381      	bics	r1, r0
 800b1d6:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b1d8:	4a0d      	ldr	r2, [pc, #52]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b1da:	238e      	movs	r3, #142	; 0x8e
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	58d3      	ldr	r3, [r2, r3]
 800b1e0:	22c8      	movs	r2, #200	; 0xc8
 800b1e2:	5c9b      	ldrb	r3, [r3, r2]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d107      	bne.n	800b1f8 <LoRaMacHandleIndicationEvents+0xa4>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
 800b1e8:	4a09      	ldr	r2, [pc, #36]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b1ea:	23d5      	movs	r3, #213	; 0xd5
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	58d3      	ldr	r3, [r2, r3]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <LoRaMacHandleIndicationEvents+0xa4>
            {
                OpenContinuousRx2Window( );
 800b1f4:	f001 ff46 	bl	800d084 <OpenContinuousRx2Window>
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800b1f8:	4a05      	ldr	r2, [pc, #20]	; (800b210 <LoRaMacHandleIndicationEvents+0xbc>)
 800b1fa:	23d6      	movs	r3, #214	; 0xd6
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	58d3      	ldr	r3, [r2, r3]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	4a06      	ldr	r2, [pc, #24]	; (800b21c <LoRaMacHandleIndicationEvents+0xc8>)
 800b204:	0010      	movs	r0, r2
 800b206:	4798      	blx	r3
    }
}
 800b208:	46c0      	nop			; (mov r8, r8)
 800b20a:	46bd      	mov	sp, r7
 800b20c:	b002      	add	sp, #8
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20000598 	.word	0x20000598
 800b214:	0000046d 	.word	0x0000046d
 800b218:	200009ec 	.word	0x200009ec
 800b21c:	200009a8 	.word	0x200009a8

0800b220 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800b220:	b590      	push	{r4, r7, lr}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b226:	4b36      	ldr	r3, [pc, #216]	; (800b300 <LoRaMacHandleMcpsRequest+0xe0>)
 800b228:	4a36      	ldr	r2, [pc, #216]	; (800b304 <LoRaMacHandleMcpsRequest+0xe4>)
 800b22a:	5c9b      	ldrb	r3, [r3, r2]
 800b22c:	2201      	movs	r2, #1
 800b22e:	4013      	ands	r3, r2
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d05f      	beq.n	800b2f6 <LoRaMacHandleMcpsRequest+0xd6>
    {
        bool stopRetransmission = false;
 800b236:	1dfb      	adds	r3, r7, #7
 800b238:	2200      	movs	r2, #0
 800b23a:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800b23c:	1dbb      	adds	r3, r7, #6
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b242:	4b2f      	ldr	r3, [pc, #188]	; (800b300 <LoRaMacHandleMcpsRequest+0xe0>)
 800b244:	4a30      	ldr	r2, [pc, #192]	; (800b308 <LoRaMacHandleMcpsRequest+0xe8>)
 800b246:	5c9b      	ldrb	r3, [r3, r2]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800b24c:	4b2c      	ldr	r3, [pc, #176]	; (800b300 <LoRaMacHandleMcpsRequest+0xe0>)
 800b24e:	4a2e      	ldr	r2, [pc, #184]	; (800b308 <LoRaMacHandleMcpsRequest+0xe8>)
 800b250:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b252:	2b03      	cmp	r3, #3
 800b254:	d105      	bne.n	800b262 <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b256:	1dfc      	adds	r4, r7, #7
 800b258:	f002 fae2 	bl	800d820 <CheckRetransUnconfirmedUplink>
 800b25c:	0003      	movs	r3, r0
 800b25e:	7023      	strb	r3, [r4, #0]
 800b260:	e02a      	b.n	800b2b8 <LoRaMacHandleMcpsRequest+0x98>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b262:	4b27      	ldr	r3, [pc, #156]	; (800b300 <LoRaMacHandleMcpsRequest+0xe0>)
 800b264:	4a28      	ldr	r2, [pc, #160]	; (800b308 <LoRaMacHandleMcpsRequest+0xe8>)
 800b266:	5c9b      	ldrb	r3, [r3, r2]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d125      	bne.n	800b2b8 <LoRaMacHandleMcpsRequest+0x98>
        {
            if( MacCtx.NvmCtx->AckTimeoutRetry == true )
 800b26c:	4a24      	ldr	r2, [pc, #144]	; (800b300 <LoRaMacHandleMcpsRequest+0xe0>)
 800b26e:	238e      	movs	r3, #142	; 0x8e
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	58d2      	ldr	r2, [r2, r3]
 800b274:	2386      	movs	r3, #134	; 0x86
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	5cd3      	ldrb	r3, [r2, r3]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d019      	beq.n	800b2b2 <LoRaMacHandleMcpsRequest+0x92>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b27e:	1dfc      	adds	r4, r7, #7
 800b280:	f002 fb04 	bl	800d88c <CheckRetransConfirmedUplink>
 800b284:	0003      	movs	r3, r0
 800b286:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800b288:	4a1d      	ldr	r2, [pc, #116]	; (800b300 <LoRaMacHandleMcpsRequest+0xe0>)
 800b28a:	238e      	movs	r3, #142	; 0x8e
 800b28c:	00db      	lsls	r3, r3, #3
 800b28e:	58d3      	ldr	r3, [r2, r3]
 800b290:	4a1e      	ldr	r2, [pc, #120]	; (800b30c <LoRaMacHandleMcpsRequest+0xec>)
 800b292:	5c9b      	ldrb	r3, [r3, r2]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10f      	bne.n	800b2b8 <LoRaMacHandleMcpsRequest+0x98>
                {
                    if( stopRetransmission == false )
 800b298:	1dfb      	adds	r3, r7, #7
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2201      	movs	r2, #1
 800b29e:	4053      	eors	r3, r2
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <LoRaMacHandleMcpsRequest+0x8c>
                    {
                        AckTimeoutRetriesProcess( );
 800b2a6:	f002 fb7b 	bl	800d9a0 <AckTimeoutRetriesProcess>
 800b2aa:	e005      	b.n	800b2b8 <LoRaMacHandleMcpsRequest+0x98>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800b2ac:	f002 fbdc 	bl	800da68 <AckTimeoutRetriesFinalize>
 800b2b0:	e002      	b.n	800b2b8 <LoRaMacHandleMcpsRequest+0x98>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800b2b2:	1dbb      	adds	r3, r7, #6
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800b2b8:	1dfb      	adds	r3, r7, #7
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <LoRaMacHandleMcpsRequest+0xa6>
        {// Stop retransmission
            StopRetransmission( );
 800b2c0:	f002 fb12 	bl	800d8e8 <StopRetransmission>
            MacCtx.NvmCtx->AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800b2c4:	e017      	b.n	800b2f6 <LoRaMacHandleMcpsRequest+0xd6>
        else if( waitForRetransmission == false )
 800b2c6:	1dbb      	adds	r3, r7, #6
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	4053      	eors	r3, r2
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d010      	beq.n	800b2f6 <LoRaMacHandleMcpsRequest+0xd6>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	; (800b300 <LoRaMacHandleMcpsRequest+0xe0>)
 800b2d6:	4a0b      	ldr	r2, [pc, #44]	; (800b304 <LoRaMacHandleMcpsRequest+0xe4>)
 800b2d8:	5c99      	ldrb	r1, [r3, r2]
 800b2da:	2010      	movs	r0, #16
 800b2dc:	4381      	bics	r1, r0
 800b2de:	5499      	strb	r1, [r3, r2]
            MacCtx.NvmCtx->AckTimeoutRetry = false;
 800b2e0:	4a07      	ldr	r2, [pc, #28]	; (800b300 <LoRaMacHandleMcpsRequest+0xe0>)
 800b2e2:	238e      	movs	r3, #142	; 0x8e
 800b2e4:	00db      	lsls	r3, r3, #3
 800b2e6:	58d2      	ldr	r2, [r2, r3]
 800b2e8:	2386      	movs	r3, #134	; 0x86
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	54d1      	strb	r1, [r2, r3]
            OnTxDelayedTimerEvent( NULL );
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	f000 f90b 	bl	800b50c <OnTxDelayedTimerEvent>
}
 800b2f6:	46c0      	nop			; (mov r8, r8)
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	b003      	add	sp, #12
 800b2fc:	bd90      	pop	{r4, r7, pc}
 800b2fe:	46c0      	nop			; (mov r8, r8)
 800b300:	20000598 	.word	0x20000598
 800b304:	0000046d 	.word	0x0000046d
 800b308:	0000042c 	.word	0x0000042c
 800b30c:	00000222 	.word	0x00000222

0800b310 <LoRaMacHandleJoinRequest>:

static void LoRaMacHandleJoinRequest( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
    // Handle join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800b314:	4b14      	ldr	r3, [pc, #80]	; (800b368 <LoRaMacHandleJoinRequest+0x58>)
 800b316:	4a15      	ldr	r2, [pc, #84]	; (800b36c <LoRaMacHandleJoinRequest+0x5c>)
 800b318:	5c9b      	ldrb	r3, [r3, r2]
 800b31a:	2204      	movs	r2, #4
 800b31c:	4013      	ands	r3, r2
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d01e      	beq.n	800b362 <LoRaMacHandleJoinRequest+0x52>
 800b324:	2000      	movs	r0, #0
 800b326:	f005 f819 	bl	801035c <LoRaMacConfirmQueueIsCmdActive>
 800b32a:	1e03      	subs	r3, r0, #0
 800b32c:	d019      	beq.n	800b362 <LoRaMacHandleJoinRequest+0x52>
    {
        if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800b32e:	2000      	movs	r0, #0
 800b330:	f004 ffb2 	bl	8010298 <LoRaMacConfirmQueueGetStatus>
 800b334:	1e03      	subs	r3, r0, #0
 800b336:	d109      	bne.n	800b34c <LoRaMacHandleJoinRequest+0x3c>
        {// Node joined successfully
            LoRaMacResetFCnts( );
 800b338:	f006 feb8 	bl	80120ac <LoRaMacResetFCnts>
            MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800b33c:	4a0a      	ldr	r2, [pc, #40]	; (800b368 <LoRaMacHandleJoinRequest+0x58>)
 800b33e:	238e      	movs	r3, #142	; 0x8e
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	58d2      	ldr	r2, [r2, r3]
 800b344:	2388      	movs	r3, #136	; 0x88
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	2100      	movs	r1, #0
 800b34a:	54d1      	strb	r1, [r2, r3]
        }
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b34c:	4a06      	ldr	r2, [pc, #24]	; (800b368 <LoRaMacHandleJoinRequest+0x58>)
 800b34e:	23d5      	movs	r3, #213	; 0xd5
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	58d3      	ldr	r3, [r2, r3]
 800b354:	2202      	movs	r2, #2
 800b356:	4393      	bics	r3, r2
 800b358:	0019      	movs	r1, r3
 800b35a:	4a03      	ldr	r2, [pc, #12]	; (800b368 <LoRaMacHandleJoinRequest+0x58>)
 800b35c:	23d5      	movs	r3, #213	; 0xd5
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	50d1      	str	r1, [r2, r3]
    }
}
 800b362:	46c0      	nop			; (mov r8, r8)
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20000598 	.word	0x20000598
 800b36c:	0000046d 	.word	0x0000046d

0800b370 <LoRaMacCheckForTxTimeout>:

static uint8_t LoRaMacCheckForTxTimeout( void )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800b374:	f004 ffe8 	bl	8010348 <LoRaMacConfirmQueueGetStatusCmn>
 800b378:	0003      	movs	r3, r0
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d004      	beq.n	800b388 <LoRaMacCheckForTxTimeout+0x18>
        ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 800b37e:	4b14      	ldr	r3, [pc, #80]	; (800b3d0 <LoRaMacCheckForTxTimeout+0x60>)
 800b380:	4a14      	ldr	r2, [pc, #80]	; (800b3d4 <LoRaMacCheckForTxTimeout+0x64>)
 800b382:	5c9b      	ldrb	r3, [r3, r2]
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800b384:	2b02      	cmp	r3, #2
 800b386:	d11e      	bne.n	800b3c6 <LoRaMacCheckForTxTimeout+0x56>
    {
        // Stop transmit cycle due to tx timeout
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b388:	4a11      	ldr	r2, [pc, #68]	; (800b3d0 <LoRaMacCheckForTxTimeout+0x60>)
 800b38a:	23d5      	movs	r3, #213	; 0xd5
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	58d3      	ldr	r3, [r2, r3]
 800b390:	2202      	movs	r2, #2
 800b392:	4393      	bics	r3, r2
 800b394:	0019      	movs	r1, r3
 800b396:	4a0e      	ldr	r2, [pc, #56]	; (800b3d0 <LoRaMacCheckForTxTimeout+0x60>)
 800b398:	23d5      	movs	r3, #213	; 0xd5
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	50d1      	str	r1, [r2, r3]
        MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800b39e:	4a0c      	ldr	r2, [pc, #48]	; (800b3d0 <LoRaMacCheckForTxTimeout+0x60>)
 800b3a0:	238e      	movs	r3, #142	; 0x8e
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	58d3      	ldr	r3, [r2, r3]
 800b3a6:	4a0c      	ldr	r2, [pc, #48]	; (800b3d8 <LoRaMacCheckForTxTimeout+0x68>)
 800b3a8:	5c99      	ldrb	r1, [r3, r2]
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <LoRaMacCheckForTxTimeout+0x60>)
 800b3ac:	4a0b      	ldr	r2, [pc, #44]	; (800b3dc <LoRaMacCheckForTxTimeout+0x6c>)
 800b3ae:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800b3b0:	4a07      	ldr	r2, [pc, #28]	; (800b3d0 <LoRaMacCheckForTxTimeout+0x60>)
 800b3b2:	2386      	movs	r3, #134	; 0x86
 800b3b4:	00db      	lsls	r3, r3, #3
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	54d1      	strb	r1, [r2, r3]
        MacCtx.McpsConfirm.TxTimeOnAir = 0;
 800b3ba:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <LoRaMacCheckForTxTimeout+0x60>)
 800b3bc:	4a08      	ldr	r2, [pc, #32]	; (800b3e0 <LoRaMacCheckForTxTimeout+0x70>)
 800b3be:	2100      	movs	r1, #0
 800b3c0:	5099      	str	r1, [r3, r2]
        return 0x01;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e000      	b.n	800b3c8 <LoRaMacCheckForTxTimeout+0x58>
    }
    return 0x00;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	0018      	movs	r0, r3
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	46c0      	nop			; (mov r8, r8)
 800b3d0:	20000598 	.word	0x20000598
 800b3d4:	0000042d 	.word	0x0000042d
 800b3d8:	00000217 	.word	0x00000217
 800b3dc:	00000431 	.word	0x00000431
 800b3e0:	00000434 	.word	0x00000434

0800b3e4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b3e8:	200b      	movs	r0, #11
 800b3ea:	f004 ffb7 	bl	801035c <LoRaMacConfirmQueueIsCmdActive>
 800b3ee:	1e03      	subs	r3, r0, #0
 800b3f0:	d01c      	beq.n	800b42c <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b3f2:	4b10      	ldr	r3, [pc, #64]	; (800b434 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b3f4:	4a10      	ldr	r2, [pc, #64]	; (800b438 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800b3f6:	5c9b      	ldrb	r3, [r3, r2]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d114      	bne.n	800b42c <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b402:	4b0c      	ldr	r3, [pc, #48]	; (800b434 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b404:	4a0c      	ldr	r2, [pc, #48]	; (800b438 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800b406:	5c9b      	ldrb	r3, [r3, r2]
 800b408:	2204      	movs	r2, #4
 800b40a:	4013      	ands	r3, r2
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00c      	beq.n	800b42c <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b412:	4a08      	ldr	r2, [pc, #32]	; (800b434 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b414:	23d5      	movs	r3, #213	; 0xd5
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	58d3      	ldr	r3, [r2, r3]
 800b41a:	2202      	movs	r2, #2
 800b41c:	4393      	bics	r3, r2
 800b41e:	0019      	movs	r1, r3
 800b420:	4a04      	ldr	r2, [pc, #16]	; (800b434 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800b422:	23d5      	movs	r3, #213	; 0xd5
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800b428:	2301      	movs	r3, #1
 800b42a:	e000      	b.n	800b42e <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	0018      	movs	r0, r3
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	20000598 	.word	0x20000598
 800b438:	0000046d 	.word	0x0000046d

0800b43c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b440:	4a0f      	ldr	r2, [pc, #60]	; (800b480 <LoRaMacCheckForRxAbort+0x44>)
 800b442:	23d5      	movs	r3, #213	; 0xd5
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	58d3      	ldr	r3, [r2, r3]
 800b448:	2280      	movs	r2, #128	; 0x80
 800b44a:	4013      	ands	r3, r2
 800b44c:	d015      	beq.n	800b47a <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b44e:	4a0c      	ldr	r2, [pc, #48]	; (800b480 <LoRaMacCheckForRxAbort+0x44>)
 800b450:	23d5      	movs	r3, #213	; 0xd5
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	58d3      	ldr	r3, [r2, r3]
 800b456:	2280      	movs	r2, #128	; 0x80
 800b458:	4393      	bics	r3, r2
 800b45a:	0019      	movs	r1, r3
 800b45c:	4a08      	ldr	r2, [pc, #32]	; (800b480 <LoRaMacCheckForRxAbort+0x44>)
 800b45e:	23d5      	movs	r3, #213	; 0xd5
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b464:	4a06      	ldr	r2, [pc, #24]	; (800b480 <LoRaMacCheckForRxAbort+0x44>)
 800b466:	23d5      	movs	r3, #213	; 0xd5
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	58d3      	ldr	r3, [r2, r3]
 800b46c:	2202      	movs	r2, #2
 800b46e:	4393      	bics	r3, r2
 800b470:	0019      	movs	r1, r3
 800b472:	4a03      	ldr	r2, [pc, #12]	; (800b480 <LoRaMacCheckForRxAbort+0x44>)
 800b474:	23d5      	movs	r3, #213	; 0xd5
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	50d1      	str	r1, [r2, r3]
    }
}
 800b47a:	46c0      	nop			; (mov r8, r8)
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	20000598 	.word	0x20000598

0800b484 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800b48a:	1dfb      	adds	r3, r7, #7
 800b48c:	2200      	movs	r2, #0
 800b48e:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800b490:	f7ff fd8a 	bl	800afa8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b494:	f004 fb0f 	bl	800fab6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b498:	4b1a      	ldr	r3, [pc, #104]	; (800b504 <LoRaMacProcess+0x80>)
 800b49a:	4a1b      	ldr	r2, [pc, #108]	; (800b508 <LoRaMacProcess+0x84>)
 800b49c:	5c9b      	ldrb	r3, [r3, r2]
 800b49e:	2210      	movs	r2, #16
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d027      	beq.n	800b4f8 <LoRaMacProcess+0x74>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	f7ff fdd9 	bl	800b060 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800b4ae:	f7ff ffc5 	bl	800b43c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800b4b2:	f002 fb7b 	bl	800dbac <IsRequestPending>
 800b4b6:	1e03      	subs	r3, r0, #0
 800b4b8:	d011      	beq.n	800b4de <LoRaMacProcess+0x5a>
        {
            noTx |= LoRaMacCheckForTxTimeout( );
 800b4ba:	f7ff ff59 	bl	800b370 <LoRaMacCheckForTxTimeout>
 800b4be:	0003      	movs	r3, r0
 800b4c0:	0019      	movs	r1, r3
 800b4c2:	1dfb      	adds	r3, r7, #7
 800b4c4:	1dfa      	adds	r2, r7, #7
 800b4c6:	7812      	ldrb	r2, [r2, #0]
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	701a      	strb	r2, [r3, #0]
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800b4cc:	f7ff ff8a 	bl	800b3e4 <LoRaMacCheckForBeaconAcquisition>
 800b4d0:	0003      	movs	r3, r0
 800b4d2:	0019      	movs	r1, r3
 800b4d4:	1dfb      	adds	r3, r7, #7
 800b4d6:	1dfa      	adds	r2, r7, #7
 800b4d8:	7812      	ldrb	r2, [r2, #0]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800b4de:	1dfb      	adds	r3, r7, #7
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d103      	bne.n	800b4ee <LoRaMacProcess+0x6a>
        {
            LoRaMacHandleJoinRequest( );
 800b4e6:	f7ff ff13 	bl	800b310 <LoRaMacHandleJoinRequest>
            LoRaMacHandleMcpsRequest( );
 800b4ea:	f7ff fe99 	bl	800b220 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800b4ee:	f7ff fdcb 	bl	800b088 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	f7ff fdb4 	bl	800b060 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800b4f8:	f7ff fe2c 	bl	800b154 <LoRaMacHandleIndicationEvents>
}
 800b4fc:	46c0      	nop			; (mov r8, r8)
 800b4fe:	46bd      	mov	sp, r7
 800b500:	b002      	add	sp, #8
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20000598 	.word	0x20000598
 800b508:	0000046d 	.word	0x0000046d

0800b50c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800b514:	4b1b      	ldr	r3, [pc, #108]	; (800b584 <OnTxDelayedTimerEvent+0x78>)
 800b516:	0018      	movs	r0, r3
 800b518:	f009 ff16 	bl	8015348 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b51c:	4a1a      	ldr	r2, [pc, #104]	; (800b588 <OnTxDelayedTimerEvent+0x7c>)
 800b51e:	23d5      	movs	r3, #213	; 0xd5
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	58d3      	ldr	r3, [r2, r3]
 800b524:	2220      	movs	r2, #32
 800b526:	4393      	bics	r3, r2
 800b528:	0019      	movs	r1, r3
 800b52a:	4a17      	ldr	r2, [pc, #92]	; (800b588 <OnTxDelayedTimerEvent+0x7c>)
 800b52c:	23d5      	movs	r3, #213	; 0xd5
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800b532:	2001      	movs	r0, #1
 800b534:	f001 fa4a 	bl	800c9cc <ScheduleTx>
 800b538:	1e03      	subs	r3, r0, #0
 800b53a:	d01e      	beq.n	800b57a <OnTxDelayedTimerEvent+0x6e>
 800b53c:	2b0b      	cmp	r3, #11
 800b53e:	d01c      	beq.n	800b57a <OnTxDelayedTimerEvent+0x6e>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b540:	4a11      	ldr	r2, [pc, #68]	; (800b588 <OnTxDelayedTimerEvent+0x7c>)
 800b542:	238e      	movs	r3, #142	; 0x8e
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	58d3      	ldr	r3, [r2, r3]
 800b548:	22d5      	movs	r2, #213	; 0xd5
 800b54a:	569b      	ldrsb	r3, [r3, r2]
 800b54c:	b2d9      	uxtb	r1, r3
 800b54e:	4b0e      	ldr	r3, [pc, #56]	; (800b588 <OnTxDelayedTimerEvent+0x7c>)
 800b550:	4a0e      	ldr	r2, [pc, #56]	; (800b58c <OnTxDelayedTimerEvent+0x80>)
 800b552:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800b554:	4a0c      	ldr	r2, [pc, #48]	; (800b588 <OnTxDelayedTimerEvent+0x7c>)
 800b556:	238e      	movs	r3, #142	; 0x8e
 800b558:	00db      	lsls	r3, r3, #3
 800b55a:	58d3      	ldr	r3, [r2, r3]
 800b55c:	4a0c      	ldr	r2, [pc, #48]	; (800b590 <OnTxDelayedTimerEvent+0x84>)
 800b55e:	5c99      	ldrb	r1, [r3, r2]
 800b560:	4b09      	ldr	r3, [pc, #36]	; (800b588 <OnTxDelayedTimerEvent+0x7c>)
 800b562:	4a0c      	ldr	r2, [pc, #48]	; (800b594 <OnTxDelayedTimerEvent+0x88>)
 800b564:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800b566:	4b08      	ldr	r3, [pc, #32]	; (800b588 <OnTxDelayedTimerEvent+0x7c>)
 800b568:	4a0b      	ldr	r2, [pc, #44]	; (800b598 <OnTxDelayedTimerEvent+0x8c>)
 800b56a:	2109      	movs	r1, #9
 800b56c:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800b56e:	2009      	movs	r0, #9
 800b570:	f004 feb8 	bl	80102e4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800b574:	f002 f9b8 	bl	800d8e8 <StopRetransmission>
            break;
 800b578:	e000      	b.n	800b57c <OnTxDelayedTimerEvent+0x70>
            break;
 800b57a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800b57c:	46c0      	nop			; (mov r8, r8)
 800b57e:	46bd      	mov	sp, r7
 800b580:	b002      	add	sp, #8
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20000914 	.word	0x20000914
 800b588:	20000598 	.word	0x20000598
 800b58c:	0000042e 	.word	0x0000042e
 800b590:	00000217 	.word	0x00000217
 800b594:	00000431 	.word	0x00000431
 800b598:	0000042d 	.word	0x0000042d

0800b59c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer1 );
 800b5a4:	4b30      	ldr	r3, [pc, #192]	; (800b668 <OnRxWindow1TimerEvent+0xcc>)
 800b5a6:	0018      	movs	r0, r3
 800b5a8:	f009 fece 	bl	8015348 <TimerStop>
    MacCtx.RxSlot = RX_SLOT_WIN_1;
 800b5ac:	4b2f      	ldr	r3, [pc, #188]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b5ae:	4a30      	ldr	r2, [pc, #192]	; (800b670 <OnRxWindow1TimerEvent+0xd4>)
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	5499      	strb	r1, [r3, r2]

    MacCtx.RxWindow1Config.Channel = MacCtx.NvmCtx->Channel;
 800b5b4:	4a2d      	ldr	r2, [pc, #180]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b5b6:	238e      	movs	r3, #142	; 0x8e
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	58d2      	ldr	r2, [r2, r3]
 800b5bc:	2314      	movs	r3, #20
 800b5be:	33ff      	adds	r3, #255	; 0xff
 800b5c0:	5cd1      	ldrb	r1, [r2, r3]
 800b5c2:	4a2a      	ldr	r2, [pc, #168]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b5c4:	23f3      	movs	r3, #243	; 0xf3
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800b5ca:	4a28      	ldr	r2, [pc, #160]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b5cc:	238e      	movs	r3, #142	; 0x8e
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	58d3      	ldr	r3, [r2, r3]
 800b5d2:	22f5      	movs	r2, #245	; 0xf5
 800b5d4:	5c9b      	ldrb	r3, [r3, r2]
 800b5d6:	b259      	sxtb	r1, r3
 800b5d8:	4b24      	ldr	r3, [pc, #144]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b5da:	4a26      	ldr	r2, [pc, #152]	; (800b674 <OnRxWindow1TimerEvent+0xd8>)
 800b5dc:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b5de:	4a23      	ldr	r2, [pc, #140]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b5e0:	238e      	movs	r3, #142	; 0x8e
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	58d2      	ldr	r2, [r2, r3]
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	33ff      	adds	r3, #255	; 0xff
 800b5ea:	5cd1      	ldrb	r1, [r2, r3]
 800b5ec:	4a1f      	ldr	r2, [pc, #124]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b5ee:	23f7      	movs	r3, #247	; 0xf7
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b5f4:	4a1d      	ldr	r2, [pc, #116]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b5f6:	238e      	movs	r3, #142	; 0x8e
 800b5f8:	00db      	lsls	r3, r3, #3
 800b5fa:	58d2      	ldr	r2, [r2, r3]
 800b5fc:	2316      	movs	r3, #22
 800b5fe:	33ff      	adds	r3, #255	; 0xff
 800b600:	5cd1      	ldrb	r1, [r2, r3]
 800b602:	4b1a      	ldr	r3, [pc, #104]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b604:	4a1c      	ldr	r2, [pc, #112]	; (800b678 <OnRxWindow1TimerEvent+0xdc>)
 800b606:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800b608:	4b18      	ldr	r3, [pc, #96]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b60a:	4a1c      	ldr	r2, [pc, #112]	; (800b67c <OnRxWindow1TimerEvent+0xe0>)
 800b60c:	2100      	movs	r1, #0
 800b60e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = MacCtx.RxSlot;
 800b610:	4b16      	ldr	r3, [pc, #88]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b612:	4a17      	ldr	r2, [pc, #92]	; (800b670 <OnRxWindow1TimerEvent+0xd4>)
 800b614:	5c99      	ldrb	r1, [r3, r2]
 800b616:	4b15      	ldr	r3, [pc, #84]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b618:	4a19      	ldr	r2, [pc, #100]	; (800b680 <OnRxWindow1TimerEvent+0xe4>)
 800b61a:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b61c:	4a13      	ldr	r2, [pc, #76]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b61e:	238e      	movs	r3, #142	; 0x8e
 800b620:	00db      	lsls	r3, r3, #3
 800b622:	58d3      	ldr	r3, [r2, r3]
 800b624:	22c8      	movs	r2, #200	; 0xc8
 800b626:	5c9b      	ldrb	r3, [r3, r2]
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d102      	bne.n	800b632 <OnRxWindow1TimerEvent+0x96>
    {
        Radio.Standby( );
 800b62c:	4b15      	ldr	r3, [pc, #84]	; (800b684 <OnRxWindow1TimerEvent+0xe8>)
 800b62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b630:	4798      	blx	r3
    }

    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
 800b632:	4a0e      	ldr	r2, [pc, #56]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b634:	238e      	movs	r3, #142	; 0x8e
 800b636:	00db      	lsls	r3, r3, #3
 800b638:	58d3      	ldr	r3, [r2, r3]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	4a12      	ldr	r2, [pc, #72]	; (800b688 <OnRxWindow1TimerEvent+0xec>)
 800b63e:	4913      	ldr	r1, [pc, #76]	; (800b68c <OnRxWindow1TimerEvent+0xf0>)
 800b640:	0018      	movs	r0, r3
 800b642:	f007 fa27 	bl	8012a94 <RegionRxConfig>
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800b646:	4b09      	ldr	r3, [pc, #36]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b648:	4a0c      	ldr	r2, [pc, #48]	; (800b67c <OnRxWindow1TimerEvent+0xe0>)
 800b64a:	5c98      	ldrb	r0, [r3, r2]
 800b64c:	4a07      	ldr	r2, [pc, #28]	; (800b66c <OnRxWindow1TimerEvent+0xd0>)
 800b64e:	238e      	movs	r3, #142	; 0x8e
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	58d3      	ldr	r3, [r2, r3]
 800b654:	22e0      	movs	r2, #224	; 0xe0
 800b656:	589b      	ldr	r3, [r3, r2]
 800b658:	0019      	movs	r1, r3
 800b65a:	f000 f901 	bl	800b860 <RxWindowSetup>
}
 800b65e:	46c0      	nop			; (mov r8, r8)
 800b660:	46bd      	mov	sp, r7
 800b662:	b002      	add	sp, #8
 800b664:	bd80      	pop	{r7, pc}
 800b666:	46c0      	nop			; (mov r8, r8)
 800b668:	2000092c 	.word	0x2000092c
 800b66c:	20000598 	.word	0x20000598
 800b670:	0000046c 	.word	0x0000046c
 800b674:	000003cf 	.word	0x000003cf
 800b678:	000003dd 	.word	0x000003dd
 800b67c:	000003de 	.word	0x000003de
 800b680:	000003df 	.word	0x000003df
 800b684:	08020a5c 	.word	0x08020a5c
 800b688:	200009ac 	.word	0x200009ac
 800b68c:	20000964 	.word	0x20000964

0800b690 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer2 );
 800b698:	4b31      	ldr	r3, [pc, #196]	; (800b760 <OnRxWindow2TimerEvent+0xd0>)
 800b69a:	0018      	movs	r0, r3
 800b69c:	f009 fe54 	bl	8015348 <TimerStop>

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
 800b6a0:	4a30      	ldr	r2, [pc, #192]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6a2:	238e      	movs	r3, #142	; 0x8e
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	58d2      	ldr	r2, [r2, r3]
 800b6a8:	2314      	movs	r3, #20
 800b6aa:	33ff      	adds	r3, #255	; 0xff
 800b6ac:	5cd1      	ldrb	r1, [r2, r3]
 800b6ae:	4a2d      	ldr	r2, [pc, #180]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6b0:	23f8      	movs	r3, #248	; 0xf8
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800b6b6:	4a2b      	ldr	r2, [pc, #172]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6b8:	238e      	movs	r3, #142	; 0x8e
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	58d3      	ldr	r3, [r2, r3]
 800b6be:	22f8      	movs	r2, #248	; 0xf8
 800b6c0:	5899      	ldr	r1, [r3, r2]
 800b6c2:	4a28      	ldr	r2, [pc, #160]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6c4:	23f9      	movs	r3, #249	; 0xf9
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b6ca:	4a26      	ldr	r2, [pc, #152]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6cc:	238e      	movs	r3, #142	; 0x8e
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	58d2      	ldr	r2, [r2, r3]
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	33ff      	adds	r3, #255	; 0xff
 800b6d6:	5cd1      	ldrb	r1, [r2, r3]
 800b6d8:	4a22      	ldr	r2, [pc, #136]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6da:	23fc      	movs	r3, #252	; 0xfc
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b6e0:	4a20      	ldr	r2, [pc, #128]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6e2:	238e      	movs	r3, #142	; 0x8e
 800b6e4:	00db      	lsls	r3, r3, #3
 800b6e6:	58d2      	ldr	r2, [r2, r3]
 800b6e8:	2316      	movs	r3, #22
 800b6ea:	33ff      	adds	r3, #255	; 0xff
 800b6ec:	5cd1      	ldrb	r1, [r2, r3]
 800b6ee:	4b1d      	ldr	r3, [pc, #116]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6f0:	4a1d      	ldr	r2, [pc, #116]	; (800b768 <OnRxWindow2TimerEvent+0xd8>)
 800b6f2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b6f4:	4b1b      	ldr	r3, [pc, #108]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6f6:	4a1d      	ldr	r2, [pc, #116]	; (800b76c <OnRxWindow2TimerEvent+0xdc>)
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800b6fc:	4a19      	ldr	r2, [pc, #100]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b6fe:	238e      	movs	r3, #142	; 0x8e
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	58d3      	ldr	r3, [r2, r3]
 800b704:	22c8      	movs	r2, #200	; 0xc8
 800b706:	5c9b      	ldrb	r3, [r3, r2]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d004      	beq.n	800b716 <OnRxWindow2TimerEvent+0x86>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
 800b70c:	4b15      	ldr	r3, [pc, #84]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b70e:	4a18      	ldr	r2, [pc, #96]	; (800b770 <OnRxWindow2TimerEvent+0xe0>)
 800b710:	2100      	movs	r1, #0
 800b712:	5499      	strb	r1, [r3, r2]
 800b714:	e003      	b.n	800b71e <OnRxWindow2TimerEvent+0x8e>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
 800b716:	4b13      	ldr	r3, [pc, #76]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b718:	4a15      	ldr	r2, [pc, #84]	; (800b770 <OnRxWindow2TimerEvent+0xe0>)
 800b71a:	2101      	movs	r1, #1
 800b71c:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
 800b71e:	4a11      	ldr	r2, [pc, #68]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b720:	238e      	movs	r3, #142	; 0x8e
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	58d3      	ldr	r3, [r2, r3]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	4a12      	ldr	r2, [pc, #72]	; (800b774 <OnRxWindow2TimerEvent+0xe4>)
 800b72a:	4913      	ldr	r1, [pc, #76]	; (800b778 <OnRxWindow2TimerEvent+0xe8>)
 800b72c:	0018      	movs	r0, r3
 800b72e:	f007 f9b1 	bl	8012a94 <RegionRxConfig>
 800b732:	1e03      	subs	r3, r0, #0
 800b734:	d00f      	beq.n	800b756 <OnRxWindow2TimerEvent+0xc6>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800b736:	4b0b      	ldr	r3, [pc, #44]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b738:	4a0d      	ldr	r2, [pc, #52]	; (800b770 <OnRxWindow2TimerEvent+0xe0>)
 800b73a:	5c98      	ldrb	r0, [r3, r2]
 800b73c:	4a09      	ldr	r2, [pc, #36]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b73e:	238e      	movs	r3, #142	; 0x8e
 800b740:	00db      	lsls	r3, r3, #3
 800b742:	58d3      	ldr	r3, [r2, r3]
 800b744:	22e0      	movs	r2, #224	; 0xe0
 800b746:	589b      	ldr	r3, [r3, r2]
 800b748:	0019      	movs	r1, r3
 800b74a:	f000 f889 	bl	800b860 <RxWindowSetup>
        MacCtx.RxSlot = RX_SLOT_WIN_2;
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <OnRxWindow2TimerEvent+0xd4>)
 800b750:	4a0a      	ldr	r2, [pc, #40]	; (800b77c <OnRxWindow2TimerEvent+0xec>)
 800b752:	2101      	movs	r1, #1
 800b754:	5499      	strb	r1, [r3, r2]
    }
}
 800b756:	46c0      	nop			; (mov r8, r8)
 800b758:	46bd      	mov	sp, r7
 800b75a:	b002      	add	sp, #8
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	46c0      	nop			; (mov r8, r8)
 800b760:	20000944 	.word	0x20000944
 800b764:	20000598 	.word	0x20000598
 800b768:	000003f1 	.word	0x000003f1
 800b76c:	000003f3 	.word	0x000003f3
 800b770:	000003f2 	.word	0x000003f2
 800b774:	200009ac 	.word	0x200009ac
 800b778:	20000978 	.word	0x20000978
 800b77c:	0000046c 	.word	0x0000046c

0800b780 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
 800b780:	b590      	push	{r4, r7, lr}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	0004      	movs	r4, r0
 800b788:	0008      	movs	r0, r1
 800b78a:	0011      	movs	r1, r2
 800b78c:	1dfb      	adds	r3, r7, #7
 800b78e:	1c22      	adds	r2, r4, #0
 800b790:	701a      	strb	r2, [r3, #0]
 800b792:	1dbb      	adds	r3, r7, #6
 800b794:	1c02      	adds	r2, r0, #0
 800b796:	701a      	strb	r2, [r3, #0]
 800b798:	1d7b      	adds	r3, r7, #5
 800b79a:	1c0a      	adds	r2, r1, #0
 800b79c:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800b79e:	1dfb      	adds	r3, r7, #7
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	4053      	eors	r3, r2
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d007      	beq.n	800b7bc <CheckToDisableAckTimeout+0x3c>
    {
        if( devClass == CLASS_C )
 800b7ac:	1dbb      	adds	r3, r7, #6
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d10a      	bne.n	800b7ca <CheckToDisableAckTimeout+0x4a>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( NULL );
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f000 f80d 	bl	800b7d4 <OnAckTimeoutTimerEvent>
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( NULL );
        }
    }
}
 800b7ba:	e006      	b.n	800b7ca <CheckToDisableAckTimeout+0x4a>
        if( ackReceived == 1 )
 800b7bc:	1d7b      	adds	r3, r7, #5
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <CheckToDisableAckTimeout+0x4a>
            OnAckTimeoutTimerEvent( NULL );
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	f000 f805 	bl	800b7d4 <OnAckTimeoutTimerEvent>
}
 800b7ca:	46c0      	nop			; (mov r8, r8)
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	b003      	add	sp, #12
 800b7d0:	bd90      	pop	{r4, r7, pc}
	...

0800b7d4 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800b7dc:	4b1c      	ldr	r3, [pc, #112]	; (800b850 <OnAckTimeoutTimerEvent+0x7c>)
 800b7de:	0018      	movs	r0, r3
 800b7e0:	f009 fdb2 	bl	8015348 <TimerStop>

    if( MacCtx.NvmCtx->NodeAckRequested == true )
 800b7e4:	4a1b      	ldr	r2, [pc, #108]	; (800b854 <OnAckTimeoutTimerEvent+0x80>)
 800b7e6:	238e      	movs	r3, #142	; 0x8e
 800b7e8:	00db      	lsls	r3, r3, #3
 800b7ea:	58d3      	ldr	r3, [r2, r3]
 800b7ec:	4a1a      	ldr	r2, [pc, #104]	; (800b858 <OnAckTimeoutTimerEvent+0x84>)
 800b7ee:	5c9b      	ldrb	r3, [r3, r2]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d007      	beq.n	800b804 <OnAckTimeoutTimerEvent+0x30>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
 800b7f4:	4a17      	ldr	r2, [pc, #92]	; (800b854 <OnAckTimeoutTimerEvent+0x80>)
 800b7f6:	238e      	movs	r3, #142	; 0x8e
 800b7f8:	00db      	lsls	r3, r3, #3
 800b7fa:	58d2      	ldr	r2, [r2, r3]
 800b7fc:	2386      	movs	r3, #134	; 0x86
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	2101      	movs	r1, #1
 800b802:	54d1      	strb	r1, [r2, r3]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800b804:	4a13      	ldr	r2, [pc, #76]	; (800b854 <OnAckTimeoutTimerEvent+0x80>)
 800b806:	238e      	movs	r3, #142	; 0x8e
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	58d3      	ldr	r3, [r2, r3]
 800b80c:	22c8      	movs	r2, #200	; 0xc8
 800b80e:	5c9b      	ldrb	r3, [r3, r2]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d105      	bne.n	800b820 <OnAckTimeoutTimerEvent+0x4c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b814:	4b0f      	ldr	r3, [pc, #60]	; (800b854 <OnAckTimeoutTimerEvent+0x80>)
 800b816:	4a11      	ldr	r2, [pc, #68]	; (800b85c <OnAckTimeoutTimerEvent+0x88>)
 800b818:	5c99      	ldrb	r1, [r3, r2]
 800b81a:	2010      	movs	r0, #16
 800b81c:	4301      	orrs	r1, r0
 800b81e:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b820:	4a0c      	ldr	r2, [pc, #48]	; (800b854 <OnAckTimeoutTimerEvent+0x80>)
 800b822:	23d7      	movs	r3, #215	; 0xd7
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	58d3      	ldr	r3, [r2, r3]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00c      	beq.n	800b846 <OnAckTimeoutTimerEvent+0x72>
 800b82c:	4a09      	ldr	r2, [pc, #36]	; (800b854 <OnAckTimeoutTimerEvent+0x80>)
 800b82e:	23d7      	movs	r3, #215	; 0xd7
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	58d3      	ldr	r3, [r2, r3]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d005      	beq.n	800b846 <OnAckTimeoutTimerEvent+0x72>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b83a:	4a06      	ldr	r2, [pc, #24]	; (800b854 <OnAckTimeoutTimerEvent+0x80>)
 800b83c:	23d7      	movs	r3, #215	; 0xd7
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	58d3      	ldr	r3, [r2, r3]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	4798      	blx	r3
    }
}
 800b846:	46c0      	nop			; (mov r8, r8)
 800b848:	46bd      	mov	sp, r7
 800b84a:	b002      	add	sp, #8
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	46c0      	nop			; (mov r8, r8)
 800b850:	2000098c 	.word	0x2000098c
 800b854:	20000598 	.word	0x20000598
 800b858:	00000219 	.word	0x00000219
 800b85c:	0000046d 	.word	0x0000046d

0800b860 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	0002      	movs	r2, r0
 800b868:	6039      	str	r1, [r7, #0]
 800b86a:	1dfb      	adds	r3, r7, #7
 800b86c:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
 800b86e:	1dfb      	adds	r3, r7, #7
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	2201      	movs	r2, #1
 800b874:	4053      	eors	r3, r2
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d005      	beq.n	800b888 <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
 800b87c:	4b06      	ldr	r3, [pc, #24]	; (800b898 <RxWindowSetup+0x38>)
 800b87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	0010      	movs	r0, r2
 800b884:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 800b886:	e003      	b.n	800b890 <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
 800b888:	4b03      	ldr	r3, [pc, #12]	; (800b898 <RxWindowSetup+0x38>)
 800b88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88c:	2000      	movs	r0, #0
 800b88e:	4798      	blx	r3
}
 800b890:	46c0      	nop			; (mov r8, r8)
 800b892:	46bd      	mov	sp, r7
 800b894:	b002      	add	sp, #8
 800b896:	bd80      	pop	{r7, pc}
 800b898:	08020a5c 	.word	0x08020a5c

0800b89c <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800b89c:	b5b0      	push	{r4, r5, r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af02      	add	r7, sp, #8
 800b8a2:	0002      	movs	r2, r0
 800b8a4:	1dfb      	adds	r3, r7, #7
 800b8a6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b8a8:	230f      	movs	r3, #15
 800b8aa:	18fb      	adds	r3, r7, r3
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800b8b0:	4a4b      	ldr	r2, [pc, #300]	; (800b9e0 <SwitchClass+0x144>)
 800b8b2:	238e      	movs	r3, #142	; 0x8e
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	58d3      	ldr	r3, [r2, r3]
 800b8b8:	22c8      	movs	r2, #200	; 0xc8
 800b8ba:	5c9b      	ldrb	r3, [r3, r2]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d058      	beq.n	800b972 <SwitchClass+0xd6>
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d06c      	beq.n	800b99e <SwitchClass+0x102>
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d000      	beq.n	800b8ca <SwitchClass+0x2e>
 800b8c8:	e082      	b.n	800b9d0 <SwitchClass+0x134>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_B )
 800b8ca:	1dfb      	adds	r3, r7, #7
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d114      	bne.n	800b8fc <SwitchClass+0x60>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b8d2:	250f      	movs	r5, #15
 800b8d4:	197c      	adds	r4, r7, r5
 800b8d6:	1dfb      	adds	r3, r7, #7
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	0018      	movs	r0, r3
 800b8dc:	f004 f893 	bl	800fa06 <LoRaMacClassBSwitchClass>
 800b8e0:	0003      	movs	r3, r0
 800b8e2:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800b8e4:	197b      	adds	r3, r7, r5
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d107      	bne.n	800b8fc <SwitchClass+0x60>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b8ec:	4a3c      	ldr	r2, [pc, #240]	; (800b9e0 <SwitchClass+0x144>)
 800b8ee:	238e      	movs	r3, #142	; 0x8e
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	58d3      	ldr	r3, [r2, r3]
 800b8f4:	1dfa      	adds	r2, r7, #7
 800b8f6:	21c8      	movs	r1, #200	; 0xc8
 800b8f8:	7812      	ldrb	r2, [r2, #0]
 800b8fa:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800b8fc:	1dfb      	adds	r3, r7, #7
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2b02      	cmp	r3, #2
 800b902:	d160      	bne.n	800b9c6 <SwitchClass+0x12a>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b904:	4a36      	ldr	r2, [pc, #216]	; (800b9e0 <SwitchClass+0x144>)
 800b906:	238e      	movs	r3, #142	; 0x8e
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	58d3      	ldr	r3, [r2, r3]
 800b90c:	1dfa      	adds	r2, r7, #7
 800b90e:	21c8      	movs	r1, #200	; 0xc8
 800b910:	7812      	ldrb	r2, [r2, #0]
 800b912:	545a      	strb	r2, [r3, r1]

                // Set the NodeAckRequested indicator to default
                MacCtx.NvmCtx->NodeAckRequested = false;
 800b914:	4a32      	ldr	r2, [pc, #200]	; (800b9e0 <SwitchClass+0x144>)
 800b916:	238e      	movs	r3, #142	; 0x8e
 800b918:	00db      	lsls	r3, r3, #3
 800b91a:	58d3      	ldr	r3, [r2, r3]
 800b91c:	4a31      	ldr	r2, [pc, #196]	; (800b9e4 <SwitchClass+0x148>)
 800b91e:	2100      	movs	r1, #0
 800b920:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800b922:	4b31      	ldr	r3, [pc, #196]	; (800b9e8 <SwitchClass+0x14c>)
 800b924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b926:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b928:	4a2d      	ldr	r2, [pc, #180]	; (800b9e0 <SwitchClass+0x144>)
 800b92a:	238e      	movs	r3, #142	; 0x8e
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	58d3      	ldr	r3, [r2, r3]
 800b930:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800b932:	4a2b      	ldr	r2, [pc, #172]	; (800b9e0 <SwitchClass+0x144>)
 800b934:	238e      	movs	r3, #142	; 0x8e
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	58d3      	ldr	r3, [r2, r3]
 800b93a:	22fc      	movs	r2, #252	; 0xfc
 800b93c:	5c9b      	ldrb	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b93e:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b940:	4a27      	ldr	r2, [pc, #156]	; (800b9e0 <SwitchClass+0x144>)
 800b942:	238e      	movs	r3, #142	; 0x8e
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b948:	22dc      	movs	r2, #220	; 0xdc
 800b94a:	5c9c      	ldrb	r4, [r3, r2]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b94c:	4a24      	ldr	r2, [pc, #144]	; (800b9e0 <SwitchClass+0x144>)
 800b94e:	238e      	movs	r3, #142	; 0x8e
 800b950:	00db      	lsls	r3, r3, #3
 800b952:	58d3      	ldr	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b954:	22d8      	movs	r2, #216	; 0xd8
 800b956:	589a      	ldr	r2, [r3, r2]
 800b958:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <SwitchClass+0x150>)
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	0013      	movs	r3, r2
 800b95e:	0022      	movs	r2, r4
 800b960:	f007 f874 	bl	8012a4c <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindow2Config );
                OpenContinuousRx2Window( );
 800b964:	f001 fb8e 	bl	800d084 <OpenContinuousRx2Window>

                status = LORAMAC_STATUS_OK;
 800b968:	230f      	movs	r3, #15
 800b96a:	18fb      	adds	r3, r7, r3
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b970:	e029      	b.n	800b9c6 <SwitchClass+0x12a>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b972:	250f      	movs	r5, #15
 800b974:	197c      	adds	r4, r7, r5
 800b976:	1dfb      	adds	r3, r7, #7
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	0018      	movs	r0, r3
 800b97c:	f004 f843 	bl	800fa06 <LoRaMacClassBSwitchClass>
 800b980:	0003      	movs	r3, r0
 800b982:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800b984:	197b      	adds	r3, r7, r5
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d11e      	bne.n	800b9ca <SwitchClass+0x12e>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b98c:	4a14      	ldr	r2, [pc, #80]	; (800b9e0 <SwitchClass+0x144>)
 800b98e:	238e      	movs	r3, #142	; 0x8e
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	58d3      	ldr	r3, [r2, r3]
 800b994:	1dfa      	adds	r2, r7, #7
 800b996:	21c8      	movs	r1, #200	; 0xc8
 800b998:	7812      	ldrb	r2, [r2, #0]
 800b99a:	545a      	strb	r2, [r3, r1]
            }
            break;
 800b99c:	e015      	b.n	800b9ca <SwitchClass+0x12e>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800b99e:	1dfb      	adds	r3, r7, #7
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d113      	bne.n	800b9ce <SwitchClass+0x132>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800b9a6:	4a0e      	ldr	r2, [pc, #56]	; (800b9e0 <SwitchClass+0x144>)
 800b9a8:	238e      	movs	r3, #142	; 0x8e
 800b9aa:	00db      	lsls	r3, r3, #3
 800b9ac:	58d3      	ldr	r3, [r2, r3]
 800b9ae:	1dfa      	adds	r2, r7, #7
 800b9b0:	21c8      	movs	r1, #200	; 0xc8
 800b9b2:	7812      	ldrb	r2, [r2, #0]
 800b9b4:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800b9b6:	4b0c      	ldr	r3, [pc, #48]	; (800b9e8 <SwitchClass+0x14c>)
 800b9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ba:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800b9bc:	230f      	movs	r3, #15
 800b9be:	18fb      	adds	r3, r7, r3
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b9c4:	e003      	b.n	800b9ce <SwitchClass+0x132>
            break;
 800b9c6:	46c0      	nop			; (mov r8, r8)
 800b9c8:	e002      	b.n	800b9d0 <SwitchClass+0x134>
            break;
 800b9ca:	46c0      	nop			; (mov r8, r8)
 800b9cc:	e000      	b.n	800b9d0 <SwitchClass+0x134>
            break;
 800b9ce:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 800b9d0:	230f      	movs	r3, #15
 800b9d2:	18fb      	adds	r3, r7, r3
 800b9d4:	781b      	ldrb	r3, [r3, #0]
}
 800b9d6:	0018      	movs	r0, r3
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	b004      	add	sp, #16
 800b9dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b9de:	46c0      	nop			; (mov r8, r8)
 800b9e0:	20000598 	.word	0x20000598
 800b9e4:	00000219 	.word	0x00000219
 800b9e8:	08020a5c 	.word	0x08020a5c
 800b9ec:	20000978 	.word	0x20000978

0800b9f0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	0002      	movs	r2, r0
 800b9f8:	1dfb      	adds	r3, r7, #7
 800b9fa:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b9fc:	4a1a      	ldr	r2, [pc, #104]	; (800ba68 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800b9fe:	238e      	movs	r3, #142	; 0x8e
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	58d2      	ldr	r2, [r2, r3]
 800ba04:	2380      	movs	r3, #128	; 0x80
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	5cd2      	ldrb	r2, [r2, r3]
 800ba0a:	210c      	movs	r1, #12
 800ba0c:	187b      	adds	r3, r7, r1
 800ba0e:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800ba10:	187b      	adds	r3, r7, r1
 800ba12:	1dfa      	adds	r2, r7, #7
 800ba14:	7812      	ldrb	r2, [r2, #0]
 800ba16:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ba18:	187b      	adds	r3, r7, r1
 800ba1a:	220c      	movs	r2, #12
 800ba1c:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800ba1e:	4a12      	ldr	r2, [pc, #72]	; (800ba68 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800ba20:	238e      	movs	r3, #142	; 0x8e
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	58d2      	ldr	r2, [r2, r3]
 800ba26:	2316      	movs	r3, #22
 800ba28:	33ff      	adds	r3, #255	; 0xff
 800ba2a:	5cd3      	ldrb	r3, [r2, r3]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d003      	beq.n	800ba38 <GetMaxAppPayloadWithoutFOptsLength+0x48>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ba30:	230c      	movs	r3, #12
 800ba32:	18fb      	adds	r3, r7, r3
 800ba34:	220d      	movs	r2, #13
 800ba36:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ba38:	4a0b      	ldr	r2, [pc, #44]	; (800ba68 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800ba3a:	238e      	movs	r3, #142	; 0x8e
 800ba3c:	00db      	lsls	r3, r3, #3
 800ba3e:	58d3      	ldr	r3, [r2, r3]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	220c      	movs	r2, #12
 800ba44:	18ba      	adds	r2, r7, r2
 800ba46:	0011      	movs	r1, r2
 800ba48:	0018      	movs	r0, r3
 800ba4a:	f006 ff50 	bl	80128ee <RegionGetPhyParam>
 800ba4e:	0003      	movs	r3, r0
 800ba50:	001a      	movs	r2, r3
 800ba52:	2108      	movs	r1, #8
 800ba54:	187b      	adds	r3, r7, r1
 800ba56:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800ba58:	187b      	adds	r3, r7, r1
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	b2db      	uxtb	r3, r3
}
 800ba5e:	0018      	movs	r0, r3
 800ba60:	46bd      	mov	sp, r7
 800ba62:	b004      	add	sp, #16
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	46c0      	nop			; (mov r8, r8)
 800ba68:	20000598 	.word	0x20000598

0800ba6c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ba6c:	b5b0      	push	{r4, r5, r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	0004      	movs	r4, r0
 800ba74:	0008      	movs	r0, r1
 800ba76:	0011      	movs	r1, r2
 800ba78:	1dfb      	adds	r3, r7, #7
 800ba7a:	1c22      	adds	r2, r4, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	1dbb      	adds	r3, r7, #6
 800ba80:	1c02      	adds	r2, r0, #0
 800ba82:	701a      	strb	r2, [r3, #0]
 800ba84:	1d7b      	adds	r3, r7, #5
 800ba86:	1c0a      	adds	r2, r1, #0
 800ba88:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800ba8a:	200e      	movs	r0, #14
 800ba8c:	0004      	movs	r4, r0
 800ba8e:	183b      	adds	r3, r7, r0
 800ba90:	2200      	movs	r2, #0
 800ba92:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800ba94:	250c      	movs	r5, #12
 800ba96:	197b      	adds	r3, r7, r5
 800ba98:	2200      	movs	r2, #0
 800ba9a:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ba9c:	1dbb      	adds	r3, r7, #6
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	b25b      	sxtb	r3, r3
 800baa2:	0018      	movs	r0, r3
 800baa4:	f7ff ffa4 	bl	800b9f0 <GetMaxAppPayloadWithoutFOptsLength>
 800baa8:	0003      	movs	r3, r0
 800baaa:	001a      	movs	r2, r3
 800baac:	0020      	movs	r0, r4
 800baae:	183b      	adds	r3, r7, r0
 800bab0:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800bab2:	1dfb      	adds	r3, r7, #7
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	b299      	uxth	r1, r3
 800bab8:	1d7b      	adds	r3, r7, #5
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	b29a      	uxth	r2, r3
 800babe:	197b      	adds	r3, r7, r5
 800bac0:	188a      	adds	r2, r1, r2
 800bac2:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800bac4:	197a      	adds	r2, r7, r5
 800bac6:	183b      	adds	r3, r7, r0
 800bac8:	8812      	ldrh	r2, [r2, #0]
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d806      	bhi.n	800bade <ValidatePayloadLength+0x72>
 800bad0:	230c      	movs	r3, #12
 800bad2:	18fb      	adds	r3, r7, r3
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	2bff      	cmp	r3, #255	; 0xff
 800bad8:	d801      	bhi.n	800bade <ValidatePayloadLength+0x72>
    {
        return true;
 800bada:	2301      	movs	r3, #1
 800badc:	e000      	b.n	800bae0 <ValidatePayloadLength+0x74>
    }
    return false;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	0018      	movs	r0, r3
 800bae2:	46bd      	mov	sp, r7
 800bae4:	b004      	add	sp, #16
 800bae6:	bdb0      	pop	{r4, r5, r7, pc}

0800bae8 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800baec:	4b06      	ldr	r3, [pc, #24]	; (800bb08 <SetMlmeScheduleUplinkIndication+0x20>)
 800baee:	4a07      	ldr	r2, [pc, #28]	; (800bb0c <SetMlmeScheduleUplinkIndication+0x24>)
 800baf0:	2106      	movs	r1, #6
 800baf2:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800baf4:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <SetMlmeScheduleUplinkIndication+0x20>)
 800baf6:	4a06      	ldr	r2, [pc, #24]	; (800bb10 <SetMlmeScheduleUplinkIndication+0x28>)
 800baf8:	5c99      	ldrb	r1, [r3, r2]
 800bafa:	2008      	movs	r0, #8
 800bafc:	4301      	orrs	r1, r0
 800bafe:	5499      	strb	r1, [r3, r2]
}
 800bb00:	46c0      	nop			; (mov r8, r8)
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	46c0      	nop			; (mov r8, r8)
 800bb08:	20000598 	.word	0x20000598
 800bb0c:	00000454 	.word	0x00000454
 800bb10:	0000046d 	.word	0x0000046d

0800bb14 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800bb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb16:	b0a5      	sub	sp, #148	; 0x94
 800bb18:	af02      	add	r7, sp, #8
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	000c      	movs	r4, r1
 800bb1e:	0010      	movs	r0, r2
 800bb20:	0019      	movs	r1, r3
 800bb22:	1cfb      	adds	r3, r7, #3
 800bb24:	1c22      	adds	r2, r4, #0
 800bb26:	701a      	strb	r2, [r3, #0]
 800bb28:	1cbb      	adds	r3, r7, #2
 800bb2a:	1c02      	adds	r2, r0, #0
 800bb2c:	701a      	strb	r2, [r3, #0]
 800bb2e:	1c7b      	adds	r3, r7, #1
 800bb30:	1c0a      	adds	r2, r1, #0
 800bb32:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800bb34:	236b      	movs	r3, #107	; 0x6b
 800bb36:	18fb      	adds	r3, r7, r3
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800bb3c:	2387      	movs	r3, #135	; 0x87
 800bb3e:	18fb      	adds	r3, r7, r3
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800bb44:	2168      	movs	r1, #104	; 0x68
 800bb46:	187b      	adds	r3, r7, r1
 800bb48:	2200      	movs	r2, #0
 800bb4a:	701a      	strb	r2, [r3, #0]
 800bb4c:	187b      	adds	r3, r7, r1
 800bb4e:	2200      	movs	r2, #0
 800bb50:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 800bb52:	f000 fd7a 	bl	800c64a <ProcessMacCommands+0xb36>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800bb56:	1cfb      	adds	r3, r7, #3
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	1cfa      	adds	r2, r7, #3
 800bb5c:	1c59      	adds	r1, r3, #1
 800bb5e:	7011      	strb	r1, [r2, #0]
 800bb60:	001a      	movs	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	189b      	adds	r3, r3, r2
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b13      	cmp	r3, #19
 800bb6a:	d901      	bls.n	800bb70 <ProcessMacCommands+0x5c>
 800bb6c:	f000 fd76 	bl	800c65c <ProcessMacCommands+0xb48>
 800bb70:	009a      	lsls	r2, r3, #2
 800bb72:	4be3      	ldr	r3, [pc, #908]	; (800bf00 <ProcessMacCommands+0x3ec>)
 800bb74:	18d3      	adds	r3, r2, r3
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800bb7a:	2003      	movs	r0, #3
 800bb7c:	f004 fbee 	bl	801035c <LoRaMacConfirmQueueIsCmdActive>
 800bb80:	1e03      	subs	r3, r0, #0
 800bb82:	d01c      	beq.n	800bbbe <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800bb84:	2103      	movs	r1, #3
 800bb86:	2000      	movs	r0, #0
 800bb88:	f004 fb5a 	bl	8010240 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800bb8c:	1cfb      	adds	r3, r7, #3
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	1cfa      	adds	r2, r7, #3
 800bb92:	1c59      	adds	r1, r3, #1
 800bb94:	7011      	strb	r1, [r2, #0]
 800bb96:	001a      	movs	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	189b      	adds	r3, r3, r2
 800bb9c:	7819      	ldrb	r1, [r3, #0]
 800bb9e:	4ad9      	ldr	r2, [pc, #868]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bba0:	2389      	movs	r3, #137	; 0x89
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800bba6:	1cfb      	adds	r3, r7, #3
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	1cfa      	adds	r2, r7, #3
 800bbac:	1c59      	adds	r1, r3, #1
 800bbae:	7011      	strb	r1, [r2, #0]
 800bbb0:	001a      	movs	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	189b      	adds	r3, r3, r2
 800bbb6:	7819      	ldrb	r1, [r3, #0]
 800bbb8:	4bd2      	ldr	r3, [pc, #840]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bbba:	4ad3      	ldr	r2, [pc, #844]	; (800bf08 <ProcessMacCommands+0x3f4>)
 800bbbc:	5499      	strb	r1, [r3, r2]
 800bbbe:	2287      	movs	r2, #135	; 0x87
 800bbc0:	18bb      	adds	r3, r7, r2
 800bbc2:	18ba      	adds	r2, r7, r2
 800bbc4:	7812      	ldrb	r2, [r2, #0]
 800bbc6:	701a      	strb	r2, [r3, #0]
                }
                break;
 800bbc8:	f000 fd3f 	bl	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800bbcc:	2357      	movs	r3, #87	; 0x57
 800bbce:	18fb      	adds	r3, r7, r3
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800bbd4:	2356      	movs	r3, #86	; 0x56
 800bbd6:	18fb      	adds	r3, r7, r3
 800bbd8:	2200      	movs	r2, #0
 800bbda:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800bbdc:	2355      	movs	r3, #85	; 0x55
 800bbde:	18fb      	adds	r3, r7, r3
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800bbe4:	2354      	movs	r3, #84	; 0x54
 800bbe6:	18fb      	adds	r3, r7, r3
 800bbe8:	2200      	movs	r2, #0
 800bbea:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800bbec:	2387      	movs	r3, #135	; 0x87
 800bbee:	18fb      	adds	r3, r7, r3
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	4053      	eors	r3, r2
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d100      	bne.n	800bbfe <ProcessMacCommands+0xea>
 800bbfc:	e0ae      	b.n	800bd5c <ProcessMacCommands+0x248>
                {
                    adrBlockFound = true;
 800bbfe:	2387      	movs	r3, #135	; 0x87
 800bc00:	18fb      	adds	r3, r7, r3
 800bc02:	2201      	movs	r2, #1
 800bc04:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800bc06:	1cfb      	adds	r3, r7, #3
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	18d2      	adds	r2, r2, r3
 800bc10:	2158      	movs	r1, #88	; 0x58
 800bc12:	187b      	adds	r3, r7, r1
 800bc14:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800bc16:	1cba      	adds	r2, r7, #2
 800bc18:	1cfb      	adds	r3, r7, #3
 800bc1a:	7812      	ldrb	r2, [r2, #0]
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	3301      	adds	r3, #1
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	187b      	adds	r3, r7, r1
 800bc28:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800bc2a:	4ab6      	ldr	r2, [pc, #728]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bc2c:	238e      	movs	r3, #142	; 0x8e
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	58d3      	ldr	r3, [r2, r3]
 800bc32:	22ca      	movs	r2, #202	; 0xca
 800bc34:	5c9a      	ldrb	r2, [r3, r2]
 800bc36:	187b      	adds	r3, r7, r1
 800bc38:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bc3a:	4ab2      	ldr	r2, [pc, #712]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bc3c:	238e      	movs	r3, #142	; 0x8e
 800bc3e:	00db      	lsls	r3, r3, #3
 800bc40:	58d2      	ldr	r2, [r2, r3]
 800bc42:	2380      	movs	r3, #128	; 0x80
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	5cd2      	ldrb	r2, [r2, r3]
 800bc48:	187b      	adds	r3, r7, r1
 800bc4a:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bc4c:	4aad      	ldr	r2, [pc, #692]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bc4e:	238e      	movs	r3, #142	; 0x8e
 800bc50:	00db      	lsls	r3, r3, #3
 800bc52:	58d3      	ldr	r3, [r2, r3]
 800bc54:	22d5      	movs	r2, #213	; 0xd5
 800bc56:	569a      	ldrsb	r2, [r3, r2]
 800bc58:	187b      	adds	r3, r7, r1
 800bc5a:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800bc5c:	4aa9      	ldr	r2, [pc, #676]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bc5e:	238e      	movs	r3, #142	; 0x8e
 800bc60:	00db      	lsls	r3, r3, #3
 800bc62:	58d3      	ldr	r3, [r2, r3]
 800bc64:	22d4      	movs	r2, #212	; 0xd4
 800bc66:	569a      	ldrsb	r2, [r3, r2]
 800bc68:	187b      	adds	r3, r7, r1
 800bc6a:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800bc6c:	4aa5      	ldr	r2, [pc, #660]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bc6e:	238e      	movs	r3, #142	; 0x8e
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	58d3      	ldr	r3, [r2, r3]
 800bc74:	22f4      	movs	r2, #244	; 0xf4
 800bc76:	5c9a      	ldrb	r2, [r3, r2]
 800bc78:	000d      	movs	r5, r1
 800bc7a:	197b      	adds	r3, r7, r5
 800bc7c:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800bc7e:	4aa1      	ldr	r2, [pc, #644]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bc80:	238e      	movs	r3, #142	; 0x8e
 800bc82:	00db      	lsls	r3, r3, #3
 800bc84:	58d1      	ldr	r1, [r2, r3]
 800bc86:	197b      	adds	r3, r7, r5
 800bc88:	2288      	movs	r2, #136	; 0x88
 800bc8a:	0092      	lsls	r2, r2, #2
 800bc8c:	588a      	ldr	r2, [r1, r2]
 800bc8e:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800bc90:	4a9c      	ldr	r2, [pc, #624]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bc92:	238e      	movs	r3, #142	; 0x8e
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	58d3      	ldr	r3, [r2, r3]
 800bc98:	7818      	ldrb	r0, [r3, #0]
 800bc9a:	2356      	movs	r3, #86	; 0x56
 800bc9c:	18fc      	adds	r4, r7, r3
 800bc9e:	2357      	movs	r3, #87	; 0x57
 800bca0:	18fa      	adds	r2, r7, r3
 800bca2:	1979      	adds	r1, r7, r5
 800bca4:	2354      	movs	r3, #84	; 0x54
 800bca6:	18fb      	adds	r3, r7, r3
 800bca8:	9301      	str	r3, [sp, #4]
 800bcaa:	2355      	movs	r3, #85	; 0x55
 800bcac:	18fb      	adds	r3, r7, r3
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	0023      	movs	r3, r4
 800bcb2:	f006 ff24 	bl	8012afe <RegionLinkAdrReq>
 800bcb6:	0003      	movs	r3, r0
 800bcb8:	001a      	movs	r2, r3
 800bcba:	216b      	movs	r1, #107	; 0x6b
 800bcbc:	187b      	adds	r3, r7, r1
 800bcbe:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800bcc0:	187b      	adds	r3, r7, r1
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	001a      	movs	r2, r3
 800bcc6:	2307      	movs	r3, #7
 800bcc8:	4013      	ands	r3, r2
 800bcca:	2b07      	cmp	r3, #7
 800bccc:	d11c      	bne.n	800bd08 <ProcessMacCommands+0x1f4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800bcce:	4a8d      	ldr	r2, [pc, #564]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bcd0:	238e      	movs	r3, #142	; 0x8e
 800bcd2:	00db      	lsls	r3, r3, #3
 800bcd4:	58d3      	ldr	r3, [r2, r3]
 800bcd6:	2257      	movs	r2, #87	; 0x57
 800bcd8:	18ba      	adds	r2, r7, r2
 800bcda:	2100      	movs	r1, #0
 800bcdc:	5651      	ldrsb	r1, [r2, r1]
 800bcde:	22d5      	movs	r2, #213	; 0xd5
 800bce0:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800bce2:	4a88      	ldr	r2, [pc, #544]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bce4:	238e      	movs	r3, #142	; 0x8e
 800bce6:	00db      	lsls	r3, r3, #3
 800bce8:	58d3      	ldr	r3, [r2, r3]
 800bcea:	2256      	movs	r2, #86	; 0x56
 800bcec:	18ba      	adds	r2, r7, r2
 800bcee:	2100      	movs	r1, #0
 800bcf0:	5651      	ldrsb	r1, [r2, r1]
 800bcf2:	22d4      	movs	r2, #212	; 0xd4
 800bcf4:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800bcf6:	4a83      	ldr	r2, [pc, #524]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bcf8:	238e      	movs	r3, #142	; 0x8e
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	58d3      	ldr	r3, [r2, r3]
 800bcfe:	2255      	movs	r2, #85	; 0x55
 800bd00:	18ba      	adds	r2, r7, r2
 800bd02:	7811      	ldrb	r1, [r2, #0]
 800bd04:	22f4      	movs	r2, #244	; 0xf4
 800bd06:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800bd08:	2386      	movs	r3, #134	; 0x86
 800bd0a:	18fb      	adds	r3, r7, r3
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	e00c      	b.n	800bd2c <ProcessMacCommands+0x218>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800bd12:	236b      	movs	r3, #107	; 0x6b
 800bd14:	18fb      	adds	r3, r7, r3
 800bd16:	2201      	movs	r2, #1
 800bd18:	0019      	movs	r1, r3
 800bd1a:	2003      	movs	r0, #3
 800bd1c:	f004 f834 	bl	800fd88 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800bd20:	2186      	movs	r1, #134	; 0x86
 800bd22:	187b      	adds	r3, r7, r1
 800bd24:	781a      	ldrb	r2, [r3, #0]
 800bd26:	187b      	adds	r3, r7, r1
 800bd28:	3201      	adds	r2, #1
 800bd2a:	701a      	strb	r2, [r3, #0]
 800bd2c:	2354      	movs	r3, #84	; 0x54
 800bd2e:	18fb      	adds	r3, r7, r3
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	2105      	movs	r1, #5
 800bd34:	0018      	movs	r0, r3
 800bd36:	f7f4 f9ef 	bl	8000118 <__udivsi3>
 800bd3a:	0003      	movs	r3, r0
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	2286      	movs	r2, #134	; 0x86
 800bd40:	18ba      	adds	r2, r7, r2
 800bd42:	7812      	ldrb	r2, [r2, #0]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d3e4      	bcc.n	800bd12 <ProcessMacCommands+0x1fe>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800bd48:	2354      	movs	r3, #84	; 0x54
 800bd4a:	18fb      	adds	r3, r7, r3
 800bd4c:	781a      	ldrb	r2, [r3, #0]
 800bd4e:	1cfb      	adds	r3, r7, #3
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	18d3      	adds	r3, r2, r3
 800bd54:	b2da      	uxtb	r2, r3
 800bd56:	1cfb      	adds	r3, r7, #3
 800bd58:	3a01      	subs	r2, #1
 800bd5a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800bd5c:	46c0      	nop			; (mov r8, r8)
 800bd5e:	f000 fc74 	bl	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800bd62:	1cfb      	adds	r3, r7, #3
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	1cfa      	adds	r2, r7, #3
 800bd68:	1c59      	adds	r1, r3, #1
 800bd6a:	7011      	strb	r1, [r2, #0]
 800bd6c:	001a      	movs	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	189b      	adds	r3, r3, r2
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	4963      	ldr	r1, [pc, #396]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bd76:	228e      	movs	r2, #142	; 0x8e
 800bd78:	00d2      	lsls	r2, r2, #3
 800bd7a:	588a      	ldr	r2, [r1, r2]
 800bd7c:	210f      	movs	r1, #15
 800bd7e:	400b      	ands	r3, r1
 800bd80:	b2d9      	uxtb	r1, r3
 800bd82:	2312      	movs	r3, #18
 800bd84:	33ff      	adds	r3, #255	; 0xff
 800bd86:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800bd88:	4a5e      	ldr	r2, [pc, #376]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bd8a:	238e      	movs	r3, #142	; 0x8e
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	58d2      	ldr	r2, [r2, r3]
 800bd90:	2312      	movs	r3, #18
 800bd92:	33ff      	adds	r3, #255	; 0xff
 800bd94:	5cd3      	ldrb	r3, [r2, r3]
 800bd96:	001a      	movs	r2, r3
 800bd98:	2301      	movs	r3, #1
 800bd9a:	4093      	lsls	r3, r2
 800bd9c:	0019      	movs	r1, r3
 800bd9e:	4a59      	ldr	r2, [pc, #356]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bda0:	238e      	movs	r3, #142	; 0x8e
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	58d2      	ldr	r2, [r2, r3]
 800bda6:	b289      	uxth	r1, r1
 800bda8:	2387      	movs	r3, #135	; 0x87
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800bdae:	2368      	movs	r3, #104	; 0x68
 800bdb0:	18fb      	adds	r3, r7, r3
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	0019      	movs	r1, r3
 800bdb6:	2004      	movs	r0, #4
 800bdb8:	f003 ffe6 	bl	800fd88 <LoRaMacCommandsAddCmd>
 800bdbc:	2287      	movs	r2, #135	; 0x87
 800bdbe:	18bb      	adds	r3, r7, r2
 800bdc0:	18ba      	adds	r2, r7, r2
 800bdc2:	7812      	ldrb	r2, [r2, #0]
 800bdc4:	701a      	strb	r2, [r3, #0]
                break;
 800bdc6:	f000 fc40 	bl	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800bdca:	246b      	movs	r4, #107	; 0x6b
 800bdcc:	193b      	adds	r3, r7, r4
 800bdce:	2207      	movs	r2, #7
 800bdd0:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800bdd2:	1cfb      	adds	r3, r7, #3
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	18d3      	adds	r3, r2, r3
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	091b      	lsrs	r3, r3, #4
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	2207      	movs	r2, #7
 800bde4:	4013      	ands	r3, r2
 800bde6:	b25a      	sxtb	r2, r3
 800bde8:	204c      	movs	r0, #76	; 0x4c
 800bdea:	183b      	adds	r3, r7, r0
 800bdec:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800bdee:	1cfb      	adds	r3, r7, #3
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	18d3      	adds	r3, r2, r3
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	b25b      	sxtb	r3, r3
 800bdfa:	220f      	movs	r2, #15
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	b25a      	sxtb	r2, r3
 800be00:	183b      	adds	r3, r7, r0
 800be02:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800be04:	1cfb      	adds	r3, r7, #3
 800be06:	781a      	ldrb	r2, [r3, #0]
 800be08:	1cfb      	adds	r3, r7, #3
 800be0a:	3201      	adds	r2, #1
 800be0c:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800be0e:	1cfb      	adds	r3, r7, #3
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	1cfa      	adds	r2, r7, #3
 800be14:	1c59      	adds	r1, r3, #1
 800be16:	7011      	strb	r1, [r2, #0]
 800be18:	001a      	movs	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	189b      	adds	r3, r3, r2
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	001a      	movs	r2, r3
 800be22:	183b      	adds	r3, r7, r0
 800be24:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800be26:	1cfb      	adds	r3, r7, #3
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	1cfa      	adds	r2, r7, #3
 800be2c:	1c59      	adds	r1, r3, #1
 800be2e:	7011      	strb	r1, [r2, #0]
 800be30:	001a      	movs	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	189b      	adds	r3, r3, r2
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	021a      	lsls	r2, r3, #8
 800be3a:	183b      	adds	r3, r7, r0
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	431a      	orrs	r2, r3
 800be40:	183b      	adds	r3, r7, r0
 800be42:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800be44:	1cfb      	adds	r3, r7, #3
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	1cfa      	adds	r2, r7, #3
 800be4a:	1c59      	adds	r1, r3, #1
 800be4c:	7011      	strb	r1, [r2, #0]
 800be4e:	001a      	movs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	189b      	adds	r3, r3, r2
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	041a      	lsls	r2, r3, #16
 800be58:	0001      	movs	r1, r0
 800be5a:	187b      	adds	r3, r7, r1
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	431a      	orrs	r2, r3
 800be60:	187b      	adds	r3, r7, r1
 800be62:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800be64:	187b      	adds	r3, r7, r1
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	2264      	movs	r2, #100	; 0x64
 800be6a:	435a      	muls	r2, r3
 800be6c:	187b      	adds	r3, r7, r1
 800be6e:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800be70:	4a24      	ldr	r2, [pc, #144]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800be72:	238e      	movs	r3, #142	; 0x8e
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	58d3      	ldr	r3, [r2, r3]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	187a      	adds	r2, r7, r1
 800be7c:	0011      	movs	r1, r2
 800be7e:	0018      	movs	r0, r3
 800be80:	f006 fe5b 	bl	8012b3a <RegionRxParamSetupReq>
 800be84:	0003      	movs	r3, r0
 800be86:	001a      	movs	r2, r3
 800be88:	193b      	adds	r3, r7, r4
 800be8a:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800be8c:	193b      	adds	r3, r7, r4
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	001a      	movs	r2, r3
 800be92:	2307      	movs	r3, #7
 800be94:	4013      	ands	r3, r2
 800be96:	2b07      	cmp	r3, #7
 800be98:	d11c      	bne.n	800bed4 <ProcessMacCommands+0x3c0>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800be9a:	204c      	movs	r0, #76	; 0x4c
 800be9c:	183b      	adds	r3, r7, r0
 800be9e:	2100      	movs	r1, #0
 800bea0:	5659      	ldrsb	r1, [r3, r1]
 800bea2:	4a18      	ldr	r2, [pc, #96]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bea4:	238e      	movs	r3, #142	; 0x8e
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	58d3      	ldr	r3, [r2, r3]
 800beaa:	b2c9      	uxtb	r1, r1
 800beac:	22fc      	movs	r2, #252	; 0xfc
 800beae:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800beb0:	4a14      	ldr	r2, [pc, #80]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800beb2:	238e      	movs	r3, #142	; 0x8e
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	58d2      	ldr	r2, [r2, r3]
 800beb8:	183b      	adds	r3, r7, r0
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	21f8      	movs	r1, #248	; 0xf8
 800bebe:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800bec0:	183b      	adds	r3, r7, r0
 800bec2:	2101      	movs	r1, #1
 800bec4:	5659      	ldrsb	r1, [r3, r1]
 800bec6:	4a0f      	ldr	r2, [pc, #60]	; (800bf04 <ProcessMacCommands+0x3f0>)
 800bec8:	238e      	movs	r3, #142	; 0x8e
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	58d3      	ldr	r3, [r2, r3]
 800bece:	b2c9      	uxtb	r1, r1
 800bed0:	22f5      	movs	r2, #245	; 0xf5
 800bed2:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 800bed4:	236b      	movs	r3, #107	; 0x6b
 800bed6:	18fb      	adds	r3, r7, r3
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	2168      	movs	r1, #104	; 0x68
 800bedc:	187b      	adds	r3, r7, r1
 800bede:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800bee0:	187b      	adds	r3, r7, r1
 800bee2:	2201      	movs	r2, #1
 800bee4:	0019      	movs	r1, r3
 800bee6:	2005      	movs	r0, #5
 800bee8:	f003 ff4e 	bl	800fd88 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800beec:	f7ff fdfc 	bl	800bae8 <SetMlmeScheduleUplinkIndication>
                break;
 800bef0:	46c0      	nop			; (mov r8, r8)
 800bef2:	2287      	movs	r2, #135	; 0x87
 800bef4:	18bb      	adds	r3, r7, r2
 800bef6:	18ba      	adds	r2, r7, r2
 800bef8:	7812      	ldrb	r2, [r2, #0]
 800befa:	701a      	strb	r2, [r3, #0]
 800befc:	e3a5      	b.n	800c64a <ProcessMacCommands+0xb36>
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	080206a0 	.word	0x080206a0
 800bf04:	20000598 	.word	0x20000598
 800bf08:	00000449 	.word	0x00000449
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800bf0c:	2385      	movs	r3, #133	; 0x85
 800bf0e:	18fb      	adds	r3, r7, r3
 800bf10:	22ff      	movs	r2, #255	; 0xff
 800bf12:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800bf14:	4ac5      	ldr	r2, [pc, #788]	; (800c22c <ProcessMacCommands+0x718>)
 800bf16:	23d7      	movs	r3, #215	; 0xd7
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	58d3      	ldr	r3, [r2, r3]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d010      	beq.n	800bf42 <ProcessMacCommands+0x42e>
 800bf20:	4ac2      	ldr	r2, [pc, #776]	; (800c22c <ProcessMacCommands+0x718>)
 800bf22:	23d7      	movs	r3, #215	; 0xd7
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	58d3      	ldr	r3, [r2, r3]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d009      	beq.n	800bf42 <ProcessMacCommands+0x42e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800bf2e:	4abf      	ldr	r2, [pc, #764]	; (800c22c <ProcessMacCommands+0x718>)
 800bf30:	23d7      	movs	r3, #215	; 0xd7
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	58d3      	ldr	r3, [r2, r3]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2285      	movs	r2, #133	; 0x85
 800bf3a:	18bc      	adds	r4, r7, r2
 800bf3c:	4798      	blx	r3
 800bf3e:	0003      	movs	r3, r0
 800bf40:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800bf42:	2168      	movs	r1, #104	; 0x68
 800bf44:	187b      	adds	r3, r7, r1
 800bf46:	2285      	movs	r2, #133	; 0x85
 800bf48:	18ba      	adds	r2, r7, r2
 800bf4a:	7812      	ldrb	r2, [r2, #0]
 800bf4c:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800bf4e:	1c7b      	adds	r3, r7, #1
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	223f      	movs	r2, #63	; 0x3f
 800bf54:	4013      	ands	r3, r2
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	187b      	adds	r3, r7, r1
 800bf5a:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800bf5c:	187b      	adds	r3, r7, r1
 800bf5e:	2202      	movs	r2, #2
 800bf60:	0019      	movs	r1, r3
 800bf62:	2006      	movs	r0, #6
 800bf64:	f003 ff10 	bl	800fd88 <LoRaMacCommandsAddCmd>
 800bf68:	2287      	movs	r2, #135	; 0x87
 800bf6a:	18bb      	adds	r3, r7, r2
 800bf6c:	18ba      	adds	r2, r7, r2
 800bf6e:	7812      	ldrb	r2, [r2, #0]
 800bf70:	701a      	strb	r2, [r3, #0]
                break;
 800bf72:	e36a      	b.n	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800bf74:	246b      	movs	r4, #107	; 0x6b
 800bf76:	193b      	adds	r3, r7, r4
 800bf78:	2203      	movs	r2, #3
 800bf7a:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800bf7c:	1cfb      	adds	r3, r7, #3
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	1cfa      	adds	r2, r7, #3
 800bf82:	1c59      	adds	r1, r3, #1
 800bf84:	7011      	strb	r1, [r2, #0]
 800bf86:	001a      	movs	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	189b      	adds	r3, r3, r2
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	b25a      	sxtb	r2, r3
 800bf90:	2544      	movs	r5, #68	; 0x44
 800bf92:	197b      	adds	r3, r7, r5
 800bf94:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800bf96:	197b      	adds	r3, r7, r5
 800bf98:	2038      	movs	r0, #56	; 0x38
 800bf9a:	183a      	adds	r2, r7, r0
 800bf9c:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800bf9e:	1cfb      	adds	r3, r7, #3
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	1cfa      	adds	r2, r7, #3
 800bfa4:	1c59      	adds	r1, r3, #1
 800bfa6:	7011      	strb	r1, [r2, #0]
 800bfa8:	001a      	movs	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	189b      	adds	r3, r3, r2
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	001a      	movs	r2, r3
 800bfb2:	183b      	adds	r3, r7, r0
 800bfb4:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bfb6:	1cfb      	adds	r3, r7, #3
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	1cfa      	adds	r2, r7, #3
 800bfbc:	1c59      	adds	r1, r3, #1
 800bfbe:	7011      	strb	r1, [r2, #0]
 800bfc0:	001a      	movs	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	189b      	adds	r3, r3, r2
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	021a      	lsls	r2, r3, #8
 800bfca:	183b      	adds	r3, r7, r0
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	183b      	adds	r3, r7, r0
 800bfd2:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bfd4:	1cfb      	adds	r3, r7, #3
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	1cfa      	adds	r2, r7, #3
 800bfda:	1c59      	adds	r1, r3, #1
 800bfdc:	7011      	strb	r1, [r2, #0]
 800bfde:	001a      	movs	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	189b      	adds	r3, r3, r2
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	041a      	lsls	r2, r3, #16
 800bfe8:	183b      	adds	r3, r7, r0
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	431a      	orrs	r2, r3
 800bfee:	183b      	adds	r3, r7, r0
 800bff0:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800bff2:	183b      	adds	r3, r7, r0
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2264      	movs	r2, #100	; 0x64
 800bff8:	435a      	muls	r2, r3
 800bffa:	183b      	adds	r3, r7, r0
 800bffc:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800bffe:	183b      	adds	r3, r7, r0
 800c000:	2200      	movs	r2, #0
 800c002:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800c004:	1cfb      	adds	r3, r7, #3
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	1cfa      	adds	r2, r7, #3
 800c00a:	1c59      	adds	r1, r3, #1
 800c00c:	7011      	strb	r1, [r2, #0]
 800c00e:	001a      	movs	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	189b      	adds	r3, r3, r2
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	b25a      	sxtb	r2, r3
 800c018:	183b      	adds	r3, r7, r0
 800c01a:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800c01c:	4a83      	ldr	r2, [pc, #524]	; (800c22c <ProcessMacCommands+0x718>)
 800c01e:	238e      	movs	r3, #142	; 0x8e
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	58d3      	ldr	r3, [r2, r3]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	197a      	adds	r2, r7, r5
 800c028:	0011      	movs	r1, r2
 800c02a:	0018      	movs	r0, r3
 800c02c:	f006 fd9b 	bl	8012b66 <RegionNewChannelReq>
 800c030:	0003      	movs	r3, r0
 800c032:	001a      	movs	r2, r3
 800c034:	193b      	adds	r3, r7, r4
 800c036:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800c038:	193b      	adds	r3, r7, r4
 800c03a:	781a      	ldrb	r2, [r3, #0]
 800c03c:	2168      	movs	r1, #104	; 0x68
 800c03e:	187b      	adds	r3, r7, r1
 800c040:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c042:	187b      	adds	r3, r7, r1
 800c044:	2201      	movs	r2, #1
 800c046:	0019      	movs	r1, r3
 800c048:	2007      	movs	r0, #7
 800c04a:	f003 fe9d 	bl	800fd88 <LoRaMacCommandsAddCmd>
                break;
 800c04e:	46c0      	nop			; (mov r8, r8)
 800c050:	2287      	movs	r2, #135	; 0x87
 800c052:	18bb      	adds	r3, r7, r2
 800c054:	18ba      	adds	r2, r7, r2
 800c056:	7812      	ldrb	r2, [r2, #0]
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	e2f6      	b.n	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c05c:	1cfb      	adds	r3, r7, #3
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	1cfa      	adds	r2, r7, #3
 800c062:	1c59      	adds	r1, r3, #1
 800c064:	7011      	strb	r1, [r2, #0]
 800c066:	001a      	movs	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	189b      	adds	r3, r3, r2
 800c06c:	781a      	ldrb	r2, [r3, #0]
 800c06e:	2084      	movs	r0, #132	; 0x84
 800c070:	183b      	adds	r3, r7, r0
 800c072:	210f      	movs	r1, #15
 800c074:	400a      	ands	r2, r1
 800c076:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800c078:	183b      	adds	r3, r7, r0
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d105      	bne.n	800c08c <ProcessMacCommands+0x578>
                {
                    delay++;
 800c080:	2184      	movs	r1, #132	; 0x84
 800c082:	187b      	adds	r3, r7, r1
 800c084:	781a      	ldrb	r2, [r3, #0]
 800c086:	187b      	adds	r3, r7, r1
 800c088:	3201      	adds	r2, #1
 800c08a:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800c08c:	2384      	movs	r3, #132	; 0x84
 800c08e:	18fb      	adds	r3, r7, r3
 800c090:	781a      	ldrb	r2, [r3, #0]
 800c092:	0013      	movs	r3, r2
 800c094:	015b      	lsls	r3, r3, #5
 800c096:	1a9b      	subs	r3, r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	189b      	adds	r3, r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	0019      	movs	r1, r3
 800c0a0:	4a62      	ldr	r2, [pc, #392]	; (800c22c <ProcessMacCommands+0x718>)
 800c0a2:	238e      	movs	r3, #142	; 0x8e
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	58d3      	ldr	r3, [r2, r3]
 800c0a8:	22e4      	movs	r2, #228	; 0xe4
 800c0aa:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800c0ac:	4a5f      	ldr	r2, [pc, #380]	; (800c22c <ProcessMacCommands+0x718>)
 800c0ae:	238e      	movs	r3, #142	; 0x8e
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	58d3      	ldr	r3, [r2, r3]
 800c0b4:	22e4      	movs	r2, #228	; 0xe4
 800c0b6:	589a      	ldr	r2, [r3, r2]
 800c0b8:	495c      	ldr	r1, [pc, #368]	; (800c22c <ProcessMacCommands+0x718>)
 800c0ba:	238e      	movs	r3, #142	; 0x8e
 800c0bc:	00db      	lsls	r3, r3, #3
 800c0be:	58cb      	ldr	r3, [r1, r3]
 800c0c0:	21fa      	movs	r1, #250	; 0xfa
 800c0c2:	0089      	lsls	r1, r1, #2
 800c0c4:	468c      	mov	ip, r1
 800c0c6:	4462      	add	r2, ip
 800c0c8:	21e8      	movs	r1, #232	; 0xe8
 800c0ca:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c0cc:	2368      	movs	r3, #104	; 0x68
 800c0ce:	18fb      	adds	r3, r7, r3
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	0019      	movs	r1, r3
 800c0d4:	2008      	movs	r0, #8
 800c0d6:	f003 fe57 	bl	800fd88 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c0da:	f7ff fd05 	bl	800bae8 <SetMlmeScheduleUplinkIndication>
 800c0de:	2287      	movs	r2, #135	; 0x87
 800c0e0:	18bb      	adds	r3, r7, r2
 800c0e2:	18ba      	adds	r2, r7, r2
 800c0e4:	7812      	ldrb	r2, [r2, #0]
 800c0e6:	701a      	strb	r2, [r3, #0]
                break;
 800c0e8:	e2af      	b.n	800c64a <ProcessMacCommands+0xb36>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800c0ea:	1cfb      	adds	r3, r7, #3
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	1cfa      	adds	r2, r7, #3
 800c0f0:	1c59      	adds	r1, r3, #1
 800c0f2:	7011      	strb	r1, [r2, #0]
 800c0f4:	001a      	movs	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	189a      	adds	r2, r3, r2
 800c0fa:	2176      	movs	r1, #118	; 0x76
 800c0fc:	187b      	adds	r3, r7, r1
 800c0fe:	7812      	ldrb	r2, [r2, #0]
 800c100:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800c102:	2034      	movs	r0, #52	; 0x34
 800c104:	183b      	adds	r3, r7, r0
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800c10a:	183b      	adds	r3, r7, r0
 800c10c:	2200      	movs	r2, #0
 800c10e:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c110:	187b      	adds	r3, r7, r1
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2220      	movs	r2, #32
 800c116:	4013      	ands	r3, r2
 800c118:	d003      	beq.n	800c122 <ProcessMacCommands+0x60e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c11a:	2334      	movs	r3, #52	; 0x34
 800c11c:	18fb      	adds	r3, r7, r3
 800c11e:	2201      	movs	r2, #1
 800c120:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c122:	2376      	movs	r3, #118	; 0x76
 800c124:	18fb      	adds	r3, r7, r3
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2210      	movs	r2, #16
 800c12a:	4013      	ands	r3, r2
 800c12c:	d003      	beq.n	800c136 <ProcessMacCommands+0x622>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800c12e:	2334      	movs	r3, #52	; 0x34
 800c130:	18fb      	adds	r3, r7, r3
 800c132:	2201      	movs	r2, #1
 800c134:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c136:	2376      	movs	r3, #118	; 0x76
 800c138:	18fb      	adds	r3, r7, r3
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	220f      	movs	r2, #15
 800c13e:	4013      	ands	r3, r2
 800c140:	b2da      	uxtb	r2, r3
 800c142:	2134      	movs	r1, #52	; 0x34
 800c144:	187b      	adds	r3, r7, r1
 800c146:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800c148:	4a38      	ldr	r2, [pc, #224]	; (800c22c <ProcessMacCommands+0x718>)
 800c14a:	238e      	movs	r3, #142	; 0x8e
 800c14c:	00db      	lsls	r3, r3, #3
 800c14e:	58d3      	ldr	r3, [r2, r3]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	187a      	adds	r2, r7, r1
 800c154:	0011      	movs	r1, r2
 800c156:	0018      	movs	r0, r3
 800c158:	f006 fd1b 	bl	8012b92 <RegionTxParamSetupReq>
 800c15c:	0003      	movs	r3, r0
 800c15e:	3301      	adds	r3, #1
 800c160:	d05c      	beq.n	800c21c <ProcessMacCommands+0x708>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c162:	4a32      	ldr	r2, [pc, #200]	; (800c22c <ProcessMacCommands+0x718>)
 800c164:	238e      	movs	r3, #142	; 0x8e
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	58d2      	ldr	r2, [r2, r3]
 800c16a:	2034      	movs	r0, #52	; 0x34
 800c16c:	183b      	adds	r3, r7, r0
 800c16e:	7819      	ldrb	r1, [r3, #0]
 800c170:	2380      	movs	r3, #128	; 0x80
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c176:	4a2d      	ldr	r2, [pc, #180]	; (800c22c <ProcessMacCommands+0x718>)
 800c178:	238e      	movs	r3, #142	; 0x8e
 800c17a:	00db      	lsls	r3, r3, #3
 800c17c:	58d2      	ldr	r2, [r2, r3]
 800c17e:	183b      	adds	r3, r7, r0
 800c180:	7859      	ldrb	r1, [r3, #1]
 800c182:	2302      	movs	r3, #2
 800c184:	33ff      	adds	r3, #255	; 0xff
 800c186:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c188:	183b      	adds	r3, r7, r0
 800c18a:	789b      	ldrb	r3, [r3, #2]
 800c18c:	001a      	movs	r2, r3
 800c18e:	4b28      	ldr	r3, [pc, #160]	; (800c230 <ProcessMacCommands+0x71c>)
 800c190:	5c99      	ldrb	r1, [r3, r2]
 800c192:	4a26      	ldr	r2, [pc, #152]	; (800c22c <ProcessMacCommands+0x718>)
 800c194:	238e      	movs	r3, #142	; 0x8e
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	58d4      	ldr	r4, [r2, r3]
 800c19a:	0008      	movs	r0, r1
 800c19c:	f7f4 fc9e 	bl	8000adc <__aeabi_ui2f>
 800c1a0:	1c02      	adds	r2, r0, #0
 800c1a2:	2382      	movs	r3, #130	; 0x82
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c1a8:	2130      	movs	r1, #48	; 0x30
 800c1aa:	187b      	adds	r3, r7, r1
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c1b0:	4a1e      	ldr	r2, [pc, #120]	; (800c22c <ProcessMacCommands+0x718>)
 800c1b2:	238e      	movs	r3, #142	; 0x8e
 800c1b4:	00db      	lsls	r3, r3, #3
 800c1b6:	58d2      	ldr	r2, [r2, r3]
 800c1b8:	2380      	movs	r3, #128	; 0x80
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	5cd2      	ldrb	r2, [r2, r3]
 800c1be:	187b      	adds	r3, r7, r1
 800c1c0:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800c1c2:	4a1a      	ldr	r2, [pc, #104]	; (800c22c <ProcessMacCommands+0x718>)
 800c1c4:	238e      	movs	r3, #142	; 0x8e
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	58d3      	ldr	r3, [r2, r3]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	187a      	adds	r2, r7, r1
 800c1ce:	0011      	movs	r1, r2
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	f006 fb8c 	bl	80128ee <RegionGetPhyParam>
 800c1d6:	0003      	movs	r3, r0
 800c1d8:	001a      	movs	r2, r3
 800c1da:	212c      	movs	r1, #44	; 0x2c
 800c1dc:	187b      	adds	r3, r7, r1
 800c1de:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c1e0:	187b      	adds	r3, r7, r1
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	b259      	sxtb	r1, r3
 800c1e6:	4a11      	ldr	r2, [pc, #68]	; (800c22c <ProcessMacCommands+0x718>)
 800c1e8:	238e      	movs	r3, #142	; 0x8e
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	58d3      	ldr	r3, [r2, r3]
 800c1ee:	22d5      	movs	r2, #213	; 0xd5
 800c1f0:	5698      	ldrsb	r0, [r3, r2]
 800c1f2:	4a0e      	ldr	r2, [pc, #56]	; (800c22c <ProcessMacCommands+0x718>)
 800c1f4:	238e      	movs	r3, #142	; 0x8e
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	58d3      	ldr	r3, [r2, r3]
 800c1fa:	1c04      	adds	r4, r0, #0
 800c1fc:	1c08      	adds	r0, r1, #0
 800c1fe:	b241      	sxtb	r1, r0
 800c200:	b262      	sxtb	r2, r4
 800c202:	4291      	cmp	r1, r2
 800c204:	da00      	bge.n	800c208 <ProcessMacCommands+0x6f4>
 800c206:	1c20      	adds	r0, r4, #0
 800c208:	b241      	sxtb	r1, r0
 800c20a:	22d5      	movs	r2, #213	; 0xd5
 800c20c:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c20e:	2368      	movs	r3, #104	; 0x68
 800c210:	18fb      	adds	r3, r7, r3
 800c212:	2200      	movs	r2, #0
 800c214:	0019      	movs	r1, r3
 800c216:	2009      	movs	r0, #9
 800c218:	f003 fdb6 	bl	800fd88 <LoRaMacCommandsAddCmd>
                }
                break;
 800c21c:	46c0      	nop			; (mov r8, r8)
 800c21e:	2287      	movs	r2, #135	; 0x87
 800c220:	18bb      	adds	r3, r7, r2
 800c222:	18ba      	adds	r2, r7, r2
 800c224:	7812      	ldrb	r2, [r2, #0]
 800c226:	701a      	strb	r2, [r3, #0]
 800c228:	e20f      	b.n	800c64a <ProcessMacCommands+0xb36>
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	20000598 	.word	0x20000598
 800c230:	08020690 	.word	0x08020690
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800c234:	246b      	movs	r4, #107	; 0x6b
 800c236:	193b      	adds	r3, r7, r4
 800c238:	2203      	movs	r2, #3
 800c23a:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800c23c:	1cfb      	adds	r3, r7, #3
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	1cfa      	adds	r2, r7, #3
 800c242:	1c59      	adds	r1, r3, #1
 800c244:	7011      	strb	r1, [r2, #0]
 800c246:	001a      	movs	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	189b      	adds	r3, r3, r2
 800c24c:	781a      	ldrb	r2, [r3, #0]
 800c24e:	2024      	movs	r0, #36	; 0x24
 800c250:	183b      	adds	r3, r7, r0
 800c252:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c254:	1cfb      	adds	r3, r7, #3
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	1cfa      	adds	r2, r7, #3
 800c25a:	1c59      	adds	r1, r3, #1
 800c25c:	7011      	strb	r1, [r2, #0]
 800c25e:	001a      	movs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	189b      	adds	r3, r3, r2
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	001a      	movs	r2, r3
 800c268:	183b      	adds	r3, r7, r0
 800c26a:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c26c:	1cfb      	adds	r3, r7, #3
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	1cfa      	adds	r2, r7, #3
 800c272:	1c59      	adds	r1, r3, #1
 800c274:	7011      	strb	r1, [r2, #0]
 800c276:	001a      	movs	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	189b      	adds	r3, r3, r2
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	021a      	lsls	r2, r3, #8
 800c280:	183b      	adds	r3, r7, r0
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	431a      	orrs	r2, r3
 800c286:	183b      	adds	r3, r7, r0
 800c288:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c28a:	1cfb      	adds	r3, r7, #3
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	1cfa      	adds	r2, r7, #3
 800c290:	1c59      	adds	r1, r3, #1
 800c292:	7011      	strb	r1, [r2, #0]
 800c294:	001a      	movs	r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	189b      	adds	r3, r3, r2
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	041a      	lsls	r2, r3, #16
 800c29e:	0001      	movs	r1, r0
 800c2a0:	187b      	adds	r3, r7, r1
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	431a      	orrs	r2, r3
 800c2a6:	187b      	adds	r3, r7, r1
 800c2a8:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800c2aa:	187b      	adds	r3, r7, r1
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	2264      	movs	r2, #100	; 0x64
 800c2b0:	435a      	muls	r2, r3
 800c2b2:	187b      	adds	r3, r7, r1
 800c2b4:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800c2b6:	4aeb      	ldr	r2, [pc, #940]	; (800c664 <ProcessMacCommands+0xb50>)
 800c2b8:	238e      	movs	r3, #142	; 0x8e
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	58d3      	ldr	r3, [r2, r3]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	187a      	adds	r2, r7, r1
 800c2c2:	0011      	movs	r1, r2
 800c2c4:	0018      	movs	r0, r3
 800c2c6:	f006 fc7a 	bl	8012bbe <RegionDlChannelReq>
 800c2ca:	0003      	movs	r3, r0
 800c2cc:	001a      	movs	r2, r3
 800c2ce:	193b      	adds	r3, r7, r4
 800c2d0:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800c2d2:	193b      	adds	r3, r7, r4
 800c2d4:	781a      	ldrb	r2, [r3, #0]
 800c2d6:	2168      	movs	r1, #104	; 0x68
 800c2d8:	187b      	adds	r3, r7, r1
 800c2da:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c2dc:	187b      	adds	r3, r7, r1
 800c2de:	2201      	movs	r2, #1
 800c2e0:	0019      	movs	r1, r3
 800c2e2:	200a      	movs	r0, #10
 800c2e4:	f003 fd50 	bl	800fd88 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800c2e8:	f7ff fbfe 	bl	800bae8 <SetMlmeScheduleUplinkIndication>
                break;
 800c2ec:	46c0      	nop			; (mov r8, r8)
 800c2ee:	2287      	movs	r2, #135	; 0x87
 800c2f0:	18bb      	adds	r3, r7, r2
 800c2f2:	18ba      	adds	r2, r7, r2
 800c2f4:	7812      	ldrb	r2, [r2, #0]
 800c2f6:	701a      	strb	r2, [r3, #0]
 800c2f8:	e1a7      	b.n	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800c2fa:	241c      	movs	r4, #28
 800c2fc:	193b      	adds	r3, r7, r4
 800c2fe:	0018      	movs	r0, r3
 800c300:	2308      	movs	r3, #8
 800c302:	001a      	movs	r2, r3
 800c304:	2100      	movs	r1, #0
 800c306:	f012 fbad 	bl	801ea64 <memset>
                SysTime_t sysTime = { 0 };
 800c30a:	2514      	movs	r5, #20
 800c30c:	197b      	adds	r3, r7, r5
 800c30e:	0018      	movs	r0, r3
 800c310:	2308      	movs	r3, #8
 800c312:	001a      	movs	r2, r3
 800c314:	2100      	movs	r1, #0
 800c316:	f012 fba5 	bl	801ea64 <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800c31a:	260c      	movs	r6, #12
 800c31c:	19bb      	adds	r3, r7, r6
 800c31e:	0018      	movs	r0, r3
 800c320:	2308      	movs	r3, #8
 800c322:	001a      	movs	r2, r3
 800c324:	2100      	movs	r1, #0
 800c326:	f012 fb9d 	bl	801ea64 <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c32a:	1cfb      	adds	r3, r7, #3
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	1cfa      	adds	r2, r7, #3
 800c330:	1c59      	adds	r1, r3, #1
 800c332:	7011      	strb	r1, [r2, #0]
 800c334:	001a      	movs	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	189b      	adds	r3, r3, r2
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	001a      	movs	r2, r3
 800c33e:	0020      	movs	r0, r4
 800c340:	183b      	adds	r3, r7, r0
 800c342:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c344:	1cfb      	adds	r3, r7, #3
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	1cfa      	adds	r2, r7, #3
 800c34a:	1c59      	adds	r1, r3, #1
 800c34c:	7011      	strb	r1, [r2, #0]
 800c34e:	001a      	movs	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	189b      	adds	r3, r3, r2
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	021a      	lsls	r2, r3, #8
 800c358:	183b      	adds	r3, r7, r0
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	431a      	orrs	r2, r3
 800c35e:	183b      	adds	r3, r7, r0
 800c360:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c362:	1cfb      	adds	r3, r7, #3
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	1cfa      	adds	r2, r7, #3
 800c368:	1c59      	adds	r1, r3, #1
 800c36a:	7011      	strb	r1, [r2, #0]
 800c36c:	001a      	movs	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	189b      	adds	r3, r3, r2
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	041a      	lsls	r2, r3, #16
 800c376:	183b      	adds	r3, r7, r0
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	431a      	orrs	r2, r3
 800c37c:	183b      	adds	r3, r7, r0
 800c37e:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c380:	1cfb      	adds	r3, r7, #3
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	1cfa      	adds	r2, r7, #3
 800c386:	1c59      	adds	r1, r3, #1
 800c388:	7011      	strb	r1, [r2, #0]
 800c38a:	001a      	movs	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	189b      	adds	r3, r3, r2
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	061a      	lsls	r2, r3, #24
 800c394:	183b      	adds	r3, r7, r0
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	431a      	orrs	r2, r3
 800c39a:	183b      	adds	r3, r7, r0
 800c39c:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800c39e:	1cfb      	adds	r3, r7, #3
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	1cfa      	adds	r2, r7, #3
 800c3a4:	1c59      	adds	r1, r3, #1
 800c3a6:	7011      	strb	r1, [r2, #0]
 800c3a8:	001a      	movs	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	189b      	adds	r3, r3, r2
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	b21a      	sxth	r2, r3
 800c3b2:	183b      	adds	r3, r7, r0
 800c3b4:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c3b6:	0001      	movs	r1, r0
 800c3b8:	183b      	adds	r3, r7, r0
 800c3ba:	2204      	movs	r2, #4
 800c3bc:	5e9b      	ldrsh	r3, [r3, r2]
 800c3be:	001a      	movs	r2, r3
 800c3c0:	0013      	movs	r3, r2
 800c3c2:	015b      	lsls	r3, r3, #5
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	189b      	adds	r3, r3, r2
 800c3ca:	00db      	lsls	r3, r3, #3
 800c3cc:	121b      	asrs	r3, r3, #8
 800c3ce:	b21a      	sxth	r2, r3
 800c3d0:	187b      	adds	r3, r7, r1
 800c3d2:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800c3d4:	002c      	movs	r4, r5
 800c3d6:	193b      	adds	r3, r7, r4
 800c3d8:	187a      	adds	r2, r7, r1
 800c3da:	ca03      	ldmia	r2!, {r0, r1}
 800c3dc:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c3de:	193b      	adds	r3, r7, r4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4aa1      	ldr	r2, [pc, #644]	; (800c668 <ProcessMacCommands+0xb54>)
 800c3e4:	189a      	adds	r2, r3, r2
 800c3e6:	193b      	adds	r3, r7, r4
 800c3e8:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800c3ea:	19bb      	adds	r3, r7, r6
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f008 fe59 	bl	80150a4 <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c3f2:	236c      	movs	r3, #108	; 0x6c
 800c3f4:	18fd      	adds	r5, r7, r3
 800c3f6:	499b      	ldr	r1, [pc, #620]	; (800c664 <ProcessMacCommands+0xb50>)
 800c3f8:	23d3      	movs	r3, #211	; 0xd3
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	0026      	movs	r6, r4
 800c3fe:	193a      	adds	r2, r7, r4
 800c400:	2404      	movs	r4, #4
 800c402:	18c8      	adds	r0, r1, r3
 800c404:	1900      	adds	r0, r0, r4
 800c406:	466c      	mov	r4, sp
 800c408:	6800      	ldr	r0, [r0, #0]
 800c40a:	6020      	str	r0, [r4, #0]
 800c40c:	58cb      	ldr	r3, [r1, r3]
 800c40e:	6811      	ldr	r1, [r2, #0]
 800c410:	6852      	ldr	r2, [r2, #4]
 800c412:	0028      	movs	r0, r5
 800c414:	f008 fdc6 	bl	8014fa4 <SysTimeSub>
 800c418:	0034      	movs	r4, r6
 800c41a:	0025      	movs	r5, r4
 800c41c:	193c      	adds	r4, r7, r4
 800c41e:	236c      	movs	r3, #108	; 0x6c
 800c420:	18fb      	adds	r3, r7, r3
 800c422:	260c      	movs	r6, #12
 800c424:	19ba      	adds	r2, r7, r6
 800c426:	4669      	mov	r1, sp
 800c428:	6858      	ldr	r0, [r3, #4]
 800c42a:	6008      	str	r0, [r1, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	6811      	ldr	r1, [r2, #0]
 800c430:	6852      	ldr	r2, [r2, #4]
 800c432:	0020      	movs	r0, r4
 800c434:	f008 fd5e 	bl	8014ef4 <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800c438:	002c      	movs	r4, r5
 800c43a:	193b      	adds	r3, r7, r4
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	6859      	ldr	r1, [r3, #4]
 800c440:	f008 fe04 	bl	801504c <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800c444:	f003 fb1b 	bl	800fa7e <LoRaMacClassBDeviceTimeAns>
                break;
 800c448:	46c0      	nop			; (mov r8, r8)
 800c44a:	2287      	movs	r2, #135	; 0x87
 800c44c:	18bb      	adds	r3, r7, r2
 800c44e:	18ba      	adds	r2, r7, r2
 800c450:	7812      	ldrb	r2, [r2, #0]
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	e0f9      	b.n	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
 800c456:	4b83      	ldr	r3, [pc, #524]	; (800c664 <ProcessMacCommands+0xb50>)
 800c458:	4a84      	ldr	r2, [pc, #528]	; (800c66c <ProcessMacCommands+0xb58>)
 800c45a:	5c9b      	ldrb	r3, [r3, r2]
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d006      	beq.n	800c46e <ProcessMacCommands+0x95a>
 800c460:	4b80      	ldr	r3, [pc, #512]	; (800c664 <ProcessMacCommands+0xb50>)
 800c462:	4a82      	ldr	r2, [pc, #520]	; (800c66c <ProcessMacCommands+0xb58>)
 800c464:	5c9b      	ldrb	r3, [r3, r2]
 800c466:	2b04      	cmp	r3, #4
 800c468:	d001      	beq.n	800c46e <ProcessMacCommands+0x95a>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800c46a:	f003 fae9 	bl	800fa40 <LoRaMacClassBPingSlotInfoAns>
 800c46e:	2287      	movs	r2, #135	; 0x87
 800c470:	18bb      	adds	r3, r7, r2
 800c472:	18ba      	adds	r2, r7, r2
 800c474:	7812      	ldrb	r2, [r2, #0]
 800c476:	701a      	strb	r2, [r3, #0]
                }
                break;
 800c478:	e0e7      	b.n	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800c47a:	207c      	movs	r0, #124	; 0x7c
 800c47c:	183b      	adds	r3, r7, r0
 800c47e:	2203      	movs	r2, #3
 800c480:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800c486:	1cfb      	adds	r3, r7, #3
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	1cfa      	adds	r2, r7, #3
 800c48c:	1c59      	adds	r1, r3, #1
 800c48e:	7011      	strb	r1, [r2, #0]
 800c490:	001a      	movs	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	189b      	adds	r3, r3, r2
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c49a:	1cfb      	adds	r3, r7, #3
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	1cfa      	adds	r2, r7, #3
 800c4a0:	1c59      	adds	r1, r3, #1
 800c4a2:	7011      	strb	r1, [r2, #0]
 800c4a4:	001a      	movs	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	189b      	adds	r3, r3, r2
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	021b      	lsls	r3, r3, #8
 800c4ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c4b4:	1cfb      	adds	r3, r7, #3
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	1cfa      	adds	r2, r7, #3
 800c4ba:	1c59      	adds	r1, r3, #1
 800c4bc:	7011      	strb	r1, [r2, #0]
 800c4be:	001a      	movs	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	189b      	adds	r3, r3, r2
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	041b      	lsls	r3, r3, #16
 800c4c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800c4ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4d0:	2264      	movs	r2, #100	; 0x64
 800c4d2:	4353      	muls	r3, r2
 800c4d4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800c4d6:	1cfb      	adds	r3, r7, #3
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	1cfa      	adds	r2, r7, #3
 800c4dc:	1c59      	adds	r1, r3, #1
 800c4de:	7011      	strb	r1, [r2, #0]
 800c4e0:	001a      	movs	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	189b      	adds	r3, r3, r2
 800c4e6:	781a      	ldrb	r2, [r3, #0]
 800c4e8:	2677      	movs	r6, #119	; 0x77
 800c4ea:	19bb      	adds	r3, r7, r6
 800c4ec:	210f      	movs	r1, #15
 800c4ee:	400a      	ands	r2, r1
 800c4f0:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800c4f2:	0005      	movs	r5, r0
 800c4f4:	183c      	adds	r4, r7, r0
 800c4f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4f8:	19bb      	adds	r3, r7, r6
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	0011      	movs	r1, r2
 800c4fe:	0018      	movs	r0, r3
 800c500:	f003 faa3 	bl	800fa4a <LoRaMacClassBPingSlotChannelReq>
 800c504:	0003      	movs	r3, r0
 800c506:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800c508:	2168      	movs	r1, #104	; 0x68
 800c50a:	187b      	adds	r3, r7, r1
 800c50c:	0028      	movs	r0, r5
 800c50e:	183a      	adds	r2, r7, r0
 800c510:	7812      	ldrb	r2, [r2, #0]
 800c512:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800c514:	187b      	adds	r3, r7, r1
 800c516:	2201      	movs	r2, #1
 800c518:	0019      	movs	r1, r3
 800c51a:	2011      	movs	r0, #17
 800c51c:	f003 fc34 	bl	800fd88 <LoRaMacCommandsAddCmd>
 800c520:	2287      	movs	r2, #135	; 0x87
 800c522:	18bb      	adds	r3, r7, r2
 800c524:	18ba      	adds	r2, r7, r2
 800c526:	7812      	ldrb	r2, [r2, #0]
 800c528:	701a      	strb	r2, [r3, #0]
                break;
 800c52a:	e08e      	b.n	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800c52c:	207e      	movs	r0, #126	; 0x7e
 800c52e:	183b      	adds	r3, r7, r0
 800c530:	2200      	movs	r2, #0
 800c532:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800c534:	247d      	movs	r4, #125	; 0x7d
 800c536:	193b      	adds	r3, r7, r4
 800c538:	2200      	movs	r2, #0
 800c53a:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800c53c:	1cfb      	adds	r3, r7, #3
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	1cfa      	adds	r2, r7, #3
 800c542:	1c59      	adds	r1, r3, #1
 800c544:	7011      	strb	r1, [r2, #0]
 800c546:	001a      	movs	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	189b      	adds	r3, r3, r2
 800c54c:	781a      	ldrb	r2, [r3, #0]
 800c54e:	183b      	adds	r3, r7, r0
 800c550:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800c552:	1cfb      	adds	r3, r7, #3
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	1cfa      	adds	r2, r7, #3
 800c558:	1c59      	adds	r1, r3, #1
 800c55a:	7011      	strb	r1, [r2, #0]
 800c55c:	001a      	movs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	189b      	adds	r3, r3, r2
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	b21a      	sxth	r2, r3
 800c568:	183b      	adds	r3, r7, r0
 800c56a:	2100      	movs	r1, #0
 800c56c:	5e5b      	ldrsh	r3, [r3, r1]
 800c56e:	4313      	orrs	r3, r2
 800c570:	b21a      	sxth	r2, r3
 800c572:	183b      	adds	r3, r7, r0
 800c574:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800c576:	1cfb      	adds	r3, r7, #3
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	1cfa      	adds	r2, r7, #3
 800c57c:	1c59      	adds	r1, r3, #1
 800c57e:	7011      	strb	r1, [r2, #0]
 800c580:	001a      	movs	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	189a      	adds	r2, r3, r2
 800c586:	193b      	adds	r3, r7, r4
 800c588:	7812      	ldrb	r2, [r2, #0]
 800c58a:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800c58c:	4b38      	ldr	r3, [pc, #224]	; (800c670 <ProcessMacCommands+0xb5c>)
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	193b      	adds	r3, r7, r4
 800c592:	7819      	ldrb	r1, [r3, #0]
 800c594:	183b      	adds	r3, r7, r0
 800c596:	881b      	ldrh	r3, [r3, #0]
 800c598:	0018      	movs	r0, r3
 800c59a:	f003 fa62 	bl	800fa62 <LoRaMacClassBBeaconTimingAns>
 800c59e:	2287      	movs	r2, #135	; 0x87
 800c5a0:	18bb      	adds	r3, r7, r2
 800c5a2:	18ba      	adds	r2, r7, r2
 800c5a4:	7812      	ldrb	r2, [r2, #0]
 800c5a6:	701a      	strb	r2, [r3, #0]
                break;
 800c5a8:	e04f      	b.n	800c64a <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	2080      	movs	r0, #128	; 0x80
 800c5ae:	183a      	adds	r2, r7, r0
 800c5b0:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800c5b2:	1cfb      	adds	r3, r7, #3
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	1cfa      	adds	r2, r7, #3
 800c5b8:	1c59      	adds	r1, r3, #1
 800c5ba:	7011      	strb	r1, [r2, #0]
 800c5bc:	001a      	movs	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	189b      	adds	r3, r3, r2
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	183a      	adds	r2, r7, r0
 800c5c6:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c5c8:	1cfb      	adds	r3, r7, #3
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	1cfa      	adds	r2, r7, #3
 800c5ce:	1c59      	adds	r1, r3, #1
 800c5d0:	7011      	strb	r1, [r2, #0]
 800c5d2:	001a      	movs	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	189b      	adds	r3, r3, r2
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	183a      	adds	r2, r7, r0
 800c5de:	6812      	ldr	r2, [r2, #0]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	183a      	adds	r2, r7, r0
 800c5e4:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c5e6:	1cfb      	adds	r3, r7, #3
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	1cfa      	adds	r2, r7, #3
 800c5ec:	1c59      	adds	r1, r3, #1
 800c5ee:	7011      	strb	r1, [r2, #0]
 800c5f0:	001a      	movs	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	189b      	adds	r3, r3, r2
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	041b      	lsls	r3, r3, #16
 800c5fa:	183a      	adds	r2, r7, r0
 800c5fc:	6812      	ldr	r2, [r2, #0]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	183a      	adds	r2, r7, r0
 800c602:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800c604:	183b      	adds	r3, r7, r0
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2264      	movs	r2, #100	; 0x64
 800c60a:	4353      	muls	r3, r2
 800c60c:	183a      	adds	r2, r7, r0
 800c60e:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800c610:	183b      	adds	r3, r7, r0
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	0018      	movs	r0, r3
 800c616:	f003 fa37 	bl	800fa88 <LoRaMacClassBBeaconFreqReq>
 800c61a:	1e03      	subs	r3, r0, #0
 800c61c:	d004      	beq.n	800c628 <ProcessMacCommands+0xb14>
                    {
                        macCmdPayload[0] = 1;
 800c61e:	2368      	movs	r3, #104	; 0x68
 800c620:	18fb      	adds	r3, r7, r3
 800c622:	2201      	movs	r2, #1
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	e003      	b.n	800c630 <ProcessMacCommands+0xb1c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800c628:	2368      	movs	r3, #104	; 0x68
 800c62a:	18fb      	adds	r3, r7, r3
 800c62c:	2200      	movs	r2, #0
 800c62e:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800c630:	2368      	movs	r3, #104	; 0x68
 800c632:	18fb      	adds	r3, r7, r3
 800c634:	2201      	movs	r2, #1
 800c636:	0019      	movs	r1, r3
 800c638:	2013      	movs	r0, #19
 800c63a:	f003 fba5 	bl	800fd88 <LoRaMacCommandsAddCmd>
 800c63e:	2287      	movs	r2, #135	; 0x87
 800c640:	18bb      	adds	r3, r7, r2
 800c642:	18ba      	adds	r2, r7, r2
 800c644:	7812      	ldrb	r2, [r2, #0]
 800c646:	701a      	strb	r2, [r3, #0]
                }
                break;
 800c648:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 800c64a:	1cfa      	adds	r2, r7, #3
 800c64c:	1cbb      	adds	r3, r7, #2
 800c64e:	7812      	ldrb	r2, [r2, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	429a      	cmp	r2, r3
 800c654:	d201      	bcs.n	800c65a <ProcessMacCommands+0xb46>
 800c656:	f7ff fa7e 	bl	800bb56 <ProcessMacCommands+0x42>
 800c65a:	e000      	b.n	800c65e <ProcessMacCommands+0xb4a>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800c65c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800c65e:	46bd      	mov	sp, r7
 800c660:	b023      	add	sp, #140	; 0x8c
 800c662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c664:	20000598 	.word	0x20000598
 800c668:	12d53d80 	.word	0x12d53d80
 800c66c:	0000046c 	.word	0x0000046c
 800c670:	20001424 	.word	0x20001424

0800c674 <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800c674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c676:	b08f      	sub	sp, #60	; 0x3c
 800c678:	af02      	add	r7, sp, #8
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	0008      	movs	r0, r1
 800c67e:	607a      	str	r2, [r7, #4]
 800c680:	0019      	movs	r1, r3
 800c682:	230b      	movs	r3, #11
 800c684:	18fb      	adds	r3, r7, r3
 800c686:	1c02      	adds	r2, r0, #0
 800c688:	701a      	strb	r2, [r3, #0]
 800c68a:	2308      	movs	r3, #8
 800c68c:	18fb      	adds	r3, r7, r3
 800c68e:	1c0a      	adds	r2, r1, #0
 800c690:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c692:	232f      	movs	r3, #47	; 0x2f
 800c694:	18fb      	adds	r3, r7, r3
 800c696:	2203      	movs	r2, #3
 800c698:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800c69a:	4a99      	ldr	r2, [pc, #612]	; (800c900 <Send+0x28c>)
 800c69c:	238e      	movs	r3, #142	; 0x8e
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	58d2      	ldr	r2, [r2, r3]
 800c6a2:	232e      	movs	r3, #46	; 0x2e
 800c6a4:	18fb      	adds	r3, r7, r3
 800c6a6:	21d5      	movs	r1, #213	; 0xd5
 800c6a8:	5c52      	ldrb	r2, [r2, r1]
 800c6aa:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800c6ac:	4a94      	ldr	r2, [pc, #592]	; (800c900 <Send+0x28c>)
 800c6ae:	238e      	movs	r3, #142	; 0x8e
 800c6b0:	00db      	lsls	r3, r3, #3
 800c6b2:	58d2      	ldr	r2, [r2, r3]
 800c6b4:	232d      	movs	r3, #45	; 0x2d
 800c6b6:	18fb      	adds	r3, r7, r3
 800c6b8:	21d4      	movs	r1, #212	; 0xd4
 800c6ba:	5c52      	ldrb	r2, [r2, r1]
 800c6bc:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800c6be:	4a90      	ldr	r2, [pc, #576]	; (800c900 <Send+0x28c>)
 800c6c0:	238e      	movs	r3, #142	; 0x8e
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	58d3      	ldr	r3, [r2, r3]
 800c6c6:	22cc      	movs	r2, #204	; 0xcc
 800c6c8:	589b      	ldr	r3, [r3, r2]
 800c6ca:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800c6cc:	4a8c      	ldr	r2, [pc, #560]	; (800c900 <Send+0x28c>)
 800c6ce:	238e      	movs	r3, #142	; 0x8e
 800c6d0:	00db      	lsls	r3, r3, #3
 800c6d2:	58d2      	ldr	r2, [r2, r3]
 800c6d4:	2389      	movs	r3, #137	; 0x89
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	5cd3      	ldrb	r3, [r2, r3]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <Send+0x6e>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800c6de:	2307      	movs	r3, #7
 800c6e0:	e10a      	b.n	800c8f8 <Send+0x284>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800c6e2:	4a87      	ldr	r2, [pc, #540]	; (800c900 <Send+0x28c>)
 800c6e4:	238e      	movs	r3, #142	; 0x8e
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	58d2      	ldr	r2, [r2, r3]
 800c6ea:	2312      	movs	r3, #18
 800c6ec:	33ff      	adds	r3, #255	; 0xff
 800c6ee:	5cd3      	ldrb	r3, [r2, r3]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d104      	bne.n	800c6fe <Send+0x8a>
    {
        MacCtx.AggregatedTimeOff = 0;
 800c6f4:	4a82      	ldr	r2, [pc, #520]	; (800c900 <Send+0x28c>)
 800c6f6:	23d1      	movs	r3, #209	; 0xd1
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 800c6fe:	202c      	movs	r0, #44	; 0x2c
 800c700:	183b      	adds	r3, r7, r0
 800c702:	2200      	movs	r2, #0
 800c704:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 800c706:	183b      	adds	r3, r7, r0
 800c708:	781a      	ldrb	r2, [r3, #0]
 800c70a:	210f      	movs	r1, #15
 800c70c:	438a      	bics	r2, r1
 800c70e:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800c710:	4a7b      	ldr	r2, [pc, #492]	; (800c900 <Send+0x28c>)
 800c712:	238e      	movs	r3, #142	; 0x8e
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	58d3      	ldr	r3, [r2, r3]
 800c718:	22ca      	movs	r2, #202	; 0xca
 800c71a:	5c9a      	ldrb	r2, [r3, r2]
 800c71c:	183b      	adds	r3, r7, r0
 800c71e:	01d0      	lsls	r0, r2, #7
 800c720:	781a      	ldrb	r2, [r3, #0]
 800c722:	217f      	movs	r1, #127	; 0x7f
 800c724:	400a      	ands	r2, r1
 800c726:	1c11      	adds	r1, r2, #0
 800c728:	1c02      	adds	r2, r0, #0
 800c72a:	430a      	orrs	r2, r1
 800c72c:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800c72e:	4a74      	ldr	r2, [pc, #464]	; (800c900 <Send+0x28c>)
 800c730:	238e      	movs	r3, #142	; 0x8e
 800c732:	00db      	lsls	r3, r3, #3
 800c734:	58d3      	ldr	r3, [r2, r3]
 800c736:	22c8      	movs	r2, #200	; 0xc8
 800c738:	5c9b      	ldrb	r3, [r3, r2]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d106      	bne.n	800c74c <Send+0xd8>
    {
        fCtrl.Bits.FPending      = 1;
 800c73e:	232c      	movs	r3, #44	; 0x2c
 800c740:	18fb      	adds	r3, r7, r3
 800c742:	781a      	ldrb	r2, [r3, #0]
 800c744:	2110      	movs	r1, #16
 800c746:	430a      	orrs	r2, r1
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	e005      	b.n	800c758 <Send+0xe4>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800c74c:	232c      	movs	r3, #44	; 0x2c
 800c74e:	18fb      	adds	r3, r7, r3
 800c750:	781a      	ldrb	r2, [r3, #0]
 800c752:	2110      	movs	r1, #16
 800c754:	438a      	bics	r2, r1
 800c756:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800c758:	4a69      	ldr	r2, [pc, #420]	; (800c900 <Send+0x28c>)
 800c75a:	238e      	movs	r3, #142	; 0x8e
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	58d3      	ldr	r3, [r2, r3]
 800c760:	4a68      	ldr	r2, [pc, #416]	; (800c904 <Send+0x290>)
 800c762:	5c9b      	ldrb	r3, [r3, r2]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d005      	beq.n	800c774 <Send+0x100>
    {
        fCtrl.Bits.Ack = 1;
 800c768:	232c      	movs	r3, #44	; 0x2c
 800c76a:	18fb      	adds	r3, r7, r3
 800c76c:	781a      	ldrb	r2, [r3, #0]
 800c76e:	2120      	movs	r1, #32
 800c770:	430a      	orrs	r2, r1
 800c772:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800c774:	4a62      	ldr	r2, [pc, #392]	; (800c900 <Send+0x28c>)
 800c776:	238e      	movs	r3, #142	; 0x8e
 800c778:	00db      	lsls	r3, r3, #3
 800c77a:	58d1      	ldr	r1, [r2, r3]
 800c77c:	2014      	movs	r0, #20
 800c77e:	183b      	adds	r3, r7, r0
 800c780:	2288      	movs	r2, #136	; 0x88
 800c782:	0092      	lsls	r2, r2, #2
 800c784:	588a      	ldr	r2, [r1, r2]
 800c786:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 800c788:	0001      	movs	r1, r0
 800c78a:	187b      	adds	r3, r7, r1
 800c78c:	2201      	movs	r2, #1
 800c78e:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800c790:	242c      	movs	r4, #44	; 0x2c
 800c792:	193b      	adds	r3, r7, r4
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	061b      	lsls	r3, r3, #24
 800c798:	0fdb      	lsrs	r3, r3, #31
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	1e5a      	subs	r2, r3, #1
 800c79e:	4193      	sbcs	r3, r2
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	0008      	movs	r0, r1
 800c7a4:	183b      	adds	r3, r7, r0
 800c7a6:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800c7a8:	4a55      	ldr	r2, [pc, #340]	; (800c900 <Send+0x28c>)
 800c7aa:	238e      	movs	r3, #142	; 0x8e
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	58d3      	ldr	r3, [r2, r3]
 800c7b0:	22cc      	movs	r2, #204	; 0xcc
 800c7b2:	589a      	ldr	r2, [r3, r2]
 800c7b4:	183b      	adds	r3, r7, r0
 800c7b6:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800c7b8:	4a51      	ldr	r2, [pc, #324]	; (800c900 <Send+0x28c>)
 800c7ba:	238e      	movs	r3, #142	; 0x8e
 800c7bc:	00db      	lsls	r3, r3, #3
 800c7be:	58d3      	ldr	r3, [r2, r3]
 800c7c0:	22d0      	movs	r2, #208	; 0xd0
 800c7c2:	5a9a      	ldrh	r2, [r3, r2]
 800c7c4:	183b      	adds	r3, r7, r0
 800c7c6:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800c7c8:	4a4d      	ldr	r2, [pc, #308]	; (800c900 <Send+0x28c>)
 800c7ca:	238e      	movs	r3, #142	; 0x8e
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	58d3      	ldr	r3, [r2, r3]
 800c7d0:	22d2      	movs	r2, #210	; 0xd2
 800c7d2:	5a9a      	ldrh	r2, [r3, r2]
 800c7d4:	183b      	adds	r3, r7, r0
 800c7d6:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800c7d8:	4a49      	ldr	r2, [pc, #292]	; (800c900 <Send+0x28c>)
 800c7da:	238e      	movs	r3, #142	; 0x8e
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	58d3      	ldr	r3, [r2, r3]
 800c7e0:	22d5      	movs	r2, #213	; 0xd5
 800c7e2:	569a      	ldrsb	r2, [r3, r2]
 800c7e4:	183b      	adds	r3, r7, r0
 800c7e6:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800c7e8:	4a45      	ldr	r2, [pc, #276]	; (800c900 <Send+0x28c>)
 800c7ea:	238e      	movs	r3, #142	; 0x8e
 800c7ec:	00db      	lsls	r3, r3, #3
 800c7ee:	58d3      	ldr	r3, [r2, r3]
 800c7f0:	22d4      	movs	r2, #212	; 0xd4
 800c7f2:	569a      	ldrsb	r2, [r3, r2]
 800c7f4:	183b      	adds	r3, r7, r0
 800c7f6:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800c7f8:	4a41      	ldr	r2, [pc, #260]	; (800c900 <Send+0x28c>)
 800c7fa:	238e      	movs	r3, #142	; 0x8e
 800c7fc:	00db      	lsls	r3, r3, #3
 800c7fe:	58d2      	ldr	r2, [r2, r3]
 800c800:	2380      	movs	r3, #128	; 0x80
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	5cd2      	ldrb	r2, [r2, r3]
 800c806:	183b      	adds	r3, r7, r0
 800c808:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800c80a:	4a3d      	ldr	r2, [pc, #244]	; (800c900 <Send+0x28c>)
 800c80c:	238e      	movs	r3, #142	; 0x8e
 800c80e:	00db      	lsls	r3, r3, #3
 800c810:	58d3      	ldr	r3, [r2, r3]
 800c812:	781a      	ldrb	r2, [r3, #0]
 800c814:	183b      	adds	r3, r7, r0
 800c816:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800c818:	4a39      	ldr	r2, [pc, #228]	; (800c900 <Send+0x28c>)
 800c81a:	238e      	movs	r3, #142	; 0x8e
 800c81c:	00db      	lsls	r3, r3, #3
 800c81e:	58d3      	ldr	r3, [r2, r3]
 800c820:	33d5      	adds	r3, #213	; 0xd5
 800c822:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 800c824:	4a36      	ldr	r2, [pc, #216]	; (800c900 <Send+0x28c>)
 800c826:	238e      	movs	r3, #142	; 0x8e
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	58d3      	ldr	r3, [r2, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800c82c:	33d4      	adds	r3, #212	; 0xd4
 800c82e:	001a      	movs	r2, r3
 800c830:	2328      	movs	r3, #40	; 0x28
 800c832:	18fb      	adds	r3, r7, r3
 800c834:	1838      	adds	r0, r7, r0
 800c836:	f003 f83b 	bl	800f8b0 <LoRaMacAdrCalcNext>
 800c83a:	0003      	movs	r3, r0
 800c83c:	0019      	movs	r1, r3
 800c83e:	0026      	movs	r6, r4
 800c840:	193b      	adds	r3, r7, r4
 800c842:	2201      	movs	r2, #1
 800c844:	400a      	ands	r2, r1
 800c846:	0190      	lsls	r0, r2, #6
 800c848:	781a      	ldrb	r2, [r3, #0]
 800c84a:	2140      	movs	r1, #64	; 0x40
 800c84c:	438a      	bics	r2, r1
 800c84e:	1c11      	adds	r1, r2, #0
 800c850:	1c02      	adds	r2, r0, #0
 800c852:	430a      	orrs	r2, r1
 800c854:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800c856:	232f      	movs	r3, #47	; 0x2f
 800c858:	18fc      	adds	r4, r7, r3
 800c85a:	687d      	ldr	r5, [r7, #4]
 800c85c:	220b      	movs	r2, #11
 800c85e:	18bb      	adds	r3, r7, r2
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	19b9      	adds	r1, r7, r6
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	2608      	movs	r6, #8
 800c868:	19bb      	adds	r3, r7, r6
 800c86a:	881b      	ldrh	r3, [r3, #0]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	002b      	movs	r3, r5
 800c870:	f000 fc18 	bl	800d0a4 <PrepareFrame>
 800c874:	0003      	movs	r3, r0
 800c876:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800c878:	232f      	movs	r3, #47	; 0x2f
 800c87a:	18fb      	adds	r3, r7, r3
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d004      	beq.n	800c88c <Send+0x218>
 800c882:	232f      	movs	r3, #47	; 0x2f
 800c884:	18fb      	adds	r3, r7, r3
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	2b0a      	cmp	r3, #10
 800c88a:	d106      	bne.n	800c89a <Send+0x226>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 800c88c:	232f      	movs	r3, #47	; 0x2f
 800c88e:	18fc      	adds	r4, r7, r3
 800c890:	2000      	movs	r0, #0
 800c892:	f000 f89b 	bl	800c9cc <ScheduleTx>
 800c896:	0003      	movs	r3, r0
 800c898:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800c89a:	232f      	movs	r3, #47	; 0x2f
 800c89c:	18fb      	adds	r3, r7, r3
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d012      	beq.n	800c8ca <Send+0x256>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800c8a4:	4a16      	ldr	r2, [pc, #88]	; (800c900 <Send+0x28c>)
 800c8a6:	238e      	movs	r3, #142	; 0x8e
 800c8a8:	00db      	lsls	r3, r3, #3
 800c8aa:	58d3      	ldr	r3, [r2, r3]
 800c8ac:	222e      	movs	r2, #46	; 0x2e
 800c8ae:	18ba      	adds	r2, r7, r2
 800c8b0:	21d5      	movs	r1, #213	; 0xd5
 800c8b2:	7812      	ldrb	r2, [r2, #0]
 800c8b4:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800c8b6:	4a12      	ldr	r2, [pc, #72]	; (800c900 <Send+0x28c>)
 800c8b8:	238e      	movs	r3, #142	; 0x8e
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	58d3      	ldr	r3, [r2, r3]
 800c8be:	222d      	movs	r2, #45	; 0x2d
 800c8c0:	18ba      	adds	r2, r7, r2
 800c8c2:	21d4      	movs	r1, #212	; 0xd4
 800c8c4:	7812      	ldrb	r2, [r2, #0]
 800c8c6:	545a      	strb	r2, [r3, r1]
 800c8c8:	e013      	b.n	800c8f2 <Send+0x27e>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 800c8ca:	4a0d      	ldr	r2, [pc, #52]	; (800c900 <Send+0x28c>)
 800c8cc:	238e      	movs	r3, #142	; 0x8e
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	58d3      	ldr	r3, [r2, r3]
 800c8d2:	4a0c      	ldr	r2, [pc, #48]	; (800c904 <Send+0x290>)
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800c8d8:	4a09      	ldr	r2, [pc, #36]	; (800c900 <Send+0x28c>)
 800c8da:	238e      	movs	r3, #142	; 0x8e
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	58d3      	ldr	r3, [r2, r3]
 800c8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8e2:	21cc      	movs	r1, #204	; 0xcc
 800c8e4:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800c8e6:	f003 fad9 	bl	800fe9c <LoRaMacCommandsRemoveNoneStickyCmds>
 800c8ea:	1e03      	subs	r3, r0, #0
 800c8ec:	d001      	beq.n	800c8f2 <Send+0x27e>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c8ee:	2313      	movs	r3, #19
 800c8f0:	e002      	b.n	800c8f8 <Send+0x284>
        }
    }
    return status;
 800c8f2:	232f      	movs	r3, #47	; 0x2f
 800c8f4:	18fb      	adds	r3, r7, r3
 800c8f6:	781b      	ldrb	r3, [r3, #0]
}
 800c8f8:	0018      	movs	r0, r3
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	b00d      	add	sp, #52	; 0x34
 800c8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c900:	20000598 	.word	0x20000598
 800c904:	0000021a 	.word	0x0000021a

0800c908 <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800c908:	b5b0      	push	{r4, r5, r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	0002      	movs	r2, r0
 800c910:	1dfb      	adds	r3, r7, #7
 800c912:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c914:	230e      	movs	r3, #14
 800c916:	18fb      	adds	r3, r7, r3
 800c918:	2200      	movs	r2, #0
 800c91a:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800c91c:	230c      	movs	r3, #12
 800c91e:	18fb      	adds	r3, r7, r3
 800c920:	2200      	movs	r2, #0
 800c922:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 800c924:	230f      	movs	r3, #15
 800c926:	18fb      	adds	r3, r7, r3
 800c928:	2201      	movs	r2, #1
 800c92a:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 800c92c:	1dfb      	adds	r3, r7, #7
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2bff      	cmp	r3, #255	; 0xff
 800c932:	d12d      	bne.n	800c990 <SendReJoinReq+0x88>
    {
        case JOIN_REQ:
        {
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800c934:	4a21      	ldr	r2, [pc, #132]	; (800c9bc <SendReJoinReq+0xb4>)
 800c936:	2386      	movs	r3, #134	; 0x86
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	2100      	movs	r1, #0
 800c93c:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800c93e:	4a1f      	ldr	r2, [pc, #124]	; (800c9bc <SendReJoinReq+0xb4>)
 800c940:	2388      	movs	r3, #136	; 0x88
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	491e      	ldr	r1, [pc, #120]	; (800c9c0 <SendReJoinReq+0xb8>)
 800c946:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800c948:	4a1c      	ldr	r2, [pc, #112]	; (800c9bc <SendReJoinReq+0xb4>)
 800c94a:	238a      	movs	r3, #138	; 0x8a
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	21ff      	movs	r1, #255	; 0xff
 800c950:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800c952:	200c      	movs	r0, #12
 800c954:	183b      	adds	r3, r7, r0
 800c956:	781a      	ldrb	r2, [r3, #0]
 800c958:	211f      	movs	r1, #31
 800c95a:	400a      	ands	r2, r1
 800c95c:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800c95e:	183b      	adds	r3, r7, r0
 800c960:	7819      	ldrb	r1, [r3, #0]
 800c962:	4a16      	ldr	r2, [pc, #88]	; (800c9bc <SendReJoinReq+0xb4>)
 800c964:	2316      	movs	r3, #22
 800c966:	33ff      	adds	r3, #255	; 0xff
 800c968:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, MacCtx.JoinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c96a:	4b14      	ldr	r3, [pc, #80]	; (800c9bc <SendReJoinReq+0xb4>)
 800c96c:	6859      	ldr	r1, [r3, #4]
 800c96e:	4b15      	ldr	r3, [pc, #84]	; (800c9c4 <SendReJoinReq+0xbc>)
 800c970:	2208      	movs	r2, #8
 800c972:	0018      	movs	r0, r3
 800c974:	f008 fd78 	bl	8015468 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, MacCtx.DevEui, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c978:	4b10      	ldr	r3, [pc, #64]	; (800c9bc <SendReJoinReq+0xb4>)
 800c97a:	6819      	ldr	r1, [r3, #0]
 800c97c:	4b12      	ldr	r3, [pc, #72]	; (800c9c8 <SendReJoinReq+0xc0>)
 800c97e:	2208      	movs	r2, #8
 800c980:	0018      	movs	r0, r3
 800c982:	f008 fd71 	bl	8015468 <memcpy1>

            allowDelayedTx = false;
 800c986:	230f      	movs	r3, #15
 800c988:	18fb      	adds	r3, r7, r3
 800c98a:	2200      	movs	r2, #0
 800c98c:	701a      	strb	r2, [r3, #0]

            break;
 800c98e:	e004      	b.n	800c99a <SendReJoinReq+0x92>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c990:	230e      	movs	r3, #14
 800c992:	18fb      	adds	r3, r7, r3
 800c994:	2202      	movs	r2, #2
 800c996:	701a      	strb	r2, [r3, #0]
            break;
 800c998:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800c99a:	250e      	movs	r5, #14
 800c99c:	197c      	adds	r4, r7, r5
 800c99e:	230f      	movs	r3, #15
 800c9a0:	18fb      	adds	r3, r7, r3
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f000 f811 	bl	800c9cc <ScheduleTx>
 800c9aa:	0003      	movs	r3, r0
 800c9ac:	7023      	strb	r3, [r4, #0]
    return status;
 800c9ae:	197b      	adds	r3, r7, r5
 800c9b0:	781b      	ldrb	r3, [r3, #0]
}
 800c9b2:	0018      	movs	r0, r3
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	b004      	add	sp, #16
 800c9b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9ba:	46c0      	nop			; (mov r8, r8)
 800c9bc:	20000598 	.word	0x20000598
 800c9c0:	200005a2 	.word	0x200005a2
 800c9c4:	200006ae 	.word	0x200006ae
 800c9c8:	200006b6 	.word	0x200006b6

0800c9cc <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ce:	b08b      	sub	sp, #44	; 0x2c
 800c9d0:	af02      	add	r7, sp, #8
 800c9d2:	0002      	movs	r2, r0
 800c9d4:	1dfb      	adds	r3, r7, #7
 800c9d6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c9d8:	231f      	movs	r3, #31
 800c9da:	18fb      	adds	r3, r7, r3
 800c9dc:	2203      	movs	r2, #3
 800c9de:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800c9e8:	4ab1      	ldr	r2, [pc, #708]	; (800ccb0 <ScheduleTx+0x2e4>)
 800c9ea:	238e      	movs	r3, #142	; 0x8e
 800c9ec:	00db      	lsls	r3, r3, #3
 800c9ee:	58d2      	ldr	r2, [r2, r3]
 800c9f0:	238a      	movs	r3, #138	; 0x8a
 800c9f2:	005b      	lsls	r3, r3, #1
 800c9f4:	5cd3      	ldrb	r3, [r2, r3]
 800c9f6:	0018      	movs	r0, r3
 800c9f8:	f000 f9c4 	bl	800cd84 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
 800c9fc:	4aac      	ldr	r2, [pc, #688]	; (800ccb0 <ScheduleTx+0x2e4>)
 800c9fe:	23d1      	movs	r3, #209	; 0xd1
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	58d2      	ldr	r2, [r2, r3]
 800ca04:	210c      	movs	r1, #12
 800ca06:	187b      	adds	r3, r7, r1
 800ca08:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ca0a:	4aa9      	ldr	r2, [pc, #676]	; (800ccb0 <ScheduleTx+0x2e4>)
 800ca0c:	238e      	movs	r3, #142	; 0x8e
 800ca0e:	00db      	lsls	r3, r3, #3
 800ca10:	58d3      	ldr	r3, [r2, r3]
 800ca12:	22d5      	movs	r2, #213	; 0xd5
 800ca14:	569a      	ldrsb	r2, [r3, r2]
 800ca16:	187b      	adds	r3, r7, r1
 800ca18:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800ca1a:	4aa5      	ldr	r2, [pc, #660]	; (800ccb0 <ScheduleTx+0x2e4>)
 800ca1c:	238e      	movs	r3, #142	; 0x8e
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	58d2      	ldr	r2, [r2, r3]
 800ca22:	2389      	movs	r3, #137	; 0x89
 800ca24:	005b      	lsls	r3, r3, #1
 800ca26:	5cd2      	ldrb	r2, [r2, r3]
 800ca28:	187b      	adds	r3, r7, r1
 800ca2a:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800ca2c:	4aa0      	ldr	r2, [pc, #640]	; (800ccb0 <ScheduleTx+0x2e4>)
 800ca2e:	238e      	movs	r3, #142	; 0x8e
 800ca30:	00db      	lsls	r3, r3, #3
 800ca32:	58d2      	ldr	r2, [r2, r3]
 800ca34:	2389      	movs	r3, #137	; 0x89
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	5cd3      	ldrb	r3, [r2, r3]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d104      	bne.n	800ca48 <ScheduleTx+0x7c>
    {
        nextChan.Joined = false;
 800ca3e:	230c      	movs	r3, #12
 800ca40:	18fb      	adds	r3, r7, r3
 800ca42:	2200      	movs	r2, #0
 800ca44:	725a      	strb	r2, [r3, #9]
 800ca46:	e003      	b.n	800ca50 <ScheduleTx+0x84>
    }
    else
    {
        nextChan.Joined = true;
 800ca48:	230c      	movs	r3, #12
 800ca4a:	18fb      	adds	r3, r7, r3
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800ca50:	4a97      	ldr	r2, [pc, #604]	; (800ccb0 <ScheduleTx+0x2e4>)
 800ca52:	23d0      	movs	r3, #208	; 0xd0
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	58d2      	ldr	r2, [r2, r3]
 800ca58:	210c      	movs	r1, #12
 800ca5a:	187b      	adds	r3, r7, r1
 800ca5c:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800ca5e:	4a94      	ldr	r2, [pc, #592]	; (800ccb0 <ScheduleTx+0x2e4>)
 800ca60:	238e      	movs	r3, #142	; 0x8e
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	58d3      	ldr	r3, [r2, r3]
 800ca66:	7818      	ldrb	r0, [r3, #0]
 800ca68:	4a91      	ldr	r2, [pc, #580]	; (800ccb0 <ScheduleTx+0x2e4>)
 800ca6a:	238e      	movs	r3, #142	; 0x8e
 800ca6c:	00db      	lsls	r3, r3, #3
 800ca6e:	58d3      	ldr	r3, [r2, r3]
 800ca70:	3314      	adds	r3, #20
 800ca72:	33ff      	adds	r3, #255	; 0xff
 800ca74:	001a      	movs	r2, r3
 800ca76:	261f      	movs	r6, #31
 800ca78:	19bc      	adds	r4, r7, r6
 800ca7a:	2318      	movs	r3, #24
 800ca7c:	18fd      	adds	r5, r7, r3
 800ca7e:	1879      	adds	r1, r7, r1
 800ca80:	4b8c      	ldr	r3, [pc, #560]	; (800ccb4 <ScheduleTx+0x2e8>)
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	002b      	movs	r3, r5
 800ca86:	f006 f8e8 	bl	8012c5a <RegionNextChannel>
 800ca8a:	0003      	movs	r3, r0
 800ca8c:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800ca8e:	19bb      	adds	r3, r7, r6
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d026      	beq.n	800cae4 <ScheduleTx+0x118>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800ca96:	231f      	movs	r3, #31
 800ca98:	18fb      	adds	r3, r7, r3
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b0b      	cmp	r3, #11
 800ca9e:	d11d      	bne.n	800cadc <ScheduleTx+0x110>
 800caa0:	1dfb      	adds	r3, r7, #7
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d019      	beq.n	800cadc <ScheduleTx+0x110>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d014      	beq.n	800cad8 <ScheduleTx+0x10c>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800caae:	4a80      	ldr	r2, [pc, #512]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cab0:	23d5      	movs	r3, #213	; 0xd5
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	58d3      	ldr	r3, [r2, r3]
 800cab6:	2220      	movs	r2, #32
 800cab8:	431a      	orrs	r2, r3
 800caba:	0011      	movs	r1, r2
 800cabc:	4a7c      	ldr	r2, [pc, #496]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cabe:	23d5      	movs	r3, #213	; 0xd5
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800cac4:	69ba      	ldr	r2, [r7, #24]
 800cac6:	4b7c      	ldr	r3, [pc, #496]	; (800ccb8 <ScheduleTx+0x2ec>)
 800cac8:	0011      	movs	r1, r2
 800caca:	0018      	movs	r0, r3
 800cacc:	f008 fbba 	bl	8015244 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800cad0:	4b79      	ldr	r3, [pc, #484]	; (800ccb8 <ScheduleTx+0x2ec>)
 800cad2:	0018      	movs	r0, r3
 800cad4:	f008 fbe2 	bl	801529c <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	e0e5      	b.n	800cca8 <ScheduleTx+0x2dc>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800cadc:	231f      	movs	r3, #31
 800cade:	18fb      	adds	r3, r7, r3
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	e0e1      	b.n	800cca8 <ScheduleTx+0x2dc>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cae4:	4a72      	ldr	r2, [pc, #456]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cae6:	238e      	movs	r3, #142	; 0x8e
 800cae8:	00db      	lsls	r3, r3, #3
 800caea:	58d3      	ldr	r3, [r2, r3]
 800caec:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800caee:	4a70      	ldr	r2, [pc, #448]	; (800ccb0 <ScheduleTx+0x2e4>)
 800caf0:	238e      	movs	r3, #142	; 0x8e
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	58d3      	ldr	r3, [r2, r3]
 800caf6:	7818      	ldrb	r0, [r3, #0]
 800caf8:	4a6d      	ldr	r2, [pc, #436]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cafa:	238e      	movs	r3, #142	; 0x8e
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	58d2      	ldr	r2, [r2, r3]
 800cb00:	2302      	movs	r3, #2
 800cb02:	33ff      	adds	r3, #255	; 0xff
 800cb04:	5cd1      	ldrb	r1, [r2, r3]
 800cb06:	4a6a      	ldr	r2, [pc, #424]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb08:	238e      	movs	r3, #142	; 0x8e
 800cb0a:	00db      	lsls	r3, r3, #3
 800cb0c:	58d3      	ldr	r3, [r2, r3]
 800cb0e:	22d5      	movs	r2, #213	; 0xd5
 800cb10:	569d      	ldrsb	r5, [r3, r2]
 800cb12:	4a67      	ldr	r2, [pc, #412]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb14:	238e      	movs	r3, #142	; 0x8e
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	58d3      	ldr	r3, [r2, r3]
 800cb1a:	22f5      	movs	r2, #245	; 0xf5
 800cb1c:	5c9b      	ldrb	r3, [r3, r2]
 800cb1e:	b25b      	sxtb	r3, r3
 800cb20:	002a      	movs	r2, r5
 800cb22:	f006 f8e0 	bl	8012ce6 <RegionApplyDrOffset>
 800cb26:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cb28:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800cb2a:	4a61      	ldr	r2, [pc, #388]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb2c:	238e      	movs	r3, #142	; 0x8e
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cb32:	22dc      	movs	r2, #220	; 0xdc
 800cb34:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800cb36:	4a5e      	ldr	r2, [pc, #376]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb38:	238e      	movs	r3, #142	; 0x8e
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cb3e:	22d8      	movs	r2, #216	; 0xd8
 800cb40:	589a      	ldr	r2, [r3, r2]
 800cb42:	4b5e      	ldr	r3, [pc, #376]	; (800ccbc <ScheduleTx+0x2f0>)
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	0013      	movs	r3, r2
 800cb48:	0002      	movs	r2, r0
 800cb4a:	0020      	movs	r0, r4
 800cb4c:	f005 ff7e 	bl	8012a4c <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cb50:	4a57      	ldr	r2, [pc, #348]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb52:	238e      	movs	r3, #142	; 0x8e
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	58d3      	ldr	r3, [r2, r3]
 800cb58:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800cb5a:	4a55      	ldr	r2, [pc, #340]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb5c:	238e      	movs	r3, #142	; 0x8e
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	58d3      	ldr	r3, [r2, r3]
 800cb62:	22fc      	movs	r2, #252	; 0xfc
 800cb64:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cb66:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800cb68:	4a51      	ldr	r2, [pc, #324]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb6a:	238e      	movs	r3, #142	; 0x8e
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cb70:	22dc      	movs	r2, #220	; 0xdc
 800cb72:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800cb74:	4a4e      	ldr	r2, [pc, #312]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb76:	238e      	movs	r3, #142	; 0x8e
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800cb7c:	22d8      	movs	r2, #216	; 0xd8
 800cb7e:	589a      	ldr	r2, [r3, r2]
 800cb80:	4b4f      	ldr	r3, [pc, #316]	; (800ccc0 <ScheduleTx+0x2f4>)
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	0013      	movs	r3, r2
 800cb86:	0022      	movs	r2, r4
 800cb88:	f005 ff60 	bl	8012a4c <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800cb8c:	4a48      	ldr	r2, [pc, #288]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cb8e:	238e      	movs	r3, #142	; 0x8e
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	58d2      	ldr	r2, [r2, r3]
 800cb94:	2389      	movs	r3, #137	; 0x89
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	5cd3      	ldrb	r3, [r2, r3]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d11e      	bne.n	800cbdc <ScheduleTx+0x210>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800cb9e:	4a44      	ldr	r2, [pc, #272]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cba0:	238e      	movs	r3, #142	; 0x8e
 800cba2:	00db      	lsls	r3, r3, #3
 800cba4:	58d3      	ldr	r3, [r2, r3]
 800cba6:	22ec      	movs	r2, #236	; 0xec
 800cba8:	589b      	ldr	r3, [r3, r2]
 800cbaa:	4941      	ldr	r1, [pc, #260]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cbac:	22f6      	movs	r2, #246	; 0xf6
 800cbae:	0092      	lsls	r2, r2, #2
 800cbb0:	588a      	ldr	r2, [r1, r2]
 800cbb2:	1899      	adds	r1, r3, r2
 800cbb4:	4a3e      	ldr	r2, [pc, #248]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cbb6:	23f1      	movs	r3, #241	; 0xf1
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800cbbc:	4a3c      	ldr	r2, [pc, #240]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cbbe:	238e      	movs	r3, #142	; 0x8e
 800cbc0:	00db      	lsls	r3, r3, #3
 800cbc2:	58d3      	ldr	r3, [r2, r3]
 800cbc4:	22f0      	movs	r2, #240	; 0xf0
 800cbc6:	589b      	ldr	r3, [r3, r2]
 800cbc8:	4939      	ldr	r1, [pc, #228]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cbca:	22fb      	movs	r2, #251	; 0xfb
 800cbcc:	0092      	lsls	r2, r2, #2
 800cbce:	588a      	ldr	r2, [r1, r2]
 800cbd0:	1899      	adds	r1, r3, r2
 800cbd2:	4a37      	ldr	r2, [pc, #220]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cbd4:	23f2      	movs	r3, #242	; 0xf2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	50d1      	str	r1, [r2, r3]
 800cbda:	e03d      	b.n	800cc58 <ScheduleTx+0x28c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800cbdc:	2308      	movs	r3, #8
 800cbde:	18fb      	adds	r3, r7, r3
 800cbe0:	0018      	movs	r0, r3
 800cbe2:	f003 f9bf 	bl	800ff64 <LoRaMacCommandsGetSizeSerializedCmds>
 800cbe6:	1e03      	subs	r3, r0, #0
 800cbe8:	d001      	beq.n	800cbee <ScheduleTx+0x222>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cbea:	2313      	movs	r3, #19
 800cbec:	e05c      	b.n	800cca8 <ScheduleTx+0x2dc>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800cbee:	4b30      	ldr	r3, [pc, #192]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cbf0:	4a34      	ldr	r2, [pc, #208]	; (800ccc4 <ScheduleTx+0x2f8>)
 800cbf2:	5c98      	ldrb	r0, [r3, r2]
 800cbf4:	4a2e      	ldr	r2, [pc, #184]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cbf6:	238e      	movs	r3, #142	; 0x8e
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	58d3      	ldr	r3, [r2, r3]
 800cbfc:	22d5      	movs	r2, #213	; 0xd5
 800cbfe:	569b      	ldrsb	r3, [r3, r2]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	b2d2      	uxtb	r2, r2
 800cc04:	0019      	movs	r1, r3
 800cc06:	f7fe ff31 	bl	800ba6c <ValidatePayloadLength>
 800cc0a:	0003      	movs	r3, r0
 800cc0c:	001a      	movs	r2, r3
 800cc0e:	2301      	movs	r3, #1
 800cc10:	4053      	eors	r3, r2
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <ScheduleTx+0x250>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800cc18:	2308      	movs	r3, #8
 800cc1a:	e045      	b.n	800cca8 <ScheduleTx+0x2dc>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800cc1c:	4a24      	ldr	r2, [pc, #144]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc1e:	238e      	movs	r3, #142	; 0x8e
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	58d3      	ldr	r3, [r2, r3]
 800cc24:	22e4      	movs	r2, #228	; 0xe4
 800cc26:	589b      	ldr	r3, [r3, r2]
 800cc28:	4921      	ldr	r1, [pc, #132]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc2a:	22f6      	movs	r2, #246	; 0xf6
 800cc2c:	0092      	lsls	r2, r2, #2
 800cc2e:	588a      	ldr	r2, [r1, r2]
 800cc30:	1899      	adds	r1, r3, r2
 800cc32:	4a1f      	ldr	r2, [pc, #124]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc34:	23f1      	movs	r3, #241	; 0xf1
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800cc3a:	4a1d      	ldr	r2, [pc, #116]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc3c:	238e      	movs	r3, #142	; 0x8e
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	58d3      	ldr	r3, [r2, r3]
 800cc42:	22e8      	movs	r2, #232	; 0xe8
 800cc44:	589b      	ldr	r3, [r3, r2]
 800cc46:	491a      	ldr	r1, [pc, #104]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc48:	22fb      	movs	r2, #251	; 0xfb
 800cc4a:	0092      	lsls	r2, r2, #2
 800cc4c:	588a      	ldr	r2, [r1, r2]
 800cc4e:	1899      	adds	r1, r3, r2
 800cc50:	4a17      	ldr	r2, [pc, #92]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc52:	23f2      	movs	r3, #242	; 0xf2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800cc58:	4a15      	ldr	r2, [pc, #84]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc5a:	238e      	movs	r3, #142	; 0x8e
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	58d3      	ldr	r3, [r2, r3]
 800cc60:	22d5      	movs	r2, #213	; 0xd5
 800cc62:	569b      	ldrsb	r3, [r3, r2]
 800cc64:	b2d8      	uxtb	r0, r3
 800cc66:	4a12      	ldr	r2, [pc, #72]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc68:	238e      	movs	r3, #142	; 0x8e
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	58d2      	ldr	r2, [r2, r3]
 800cc6e:	2314      	movs	r3, #20
 800cc70:	33ff      	adds	r3, #255	; 0xff
 800cc72:	5cd3      	ldrb	r3, [r2, r3]
 800cc74:	251e      	movs	r5, #30
 800cc76:	197c      	adds	r4, r7, r5
 800cc78:	0019      	movs	r1, r3
 800cc7a:	f000 f825 	bl	800ccc8 <SecureFrame>
 800cc7e:	0003      	movs	r3, r0
 800cc80:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800cc82:	197b      	adds	r3, r7, r5
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d003      	beq.n	800cc92 <ScheduleTx+0x2c6>
    {
        return retval;
 800cc8a:	231e      	movs	r3, #30
 800cc8c:	18fb      	adds	r3, r7, r3
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	e00a      	b.n	800cca8 <ScheduleTx+0x2dc>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
 800cc92:	4a07      	ldr	r2, [pc, #28]	; (800ccb0 <ScheduleTx+0x2e4>)
 800cc94:	238e      	movs	r3, #142	; 0x8e
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	58d2      	ldr	r2, [r2, r3]
 800cc9a:	2314      	movs	r3, #20
 800cc9c:	33ff      	adds	r3, #255	; 0xff
 800cc9e:	5cd3      	ldrb	r3, [r2, r3]
 800cca0:	0018      	movs	r0, r3
 800cca2:	f000 fb59 	bl	800d358 <SendFrameOnChannel>
 800cca6:	0003      	movs	r3, r0
}
 800cca8:	0018      	movs	r0, r3
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	b009      	add	sp, #36	; 0x24
 800ccae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb0:	20000598 	.word	0x20000598
 800ccb4:	200008dc 	.word	0x200008dc
 800ccb8:	20000914 	.word	0x20000914
 800ccbc:	20000964 	.word	0x20000964
 800ccc0:	20000978 	.word	0x20000978
 800ccc4:	0000023f 	.word	0x0000023f

0800ccc8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	0002      	movs	r2, r0
 800ccd0:	1dfb      	adds	r3, r7, #7
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	1dbb      	adds	r3, r7, #6
 800ccd6:	1c0a      	adds	r2, r1, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ccda:	230f      	movs	r3, #15
 800ccdc:	18fb      	adds	r3, r7, r3
 800ccde:	2210      	movs	r2, #16
 800cce0:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800cce6:	4a25      	ldr	r2, [pc, #148]	; (800cd7c <SecureFrame+0xb4>)
 800cce8:	2386      	movs	r3, #134	; 0x86
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	5cd3      	ldrb	r3, [r2, r3]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <SecureFrame+0x30>
 800ccf2:	2b04      	cmp	r3, #4
 800ccf4:	d016      	beq.n	800cd24 <SecureFrame+0x5c>
 800ccf6:	e039      	b.n	800cd6c <SecureFrame+0xa4>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ccf8:	250f      	movs	r5, #15
 800ccfa:	197c      	adds	r4, r7, r5
 800ccfc:	4b20      	ldr	r3, [pc, #128]	; (800cd80 <SecureFrame+0xb8>)
 800ccfe:	0018      	movs	r0, r3
 800cd00:	f004 fb88 	bl	8011414 <LoRaMacCryptoPrepareJoinRequest>
 800cd04:	0003      	movs	r3, r0
 800cd06:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800cd08:	197b      	adds	r3, r7, r5
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cd10:	2311      	movs	r3, #17
 800cd12:	e02e      	b.n	800cd72 <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800cd14:	4a19      	ldr	r2, [pc, #100]	; (800cd7c <SecureFrame+0xb4>)
 800cd16:	238a      	movs	r3, #138	; 0x8a
 800cd18:	005b      	lsls	r3, r3, #1
 800cd1a:	5cd3      	ldrb	r3, [r2, r3]
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	4b17      	ldr	r3, [pc, #92]	; (800cd7c <SecureFrame+0xb4>)
 800cd20:	811a      	strh	r2, [r3, #8]
            break;
 800cd22:	e025      	b.n	800cd70 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800cd24:	2308      	movs	r3, #8
 800cd26:	18fb      	adds	r3, r7, r3
 800cd28:	0018      	movs	r0, r3
 800cd2a:	f005 f999 	bl	8012060 <LoRaMacGetFCntUp>
 800cd2e:	1e03      	subs	r3, r0, #0
 800cd30:	d001      	beq.n	800cd36 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800cd32:	2312      	movs	r3, #18
 800cd34:	e01d      	b.n	800cd72 <SecureFrame+0xaa>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800cd36:	68b8      	ldr	r0, [r7, #8]
 800cd38:	260f      	movs	r6, #15
 800cd3a:	19bc      	adds	r4, r7, r6
 800cd3c:	4d10      	ldr	r5, [pc, #64]	; (800cd80 <SecureFrame+0xb8>)
 800cd3e:	1dbb      	adds	r3, r7, #6
 800cd40:	781a      	ldrb	r2, [r3, #0]
 800cd42:	1dfb      	adds	r3, r7, #7
 800cd44:	7819      	ldrb	r1, [r3, #0]
 800cd46:	002b      	movs	r3, r5
 800cd48:	f004 fe52 	bl	80119f0 <LoRaMacCryptoSecureMessage>
 800cd4c:	0003      	movs	r3, r0
 800cd4e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800cd50:	19bb      	adds	r3, r7, r6
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <SecureFrame+0x94>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cd58:	2311      	movs	r3, #17
 800cd5a:	e00a      	b.n	800cd72 <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800cd5c:	4a07      	ldr	r2, [pc, #28]	; (800cd7c <SecureFrame+0xb4>)
 800cd5e:	238a      	movs	r3, #138	; 0x8a
 800cd60:	005b      	lsls	r3, r3, #1
 800cd62:	5cd3      	ldrb	r3, [r2, r3]
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <SecureFrame+0xb4>)
 800cd68:	811a      	strh	r2, [r3, #8]
            break;
 800cd6a:	e001      	b.n	800cd70 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e000      	b.n	800cd72 <SecureFrame+0xaa>
    }
    return LORAMAC_STATUS_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	0018      	movs	r0, r3
 800cd74:	46bd      	mov	sp, r7
 800cd76:	b005      	add	sp, #20
 800cd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd7a:	46c0      	nop			; (mov r8, r8)
 800cd7c:	20000598 	.word	0x20000598
 800cd80:	200006a8 	.word	0x200006a8

0800cd84 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800cd84:	b590      	push	{r4, r7, lr}
 800cd86:	b087      	sub	sp, #28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	0002      	movs	r2, r0
 800cd8c:	1dfb      	adds	r3, r7, #7
 800cd8e:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800cd90:	4a31      	ldr	r2, [pc, #196]	; (800ce58 <CalculateBackOff+0xd4>)
 800cd92:	238e      	movs	r3, #142	; 0x8e
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	58d2      	ldr	r2, [r2, r3]
 800cd98:	2389      	movs	r3, #137	; 0x89
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	5cd3      	ldrb	r3, [r2, r3]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d104      	bne.n	800cdac <CalculateBackOff+0x28>
    {
        calcBackOff.Joined = false;
 800cda2:	230c      	movs	r3, #12
 800cda4:	18fb      	adds	r3, r7, r3
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	e003      	b.n	800cdb4 <CalculateBackOff+0x30>
    }
    else
    {
        calcBackOff.Joined = true;
 800cdac:	230c      	movs	r3, #12
 800cdae:	18fb      	adds	r3, r7, r3
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800cdb4:	4a28      	ldr	r2, [pc, #160]	; (800ce58 <CalculateBackOff+0xd4>)
 800cdb6:	238e      	movs	r3, #142	; 0x8e
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	58d2      	ldr	r2, [r2, r3]
 800cdbc:	2389      	movs	r3, #137	; 0x89
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	5cd2      	ldrb	r2, [r2, r3]
 800cdc2:	240c      	movs	r4, #12
 800cdc4:	193b      	adds	r3, r7, r4
 800cdc6:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800cdc8:	193b      	adds	r3, r7, r4
 800cdca:	1dfa      	adds	r2, r7, #7
 800cdcc:	7812      	ldrb	r2, [r2, #0]
 800cdce:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800cdd0:	4a21      	ldr	r2, [pc, #132]	; (800ce58 <CalculateBackOff+0xd4>)
 800cdd2:	23d2      	movs	r3, #210	; 0xd2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	58d3      	ldr	r3, [r2, r3]
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f008 faf8 	bl	80153ce <TimerGetElapsedTime>
 800cdde:	0002      	movs	r2, r0
 800cde0:	193b      	adds	r3, r7, r4
 800cde2:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800cde4:	4b1c      	ldr	r3, [pc, #112]	; (800ce58 <CalculateBackOff+0xd4>)
 800cde6:	4a1d      	ldr	r2, [pc, #116]	; (800ce5c <CalculateBackOff+0xd8>)
 800cde8:	589a      	ldr	r2, [r3, r2]
 800cdea:	193b      	adds	r3, r7, r4
 800cdec:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800cdee:	193b      	adds	r3, r7, r4
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800cdf4:	4b18      	ldr	r3, [pc, #96]	; (800ce58 <CalculateBackOff+0xd4>)
 800cdf6:	4a1a      	ldr	r2, [pc, #104]	; (800ce60 <CalculateBackOff+0xdc>)
 800cdf8:	5c9b      	ldrb	r3, [r3, r2]
 800cdfa:	2204      	movs	r2, #4
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d008      	beq.n	800ce16 <CalculateBackOff+0x92>
 800ce04:	2000      	movs	r0, #0
 800ce06:	f003 faa9 	bl	801035c <LoRaMacConfirmQueueIsCmdActive>
 800ce0a:	1e03      	subs	r3, r0, #0
 800ce0c:	d003      	beq.n	800ce16 <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800ce0e:	230c      	movs	r3, #12
 800ce10:	18fb      	adds	r3, r7, r3
 800ce12:	2201      	movs	r2, #1
 800ce14:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800ce16:	4a10      	ldr	r2, [pc, #64]	; (800ce58 <CalculateBackOff+0xd4>)
 800ce18:	238e      	movs	r3, #142	; 0x8e
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	58d3      	ldr	r3, [r2, r3]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	220c      	movs	r2, #12
 800ce22:	18ba      	adds	r2, r7, r2
 800ce24:	0011      	movs	r1, r2
 800ce26:	0018      	movs	r0, r3
 800ce28:	f005 ff02 	bl	8012c30 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800ce2c:	4a0a      	ldr	r2, [pc, #40]	; (800ce58 <CalculateBackOff+0xd4>)
 800ce2e:	238e      	movs	r3, #142	; 0x8e
 800ce30:	00db      	lsls	r3, r3, #3
 800ce32:	58d2      	ldr	r2, [r2, r3]
 800ce34:	2387      	movs	r3, #135	; 0x87
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	5ad3      	ldrh	r3, [r2, r3]
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	4a06      	ldr	r2, [pc, #24]	; (800ce58 <CalculateBackOff+0xd4>)
 800ce3e:	4907      	ldr	r1, [pc, #28]	; (800ce5c <CalculateBackOff+0xd8>)
 800ce40:	5852      	ldr	r2, [r2, r1]
 800ce42:	435a      	muls	r2, r3
 800ce44:	0011      	movs	r1, r2
 800ce46:	4a04      	ldr	r2, [pc, #16]	; (800ce58 <CalculateBackOff+0xd4>)
 800ce48:	23d1      	movs	r3, #209	; 0xd1
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	50d1      	str	r1, [r2, r3]
}
 800ce4e:	46c0      	nop			; (mov r8, r8)
 800ce50:	46bd      	mov	sp, r7
 800ce52:	b007      	add	sp, #28
 800ce54:	bd90      	pop	{r4, r7, pc}
 800ce56:	46c0      	nop			; (mov r8, r8)
 800ce58:	20000598 	.word	0x20000598
 800ce5c:	0000040c 	.word	0x0000040c
 800ce60:	0000046d 	.word	0x0000046d

0800ce64 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	1d3b      	adds	r3, r7, #4
 800ce6c:	7019      	strb	r1, [r3, #0]
 800ce6e:	0011      	movs	r1, r2
 800ce70:	1dfb      	adds	r3, r7, #7
 800ce72:	1c02      	adds	r2, r0, #0
 800ce74:	701a      	strb	r2, [r3, #0]
 800ce76:	1dbb      	adds	r3, r7, #6
 800ce78:	1c0a      	adds	r2, r1, #0
 800ce7a:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800ce7c:	1dfb      	adds	r3, r7, #7
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <RemoveMacCommands+0x28>
 800ce84:	1dfb      	adds	r3, r7, #7
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d10f      	bne.n	800ceac <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800ce8c:	1dbb      	adds	r3, r7, #6
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d109      	bne.n	800cea8 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800ce94:	1d3b      	adds	r3, r7, #4
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	4013      	ands	r3, r2
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d004      	beq.n	800ceac <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800cea2:	f003 f823 	bl	800feec <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800cea6:	e001      	b.n	800ceac <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800cea8:	f003 f820 	bl	800feec <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800ceac:	46c0      	nop			; (mov r8, r8)
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800ceba:	4a6d      	ldr	r2, [pc, #436]	; (800d070 <ResetMacParameters+0x1bc>)
 800cebc:	238e      	movs	r3, #142	; 0x8e
 800cebe:	00db      	lsls	r3, r3, #3
 800cec0:	58d2      	ldr	r2, [r2, r3]
 800cec2:	2389      	movs	r3, #137	; 0x89
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	2100      	movs	r1, #0
 800cec8:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800ceca:	4a69      	ldr	r2, [pc, #420]	; (800d070 <ResetMacParameters+0x1bc>)
 800cecc:	238e      	movs	r3, #142	; 0x8e
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	58d3      	ldr	r3, [r2, r3]
 800ced2:	22cc      	movs	r2, #204	; 0xcc
 800ced4:	2100      	movs	r1, #0
 800ced6:	5099      	str	r1, [r3, r2]

    // Initialize the uplink and downlink counters default value
    LoRaMacResetFCnts( );
 800ced8:	f005 f8e8 	bl	80120ac <LoRaMacResetFCnts>

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800cedc:	4a64      	ldr	r2, [pc, #400]	; (800d070 <ResetMacParameters+0x1bc>)
 800cede:	238e      	movs	r3, #142	; 0x8e
 800cee0:	00db      	lsls	r3, r3, #3
 800cee2:	58d2      	ldr	r2, [r2, r3]
 800cee4:	2388      	movs	r3, #136	; 0x88
 800cee6:	005b      	lsls	r3, r3, #1
 800cee8:	2100      	movs	r1, #0
 800ceea:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800ceec:	4a60      	ldr	r2, [pc, #384]	; (800d070 <ResetMacParameters+0x1bc>)
 800ceee:	238e      	movs	r3, #142	; 0x8e
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	58d3      	ldr	r3, [r2, r3]
 800cef4:	4a5f      	ldr	r2, [pc, #380]	; (800d074 <ResetMacParameters+0x1c0>)
 800cef6:	2101      	movs	r1, #1
 800cef8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800cefa:	4a5d      	ldr	r2, [pc, #372]	; (800d070 <ResetMacParameters+0x1bc>)
 800cefc:	238e      	movs	r3, #142	; 0x8e
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	58d3      	ldr	r3, [r2, r3]
 800cf02:	4a5d      	ldr	r2, [pc, #372]	; (800d078 <ResetMacParameters+0x1c4>)
 800cf04:	2101      	movs	r1, #1
 800cf06:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800cf08:	4a59      	ldr	r2, [pc, #356]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf0a:	238e      	movs	r3, #142	; 0x8e
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	58d2      	ldr	r2, [r2, r3]
 800cf10:	2386      	movs	r3, #134	; 0x86
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	2100      	movs	r1, #0
 800cf16:	54d1      	strb	r1, [r2, r3]

    MacCtx.NvmCtx->MaxDCycle = 0;
 800cf18:	4a55      	ldr	r2, [pc, #340]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf1a:	238e      	movs	r3, #142	; 0x8e
 800cf1c:	00db      	lsls	r3, r3, #3
 800cf1e:	58d2      	ldr	r2, [r2, r3]
 800cf20:	2312      	movs	r3, #18
 800cf22:	33ff      	adds	r3, #255	; 0xff
 800cf24:	2100      	movs	r1, #0
 800cf26:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800cf28:	4a51      	ldr	r2, [pc, #324]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf2a:	238e      	movs	r3, #142	; 0x8e
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	58d2      	ldr	r2, [r2, r3]
 800cf30:	2387      	movs	r3, #135	; 0x87
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	2101      	movs	r1, #1
 800cf36:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800cf38:	4a4d      	ldr	r2, [pc, #308]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf3a:	238e      	movs	r3, #142	; 0x8e
 800cf3c:	00db      	lsls	r3, r3, #3
 800cf3e:	58d2      	ldr	r2, [r2, r3]
 800cf40:	494b      	ldr	r1, [pc, #300]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf42:	238e      	movs	r3, #142	; 0x8e
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	58cb      	ldr	r3, [r1, r3]
 800cf48:	2104      	movs	r1, #4
 800cf4a:	5651      	ldrsb	r1, [r2, r1]
 800cf4c:	22d4      	movs	r2, #212	; 0xd4
 800cf4e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800cf50:	4a47      	ldr	r2, [pc, #284]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf52:	238e      	movs	r3, #142	; 0x8e
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	58d2      	ldr	r2, [r2, r3]
 800cf58:	4945      	ldr	r1, [pc, #276]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf5a:	238e      	movs	r3, #142	; 0x8e
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	58cb      	ldr	r3, [r1, r3]
 800cf60:	2105      	movs	r1, #5
 800cf62:	5651      	ldrsb	r1, [r2, r1]
 800cf64:	22d5      	movs	r2, #213	; 0xd5
 800cf66:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800cf68:	4a41      	ldr	r2, [pc, #260]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf6a:	238e      	movs	r3, #142	; 0x8e
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	58d2      	ldr	r2, [r2, r3]
 800cf70:	493f      	ldr	r1, [pc, #252]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf72:	238e      	movs	r3, #142	; 0x8e
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	58cb      	ldr	r3, [r1, r3]
 800cf78:	2125      	movs	r1, #37	; 0x25
 800cf7a:	5c51      	ldrb	r1, [r2, r1]
 800cf7c:	22f5      	movs	r2, #245	; 0xf5
 800cf7e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800cf80:	4a3b      	ldr	r2, [pc, #236]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf82:	238e      	movs	r3, #142	; 0x8e
 800cf84:	00db      	lsls	r3, r3, #3
 800cf86:	58d2      	ldr	r2, [r2, r3]
 800cf88:	4939      	ldr	r1, [pc, #228]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf8a:	238e      	movs	r3, #142	; 0x8e
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	58cb      	ldr	r3, [r1, r3]
 800cf90:	21f8      	movs	r1, #248	; 0xf8
 800cf92:	185b      	adds	r3, r3, r1
 800cf94:	3228      	adds	r2, #40	; 0x28
 800cf96:	ca03      	ldmia	r2!, {r0, r1}
 800cf98:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 800cf9a:	4a35      	ldr	r2, [pc, #212]	; (800d070 <ResetMacParameters+0x1bc>)
 800cf9c:	238e      	movs	r3, #142	; 0x8e
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	58d3      	ldr	r3, [r2, r3]
 800cfa2:	4933      	ldr	r1, [pc, #204]	; (800d070 <ResetMacParameters+0x1bc>)
 800cfa4:	228e      	movs	r2, #142	; 0x8e
 800cfa6:	00d2      	lsls	r2, r2, #3
 800cfa8:	588a      	ldr	r2, [r1, r2]
 800cfaa:	2130      	movs	r1, #48	; 0x30
 800cfac:	5c59      	ldrb	r1, [r3, r1]
 800cfae:	2380      	movs	r3, #128	; 0x80
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 800cfb4:	4a2e      	ldr	r2, [pc, #184]	; (800d070 <ResetMacParameters+0x1bc>)
 800cfb6:	238e      	movs	r3, #142	; 0x8e
 800cfb8:	00db      	lsls	r3, r3, #3
 800cfba:	58d3      	ldr	r3, [r2, r3]
 800cfbc:	492c      	ldr	r1, [pc, #176]	; (800d070 <ResetMacParameters+0x1bc>)
 800cfbe:	228e      	movs	r2, #142	; 0x8e
 800cfc0:	00d2      	lsls	r2, r2, #3
 800cfc2:	588a      	ldr	r2, [r1, r2]
 800cfc4:	2131      	movs	r1, #49	; 0x31
 800cfc6:	5c59      	ldrb	r1, [r3, r1]
 800cfc8:	2302      	movs	r3, #2
 800cfca:	33ff      	adds	r3, #255	; 0xff
 800cfcc:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800cfce:	4a28      	ldr	r2, [pc, #160]	; (800d070 <ResetMacParameters+0x1bc>)
 800cfd0:	238e      	movs	r3, #142	; 0x8e
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	58d3      	ldr	r3, [r2, r3]
 800cfd6:	4926      	ldr	r1, [pc, #152]	; (800d070 <ResetMacParameters+0x1bc>)
 800cfd8:	228e      	movs	r2, #142	; 0x8e
 800cfda:	00d2      	lsls	r2, r2, #3
 800cfdc:	588a      	ldr	r2, [r1, r2]
 800cfde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cfe0:	2382      	movs	r3, #130	; 0x82
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800cfe6:	4a22      	ldr	r2, [pc, #136]	; (800d070 <ResetMacParameters+0x1bc>)
 800cfe8:	238e      	movs	r3, #142	; 0x8e
 800cfea:	00db      	lsls	r3, r3, #3
 800cfec:	58d3      	ldr	r3, [r2, r3]
 800cfee:	4920      	ldr	r1, [pc, #128]	; (800d070 <ResetMacParameters+0x1bc>)
 800cff0:	228e      	movs	r2, #142	; 0x8e
 800cff2:	00d2      	lsls	r2, r2, #3
 800cff4:	588a      	ldr	r2, [r1, r2]
 800cff6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cff8:	2384      	movs	r3, #132	; 0x84
 800cffa:	005b      	lsls	r3, r3, #1
 800cffc:	50d1      	str	r1, [r2, r3]

    MacCtx.NvmCtx->NodeAckRequested = false;
 800cffe:	4a1c      	ldr	r2, [pc, #112]	; (800d070 <ResetMacParameters+0x1bc>)
 800d000:	238e      	movs	r3, #142	; 0x8e
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	58d3      	ldr	r3, [r2, r3]
 800d006:	4a1d      	ldr	r2, [pc, #116]	; (800d07c <ResetMacParameters+0x1c8>)
 800d008:	2100      	movs	r1, #0
 800d00a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800d00c:	4a18      	ldr	r2, [pc, #96]	; (800d070 <ResetMacParameters+0x1bc>)
 800d00e:	238e      	movs	r3, #142	; 0x8e
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	58d3      	ldr	r3, [r2, r3]
 800d014:	4a1a      	ldr	r2, [pc, #104]	; (800d080 <ResetMacParameters+0x1cc>)
 800d016:	2100      	movs	r1, #0
 800d018:	5499      	strb	r1, [r3, r2]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800d01a:	003b      	movs	r3, r7
 800d01c:	2201      	movs	r2, #1
 800d01e:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800d020:	003b      	movs	r3, r7
 800d022:	2200      	movs	r2, #0
 800d024:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800d026:	4a12      	ldr	r2, [pc, #72]	; (800d070 <ResetMacParameters+0x1bc>)
 800d028:	238e      	movs	r3, #142	; 0x8e
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	58d3      	ldr	r3, [r2, r3]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	003a      	movs	r2, r7
 800d032:	0011      	movs	r1, r2
 800d034:	0018      	movs	r0, r3
 800d036:	f005 fc96 	bl	8012966 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.NvmCtx->Channel = 0;
 800d03a:	4a0d      	ldr	r2, [pc, #52]	; (800d070 <ResetMacParameters+0x1bc>)
 800d03c:	238e      	movs	r3, #142	; 0x8e
 800d03e:	00db      	lsls	r3, r3, #3
 800d040:	58d2      	ldr	r2, [r2, r3]
 800d042:	2314      	movs	r3, #20
 800d044:	33ff      	adds	r3, #255	; 0xff
 800d046:	2100      	movs	r1, #0
 800d048:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 800d04a:	4a09      	ldr	r2, [pc, #36]	; (800d070 <ResetMacParameters+0x1bc>)
 800d04c:	238e      	movs	r3, #142	; 0x8e
 800d04e:	00db      	lsls	r3, r3, #3
 800d050:	58d1      	ldr	r1, [r2, r3]
 800d052:	4a07      	ldr	r2, [pc, #28]	; (800d070 <ResetMacParameters+0x1bc>)
 800d054:	238e      	movs	r3, #142	; 0x8e
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	58d2      	ldr	r2, [r2, r3]
 800d05a:	2314      	movs	r3, #20
 800d05c:	33ff      	adds	r3, #255	; 0xff
 800d05e:	5cc9      	ldrb	r1, [r1, r3]
 800d060:	238a      	movs	r3, #138	; 0x8a
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	54d1      	strb	r1, [r2, r3]
}
 800d066:	46c0      	nop			; (mov r8, r8)
 800d068:	46bd      	mov	sp, r7
 800d06a:	b002      	add	sp, #8
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	46c0      	nop			; (mov r8, r8)
 800d070:	20000598 	.word	0x20000598
 800d074:	00000216 	.word	0x00000216
 800d078:	00000217 	.word	0x00000217
 800d07c:	00000219 	.word	0x00000219
 800d080:	0000021a 	.word	0x0000021a

0800d084 <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( NULL );
 800d088:	2000      	movs	r0, #0
 800d08a:	f7fe fb01 	bl	800b690 <OnRxWindow2TimerEvent>
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d08e:	4b03      	ldr	r3, [pc, #12]	; (800d09c <OpenContinuousRx2Window+0x18>)
 800d090:	4a03      	ldr	r2, [pc, #12]	; (800d0a0 <OpenContinuousRx2Window+0x1c>)
 800d092:	2102      	movs	r1, #2
 800d094:	5499      	strb	r1, [r3, r2]
}
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	20000598 	.word	0x20000598
 800d0a0:	0000046c 	.word	0x0000046c

0800d0a4 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800d0a4:	b590      	push	{r4, r7, lr}
 800d0a6:	b089      	sub	sp, #36	; 0x24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	603b      	str	r3, [r7, #0]
 800d0b0:	1dfb      	adds	r3, r7, #7
 800d0b2:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 800d0b4:	4ba0      	ldr	r3, [pc, #640]	; (800d338 <PrepareFrame+0x294>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	811a      	strh	r2, [r3, #8]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800d0ba:	4a9f      	ldr	r2, [pc, #636]	; (800d338 <PrepareFrame+0x294>)
 800d0bc:	238e      	movs	r3, #142	; 0x8e
 800d0be:	00db      	lsls	r3, r3, #3
 800d0c0:	58d3      	ldr	r3, [r2, r3]
 800d0c2:	4a9e      	ldr	r2, [pc, #632]	; (800d33c <PrepareFrame+0x298>)
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800d0d0:	231f      	movs	r3, #31
 800d0d2:	18fb      	adds	r3, r7, r3
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d103      	bne.n	800d0e6 <PrepareFrame+0x42>
    {
        fBufferSize = 0;
 800d0de:	2330      	movs	r3, #48	; 0x30
 800d0e0:	18fb      	adds	r3, r7, r3
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d0e6:	2430      	movs	r4, #48	; 0x30
 800d0e8:	193b      	adds	r3, r7, r4
 800d0ea:	881a      	ldrh	r2, [r3, #0]
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	4b94      	ldr	r3, [pc, #592]	; (800d340 <PrepareFrame+0x29c>)
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	f008 f9b9 	bl	8015468 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d0f6:	193b      	adds	r3, r7, r4
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	b2d9      	uxtb	r1, r3
 800d0fc:	4b8e      	ldr	r3, [pc, #568]	; (800d338 <PrepareFrame+0x294>)
 800d0fe:	4a91      	ldr	r2, [pc, #580]	; (800d344 <PrepareFrame+0x2a0>)
 800d100:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	781a      	ldrb	r2, [r3, #0]
 800d106:	4b8c      	ldr	r3, [pc, #560]	; (800d338 <PrepareFrame+0x294>)
 800d108:	729a      	strb	r2, [r3, #10]

    switch( macHdr->Bits.MType )
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	061b      	lsls	r3, r3, #24
 800d110:	0f5b      	lsrs	r3, r3, #29
 800d112:	b2db      	uxtb	r3, r3
 800d114:	2b04      	cmp	r3, #4
 800d116:	d005      	beq.n	800d124 <PrepareFrame+0x80>
 800d118:	2b07      	cmp	r3, #7
 800d11a:	d100      	bne.n	800d11e <PrepareFrame+0x7a>
 800d11c:	e0e7      	b.n	800d2ee <PrepareFrame+0x24a>
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d007      	beq.n	800d132 <PrepareFrame+0x8e>
 800d122:	e0fe      	b.n	800d322 <PrepareFrame+0x27e>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NvmCtx->NodeAckRequested = true;
 800d124:	4a84      	ldr	r2, [pc, #528]	; (800d338 <PrepareFrame+0x294>)
 800d126:	238e      	movs	r3, #142	; 0x8e
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	58d3      	ldr	r3, [r2, r3]
 800d12c:	4a83      	ldr	r2, [pc, #524]	; (800d33c <PrepareFrame+0x298>)
 800d12e:	2101      	movs	r1, #1
 800d130:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d132:	4a81      	ldr	r2, [pc, #516]	; (800d338 <PrepareFrame+0x294>)
 800d134:	2386      	movs	r3, #134	; 0x86
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	2104      	movs	r1, #4
 800d13a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d13c:	4a7e      	ldr	r2, [pc, #504]	; (800d338 <PrepareFrame+0x294>)
 800d13e:	2388      	movs	r3, #136	; 0x88
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	4981      	ldr	r1, [pc, #516]	; (800d348 <PrepareFrame+0x2a4>)
 800d144:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d146:	4a7c      	ldr	r2, [pc, #496]	; (800d338 <PrepareFrame+0x294>)
 800d148:	238a      	movs	r3, #138	; 0x8a
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	21ff      	movs	r1, #255	; 0xff
 800d14e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	7819      	ldrb	r1, [r3, #0]
 800d154:	4a78      	ldr	r2, [pc, #480]	; (800d338 <PrepareFrame+0x294>)
 800d156:	2316      	movs	r3, #22
 800d158:	33ff      	adds	r3, #255	; 0xff
 800d15a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d15c:	4a76      	ldr	r2, [pc, #472]	; (800d338 <PrepareFrame+0x294>)
 800d15e:	1df9      	adds	r1, r7, #7
 800d160:	2398      	movs	r3, #152	; 0x98
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	7809      	ldrb	r1, [r1, #0]
 800d166:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800d168:	4a73      	ldr	r2, [pc, #460]	; (800d338 <PrepareFrame+0x294>)
 800d16a:	238e      	movs	r3, #142	; 0x8e
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	58d3      	ldr	r3, [r2, r3]
 800d170:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d172:	4a71      	ldr	r2, [pc, #452]	; (800d338 <PrepareFrame+0x294>)
 800d174:	238c      	movs	r3, #140	; 0x8c
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	7819      	ldrb	r1, [r3, #0]
 800d17e:	4a6e      	ldr	r2, [pc, #440]	; (800d338 <PrepareFrame+0x294>)
 800d180:	238e      	movs	r3, #142	; 0x8e
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d186:	4b6c      	ldr	r3, [pc, #432]	; (800d338 <PrepareFrame+0x294>)
 800d188:	4a6e      	ldr	r2, [pc, #440]	; (800d344 <PrepareFrame+0x2a0>)
 800d18a:	5c99      	ldrb	r1, [r3, r2]
 800d18c:	4a6a      	ldr	r2, [pc, #424]	; (800d338 <PrepareFrame+0x294>)
 800d18e:	239c      	movs	r3, #156	; 0x9c
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d194:	4a68      	ldr	r2, [pc, #416]	; (800d338 <PrepareFrame+0x294>)
 800d196:	239a      	movs	r3, #154	; 0x9a
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	4969      	ldr	r1, [pc, #420]	; (800d340 <PrepareFrame+0x29c>)
 800d19c:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800d19e:	2318      	movs	r3, #24
 800d1a0:	18fb      	adds	r3, r7, r3
 800d1a2:	0018      	movs	r0, r3
 800d1a4:	f004 ff5c 	bl	8012060 <LoRaMacGetFCntUp>
 800d1a8:	1e03      	subs	r3, r0, #0
 800d1aa:	d001      	beq.n	800d1b0 <PrepareFrame+0x10c>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d1ac:	2312      	movs	r3, #18
 800d1ae:	e0be      	b.n	800d32e <PrepareFrame+0x28a>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t ) fCntUp;
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	b299      	uxth	r1, r3
 800d1b4:	4a60      	ldr	r2, [pc, #384]	; (800d338 <PrepareFrame+0x294>)
 800d1b6:	238f      	movs	r3, #143	; 0x8f
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800d1bc:	4b5e      	ldr	r3, [pc, #376]	; (800d338 <PrepareFrame+0x294>)
 800d1be:	4a63      	ldr	r2, [pc, #396]	; (800d34c <PrepareFrame+0x2a8>)
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 800d1c4:	4a5c      	ldr	r2, [pc, #368]	; (800d338 <PrepareFrame+0x294>)
 800d1c6:	2386      	movs	r3, #134	; 0x86
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d1ce:	69b9      	ldr	r1, [r7, #24]
 800d1d0:	4a59      	ldr	r2, [pc, #356]	; (800d338 <PrepareFrame+0x294>)
 800d1d2:	2387      	movs	r3, #135	; 0x87
 800d1d4:	00db      	lsls	r3, r3, #3
 800d1d6:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d1d8:	2314      	movs	r3, #20
 800d1da:	18fb      	adds	r3, r7, r3
 800d1dc:	0018      	movs	r0, r3
 800d1de:	f002 fec1 	bl	800ff64 <LoRaMacCommandsGetSizeSerializedCmds>
 800d1e2:	1e03      	subs	r3, r0, #0
 800d1e4:	d001      	beq.n	800d1ea <PrepareFrame+0x146>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d1e6:	2313      	movs	r3, #19
 800d1e8:	e0a1      	b.n	800d32e <PrepareFrame+0x28a>
            }

            if( macCmdsSize > 0 )
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d100      	bne.n	800d1f2 <PrepareFrame+0x14e>
 800d1f0:	e099      	b.n	800d326 <PrepareFrame+0x282>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800d1f2:	4a51      	ldr	r2, [pc, #324]	; (800d338 <PrepareFrame+0x294>)
 800d1f4:	238e      	movs	r3, #142	; 0x8e
 800d1f6:	00db      	lsls	r3, r3, #3
 800d1f8:	58d3      	ldr	r3, [r2, r3]
 800d1fa:	22d5      	movs	r2, #213	; 0xd5
 800d1fc:	569b      	ldrsb	r3, [r3, r2]
 800d1fe:	221f      	movs	r2, #31
 800d200:	18bc      	adds	r4, r7, r2
 800d202:	0018      	movs	r0, r3
 800d204:	f7fe fbf4 	bl	800b9f0 <GetMaxAppPayloadWithoutFOptsLength>
 800d208:	0003      	movs	r3, r0
 800d20a:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d20c:	4b4a      	ldr	r3, [pc, #296]	; (800d338 <PrepareFrame+0x294>)
 800d20e:	4a4d      	ldr	r2, [pc, #308]	; (800d344 <PrepareFrame+0x2a0>)
 800d210:	5c9b      	ldrb	r3, [r3, r2]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d024      	beq.n	800d260 <PrepareFrame+0x1bc>
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	2b0f      	cmp	r3, #15
 800d21a:	d821      	bhi.n	800d260 <PrepareFrame+0x1bc>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d21c:	4a4c      	ldr	r2, [pc, #304]	; (800d350 <PrepareFrame+0x2ac>)
 800d21e:	2314      	movs	r3, #20
 800d220:	18fb      	adds	r3, r7, r3
 800d222:	0019      	movs	r1, r3
 800d224:	200f      	movs	r0, #15
 800d226:	f002 feb3 	bl	800ff90 <LoRaMacCommandsSerializeCmds>
 800d22a:	1e03      	subs	r3, r0, #0
 800d22c:	d001      	beq.n	800d232 <PrepareFrame+0x18e>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d22e:	2313      	movs	r3, #19
 800d230:	e07d      	b.n	800d32e <PrepareFrame+0x28a>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	1c1a      	adds	r2, r3, #0
 800d236:	230f      	movs	r3, #15
 800d238:	4013      	ands	r3, r2
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	210f      	movs	r1, #15
 800d240:	400a      	ands	r2, r1
 800d242:	0010      	movs	r0, r2
 800d244:	781a      	ldrb	r2, [r3, #0]
 800d246:	210f      	movs	r1, #15
 800d248:	438a      	bics	r2, r1
 800d24a:	1c11      	adds	r1, r2, #0
 800d24c:	1c02      	adds	r2, r0, #0
 800d24e:	430a      	orrs	r2, r1
 800d250:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	7819      	ldrb	r1, [r3, #0]
 800d256:	4a38      	ldr	r2, [pc, #224]	; (800d338 <PrepareFrame+0x294>)
 800d258:	238e      	movs	r3, #142	; 0x8e
 800d25a:	005b      	lsls	r3, r3, #1
 800d25c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800d25e:	e062      	b.n	800d326 <PrepareFrame+0x282>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d260:	4b35      	ldr	r3, [pc, #212]	; (800d338 <PrepareFrame+0x294>)
 800d262:	4a38      	ldr	r2, [pc, #224]	; (800d344 <PrepareFrame+0x2a0>)
 800d264:	5c9b      	ldrb	r3, [r3, r2]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d017      	beq.n	800d29a <PrepareFrame+0x1f6>
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2b0f      	cmp	r3, #15
 800d26e:	d914      	bls.n	800d29a <PrepareFrame+0x1f6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d270:	231f      	movs	r3, #31
 800d272:	18fb      	adds	r3, r7, r3
 800d274:	7818      	ldrb	r0, [r3, #0]
 800d276:	4a30      	ldr	r2, [pc, #192]	; (800d338 <PrepareFrame+0x294>)
 800d278:	238e      	movs	r3, #142	; 0x8e
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	58d3      	ldr	r3, [r2, r3]
 800d27e:	3317      	adds	r3, #23
 800d280:	33ff      	adds	r3, #255	; 0xff
 800d282:	001a      	movs	r2, r3
 800d284:	2314      	movs	r3, #20
 800d286:	18fb      	adds	r3, r7, r3
 800d288:	0019      	movs	r1, r3
 800d28a:	f002 fe81 	bl	800ff90 <LoRaMacCommandsSerializeCmds>
 800d28e:	1e03      	subs	r3, r0, #0
 800d290:	d001      	beq.n	800d296 <PrepareFrame+0x1f2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d292:	2313      	movs	r3, #19
 800d294:	e04b      	b.n	800d32e <PrepareFrame+0x28a>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d296:	230a      	movs	r3, #10
 800d298:	e049      	b.n	800d32e <PrepareFrame+0x28a>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d29a:	231f      	movs	r3, #31
 800d29c:	18fb      	adds	r3, r7, r3
 800d29e:	7818      	ldrb	r0, [r3, #0]
 800d2a0:	4a25      	ldr	r2, [pc, #148]	; (800d338 <PrepareFrame+0x294>)
 800d2a2:	238e      	movs	r3, #142	; 0x8e
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	58d3      	ldr	r3, [r2, r3]
 800d2a8:	3317      	adds	r3, #23
 800d2aa:	33ff      	adds	r3, #255	; 0xff
 800d2ac:	001a      	movs	r2, r3
 800d2ae:	2314      	movs	r3, #20
 800d2b0:	18fb      	adds	r3, r7, r3
 800d2b2:	0019      	movs	r1, r3
 800d2b4:	f002 fe6c 	bl	800ff90 <LoRaMacCommandsSerializeCmds>
 800d2b8:	1e03      	subs	r3, r0, #0
 800d2ba:	d001      	beq.n	800d2c0 <PrepareFrame+0x21c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d2bc:	2313      	movs	r3, #19
 800d2be:	e036      	b.n	800d32e <PrepareFrame+0x28a>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d2c0:	4a1d      	ldr	r2, [pc, #116]	; (800d338 <PrepareFrame+0x294>)
 800d2c2:	2398      	movs	r3, #152	; 0x98
 800d2c4:	005b      	lsls	r3, r3, #1
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800d2ca:	4a1b      	ldr	r2, [pc, #108]	; (800d338 <PrepareFrame+0x294>)
 800d2cc:	238e      	movs	r3, #142	; 0x8e
 800d2ce:	00db      	lsls	r3, r3, #3
 800d2d0:	58d3      	ldr	r3, [r2, r3]
 800d2d2:	3317      	adds	r3, #23
 800d2d4:	33ff      	adds	r3, #255	; 0xff
 800d2d6:	0019      	movs	r1, r3
 800d2d8:	4a17      	ldr	r2, [pc, #92]	; (800d338 <PrepareFrame+0x294>)
 800d2da:	239a      	movs	r3, #154	; 0x9a
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	b2d9      	uxtb	r1, r3
 800d2e4:	4a14      	ldr	r2, [pc, #80]	; (800d338 <PrepareFrame+0x294>)
 800d2e6:	239c      	movs	r3, #156	; 0x9c
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	54d1      	strb	r1, [r2, r3]
            break;
 800d2ec:	e01b      	b.n	800d326 <PrepareFrame+0x282>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d01a      	beq.n	800d32a <PrepareFrame+0x286>
 800d2f4:	4b10      	ldr	r3, [pc, #64]	; (800d338 <PrepareFrame+0x294>)
 800d2f6:	4a13      	ldr	r2, [pc, #76]	; (800d344 <PrepareFrame+0x2a0>)
 800d2f8:	5c9b      	ldrb	r3, [r3, r2]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d015      	beq.n	800d32a <PrepareFrame+0x286>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d2fe:	4815      	ldr	r0, [pc, #84]	; (800d354 <PrepareFrame+0x2b0>)
 800d300:	4b0d      	ldr	r3, [pc, #52]	; (800d338 <PrepareFrame+0x294>)
 800d302:	4a10      	ldr	r2, [pc, #64]	; (800d344 <PrepareFrame+0x2a0>)
 800d304:	5c9b      	ldrb	r3, [r3, r2]
 800d306:	b29a      	uxth	r2, r3
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	0019      	movs	r1, r3
 800d30c:	f008 f8ac 	bl	8015468 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d310:	4b09      	ldr	r3, [pc, #36]	; (800d338 <PrepareFrame+0x294>)
 800d312:	4a0c      	ldr	r2, [pc, #48]	; (800d344 <PrepareFrame+0x2a0>)
 800d314:	5c9b      	ldrb	r3, [r3, r2]
 800d316:	b29b      	uxth	r3, r3
 800d318:	3301      	adds	r3, #1
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <PrepareFrame+0x294>)
 800d31e:	811a      	strh	r2, [r3, #8]
            }
            break;
 800d320:	e003      	b.n	800d32a <PrepareFrame+0x286>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d322:	2302      	movs	r3, #2
 800d324:	e003      	b.n	800d32e <PrepareFrame+0x28a>
            break;
 800d326:	46c0      	nop			; (mov r8, r8)
 800d328:	e000      	b.n	800d32c <PrepareFrame+0x288>
            break;
 800d32a:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	0018      	movs	r0, r3
 800d330:	46bd      	mov	sp, r7
 800d332:	b009      	add	sp, #36	; 0x24
 800d334:	bd90      	pop	{r4, r7, pc}
 800d336:	46c0      	nop			; (mov r8, r8)
 800d338:	20000598 	.word	0x20000598
 800d33c:	00000219 	.word	0x00000219
 800d340:	200006d8 	.word	0x200006d8
 800d344:	0000023f 	.word	0x0000023f
 800d348:	200005a2 	.word	0x200005a2
 800d34c:	00000431 	.word	0x00000431
 800d350:	200006b8 	.word	0x200006b8
 800d354:	200005a3 	.word	0x200005a3

0800d358 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800d358:	b590      	push	{r4, r7, lr}
 800d35a:	b089      	sub	sp, #36	; 0x24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	0002      	movs	r2, r0
 800d360:	1dfb      	adds	r3, r7, #7
 800d362:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800d364:	230b      	movs	r3, #11
 800d366:	18fb      	adds	r3, r7, r3
 800d368:	2200      	movs	r2, #0
 800d36a:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800d36c:	210c      	movs	r1, #12
 800d36e:	187b      	adds	r3, r7, r1
 800d370:	1dfa      	adds	r2, r7, #7
 800d372:	7812      	ldrb	r2, [r2, #0]
 800d374:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d376:	4a4f      	ldr	r2, [pc, #316]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d378:	238e      	movs	r3, #142	; 0x8e
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	58d3      	ldr	r3, [r2, r3]
 800d37e:	22d5      	movs	r2, #213	; 0xd5
 800d380:	569a      	ldrsb	r2, [r3, r2]
 800d382:	187b      	adds	r3, r7, r1
 800d384:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800d386:	4a4b      	ldr	r2, [pc, #300]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d388:	238e      	movs	r3, #142	; 0x8e
 800d38a:	00db      	lsls	r3, r3, #3
 800d38c:	58d3      	ldr	r3, [r2, r3]
 800d38e:	22d4      	movs	r2, #212	; 0xd4
 800d390:	569a      	ldrsb	r2, [r3, r2]
 800d392:	187b      	adds	r3, r7, r1
 800d394:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800d396:	4a47      	ldr	r2, [pc, #284]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d398:	238e      	movs	r3, #142	; 0x8e
 800d39a:	00db      	lsls	r3, r3, #3
 800d39c:	58d2      	ldr	r2, [r2, r3]
 800d39e:	2382      	movs	r3, #130	; 0x82
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	58d2      	ldr	r2, [r2, r3]
 800d3a4:	187b      	adds	r3, r7, r1
 800d3a6:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800d3a8:	4a42      	ldr	r2, [pc, #264]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d3aa:	238e      	movs	r3, #142	; 0x8e
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	58d2      	ldr	r2, [r2, r3]
 800d3b0:	2384      	movs	r3, #132	; 0x84
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	58d2      	ldr	r2, [r2, r3]
 800d3b6:	187b      	adds	r3, r7, r1
 800d3b8:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d3ba:	4b3e      	ldr	r3, [pc, #248]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d3bc:	891a      	ldrh	r2, [r3, #8]
 800d3be:	187b      	adds	r3, r7, r1
 800d3c0:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d3c2:	f002 faf4 	bl	800f9ae <LoRaMacClassBIsBeaconExpected>
 800d3c6:	1e03      	subs	r3, r0, #0
 800d3c8:	d001      	beq.n	800d3ce <SendFrameOnChannel+0x76>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d3ca:	230e      	movs	r3, #14
 800d3cc:	e06d      	b.n	800d4aa <SendFrameOnChannel+0x152>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800d3ce:	4a39      	ldr	r2, [pc, #228]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d3d0:	238e      	movs	r3, #142	; 0x8e
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	58d3      	ldr	r3, [r2, r3]
 800d3d6:	22c8      	movs	r2, #200	; 0xc8
 800d3d8:	5c9b      	ldrb	r3, [r3, r2]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d10d      	bne.n	800d3fa <SendFrameOnChannel+0xa2>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d3de:	f002 faec 	bl	800f9ba <LoRaMacClassBIsPingExpected>
 800d3e2:	1e03      	subs	r3, r0, #0
 800d3e4:	d001      	beq.n	800d3ea <SendFrameOnChannel+0x92>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d3e6:	230f      	movs	r3, #15
 800d3e8:	e05f      	b.n	800d4aa <SendFrameOnChannel+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d3ea:	f002 faec 	bl	800f9c6 <LoRaMacClassBIsMulticastExpected>
 800d3ee:	1e03      	subs	r3, r0, #0
 800d3f0:	d001      	beq.n	800d3f6 <SendFrameOnChannel+0x9e>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d3f2:	230f      	movs	r3, #15
 800d3f4:	e059      	b.n	800d4aa <SendFrameOnChannel+0x152>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800d3f6:	f002 fb59 	bl	800faac <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d3fa:	4a2e      	ldr	r2, [pc, #184]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d3fc:	238e      	movs	r3, #142	; 0x8e
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	58d3      	ldr	r3, [r2, r3]
 800d402:	7818      	ldrb	r0, [r3, #0]
 800d404:	4b2c      	ldr	r3, [pc, #176]	; (800d4b8 <SendFrameOnChannel+0x160>)
 800d406:	240b      	movs	r4, #11
 800d408:	193a      	adds	r2, r7, r4
 800d40a:	210c      	movs	r1, #12
 800d40c:	1879      	adds	r1, r7, r1
 800d40e:	f005 fb5b 	bl	8012ac8 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d412:	4b28      	ldr	r3, [pc, #160]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d414:	4a29      	ldr	r2, [pc, #164]	; (800d4bc <SendFrameOnChannel+0x164>)
 800d416:	2101      	movs	r1, #1
 800d418:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d41a:	4a26      	ldr	r2, [pc, #152]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d41c:	238e      	movs	r3, #142	; 0x8e
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	58d3      	ldr	r3, [r2, r3]
 800d422:	22d5      	movs	r2, #213	; 0xd5
 800d424:	569b      	ldrsb	r3, [r3, r2]
 800d426:	b2d9      	uxtb	r1, r3
 800d428:	4b22      	ldr	r3, [pc, #136]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d42a:	4a25      	ldr	r2, [pc, #148]	; (800d4c0 <SendFrameOnChannel+0x168>)
 800d42c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800d42e:	193b      	adds	r3, r7, r4
 800d430:	2100      	movs	r1, #0
 800d432:	5659      	ldrsb	r1, [r3, r1]
 800d434:	4b1f      	ldr	r3, [pc, #124]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d436:	4a23      	ldr	r2, [pc, #140]	; (800d4c4 <SendFrameOnChannel+0x16c>)
 800d438:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800d43a:	1dfb      	adds	r3, r7, #7
 800d43c:	781a      	ldrb	r2, [r3, #0]
 800d43e:	4b1d      	ldr	r3, [pc, #116]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d440:	4921      	ldr	r1, [pc, #132]	; (800d4c8 <SendFrameOnChannel+0x170>)
 800d442:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d444:	4b1b      	ldr	r3, [pc, #108]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d446:	4a21      	ldr	r2, [pc, #132]	; (800d4cc <SendFrameOnChannel+0x174>)
 800d448:	589a      	ldr	r2, [r3, r2]
 800d44a:	4b1a      	ldr	r3, [pc, #104]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d44c:	4920      	ldr	r1, [pc, #128]	; (800d4d0 <SendFrameOnChannel+0x178>)
 800d44e:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d450:	4b18      	ldr	r3, [pc, #96]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d452:	4a1e      	ldr	r2, [pc, #120]	; (800d4cc <SendFrameOnChannel+0x174>)
 800d454:	589a      	ldr	r2, [r3, r2]
 800d456:	4b17      	ldr	r3, [pc, #92]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d458:	491e      	ldr	r1, [pc, #120]	; (800d4d4 <SendFrameOnChannel+0x17c>)
 800d45a:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d45c:	f002 fab9 	bl	800f9d2 <LoRaMacClassBIsBeaconModeActive>
 800d460:	1e03      	subs	r3, r0, #0
 800d462:	d00c      	beq.n	800d47e <SendFrameOnChannel+0x126>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d464:	4b13      	ldr	r3, [pc, #76]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d466:	4a19      	ldr	r2, [pc, #100]	; (800d4cc <SendFrameOnChannel+0x174>)
 800d468:	589b      	ldr	r3, [r3, r2]
 800d46a:	0018      	movs	r0, r3
 800d46c:	f002 fb15 	bl	800fa9a <LoRaMacClassBIsUplinkCollision>
 800d470:	0003      	movs	r3, r0
 800d472:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <SendFrameOnChannel+0x126>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800d47a:	2310      	movs	r3, #16
 800d47c:	e015      	b.n	800d4aa <SendFrameOnChannel+0x152>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800d47e:	f002 fab8 	bl	800f9f2 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d482:	4a0c      	ldr	r2, [pc, #48]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d484:	23d5      	movs	r3, #213	; 0xd5
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	58d3      	ldr	r3, [r2, r3]
 800d48a:	2202      	movs	r2, #2
 800d48c:	431a      	orrs	r2, r3
 800d48e:	0011      	movs	r1, r2
 800d490:	4a08      	ldr	r2, [pc, #32]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d492:	23d5      	movs	r3, #213	; 0xd5
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800d498:	4b0f      	ldr	r3, [pc, #60]	; (800d4d8 <SendFrameOnChannel+0x180>)
 800d49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49c:	4a05      	ldr	r2, [pc, #20]	; (800d4b4 <SendFrameOnChannel+0x15c>)
 800d49e:	8912      	ldrh	r2, [r2, #8]
 800d4a0:	b2d1      	uxtb	r1, r2
 800d4a2:	4a0e      	ldr	r2, [pc, #56]	; (800d4dc <SendFrameOnChannel+0x184>)
 800d4a4:	0010      	movs	r0, r2
 800d4a6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	b009      	add	sp, #36	; 0x24
 800d4b0:	bd90      	pop	{r4, r7, pc}
 800d4b2:	46c0      	nop			; (mov r8, r8)
 800d4b4:	20000598 	.word	0x20000598
 800d4b8:	200009a4 	.word	0x200009a4
 800d4bc:	0000042d 	.word	0x0000042d
 800d4c0:	0000042e 	.word	0x0000042e
 800d4c4:	0000042f 	.word	0x0000042f
 800d4c8:	0000043c 	.word	0x0000043c
 800d4cc:	0000040c 	.word	0x0000040c
 800d4d0:	00000434 	.word	0x00000434
 800d4d4:	00000444 	.word	0x00000444
 800d4d8:	08020a5c 	.word	0x08020a5c
 800d4dc:	200005a2 	.word	0x200005a2

0800d4e0 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	0002      	movs	r2, r0
 800d4e8:	1dbb      	adds	r3, r7, #6
 800d4ea:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.NvmCtx->Channel;
 800d4ec:	4a24      	ldr	r2, [pc, #144]	; (800d580 <SetTxContinuousWave+0xa0>)
 800d4ee:	238e      	movs	r3, #142	; 0x8e
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	58d2      	ldr	r2, [r2, r3]
 800d4f4:	2314      	movs	r3, #20
 800d4f6:	33ff      	adds	r3, #255	; 0xff
 800d4f8:	5cd2      	ldrb	r2, [r2, r3]
 800d4fa:	2108      	movs	r1, #8
 800d4fc:	187b      	adds	r3, r7, r1
 800d4fe:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800d500:	4a1f      	ldr	r2, [pc, #124]	; (800d580 <SetTxContinuousWave+0xa0>)
 800d502:	238e      	movs	r3, #142	; 0x8e
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	58d3      	ldr	r3, [r2, r3]
 800d508:	22d5      	movs	r2, #213	; 0xd5
 800d50a:	569a      	ldrsb	r2, [r3, r2]
 800d50c:	187b      	adds	r3, r7, r1
 800d50e:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800d510:	4a1b      	ldr	r2, [pc, #108]	; (800d580 <SetTxContinuousWave+0xa0>)
 800d512:	238e      	movs	r3, #142	; 0x8e
 800d514:	00db      	lsls	r3, r3, #3
 800d516:	58d3      	ldr	r3, [r2, r3]
 800d518:	22d4      	movs	r2, #212	; 0xd4
 800d51a:	569a      	ldrsb	r2, [r3, r2]
 800d51c:	187b      	adds	r3, r7, r1
 800d51e:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800d520:	4a17      	ldr	r2, [pc, #92]	; (800d580 <SetTxContinuousWave+0xa0>)
 800d522:	238e      	movs	r3, #142	; 0x8e
 800d524:	00db      	lsls	r3, r3, #3
 800d526:	58d2      	ldr	r2, [r2, r3]
 800d528:	2382      	movs	r3, #130	; 0x82
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	58d2      	ldr	r2, [r2, r3]
 800d52e:	187b      	adds	r3, r7, r1
 800d530:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800d532:	4a13      	ldr	r2, [pc, #76]	; (800d580 <SetTxContinuousWave+0xa0>)
 800d534:	238e      	movs	r3, #142	; 0x8e
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	58d2      	ldr	r2, [r2, r3]
 800d53a:	2384      	movs	r3, #132	; 0x84
 800d53c:	005b      	lsls	r3, r3, #1
 800d53e:	58d2      	ldr	r2, [r2, r3]
 800d540:	187b      	adds	r3, r7, r1
 800d542:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 800d544:	187b      	adds	r3, r7, r1
 800d546:	1dba      	adds	r2, r7, #6
 800d548:	8812      	ldrh	r2, [r2, #0]
 800d54a:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800d54c:	4a0c      	ldr	r2, [pc, #48]	; (800d580 <SetTxContinuousWave+0xa0>)
 800d54e:	238e      	movs	r3, #142	; 0x8e
 800d550:	00db      	lsls	r3, r3, #3
 800d552:	58d3      	ldr	r3, [r2, r3]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	187a      	adds	r2, r7, r1
 800d558:	0011      	movs	r1, r2
 800d55a:	0018      	movs	r0, r3
 800d55c:	f005 fbae 	bl	8012cbc <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d560:	4a07      	ldr	r2, [pc, #28]	; (800d580 <SetTxContinuousWave+0xa0>)
 800d562:	23d5      	movs	r3, #213	; 0xd5
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	58d3      	ldr	r3, [r2, r3]
 800d568:	2202      	movs	r2, #2
 800d56a:	431a      	orrs	r2, r3
 800d56c:	0011      	movs	r1, r2
 800d56e:	4a04      	ldr	r2, [pc, #16]	; (800d580 <SetTxContinuousWave+0xa0>)
 800d570:	23d5      	movs	r3, #213	; 0xd5
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	0018      	movs	r0, r3
 800d57a:	46bd      	mov	sp, r7
 800d57c:	b006      	add	sp, #24
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20000598 	.word	0x20000598

0800d584 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6039      	str	r1, [r7, #0]
 800d58c:	0011      	movs	r1, r2
 800d58e:	1dbb      	adds	r3, r7, #6
 800d590:	1c02      	adds	r2, r0, #0
 800d592:	801a      	strh	r2, [r3, #0]
 800d594:	1d7b      	adds	r3, r7, #5
 800d596:	1c0a      	adds	r2, r1, #0
 800d598:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800d59a:	4b0c      	ldr	r3, [pc, #48]	; (800d5cc <SetTxContinuousWave1+0x48>)
 800d59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d59e:	1d7a      	adds	r2, r7, #5
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	5651      	ldrsb	r1, [r2, r1]
 800d5a4:	1dba      	adds	r2, r7, #6
 800d5a6:	8812      	ldrh	r2, [r2, #0]
 800d5a8:	6838      	ldr	r0, [r7, #0]
 800d5aa:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d5ac:	4a08      	ldr	r2, [pc, #32]	; (800d5d0 <SetTxContinuousWave1+0x4c>)
 800d5ae:	23d5      	movs	r3, #213	; 0xd5
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	58d3      	ldr	r3, [r2, r3]
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	431a      	orrs	r2, r3
 800d5b8:	0011      	movs	r1, r2
 800d5ba:	4a05      	ldr	r2, [pc, #20]	; (800d5d0 <SetTxContinuousWave1+0x4c>)
 800d5bc:	23d5      	movs	r3, #213	; 0xd5
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	b002      	add	sp, #8
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	08020a5c 	.word	0x08020a5c
 800d5d0:	20000598 	.word	0x20000598

0800d5d4 <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 800d5da:	4b24      	ldr	r3, [pc, #144]	; (800d66c <GetCtxs+0x98>)
 800d5dc:	4a24      	ldr	r2, [pc, #144]	; (800d670 <GetCtxs+0x9c>)
 800d5de:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800d5e0:	4b22      	ldr	r3, [pc, #136]	; (800d66c <GetCtxs+0x98>)
 800d5e2:	228b      	movs	r2, #139	; 0x8b
 800d5e4:	0092      	lsls	r2, r2, #2
 800d5e6:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800d5e8:	4b22      	ldr	r3, [pc, #136]	; (800d674 <GetCtxs+0xa0>)
 800d5ea:	0018      	movs	r0, r3
 800d5ec:	f003 feec 	bl	80113c8 <LoRaMacCryptoGetNvmCtx>
 800d5f0:	0002      	movs	r2, r0
 800d5f2:	4b1e      	ldr	r3, [pc, #120]	; (800d66c <GetCtxs+0x98>)
 800d5f4:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800d5fa:	4a1f      	ldr	r2, [pc, #124]	; (800d678 <GetCtxs+0xa4>)
 800d5fc:	238e      	movs	r3, #142	; 0x8e
 800d5fe:	00db      	lsls	r3, r3, #3
 800d600:	58d3      	ldr	r3, [r2, r3]
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	1d3a      	adds	r2, r7, #4
 800d606:	0011      	movs	r1, r2
 800d608:	0018      	movs	r0, r3
 800d60a:	f005 f9c1 	bl	8012990 <RegionGetNvmCtx>
 800d60e:	0002      	movs	r2, r0
 800d610:	4b16      	ldr	r3, [pc, #88]	; (800d66c <GetCtxs+0x98>)
 800d612:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	4b15      	ldr	r3, [pc, #84]	; (800d66c <GetCtxs+0x98>)
 800d618:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800d61a:	4b18      	ldr	r3, [pc, #96]	; (800d67c <GetCtxs+0xa8>)
 800d61c:	0018      	movs	r0, r3
 800d61e:	f7fc fabd 	bl	8009b9c <SecureElementGetNvmCtx>
 800d622:	0002      	movs	r2, r0
 800d624:	4b11      	ldr	r3, [pc, #68]	; (800d66c <GetCtxs+0x98>)
 800d626:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800d628:	4b15      	ldr	r3, [pc, #84]	; (800d680 <GetCtxs+0xac>)
 800d62a:	0018      	movs	r0, r3
 800d62c:	f002 fb9e 	bl	800fd6c <LoRaMacCommandsGetNvmCtx>
 800d630:	0002      	movs	r2, r0
 800d632:	4b0e      	ldr	r3, [pc, #56]	; (800d66c <GetCtxs+0x98>)
 800d634:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800d636:	4b13      	ldr	r3, [pc, #76]	; (800d684 <GetCtxs+0xb0>)
 800d638:	0018      	movs	r0, r3
 800d63a:	f002 f964 	bl	800f906 <LoRaMacClassBGetNvmCtx>
 800d63e:	0002      	movs	r2, r0
 800d640:	4b0a      	ldr	r3, [pc, #40]	; (800d66c <GetCtxs+0x98>)
 800d642:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800d644:	4b10      	ldr	r3, [pc, #64]	; (800d688 <GetCtxs+0xb4>)
 800d646:	0018      	movs	r0, r3
 800d648:	f002 fd9a 	bl	8010180 <LoRaMacConfirmQueueGetNvmCtx>
 800d64c:	0002      	movs	r2, r0
 800d64e:	4b07      	ldr	r3, [pc, #28]	; (800d66c <GetCtxs+0x98>)
 800d650:	631a      	str	r2, [r3, #48]	; 0x30
    Contexts.FCntHandlerNvmCtx = LoRaMacFCntHandlerGetNvmCtx( &Contexts.FCntHandlerNvmCtxSize );
 800d652:	4b0e      	ldr	r3, [pc, #56]	; (800d68c <GetCtxs+0xb8>)
 800d654:	0018      	movs	r0, r3
 800d656:	f004 fc0b 	bl	8011e70 <LoRaMacFCntHandlerGetNvmCtx>
 800d65a:	0002      	movs	r2, r0
 800d65c:	4b03      	ldr	r3, [pc, #12]	; (800d66c <GetCtxs+0x98>)
 800d65e:	639a      	str	r2, [r3, #56]	; 0x38
    return &Contexts;
 800d660:	4b02      	ldr	r3, [pc, #8]	; (800d66c <GetCtxs+0x98>)
}
 800d662:	0018      	movs	r0, r3
 800d664:	46bd      	mov	sp, r7
 800d666:	b002      	add	sp, #8
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	46c0      	nop			; (mov r8, r8)
 800d66c:	20001434 	.word	0x20001434
 800d670:	20000a0c 	.word	0x20000a0c
 800d674:	20001448 	.word	0x20001448
 800d678:	20000598 	.word	0x20000598
 800d67c:	20001450 	.word	0x20001450
 800d680:	20001458 	.word	0x20001458
 800d684:	20001460 	.word	0x20001460
 800d688:	20001468 	.word	0x20001468
 800d68c:	20001470 	.word	0x20001470

0800d690 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	e067      	b.n	800d772 <RestoreCtxs+0xe2>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800d6a2:	4a36      	ldr	r2, [pc, #216]	; (800d77c <RestoreCtxs+0xec>)
 800d6a4:	23d5      	movs	r3, #213	; 0xd5
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	58d3      	ldr	r3, [r2, r3]
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d001      	beq.n	800d6b2 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e05f      	b.n	800d772 <RestoreCtxs+0xe2>
    }

    if( contexts->MacNvmCtx != NULL )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d008      	beq.n	800d6cc <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6819      	ldr	r1, [r3, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	4b2e      	ldr	r3, [pc, #184]	; (800d780 <RestoreCtxs+0xf0>)
 800d6c6:	0018      	movs	r0, r3
 800d6c8:	f007 fece 	bl	8015468 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 800d6cc:	2108      	movs	r1, #8
 800d6ce:	187b      	adds	r3, r7, r1
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	689a      	ldr	r2, [r3, #8]
 800d6d8:	187b      	adds	r3, r7, r1
 800d6da:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800d6dc:	4a27      	ldr	r2, [pc, #156]	; (800d77c <RestoreCtxs+0xec>)
 800d6de:	238e      	movs	r3, #142	; 0x8e
 800d6e0:	00db      	lsls	r3, r3, #3
 800d6e2:	58d3      	ldr	r3, [r2, r3]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	187a      	adds	r2, r7, r1
 800d6e8:	0011      	movs	r1, r2
 800d6ea:	0018      	movs	r0, r3
 800d6ec:	f005 f93b 	bl	8012966 <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	699b      	ldr	r3, [r3, #24]
 800d6f4:	0018      	movs	r0, r3
 800d6f6:	f7fc fa39 	bl	8009b6c <SecureElementRestoreNvmCtx>
 800d6fa:	1e03      	subs	r3, r0, #0
 800d6fc:	d001      	beq.n	800d702 <RestoreCtxs+0x72>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d6fe:	2311      	movs	r3, #17
 800d700:	e037      	b.n	800d772 <RestoreCtxs+0xe2>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	0018      	movs	r0, r3
 800d708:	f003 fe48 	bl	801139c <LoRaMacCryptoRestoreNvmCtx>
 800d70c:	1e03      	subs	r3, r0, #0
 800d70e:	d001      	beq.n	800d714 <RestoreCtxs+0x84>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d710:	2311      	movs	r3, #17
 800d712:	e02e      	b.n	800d772 <RestoreCtxs+0xe2>
    }

    if( LoRaMacFCntHandlerRestoreNvmCtx( contexts->FCntHandlerNvmCtx ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d718:	0018      	movs	r0, r3
 800d71a:	f004 fb93 	bl	8011e44 <LoRaMacFCntHandlerRestoreNvmCtx>
 800d71e:	1e03      	subs	r3, r0, #0
 800d720:	d001      	beq.n	800d726 <RestoreCtxs+0x96>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d722:	2312      	movs	r3, #18
 800d724:	e025      	b.n	800d772 <RestoreCtxs+0xe2>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	0018      	movs	r0, r3
 800d72c:	f002 fb08 	bl	800fd40 <LoRaMacCommandsRestoreNvmCtx>
 800d730:	1e03      	subs	r3, r0, #0
 800d732:	d001      	beq.n	800d738 <RestoreCtxs+0xa8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d734:	2313      	movs	r3, #19
 800d736:	e01c      	b.n	800d772 <RestoreCtxs+0xe2>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d73c:	0018      	movs	r0, r3
 800d73e:	f002 f8d9 	bl	800f8f4 <LoRaMacClassBRestoreNvmCtx>
 800d742:	0003      	movs	r3, r0
 800d744:	001a      	movs	r2, r3
 800d746:	2301      	movs	r3, #1
 800d748:	4053      	eors	r3, r2
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <RestoreCtxs+0xc4>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800d750:	2314      	movs	r3, #20
 800d752:	e00e      	b.n	800d772 <RestoreCtxs+0xe2>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d758:	0018      	movs	r0, r3
 800d75a:	f002 fcfb 	bl	8010154 <LoRaMacConfirmQueueRestoreNvmCtx>
 800d75e:	0003      	movs	r3, r0
 800d760:	001a      	movs	r2, r3
 800d762:	2301      	movs	r3, #1
 800d764:	4053      	eors	r3, r2
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d001      	beq.n	800d770 <RestoreCtxs+0xe0>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800d76c:	2315      	movs	r3, #21
 800d76e:	e000      	b.n	800d772 <RestoreCtxs+0xe2>
    }

    return LORAMAC_STATUS_OK;
 800d770:	2300      	movs	r3, #0
}
 800d772:	0018      	movs	r0, r3
 800d774:	46bd      	mov	sp, r7
 800d776:	b004      	add	sp, #16
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	20000598 	.word	0x20000598
 800d780:	20000a0c 	.word	0x20000a0c

0800d784 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d002      	beq.n	800d79a <DetermineFrameType+0x16>
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d79a:	2303      	movs	r3, #3
 800d79c:	e03b      	b.n	800d816 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	7b1b      	ldrb	r3, [r3, #12]
 800d7a2:	220f      	movs	r2, #15
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d008      	beq.n	800d7be <DetermineFrameType+0x3a>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2220      	movs	r2, #32
 800d7b0:	5c9b      	ldrb	r3, [r3, r2]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	701a      	strb	r2, [r3, #0]
 800d7bc:	e02a      	b.n	800d814 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2228      	movs	r2, #40	; 0x28
 800d7c2:	5c9b      	ldrb	r3, [r3, r2]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d103      	bne.n	800d7d0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	701a      	strb	r2, [r3, #0]
 800d7ce:	e021      	b.n	800d814 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	7b1b      	ldrb	r3, [r3, #12]
 800d7d4:	220f      	movs	r2, #15
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d108      	bne.n	800d7f0 <DetermineFrameType+0x6c>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2220      	movs	r2, #32
 800d7e2:	5c9b      	ldrb	r3, [r3, r2]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d103      	bne.n	800d7f0 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	701a      	strb	r2, [r3, #0]
 800d7ee:	e011      	b.n	800d814 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7b1b      	ldrb	r3, [r3, #12]
 800d7f4:	220f      	movs	r2, #15
 800d7f6:	4013      	ands	r3, r2
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d108      	bne.n	800d810 <DetermineFrameType+0x8c>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2220      	movs	r2, #32
 800d802:	5c9b      	ldrb	r3, [r3, r2]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d003      	beq.n	800d810 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	2203      	movs	r2, #3
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	e001      	b.n	800d814 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800d810:	2316      	movs	r3, #22
 800d812:	e000      	b.n	800d816 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	0018      	movs	r0, r3
 800d818:	46bd      	mov	sp, r7
 800d81a:	b002      	add	sp, #8
 800d81c:	bd80      	pop	{r7, pc}
	...

0800d820 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800d824:	4a16      	ldr	r2, [pc, #88]	; (800d880 <CheckRetransUnconfirmedUplink+0x60>)
 800d826:	238e      	movs	r3, #142	; 0x8e
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	58d2      	ldr	r2, [r2, r3]
 800d82c:	2388      	movs	r3, #136	; 0x88
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800d832:	4913      	ldr	r1, [pc, #76]	; (800d880 <CheckRetransUnconfirmedUplink+0x60>)
 800d834:	238e      	movs	r3, #142	; 0x8e
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	58cb      	ldr	r3, [r1, r3]
 800d83a:	21f4      	movs	r1, #244	; 0xf4
 800d83c:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800d83e:	429a      	cmp	r2, r3
 800d840:	d301      	bcc.n	800d846 <CheckRetransUnconfirmedUplink+0x26>
    {
        return true;
 800d842:	2301      	movs	r3, #1
 800d844:	e019      	b.n	800d87a <CheckRetransUnconfirmedUplink+0x5a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d846:	4b0e      	ldr	r3, [pc, #56]	; (800d880 <CheckRetransUnconfirmedUplink+0x60>)
 800d848:	4a0e      	ldr	r2, [pc, #56]	; (800d884 <CheckRetransUnconfirmedUplink+0x64>)
 800d84a:	5c9b      	ldrb	r3, [r3, r2]
 800d84c:	2202      	movs	r2, #2
 800d84e:	4013      	ands	r3, r2
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d010      	beq.n	800d878 <CheckRetransUnconfirmedUplink+0x58>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800d856:	4a0a      	ldr	r2, [pc, #40]	; (800d880 <CheckRetransUnconfirmedUplink+0x60>)
 800d858:	238e      	movs	r3, #142	; 0x8e
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	58d3      	ldr	r3, [r2, r3]
 800d85e:	22c8      	movs	r2, #200	; 0xc8
 800d860:	5c9b      	ldrb	r3, [r3, r2]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d101      	bne.n	800d86a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800d866:	2301      	movs	r3, #1
 800d868:	e007      	b.n	800d87a <CheckRetransUnconfirmedUplink+0x5a>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d86a:	4b05      	ldr	r3, [pc, #20]	; (800d880 <CheckRetransUnconfirmedUplink+0x60>)
 800d86c:	4a06      	ldr	r2, [pc, #24]	; (800d888 <CheckRetransUnconfirmedUplink+0x68>)
 800d86e:	5c9b      	ldrb	r3, [r3, r2]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d101      	bne.n	800d878 <CheckRetransUnconfirmedUplink+0x58>
            {
                return true;
 800d874:	2301      	movs	r3, #1
 800d876:	e000      	b.n	800d87a <CheckRetransUnconfirmedUplink+0x5a>
            }
        }
    }
    return false;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	0018      	movs	r0, r3
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	20000598 	.word	0x20000598
 800d884:	0000046d 	.word	0x0000046d
 800d888:	0000046c 	.word	0x0000046c

0800d88c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800d890:	4a11      	ldr	r2, [pc, #68]	; (800d8d8 <CheckRetransConfirmedUplink+0x4c>)
 800d892:	238e      	movs	r3, #142	; 0x8e
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	58d3      	ldr	r3, [r2, r3]
 800d898:	4a10      	ldr	r2, [pc, #64]	; (800d8dc <CheckRetransConfirmedUplink+0x50>)
 800d89a:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.NvmCtx->AckTimeoutRetries )
 800d89c:	490e      	ldr	r1, [pc, #56]	; (800d8d8 <CheckRetransConfirmedUplink+0x4c>)
 800d89e:	238e      	movs	r3, #142	; 0x8e
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	58cb      	ldr	r3, [r1, r3]
 800d8a4:	490e      	ldr	r1, [pc, #56]	; (800d8e0 <CheckRetransConfirmedUplink+0x54>)
 800d8a6:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d301      	bcc.n	800d8b0 <CheckRetransConfirmedUplink+0x24>
    {
        return true;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e010      	b.n	800d8d2 <CheckRetransConfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d8b0:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <CheckRetransConfirmedUplink+0x4c>)
 800d8b2:	4a0c      	ldr	r2, [pc, #48]	; (800d8e4 <CheckRetransConfirmedUplink+0x58>)
 800d8b4:	5c9b      	ldrb	r3, [r3, r2]
 800d8b6:	2202      	movs	r2, #2
 800d8b8:	4013      	ands	r3, r2
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d007      	beq.n	800d8d0 <CheckRetransConfirmedUplink+0x44>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d8c0:	4a05      	ldr	r2, [pc, #20]	; (800d8d8 <CheckRetransConfirmedUplink+0x4c>)
 800d8c2:	2386      	movs	r3, #134	; 0x86
 800d8c4:	00db      	lsls	r3, r3, #3
 800d8c6:	5cd3      	ldrb	r3, [r2, r3]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d001      	beq.n	800d8d0 <CheckRetransConfirmedUplink+0x44>
        {
            return true;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e000      	b.n	800d8d2 <CheckRetransConfirmedUplink+0x46>
        }
    }
    return false;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	0018      	movs	r0, r3
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	20000598 	.word	0x20000598
 800d8dc:	00000217 	.word	0x00000217
 800d8e0:	00000216 	.word	0x00000216
 800d8e4:	0000046d 	.word	0x0000046d

0800d8e8 <StopRetransmission>:


static bool StopRetransmission( void )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800d8f2:	1d3b      	adds	r3, r7, #4
 800d8f4:	0018      	movs	r0, r3
 800d8f6:	f004 fbb3 	bl	8012060 <LoRaMacGetFCntUp>
 800d8fa:	1e03      	subs	r3, r0, #0
 800d8fc:	d001      	beq.n	800d902 <StopRetransmission+0x1a>
    {
        return false;
 800d8fe:	2300      	movs	r3, #0
 800d900:	e043      	b.n	800d98a <StopRetransmission+0xa2>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	0018      	movs	r0, r3
 800d906:	f004 fbc1 	bl	801208c <LoRaMacSetFCntUp>
 800d90a:	1e03      	subs	r3, r0, #0
 800d90c:	d001      	beq.n	800d912 <StopRetransmission+0x2a>
    {
        return false;
 800d90e:	2300      	movs	r3, #0
 800d910:	e03b      	b.n	800d98a <StopRetransmission+0xa2>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
 800d912:	4b20      	ldr	r3, [pc, #128]	; (800d994 <StopRetransmission+0xac>)
 800d914:	4a20      	ldr	r2, [pc, #128]	; (800d998 <StopRetransmission+0xb0>)
 800d916:	5c9b      	ldrb	r3, [r3, r2]
 800d918:	2202      	movs	r2, #2
 800d91a:	4013      	ands	r3, r2
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d110      	bne.n	800d944 <StopRetransmission+0x5c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800d922:	4a1c      	ldr	r2, [pc, #112]	; (800d994 <StopRetransmission+0xac>)
 800d924:	238e      	movs	r3, #142	; 0x8e
 800d926:	00db      	lsls	r3, r3, #3
 800d928:	58d3      	ldr	r3, [r2, r3]
 800d92a:	22ca      	movs	r2, #202	; 0xca
 800d92c:	5c9b      	ldrb	r3, [r3, r2]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d008      	beq.n	800d944 <StopRetransmission+0x5c>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800d932:	4a18      	ldr	r2, [pc, #96]	; (800d994 <StopRetransmission+0xac>)
 800d934:	238e      	movs	r3, #142	; 0x8e
 800d936:	00db      	lsls	r3, r3, #3
 800d938:	58d3      	ldr	r3, [r2, r3]
 800d93a:	22cc      	movs	r2, #204	; 0xcc
 800d93c:	589a      	ldr	r2, [r3, r2]
 800d93e:	3201      	adds	r2, #1
 800d940:	21cc      	movs	r1, #204	; 0xcc
 800d942:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800d944:	4a13      	ldr	r2, [pc, #76]	; (800d994 <StopRetransmission+0xac>)
 800d946:	238e      	movs	r3, #142	; 0x8e
 800d948:	00db      	lsls	r3, r3, #3
 800d94a:	58d2      	ldr	r2, [r2, r3]
 800d94c:	2388      	movs	r3, #136	; 0x88
 800d94e:	005b      	lsls	r3, r3, #1
 800d950:	2100      	movs	r1, #0
 800d952:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800d954:	4a0f      	ldr	r2, [pc, #60]	; (800d994 <StopRetransmission+0xac>)
 800d956:	238e      	movs	r3, #142	; 0x8e
 800d958:	00db      	lsls	r3, r3, #3
 800d95a:	58d3      	ldr	r3, [r2, r3]
 800d95c:	4a0f      	ldr	r2, [pc, #60]	; (800d99c <StopRetransmission+0xb4>)
 800d95e:	2100      	movs	r1, #0
 800d960:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800d962:	4a0c      	ldr	r2, [pc, #48]	; (800d994 <StopRetransmission+0xac>)
 800d964:	238e      	movs	r3, #142	; 0x8e
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	58d2      	ldr	r2, [r2, r3]
 800d96a:	2386      	movs	r3, #134	; 0x86
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	2100      	movs	r1, #0
 800d970:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d972:	4a08      	ldr	r2, [pc, #32]	; (800d994 <StopRetransmission+0xac>)
 800d974:	23d5      	movs	r3, #213	; 0xd5
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	58d3      	ldr	r3, [r2, r3]
 800d97a:	2202      	movs	r2, #2
 800d97c:	4393      	bics	r3, r2
 800d97e:	0019      	movs	r1, r3
 800d980:	4a04      	ldr	r2, [pc, #16]	; (800d994 <StopRetransmission+0xac>)
 800d982:	23d5      	movs	r3, #213	; 0xd5
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	50d1      	str	r1, [r2, r3]

    return true;
 800d988:	2301      	movs	r3, #1
}
 800d98a:	0018      	movs	r0, r3
 800d98c:	46bd      	mov	sp, r7
 800d98e:	b002      	add	sp, #8
 800d990:	bd80      	pop	{r7, pc}
 800d992:	46c0      	nop			; (mov r8, r8)
 800d994:	20000598 	.word	0x20000598
 800d998:	0000046d 	.word	0x0000046d
 800d99c:	00000219 	.word	0x00000219

0800d9a0 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
    if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter < MacCtx.NvmCtx->AckTimeoutRetries ) && ( MacCtx.NvmCtx->AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 800d9a6:	4a2d      	ldr	r2, [pc, #180]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800d9a8:	238e      	movs	r3, #142	; 0x8e
 800d9aa:	00db      	lsls	r3, r3, #3
 800d9ac:	58d3      	ldr	r3, [r2, r3]
 800d9ae:	4a2c      	ldr	r2, [pc, #176]	; (800da60 <AckTimeoutRetriesProcess+0xc0>)
 800d9b0:	5c9a      	ldrb	r2, [r3, r2]
 800d9b2:	492a      	ldr	r1, [pc, #168]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800d9b4:	238e      	movs	r3, #142	; 0x8e
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	58cb      	ldr	r3, [r1, r3]
 800d9ba:	492a      	ldr	r1, [pc, #168]	; (800da64 <AckTimeoutRetriesProcess+0xc4>)
 800d9bc:	5c5b      	ldrb	r3, [r3, r1]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d247      	bcs.n	800da52 <AckTimeoutRetriesProcess+0xb2>
 800d9c2:	4a26      	ldr	r2, [pc, #152]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800d9c4:	238e      	movs	r3, #142	; 0x8e
 800d9c6:	00db      	lsls	r3, r3, #3
 800d9c8:	58d3      	ldr	r3, [r2, r3]
 800d9ca:	4a25      	ldr	r2, [pc, #148]	; (800da60 <AckTimeoutRetriesProcess+0xc0>)
 800d9cc:	5c9b      	ldrb	r3, [r3, r2]
 800d9ce:	2b08      	cmp	r3, #8
 800d9d0:	d83f      	bhi.n	800da52 <AckTimeoutRetriesProcess+0xb2>
    {
        MacCtx.NvmCtx->AckTimeoutRetriesCounter++;
 800d9d2:	4a22      	ldr	r2, [pc, #136]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800d9d4:	238e      	movs	r3, #142	; 0x8e
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	58d3      	ldr	r3, [r2, r3]
 800d9da:	4a21      	ldr	r2, [pc, #132]	; (800da60 <AckTimeoutRetriesProcess+0xc0>)
 800d9dc:	5c9a      	ldrb	r2, [r3, r2]
 800d9de:	3201      	adds	r2, #1
 800d9e0:	b2d1      	uxtb	r1, r2
 800d9e2:	4a1f      	ldr	r2, [pc, #124]	; (800da60 <AckTimeoutRetriesProcess+0xc0>)
 800d9e4:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter % 2 ) == 1 )
 800d9e6:	4a1d      	ldr	r2, [pc, #116]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800d9e8:	238e      	movs	r3, #142	; 0x8e
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	58d3      	ldr	r3, [r2, r3]
 800d9ee:	4a1c      	ldr	r2, [pc, #112]	; (800da60 <AckTimeoutRetriesProcess+0xc0>)
 800d9f0:	5c9b      	ldrb	r3, [r3, r2]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	4013      	ands	r3, r2
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d02a      	beq.n	800da52 <AckTimeoutRetriesProcess+0xb2>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800d9fc:	1d3b      	adds	r3, r7, #4
 800d9fe:	2221      	movs	r2, #33	; 0x21
 800da00:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800da02:	4a16      	ldr	r2, [pc, #88]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800da04:	238e      	movs	r3, #142	; 0x8e
 800da06:	00db      	lsls	r3, r3, #3
 800da08:	58d2      	ldr	r2, [r2, r3]
 800da0a:	2380      	movs	r3, #128	; 0x80
 800da0c:	005b      	lsls	r3, r3, #1
 800da0e:	5cd2      	ldrb	r2, [r2, r3]
 800da10:	1d3b      	adds	r3, r7, #4
 800da12:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800da14:	4a11      	ldr	r2, [pc, #68]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800da16:	238e      	movs	r3, #142	; 0x8e
 800da18:	00db      	lsls	r3, r3, #3
 800da1a:	58d3      	ldr	r3, [r2, r3]
 800da1c:	22d5      	movs	r2, #213	; 0xd5
 800da1e:	569a      	ldrsb	r2, [r3, r2]
 800da20:	1d3b      	adds	r3, r7, #4
 800da22:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800da24:	4a0d      	ldr	r2, [pc, #52]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800da26:	238e      	movs	r3, #142	; 0x8e
 800da28:	00db      	lsls	r3, r3, #3
 800da2a:	58d3      	ldr	r3, [r2, r3]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	1d3a      	adds	r2, r7, #4
 800da30:	0011      	movs	r1, r2
 800da32:	0018      	movs	r0, r3
 800da34:	f004 ff5b 	bl	80128ee <RegionGetPhyParam>
 800da38:	0003      	movs	r3, r0
 800da3a:	001a      	movs	r2, r3
 800da3c:	003b      	movs	r3, r7
 800da3e:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800da40:	003b      	movs	r3, r7
 800da42:	6819      	ldr	r1, [r3, #0]
 800da44:	4a05      	ldr	r2, [pc, #20]	; (800da5c <AckTimeoutRetriesProcess+0xbc>)
 800da46:	238e      	movs	r3, #142	; 0x8e
 800da48:	00db      	lsls	r3, r3, #3
 800da4a:	58d3      	ldr	r3, [r2, r3]
 800da4c:	b249      	sxtb	r1, r1
 800da4e:	22d5      	movs	r2, #213	; 0xd5
 800da50:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800da52:	46c0      	nop			; (mov r8, r8)
 800da54:	46bd      	mov	sp, r7
 800da56:	b002      	add	sp, #8
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	46c0      	nop			; (mov r8, r8)
 800da5c:	20000598 	.word	0x20000598
 800da60:	00000217 	.word	0x00000217
 800da64:	00000216 	.word	0x00000216

0800da68 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800da6e:	4a19      	ldr	r2, [pc, #100]	; (800dad4 <AckTimeoutRetriesFinalize+0x6c>)
 800da70:	2386      	movs	r3, #134	; 0x86
 800da72:	00db      	lsls	r3, r3, #3
 800da74:	5cd3      	ldrb	r3, [r2, r3]
 800da76:	2201      	movs	r2, #1
 800da78:	4053      	eors	r3, r2
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d01c      	beq.n	800daba <AckTimeoutRetriesFinalize+0x52>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800da80:	003b      	movs	r3, r7
 800da82:	2201      	movs	r2, #1
 800da84:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800da86:	4b14      	ldr	r3, [pc, #80]	; (800dad8 <AckTimeoutRetriesFinalize+0x70>)
 800da88:	689a      	ldr	r2, [r3, #8]
 800da8a:	003b      	movs	r3, r7
 800da8c:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800da8e:	4a11      	ldr	r2, [pc, #68]	; (800dad4 <AckTimeoutRetriesFinalize+0x6c>)
 800da90:	238e      	movs	r3, #142	; 0x8e
 800da92:	00db      	lsls	r3, r3, #3
 800da94:	58d3      	ldr	r3, [r2, r3]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	003a      	movs	r2, r7
 800da9a:	0011      	movs	r1, r2
 800da9c:	0018      	movs	r0, r3
 800da9e:	f004 ff62 	bl	8012966 <RegionInitDefaults>

        MacCtx.NvmCtx->NodeAckRequested = false;
 800daa2:	4a0c      	ldr	r2, [pc, #48]	; (800dad4 <AckTimeoutRetriesFinalize+0x6c>)
 800daa4:	238e      	movs	r3, #142	; 0x8e
 800daa6:	00db      	lsls	r3, r3, #3
 800daa8:	58d3      	ldr	r3, [r2, r3]
 800daaa:	4a0c      	ldr	r2, [pc, #48]	; (800dadc <AckTimeoutRetriesFinalize+0x74>)
 800daac:	2100      	movs	r1, #0
 800daae:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800dab0:	4a08      	ldr	r2, [pc, #32]	; (800dad4 <AckTimeoutRetriesFinalize+0x6c>)
 800dab2:	2386      	movs	r3, #134	; 0x86
 800dab4:	00db      	lsls	r3, r3, #3
 800dab6:	2100      	movs	r1, #0
 800dab8:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800daba:	4a06      	ldr	r2, [pc, #24]	; (800dad4 <AckTimeoutRetriesFinalize+0x6c>)
 800dabc:	238e      	movs	r3, #142	; 0x8e
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	58d3      	ldr	r3, [r2, r3]
 800dac2:	4a07      	ldr	r2, [pc, #28]	; (800dae0 <AckTimeoutRetriesFinalize+0x78>)
 800dac4:	5c99      	ldrb	r1, [r3, r2]
 800dac6:	4b03      	ldr	r3, [pc, #12]	; (800dad4 <AckTimeoutRetriesFinalize+0x6c>)
 800dac8:	4a06      	ldr	r2, [pc, #24]	; (800dae4 <AckTimeoutRetriesFinalize+0x7c>)
 800daca:	5499      	strb	r1, [r3, r2]
}
 800dacc:	46c0      	nop			; (mov r8, r8)
 800dace:	46bd      	mov	sp, r7
 800dad0:	b002      	add	sp, #8
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20000598 	.word	0x20000598
 800dad8:	20001434 	.word	0x20001434
 800dadc:	00000219 	.word	0x00000219
 800dae0:	00000217 	.word	0x00000217
 800dae4:	00000431 	.word	0x00000431

0800dae8 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	0002      	movs	r2, r0
 800daf0:	1dfb      	adds	r3, r7, #7
 800daf2:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 800daf4:	4a0c      	ldr	r2, [pc, #48]	; (800db28 <CallNvmCtxCallback+0x40>)
 800daf6:	23d7      	movs	r3, #215	; 0xd7
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	58d3      	ldr	r3, [r2, r3]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00f      	beq.n	800db20 <CallNvmCtxCallback+0x38>
 800db00:	4a09      	ldr	r2, [pc, #36]	; (800db28 <CallNvmCtxCallback+0x40>)
 800db02:	23d7      	movs	r3, #215	; 0xd7
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	58d3      	ldr	r3, [r2, r3]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d008      	beq.n	800db20 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800db0e:	4a06      	ldr	r2, [pc, #24]	; (800db28 <CallNvmCtxCallback+0x40>)
 800db10:	23d7      	movs	r3, #215	; 0xd7
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	58d3      	ldr	r3, [r2, r3]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	1dfa      	adds	r2, r7, #7
 800db1a:	7812      	ldrb	r2, [r2, #0]
 800db1c:	0010      	movs	r0, r2
 800db1e:	4798      	blx	r3
    }
}
 800db20:	46c0      	nop			; (mov r8, r8)
 800db22:	46bd      	mov	sp, r7
 800db24:	b002      	add	sp, #8
 800db26:	bd80      	pop	{r7, pc}
 800db28:	20000598 	.word	0x20000598

0800db2c <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800db30:	2000      	movs	r0, #0
 800db32:	f7ff ffd9 	bl	800dae8 <CallNvmCtxCallback>
}
 800db36:	46c0      	nop			; (mov r8, r8)
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 800db40:	2001      	movs	r0, #1
 800db42:	f7ff ffd1 	bl	800dae8 <CallNvmCtxCallback>
}
 800db46:	46c0      	nop			; (mov r8, r8)
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800db50:	2002      	movs	r0, #2
 800db52:	f7ff ffc9 	bl	800dae8 <CallNvmCtxCallback>
}
 800db56:	46c0      	nop			; (mov r8, r8)
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 800db60:	2003      	movs	r0, #3
 800db62:	f7ff ffc1 	bl	800dae8 <CallNvmCtxCallback>
}
 800db66:	46c0      	nop			; (mov r8, r8)
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800db70:	2004      	movs	r0, #4
 800db72:	f7ff ffb9 	bl	800dae8 <CallNvmCtxCallback>
}
 800db76:	46c0      	nop			; (mov r8, r8)
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 800db80:	2005      	movs	r0, #5
 800db82:	f7ff ffb1 	bl	800dae8 <CallNvmCtxCallback>
}
 800db86:	46c0      	nop			; (mov r8, r8)
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800db90:	2006      	movs	r0, #6
 800db92:	f7ff ffa9 	bl	800dae8 <CallNvmCtxCallback>
}
 800db96:	46c0      	nop			; (mov r8, r8)
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <EventFCntHandlerNvmCtxChanged>:

static void EventFCntHandlerNvmCtxChanged( void )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
 800dba0:	2007      	movs	r0, #7
 800dba2:	f7ff ffa1 	bl	800dae8 <CallNvmCtxCallback>
}
 800dba6:	46c0      	nop			; (mov r8, r8)
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800dbb0:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <IsRequestPending+0x30>)
 800dbb2:	4a0b      	ldr	r2, [pc, #44]	; (800dbe0 <IsRequestPending+0x34>)
 800dbb4:	5c9b      	ldrb	r3, [r3, r2]
 800dbb6:	2204      	movs	r2, #4
 800dbb8:	4013      	ands	r3, r2
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d107      	bne.n	800dbd0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800dbc0:	4b06      	ldr	r3, [pc, #24]	; (800dbdc <IsRequestPending+0x30>)
 800dbc2:	4a07      	ldr	r2, [pc, #28]	; (800dbe0 <IsRequestPending+0x34>)
 800dbc4:	5c9b      	ldrb	r3, [r3, r2]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	4013      	ands	r3, r2
 800dbca:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d001      	beq.n	800dbd4 <IsRequestPending+0x28>
    {
        return 1;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e000      	b.n	800dbd6 <IsRequestPending+0x2a>
    }
    return 0;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	0018      	movs	r0, r3
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	20000598 	.word	0x20000598
 800dbe0:	0000046d 	.word	0x0000046d

0800dbe4 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800dbe4:	b5b0      	push	{r4, r5, r7, lr}
 800dbe6:	b094      	sub	sp, #80	; 0x50
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	1dfb      	adds	r3, r7, #7
 800dbf0:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <LoRaMacInitialization+0x1a>
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	e391      	b.n	800e326 <LoRaMacInitialization+0x742>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00b      	beq.n	800dc22 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d007      	beq.n	800dc22 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d003      	beq.n	800dc22 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d101      	bne.n	800dc26 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc22:	2303      	movs	r3, #3
 800dc24:	e37f      	b.n	800e326 <LoRaMacInitialization+0x742>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800dc26:	1dfb      	adds	r3, r7, #7
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	0018      	movs	r0, r3
 800dc2c:	f004 fe4e 	bl	80128cc <RegionIsActive>
 800dc30:	0003      	movs	r3, r0
 800dc32:	001a      	movs	r2, r3
 800dc34:	2301      	movs	r3, #1
 800dc36:	4053      	eors	r3, r2
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800dc3e:	2309      	movs	r3, #9
 800dc40:	e371      	b.n	800e326 <LoRaMacInitialization+0x742>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800dc42:	4afe      	ldr	r2, [pc, #1016]	; (800e03c <LoRaMacInitialization+0x458>)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	0011      	movs	r1, r2
 800dc48:	0018      	movs	r0, r3
 800dc4a:	f002 fa53 	bl	80100f4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800dc4e:	238b      	movs	r3, #139	; 0x8b
 800dc50:	009a      	lsls	r2, r3, #2
 800dc52:	4bfb      	ldr	r3, [pc, #1004]	; (800e040 <LoRaMacInitialization+0x45c>)
 800dc54:	2100      	movs	r1, #0
 800dc56:	0018      	movs	r0, r3
 800dc58:	f007 fc42 	bl	80154e0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800dc5c:	4af9      	ldr	r2, [pc, #996]	; (800e044 <LoRaMacInitialization+0x460>)
 800dc5e:	4bfa      	ldr	r3, [pc, #1000]	; (800e048 <LoRaMacInitialization+0x464>)
 800dc60:	2100      	movs	r1, #0
 800dc62:	0018      	movs	r0, r3
 800dc64:	f007 fc3c 	bl	80154e0 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 800dc68:	4af7      	ldr	r2, [pc, #988]	; (800e048 <LoRaMacInitialization+0x464>)
 800dc6a:	238e      	movs	r3, #142	; 0x8e
 800dc6c:	00db      	lsls	r3, r3, #3
 800dc6e:	49f4      	ldr	r1, [pc, #976]	; (800e040 <LoRaMacInitialization+0x45c>)
 800dc70:	50d1      	str	r1, [r2, r3]

    // Set non zero variables to its default value
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800dc72:	4af5      	ldr	r2, [pc, #980]	; (800e048 <LoRaMacInitialization+0x464>)
 800dc74:	238e      	movs	r3, #142	; 0x8e
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	58d3      	ldr	r3, [r2, r3]
 800dc7a:	4af4      	ldr	r2, [pc, #976]	; (800e04c <LoRaMacInitialization+0x468>)
 800dc7c:	2101      	movs	r1, #1
 800dc7e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800dc80:	4af1      	ldr	r2, [pc, #964]	; (800e048 <LoRaMacInitialization+0x464>)
 800dc82:	238e      	movs	r3, #142	; 0x8e
 800dc84:	00db      	lsls	r3, r3, #3
 800dc86:	58d3      	ldr	r3, [r2, r3]
 800dc88:	4af1      	ldr	r2, [pc, #964]	; (800e050 <LoRaMacInitialization+0x46c>)
 800dc8a:	2101      	movs	r1, #1
 800dc8c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 800dc8e:	4aee      	ldr	r2, [pc, #952]	; (800e048 <LoRaMacInitialization+0x464>)
 800dc90:	238e      	movs	r3, #142	; 0x8e
 800dc92:	00db      	lsls	r3, r3, #3
 800dc94:	58d3      	ldr	r3, [r2, r3]
 800dc96:	1dfa      	adds	r2, r7, #7
 800dc98:	7812      	ldrb	r2, [r2, #0]
 800dc9a:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800dc9c:	4aea      	ldr	r2, [pc, #936]	; (800e048 <LoRaMacInitialization+0x464>)
 800dc9e:	238e      	movs	r3, #142	; 0x8e
 800dca0:	00db      	lsls	r3, r3, #3
 800dca2:	58d3      	ldr	r3, [r2, r3]
 800dca4:	22c8      	movs	r2, #200	; 0xc8
 800dca6:	2100      	movs	r1, #0
 800dca8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800dcaa:	4ae7      	ldr	r2, [pc, #924]	; (800e048 <LoRaMacInitialization+0x464>)
 800dcac:	238e      	movs	r3, #142	; 0x8e
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	58d2      	ldr	r2, [r2, r3]
 800dcb2:	2316      	movs	r3, #22
 800dcb4:	33ff      	adds	r3, #255	; 0xff
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 800dcba:	211c      	movs	r1, #28
 800dcbc:	187b      	adds	r3, r7, r1
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 800dcc2:	187b      	adds	r3, r7, r1
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 800dcc8:	187b      	adds	r3, r7, r1
 800dcca:	2203      	movs	r2, #3
 800dccc:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 800dcce:	187b      	adds	r3, r7, r1
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 800dcd4:	4adc      	ldr	r2, [pc, #880]	; (800e048 <LoRaMacInitialization+0x464>)
 800dcd6:	238e      	movs	r3, #142	; 0x8e
 800dcd8:	00db      	lsls	r3, r3, #3
 800dcda:	58d2      	ldr	r2, [r2, r3]
 800dcdc:	2388      	movs	r3, #136	; 0x88
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	69f9      	ldr	r1, [r7, #28]
 800dce2:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800dce4:	244c      	movs	r4, #76	; 0x4c
 800dce6:	193b      	adds	r3, r7, r4
 800dce8:	220e      	movs	r2, #14
 800dcea:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dcec:	4ad6      	ldr	r2, [pc, #856]	; (800e048 <LoRaMacInitialization+0x464>)
 800dcee:	238e      	movs	r3, #142	; 0x8e
 800dcf0:	00db      	lsls	r3, r3, #3
 800dcf2:	58d3      	ldr	r3, [r2, r3]
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	193a      	adds	r2, r7, r4
 800dcf8:	0011      	movs	r1, r2
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	f004 fdf7 	bl	80128ee <RegionGetPhyParam>
 800dd00:	0003      	movs	r3, r0
 800dd02:	001a      	movs	r2, r3
 800dd04:	2548      	movs	r5, #72	; 0x48
 800dd06:	197b      	adds	r3, r7, r5
 800dd08:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800dd0a:	197b      	adds	r3, r7, r5
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	49ce      	ldr	r1, [pc, #824]	; (800e048 <LoRaMacInitialization+0x464>)
 800dd10:	228e      	movs	r2, #142	; 0x8e
 800dd12:	00d2      	lsls	r2, r2, #3
 800dd14:	588a      	ldr	r2, [r1, r2]
 800dd16:	1e59      	subs	r1, r3, #1
 800dd18:	418b      	sbcs	r3, r1
 800dd1a:	b2d9      	uxtb	r1, r3
 800dd1c:	2389      	movs	r3, #137	; 0x89
 800dd1e:	005b      	lsls	r3, r3, #1
 800dd20:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800dd22:	193b      	adds	r3, r7, r4
 800dd24:	2209      	movs	r2, #9
 800dd26:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dd28:	4ac7      	ldr	r2, [pc, #796]	; (800e048 <LoRaMacInitialization+0x464>)
 800dd2a:	238e      	movs	r3, #142	; 0x8e
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	58d3      	ldr	r3, [r2, r3]
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	193a      	adds	r2, r7, r4
 800dd34:	0011      	movs	r1, r2
 800dd36:	0018      	movs	r0, r3
 800dd38:	f004 fdd9 	bl	80128ee <RegionGetPhyParam>
 800dd3c:	0003      	movs	r3, r0
 800dd3e:	001a      	movs	r2, r3
 800dd40:	197b      	adds	r3, r7, r5
 800dd42:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800dd44:	197b      	adds	r3, r7, r5
 800dd46:	6819      	ldr	r1, [r3, #0]
 800dd48:	4abf      	ldr	r2, [pc, #764]	; (800e048 <LoRaMacInitialization+0x464>)
 800dd4a:	238e      	movs	r3, #142	; 0x8e
 800dd4c:	00db      	lsls	r3, r3, #3
 800dd4e:	58d3      	ldr	r3, [r2, r3]
 800dd50:	b24a      	sxtb	r2, r1
 800dd52:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800dd54:	193b      	adds	r3, r7, r4
 800dd56:	2205      	movs	r2, #5
 800dd58:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dd5a:	4abb      	ldr	r2, [pc, #748]	; (800e048 <LoRaMacInitialization+0x464>)
 800dd5c:	238e      	movs	r3, #142	; 0x8e
 800dd5e:	00db      	lsls	r3, r3, #3
 800dd60:	58d3      	ldr	r3, [r2, r3]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	193a      	adds	r2, r7, r4
 800dd66:	0011      	movs	r1, r2
 800dd68:	0018      	movs	r0, r3
 800dd6a:	f004 fdc0 	bl	80128ee <RegionGetPhyParam>
 800dd6e:	0003      	movs	r3, r0
 800dd70:	001a      	movs	r2, r3
 800dd72:	197b      	adds	r3, r7, r5
 800dd74:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800dd76:	197b      	adds	r3, r7, r5
 800dd78:	6819      	ldr	r1, [r3, #0]
 800dd7a:	4ab3      	ldr	r2, [pc, #716]	; (800e048 <LoRaMacInitialization+0x464>)
 800dd7c:	238e      	movs	r3, #142	; 0x8e
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	58d3      	ldr	r3, [r2, r3]
 800dd82:	b24a      	sxtb	r2, r1
 800dd84:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800dd86:	193b      	adds	r3, r7, r4
 800dd88:	220f      	movs	r2, #15
 800dd8a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dd8c:	4aae      	ldr	r2, [pc, #696]	; (800e048 <LoRaMacInitialization+0x464>)
 800dd8e:	238e      	movs	r3, #142	; 0x8e
 800dd90:	00db      	lsls	r3, r3, #3
 800dd92:	58d3      	ldr	r3, [r2, r3]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	193a      	adds	r2, r7, r4
 800dd98:	0011      	movs	r1, r2
 800dd9a:	0018      	movs	r0, r3
 800dd9c:	f004 fda7 	bl	80128ee <RegionGetPhyParam>
 800dda0:	0003      	movs	r3, r0
 800dda2:	001a      	movs	r2, r3
 800dda4:	197b      	adds	r3, r7, r5
 800dda6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800dda8:	4aa7      	ldr	r2, [pc, #668]	; (800e048 <LoRaMacInitialization+0x464>)
 800ddaa:	238e      	movs	r3, #142	; 0x8e
 800ddac:	00db      	lsls	r3, r3, #3
 800ddae:	58d3      	ldr	r3, [r2, r3]
 800ddb0:	197a      	adds	r2, r7, r5
 800ddb2:	6812      	ldr	r2, [r2, #0]
 800ddb4:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ddb6:	193b      	adds	r3, r7, r4
 800ddb8:	2210      	movs	r2, #16
 800ddba:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ddbc:	4aa2      	ldr	r2, [pc, #648]	; (800e048 <LoRaMacInitialization+0x464>)
 800ddbe:	238e      	movs	r3, #142	; 0x8e
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	58d3      	ldr	r3, [r2, r3]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	193a      	adds	r2, r7, r4
 800ddc8:	0011      	movs	r1, r2
 800ddca:	0018      	movs	r0, r3
 800ddcc:	f004 fd8f 	bl	80128ee <RegionGetPhyParam>
 800ddd0:	0003      	movs	r3, r0
 800ddd2:	001a      	movs	r2, r3
 800ddd4:	197b      	adds	r3, r7, r5
 800ddd6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800ddd8:	4a9b      	ldr	r2, [pc, #620]	; (800e048 <LoRaMacInitialization+0x464>)
 800ddda:	238e      	movs	r3, #142	; 0x8e
 800dddc:	00db      	lsls	r3, r3, #3
 800ddde:	58d3      	ldr	r3, [r2, r3]
 800dde0:	197a      	adds	r2, r7, r5
 800dde2:	6812      	ldr	r2, [r2, #0]
 800dde4:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800dde6:	193b      	adds	r3, r7, r4
 800dde8:	2211      	movs	r2, #17
 800ddea:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ddec:	4a96      	ldr	r2, [pc, #600]	; (800e048 <LoRaMacInitialization+0x464>)
 800ddee:	238e      	movs	r3, #142	; 0x8e
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	58d3      	ldr	r3, [r2, r3]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	193a      	adds	r2, r7, r4
 800ddf8:	0011      	movs	r1, r2
 800ddfa:	0018      	movs	r0, r3
 800ddfc:	f004 fd77 	bl	80128ee <RegionGetPhyParam>
 800de00:	0003      	movs	r3, r0
 800de02:	001a      	movs	r2, r3
 800de04:	197b      	adds	r3, r7, r5
 800de06:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800de08:	4a8f      	ldr	r2, [pc, #572]	; (800e048 <LoRaMacInitialization+0x464>)
 800de0a:	238e      	movs	r3, #142	; 0x8e
 800de0c:	00db      	lsls	r3, r3, #3
 800de0e:	58d3      	ldr	r3, [r2, r3]
 800de10:	197a      	adds	r2, r7, r5
 800de12:	6812      	ldr	r2, [r2, #0]
 800de14:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800de16:	193b      	adds	r3, r7, r4
 800de18:	2212      	movs	r2, #18
 800de1a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800de1c:	4a8a      	ldr	r2, [pc, #552]	; (800e048 <LoRaMacInitialization+0x464>)
 800de1e:	238e      	movs	r3, #142	; 0x8e
 800de20:	00db      	lsls	r3, r3, #3
 800de22:	58d3      	ldr	r3, [r2, r3]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	193a      	adds	r2, r7, r4
 800de28:	0011      	movs	r1, r2
 800de2a:	0018      	movs	r0, r3
 800de2c:	f004 fd5f 	bl	80128ee <RegionGetPhyParam>
 800de30:	0003      	movs	r3, r0
 800de32:	001a      	movs	r2, r3
 800de34:	197b      	adds	r3, r7, r5
 800de36:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800de38:	4a83      	ldr	r2, [pc, #524]	; (800e048 <LoRaMacInitialization+0x464>)
 800de3a:	238e      	movs	r3, #142	; 0x8e
 800de3c:	00db      	lsls	r3, r3, #3
 800de3e:	58d3      	ldr	r3, [r2, r3]
 800de40:	197a      	adds	r2, r7, r5
 800de42:	6812      	ldr	r2, [r2, #0]
 800de44:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800de46:	193b      	adds	r3, r7, r4
 800de48:	2213      	movs	r2, #19
 800de4a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800de4c:	4a7e      	ldr	r2, [pc, #504]	; (800e048 <LoRaMacInitialization+0x464>)
 800de4e:	238e      	movs	r3, #142	; 0x8e
 800de50:	00db      	lsls	r3, r3, #3
 800de52:	58d3      	ldr	r3, [r2, r3]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	193a      	adds	r2, r7, r4
 800de58:	0011      	movs	r1, r2
 800de5a:	0018      	movs	r0, r3
 800de5c:	f004 fd47 	bl	80128ee <RegionGetPhyParam>
 800de60:	0003      	movs	r3, r0
 800de62:	001a      	movs	r2, r3
 800de64:	197b      	adds	r3, r7, r5
 800de66:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800de68:	4a77      	ldr	r2, [pc, #476]	; (800e048 <LoRaMacInitialization+0x464>)
 800de6a:	238e      	movs	r3, #142	; 0x8e
 800de6c:	00db      	lsls	r3, r3, #3
 800de6e:	58d3      	ldr	r3, [r2, r3]
 800de70:	197a      	adds	r2, r7, r5
 800de72:	6812      	ldr	r2, [r2, #0]
 800de74:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800de76:	193b      	adds	r3, r7, r4
 800de78:	2216      	movs	r2, #22
 800de7a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800de7c:	4a72      	ldr	r2, [pc, #456]	; (800e048 <LoRaMacInitialization+0x464>)
 800de7e:	238e      	movs	r3, #142	; 0x8e
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	58d3      	ldr	r3, [r2, r3]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	193a      	adds	r2, r7, r4
 800de88:	0011      	movs	r1, r2
 800de8a:	0018      	movs	r0, r3
 800de8c:	f004 fd2f 	bl	80128ee <RegionGetPhyParam>
 800de90:	0003      	movs	r3, r0
 800de92:	001a      	movs	r2, r3
 800de94:	197b      	adds	r3, r7, r5
 800de96:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800de98:	197b      	adds	r3, r7, r5
 800de9a:	6819      	ldr	r1, [r3, #0]
 800de9c:	4a6a      	ldr	r2, [pc, #424]	; (800e048 <LoRaMacInitialization+0x464>)
 800de9e:	238e      	movs	r3, #142	; 0x8e
 800dea0:	00db      	lsls	r3, r3, #3
 800dea2:	58d3      	ldr	r3, [r2, r3]
 800dea4:	b2c9      	uxtb	r1, r1
 800dea6:	2225      	movs	r2, #37	; 0x25
 800dea8:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800deaa:	193b      	adds	r3, r7, r4
 800deac:	2217      	movs	r2, #23
 800deae:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800deb0:	4a65      	ldr	r2, [pc, #404]	; (800e048 <LoRaMacInitialization+0x464>)
 800deb2:	238e      	movs	r3, #142	; 0x8e
 800deb4:	00db      	lsls	r3, r3, #3
 800deb6:	58d3      	ldr	r3, [r2, r3]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	193a      	adds	r2, r7, r4
 800debc:	0011      	movs	r1, r2
 800debe:	0018      	movs	r0, r3
 800dec0:	f004 fd15 	bl	80128ee <RegionGetPhyParam>
 800dec4:	0003      	movs	r3, r0
 800dec6:	001a      	movs	r2, r3
 800dec8:	197b      	adds	r3, r7, r5
 800deca:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800decc:	4a5e      	ldr	r2, [pc, #376]	; (800e048 <LoRaMacInitialization+0x464>)
 800dece:	238e      	movs	r3, #142	; 0x8e
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	58d3      	ldr	r3, [r2, r3]
 800ded4:	197a      	adds	r2, r7, r5
 800ded6:	6812      	ldr	r2, [r2, #0]
 800ded8:	629a      	str	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800deda:	193b      	adds	r3, r7, r4
 800dedc:	2218      	movs	r2, #24
 800dede:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dee0:	4a59      	ldr	r2, [pc, #356]	; (800e048 <LoRaMacInitialization+0x464>)
 800dee2:	238e      	movs	r3, #142	; 0x8e
 800dee4:	00db      	lsls	r3, r3, #3
 800dee6:	58d3      	ldr	r3, [r2, r3]
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	193a      	adds	r2, r7, r4
 800deec:	0011      	movs	r1, r2
 800deee:	0018      	movs	r0, r3
 800def0:	f004 fcfd 	bl	80128ee <RegionGetPhyParam>
 800def4:	0003      	movs	r3, r0
 800def6:	001a      	movs	r2, r3
 800def8:	197b      	adds	r3, r7, r5
 800defa:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800defc:	197b      	adds	r3, r7, r5
 800defe:	6819      	ldr	r1, [r3, #0]
 800df00:	4a51      	ldr	r2, [pc, #324]	; (800e048 <LoRaMacInitialization+0x464>)
 800df02:	238e      	movs	r3, #142	; 0x8e
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	58d3      	ldr	r3, [r2, r3]
 800df08:	b2c9      	uxtb	r1, r1
 800df0a:	222c      	movs	r2, #44	; 0x2c
 800df0c:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800df0e:	193b      	adds	r3, r7, r4
 800df10:	221d      	movs	r2, #29
 800df12:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800df14:	4a4c      	ldr	r2, [pc, #304]	; (800e048 <LoRaMacInitialization+0x464>)
 800df16:	238e      	movs	r3, #142	; 0x8e
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	58d3      	ldr	r3, [r2, r3]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	193a      	adds	r2, r7, r4
 800df20:	0011      	movs	r1, r2
 800df22:	0018      	movs	r0, r3
 800df24:	f004 fce3 	bl	80128ee <RegionGetPhyParam>
 800df28:	0003      	movs	r3, r0
 800df2a:	001a      	movs	r2, r3
 800df2c:	197b      	adds	r3, r7, r5
 800df2e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800df30:	197b      	adds	r3, r7, r5
 800df32:	6819      	ldr	r1, [r3, #0]
 800df34:	4a44      	ldr	r2, [pc, #272]	; (800e048 <LoRaMacInitialization+0x464>)
 800df36:	238e      	movs	r3, #142	; 0x8e
 800df38:	00db      	lsls	r3, r3, #3
 800df3a:	58d3      	ldr	r3, [r2, r3]
 800df3c:	b2c9      	uxtb	r1, r1
 800df3e:	2230      	movs	r2, #48	; 0x30
 800df40:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800df42:	193b      	adds	r3, r7, r4
 800df44:	221e      	movs	r2, #30
 800df46:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800df48:	4a3f      	ldr	r2, [pc, #252]	; (800e048 <LoRaMacInitialization+0x464>)
 800df4a:	238e      	movs	r3, #142	; 0x8e
 800df4c:	00db      	lsls	r3, r3, #3
 800df4e:	58d3      	ldr	r3, [r2, r3]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	193a      	adds	r2, r7, r4
 800df54:	0011      	movs	r1, r2
 800df56:	0018      	movs	r0, r3
 800df58:	f004 fcc9 	bl	80128ee <RegionGetPhyParam>
 800df5c:	0003      	movs	r3, r0
 800df5e:	001a      	movs	r2, r3
 800df60:	197b      	adds	r3, r7, r5
 800df62:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800df64:	197b      	adds	r3, r7, r5
 800df66:	6819      	ldr	r1, [r3, #0]
 800df68:	4a37      	ldr	r2, [pc, #220]	; (800e048 <LoRaMacInitialization+0x464>)
 800df6a:	238e      	movs	r3, #142	; 0x8e
 800df6c:	00db      	lsls	r3, r3, #3
 800df6e:	58d3      	ldr	r3, [r2, r3]
 800df70:	b2c9      	uxtb	r1, r1
 800df72:	2231      	movs	r2, #49	; 0x31
 800df74:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800df76:	193b      	adds	r3, r7, r4
 800df78:	221f      	movs	r2, #31
 800df7a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800df7c:	4a32      	ldr	r2, [pc, #200]	; (800e048 <LoRaMacInitialization+0x464>)
 800df7e:	238e      	movs	r3, #142	; 0x8e
 800df80:	00db      	lsls	r3, r3, #3
 800df82:	58d3      	ldr	r3, [r2, r3]
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	193a      	adds	r2, r7, r4
 800df88:	0011      	movs	r1, r2
 800df8a:	0018      	movs	r0, r3
 800df8c:	f004 fcaf 	bl	80128ee <RegionGetPhyParam>
 800df90:	0003      	movs	r3, r0
 800df92:	001a      	movs	r2, r3
 800df94:	197b      	adds	r3, r7, r5
 800df96:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800df98:	4a2b      	ldr	r2, [pc, #172]	; (800e048 <LoRaMacInitialization+0x464>)
 800df9a:	238e      	movs	r3, #142	; 0x8e
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	58d3      	ldr	r3, [r2, r3]
 800dfa0:	197a      	adds	r2, r7, r5
 800dfa2:	6812      	ldr	r2, [r2, #0]
 800dfa4:	635a      	str	r2, [r3, #52]	; 0x34

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800dfa6:	193b      	adds	r3, r7, r4
 800dfa8:	2220      	movs	r2, #32
 800dfaa:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dfac:	4a26      	ldr	r2, [pc, #152]	; (800e048 <LoRaMacInitialization+0x464>)
 800dfae:	238e      	movs	r3, #142	; 0x8e
 800dfb0:	00db      	lsls	r3, r3, #3
 800dfb2:	58d3      	ldr	r3, [r2, r3]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	193a      	adds	r2, r7, r4
 800dfb8:	0011      	movs	r1, r2
 800dfba:	0018      	movs	r0, r3
 800dfbc:	f004 fc97 	bl	80128ee <RegionGetPhyParam>
 800dfc0:	0003      	movs	r3, r0
 800dfc2:	001a      	movs	r2, r3
 800dfc4:	197b      	adds	r3, r7, r5
 800dfc6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800dfc8:	4a1f      	ldr	r2, [pc, #124]	; (800e048 <LoRaMacInitialization+0x464>)
 800dfca:	238e      	movs	r3, #142	; 0x8e
 800dfcc:	00db      	lsls	r3, r3, #3
 800dfce:	58d3      	ldr	r3, [r2, r3]
 800dfd0:	197a      	adds	r2, r7, r5
 800dfd2:	6812      	ldr	r2, [r2, #0]
 800dfd4:	639a      	str	r2, [r3, #56]	; 0x38

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800dfd6:	193b      	adds	r3, r7, r4
 800dfd8:	220a      	movs	r2, #10
 800dfda:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dfdc:	4a1a      	ldr	r2, [pc, #104]	; (800e048 <LoRaMacInitialization+0x464>)
 800dfde:	238e      	movs	r3, #142	; 0x8e
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	58d3      	ldr	r3, [r2, r3]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	193a      	adds	r2, r7, r4
 800dfe8:	0011      	movs	r1, r2
 800dfea:	0018      	movs	r0, r3
 800dfec:	f004 fc7f 	bl	80128ee <RegionGetPhyParam>
 800dff0:	0003      	movs	r3, r0
 800dff2:	001a      	movs	r2, r3
 800dff4:	197b      	adds	r3, r7, r5
 800dff6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckLimit = phyParam.Value;
 800dff8:	197b      	adds	r3, r7, r5
 800dffa:	6819      	ldr	r1, [r3, #0]
 800dffc:	4a12      	ldr	r2, [pc, #72]	; (800e048 <LoRaMacInitialization+0x464>)
 800dffe:	238e      	movs	r3, #142	; 0x8e
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	58d3      	ldr	r3, [r2, r3]
 800e004:	b289      	uxth	r1, r1
 800e006:	22d0      	movs	r2, #208	; 0xd0
 800e008:	5299      	strh	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800e00a:	193b      	adds	r3, r7, r4
 800e00c:	220b      	movs	r2, #11
 800e00e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e010:	4a0d      	ldr	r2, [pc, #52]	; (800e048 <LoRaMacInitialization+0x464>)
 800e012:	238e      	movs	r3, #142	; 0x8e
 800e014:	00db      	lsls	r3, r3, #3
 800e016:	58d3      	ldr	r3, [r2, r3]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	193a      	adds	r2, r7, r4
 800e01c:	0011      	movs	r1, r2
 800e01e:	0018      	movs	r0, r3
 800e020:	f004 fc65 	bl	80128ee <RegionGetPhyParam>
 800e024:	0003      	movs	r3, r0
 800e026:	001a      	movs	r2, r3
 800e028:	197b      	adds	r3, r7, r5
 800e02a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->AdrAckDelay = phyParam.Value;
 800e02c:	197b      	adds	r3, r7, r5
 800e02e:	6819      	ldr	r1, [r3, #0]
 800e030:	4a05      	ldr	r2, [pc, #20]	; (800e048 <LoRaMacInitialization+0x464>)
 800e032:	238e      	movs	r3, #142	; 0x8e
 800e034:	00db      	lsls	r3, r3, #3
 800e036:	58d3      	ldr	r3, [r2, r3]
 800e038:	b289      	uxth	r1, r1
 800e03a:	e00b      	b.n	800e054 <LoRaMacInitialization+0x470>
 800e03c:	0800db8d 	.word	0x0800db8d
 800e040:	20000a0c 	.word	0x20000a0c
 800e044:	00000474 	.word	0x00000474
 800e048:	20000598 	.word	0x20000598
 800e04c:	00000217 	.word	0x00000217
 800e050:	00000216 	.word	0x00000216
 800e054:	22d2      	movs	r2, #210	; 0xd2
 800e056:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800e058:	4ab5      	ldr	r2, [pc, #724]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e05a:	238e      	movs	r3, #142	; 0x8e
 800e05c:	00db      	lsls	r3, r3, #3
 800e05e:	58d3      	ldr	r3, [r2, r3]
 800e060:	2224      	movs	r2, #36	; 0x24
 800e062:	2101      	movs	r1, #1
 800e064:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 800e066:	4ab2      	ldr	r2, [pc, #712]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e068:	238e      	movs	r3, #142	; 0x8e
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	58d3      	ldr	r3, [r2, r3]
 800e06e:	2214      	movs	r2, #20
 800e070:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800e072:	4aaf      	ldr	r2, [pc, #700]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e074:	238e      	movs	r3, #142	; 0x8e
 800e076:	00db      	lsls	r3, r3, #3
 800e078:	58d3      	ldr	r3, [r2, r3]
 800e07a:	2206      	movs	r2, #6
 800e07c:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800e07e:	4aac      	ldr	r2, [pc, #688]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e080:	238e      	movs	r3, #142	; 0x8e
 800e082:	00db      	lsls	r3, r3, #3
 800e084:	58d3      	ldr	r3, [r2, r3]
 800e086:	49aa      	ldr	r1, [pc, #680]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e088:	228e      	movs	r2, #142	; 0x8e
 800e08a:	00d2      	lsls	r2, r2, #3
 800e08c:	588a      	ldr	r2, [r1, r2]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	21d8      	movs	r1, #216	; 0xd8
 800e092:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800e094:	4aa6      	ldr	r2, [pc, #664]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e096:	238e      	movs	r3, #142	; 0x8e
 800e098:	00db      	lsls	r3, r3, #3
 800e09a:	58d2      	ldr	r2, [r2, r3]
 800e09c:	49a4      	ldr	r1, [pc, #656]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e09e:	238e      	movs	r3, #142	; 0x8e
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	58cb      	ldr	r3, [r1, r3]
 800e0a4:	7b11      	ldrb	r1, [r2, #12]
 800e0a6:	22dc      	movs	r2, #220	; 0xdc
 800e0a8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800e0aa:	4aa1      	ldr	r2, [pc, #644]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e0ac:	238e      	movs	r3, #142	; 0x8e
 800e0ae:	00db      	lsls	r3, r3, #3
 800e0b0:	58d3      	ldr	r3, [r2, r3]
 800e0b2:	499f      	ldr	r1, [pc, #636]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e0b4:	228e      	movs	r2, #142	; 0x8e
 800e0b6:	00d2      	lsls	r2, r2, #3
 800e0b8:	588a      	ldr	r2, [r1, r2]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	21e0      	movs	r1, #224	; 0xe0
 800e0be:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800e0c0:	4a9b      	ldr	r2, [pc, #620]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e0c2:	238e      	movs	r3, #142	; 0x8e
 800e0c4:	00db      	lsls	r3, r3, #3
 800e0c6:	58d3      	ldr	r3, [r2, r3]
 800e0c8:	4999      	ldr	r1, [pc, #612]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e0ca:	228e      	movs	r2, #142	; 0x8e
 800e0cc:	00d2      	lsls	r2, r2, #3
 800e0ce:	588a      	ldr	r2, [r1, r2]
 800e0d0:	695b      	ldr	r3, [r3, #20]
 800e0d2:	21e4      	movs	r1, #228	; 0xe4
 800e0d4:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800e0d6:	4a96      	ldr	r2, [pc, #600]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e0d8:	238e      	movs	r3, #142	; 0x8e
 800e0da:	00db      	lsls	r3, r3, #3
 800e0dc:	58d3      	ldr	r3, [r2, r3]
 800e0de:	4994      	ldr	r1, [pc, #592]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e0e0:	228e      	movs	r2, #142	; 0x8e
 800e0e2:	00d2      	lsls	r2, r2, #3
 800e0e4:	588a      	ldr	r2, [r1, r2]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	21e8      	movs	r1, #232	; 0xe8
 800e0ea:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800e0ec:	4a90      	ldr	r2, [pc, #576]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e0ee:	238e      	movs	r3, #142	; 0x8e
 800e0f0:	00db      	lsls	r3, r3, #3
 800e0f2:	58d3      	ldr	r3, [r2, r3]
 800e0f4:	498e      	ldr	r1, [pc, #568]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e0f6:	228e      	movs	r2, #142	; 0x8e
 800e0f8:	00d2      	lsls	r2, r2, #3
 800e0fa:	588a      	ldr	r2, [r1, r2]
 800e0fc:	69db      	ldr	r3, [r3, #28]
 800e0fe:	21ec      	movs	r1, #236	; 0xec
 800e100:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800e102:	4a8b      	ldr	r2, [pc, #556]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e104:	238e      	movs	r3, #142	; 0x8e
 800e106:	00db      	lsls	r3, r3, #3
 800e108:	58d3      	ldr	r3, [r2, r3]
 800e10a:	4989      	ldr	r1, [pc, #548]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e10c:	228e      	movs	r2, #142	; 0x8e
 800e10e:	00d2      	lsls	r2, r2, #3
 800e110:	588a      	ldr	r2, [r1, r2]
 800e112:	6a1b      	ldr	r3, [r3, #32]
 800e114:	21f0      	movs	r1, #240	; 0xf0
 800e116:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800e118:	4a85      	ldr	r2, [pc, #532]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e11a:	238e      	movs	r3, #142	; 0x8e
 800e11c:	00db      	lsls	r3, r3, #3
 800e11e:	58d2      	ldr	r2, [r2, r3]
 800e120:	4983      	ldr	r1, [pc, #524]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e122:	238e      	movs	r3, #142	; 0x8e
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	58cb      	ldr	r3, [r1, r3]
 800e128:	2124      	movs	r1, #36	; 0x24
 800e12a:	5c51      	ldrb	r1, [r2, r1]
 800e12c:	22f4      	movs	r2, #244	; 0xf4
 800e12e:	5499      	strb	r1, [r3, r2]

    ResetMacParameters( );
 800e130:	f7fe fec0 	bl	800ceb4 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800e134:	4a7e      	ldr	r2, [pc, #504]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e136:	238e      	movs	r3, #142	; 0x8e
 800e138:	00db      	lsls	r3, r3, #3
 800e13a:	58d3      	ldr	r3, [r2, r3]
 800e13c:	22c9      	movs	r2, #201	; 0xc9
 800e13e:	2101      	movs	r1, #1
 800e140:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 800e142:	4a7b      	ldr	r2, [pc, #492]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e144:	23d6      	movs	r3, #214	; 0xd6
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	68f9      	ldr	r1, [r7, #12]
 800e14a:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 800e14c:	4a78      	ldr	r2, [pc, #480]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e14e:	23d7      	movs	r3, #215	; 0xd7
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	68b9      	ldr	r1, [r7, #8]
 800e154:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 800e156:	4b76      	ldr	r3, [pc, #472]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e158:	4a76      	ldr	r2, [pc, #472]	; (800e334 <LoRaMacInitialization+0x750>)
 800e15a:	2100      	movs	r1, #0
 800e15c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800e15e:	4a74      	ldr	r2, [pc, #464]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e160:	23d5      	movs	r3, #213	; 0xd5
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	2101      	movs	r1, #1
 800e166:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.AggregatedLastTxDoneTime = 0;
 800e168:	4a71      	ldr	r2, [pc, #452]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e16a:	23d0      	movs	r3, #208	; 0xd0
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	2100      	movs	r1, #0
 800e170:	50d1      	str	r1, [r2, r3]
    MacCtx.AggregatedTimeOff = 0;
 800e172:	4a6f      	ldr	r2, [pc, #444]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e174:	23d1      	movs	r3, #209	; 0xd1
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	2100      	movs	r1, #0
 800e17a:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e17c:	4a6e      	ldr	r2, [pc, #440]	; (800e338 <LoRaMacInitialization+0x754>)
 800e17e:	4b6f      	ldr	r3, [pc, #444]	; (800e33c <LoRaMacInitialization+0x758>)
 800e180:	0011      	movs	r1, r2
 800e182:	0018      	movs	r0, r3
 800e184:	f007 f840 	bl	8015208 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e188:	4a6d      	ldr	r2, [pc, #436]	; (800e340 <LoRaMacInitialization+0x75c>)
 800e18a:	4b6e      	ldr	r3, [pc, #440]	; (800e344 <LoRaMacInitialization+0x760>)
 800e18c:	0011      	movs	r1, r2
 800e18e:	0018      	movs	r0, r3
 800e190:	f007 f83a 	bl	8015208 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e194:	4a6c      	ldr	r2, [pc, #432]	; (800e348 <LoRaMacInitialization+0x764>)
 800e196:	4b6d      	ldr	r3, [pc, #436]	; (800e34c <LoRaMacInitialization+0x768>)
 800e198:	0011      	movs	r1, r2
 800e19a:	0018      	movs	r0, r3
 800e19c:	f007 f834 	bl	8015208 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800e1a0:	4a6b      	ldr	r2, [pc, #428]	; (800e350 <LoRaMacInitialization+0x76c>)
 800e1a2:	4b6c      	ldr	r3, [pc, #432]	; (800e354 <LoRaMacInitialization+0x770>)
 800e1a4:	0011      	movs	r1, r2
 800e1a6:	0018      	movs	r0, r3
 800e1a8:	f007 f82e 	bl	8015208 <TimerInit>

    // Store the current initialization time
    MacCtx.InitializationTime = TimerGetCurrentTime( );
 800e1ac:	f007 f906 	bl	80153bc <TimerGetCurrentTime>
 800e1b0:	0001      	movs	r1, r0
 800e1b2:	4a5f      	ldr	r2, [pc, #380]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e1b4:	23d2      	movs	r3, #210	; 0xd2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	50d1      	str	r1, [r2, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e1ba:	4a5d      	ldr	r2, [pc, #372]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e1bc:	23d8      	movs	r3, #216	; 0xd8
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	4965      	ldr	r1, [pc, #404]	; (800e358 <LoRaMacInitialization+0x774>)
 800e1c2:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e1c4:	4a5a      	ldr	r2, [pc, #360]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e1c6:	23da      	movs	r3, #218	; 0xda
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4964      	ldr	r1, [pc, #400]	; (800e35c <LoRaMacInitialization+0x778>)
 800e1cc:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e1ce:	4a58      	ldr	r2, [pc, #352]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e1d0:	23dc      	movs	r3, #220	; 0xdc
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	4962      	ldr	r1, [pc, #392]	; (800e360 <LoRaMacInitialization+0x77c>)
 800e1d6:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e1d8:	4a55      	ldr	r2, [pc, #340]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e1da:	23d9      	movs	r3, #217	; 0xd9
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4961      	ldr	r1, [pc, #388]	; (800e364 <LoRaMacInitialization+0x780>)
 800e1e0:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e1e2:	4a53      	ldr	r2, [pc, #332]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e1e4:	23db      	movs	r3, #219	; 0xdb
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	495f      	ldr	r1, [pc, #380]	; (800e368 <LoRaMacInitialization+0x784>)
 800e1ea:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800e1ec:	4b5f      	ldr	r3, [pc, #380]	; (800e36c <LoRaMacInitialization+0x788>)
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	4a5f      	ldr	r2, [pc, #380]	; (800e370 <LoRaMacInitialization+0x78c>)
 800e1f2:	0010      	movs	r0, r2
 800e1f4:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 800e1f6:	2114      	movs	r1, #20
 800e1f8:	187b      	adds	r3, r7, r1
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 800e1fe:	187b      	adds	r3, r7, r1
 800e200:	2200      	movs	r2, #0
 800e202:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800e204:	4a4a      	ldr	r2, [pc, #296]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e206:	238e      	movs	r3, #142	; 0x8e
 800e208:	00db      	lsls	r3, r3, #3
 800e20a:	58d3      	ldr	r3, [r2, r3]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	187a      	adds	r2, r7, r1
 800e210:	0011      	movs	r1, r2
 800e212:	0018      	movs	r0, r3
 800e214:	f004 fba7 	bl	8012966 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800e218:	4b56      	ldr	r3, [pc, #344]	; (800e374 <LoRaMacInitialization+0x790>)
 800e21a:	0018      	movs	r0, r3
 800e21c:	f7fb fb28 	bl	8009870 <SecureElementInit>
 800e220:	1e03      	subs	r3, r0, #0
 800e222:	d001      	beq.n	800e228 <LoRaMacInitialization+0x644>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e224:	2311      	movs	r3, #17
 800e226:	e07e      	b.n	800e326 <LoRaMacInitialization+0x742>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800e228:	4b53      	ldr	r3, [pc, #332]	; (800e378 <LoRaMacInitialization+0x794>)
 800e22a:	0018      	movs	r0, r3
 800e22c:	f003 f858 	bl	80112e0 <LoRaMacCryptoInit>
 800e230:	1e03      	subs	r3, r0, #0
 800e232:	d001      	beq.n	800e238 <LoRaMacInitialization+0x654>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e234:	2311      	movs	r3, #17
 800e236:	e076      	b.n	800e326 <LoRaMacInitialization+0x742>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800e238:	4b50      	ldr	r3, [pc, #320]	; (800e37c <LoRaMacInitialization+0x798>)
 800e23a:	0018      	movs	r0, r3
 800e23c:	f001 fd66 	bl	800fd0c <LoRaMacCommandsInit>
 800e240:	1e03      	subs	r3, r0, #0
 800e242:	d001      	beq.n	800e248 <LoRaMacInitialization+0x664>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e244:	2313      	movs	r3, #19
 800e246:	e06e      	b.n	800e326 <LoRaMacInitialization+0x742>
    }

    // Initialize FCnt Handler module
    if( LoRaMacFCntHandlerInit( EventFCntHandlerNvmCtxChanged ) != LORAMAC_FCNT_HANDLER_SUCCESS )
 800e248:	4b4d      	ldr	r3, [pc, #308]	; (800e380 <LoRaMacInitialization+0x79c>)
 800e24a:	0018      	movs	r0, r3
 800e24c:	f003 fdea 	bl	8011e24 <LoRaMacFCntHandlerInit>
 800e250:	1e03      	subs	r3, r0, #0
 800e252:	d001      	beq.n	800e258 <LoRaMacInitialization+0x674>
    {
        return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e254:	2312      	movs	r3, #18
 800e256:	e066      	b.n	800e326 <LoRaMacInitialization+0x742>
    }

    // Set multicast downlink counter reference
    LoRaMacFCntHandlerSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList );
 800e258:	4a35      	ldr	r2, [pc, #212]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e25a:	238e      	movs	r3, #142	; 0x8e
 800e25c:	00db      	lsls	r3, r3, #3
 800e25e:	58d3      	ldr	r3, [r2, r3]
 800e260:	3348      	adds	r3, #72	; 0x48
 800e262:	0018      	movs	r0, r3
 800e264:	f003 ff4c 	bl	8012100 <LoRaMacFCntHandlerSetMulticastReference>

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e268:	4b40      	ldr	r3, [pc, #256]	; (800e36c <LoRaMacInitialization+0x788>)
 800e26a:	69db      	ldr	r3, [r3, #28]
 800e26c:	4798      	blx	r3
 800e26e:	0003      	movs	r3, r0
 800e270:	0018      	movs	r0, r3
 800e272:	f007 f8d5 	bl	8015420 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800e276:	4b3d      	ldr	r3, [pc, #244]	; (800e36c <LoRaMacInitialization+0x788>)
 800e278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e27a:	492d      	ldr	r1, [pc, #180]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e27c:	228e      	movs	r2, #142	; 0x8e
 800e27e:	00d2      	lsls	r2, r2, #3
 800e280:	588a      	ldr	r2, [r1, r2]
 800e282:	21c9      	movs	r1, #201	; 0xc9
 800e284:	5c52      	ldrb	r2, [r2, r1]
 800e286:	0010      	movs	r0, r2
 800e288:	4798      	blx	r3
    Radio.Sleep( );
 800e28a:	4b38      	ldr	r3, [pc, #224]	; (800e36c <LoRaMacInitialization+0x788>)
 800e28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28e:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800e290:	2140      	movs	r1, #64	; 0x40
 800e292:	187b      	adds	r3, r7, r1
 800e294:	2200      	movs	r2, #0
 800e296:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 800e298:	187b      	adds	r3, r7, r1
 800e29a:	2200      	movs	r2, #0
 800e29c:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d008      	beq.n	800e2b6 <LoRaMacInitialization+0x6d2>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	2140      	movs	r1, #64	; 0x40
 800e2aa:	187b      	adds	r3, r7, r1
 800e2ac:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	68da      	ldr	r2, [r3, #12]
 800e2b2:	187b      	adds	r3, r7, r1
 800e2b4:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800e2b6:	2120      	movs	r1, #32
 800e2b8:	187b      	adds	r3, r7, r1
 800e2ba:	4a32      	ldr	r2, [pc, #200]	; (800e384 <LoRaMacInitialization+0x7a0>)
 800e2bc:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800e2be:	187b      	adds	r3, r7, r1
 800e2c0:	4a31      	ldr	r2, [pc, #196]	; (800e388 <LoRaMacInitialization+0x7a4>)
 800e2c2:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800e2c4:	187b      	adds	r3, r7, r1
 800e2c6:	4a31      	ldr	r2, [pc, #196]	; (800e38c <LoRaMacInitialization+0x7a8>)
 800e2c8:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800e2ca:	187b      	adds	r3, r7, r1
 800e2cc:	4a30      	ldr	r2, [pc, #192]	; (800e390 <LoRaMacInitialization+0x7ac>)
 800e2ce:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800e2d0:	4a17      	ldr	r2, [pc, #92]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e2d2:	238e      	movs	r3, #142	; 0x8e
 800e2d4:	00db      	lsls	r3, r3, #3
 800e2d6:	58d3      	ldr	r3, [r2, r3]
 800e2d8:	3344      	adds	r3, #68	; 0x44
 800e2da:	001a      	movs	r2, r3
 800e2dc:	187b      	adds	r3, r7, r1
 800e2de:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800e2e0:	4a13      	ldr	r2, [pc, #76]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e2e2:	238e      	movs	r3, #142	; 0x8e
 800e2e4:	00db      	lsls	r3, r3, #3
 800e2e6:	58d3      	ldr	r3, [r2, r3]
 800e2e8:	001a      	movs	r2, r3
 800e2ea:	187b      	adds	r3, r7, r1
 800e2ec:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800e2ee:	4a10      	ldr	r2, [pc, #64]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e2f0:	238e      	movs	r3, #142	; 0x8e
 800e2f2:	00db      	lsls	r3, r3, #3
 800e2f4:	58d3      	ldr	r3, [r2, r3]
 800e2f6:	33d4      	adds	r3, #212	; 0xd4
 800e2f8:	001a      	movs	r2, r3
 800e2fa:	187b      	adds	r3, r7, r1
 800e2fc:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800e2fe:	4a0c      	ldr	r2, [pc, #48]	; (800e330 <LoRaMacInitialization+0x74c>)
 800e300:	238e      	movs	r3, #142	; 0x8e
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	58d3      	ldr	r3, [r2, r3]
 800e306:	3348      	adds	r3, #72	; 0x48
 800e308:	001a      	movs	r2, r3
 800e30a:	0008      	movs	r0, r1
 800e30c:	187b      	adds	r3, r7, r1
 800e30e:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800e310:	4a20      	ldr	r2, [pc, #128]	; (800e394 <LoRaMacInitialization+0x7b0>)
 800e312:	2340      	movs	r3, #64	; 0x40
 800e314:	18f9      	adds	r1, r7, r3
 800e316:	183b      	adds	r3, r7, r0
 800e318:	0018      	movs	r0, r3
 800e31a:	f001 fae1 	bl	800f8e0 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e31e:	2001      	movs	r0, #1
 800e320:	f7fc fe9e 	bl	800b060 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	0018      	movs	r0, r3
 800e328:	46bd      	mov	sp, r7
 800e32a:	b014      	add	sp, #80	; 0x50
 800e32c:	bdb0      	pop	{r4, r5, r7, pc}
 800e32e:	46c0      	nop			; (mov r8, r8)
 800e330:	20000598 	.word	0x20000598
 800e334:	0000046d 	.word	0x0000046d
 800e338:	0800b50d 	.word	0x0800b50d
 800e33c:	20000914 	.word	0x20000914
 800e340:	0800b59d 	.word	0x0800b59d
 800e344:	2000092c 	.word	0x2000092c
 800e348:	0800b691 	.word	0x0800b691
 800e34c:	20000944 	.word	0x20000944
 800e350:	0800b7d5 	.word	0x0800b7d5
 800e354:	2000098c 	.word	0x2000098c
 800e358:	08009f45 	.word	0x08009f45
 800e35c:	08009fdd 	.word	0x08009fdd
 800e360:	0800a0b1 	.word	0x0800a0b1
 800e364:	0800a06d 	.word	0x0800a06d
 800e368:	0800a0f5 	.word	0x0800a0f5
 800e36c:	08020a5c 	.word	0x08020a5c
 800e370:	200008f8 	.word	0x200008f8
 800e374:	0800db5d 	.word	0x0800db5d
 800e378:	0800db4d 	.word	0x0800db4d
 800e37c:	0800db6d 	.word	0x0800db6d
 800e380:	0800db9d 	.word	0x0800db9d
 800e384:	200009ec 	.word	0x200009ec
 800e388:	200009a8 	.word	0x200009a8
 800e38c:	200009d8 	.word	0x200009d8
 800e390:	20000a05 	.word	0x20000a05
 800e394:	0800db7d 	.word	0x0800db7d

0800e398 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800e39c:	4a04      	ldr	r2, [pc, #16]	; (800e3b0 <LoRaMacStart+0x18>)
 800e39e:	23d5      	movs	r3, #213	; 0xd5
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 800e3a6:	2300      	movs	r3, #0
}
 800e3a8:	0018      	movs	r0, r3
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	46c0      	nop			; (mov r8, r8)
 800e3b0:	20000598 	.word	0x20000598

0800e3b4 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e3b4:	b590      	push	{r4, r7, lr}
 800e3b6:	b08b      	sub	sp, #44	; 0x2c
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	0002      	movs	r2, r0
 800e3bc:	6039      	str	r1, [r7, #0]
 800e3be:	1dfb      	adds	r3, r7, #7
 800e3c0:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800e3c2:	4a58      	ldr	r2, [pc, #352]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e3c4:	238e      	movs	r3, #142	; 0x8e
 800e3c6:	00db      	lsls	r3, r3, #3
 800e3c8:	58d3      	ldr	r3, [r2, r3]
 800e3ca:	22cc      	movs	r2, #204	; 0xcc
 800e3cc:	589b      	ldr	r3, [r3, r2]
 800e3ce:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800e3d0:	4a54      	ldr	r2, [pc, #336]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e3d2:	238e      	movs	r3, #142	; 0x8e
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	58d3      	ldr	r3, [r2, r3]
 800e3d8:	2205      	movs	r2, #5
 800e3da:	569a      	ldrsb	r2, [r3, r2]
 800e3dc:	230f      	movs	r3, #15
 800e3de:	18fb      	adds	r3, r7, r3
 800e3e0:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800e3e2:	4a50      	ldr	r2, [pc, #320]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e3e4:	238e      	movs	r3, #142	; 0x8e
 800e3e6:	00db      	lsls	r3, r3, #3
 800e3e8:	58d3      	ldr	r3, [r2, r3]
 800e3ea:	2204      	movs	r2, #4
 800e3ec:	569a      	ldrsb	r2, [r3, r2]
 800e3ee:	230e      	movs	r3, #14
 800e3f0:	18fb      	adds	r3, r7, r3
 800e3f2:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d101      	bne.n	800e402 <LoRaMacQueryTxPossible+0x4e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e3fe:	2303      	movs	r3, #3
 800e400:	e08c      	b.n	800e51c <LoRaMacQueryTxPossible+0x168>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800e402:	4a48      	ldr	r2, [pc, #288]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e404:	238e      	movs	r3, #142	; 0x8e
 800e406:	00db      	lsls	r3, r3, #3
 800e408:	58d1      	ldr	r1, [r2, r3]
 800e40a:	2014      	movs	r0, #20
 800e40c:	183b      	adds	r3, r7, r0
 800e40e:	2288      	movs	r2, #136	; 0x88
 800e410:	0092      	lsls	r2, r2, #2
 800e412:	588a      	ldr	r2, [r1, r2]
 800e414:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 800e416:	0001      	movs	r1, r0
 800e418:	187b      	adds	r3, r7, r1
 800e41a:	2200      	movs	r2, #0
 800e41c:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800e41e:	4a41      	ldr	r2, [pc, #260]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e420:	238e      	movs	r3, #142	; 0x8e
 800e422:	00db      	lsls	r3, r3, #3
 800e424:	58d3      	ldr	r3, [r2, r3]
 800e426:	22ca      	movs	r2, #202	; 0xca
 800e428:	5c9a      	ldrb	r2, [r3, r2]
 800e42a:	187b      	adds	r3, r7, r1
 800e42c:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800e42e:	4a3d      	ldr	r2, [pc, #244]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e430:	238e      	movs	r3, #142	; 0x8e
 800e432:	00db      	lsls	r3, r3, #3
 800e434:	58d3      	ldr	r3, [r2, r3]
 800e436:	22cc      	movs	r2, #204	; 0xcc
 800e438:	589a      	ldr	r2, [r3, r2]
 800e43a:	187b      	adds	r3, r7, r1
 800e43c:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.NvmCtx->AdrAckLimit;
 800e43e:	4a39      	ldr	r2, [pc, #228]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e440:	238e      	movs	r3, #142	; 0x8e
 800e442:	00db      	lsls	r3, r3, #3
 800e444:	58d3      	ldr	r3, [r2, r3]
 800e446:	22d0      	movs	r2, #208	; 0xd0
 800e448:	5a9a      	ldrh	r2, [r3, r2]
 800e44a:	187b      	adds	r3, r7, r1
 800e44c:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.NvmCtx->AdrAckDelay;
 800e44e:	4a35      	ldr	r2, [pc, #212]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e450:	238e      	movs	r3, #142	; 0x8e
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	58d3      	ldr	r3, [r2, r3]
 800e456:	22d2      	movs	r2, #210	; 0xd2
 800e458:	5a9a      	ldrh	r2, [r3, r2]
 800e45a:	187b      	adds	r3, r7, r1
 800e45c:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e45e:	4a31      	ldr	r2, [pc, #196]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e460:	238e      	movs	r3, #142	; 0x8e
 800e462:	00db      	lsls	r3, r3, #3
 800e464:	58d3      	ldr	r3, [r2, r3]
 800e466:	22d5      	movs	r2, #213	; 0xd5
 800e468:	569a      	ldrsb	r2, [r3, r2]
 800e46a:	187b      	adds	r3, r7, r1
 800e46c:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800e46e:	4a2d      	ldr	r2, [pc, #180]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e470:	238e      	movs	r3, #142	; 0x8e
 800e472:	00db      	lsls	r3, r3, #3
 800e474:	58d3      	ldr	r3, [r2, r3]
 800e476:	22d4      	movs	r2, #212	; 0xd4
 800e478:	569a      	ldrsb	r2, [r3, r2]
 800e47a:	187b      	adds	r3, r7, r1
 800e47c:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800e47e:	4a29      	ldr	r2, [pc, #164]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e480:	238e      	movs	r3, #142	; 0x8e
 800e482:	00db      	lsls	r3, r3, #3
 800e484:	58d2      	ldr	r2, [r2, r3]
 800e486:	2380      	movs	r3, #128	; 0x80
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	5cd2      	ldrb	r2, [r2, r3]
 800e48c:	187b      	adds	r3, r7, r1
 800e48e:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800e490:	4a24      	ldr	r2, [pc, #144]	; (800e524 <LoRaMacQueryTxPossible+0x170>)
 800e492:	238e      	movs	r3, #142	; 0x8e
 800e494:	00db      	lsls	r3, r3, #3
 800e496:	58d3      	ldr	r3, [r2, r3]
 800e498:	781a      	ldrb	r2, [r3, #0]
 800e49a:	0008      	movs	r0, r1
 800e49c:	187b      	adds	r3, r7, r1
 800e49e:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800e4a0:	2310      	movs	r3, #16
 800e4a2:	18fb      	adds	r3, r7, r3
 800e4a4:	220e      	movs	r2, #14
 800e4a6:	18ba      	adds	r2, r7, r2
 800e4a8:	240f      	movs	r4, #15
 800e4aa:	1939      	adds	r1, r7, r4
 800e4ac:	1838      	adds	r0, r7, r0
 800e4ae:	f001 f9ff 	bl	800f8b0 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e4b2:	193b      	adds	r3, r7, r4
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	b25b      	sxtb	r3, r3
 800e4b8:	0018      	movs	r0, r3
 800e4ba:	f7fd fa99 	bl	800b9f0 <GetMaxAppPayloadWithoutFOptsLength>
 800e4be:	0003      	movs	r3, r0
 800e4c0:	001a      	movs	r2, r3
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e4c6:	2308      	movs	r3, #8
 800e4c8:	18fb      	adds	r3, r7, r3
 800e4ca:	0018      	movs	r0, r3
 800e4cc:	f001 fd4a 	bl	800ff64 <LoRaMacCommandsGetSizeSerializedCmds>
 800e4d0:	1e03      	subs	r3, r0, #0
 800e4d2:	d001      	beq.n	800e4d8 <LoRaMacQueryTxPossible+0x124>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e4d4:	2313      	movs	r3, #19
 800e4d6:	e021      	b.n	800e51c <LoRaMacQueryTxPossible+0x168>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	2b0f      	cmp	r3, #15
 800e4dc:	d81a      	bhi.n	800e514 <LoRaMacQueryTxPossible+0x160>
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	785b      	ldrb	r3, [r3, #1]
 800e4e2:	001a      	movs	r2, r3
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d314      	bcc.n	800e514 <LoRaMacQueryTxPossible+0x160>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	785a      	ldrb	r2, [r3, #1]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	785b      	ldrb	r3, [r3, #1]
 800e4fe:	0019      	movs	r1, r3
 800e500:	1dfb      	adds	r3, r7, #7
 800e502:	781a      	ldrb	r2, [r3, #0]
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	18d3      	adds	r3, r2, r3
 800e508:	4299      	cmp	r1, r3
 800e50a:	d301      	bcc.n	800e510 <LoRaMacQueryTxPossible+0x15c>
        {
            return LORAMAC_STATUS_OK;
 800e50c:	2300      	movs	r3, #0
 800e50e:	e005      	b.n	800e51c <LoRaMacQueryTxPossible+0x168>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800e510:	2308      	movs	r3, #8
 800e512:	e003      	b.n	800e51c <LoRaMacQueryTxPossible+0x168>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	2200      	movs	r2, #0
 800e518:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800e51a:	2308      	movs	r3, #8
    }
}
 800e51c:	0018      	movs	r0, r3
 800e51e:	46bd      	mov	sp, r7
 800e520:	b00b      	add	sp, #44	; 0x2c
 800e522:	bd90      	pop	{r4, r7, pc}
 800e524:	20000598 	.word	0x20000598

0800e528 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800e528:	b590      	push	{r4, r7, lr}
 800e52a:	b087      	sub	sp, #28
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e530:	2317      	movs	r3, #23
 800e532:	18fb      	adds	r3, r7, r3
 800e534:	2200      	movs	r2, #0
 800e536:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d101      	bne.n	800e542 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e53e:	2303      	movs	r3, #3
 800e540:	e135      	b.n	800e7ae <LoRaMacMibGetRequestConfirm+0x286>
    }

    switch( mibGet->Type )
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b2f      	cmp	r3, #47	; 0x2f
 800e548:	d900      	bls.n	800e54c <LoRaMacMibGetRequestConfirm+0x24>
 800e54a:	e124      	b.n	800e796 <LoRaMacMibGetRequestConfirm+0x26e>
 800e54c:	009a      	lsls	r2, r3, #2
 800e54e:	4b9a      	ldr	r3, [pc, #616]	; (800e7b8 <LoRaMacMibGetRequestConfirm+0x290>)
 800e550:	18d3      	adds	r3, r2, r3
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800e556:	4a99      	ldr	r2, [pc, #612]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e558:	238e      	movs	r3, #142	; 0x8e
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	58d3      	ldr	r3, [r2, r3]
 800e55e:	22c8      	movs	r2, #200	; 0xc8
 800e560:	5c9a      	ldrb	r2, [r3, r2]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	711a      	strb	r2, [r3, #4]
            break;
 800e566:	e11f      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800e568:	4a94      	ldr	r2, [pc, #592]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e56a:	238e      	movs	r3, #142	; 0x8e
 800e56c:	00db      	lsls	r3, r3, #3
 800e56e:	58d2      	ldr	r2, [r2, r3]
 800e570:	2389      	movs	r3, #137	; 0x89
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	5cd2      	ldrb	r2, [r2, r3]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	711a      	strb	r2, [r3, #4]
            break;
 800e57a:	e115      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800e57c:	4a8f      	ldr	r2, [pc, #572]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e57e:	238e      	movs	r3, #142	; 0x8e
 800e580:	00db      	lsls	r3, r3, #3
 800e582:	58d3      	ldr	r3, [r2, r3]
 800e584:	22ca      	movs	r2, #202	; 0xca
 800e586:	5c9a      	ldrb	r2, [r3, r2]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	711a      	strb	r2, [r3, #4]
            break;
 800e58c:	e10c      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800e58e:	4a8b      	ldr	r2, [pc, #556]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e590:	238e      	movs	r3, #142	; 0x8e
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	58d3      	ldr	r3, [r2, r3]
 800e596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	605a      	str	r2, [r3, #4]
            break;
 800e59c:	e104      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800e59e:	4a87      	ldr	r2, [pc, #540]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e5a0:	238e      	movs	r3, #142	; 0x8e
 800e5a2:	00db      	lsls	r3, r3, #3
 800e5a4:	58d3      	ldr	r3, [r2, r3]
 800e5a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	605a      	str	r2, [r3, #4]
            break;
 800e5ac:	e0fc      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800e5ae:	4a83      	ldr	r2, [pc, #524]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e5b0:	238e      	movs	r3, #142	; 0x8e
 800e5b2:	00db      	lsls	r3, r3, #3
 800e5b4:	58d3      	ldr	r3, [r2, r3]
 800e5b6:	22c9      	movs	r2, #201	; 0xc9
 800e5b8:	5c9a      	ldrb	r2, [r3, r2]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	711a      	strb	r2, [r3, #4]
            break;
 800e5be:	e0f3      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800e5c0:	4a7e      	ldr	r2, [pc, #504]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e5c2:	238e      	movs	r3, #142	; 0x8e
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	58d2      	ldr	r2, [r2, r3]
 800e5c8:	2316      	movs	r3, #22
 800e5ca:	33ff      	adds	r3, #255	; 0xff
 800e5cc:	5cd2      	ldrb	r2, [r2, r3]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	711a      	strb	r2, [r3, #4]
            break;
 800e5d2:	e0e9      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800e5d4:	2110      	movs	r1, #16
 800e5d6:	187b      	adds	r3, r7, r1
 800e5d8:	221c      	movs	r2, #28
 800e5da:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e5dc:	4a77      	ldr	r2, [pc, #476]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e5de:	238e      	movs	r3, #142	; 0x8e
 800e5e0:	00db      	lsls	r3, r3, #3
 800e5e2:	58d3      	ldr	r3, [r2, r3]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	187a      	adds	r2, r7, r1
 800e5e8:	0011      	movs	r1, r2
 800e5ea:	0018      	movs	r0, r3
 800e5ec:	f004 f97f 	bl	80128ee <RegionGetPhyParam>
 800e5f0:	0003      	movs	r3, r0
 800e5f2:	001a      	movs	r2, r3
 800e5f4:	210c      	movs	r1, #12
 800e5f6:	187b      	adds	r3, r7, r1
 800e5f8:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 800e5fa:	187b      	adds	r3, r7, r1
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	605a      	str	r2, [r3, #4]
            break;
 800e602:	e0d1      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800e604:	4a6d      	ldr	r2, [pc, #436]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e606:	238e      	movs	r3, #142	; 0x8e
 800e608:	00db      	lsls	r3, r3, #3
 800e60a:	58d2      	ldr	r2, [r2, r3]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	21f8      	movs	r1, #248	; 0xf8
 800e610:	3304      	adds	r3, #4
 800e612:	1852      	adds	r2, r2, r1
 800e614:	ca03      	ldmia	r2!, {r0, r1}
 800e616:	c303      	stmia	r3!, {r0, r1}
            break;
 800e618:	e0c6      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800e61a:	4a68      	ldr	r2, [pc, #416]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e61c:	238e      	movs	r3, #142	; 0x8e
 800e61e:	00db      	lsls	r3, r3, #3
 800e620:	58d2      	ldr	r2, [r2, r3]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	3304      	adds	r3, #4
 800e626:	3228      	adds	r2, #40	; 0x28
 800e628:	ca03      	ldmia	r2!, {r0, r1}
 800e62a:	c303      	stmia	r3!, {r0, r1}
            break;
 800e62c:	e0bc      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e62e:	2110      	movs	r1, #16
 800e630:	187b      	adds	r3, r7, r1
 800e632:	221a      	movs	r2, #26
 800e634:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e636:	4a61      	ldr	r2, [pc, #388]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e638:	238e      	movs	r3, #142	; 0x8e
 800e63a:	00db      	lsls	r3, r3, #3
 800e63c:	58d3      	ldr	r3, [r2, r3]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	187a      	adds	r2, r7, r1
 800e642:	0011      	movs	r1, r2
 800e644:	0018      	movs	r0, r3
 800e646:	f004 f952 	bl	80128ee <RegionGetPhyParam>
 800e64a:	0003      	movs	r3, r0
 800e64c:	001a      	movs	r2, r3
 800e64e:	210c      	movs	r1, #12
 800e650:	187b      	adds	r3, r7, r1
 800e652:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e654:	187b      	adds	r3, r7, r1
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	605a      	str	r2, [r3, #4]
            break;
 800e65c:	e0a4      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800e65e:	2110      	movs	r1, #16
 800e660:	187b      	adds	r3, r7, r1
 800e662:	2219      	movs	r2, #25
 800e664:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e666:	4a55      	ldr	r2, [pc, #340]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e668:	238e      	movs	r3, #142	; 0x8e
 800e66a:	00db      	lsls	r3, r3, #3
 800e66c:	58d3      	ldr	r3, [r2, r3]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	187a      	adds	r2, r7, r1
 800e672:	0011      	movs	r1, r2
 800e674:	0018      	movs	r0, r3
 800e676:	f004 f93a 	bl	80128ee <RegionGetPhyParam>
 800e67a:	0003      	movs	r3, r0
 800e67c:	001a      	movs	r2, r3
 800e67e:	210c      	movs	r1, #12
 800e680:	187b      	adds	r3, r7, r1
 800e682:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800e684:	187b      	adds	r3, r7, r1
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	605a      	str	r2, [r3, #4]
            break;
 800e68c:	e08c      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800e68e:	4a4b      	ldr	r2, [pc, #300]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e690:	238e      	movs	r3, #142	; 0x8e
 800e692:	00db      	lsls	r3, r3, #3
 800e694:	58d3      	ldr	r3, [r2, r3]
 800e696:	22f4      	movs	r2, #244	; 0xf4
 800e698:	5c9a      	ldrb	r2, [r3, r2]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	711a      	strb	r2, [r3, #4]
            break;
 800e69e:	e083      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800e6a0:	4a46      	ldr	r2, [pc, #280]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e6a2:	238e      	movs	r3, #142	; 0x8e
 800e6a4:	00db      	lsls	r3, r3, #3
 800e6a6:	58d3      	ldr	r3, [r2, r3]
 800e6a8:	22e0      	movs	r2, #224	; 0xe0
 800e6aa:	589a      	ldr	r2, [r3, r2]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	605a      	str	r2, [r3, #4]
            break;
 800e6b0:	e07a      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800e6b2:	4a42      	ldr	r2, [pc, #264]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e6b4:	238e      	movs	r3, #142	; 0x8e
 800e6b6:	00db      	lsls	r3, r3, #3
 800e6b8:	58d3      	ldr	r3, [r2, r3]
 800e6ba:	22e4      	movs	r2, #228	; 0xe4
 800e6bc:	589a      	ldr	r2, [r3, r2]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	605a      	str	r2, [r3, #4]
            break;
 800e6c2:	e071      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800e6c4:	4a3d      	ldr	r2, [pc, #244]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e6c6:	238e      	movs	r3, #142	; 0x8e
 800e6c8:	00db      	lsls	r3, r3, #3
 800e6ca:	58d3      	ldr	r3, [r2, r3]
 800e6cc:	22e8      	movs	r2, #232	; 0xe8
 800e6ce:	589a      	ldr	r2, [r3, r2]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	605a      	str	r2, [r3, #4]
            break;
 800e6d4:	e068      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800e6d6:	4a39      	ldr	r2, [pc, #228]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e6d8:	238e      	movs	r3, #142	; 0x8e
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	58d3      	ldr	r3, [r2, r3]
 800e6de:	22ec      	movs	r2, #236	; 0xec
 800e6e0:	589a      	ldr	r2, [r3, r2]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	605a      	str	r2, [r3, #4]
            break;
 800e6e6:	e05f      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800e6e8:	4a34      	ldr	r2, [pc, #208]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e6ea:	238e      	movs	r3, #142	; 0x8e
 800e6ec:	00db      	lsls	r3, r3, #3
 800e6ee:	58d3      	ldr	r3, [r2, r3]
 800e6f0:	22f0      	movs	r2, #240	; 0xf0
 800e6f2:	589a      	ldr	r2, [r3, r2]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	605a      	str	r2, [r3, #4]
            break;
 800e6f8:	e056      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800e6fa:	4a30      	ldr	r2, [pc, #192]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e6fc:	238e      	movs	r3, #142	; 0x8e
 800e6fe:	00db      	lsls	r3, r3, #3
 800e700:	58d3      	ldr	r3, [r2, r3]
 800e702:	2205      	movs	r2, #5
 800e704:	569a      	ldrsb	r2, [r3, r2]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	711a      	strb	r2, [r3, #4]
            break;
 800e70a:	e04d      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800e70c:	4a2b      	ldr	r2, [pc, #172]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e70e:	238e      	movs	r3, #142	; 0x8e
 800e710:	00db      	lsls	r3, r3, #3
 800e712:	58d3      	ldr	r3, [r2, r3]
 800e714:	22d5      	movs	r2, #213	; 0xd5
 800e716:	569a      	ldrsb	r2, [r3, r2]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	711a      	strb	r2, [r3, #4]
            break;
 800e71c:	e044      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800e71e:	4a27      	ldr	r2, [pc, #156]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e720:	238e      	movs	r3, #142	; 0x8e
 800e722:	00db      	lsls	r3, r3, #3
 800e724:	58d3      	ldr	r3, [r2, r3]
 800e726:	2204      	movs	r2, #4
 800e728:	569a      	ldrsb	r2, [r3, r2]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	711a      	strb	r2, [r3, #4]
            break;
 800e72e:	e03b      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800e730:	4a22      	ldr	r2, [pc, #136]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e732:	238e      	movs	r3, #142	; 0x8e
 800e734:	00db      	lsls	r3, r3, #3
 800e736:	58d3      	ldr	r3, [r2, r3]
 800e738:	22d4      	movs	r2, #212	; 0xd4
 800e73a:	569a      	ldrsb	r2, [r3, r2]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	711a      	strb	r2, [r3, #4]
            break;
 800e740:	e032      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800e742:	4a1e      	ldr	r2, [pc, #120]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e744:	238e      	movs	r3, #142	; 0x8e
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	58d3      	ldr	r3, [r2, r3]
 800e74a:	22d8      	movs	r2, #216	; 0xd8
 800e74c:	589a      	ldr	r2, [r3, r2]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	605a      	str	r2, [r3, #4]
            break;
 800e752:	e029      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800e754:	4a19      	ldr	r2, [pc, #100]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e756:	238e      	movs	r3, #142	; 0x8e
 800e758:	00db      	lsls	r3, r3, #3
 800e75a:	58d3      	ldr	r3, [r2, r3]
 800e75c:	22dc      	movs	r2, #220	; 0xdc
 800e75e:	5c9a      	ldrb	r2, [r3, r2]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	711a      	strb	r2, [r3, #4]
            break;
 800e764:	e020      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800e766:	4a15      	ldr	r2, [pc, #84]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e768:	238e      	movs	r3, #142	; 0x8e
 800e76a:	00db      	lsls	r3, r3, #3
 800e76c:	58d2      	ldr	r2, [r2, r3]
 800e76e:	2384      	movs	r3, #132	; 0x84
 800e770:	005b      	lsls	r3, r3, #1
 800e772:	58d2      	ldr	r2, [r2, r3]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	605a      	str	r2, [r3, #4]
            break;
 800e778:	e016      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 800e77a:	f7fe ff2b 	bl	800d5d4 <GetCtxs>
 800e77e:	0002      	movs	r2, r0
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	605a      	str	r2, [r3, #4]
            break;
 800e784:	e010      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800e786:	4a0d      	ldr	r2, [pc, #52]	; (800e7bc <LoRaMacMibGetRequestConfirm+0x294>)
 800e788:	238e      	movs	r3, #142	; 0x8e
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	58d3      	ldr	r3, [r2, r3]
 800e78e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	605a      	str	r2, [r3, #4]
            break;
 800e794:	e008      	b.n	800e7a8 <LoRaMacMibGetRequestConfirm+0x280>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800e796:	2317      	movs	r3, #23
 800e798:	18fc      	adds	r4, r7, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	0018      	movs	r0, r3
 800e79e:	f001 f93d 	bl	800fa1c <LoRaMacClassBMibGetRequestConfirm>
 800e7a2:	0003      	movs	r3, r0
 800e7a4:	7023      	strb	r3, [r4, #0]
            break;
 800e7a6:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 800e7a8:	2317      	movs	r3, #23
 800e7aa:	18fb      	adds	r3, r7, r3
 800e7ac:	781b      	ldrb	r3, [r3, #0]
}
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	b007      	add	sp, #28
 800e7b4:	bd90      	pop	{r4, r7, pc}
 800e7b6:	46c0      	nop			; (mov r8, r8)
 800e7b8:	080206f0 	.word	0x080206f0
 800e7bc:	20000598 	.word	0x20000598

0800e7c0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800e7c0:	b590      	push	{r4, r7, lr}
 800e7c2:	b089      	sub	sp, #36	; 0x24
 800e7c4:	af02      	add	r7, sp, #8
 800e7c6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e7c8:	2317      	movs	r3, #23
 800e7ca:	18fb      	adds	r3, r7, r3
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d102      	bne.n	800e7dc <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	f000 fc6b 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800e7dc:	4ad2      	ldr	r2, [pc, #840]	; (800eb28 <LoRaMacMibSetRequestConfirm+0x368>)
 800e7de:	23d5      	movs	r3, #213	; 0xd5
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	58d3      	ldr	r3, [r2, r3]
 800e7e4:	2202      	movs	r2, #2
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	d002      	beq.n	800e7f0 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	f000 fc61 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
    }

    switch( mibSet->Type )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	2b30      	cmp	r3, #48	; 0x30
 800e7f6:	d901      	bls.n	800e7fc <LoRaMacMibSetRequestConfirm+0x3c>
 800e7f8:	f000 fc1a 	bl	800f030 <LoRaMacMibSetRequestConfirm+0x870>
 800e7fc:	009a      	lsls	r2, r3, #2
 800e7fe:	4bcb      	ldr	r3, [pc, #812]	; (800eb2c <LoRaMacMibSetRequestConfirm+0x36c>)
 800e800:	18d3      	adds	r3, r2, r3
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	791b      	ldrb	r3, [r3, #4]
 800e80a:	2217      	movs	r2, #23
 800e80c:	18bc      	adds	r4, r7, r2
 800e80e:	0018      	movs	r0, r3
 800e810:	f7fd f844 	bl	800b89c <SwitchClass>
 800e814:	0003      	movs	r3, r0
 800e816:	7023      	strb	r3, [r4, #0]
            break;
 800e818:	f000 fc44 	bl	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	791b      	ldrb	r3, [r3, #4]
 800e820:	2b02      	cmp	r3, #2
 800e822:	d00a      	beq.n	800e83a <LoRaMacMibSetRequestConfirm+0x7a>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800e824:	4ac0      	ldr	r2, [pc, #768]	; (800eb28 <LoRaMacMibSetRequestConfirm+0x368>)
 800e826:	238e      	movs	r3, #142	; 0x8e
 800e828:	00db      	lsls	r3, r3, #3
 800e82a:	58d2      	ldr	r2, [r2, r3]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	7919      	ldrb	r1, [r3, #4]
 800e830:	2389      	movs	r3, #137	; 0x89
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e836:	f000 fc35 	bl	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e83a:	2317      	movs	r3, #23
 800e83c:	18fb      	adds	r3, r7, r3
 800e83e:	2203      	movs	r2, #3
 800e840:	701a      	strb	r2, [r3, #0]
            break;
 800e842:	f000 fc2f 	bl	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800e846:	4ab8      	ldr	r2, [pc, #736]	; (800eb28 <LoRaMacMibSetRequestConfirm+0x368>)
 800e848:	238e      	movs	r3, #142	; 0x8e
 800e84a:	00db      	lsls	r3, r3, #3
 800e84c:	58d3      	ldr	r3, [r2, r3]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	7911      	ldrb	r1, [r2, #4]
 800e852:	22ca      	movs	r2, #202	; 0xca
 800e854:	5499      	strb	r1, [r3, r2]
            break;
 800e856:	f000 fc25 	bl	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800e85a:	4ab3      	ldr	r2, [pc, #716]	; (800eb28 <LoRaMacMibSetRequestConfirm+0x368>)
 800e85c:	238e      	movs	r3, #142	; 0x8e
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	58d3      	ldr	r3, [r2, r3]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	6852      	ldr	r2, [r2, #4]
 800e866:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 800e868:	f000 fc1c 	bl	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800e86c:	4aae      	ldr	r2, [pc, #696]	; (800eb28 <LoRaMacMibSetRequestConfirm+0x368>)
 800e86e:	238e      	movs	r3, #142	; 0x8e
 800e870:	00db      	lsls	r3, r3, #3
 800e872:	58d3      	ldr	r3, [r2, r3]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6852      	ldr	r2, [r2, #4]
 800e878:	645a      	str	r2, [r3, #68]	; 0x44
            break;
 800e87a:	f000 fc13 	bl	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00c      	beq.n	800e8a0 <LoRaMacMibSetRequestConfirm+0xe0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	0019      	movs	r1, r3
 800e88c:	2000      	movs	r0, #0
 800e88e:	f002 fda9 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e892:	1e03      	subs	r3, r0, #0
 800e894:	d101      	bne.n	800e89a <LoRaMacMibSetRequestConfirm+0xda>
 800e896:	f000 fbd4 	bl	800f042 <LoRaMacMibSetRequestConfirm+0x882>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e89a:	2311      	movs	r3, #17
 800e89c:	f000 fc09 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8a0:	2317      	movs	r3, #23
 800e8a2:	18fb      	adds	r3, r7, r3
 800e8a4:	2203      	movs	r2, #3
 800e8a6:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e8a8:	f000 fbcb 	bl	800f042 <LoRaMacMibSetRequestConfirm+0x882>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d00c      	beq.n	800e8ce <LoRaMacMibSetRequestConfirm+0x10e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	0019      	movs	r1, r3
 800e8ba:	2001      	movs	r0, #1
 800e8bc:	f002 fd92 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e8c0:	1e03      	subs	r3, r0, #0
 800e8c2:	d101      	bne.n	800e8c8 <LoRaMacMibSetRequestConfirm+0x108>
 800e8c4:	f000 fbbf 	bl	800f046 <LoRaMacMibSetRequestConfirm+0x886>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e8c8:	2311      	movs	r3, #17
 800e8ca:	f000 fbf2 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8ce:	2317      	movs	r3, #23
 800e8d0:	18fb      	adds	r3, r7, r3
 800e8d2:	2203      	movs	r2, #3
 800e8d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e8d6:	f000 fbb6 	bl	800f046 <LoRaMacMibSetRequestConfirm+0x886>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00c      	beq.n	800e8fc <LoRaMacMibSetRequestConfirm+0x13c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	0019      	movs	r1, r3
 800e8e8:	2002      	movs	r0, #2
 800e8ea:	f002 fd7b 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e8ee:	1e03      	subs	r3, r0, #0
 800e8f0:	d101      	bne.n	800e8f6 <LoRaMacMibSetRequestConfirm+0x136>
 800e8f2:	f000 fbaa 	bl	800f04a <LoRaMacMibSetRequestConfirm+0x88a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e8f6:	2311      	movs	r3, #17
 800e8f8:	f000 fbdb 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8fc:	2317      	movs	r3, #23
 800e8fe:	18fb      	adds	r3, r7, r3
 800e900:	2203      	movs	r2, #3
 800e902:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e904:	f000 fba1 	bl	800f04a <LoRaMacMibSetRequestConfirm+0x88a>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00c      	beq.n	800e92a <LoRaMacMibSetRequestConfirm+0x16a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	0019      	movs	r1, r3
 800e916:	2003      	movs	r0, #3
 800e918:	f002 fd64 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e91c:	1e03      	subs	r3, r0, #0
 800e91e:	d101      	bne.n	800e924 <LoRaMacMibSetRequestConfirm+0x164>
 800e920:	f000 fb95 	bl	800f04e <LoRaMacMibSetRequestConfirm+0x88e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e924:	2311      	movs	r3, #17
 800e926:	f000 fbc4 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e92a:	2317      	movs	r3, #23
 800e92c:	18fb      	adds	r3, r7, r3
 800e92e:	2203      	movs	r2, #3
 800e930:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e932:	f000 fb8c 	bl	800f04e <LoRaMacMibSetRequestConfirm+0x88e>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00c      	beq.n	800e958 <LoRaMacMibSetRequestConfirm+0x198>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	0019      	movs	r1, r3
 800e944:	2004      	movs	r0, #4
 800e946:	f002 fd4d 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e94a:	1e03      	subs	r3, r0, #0
 800e94c:	d101      	bne.n	800e952 <LoRaMacMibSetRequestConfirm+0x192>
 800e94e:	f000 fb80 	bl	800f052 <LoRaMacMibSetRequestConfirm+0x892>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e952:	2311      	movs	r3, #17
 800e954:	f000 fbad 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e958:	2317      	movs	r3, #23
 800e95a:	18fb      	adds	r3, r7, r3
 800e95c:	2203      	movs	r2, #3
 800e95e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e960:	f000 fb77 	bl	800f052 <LoRaMacMibSetRequestConfirm+0x892>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00c      	beq.n	800e986 <LoRaMacMibSetRequestConfirm+0x1c6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	0019      	movs	r1, r3
 800e972:	2005      	movs	r0, #5
 800e974:	f002 fd36 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e978:	1e03      	subs	r3, r0, #0
 800e97a:	d101      	bne.n	800e980 <LoRaMacMibSetRequestConfirm+0x1c0>
 800e97c:	f000 fb6b 	bl	800f056 <LoRaMacMibSetRequestConfirm+0x896>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e980:	2311      	movs	r3, #17
 800e982:	f000 fb96 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e986:	2317      	movs	r3, #23
 800e988:	18fb      	adds	r3, r7, r3
 800e98a:	2203      	movs	r2, #3
 800e98c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e98e:	f000 fb62 	bl	800f056 <LoRaMacMibSetRequestConfirm+0x896>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d00b      	beq.n	800e9b2 <LoRaMacMibSetRequestConfirm+0x1f2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	0019      	movs	r1, r3
 800e9a0:	2006      	movs	r0, #6
 800e9a2:	f002 fd1f 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e9a6:	1e03      	subs	r3, r0, #0
 800e9a8:	d100      	bne.n	800e9ac <LoRaMacMibSetRequestConfirm+0x1ec>
 800e9aa:	e356      	b.n	800f05a <LoRaMacMibSetRequestConfirm+0x89a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e9ac:	2311      	movs	r3, #17
 800e9ae:	f000 fb80 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e9b2:	2317      	movs	r3, #23
 800e9b4:	18fb      	adds	r3, r7, r3
 800e9b6:	2203      	movs	r2, #3
 800e9b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e9ba:	e34e      	b.n	800f05a <LoRaMacMibSetRequestConfirm+0x89a>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00b      	beq.n	800e9dc <LoRaMacMibSetRequestConfirm+0x21c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	0019      	movs	r1, r3
 800e9ca:	2007      	movs	r0, #7
 800e9cc:	f002 fd0a 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e9d0:	1e03      	subs	r3, r0, #0
 800e9d2:	d100      	bne.n	800e9d6 <LoRaMacMibSetRequestConfirm+0x216>
 800e9d4:	e343      	b.n	800f05e <LoRaMacMibSetRequestConfirm+0x89e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e9d6:	2311      	movs	r3, #17
 800e9d8:	f000 fb6b 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e9dc:	2317      	movs	r3, #23
 800e9de:	18fb      	adds	r3, r7, r3
 800e9e0:	2203      	movs	r2, #3
 800e9e2:	701a      	strb	r2, [r3, #0]
            }
            break;
 800e9e4:	e33b      	b.n	800f05e <LoRaMacMibSetRequestConfirm+0x89e>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00b      	beq.n	800ea06 <LoRaMacMibSetRequestConfirm+0x246>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	0019      	movs	r1, r3
 800e9f4:	207f      	movs	r0, #127	; 0x7f
 800e9f6:	f002 fcf5 	bl	80113e4 <LoRaMacCryptoSetKey>
 800e9fa:	1e03      	subs	r3, r0, #0
 800e9fc:	d100      	bne.n	800ea00 <LoRaMacMibSetRequestConfirm+0x240>
 800e9fe:	e330      	b.n	800f062 <LoRaMacMibSetRequestConfirm+0x8a2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ea00:	2311      	movs	r3, #17
 800ea02:	f000 fb56 	bl	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ea06:	2317      	movs	r3, #23
 800ea08:	18fb      	adds	r3, r7, r3
 800ea0a:	2203      	movs	r2, #3
 800ea0c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ea0e:	e328      	b.n	800f062 <LoRaMacMibSetRequestConfirm+0x8a2>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00a      	beq.n	800ea2e <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	0019      	movs	r1, r3
 800ea1e:	2080      	movs	r0, #128	; 0x80
 800ea20:	f002 fce0 	bl	80113e4 <LoRaMacCryptoSetKey>
 800ea24:	1e03      	subs	r3, r0, #0
 800ea26:	d100      	bne.n	800ea2a <LoRaMacMibSetRequestConfirm+0x26a>
 800ea28:	e31d      	b.n	800f066 <LoRaMacMibSetRequestConfirm+0x8a6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ea2a:	2311      	movs	r3, #17
 800ea2c:	e341      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ea2e:	2317      	movs	r3, #23
 800ea30:	18fb      	adds	r3, r7, r3
 800ea32:	2203      	movs	r2, #3
 800ea34:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ea36:	e316      	b.n	800f066 <LoRaMacMibSetRequestConfirm+0x8a6>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00a      	beq.n	800ea56 <LoRaMacMibSetRequestConfirm+0x296>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	0019      	movs	r1, r3
 800ea46:	2081      	movs	r0, #129	; 0x81
 800ea48:	f002 fccc 	bl	80113e4 <LoRaMacCryptoSetKey>
 800ea4c:	1e03      	subs	r3, r0, #0
 800ea4e:	d100      	bne.n	800ea52 <LoRaMacMibSetRequestConfirm+0x292>
 800ea50:	e30b      	b.n	800f06a <LoRaMacMibSetRequestConfirm+0x8aa>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ea52:	2311      	movs	r3, #17
 800ea54:	e32d      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ea56:	2317      	movs	r3, #23
 800ea58:	18fb      	adds	r3, r7, r3
 800ea5a:	2203      	movs	r2, #3
 800ea5c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ea5e:	e304      	b.n	800f06a <LoRaMacMibSetRequestConfirm+0x8aa>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00a      	beq.n	800ea7e <LoRaMacMibSetRequestConfirm+0x2be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	0019      	movs	r1, r3
 800ea6e:	2082      	movs	r0, #130	; 0x82
 800ea70:	f002 fcb8 	bl	80113e4 <LoRaMacCryptoSetKey>
 800ea74:	1e03      	subs	r3, r0, #0
 800ea76:	d100      	bne.n	800ea7a <LoRaMacMibSetRequestConfirm+0x2ba>
 800ea78:	e2f9      	b.n	800f06e <LoRaMacMibSetRequestConfirm+0x8ae>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ea7a:	2311      	movs	r3, #17
 800ea7c:	e319      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ea7e:	2317      	movs	r3, #23
 800ea80:	18fb      	adds	r3, r7, r3
 800ea82:	2203      	movs	r2, #3
 800ea84:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ea86:	e2f2      	b.n	800f06e <LoRaMacMibSetRequestConfirm+0x8ae>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00a      	beq.n	800eaa6 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	0019      	movs	r1, r3
 800ea96:	2083      	movs	r0, #131	; 0x83
 800ea98:	f002 fca4 	bl	80113e4 <LoRaMacCryptoSetKey>
 800ea9c:	1e03      	subs	r3, r0, #0
 800ea9e:	d100      	bne.n	800eaa2 <LoRaMacMibSetRequestConfirm+0x2e2>
 800eaa0:	e2e7      	b.n	800f072 <LoRaMacMibSetRequestConfirm+0x8b2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eaa2:	2311      	movs	r3, #17
 800eaa4:	e305      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eaa6:	2317      	movs	r3, #23
 800eaa8:	18fb      	adds	r3, r7, r3
 800eaaa:	2203      	movs	r2, #3
 800eaac:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eaae:	e2e0      	b.n	800f072 <LoRaMacMibSetRequestConfirm+0x8b2>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d00a      	beq.n	800eace <LoRaMacMibSetRequestConfirm+0x30e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	0019      	movs	r1, r3
 800eabe:	2084      	movs	r0, #132	; 0x84
 800eac0:	f002 fc90 	bl	80113e4 <LoRaMacCryptoSetKey>
 800eac4:	1e03      	subs	r3, r0, #0
 800eac6:	d100      	bne.n	800eaca <LoRaMacMibSetRequestConfirm+0x30a>
 800eac8:	e2d5      	b.n	800f076 <LoRaMacMibSetRequestConfirm+0x8b6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eaca:	2311      	movs	r3, #17
 800eacc:	e2f1      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eace:	2317      	movs	r3, #23
 800ead0:	18fb      	adds	r3, r7, r3
 800ead2:	2203      	movs	r2, #3
 800ead4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ead6:	e2ce      	b.n	800f076 <LoRaMacMibSetRequestConfirm+0x8b6>
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d00a      	beq.n	800eaf6 <LoRaMacMibSetRequestConfirm+0x336>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	0019      	movs	r1, r3
 800eae6:	2085      	movs	r0, #133	; 0x85
 800eae8:	f002 fc7c 	bl	80113e4 <LoRaMacCryptoSetKey>
 800eaec:	1e03      	subs	r3, r0, #0
 800eaee:	d100      	bne.n	800eaf2 <LoRaMacMibSetRequestConfirm+0x332>
 800eaf0:	e2c3      	b.n	800f07a <LoRaMacMibSetRequestConfirm+0x8ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eaf2:	2311      	movs	r3, #17
 800eaf4:	e2dd      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eaf6:	2317      	movs	r3, #23
 800eaf8:	18fb      	adds	r3, r7, r3
 800eafa:	2203      	movs	r2, #3
 800eafc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eafe:	e2bc      	b.n	800f07a <LoRaMacMibSetRequestConfirm+0x8ba>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00a      	beq.n	800eb1e <LoRaMacMibSetRequestConfirm+0x35e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	0019      	movs	r1, r3
 800eb0e:	2086      	movs	r0, #134	; 0x86
 800eb10:	f002 fc68 	bl	80113e4 <LoRaMacCryptoSetKey>
 800eb14:	1e03      	subs	r3, r0, #0
 800eb16:	d100      	bne.n	800eb1a <LoRaMacMibSetRequestConfirm+0x35a>
 800eb18:	e2b1      	b.n	800f07e <LoRaMacMibSetRequestConfirm+0x8be>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb1a:	2311      	movs	r3, #17
 800eb1c:	e2c9      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb1e:	2317      	movs	r3, #23
 800eb20:	18fb      	adds	r3, r7, r3
 800eb22:	2203      	movs	r2, #3
 800eb24:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb26:	e2aa      	b.n	800f07e <LoRaMacMibSetRequestConfirm+0x8be>
 800eb28:	20000598 	.word	0x20000598
 800eb2c:	080207b0 	.word	0x080207b0
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00a      	beq.n	800eb4e <LoRaMacMibSetRequestConfirm+0x38e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	0019      	movs	r1, r3
 800eb3e:	2087      	movs	r0, #135	; 0x87
 800eb40:	f002 fc50 	bl	80113e4 <LoRaMacCryptoSetKey>
 800eb44:	1e03      	subs	r3, r0, #0
 800eb46:	d100      	bne.n	800eb4a <LoRaMacMibSetRequestConfirm+0x38a>
 800eb48:	e29b      	b.n	800f082 <LoRaMacMibSetRequestConfirm+0x8c2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb4a:	2311      	movs	r3, #17
 800eb4c:	e2b1      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb4e:	2317      	movs	r3, #23
 800eb50:	18fb      	adds	r3, r7, r3
 800eb52:	2203      	movs	r2, #3
 800eb54:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb56:	e294      	b.n	800f082 <LoRaMacMibSetRequestConfirm+0x8c2>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00a      	beq.n	800eb76 <LoRaMacMibSetRequestConfirm+0x3b6>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	0019      	movs	r1, r3
 800eb66:	2088      	movs	r0, #136	; 0x88
 800eb68:	f002 fc3c 	bl	80113e4 <LoRaMacCryptoSetKey>
 800eb6c:	1e03      	subs	r3, r0, #0
 800eb6e:	d100      	bne.n	800eb72 <LoRaMacMibSetRequestConfirm+0x3b2>
 800eb70:	e289      	b.n	800f086 <LoRaMacMibSetRequestConfirm+0x8c6>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb72:	2311      	movs	r3, #17
 800eb74:	e29d      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb76:	2317      	movs	r3, #23
 800eb78:	18fb      	adds	r3, r7, r3
 800eb7a:	2203      	movs	r2, #3
 800eb7c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eb7e:	e282      	b.n	800f086 <LoRaMacMibSetRequestConfirm+0x8c6>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00a      	beq.n	800eb9e <LoRaMacMibSetRequestConfirm+0x3de>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	0019      	movs	r1, r3
 800eb8e:	2089      	movs	r0, #137	; 0x89
 800eb90:	f002 fc28 	bl	80113e4 <LoRaMacCryptoSetKey>
 800eb94:	1e03      	subs	r3, r0, #0
 800eb96:	d100      	bne.n	800eb9a <LoRaMacMibSetRequestConfirm+0x3da>
 800eb98:	e277      	b.n	800f08a <LoRaMacMibSetRequestConfirm+0x8ca>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eb9a:	2311      	movs	r3, #17
 800eb9c:	e289      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb9e:	2317      	movs	r3, #23
 800eba0:	18fb      	adds	r3, r7, r3
 800eba2:	2203      	movs	r2, #3
 800eba4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800eba6:	e270      	b.n	800f08a <LoRaMacMibSetRequestConfirm+0x8ca>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00a      	beq.n	800ebc6 <LoRaMacMibSetRequestConfirm+0x406>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	0019      	movs	r1, r3
 800ebb6:	208a      	movs	r0, #138	; 0x8a
 800ebb8:	f002 fc14 	bl	80113e4 <LoRaMacCryptoSetKey>
 800ebbc:	1e03      	subs	r3, r0, #0
 800ebbe:	d100      	bne.n	800ebc2 <LoRaMacMibSetRequestConfirm+0x402>
 800ebc0:	e265      	b.n	800f08e <LoRaMacMibSetRequestConfirm+0x8ce>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ebc2:	2311      	movs	r3, #17
 800ebc4:	e275      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebc6:	2317      	movs	r3, #23
 800ebc8:	18fb      	adds	r3, r7, r3
 800ebca:	2203      	movs	r2, #3
 800ebcc:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ebce:	e25e      	b.n	800f08e <LoRaMacMibSetRequestConfirm+0x8ce>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00a      	beq.n	800ebee <LoRaMacMibSetRequestConfirm+0x42e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	0019      	movs	r1, r3
 800ebde:	208b      	movs	r0, #139	; 0x8b
 800ebe0:	f002 fc00 	bl	80113e4 <LoRaMacCryptoSetKey>
 800ebe4:	1e03      	subs	r3, r0, #0
 800ebe6:	d100      	bne.n	800ebea <LoRaMacMibSetRequestConfirm+0x42a>
 800ebe8:	e253      	b.n	800f092 <LoRaMacMibSetRequestConfirm+0x8d2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ebea:	2311      	movs	r3, #17
 800ebec:	e261      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebee:	2317      	movs	r3, #23
 800ebf0:	18fb      	adds	r3, r7, r3
 800ebf2:	2203      	movs	r2, #3
 800ebf4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ebf6:	e24c      	b.n	800f092 <LoRaMacMibSetRequestConfirm+0x8d2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ebf8:	4adb      	ldr	r2, [pc, #876]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ebfa:	238e      	movs	r3, #142	; 0x8e
 800ebfc:	00db      	lsls	r3, r3, #3
 800ebfe:	58d3      	ldr	r3, [r2, r3]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	7911      	ldrb	r1, [r2, #4]
 800ec04:	22c9      	movs	r2, #201	; 0xc9
 800ec06:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800ec08:	4bd8      	ldr	r3, [pc, #864]	; (800ef6c <LoRaMacMibSetRequestConfirm+0x7ac>)
 800ec0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec0c:	49d6      	ldr	r1, [pc, #856]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ec0e:	228e      	movs	r2, #142	; 0x8e
 800ec10:	00d2      	lsls	r2, r2, #3
 800ec12:	588a      	ldr	r2, [r1, r2]
 800ec14:	21c9      	movs	r1, #201	; 0xc9
 800ec16:	5c52      	ldrb	r2, [r2, r1]
 800ec18:	0010      	movs	r0, r2
 800ec1a:	4798      	blx	r3
            break;
 800ec1c:	e242      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ec1e:	4ad2      	ldr	r2, [pc, #840]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ec20:	238e      	movs	r3, #142	; 0x8e
 800ec22:	00db      	lsls	r3, r3, #3
 800ec24:	58d2      	ldr	r2, [r2, r3]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	7919      	ldrb	r1, [r3, #4]
 800ec2a:	2316      	movs	r3, #22
 800ec2c:	33ff      	adds	r3, #255	; 0xff
 800ec2e:	54d1      	strb	r1, [r2, r3]
            break;
 800ec30:	e238      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	7a1b      	ldrb	r3, [r3, #8]
 800ec36:	b25a      	sxtb	r2, r3
 800ec38:	2108      	movs	r1, #8
 800ec3a:	187b      	adds	r3, r7, r1
 800ec3c:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ec3e:	4aca      	ldr	r2, [pc, #808]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ec40:	238e      	movs	r3, #142	; 0x8e
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	58d2      	ldr	r2, [r2, r3]
 800ec46:	2302      	movs	r3, #2
 800ec48:	33ff      	adds	r3, #255	; 0xff
 800ec4a:	5cd2      	ldrb	r2, [r2, r3]
 800ec4c:	187b      	adds	r3, r7, r1
 800ec4e:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ec50:	4ac5      	ldr	r2, [pc, #788]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ec52:	238e      	movs	r3, #142	; 0x8e
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	58d3      	ldr	r3, [r2, r3]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	1879      	adds	r1, r7, r1
 800ec5c:	2206      	movs	r2, #6
 800ec5e:	0018      	movs	r0, r3
 800ec60:	f003 feac 	bl	80129bc <RegionVerify>
 800ec64:	1e03      	subs	r3, r0, #0
 800ec66:	d040      	beq.n	800ecea <LoRaMacMibSetRequestConfirm+0x52a>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ec68:	4abf      	ldr	r2, [pc, #764]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ec6a:	238e      	movs	r3, #142	; 0x8e
 800ec6c:	00db      	lsls	r3, r3, #3
 800ec6e:	58d3      	ldr	r3, [r2, r3]
 800ec70:	21f8      	movs	r1, #248	; 0xf8
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	185b      	adds	r3, r3, r1
 800ec76:	3204      	adds	r2, #4
 800ec78:	ca03      	ldmia	r2!, {r0, r1}
 800ec7a:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ec7c:	4aba      	ldr	r2, [pc, #744]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ec7e:	238e      	movs	r3, #142	; 0x8e
 800ec80:	00db      	lsls	r3, r3, #3
 800ec82:	58d3      	ldr	r3, [r2, r3]
 800ec84:	22c8      	movs	r2, #200	; 0xc8
 800ec86:	5c9b      	ldrb	r3, [r3, r2]
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d000      	beq.n	800ec8e <LoRaMacMibSetRequestConfirm+0x4ce>
 800ec8c:	e203      	b.n	800f096 <LoRaMacMibSetRequestConfirm+0x8d6>
 800ec8e:	4ab6      	ldr	r2, [pc, #728]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ec90:	238e      	movs	r3, #142	; 0x8e
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	58d2      	ldr	r2, [r2, r3]
 800ec96:	2389      	movs	r3, #137	; 0x89
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	5cd3      	ldrb	r3, [r2, r3]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d100      	bne.n	800eca2 <LoRaMacMibSetRequestConfirm+0x4e2>
 800eca0:	e1f9      	b.n	800f096 <LoRaMacMibSetRequestConfirm+0x8d6>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800eca2:	4bb2      	ldr	r3, [pc, #712]	; (800ef6c <LoRaMacMibSetRequestConfirm+0x7ac>)
 800eca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca6:	4798      	blx	r3
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800eca8:	4aaf      	ldr	r2, [pc, #700]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ecaa:	238e      	movs	r3, #142	; 0x8e
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	58d3      	ldr	r3, [r2, r3]
 800ecb0:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800ecb2:	4aad      	ldr	r2, [pc, #692]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ecb4:	238e      	movs	r3, #142	; 0x8e
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	58d3      	ldr	r3, [r2, r3]
 800ecba:	22fc      	movs	r2, #252	; 0xfc
 800ecbc:	5c9b      	ldrb	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ecbe:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800ecc0:	4aa9      	ldr	r2, [pc, #676]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ecc2:	238e      	movs	r3, #142	; 0x8e
 800ecc4:	00db      	lsls	r3, r3, #3
 800ecc6:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ecc8:	22dc      	movs	r2, #220	; 0xdc
 800ecca:	5c9c      	ldrb	r4, [r3, r2]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800eccc:	4aa6      	ldr	r2, [pc, #664]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ecce:	238e      	movs	r3, #142	; 0x8e
 800ecd0:	00db      	lsls	r3, r3, #3
 800ecd2:	58d3      	ldr	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800ecd4:	22d8      	movs	r2, #216	; 0xd8
 800ecd6:	589a      	ldr	r2, [r3, r2]
 800ecd8:	4ba5      	ldr	r3, [pc, #660]	; (800ef70 <LoRaMacMibSetRequestConfirm+0x7b0>)
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	0013      	movs	r3, r2
 800ecde:	0022      	movs	r2, r4
 800ece0:	f003 feb4 	bl	8012a4c <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindow2Config );
                    OpenContinuousRx2Window( );
 800ece4:	f7fe f9ce 	bl	800d084 <OpenContinuousRx2Window>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ece8:	e1d5      	b.n	800f096 <LoRaMacMibSetRequestConfirm+0x8d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ecea:	2317      	movs	r3, #23
 800ecec:	18fb      	adds	r3, r7, r3
 800ecee:	2203      	movs	r2, #3
 800ecf0:	701a      	strb	r2, [r3, #0]
            break;
 800ecf2:	e1d0      	b.n	800f096 <LoRaMacMibSetRequestConfirm+0x8d6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	7a1b      	ldrb	r3, [r3, #8]
 800ecf8:	b25a      	sxtb	r2, r3
 800ecfa:	2108      	movs	r1, #8
 800ecfc:	187b      	adds	r3, r7, r1
 800ecfe:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ed00:	4a99      	ldr	r2, [pc, #612]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ed02:	238e      	movs	r3, #142	; 0x8e
 800ed04:	00db      	lsls	r3, r3, #3
 800ed06:	58d2      	ldr	r2, [r2, r3]
 800ed08:	2302      	movs	r3, #2
 800ed0a:	33ff      	adds	r3, #255	; 0xff
 800ed0c:	5cd2      	ldrb	r2, [r2, r3]
 800ed0e:	187b      	adds	r3, r7, r1
 800ed10:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ed12:	4a95      	ldr	r2, [pc, #596]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ed14:	238e      	movs	r3, #142	; 0x8e
 800ed16:	00db      	lsls	r3, r3, #3
 800ed18:	58d3      	ldr	r3, [r2, r3]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	1879      	adds	r1, r7, r1
 800ed1e:	2206      	movs	r2, #6
 800ed20:	0018      	movs	r0, r3
 800ed22:	f003 fe4b 	bl	80129bc <RegionVerify>
 800ed26:	1e03      	subs	r3, r0, #0
 800ed28:	d009      	beq.n	800ed3e <LoRaMacMibSetRequestConfirm+0x57e>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ed2a:	4a8f      	ldr	r2, [pc, #572]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ed2c:	238e      	movs	r3, #142	; 0x8e
 800ed2e:	00db      	lsls	r3, r3, #3
 800ed30:	58d3      	ldr	r3, [r2, r3]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	3328      	adds	r3, #40	; 0x28
 800ed36:	3204      	adds	r2, #4
 800ed38:	ca03      	ldmia	r2!, {r0, r1}
 800ed3a:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ed3c:	e1b2      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed3e:	2317      	movs	r3, #23
 800ed40:	18fb      	adds	r3, r7, r3
 800ed42:	2203      	movs	r2, #3
 800ed44:	701a      	strb	r2, [r3, #0]
            break;
 800ed46:	e1ad      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	210c      	movs	r1, #12
 800ed4e:	187b      	adds	r3, r7, r1
 800ed50:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ed52:	187b      	adds	r3, r7, r1
 800ed54:	2201      	movs	r2, #1
 800ed56:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800ed58:	4a83      	ldr	r2, [pc, #524]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ed5a:	238e      	movs	r3, #142	; 0x8e
 800ed5c:	00db      	lsls	r3, r3, #3
 800ed5e:	58d3      	ldr	r3, [r2, r3]
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	187a      	adds	r2, r7, r1
 800ed64:	0011      	movs	r1, r2
 800ed66:	0018      	movs	r0, r3
 800ed68:	f003 fe5a 	bl	8012a20 <RegionChanMaskSet>
 800ed6c:	0003      	movs	r3, r0
 800ed6e:	001a      	movs	r2, r3
 800ed70:	2301      	movs	r3, #1
 800ed72:	4053      	eors	r3, r2
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d100      	bne.n	800ed7c <LoRaMacMibSetRequestConfirm+0x5bc>
 800ed7a:	e18e      	b.n	800f09a <LoRaMacMibSetRequestConfirm+0x8da>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed7c:	2317      	movs	r3, #23
 800ed7e:	18fb      	adds	r3, r7, r3
 800ed80:	2203      	movs	r2, #3
 800ed82:	701a      	strb	r2, [r3, #0]
            }
            break;
 800ed84:	e189      	b.n	800f09a <LoRaMacMibSetRequestConfirm+0x8da>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	685a      	ldr	r2, [r3, #4]
 800ed8a:	210c      	movs	r1, #12
 800ed8c:	187b      	adds	r3, r7, r1
 800ed8e:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ed90:	187b      	adds	r3, r7, r1
 800ed92:	2200      	movs	r2, #0
 800ed94:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800ed96:	4a74      	ldr	r2, [pc, #464]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ed98:	238e      	movs	r3, #142	; 0x8e
 800ed9a:	00db      	lsls	r3, r3, #3
 800ed9c:	58d3      	ldr	r3, [r2, r3]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	187a      	adds	r2, r7, r1
 800eda2:	0011      	movs	r1, r2
 800eda4:	0018      	movs	r0, r3
 800eda6:	f003 fe3b 	bl	8012a20 <RegionChanMaskSet>
 800edaa:	0003      	movs	r3, r0
 800edac:	001a      	movs	r2, r3
 800edae:	2301      	movs	r3, #1
 800edb0:	4053      	eors	r3, r2
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d100      	bne.n	800edba <LoRaMacMibSetRequestConfirm+0x5fa>
 800edb8:	e171      	b.n	800f09e <LoRaMacMibSetRequestConfirm+0x8de>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edba:	2317      	movs	r3, #23
 800edbc:	18fb      	adds	r3, r7, r3
 800edbe:	2203      	movs	r2, #3
 800edc0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800edc2:	e16c      	b.n	800f09e <LoRaMacMibSetRequestConfirm+0x8de>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	791b      	ldrb	r3, [r3, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00c      	beq.n	800ede6 <LoRaMacMibSetRequestConfirm+0x626>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800edd0:	2b0f      	cmp	r3, #15
 800edd2:	d808      	bhi.n	800ede6 <LoRaMacMibSetRequestConfirm+0x626>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800edd4:	4a64      	ldr	r2, [pc, #400]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800edd6:	238e      	movs	r3, #142	; 0x8e
 800edd8:	00db      	lsls	r3, r3, #3
 800edda:	58d3      	ldr	r3, [r2, r3]
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	7911      	ldrb	r1, [r2, #4]
 800ede0:	22f4      	movs	r2, #244	; 0xf4
 800ede2:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ede4:	e15e      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ede6:	2317      	movs	r3, #23
 800ede8:	18fb      	adds	r3, r7, r3
 800edea:	2203      	movs	r2, #3
 800edec:	701a      	strb	r2, [r3, #0]
            break;
 800edee:	e159      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800edf0:	4a5d      	ldr	r2, [pc, #372]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800edf2:	238e      	movs	r3, #142	; 0x8e
 800edf4:	00db      	lsls	r3, r3, #3
 800edf6:	58d2      	ldr	r2, [r2, r3]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	21e0      	movs	r1, #224	; 0xe0
 800edfe:	5053      	str	r3, [r2, r1]
            break;
 800ee00:	e150      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ee02:	4a59      	ldr	r2, [pc, #356]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee04:	238e      	movs	r3, #142	; 0x8e
 800ee06:	00db      	lsls	r3, r3, #3
 800ee08:	58d2      	ldr	r2, [r2, r3]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	21e4      	movs	r1, #228	; 0xe4
 800ee10:	5053      	str	r3, [r2, r1]
            break;
 800ee12:	e147      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ee14:	4a54      	ldr	r2, [pc, #336]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee16:	238e      	movs	r3, #142	; 0x8e
 800ee18:	00db      	lsls	r3, r3, #3
 800ee1a:	58d2      	ldr	r2, [r2, r3]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	21e8      	movs	r1, #232	; 0xe8
 800ee22:	5053      	str	r3, [r2, r1]
            break;
 800ee24:	e13e      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ee26:	4a50      	ldr	r2, [pc, #320]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee28:	238e      	movs	r3, #142	; 0x8e
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	58d2      	ldr	r2, [r2, r3]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	21ec      	movs	r1, #236	; 0xec
 800ee34:	5053      	str	r3, [r2, r1]
            break;
 800ee36:	e135      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ee38:	4a4b      	ldr	r2, [pc, #300]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee3a:	238e      	movs	r3, #142	; 0x8e
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	58d2      	ldr	r2, [r2, r3]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	21f0      	movs	r1, #240	; 0xf0
 800ee46:	5053      	str	r3, [r2, r1]
            break;
 800ee48:	e12c      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2204      	movs	r2, #4
 800ee4e:	569a      	ldrsb	r2, [r3, r2]
 800ee50:	2108      	movs	r1, #8
 800ee52:	187b      	adds	r3, r7, r1
 800ee54:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800ee56:	4a44      	ldr	r2, [pc, #272]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee58:	238e      	movs	r3, #142	; 0x8e
 800ee5a:	00db      	lsls	r3, r3, #3
 800ee5c:	58d3      	ldr	r3, [r2, r3]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	1879      	adds	r1, r7, r1
 800ee62:	2205      	movs	r2, #5
 800ee64:	0018      	movs	r0, r3
 800ee66:	f003 fda9 	bl	80129bc <RegionVerify>
 800ee6a:	1e03      	subs	r3, r0, #0
 800ee6c:	d009      	beq.n	800ee82 <LoRaMacMibSetRequestConfirm+0x6c2>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ee6e:	4a3e      	ldr	r2, [pc, #248]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee70:	238e      	movs	r3, #142	; 0x8e
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	58d3      	ldr	r3, [r2, r3]
 800ee76:	2208      	movs	r2, #8
 800ee78:	18ba      	adds	r2, r7, r2
 800ee7a:	7812      	ldrb	r2, [r2, #0]
 800ee7c:	b252      	sxtb	r2, r2
 800ee7e:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ee80:	e110      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee82:	2317      	movs	r3, #23
 800ee84:	18fb      	adds	r3, r7, r3
 800ee86:	2203      	movs	r2, #3
 800ee88:	701a      	strb	r2, [r3, #0]
            break;
 800ee8a:	e10b      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2204      	movs	r2, #4
 800ee90:	569a      	ldrsb	r2, [r3, r2]
 800ee92:	2108      	movs	r1, #8
 800ee94:	187b      	adds	r3, r7, r1
 800ee96:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ee98:	4a33      	ldr	r2, [pc, #204]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ee9a:	238e      	movs	r3, #142	; 0x8e
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	58d2      	ldr	r2, [r2, r3]
 800eea0:	2380      	movs	r3, #128	; 0x80
 800eea2:	005b      	lsls	r3, r3, #1
 800eea4:	5cd2      	ldrb	r2, [r2, r3]
 800eea6:	187b      	adds	r3, r7, r1
 800eea8:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800eeaa:	4a2f      	ldr	r2, [pc, #188]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800eeac:	238e      	movs	r3, #142	; 0x8e
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	58d3      	ldr	r3, [r2, r3]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	1879      	adds	r1, r7, r1
 800eeb6:	2204      	movs	r2, #4
 800eeb8:	0018      	movs	r0, r3
 800eeba:	f003 fd7f 	bl	80129bc <RegionVerify>
 800eebe:	1e03      	subs	r3, r0, #0
 800eec0:	d00a      	beq.n	800eed8 <LoRaMacMibSetRequestConfirm+0x718>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800eec2:	4a29      	ldr	r2, [pc, #164]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800eec4:	238e      	movs	r3, #142	; 0x8e
 800eec6:	00db      	lsls	r3, r3, #3
 800eec8:	58d3      	ldr	r3, [r2, r3]
 800eeca:	2208      	movs	r2, #8
 800eecc:	18ba      	adds	r2, r7, r2
 800eece:	2100      	movs	r1, #0
 800eed0:	5651      	ldrsb	r1, [r2, r1]
 800eed2:	22d5      	movs	r2, #213	; 0xd5
 800eed4:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800eed6:	e0e5      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eed8:	2317      	movs	r3, #23
 800eeda:	18fb      	adds	r3, r7, r3
 800eedc:	2203      	movs	r2, #3
 800eede:	701a      	strb	r2, [r3, #0]
            break;
 800eee0:	e0e0      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2204      	movs	r2, #4
 800eee6:	569a      	ldrsb	r2, [r3, r2]
 800eee8:	2108      	movs	r1, #8
 800eeea:	187b      	adds	r3, r7, r1
 800eeec:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800eeee:	4a1e      	ldr	r2, [pc, #120]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800eef0:	238e      	movs	r3, #142	; 0x8e
 800eef2:	00db      	lsls	r3, r3, #3
 800eef4:	58d3      	ldr	r3, [r2, r3]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	1879      	adds	r1, r7, r1
 800eefa:	2209      	movs	r2, #9
 800eefc:	0018      	movs	r0, r3
 800eefe:	f003 fd5d 	bl	80129bc <RegionVerify>
 800ef02:	1e03      	subs	r3, r0, #0
 800ef04:	d009      	beq.n	800ef1a <LoRaMacMibSetRequestConfirm+0x75a>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800ef06:	4a18      	ldr	r2, [pc, #96]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef08:	238e      	movs	r3, #142	; 0x8e
 800ef0a:	00db      	lsls	r3, r3, #3
 800ef0c:	58d3      	ldr	r3, [r2, r3]
 800ef0e:	2208      	movs	r2, #8
 800ef10:	18ba      	adds	r2, r7, r2
 800ef12:	7812      	ldrb	r2, [r2, #0]
 800ef14:	b252      	sxtb	r2, r2
 800ef16:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ef18:	e0c4      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef1a:	2317      	movs	r3, #23
 800ef1c:	18fb      	adds	r3, r7, r3
 800ef1e:	2203      	movs	r2, #3
 800ef20:	701a      	strb	r2, [r3, #0]
            break;
 800ef22:	e0bf      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2204      	movs	r2, #4
 800ef28:	569a      	ldrsb	r2, [r3, r2]
 800ef2a:	2108      	movs	r1, #8
 800ef2c:	187b      	adds	r3, r7, r1
 800ef2e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800ef30:	4a0d      	ldr	r2, [pc, #52]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef32:	238e      	movs	r3, #142	; 0x8e
 800ef34:	00db      	lsls	r3, r3, #3
 800ef36:	58d3      	ldr	r3, [r2, r3]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	1879      	adds	r1, r7, r1
 800ef3c:	2208      	movs	r2, #8
 800ef3e:	0018      	movs	r0, r3
 800ef40:	f003 fd3c 	bl	80129bc <RegionVerify>
 800ef44:	1e03      	subs	r3, r0, #0
 800ef46:	d00a      	beq.n	800ef5e <LoRaMacMibSetRequestConfirm+0x79e>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800ef48:	4a07      	ldr	r2, [pc, #28]	; (800ef68 <LoRaMacMibSetRequestConfirm+0x7a8>)
 800ef4a:	238e      	movs	r3, #142	; 0x8e
 800ef4c:	00db      	lsls	r3, r3, #3
 800ef4e:	58d3      	ldr	r3, [r2, r3]
 800ef50:	2208      	movs	r2, #8
 800ef52:	18ba      	adds	r2, r7, r2
 800ef54:	2100      	movs	r1, #0
 800ef56:	5651      	ldrsb	r1, [r2, r1]
 800ef58:	22d4      	movs	r2, #212	; 0xd4
 800ef5a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ef5c:	e0a2      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef5e:	2317      	movs	r3, #23
 800ef60:	18fb      	adds	r3, r7, r3
 800ef62:	2203      	movs	r2, #3
 800ef64:	701a      	strb	r2, [r3, #0]
            break;
 800ef66:	e09d      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
 800ef68:	20000598 	.word	0x20000598
 800ef6c:	08020a5c 	.word	0x08020a5c
 800ef70:	20000978 	.word	0x20000978
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ef74:	4a51      	ldr	r2, [pc, #324]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x8fc>)
 800ef76:	238e      	movs	r3, #142	; 0x8e
 800ef78:	00db      	lsls	r3, r3, #3
 800ef7a:	58d3      	ldr	r3, [r2, r3]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	6852      	ldr	r2, [r2, #4]
 800ef80:	609a      	str	r2, [r3, #8]
 800ef82:	494e      	ldr	r1, [pc, #312]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x8fc>)
 800ef84:	228e      	movs	r2, #142	; 0x8e
 800ef86:	00d2      	lsls	r2, r2, #3
 800ef88:	588a      	ldr	r2, [r1, r2]
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	21d8      	movs	r1, #216	; 0xd8
 800ef8e:	5053      	str	r3, [r2, r1]
            break;
 800ef90:	e088      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ef92:	4a4a      	ldr	r2, [pc, #296]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x8fc>)
 800ef94:	238e      	movs	r3, #142	; 0x8e
 800ef96:	00db      	lsls	r3, r3, #3
 800ef98:	58d3      	ldr	r3, [r2, r3]
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	7912      	ldrb	r2, [r2, #4]
 800ef9e:	731a      	strb	r2, [r3, #12]
 800efa0:	4946      	ldr	r1, [pc, #280]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x8fc>)
 800efa2:	228e      	movs	r2, #142	; 0x8e
 800efa4:	00d2      	lsls	r2, r2, #3
 800efa6:	588a      	ldr	r2, [r1, r2]
 800efa8:	7b19      	ldrb	r1, [r3, #12]
 800efaa:	23dc      	movs	r3, #220	; 0xdc
 800efac:	54d1      	strb	r1, [r2, r3]
            break;
 800efae:	e079      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800efb0:	4a42      	ldr	r2, [pc, #264]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x8fc>)
 800efb2:	238e      	movs	r3, #142	; 0x8e
 800efb4:	00db      	lsls	r3, r3, #3
 800efb6:	58d2      	ldr	r2, [r2, r3]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6859      	ldr	r1, [r3, #4]
 800efbc:	2384      	movs	r3, #132	; 0x84
 800efbe:	005b      	lsls	r3, r3, #1
 800efc0:	50d1      	str	r1, [r2, r3]
            break;
 800efc2:	e06f      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800efc4:	4a3d      	ldr	r2, [pc, #244]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x8fc>)
 800efc6:	238e      	movs	r3, #142	; 0x8e
 800efc8:	00db      	lsls	r3, r3, #3
 800efca:	58d3      	ldr	r3, [r2, r3]
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	6852      	ldr	r2, [r2, #4]
 800efd0:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 800efd2:	e067      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d009      	beq.n	800eff0 <LoRaMacMibSetRequestConfirm+0x830>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	2217      	movs	r2, #23
 800efe2:	18bc      	adds	r4, r7, r2
 800efe4:	0018      	movs	r0, r3
 800efe6:	f7fe fb53 	bl	800d690 <RestoreCtxs>
 800efea:	0003      	movs	r3, r0
 800efec:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800efee:	e059      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eff0:	2317      	movs	r3, #23
 800eff2:	18fb      	adds	r3, r7, r3
 800eff4:	2203      	movs	r2, #3
 800eff6:	701a      	strb	r2, [r3, #0]
            break;
 800eff8:	e054      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	799b      	ldrb	r3, [r3, #6]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d811      	bhi.n	800f026 <LoRaMacMibSetRequestConfirm+0x866>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800f002:	4a2e      	ldr	r2, [pc, #184]	; (800f0bc <LoRaMacMibSetRequestConfirm+0x8fc>)
 800f004:	238e      	movs	r3, #142	; 0x8e
 800f006:	00db      	lsls	r3, r3, #3
 800f008:	58d1      	ldr	r1, [r2, r3]
 800f00a:	2388      	movs	r3, #136	; 0x88
 800f00c:	009a      	lsls	r2, r3, #2
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	0018      	movs	r0, r3
 800f01a:	f002 f9b1 	bl	8011380 <LoRaMacCryptoSetLrWanVersion>
 800f01e:	1e03      	subs	r3, r0, #0
 800f020:	d03f      	beq.n	800f0a2 <LoRaMacMibSetRequestConfirm+0x8e2>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f022:	2311      	movs	r3, #17
 800f024:	e045      	b.n	800f0b2 <LoRaMacMibSetRequestConfirm+0x8f2>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f026:	2317      	movs	r3, #23
 800f028:	18fb      	adds	r3, r7, r3
 800f02a:	2203      	movs	r2, #3
 800f02c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f02e:	e038      	b.n	800f0a2 <LoRaMacMibSetRequestConfirm+0x8e2>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800f030:	2317      	movs	r3, #23
 800f032:	18fc      	adds	r4, r7, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	0018      	movs	r0, r3
 800f038:	f000 fcf9 	bl	800fa2e <LoRaMacMibClassBSetRequestConfirm>
 800f03c:	0003      	movs	r3, r0
 800f03e:	7023      	strb	r3, [r4, #0]
            break;
 800f040:	e030      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f042:	46c0      	nop			; (mov r8, r8)
 800f044:	e02e      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f046:	46c0      	nop			; (mov r8, r8)
 800f048:	e02c      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f04a:	46c0      	nop			; (mov r8, r8)
 800f04c:	e02a      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f04e:	46c0      	nop			; (mov r8, r8)
 800f050:	e028      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f052:	46c0      	nop			; (mov r8, r8)
 800f054:	e026      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f056:	46c0      	nop			; (mov r8, r8)
 800f058:	e024      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f05a:	46c0      	nop			; (mov r8, r8)
 800f05c:	e022      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f05e:	46c0      	nop			; (mov r8, r8)
 800f060:	e020      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f062:	46c0      	nop			; (mov r8, r8)
 800f064:	e01e      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f066:	46c0      	nop			; (mov r8, r8)
 800f068:	e01c      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f06a:	46c0      	nop			; (mov r8, r8)
 800f06c:	e01a      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f06e:	46c0      	nop			; (mov r8, r8)
 800f070:	e018      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f072:	46c0      	nop			; (mov r8, r8)
 800f074:	e016      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f076:	46c0      	nop			; (mov r8, r8)
 800f078:	e014      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f07a:	46c0      	nop			; (mov r8, r8)
 800f07c:	e012      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f07e:	46c0      	nop			; (mov r8, r8)
 800f080:	e010      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f082:	46c0      	nop			; (mov r8, r8)
 800f084:	e00e      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f086:	46c0      	nop			; (mov r8, r8)
 800f088:	e00c      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f08a:	46c0      	nop			; (mov r8, r8)
 800f08c:	e00a      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f08e:	46c0      	nop			; (mov r8, r8)
 800f090:	e008      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f092:	46c0      	nop			; (mov r8, r8)
 800f094:	e006      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f096:	46c0      	nop			; (mov r8, r8)
 800f098:	e004      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f09a:	46c0      	nop			; (mov r8, r8)
 800f09c:	e002      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f09e:	46c0      	nop			; (mov r8, r8)
 800f0a0:	e000      	b.n	800f0a4 <LoRaMacMibSetRequestConfirm+0x8e4>
            break;
 800f0a2:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 800f0a4:	f7fe fd4a 	bl	800db3c <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800f0a8:	f7fe fd40 	bl	800db2c <EventMacNvmCtxChanged>
    return status;
 800f0ac:	2317      	movs	r3, #23
 800f0ae:	18fb      	adds	r3, r7, r3
 800f0b0:	781b      	ldrb	r3, [r3, #0]
}
 800f0b2:	0018      	movs	r0, r3
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	b007      	add	sp, #28
 800f0b8:	bd90      	pop	{r4, r7, pc}
 800f0ba:	46c0      	nop			; (mov r8, r8)
 800f0bc:	20000598 	.word	0x20000598

0800f0c0 <LoRaMacChannelAdd>:

LoRaMacStatus_t LoRaMacChannelAdd( uint8_t id, ChannelParams_t params )
{
 800f0c0:	b590      	push	{r4, r7, lr}
 800f0c2:	b087      	sub	sp, #28
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	0004      	movs	r4, r0
 800f0c8:	0038      	movs	r0, r7
 800f0ca:	6001      	str	r1, [r0, #0]
 800f0cc:	6042      	str	r2, [r0, #4]
 800f0ce:	6083      	str	r3, [r0, #8]
 800f0d0:	230f      	movs	r3, #15
 800f0d2:	18fb      	adds	r3, r7, r3
 800f0d4:	1c22      	adds	r2, r4, #0
 800f0d6:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;

    // Validate if the MAC is in a correct state
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f0d8:	4a14      	ldr	r2, [pc, #80]	; (800f12c <LoRaMacChannelAdd+0x6c>)
 800f0da:	23d5      	movs	r3, #213	; 0xd5
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	58d3      	ldr	r3, [r2, r3]
 800f0e0:	2202      	movs	r2, #2
 800f0e2:	4013      	ands	r3, r2
 800f0e4:	d008      	beq.n	800f0f8 <LoRaMacChannelAdd+0x38>
    {
        if( ( MacCtx.MacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG )
 800f0e6:	4a11      	ldr	r2, [pc, #68]	; (800f12c <LoRaMacChannelAdd+0x6c>)
 800f0e8:	23d5      	movs	r3, #213	; 0xd5
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	58d3      	ldr	r3, [r2, r3]
 800f0ee:	2240      	movs	r2, #64	; 0x40
 800f0f0:	4013      	ands	r3, r2
 800f0f2:	d101      	bne.n	800f0f8 <LoRaMacChannelAdd+0x38>
        {
            return LORAMAC_STATUS_BUSY;
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e015      	b.n	800f124 <LoRaMacChannelAdd+0x64>
        }
    }

    channelAdd.NewChannel = &params;
 800f0f8:	2410      	movs	r4, #16
 800f0fa:	193b      	adds	r3, r7, r4
 800f0fc:	003a      	movs	r2, r7
 800f0fe:	601a      	str	r2, [r3, #0]
    channelAdd.ChannelId = id;
 800f100:	193b      	adds	r3, r7, r4
 800f102:	220f      	movs	r2, #15
 800f104:	18ba      	adds	r2, r7, r2
 800f106:	7812      	ldrb	r2, [r2, #0]
 800f108:	711a      	strb	r2, [r3, #4]

    EventRegionNvmCtxChanged( );
 800f10a:	f7fe fd17 	bl	800db3c <EventRegionNvmCtxChanged>
    return RegionChannelAdd( MacCtx.NvmCtx->Region, &channelAdd );
 800f10e:	4a07      	ldr	r2, [pc, #28]	; (800f12c <LoRaMacChannelAdd+0x6c>)
 800f110:	238e      	movs	r3, #142	; 0x8e
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	58d3      	ldr	r3, [r2, r3]
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	193a      	adds	r2, r7, r4
 800f11a:	0011      	movs	r1, r2
 800f11c:	0018      	movs	r0, r3
 800f11e:	f003 fdb7 	bl	8012c90 <RegionChannelAdd>
 800f122:	0003      	movs	r3, r0
}
 800f124:	0018      	movs	r0, r3
 800f126:	46bd      	mov	sp, r7
 800f128:	b007      	add	sp, #28
 800f12a:	bd90      	pop	{r4, r7, pc}
 800f12c:	20000598 	.word	0x20000598

0800f130 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f130:	b5b0      	push	{r4, r5, r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f138:	2317      	movs	r3, #23
 800f13a:	18fb      	adds	r3, r7, r3
 800f13c:	2202      	movs	r2, #2
 800f13e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f140:	210c      	movs	r1, #12
 800f142:	187b      	adds	r3, r7, r1
 800f144:	2200      	movs	r2, #0
 800f146:	701a      	strb	r2, [r3, #0]
 800f148:	187b      	adds	r3, r7, r1
 800f14a:	2200      	movs	r2, #0
 800f14c:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d101      	bne.n	800f158 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f154:	2303      	movs	r3, #3
 800f156:	e14c      	b.n	800f3f2 <LoRaMacMlmeRequest+0x2c2>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
 800f158:	f7fb ff6a 	bl	800b030 <LoRaMacIsBusy>
 800f15c:	0003      	movs	r3, r0
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d101      	bne.n	800f166 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 800f162:	2301      	movs	r3, #1
 800f164:	e145      	b.n	800f3f2 <LoRaMacMlmeRequest+0x2c2>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f166:	f001 f97f 	bl	8010468 <LoRaMacConfirmQueueIsFull>
 800f16a:	1e03      	subs	r3, r0, #0
 800f16c:	d001      	beq.n	800f172 <LoRaMacMlmeRequest+0x42>
    {
        return LORAMAC_STATUS_BUSY;
 800f16e:	2301      	movs	r3, #1
 800f170:	e13f      	b.n	800f3f2 <LoRaMacMlmeRequest+0x2c2>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f172:	f001 f96f 	bl	8010454 <LoRaMacConfirmQueueGetCnt>
 800f176:	1e03      	subs	r3, r0, #0
 800f178:	d105      	bne.n	800f186 <LoRaMacMlmeRequest+0x56>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f17a:	4ba0      	ldr	r3, [pc, #640]	; (800f3fc <LoRaMacMlmeRequest+0x2cc>)
 800f17c:	2214      	movs	r2, #20
 800f17e:	2100      	movs	r1, #0
 800f180:	0018      	movs	r0, r3
 800f182:	f006 f9ad 	bl	80154e0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f186:	4b9e      	ldr	r3, [pc, #632]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f188:	4a9e      	ldr	r2, [pc, #632]	; (800f404 <LoRaMacMlmeRequest+0x2d4>)
 800f18a:	2101      	movs	r1, #1
 800f18c:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f18e:	4b9c      	ldr	r3, [pc, #624]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f190:	4a9d      	ldr	r2, [pc, #628]	; (800f408 <LoRaMacMlmeRequest+0x2d8>)
 800f192:	5c99      	ldrb	r1, [r3, r2]
 800f194:	2004      	movs	r0, #4
 800f196:	4301      	orrs	r1, r0
 800f198:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	781a      	ldrb	r2, [r3, #0]
 800f19e:	2110      	movs	r1, #16
 800f1a0:	187b      	adds	r3, r7, r1
 800f1a2:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1a4:	187b      	adds	r3, r7, r1
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800f1aa:	187b      	adds	r3, r7, r1
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b0d      	cmp	r3, #13
 800f1b6:	d900      	bls.n	800f1ba <LoRaMacMlmeRequest+0x8a>
 800f1b8:	e0ef      	b.n	800f39a <LoRaMacMlmeRequest+0x26a>
 800f1ba:	009a      	lsls	r2, r3, #2
 800f1bc:	4b93      	ldr	r3, [pc, #588]	; (800f40c <LoRaMacMlmeRequest+0x2dc>)
 800f1be:	18d3      	adds	r3, r2, r3
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f1c4:	4a8e      	ldr	r2, [pc, #568]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f1c6:	23d5      	movs	r3, #213	; 0xd5
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	58d3      	ldr	r3, [r2, r3]
 800f1cc:	2220      	movs	r2, #32
 800f1ce:	4013      	ands	r3, r2
 800f1d0:	d001      	beq.n	800f1d6 <LoRaMacMlmeRequest+0xa6>
            {
                return LORAMAC_STATUS_BUSY;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e10d      	b.n	800f3f2 <LoRaMacMlmeRequest+0x2c2>
            }

            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d003      	beq.n	800f1e6 <LoRaMacMlmeRequest+0xb6>
                ( mlmeRequest->Req.Join.JoinEui == NULL ) )
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	689b      	ldr	r3, [r3, #8]
            if( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <LoRaMacMlmeRequest+0xba>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	e103      	b.n	800f3f2 <LoRaMacMlmeRequest+0x2c2>
            }

            MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800f1ea:	4a85      	ldr	r2, [pc, #532]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f1ec:	238e      	movs	r3, #142	; 0x8e
 800f1ee:	00db      	lsls	r3, r3, #3
 800f1f0:	58d2      	ldr	r2, [r2, r3]
 800f1f2:	2389      	movs	r3, #137	; 0x89
 800f1f4:	009b      	lsls	r3, r3, #2
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	54d1      	strb	r1, [r2, r3]

            ResetMacParameters( );
 800f1fa:	f7fd fe5b 	bl	800ceb4 <ResetMacParameters>

            MacCtx.DevEui = mlmeRequest->Req.Join.DevEui;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	685a      	ldr	r2, [r3, #4]
 800f202:	4b7f      	ldr	r3, [pc, #508]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f204:	601a      	str	r2, [r3, #0]
            MacCtx.JoinEui = mlmeRequest->Req.Join.JoinEui;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	689a      	ldr	r2, [r3, #8]
 800f20a:	4b7d      	ldr	r3, [pc, #500]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f20c:	605a      	str	r2, [r3, #4]

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f20e:	4a7c      	ldr	r2, [pc, #496]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f210:	238e      	movs	r3, #142	; 0x8e
 800f212:	00db      	lsls	r3, r3, #3
 800f214:	58d3      	ldr	r3, [r2, r3]
 800f216:	7818      	ldrb	r0, [r3, #0]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	7b1b      	ldrb	r3, [r3, #12]
 800f21c:	b259      	sxtb	r1, r3
 800f21e:	4a78      	ldr	r2, [pc, #480]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f220:	238e      	movs	r3, #142	; 0x8e
 800f222:	00db      	lsls	r3, r3, #3
 800f224:	58d4      	ldr	r4, [r2, r3]
 800f226:	2200      	movs	r2, #0
 800f228:	f003 fcdf 	bl	8012bea <RegionAlternateDr>
 800f22c:	0003      	movs	r3, r0
 800f22e:	001a      	movs	r2, r3
 800f230:	23d5      	movs	r3, #213	; 0xd5
 800f232:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f234:	2310      	movs	r3, #16
 800f236:	18fb      	adds	r3, r7, r3
 800f238:	2207      	movs	r2, #7
 800f23a:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 800f23c:	2517      	movs	r5, #23
 800f23e:	197c      	adds	r4, r7, r5
 800f240:	20ff      	movs	r0, #255	; 0xff
 800f242:	f7fd fb61 	bl	800c908 <SendReJoinReq>
 800f246:	0003      	movs	r3, r0
 800f248:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 800f24a:	197b      	adds	r3, r7, r5
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d100      	bne.n	800f254 <LoRaMacMlmeRequest+0x124>
 800f252:	e0a4      	b.n	800f39e <LoRaMacMlmeRequest+0x26e>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f254:	4a6a      	ldr	r2, [pc, #424]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f256:	238e      	movs	r3, #142	; 0x8e
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	58d3      	ldr	r3, [r2, r3]
 800f25c:	7818      	ldrb	r0, [r3, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	7b1b      	ldrb	r3, [r3, #12]
 800f262:	b259      	sxtb	r1, r3
 800f264:	4a66      	ldr	r2, [pc, #408]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f266:	238e      	movs	r3, #142	; 0x8e
 800f268:	00db      	lsls	r3, r3, #3
 800f26a:	58d4      	ldr	r4, [r2, r3]
 800f26c:	2201      	movs	r2, #1
 800f26e:	f003 fcbc 	bl	8012bea <RegionAlternateDr>
 800f272:	0003      	movs	r3, r0
 800f274:	001a      	movs	r2, r3
 800f276:	23d5      	movs	r3, #213	; 0xd5
 800f278:	54e2      	strb	r2, [r4, r3]
            }
            break;
 800f27a:	e090      	b.n	800f39e <LoRaMacMlmeRequest+0x26e>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f27c:	2317      	movs	r3, #23
 800f27e:	18fb      	adds	r3, r7, r3
 800f280:	2200      	movs	r2, #0
 800f282:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f284:	230c      	movs	r3, #12
 800f286:	18fb      	adds	r3, r7, r3
 800f288:	2200      	movs	r2, #0
 800f28a:	0019      	movs	r1, r3
 800f28c:	2002      	movs	r0, #2
 800f28e:	f000 fd7b 	bl	800fd88 <LoRaMacCommandsAddCmd>
 800f292:	1e03      	subs	r3, r0, #0
 800f294:	d100      	bne.n	800f298 <LoRaMacMlmeRequest+0x168>
 800f296:	e084      	b.n	800f3a2 <LoRaMacMlmeRequest+0x272>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f298:	2317      	movs	r3, #23
 800f29a:	18fb      	adds	r3, r7, r3
 800f29c:	2213      	movs	r2, #19
 800f29e:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f2a0:	e07f      	b.n	800f3a2 <LoRaMacMlmeRequest+0x272>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	889b      	ldrh	r3, [r3, #4]
 800f2a6:	2217      	movs	r2, #23
 800f2a8:	18bc      	adds	r4, r7, r2
 800f2aa:	0018      	movs	r0, r3
 800f2ac:	f7fe f918 	bl	800d4e0 <SetTxContinuousWave>
 800f2b0:	0003      	movs	r3, r0
 800f2b2:	7023      	strb	r3, [r4, #0]
            break;
 800f2b4:	e07c      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	8898      	ldrh	r0, [r3, #4]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6899      	ldr	r1, [r3, #8]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	7b1b      	ldrb	r3, [r3, #12]
 800f2c2:	2217      	movs	r2, #23
 800f2c4:	18bc      	adds	r4, r7, r2
 800f2c6:	001a      	movs	r2, r3
 800f2c8:	f7fe f95c 	bl	800d584 <SetTxContinuousWave1>
 800f2cc:	0003      	movs	r3, r0
 800f2ce:	7023      	strb	r3, [r4, #0]
            break;
 800f2d0:	e06e      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f2d2:	2317      	movs	r3, #23
 800f2d4:	18fb      	adds	r3, r7, r3
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f2da:	230c      	movs	r3, #12
 800f2dc:	18fb      	adds	r3, r7, r3
 800f2de:	2200      	movs	r2, #0
 800f2e0:	0019      	movs	r1, r3
 800f2e2:	200d      	movs	r0, #13
 800f2e4:	f000 fd50 	bl	800fd88 <LoRaMacCommandsAddCmd>
 800f2e8:	1e03      	subs	r3, r0, #0
 800f2ea:	d05c      	beq.n	800f3a6 <LoRaMacMlmeRequest+0x276>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f2ec:	2317      	movs	r3, #23
 800f2ee:	18fb      	adds	r3, r7, r3
 800f2f0:	2213      	movs	r2, #19
 800f2f2:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f2f4:	e057      	b.n	800f3a6 <LoRaMacMlmeRequest+0x276>
        }
        case MLME_PING_SLOT_INFO:
        {
            uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f2f6:	2416      	movs	r4, #22
 800f2f8:	193b      	adds	r3, r7, r4
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	7912      	ldrb	r2, [r2, #4]
 800f2fe:	701a      	strb	r2, [r3, #0]

            // LoRaMac will send this command piggy-pack
            LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	791b      	ldrb	r3, [r3, #4]
 800f304:	075b      	lsls	r3, r3, #29
 800f306:	0f5b      	lsrs	r3, r3, #29
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	0018      	movs	r0, r3
 800f30c:	f000 fb67 	bl	800f9de <LoRaMacClassBSetPingSlotInfo>
            macCmdPayload[0] = value;
 800f310:	210c      	movs	r1, #12
 800f312:	187b      	adds	r3, r7, r1
 800f314:	193a      	adds	r2, r7, r4
 800f316:	7812      	ldrb	r2, [r2, #0]
 800f318:	701a      	strb	r2, [r3, #0]
            status = LORAMAC_STATUS_OK;
 800f31a:	2317      	movs	r3, #23
 800f31c:	18fb      	adds	r3, r7, r3
 800f31e:	2200      	movs	r2, #0
 800f320:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f322:	187b      	adds	r3, r7, r1
 800f324:	2201      	movs	r2, #1
 800f326:	0019      	movs	r1, r3
 800f328:	2010      	movs	r0, #16
 800f32a:	f000 fd2d 	bl	800fd88 <LoRaMacCommandsAddCmd>
 800f32e:	1e03      	subs	r3, r0, #0
 800f330:	d03b      	beq.n	800f3aa <LoRaMacMlmeRequest+0x27a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f332:	2317      	movs	r3, #23
 800f334:	18fb      	adds	r3, r7, r3
 800f336:	2213      	movs	r2, #19
 800f338:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f33a:	e036      	b.n	800f3aa <LoRaMacMlmeRequest+0x27a>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f33c:	2317      	movs	r3, #23
 800f33e:	18fb      	adds	r3, r7, r3
 800f340:	2200      	movs	r2, #0
 800f342:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f344:	230c      	movs	r3, #12
 800f346:	18fb      	adds	r3, r7, r3
 800f348:	2200      	movs	r2, #0
 800f34a:	0019      	movs	r1, r3
 800f34c:	2012      	movs	r0, #18
 800f34e:	f000 fd1b 	bl	800fd88 <LoRaMacCommandsAddCmd>
 800f352:	1e03      	subs	r3, r0, #0
 800f354:	d02b      	beq.n	800f3ae <LoRaMacMlmeRequest+0x27e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f356:	2317      	movs	r3, #23
 800f358:	18fb      	adds	r3, r7, r3
 800f35a:	2213      	movs	r2, #19
 800f35c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f35e:	e026      	b.n	800f3ae <LoRaMacMlmeRequest+0x27e>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800f360:	2310      	movs	r3, #16
 800f362:	18fb      	adds	r3, r7, r3
 800f364:	2201      	movs	r2, #1
 800f366:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f368:	f000 faf7 	bl	800f95a <LoRaMacClassBIsAcquisitionInProgress>
 800f36c:	0003      	movs	r3, r0
 800f36e:	001a      	movs	r2, r3
 800f370:	2301      	movs	r3, #1
 800f372:	4053      	eors	r3, r2
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00a      	beq.n	800f390 <LoRaMacMlmeRequest+0x260>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f37a:	2000      	movs	r0, #0
 800f37c:	f000 facf 	bl	800f91e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f380:	2000      	movs	r0, #0
 800f382:	f000 faf0 	bl	800f966 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800f386:	2317      	movs	r3, #23
 800f388:	18fb      	adds	r3, r7, r3
 800f38a:	2200      	movs	r2, #0
 800f38c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800f38e:	e00f      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
                status = LORAMAC_STATUS_BUSY;
 800f390:	2317      	movs	r3, #23
 800f392:	18fb      	adds	r3, r7, r3
 800f394:	2201      	movs	r2, #1
 800f396:	701a      	strb	r2, [r3, #0]
            break;
 800f398:	e00a      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
        }
        default:
            break;
 800f39a:	46c0      	nop			; (mov r8, r8)
 800f39c:	e008      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
            break;
 800f39e:	46c0      	nop			; (mov r8, r8)
 800f3a0:	e006      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
            break;
 800f3a2:	46c0      	nop			; (mov r8, r8)
 800f3a4:	e004      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
            break;
 800f3a6:	46c0      	nop			; (mov r8, r8)
 800f3a8:	e002      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
            break;
 800f3aa:	46c0      	nop			; (mov r8, r8)
 800f3ac:	e000      	b.n	800f3b0 <LoRaMacMlmeRequest+0x280>
            break;
 800f3ae:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 800f3b0:	2317      	movs	r3, #23
 800f3b2:	18fb      	adds	r3, r7, r3
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d011      	beq.n	800f3de <LoRaMacMlmeRequest+0x2ae>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f3ba:	f001 f84b 	bl	8010454 <LoRaMacConfirmQueueGetCnt>
 800f3be:	1e03      	subs	r3, r0, #0
 800f3c0:	d114      	bne.n	800f3ec <LoRaMacMlmeRequest+0x2bc>
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
 800f3c2:	4a0f      	ldr	r2, [pc, #60]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f3c4:	238e      	movs	r3, #142	; 0x8e
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	58d3      	ldr	r3, [r2, r3]
 800f3ca:	4a11      	ldr	r2, [pc, #68]	; (800f410 <LoRaMacMlmeRequest+0x2e0>)
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f3d0:	4b0b      	ldr	r3, [pc, #44]	; (800f400 <LoRaMacMlmeRequest+0x2d0>)
 800f3d2:	4a0d      	ldr	r2, [pc, #52]	; (800f408 <LoRaMacMlmeRequest+0x2d8>)
 800f3d4:	5c99      	ldrb	r1, [r3, r2]
 800f3d6:	2004      	movs	r0, #4
 800f3d8:	4381      	bics	r1, r0
 800f3da:	5499      	strb	r1, [r3, r2]
 800f3dc:	e006      	b.n	800f3ec <LoRaMacMlmeRequest+0x2bc>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800f3de:	2310      	movs	r3, #16
 800f3e0:	18fb      	adds	r3, r7, r3
 800f3e2:	0018      	movs	r0, r3
 800f3e4:	f000 feda 	bl	801019c <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800f3e8:	f7fe fba0 	bl	800db2c <EventMacNvmCtxChanged>
    }
    return status;
 800f3ec:	2317      	movs	r3, #23
 800f3ee:	18fb      	adds	r3, r7, r3
 800f3f0:	781b      	ldrb	r3, [r3, #0]
}
 800f3f2:	0018      	movs	r0, r3
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	b006      	add	sp, #24
 800f3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800f3fa:	46c0      	nop			; (mov r8, r8)
 800f3fc:	200009d8 	.word	0x200009d8
 800f400:	20000598 	.word	0x20000598
 800f404:	00000441 	.word	0x00000441
 800f408:	0000046d 	.word	0x0000046d
 800f40c:	08020874 	.word	0x08020874
 800f410:	00000219 	.word	0x00000219

0800f414 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800f414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f416:	b08b      	sub	sp, #44	; 0x2c
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f41c:	2327      	movs	r3, #39	; 0x27
 800f41e:	18fb      	adds	r3, r7, r3
 800f420:	2202      	movs	r2, #2
 800f422:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800f424:	2326      	movs	r3, #38	; 0x26
 800f426:	18fb      	adds	r3, r7, r3
 800f428:	2200      	movs	r2, #0
 800f42a:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800f42c:	231d      	movs	r3, #29
 800f42e:	18fb      	adds	r3, r7, r3
 800f430:	2200      	movs	r2, #0
 800f432:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 800f434:	231c      	movs	r3, #28
 800f436:	18fb      	adds	r3, r7, r3
 800f438:	2200      	movs	r2, #0
 800f43a:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d101      	bne.n	800f446 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f442:	2303      	movs	r3, #3
 800f444:	e122      	b.n	800f68c <LoRaMacMcpsRequest+0x278>
    }
    if( LoRaMacIsBusy( ) == LORAMAC_TRUE )
 800f446:	f7fb fdf3 	bl	800b030 <LoRaMacIsBusy>
 800f44a:	0003      	movs	r3, r0
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d101      	bne.n	800f454 <LoRaMacMcpsRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
 800f450:	2301      	movs	r3, #1
 800f452:	e11b      	b.n	800f68c <LoRaMacMcpsRequest+0x278>
    }

    macHdr.Value = 0;
 800f454:	2310      	movs	r3, #16
 800f456:	18fb      	adds	r3, r7, r3
 800f458:	2200      	movs	r2, #0
 800f45a:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f45c:	4b8d      	ldr	r3, [pc, #564]	; (800f694 <LoRaMacMcpsRequest+0x280>)
 800f45e:	2214      	movs	r2, #20
 800f460:	2100      	movs	r1, #0
 800f462:	0018      	movs	r0, r3
 800f464:	f006 f83c 	bl	80154e0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f468:	4b8b      	ldr	r3, [pc, #556]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f46a:	4a8c      	ldr	r2, [pc, #560]	; (800f69c <LoRaMacMcpsRequest+0x288>)
 800f46c:	2101      	movs	r1, #1
 800f46e:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.NvmCtx->AckTimeoutRetriesCounter = 1;
 800f470:	4a89      	ldr	r2, [pc, #548]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f472:	238e      	movs	r3, #142	; 0x8e
 800f474:	00db      	lsls	r3, r3, #3
 800f476:	58d3      	ldr	r3, [r2, r3]
 800f478:	4a89      	ldr	r2, [pc, #548]	; (800f6a0 <LoRaMacMcpsRequest+0x28c>)
 800f47a:	2101      	movs	r1, #1
 800f47c:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b01      	cmp	r3, #1
 800f484:	d02b      	beq.n	800f4de <LoRaMacMcpsRequest+0xca>
 800f486:	2b03      	cmp	r3, #3
 800f488:	d052      	beq.n	800f530 <LoRaMacMcpsRequest+0x11c>
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d000      	beq.n	800f490 <LoRaMacMcpsRequest+0x7c>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800f48e:	e06f      	b.n	800f570 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800f490:	231c      	movs	r3, #28
 800f492:	18fb      	adds	r3, r7, r3
 800f494:	2201      	movs	r2, #1
 800f496:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800f498:	4a7f      	ldr	r2, [pc, #508]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f49a:	238e      	movs	r3, #142	; 0x8e
 800f49c:	00db      	lsls	r3, r3, #3
 800f49e:	58d3      	ldr	r3, [r2, r3]
 800f4a0:	4a80      	ldr	r2, [pc, #512]	; (800f6a4 <LoRaMacMcpsRequest+0x290>)
 800f4a2:	2101      	movs	r1, #1
 800f4a4:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800f4a6:	2310      	movs	r3, #16
 800f4a8:	18fb      	adds	r3, r7, r3
 800f4aa:	781a      	ldrb	r2, [r3, #0]
 800f4ac:	211f      	movs	r1, #31
 800f4ae:	400a      	ands	r2, r1
 800f4b0:	1c11      	adds	r1, r2, #0
 800f4b2:	2240      	movs	r2, #64	; 0x40
 800f4b4:	430a      	orrs	r2, r1
 800f4b6:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800f4b8:	2326      	movs	r3, #38	; 0x26
 800f4ba:	18fb      	adds	r3, r7, r3
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	7912      	ldrb	r2, [r2, #4]
 800f4c0:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800f4c8:	231e      	movs	r3, #30
 800f4ca:	18fb      	adds	r3, r7, r3
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	8992      	ldrh	r2, [r2, #12]
 800f4d0:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800f4d2:	231d      	movs	r3, #29
 800f4d4:	18fb      	adds	r3, r7, r3
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	7b92      	ldrb	r2, [r2, #14]
 800f4da:	701a      	strb	r2, [r3, #0]
            break;
 800f4dc:	e048      	b.n	800f570 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800f4de:	231c      	movs	r3, #28
 800f4e0:	18fb      	adds	r3, r7, r3
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 800f4e6:	4a6c      	ldr	r2, [pc, #432]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f4e8:	238e      	movs	r3, #142	; 0x8e
 800f4ea:	00db      	lsls	r3, r3, #3
 800f4ec:	58d3      	ldr	r3, [r2, r3]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	7bd1      	ldrb	r1, [r2, #15]
 800f4f2:	4a6c      	ldr	r2, [pc, #432]	; (800f6a4 <LoRaMacMcpsRequest+0x290>)
 800f4f4:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800f4f6:	2310      	movs	r3, #16
 800f4f8:	18fb      	adds	r3, r7, r3
 800f4fa:	781a      	ldrb	r2, [r3, #0]
 800f4fc:	211f      	movs	r1, #31
 800f4fe:	400a      	ands	r2, r1
 800f500:	1c11      	adds	r1, r2, #0
 800f502:	2280      	movs	r2, #128	; 0x80
 800f504:	4252      	negs	r2, r2
 800f506:	430a      	orrs	r2, r1
 800f508:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800f50a:	2326      	movs	r3, #38	; 0x26
 800f50c:	18fb      	adds	r3, r7, r3
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	7912      	ldrb	r2, [r2, #4]
 800f512:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	689b      	ldr	r3, [r3, #8]
 800f518:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800f51a:	231e      	movs	r3, #30
 800f51c:	18fb      	adds	r3, r7, r3
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	8992      	ldrh	r2, [r2, #12]
 800f522:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800f524:	231d      	movs	r3, #29
 800f526:	18fb      	adds	r3, r7, r3
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	7b92      	ldrb	r2, [r2, #14]
 800f52c:	701a      	strb	r2, [r3, #0]
            break;
 800f52e:	e01f      	b.n	800f570 <LoRaMacMcpsRequest+0x15c>
            readyToSend = true;
 800f530:	231c      	movs	r3, #28
 800f532:	18fb      	adds	r3, r7, r3
 800f534:	2201      	movs	r2, #1
 800f536:	701a      	strb	r2, [r3, #0]
            MacCtx.NvmCtx->AckTimeoutRetries = 1;
 800f538:	4a57      	ldr	r2, [pc, #348]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f53a:	238e      	movs	r3, #142	; 0x8e
 800f53c:	00db      	lsls	r3, r3, #3
 800f53e:	58d3      	ldr	r3, [r2, r3]
 800f540:	4a58      	ldr	r2, [pc, #352]	; (800f6a4 <LoRaMacMcpsRequest+0x290>)
 800f542:	2101      	movs	r1, #1
 800f544:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800f546:	2310      	movs	r3, #16
 800f548:	18fb      	adds	r3, r7, r3
 800f54a:	781a      	ldrb	r2, [r3, #0]
 800f54c:	2120      	movs	r1, #32
 800f54e:	4249      	negs	r1, r1
 800f550:	430a      	orrs	r2, r1
 800f552:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800f55a:	231e      	movs	r3, #30
 800f55c:	18fb      	adds	r3, r7, r3
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	8912      	ldrh	r2, [r2, #8]
 800f562:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800f564:	231d      	movs	r3, #29
 800f566:	18fb      	adds	r3, r7, r3
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	7a92      	ldrb	r2, [r2, #10]
 800f56c:	701a      	strb	r2, [r3, #0]
            break;
 800f56e:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f570:	2118      	movs	r1, #24
 800f572:	187b      	adds	r3, r7, r1
 800f574:	2201      	movs	r2, #1
 800f576:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f578:	4a47      	ldr	r2, [pc, #284]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f57a:	238e      	movs	r3, #142	; 0x8e
 800f57c:	00db      	lsls	r3, r3, #3
 800f57e:	58d2      	ldr	r2, [r2, r3]
 800f580:	2380      	movs	r3, #128	; 0x80
 800f582:	005b      	lsls	r3, r3, #1
 800f584:	5cd2      	ldrb	r2, [r2, r3]
 800f586:	187b      	adds	r3, r7, r1
 800f588:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f58a:	4a43      	ldr	r2, [pc, #268]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f58c:	238e      	movs	r3, #142	; 0x8e
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	58d3      	ldr	r3, [r2, r3]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	187a      	adds	r2, r7, r1
 800f596:	0011      	movs	r1, r2
 800f598:	0018      	movs	r0, r3
 800f59a:	f003 f9a8 	bl	80128ee <RegionGetPhyParam>
 800f59e:	0003      	movs	r3, r0
 800f5a0:	001a      	movs	r2, r3
 800f5a2:	2114      	movs	r1, #20
 800f5a4:	187b      	adds	r3, r7, r1
 800f5a6:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f5a8:	187b      	adds	r3, r7, r1
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	b259      	sxtb	r1, r3
 800f5ae:	231d      	movs	r3, #29
 800f5b0:	18fa      	adds	r2, r7, r3
 800f5b2:	18fb      	adds	r3, r7, r3
 800f5b4:	1c0c      	adds	r4, r1, #0
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	b258      	sxtb	r0, r3
 800f5ba:	b261      	sxtb	r1, r4
 800f5bc:	4288      	cmp	r0, r1
 800f5be:	da00      	bge.n	800f5c2 <LoRaMacMcpsRequest+0x1ae>
 800f5c0:	1c23      	adds	r3, r4, #0
 800f5c2:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 800f5c4:	231c      	movs	r3, #28
 800f5c6:	18fb      	adds	r3, r7, r3
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d059      	beq.n	800f682 <LoRaMacMcpsRequest+0x26e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800f5ce:	4a32      	ldr	r2, [pc, #200]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f5d0:	238e      	movs	r3, #142	; 0x8e
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	58d3      	ldr	r3, [r2, r3]
 800f5d6:	22ca      	movs	r2, #202	; 0xca
 800f5d8:	5c9b      	ldrb	r3, [r3, r2]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	4053      	eors	r3, r2
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d027      	beq.n	800f634 <LoRaMacMcpsRequest+0x220>
        {
            verify.DatarateParams.Datarate = datarate;
 800f5e4:	210c      	movs	r1, #12
 800f5e6:	187b      	adds	r3, r7, r1
 800f5e8:	221d      	movs	r2, #29
 800f5ea:	18ba      	adds	r2, r7, r2
 800f5ec:	7812      	ldrb	r2, [r2, #0]
 800f5ee:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f5f0:	4a29      	ldr	r2, [pc, #164]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f5f2:	238e      	movs	r3, #142	; 0x8e
 800f5f4:	00db      	lsls	r3, r3, #3
 800f5f6:	58d2      	ldr	r2, [r2, r3]
 800f5f8:	2380      	movs	r3, #128	; 0x80
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	5cd2      	ldrb	r2, [r2, r3]
 800f5fe:	187b      	adds	r3, r7, r1
 800f600:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800f602:	4a25      	ldr	r2, [pc, #148]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f604:	238e      	movs	r3, #142	; 0x8e
 800f606:	00db      	lsls	r3, r3, #3
 800f608:	58d3      	ldr	r3, [r2, r3]
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	1879      	adds	r1, r7, r1
 800f60e:	2204      	movs	r2, #4
 800f610:	0018      	movs	r0, r3
 800f612:	f003 f9d3 	bl	80129bc <RegionVerify>
 800f616:	1e03      	subs	r3, r0, #0
 800f618:	d00a      	beq.n	800f630 <LoRaMacMcpsRequest+0x21c>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f61a:	4a1f      	ldr	r2, [pc, #124]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f61c:	238e      	movs	r3, #142	; 0x8e
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	58d3      	ldr	r3, [r2, r3]
 800f622:	220c      	movs	r2, #12
 800f624:	18ba      	adds	r2, r7, r2
 800f626:	2100      	movs	r1, #0
 800f628:	5651      	ldrsb	r1, [r2, r1]
 800f62a:	22d5      	movs	r2, #213	; 0xd5
 800f62c:	5499      	strb	r1, [r3, r2]
 800f62e:	e001      	b.n	800f634 <LoRaMacMcpsRequest+0x220>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f630:	2303      	movs	r3, #3
 800f632:	e02b      	b.n	800f68c <LoRaMacMcpsRequest+0x278>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800f634:	2627      	movs	r6, #39	; 0x27
 800f636:	19bc      	adds	r4, r7, r6
 800f638:	231e      	movs	r3, #30
 800f63a:	18fb      	adds	r3, r7, r3
 800f63c:	881d      	ldrh	r5, [r3, #0]
 800f63e:	6a3a      	ldr	r2, [r7, #32]
 800f640:	2326      	movs	r3, #38	; 0x26
 800f642:	18fb      	adds	r3, r7, r3
 800f644:	7819      	ldrb	r1, [r3, #0]
 800f646:	2310      	movs	r3, #16
 800f648:	18f8      	adds	r0, r7, r3
 800f64a:	002b      	movs	r3, r5
 800f64c:	f7fd f812 	bl	800c674 <Send>
 800f650:	0003      	movs	r3, r0
 800f652:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 800f654:	19bb      	adds	r3, r7, r6
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10b      	bne.n	800f674 <LoRaMacMcpsRequest+0x260>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	7819      	ldrb	r1, [r3, #0]
 800f660:	4b0d      	ldr	r3, [pc, #52]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f662:	4a11      	ldr	r2, [pc, #68]	; (800f6a8 <LoRaMacMcpsRequest+0x294>)
 800f664:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800f666:	4b0c      	ldr	r3, [pc, #48]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f668:	4a10      	ldr	r2, [pc, #64]	; (800f6ac <LoRaMacMcpsRequest+0x298>)
 800f66a:	5c99      	ldrb	r1, [r3, r2]
 800f66c:	2001      	movs	r0, #1
 800f66e:	4301      	orrs	r1, r0
 800f670:	5499      	strb	r1, [r3, r2]
 800f672:	e006      	b.n	800f682 <LoRaMacMcpsRequest+0x26e>
        }
        else
        {
            MacCtx.NvmCtx->NodeAckRequested = false;
 800f674:	4a08      	ldr	r2, [pc, #32]	; (800f698 <LoRaMacMcpsRequest+0x284>)
 800f676:	238e      	movs	r3, #142	; 0x8e
 800f678:	00db      	lsls	r3, r3, #3
 800f67a:	58d3      	ldr	r3, [r2, r3]
 800f67c:	4a0c      	ldr	r2, [pc, #48]	; (800f6b0 <LoRaMacMcpsRequest+0x29c>)
 800f67e:	2100      	movs	r1, #0
 800f680:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 800f682:	f7fe fa53 	bl	800db2c <EventMacNvmCtxChanged>
    return status;
 800f686:	2327      	movs	r3, #39	; 0x27
 800f688:	18fb      	adds	r3, r7, r3
 800f68a:	781b      	ldrb	r3, [r3, #0]
}
 800f68c:	0018      	movs	r0, r3
 800f68e:	46bd      	mov	sp, r7
 800f690:	b00b      	add	sp, #44	; 0x2c
 800f692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f694:	200009c4 	.word	0x200009c4
 800f698:	20000598 	.word	0x20000598
 800f69c:	0000042d 	.word	0x0000042d
 800f6a0:	00000217 	.word	0x00000217
 800f6a4:	00000216 	.word	0x00000216
 800f6a8:	0000042c 	.word	0x0000042c
 800f6ac:	0000046d 	.word	0x0000046d
 800f6b0:	00000219 	.word	0x00000219

0800f6b4 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	0002      	movs	r2, r0
 800f6bc:	1dfb      	adds	r3, r7, #7
 800f6be:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800f6c0:	210c      	movs	r1, #12
 800f6c2:	187b      	adds	r3, r7, r1
 800f6c4:	1dfa      	adds	r2, r7, #7
 800f6c6:	7812      	ldrb	r2, [r2, #0]
 800f6c8:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800f6ca:	4a0c      	ldr	r2, [pc, #48]	; (800f6fc <LoRaMacTestSetDutyCycleOn+0x48>)
 800f6cc:	238e      	movs	r3, #142	; 0x8e
 800f6ce:	00db      	lsls	r3, r3, #3
 800f6d0:	58d3      	ldr	r3, [r2, r3]
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	1879      	adds	r1, r7, r1
 800f6d6:	220e      	movs	r2, #14
 800f6d8:	0018      	movs	r0, r3
 800f6da:	f003 f96f 	bl	80129bc <RegionVerify>
 800f6de:	1e03      	subs	r3, r0, #0
 800f6e0:	d008      	beq.n	800f6f4 <LoRaMacTestSetDutyCycleOn+0x40>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800f6e2:	4a06      	ldr	r2, [pc, #24]	; (800f6fc <LoRaMacTestSetDutyCycleOn+0x48>)
 800f6e4:	238e      	movs	r3, #142	; 0x8e
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	58d2      	ldr	r2, [r2, r3]
 800f6ea:	1df9      	adds	r1, r7, #7
 800f6ec:	2389      	movs	r3, #137	; 0x89
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	7809      	ldrb	r1, [r1, #0]
 800f6f2:	54d1      	strb	r1, [r2, r3]
    }
}
 800f6f4:	46c0      	nop			; (mov r8, r8)
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	b004      	add	sp, #16
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	20000598 	.word	0x20000598

0800f700 <CalcNextV10X>:

#include <drivers/lorawan/mac/region/Region.h>
#include <drivers/lorawan/mac/LoRaMacAdr.h>

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800f700:	b590      	push	{r4, r7, lr}
 800f702:	b08b      	sub	sp, #44	; 0x2c
 800f704:	af00      	add	r7, sp, #0
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
 800f70c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800f70e:	2327      	movs	r3, #39	; 0x27
 800f710:	18fb      	adds	r3, r7, r3
 800f712:	2200      	movs	r2, #0
 800f714:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 800f716:	2326      	movs	r3, #38	; 0x26
 800f718:	18fb      	adds	r3, r7, r3
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	7c12      	ldrb	r2, [r2, #16]
 800f71e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 800f720:	2325      	movs	r3, #37	; 0x25
 800f722:	18fb      	adds	r3, r7, r3
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	7c52      	ldrb	r2, [r2, #17]
 800f728:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	689a      	ldr	r2, [r3, #8]
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	795b      	ldrb	r3, [r3, #5]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d100      	bne.n	800f73c <CalcNextV10X+0x3c>
 800f73a:	e0a8      	b.n	800f88e <CalcNextV10X+0x18e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800f73c:	2120      	movs	r1, #32
 800f73e:	187b      	adds	r3, r7, r1
 800f740:	2201      	movs	r2, #1
 800f742:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	7c9a      	ldrb	r2, [r3, #18]
 800f748:	187b      	adds	r3, r7, r1
 800f74a:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	7cdb      	ldrb	r3, [r3, #19]
 800f750:	187a      	adds	r2, r7, r1
 800f752:	0011      	movs	r1, r2
 800f754:	0018      	movs	r0, r3
 800f756:	f003 f8ca 	bl	80128ee <RegionGetPhyParam>
 800f75a:	0003      	movs	r3, r0
 800f75c:	001a      	movs	r2, r3
 800f75e:	211c      	movs	r1, #28
 800f760:	187b      	adds	r3, r7, r1
 800f762:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 800f764:	187b      	adds	r3, r7, r1
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	2124      	movs	r1, #36	; 0x24
 800f76a:	187b      	adds	r3, r7, r1
 800f76c:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 800f76e:	2026      	movs	r0, #38	; 0x26
 800f770:	183a      	adds	r2, r7, r0
 800f772:	187b      	adds	r3, r7, r1
 800f774:	1839      	adds	r1, r7, r0
 800f776:	780c      	ldrb	r4, [r1, #0]
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	b258      	sxtb	r0, r3
 800f77c:	b261      	sxtb	r1, r4
 800f77e:	4288      	cmp	r0, r1
 800f780:	da00      	bge.n	800f784 <CalcNextV10X+0x84>
 800f782:	1c23      	adds	r3, r4, #0
 800f784:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 800f786:	2326      	movs	r3, #38	; 0x26
 800f788:	18fa      	adds	r2, r7, r3
 800f78a:	2324      	movs	r3, #36	; 0x24
 800f78c:	18fb      	adds	r3, r7, r3
 800f78e:	7812      	ldrb	r2, [r2, #0]
 800f790:	b252      	sxtb	r2, r2
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	b25b      	sxtb	r3, r3
 800f796:	429a      	cmp	r2, r3
 800f798:	d107      	bne.n	800f7aa <CalcNextV10X+0xaa>
        {
            *adrAckCounter = 0;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	2200      	movs	r2, #0
 800f79e:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800f7a0:	2327      	movs	r3, #39	; 0x27
 800f7a2:	18fb      	adds	r3, r7, r3
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	701a      	strb	r2, [r3, #0]
 800f7a8:	e071      	b.n	800f88e <CalcNextV10X+0x18e>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	8992      	ldrh	r2, [r2, #12]
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d319      	bcc.n	800f7ea <CalcNextV10X+0xea>
            {
                adrAckReq = true;
 800f7b6:	2327      	movs	r3, #39	; 0x27
 800f7b8:	18fb      	adds	r3, r7, r3
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	701a      	strb	r2, [r3, #0]
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800f7be:	2120      	movs	r1, #32
 800f7c0:	187b      	adds	r3, r7, r1
 800f7c2:	2207      	movs	r2, #7
 800f7c4:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	7cdb      	ldrb	r3, [r3, #19]
 800f7ca:	187a      	adds	r2, r7, r1
 800f7cc:	0011      	movs	r1, r2
 800f7ce:	0018      	movs	r0, r3
 800f7d0:	f003 f88d 	bl	80128ee <RegionGetPhyParam>
 800f7d4:	0003      	movs	r3, r0
 800f7d6:	001a      	movs	r2, r3
 800f7d8:	211c      	movs	r1, #28
 800f7da:	187b      	adds	r3, r7, r1
 800f7dc:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 800f7de:	187b      	adds	r3, r7, r1
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	2325      	movs	r3, #37	; 0x25
 800f7e4:	18fb      	adds	r3, r7, r3
 800f7e6:	701a      	strb	r2, [r3, #0]
 800f7e8:	e003      	b.n	800f7f2 <CalcNextV10X+0xf2>
            }
            else
            {
                adrAckReq = false;
 800f7ea:	2327      	movs	r3, #39	; 0x27
 800f7ec:	18fb      	adds	r3, r7, r3
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	8992      	ldrh	r2, [r2, #12]
 800f7fa:	0011      	movs	r1, r2
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	89d2      	ldrh	r2, [r2, #14]
 800f800:	188a      	adds	r2, r1, r2
 800f802:	4293      	cmp	r3, r2
 800f804:	d343      	bcc.n	800f88e <CalcNextV10X+0x18e>
            {
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	689a      	ldr	r2, [r3, #8]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	89db      	ldrh	r3, [r3, #14]
 800f80e:	0019      	movs	r1, r3
 800f810:	0010      	movs	r0, r2
 800f812:	f7f0 fd07 	bl	8000224 <__aeabi_uidivmod>
 800f816:	000b      	movs	r3, r1
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d138      	bne.n	800f88e <CalcNextV10X+0x18e>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f81c:	2120      	movs	r1, #32
 800f81e:	187b      	adds	r3, r7, r1
 800f820:	2221      	movs	r2, #33	; 0x21
 800f822:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 800f824:	187b      	adds	r3, r7, r1
 800f826:	2426      	movs	r4, #38	; 0x26
 800f828:	193a      	adds	r2, r7, r4
 800f82a:	7812      	ldrb	r2, [r2, #0]
 800f82c:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	7c9a      	ldrb	r2, [r3, #18]
 800f832:	187b      	adds	r3, r7, r1
 800f834:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	7cdb      	ldrb	r3, [r3, #19]
 800f83a:	187a      	adds	r2, r7, r1
 800f83c:	0011      	movs	r1, r2
 800f83e:	0018      	movs	r0, r3
 800f840:	f003 f855 	bl	80128ee <RegionGetPhyParam>
 800f844:	0003      	movs	r3, r0
 800f846:	001a      	movs	r2, r3
 800f848:	211c      	movs	r1, #28
 800f84a:	187b      	adds	r3, r7, r1
 800f84c:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 800f84e:	187b      	adds	r3, r7, r1
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	193b      	adds	r3, r7, r4
 800f854:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 800f856:	193a      	adds	r2, r7, r4
 800f858:	2324      	movs	r3, #36	; 0x24
 800f85a:	18fb      	adds	r3, r7, r3
 800f85c:	7812      	ldrb	r2, [r2, #0]
 800f85e:	b252      	sxtb	r2, r2
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	b25b      	sxtb	r3, r3
 800f864:	429a      	cmp	r2, r3
 800f866:	d112      	bne.n	800f88e <CalcNextV10X+0x18e>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 800f868:	2327      	movs	r3, #39	; 0x27
 800f86a:	18fb      	adds	r3, r7, r3
 800f86c:	2200      	movs	r2, #0
 800f86e:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	791b      	ldrb	r3, [r3, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d00a      	beq.n	800f88e <CalcNextV10X+0x18e>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800f878:	2114      	movs	r1, #20
 800f87a:	187b      	adds	r3, r7, r1
 800f87c:	2201      	movs	r2, #1
 800f87e:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	7cdb      	ldrb	r3, [r3, #19]
 800f884:	187a      	adds	r2, r7, r1
 800f886:	0011      	movs	r1, r2
 800f888:	0018      	movs	r0, r3
 800f88a:	f003 f86c 	bl	8012966 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	2226      	movs	r2, #38	; 0x26
 800f892:	18ba      	adds	r2, r7, r2
 800f894:	7812      	ldrb	r2, [r2, #0]
 800f896:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2225      	movs	r2, #37	; 0x25
 800f89c:	18ba      	adds	r2, r7, r2
 800f89e:	7812      	ldrb	r2, [r2, #0]
 800f8a0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800f8a2:	2327      	movs	r3, #39	; 0x27
 800f8a4:	18fb      	adds	r3, r7, r3
 800f8a6:	781b      	ldrb	r3, [r3, #0]
}
 800f8a8:	0018      	movs	r0, r3
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	b00b      	add	sp, #44	; 0x2c
 800f8ae:	bd90      	pop	{r4, r7, pc}

0800f8b0 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
 800f8bc:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	789b      	ldrb	r3, [r3, #2]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d107      	bne.n	800f8d6 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	68b9      	ldr	r1, [r7, #8]
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f7ff ff17 	bl	800f700 <CalcNextV10X>
 800f8d2:	0003      	movs	r3, r0
 800f8d4:	e000      	b.n	800f8d8 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	0018      	movs	r0, r3
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	b004      	add	sp, #16
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, EventNvmCtxChanged classBNvmCtxChanged )
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassBDefaults( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f8ec:	46c0      	nop			; (mov r8, r8)
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	b004      	add	sp, #16
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 800f8fc:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 800f8fe:	0018      	movs	r0, r3
 800f900:	46bd      	mov	sp, r7
 800f902:	b002      	add	sp, #8
 800f904:	bd80      	pop	{r7, pc}

0800f906 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b082      	sub	sp, #8
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	601a      	str	r2, [r3, #0]
    return NULL;
 800f914:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f916:	0018      	movs	r0, r3
 800f918:	46bd      	mov	sp, r7
 800f91a:	b002      	add	sp, #8
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b082      	sub	sp, #8
 800f922:	af00      	add	r7, sp, #0
 800f924:	0002      	movs	r2, r0
 800f926:	1dfb      	adds	r3, r7, #7
 800f928:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
 800f92a:	46c0      	nop			; (mov r8, r8)
 800f92c:	46bd      	mov	sp, r7
 800f92e:	b002      	add	sp, #8
 800f930:	bd80      	pop	{r7, pc}

0800f932 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b082      	sub	sp, #8
 800f936:	af00      	add	r7, sp, #0
 800f938:	0002      	movs	r2, r0
 800f93a:	1dfb      	adds	r3, r7, #7
 800f93c:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f93e:	46c0      	nop			; (mov r8, r8)
 800f940:	46bd      	mov	sp, r7
 800f942:	b002      	add	sp, #8
 800f944:	bd80      	pop	{r7, pc}

0800f946 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b082      	sub	sp, #8
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	0002      	movs	r2, r0
 800f94e:	1dfb      	adds	r3, r7, #7
 800f950:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f952:	46c0      	nop			; (mov r8, r8)
 800f954:	46bd      	mov	sp, r7
 800f956:	b002      	add	sp, #8
 800f958:	bd80      	pop	{r7, pc}

0800f95a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800f95e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f960:	0018      	movs	r0, r3
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b082      	sub	sp, #8
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f96e:	46c0      	nop			; (mov r8, r8)
 800f970:	46bd      	mov	sp, r7
 800f972:	b002      	add	sp, #8
 800f974:	bd80      	pop	{r7, pc}

0800f976 <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800f976:	b580      	push	{r7, lr}
 800f978:	b082      	sub	sp, #8
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f97e:	46c0      	nop			; (mov r8, r8)
 800f980:	46bd      	mov	sp, r7
 800f982:	b002      	add	sp, #8
 800f984:	bd80      	pop	{r7, pc}

0800f986 <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b082      	sub	sp, #8
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f98e:	46c0      	nop			; (mov r8, r8)
 800f990:	46bd      	mov	sp, r7
 800f992:	b002      	add	sp, #8
 800f994:	bd80      	pop	{r7, pc}

0800f996 <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b082      	sub	sp, #8
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
 800f99e:	000a      	movs	r2, r1
 800f9a0:	1cbb      	adds	r3, r7, #2
 800f9a2:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
 800f9a4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f9a6:	0018      	movs	r0, r3
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	b002      	add	sp, #8
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f9b2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f9b4:	0018      	movs	r0, r3
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f9be:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f9c0:	0018      	movs	r0, r3
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f9ca:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f9cc:	0018      	movs	r0, r3
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f9d6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800f9d8:	0018      	movs	r0, r3
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b082      	sub	sp, #8
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	0002      	movs	r2, r0
 800f9e6:	1dfb      	adds	r3, r7, #7
 800f9e8:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800f9ea:	46c0      	nop			; (mov r8, r8)
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	b002      	add	sp, #8
 800f9f0:	bd80      	pop	{r7, pc}

0800f9f2 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800f9f6:	46c0      	nop			; (mov r8, r8)
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( NULL );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa00:	46c0      	nop			; (mov r8, r8)
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b082      	sub	sp, #8
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	0002      	movs	r2, r0
 800fa0e:	1dfb      	adds	r3, r7, #7
 800fa10:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fa12:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa14:	0018      	movs	r0, r3
 800fa16:	46bd      	mov	sp, r7
 800fa18:	b002      	add	sp, #8
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b082      	sub	sp, #8
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fa24:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa26:	0018      	movs	r0, r3
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	b002      	add	sp, #8
 800fa2c:	bd80      	pop	{r7, pc}

0800fa2e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b082      	sub	sp, #8
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
        }
    }
    NvmContextChange( );
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fa36:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa38:	0018      	movs	r0, r3
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	b002      	add	sp, #8
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa44:	46c0      	nop			; (mov r8, r8)
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	0002      	movs	r2, r0
 800fa52:	6039      	str	r1, [r7, #0]
 800fa54:	1dfb      	adds	r3, r7, #7
 800fa56:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800fa58:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa5a:	0018      	movs	r0, r3
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	b002      	add	sp, #8
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b082      	sub	sp, #8
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	603a      	str	r2, [r7, #0]
 800fa6a:	1dbb      	adds	r3, r7, #6
 800fa6c:	1c02      	adds	r2, r0, #0
 800fa6e:	801a      	strh	r2, [r3, #0]
 800fa70:	1d7b      	adds	r3, r7, #5
 800fa72:	1c0a      	adds	r2, r1, #0
 800fa74:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa76:	46c0      	nop			; (mov r8, r8)
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	b002      	add	sp, #8
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa82:	46c0      	nop			; (mov r8, r8)
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
 800fa90:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800fa92:	0018      	movs	r0, r3
 800fa94:	46bd      	mov	sp, r7
 800fa96:	b002      	add	sp, #8
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b082      	sub	sp, #8
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800faa2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800faa4:	0018      	movs	r0, r3
 800faa6:	46bd      	mov	sp, r7
 800faa8:	b002      	add	sp, #8
 800faaa:	bd80      	pop	{r7, pc}

0800faac <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800fab0:	46c0      	nop			; (mov r8, r8)
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800faba:	46c0      	nop			; (mov r8, r8)
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800facc:	230e      	movs	r3, #14
 800face:	18fb      	adds	r3, r7, r3
 800fad0:	2200      	movs	r2, #0
 800fad2:	801a      	strh	r2, [r3, #0]
 800fad4:	e00f      	b.n	800faf6 <isSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 800fad6:	230e      	movs	r3, #14
 800fad8:	18fb      	adds	r3, r7, r3
 800fada:	881b      	ldrh	r3, [r3, #0]
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	18d3      	adds	r3, r2, r3
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <isSlotFree+0x2a>
        {
            return false;
 800fae6:	2300      	movs	r3, #0
 800fae8:	e00b      	b.n	800fb02 <isSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800faea:	210e      	movs	r1, #14
 800faec:	187b      	adds	r3, r7, r1
 800faee:	881a      	ldrh	r2, [r3, #0]
 800faf0:	187b      	adds	r3, r7, r1
 800faf2:	3201      	adds	r2, #1
 800faf4:	801a      	strh	r2, [r3, #0]
 800faf6:	230e      	movs	r3, #14
 800faf8:	18fb      	adds	r3, r7, r3
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	2b0f      	cmp	r3, #15
 800fafe:	d9ea      	bls.n	800fad6 <isSlotFree+0x16>
        }
    }
    return true;
 800fb00:	2301      	movs	r3, #1
}
 800fb02:	0018      	movs	r0, r3
 800fb04:	46bd      	mov	sp, r7
 800fb06:	b004      	add	sp, #16
 800fb08:	bd80      	pop	{r7, pc}
	...

0800fb0c <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800fb12:	1dfb      	adds	r3, r7, #7
 800fb14:	2200      	movs	r2, #0
 800fb16:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800fb18:	e00a      	b.n	800fb30 <mallocNewMacCommandSlot+0x24>
    {
        itr++;
 800fb1a:	1dfb      	adds	r3, r7, #7
 800fb1c:	781a      	ldrb	r2, [r3, #0]
 800fb1e:	1dfb      	adds	r3, r7, #7
 800fb20:	3201      	adds	r2, #1
 800fb22:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 800fb24:	1dfb      	adds	r3, r7, #7
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	2b0f      	cmp	r3, #15
 800fb2a:	d101      	bne.n	800fb30 <mallocNewMacCommandSlot+0x24>
        {
            return 0;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	e017      	b.n	800fb60 <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800fb30:	1dfb      	adds	r3, r7, #7
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	011b      	lsls	r3, r3, #4
 800fb36:	3308      	adds	r3, #8
 800fb38:	001a      	movs	r2, r3
 800fb3a:	4b0b      	ldr	r3, [pc, #44]	; (800fb68 <mallocNewMacCommandSlot+0x5c>)
 800fb3c:	18d3      	adds	r3, r2, r3
 800fb3e:	0018      	movs	r0, r3
 800fb40:	f7ff ffbe 	bl	800fac0 <isSlotFree>
 800fb44:	0003      	movs	r3, r0
 800fb46:	001a      	movs	r2, r3
 800fb48:	2301      	movs	r3, #1
 800fb4a:	4053      	eors	r3, r2
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1e3      	bne.n	800fb1a <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 800fb52:	1dfb      	adds	r3, r7, #7
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	011b      	lsls	r3, r3, #4
 800fb58:	3308      	adds	r3, #8
 800fb5a:	001a      	movs	r2, r3
 800fb5c:	4b02      	ldr	r3, [pc, #8]	; (800fb68 <mallocNewMacCommandSlot+0x5c>)
 800fb5e:	18d3      	adds	r3, r2, r3
}
 800fb60:	0018      	movs	r0, r3
 800fb62:	46bd      	mov	sp, r7
 800fb64:	b002      	add	sp, #8
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	20000c40 	.word	0x20000c40

0800fb6c <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d101      	bne.n	800fb7e <freeMacCommandSlot+0x12>
    {
        return false;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e006      	b.n	800fb8c <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2210      	movs	r2, #16
 800fb82:	2100      	movs	r1, #0
 800fb84:	0018      	movs	r0, r3
 800fb86:	f005 fcab 	bl	80154e0 <memset1>

    return true;
 800fb8a:	2301      	movs	r3, #1
}
 800fb8c:	0018      	movs	r0, r3
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	b002      	add	sp, #8
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <linkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool linkedListInit( MacCommandsList_t* list )
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d101      	bne.n	800fba6 <linkedListInit+0x12>
    {
        return false;
 800fba2:	2300      	movs	r3, #0
 800fba4:	e006      	b.n	800fbb4 <linkedListInit+0x20>
    }

    list->First = 0;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	605a      	str	r2, [r3, #4]

    return true;
 800fbb2:	2301      	movs	r3, #1
}
 800fbb4:	0018      	movs	r0, r3
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	b002      	add	sp, #8
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d104      	bne.n	800fbd6 <linkedListAdd+0x1a>
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <linkedListAdd+0x1a>
    {
        return false;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	e015      	b.n	800fc02 <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d102      	bne.n	800fbe4 <linkedListAdd+0x28>
    {
        list->First = element;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	683a      	ldr	r2, [r7, #0]
 800fbe2:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d003      	beq.n	800fbf4 <linkedListAdd+0x38>
    {
        list->Last->Next = element;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	683a      	ldr	r2, [r7, #0]
 800fbf2:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	683a      	ldr	r2, [r7, #0]
 800fbfe:	605a      	str	r2, [r3, #4]

    return true;
 800fc00:	2301      	movs	r3, #1
}
 800fc02:	0018      	movs	r0, r3
 800fc04:	46bd      	mov	sp, r7
 800fc06:	b002      	add	sp, #8
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b084      	sub	sp, #16
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	6078      	str	r0, [r7, #4]
 800fc12:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d104      	bne.n	800fc24 <linkedListGetPrevious+0x1a>
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d101      	bne.n	800fc24 <linkedListGetPrevious+0x1a>
    {
        return NULL;
 800fc20:	2300      	movs	r3, #0
 800fc22:	e016      	b.n	800fc52 <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
 800fc2a:	683a      	ldr	r2, [r7, #0]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d00c      	beq.n	800fc4c <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
 800fc32:	e002      	b.n	800fc3a <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d007      	beq.n	800fc50 <linkedListGetPrevious+0x46>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	683a      	ldr	r2, [r7, #0]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d1f4      	bne.n	800fc34 <linkedListGetPrevious+0x2a>
 800fc4a:	e001      	b.n	800fc50 <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800fc50:	68fb      	ldr	r3, [r7, #12]
}
 800fc52:	0018      	movs	r0, r3
 800fc54:	46bd      	mov	sp, r7
 800fc56:	b004      	add	sp, #16
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d104      	bne.n	800fc74 <linkedListRemove+0x1a>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <linkedListRemove+0x1a>
    {
        return false;
 800fc70:	2300      	movs	r3, #0
 800fc72:	e023      	b.n	800fcbc <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
 800fc74:	683a      	ldr	r2, [r7, #0]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	0011      	movs	r1, r2
 800fc7a:	0018      	movs	r0, r3
 800fc7c:	f7ff ffc5 	bl	800fc0a <linkedListGetPrevious>
 800fc80:	0003      	movs	r3, r0
 800fc82:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	683a      	ldr	r2, [r7, #0]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d103      	bne.n	800fc96 <linkedListRemove+0x3c>
    {
        list->First = element->Next;
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d102      	bne.n	800fca6 <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d003      	beq.n	800fcb4 <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	601a      	str	r2, [r3, #0]

    return true;
 800fcba:	2301      	movs	r3, #1
}
 800fcbc:	0018      	movs	r0, r3
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	b004      	add	sp, #16
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	0002      	movs	r2, r0
 800fccc:	1dfb      	adds	r3, r7, #7
 800fcce:	701a      	strb	r2, [r3, #0]
    switch( cid )
 800fcd0:	1dfb      	adds	r3, r7, #7
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	2b08      	cmp	r3, #8
 800fcd6:	d003      	beq.n	800fce0 <IsSticky+0x1c>
 800fcd8:	2b0a      	cmp	r3, #10
 800fcda:	d001      	beq.n	800fce0 <IsSticky+0x1c>
 800fcdc:	2b05      	cmp	r3, #5
 800fcde:	d101      	bne.n	800fce4 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 800fce0:	2301      	movs	r3, #1
 800fce2:	e000      	b.n	800fce6 <IsSticky+0x22>
        default:
            return false;
 800fce4:	2300      	movs	r3, #0
    }
}
 800fce6:	0018      	movs	r0, r3
 800fce8:	46bd      	mov	sp, r7
 800fcea:	b002      	add	sp, #8
 800fcec:	bd80      	pop	{r7, pc}
	...

0800fcf0 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 800fcf4:	4b04      	ldr	r3, [pc, #16]	; (800fd08 <NvmCtxCallback+0x18>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 800fcfc:	4b02      	ldr	r3, [pc, #8]	; (800fd08 <NvmCtxCallback+0x18>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4798      	blx	r3
    }
}
 800fd02:	46c0      	nop			; (mov r8, r8)
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	20000c3c 	.word	0x20000c3c

0800fd0c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( EventNvmCtxChanged commandsNvmCtxChanged )
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]

    // Initialize with default
    memset1( (uint8_t*)&NvmCtx, 0, sizeof( NvmCtx ) );
 800fd14:	4b08      	ldr	r3, [pc, #32]	; (800fd38 <LoRaMacCommandsInit+0x2c>)
 800fd16:	22fc      	movs	r2, #252	; 0xfc
 800fd18:	2100      	movs	r1, #0
 800fd1a:	0018      	movs	r0, r3
 800fd1c:	f005 fbe0 	bl	80154e0 <memset1>

    linkedListInit( &NvmCtx.MacCommandList );
 800fd20:	4b05      	ldr	r3, [pc, #20]	; (800fd38 <LoRaMacCommandsInit+0x2c>)
 800fd22:	0018      	movs	r0, r3
 800fd24:	f7ff ff36 	bl	800fb94 <linkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800fd28:	4b04      	ldr	r3, [pc, #16]	; (800fd3c <LoRaMacCommandsInit+0x30>)
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	0018      	movs	r0, r3
 800fd32:	46bd      	mov	sp, r7
 800fd34:	b002      	add	sp, #8
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	20000c40 	.word	0x20000c40
 800fd3c:	20000c3c 	.word	0x20000c3c

0800fd40 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d007      	beq.n	800fd5e <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCtx, ( uint8_t* ) commandsNvmCtx, sizeof( NvmCtx ) );
 800fd4e:	6879      	ldr	r1, [r7, #4]
 800fd50:	4b05      	ldr	r3, [pc, #20]	; (800fd68 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 800fd52:	22fc      	movs	r2, #252	; 0xfc
 800fd54:	0018      	movs	r0, r3
 800fd56:	f005 fb87 	bl	8015468 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	e000      	b.n	800fd60 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fd5e:	2301      	movs	r3, #1
    }
}
 800fd60:	0018      	movs	r0, r3
 800fd62:	46bd      	mov	sp, r7
 800fd64:	b002      	add	sp, #8
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	20000c40 	.word	0x20000c40

0800fd6c <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	22fc      	movs	r2, #252	; 0xfc
 800fd78:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 800fd7a:	4b02      	ldr	r3, [pc, #8]	; (800fd84 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 800fd7c:	0018      	movs	r0, r3
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	b002      	add	sp, #8
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	20000c40 	.word	0x20000c40

0800fd88 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
 800fd88:	b590      	push	{r4, r7, lr}
 800fd8a:	b087      	sub	sp, #28
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60b9      	str	r1, [r7, #8]
 800fd90:	607a      	str	r2, [r7, #4]
 800fd92:	230f      	movs	r3, #15
 800fd94:	18fb      	adds	r3, r7, r3
 800fd96:	1c02      	adds	r2, r0, #0
 800fd98:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d101      	bne.n	800fda4 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fda0:	2301      	movs	r3, #1
 800fda2:	e03c      	b.n	800fe1e <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
 800fda4:	f7ff feb2 	bl	800fb0c <mallocNewMacCommandSlot>
 800fda8:	0003      	movs	r3, r0
 800fdaa:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d101      	bne.n	800fdb6 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	e033      	b.n	800fe1e <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 800fdb6:	697a      	ldr	r2, [r7, #20]
 800fdb8:	4b1b      	ldr	r3, [pc, #108]	; (800fe28 <LoRaMacCommandsAddCmd+0xa0>)
 800fdba:	0011      	movs	r1, r2
 800fdbc:	0018      	movs	r0, r3
 800fdbe:	f7ff fefd 	bl	800fbbc <linkedListAdd>
 800fdc2:	0003      	movs	r3, r0
 800fdc4:	001a      	movs	r2, r3
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	4053      	eors	r3, r2
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 800fdd0:	2305      	movs	r3, #5
 800fdd2:	e024      	b.n	800fe1e <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	240f      	movs	r4, #15
 800fdd8:	193a      	adds	r2, r7, r4
 800fdda:	7812      	ldrb	r2, [r2, #0]
 800fddc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	3305      	adds	r3, #5
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	b292      	uxth	r2, r2
 800fdec:	68b9      	ldr	r1, [r7, #8]
 800fdee:	0018      	movs	r0, r3
 800fdf0:	f005 fb3a 	bl	8015468 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800fdf4:	193b      	adds	r3, r7, r4
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	0018      	movs	r0, r3
 800fdfa:	f7ff ff63 	bl	800fcc4 <IsSticky>
 800fdfe:	0003      	movs	r3, r0
 800fe00:	001a      	movs	r2, r3
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800fe06:	4b08      	ldr	r3, [pc, #32]	; (800fe28 <LoRaMacCommandsAddCmd+0xa0>)
 800fe08:	22f8      	movs	r2, #248	; 0xf8
 800fe0a:	589a      	ldr	r2, [r3, r2]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	18d3      	adds	r3, r2, r3
 800fe10:	1c5a      	adds	r2, r3, #1
 800fe12:	4b05      	ldr	r3, [pc, #20]	; (800fe28 <LoRaMacCommandsAddCmd+0xa0>)
 800fe14:	21f8      	movs	r1, #248	; 0xf8
 800fe16:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 800fe18:	f7ff ff6a 	bl	800fcf0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	0018      	movs	r0, r3
 800fe20:	46bd      	mov	sp, r7
 800fe22:	b007      	add	sp, #28
 800fe24:	bd90      	pop	{r4, r7, pc}
 800fe26:	46c0      	nop			; (mov r8, r8)
 800fe28:	20000c40 	.word	0x20000c40

0800fe2c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d101      	bne.n	800fe3e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	e028      	b.n	800fe90 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	4b15      	ldr	r3, [pc, #84]	; (800fe98 <LoRaMacCommandsRemoveCmd+0x6c>)
 800fe42:	0011      	movs	r1, r2
 800fe44:	0018      	movs	r0, r3
 800fe46:	f7ff ff08 	bl	800fc5a <linkedListRemove>
 800fe4a:	0003      	movs	r3, r0
 800fe4c:	001a      	movs	r2, r3
 800fe4e:	2301      	movs	r3, #1
 800fe50:	4053      	eors	r3, r2
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800fe58:	2303      	movs	r3, #3
 800fe5a:	e019      	b.n	800fe90 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800fe5c:	4b0e      	ldr	r3, [pc, #56]	; (800fe98 <LoRaMacCommandsRemoveCmd+0x6c>)
 800fe5e:	22f8      	movs	r2, #248	; 0xf8
 800fe60:	589a      	ldr	r2, [r3, r2]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	689b      	ldr	r3, [r3, #8]
 800fe66:	1ad3      	subs	r3, r2, r3
 800fe68:	1e5a      	subs	r2, r3, #1
 800fe6a:	4b0b      	ldr	r3, [pc, #44]	; (800fe98 <LoRaMacCommandsRemoveCmd+0x6c>)
 800fe6c:	21f8      	movs	r1, #248	; 0xf8
 800fe6e:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	0018      	movs	r0, r3
 800fe74:	f7ff fe7a 	bl	800fb6c <freeMacCommandSlot>
 800fe78:	0003      	movs	r3, r0
 800fe7a:	001a      	movs	r2, r3
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	4053      	eors	r3, r2
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d001      	beq.n	800fe8a <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 800fe86:	2305      	movs	r3, #5
 800fe88:	e002      	b.n	800fe90 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 800fe8a:	f7ff ff31 	bl	800fcf0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800fe8e:	2300      	movs	r3, #0
}
 800fe90:	0018      	movs	r0, r3
 800fe92:	46bd      	mov	sp, r7
 800fe94:	b002      	add	sp, #8
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	20000c40 	.word	0x20000c40

0800fe9c <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800fea2:	4b11      	ldr	r3, [pc, #68]	; (800fee8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement )
 800fea8:	e013      	b.n	800fed2 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	7b1b      	ldrb	r3, [r3, #12]
 800feae:	2201      	movs	r2, #1
 800feb0:	4053      	eors	r3, r2
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d009      	beq.n	800fecc <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	0018      	movs	r0, r3
 800fec2:	f7ff ffb3 	bl	800fe2c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	607b      	str	r3, [r7, #4]
 800feca:	e002      	b.n	800fed2 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	607b      	str	r3, [r7, #4]
    while( curElement )
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d1e8      	bne.n	800feaa <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 800fed8:	f7ff ff0a 	bl	800fcf0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800fedc:	2300      	movs	r3, #0
}
 800fede:	0018      	movs	r0, r3
 800fee0:	46bd      	mov	sp, r7
 800fee2:	b002      	add	sp, #8
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	46c0      	nop			; (mov r8, r8)
 800fee8:	20000c40 	.word	0x20000c40

0800feec <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800fef2:	4b1a      	ldr	r3, [pc, #104]	; (800ff5c <LoRaMacCommandsRemoveStickyAnsCmds+0x70>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
 800fef8:	e026      	b.n	800ff48 <LoRaMacCommandsRemoveStickyAnsCmds+0x5c>
    {
        nexElement = curElement->Next;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	7b1b      	ldrb	r3, [r3, #12]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d01d      	beq.n	800ff44 <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 800ff08:	230b      	movs	r3, #11
 800ff0a:	18fb      	adds	r3, r7, r3
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	701a      	strb	r2, [r3, #0]
 800ff10:	e013      	b.n	800ff3a <LoRaMacCommandsRemoveStickyAnsCmds+0x4e>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	791a      	ldrb	r2, [r3, #4]
 800ff16:	230b      	movs	r3, #11
 800ff18:	18fb      	adds	r3, r7, r3
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	4910      	ldr	r1, [pc, #64]	; (800ff60 <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
 800ff1e:	5ccb      	ldrb	r3, [r1, r3]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d104      	bne.n	800ff2e <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	0018      	movs	r0, r3
 800ff28:	f7ff ff80 	bl	800fe2c <LoRaMacCommandsRemoveCmd>
                    break;
 800ff2c:	e00a      	b.n	800ff44 <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 800ff2e:	210b      	movs	r1, #11
 800ff30:	187b      	adds	r3, r7, r1
 800ff32:	781a      	ldrb	r2, [r3, #0]
 800ff34:	187b      	adds	r3, r7, r1
 800ff36:	3201      	adds	r2, #1
 800ff38:	701a      	strb	r2, [r3, #0]
 800ff3a:	230b      	movs	r3, #11
 800ff3c:	18fb      	adds	r3, r7, r3
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	2b02      	cmp	r3, #2
 800ff42:	d9e6      	bls.n	800ff12 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d1d5      	bne.n	800fefa <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 800ff4e:	f7ff fecf 	bl	800fcf0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800ff52:	2300      	movs	r3, #0
}
 800ff54:	0018      	movs	r0, r3
 800ff56:	46bd      	mov	sp, r7
 800ff58:	b004      	add	sp, #16
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	20000c40 	.word	0x20000c40
 800ff60:	080208ac 	.word	0x080208ac

0800ff64 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d101      	bne.n	800ff76 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ff72:	2301      	movs	r3, #1
 800ff74:	e005      	b.n	800ff82 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 800ff76:	4b05      	ldr	r3, [pc, #20]	; (800ff8c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800ff78:	22f8      	movs	r2, #248	; 0xf8
 800ff7a:	589a      	ldr	r2, [r3, r2]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800ff80:	2300      	movs	r3, #0

}
 800ff82:	0018      	movs	r0, r3
 800ff84:	46bd      	mov	sp, r7
 800ff86:	b002      	add	sp, #8
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	46c0      	nop			; (mov r8, r8)
 800ff8c:	20000c40 	.word	0x20000c40

0800ff90 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize,  uint8_t* buffer )
{
 800ff90:	b590      	push	{r4, r7, lr}
 800ff92:	b087      	sub	sp, #28
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d002      	beq.n	800ffa8 <LoRaMacCommandsSerializeCmds+0x18>
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e03a      	b.n	8010022 <LoRaMacCommandsSerializeCmds+0x92>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800ffac:	4b1f      	ldr	r3, [pc, #124]	; (801002c <LoRaMacCommandsSerializeCmds+0x9c>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 800ffb2:	2313      	movs	r3, #19
 800ffb4:	18fb      	adds	r3, r7, r3
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 800ffba:	e02c      	b.n	8010016 <LoRaMacCommandsSerializeCmds+0x86>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ffbc:	2313      	movs	r3, #19
 800ffbe:	18fb      	adds	r3, r7, r3
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	1ad2      	subs	r2, r2, r3
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	689b      	ldr	r3, [r3, #8]
 800ffca:	3301      	adds	r3, #1
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d326      	bcc.n	801001e <LoRaMacCommandsSerializeCmds+0x8e>
        {
            buffer[itr++] = curElement->CID;
 800ffd0:	2413      	movs	r4, #19
 800ffd2:	193b      	adds	r3, r7, r4
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	193a      	adds	r2, r7, r4
 800ffd8:	1c59      	adds	r1, r3, #1
 800ffda:	7011      	strb	r1, [r2, #0]
 800ffdc:	001a      	movs	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	189b      	adds	r3, r3, r2
 800ffe2:	697a      	ldr	r2, [r7, #20]
 800ffe4:	7912      	ldrb	r2, [r2, #4]
 800ffe6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ffe8:	193b      	adds	r3, r7, r4
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	18d0      	adds	r0, r2, r3
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	1d59      	adds	r1, r3, #5
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	001a      	movs	r2, r3
 800fffc:	f005 fa34 	bl	8015468 <memcpy1>
            itr = itr + curElement->PayloadSize;
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	689b      	ldr	r3, [r3, #8]
 8010004:	b2d9      	uxtb	r1, r3
 8010006:	193b      	adds	r3, r7, r4
 8010008:	193a      	adds	r2, r7, r4
 801000a:	7812      	ldrb	r2, [r2, #0]
 801000c:	188a      	adds	r2, r1, r2
 801000e:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	617b      	str	r3, [r7, #20]
    while( curElement )
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1cf      	bne.n	800ffbc <LoRaMacCommandsSerializeCmds+0x2c>
 801001c:	e000      	b.n	8010020 <LoRaMacCommandsSerializeCmds+0x90>
            break;
 801001e:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8010020:	2300      	movs	r3, #0
}
 8010022:	0018      	movs	r0, r3
 8010024:	46bd      	mov	sp, r7
 8010026:	b007      	add	sp, #28
 8010028:	bd90      	pop	{r4, r7, pc}
 801002a:	46c0      	nop			; (mov r8, r8)
 801002c:	20000c40 	.word	0x20000c40

08010030 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d101      	bne.n	8010042 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801003e:	2301      	movs	r3, #1
 8010040:	e016      	b.n	8010070 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8010042:	4b0d      	ldr	r3, [pc, #52]	; (8010078 <LoRaMacCommandsStickyCmdsPending+0x48>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 801004e:	e00b      	b.n	8010068 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	7b1b      	ldrb	r3, [r3, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d004      	beq.n	8010062 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2201      	movs	r2, #1
 801005c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801005e:	2300      	movs	r3, #0
 8010060:	e006      	b.n	8010070 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	60fb      	str	r3, [r7, #12]
    while( curElement )
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d1f0      	bne.n	8010050 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801006e:	2300      	movs	r3, #0
}
 8010070:	0018      	movs	r0, r3
 8010072:	46bd      	mov	sp, r7
 8010074:	b004      	add	sp, #16
 8010076:	bd80      	pop	{r7, pc}
 8010078:	20000c40 	.word	0x20000c40

0801007c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8010084:	4b08      	ldr	r3, [pc, #32]	; (80100a8 <IncreaseBufferPointer+0x2c>)
 8010086:	691b      	ldr	r3, [r3, #16]
 8010088:	3310      	adds	r3, #16
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	429a      	cmp	r2, r3
 801008e:	d103      	bne.n	8010098 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8010090:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <IncreaseBufferPointer+0x2c>)
 8010092:	691b      	ldr	r3, [r3, #16]
 8010094:	607b      	str	r3, [r7, #4]
 8010096:	e002      	b.n	801009e <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	3304      	adds	r3, #4
 801009c:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801009e:	687b      	ldr	r3, [r7, #4]
}
 80100a0:	0018      	movs	r0, r3
 80100a2:	46bd      	mov	sp, r7
 80100a4:	b002      	add	sp, #8
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	20000d54 	.word	0x20000d54

080100ac <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b086      	sub	sp, #24
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60b9      	str	r1, [r7, #8]
 80100b4:	607a      	str	r2, [r7, #4]
 80100b6:	230f      	movs	r3, #15
 80100b8:	18fb      	adds	r3, r7, r3
 80100ba:	1c02      	adds	r2, r0, #0
 80100bc:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 80100c2:	e00e      	b.n	80100e2 <GetElement+0x36>
    {
        if( element->Request == request )
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	220f      	movs	r2, #15
 80100ca:	18ba      	adds	r2, r7, r2
 80100cc:	7812      	ldrb	r2, [r2, #0]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d101      	bne.n	80100d6 <GetElement+0x2a>
        {
            // We have found the element
            return element;
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	e00a      	b.n	80100ec <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	0018      	movs	r0, r3
 80100da:	f7ff ffcf 	bl	801007c <IncreaseBufferPointer>
 80100de:	0003      	movs	r3, r0
 80100e0:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 80100e2:	697a      	ldr	r2, [r7, #20]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d1ec      	bne.n	80100c4 <GetElement+0x18>
        }
    }
    return NULL;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	0018      	movs	r0, r3
 80100ee:	46bd      	mov	sp, r7
 80100f0:	b006      	add	sp, #24
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, EventNvmCtxChanged confirmQueueNvmCtxChanged )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 80100fe:	4b13      	ldr	r3, [pc, #76]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8010104:	4b11      	ldr	r3, [pc, #68]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 8010106:	4a12      	ldr	r2, [pc, #72]	; (8010150 <LoRaMacConfirmQueueInit+0x5c>)
 8010108:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 801010a:	4b10      	ldr	r3, [pc, #64]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 801010c:	691b      	ldr	r3, [r3, #16]
 801010e:	2200      	movs	r2, #0
 8010110:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8010112:	4b0e      	ldr	r3, [pc, #56]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 8010114:	691b      	ldr	r3, [r3, #16]
 8010116:	001a      	movs	r2, r3
 8010118:	4b0c      	ldr	r3, [pc, #48]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 801011a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801011c:	4b0b      	ldr	r3, [pc, #44]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 801011e:	691b      	ldr	r3, [r3, #16]
 8010120:	001a      	movs	r2, r3
 8010122:	4b0a      	ldr	r3, [pc, #40]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 8010124:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8010126:	4b09      	ldr	r3, [pc, #36]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 8010128:	691b      	ldr	r3, [r3, #16]
 801012a:	2214      	movs	r2, #20
 801012c:	21ff      	movs	r1, #255	; 0xff
 801012e:	0018      	movs	r0, r3
 8010130:	f005 f9d6 	bl	80154e0 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010134:	4b05      	ldr	r3, [pc, #20]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 8010136:	691b      	ldr	r3, [r3, #16]
 8010138:	2201      	movs	r2, #1
 801013a:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.EventNvmCtxChanged = confirmQueueNvmCtxChanged;
 801013c:	4b03      	ldr	r3, [pc, #12]	; (801014c <LoRaMacConfirmQueueInit+0x58>)
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	60da      	str	r2, [r3, #12]
}
 8010142:	46c0      	nop			; (mov r8, r8)
 8010144:	46bd      	mov	sp, r7
 8010146:	b002      	add	sp, #8
 8010148:	bd80      	pop	{r7, pc}
 801014a:	46c0      	nop			; (mov r8, r8)
 801014c:	20000d54 	.word	0x20000d54
 8010150:	20000d3c 	.word	0x20000d3c

08010154 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d007      	beq.n	8010172 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8010162:	6879      	ldr	r1, [r7, #4]
 8010164:	4b05      	ldr	r3, [pc, #20]	; (801017c <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 8010166:	2216      	movs	r2, #22
 8010168:	0018      	movs	r0, r3
 801016a:	f005 f97d 	bl	8015468 <memcpy1>
        return true;
 801016e:	2301      	movs	r3, #1
 8010170:	e000      	b.n	8010174 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8010172:	2300      	movs	r3, #0
    }
}
 8010174:	0018      	movs	r0, r3
 8010176:	46bd      	mov	sp, r7
 8010178:	b002      	add	sp, #8
 801017a:	bd80      	pop	{r7, pc}
 801017c:	20000d3c 	.word	0x20000d3c

08010180 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2216      	movs	r2, #22
 801018c:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 801018e:	4b02      	ldr	r3, [pc, #8]	; (8010198 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8010190:	0018      	movs	r0, r3
 8010192:	46bd      	mov	sp, r7
 8010194:	b002      	add	sp, #8
 8010196:	bd80      	pop	{r7, pc}
 8010198:	20000d3c 	.word	0x20000d3c

0801019c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80101a4:	4b16      	ldr	r3, [pc, #88]	; (8010200 <LoRaMacConfirmQueueAdd+0x64>)
 80101a6:	691b      	ldr	r3, [r3, #16]
 80101a8:	7d1b      	ldrb	r3, [r3, #20]
 80101aa:	2b04      	cmp	r3, #4
 80101ac:	d901      	bls.n	80101b2 <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 80101ae:	2300      	movs	r3, #0
 80101b0:	e021      	b.n	80101f6 <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80101b2:	4b13      	ldr	r3, [pc, #76]	; (8010200 <LoRaMacConfirmQueueAdd+0x64>)
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	7812      	ldrb	r2, [r2, #0]
 80101ba:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80101bc:	4b10      	ldr	r3, [pc, #64]	; (8010200 <LoRaMacConfirmQueueAdd+0x64>)
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	7852      	ldrb	r2, [r2, #1]
 80101c4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80101c6:	4b0e      	ldr	r3, [pc, #56]	; (8010200 <LoRaMacConfirmQueueAdd+0x64>)
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	78d2      	ldrb	r2, [r2, #3]
 80101ce:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80101d0:	4b0b      	ldr	r3, [pc, #44]	; (8010200 <LoRaMacConfirmQueueAdd+0x64>)
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	2200      	movs	r2, #0
 80101d6:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 80101d8:	4b09      	ldr	r3, [pc, #36]	; (8010200 <LoRaMacConfirmQueueAdd+0x64>)
 80101da:	691b      	ldr	r3, [r3, #16]
 80101dc:	7d1a      	ldrb	r2, [r3, #20]
 80101de:	3201      	adds	r2, #1
 80101e0:	b2d2      	uxtb	r2, r2
 80101e2:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80101e4:	4b06      	ldr	r3, [pc, #24]	; (8010200 <LoRaMacConfirmQueueAdd+0x64>)
 80101e6:	689b      	ldr	r3, [r3, #8]
 80101e8:	0018      	movs	r0, r3
 80101ea:	f7ff ff47 	bl	801007c <IncreaseBufferPointer>
 80101ee:	0002      	movs	r2, r0
 80101f0:	4b03      	ldr	r3, [pc, #12]	; (8010200 <LoRaMacConfirmQueueAdd+0x64>)
 80101f2:	609a      	str	r2, [r3, #8]

    return true;
 80101f4:	2301      	movs	r3, #1
}
 80101f6:	0018      	movs	r0, r3
 80101f8:	46bd      	mov	sp, r7
 80101fa:	b002      	add	sp, #8
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	46c0      	nop			; (mov r8, r8)
 8010200:	20000d54 	.word	0x20000d54

08010204 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8010204:	b580      	push	{r7, lr}
 8010206:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 8010208:	4b0c      	ldr	r3, [pc, #48]	; (801023c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	7d1b      	ldrb	r3, [r3, #20]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d101      	bne.n	8010216 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 8010212:	2300      	movs	r3, #0
 8010214:	e00e      	b.n	8010234 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8010216:	4b09      	ldr	r3, [pc, #36]	; (801023c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	7d1a      	ldrb	r2, [r3, #20]
 801021c:	3a01      	subs	r2, #1
 801021e:	b2d2      	uxtb	r2, r2
 8010220:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8010222:	4b06      	ldr	r3, [pc, #24]	; (801023c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	0018      	movs	r0, r3
 8010228:	f7ff ff28 	bl	801007c <IncreaseBufferPointer>
 801022c:	0002      	movs	r2, r0
 801022e:	4b03      	ldr	r3, [pc, #12]	; (801023c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8010230:	605a      	str	r2, [r3, #4]

    return true;
 8010232:	2301      	movs	r3, #1
}
 8010234:	0018      	movs	r0, r3
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	46c0      	nop			; (mov r8, r8)
 801023c:	20000d54 	.word	0x20000d54

08010240 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	0002      	movs	r2, r0
 8010248:	1dfb      	adds	r3, r7, #7
 801024a:	701a      	strb	r2, [r3, #0]
 801024c:	1dbb      	adds	r3, r7, #6
 801024e:	1c0a      	adds	r2, r1, #0
 8010250:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8010252:	2300      	movs	r3, #0
 8010254:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8010256:	4b0f      	ldr	r3, [pc, #60]	; (8010294 <LoRaMacConfirmQueueSetStatus+0x54>)
 8010258:	691b      	ldr	r3, [r3, #16]
 801025a:	7d1b      	ldrb	r3, [r3, #20]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d014      	beq.n	801028a <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010260:	4b0c      	ldr	r3, [pc, #48]	; (8010294 <LoRaMacConfirmQueueSetStatus+0x54>)
 8010262:	6859      	ldr	r1, [r3, #4]
 8010264:	4b0b      	ldr	r3, [pc, #44]	; (8010294 <LoRaMacConfirmQueueSetStatus+0x54>)
 8010266:	689a      	ldr	r2, [r3, #8]
 8010268:	1dbb      	adds	r3, r7, #6
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	0018      	movs	r0, r3
 801026e:	f7ff ff1d 	bl	80100ac <GetElement>
 8010272:	0003      	movs	r3, r0
 8010274:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d006      	beq.n	801028a <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	1dfa      	adds	r2, r7, #7
 8010280:	7812      	ldrb	r2, [r2, #0]
 8010282:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2201      	movs	r2, #1
 8010288:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801028a:	46c0      	nop			; (mov r8, r8)
 801028c:	46bd      	mov	sp, r7
 801028e:	b004      	add	sp, #16
 8010290:	bd80      	pop	{r7, pc}
 8010292:	46c0      	nop			; (mov r8, r8)
 8010294:	20000d54 	.word	0x20000d54

08010298 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b084      	sub	sp, #16
 801029c:	af00      	add	r7, sp, #0
 801029e:	0002      	movs	r2, r0
 80102a0:	1dfb      	adds	r3, r7, #7
 80102a2:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80102a4:	2300      	movs	r3, #0
 80102a6:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80102a8:	4b0d      	ldr	r3, [pc, #52]	; (80102e0 <LoRaMacConfirmQueueGetStatus+0x48>)
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	7d1b      	ldrb	r3, [r3, #20]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d010      	beq.n	80102d4 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80102b2:	4b0b      	ldr	r3, [pc, #44]	; (80102e0 <LoRaMacConfirmQueueGetStatus+0x48>)
 80102b4:	6859      	ldr	r1, [r3, #4]
 80102b6:	4b0a      	ldr	r3, [pc, #40]	; (80102e0 <LoRaMacConfirmQueueGetStatus+0x48>)
 80102b8:	689a      	ldr	r2, [r3, #8]
 80102ba:	1dfb      	adds	r3, r7, #7
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	0018      	movs	r0, r3
 80102c0:	f7ff fef4 	bl	80100ac <GetElement>
 80102c4:	0003      	movs	r3, r0
 80102c6:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d002      	beq.n	80102d4 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	785b      	ldrb	r3, [r3, #1]
 80102d2:	e000      	b.n	80102d6 <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80102d4:	2301      	movs	r3, #1
}
 80102d6:	0018      	movs	r0, r3
 80102d8:	46bd      	mov	sp, r7
 80102da:	b004      	add	sp, #16
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	46c0      	nop			; (mov r8, r8)
 80102e0:	20000d54 	.word	0x20000d54

080102e4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	0002      	movs	r2, r0
 80102ec:	1dfb      	adds	r3, r7, #7
 80102ee:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80102f0:	4b14      	ldr	r3, [pc, #80]	; (8010344 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 80102f6:	4b13      	ldr	r3, [pc, #76]	; (8010344 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	1dfa      	adds	r2, r7, #7
 80102fc:	7812      	ldrb	r2, [r2, #0]
 80102fe:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8010300:	4b10      	ldr	r3, [pc, #64]	; (8010344 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	7d1b      	ldrb	r3, [r3, #20]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d018      	beq.n	801033c <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	1dfa      	adds	r2, r7, #7
 801030e:	7812      	ldrb	r2, [r2, #0]
 8010310:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	78db      	ldrb	r3, [r3, #3]
 8010316:	2201      	movs	r2, #1
 8010318:	4053      	eors	r3, r2
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b00      	cmp	r3, #0
 801031e:	d002      	beq.n	8010326 <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2201      	movs	r2, #1
 8010324:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	0018      	movs	r0, r3
 801032a:	f7ff fea7 	bl	801007c <IncreaseBufferPointer>
 801032e:	0003      	movs	r3, r0
 8010330:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8010332:	4b04      	ldr	r3, [pc, #16]	; (8010344 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	429a      	cmp	r2, r3
 801033a:	d1e6      	bne.n	801030a <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 801033c:	46c0      	nop			; (mov r8, r8)
 801033e:	46bd      	mov	sp, r7
 8010340:	b004      	add	sp, #16
 8010342:	bd80      	pop	{r7, pc}
 8010344:	20000d54 	.word	0x20000d54

08010348 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
 801034c:	4b02      	ldr	r3, [pc, #8]	; (8010358 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 801034e:	691b      	ldr	r3, [r3, #16]
 8010350:	7d5b      	ldrb	r3, [r3, #21]
}
 8010352:	0018      	movs	r0, r3
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	20000d54 	.word	0x20000d54

0801035c <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	0002      	movs	r2, r0
 8010364:	1dfb      	adds	r3, r7, #7
 8010366:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8010368:	4b08      	ldr	r3, [pc, #32]	; (801038c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801036a:	6859      	ldr	r1, [r3, #4]
 801036c:	4b07      	ldr	r3, [pc, #28]	; (801038c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801036e:	689a      	ldr	r2, [r3, #8]
 8010370:	1dfb      	adds	r3, r7, #7
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	0018      	movs	r0, r3
 8010376:	f7ff fe99 	bl	80100ac <GetElement>
 801037a:	1e03      	subs	r3, r0, #0
 801037c:	d001      	beq.n	8010382 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 801037e:	2301      	movs	r3, #1
 8010380:	e000      	b.n	8010384 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 8010382:	2300      	movs	r3, #0
}
 8010384:	0018      	movs	r0, r3
 8010386:	46bd      	mov	sp, r7
 8010388:	b002      	add	sp, #8
 801038a:	bd80      	pop	{r7, pc}
 801038c:	20000d54 	.word	0x20000d54

08010390 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8010398:	4b2d      	ldr	r3, [pc, #180]	; (8010450 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801039a:	691a      	ldr	r2, [r3, #16]
 801039c:	230e      	movs	r3, #14
 801039e:	18fb      	adds	r3, r7, r3
 80103a0:	7d12      	ldrb	r2, [r2, #20]
 80103a2:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 80103a4:	230d      	movs	r3, #13
 80103a6:	18fb      	adds	r3, r7, r3
 80103a8:	2200      	movs	r2, #0
 80103aa:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80103ac:	230f      	movs	r3, #15
 80103ae:	18fb      	adds	r3, r7, r3
 80103b0:	2200      	movs	r2, #0
 80103b2:	701a      	strb	r2, [r3, #0]
 80103b4:	e03f      	b.n	8010436 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80103b6:	4b26      	ldr	r3, [pc, #152]	; (8010450 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	781a      	ldrb	r2, [r3, #0]
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80103c0:	4b23      	ldr	r3, [pc, #140]	; (8010450 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	785a      	ldrb	r2, [r3, #1]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80103ca:	4b21      	ldr	r3, [pc, #132]	; (8010450 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80103cc:	685a      	ldr	r2, [r3, #4]
 80103ce:	210d      	movs	r1, #13
 80103d0:	187b      	adds	r3, r7, r1
 80103d2:	7892      	ldrb	r2, [r2, #2]
 80103d4:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 80103d6:	187b      	adds	r3, r7, r1
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d006      	beq.n	80103ec <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80103de:	4b1c      	ldr	r3, [pc, #112]	; (8010450 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	0010      	movs	r0, r2
 80103e8:	4798      	blx	r3
 80103ea:	e00f      	b.n	801040c <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80103ec:	4b18      	ldr	r3, [pc, #96]	; (8010450 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	781a      	ldrb	r2, [r3, #0]
 80103f2:	2108      	movs	r1, #8
 80103f4:	187b      	adds	r3, r7, r1
 80103f6:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80103f8:	4b15      	ldr	r3, [pc, #84]	; (8010450 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80103fa:	685b      	ldr	r3, [r3, #4]
 80103fc:	785a      	ldrb	r2, [r3, #1]
 80103fe:	187b      	adds	r3, r7, r1
 8010400:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8010402:	4b13      	ldr	r3, [pc, #76]	; (8010450 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	78da      	ldrb	r2, [r3, #3]
 8010408:	187b      	adds	r3, r7, r1
 801040a:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801040c:	f7ff fefa 	bl	8010204 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8010410:	230d      	movs	r3, #13
 8010412:	18fb      	adds	r3, r7, r3
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	2201      	movs	r2, #1
 8010418:	4053      	eors	r3, r2
 801041a:	b2db      	uxtb	r3, r3
 801041c:	2b00      	cmp	r3, #0
 801041e:	d004      	beq.n	801042a <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8010420:	2308      	movs	r3, #8
 8010422:	18fb      	adds	r3, r7, r3
 8010424:	0018      	movs	r0, r3
 8010426:	f7ff feb9 	bl	801019c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801042a:	210f      	movs	r1, #15
 801042c:	187b      	adds	r3, r7, r1
 801042e:	781a      	ldrb	r2, [r3, #0]
 8010430:	187b      	adds	r3, r7, r1
 8010432:	3201      	adds	r2, #1
 8010434:	701a      	strb	r2, [r3, #0]
 8010436:	230f      	movs	r3, #15
 8010438:	18fa      	adds	r2, r7, r3
 801043a:	230e      	movs	r3, #14
 801043c:	18fb      	adds	r3, r7, r3
 801043e:	7812      	ldrb	r2, [r2, #0]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	d3b7      	bcc.n	80103b6 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 8010446:	46c0      	nop			; (mov r8, r8)
 8010448:	46bd      	mov	sp, r7
 801044a:	b004      	add	sp, #16
 801044c:	bd80      	pop	{r7, pc}
 801044e:	46c0      	nop			; (mov r8, r8)
 8010450:	20000d54 	.word	0x20000d54

08010454 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8010454:	b580      	push	{r7, lr}
 8010456:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8010458:	4b02      	ldr	r3, [pc, #8]	; (8010464 <LoRaMacConfirmQueueGetCnt+0x10>)
 801045a:	691b      	ldr	r3, [r3, #16]
 801045c:	7d1b      	ldrb	r3, [r3, #20]
}
 801045e:	0018      	movs	r0, r3
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}
 8010464:	20000d54 	.word	0x20000d54

08010468 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8010468:	b580      	push	{r7, lr}
 801046a:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801046c:	4b05      	ldr	r3, [pc, #20]	; (8010484 <LoRaMacConfirmQueueIsFull+0x1c>)
 801046e:	691b      	ldr	r3, [r3, #16]
 8010470:	7d1b      	ldrb	r3, [r3, #20]
 8010472:	2b04      	cmp	r3, #4
 8010474:	d901      	bls.n	801047a <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 8010476:	2301      	movs	r3, #1
 8010478:	e000      	b.n	801047c <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 801047a:	2300      	movs	r3, #0
    }
}
 801047c:	0018      	movs	r0, r3
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	46c0      	nop			; (mov r8, r8)
 8010484:	20000d54 	.word	0x20000d54

08010488 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8010488:	b590      	push	{r4, r7, lr}
 801048a:	b08f      	sub	sp, #60	; 0x3c
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	0008      	movs	r0, r1
 8010492:	0011      	movs	r1, r2
 8010494:	607b      	str	r3, [r7, #4]
 8010496:	230a      	movs	r3, #10
 8010498:	18fb      	adds	r3, r7, r3
 801049a:	1c02      	adds	r2, r0, #0
 801049c:	801a      	strh	r2, [r3, #0]
 801049e:	2309      	movs	r3, #9
 80104a0:	18fb      	adds	r3, r7, r3
 80104a2:	1c0a      	adds	r2, r1, #0
 80104a4:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d101      	bne.n	80104b0 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80104ac:	2307      	movs	r3, #7
 80104ae:	e0e9      	b.n	8010684 <PayloadEncrypt+0x1fc>
    }

    uint8_t bufferIndex = 0;
 80104b0:	2337      	movs	r3, #55	; 0x37
 80104b2:	18fb      	adds	r3, r7, r3
 80104b4:	2200      	movs	r2, #0
 80104b6:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 80104b8:	2334      	movs	r3, #52	; 0x34
 80104ba:	18fb      	adds	r3, r7, r3
 80104bc:	2201      	movs	r2, #1
 80104be:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 80104c0:	2320      	movs	r3, #32
 80104c2:	18fb      	adds	r3, r7, r3
 80104c4:	0018      	movs	r0, r3
 80104c6:	2310      	movs	r3, #16
 80104c8:	001a      	movs	r2, r3
 80104ca:	2100      	movs	r1, #0
 80104cc:	f00e faca 	bl	801ea64 <memset>
    uint8_t aBlock[16] = { 0 };
 80104d0:	2110      	movs	r1, #16
 80104d2:	000c      	movs	r4, r1
 80104d4:	187b      	adds	r3, r7, r1
 80104d6:	0018      	movs	r0, r3
 80104d8:	2310      	movs	r3, #16
 80104da:	001a      	movs	r2, r3
 80104dc:	2100      	movs	r1, #0
 80104de:	f00e fac1 	bl	801ea64 <memset>

    aBlock[0] = 0x01;
 80104e2:	0021      	movs	r1, r4
 80104e4:	187b      	adds	r3, r7, r1
 80104e6:	2201      	movs	r2, #1
 80104e8:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 80104ea:	187b      	adds	r3, r7, r1
 80104ec:	2240      	movs	r2, #64	; 0x40
 80104ee:	2008      	movs	r0, #8
 80104f0:	4684      	mov	ip, r0
 80104f2:	44bc      	add	ip, r7
 80104f4:	4462      	add	r2, ip
 80104f6:	7812      	ldrb	r2, [r2, #0]
 80104f8:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	187b      	adds	r3, r7, r1
 8010500:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	0a1b      	lsrs	r3, r3, #8
 8010506:	b2da      	uxtb	r2, r3
 8010508:	187b      	adds	r3, r7, r1
 801050a:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	0c1b      	lsrs	r3, r3, #16
 8010510:	b2da      	uxtb	r2, r3
 8010512:	187b      	adds	r3, r7, r1
 8010514:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	0e1b      	lsrs	r3, r3, #24
 801051a:	b2da      	uxtb	r2, r3
 801051c:	187b      	adds	r3, r7, r1
 801051e:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8010520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010522:	b2da      	uxtb	r2, r3
 8010524:	187b      	adds	r3, r7, r1
 8010526:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801052a:	0a1b      	lsrs	r3, r3, #8
 801052c:	b2da      	uxtb	r2, r3
 801052e:	187b      	adds	r3, r7, r1
 8010530:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010534:	0c1b      	lsrs	r3, r3, #16
 8010536:	b2da      	uxtb	r2, r3
 8010538:	187b      	adds	r3, r7, r1
 801053a:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801053c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801053e:	0e1b      	lsrs	r3, r3, #24
 8010540:	b2da      	uxtb	r2, r3
 8010542:	187b      	adds	r3, r7, r1
 8010544:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 8010546:	e04f      	b.n	80105e8 <PayloadEncrypt+0x160>
    {
        aBlock[15] = ctr & 0xFF;
 8010548:	2134      	movs	r1, #52	; 0x34
 801054a:	187b      	adds	r3, r7, r1
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	b2da      	uxtb	r2, r3
 8010550:	2010      	movs	r0, #16
 8010552:	183b      	adds	r3, r7, r0
 8010554:	73da      	strb	r2, [r3, #15]
        ctr++;
 8010556:	187b      	adds	r3, r7, r1
 8010558:	881a      	ldrh	r2, [r3, #0]
 801055a:	187b      	adds	r3, r7, r1
 801055c:	3201      	adds	r2, #1
 801055e:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8010560:	2320      	movs	r3, #32
 8010562:	18f9      	adds	r1, r7, r3
 8010564:	2309      	movs	r3, #9
 8010566:	18fb      	adds	r3, r7, r3
 8010568:	781a      	ldrb	r2, [r3, #0]
 801056a:	1838      	adds	r0, r7, r0
 801056c:	000b      	movs	r3, r1
 801056e:	2110      	movs	r1, #16
 8010570:	f7f9 fc02 	bl	8009d78 <SecureElementAesEncrypt>
 8010574:	1e03      	subs	r3, r0, #0
 8010576:	d001      	beq.n	801057c <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010578:	230c      	movs	r3, #12
 801057a:	e083      	b.n	8010684 <PayloadEncrypt+0x1fc>
        }

        for( uint8_t i = 0; i < 16; i++ )
 801057c:	2333      	movs	r3, #51	; 0x33
 801057e:	18fb      	adds	r3, r7, r3
 8010580:	2200      	movs	r2, #0
 8010582:	701a      	strb	r2, [r3, #0]
 8010584:	e01f      	b.n	80105c6 <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010586:	2037      	movs	r0, #55	; 0x37
 8010588:	183b      	adds	r3, r7, r0
 801058a:	781a      	ldrb	r2, [r3, #0]
 801058c:	2433      	movs	r4, #51	; 0x33
 801058e:	193b      	adds	r3, r7, r4
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	18d3      	adds	r3, r2, r3
 8010594:	001a      	movs	r2, r3
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	189b      	adds	r3, r3, r2
 801059a:	7819      	ldrb	r1, [r3, #0]
 801059c:	193b      	adds	r3, r7, r4
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	2220      	movs	r2, #32
 80105a2:	18ba      	adds	r2, r7, r2
 80105a4:	5cd2      	ldrb	r2, [r2, r3]
 80105a6:	183b      	adds	r3, r7, r0
 80105a8:	7818      	ldrb	r0, [r3, #0]
 80105aa:	193b      	adds	r3, r7, r4
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	18c3      	adds	r3, r0, r3
 80105b0:	0018      	movs	r0, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	181b      	adds	r3, r3, r0
 80105b6:	404a      	eors	r2, r1
 80105b8:	b2d2      	uxtb	r2, r2
 80105ba:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
 80105bc:	193b      	adds	r3, r7, r4
 80105be:	781a      	ldrb	r2, [r3, #0]
 80105c0:	193b      	adds	r3, r7, r4
 80105c2:	3201      	adds	r2, #1
 80105c4:	701a      	strb	r2, [r3, #0]
 80105c6:	2333      	movs	r3, #51	; 0x33
 80105c8:	18fb      	adds	r3, r7, r3
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	2b0f      	cmp	r3, #15
 80105ce:	d9da      	bls.n	8010586 <PayloadEncrypt+0xfe>
        }
        size -= 16;
 80105d0:	220a      	movs	r2, #10
 80105d2:	18bb      	adds	r3, r7, r2
 80105d4:	18ba      	adds	r2, r7, r2
 80105d6:	8812      	ldrh	r2, [r2, #0]
 80105d8:	3a10      	subs	r2, #16
 80105da:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 80105dc:	2237      	movs	r2, #55	; 0x37
 80105de:	18bb      	adds	r3, r7, r2
 80105e0:	18ba      	adds	r2, r7, r2
 80105e2:	7812      	ldrb	r2, [r2, #0]
 80105e4:	3210      	adds	r2, #16
 80105e6:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
 80105e8:	230a      	movs	r3, #10
 80105ea:	18fb      	adds	r3, r7, r3
 80105ec:	881b      	ldrh	r3, [r3, #0]
 80105ee:	2b0f      	cmp	r3, #15
 80105f0:	d8aa      	bhi.n	8010548 <PayloadEncrypt+0xc0>
    }

    if( size > 0 )
 80105f2:	230a      	movs	r3, #10
 80105f4:	18fb      	adds	r3, r7, r3
 80105f6:	881b      	ldrh	r3, [r3, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d042      	beq.n	8010682 <PayloadEncrypt+0x1fa>
    {
        aBlock[15] = ctr & 0xFF;
 80105fc:	2334      	movs	r3, #52	; 0x34
 80105fe:	18fb      	adds	r3, r7, r3
 8010600:	881b      	ldrh	r3, [r3, #0]
 8010602:	b2da      	uxtb	r2, r3
 8010604:	2010      	movs	r0, #16
 8010606:	183b      	adds	r3, r7, r0
 8010608:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801060a:	2320      	movs	r3, #32
 801060c:	18f9      	adds	r1, r7, r3
 801060e:	2309      	movs	r3, #9
 8010610:	18fb      	adds	r3, r7, r3
 8010612:	781a      	ldrb	r2, [r3, #0]
 8010614:	1838      	adds	r0, r7, r0
 8010616:	000b      	movs	r3, r1
 8010618:	2110      	movs	r1, #16
 801061a:	f7f9 fbad 	bl	8009d78 <SecureElementAesEncrypt>
 801061e:	1e03      	subs	r3, r0, #0
 8010620:	d001      	beq.n	8010626 <PayloadEncrypt+0x19e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010622:	230c      	movs	r3, #12
 8010624:	e02e      	b.n	8010684 <PayloadEncrypt+0x1fc>
        }
        for( uint8_t i = 0; i < size; i++ )
 8010626:	2332      	movs	r3, #50	; 0x32
 8010628:	18fb      	adds	r3, r7, r3
 801062a:	2200      	movs	r2, #0
 801062c:	701a      	strb	r2, [r3, #0]
 801062e:	e01f      	b.n	8010670 <PayloadEncrypt+0x1e8>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010630:	2037      	movs	r0, #55	; 0x37
 8010632:	183b      	adds	r3, r7, r0
 8010634:	781a      	ldrb	r2, [r3, #0]
 8010636:	2432      	movs	r4, #50	; 0x32
 8010638:	193b      	adds	r3, r7, r4
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	18d3      	adds	r3, r2, r3
 801063e:	001a      	movs	r2, r3
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	189b      	adds	r3, r3, r2
 8010644:	7819      	ldrb	r1, [r3, #0]
 8010646:	193b      	adds	r3, r7, r4
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	2220      	movs	r2, #32
 801064c:	18ba      	adds	r2, r7, r2
 801064e:	5cd2      	ldrb	r2, [r2, r3]
 8010650:	183b      	adds	r3, r7, r0
 8010652:	7818      	ldrb	r0, [r3, #0]
 8010654:	193b      	adds	r3, r7, r4
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	18c3      	adds	r3, r0, r3
 801065a:	0018      	movs	r0, r3
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	181b      	adds	r3, r3, r0
 8010660:	404a      	eors	r2, r1
 8010662:	b2d2      	uxtb	r2, r2
 8010664:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 8010666:	193b      	adds	r3, r7, r4
 8010668:	781a      	ldrb	r2, [r3, #0]
 801066a:	193b      	adds	r3, r7, r4
 801066c:	3201      	adds	r2, #1
 801066e:	701a      	strb	r2, [r3, #0]
 8010670:	2332      	movs	r3, #50	; 0x32
 8010672:	18fb      	adds	r3, r7, r3
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	b29b      	uxth	r3, r3
 8010678:	220a      	movs	r2, #10
 801067a:	18ba      	adds	r2, r7, r2
 801067c:	8812      	ldrh	r2, [r2, #0]
 801067e:	429a      	cmp	r2, r3
 8010680:	d8d6      	bhi.n	8010630 <PayloadEncrypt+0x1a8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010682:	2300      	movs	r3, #0
}
 8010684:	0018      	movs	r0, r3
 8010686:	46bd      	mov	sp, r7
 8010688:	b00f      	add	sp, #60	; 0x3c
 801068a:	bd90      	pop	{r4, r7, pc}

0801068c <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
 801068c:	b590      	push	{r4, r7, lr}
 801068e:	b08d      	sub	sp, #52	; 0x34
 8010690:	af00      	add	r7, sp, #0
 8010692:	0004      	movs	r4, r0
 8010694:	6039      	str	r1, [r7, #0]
 8010696:	0010      	movs	r0, r2
 8010698:	0019      	movs	r1, r3
 801069a:	1dbb      	adds	r3, r7, #6
 801069c:	1c22      	adds	r2, r4, #0
 801069e:	801a      	strh	r2, [r3, #0]
 80106a0:	1d7b      	adds	r3, r7, #5
 80106a2:	1c02      	adds	r2, r0, #0
 80106a4:	701a      	strb	r2, [r3, #0]
 80106a6:	1d3b      	adds	r3, r7, #4
 80106a8:	1c0a      	adds	r2, r1, #0
 80106aa:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 80106ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d101      	bne.n	80106b6 <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80106b2:	2307      	movs	r3, #7
 80106b4:	e09b      	b.n	80107ee <FOptsEncrypt+0x162>
    }

    uint8_t bufferIndex = 0;
 80106b6:	232e      	movs	r3, #46	; 0x2e
 80106b8:	18fb      	adds	r3, r7, r3
 80106ba:	2200      	movs	r2, #0
 80106bc:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 80106be:	231c      	movs	r3, #28
 80106c0:	18fb      	adds	r3, r7, r3
 80106c2:	0018      	movs	r0, r3
 80106c4:	2310      	movs	r3, #16
 80106c6:	001a      	movs	r2, r3
 80106c8:	2100      	movs	r1, #0
 80106ca:	f00e f9cb 	bl	801ea64 <memset>
    uint8_t aBlock[16] = { 0 };
 80106ce:	240c      	movs	r4, #12
 80106d0:	193b      	adds	r3, r7, r4
 80106d2:	0018      	movs	r0, r3
 80106d4:	2310      	movs	r3, #16
 80106d6:	001a      	movs	r2, r3
 80106d8:	2100      	movs	r1, #0
 80106da:	f00e f9c3 	bl	801ea64 <memset>

    aBlock[0] = 0x01;
 80106de:	193b      	adds	r3, r7, r4
 80106e0:	2201      	movs	r2, #1
 80106e2:	701a      	strb	r2, [r3, #0]

    switch( fCntID )
 80106e4:	1d3b      	adds	r3, r7, #4
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d008      	beq.n	80106fe <FOptsEncrypt+0x72>
 80106ec:	2b02      	cmp	r3, #2
 80106ee:	d00b      	beq.n	8010708 <FOptsEncrypt+0x7c>
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10e      	bne.n	8010712 <FOptsEncrypt+0x86>
    {
        case FCNT_UP:
        {
            aBlock[4] = 0x01;
 80106f4:	230c      	movs	r3, #12
 80106f6:	18fb      	adds	r3, r7, r3
 80106f8:	2201      	movs	r2, #1
 80106fa:	711a      	strb	r2, [r3, #4]
            break;
 80106fc:	e00b      	b.n	8010716 <FOptsEncrypt+0x8a>
        }
        case N_FCNT_DOWN:
        {
            aBlock[4] = 0x01;
 80106fe:	230c      	movs	r3, #12
 8010700:	18fb      	adds	r3, r7, r3
 8010702:	2201      	movs	r2, #1
 8010704:	711a      	strb	r2, [r3, #4]
            break;
 8010706:	e006      	b.n	8010716 <FOptsEncrypt+0x8a>
        }
        case A_FCNT_DOWN:
        {
            aBlock[4] = 0x02;
 8010708:	230c      	movs	r3, #12
 801070a:	18fb      	adds	r3, r7, r3
 801070c:	2202      	movs	r2, #2
 801070e:	711a      	strb	r2, [r3, #4]
            break;
 8010710:	e001      	b.n	8010716 <FOptsEncrypt+0x8a>
        }
        default:
            return LORAMAC_CRYPTO_FAIL_PARAM;
 8010712:	2306      	movs	r3, #6
 8010714:	e06b      	b.n	80107ee <FOptsEncrypt+0x162>
    }

    aBlock[5] = dir;
 8010716:	210c      	movs	r1, #12
 8010718:	187b      	adds	r3, r7, r1
 801071a:	1d7a      	adds	r2, r7, #5
 801071c:	7812      	ldrb	r2, [r2, #0]
 801071e:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	b2da      	uxtb	r2, r3
 8010724:	187b      	adds	r3, r7, r1
 8010726:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	0a1b      	lsrs	r3, r3, #8
 801072c:	b2da      	uxtb	r2, r3
 801072e:	187b      	adds	r3, r7, r1
 8010730:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	0c1b      	lsrs	r3, r3, #16
 8010736:	b2da      	uxtb	r2, r3
 8010738:	187b      	adds	r3, r7, r1
 801073a:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	0e1b      	lsrs	r3, r3, #24
 8010740:	b2da      	uxtb	r2, r3
 8010742:	187b      	adds	r3, r7, r1
 8010744:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8010746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010748:	b2da      	uxtb	r2, r3
 801074a:	187b      	adds	r3, r7, r1
 801074c:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801074e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010750:	0a1b      	lsrs	r3, r3, #8
 8010752:	b2da      	uxtb	r2, r3
 8010754:	187b      	adds	r3, r7, r1
 8010756:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801075a:	0c1b      	lsrs	r3, r3, #16
 801075c:	b2da      	uxtb	r2, r3
 801075e:	187b      	adds	r3, r7, r1
 8010760:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8010762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010764:	0e1b      	lsrs	r3, r3, #24
 8010766:	b2da      	uxtb	r2, r3
 8010768:	187b      	adds	r3, r7, r1
 801076a:	735a      	strb	r2, [r3, #13]

    aBlock[15] = 0x01;
 801076c:	187b      	adds	r3, r7, r1
 801076e:	2201      	movs	r2, #1
 8010770:	73da      	strb	r2, [r3, #15]

    if( size > 0 )
 8010772:	1dbb      	adds	r3, r7, #6
 8010774:	881b      	ldrh	r3, [r3, #0]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d038      	beq.n	80107ec <FOptsEncrypt+0x160>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801077a:	231c      	movs	r3, #28
 801077c:	18fb      	adds	r3, r7, r3
 801077e:	220c      	movs	r2, #12
 8010780:	18b8      	adds	r0, r7, r2
 8010782:	2206      	movs	r2, #6
 8010784:	2110      	movs	r1, #16
 8010786:	f7f9 faf7 	bl	8009d78 <SecureElementAesEncrypt>
 801078a:	1e03      	subs	r3, r0, #0
 801078c:	d001      	beq.n	8010792 <FOptsEncrypt+0x106>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801078e:	230c      	movs	r3, #12
 8010790:	e02d      	b.n	80107ee <FOptsEncrypt+0x162>
        }
        for( uint8_t i = 0; i < size; i++ )
 8010792:	232f      	movs	r3, #47	; 0x2f
 8010794:	18fb      	adds	r3, r7, r3
 8010796:	2200      	movs	r2, #0
 8010798:	701a      	strb	r2, [r3, #0]
 801079a:	e01f      	b.n	80107dc <FOptsEncrypt+0x150>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801079c:	202e      	movs	r0, #46	; 0x2e
 801079e:	183b      	adds	r3, r7, r0
 80107a0:	781a      	ldrb	r2, [r3, #0]
 80107a2:	242f      	movs	r4, #47	; 0x2f
 80107a4:	193b      	adds	r3, r7, r4
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	18d3      	adds	r3, r2, r3
 80107aa:	001a      	movs	r2, r3
 80107ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107ae:	189b      	adds	r3, r3, r2
 80107b0:	7819      	ldrb	r1, [r3, #0]
 80107b2:	193b      	adds	r3, r7, r4
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	221c      	movs	r2, #28
 80107b8:	18ba      	adds	r2, r7, r2
 80107ba:	5cd2      	ldrb	r2, [r2, r3]
 80107bc:	183b      	adds	r3, r7, r0
 80107be:	7818      	ldrb	r0, [r3, #0]
 80107c0:	193b      	adds	r3, r7, r4
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	18c3      	adds	r3, r0, r3
 80107c6:	0018      	movs	r0, r3
 80107c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107ca:	181b      	adds	r3, r3, r0
 80107cc:	404a      	eors	r2, r1
 80107ce:	b2d2      	uxtb	r2, r2
 80107d0:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 80107d2:	193b      	adds	r3, r7, r4
 80107d4:	781a      	ldrb	r2, [r3, #0]
 80107d6:	193b      	adds	r3, r7, r4
 80107d8:	3201      	adds	r2, #1
 80107da:	701a      	strb	r2, [r3, #0]
 80107dc:	232f      	movs	r3, #47	; 0x2f
 80107de:	18fb      	adds	r3, r7, r3
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	1dba      	adds	r2, r7, #6
 80107e6:	8812      	ldrh	r2, [r2, #0]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d8d7      	bhi.n	801079c <FOptsEncrypt+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	0018      	movs	r0, r3
 80107f0:	46bd      	mov	sp, r7
 80107f2:	b00d      	add	sp, #52	; 0x34
 80107f4:	bd90      	pop	{r4, r7, pc}

080107f6 <LoraMacCryptoComputeCmac>:
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac );

static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
 80107f6:	b5b0      	push	{r4, r5, r7, lr}
 80107f8:	b084      	sub	sp, #16
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	60f8      	str	r0, [r7, #12]
 80107fe:	0008      	movs	r0, r1
 8010800:	0011      	movs	r1, r2
 8010802:	607b      	str	r3, [r7, #4]
 8010804:	250a      	movs	r5, #10
 8010806:	197b      	adds	r3, r7, r5
 8010808:	1c02      	adds	r2, r0, #0
 801080a:	801a      	strh	r2, [r3, #0]
 801080c:	2009      	movs	r0, #9
 801080e:	183b      	adds	r3, r7, r0
 8010810:	1c0a      	adds	r2, r1, #0
 8010812:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8010814:	687c      	ldr	r4, [r7, #4]
 8010816:	183b      	adds	r3, r7, r0
 8010818:	781a      	ldrb	r2, [r3, #0]
 801081a:	197b      	adds	r3, r7, r5
 801081c:	8819      	ldrh	r1, [r3, #0]
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	0023      	movs	r3, r4
 8010822:	f7f9 fa43 	bl	8009cac <SecureElementComputeAesCmac>
 8010826:	1e03      	subs	r3, r0, #0
 8010828:	d001      	beq.n	801082e <LoraMacCryptoComputeCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801082a:	230c      	movs	r3, #12
 801082c:	e000      	b.n	8010830 <LoraMacCryptoComputeCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801082e:	2300      	movs	r3, #0
}
 8010830:	0018      	movs	r0, r3
 8010832:	46bd      	mov	sp, r7
 8010834:	b004      	add	sp, #16
 8010836:	bdb0      	pop	{r4, r5, r7, pc}

08010838 <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
 8010838:	b5b0      	push	{r4, r5, r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	0008      	movs	r0, r1
 8010842:	0011      	movs	r1, r2
 8010844:	607b      	str	r3, [r7, #4]
 8010846:	250a      	movs	r5, #10
 8010848:	197b      	adds	r3, r7, r5
 801084a:	1c02      	adds	r2, r0, #0
 801084c:	801a      	strh	r2, [r3, #0]
 801084e:	2009      	movs	r0, #9
 8010850:	183b      	adds	r3, r7, r0
 8010852:	1c0a      	adds	r2, r1, #0
 8010854:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010856:	183b      	adds	r3, r7, r0
 8010858:	781c      	ldrb	r4, [r3, #0]
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	197b      	adds	r3, r7, r5
 801085e:	8819      	ldrh	r1, [r3, #0]
 8010860:	68f8      	ldr	r0, [r7, #12]
 8010862:	0023      	movs	r3, r4
 8010864:	f7f9 fa47 	bl	8009cf6 <SecureElementVerifyAesCmac>
 8010868:	1e03      	subs	r3, r0, #0
 801086a:	d001      	beq.n	8010870 <VerifyCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801086c:	230c      	movs	r3, #12
 801086e:	e000      	b.n	8010872 <VerifyCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010870:	2300      	movs	r3, #0
}
 8010872:	0018      	movs	r0, r3
 8010874:	46bd      	mov	sp, r7
 8010876:	b004      	add	sp, #16
 8010878:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801087c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801087c:	b5b0      	push	{r4, r5, r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	0005      	movs	r5, r0
 8010884:	000c      	movs	r4, r1
 8010886:	0010      	movs	r0, r2
 8010888:	0019      	movs	r1, r3
 801088a:	1dbb      	adds	r3, r7, #6
 801088c:	1c2a      	adds	r2, r5, #0
 801088e:	801a      	strh	r2, [r3, #0]
 8010890:	1d7b      	adds	r3, r7, #5
 8010892:	1c22      	adds	r2, r4, #0
 8010894:	701a      	strb	r2, [r3, #0]
 8010896:	1d3b      	adds	r3, r7, #4
 8010898:	1c02      	adds	r2, r0, #0
 801089a:	701a      	strb	r2, [r3, #0]
 801089c:	1cfb      	adds	r3, r7, #3
 801089e:	1c0a      	adds	r2, r1, #0
 80108a0:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 80108a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d101      	bne.n	80108ac <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80108a8:	2307      	movs	r3, #7
 80108aa:	e079      	b.n	80109a0 <PrepareB0+0x124>
    }

    b0[0] = 0x49;
 80108ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ae:	2249      	movs	r2, #73	; 0x49
 80108b0:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 80108b2:	1d3b      	adds	r3, r7, #4
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d024      	beq.n	8010904 <PrepareB0+0x88>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 80108ba:	230e      	movs	r3, #14
 80108bc:	18fb      	adds	r3, r7, r3
 80108be:	2200      	movs	r2, #0
 80108c0:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
 80108c2:	1cfb      	adds	r3, r7, #3
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d106      	bne.n	80108d8 <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
 80108ca:	4b37      	ldr	r3, [pc, #220]	; (80109a8 <PrepareB0+0x12c>)
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	695a      	ldr	r2, [r3, #20]
 80108d0:	230e      	movs	r3, #14
 80108d2:	18fb      	adds	r3, r7, r3
 80108d4:	801a      	strh	r2, [r3, #0]
 80108d6:	e005      	b.n	80108e4 <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
 80108d8:	4b33      	ldr	r3, [pc, #204]	; (80109a8 <PrepareB0+0x12c>)
 80108da:	689b      	ldr	r3, [r3, #8]
 80108dc:	689a      	ldr	r2, [r3, #8]
 80108de:	230e      	movs	r3, #14
 80108e0:	18fb      	adds	r3, r7, r3
 80108e2:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
 80108e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e6:	3301      	adds	r3, #1
 80108e8:	210e      	movs	r1, #14
 80108ea:	187a      	adds	r2, r7, r1
 80108ec:	8812      	ldrh	r2, [r2, #0]
 80108ee:	b2d2      	uxtb	r2, r2
 80108f0:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 80108f2:	187b      	adds	r3, r7, r1
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	0a1b      	lsrs	r3, r3, #8
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fc:	3302      	adds	r3, #2
 80108fe:	b2d2      	uxtb	r2, r2
 8010900:	701a      	strb	r2, [r3, #0]
 8010902:	e007      	b.n	8010914 <PrepareB0+0x98>
    }
    else
    {
        b0[1] = 0x00;
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	3301      	adds	r3, #1
 8010908:	2200      	movs	r2, #0
 801090a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	3302      	adds	r3, #2
 8010910:	2200      	movs	r2, #0
 8010912:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8010914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010916:	3303      	adds	r3, #3
 8010918:	2200      	movs	r2, #0
 801091a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091e:	3304      	adds	r3, #4
 8010920:	2200      	movs	r2, #0
 8010922:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8010924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010926:	3305      	adds	r3, #5
 8010928:	1cfa      	adds	r2, r7, #3
 801092a:	7812      	ldrb	r2, [r2, #0]
 801092c:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801092e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010930:	3306      	adds	r3, #6
 8010932:	6a3a      	ldr	r2, [r7, #32]
 8010934:	b2d2      	uxtb	r2, r2
 8010936:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8010938:	6a3b      	ldr	r3, [r7, #32]
 801093a:	0a1a      	lsrs	r2, r3, #8
 801093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093e:	3307      	adds	r3, #7
 8010940:	b2d2      	uxtb	r2, r2
 8010942:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8010944:	6a3b      	ldr	r3, [r7, #32]
 8010946:	0c1a      	lsrs	r2, r3, #16
 8010948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094a:	3308      	adds	r3, #8
 801094c:	b2d2      	uxtb	r2, r2
 801094e:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8010950:	6a3b      	ldr	r3, [r7, #32]
 8010952:	0e1a      	lsrs	r2, r3, #24
 8010954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010956:	3309      	adds	r3, #9
 8010958:	b2d2      	uxtb	r2, r2
 801095a:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095e:	330a      	adds	r3, #10
 8010960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010962:	b2d2      	uxtb	r2, r2
 8010964:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8010966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010968:	0a1a      	lsrs	r2, r3, #8
 801096a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096c:	330b      	adds	r3, #11
 801096e:	b2d2      	uxtb	r2, r2
 8010970:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8010972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010974:	0c1a      	lsrs	r2, r3, #16
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	330c      	adds	r3, #12
 801097a:	b2d2      	uxtb	r2, r2
 801097c:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010980:	0e1a      	lsrs	r2, r3, #24
 8010982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010984:	330d      	adds	r3, #13
 8010986:	b2d2      	uxtb	r2, r2
 8010988:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098c:	330e      	adds	r3, #14
 801098e:	2200      	movs	r2, #0
 8010990:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8010992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010994:	330f      	adds	r3, #15
 8010996:	1dba      	adds	r2, r7, #6
 8010998:	8812      	ldrh	r2, [r2, #0]
 801099a:	b2d2      	uxtb	r2, r2
 801099c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801099e:	2300      	movs	r3, #0
}
 80109a0:	0018      	movs	r0, r3
 80109a2:	46bd      	mov	sp, r7
 80109a4:	b004      	add	sp, #16
 80109a6:	bdb0      	pop	{r4, r5, r7, pc}
 80109a8:	20000d68 	.word	0x20000d68

080109ac <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80109ac:	b5b0      	push	{r4, r5, r7, lr}
 80109ae:	b0ca      	sub	sp, #296	; 0x128
 80109b0:	af04      	add	r7, sp, #16
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	000c      	movs	r4, r1
 80109b6:	0010      	movs	r0, r2
 80109b8:	0019      	movs	r1, r3
 80109ba:	4b47      	ldr	r3, [pc, #284]	; (8010ad8 <ComputeCmacB0+0x12c>)
 80109bc:	228c      	movs	r2, #140	; 0x8c
 80109be:	0052      	lsls	r2, r2, #1
 80109c0:	4694      	mov	ip, r2
 80109c2:	44bc      	add	ip, r7
 80109c4:	4463      	add	r3, ip
 80109c6:	1c22      	adds	r2, r4, #0
 80109c8:	801a      	strh	r2, [r3, #0]
 80109ca:	4b44      	ldr	r3, [pc, #272]	; (8010adc <ComputeCmacB0+0x130>)
 80109cc:	228c      	movs	r2, #140	; 0x8c
 80109ce:	0052      	lsls	r2, r2, #1
 80109d0:	4694      	mov	ip, r2
 80109d2:	44bc      	add	ip, r7
 80109d4:	4463      	add	r3, ip
 80109d6:	1c02      	adds	r2, r0, #0
 80109d8:	701a      	strb	r2, [r3, #0]
 80109da:	4b41      	ldr	r3, [pc, #260]	; (8010ae0 <ComputeCmacB0+0x134>)
 80109dc:	228c      	movs	r2, #140	; 0x8c
 80109de:	0052      	lsls	r2, r2, #1
 80109e0:	4694      	mov	ip, r2
 80109e2:	44bc      	add	ip, r7
 80109e4:	4463      	add	r3, ip
 80109e6:	1c0a      	adds	r2, r1, #0
 80109e8:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d005      	beq.n	80109fc <ComputeCmacB0+0x50>
 80109f0:	239a      	movs	r3, #154	; 0x9a
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	18fb      	adds	r3, r7, r3
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d101      	bne.n	8010a00 <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80109fc:	2307      	movs	r3, #7
 80109fe:	e066      	b.n	8010ace <ComputeCmacB0+0x122>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010a00:	4b35      	ldr	r3, [pc, #212]	; (8010ad8 <ComputeCmacB0+0x12c>)
 8010a02:	228c      	movs	r2, #140	; 0x8c
 8010a04:	0052      	lsls	r2, r2, #1
 8010a06:	4694      	mov	ip, r2
 8010a08:	44bc      	add	ip, r7
 8010a0a:	4463      	add	r3, ip
 8010a0c:	881a      	ldrh	r2, [r3, #0]
 8010a0e:	2380      	movs	r3, #128	; 0x80
 8010a10:	005b      	lsls	r3, r3, #1
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d901      	bls.n	8010a1a <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010a16:	230b      	movs	r3, #11
 8010a18:	e059      	b.n	8010ace <ComputeCmacB0+0x122>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8010a1a:	2388      	movs	r3, #136	; 0x88
 8010a1c:	005a      	lsls	r2, r3, #1
 8010a1e:	2508      	movs	r5, #8
 8010a20:	197b      	adds	r3, r7, r5
 8010a22:	2100      	movs	r1, #0
 8010a24:	0018      	movs	r0, r3
 8010a26:	f004 fd5b 	bl	80154e0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8010a2a:	2394      	movs	r3, #148	; 0x94
 8010a2c:	005b      	lsls	r3, r3, #1
 8010a2e:	18fb      	adds	r3, r7, r3
 8010a30:	781c      	ldrb	r4, [r3, #0]
 8010a32:	4b2b      	ldr	r3, [pc, #172]	; (8010ae0 <ComputeCmacB0+0x134>)
 8010a34:	228c      	movs	r2, #140	; 0x8c
 8010a36:	0052      	lsls	r2, r2, #1
 8010a38:	4694      	mov	ip, r2
 8010a3a:	44bc      	add	ip, r7
 8010a3c:	4463      	add	r3, ip
 8010a3e:	781a      	ldrb	r2, [r3, #0]
 8010a40:	4b26      	ldr	r3, [pc, #152]	; (8010adc <ComputeCmacB0+0x130>)
 8010a42:	218c      	movs	r1, #140	; 0x8c
 8010a44:	0049      	lsls	r1, r1, #1
 8010a46:	468c      	mov	ip, r1
 8010a48:	44bc      	add	ip, r7
 8010a4a:	4463      	add	r3, ip
 8010a4c:	7819      	ldrb	r1, [r3, #0]
 8010a4e:	4b22      	ldr	r3, [pc, #136]	; (8010ad8 <ComputeCmacB0+0x12c>)
 8010a50:	208c      	movs	r0, #140	; 0x8c
 8010a52:	0040      	lsls	r0, r0, #1
 8010a54:	4684      	mov	ip, r0
 8010a56:	44bc      	add	ip, r7
 8010a58:	4463      	add	r3, ip
 8010a5a:	8818      	ldrh	r0, [r3, #0]
 8010a5c:	197b      	adds	r3, r7, r5
 8010a5e:	9302      	str	r3, [sp, #8]
 8010a60:	2398      	movs	r3, #152	; 0x98
 8010a62:	005b      	lsls	r3, r3, #1
 8010a64:	18fb      	adds	r3, r7, r3
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	9301      	str	r3, [sp, #4]
 8010a6a:	2396      	movs	r3, #150	; 0x96
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	18fb      	adds	r3, r7, r3
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	9300      	str	r3, [sp, #0]
 8010a74:	0023      	movs	r3, r4
 8010a76:	f7ff ff01 	bl	801087c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010a7a:	197b      	adds	r3, r7, r5
 8010a7c:	3310      	adds	r3, #16
 8010a7e:	4a16      	ldr	r2, [pc, #88]	; (8010ad8 <ComputeCmacB0+0x12c>)
 8010a80:	218c      	movs	r1, #140	; 0x8c
 8010a82:	0049      	lsls	r1, r1, #1
 8010a84:	468c      	mov	ip, r1
 8010a86:	44bc      	add	ip, r7
 8010a88:	4462      	add	r2, ip
 8010a8a:	8812      	ldrh	r2, [r2, #0]
 8010a8c:	6879      	ldr	r1, [r7, #4]
 8010a8e:	0018      	movs	r0, r3
 8010a90:	f004 fcea 	bl	8015468 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8010a94:	4b10      	ldr	r3, [pc, #64]	; (8010ad8 <ComputeCmacB0+0x12c>)
 8010a96:	228c      	movs	r2, #140	; 0x8c
 8010a98:	0052      	lsls	r2, r2, #1
 8010a9a:	4694      	mov	ip, r2
 8010a9c:	44bc      	add	ip, r7
 8010a9e:	4463      	add	r3, ip
 8010aa0:	881b      	ldrh	r3, [r3, #0]
 8010aa2:	3310      	adds	r3, #16
 8010aa4:	b299      	uxth	r1, r3
 8010aa6:	239a      	movs	r3, #154	; 0x9a
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	18fb      	adds	r3, r7, r3
 8010aac:	681c      	ldr	r4, [r3, #0]
 8010aae:	4b0b      	ldr	r3, [pc, #44]	; (8010adc <ComputeCmacB0+0x130>)
 8010ab0:	228c      	movs	r2, #140	; 0x8c
 8010ab2:	0052      	lsls	r2, r2, #1
 8010ab4:	4694      	mov	ip, r2
 8010ab6:	44bc      	add	ip, r7
 8010ab8:	4463      	add	r3, ip
 8010aba:	781a      	ldrb	r2, [r3, #0]
 8010abc:	1978      	adds	r0, r7, r5
 8010abe:	0023      	movs	r3, r4
 8010ac0:	f7f9 f8f4 	bl	8009cac <SecureElementComputeAesCmac>
 8010ac4:	1e03      	subs	r3, r0, #0
 8010ac6:	d001      	beq.n	8010acc <ComputeCmacB0+0x120>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010ac8:	230c      	movs	r3, #12
 8010aca:	e000      	b.n	8010ace <ComputeCmacB0+0x122>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	0018      	movs	r0, r3
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	b046      	add	sp, #280	; 0x118
 8010ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8010ad6:	46c0      	nop			; (mov r8, r8)
 8010ad8:	fffffeea 	.word	0xfffffeea
 8010adc:	fffffee9 	.word	0xfffffee9
 8010ae0:	fffffee8 	.word	0xfffffee8

08010ae4 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8010ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ae6:	b0cd      	sub	sp, #308	; 0x134
 8010ae8:	af04      	add	r7, sp, #16
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	000c      	movs	r4, r1
 8010aee:	0010      	movs	r0, r2
 8010af0:	0019      	movs	r1, r3
 8010af2:	4b52      	ldr	r3, [pc, #328]	; (8010c3c <VerifyCmacB0+0x158>)
 8010af4:	2290      	movs	r2, #144	; 0x90
 8010af6:	0052      	lsls	r2, r2, #1
 8010af8:	4694      	mov	ip, r2
 8010afa:	44bc      	add	ip, r7
 8010afc:	4463      	add	r3, ip
 8010afe:	1c22      	adds	r2, r4, #0
 8010b00:	801a      	strh	r2, [r3, #0]
 8010b02:	4b4f      	ldr	r3, [pc, #316]	; (8010c40 <VerifyCmacB0+0x15c>)
 8010b04:	2290      	movs	r2, #144	; 0x90
 8010b06:	0052      	lsls	r2, r2, #1
 8010b08:	4694      	mov	ip, r2
 8010b0a:	44bc      	add	ip, r7
 8010b0c:	4463      	add	r3, ip
 8010b0e:	1c02      	adds	r2, r0, #0
 8010b10:	701a      	strb	r2, [r3, #0]
 8010b12:	4b4c      	ldr	r3, [pc, #304]	; (8010c44 <VerifyCmacB0+0x160>)
 8010b14:	2290      	movs	r2, #144	; 0x90
 8010b16:	0052      	lsls	r2, r2, #1
 8010b18:	4694      	mov	ip, r2
 8010b1a:	44bc      	add	ip, r7
 8010b1c:	4463      	add	r3, ip
 8010b1e:	1c0a      	adds	r2, r1, #0
 8010b20:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d101      	bne.n	8010b2c <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010b28:	2307      	movs	r3, #7
 8010b2a:	e083      	b.n	8010c34 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010b2c:	4b43      	ldr	r3, [pc, #268]	; (8010c3c <VerifyCmacB0+0x158>)
 8010b2e:	2290      	movs	r2, #144	; 0x90
 8010b30:	0052      	lsls	r2, r2, #1
 8010b32:	4694      	mov	ip, r2
 8010b34:	44bc      	add	ip, r7
 8010b36:	4463      	add	r3, ip
 8010b38:	881a      	ldrh	r2, [r3, #0]
 8010b3a:	2380      	movs	r3, #128	; 0x80
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d901      	bls.n	8010b46 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010b42:	230b      	movs	r3, #11
 8010b44:	e076      	b.n	8010c34 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8010b46:	2388      	movs	r3, #136	; 0x88
 8010b48:	005a      	lsls	r2, r3, #1
 8010b4a:	250c      	movs	r5, #12
 8010b4c:	197b      	adds	r3, r7, r5
 8010b4e:	2100      	movs	r1, #0
 8010b50:	0018      	movs	r0, r3
 8010b52:	f004 fcc5 	bl	80154e0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8010b56:	2398      	movs	r3, #152	; 0x98
 8010b58:	005b      	lsls	r3, r3, #1
 8010b5a:	2208      	movs	r2, #8
 8010b5c:	4694      	mov	ip, r2
 8010b5e:	44bc      	add	ip, r7
 8010b60:	4463      	add	r3, ip
 8010b62:	781c      	ldrb	r4, [r3, #0]
 8010b64:	4b37      	ldr	r3, [pc, #220]	; (8010c44 <VerifyCmacB0+0x160>)
 8010b66:	2290      	movs	r2, #144	; 0x90
 8010b68:	0052      	lsls	r2, r2, #1
 8010b6a:	4694      	mov	ip, r2
 8010b6c:	44bc      	add	ip, r7
 8010b6e:	4463      	add	r3, ip
 8010b70:	781a      	ldrb	r2, [r3, #0]
 8010b72:	4b33      	ldr	r3, [pc, #204]	; (8010c40 <VerifyCmacB0+0x15c>)
 8010b74:	2190      	movs	r1, #144	; 0x90
 8010b76:	0049      	lsls	r1, r1, #1
 8010b78:	468c      	mov	ip, r1
 8010b7a:	44bc      	add	ip, r7
 8010b7c:	4463      	add	r3, ip
 8010b7e:	7819      	ldrb	r1, [r3, #0]
 8010b80:	4b2e      	ldr	r3, [pc, #184]	; (8010c3c <VerifyCmacB0+0x158>)
 8010b82:	2090      	movs	r0, #144	; 0x90
 8010b84:	0040      	lsls	r0, r0, #1
 8010b86:	4684      	mov	ip, r0
 8010b88:	44bc      	add	ip, r7
 8010b8a:	4463      	add	r3, ip
 8010b8c:	8818      	ldrh	r0, [r3, #0]
 8010b8e:	197b      	adds	r3, r7, r5
 8010b90:	9302      	str	r3, [sp, #8]
 8010b92:	239c      	movs	r3, #156	; 0x9c
 8010b94:	005b      	lsls	r3, r3, #1
 8010b96:	2608      	movs	r6, #8
 8010b98:	46b4      	mov	ip, r6
 8010b9a:	44bc      	add	ip, r7
 8010b9c:	4463      	add	r3, ip
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	239a      	movs	r3, #154	; 0x9a
 8010ba4:	005b      	lsls	r3, r3, #1
 8010ba6:	2608      	movs	r6, #8
 8010ba8:	46b4      	mov	ip, r6
 8010baa:	44bc      	add	ip, r7
 8010bac:	4463      	add	r3, ip
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	9300      	str	r3, [sp, #0]
 8010bb2:	0023      	movs	r3, r4
 8010bb4:	f7ff fe62 	bl	801087c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010bb8:	197b      	adds	r3, r7, r5
 8010bba:	3310      	adds	r3, #16
 8010bbc:	4a1f      	ldr	r2, [pc, #124]	; (8010c3c <VerifyCmacB0+0x158>)
 8010bbe:	2190      	movs	r1, #144	; 0x90
 8010bc0:	0049      	lsls	r1, r1, #1
 8010bc2:	468c      	mov	ip, r1
 8010bc4:	44bc      	add	ip, r7
 8010bc6:	4462      	add	r2, ip
 8010bc8:	8812      	ldrh	r2, [r2, #0]
 8010bca:	6879      	ldr	r1, [r7, #4]
 8010bcc:	0018      	movs	r0, r3
 8010bce:	f004 fc4b 	bl	8015468 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8010bd2:	2620      	movs	r6, #32
 8010bd4:	36ff      	adds	r6, #255	; 0xff
 8010bd6:	19bb      	adds	r3, r7, r6
 8010bd8:	2206      	movs	r2, #6
 8010bda:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8010bdc:	4b17      	ldr	r3, [pc, #92]	; (8010c3c <VerifyCmacB0+0x158>)
 8010bde:	2290      	movs	r2, #144	; 0x90
 8010be0:	0052      	lsls	r2, r2, #1
 8010be2:	4694      	mov	ip, r2
 8010be4:	44bc      	add	ip, r7
 8010be6:	4463      	add	r3, ip
 8010be8:	881b      	ldrh	r3, [r3, #0]
 8010bea:	3310      	adds	r3, #16
 8010bec:	b299      	uxth	r1, r3
 8010bee:	19bc      	adds	r4, r7, r6
 8010bf0:	4b13      	ldr	r3, [pc, #76]	; (8010c40 <VerifyCmacB0+0x15c>)
 8010bf2:	2290      	movs	r2, #144	; 0x90
 8010bf4:	0052      	lsls	r2, r2, #1
 8010bf6:	4694      	mov	ip, r2
 8010bf8:	44bc      	add	ip, r7
 8010bfa:	4463      	add	r3, ip
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	229e      	movs	r2, #158	; 0x9e
 8010c00:	0052      	lsls	r2, r2, #1
 8010c02:	2008      	movs	r0, #8
 8010c04:	4684      	mov	ip, r0
 8010c06:	44bc      	add	ip, r7
 8010c08:	4462      	add	r2, ip
 8010c0a:	6812      	ldr	r2, [r2, #0]
 8010c0c:	1978      	adds	r0, r7, r5
 8010c0e:	f7f9 f872 	bl	8009cf6 <SecureElementVerifyAesCmac>
 8010c12:	0003      	movs	r3, r0
 8010c14:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010c16:	19bb      	adds	r3, r7, r6
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d101      	bne.n	8010c22 <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e008      	b.n	8010c34 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8010c22:	2320      	movs	r3, #32
 8010c24:	33ff      	adds	r3, #255	; 0xff
 8010c26:	18fb      	adds	r3, r7, r3
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d101      	bne.n	8010c32 <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8010c2e:	2301      	movs	r3, #1
 8010c30:	e000      	b.n	8010c34 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010c32:	230c      	movs	r3, #12
}
 8010c34:	0018      	movs	r0, r3
 8010c36:	46bd      	mov	sp, r7
 8010c38:	b049      	add	sp, #292	; 0x124
 8010c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c3c:	fffffee2 	.word	0xfffffee2
 8010c40:	fffffee1 	.word	0xfffffee1
 8010c44:	fffffee0 	.word	0xfffffee0

08010c48 <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 8010c48:	b5b0      	push	{r4, r5, r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	0005      	movs	r5, r0
 8010c50:	000c      	movs	r4, r1
 8010c52:	0010      	movs	r0, r2
 8010c54:	0019      	movs	r1, r3
 8010c56:	1dbb      	adds	r3, r7, #6
 8010c58:	1c2a      	adds	r2, r5, #0
 8010c5a:	801a      	strh	r2, [r3, #0]
 8010c5c:	1d7b      	adds	r3, r7, #5
 8010c5e:	1c22      	adds	r2, r4, #0
 8010c60:	701a      	strb	r2, [r3, #0]
 8010c62:	1d3b      	adds	r3, r7, #4
 8010c64:	1c02      	adds	r2, r0, #0
 8010c66:	701a      	strb	r2, [r3, #0]
 8010c68:	1cfb      	adds	r3, r7, #3
 8010c6a:	1c0a      	adds	r2, r1, #0
 8010c6c:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
 8010c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d101      	bne.n	8010c78 <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c74:	2307      	movs	r3, #7
 8010c76:	e06c      	b.n	8010d52 <PrepareB1+0x10a>
    }

    b1[0] = 0x49;
 8010c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7a:	2249      	movs	r2, #73	; 0x49
 8010c7c:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 8010c7e:	1d3b      	adds	r3, r7, #4
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d015      	beq.n	8010cb2 <PrepareB1+0x6a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 8010c86:	4b35      	ldr	r3, [pc, #212]	; (8010d5c <PrepareB1+0x114>)
 8010c88:	689b      	ldr	r3, [r3, #8]
 8010c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	210e      	movs	r1, #14
 8010c90:	187b      	adds	r3, r7, r1
 8010c92:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 8010c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c96:	3301      	adds	r3, #1
 8010c98:	187a      	adds	r2, r7, r1
 8010c9a:	8812      	ldrh	r2, [r2, #0]
 8010c9c:	b2d2      	uxtb	r2, r2
 8010c9e:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 8010ca0:	187b      	adds	r3, r7, r1
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	0a1b      	lsrs	r3, r3, #8
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010caa:	3302      	adds	r3, #2
 8010cac:	b2d2      	uxtb	r2, r2
 8010cae:	701a      	strb	r2, [r3, #0]
 8010cb0:	e007      	b.n	8010cc2 <PrepareB1+0x7a>
    }
    else
    {
        b1[1] = 0x00;
 8010cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
 8010cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cbc:	3302      	adds	r3, #2
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
 8010cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc4:	3303      	adds	r3, #3
 8010cc6:	1cfa      	adds	r2, r7, #3
 8010cc8:	7812      	ldrb	r2, [r2, #0]
 8010cca:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
 8010ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cce:	3304      	adds	r3, #4
 8010cd0:	2220      	movs	r2, #32
 8010cd2:	18ba      	adds	r2, r7, r2
 8010cd4:	7812      	ldrb	r2, [r2, #0]
 8010cd6:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
 8010cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cda:	3305      	adds	r3, #5
 8010cdc:	2200      	movs	r2, #0
 8010cde:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
 8010ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce2:	3306      	adds	r3, #6
 8010ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ce6:	b2d2      	uxtb	r2, r2
 8010ce8:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 8010cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cec:	0a1a      	lsrs	r2, r3, #8
 8010cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf0:	3307      	adds	r3, #7
 8010cf2:	b2d2      	uxtb	r2, r2
 8010cf4:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf8:	0c1a      	lsrs	r2, r3, #16
 8010cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfc:	3308      	adds	r3, #8
 8010cfe:	b2d2      	uxtb	r2, r2
 8010d00:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 8010d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d04:	0e1a      	lsrs	r2, r3, #24
 8010d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d08:	3309      	adds	r3, #9
 8010d0a:	b2d2      	uxtb	r2, r2
 8010d0c:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
 8010d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d10:	330a      	adds	r3, #10
 8010d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d14:	b2d2      	uxtb	r2, r2
 8010d16:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 8010d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1a:	0a1a      	lsrs	r2, r3, #8
 8010d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1e:	330b      	adds	r3, #11
 8010d20:	b2d2      	uxtb	r2, r2
 8010d22:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 8010d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d26:	0c1a      	lsrs	r2, r3, #16
 8010d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2a:	330c      	adds	r3, #12
 8010d2c:	b2d2      	uxtb	r2, r2
 8010d2e:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 8010d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d32:	0e1a      	lsrs	r2, r3, #24
 8010d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d36:	330d      	adds	r3, #13
 8010d38:	b2d2      	uxtb	r2, r2
 8010d3a:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
 8010d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d3e:	330e      	adds	r3, #14
 8010d40:	2200      	movs	r2, #0
 8010d42:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
 8010d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d46:	330f      	adds	r3, #15
 8010d48:	1dba      	adds	r2, r7, #6
 8010d4a:	8812      	ldrh	r2, [r2, #0]
 8010d4c:	b2d2      	uxtb	r2, r2
 8010d4e:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010d50:	2300      	movs	r3, #0
}
 8010d52:	0018      	movs	r0, r3
 8010d54:	46bd      	mov	sp, r7
 8010d56:	b004      	add	sp, #16
 8010d58:	bdb0      	pop	{r4, r5, r7, pc}
 8010d5a:	46c0      	nop			; (mov r8, r8)
 8010d5c:	20000d68 	.word	0x20000d68

08010d60 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
 8010d60:	b5b0      	push	{r4, r5, r7, lr}
 8010d62:	b0ca      	sub	sp, #296	; 0x128
 8010d64:	af04      	add	r7, sp, #16
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	000c      	movs	r4, r1
 8010d6a:	0010      	movs	r0, r2
 8010d6c:	0019      	movs	r1, r3
 8010d6e:	4b49      	ldr	r3, [pc, #292]	; (8010e94 <ComputeCmacB1+0x134>)
 8010d70:	228c      	movs	r2, #140	; 0x8c
 8010d72:	0052      	lsls	r2, r2, #1
 8010d74:	4694      	mov	ip, r2
 8010d76:	44bc      	add	ip, r7
 8010d78:	4463      	add	r3, ip
 8010d7a:	1c22      	adds	r2, r4, #0
 8010d7c:	801a      	strh	r2, [r3, #0]
 8010d7e:	4b46      	ldr	r3, [pc, #280]	; (8010e98 <ComputeCmacB1+0x138>)
 8010d80:	228c      	movs	r2, #140	; 0x8c
 8010d82:	0052      	lsls	r2, r2, #1
 8010d84:	4694      	mov	ip, r2
 8010d86:	44bc      	add	ip, r7
 8010d88:	4463      	add	r3, ip
 8010d8a:	1c02      	adds	r2, r0, #0
 8010d8c:	701a      	strb	r2, [r3, #0]
 8010d8e:	4b43      	ldr	r3, [pc, #268]	; (8010e9c <ComputeCmacB1+0x13c>)
 8010d90:	228c      	movs	r2, #140	; 0x8c
 8010d92:	0052      	lsls	r2, r2, #1
 8010d94:	4694      	mov	ip, r2
 8010d96:	44bc      	add	ip, r7
 8010d98:	4463      	add	r3, ip
 8010d9a:	1c0a      	adds	r2, r1, #0
 8010d9c:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d005      	beq.n	8010db0 <ComputeCmacB1+0x50>
 8010da4:	239c      	movs	r3, #156	; 0x9c
 8010da6:	005b      	lsls	r3, r3, #1
 8010da8:	18fb      	adds	r3, r7, r3
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d101      	bne.n	8010db4 <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010db0:	2307      	movs	r3, #7
 8010db2:	e06b      	b.n	8010e8c <ComputeCmacB1+0x12c>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010db4:	4b37      	ldr	r3, [pc, #220]	; (8010e94 <ComputeCmacB1+0x134>)
 8010db6:	228c      	movs	r2, #140	; 0x8c
 8010db8:	0052      	lsls	r2, r2, #1
 8010dba:	4694      	mov	ip, r2
 8010dbc:	44bc      	add	ip, r7
 8010dbe:	4463      	add	r3, ip
 8010dc0:	881a      	ldrh	r2, [r3, #0]
 8010dc2:	2380      	movs	r3, #128	; 0x80
 8010dc4:	005b      	lsls	r3, r3, #1
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d901      	bls.n	8010dce <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010dca:	230b      	movs	r3, #11
 8010dcc:	e05e      	b.n	8010e8c <ComputeCmacB1+0x12c>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8010dce:	2388      	movs	r3, #136	; 0x88
 8010dd0:	005a      	lsls	r2, r3, #1
 8010dd2:	2508      	movs	r5, #8
 8010dd4:	197b      	adds	r3, r7, r5
 8010dd6:	2100      	movs	r1, #0
 8010dd8:	0018      	movs	r0, r3
 8010dda:	f004 fb81 	bl	80154e0 <memset1>

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 8010dde:	2394      	movs	r3, #148	; 0x94
 8010de0:	005b      	lsls	r3, r3, #1
 8010de2:	18fb      	adds	r3, r7, r3
 8010de4:	781c      	ldrb	r4, [r3, #0]
 8010de6:	4b2d      	ldr	r3, [pc, #180]	; (8010e9c <ComputeCmacB1+0x13c>)
 8010de8:	228c      	movs	r2, #140	; 0x8c
 8010dea:	0052      	lsls	r2, r2, #1
 8010dec:	4694      	mov	ip, r2
 8010dee:	44bc      	add	ip, r7
 8010df0:	4463      	add	r3, ip
 8010df2:	781a      	ldrb	r2, [r3, #0]
 8010df4:	4b28      	ldr	r3, [pc, #160]	; (8010e98 <ComputeCmacB1+0x138>)
 8010df6:	218c      	movs	r1, #140	; 0x8c
 8010df8:	0049      	lsls	r1, r1, #1
 8010dfa:	468c      	mov	ip, r1
 8010dfc:	44bc      	add	ip, r7
 8010dfe:	4463      	add	r3, ip
 8010e00:	7819      	ldrb	r1, [r3, #0]
 8010e02:	4b24      	ldr	r3, [pc, #144]	; (8010e94 <ComputeCmacB1+0x134>)
 8010e04:	208c      	movs	r0, #140	; 0x8c
 8010e06:	0040      	lsls	r0, r0, #1
 8010e08:	4684      	mov	ip, r0
 8010e0a:	44bc      	add	ip, r7
 8010e0c:	4463      	add	r3, ip
 8010e0e:	8818      	ldrh	r0, [r3, #0]
 8010e10:	197b      	adds	r3, r7, r5
 8010e12:	9303      	str	r3, [sp, #12]
 8010e14:	239a      	movs	r3, #154	; 0x9a
 8010e16:	005b      	lsls	r3, r3, #1
 8010e18:	18fb      	adds	r3, r7, r3
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	9302      	str	r3, [sp, #8]
 8010e1e:	2398      	movs	r3, #152	; 0x98
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	18fb      	adds	r3, r7, r3
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	9301      	str	r3, [sp, #4]
 8010e28:	2396      	movs	r3, #150	; 0x96
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	18fb      	adds	r3, r7, r3
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	0023      	movs	r3, r4
 8010e34:	f7ff ff08 	bl	8010c48 <PrepareB1>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010e38:	197b      	adds	r3, r7, r5
 8010e3a:	3310      	adds	r3, #16
 8010e3c:	4a15      	ldr	r2, [pc, #84]	; (8010e94 <ComputeCmacB1+0x134>)
 8010e3e:	218c      	movs	r1, #140	; 0x8c
 8010e40:	0049      	lsls	r1, r1, #1
 8010e42:	468c      	mov	ip, r1
 8010e44:	44bc      	add	ip, r7
 8010e46:	4462      	add	r2, ip
 8010e48:	8812      	ldrh	r2, [r2, #0]
 8010e4a:	6879      	ldr	r1, [r7, #4]
 8010e4c:	0018      	movs	r0, r3
 8010e4e:	f004 fb0b 	bl	8015468 <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8010e52:	4b10      	ldr	r3, [pc, #64]	; (8010e94 <ComputeCmacB1+0x134>)
 8010e54:	228c      	movs	r2, #140	; 0x8c
 8010e56:	0052      	lsls	r2, r2, #1
 8010e58:	4694      	mov	ip, r2
 8010e5a:	44bc      	add	ip, r7
 8010e5c:	4463      	add	r3, ip
 8010e5e:	881b      	ldrh	r3, [r3, #0]
 8010e60:	3310      	adds	r3, #16
 8010e62:	b299      	uxth	r1, r3
 8010e64:	239c      	movs	r3, #156	; 0x9c
 8010e66:	005b      	lsls	r3, r3, #1
 8010e68:	18fb      	adds	r3, r7, r3
 8010e6a:	681c      	ldr	r4, [r3, #0]
 8010e6c:	4b0a      	ldr	r3, [pc, #40]	; (8010e98 <ComputeCmacB1+0x138>)
 8010e6e:	228c      	movs	r2, #140	; 0x8c
 8010e70:	0052      	lsls	r2, r2, #1
 8010e72:	4694      	mov	ip, r2
 8010e74:	44bc      	add	ip, r7
 8010e76:	4463      	add	r3, ip
 8010e78:	781a      	ldrb	r2, [r3, #0]
 8010e7a:	1978      	adds	r0, r7, r5
 8010e7c:	0023      	movs	r3, r4
 8010e7e:	f7f8 ff15 	bl	8009cac <SecureElementComputeAesCmac>
 8010e82:	1e03      	subs	r3, r0, #0
 8010e84:	d001      	beq.n	8010e8a <ComputeCmacB1+0x12a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010e86:	230c      	movs	r3, #12
 8010e88:	e000      	b.n	8010e8c <ComputeCmacB1+0x12c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010e8a:	2300      	movs	r3, #0
}
 8010e8c:	0018      	movs	r0, r3
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	b046      	add	sp, #280	; 0x118
 8010e92:	bdb0      	pop	{r4, r5, r7, pc}
 8010e94:	fffffeea 	.word	0xfffffeea
 8010e98:	fffffee9 	.word	0xfffffee9
 8010e9c:	fffffee8 	.word	0xfffffee8

08010ea0 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	0002      	movs	r2, r0
 8010ea8:	6039      	str	r1, [r7, #0]
 8010eaa:	1dfb      	adds	r3, r7, #7
 8010eac:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8010eae:	230f      	movs	r3, #15
 8010eb0:	18fb      	adds	r3, r7, r3
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	701a      	strb	r2, [r3, #0]
 8010eb6:	e019      	b.n	8010eec <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8010eb8:	230f      	movs	r3, #15
 8010eba:	18fb      	adds	r3, r7, r3
 8010ebc:	781a      	ldrb	r2, [r3, #0]
 8010ebe:	4b10      	ldr	r3, [pc, #64]	; (8010f00 <GetKeyAddrItem+0x60>)
 8010ec0:	0092      	lsls	r2, r2, #2
 8010ec2:	5cd3      	ldrb	r3, [r2, r3]
 8010ec4:	1dfa      	adds	r2, r7, #7
 8010ec6:	7812      	ldrb	r2, [r2, #0]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d109      	bne.n	8010ee0 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 8010ecc:	230f      	movs	r3, #15
 8010ece:	18fb      	adds	r3, r7, r3
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	009a      	lsls	r2, r3, #2
 8010ed4:	4b0a      	ldr	r3, [pc, #40]	; (8010f00 <GetKeyAddrItem+0x60>)
 8010ed6:	18d2      	adds	r2, r2, r3
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8010edc:	2300      	movs	r3, #0
 8010ede:	e00b      	b.n	8010ef8 <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8010ee0:	210f      	movs	r1, #15
 8010ee2:	187b      	adds	r3, r7, r1
 8010ee4:	781a      	ldrb	r2, [r3, #0]
 8010ee6:	187b      	adds	r3, r7, r1
 8010ee8:	3201      	adds	r2, #1
 8010eea:	701a      	strb	r2, [r3, #0]
 8010eec:	230f      	movs	r3, #15
 8010eee:	18fb      	adds	r3, r7, r3
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	2b04      	cmp	r3, #4
 8010ef4:	d9e0      	bls.n	8010eb8 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8010ef6:	2309      	movs	r3, #9
}
 8010ef8:	0018      	movs	r0, r3
 8010efa:	46bd      	mov	sp, r7
 8010efc:	b004      	add	sp, #16
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	20000064 	.word	0x20000064

08010f04 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8010f04:	b590      	push	{r4, r7, lr}
 8010f06:	b089      	sub	sp, #36	; 0x24
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	60b9      	str	r1, [r7, #8]
 8010f0c:	607a      	str	r2, [r7, #4]
 8010f0e:	603b      	str	r3, [r7, #0]
 8010f10:	230f      	movs	r3, #15
 8010f12:	18fb      	adds	r3, r7, r3
 8010f14:	1c02      	adds	r2, r0, #0
 8010f16:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d005      	beq.n	8010f2a <DeriveSessionKey10x+0x26>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <DeriveSessionKey10x+0x26>
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d101      	bne.n	8010f2e <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010f2a:	2307      	movs	r3, #7
 8010f2c:	e042      	b.n	8010fb4 <DeriveSessionKey10x+0xb0>
    }

    uint8_t compBase[16] = { 0 };
 8010f2e:	2310      	movs	r3, #16
 8010f30:	18fb      	adds	r3, r7, r3
 8010f32:	0018      	movs	r0, r3
 8010f34:	2310      	movs	r3, #16
 8010f36:	001a      	movs	r2, r3
 8010f38:	2100      	movs	r1, #0
 8010f3a:	f00d fd93 	bl	801ea64 <memset>

    switch( keyID )
 8010f3e:	230f      	movs	r3, #15
 8010f40:	18fb      	adds	r3, r7, r3
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	2b04      	cmp	r3, #4
 8010f46:	db0e      	blt.n	8010f66 <DeriveSessionKey10x+0x62>
 8010f48:	2b06      	cmp	r3, #6
 8010f4a:	dd02      	ble.n	8010f52 <DeriveSessionKey10x+0x4e>
 8010f4c:	2b07      	cmp	r3, #7
 8010f4e:	d005      	beq.n	8010f5c <DeriveSessionKey10x+0x58>
 8010f50:	e009      	b.n	8010f66 <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 8010f52:	2310      	movs	r3, #16
 8010f54:	18fb      	adds	r3, r7, r3
 8010f56:	2201      	movs	r2, #1
 8010f58:	701a      	strb	r2, [r3, #0]
            break;
 8010f5a:	e006      	b.n	8010f6a <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8010f5c:	2310      	movs	r3, #16
 8010f5e:	18fb      	adds	r3, r7, r3
 8010f60:	2202      	movs	r2, #2
 8010f62:	701a      	strb	r2, [r3, #0]
            break;
 8010f64:	e001      	b.n	8010f6a <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010f66:	2308      	movs	r3, #8
 8010f68:	e024      	b.n	8010fb4 <DeriveSessionKey10x+0xb0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8010f6a:	2410      	movs	r4, #16
 8010f6c:	193b      	adds	r3, r7, r4
 8010f6e:	3301      	adds	r3, #1
 8010f70:	68b9      	ldr	r1, [r7, #8]
 8010f72:	2203      	movs	r2, #3
 8010f74:	0018      	movs	r0, r3
 8010f76:	f004 fa77 	bl	8015468 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8010f7a:	193b      	adds	r3, r7, r4
 8010f7c:	3304      	adds	r3, #4
 8010f7e:	6879      	ldr	r1, [r7, #4]
 8010f80:	2203      	movs	r2, #3
 8010f82:	0018      	movs	r0, r3
 8010f84:	f004 fa70 	bl	8015468 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8010f88:	193b      	adds	r3, r7, r4
 8010f8a:	3307      	adds	r3, #7
 8010f8c:	6839      	ldr	r1, [r7, #0]
 8010f8e:	2202      	movs	r2, #2
 8010f90:	0018      	movs	r0, r3
 8010f92:	f004 fa69 	bl	8015468 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010f96:	230f      	movs	r3, #15
 8010f98:	18fb      	adds	r3, r7, r3
 8010f9a:	781a      	ldrb	r2, [r3, #0]
 8010f9c:	1939      	adds	r1, r7, r4
 8010f9e:	4b07      	ldr	r3, [pc, #28]	; (8010fbc <DeriveSessionKey10x+0xb8>)
 8010fa0:	6818      	ldr	r0, [r3, #0]
 8010fa2:	0013      	movs	r3, r2
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	f7f8 ff51 	bl	8009e4c <SecureElementDeriveAndStoreKey>
 8010faa:	1e03      	subs	r3, r0, #0
 8010fac:	d001      	beq.n	8010fb2 <DeriveSessionKey10x+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010fae:	230c      	movs	r3, #12
 8010fb0:	e000      	b.n	8010fb4 <DeriveSessionKey10x+0xb0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010fb2:	2300      	movs	r3, #0
}
 8010fb4:	0018      	movs	r0, r3
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	b009      	add	sp, #36	; 0x24
 8010fba:	bd90      	pop	{r4, r7, pc}
 8010fbc:	20000d68 	.word	0x20000d68

08010fc0 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
 8010fc0:	b5b0      	push	{r4, r5, r7, lr}
 8010fc2:	b08a      	sub	sp, #40	; 0x28
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	60b9      	str	r1, [r7, #8]
 8010fc8:	607a      	str	r2, [r7, #4]
 8010fca:	603b      	str	r3, [r7, #0]
 8010fcc:	230f      	movs	r3, #15
 8010fce:	18fb      	adds	r3, r7, r3
 8010fd0:	1c02      	adds	r2, r0, #0
 8010fd2:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d005      	beq.n	8010fe6 <DeriveSessionKey11x+0x26>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d002      	beq.n	8010fe6 <DeriveSessionKey11x+0x26>
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d101      	bne.n	8010fea <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010fe6:	2307      	movs	r3, #7
 8010fe8:	e05a      	b.n	80110a0 <DeriveSessionKey11x+0xe0>
    }

    uint8_t compBase[16] = { 0 };
 8010fea:	2314      	movs	r3, #20
 8010fec:	18fb      	adds	r3, r7, r3
 8010fee:	0018      	movs	r0, r3
 8010ff0:	2310      	movs	r3, #16
 8010ff2:	001a      	movs	r2, r3
 8010ff4:	2100      	movs	r1, #0
 8010ff6:	f00d fd35 	bl	801ea64 <memset>
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8010ffa:	2327      	movs	r3, #39	; 0x27
 8010ffc:	18fb      	adds	r3, r7, r3
 8010ffe:	2201      	movs	r2, #1
 8011000:	701a      	strb	r2, [r3, #0]

    switch( keyID )
 8011002:	230f      	movs	r3, #15
 8011004:	18fb      	adds	r3, r7, r3
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	2b05      	cmp	r3, #5
 801100a:	d00d      	beq.n	8011028 <DeriveSessionKey11x+0x68>
 801100c:	dc02      	bgt.n	8011014 <DeriveSessionKey11x+0x54>
 801100e:	2b04      	cmp	r3, #4
 8011010:	d005      	beq.n	801101e <DeriveSessionKey11x+0x5e>
 8011012:	e01c      	b.n	801104e <DeriveSessionKey11x+0x8e>
 8011014:	2b06      	cmp	r3, #6
 8011016:	d00c      	beq.n	8011032 <DeriveSessionKey11x+0x72>
 8011018:	2b07      	cmp	r3, #7
 801101a:	d00f      	beq.n	801103c <DeriveSessionKey11x+0x7c>
 801101c:	e017      	b.n	801104e <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
 801101e:	2314      	movs	r3, #20
 8011020:	18fb      	adds	r3, r7, r3
 8011022:	2201      	movs	r2, #1
 8011024:	701a      	strb	r2, [r3, #0]
            break;
 8011026:	e014      	b.n	8011052 <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
 8011028:	2314      	movs	r3, #20
 801102a:	18fb      	adds	r3, r7, r3
 801102c:	2203      	movs	r2, #3
 801102e:	701a      	strb	r2, [r3, #0]
            break;
 8011030:	e00f      	b.n	8011052 <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
 8011032:	2314      	movs	r3, #20
 8011034:	18fb      	adds	r3, r7, r3
 8011036:	2204      	movs	r2, #4
 8011038:	701a      	strb	r2, [r3, #0]
            break;
 801103a:	e00a      	b.n	8011052 <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
 801103c:	2327      	movs	r3, #39	; 0x27
 801103e:	18fb      	adds	r3, r7, r3
 8011040:	2200      	movs	r2, #0
 8011042:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
 8011044:	2314      	movs	r3, #20
 8011046:	18fb      	adds	r3, r7, r3
 8011048:	2202      	movs	r2, #2
 801104a:	701a      	strb	r2, [r3, #0]
            break;
 801104c:	e001      	b.n	8011052 <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801104e:	2308      	movs	r3, #8
 8011050:	e026      	b.n	80110a0 <DeriveSessionKey11x+0xe0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8011052:	2514      	movs	r5, #20
 8011054:	197b      	adds	r3, r7, r5
 8011056:	3301      	adds	r3, #1
 8011058:	68b9      	ldr	r1, [r7, #8]
 801105a:	2203      	movs	r2, #3
 801105c:	0018      	movs	r0, r3
 801105e:	f004 fa03 	bl	8015468 <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 8011062:	197b      	adds	r3, r7, r5
 8011064:	3304      	adds	r3, #4
 8011066:	6879      	ldr	r1, [r7, #4]
 8011068:	2208      	movs	r2, #8
 801106a:	0018      	movs	r0, r3
 801106c:	f004 fa17 	bl	801549e <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 8011070:	197b      	adds	r3, r7, r5
 8011072:	330c      	adds	r3, #12
 8011074:	6839      	ldr	r1, [r7, #0]
 8011076:	2202      	movs	r2, #2
 8011078:	0018      	movs	r0, r3
 801107a:	f004 f9f5 	bl	8015468 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801107e:	230f      	movs	r3, #15
 8011080:	18fb      	adds	r3, r7, r3
 8011082:	781c      	ldrb	r4, [r3, #0]
 8011084:	2327      	movs	r3, #39	; 0x27
 8011086:	18fb      	adds	r3, r7, r3
 8011088:	781a      	ldrb	r2, [r3, #0]
 801108a:	1979      	adds	r1, r7, r5
 801108c:	4b06      	ldr	r3, [pc, #24]	; (80110a8 <DeriveSessionKey11x+0xe8>)
 801108e:	6818      	ldr	r0, [r3, #0]
 8011090:	0023      	movs	r3, r4
 8011092:	f7f8 fedb 	bl	8009e4c <SecureElementDeriveAndStoreKey>
 8011096:	1e03      	subs	r3, r0, #0
 8011098:	d001      	beq.n	801109e <DeriveSessionKey11x+0xde>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801109a:	230c      	movs	r3, #12
 801109c:	e000      	b.n	80110a0 <DeriveSessionKey11x+0xe0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	0018      	movs	r0, r3
 80110a2:	46bd      	mov	sp, r7
 80110a4:	b00a      	add	sp, #40	; 0x28
 80110a6:	bdb0      	pop	{r4, r5, r7, pc}
 80110a8:	20000d68 	.word	0x20000d68

080110ac <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
 80110ac:	b590      	push	{r4, r7, lr}
 80110ae:	b087      	sub	sp, #28
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	0002      	movs	r2, r0
 80110b4:	6039      	str	r1, [r7, #0]
 80110b6:	1dfb      	adds	r3, r7, #7
 80110b8:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d101      	bne.n	80110c4 <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80110c0:	2307      	movs	r3, #7
 80110c2:	e030      	b.n	8011126 <DeriveLifeTimeSessionKey+0x7a>
    }

    uint8_t compBase[16] = { 0 };
 80110c4:	2308      	movs	r3, #8
 80110c6:	18fb      	adds	r3, r7, r3
 80110c8:	0018      	movs	r0, r3
 80110ca:	2310      	movs	r3, #16
 80110cc:	001a      	movs	r2, r3
 80110ce:	2100      	movs	r1, #0
 80110d0:	f00d fcc8 	bl	801ea64 <memset>

    switch( keyID )
 80110d4:	1dfb      	adds	r3, r7, #7
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	2b02      	cmp	r3, #2
 80110da:	d002      	beq.n	80110e2 <DeriveLifeTimeSessionKey+0x36>
 80110dc:	2b03      	cmp	r3, #3
 80110de:	d005      	beq.n	80110ec <DeriveLifeTimeSessionKey+0x40>
 80110e0:	e009      	b.n	80110f6 <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
 80110e2:	2308      	movs	r3, #8
 80110e4:	18fb      	adds	r3, r7, r3
 80110e6:	2206      	movs	r2, #6
 80110e8:	701a      	strb	r2, [r3, #0]
            break;
 80110ea:	e006      	b.n	80110fa <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
 80110ec:	2308      	movs	r3, #8
 80110ee:	18fb      	adds	r3, r7, r3
 80110f0:	2205      	movs	r2, #5
 80110f2:	701a      	strb	r2, [r3, #0]
            break;
 80110f4:	e001      	b.n	80110fa <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80110f6:	2308      	movs	r3, #8
 80110f8:	e015      	b.n	8011126 <DeriveLifeTimeSessionKey+0x7a>
    }

    memcpyr( compBase + 1, devEUI, 8 );
 80110fa:	2408      	movs	r4, #8
 80110fc:	193b      	adds	r3, r7, r4
 80110fe:	3301      	adds	r3, #1
 8011100:	6839      	ldr	r1, [r7, #0]
 8011102:	2208      	movs	r2, #8
 8011104:	0018      	movs	r0, r3
 8011106:	f004 f9ca 	bl	801549e <memcpyr>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801110a:	1dfb      	adds	r3, r7, #7
 801110c:	781a      	ldrb	r2, [r3, #0]
 801110e:	1939      	adds	r1, r7, r4
 8011110:	4b07      	ldr	r3, [pc, #28]	; (8011130 <DeriveLifeTimeSessionKey+0x84>)
 8011112:	6818      	ldr	r0, [r3, #0]
 8011114:	0013      	movs	r3, r2
 8011116:	2201      	movs	r2, #1
 8011118:	f7f8 fe98 	bl	8009e4c <SecureElementDeriveAndStoreKey>
 801111c:	1e03      	subs	r3, r0, #0
 801111e:	d001      	beq.n	8011124 <DeriveLifeTimeSessionKey+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011120:	230c      	movs	r3, #12
 8011122:	e000      	b.n	8011126 <DeriveLifeTimeSessionKey+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011124:	2300      	movs	r3, #0
}
 8011126:	0018      	movs	r0, r3
 8011128:	46bd      	mov	sp, r7
 801112a:	b007      	add	sp, #28
 801112c:	bd90      	pop	{r4, r7, pc}
 801112e:	46c0      	nop			; (mov r8, r8)
 8011130:	20000d68 	.word	0x20000d68

08011134 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	0002      	movs	r2, r0
 801113c:	6039      	str	r1, [r7, #0]
 801113e:	1dfb      	adds	r3, r7, #7
 8011140:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8011142:	2300      	movs	r3, #0
 8011144:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
 8011146:	1dfb      	adds	r3, r7, #7
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	2b07      	cmp	r3, #7
 801114c:	d83b      	bhi.n	80111c6 <CheckFCntDown+0x92>
 801114e:	009a      	lsls	r2, r3, #2
 8011150:	4b25      	ldr	r3, [pc, #148]	; (80111e8 <CheckFCntDown+0xb4>)
 8011152:	18d3      	adds	r3, r2, r3
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
 8011158:	2300      	movs	r3, #0
 801115a:	e040      	b.n	80111de <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 801115c:	4b23      	ldr	r3, [pc, #140]	; (80111ec <CheckFCntDown+0xb8>)
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 8011164:	4b21      	ldr	r3, [pc, #132]	; (80111ec <CheckFCntDown+0xb8>)
 8011166:	689a      	ldr	r2, [r3, #8]
 8011168:	4b20      	ldr	r3, [pc, #128]	; (80111ec <CheckFCntDown+0xb8>)
 801116a:	689b      	ldr	r3, [r3, #8]
 801116c:	320c      	adds	r2, #12
 801116e:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8011170:	e02b      	b.n	80111ca <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 8011172:	4b1e      	ldr	r3, [pc, #120]	; (80111ec <CheckFCntDown+0xb8>)
 8011174:	689b      	ldr	r3, [r3, #8]
 8011176:	691b      	ldr	r3, [r3, #16]
 8011178:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 801117a:	4b1c      	ldr	r3, [pc, #112]	; (80111ec <CheckFCntDown+0xb8>)
 801117c:	689a      	ldr	r2, [r3, #8]
 801117e:	4b1b      	ldr	r3, [pc, #108]	; (80111ec <CheckFCntDown+0xb8>)
 8011180:	689b      	ldr	r3, [r3, #8]
 8011182:	3210      	adds	r2, #16
 8011184:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 8011186:	e020      	b.n	80111ca <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 8011188:	4b18      	ldr	r3, [pc, #96]	; (80111ec <CheckFCntDown+0xb8>)
 801118a:	689b      	ldr	r3, [r3, #8]
 801118c:	695b      	ldr	r3, [r3, #20]
 801118e:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 8011190:	4b16      	ldr	r3, [pc, #88]	; (80111ec <CheckFCntDown+0xb8>)
 8011192:	689a      	ldr	r2, [r3, #8]
 8011194:	4b15      	ldr	r3, [pc, #84]	; (80111ec <CheckFCntDown+0xb8>)
 8011196:	689b      	ldr	r3, [r3, #8]
 8011198:	3214      	adds	r2, #20
 801119a:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 801119c:	e015      	b.n	80111ca <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
 801119e:	4b13      	ldr	r3, [pc, #76]	; (80111ec <CheckFCntDown+0xb8>)
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	699b      	ldr	r3, [r3, #24]
 80111a4:	60fb      	str	r3, [r7, #12]
            break;
 80111a6:	e010      	b.n	80111ca <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
 80111a8:	4b10      	ldr	r3, [pc, #64]	; (80111ec <CheckFCntDown+0xb8>)
 80111aa:	689b      	ldr	r3, [r3, #8]
 80111ac:	69db      	ldr	r3, [r3, #28]
 80111ae:	60fb      	str	r3, [r7, #12]
            break;
 80111b0:	e00b      	b.n	80111ca <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
 80111b2:	4b0e      	ldr	r3, [pc, #56]	; (80111ec <CheckFCntDown+0xb8>)
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	6a1b      	ldr	r3, [r3, #32]
 80111b8:	60fb      	str	r3, [r7, #12]
            break;
 80111ba:	e006      	b.n	80111ca <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
 80111bc:	4b0b      	ldr	r3, [pc, #44]	; (80111ec <CheckFCntDown+0xb8>)
 80111be:	689b      	ldr	r3, [r3, #8]
 80111c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c2:	60fb      	str	r3, [r7, #12]
            break;
 80111c4:	e001      	b.n	80111ca <CheckFCntDown+0x96>
        default:
            return false;
 80111c6:	2300      	movs	r3, #0
 80111c8:	e009      	b.n	80111de <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
 80111ca:	683a      	ldr	r2, [r7, #0]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d802      	bhi.n	80111d8 <CheckFCntDown+0xa4>
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	3301      	adds	r3, #1
 80111d6:	d101      	bne.n	80111dc <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
 80111d8:	2301      	movs	r3, #1
 80111da:	e000      	b.n	80111de <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
 80111dc:	2300      	movs	r3, #0
    }
}
 80111de:	0018      	movs	r0, r3
 80111e0:	46bd      	mov	sp, r7
 80111e2:	b004      	add	sp, #16
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	46c0      	nop			; (mov r8, r8)
 80111e8:	080208b0 	.word	0x080208b0
 80111ec:	20000d68 	.word	0x20000d68

080111f0 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	0002      	movs	r2, r0
 80111f8:	6039      	str	r1, [r7, #0]
 80111fa:	1dfb      	adds	r3, r7, #7
 80111fc:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 80111fe:	1dfb      	adds	r3, r7, #7
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	2b07      	cmp	r3, #7
 8011204:	d827      	bhi.n	8011256 <UpdateFCntDown+0x66>
 8011206:	009a      	lsls	r2, r3, #2
 8011208:	4b17      	ldr	r3, [pc, #92]	; (8011268 <UpdateFCntDown+0x78>)
 801120a:	18d3      	adds	r3, r2, r3
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
 8011210:	4b16      	ldr	r3, [pc, #88]	; (801126c <UpdateFCntDown+0x7c>)
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	683a      	ldr	r2, [r7, #0]
 8011216:	60da      	str	r2, [r3, #12]
            break;
 8011218:	e01e      	b.n	8011258 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
 801121a:	4b14      	ldr	r3, [pc, #80]	; (801126c <UpdateFCntDown+0x7c>)
 801121c:	689b      	ldr	r3, [r3, #8]
 801121e:	683a      	ldr	r2, [r7, #0]
 8011220:	611a      	str	r2, [r3, #16]
            break;
 8011222:	e019      	b.n	8011258 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
 8011224:	4b11      	ldr	r3, [pc, #68]	; (801126c <UpdateFCntDown+0x7c>)
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	683a      	ldr	r2, [r7, #0]
 801122a:	615a      	str	r2, [r3, #20]
            break;
 801122c:	e014      	b.n	8011258 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
 801122e:	4b0f      	ldr	r3, [pc, #60]	; (801126c <UpdateFCntDown+0x7c>)
 8011230:	689b      	ldr	r3, [r3, #8]
 8011232:	683a      	ldr	r2, [r7, #0]
 8011234:	619a      	str	r2, [r3, #24]
            break;
 8011236:	e00f      	b.n	8011258 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
 8011238:	4b0c      	ldr	r3, [pc, #48]	; (801126c <UpdateFCntDown+0x7c>)
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	683a      	ldr	r2, [r7, #0]
 801123e:	61da      	str	r2, [r3, #28]
            break;
 8011240:	e00a      	b.n	8011258 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
 8011242:	4b0a      	ldr	r3, [pc, #40]	; (801126c <UpdateFCntDown+0x7c>)
 8011244:	689b      	ldr	r3, [r3, #8]
 8011246:	683a      	ldr	r2, [r7, #0]
 8011248:	621a      	str	r2, [r3, #32]
            break;
 801124a:	e005      	b.n	8011258 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 801124c:	4b07      	ldr	r3, [pc, #28]	; (801126c <UpdateFCntDown+0x7c>)
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	683a      	ldr	r2, [r7, #0]
 8011252:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8011254:	e000      	b.n	8011258 <UpdateFCntDown+0x68>
        default:
            break;
 8011256:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011258:	4b04      	ldr	r3, [pc, #16]	; (801126c <UpdateFCntDown+0x7c>)
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	4798      	blx	r3
}
 801125e:	46c0      	nop			; (mov r8, r8)
 8011260:	46bd      	mov	sp, r7
 8011262:	b002      	add	sp, #8
 8011264:	bd80      	pop	{r7, pc}
 8011266:	46c0      	nop			; (mov r8, r8)
 8011268:	080208d0 	.word	0x080208d0
 801126c:	20000d68 	.word	0x20000d68

08011270 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
void ResetFCnts( void )
{
 8011270:	b580      	push	{r7, lr}
 8011272:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntUp = 0;
 8011274:	4b16      	ldr	r3, [pc, #88]	; (80112d0 <ResetFCnts+0x60>)
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	2200      	movs	r2, #0
 801127a:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801127c:	4b14      	ldr	r3, [pc, #80]	; (80112d0 <ResetFCnts+0x60>)
 801127e:	689b      	ldr	r3, [r3, #8]
 8011280:	2201      	movs	r2, #1
 8011282:	4252      	negs	r2, r2
 8011284:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011286:	4b12      	ldr	r3, [pc, #72]	; (80112d0 <ResetFCnts+0x60>)
 8011288:	689b      	ldr	r3, [r3, #8]
 801128a:	2201      	movs	r2, #1
 801128c:	4252      	negs	r2, r2
 801128e:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 8011290:	4b0f      	ldr	r3, [pc, #60]	; (80112d0 <ResetFCnts+0x60>)
 8011292:	689b      	ldr	r3, [r3, #8]
 8011294:	2201      	movs	r2, #1
 8011296:	4252      	negs	r2, r2
 8011298:	615a      	str	r2, [r3, #20]

    CryptoCtx.NvmCtx->McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 801129a:	4b0d      	ldr	r3, [pc, #52]	; (80112d0 <ResetFCnts+0x60>)
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	2201      	movs	r2, #1
 80112a0:	4252      	negs	r2, r2
 80112a2:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 80112a4:	4b0a      	ldr	r3, [pc, #40]	; (80112d0 <ResetFCnts+0x60>)
 80112a6:	689b      	ldr	r3, [r3, #8]
 80112a8:	2201      	movs	r2, #1
 80112aa:	4252      	negs	r2, r2
 80112ac:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 80112ae:	4b08      	ldr	r3, [pc, #32]	; (80112d0 <ResetFCnts+0x60>)
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	2201      	movs	r2, #1
 80112b4:	4252      	negs	r2, r2
 80112b6:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 80112b8:	4b05      	ldr	r3, [pc, #20]	; (80112d0 <ResetFCnts+0x60>)
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	2201      	movs	r2, #1
 80112be:	4252      	negs	r2, r2
 80112c0:	625a      	str	r2, [r3, #36]	; 0x24

    CryptoCtx.EventCryptoNvmCtxChanged( );
 80112c2:	4b03      	ldr	r3, [pc, #12]	; (80112d0 <ResetFCnts+0x60>)
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	4798      	blx	r3
}
 80112c8:	46c0      	nop			; (mov r8, r8)
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	46c0      	nop			; (mov r8, r8)
 80112d0:	20000d68 	.word	0x20000d68

080112d4 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	af00      	add	r7, sp, #0
    return;
 80112d8:	46c0      	nop			; (mov r8, r8)
}
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
	...

080112e0 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( EventNvmCtxChanged cryptoNvmCtxChanged )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
    // Initialize volatile variables
    CryptoCtx.LrWanVersion.Fields.Major = 1;
 80112e8:	4b22      	ldr	r3, [pc, #136]	; (8011374 <LoRaMacCryptoInit+0x94>)
 80112ea:	2201      	movs	r2, #1
 80112ec:	70da      	strb	r2, [r3, #3]
    CryptoCtx.LrWanVersion.Fields.Minor = 1;
 80112ee:	4b21      	ldr	r3, [pc, #132]	; (8011374 <LoRaMacCryptoInit+0x94>)
 80112f0:	2201      	movs	r2, #1
 80112f2:	709a      	strb	r2, [r3, #2]
    CryptoCtx.LrWanVersion.Fields.Revision = 0;
 80112f4:	4b1f      	ldr	r3, [pc, #124]	; (8011374 <LoRaMacCryptoInit+0x94>)
 80112f6:	2200      	movs	r2, #0
 80112f8:	705a      	strb	r2, [r3, #1]
    CryptoCtx.LrWanVersion.Fields.Rfu = 0;
 80112fa:	4b1e      	ldr	r3, [pc, #120]	; (8011374 <LoRaMacCryptoInit+0x94>)
 80112fc:	2200      	movs	r2, #0
 80112fe:	701a      	strb	r2, [r3, #0]
    CryptoCtx.RJcount0 = 0;
 8011300:	4b1c      	ldr	r3, [pc, #112]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011302:	2200      	movs	r2, #0
 8011304:	809a      	strh	r2, [r3, #4]

    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8011306:	4b1b      	ldr	r3, [pc, #108]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011308:	4a1b      	ldr	r2, [pc, #108]	; (8011378 <LoRaMacCryptoInit+0x98>)
 801130a:	609a      	str	r2, [r3, #8]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d003      	beq.n	801131a <LoRaMacCryptoInit+0x3a>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8011312:	4b18      	ldr	r3, [pc, #96]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011314:	687a      	ldr	r2, [r7, #4]
 8011316:	60da      	str	r2, [r3, #12]
 8011318:	e002      	b.n	8011320 <LoRaMacCryptoInit+0x40>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 801131a:	4b16      	ldr	r3, [pc, #88]	; (8011374 <LoRaMacCryptoInit+0x94>)
 801131c:	4a17      	ldr	r2, [pc, #92]	; (801137c <LoRaMacCryptoInit+0x9c>)
 801131e:	60da      	str	r2, [r3, #12]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8011320:	4b14      	ldr	r3, [pc, #80]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011322:	689b      	ldr	r3, [r3, #8]
 8011324:	2230      	movs	r2, #48	; 0x30
 8011326:	2100      	movs	r1, #0
 8011328:	0018      	movs	r0, r3
 801132a:	f004 f8d9 	bl	80154e0 <memset1>

    // Reset frame counters
    CryptoCtx.RJcount0 = 0;
 801132e:	4b11      	ldr	r3, [pc, #68]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011330:	2200      	movs	r2, #0
 8011332:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 8011334:	4b0f      	ldr	r3, [pc, #60]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011336:	689b      	ldr	r3, [r3, #8]
 8011338:	2200      	movs	r2, #0
 801133a:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 801133c:	4b0d      	ldr	r3, [pc, #52]	; (8011374 <LoRaMacCryptoInit+0x94>)
 801133e:	689b      	ldr	r3, [r3, #8]
 8011340:	2201      	movs	r2, #1
 8011342:	4252      	negs	r2, r2
 8011344:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011346:	4b0b      	ldr	r3, [pc, #44]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011348:	689b      	ldr	r3, [r3, #8]
 801134a:	2201      	movs	r2, #1
 801134c:	4252      	negs	r2, r2
 801134e:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8011350:	4b08      	ldr	r3, [pc, #32]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011352:	689b      	ldr	r3, [r3, #8]
 8011354:	2201      	movs	r2, #1
 8011356:	4252      	negs	r2, r2
 8011358:	611a      	str	r2, [r3, #16]

    // Set non zero values
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 801135a:	4b06      	ldr	r3, [pc, #24]	; (8011374 <LoRaMacCryptoInit+0x94>)
 801135c:	689a      	ldr	r2, [r3, #8]
 801135e:	4b05      	ldr	r3, [pc, #20]	; (8011374 <LoRaMacCryptoInit+0x94>)
 8011360:	689b      	ldr	r3, [r3, #8]
 8011362:	3214      	adds	r2, #20
 8011364:	62da      	str	r2, [r3, #44]	; 0x2c
    ResetFCnts( );
 8011366:	f7ff ff83 	bl	8011270 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801136a:	2300      	movs	r3, #0
}
 801136c:	0018      	movs	r0, r3
 801136e:	46bd      	mov	sp, r7
 8011370:	b002      	add	sp, #8
 8011372:	bd80      	pop	{r7, pc}
 8011374:	20000d68 	.word	0x20000d68
 8011378:	20000d78 	.word	0x20000d78
 801137c:	080112d5 	.word	0x080112d5

08011380 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
    CryptoCtx.LrWanVersion = version;
 8011388:	4b03      	ldr	r3, [pc, #12]	; (8011398 <LoRaMacCryptoSetLrWanVersion+0x18>)
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801138e:	2300      	movs	r3, #0
}
 8011390:	0018      	movs	r0, r3
 8011392:	46bd      	mov	sp, r7
 8011394:	b002      	add	sp, #8
 8011396:	bd80      	pop	{r7, pc}
 8011398:	20000d68 	.word	0x20000d68

0801139c <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d007      	beq.n	80113ba <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 80113aa:	6879      	ldr	r1, [r7, #4]
 80113ac:	4b05      	ldr	r3, [pc, #20]	; (80113c4 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 80113ae:	2230      	movs	r2, #48	; 0x30
 80113b0:	0018      	movs	r0, r3
 80113b2:	f004 f859 	bl	8015468 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 80113b6:	2300      	movs	r3, #0
 80113b8:	e000      	b.n	80113bc <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80113ba:	2307      	movs	r3, #7
    }
}
 80113bc:	0018      	movs	r0, r3
 80113be:	46bd      	mov	sp, r7
 80113c0:	b002      	add	sp, #8
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	20000d78 	.word	0x20000d78

080113c8 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2230      	movs	r2, #48	; 0x30
 80113d4:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 80113d6:	4b02      	ldr	r3, [pc, #8]	; (80113e0 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 80113d8:	0018      	movs	r0, r3
 80113da:	46bd      	mov	sp, r7
 80113dc:	b002      	add	sp, #8
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	20000d78 	.word	0x20000d78

080113e4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	0002      	movs	r2, r0
 80113ec:	6039      	str	r1, [r7, #0]
 80113ee:	1dfb      	adds	r3, r7, #7
 80113f0:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80113f2:	683a      	ldr	r2, [r7, #0]
 80113f4:	1dfb      	adds	r3, r7, #7
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	0011      	movs	r1, r2
 80113fa:	0018      	movs	r0, r3
 80113fc:	f7f8 fbde 	bl	8009bbc <SecureElementSetKey>
 8011400:	1e03      	subs	r3, r0, #0
 8011402:	d001      	beq.n	8011408 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011404:	230c      	movs	r3, #12
 8011406:	e000      	b.n	801140a <LoRaMacCryptoSetKey+0x26>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011408:	2300      	movs	r3, #0
}
 801140a:	0018      	movs	r0, r3
 801140c:	46bd      	mov	sp, r7
 801140e:	b002      	add	sp, #8
 8011410:	bd80      	pop	{r7, pc}
	...

08011414 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8011414:	b5b0      	push	{r4, r5, r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d101      	bne.n	8011426 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011422:	2307      	movs	r3, #7
 8011424:	e064      	b.n	80114f0 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8011426:	230f      	movs	r3, #15
 8011428:	18fb      	adds	r3, r7, r3
 801142a:	2201      	movs	r2, #1
 801142c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801142e:	240e      	movs	r4, #14
 8011430:	193b      	adds	r3, r7, r4
 8011432:	2210      	movs	r2, #16
 8011434:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#ifdef NONCE_INC
    CryptoCtx.NvmCtx->DevNonce++;
#else  
    CryptoCtx.NvmCtx->DevNonce = (uint16_t) rand1( );
 8011436:	f003 ffd7 	bl	80153e8 <rand1>
 801143a:	0002      	movs	r2, r0
 801143c:	4b2e      	ldr	r3, [pc, #184]	; (80114f8 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 801143e:	689b      	ldr	r3, [r3, #8]
 8011440:	b292      	uxth	r2, r2
 8011442:	801a      	strh	r2, [r3, #0]
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011444:	4b2c      	ldr	r3, [pc, #176]	; (80114f8 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 801144a:	4b2b      	ldr	r3, [pc, #172]	; (80114f8 <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	881a      	ldrh	r2, [r3, #0]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	330e      	adds	r3, #14
 8011458:	0025      	movs	r5, r4
 801145a:	193c      	adds	r4, r7, r4
 801145c:	0019      	movs	r1, r3
 801145e:	2002      	movs	r0, #2
 8011460:	f7ff fe24 	bl	80110ac <DeriveLifeTimeSessionKey>
 8011464:	0003      	movs	r3, r0
 8011466:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011468:	002c      	movs	r4, r5
 801146a:	193b      	adds	r3, r7, r4
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d003      	beq.n	801147a <LoRaMacCryptoPrepareJoinRequest+0x66>
    {
        return retval;
 8011472:	230e      	movs	r3, #14
 8011474:	18fb      	adds	r3, r7, r3
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	e03a      	b.n	80114f0 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	330e      	adds	r3, #14
 801147e:	250e      	movs	r5, #14
 8011480:	197c      	adds	r4, r7, r5
 8011482:	0019      	movs	r1, r3
 8011484:	2003      	movs	r0, #3
 8011486:	f7ff fe11 	bl	80110ac <DeriveLifeTimeSessionKey>
 801148a:	0003      	movs	r3, r0
 801148c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801148e:	197b      	adds	r3, r7, r5
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d003      	beq.n	801149e <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
 8011496:	230e      	movs	r3, #14
 8011498:	18fb      	adds	r3, r7, r3
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	e028      	b.n	80114f0 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	0018      	movs	r0, r3
 80114a2:	f001 f856 	bl	8012552 <LoRaMacSerializerJoinRequest>
 80114a6:	1e03      	subs	r3, r0, #0
 80114a8:	d001      	beq.n	80114ae <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80114aa:	230e      	movs	r3, #14
 80114ac:	e020      	b.n	80114f0 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Compute mic
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6818      	ldr	r0, [r3, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	3318      	adds	r3, #24
 80114b6:	0019      	movs	r1, r3
 80114b8:	250e      	movs	r5, #14
 80114ba:	197c      	adds	r4, r7, r5
 80114bc:	230f      	movs	r3, #15
 80114be:	18fb      	adds	r3, r7, r3
 80114c0:	781a      	ldrb	r2, [r3, #0]
 80114c2:	000b      	movs	r3, r1
 80114c4:	2113      	movs	r1, #19
 80114c6:	f7ff f996 	bl	80107f6 <LoraMacCryptoComputeCmac>
 80114ca:	0003      	movs	r3, r0
 80114cc:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80114ce:	197b      	adds	r3, r7, r5
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d003      	beq.n	80114de <LoRaMacCryptoPrepareJoinRequest+0xca>
    {
        return retval;
 80114d6:	230e      	movs	r3, #14
 80114d8:	18fb      	adds	r3, r7, r3
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	e008      	b.n	80114f0 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	0018      	movs	r0, r3
 80114e2:	f001 f836 	bl	8012552 <LoRaMacSerializerJoinRequest>
 80114e6:	1e03      	subs	r3, r0, #0
 80114e8:	d001      	beq.n	80114ee <LoRaMacCryptoPrepareJoinRequest+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80114ea:	230e      	movs	r3, #14
 80114ec:	e000      	b.n	80114f0 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80114ee:	2300      	movs	r3, #0
}
 80114f0:	0018      	movs	r0, r3
 80114f2:	46bd      	mov	sp, r7
 80114f4:	b004      	add	sp, #16
 80114f6:	bdb0      	pop	{r4, r5, r7, pc}
 80114f8:	20000d68 	.word	0x20000d68

080114fc <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80114fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114fe:	b0cd      	sub	sp, #308	; 0x134
 8011500:	af00      	add	r7, sp, #0
 8011502:	60b9      	str	r1, [r7, #8]
 8011504:	607a      	str	r2, [r7, #4]
 8011506:	4bde      	ldr	r3, [pc, #888]	; (8011880 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011508:	2298      	movs	r2, #152	; 0x98
 801150a:	0052      	lsls	r2, r2, #1
 801150c:	4694      	mov	ip, r2
 801150e:	44bc      	add	ip, r7
 8011510:	4463      	add	r3, ip
 8011512:	1c02      	adds	r2, r0, #0
 8011514:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d002      	beq.n	8011522 <LoRaMacCryptoHandleJoinAccept+0x26>
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d101      	bne.n	8011526 <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011522:	2307      	movs	r3, #7
 8011524:	e25e      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011526:	2328      	movs	r3, #40	; 0x28
 8011528:	33ff      	adds	r3, #255	; 0xff
 801152a:	18fb      	adds	r3, r7, r3
 801152c:	2210      	movs	r2, #16
 801152e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 8011530:	232e      	movs	r3, #46	; 0x2e
 8011532:	33ff      	adds	r3, #255	; 0xff
 8011534:	18fb      	adds	r3, r7, r3
 8011536:	2200      	movs	r2, #0
 8011538:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 801153a:	4bd2      	ldr	r3, [pc, #840]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 801153c:	689b      	ldr	r3, [r3, #8]
 801153e:	2294      	movs	r2, #148	; 0x94
 8011540:	0052      	lsls	r2, r2, #1
 8011542:	18ba      	adds	r2, r7, r2
 8011544:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 8011546:	4bce      	ldr	r3, [pc, #824]	; (8011880 <LoRaMacCryptoHandleJoinAccept+0x384>)
 8011548:	2298      	movs	r2, #152	; 0x98
 801154a:	0052      	lsls	r2, r2, #1
 801154c:	4694      	mov	ip, r2
 801154e:	44bc      	add	ip, r7
 8011550:	4463      	add	r3, ip
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	2bff      	cmp	r3, #255	; 0xff
 8011556:	d10a      	bne.n	801156e <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
 8011558:	2397      	movs	r3, #151	; 0x97
 801155a:	005b      	lsls	r3, r3, #1
 801155c:	18fb      	adds	r3, r7, r3
 801155e:	2201      	movs	r2, #1
 8011560:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 8011562:	232e      	movs	r3, #46	; 0x2e
 8011564:	33ff      	adds	r3, #255	; 0xff
 8011566:	18fb      	adds	r3, r7, r3
 8011568:	220c      	movs	r2, #12
 801156a:	701a      	strb	r2, [r3, #0]
 801156c:	e023      	b.n	80115b6 <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
 801156e:	2397      	movs	r3, #151	; 0x97
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	18fb      	adds	r3, r7, r3
 8011574:	2203      	movs	r2, #3
 8011576:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 8011578:	4bc1      	ldr	r3, [pc, #772]	; (8011880 <LoRaMacCryptoHandleJoinAccept+0x384>)
 801157a:	2298      	movs	r2, #152	; 0x98
 801157c:	0052      	lsls	r2, r2, #1
 801157e:	4694      	mov	ip, r2
 8011580:	44bc      	add	ip, r7
 8011582:	4463      	add	r3, ip
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d008      	beq.n	801159c <LoRaMacCryptoHandleJoinAccept+0xa0>
 801158a:	4bbd      	ldr	r3, [pc, #756]	; (8011880 <LoRaMacCryptoHandleJoinAccept+0x384>)
 801158c:	2298      	movs	r2, #152	; 0x98
 801158e:	0052      	lsls	r2, r2, #1
 8011590:	4694      	mov	ip, r2
 8011592:	44bc      	add	ip, r7
 8011594:	4463      	add	r3, ip
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	2b02      	cmp	r3, #2
 801159a:	d105      	bne.n	80115a8 <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
 801159c:	4bba      	ldr	r3, [pc, #744]	; (8011888 <LoRaMacCryptoHandleJoinAccept+0x38c>)
 801159e:	2294      	movs	r2, #148	; 0x94
 80115a0:	0052      	lsls	r2, r2, #1
 80115a2:	18ba      	adds	r2, r7, r2
 80115a4:	6013      	str	r3, [r2, #0]
 80115a6:	e006      	b.n	80115b6 <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
 80115a8:	4bb6      	ldr	r3, [pc, #728]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 80115aa:	689b      	ldr	r3, [r3, #8]
 80115ac:	3328      	adds	r3, #40	; 0x28
 80115ae:	2294      	movs	r2, #148	; 0x94
 80115b0:	0052      	lsls	r2, r2, #1
 80115b2:	18ba      	adds	r2, r7, r2
 80115b4:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	791b      	ldrb	r3, [r3, #4]
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	242e      	movs	r4, #46	; 0x2e
 80115be:	34ff      	adds	r4, #255	; 0xff
 80115c0:	193b      	adds	r3, r7, r4
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	18d3      	adds	r3, r2, r3
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	2514      	movs	r5, #20
 80115cc:	197b      	adds	r3, r7, r5
 80115ce:	2100      	movs	r1, #0
 80115d0:	0018      	movs	r0, r3
 80115d2:	f003 ff85 	bl	80154e0 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	1c58      	adds	r0, r3, #1
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	791b      	ldrb	r3, [r3, #4]
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	3b01      	subs	r3, #1
 80115e4:	b299      	uxth	r1, r3
 80115e6:	193b      	adds	r3, r7, r4
 80115e8:	781b      	ldrb	r3, [r3, #0]
 80115ea:	197a      	adds	r2, r7, r5
 80115ec:	18d4      	adds	r4, r2, r3
 80115ee:	2397      	movs	r3, #151	; 0x97
 80115f0:	005b      	lsls	r3, r3, #1
 80115f2:	18fb      	adds	r3, r7, r3
 80115f4:	781a      	ldrb	r2, [r3, #0]
 80115f6:	0023      	movs	r3, r4
 80115f8:	f7f8 fbbe 	bl	8009d78 <SecureElementAesEncrypt>
 80115fc:	1e03      	subs	r3, r0, #0
 80115fe:	d001      	beq.n	8011604 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011600:	230c      	movs	r3, #12
 8011602:	e1ef      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	1c58      	adds	r0, r3, #1
 801160a:	232e      	movs	r3, #46	; 0x2e
 801160c:	33ff      	adds	r3, #255	; 0xff
 801160e:	18fb      	adds	r3, r7, r3
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	2214      	movs	r2, #20
 8011614:	18ba      	adds	r2, r7, r2
 8011616:	18d1      	adds	r1, r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	791b      	ldrb	r3, [r3, #4]
 801161c:	b29b      	uxth	r3, r3
 801161e:	3b01      	subs	r3, #1
 8011620:	b29b      	uxth	r3, r3
 8011622:	001a      	movs	r2, r3
 8011624:	f003 ff20 	bl	8015468 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	0018      	movs	r0, r3
 801162c:	f000 fd8e 	bl	801214c <LoRaMacParserJoinAccept>
 8011630:	1e03      	subs	r3, r0, #0
 8011632:	d001      	beq.n	8011638 <LoRaMacCryptoHandleJoinAccept+0x13c>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011634:	230d      	movs	r3, #13
 8011636:	e1d5      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	7c1b      	ldrb	r3, [r3, #16]
 801163c:	227f      	movs	r2, #127	; 0x7f
 801163e:	4393      	bics	r3, r2
 8011640:	b2db      	uxtb	r3, r3
 8011642:	2b00      	cmp	r3, #0
 8011644:	d008      	beq.n	8011658 <LoRaMacCryptoHandleJoinAccept+0x15c>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
 8011646:	4b8f      	ldr	r3, [pc, #572]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011648:	2201      	movs	r2, #1
 801164a:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 801164c:	2330      	movs	r3, #48	; 0x30
 801164e:	33ff      	adds	r3, #255	; 0xff
 8011650:	18fb      	adds	r3, r7, r3
 8011652:	2202      	movs	r2, #2
 8011654:	701a      	strb	r2, [r3, #0]
 8011656:	e007      	b.n	8011668 <LoRaMacCryptoHandleJoinAccept+0x16c>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
 8011658:	4b8a      	ldr	r3, [pc, #552]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 801165a:	2200      	movs	r2, #0
 801165c:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 801165e:	2330      	movs	r3, #48	; 0x30
 8011660:	33ff      	adds	r3, #255	; 0xff
 8011662:	18fb      	adds	r3, r7, r3
 8011664:	2201      	movs	r2, #1
 8011666:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 8011668:	4b86      	ldr	r3, [pc, #536]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 801166a:	789b      	ldrb	r3, [r3, #2]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d11e      	bne.n	80116ae <LoRaMacCryptoHandleJoinAccept+0x1b2>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6818      	ldr	r0, [r3, #0]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	791b      	ldrb	r3, [r3, #4]
 8011678:	b29b      	uxth	r3, r3
 801167a:	3b04      	subs	r3, #4
 801167c:	b299      	uxth	r1, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011682:	2628      	movs	r6, #40	; 0x28
 8011684:	36ff      	adds	r6, #255	; 0xff
 8011686:	19bc      	adds	r4, r7, r6
 8011688:	2330      	movs	r3, #48	; 0x30
 801168a:	33ff      	adds	r3, #255	; 0xff
 801168c:	18fb      	adds	r3, r7, r3
 801168e:	781a      	ldrb	r2, [r3, #0]
 8011690:	002b      	movs	r3, r5
 8011692:	f7ff f8d1 	bl	8010838 <VerifyCmac>
 8011696:	0003      	movs	r3, r0
 8011698:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801169a:	19bb      	adds	r3, r7, r6
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d100      	bne.n	80116a4 <LoRaMacCryptoHandleJoinAccept+0x1a8>
 80116a2:	e0b9      	b.n	8011818 <LoRaMacCryptoHandleJoinAccept+0x31c>
        {
            return retval;
 80116a4:	2328      	movs	r3, #40	; 0x28
 80116a6:	33ff      	adds	r3, #255	; 0xff
 80116a8:	18fb      	adds	r3, r7, r3
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	e19a      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 80116ae:	2092      	movs	r0, #146	; 0x92
 80116b0:	0040      	lsls	r0, r0, #1
 80116b2:	183b      	adds	r3, r7, r0
 80116b4:	2200      	movs	r2, #0
 80116b6:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 80116b8:	183b      	adds	r3, r7, r0
 80116ba:	881b      	ldrh	r3, [r3, #0]
 80116bc:	183a      	adds	r2, r7, r0
 80116be:	1c59      	adds	r1, r3, #1
 80116c0:	8011      	strh	r1, [r2, #0]
 80116c2:	0019      	movs	r1, r3
 80116c4:	4b71      	ldr	r3, [pc, #452]	; (801188c <LoRaMacCryptoHandleJoinAccept+0x390>)
 80116c6:	2298      	movs	r2, #152	; 0x98
 80116c8:	0052      	lsls	r2, r2, #1
 80116ca:	4694      	mov	ip, r2
 80116cc:	44bc      	add	ip, r7
 80116ce:	4463      	add	r3, ip
 80116d0:	4a6b      	ldr	r2, [pc, #428]	; (8011880 <LoRaMacCryptoHandleJoinAccept+0x384>)
 80116d2:	2498      	movs	r4, #152	; 0x98
 80116d4:	0064      	lsls	r4, r4, #1
 80116d6:	46a4      	mov	ip, r4
 80116d8:	44bc      	add	ip, r7
 80116da:	4462      	add	r2, ip
 80116dc:	7812      	ldrb	r2, [r2, #0]
 80116de:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80116e0:	0004      	movs	r4, r0
 80116e2:	183b      	adds	r3, r7, r0
 80116e4:	881b      	ldrh	r3, [r3, #0]
 80116e6:	2614      	movs	r6, #20
 80116e8:	19ba      	adds	r2, r7, r6
 80116ea:	18d3      	adds	r3, r2, r3
 80116ec:	68b9      	ldr	r1, [r7, #8]
 80116ee:	2208      	movs	r2, #8
 80116f0:	0018      	movs	r0, r3
 80116f2:	f003 fed4 	bl	801549e <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80116f6:	0020      	movs	r0, r4
 80116f8:	183b      	adds	r3, r7, r0
 80116fa:	183a      	adds	r2, r7, r0
 80116fc:	8812      	ldrh	r2, [r2, #0]
 80116fe:	3208      	adds	r2, #8
 8011700:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8011702:	4b60      	ldr	r3, [pc, #384]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	8819      	ldrh	r1, [r3, #0]
 8011708:	183b      	adds	r3, r7, r0
 801170a:	881b      	ldrh	r3, [r3, #0]
 801170c:	0004      	movs	r4, r0
 801170e:	183a      	adds	r2, r7, r0
 8011710:	1c58      	adds	r0, r3, #1
 8011712:	8010      	strh	r0, [r2, #0]
 8011714:	001a      	movs	r2, r3
 8011716:	b2c9      	uxtb	r1, r1
 8011718:	4b5c      	ldr	r3, [pc, #368]	; (801188c <LoRaMacCryptoHandleJoinAccept+0x390>)
 801171a:	2098      	movs	r0, #152	; 0x98
 801171c:	0040      	lsls	r0, r0, #1
 801171e:	4684      	mov	ip, r0
 8011720:	44bc      	add	ip, r7
 8011722:	4463      	add	r3, ip
 8011724:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 8011726:	4b57      	ldr	r3, [pc, #348]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011728:	689b      	ldr	r3, [r3, #8]
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	0a1b      	lsrs	r3, r3, #8
 801172e:	b299      	uxth	r1, r3
 8011730:	193b      	adds	r3, r7, r4
 8011732:	881b      	ldrh	r3, [r3, #0]
 8011734:	193a      	adds	r2, r7, r4
 8011736:	1c58      	adds	r0, r3, #1
 8011738:	8010      	strh	r0, [r2, #0]
 801173a:	001a      	movs	r2, r3
 801173c:	b2c9      	uxtb	r1, r1
 801173e:	4b53      	ldr	r3, [pc, #332]	; (801188c <LoRaMacCryptoHandleJoinAccept+0x390>)
 8011740:	2098      	movs	r0, #152	; 0x98
 8011742:	0040      	lsls	r0, r0, #1
 8011744:	4684      	mov	ip, r0
 8011746:	44bc      	add	ip, r7
 8011748:	4463      	add	r3, ip
 801174a:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 801174c:	193b      	adds	r3, r7, r4
 801174e:	881b      	ldrh	r3, [r3, #0]
 8011750:	193a      	adds	r2, r7, r4
 8011752:	1c59      	adds	r1, r3, #1
 8011754:	8011      	strh	r1, [r2, #0]
 8011756:	001a      	movs	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	7959      	ldrb	r1, [r3, #5]
 801175c:	4b4b      	ldr	r3, [pc, #300]	; (801188c <LoRaMacCryptoHandleJoinAccept+0x390>)
 801175e:	2098      	movs	r0, #152	; 0x98
 8011760:	0040      	lsls	r0, r0, #1
 8011762:	4684      	mov	ip, r0
 8011764:	44bc      	add	ip, r7
 8011766:	4463      	add	r3, ip
 8011768:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	791b      	ldrb	r3, [r3, #4]
 801176e:	b29a      	uxth	r2, r3
 8011770:	232e      	movs	r3, #46	; 0x2e
 8011772:	33ff      	adds	r3, #255	; 0xff
 8011774:	18fb      	adds	r3, r7, r3
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	b29b      	uxth	r3, r3
 801177a:	18d3      	adds	r3, r2, r3
 801177c:	b29b      	uxth	r3, r3
 801177e:	3b05      	subs	r3, #5
 8011780:	b299      	uxth	r1, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011786:	2328      	movs	r3, #40	; 0x28
 8011788:	33ff      	adds	r3, #255	; 0xff
 801178a:	18fc      	adds	r4, r7, r3
 801178c:	2230      	movs	r2, #48	; 0x30
 801178e:	32ff      	adds	r2, #255	; 0xff
 8011790:	18bb      	adds	r3, r7, r2
 8011792:	781a      	ldrb	r2, [r3, #0]
 8011794:	19b8      	adds	r0, r7, r6
 8011796:	002b      	movs	r3, r5
 8011798:	f7ff f84e 	bl	8010838 <VerifyCmac>
 801179c:	0003      	movs	r3, r0
 801179e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80117a0:	2328      	movs	r3, #40	; 0x28
 80117a2:	33ff      	adds	r3, #255	; 0xff
 80117a4:	18fb      	adds	r3, r7, r3
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d004      	beq.n	80117b6 <LoRaMacCryptoHandleJoinAccept+0x2ba>
        {
            return retval;
 80117ac:	2328      	movs	r3, #40	; 0x28
 80117ae:	33ff      	adds	r3, #255	; 0xff
 80117b0:	18fb      	adds	r3, r7, r3
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	e116      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	2290      	movs	r2, #144	; 0x90
 80117ba:	0052      	lsls	r2, r2, #1
 80117bc:	18b9      	adds	r1, r7, r2
 80117be:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	799b      	ldrb	r3, [r3, #6]
 80117c4:	18b9      	adds	r1, r7, r2
 80117c6:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	79db      	ldrb	r3, [r3, #7]
 80117cc:	021b      	lsls	r3, r3, #8
 80117ce:	0011      	movs	r1, r2
 80117d0:	18ba      	adds	r2, r7, r2
 80117d2:	6812      	ldr	r2, [r2, #0]
 80117d4:	4313      	orrs	r3, r2
 80117d6:	000a      	movs	r2, r1
 80117d8:	18b9      	adds	r1, r7, r2
 80117da:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7a1b      	ldrb	r3, [r3, #8]
 80117e0:	041b      	lsls	r3, r3, #16
 80117e2:	0011      	movs	r1, r2
 80117e4:	18ba      	adds	r2, r7, r2
 80117e6:	6812      	ldr	r2, [r2, #0]
 80117e8:	4313      	orrs	r3, r2
 80117ea:	000a      	movs	r2, r1
 80117ec:	18b9      	adds	r1, r7, r2
 80117ee:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 80117f0:	4b24      	ldr	r3, [pc, #144]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 80117f2:	689b      	ldr	r3, [r3, #8]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	18ba      	adds	r2, r7, r2
 80117f8:	6812      	ldr	r2, [r2, #0]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d90a      	bls.n	8011814 <LoRaMacCryptoHandleJoinAccept+0x318>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 80117fe:	4b21      	ldr	r3, [pc, #132]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 8011800:	689b      	ldr	r3, [r3, #8]
 8011802:	2290      	movs	r2, #144	; 0x90
 8011804:	0052      	lsls	r2, r2, #1
 8011806:	18ba      	adds	r2, r7, r2
 8011808:	6812      	ldr	r2, [r2, #0]
 801180a:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 801180c:	4b1d      	ldr	r3, [pc, #116]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	4798      	blx	r3
 8011812:	e001      	b.n	8011818 <LoRaMacCryptoHandleJoinAccept+0x31c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8011814:	2303      	movs	r3, #3
 8011816:	e0e5      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011818:	4b1a      	ldr	r3, [pc, #104]	; (8011884 <LoRaMacCryptoHandleJoinAccept+0x388>)
 801181a:	789b      	ldrb	r3, [r3, #2]
 801181c:	2b01      	cmp	r3, #1
 801181e:	d167      	bne.n	80118f0 <LoRaMacCryptoHandleJoinAccept+0x3f4>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	1d99      	adds	r1, r3, #6
 8011824:	2528      	movs	r5, #40	; 0x28
 8011826:	35ff      	adds	r5, #255	; 0xff
 8011828:	197c      	adds	r4, r7, r5
 801182a:	2394      	movs	r3, #148	; 0x94
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	18fb      	adds	r3, r7, r3
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	68ba      	ldr	r2, [r7, #8]
 8011834:	2004      	movs	r0, #4
 8011836:	f7ff fbc3 	bl	8010fc0 <DeriveSessionKey11x>
 801183a:	0003      	movs	r3, r0
 801183c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801183e:	197b      	adds	r3, r7, r5
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d004      	beq.n	8011850 <LoRaMacCryptoHandleJoinAccept+0x354>
        {
            return retval;
 8011846:	2328      	movs	r3, #40	; 0x28
 8011848:	33ff      	adds	r3, #255	; 0xff
 801184a:	18fb      	adds	r3, r7, r3
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	e0c9      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	1d99      	adds	r1, r3, #6
 8011854:	2528      	movs	r5, #40	; 0x28
 8011856:	35ff      	adds	r5, #255	; 0xff
 8011858:	197c      	adds	r4, r7, r5
 801185a:	2394      	movs	r3, #148	; 0x94
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	18fb      	adds	r3, r7, r3
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	68ba      	ldr	r2, [r7, #8]
 8011864:	2005      	movs	r0, #5
 8011866:	f7ff fbab 	bl	8010fc0 <DeriveSessionKey11x>
 801186a:	0003      	movs	r3, r0
 801186c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801186e:	197b      	adds	r3, r7, r5
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d00c      	beq.n	8011890 <LoRaMacCryptoHandleJoinAccept+0x394>
        {
            return retval;
 8011876:	2328      	movs	r3, #40	; 0x28
 8011878:	33ff      	adds	r3, #255	; 0xff
 801187a:	18fb      	adds	r3, r7, r3
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	e0b1      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
 8011880:	fffffedf 	.word	0xfffffedf
 8011884:	20000d68 	.word	0x20000d68
 8011888:	20000d6c 	.word	0x20000d6c
 801188c:	fffffee4 	.word	0xfffffee4
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	1d99      	adds	r1, r3, #6
 8011894:	2528      	movs	r5, #40	; 0x28
 8011896:	35ff      	adds	r5, #255	; 0xff
 8011898:	197c      	adds	r4, r7, r5
 801189a:	2394      	movs	r3, #148	; 0x94
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	18fb      	adds	r3, r7, r3
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	68ba      	ldr	r2, [r7, #8]
 80118a4:	2006      	movs	r0, #6
 80118a6:	f7ff fb8b 	bl	8010fc0 <DeriveSessionKey11x>
 80118aa:	0003      	movs	r3, r0
 80118ac:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80118ae:	197b      	adds	r3, r7, r5
 80118b0:	781b      	ldrb	r3, [r3, #0]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d004      	beq.n	80118c0 <LoRaMacCryptoHandleJoinAccept+0x3c4>
        {
            return retval;
 80118b6:	2328      	movs	r3, #40	; 0x28
 80118b8:	33ff      	adds	r3, #255	; 0xff
 80118ba:	18fb      	adds	r3, r7, r3
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	e091      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	1d99      	adds	r1, r3, #6
 80118c4:	2528      	movs	r5, #40	; 0x28
 80118c6:	35ff      	adds	r5, #255	; 0xff
 80118c8:	197c      	adds	r4, r7, r5
 80118ca:	2394      	movs	r3, #148	; 0x94
 80118cc:	005b      	lsls	r3, r3, #1
 80118ce:	18fb      	adds	r3, r7, r3
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	68ba      	ldr	r2, [r7, #8]
 80118d4:	2007      	movs	r0, #7
 80118d6:	f7ff fb73 	bl	8010fc0 <DeriveSessionKey11x>
 80118da:	0003      	movs	r3, r0
 80118dc:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80118de:	197b      	adds	r3, r7, r5
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d064      	beq.n	80119b0 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 80118e6:	2328      	movs	r3, #40	; 0x28
 80118e8:	33ff      	adds	r3, #255	; 0xff
 80118ea:	18fb      	adds	r3, r7, r3
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	e079      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	1d99      	adds	r1, r3, #6
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	3309      	adds	r3, #9
 80118f8:	001a      	movs	r2, r3
 80118fa:	4b3c      	ldr	r3, [pc, #240]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 80118fc:	689b      	ldr	r3, [r3, #8]
 80118fe:	2528      	movs	r5, #40	; 0x28
 8011900:	35ff      	adds	r5, #255	; 0xff
 8011902:	197c      	adds	r4, r7, r5
 8011904:	2007      	movs	r0, #7
 8011906:	f7ff fafd 	bl	8010f04 <DeriveSessionKey10x>
 801190a:	0003      	movs	r3, r0
 801190c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801190e:	197b      	adds	r3, r7, r5
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d004      	beq.n	8011920 <LoRaMacCryptoHandleJoinAccept+0x424>
        {
            return retval;
 8011916:	2328      	movs	r3, #40	; 0x28
 8011918:	33ff      	adds	r3, #255	; 0xff
 801191a:	18fb      	adds	r3, r7, r3
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	e061      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	1d99      	adds	r1, r3, #6
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	3309      	adds	r3, #9
 8011928:	001a      	movs	r2, r3
 801192a:	4b30      	ldr	r3, [pc, #192]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	2528      	movs	r5, #40	; 0x28
 8011930:	35ff      	adds	r5, #255	; 0xff
 8011932:	197c      	adds	r4, r7, r5
 8011934:	2006      	movs	r0, #6
 8011936:	f7ff fae5 	bl	8010f04 <DeriveSessionKey10x>
 801193a:	0003      	movs	r3, r0
 801193c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801193e:	197b      	adds	r3, r7, r5
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d004      	beq.n	8011950 <LoRaMacCryptoHandleJoinAccept+0x454>
        {
            return retval;
 8011946:	2328      	movs	r3, #40	; 0x28
 8011948:	33ff      	adds	r3, #255	; 0xff
 801194a:	18fb      	adds	r3, r7, r3
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	e049      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	1d99      	adds	r1, r3, #6
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3309      	adds	r3, #9
 8011958:	001a      	movs	r2, r3
 801195a:	4b24      	ldr	r3, [pc, #144]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 801195c:	689b      	ldr	r3, [r3, #8]
 801195e:	2528      	movs	r5, #40	; 0x28
 8011960:	35ff      	adds	r5, #255	; 0xff
 8011962:	197c      	adds	r4, r7, r5
 8011964:	2004      	movs	r0, #4
 8011966:	f7ff facd 	bl	8010f04 <DeriveSessionKey10x>
 801196a:	0003      	movs	r3, r0
 801196c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801196e:	197b      	adds	r3, r7, r5
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d004      	beq.n	8011980 <LoRaMacCryptoHandleJoinAccept+0x484>
        {
            return retval;
 8011976:	2328      	movs	r3, #40	; 0x28
 8011978:	33ff      	adds	r3, #255	; 0xff
 801197a:	18fb      	adds	r3, r7, r3
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	e031      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	1d99      	adds	r1, r3, #6
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	3309      	adds	r3, #9
 8011988:	001a      	movs	r2, r3
 801198a:	4b18      	ldr	r3, [pc, #96]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	2528      	movs	r5, #40	; 0x28
 8011990:	35ff      	adds	r5, #255	; 0xff
 8011992:	197c      	adds	r4, r7, r5
 8011994:	2005      	movs	r0, #5
 8011996:	f7ff fab5 	bl	8010f04 <DeriveSessionKey10x>
 801199a:	0003      	movs	r3, r0
 801199c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801199e:	197b      	adds	r3, r7, r5
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d004      	beq.n	80119b0 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 80119a6:	2328      	movs	r3, #40	; 0x28
 80119a8:	33ff      	adds	r3, #255	; 0xff
 80119aa:	18fb      	adds	r3, r7, r3
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	e019      	b.n	80119e4 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 80119b0:	4b0e      	ldr	r3, [pc, #56]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 80119b6:	4b0d      	ldr	r3, [pc, #52]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 80119b8:	689b      	ldr	r3, [r3, #8]
 80119ba:	2200      	movs	r2, #0
 80119bc:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 80119be:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 80119c0:	689b      	ldr	r3, [r3, #8]
 80119c2:	2201      	movs	r2, #1
 80119c4:	4252      	negs	r2, r2
 80119c6:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80119c8:	4b08      	ldr	r3, [pc, #32]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 80119ca:	689b      	ldr	r3, [r3, #8]
 80119cc:	2201      	movs	r2, #1
 80119ce:	4252      	negs	r2, r2
 80119d0:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80119d2:	4b06      	ldr	r3, [pc, #24]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 80119d4:	689b      	ldr	r3, [r3, #8]
 80119d6:	2201      	movs	r2, #1
 80119d8:	4252      	negs	r2, r2
 80119da:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80119dc:	4b03      	ldr	r3, [pc, #12]	; (80119ec <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	0018      	movs	r0, r3
 80119e6:	46bd      	mov	sp, r7
 80119e8:	b04d      	add	sp, #308	; 0x134
 80119ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ec:	20000d68 	.word	0x20000d68

080119f0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119f2:	b08f      	sub	sp, #60	; 0x3c
 80119f4:	af06      	add	r7, sp, #24
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	0008      	movs	r0, r1
 80119fa:	0011      	movs	r1, r2
 80119fc:	607b      	str	r3, [r7, #4]
 80119fe:	230b      	movs	r3, #11
 8011a00:	18fb      	adds	r3, r7, r3
 8011a02:	1c02      	adds	r2, r0, #0
 8011a04:	701a      	strb	r2, [r3, #0]
 8011a06:	230a      	movs	r3, #10
 8011a08:	18fb      	adds	r3, r7, r3
 8011a0a:	1c0a      	adds	r2, r1, #0
 8011a0c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011a0e:	231e      	movs	r3, #30
 8011a10:	18fb      	adds	r3, r7, r3
 8011a12:	2210      	movs	r2, #16
 8011a14:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 8011a16:	231f      	movs	r3, #31
 8011a18:	18fb      	adds	r3, r7, r3
 8011a1a:	2207      	movs	r2, #7
 8011a1c:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d101      	bne.n	8011a28 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011a24:	2307      	movs	r3, #7
 8011a26:	e0ff      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 8011a28:	4b81      	ldr	r3, [pc, #516]	; (8011c30 <LoRaMacCryptoSecureMessage+0x240>)
 8011a2a:	689b      	ldr	r3, [r3, #8]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	68fa      	ldr	r2, [r7, #12]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d201      	bcs.n	8011a38 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8011a34:	2305      	movs	r3, #5
 8011a36:	e0f7      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2220      	movs	r2, #32
 8011a3c:	5c9b      	ldrb	r3, [r3, r2]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d103      	bne.n	8011a4a <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 8011a42:	231f      	movs	r3, #31
 8011a44:	18fb      	adds	r3, r7, r3
 8011a46:	2206      	movs	r2, #6
 8011a48:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
 8011a4a:	4b79      	ldr	r3, [pc, #484]	; (8011c30 <LoRaMacCryptoSecureMessage+0x240>)
 8011a4c:	689b      	ldr	r3, [r3, #8]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	68fa      	ldr	r2, [r7, #12]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d93e      	bls.n	8011ad4 <LoRaMacCryptoSecureMessage+0xe4>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2228      	movs	r2, #40	; 0x28
 8011a5e:	5c9b      	ldrb	r3, [r3, r2]
 8011a60:	b299      	uxth	r1, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	689d      	ldr	r5, [r3, #8]
 8011a66:	261e      	movs	r6, #30
 8011a68:	19bc      	adds	r4, r7, r6
 8011a6a:	231f      	movs	r3, #31
 8011a6c:	18fb      	adds	r3, r7, r3
 8011a6e:	781a      	ldrb	r2, [r3, #0]
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	9301      	str	r3, [sp, #4]
 8011a74:	2300      	movs	r3, #0
 8011a76:	9300      	str	r3, [sp, #0]
 8011a78:	002b      	movs	r3, r5
 8011a7a:	f7fe fd05 	bl	8010488 <PayloadEncrypt>
 8011a7e:	0003      	movs	r3, r0
 8011a80:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011a82:	19bb      	adds	r3, r7, r6
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d003      	beq.n	8011a92 <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 8011a8a:	231e      	movs	r3, #30
 8011a8c:	18fb      	adds	r3, r7, r3
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	e0ca      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011a92:	4b67      	ldr	r3, [pc, #412]	; (8011c30 <LoRaMacCryptoSecureMessage+0x240>)
 8011a94:	789b      	ldrb	r3, [r3, #2]
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d11c      	bne.n	8011ad4 <LoRaMacCryptoSecureMessage+0xe4>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	7b1b      	ldrb	r3, [r3, #12]
 8011a9e:	071b      	lsls	r3, r3, #28
 8011aa0:	0f1b      	lsrs	r3, r3, #28
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	b298      	uxth	r0, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6899      	ldr	r1, [r3, #8]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	3310      	adds	r3, #16
 8011aae:	251e      	movs	r5, #30
 8011ab0:	197c      	adds	r4, r7, r5
 8011ab2:	9301      	str	r3, [sp, #4]
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	2300      	movs	r3, #0
 8011aba:	2200      	movs	r2, #0
 8011abc:	f7fe fde6 	bl	801068c <FOptsEncrypt>
 8011ac0:	0003      	movs	r3, r0
 8011ac2:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ac4:	197b      	adds	r3, r7, r5
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d003      	beq.n	8011ad4 <LoRaMacCryptoSecureMessage+0xe4>
            {
                return retval;
 8011acc:	231e      	movs	r3, #30
 8011ace:	18fb      	adds	r3, r7, r3
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	e0a9      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
 8011ad4:	4b56      	ldr	r3, [pc, #344]	; (8011c30 <LoRaMacCryptoSecureMessage+0x240>)
 8011ad6:	689b      	ldr	r3, [r3, #8]
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8011adc:	4b54      	ldr	r3, [pc, #336]	; (8011c30 <LoRaMacCryptoSecureMessage+0x240>)
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	0018      	movs	r0, r3
 8011ae6:	f000 fdcf 	bl	8012688 <LoRaMacSerializerData>
 8011aea:	1e03      	subs	r3, r0, #0
 8011aec:	d001      	beq.n	8011af2 <LoRaMacCryptoSecureMessage+0x102>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011aee:	230e      	movs	r3, #14
 8011af0:	e09a      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011af2:	4b4f      	ldr	r3, [pc, #316]	; (8011c30 <LoRaMacCryptoSecureMessage+0x240>)
 8011af4:	789b      	ldrb	r3, [r3, #2]
 8011af6:	2b01      	cmp	r3, #1
 8011af8:	d16a      	bne.n	8011bd0 <LoRaMacCryptoSecureMessage+0x1e0>
    {
        uint32_t cmacS = 0;
 8011afa:	2300      	movs	r3, #0
 8011afc:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
 8011afe:	2300      	movs	r3, #0
 8011b00:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6818      	ldr	r0, [r3, #0]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	791b      	ldrb	r3, [r3, #4]
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	3b04      	subs	r3, #4
 8011b0e:	b299      	uxth	r1, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	7b1b      	ldrb	r3, [r3, #12]
 8011b14:	069b      	lsls	r3, r3, #26
 8011b16:	0fdb      	lsrs	r3, r3, #31
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	1e5a      	subs	r2, r3, #1
 8011b1c:	4193      	sbcs	r3, r2
 8011b1e:	b2dd      	uxtb	r5, r3
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	89d2      	ldrh	r2, [r2, #14]
 8011b28:	0016      	movs	r6, r2
 8011b2a:	221e      	movs	r2, #30
 8011b2c:	18bc      	adds	r4, r7, r2
 8011b2e:	2218      	movs	r2, #24
 8011b30:	18ba      	adds	r2, r7, r2
 8011b32:	9204      	str	r2, [sp, #16]
 8011b34:	9603      	str	r6, [sp, #12]
 8011b36:	9302      	str	r3, [sp, #8]
 8011b38:	230a      	movs	r3, #10
 8011b3a:	18fb      	adds	r3, r7, r3
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	9301      	str	r3, [sp, #4]
 8011b40:	230b      	movs	r3, #11
 8011b42:	18fb      	adds	r3, r7, r3
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	9300      	str	r3, [sp, #0]
 8011b48:	002b      	movs	r3, r5
 8011b4a:	2205      	movs	r2, #5
 8011b4c:	f7ff f908 	bl	8010d60 <ComputeCmacB1>
 8011b50:	0003      	movs	r3, r0
 8011b52:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011b54:	221e      	movs	r2, #30
 8011b56:	18bb      	adds	r3, r7, r2
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d003      	beq.n	8011b66 <LoRaMacCryptoSecureMessage+0x176>
        {
            return retval;
 8011b5e:	231e      	movs	r3, #30
 8011b60:	18fb      	adds	r3, r7, r3
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	e060      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6818      	ldr	r0, [r3, #0]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	791b      	ldrb	r3, [r3, #4]
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	3b04      	subs	r3, #4
 8011b72:	b299      	uxth	r1, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	7b1b      	ldrb	r3, [r3, #12]
 8011b78:	069b      	lsls	r3, r3, #26
 8011b7a:	0fdb      	lsrs	r3, r3, #31
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	1e5a      	subs	r2, r3, #1
 8011b80:	4193      	sbcs	r3, r2
 8011b82:	b2dd      	uxtb	r5, r3
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	689b      	ldr	r3, [r3, #8]
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	89d2      	ldrh	r2, [r2, #14]
 8011b8c:	0016      	movs	r6, r2
 8011b8e:	221e      	movs	r2, #30
 8011b90:	18bc      	adds	r4, r7, r2
 8011b92:	2214      	movs	r2, #20
 8011b94:	18ba      	adds	r2, r7, r2
 8011b96:	9203      	str	r2, [sp, #12]
 8011b98:	9602      	str	r6, [sp, #8]
 8011b9a:	9301      	str	r3, [sp, #4]
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	002b      	movs	r3, r5
 8011ba2:	2204      	movs	r2, #4
 8011ba4:	f7fe ff02 	bl	80109ac <ComputeCmacB0>
 8011ba8:	0003      	movs	r3, r0
 8011baa:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011bac:	221e      	movs	r2, #30
 8011bae:	18bb      	adds	r3, r7, r2
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d003      	beq.n	8011bbe <LoRaMacCryptoSecureMessage+0x1ce>
        {
            return retval;
 8011bb6:	231e      	movs	r3, #30
 8011bb8:	18fb      	adds	r3, r7, r3
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	e034      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	041a      	lsls	r2, r3, #16
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	041b      	lsls	r3, r3, #16
 8011bc6:	0c1b      	lsrs	r3, r3, #16
 8011bc8:	431a      	orrs	r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8011bce:	e022      	b.n	8011c16 <LoRaMacCryptoSecureMessage+0x226>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6818      	ldr	r0, [r3, #0]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	791b      	ldrb	r3, [r3, #4]
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	3b04      	subs	r3, #4
 8011bdc:	b299      	uxth	r1, r3
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	689b      	ldr	r3, [r3, #8]
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	89d2      	ldrh	r2, [r2, #14]
 8011be6:	0015      	movs	r5, r2
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	322c      	adds	r2, #44	; 0x2c
 8011bec:	261e      	movs	r6, #30
 8011bee:	19bc      	adds	r4, r7, r6
 8011bf0:	9203      	str	r2, [sp, #12]
 8011bf2:	9502      	str	r5, [sp, #8]
 8011bf4:	9301      	str	r3, [sp, #4]
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	2206      	movs	r2, #6
 8011bfe:	f7fe fed5 	bl	80109ac <ComputeCmacB0>
 8011c02:	0003      	movs	r3, r0
 8011c04:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011c06:	19bb      	adds	r3, r7, r6
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d003      	beq.n	8011c16 <LoRaMacCryptoSecureMessage+0x226>
        {
            return retval;
 8011c0e:	231e      	movs	r3, #30
 8011c10:	18fb      	adds	r3, r7, r3
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	e008      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	0018      	movs	r0, r3
 8011c1a:	f000 fd35 	bl	8012688 <LoRaMacSerializerData>
 8011c1e:	1e03      	subs	r3, r0, #0
 8011c20:	d001      	beq.n	8011c26 <LoRaMacCryptoSecureMessage+0x236>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011c22:	230e      	movs	r3, #14
 8011c24:	e000      	b.n	8011c28 <LoRaMacCryptoSecureMessage+0x238>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011c26:	2300      	movs	r3, #0
}
 8011c28:	0018      	movs	r0, r3
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	b009      	add	sp, #36	; 0x24
 8011c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c30:	20000d68 	.word	0x20000d68

08011c34 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8011c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c36:	b08b      	sub	sp, #44	; 0x2c
 8011c38:	af04      	add	r7, sp, #16
 8011c3a:	60b9      	str	r1, [r7, #8]
 8011c3c:	0011      	movs	r1, r2
 8011c3e:	607b      	str	r3, [r7, #4]
 8011c40:	230f      	movs	r3, #15
 8011c42:	18fb      	adds	r3, r7, r3
 8011c44:	1c02      	adds	r2, r0, #0
 8011c46:	701a      	strb	r2, [r3, #0]
 8011c48:	230e      	movs	r3, #14
 8011c4a:	18fb      	adds	r3, r7, r3
 8011c4c:	1c0a      	adds	r2, r1, #0
 8011c4e:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8011c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d101      	bne.n	8011c5a <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011c56:	2307      	movs	r3, #7
 8011c58:	e0cf      	b.n	8011dfa <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	230e      	movs	r3, #14
 8011c5e:	18fb      	adds	r3, r7, r3
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	0011      	movs	r1, r2
 8011c64:	0018      	movs	r0, r3
 8011c66:	f7ff fa65 	bl	8011134 <CheckFCntDown>
 8011c6a:	0003      	movs	r3, r0
 8011c6c:	001a      	movs	r2, r3
 8011c6e:	2301      	movs	r3, #1
 8011c70:	4053      	eors	r3, r2
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d001      	beq.n	8011c7c <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 8011c78:	2305      	movs	r3, #5
 8011c7a:	e0be      	b.n	8011dfa <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8011c7c:	2315      	movs	r3, #21
 8011c7e:	18fb      	adds	r3, r7, r3
 8011c80:	2210      	movs	r2, #16
 8011c82:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 8011c84:	2317      	movs	r3, #23
 8011c86:	18fb      	adds	r3, r7, r3
 8011c88:	2207      	movs	r2, #7
 8011c8a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8011c8c:	2314      	movs	r3, #20
 8011c8e:	18fb      	adds	r3, r7, r3
 8011c90:	2205      	movs	r2, #5
 8011c92:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c96:	0018      	movs	r0, r3
 8011c98:	f000 fb49 	bl	801232e <LoRaMacParserData>
 8011c9c:	1e03      	subs	r3, r0, #0
 8011c9e:	d001      	beq.n	8011ca4 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011ca0:	230d      	movs	r3, #13
 8011ca2:	e0aa      	b.n	8011dfa <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8011ca4:	2515      	movs	r5, #21
 8011ca6:	197c      	adds	r4, r7, r5
 8011ca8:	2310      	movs	r3, #16
 8011caa:	18fa      	adds	r2, r7, r3
 8011cac:	230f      	movs	r3, #15
 8011cae:	18fb      	adds	r3, r7, r3
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	0011      	movs	r1, r2
 8011cb4:	0018      	movs	r0, r3
 8011cb6:	f7ff f8f3 	bl	8010ea0 <GetKeyAddrItem>
 8011cba:	0003      	movs	r3, r0
 8011cbc:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011cbe:	197b      	adds	r3, r7, r5
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d003      	beq.n	8011cce <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 8011cc6:	2315      	movs	r3, #21
 8011cc8:	18fb      	adds	r3, r7, r3
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	e095      	b.n	8011dfa <LoRaMacCryptoUnsecureMessage+0x1c6>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 8011cce:	693a      	ldr	r2, [r7, #16]
 8011cd0:	2317      	movs	r3, #23
 8011cd2:	18fb      	adds	r3, r7, r3
 8011cd4:	7852      	ldrb	r2, [r2, #1]
 8011cd6:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8011cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	68ba      	ldr	r2, [r7, #8]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d001      	beq.n	8011ce6 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8011ce2:	2302      	movs	r3, #2
 8011ce4:	e089      	b.n	8011dfa <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8011ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce8:	7b1b      	ldrb	r3, [r3, #12]
 8011cea:	069b      	lsls	r3, r3, #26
 8011cec:	0fdb      	lsrs	r3, r3, #31
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	001a      	movs	r2, r3
 8011cf2:	2316      	movs	r3, #22
 8011cf4:	18fb      	adds	r3, r7, r3
 8011cf6:	1e51      	subs	r1, r2, #1
 8011cf8:	418a      	sbcs	r2, r1
 8011cfa:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 8011cfc:	4b41      	ldr	r3, [pc, #260]	; (8011e04 <LoRaMacCryptoUnsecureMessage+0x1d0>)
 8011cfe:	789b      	ldrb	r3, [r3, #2]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d103      	bne.n	8011d0c <LoRaMacCryptoUnsecureMessage+0xd8>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8011d04:	2316      	movs	r3, #22
 8011d06:	18fb      	adds	r3, r7, r3
 8011d08:	2200      	movs	r2, #0
 8011d0a:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8011d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0e:	6818      	ldr	r0, [r3, #0]
 8011d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d12:	791b      	ldrb	r3, [r3, #4]
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	3b04      	subs	r3, #4
 8011d18:	b299      	uxth	r1, r3
 8011d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1e:	2615      	movs	r6, #21
 8011d20:	19bc      	adds	r4, r7, r6
 8011d22:	2216      	movs	r2, #22
 8011d24:	18ba      	adds	r2, r7, r2
 8011d26:	7815      	ldrb	r5, [r2, #0]
 8011d28:	2214      	movs	r2, #20
 8011d2a:	18ba      	adds	r2, r7, r2
 8011d2c:	7812      	ldrb	r2, [r2, #0]
 8011d2e:	9303      	str	r3, [sp, #12]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	9302      	str	r3, [sp, #8]
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	9301      	str	r3, [sp, #4]
 8011d38:	2301      	movs	r3, #1
 8011d3a:	9300      	str	r3, [sp, #0]
 8011d3c:	002b      	movs	r3, r5
 8011d3e:	f7fe fed1 	bl	8010ae4 <VerifyCmacB0>
 8011d42:	0003      	movs	r3, r0
 8011d44:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011d46:	19bb      	adds	r3, r7, r6
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d003      	beq.n	8011d56 <LoRaMacCryptoUnsecureMessage+0x122>
    {
        return retval;
 8011d4e:	2315      	movs	r3, #21
 8011d50:	18fb      	adds	r3, r7, r3
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	e051      	b.n	8011dfa <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8011d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d58:	2220      	movs	r2, #32
 8011d5a:	5c9b      	ldrb	r3, [r3, r2]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d103      	bne.n	8011d68 <LoRaMacCryptoUnsecureMessage+0x134>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 8011d60:	2317      	movs	r3, #23
 8011d62:	18fb      	adds	r3, r7, r3
 8011d64:	2206      	movs	r2, #6
 8011d66:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8011d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6e:	2228      	movs	r2, #40	; 0x28
 8011d70:	5c9b      	ldrb	r3, [r3, r2]
 8011d72:	b299      	uxth	r1, r3
 8011d74:	2615      	movs	r6, #21
 8011d76:	19bc      	adds	r4, r7, r6
 8011d78:	68bd      	ldr	r5, [r7, #8]
 8011d7a:	2317      	movs	r3, #23
 8011d7c:	18fb      	adds	r3, r7, r3
 8011d7e:	781a      	ldrb	r2, [r3, #0]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	9301      	str	r3, [sp, #4]
 8011d84:	2301      	movs	r3, #1
 8011d86:	9300      	str	r3, [sp, #0]
 8011d88:	002b      	movs	r3, r5
 8011d8a:	f7fe fb7d 	bl	8010488 <PayloadEncrypt>
 8011d8e:	0003      	movs	r3, r0
 8011d90:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011d92:	19bb      	adds	r3, r7, r6
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d003      	beq.n	8011da2 <LoRaMacCryptoUnsecureMessage+0x16e>
    {
        return retval;
 8011d9a:	2315      	movs	r3, #21
 8011d9c:	18fb      	adds	r3, r7, r3
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	e02b      	b.n	8011dfa <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 8011da2:	4b18      	ldr	r3, [pc, #96]	; (8011e04 <LoRaMacCryptoUnsecureMessage+0x1d0>)
 8011da4:	789b      	ldrb	r3, [r3, #2]
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d11e      	bne.n	8011de8 <LoRaMacCryptoUnsecureMessage+0x1b4>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 8011daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dac:	7b1b      	ldrb	r3, [r3, #12]
 8011dae:	071b      	lsls	r3, r3, #28
 8011db0:	0f1b      	lsrs	r3, r3, #28
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	b298      	uxth	r0, r3
 8011db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db8:	3310      	adds	r3, #16
 8011dba:	2515      	movs	r5, #21
 8011dbc:	197c      	adds	r4, r7, r5
 8011dbe:	220e      	movs	r2, #14
 8011dc0:	18ba      	adds	r2, r7, r2
 8011dc2:	7812      	ldrb	r2, [r2, #0]
 8011dc4:	68b9      	ldr	r1, [r7, #8]
 8011dc6:	9301      	str	r3, [sp, #4]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	0013      	movs	r3, r2
 8011dce:	2201      	movs	r2, #1
 8011dd0:	f7fe fc5c 	bl	801068c <FOptsEncrypt>
 8011dd4:	0003      	movs	r3, r0
 8011dd6:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011dd8:	197b      	adds	r3, r7, r5
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d003      	beq.n	8011de8 <LoRaMacCryptoUnsecureMessage+0x1b4>
        {
            return retval;
 8011de0:	2315      	movs	r3, #21
 8011de2:	18fb      	adds	r3, r7, r3
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	e008      	b.n	8011dfa <LoRaMacCryptoUnsecureMessage+0x1c6>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	230e      	movs	r3, #14
 8011dec:	18fb      	adds	r3, r7, r3
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	0011      	movs	r1, r2
 8011df2:	0018      	movs	r0, r3
 8011df4:	f7ff f9fc 	bl	80111f0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8011df8:	2300      	movs	r3, #0
}
 8011dfa:	0018      	movs	r0, r3
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	b007      	add	sp, #28
 8011e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e02:	46c0      	nop			; (mov r8, r8)
 8011e04:	20000d68 	.word	0x20000d68

08011e08 <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
 8011e0c:	4b04      	ldr	r3, [pc, #16]	; (8011e20 <NvmCtxChanged+0x18>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d002      	beq.n	8011e1a <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
 8011e14:	4b02      	ldr	r3, [pc, #8]	; (8011e20 <NvmCtxChanged+0x18>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	4798      	blx	r3
    }
}
 8011e1a:	46c0      	nop			; (mov r8, r8)
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	20000dc8 	.word	0x20000dc8

08011e24 <LoRaMacFCntHandlerInit>:


LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerInit( EventNvmCtxChanged fCntHandlerNvmCtxChanged )
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
    // Initialize with default
    LoRaMacResetFCnts( );
 8011e2c:	f000 f93e 	bl	80120ac <LoRaMacResetFCnts>

    // Assign callback
    FCntHandlerNvmCtxChanged = fCntHandlerNvmCtxChanged;
 8011e30:	4b03      	ldr	r3, [pc, #12]	; (8011e40 <LoRaMacFCntHandlerInit+0x1c>)
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8011e36:	2300      	movs	r3, #0
}
 8011e38:	0018      	movs	r0, r3
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	b002      	add	sp, #8
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	20000dc8 	.word	0x20000dc8

08011e44 <LoRaMacFCntHandlerRestoreNvmCtx>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerRestoreNvmCtx( void* fCntHandlerNvmCtx )
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( fCntHandlerNvmCtx != NULL )
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d007      	beq.n	8011e62 <LoRaMacFCntHandlerRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &FCntHandlerNvmCtx, ( uint8_t* ) fCntHandlerNvmCtx, sizeof( FCntHandlerNvmCtx ) );
 8011e52:	6879      	ldr	r1, [r7, #4]
 8011e54:	4b05      	ldr	r3, [pc, #20]	; (8011e6c <LoRaMacFCntHandlerRestoreNvmCtx+0x28>)
 8011e56:	2220      	movs	r2, #32
 8011e58:	0018      	movs	r0, r3
 8011e5a:	f003 fb05 	bl	8015468 <memcpy1>
        return LORAMAC_FCNT_HANDLER_SUCCESS;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	e000      	b.n	8011e64 <LoRaMacFCntHandlerRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8011e62:	2304      	movs	r3, #4
    }
}
 8011e64:	0018      	movs	r0, r3
 8011e66:	46bd      	mov	sp, r7
 8011e68:	b002      	add	sp, #8
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	20000da8 	.word	0x20000da8

08011e70 <LoRaMacFCntHandlerGetNvmCtx>:

void* LoRaMacFCntHandlerGetNvmCtx( size_t* fCntHandlerNvmCtxSize )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
    *fCntHandlerNvmCtxSize = sizeof( FCntHandlerNvmCtx );
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2220      	movs	r2, #32
 8011e7c:	601a      	str	r2, [r3, #0]
    return &FCntHandlerNvmCtx;
 8011e7e:	4b02      	ldr	r3, [pc, #8]	; (8011e88 <LoRaMacFCntHandlerGetNvmCtx+0x18>)
}
 8011e80:	0018      	movs	r0, r3
 8011e82:	46bd      	mov	sp, r7
 8011e84:	b002      	add	sp, #8
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	20000da8 	.word	0x20000da8

08011e8c <LoRaMacGetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b086      	sub	sp, #24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60ba      	str	r2, [r7, #8]
 8011e94:	607b      	str	r3, [r7, #4]
 8011e96:	230f      	movs	r3, #15
 8011e98:	18fb      	adds	r3, r7, r3
 8011e9a:	1c02      	adds	r2, r0, #0
 8011e9c:	701a      	strb	r2, [r3, #0]
 8011e9e:	230e      	movs	r3, #14
 8011ea0:	18fb      	adds	r3, r7, r3
 8011ea2:	1c0a      	adds	r2, r1, #0
 8011ea4:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d005      	beq.n	8011ec0 <LoRaMacGetFCntDown+0x34>
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d002      	beq.n	8011ec0 <LoRaMacGetFCntDown+0x34>
 8011eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 8011ec0:	2304      	movs	r3, #4
 8011ec2:	e088      	b.n	8011fd6 <LoRaMacGetFCntDown+0x14a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011ec4:	230f      	movs	r3, #15
 8011ec6:	18fb      	adds	r3, r7, r3
 8011ec8:	781b      	ldrb	r3, [r3, #0]
 8011eca:	2b04      	cmp	r3, #4
 8011ecc:	d843      	bhi.n	8011f56 <LoRaMacGetFCntDown+0xca>
 8011ece:	009a      	lsls	r2, r3, #2
 8011ed0:	4b43      	ldr	r3, [pc, #268]	; (8011fe0 <LoRaMacGetFCntDown+0x154>)
 8011ed2:	18d3      	adds	r3, r2, r3
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8011ed8:	1d3b      	adds	r3, r7, #4
 8011eda:	789b      	ldrb	r3, [r3, #2]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d117      	bne.n	8011f10 <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8011ee0:	230e      	movs	r3, #14
 8011ee2:	18fb      	adds	r3, r7, r3
 8011ee4:	781b      	ldrb	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d004      	beq.n	8011ef4 <LoRaMacGetFCntDown+0x68>
 8011eea:	230e      	movs	r3, #14
 8011eec:	18fb      	adds	r3, r7, r3
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	2b03      	cmp	r3, #3
 8011ef2:	d106      	bne.n	8011f02 <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef6:	2202      	movs	r2, #2
 8011ef8:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
 8011efa:	4b3a      	ldr	r3, [pc, #232]	; (8011fe4 <LoRaMacGetFCntDown+0x158>)
 8011efc:	689b      	ldr	r3, [r3, #8]
 8011efe:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
 8011f00:	e02b      	b.n	8011f5a <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
 8011f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f04:	2201      	movs	r2, #1
 8011f06:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
 8011f08:	4b36      	ldr	r3, [pc, #216]	; (8011fe4 <LoRaMacGetFCntDown+0x158>)
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	617b      	str	r3, [r7, #20]
            break;
 8011f0e:	e024      	b.n	8011f5a <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	2203      	movs	r2, #3
 8011f14:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
 8011f16:	4b33      	ldr	r3, [pc, #204]	; (8011fe4 <LoRaMacGetFCntDown+0x158>)
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	617b      	str	r3, [r7, #20]
            break;
 8011f1c:	e01d      	b.n	8011f5a <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8011f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f20:	2204      	movs	r2, #4
 8011f22:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
 8011f24:	4b2f      	ldr	r3, [pc, #188]	; (8011fe4 <LoRaMacGetFCntDown+0x158>)
 8011f26:	691b      	ldr	r3, [r3, #16]
 8011f28:	617b      	str	r3, [r7, #20]
            break;
 8011f2a:	e016      	b.n	8011f5a <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 8011f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2e:	2205      	movs	r2, #5
 8011f30:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
 8011f32:	4b2c      	ldr	r3, [pc, #176]	; (8011fe4 <LoRaMacGetFCntDown+0x158>)
 8011f34:	695b      	ldr	r3, [r3, #20]
 8011f36:	617b      	str	r3, [r7, #20]
            break;
 8011f38:	e00f      	b.n	8011f5a <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 8011f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3c:	2206      	movs	r2, #6
 8011f3e:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 8011f40:	4b28      	ldr	r3, [pc, #160]	; (8011fe4 <LoRaMacGetFCntDown+0x158>)
 8011f42:	69db      	ldr	r3, [r3, #28]
 8011f44:	617b      	str	r3, [r7, #20]
            break;
 8011f46:	e008      	b.n	8011f5a <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 8011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4a:	2207      	movs	r2, #7
 8011f4c:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 8011f4e:	4b25      	ldr	r3, [pc, #148]	; (8011fe4 <LoRaMacGetFCntDown+0x158>)
 8011f50:	69db      	ldr	r3, [r3, #28]
 8011f52:	617b      	str	r3, [r7, #20]
            break;
 8011f54:	e001      	b.n	8011f5a <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 8011f56:	2305      	movs	r3, #5
 8011f58:	e03d      	b.n	8011fd6 <LoRaMacGetFCntDown+0x14a>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	3301      	adds	r3, #1
 8011f5e:	d105      	bne.n	8011f6c <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	89db      	ldrh	r3, [r3, #14]
 8011f64:	001a      	movs	r2, r3
 8011f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f68:	601a      	str	r2, [r3, #0]
 8011f6a:	e023      	b.n	8011fb4 <LoRaMacGetFCntDown+0x128>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	89db      	ldrh	r3, [r3, #14]
 8011f70:	001a      	movs	r2, r3
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	041b      	lsls	r3, r3, #16
 8011f76:	0c1b      	lsrs	r3, r3, #16
 8011f78:	1ad3      	subs	r3, r2, r3
 8011f7a:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
 8011f7c:	693b      	ldr	r3, [r7, #16]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	dd05      	ble.n	8011f8e <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
 8011f82:	693a      	ldr	r2, [r7, #16]
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	18d2      	adds	r2, r2, r3
 8011f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8a:	601a      	str	r2, [r3, #0]
 8011f8c:	e012      	b.n	8011fb4 <LoRaMacGetFCntDown+0x128>
        }
        else if( fCntDiff == 0 )
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d104      	bne.n	8011f9e <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
 8011f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f96:	697a      	ldr	r2, [r7, #20]
 8011f98:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	e01b      	b.n	8011fd6 <LoRaMacGetFCntDown+0x14a>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( previousDown & 0xFFFF0000 ) + 0x10000 + macMsg->FHDR.FCnt;
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	0c1b      	lsrs	r3, r3, #16
 8011fa2:	041b      	lsls	r3, r3, #16
 8011fa4:	68ba      	ldr	r2, [r7, #8]
 8011fa6:	89d2      	ldrh	r2, [r2, #14]
 8011fa8:	189b      	adds	r3, r3, r2
 8011faa:	2280      	movs	r2, #128	; 0x80
 8011fac:	0252      	lsls	r2, r2, #9
 8011fae:	189a      	adds	r2, r3, r2
 8011fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb2:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
 8011fb4:	1d3b      	adds	r3, r7, #4
 8011fb6:	789b      	ldrb	r3, [r3, #2]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d10b      	bne.n	8011fd4 <LoRaMacGetFCntDown+0x148>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
 8011fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	001a      	movs	r2, r3
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	1ad2      	subs	r2, r2, r3
 8011fc6:	2320      	movs	r3, #32
 8011fc8:	18fb      	adds	r3, r7, r3
 8011fca:	881b      	ldrh	r3, [r3, #0]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	db01      	blt.n	8011fd4 <LoRaMacGetFCntDown+0x148>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
 8011fd0:	2302      	movs	r3, #2
 8011fd2:	e000      	b.n	8011fd6 <LoRaMacGetFCntDown+0x14a>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8011fd4:	2300      	movs	r3, #0
}
 8011fd6:	0018      	movs	r0, r3
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	b006      	add	sp, #24
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	46c0      	nop			; (mov r8, r8)
 8011fe0:	080208f0 	.word	0x080208f0
 8011fe4:	20000da8 	.word	0x20000da8

08011fe8 <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	0002      	movs	r2, r0
 8011ff0:	6039      	str	r1, [r7, #0]
 8011ff2:	1dfb      	adds	r3, r7, #7
 8011ff4:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8011ff6:	1dfb      	adds	r3, r7, #7
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	2b07      	cmp	r3, #7
 8011ffc:	d822      	bhi.n	8012044 <LoRaMacSetFCntDown+0x5c>
 8011ffe:	009a      	lsls	r2, r3, #2
 8012000:	4b15      	ldr	r3, [pc, #84]	; (8012058 <LoRaMacSetFCntDown+0x70>)
 8012002:	18d3      	adds	r3, r2, r3
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
 8012008:	2303      	movs	r3, #3
 801200a:	e020      	b.n	801204e <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
 801200c:	4b13      	ldr	r3, [pc, #76]	; (801205c <LoRaMacSetFCntDown+0x74>)
 801200e:	683a      	ldr	r2, [r7, #0]
 8012010:	605a      	str	r2, [r3, #4]
            break;
 8012012:	e019      	b.n	8012048 <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
 8012014:	4b11      	ldr	r3, [pc, #68]	; (801205c <LoRaMacSetFCntDown+0x74>)
 8012016:	683a      	ldr	r2, [r7, #0]
 8012018:	609a      	str	r2, [r3, #8]
            break;
 801201a:	e015      	b.n	8012048 <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
 801201c:	4b0f      	ldr	r3, [pc, #60]	; (801205c <LoRaMacSetFCntDown+0x74>)
 801201e:	683a      	ldr	r2, [r7, #0]
 8012020:	60da      	str	r2, [r3, #12]
            break;
 8012022:	e011      	b.n	8012048 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
 8012024:	4b0d      	ldr	r3, [pc, #52]	; (801205c <LoRaMacSetFCntDown+0x74>)
 8012026:	683a      	ldr	r2, [r7, #0]
 8012028:	611a      	str	r2, [r3, #16]
            break;
 801202a:	e00d      	b.n	8012048 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
 801202c:	4b0b      	ldr	r3, [pc, #44]	; (801205c <LoRaMacSetFCntDown+0x74>)
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	615a      	str	r2, [r3, #20]
            break;
 8012032:	e009      	b.n	8012048 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
 8012034:	4b09      	ldr	r3, [pc, #36]	; (801205c <LoRaMacSetFCntDown+0x74>)
 8012036:	683a      	ldr	r2, [r7, #0]
 8012038:	619a      	str	r2, [r3, #24]
            break;
 801203a:	e005      	b.n	8012048 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
 801203c:	4b07      	ldr	r3, [pc, #28]	; (801205c <LoRaMacSetFCntDown+0x74>)
 801203e:	683a      	ldr	r2, [r7, #0]
 8012040:	61da      	str	r2, [r3, #28]
            break;
 8012042:	e001      	b.n	8012048 <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 8012044:	2305      	movs	r3, #5
 8012046:	e002      	b.n	801204e <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
 8012048:	f7ff fede 	bl	8011e08 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 801204c:	2300      	movs	r3, #0
}
 801204e:	0018      	movs	r0, r3
 8012050:	46bd      	mov	sp, r7
 8012052:	b002      	add	sp, #8
 8012054:	bd80      	pop	{r7, pc}
 8012056:	46c0      	nop			; (mov r8, r8)
 8012058:	08020904 	.word	0x08020904
 801205c:	20000da8 	.word	0x20000da8

08012060 <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d101      	bne.n	8012072 <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 801206e:	2304      	movs	r3, #4
 8012070:	e005      	b.n	801207e <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
 8012072:	4b05      	ldr	r3, [pc, #20]	; (8012088 <LoRaMacGetFCntUp+0x28>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	1c5a      	adds	r2, r3, #1
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 801207c:	2300      	movs	r3, #0
}
 801207e:	0018      	movs	r0, r3
 8012080:	46bd      	mov	sp, r7
 8012082:	b002      	add	sp, #8
 8012084:	bd80      	pop	{r7, pc}
 8012086:	46c0      	nop			; (mov r8, r8)
 8012088:	20000da8 	.word	0x20000da8

0801208c <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
 8012094:	4b04      	ldr	r3, [pc, #16]	; (80120a8 <LoRaMacSetFCntUp+0x1c>)
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
 801209a:	f7ff feb5 	bl	8011e08 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 801209e:	2300      	movs	r3, #0
}
 80120a0:	0018      	movs	r0, r3
 80120a2:	46bd      	mov	sp, r7
 80120a4:	b002      	add	sp, #8
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	20000da8 	.word	0x20000da8

080120ac <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 80120b0:	4b12      	ldr	r3, [pc, #72]	; (80120fc <LoRaMacResetFCnts+0x50>)
 80120b2:	2200      	movs	r2, #0
 80120b4:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80120b6:	4b11      	ldr	r3, [pc, #68]	; (80120fc <LoRaMacResetFCnts+0x50>)
 80120b8:	2201      	movs	r2, #1
 80120ba:	4252      	negs	r2, r2
 80120bc:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80120be:	4b0f      	ldr	r3, [pc, #60]	; (80120fc <LoRaMacResetFCnts+0x50>)
 80120c0:	2201      	movs	r2, #1
 80120c2:	4252      	negs	r2, r2
 80120c4:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80120c6:	4b0d      	ldr	r3, [pc, #52]	; (80120fc <LoRaMacResetFCnts+0x50>)
 80120c8:	2201      	movs	r2, #1
 80120ca:	4252      	negs	r2, r2
 80120cc:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 80120ce:	4b0b      	ldr	r3, [pc, #44]	; (80120fc <LoRaMacResetFCnts+0x50>)
 80120d0:	2201      	movs	r2, #1
 80120d2:	4252      	negs	r2, r2
 80120d4:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 80120d6:	4b09      	ldr	r3, [pc, #36]	; (80120fc <LoRaMacResetFCnts+0x50>)
 80120d8:	2201      	movs	r2, #1
 80120da:	4252      	negs	r2, r2
 80120dc:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 80120de:	4b07      	ldr	r3, [pc, #28]	; (80120fc <LoRaMacResetFCnts+0x50>)
 80120e0:	2201      	movs	r2, #1
 80120e2:	4252      	negs	r2, r2
 80120e4:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 80120e6:	4b05      	ldr	r3, [pc, #20]	; (80120fc <LoRaMacResetFCnts+0x50>)
 80120e8:	2201      	movs	r2, #1
 80120ea:	4252      	negs	r2, r2
 80120ec:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
 80120ee:	f7ff fe8b 	bl	8011e08 <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 80120f2:	2300      	movs	r3, #0
}
 80120f4:	0018      	movs	r0, r3
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	46c0      	nop			; (mov r8, r8)
 80120fc:	20000da8 	.word	0x20000da8

08012100 <LoRaMacFCntHandlerSetMulticastReference>:

LoRaMacFCntHandlerStatus_t LoRaMacFCntHandlerSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d101      	bne.n	8012112 <LoRaMacFCntHandlerSetMulticastReference+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 801210e:	2304      	movs	r3, #4
 8012110:	e00f      	b.n	8012132 <LoRaMacFCntHandlerSetMulticastReference+0x32>
    }

    multicastList[0].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown0;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4a09      	ldr	r2, [pc, #36]	; (801213c <LoRaMacFCntHandlerSetMulticastReference+0x3c>)
 8012116:	609a      	str	r2, [r3, #8]
    multicastList[1].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown1;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	3320      	adds	r3, #32
 801211c:	4a08      	ldr	r2, [pc, #32]	; (8012140 <LoRaMacFCntHandlerSetMulticastReference+0x40>)
 801211e:	609a      	str	r2, [r3, #8]
    multicastList[2].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown2;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	3340      	adds	r3, #64	; 0x40
 8012124:	4a07      	ldr	r2, [pc, #28]	; (8012144 <LoRaMacFCntHandlerSetMulticastReference+0x44>)
 8012126:	609a      	str	r2, [r3, #8]
    multicastList[3].DownLinkCounter = &FCntHandlerNvmCtx.FCntList.McFCntDown3;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	3360      	adds	r3, #96	; 0x60
 801212c:	4a06      	ldr	r2, [pc, #24]	; (8012148 <LoRaMacFCntHandlerSetMulticastReference+0x48>)
 801212e:	609a      	str	r2, [r3, #8]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 8012130:	2300      	movs	r3, #0
}
 8012132:	0018      	movs	r0, r3
 8012134:	46bd      	mov	sp, r7
 8012136:	b002      	add	sp, #8
 8012138:	bd80      	pop	{r7, pc}
 801213a:	46c0      	nop			; (mov r8, r8)
 801213c:	20000db8 	.word	0x20000db8
 8012140:	20000dbc 	.word	0x20000dbc
 8012144:	20000dc0 	.word	0x20000dc0
 8012148:	20000dc4 	.word	0x20000dc4

0801214c <LoRaMacParserJoinAccept>:

#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacParser.h>

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801214c:	b590      	push	{r4, r7, lr}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d003      	beq.n	8012162 <LoRaMacParserJoinAccept+0x16>
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d101      	bne.n	8012166 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012162:	2302      	movs	r3, #2
 8012164:	e0df      	b.n	8012326 <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 8012166:	240e      	movs	r4, #14
 8012168:	193b      	adds	r3, r7, r4
 801216a:	2200      	movs	r2, #0
 801216c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	193b      	adds	r3, r7, r4
 8012174:	881b      	ldrh	r3, [r3, #0]
 8012176:	1939      	adds	r1, r7, r4
 8012178:	1c58      	adds	r0, r3, #1
 801217a:	8008      	strh	r0, [r1, #0]
 801217c:	18d3      	adds	r3, r2, r3
 801217e:	781a      	ldrb	r2, [r3, #0]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	1d98      	adds	r0, r3, #6
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	193b      	adds	r3, r7, r4
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	18d3      	adds	r3, r2, r3
 8012192:	2203      	movs	r2, #3
 8012194:	0019      	movs	r1, r3
 8012196:	f003 f967 	bl	8015468 <memcpy1>
    bufItr = bufItr + 3;
 801219a:	193b      	adds	r3, r7, r4
 801219c:	193a      	adds	r2, r7, r4
 801219e:	8812      	ldrh	r2, [r2, #0]
 80121a0:	3203      	adds	r2, #3
 80121a2:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	3309      	adds	r3, #9
 80121a8:	0018      	movs	r0, r3
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681a      	ldr	r2, [r3, #0]
 80121ae:	193b      	adds	r3, r7, r4
 80121b0:	881b      	ldrh	r3, [r3, #0]
 80121b2:	18d3      	adds	r3, r2, r3
 80121b4:	2203      	movs	r2, #3
 80121b6:	0019      	movs	r1, r3
 80121b8:	f003 f956 	bl	8015468 <memcpy1>
    bufItr = bufItr + 3;
 80121bc:	193b      	adds	r3, r7, r4
 80121be:	193a      	adds	r2, r7, r4
 80121c0:	8812      	ldrh	r2, [r2, #0]
 80121c2:	3203      	adds	r2, #3
 80121c4:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	193b      	adds	r3, r7, r4
 80121cc:	881b      	ldrh	r3, [r3, #0]
 80121ce:	1939      	adds	r1, r7, r4
 80121d0:	1c58      	adds	r0, r3, #1
 80121d2:	8008      	strh	r0, [r1, #0]
 80121d4:	18d3      	adds	r3, r2, r3
 80121d6:	781b      	ldrb	r3, [r3, #0]
 80121d8:	001a      	movs	r2, r3
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	193b      	adds	r3, r7, r4
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	1939      	adds	r1, r7, r4
 80121e8:	1c58      	adds	r0, r3, #1
 80121ea:	8008      	strh	r0, [r1, #0]
 80121ec:	18d3      	adds	r3, r2, r3
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	021a      	lsls	r2, r3, #8
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	431a      	orrs	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	193b      	adds	r3, r7, r4
 8012202:	881b      	ldrh	r3, [r3, #0]
 8012204:	1939      	adds	r1, r7, r4
 8012206:	1c58      	adds	r0, r3, #1
 8012208:	8008      	strh	r0, [r1, #0]
 801220a:	18d3      	adds	r3, r2, r3
 801220c:	781b      	ldrb	r3, [r3, #0]
 801220e:	041a      	lsls	r2, r3, #16
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	68db      	ldr	r3, [r3, #12]
 8012214:	431a      	orrs	r2, r3
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	193b      	adds	r3, r7, r4
 8012220:	881b      	ldrh	r3, [r3, #0]
 8012222:	1939      	adds	r1, r7, r4
 8012224:	1c58      	adds	r0, r3, #1
 8012226:	8008      	strh	r0, [r1, #0]
 8012228:	18d3      	adds	r3, r2, r3
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	061a      	lsls	r2, r3, #24
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	431a      	orrs	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	193b      	adds	r3, r7, r4
 801223e:	881b      	ldrh	r3, [r3, #0]
 8012240:	1939      	adds	r1, r7, r4
 8012242:	1c58      	adds	r0, r3, #1
 8012244:	8008      	strh	r0, [r1, #0]
 8012246:	18d3      	adds	r3, r2, r3
 8012248:	781a      	ldrb	r2, [r3, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	193b      	adds	r3, r7, r4
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	1939      	adds	r1, r7, r4
 8012258:	1c58      	adds	r0, r3, #1
 801225a:	8008      	strh	r0, [r1, #0]
 801225c:	18d3      	adds	r3, r2, r3
 801225e:	781a      	ldrb	r2, [r3, #0]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	791b      	ldrb	r3, [r3, #4]
 8012268:	1f1a      	subs	r2, r3, #4
 801226a:	193b      	adds	r3, r7, r4
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	2b10      	cmp	r3, #16
 8012272:	d112      	bne.n	801229a <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	3312      	adds	r3, #18
 8012278:	0018      	movs	r0, r3
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	240e      	movs	r4, #14
 8012280:	193b      	adds	r3, r7, r4
 8012282:	881b      	ldrh	r3, [r3, #0]
 8012284:	18d3      	adds	r3, r2, r3
 8012286:	2210      	movs	r2, #16
 8012288:	0019      	movs	r1, r3
 801228a:	f003 f8ed 	bl	8015468 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 801228e:	193b      	adds	r3, r7, r4
 8012290:	193a      	adds	r2, r7, r4
 8012292:	8812      	ldrh	r2, [r2, #0]
 8012294:	3210      	adds	r2, #16
 8012296:	801a      	strh	r2, [r3, #0]
 8012298:	e00a      	b.n	80122b0 <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	791b      	ldrb	r3, [r3, #4]
 801229e:	1f1a      	subs	r2, r3, #4
 80122a0:	230e      	movs	r3, #14
 80122a2:	18fb      	adds	r3, r7, r3
 80122a4:	881b      	ldrh	r3, [r3, #0]
 80122a6:	1ad3      	subs	r3, r2, r3
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	dd01      	ble.n	80122b0 <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 80122ac:	2301      	movs	r3, #1
 80122ae:	e03a      	b.n	8012326 <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	240e      	movs	r4, #14
 80122b6:	193b      	adds	r3, r7, r4
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	1939      	adds	r1, r7, r4
 80122bc:	1c58      	adds	r0, r3, #1
 80122be:	8008      	strh	r0, [r1, #0]
 80122c0:	18d3      	adds	r3, r2, r3
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	001a      	movs	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	193b      	adds	r3, r7, r4
 80122d0:	881b      	ldrh	r3, [r3, #0]
 80122d2:	1939      	adds	r1, r7, r4
 80122d4:	1c58      	adds	r0, r3, #1
 80122d6:	8008      	strh	r0, [r1, #0]
 80122d8:	18d3      	adds	r3, r2, r3
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	021a      	lsls	r2, r3, #8
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122e2:	431a      	orrs	r2, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	193b      	adds	r3, r7, r4
 80122ee:	881b      	ldrh	r3, [r3, #0]
 80122f0:	1939      	adds	r1, r7, r4
 80122f2:	1c58      	adds	r0, r3, #1
 80122f4:	8008      	strh	r0, [r1, #0]
 80122f6:	18d3      	adds	r3, r2, r3
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	041a      	lsls	r2, r3, #16
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012300:	431a      	orrs	r2, r3
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	193b      	adds	r3, r7, r4
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	1939      	adds	r1, r7, r4
 8012310:	1c58      	adds	r0, r3, #1
 8012312:	8008      	strh	r0, [r1, #0]
 8012314:	18d3      	adds	r3, r2, r3
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	061a      	lsls	r2, r3, #24
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231e:	431a      	orrs	r2, r3
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8012324:	2300      	movs	r3, #0
}
 8012326:	0018      	movs	r0, r3
 8012328:	46bd      	mov	sp, r7
 801232a:	b005      	add	sp, #20
 801232c:	bd90      	pop	{r4, r7, pc}

0801232e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801232e:	b590      	push	{r4, r7, lr}
 8012330:	b085      	sub	sp, #20
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d003      	beq.n	8012344 <LoRaMacParserData+0x16>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d101      	bne.n	8012348 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012344:	2302      	movs	r3, #2
 8012346:	e100      	b.n	801254a <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 8012348:	240e      	movs	r4, #14
 801234a:	193b      	adds	r3, r7, r4
 801234c:	2200      	movs	r2, #0
 801234e:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	193b      	adds	r3, r7, r4
 8012356:	881b      	ldrh	r3, [r3, #0]
 8012358:	1939      	adds	r1, r7, r4
 801235a:	1c58      	adds	r0, r3, #1
 801235c:	8008      	strh	r0, [r1, #0]
 801235e:	18d3      	adds	r3, r2, r3
 8012360:	781a      	ldrb	r2, [r3, #0]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	193b      	adds	r3, r7, r4
 801236c:	881b      	ldrh	r3, [r3, #0]
 801236e:	1939      	adds	r1, r7, r4
 8012370:	1c58      	adds	r0, r3, #1
 8012372:	8008      	strh	r0, [r1, #0]
 8012374:	18d3      	adds	r3, r2, r3
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	001a      	movs	r2, r3
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	193b      	adds	r3, r7, r4
 8012384:	881b      	ldrh	r3, [r3, #0]
 8012386:	1939      	adds	r1, r7, r4
 8012388:	1c58      	adds	r0, r3, #1
 801238a:	8008      	strh	r0, [r1, #0]
 801238c:	18d3      	adds	r3, r2, r3
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	021a      	lsls	r2, r3, #8
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	689b      	ldr	r3, [r3, #8]
 8012396:	431a      	orrs	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681a      	ldr	r2, [r3, #0]
 80123a0:	193b      	adds	r3, r7, r4
 80123a2:	881b      	ldrh	r3, [r3, #0]
 80123a4:	1939      	adds	r1, r7, r4
 80123a6:	1c58      	adds	r0, r3, #1
 80123a8:	8008      	strh	r0, [r1, #0]
 80123aa:	18d3      	adds	r3, r2, r3
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	041a      	lsls	r2, r3, #16
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	689b      	ldr	r3, [r3, #8]
 80123b4:	431a      	orrs	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681a      	ldr	r2, [r3, #0]
 80123be:	193b      	adds	r3, r7, r4
 80123c0:	881b      	ldrh	r3, [r3, #0]
 80123c2:	1939      	adds	r1, r7, r4
 80123c4:	1c58      	adds	r0, r3, #1
 80123c6:	8008      	strh	r0, [r1, #0]
 80123c8:	18d3      	adds	r3, r2, r3
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	061a      	lsls	r2, r3, #24
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	689b      	ldr	r3, [r3, #8]
 80123d2:	431a      	orrs	r2, r3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	193b      	adds	r3, r7, r4
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	1939      	adds	r1, r7, r4
 80123e2:	1c58      	adds	r0, r3, #1
 80123e4:	8008      	strh	r0, [r1, #0]
 80123e6:	18d3      	adds	r3, r2, r3
 80123e8:	781a      	ldrb	r2, [r3, #0]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	193b      	adds	r3, r7, r4
 80123f4:	881b      	ldrh	r3, [r3, #0]
 80123f6:	1939      	adds	r1, r7, r4
 80123f8:	1c58      	adds	r0, r3, #1
 80123fa:	8008      	strh	r0, [r1, #0]
 80123fc:	18d3      	adds	r3, r2, r3
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	b29a      	uxth	r2, r3
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	193b      	adds	r3, r7, r4
 801240c:	881b      	ldrh	r3, [r3, #0]
 801240e:	1939      	adds	r1, r7, r4
 8012410:	1c58      	adds	r0, r3, #1
 8012412:	8008      	strh	r0, [r1, #0]
 8012414:	18d3      	adds	r3, r2, r3
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	0219      	lsls	r1, r3, #8
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	89db      	ldrh	r3, [r3, #14]
 801241e:	b21a      	sxth	r2, r3
 8012420:	b20b      	sxth	r3, r1
 8012422:	4313      	orrs	r3, r2
 8012424:	b21b      	sxth	r3, r3
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	3310      	adds	r3, #16
 8012430:	0018      	movs	r0, r3
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681a      	ldr	r2, [r3, #0]
 8012436:	193b      	adds	r3, r7, r4
 8012438:	881b      	ldrh	r3, [r3, #0]
 801243a:	18d1      	adds	r1, r2, r3
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	7b1b      	ldrb	r3, [r3, #12]
 8012440:	071b      	lsls	r3, r3, #28
 8012442:	0f1b      	lsrs	r3, r3, #28
 8012444:	b2db      	uxtb	r3, r3
 8012446:	b29b      	uxth	r3, r3
 8012448:	001a      	movs	r2, r3
 801244a:	f003 f80d 	bl	8015468 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	7b1b      	ldrb	r3, [r3, #12]
 8012452:	071b      	lsls	r3, r3, #28
 8012454:	0f1b      	lsrs	r3, r3, #28
 8012456:	b2db      	uxtb	r3, r3
 8012458:	b299      	uxth	r1, r3
 801245a:	193b      	adds	r3, r7, r4
 801245c:	193a      	adds	r2, r7, r4
 801245e:	8812      	ldrh	r2, [r2, #0]
 8012460:	188a      	adds	r2, r1, r2
 8012462:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2220      	movs	r2, #32
 8012468:	2100      	movs	r1, #0
 801246a:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2228      	movs	r2, #40	; 0x28
 8012470:	2100      	movs	r1, #0
 8012472:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	791b      	ldrb	r3, [r3, #4]
 8012478:	001a      	movs	r2, r3
 801247a:	193b      	adds	r3, r7, r4
 801247c:	881b      	ldrh	r3, [r3, #0]
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	3b04      	subs	r3, #4
 8012482:	2b00      	cmp	r3, #0
 8012484:	dd2f      	ble.n	80124e6 <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	240e      	movs	r4, #14
 801248c:	193b      	adds	r3, r7, r4
 801248e:	881b      	ldrh	r3, [r3, #0]
 8012490:	1939      	adds	r1, r7, r4
 8012492:	1c58      	adds	r0, r3, #1
 8012494:	8008      	strh	r0, [r1, #0]
 8012496:	18d3      	adds	r3, r2, r3
 8012498:	7819      	ldrb	r1, [r3, #0]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2220      	movs	r2, #32
 801249e:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	791a      	ldrb	r2, [r3, #4]
 80124a4:	193b      	adds	r3, r7, r4
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	1ad3      	subs	r3, r2, r3
 80124ac:	b2db      	uxtb	r3, r3
 80124ae:	3b04      	subs	r3, #4
 80124b0:	b2d9      	uxtb	r1, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2228      	movs	r2, #40	; 0x28
 80124b6:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681a      	ldr	r2, [r3, #0]
 80124c0:	193b      	adds	r3, r7, r4
 80124c2:	881b      	ldrh	r3, [r3, #0]
 80124c4:	18d1      	adds	r1, r2, r3
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2228      	movs	r2, #40	; 0x28
 80124ca:	5c9b      	ldrb	r3, [r3, r2]
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	001a      	movs	r2, r3
 80124d0:	f002 ffca 	bl	8015468 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2228      	movs	r2, #40	; 0x28
 80124d8:	5c9b      	ldrb	r3, [r3, r2]
 80124da:	b299      	uxth	r1, r3
 80124dc:	193b      	adds	r3, r7, r4
 80124de:	193a      	adds	r2, r7, r4
 80124e0:	8812      	ldrh	r2, [r2, #0]
 80124e2:	188a      	adds	r2, r1, r2
 80124e4:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	791b      	ldrb	r3, [r3, #4]
 80124ee:	3b04      	subs	r3, #4
 80124f0:	18d3      	adds	r3, r2, r3
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	001a      	movs	r2, r3
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6819      	ldr	r1, [r3, #0]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	791b      	ldrb	r3, [r3, #4]
 8012506:	3b03      	subs	r3, #3
 8012508:	18cb      	adds	r3, r1, r3
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	021b      	lsls	r3, r3, #8
 801250e:	431a      	orrs	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6819      	ldr	r1, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	791b      	ldrb	r3, [r3, #4]
 8012520:	3b02      	subs	r3, #2
 8012522:	18cb      	adds	r3, r1, r3
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	041b      	lsls	r3, r3, #16
 8012528:	431a      	orrs	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6819      	ldr	r1, [r3, #0]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	791b      	ldrb	r3, [r3, #4]
 801253a:	3b01      	subs	r3, #1
 801253c:	18cb      	adds	r3, r1, r3
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	061b      	lsls	r3, r3, #24
 8012542:	431a      	orrs	r2, r3
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8012548:	2300      	movs	r3, #0
}
 801254a:	0018      	movs	r0, r3
 801254c:	46bd      	mov	sp, r7
 801254e:	b005      	add	sp, #20
 8012550:	bd90      	pop	{r4, r7, pc}

08012552 <LoRaMacSerializerJoinRequest>:
#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacSerializer.h>


LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012552:	b5b0      	push	{r4, r5, r7, lr}
 8012554:	b084      	sub	sp, #16
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d003      	beq.n	8012568 <LoRaMacSerializerJoinRequest+0x16>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d101      	bne.n	801256c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012568:	2301      	movs	r3, #1
 801256a:	e089      	b.n	8012680 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 801256c:	230e      	movs	r3, #14
 801256e:	18fb      	adds	r3, r7, r3
 8012570:	2200      	movs	r2, #0
 8012572:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	791b      	ldrb	r3, [r3, #4]
 8012578:	2b16      	cmp	r3, #22
 801257a:	d801      	bhi.n	8012580 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801257c:	2302      	movs	r3, #2
 801257e:	e07f      	b.n	8012680 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	240e      	movs	r4, #14
 8012586:	193b      	adds	r3, r7, r4
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	1939      	adds	r1, r7, r4
 801258c:	1c58      	adds	r0, r3, #1
 801258e:	8008      	strh	r0, [r1, #0]
 8012590:	18d3      	adds	r3, r2, r3
 8012592:	687a      	ldr	r2, [r7, #4]
 8012594:	7952      	ldrb	r2, [r2, #5]
 8012596:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	193b      	adds	r3, r7, r4
 801259e:	881b      	ldrh	r3, [r3, #0]
 80125a0:	18d0      	adds	r0, r2, r3
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	3306      	adds	r3, #6
 80125a6:	2208      	movs	r2, #8
 80125a8:	0019      	movs	r1, r3
 80125aa:	f002 ff78 	bl	801549e <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80125ae:	193b      	adds	r3, r7, r4
 80125b0:	193a      	adds	r2, r7, r4
 80125b2:	8812      	ldrh	r2, [r2, #0]
 80125b4:	3208      	adds	r2, #8
 80125b6:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	193b      	adds	r3, r7, r4
 80125be:	881b      	ldrh	r3, [r3, #0]
 80125c0:	18d0      	adds	r0, r2, r3
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	330e      	adds	r3, #14
 80125c6:	2208      	movs	r2, #8
 80125c8:	0019      	movs	r1, r3
 80125ca:	f002 ff68 	bl	801549e <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80125ce:	193b      	adds	r3, r7, r4
 80125d0:	0025      	movs	r5, r4
 80125d2:	193a      	adds	r2, r7, r4
 80125d4:	8812      	ldrh	r2, [r2, #0]
 80125d6:	3208      	adds	r2, #8
 80125d8:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	8ad8      	ldrh	r0, [r3, #22]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	197b      	adds	r3, r7, r5
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	1979      	adds	r1, r7, r5
 80125e8:	1c5c      	adds	r4, r3, #1
 80125ea:	800c      	strh	r4, [r1, #0]
 80125ec:	18d3      	adds	r3, r2, r3
 80125ee:	b2c2      	uxtb	r2, r0
 80125f0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	8adb      	ldrh	r3, [r3, #22]
 80125f6:	0a1b      	lsrs	r3, r3, #8
 80125f8:	b298      	uxth	r0, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	197b      	adds	r3, r7, r5
 8012600:	881b      	ldrh	r3, [r3, #0]
 8012602:	1979      	adds	r1, r7, r5
 8012604:	1c5c      	adds	r4, r3, #1
 8012606:	800c      	strh	r4, [r1, #0]
 8012608:	18d3      	adds	r3, r2, r3
 801260a:	b2c2      	uxtb	r2, r0
 801260c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6998      	ldr	r0, [r3, #24]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681a      	ldr	r2, [r3, #0]
 8012616:	197b      	adds	r3, r7, r5
 8012618:	881b      	ldrh	r3, [r3, #0]
 801261a:	1979      	adds	r1, r7, r5
 801261c:	1c5c      	adds	r4, r3, #1
 801261e:	800c      	strh	r4, [r1, #0]
 8012620:	18d3      	adds	r3, r2, r3
 8012622:	b2c2      	uxtb	r2, r0
 8012624:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	699b      	ldr	r3, [r3, #24]
 801262a:	0a18      	lsrs	r0, r3, #8
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681a      	ldr	r2, [r3, #0]
 8012630:	197b      	adds	r3, r7, r5
 8012632:	881b      	ldrh	r3, [r3, #0]
 8012634:	1979      	adds	r1, r7, r5
 8012636:	1c5c      	adds	r4, r3, #1
 8012638:	800c      	strh	r4, [r1, #0]
 801263a:	18d3      	adds	r3, r2, r3
 801263c:	b2c2      	uxtb	r2, r0
 801263e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	699b      	ldr	r3, [r3, #24]
 8012644:	0c18      	lsrs	r0, r3, #16
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681a      	ldr	r2, [r3, #0]
 801264a:	197b      	adds	r3, r7, r5
 801264c:	881b      	ldrh	r3, [r3, #0]
 801264e:	1979      	adds	r1, r7, r5
 8012650:	1c5c      	adds	r4, r3, #1
 8012652:	800c      	strh	r4, [r1, #0]
 8012654:	18d3      	adds	r3, r2, r3
 8012656:	b2c2      	uxtb	r2, r0
 8012658:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	699b      	ldr	r3, [r3, #24]
 801265e:	0e18      	lsrs	r0, r3, #24
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	197b      	adds	r3, r7, r5
 8012666:	881b      	ldrh	r3, [r3, #0]
 8012668:	1979      	adds	r1, r7, r5
 801266a:	1c5c      	adds	r4, r3, #1
 801266c:	800c      	strh	r4, [r1, #0]
 801266e:	18d3      	adds	r3, r2, r3
 8012670:	b2c2      	uxtb	r2, r0
 8012672:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012674:	197b      	adds	r3, r7, r5
 8012676:	881b      	ldrh	r3, [r3, #0]
 8012678:	b2da      	uxtb	r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801267e:	2300      	movs	r3, #0
}
 8012680:	0018      	movs	r0, r3
 8012682:	46bd      	mov	sp, r7
 8012684:	b004      	add	sp, #16
 8012686:	bdb0      	pop	{r4, r5, r7, pc}

08012688 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8012688:	b5b0      	push	{r4, r5, r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d003      	beq.n	801269e <LoRaMacSerializerData+0x16>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d101      	bne.n	80126a2 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801269e:	2301      	movs	r3, #1
 80126a0:	e110      	b.n	80128c4 <LoRaMacSerializerData+0x23c>
    }

    uint16_t bufItr = 0;
 80126a2:	230e      	movs	r3, #14
 80126a4:	18fb      	adds	r3, r7, r3
 80126a6:	2200      	movs	r2, #0
 80126a8:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80126aa:	230c      	movs	r3, #12
 80126ac:	18fb      	adds	r3, r7, r3
 80126ae:	2208      	movs	r2, #8
 80126b0:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	2228      	movs	r2, #40	; 0x28
 80126b6:	5c9b      	ldrb	r3, [r3, r2]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d109      	bne.n	80126d0 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	791b      	ldrb	r3, [r3, #4]
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	220c      	movs	r2, #12
 80126c4:	18ba      	adds	r2, r7, r2
 80126c6:	8812      	ldrh	r2, [r2, #0]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d916      	bls.n	80126fa <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80126cc:	2302      	movs	r3, #2
 80126ce:	e0f9      	b.n	80128c4 <LoRaMacSerializerData+0x23c>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	791b      	ldrb	r3, [r3, #4]
 80126d4:	0018      	movs	r0, r3
 80126d6:	230c      	movs	r3, #12
 80126d8:	18fb      	adds	r3, r7, r3
 80126da:	881b      	ldrh	r3, [r3, #0]
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	7b12      	ldrb	r2, [r2, #12]
 80126e0:	0712      	lsls	r2, r2, #28
 80126e2:	0f12      	lsrs	r2, r2, #28
 80126e4:	b2d2      	uxtb	r2, r2
 80126e6:	189b      	adds	r3, r3, r2
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	2128      	movs	r1, #40	; 0x28
 80126ec:	5c52      	ldrb	r2, [r2, r1]
 80126ee:	189b      	adds	r3, r3, r2
 80126f0:	3301      	adds	r3, #1
 80126f2:	4298      	cmp	r0, r3
 80126f4:	da01      	bge.n	80126fa <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80126f6:	2302      	movs	r3, #2
 80126f8:	e0e4      	b.n	80128c4 <LoRaMacSerializerData+0x23c>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	250e      	movs	r5, #14
 8012700:	197b      	adds	r3, r7, r5
 8012702:	881b      	ldrh	r3, [r3, #0]
 8012704:	1979      	adds	r1, r7, r5
 8012706:	1c58      	adds	r0, r3, #1
 8012708:	8008      	strh	r0, [r1, #0]
 801270a:	18d3      	adds	r3, r2, r3
 801270c:	687a      	ldr	r2, [r7, #4]
 801270e:	7952      	ldrb	r2, [r2, #5]
 8012710:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6898      	ldr	r0, [r3, #8]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	197b      	adds	r3, r7, r5
 801271c:	881b      	ldrh	r3, [r3, #0]
 801271e:	1979      	adds	r1, r7, r5
 8012720:	1c5c      	adds	r4, r3, #1
 8012722:	800c      	strh	r4, [r1, #0]
 8012724:	18d3      	adds	r3, r2, r3
 8012726:	b2c2      	uxtb	r2, r0
 8012728:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	689b      	ldr	r3, [r3, #8]
 801272e:	0a18      	lsrs	r0, r3, #8
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	197b      	adds	r3, r7, r5
 8012736:	881b      	ldrh	r3, [r3, #0]
 8012738:	1979      	adds	r1, r7, r5
 801273a:	1c5c      	adds	r4, r3, #1
 801273c:	800c      	strh	r4, [r1, #0]
 801273e:	18d3      	adds	r3, r2, r3
 8012740:	b2c2      	uxtb	r2, r0
 8012742:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	689b      	ldr	r3, [r3, #8]
 8012748:	0c18      	lsrs	r0, r3, #16
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	197b      	adds	r3, r7, r5
 8012750:	881b      	ldrh	r3, [r3, #0]
 8012752:	1979      	adds	r1, r7, r5
 8012754:	1c5c      	adds	r4, r3, #1
 8012756:	800c      	strh	r4, [r1, #0]
 8012758:	18d3      	adds	r3, r2, r3
 801275a:	b2c2      	uxtb	r2, r0
 801275c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	689b      	ldr	r3, [r3, #8]
 8012762:	0e18      	lsrs	r0, r3, #24
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	197b      	adds	r3, r7, r5
 801276a:	881b      	ldrh	r3, [r3, #0]
 801276c:	1979      	adds	r1, r7, r5
 801276e:	1c5c      	adds	r4, r3, #1
 8012770:	800c      	strh	r4, [r1, #0]
 8012772:	18d3      	adds	r3, r2, r3
 8012774:	b2c2      	uxtb	r2, r0
 8012776:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681a      	ldr	r2, [r3, #0]
 801277c:	197b      	adds	r3, r7, r5
 801277e:	881b      	ldrh	r3, [r3, #0]
 8012780:	1979      	adds	r1, r7, r5
 8012782:	1c58      	adds	r0, r3, #1
 8012784:	8008      	strh	r0, [r1, #0]
 8012786:	18d3      	adds	r3, r2, r3
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	7b12      	ldrb	r2, [r2, #12]
 801278c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	89d8      	ldrh	r0, [r3, #14]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	197b      	adds	r3, r7, r5
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	1979      	adds	r1, r7, r5
 801279c:	1c5c      	adds	r4, r3, #1
 801279e:	800c      	strh	r4, [r1, #0]
 80127a0:	18d3      	adds	r3, r2, r3
 80127a2:	b2c2      	uxtb	r2, r0
 80127a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	89db      	ldrh	r3, [r3, #14]
 80127aa:	0a1b      	lsrs	r3, r3, #8
 80127ac:	b298      	uxth	r0, r3
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	197b      	adds	r3, r7, r5
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	1979      	adds	r1, r7, r5
 80127b8:	1c5c      	adds	r4, r3, #1
 80127ba:	800c      	strh	r4, [r1, #0]
 80127bc:	18d3      	adds	r3, r2, r3
 80127be:	b2c2      	uxtb	r2, r0
 80127c0:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681a      	ldr	r2, [r3, #0]
 80127c6:	002c      	movs	r4, r5
 80127c8:	197b      	adds	r3, r7, r5
 80127ca:	881b      	ldrh	r3, [r3, #0]
 80127cc:	18d0      	adds	r0, r2, r3
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	3310      	adds	r3, #16
 80127d2:	0019      	movs	r1, r3
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	7b1b      	ldrb	r3, [r3, #12]
 80127d8:	071b      	lsls	r3, r3, #28
 80127da:	0f1b      	lsrs	r3, r3, #28
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	b29b      	uxth	r3, r3
 80127e0:	001a      	movs	r2, r3
 80127e2:	f002 fe41 	bl	8015468 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	7b1b      	ldrb	r3, [r3, #12]
 80127ea:	071b      	lsls	r3, r3, #28
 80127ec:	0f1b      	lsrs	r3, r3, #28
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	b299      	uxth	r1, r3
 80127f2:	193b      	adds	r3, r7, r4
 80127f4:	193a      	adds	r2, r7, r4
 80127f6:	8812      	ldrh	r2, [r2, #0]
 80127f8:	188a      	adds	r2, r1, r2
 80127fa:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2228      	movs	r2, #40	; 0x28
 8012800:	5c9b      	ldrb	r3, [r3, r2]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d00c      	beq.n	8012820 <LoRaMacSerializerData+0x198>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	210e      	movs	r1, #14
 801280c:	187b      	adds	r3, r7, r1
 801280e:	881b      	ldrh	r3, [r3, #0]
 8012810:	1879      	adds	r1, r7, r1
 8012812:	1c58      	adds	r0, r3, #1
 8012814:	8008      	strh	r0, [r1, #0]
 8012816:	18d3      	adds	r3, r2, r3
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	2120      	movs	r1, #32
 801281c:	5c52      	ldrb	r2, [r2, r1]
 801281e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	240e      	movs	r4, #14
 8012826:	193b      	adds	r3, r7, r4
 8012828:	881b      	ldrh	r3, [r3, #0]
 801282a:	18d0      	adds	r0, r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2228      	movs	r2, #40	; 0x28
 8012834:	5c9b      	ldrb	r3, [r3, r2]
 8012836:	b29b      	uxth	r3, r3
 8012838:	001a      	movs	r2, r3
 801283a:	f002 fe15 	bl	8015468 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2228      	movs	r2, #40	; 0x28
 8012842:	5c9b      	ldrb	r3, [r3, r2]
 8012844:	b299      	uxth	r1, r3
 8012846:	193b      	adds	r3, r7, r4
 8012848:	193a      	adds	r2, r7, r4
 801284a:	8812      	ldrh	r2, [r2, #0]
 801284c:	188a      	adds	r2, r1, r2
 801284e:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	193b      	adds	r3, r7, r4
 801285a:	881b      	ldrh	r3, [r3, #0]
 801285c:	0025      	movs	r5, r4
 801285e:	1939      	adds	r1, r7, r4
 8012860:	1c5c      	adds	r4, r3, #1
 8012862:	800c      	strh	r4, [r1, #0]
 8012864:	18d3      	adds	r3, r2, r3
 8012866:	b2c2      	uxtb	r2, r0
 8012868:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801286e:	0a18      	lsrs	r0, r3, #8
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	197b      	adds	r3, r7, r5
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	1979      	adds	r1, r7, r5
 801287a:	1c5c      	adds	r4, r3, #1
 801287c:	800c      	strh	r4, [r1, #0]
 801287e:	18d3      	adds	r3, r2, r3
 8012880:	b2c2      	uxtb	r2, r0
 8012882:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012888:	0c18      	lsrs	r0, r3, #16
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	197b      	adds	r3, r7, r5
 8012890:	881b      	ldrh	r3, [r3, #0]
 8012892:	1979      	adds	r1, r7, r5
 8012894:	1c5c      	adds	r4, r3, #1
 8012896:	800c      	strh	r4, [r1, #0]
 8012898:	18d3      	adds	r3, r2, r3
 801289a:	b2c2      	uxtb	r2, r0
 801289c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128a2:	0e18      	lsrs	r0, r3, #24
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	197b      	adds	r3, r7, r5
 80128aa:	881b      	ldrh	r3, [r3, #0]
 80128ac:	1979      	adds	r1, r7, r5
 80128ae:	1c5c      	adds	r4, r3, #1
 80128b0:	800c      	strh	r4, [r1, #0]
 80128b2:	18d3      	adds	r3, r2, r3
 80128b4:	b2c2      	uxtb	r2, r0
 80128b6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80128b8:	197b      	adds	r3, r7, r5
 80128ba:	881b      	ldrh	r3, [r3, #0]
 80128bc:	b2da      	uxtb	r2, r3
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80128c2:	2300      	movs	r3, #0
}
 80128c4:	0018      	movs	r0, r3
 80128c6:	46bd      	mov	sp, r7
 80128c8:	b004      	add	sp, #16
 80128ca:	bdb0      	pop	{r4, r5, r7, pc}

080128cc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	0002      	movs	r2, r0
 80128d4:	1dfb      	adds	r3, r7, #7
 80128d6:	701a      	strb	r2, [r3, #0]
    switch( region )
 80128d8:	1dfb      	adds	r3, r7, #7
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	2b05      	cmp	r3, #5
 80128de:	d101      	bne.n	80128e4 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80128e0:	2301      	movs	r3, #1
 80128e2:	e000      	b.n	80128e6 <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80128e4:	2300      	movs	r3, #0
        }
    }
}
 80128e6:	0018      	movs	r0, r3
 80128e8:	46bd      	mov	sp, r7
 80128ea:	b002      	add	sp, #8
 80128ec:	bd80      	pop	{r7, pc}

080128ee <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b084      	sub	sp, #16
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	0002      	movs	r2, r0
 80128f6:	6039      	str	r1, [r7, #0]
 80128f8:	1dfb      	adds	r3, r7, #7
 80128fa:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 80128fc:	2308      	movs	r3, #8
 80128fe:	18fb      	adds	r3, r7, r3
 8012900:	2200      	movs	r2, #0
 8012902:	601a      	str	r2, [r3, #0]
    switch( region )
 8012904:	1dfb      	adds	r3, r7, #7
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	2b05      	cmp	r3, #5
 801290a:	d109      	bne.n	8012920 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	0018      	movs	r0, r3
 8012910:	f001 f958 	bl	8013bc4 <RegionEU868GetPhyParam>
 8012914:	0003      	movs	r3, r0
 8012916:	001a      	movs	r2, r3
 8012918:	230c      	movs	r3, #12
 801291a:	18fb      	adds	r3, r7, r3
 801291c:	601a      	str	r2, [r3, #0]
 801291e:	e005      	b.n	801292c <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8012920:	230c      	movs	r3, #12
 8012922:	18fb      	adds	r3, r7, r3
 8012924:	2208      	movs	r2, #8
 8012926:	18ba      	adds	r2, r7, r2
 8012928:	6812      	ldr	r2, [r2, #0]
 801292a:	601a      	str	r2, [r3, #0]
 801292c:	230c      	movs	r3, #12
 801292e:	18fb      	adds	r3, r7, r3
 8012930:	2200      	movs	r2, #0
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	0013      	movs	r3, r2
        }
    }
}
 8012936:	0018      	movs	r0, r3
 8012938:	46bd      	mov	sp, r7
 801293a:	b004      	add	sp, #16
 801293c:	bd80      	pop	{r7, pc}

0801293e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801293e:	b580      	push	{r7, lr}
 8012940:	b082      	sub	sp, #8
 8012942:	af00      	add	r7, sp, #0
 8012944:	0002      	movs	r2, r0
 8012946:	6039      	str	r1, [r7, #0]
 8012948:	1dfb      	adds	r3, r7, #7
 801294a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801294c:	1dfb      	adds	r3, r7, #7
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	2b05      	cmp	r3, #5
 8012952:	d000      	beq.n	8012956 <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8012954:	e004      	b.n	8012960 <RegionSetBandTxDone+0x22>
        EU868_SET_BAND_TX_DONE( );
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	0018      	movs	r0, r3
 801295a:	f001 fa37 	bl	8013dcc <RegionEU868SetBandTxDone>
 801295e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012960:	46bd      	mov	sp, r7
 8012962:	b002      	add	sp, #8
 8012964:	bd80      	pop	{r7, pc}

08012966 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012966:	b580      	push	{r7, lr}
 8012968:	b082      	sub	sp, #8
 801296a:	af00      	add	r7, sp, #0
 801296c:	0002      	movs	r2, r0
 801296e:	6039      	str	r1, [r7, #0]
 8012970:	1dfb      	adds	r3, r7, #7
 8012972:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012974:	1dfb      	adds	r3, r7, #7
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	2b05      	cmp	r3, #5
 801297a:	d000      	beq.n	801297e <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801297c:	e004      	b.n	8012988 <RegionInitDefaults+0x22>
        EU868_INIT_DEFAULTS( );
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	0018      	movs	r0, r3
 8012982:	f001 fa43 	bl	8013e0c <RegionEU868InitDefaults>
 8012986:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012988:	46c0      	nop			; (mov r8, r8)
 801298a:	46bd      	mov	sp, r7
 801298c:	b002      	add	sp, #8
 801298e:	bd80      	pop	{r7, pc}

08012990 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	0002      	movs	r2, r0
 8012998:	6039      	str	r1, [r7, #0]
 801299a:	1dfb      	adds	r3, r7, #7
 801299c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801299e:	1dfb      	adds	r3, r7, #7
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	2b05      	cmp	r3, #5
 80129a4:	d105      	bne.n	80129b2 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	0018      	movs	r0, r3
 80129aa:	f001 faa7 	bl	8013efc <RegionEU868GetNvmCtx>
 80129ae:	0003      	movs	r3, r0
 80129b0:	e000      	b.n	80129b4 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 80129b2:	2300      	movs	r3, #0
        }
    }
}
 80129b4:	0018      	movs	r0, r3
 80129b6:	46bd      	mov	sp, r7
 80129b8:	b002      	add	sp, #8
 80129ba:	bd80      	pop	{r7, pc}

080129bc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6039      	str	r1, [r7, #0]
 80129c4:	0011      	movs	r1, r2
 80129c6:	1dfb      	adds	r3, r7, #7
 80129c8:	1c02      	adds	r2, r0, #0
 80129ca:	701a      	strb	r2, [r3, #0]
 80129cc:	1dbb      	adds	r3, r7, #6
 80129ce:	1c0a      	adds	r2, r1, #0
 80129d0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80129d2:	1dfb      	adds	r3, r7, #7
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	2b05      	cmp	r3, #5
 80129d8:	d108      	bne.n	80129ec <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80129da:	1dbb      	adds	r3, r7, #6
 80129dc:	781a      	ldrb	r2, [r3, #0]
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	0011      	movs	r1, r2
 80129e2:	0018      	movs	r0, r3
 80129e4:	f001 fa9a 	bl	8013f1c <RegionEU868Verify>
 80129e8:	0003      	movs	r3, r0
 80129ea:	e000      	b.n	80129ee <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80129ec:	2300      	movs	r3, #0
        }
    }
}
 80129ee:	0018      	movs	r0, r3
 80129f0:	46bd      	mov	sp, r7
 80129f2:	b002      	add	sp, #8
 80129f4:	bd80      	pop	{r7, pc}

080129f6 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80129f6:	b580      	push	{r7, lr}
 80129f8:	b082      	sub	sp, #8
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	0002      	movs	r2, r0
 80129fe:	6039      	str	r1, [r7, #0]
 8012a00:	1dfb      	adds	r3, r7, #7
 8012a02:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012a04:	1dfb      	adds	r3, r7, #7
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2b05      	cmp	r3, #5
 8012a0a:	d000      	beq.n	8012a0e <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8012a0c:	e004      	b.n	8012a18 <RegionApplyCFList+0x22>
        EU868_APPLY_CF_LIST( );
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	0018      	movs	r0, r3
 8012a12:	f001 fad1 	bl	8013fb8 <RegionEU868ApplyCFList>
 8012a16:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012a18:	46c0      	nop			; (mov r8, r8)
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	b002      	add	sp, #8
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	0002      	movs	r2, r0
 8012a28:	6039      	str	r1, [r7, #0]
 8012a2a:	1dfb      	adds	r3, r7, #7
 8012a2c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012a2e:	1dfb      	adds	r3, r7, #7
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	2b05      	cmp	r3, #5
 8012a34:	d105      	bne.n	8012a42 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	0018      	movs	r0, r3
 8012a3a:	f001 fb4f 	bl	80140dc <RegionEU868ChanMaskSet>
 8012a3e:	0003      	movs	r3, r0
 8012a40:	e000      	b.n	8012a44 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8012a42:	2300      	movs	r3, #0
        }
    }
}
 8012a44:	0018      	movs	r0, r3
 8012a46:	46bd      	mov	sp, r7
 8012a48:	b002      	add	sp, #8
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012a4c:	b590      	push	{r4, r7, lr}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	0004      	movs	r4, r0
 8012a54:	0008      	movs	r0, r1
 8012a56:	0011      	movs	r1, r2
 8012a58:	603b      	str	r3, [r7, #0]
 8012a5a:	1dfb      	adds	r3, r7, #7
 8012a5c:	1c22      	adds	r2, r4, #0
 8012a5e:	701a      	strb	r2, [r3, #0]
 8012a60:	1dbb      	adds	r3, r7, #6
 8012a62:	1c02      	adds	r2, r0, #0
 8012a64:	701a      	strb	r2, [r3, #0]
 8012a66:	1d7b      	adds	r3, r7, #5
 8012a68:	1c0a      	adds	r2, r1, #0
 8012a6a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012a6c:	1dfb      	adds	r3, r7, #7
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	2b05      	cmp	r3, #5
 8012a72:	d000      	beq.n	8012a76 <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8012a74:	e00a      	b.n	8012a8c <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8012a76:	69bc      	ldr	r4, [r7, #24]
 8012a78:	683a      	ldr	r2, [r7, #0]
 8012a7a:	1d7b      	adds	r3, r7, #5
 8012a7c:	7819      	ldrb	r1, [r3, #0]
 8012a7e:	1dbb      	adds	r3, r7, #6
 8012a80:	2000      	movs	r0, #0
 8012a82:	5618      	ldrsb	r0, [r3, r0]
 8012a84:	0023      	movs	r3, r4
 8012a86:	f001 fb4f 	bl	8014128 <RegionEU868ComputeRxWindowParameters>
 8012a8a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012a8c:	46c0      	nop			; (mov r8, r8)
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	b003      	add	sp, #12
 8012a92:	bd90      	pop	{r4, r7, pc}

08012a94 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	60b9      	str	r1, [r7, #8]
 8012a9c:	607a      	str	r2, [r7, #4]
 8012a9e:	210f      	movs	r1, #15
 8012aa0:	187b      	adds	r3, r7, r1
 8012aa2:	1c02      	adds	r2, r0, #0
 8012aa4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012aa6:	187b      	adds	r3, r7, r1
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	2b05      	cmp	r3, #5
 8012aac:	d107      	bne.n	8012abe <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	0011      	movs	r1, r2
 8012ab4:	0018      	movs	r0, r3
 8012ab6:	f001 fba1 	bl	80141fc <RegionEU868RxConfig>
 8012aba:	0003      	movs	r3, r0
 8012abc:	e000      	b.n	8012ac0 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8012abe:	2300      	movs	r3, #0
        }
    }
}
 8012ac0:	0018      	movs	r0, r3
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	b004      	add	sp, #16
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60b9      	str	r1, [r7, #8]
 8012ad0:	607a      	str	r2, [r7, #4]
 8012ad2:	603b      	str	r3, [r7, #0]
 8012ad4:	210f      	movs	r1, #15
 8012ad6:	187b      	adds	r3, r7, r1
 8012ad8:	1c02      	adds	r2, r0, #0
 8012ada:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012adc:	187b      	adds	r3, r7, r1
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	2b05      	cmp	r3, #5
 8012ae2:	d107      	bne.n	8012af4 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8012ae4:	683a      	ldr	r2, [r7, #0]
 8012ae6:	6879      	ldr	r1, [r7, #4]
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	0018      	movs	r0, r3
 8012aec:	f001 fc72 	bl	80143d4 <RegionEU868TxConfig>
 8012af0:	0003      	movs	r3, r0
 8012af2:	e000      	b.n	8012af6 <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8012af4:	2300      	movs	r3, #0
        }
    }
}
 8012af6:	0018      	movs	r0, r3
 8012af8:	46bd      	mov	sp, r7
 8012afa:	b004      	add	sp, #16
 8012afc:	bd80      	pop	{r7, pc}

08012afe <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012afe:	b590      	push	{r4, r7, lr}
 8012b00:	b087      	sub	sp, #28
 8012b02:	af02      	add	r7, sp, #8
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	607a      	str	r2, [r7, #4]
 8012b08:	603b      	str	r3, [r7, #0]
 8012b0a:	210f      	movs	r1, #15
 8012b0c:	187b      	adds	r3, r7, r1
 8012b0e:	1c02      	adds	r2, r0, #0
 8012b10:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012b12:	187b      	adds	r3, r7, r1
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	2b05      	cmp	r3, #5
 8012b18:	d10a      	bne.n	8012b30 <RegionLinkAdrReq+0x32>
        //AS923_LINK_ADR_REQ( );
        //AU915_LINK_ADR_REQ( );
       // CN470_LINK_ADR_REQ( );
       // CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8012b1a:	6a3c      	ldr	r4, [r7, #32]
 8012b1c:	683a      	ldr	r2, [r7, #0]
 8012b1e:	6879      	ldr	r1, [r7, #4]
 8012b20:	68b8      	ldr	r0, [r7, #8]
 8012b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b24:	9300      	str	r3, [sp, #0]
 8012b26:	0023      	movs	r3, r4
 8012b28:	f001 fd2c 	bl	8014584 <RegionEU868LinkAdrReq>
 8012b2c:	0003      	movs	r3, r0
 8012b2e:	e000      	b.n	8012b32 <RegionLinkAdrReq+0x34>
       // IN865_LINK_ADR_REQ( );
       // US915_LINK_ADR_REQ( );
       // RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8012b30:	2300      	movs	r3, #0
        }
    }
}
 8012b32:	0018      	movs	r0, r3
 8012b34:	46bd      	mov	sp, r7
 8012b36:	b005      	add	sp, #20
 8012b38:	bd90      	pop	{r4, r7, pc}

08012b3a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b082      	sub	sp, #8
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	0002      	movs	r2, r0
 8012b42:	6039      	str	r1, [r7, #0]
 8012b44:	1dfb      	adds	r3, r7, #7
 8012b46:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012b48:	1dfb      	adds	r3, r7, #7
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	2b05      	cmp	r3, #5
 8012b4e:	d105      	bne.n	8012b5c <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	0018      	movs	r0, r3
 8012b54:	f001 fe6c 	bl	8014830 <RegionEU868RxParamSetupReq>
 8012b58:	0003      	movs	r3, r0
 8012b5a:	e000      	b.n	8012b5e <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8012b5c:	2300      	movs	r3, #0
        }
    }
}
 8012b5e:	0018      	movs	r0, r3
 8012b60:	46bd      	mov	sp, r7
 8012b62:	b002      	add	sp, #8
 8012b64:	bd80      	pop	{r7, pc}

08012b66 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b082      	sub	sp, #8
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	0002      	movs	r2, r0
 8012b6e:	6039      	str	r1, [r7, #0]
 8012b70:	1dfb      	adds	r3, r7, #7
 8012b72:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012b74:	1dfb      	adds	r3, r7, #7
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	2b05      	cmp	r3, #5
 8012b7a:	d105      	bne.n	8012b88 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	0018      	movs	r0, r3
 8012b80:	f001 fea0 	bl	80148c4 <RegionEU868NewChannelReq>
 8012b84:	0003      	movs	r3, r0
 8012b86:	e000      	b.n	8012b8a <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012b88:	2300      	movs	r3, #0
        }
    }
}
 8012b8a:	0018      	movs	r0, r3
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	b002      	add	sp, #8
 8012b90:	bd80      	pop	{r7, pc}

08012b92 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8012b92:	b580      	push	{r7, lr}
 8012b94:	b082      	sub	sp, #8
 8012b96:	af00      	add	r7, sp, #0
 8012b98:	0002      	movs	r2, r0
 8012b9a:	6039      	str	r1, [r7, #0]
 8012b9c:	1dfb      	adds	r3, r7, #7
 8012b9e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012ba0:	1dfb      	adds	r3, r7, #7
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	2b05      	cmp	r3, #5
 8012ba6:	d105      	bne.n	8012bb4 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	0018      	movs	r0, r3
 8012bac:	f001 fef4 	bl	8014998 <RegionEU868TxParamSetupReq>
 8012bb0:	0003      	movs	r3, r0
 8012bb2:	e000      	b.n	8012bb6 <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8012bb4:	2300      	movs	r3, #0
        }
    }
}
 8012bb6:	0018      	movs	r0, r3
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	b002      	add	sp, #8
 8012bbc:	bd80      	pop	{r7, pc}

08012bbe <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8012bbe:	b580      	push	{r7, lr}
 8012bc0:	b082      	sub	sp, #8
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	0002      	movs	r2, r0
 8012bc6:	6039      	str	r1, [r7, #0]
 8012bc8:	1dfb      	adds	r3, r7, #7
 8012bca:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012bcc:	1dfb      	adds	r3, r7, #7
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	2b05      	cmp	r3, #5
 8012bd2:	d105      	bne.n	8012be0 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	0018      	movs	r0, r3
 8012bd8:	f001 fee8 	bl	80149ac <RegionEU868DlChannelReq>
 8012bdc:	0003      	movs	r3, r0
 8012bde:	e000      	b.n	8012be2 <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012be0:	2300      	movs	r3, #0
        }
    }
}
 8012be2:	0018      	movs	r0, r3
 8012be4:	46bd      	mov	sp, r7
 8012be6:	b002      	add	sp, #8
 8012be8:	bd80      	pop	{r7, pc}

08012bea <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8012bea:	b590      	push	{r4, r7, lr}
 8012bec:	b083      	sub	sp, #12
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	0004      	movs	r4, r0
 8012bf2:	0008      	movs	r0, r1
 8012bf4:	0011      	movs	r1, r2
 8012bf6:	1dfb      	adds	r3, r7, #7
 8012bf8:	1c22      	adds	r2, r4, #0
 8012bfa:	701a      	strb	r2, [r3, #0]
 8012bfc:	1dbb      	adds	r3, r7, #6
 8012bfe:	1c02      	adds	r2, r0, #0
 8012c00:	701a      	strb	r2, [r3, #0]
 8012c02:	1d7b      	adds	r3, r7, #5
 8012c04:	1c0a      	adds	r2, r1, #0
 8012c06:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012c08:	1dfb      	adds	r3, r7, #7
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b05      	cmp	r3, #5
 8012c0e:	d10a      	bne.n	8012c26 <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8012c10:	1d7b      	adds	r3, r7, #5
 8012c12:	781a      	ldrb	r2, [r3, #0]
 8012c14:	1dbb      	adds	r3, r7, #6
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	b25b      	sxtb	r3, r3
 8012c1a:	0011      	movs	r1, r2
 8012c1c:	0018      	movs	r0, r3
 8012c1e:	f001 ff13 	bl	8014a48 <RegionEU868AlternateDr>
 8012c22:	0003      	movs	r3, r0
 8012c24:	e000      	b.n	8012c28 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8012c26:	2300      	movs	r3, #0
        }
    }
}
 8012c28:	0018      	movs	r0, r3
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	b003      	add	sp, #12
 8012c2e:	bd90      	pop	{r4, r7, pc}

08012c30 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	0002      	movs	r2, r0
 8012c38:	6039      	str	r1, [r7, #0]
 8012c3a:	1dfb      	adds	r3, r7, #7
 8012c3c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012c3e:	1dfb      	adds	r3, r7, #7
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	2b05      	cmp	r3, #5
 8012c44:	d000      	beq.n	8012c48 <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 8012c46:	e004      	b.n	8012c52 <RegionCalcBackOff+0x22>
        EU868_CALC_BACKOFF( );
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	0018      	movs	r0, r3
 8012c4c:	f001 ff0c 	bl	8014a68 <RegionEU868CalcBackOff>
 8012c50:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012c52:	46c0      	nop			; (mov r8, r8)
 8012c54:	46bd      	mov	sp, r7
 8012c56:	b002      	add	sp, #8
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012c5a:	b580      	push	{r7, lr}
 8012c5c:	b084      	sub	sp, #16
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
 8012c64:	603b      	str	r3, [r7, #0]
 8012c66:	210f      	movs	r1, #15
 8012c68:	187b      	adds	r3, r7, r1
 8012c6a:	1c02      	adds	r2, r0, #0
 8012c6c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012c6e:	187b      	adds	r3, r7, r1
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	2b05      	cmp	r3, #5
 8012c74:	d107      	bne.n	8012c86 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	683a      	ldr	r2, [r7, #0]
 8012c7a:	6879      	ldr	r1, [r7, #4]
 8012c7c:	68b8      	ldr	r0, [r7, #8]
 8012c7e:	f001 ff23 	bl	8014ac8 <RegionEU868NextChannel>
 8012c82:	0003      	movs	r3, r0
 8012c84:	e000      	b.n	8012c88 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012c86:	2309      	movs	r3, #9
        }
    }
}
 8012c88:	0018      	movs	r0, r3
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	b004      	add	sp, #16
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <RegionChannelAdd>:

LoRaMacStatus_t RegionChannelAdd( LoRaMacRegion_t region, ChannelAddParams_t* channelAdd )
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	0002      	movs	r2, r0
 8012c98:	6039      	str	r1, [r7, #0]
 8012c9a:	1dfb      	adds	r3, r7, #7
 8012c9c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012c9e:	1dfb      	adds	r3, r7, #7
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	2b05      	cmp	r3, #5
 8012ca4:	d105      	bne.n	8012cb2 <RegionChannelAdd+0x22>
        AS923_CHANNEL_ADD( );
        AU915_CHANNEL_ADD( );
        CN470_CHANNEL_ADD( );
        CN779_CHANNEL_ADD( );
        EU433_CHANNEL_ADD( );
        EU868_CHANNEL_ADD( );
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	0018      	movs	r0, r3
 8012caa:	f001 ffb5 	bl	8014c18 <RegionEU868ChannelAdd>
 8012cae:	0003      	movs	r3, r0
 8012cb0:	e000      	b.n	8012cb4 <RegionChannelAdd+0x24>
        IN865_CHANNEL_ADD( );
        US915_CHANNEL_ADD( );
        RU864_CHANNEL_ADD( );
        default:
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012cb2:	2303      	movs	r3, #3
        }
    }
}
 8012cb4:	0018      	movs	r0, r3
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	b002      	add	sp, #8
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	0002      	movs	r2, r0
 8012cc4:	6039      	str	r1, [r7, #0]
 8012cc6:	1dfb      	adds	r3, r7, #7
 8012cc8:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012cca:	1dfb      	adds	r3, r7, #7
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	2b05      	cmp	r3, #5
 8012cd0:	d000      	beq.n	8012cd4 <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8012cd2:	e004      	b.n	8012cde <RegionSetContinuousWave+0x22>
        EU868_SET_CONTINUOUS_WAVE( );
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	0018      	movs	r0, r3
 8012cd8:	f002 f890 	bl	8014dfc <RegionEU868SetContinuousWave>
 8012cdc:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012cde:	46c0      	nop			; (mov r8, r8)
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	b002      	add	sp, #8
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8012ce6:	b5b0      	push	{r4, r5, r7, lr}
 8012ce8:	b082      	sub	sp, #8
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	0005      	movs	r5, r0
 8012cee:	000c      	movs	r4, r1
 8012cf0:	0010      	movs	r0, r2
 8012cf2:	0019      	movs	r1, r3
 8012cf4:	1dfb      	adds	r3, r7, #7
 8012cf6:	1c2a      	adds	r2, r5, #0
 8012cf8:	701a      	strb	r2, [r3, #0]
 8012cfa:	1dbb      	adds	r3, r7, #6
 8012cfc:	1c22      	adds	r2, r4, #0
 8012cfe:	701a      	strb	r2, [r3, #0]
 8012d00:	1d7b      	adds	r3, r7, #5
 8012d02:	1c02      	adds	r2, r0, #0
 8012d04:	701a      	strb	r2, [r3, #0]
 8012d06:	1d3b      	adds	r3, r7, #4
 8012d08:	1c0a      	adds	r2, r1, #0
 8012d0a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8012d0c:	1dfb      	adds	r3, r7, #7
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	2b05      	cmp	r3, #5
 8012d12:	d10c      	bne.n	8012d2e <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8012d14:	1d3b      	adds	r3, r7, #4
 8012d16:	2200      	movs	r2, #0
 8012d18:	569a      	ldrsb	r2, [r3, r2]
 8012d1a:	1d7b      	adds	r3, r7, #5
 8012d1c:	2100      	movs	r1, #0
 8012d1e:	5659      	ldrsb	r1, [r3, r1]
 8012d20:	1dbb      	adds	r3, r7, #6
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	0018      	movs	r0, r3
 8012d26:	f002 f8bd 	bl	8014ea4 <RegionEU868ApplyDrOffset>
 8012d2a:	0003      	movs	r3, r0
 8012d2c:	e001      	b.n	8012d32 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8012d2e:	1d7b      	adds	r3, r7, #5
 8012d30:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8012d32:	0018      	movs	r0, r3
 8012d34:	46bd      	mov	sp, r7
 8012d36:	b002      	add	sp, #8
 8012d38:	bdb0      	pop	{r4, r5, r7, pc}

08012d3a <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b084      	sub	sp, #16
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	0002      	movs	r2, r0
 8012d42:	1dbb      	adds	r3, r7, #6
 8012d44:	801a      	strh	r2, [r3, #0]
 8012d46:	1d7b      	adds	r3, r7, #5
 8012d48:	1c0a      	adds	r2, r1, #0
 8012d4a:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8012d4c:	230f      	movs	r3, #15
 8012d4e:	18fb      	adds	r3, r7, r3
 8012d50:	2200      	movs	r2, #0
 8012d52:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8012d54:	230e      	movs	r3, #14
 8012d56:	18fb      	adds	r3, r7, r3
 8012d58:	2200      	movs	r2, #0
 8012d5a:	701a      	strb	r2, [r3, #0]
 8012d5c:	e01b      	b.n	8012d96 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012d5e:	1dbb      	adds	r3, r7, #6
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	200e      	movs	r0, #14
 8012d64:	183a      	adds	r2, r7, r0
 8012d66:	7812      	ldrb	r2, [r2, #0]
 8012d68:	2101      	movs	r1, #1
 8012d6a:	4091      	lsls	r1, r2
 8012d6c:	000a      	movs	r2, r1
 8012d6e:	401a      	ands	r2, r3
 8012d70:	183b      	adds	r3, r7, r0
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	2101      	movs	r1, #1
 8012d76:	4099      	lsls	r1, r3
 8012d78:	000b      	movs	r3, r1
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d105      	bne.n	8012d8a <CountChannels+0x50>
        {
            nbActiveBits++;
 8012d7e:	210f      	movs	r1, #15
 8012d80:	187b      	adds	r3, r7, r1
 8012d82:	781a      	ldrb	r2, [r3, #0]
 8012d84:	187b      	adds	r3, r7, r1
 8012d86:	3201      	adds	r2, #1
 8012d88:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8012d8a:	210e      	movs	r1, #14
 8012d8c:	187b      	adds	r3, r7, r1
 8012d8e:	781a      	ldrb	r2, [r3, #0]
 8012d90:	187b      	adds	r3, r7, r1
 8012d92:	3201      	adds	r2, #1
 8012d94:	701a      	strb	r2, [r3, #0]
 8012d96:	230e      	movs	r3, #14
 8012d98:	18fa      	adds	r2, r7, r3
 8012d9a:	1d7b      	adds	r3, r7, #5
 8012d9c:	7812      	ldrb	r2, [r2, #0]
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d3dc      	bcc.n	8012d5e <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8012da4:	230f      	movs	r3, #15
 8012da6:	18fb      	adds	r3, r7, r3
 8012da8:	781b      	ldrb	r3, [r3, #0]
}
 8012daa:	0018      	movs	r0, r3
 8012dac:	46bd      	mov	sp, r7
 8012dae:	b004      	add	sp, #16
 8012db0:	bd80      	pop	{r7, pc}
	...

08012db4 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8012dbc:	230e      	movs	r3, #14
 8012dbe:	18fb      	adds	r3, r7, r3
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	4a0e      	ldr	r2, [pc, #56]	; (8012e00 <RegionCommonGetJoinDc+0x4c>)
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d804      	bhi.n	8012dd6 <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8012dcc:	230e      	movs	r3, #14
 8012dce:	18fb      	adds	r3, r7, r3
 8012dd0:	2264      	movs	r2, #100	; 0x64
 8012dd2:	801a      	strh	r2, [r3, #0]
 8012dd4:	e00d      	b.n	8012df2 <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	4a0a      	ldr	r2, [pc, #40]	; (8012e04 <RegionCommonGetJoinDc+0x50>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d805      	bhi.n	8012dea <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8012dde:	230e      	movs	r3, #14
 8012de0:	18fb      	adds	r3, r7, r3
 8012de2:	22fa      	movs	r2, #250	; 0xfa
 8012de4:	0092      	lsls	r2, r2, #2
 8012de6:	801a      	strh	r2, [r3, #0]
 8012de8:	e003      	b.n	8012df2 <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8012dea:	230e      	movs	r3, #14
 8012dec:	18fb      	adds	r3, r7, r3
 8012dee:	4a06      	ldr	r2, [pc, #24]	; (8012e08 <RegionCommonGetJoinDc+0x54>)
 8012df0:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8012df2:	230e      	movs	r3, #14
 8012df4:	18fb      	adds	r3, r7, r3
 8012df6:	881b      	ldrh	r3, [r3, #0]
}
 8012df8:	0018      	movs	r0, r3
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	b004      	add	sp, #16
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	0036ee7f 	.word	0x0036ee7f
 8012e04:	025c3f7f 	.word	0x025c3f7f
 8012e08:	00002710 	.word	0x00002710

08012e0c <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8012e0c:	b590      	push	{r4, r7, lr}
 8012e0e:	b085      	sub	sp, #20
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	0004      	movs	r4, r0
 8012e14:	6039      	str	r1, [r7, #0]
 8012e16:	0010      	movs	r0, r2
 8012e18:	0019      	movs	r1, r3
 8012e1a:	1dfb      	adds	r3, r7, #7
 8012e1c:	1c22      	adds	r2, r4, #0
 8012e1e:	701a      	strb	r2, [r3, #0]
 8012e20:	1dbb      	adds	r3, r7, #6
 8012e22:	1c02      	adds	r2, r0, #0
 8012e24:	701a      	strb	r2, [r3, #0]
 8012e26:	1d7b      	adds	r3, r7, #5
 8012e28:	1c0a      	adds	r2, r1, #0
 8012e2a:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8012e2c:	2320      	movs	r3, #32
 8012e2e:	18fb      	adds	r3, r7, r3
 8012e30:	2200      	movs	r2, #0
 8012e32:	569a      	ldrsb	r2, [r3, r2]
 8012e34:	1d7b      	adds	r3, r7, #5
 8012e36:	2100      	movs	r1, #0
 8012e38:	5659      	ldrsb	r1, [r3, r1]
 8012e3a:	1dbb      	adds	r3, r7, #6
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	b25b      	sxtb	r3, r3
 8012e40:	0018      	movs	r0, r3
 8012e42:	f000 f87d 	bl	8012f40 <RegionCommonValueInRange>
 8012e46:	1e03      	subs	r3, r0, #0
 8012e48:	d101      	bne.n	8012e4e <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e074      	b.n	8012f38 <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012e4e:	230f      	movs	r3, #15
 8012e50:	18fb      	adds	r3, r7, r3
 8012e52:	2200      	movs	r2, #0
 8012e54:	701a      	strb	r2, [r3, #0]
 8012e56:	230e      	movs	r3, #14
 8012e58:	18fb      	adds	r3, r7, r3
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	701a      	strb	r2, [r3, #0]
 8012e5e:	e063      	b.n	8012f28 <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012e60:	230d      	movs	r3, #13
 8012e62:	18fb      	adds	r3, r7, r3
 8012e64:	2200      	movs	r2, #0
 8012e66:	701a      	strb	r2, [r3, #0]
 8012e68:	e04d      	b.n	8012f06 <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8012e6a:	230e      	movs	r3, #14
 8012e6c:	18fb      	adds	r3, r7, r3
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	005b      	lsls	r3, r3, #1
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	18d3      	adds	r3, r2, r3
 8012e76:	881b      	ldrh	r3, [r3, #0]
 8012e78:	001a      	movs	r2, r3
 8012e7a:	230d      	movs	r3, #13
 8012e7c:	18fb      	adds	r3, r7, r3
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	411a      	asrs	r2, r3
 8012e82:	0013      	movs	r3, r2
 8012e84:	2201      	movs	r2, #1
 8012e86:	4013      	ands	r3, r2
 8012e88:	d037      	beq.n	8012efa <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012e8a:	200f      	movs	r0, #15
 8012e8c:	183b      	adds	r3, r7, r0
 8012e8e:	781a      	ldrb	r2, [r3, #0]
 8012e90:	240d      	movs	r4, #13
 8012e92:	193b      	adds	r3, r7, r4
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	18d3      	adds	r3, r2, r3
 8012e98:	001a      	movs	r2, r3
 8012e9a:	0013      	movs	r3, r2
 8012e9c:	005b      	lsls	r3, r3, #1
 8012e9e:	189b      	adds	r3, r3, r2
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	001a      	movs	r2, r3
 8012ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea6:	189b      	adds	r3, r3, r2
 8012ea8:	7a1b      	ldrb	r3, [r3, #8]
 8012eaa:	011b      	lsls	r3, r3, #4
 8012eac:	b25b      	sxtb	r3, r3
 8012eae:	111b      	asrs	r3, r3, #4
 8012eb0:	b25b      	sxtb	r3, r3
 8012eb2:	001a      	movs	r2, r3
 8012eb4:	230f      	movs	r3, #15
 8012eb6:	4013      	ands	r3, r2
 8012eb8:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8012eba:	183b      	adds	r3, r7, r0
 8012ebc:	781a      	ldrb	r2, [r3, #0]
 8012ebe:	193b      	adds	r3, r7, r4
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	18d3      	adds	r3, r2, r3
 8012ec4:	001a      	movs	r2, r3
 8012ec6:	0013      	movs	r3, r2
 8012ec8:	005b      	lsls	r3, r3, #1
 8012eca:	189b      	adds	r3, r3, r2
 8012ecc:	009b      	lsls	r3, r3, #2
 8012ece:	001a      	movs	r2, r3
 8012ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed2:	189b      	adds	r3, r3, r2
 8012ed4:	7a1b      	ldrb	r3, [r3, #8]
 8012ed6:	b25b      	sxtb	r3, r3
 8012ed8:	111b      	asrs	r3, r3, #4
 8012eda:	b25b      	sxtb	r3, r3
 8012edc:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012ede:	230f      	movs	r3, #15
 8012ee0:	4013      	ands	r3, r2
 8012ee2:	b25a      	sxtb	r2, r3
 8012ee4:	1dbb      	adds	r3, r7, #6
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	b25b      	sxtb	r3, r3
 8012eea:	0018      	movs	r0, r3
 8012eec:	f000 f828 	bl	8012f40 <RegionCommonValueInRange>
 8012ef0:	0003      	movs	r3, r0
 8012ef2:	2b01      	cmp	r3, #1
 8012ef4:	d101      	bne.n	8012efa <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	e01e      	b.n	8012f38 <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 8012efa:	210d      	movs	r1, #13
 8012efc:	187b      	adds	r3, r7, r1
 8012efe:	781a      	ldrb	r2, [r3, #0]
 8012f00:	187b      	adds	r3, r7, r1
 8012f02:	3201      	adds	r2, #1
 8012f04:	701a      	strb	r2, [r3, #0]
 8012f06:	230d      	movs	r3, #13
 8012f08:	18fb      	adds	r3, r7, r3
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	2b0f      	cmp	r3, #15
 8012f0e:	d9ac      	bls.n	8012e6a <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012f10:	220f      	movs	r2, #15
 8012f12:	18bb      	adds	r3, r7, r2
 8012f14:	18ba      	adds	r2, r7, r2
 8012f16:	7812      	ldrb	r2, [r2, #0]
 8012f18:	3210      	adds	r2, #16
 8012f1a:	701a      	strb	r2, [r3, #0]
 8012f1c:	210e      	movs	r1, #14
 8012f1e:	187b      	adds	r3, r7, r1
 8012f20:	781a      	ldrb	r2, [r3, #0]
 8012f22:	187b      	adds	r3, r7, r1
 8012f24:	3201      	adds	r2, #1
 8012f26:	701a      	strb	r2, [r3, #0]
 8012f28:	230f      	movs	r3, #15
 8012f2a:	18fa      	adds	r2, r7, r3
 8012f2c:	1dfb      	adds	r3, r7, #7
 8012f2e:	7812      	ldrb	r2, [r2, #0]
 8012f30:	781b      	ldrb	r3, [r3, #0]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d394      	bcc.n	8012e60 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8012f36:	2300      	movs	r3, #0
}
 8012f38:	0018      	movs	r0, r3
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	b005      	add	sp, #20
 8012f3e:	bd90      	pop	{r4, r7, pc}

08012f40 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8012f40:	b590      	push	{r4, r7, lr}
 8012f42:	b083      	sub	sp, #12
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	0004      	movs	r4, r0
 8012f48:	0008      	movs	r0, r1
 8012f4a:	0011      	movs	r1, r2
 8012f4c:	1dfb      	adds	r3, r7, #7
 8012f4e:	1c22      	adds	r2, r4, #0
 8012f50:	701a      	strb	r2, [r3, #0]
 8012f52:	1dbb      	adds	r3, r7, #6
 8012f54:	1c02      	adds	r2, r0, #0
 8012f56:	701a      	strb	r2, [r3, #0]
 8012f58:	1d7b      	adds	r3, r7, #5
 8012f5a:	1c0a      	adds	r2, r1, #0
 8012f5c:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8012f5e:	1dfa      	adds	r2, r7, #7
 8012f60:	1dbb      	adds	r3, r7, #6
 8012f62:	7812      	ldrb	r2, [r2, #0]
 8012f64:	b252      	sxtb	r2, r2
 8012f66:	781b      	ldrb	r3, [r3, #0]
 8012f68:	b25b      	sxtb	r3, r3
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	db09      	blt.n	8012f82 <RegionCommonValueInRange+0x42>
 8012f6e:	1dfa      	adds	r2, r7, #7
 8012f70:	1d7b      	adds	r3, r7, #5
 8012f72:	7812      	ldrb	r2, [r2, #0]
 8012f74:	b252      	sxtb	r2, r2
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	b25b      	sxtb	r3, r3
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	dc01      	bgt.n	8012f82 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	e000      	b.n	8012f84 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8012f82:	2300      	movs	r3, #0
}
 8012f84:	0018      	movs	r0, r3
 8012f86:	46bd      	mov	sp, r7
 8012f88:	b003      	add	sp, #12
 8012f8a:	bd90      	pop	{r4, r7, pc}

08012f8c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b084      	sub	sp, #16
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	0008      	movs	r0, r1
 8012f96:	0011      	movs	r1, r2
 8012f98:	1cfb      	adds	r3, r7, #3
 8012f9a:	1c02      	adds	r2, r0, #0
 8012f9c:	701a      	strb	r2, [r3, #0]
 8012f9e:	1cbb      	adds	r3, r7, #2
 8012fa0:	1c0a      	adds	r2, r1, #0
 8012fa2:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8012fa4:	210f      	movs	r1, #15
 8012fa6:	187b      	adds	r3, r7, r1
 8012fa8:	1cfa      	adds	r2, r7, #3
 8012faa:	7812      	ldrb	r2, [r2, #0]
 8012fac:	0912      	lsrs	r2, r2, #4
 8012fae:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8012fb0:	1cbb      	adds	r3, r7, #2
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	091b      	lsrs	r3, r3, #4
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	187a      	adds	r2, r7, r1
 8012fba:	7812      	ldrb	r2, [r2, #0]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d805      	bhi.n	8012fcc <RegionCommonChanDisable+0x40>
 8012fc0:	1cfa      	adds	r2, r7, #3
 8012fc2:	1cbb      	adds	r3, r7, #2
 8012fc4:	7812      	ldrb	r2, [r2, #0]
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d301      	bcc.n	8012fd0 <RegionCommonChanDisable+0x44>
    {
        return false;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	e01b      	b.n	8013008 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8012fd0:	200f      	movs	r0, #15
 8012fd2:	183b      	adds	r3, r7, r0
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	18d3      	adds	r3, r2, r3
 8012fdc:	881b      	ldrh	r3, [r3, #0]
 8012fde:	b21b      	sxth	r3, r3
 8012fe0:	1cfa      	adds	r2, r7, #3
 8012fe2:	7812      	ldrb	r2, [r2, #0]
 8012fe4:	210f      	movs	r1, #15
 8012fe6:	400a      	ands	r2, r1
 8012fe8:	2101      	movs	r1, #1
 8012fea:	4091      	lsls	r1, r2
 8012fec:	000a      	movs	r2, r1
 8012fee:	b212      	sxth	r2, r2
 8012ff0:	43d2      	mvns	r2, r2
 8012ff2:	b212      	sxth	r2, r2
 8012ff4:	4013      	ands	r3, r2
 8012ff6:	b219      	sxth	r1, r3
 8012ff8:	183b      	adds	r3, r7, r0
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	005b      	lsls	r3, r3, #1
 8012ffe:	687a      	ldr	r2, [r7, #4]
 8013000:	18d3      	adds	r3, r2, r3
 8013002:	b28a      	uxth	r2, r1
 8013004:	801a      	strh	r2, [r3, #0]

    return true;
 8013006:	2301      	movs	r3, #1
}
 8013008:	0018      	movs	r0, r3
 801300a:	46bd      	mov	sp, r7
 801300c:	b004      	add	sp, #16
 801300e:	bd80      	pop	{r7, pc}

08013010 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8013010:	b590      	push	{r4, r7, lr}
 8013012:	b085      	sub	sp, #20
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	0008      	movs	r0, r1
 801301a:	0011      	movs	r1, r2
 801301c:	1cfb      	adds	r3, r7, #3
 801301e:	1c02      	adds	r2, r0, #0
 8013020:	701a      	strb	r2, [r3, #0]
 8013022:	1cbb      	adds	r3, r7, #2
 8013024:	1c0a      	adds	r2, r1, #0
 8013026:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8013028:	230f      	movs	r3, #15
 801302a:	18fb      	adds	r3, r7, r3
 801302c:	2200      	movs	r2, #0
 801302e:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d101      	bne.n	801303a <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8013036:	2300      	movs	r3, #0
 8013038:	e027      	b.n	801308a <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801303a:	230e      	movs	r3, #14
 801303c:	18fb      	adds	r3, r7, r3
 801303e:	1cfa      	adds	r2, r7, #3
 8013040:	7812      	ldrb	r2, [r2, #0]
 8013042:	701a      	strb	r2, [r3, #0]
 8013044:	e017      	b.n	8013076 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013046:	240e      	movs	r4, #14
 8013048:	193b      	adds	r3, r7, r4
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	18d3      	adds	r3, r2, r3
 8013052:	881b      	ldrh	r3, [r3, #0]
 8013054:	2110      	movs	r1, #16
 8013056:	0018      	movs	r0, r3
 8013058:	f7ff fe6f 	bl	8012d3a <CountChannels>
 801305c:	0003      	movs	r3, r0
 801305e:	0019      	movs	r1, r3
 8013060:	220f      	movs	r2, #15
 8013062:	18bb      	adds	r3, r7, r2
 8013064:	18ba      	adds	r2, r7, r2
 8013066:	7812      	ldrb	r2, [r2, #0]
 8013068:	188a      	adds	r2, r1, r2
 801306a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801306c:	193b      	adds	r3, r7, r4
 801306e:	781a      	ldrb	r2, [r3, #0]
 8013070:	193b      	adds	r3, r7, r4
 8013072:	3201      	adds	r2, #1
 8013074:	701a      	strb	r2, [r3, #0]
 8013076:	230e      	movs	r3, #14
 8013078:	18fa      	adds	r2, r7, r3
 801307a:	1cbb      	adds	r3, r7, #2
 801307c:	7812      	ldrb	r2, [r2, #0]
 801307e:	781b      	ldrb	r3, [r3, #0]
 8013080:	429a      	cmp	r2, r3
 8013082:	d3e0      	bcc.n	8013046 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8013084:	230f      	movs	r3, #15
 8013086:	18fb      	adds	r3, r7, r3
 8013088:	781b      	ldrb	r3, [r3, #0]
}
 801308a:	0018      	movs	r0, r3
 801308c:	46bd      	mov	sp, r7
 801308e:	b005      	add	sp, #20
 8013090:	bd90      	pop	{r4, r7, pc}

08013092 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8013092:	b580      	push	{r7, lr}
 8013094:	b086      	sub	sp, #24
 8013096:	af00      	add	r7, sp, #0
 8013098:	60f8      	str	r0, [r7, #12]
 801309a:	60b9      	str	r1, [r7, #8]
 801309c:	1dfb      	adds	r3, r7, #7
 801309e:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d020      	beq.n	80130e8 <RegionCommonChanMaskCopy+0x56>
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d01d      	beq.n	80130e8 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 80130ac:	2317      	movs	r3, #23
 80130ae:	18fb      	adds	r3, r7, r3
 80130b0:	2200      	movs	r2, #0
 80130b2:	701a      	strb	r2, [r3, #0]
 80130b4:	e011      	b.n	80130da <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80130b6:	2017      	movs	r0, #23
 80130b8:	183b      	adds	r3, r7, r0
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	005b      	lsls	r3, r3, #1
 80130be:	68ba      	ldr	r2, [r7, #8]
 80130c0:	18d2      	adds	r2, r2, r3
 80130c2:	183b      	adds	r3, r7, r0
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	005b      	lsls	r3, r3, #1
 80130c8:	68f9      	ldr	r1, [r7, #12]
 80130ca:	18cb      	adds	r3, r1, r3
 80130cc:	8812      	ldrh	r2, [r2, #0]
 80130ce:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80130d0:	183b      	adds	r3, r7, r0
 80130d2:	781a      	ldrb	r2, [r3, #0]
 80130d4:	183b      	adds	r3, r7, r0
 80130d6:	3201      	adds	r2, #1
 80130d8:	701a      	strb	r2, [r3, #0]
 80130da:	2317      	movs	r3, #23
 80130dc:	18fa      	adds	r2, r7, r3
 80130de:	1dfb      	adds	r3, r7, #7
 80130e0:	7812      	ldrb	r2, [r2, #0]
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d3e6      	bcc.n	80130b6 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 80130e8:	46c0      	nop			; (mov r8, r8)
 80130ea:	46bd      	mov	sp, r7
 80130ec:	b006      	add	sp, #24
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b084      	sub	sp, #16
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	60b9      	str	r1, [r7, #8]
 80130f8:	607a      	str	r2, [r7, #4]
 80130fa:	210f      	movs	r1, #15
 80130fc:	187b      	adds	r3, r7, r1
 80130fe:	1c02      	adds	r2, r0, #0
 8013100:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 8013102:	187b      	adds	r3, r7, r1
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d003      	beq.n	8013112 <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8013110:	e005      	b.n	801311e <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	605a      	str	r2, [r3, #4]
}
 801311e:	46c0      	nop			; (mov r8, r8)
 8013120:	46bd      	mov	sp, r7
 8013122:	b004      	add	sp, #16
 8013124:	bd80      	pop	{r7, pc}

08013126 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 8013126:	b590      	push	{r4, r7, lr}
 8013128:	b087      	sub	sp, #28
 801312a:	af00      	add	r7, sp, #0
 801312c:	0004      	movs	r4, r0
 801312e:	0008      	movs	r0, r1
 8013130:	603a      	str	r2, [r7, #0]
 8013132:	0019      	movs	r1, r3
 8013134:	1dfb      	adds	r3, r7, #7
 8013136:	1c22      	adds	r2, r4, #0
 8013138:	701a      	strb	r2, [r3, #0]
 801313a:	1dbb      	adds	r3, r7, #6
 801313c:	1c02      	adds	r2, r0, #0
 801313e:	701a      	strb	r2, [r3, #0]
 8013140:	1d7b      	adds	r3, r7, #5
 8013142:	1c0a      	adds	r2, r1, #0
 8013144:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 8013146:	2301      	movs	r3, #1
 8013148:	425b      	negs	r3, r3
 801314a:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 801314c:	2313      	movs	r3, #19
 801314e:	18fb      	adds	r3, r7, r3
 8013150:	2200      	movs	r2, #0
 8013152:	701a      	strb	r2, [r3, #0]
 8013154:	e0cf      	b.n	80132f6 <RegionCommonUpdateBandTimeOff+0x1d0>
    {
        if( joined == false )
 8013156:	1dfb      	adds	r3, r7, #7
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	2201      	movs	r2, #1
 801315c:	4053      	eors	r3, r2
 801315e:	b2db      	uxtb	r3, r3
 8013160:	2b00      	cmp	r3, #0
 8013162:	d065      	beq.n	8013230 <RegionCommonUpdateBandTimeOff+0x10a>
        {
            TimerTime_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 8013164:	2313      	movs	r3, #19
 8013166:	18fb      	adds	r3, r7, r3
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	011b      	lsls	r3, r3, #4
 801316c:	683a      	ldr	r2, [r7, #0]
 801316e:	18d3      	adds	r3, r2, r3
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	0018      	movs	r0, r3
 8013174:	f002 f92b 	bl	80153ce <TimerGetElapsedTime>
 8013178:	0004      	movs	r4, r0
 801317a:	1dbb      	adds	r3, r7, #6
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00b      	beq.n	801319a <RegionCommonUpdateBandTimeOff+0x74>
 8013182:	2313      	movs	r3, #19
 8013184:	18fb      	adds	r3, r7, r3
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	011b      	lsls	r3, r3, #4
 801318a:	683a      	ldr	r2, [r7, #0]
 801318c:	18d3      	adds	r3, r2, r3
 801318e:	689b      	ldr	r3, [r3, #8]
 8013190:	0018      	movs	r0, r3
 8013192:	f002 f91c 	bl	80153ce <TimerGetElapsedTime>
 8013196:	0003      	movs	r3, r0
 8013198:	e000      	b.n	801319c <RegionCommonUpdateBandTimeOff+0x76>
 801319a:	2300      	movs	r3, #0
 801319c:	42a3      	cmp	r3, r4
 801319e:	d20b      	bcs.n	80131b8 <RegionCommonUpdateBandTimeOff+0x92>
 80131a0:	2313      	movs	r3, #19
 80131a2:	18fb      	adds	r3, r7, r3
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	011b      	lsls	r3, r3, #4
 80131a8:	683a      	ldr	r2, [r7, #0]
 80131aa:	18d3      	adds	r3, r2, r3
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	0018      	movs	r0, r3
 80131b0:	f002 f90d 	bl	80153ce <TimerGetElapsedTime>
 80131b4:	0003      	movs	r3, r0
 80131b6:	e010      	b.n	80131da <RegionCommonUpdateBandTimeOff+0xb4>
 80131b8:	1dbb      	adds	r3, r7, #6
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d00b      	beq.n	80131d8 <RegionCommonUpdateBandTimeOff+0xb2>
 80131c0:	2313      	movs	r3, #19
 80131c2:	18fb      	adds	r3, r7, r3
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	011b      	lsls	r3, r3, #4
 80131c8:	683a      	ldr	r2, [r7, #0]
 80131ca:	18d3      	adds	r3, r2, r3
 80131cc:	689b      	ldr	r3, [r3, #8]
 80131ce:	0018      	movs	r0, r3
 80131d0:	f002 f8fd 	bl	80153ce <TimerGetElapsedTime>
 80131d4:	0003      	movs	r3, r0
 80131d6:	e000      	b.n	80131da <RegionCommonUpdateBandTimeOff+0xb4>
 80131d8:	2300      	movs	r3, #0
 80131da:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 80131dc:	2313      	movs	r3, #19
 80131de:	18fb      	adds	r3, r7, r3
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	011b      	lsls	r3, r3, #4
 80131e4:	683a      	ldr	r2, [r7, #0]
 80131e6:	18d3      	adds	r3, r2, r3
 80131e8:	68db      	ldr	r3, [r3, #12]
 80131ea:	68fa      	ldr	r2, [r7, #12]
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d307      	bcc.n	8013200 <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
 80131f0:	2313      	movs	r3, #19
 80131f2:	18fb      	adds	r3, r7, r3
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	011b      	lsls	r3, r3, #4
 80131f8:	683a      	ldr	r2, [r7, #0]
 80131fa:	18d3      	adds	r3, r2, r3
 80131fc:	2200      	movs	r2, #0
 80131fe:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8013200:	2313      	movs	r3, #19
 8013202:	18fb      	adds	r3, r7, r3
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	011b      	lsls	r3, r3, #4
 8013208:	683a      	ldr	r2, [r7, #0]
 801320a:	18d3      	adds	r3, r2, r3
 801320c:	68db      	ldr	r3, [r3, #12]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d06b      	beq.n	80132ea <RegionCommonUpdateBandTimeOff+0x1c4>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 8013212:	2313      	movs	r3, #19
 8013214:	18fb      	adds	r3, r7, r3
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	011b      	lsls	r3, r3, #4
 801321a:	683a      	ldr	r2, [r7, #0]
 801321c:	18d3      	adds	r3, r2, r3
 801321e:	68da      	ldr	r2, [r3, #12]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	1ad2      	subs	r2, r2, r3
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	4293      	cmp	r3, r2
 8013228:	d900      	bls.n	801322c <RegionCommonUpdateBandTimeOff+0x106>
 801322a:	0013      	movs	r3, r2
 801322c:	617b      	str	r3, [r7, #20]
 801322e:	e05c      	b.n	80132ea <RegionCommonUpdateBandTimeOff+0x1c4>
            }
        }
        else
        {
            if( dutyCycle == true )
 8013230:	1dbb      	adds	r3, r7, #6
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d04e      	beq.n	80132d6 <RegionCommonUpdateBandTimeOff+0x1b0>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 8013238:	2113      	movs	r1, #19
 801323a:	187b      	adds	r3, r7, r1
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	011b      	lsls	r3, r3, #4
 8013240:	683a      	ldr	r2, [r7, #0]
 8013242:	18d3      	adds	r3, r2, r3
 8013244:	68dc      	ldr	r4, [r3, #12]
 8013246:	187b      	adds	r3, r7, r1
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	011b      	lsls	r3, r3, #4
 801324c:	683a      	ldr	r2, [r7, #0]
 801324e:	18d3      	adds	r3, r2, r3
 8013250:	689b      	ldr	r3, [r3, #8]
 8013252:	0018      	movs	r0, r3
 8013254:	f002 f8bb 	bl	80153ce <TimerGetElapsedTime>
 8013258:	0003      	movs	r3, r0
 801325a:	429c      	cmp	r4, r3
 801325c:	d807      	bhi.n	801326e <RegionCommonUpdateBandTimeOff+0x148>
                {
                    bands[i].TimeOff = 0;
 801325e:	2313      	movs	r3, #19
 8013260:	18fb      	adds	r3, r7, r3
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	011b      	lsls	r3, r3, #4
 8013266:	683a      	ldr	r2, [r7, #0]
 8013268:	18d3      	adds	r3, r2, r3
 801326a:	2200      	movs	r2, #0
 801326c:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 801326e:	2313      	movs	r3, #19
 8013270:	18fb      	adds	r3, r7, r3
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	011b      	lsls	r3, r3, #4
 8013276:	683a      	ldr	r2, [r7, #0]
 8013278:	18d3      	adds	r3, r2, r3
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d034      	beq.n	80132ea <RegionCommonUpdateBandTimeOff+0x1c4>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 8013280:	2113      	movs	r1, #19
 8013282:	187b      	adds	r3, r7, r1
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	011b      	lsls	r3, r3, #4
 8013288:	683a      	ldr	r2, [r7, #0]
 801328a:	18d3      	adds	r3, r2, r3
 801328c:	68dc      	ldr	r4, [r3, #12]
 801328e:	187b      	adds	r3, r7, r1
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	011b      	lsls	r3, r3, #4
 8013294:	683a      	ldr	r2, [r7, #0]
 8013296:	18d3      	adds	r3, r2, r3
 8013298:	689b      	ldr	r3, [r3, #8]
 801329a:	0018      	movs	r0, r3
 801329c:	f002 f897 	bl	80153ce <TimerGetElapsedTime>
 80132a0:	0003      	movs	r3, r0
 80132a2:	1ae3      	subs	r3, r4, r3
 80132a4:	697a      	ldr	r2, [r7, #20]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d912      	bls.n	80132d0 <RegionCommonUpdateBandTimeOff+0x1aa>
 80132aa:	2113      	movs	r1, #19
 80132ac:	187b      	adds	r3, r7, r1
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	011b      	lsls	r3, r3, #4
 80132b2:	683a      	ldr	r2, [r7, #0]
 80132b4:	18d3      	adds	r3, r2, r3
 80132b6:	68dc      	ldr	r4, [r3, #12]
 80132b8:	187b      	adds	r3, r7, r1
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	011b      	lsls	r3, r3, #4
 80132be:	683a      	ldr	r2, [r7, #0]
 80132c0:	18d3      	adds	r3, r2, r3
 80132c2:	689b      	ldr	r3, [r3, #8]
 80132c4:	0018      	movs	r0, r3
 80132c6:	f002 f882 	bl	80153ce <TimerGetElapsedTime>
 80132ca:	0003      	movs	r3, r0
 80132cc:	1ae3      	subs	r3, r4, r3
 80132ce:	e000      	b.n	80132d2 <RegionCommonUpdateBandTimeOff+0x1ac>
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	617b      	str	r3, [r7, #20]
 80132d4:	e009      	b.n	80132ea <RegionCommonUpdateBandTimeOff+0x1c4>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 80132d6:	2300      	movs	r3, #0
 80132d8:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 80132da:	2313      	movs	r3, #19
 80132dc:	18fb      	adds	r3, r7, r3
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	011b      	lsls	r3, r3, #4
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	18d3      	adds	r3, r2, r3
 80132e6:	2200      	movs	r2, #0
 80132e8:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 80132ea:	2113      	movs	r1, #19
 80132ec:	187b      	adds	r3, r7, r1
 80132ee:	781a      	ldrb	r2, [r3, #0]
 80132f0:	187b      	adds	r3, r7, r1
 80132f2:	3201      	adds	r2, #1
 80132f4:	701a      	strb	r2, [r3, #0]
 80132f6:	2313      	movs	r3, #19
 80132f8:	18fa      	adds	r2, r7, r3
 80132fa:	1d7b      	adds	r3, r7, #5
 80132fc:	7812      	ldrb	r2, [r2, #0]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	429a      	cmp	r2, r3
 8013302:	d200      	bcs.n	8013306 <RegionCommonUpdateBandTimeOff+0x1e0>
 8013304:	e727      	b.n	8013156 <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
 8013306:	697b      	ldr	r3, [r7, #20]
}
 8013308:	0018      	movs	r0, r3
 801330a:	46bd      	mov	sp, r7
 801330c:	b007      	add	sp, #28
 801330e:	bd90      	pop	{r4, r7, pc}

08013310 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b084      	sub	sp, #16
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801331a:	230f      	movs	r3, #15
 801331c:	18fb      	adds	r3, r7, r3
 801331e:	2200      	movs	r2, #0
 8013320:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	2b03      	cmp	r3, #3
 8013328:	d141      	bne.n	80133ae <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	3301      	adds	r3, #1
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	b25a      	sxtb	r2, r3
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	785b      	ldrb	r3, [r3, #1]
 801333a:	b25b      	sxtb	r3, r3
 801333c:	220f      	movs	r2, #15
 801333e:	4013      	ands	r3, r2
 8013340:	b25a      	sxtb	r2, r3
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	785b      	ldrb	r3, [r3, #1]
 801334a:	b25b      	sxtb	r3, r3
 801334c:	b2db      	uxtb	r3, r3
 801334e:	091b      	lsrs	r3, r3, #4
 8013350:	b2db      	uxtb	r3, r3
 8013352:	b25a      	sxtb	r2, r3
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	3302      	adds	r3, #2
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	b29a      	uxth	r2, r3
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	889b      	ldrh	r3, [r3, #4]
 8013368:	b21a      	sxth	r2, r3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	3303      	adds	r3, #3
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	021b      	lsls	r3, r3, #8
 8013372:	b21b      	sxth	r3, r3
 8013374:	4313      	orrs	r3, r2
 8013376:	b21b      	sxth	r3, r3
 8013378:	b29a      	uxth	r2, r3
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	791a      	ldrb	r2, [r3, #4]
 8013382:	683b      	ldr	r3, [r7, #0]
 8013384:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	091b      	lsrs	r3, r3, #4
 801338c:	b2db      	uxtb	r3, r3
 801338e:	2207      	movs	r2, #7
 8013390:	4013      	ands	r3, r2
 8013392:	b2da      	uxtb	r2, r3
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	220f      	movs	r2, #15
 801339e:	4013      	ands	r3, r2
 80133a0:	b2da      	uxtb	r2, r3
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80133a6:	230f      	movs	r3, #15
 80133a8:	18fb      	adds	r3, r7, r3
 80133aa:	2205      	movs	r2, #5
 80133ac:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 80133ae:	230f      	movs	r3, #15
 80133b0:	18fb      	adds	r3, r7, r3
 80133b2:	781b      	ldrb	r3, [r3, #0]
}
 80133b4:	0018      	movs	r0, r3
 80133b6:	46bd      	mov	sp, r7
 80133b8:	b004      	add	sp, #16
 80133ba:	bd80      	pop	{r7, pc}

080133bc <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80133bc:	b5b0      	push	{r4, r5, r7, lr}
 80133be:	b088      	sub	sp, #32
 80133c0:	af02      	add	r7, sp, #8
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
 80133c8:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80133ca:	2317      	movs	r3, #23
 80133cc:	18fb      	adds	r3, r7, r3
 80133ce:	68fa      	ldr	r2, [r7, #12]
 80133d0:	7912      	ldrb	r2, [r2, #4]
 80133d2:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 80133d4:	2316      	movs	r3, #22
 80133d6:	18fb      	adds	r3, r7, r3
 80133d8:	68fa      	ldr	r2, [r7, #12]
 80133da:	7992      	ldrb	r2, [r2, #6]
 80133dc:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 80133de:	2315      	movs	r3, #21
 80133e0:	18fb      	adds	r3, r7, r3
 80133e2:	68fa      	ldr	r2, [r7, #12]
 80133e4:	79d2      	ldrb	r2, [r2, #7]
 80133e6:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	7a1a      	ldrb	r2, [r3, #8]
 80133ec:	2314      	movs	r3, #20
 80133ee:	18fb      	adds	r3, r7, r3
 80133f0:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	795b      	ldrb	r3, [r3, #5]
 80133f6:	2201      	movs	r2, #1
 80133f8:	4053      	eors	r3, r2
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00e      	beq.n	801341e <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8013400:	2314      	movs	r3, #20
 8013402:	18fb      	adds	r3, r7, r3
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	7ad2      	ldrb	r2, [r2, #11]
 8013408:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 801340a:	2316      	movs	r3, #22
 801340c:	18fb      	adds	r3, r7, r3
 801340e:	68fa      	ldr	r2, [r7, #12]
 8013410:	7a52      	ldrb	r2, [r2, #9]
 8013412:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8013414:	2315      	movs	r3, #21
 8013416:	18fb      	adds	r3, r7, r3
 8013418:	68fa      	ldr	r2, [r7, #12]
 801341a:	7a92      	ldrb	r2, [r2, #10]
 801341c:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 801341e:	2317      	movs	r3, #23
 8013420:	18fb      	adds	r3, r7, r3
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d049      	beq.n	80134bc <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	7b18      	ldrb	r0, [r3, #12]
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	691c      	ldr	r4, [r3, #16]
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2514      	movs	r5, #20
 8013434:	575d      	ldrsb	r5, [r3, r5]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2215      	movs	r2, #21
 801343a:	569a      	ldrsb	r2, [r3, r2]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	699b      	ldr	r3, [r3, #24]
 8013440:	2116      	movs	r1, #22
 8013442:	1879      	adds	r1, r7, r1
 8013444:	7809      	ldrb	r1, [r1, #0]
 8013446:	b249      	sxtb	r1, r1
 8013448:	9301      	str	r3, [sp, #4]
 801344a:	9200      	str	r2, [sp, #0]
 801344c:	002b      	movs	r3, r5
 801344e:	000a      	movs	r2, r1
 8013450:	0021      	movs	r1, r4
 8013452:	f7ff fcdb 	bl	8012e0c <RegionCommonChanVerifyDr>
 8013456:	0003      	movs	r3, r0
 8013458:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801345a:	2301      	movs	r3, #1
 801345c:	4053      	eors	r3, r2
 801345e:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013460:	2b00      	cmp	r3, #0
 8013462:	d006      	beq.n	8013472 <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 8013464:	2217      	movs	r2, #23
 8013466:	18bb      	adds	r3, r7, r2
 8013468:	18ba      	adds	r2, r7, r2
 801346a:	7812      	ldrb	r2, [r2, #0]
 801346c:	2102      	movs	r1, #2
 801346e:	438a      	bics	r2, r1
 8013470:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	211d      	movs	r1, #29
 8013476:	5659      	ldrsb	r1, [r3, r1]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	221c      	movs	r2, #28
 801347c:	569a      	ldrsb	r2, [r3, r2]
 801347e:	2315      	movs	r3, #21
 8013480:	18fb      	adds	r3, r7, r3
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	b25b      	sxtb	r3, r3
 8013486:	0018      	movs	r0, r3
 8013488:	f7ff fd5a 	bl	8012f40 <RegionCommonValueInRange>
 801348c:	1e03      	subs	r3, r0, #0
 801348e:	d115      	bne.n	80134bc <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	7f5b      	ldrb	r3, [r3, #29]
 8013494:	b25b      	sxtb	r3, r3
 8013496:	2215      	movs	r2, #21
 8013498:	18ba      	adds	r2, r7, r2
 801349a:	7812      	ldrb	r2, [r2, #0]
 801349c:	b252      	sxtb	r2, r2
 801349e:	429a      	cmp	r2, r3
 80134a0:	da05      	bge.n	80134ae <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80134a2:	2315      	movs	r3, #21
 80134a4:	18fb      	adds	r3, r7, r3
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	7f52      	ldrb	r2, [r2, #29]
 80134aa:	701a      	strb	r2, [r3, #0]
 80134ac:	e006      	b.n	80134bc <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80134ae:	2217      	movs	r2, #23
 80134b0:	18bb      	adds	r3, r7, r2
 80134b2:	18ba      	adds	r2, r7, r2
 80134b4:	7812      	ldrb	r2, [r2, #0]
 80134b6:	2104      	movs	r1, #4
 80134b8:	438a      	bics	r2, r1
 80134ba:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80134bc:	2317      	movs	r3, #23
 80134be:	18fb      	adds	r3, r7, r3
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	2b07      	cmp	r3, #7
 80134c4:	d109      	bne.n	80134da <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 80134c6:	2314      	movs	r3, #20
 80134c8:	18fb      	adds	r3, r7, r3
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	b25b      	sxtb	r3, r3
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d103      	bne.n	80134da <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80134d2:	2314      	movs	r3, #20
 80134d4:	18fb      	adds	r3, r7, r3
 80134d6:	2201      	movs	r2, #1
 80134d8:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	2216      	movs	r2, #22
 80134de:	18ba      	adds	r2, r7, r2
 80134e0:	7812      	ldrb	r2, [r2, #0]
 80134e2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2215      	movs	r2, #21
 80134e8:	18ba      	adds	r2, r7, r2
 80134ea:	7812      	ldrb	r2, [r2, #0]
 80134ec:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80134ee:	2314      	movs	r3, #20
 80134f0:	18fb      	adds	r3, r7, r3
 80134f2:	781a      	ldrb	r2, [r3, #0]
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	701a      	strb	r2, [r3, #0]

    return status;
 80134f8:	2317      	movs	r3, #23
 80134fa:	18fb      	adds	r3, r7, r3
 80134fc:	781b      	ldrb	r3, [r3, #0]
}
 80134fe:	0018      	movs	r0, r3
 8013500:	46bd      	mov	sp, r7
 8013502:	b006      	add	sp, #24
 8013504:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013508 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8013508:	b5b0      	push	{r4, r5, r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	0002      	movs	r2, r0
 8013510:	6039      	str	r1, [r7, #0]
 8013512:	1dfb      	adds	r3, r7, #7
 8013514:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 8013516:	1dfb      	adds	r3, r7, #7
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	2201      	movs	r2, #1
 801351c:	409a      	lsls	r2, r3
 801351e:	0013      	movs	r3, r2
 8013520:	0018      	movs	r0, r3
 8013522:	f7ef f831 	bl	8002588 <__aeabi_i2d>
 8013526:	0004      	movs	r4, r0
 8013528:	000d      	movs	r5, r1
 801352a:	6838      	ldr	r0, [r7, #0]
 801352c:	f7ef f866 	bl	80025fc <__aeabi_ui2d>
 8013530:	0002      	movs	r2, r0
 8013532:	000b      	movs	r3, r1
 8013534:	0020      	movs	r0, r4
 8013536:	0029      	movs	r1, r5
 8013538:	f7ed fe2c 	bl	8001194 <__aeabi_ddiv>
 801353c:	0003      	movs	r3, r0
 801353e:	000c      	movs	r4, r1
 8013540:	0018      	movs	r0, r3
 8013542:	0021      	movs	r1, r4
 8013544:	2200      	movs	r2, #0
 8013546:	4b05      	ldr	r3, [pc, #20]	; (801355c <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8013548:	f7ee fa2e 	bl	80019a8 <__aeabi_dmul>
 801354c:	0003      	movs	r3, r0
 801354e:	000c      	movs	r4, r1
}
 8013550:	0018      	movs	r0, r3
 8013552:	0021      	movs	r1, r4
 8013554:	46bd      	mov	sp, r7
 8013556:	b002      	add	sp, #8
 8013558:	bdb0      	pop	{r4, r5, r7, pc}
 801355a:	46c0      	nop			; (mov r8, r8)
 801355c:	408f4000 	.word	0x408f4000

08013560 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8013560:	b590      	push	{r4, r7, lr}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
 8013566:	0002      	movs	r2, r0
 8013568:	1dfb      	adds	r3, r7, #7
 801356a:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 801356c:	1dfb      	adds	r3, r7, #7
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	0018      	movs	r0, r3
 8013572:	f7ef f843 	bl	80025fc <__aeabi_ui2d>
 8013576:	0003      	movs	r3, r0
 8013578:	000c      	movs	r4, r1
 801357a:	001a      	movs	r2, r3
 801357c:	0023      	movs	r3, r4
 801357e:	2000      	movs	r0, #0
 8013580:	4904      	ldr	r1, [pc, #16]	; (8013594 <RegionCommonComputeSymbolTimeFsk+0x34>)
 8013582:	f7ed fe07 	bl	8001194 <__aeabi_ddiv>
 8013586:	0003      	movs	r3, r0
 8013588:	000c      	movs	r4, r1
}
 801358a:	0018      	movs	r0, r3
 801358c:	0021      	movs	r1, r4
 801358e:	46bd      	mov	sp, r7
 8013590:	b003      	add	sp, #12
 8013592:	bd90      	pop	{r4, r7, pc}
 8013594:	40200000 	.word	0x40200000

08013598 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8013598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	60b8      	str	r0, [r7, #8]
 80135a0:	60f9      	str	r1, [r7, #12]
 80135a2:	603b      	str	r3, [r7, #0]
 80135a4:	1dfb      	adds	r3, r7, #7
 80135a6:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 80135a8:	1dfb      	adds	r3, r7, #7
 80135aa:	781c      	ldrb	r4, [r3, #0]
 80135ac:	1dfb      	adds	r3, r7, #7
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	3b04      	subs	r3, #4
 80135b2:	005b      	lsls	r3, r3, #1
 80135b4:	0018      	movs	r0, r3
 80135b6:	f7ee ffe7 	bl	8002588 <__aeabi_i2d>
 80135ba:	68ba      	ldr	r2, [r7, #8]
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	f7ee f9f3 	bl	80019a8 <__aeabi_dmul>
 80135c2:	0002      	movs	r2, r0
 80135c4:	000b      	movs	r3, r1
 80135c6:	0015      	movs	r5, r2
 80135c8:	001e      	movs	r6, r3
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	0018      	movs	r0, r3
 80135d0:	f7ef f814 	bl	80025fc <__aeabi_ui2d>
 80135d4:	0002      	movs	r2, r0
 80135d6:	000b      	movs	r3, r1
 80135d8:	0028      	movs	r0, r5
 80135da:	0031      	movs	r1, r6
 80135dc:	f7ed fabe 	bl	8000b5c <__aeabi_dadd>
 80135e0:	0002      	movs	r2, r0
 80135e2:	000b      	movs	r3, r1
 80135e4:	0010      	movs	r0, r2
 80135e6:	0019      	movs	r1, r3
 80135e8:	68ba      	ldr	r2, [r7, #8]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f7ed fdd2 	bl	8001194 <__aeabi_ddiv>
 80135f0:	0002      	movs	r2, r0
 80135f2:	000b      	movs	r3, r1
 80135f4:	0010      	movs	r0, r2
 80135f6:	0019      	movs	r1, r3
 80135f8:	f00b fe40 	bl	801f27c <ceil>
 80135fc:	0002      	movs	r2, r0
 80135fe:	000b      	movs	r3, r1
 8013600:	0010      	movs	r0, r2
 8013602:	0019      	movs	r1, r3
 8013604:	f7ec ffaa 	bl	800055c <__aeabi_d2uiz>
 8013608:	0002      	movs	r2, r0
 801360a:	0023      	movs	r3, r4
 801360c:	4293      	cmp	r3, r2
 801360e:	d200      	bcs.n	8013612 <RegionCommonComputeRxWindowParameters+0x7a>
 8013610:	0013      	movs	r3, r2
 8013612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013614:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 8013616:	2200      	movs	r2, #0
 8013618:	4b20      	ldr	r3, [pc, #128]	; (801369c <RegionCommonComputeRxWindowParameters+0x104>)
 801361a:	68b8      	ldr	r0, [r7, #8]
 801361c:	68f9      	ldr	r1, [r7, #12]
 801361e:	f7ee f9c3 	bl	80019a8 <__aeabi_dmul>
 8013622:	0003      	movs	r3, r0
 8013624:	000c      	movs	r4, r1
 8013626:	0025      	movs	r5, r4
 8013628:	001c      	movs	r4, r3
 801362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	0018      	movs	r0, r3
 8013630:	f7ee ffe4 	bl	80025fc <__aeabi_ui2d>
 8013634:	68ba      	ldr	r2, [r7, #8]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f7ee f9b6 	bl	80019a8 <__aeabi_dmul>
 801363c:	0002      	movs	r2, r0
 801363e:	000b      	movs	r3, r1
 8013640:	0010      	movs	r0, r2
 8013642:	0019      	movs	r1, r3
 8013644:	2200      	movs	r2, #0
 8013646:	2380      	movs	r3, #128	; 0x80
 8013648:	05db      	lsls	r3, r3, #23
 801364a:	f7ed fda3 	bl	8001194 <__aeabi_ddiv>
 801364e:	0002      	movs	r2, r0
 8013650:	000b      	movs	r3, r1
 8013652:	0020      	movs	r0, r4
 8013654:	0029      	movs	r1, r5
 8013656:	f7ee fc19 	bl	8001e8c <__aeabi_dsub>
 801365a:	0003      	movs	r3, r0
 801365c:	000c      	movs	r4, r1
 801365e:	0025      	movs	r5, r4
 8013660:	001c      	movs	r4, r3
 8013662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013664:	f7ee ffca 	bl	80025fc <__aeabi_ui2d>
 8013668:	0002      	movs	r2, r0
 801366a:	000b      	movs	r3, r1
 801366c:	0020      	movs	r0, r4
 801366e:	0029      	movs	r1, r5
 8013670:	f7ee fc0c 	bl	8001e8c <__aeabi_dsub>
 8013674:	0003      	movs	r3, r0
 8013676:	000c      	movs	r4, r1
 8013678:	0018      	movs	r0, r3
 801367a:	0021      	movs	r1, r4
 801367c:	f00b fdfe 	bl	801f27c <ceil>
 8013680:	0003      	movs	r3, r0
 8013682:	000c      	movs	r4, r1
 8013684:	0018      	movs	r0, r3
 8013686:	0021      	movs	r1, r4
 8013688:	f7ee ff48 	bl	800251c <__aeabi_d2iz>
 801368c:	0002      	movs	r2, r0
 801368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013690:	601a      	str	r2, [r3, #0]
}
 8013692:	46c0      	nop			; (mov r8, r8)
 8013694:	46bd      	mov	sp, r7
 8013696:	b005      	add	sp, #20
 8013698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801369a:	46c0      	nop			; (mov r8, r8)
 801369c:	40100000 	.word	0x40100000

080136a0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80136a0:	b5b0      	push	{r4, r5, r7, lr}
 80136a2:	b086      	sub	sp, #24
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	60b9      	str	r1, [r7, #8]
 80136a8:	607a      	str	r2, [r7, #4]
 80136aa:	210f      	movs	r1, #15
 80136ac:	187b      	adds	r3, r7, r1
 80136ae:	1c02      	adds	r2, r0, #0
 80136b0:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 80136b2:	2517      	movs	r5, #23
 80136b4:	197b      	adds	r3, r7, r5
 80136b6:	2200      	movs	r2, #0
 80136b8:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80136ba:	187b      	adds	r3, r7, r1
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	b25b      	sxtb	r3, r3
 80136c0:	005b      	lsls	r3, r3, #1
 80136c2:	0018      	movs	r0, r3
 80136c4:	f7ed fa0a 	bl	8000adc <__aeabi_ui2f>
 80136c8:	1c03      	adds	r3, r0, #0
 80136ca:	1c19      	adds	r1, r3, #0
 80136cc:	68b8      	ldr	r0, [r7, #8]
 80136ce:	f7ed f841 	bl	8000754 <__aeabi_fsub>
 80136d2:	1c03      	adds	r3, r0, #0
 80136d4:	6879      	ldr	r1, [r7, #4]
 80136d6:	1c18      	adds	r0, r3, #0
 80136d8:	f7ed f83c 	bl	8000754 <__aeabi_fsub>
 80136dc:	1c03      	adds	r3, r0, #0
 80136de:	1c18      	adds	r0, r3, #0
 80136e0:	f7ee ffbe 	bl	8002660 <__aeabi_f2d>
 80136e4:	0003      	movs	r3, r0
 80136e6:	000c      	movs	r4, r1
 80136e8:	0018      	movs	r0, r3
 80136ea:	0021      	movs	r1, r4
 80136ec:	f00b fe48 	bl	801f380 <floor>
 80136f0:	0002      	movs	r2, r0
 80136f2:	000b      	movs	r3, r1
 80136f4:	197c      	adds	r4, r7, r5
 80136f6:	0010      	movs	r0, r2
 80136f8:	0019      	movs	r1, r3
 80136fa:	f7ee ff0f 	bl	800251c <__aeabi_d2iz>
 80136fe:	0003      	movs	r3, r0
 8013700:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8013702:	197b      	adds	r3, r7, r5
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	b25b      	sxtb	r3, r3
}
 8013708:	0018      	movs	r0, r3
 801370a:	46bd      	mov	sp, r7
 801370c:	b006      	add	sp, #24
 801370e:	bdb0      	pop	{r4, r5, r7, pc}

08013710 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8013710:	b5b0      	push	{r4, r5, r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681a      	ldr	r2, [r3, #0]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	7adb      	ldrb	r3, [r3, #11]
 8013720:	0019      	movs	r1, r3
 8013722:	000b      	movs	r3, r1
 8013724:	005b      	lsls	r3, r3, #1
 8013726:	185b      	adds	r3, r3, r1
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	18d2      	adds	r2, r2, r3
 801372c:	210f      	movs	r1, #15
 801372e:	187b      	adds	r3, r7, r1
 8013730:	7a52      	ldrb	r2, [r2, #9]
 8013732:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	685a      	ldr	r2, [r3, #4]
 8013738:	187b      	adds	r3, r7, r1
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	011b      	lsls	r3, r3, #4
 801373e:	18d2      	adds	r2, r2, r3
 8013740:	230c      	movs	r3, #12
 8013742:	18fb      	adds	r3, r7, r3
 8013744:	8812      	ldrh	r2, [r2, #0]
 8013746:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8013748:	230a      	movs	r3, #10
 801374a:	18fb      	adds	r3, r7, r3
 801374c:	2200      	movs	r2, #0
 801374e:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	685a      	ldr	r2, [r3, #4]
 8013754:	187b      	adds	r3, r7, r1
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	011b      	lsls	r3, r3, #4
 801375a:	18d3      	adds	r3, r2, r3
 801375c:	2200      	movs	r2, #0
 801375e:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	7a5b      	ldrb	r3, [r3, #9]
 8013764:	2201      	movs	r2, #1
 8013766:	4053      	eors	r3, r2
 8013768:	b2db      	uxtb	r3, r3
 801376a:	2b00      	cmp	r3, #0
 801376c:	d03c      	beq.n	80137e8 <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	68db      	ldr	r3, [r3, #12]
 8013772:	250a      	movs	r5, #10
 8013774:	197c      	adds	r4, r7, r5
 8013776:	0018      	movs	r0, r3
 8013778:	f7ff fb1c 	bl	8012db4 <RegionCommonGetJoinDc>
 801377c:	0003      	movs	r3, r0
 801377e:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8013780:	210c      	movs	r1, #12
 8013782:	187a      	adds	r2, r7, r1
 8013784:	197b      	adds	r3, r7, r5
 8013786:	1879      	adds	r1, r7, r1
 8013788:	880c      	ldrh	r4, [r1, #0]
 801378a:	881b      	ldrh	r3, [r3, #0]
 801378c:	b298      	uxth	r0, r3
 801378e:	b2a1      	uxth	r1, r4
 8013790:	4288      	cmp	r0, r1
 8013792:	d200      	bcs.n	8013796 <RegionCommonCalcBackOff+0x86>
 8013794:	1c23      	adds	r3, r4, #0
 8013796:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	7a9b      	ldrb	r3, [r3, #10]
 801379c:	2201      	movs	r2, #1
 801379e:	4053      	eors	r3, r2
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d010      	beq.n	80137c8 <RegionCommonCalcBackOff+0xb8>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	7a1b      	ldrb	r3, [r3, #8]
 80137aa:	2201      	movs	r2, #1
 80137ac:	4053      	eors	r3, r2
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d009      	beq.n	80137c8 <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	685a      	ldr	r2, [r3, #4]
 80137b8:	230f      	movs	r3, #15
 80137ba:	18fb      	adds	r3, r7, r3
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	011b      	lsls	r3, r3, #4
 80137c0:	18d3      	adds	r3, r2, r3
 80137c2:	2200      	movs	r2, #0
 80137c4:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 80137c6:	e02c      	b.n	8013822 <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 80137c8:	230c      	movs	r3, #12
 80137ca:	18fb      	adds	r3, r7, r3
 80137cc:	881b      	ldrh	r3, [r3, #0]
 80137ce:	1e5a      	subs	r2, r3, #1
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6919      	ldr	r1, [r3, #16]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6858      	ldr	r0, [r3, #4]
 80137d8:	230f      	movs	r3, #15
 80137da:	18fb      	adds	r3, r7, r3
 80137dc:	781b      	ldrb	r3, [r3, #0]
 80137de:	011b      	lsls	r3, r3, #4
 80137e0:	18c3      	adds	r3, r0, r3
 80137e2:	434a      	muls	r2, r1
 80137e4:	60da      	str	r2, [r3, #12]
}
 80137e6:	e01c      	b.n	8013822 <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	7a9b      	ldrb	r3, [r3, #10]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d00f      	beq.n	8013810 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 80137f0:	230c      	movs	r3, #12
 80137f2:	18fb      	adds	r3, r7, r3
 80137f4:	881b      	ldrh	r3, [r3, #0]
 80137f6:	1e5a      	subs	r2, r3, #1
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6919      	ldr	r1, [r3, #16]
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6858      	ldr	r0, [r3, #4]
 8013800:	230f      	movs	r3, #15
 8013802:	18fb      	adds	r3, r7, r3
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	011b      	lsls	r3, r3, #4
 8013808:	18c3      	adds	r3, r0, r3
 801380a:	434a      	muls	r2, r1
 801380c:	60da      	str	r2, [r3, #12]
}
 801380e:	e008      	b.n	8013822 <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	685a      	ldr	r2, [r3, #4]
 8013814:	230f      	movs	r3, #15
 8013816:	18fb      	adds	r3, r7, r3
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	011b      	lsls	r3, r3, #4
 801381c:	18d3      	adds	r3, r2, r3
 801381e:	2200      	movs	r2, #0
 8013820:	60da      	str	r2, [r3, #12]
}
 8013822:	46c0      	nop			; (mov r8, r8)
 8013824:	46bd      	mov	sp, r7
 8013826:	b004      	add	sp, #16
 8013828:	bdb0      	pop	{r4, r5, r7, pc}

0801382a <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801382a:	b580      	push	{r7, lr}
 801382c:	b084      	sub	sp, #16
 801382e:	af00      	add	r7, sp, #0
 8013830:	0002      	movs	r2, r0
 8013832:	1dfb      	adds	r3, r7, #7
 8013834:	701a      	strb	r2, [r3, #0]
 8013836:	1dbb      	adds	r3, r7, #6
 8013838:	1c0a      	adds	r2, r1, #0
 801383a:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 801383c:	230f      	movs	r3, #15
 801383e:	18fb      	adds	r3, r7, r3
 8013840:	2200      	movs	r2, #0
 8013842:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8013844:	1dfa      	adds	r2, r7, #7
 8013846:	1dbb      	adds	r3, r7, #6
 8013848:	7812      	ldrb	r2, [r2, #0]
 801384a:	b252      	sxtb	r2, r2
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	b25b      	sxtb	r3, r3
 8013850:	429a      	cmp	r2, r3
 8013852:	d105      	bne.n	8013860 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8013854:	230f      	movs	r3, #15
 8013856:	18fb      	adds	r3, r7, r3
 8013858:	1dba      	adds	r2, r7, #6
 801385a:	7812      	ldrb	r2, [r2, #0]
 801385c:	701a      	strb	r2, [r3, #0]
 801385e:	e005      	b.n	801386c <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8013860:	1dfb      	adds	r3, r7, #7
 8013862:	781a      	ldrb	r2, [r3, #0]
 8013864:	230f      	movs	r3, #15
 8013866:	18fb      	adds	r3, r7, r3
 8013868:	3a01      	subs	r2, #1
 801386a:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 801386c:	230f      	movs	r3, #15
 801386e:	18fb      	adds	r3, r7, r3
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	b25b      	sxtb	r3, r3
}
 8013874:	0018      	movs	r0, r3
 8013876:	46bd      	mov	sp, r7
 8013878:	b004      	add	sp, #16
 801387a:	bd80      	pop	{r7, pc}

0801387c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8013884:	4b09      	ldr	r3, [pc, #36]	; (80138ac <GetBandwidth+0x30>)
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	0092      	lsls	r2, r2, #2
 801388a:	58d3      	ldr	r3, [r2, r3]
 801388c:	4a08      	ldr	r2, [pc, #32]	; (80138b0 <GetBandwidth+0x34>)
 801388e:	4293      	cmp	r3, r2
 8013890:	d004      	beq.n	801389c <GetBandwidth+0x20>
 8013892:	4a08      	ldr	r2, [pc, #32]	; (80138b4 <GetBandwidth+0x38>)
 8013894:	4293      	cmp	r3, r2
 8013896:	d003      	beq.n	80138a0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8013898:	2300      	movs	r3, #0
 801389a:	e002      	b.n	80138a2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 801389c:	2301      	movs	r3, #1
 801389e:	e000      	b.n	80138a2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 80138a0:	2302      	movs	r3, #2
    }
}
 80138a2:	0018      	movs	r0, r3
 80138a4:	46bd      	mov	sp, r7
 80138a6:	b002      	add	sp, #8
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	46c0      	nop			; (mov r8, r8)
 80138ac:	0802092c 	.word	0x0802092c
 80138b0:	0003d090 	.word	0x0003d090
 80138b4:	0007a120 	.word	0x0007a120

080138b8 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80138b8:	b590      	push	{r4, r7, lr}
 80138ba:	b085      	sub	sp, #20
 80138bc:	af00      	add	r7, sp, #0
 80138be:	0004      	movs	r4, r0
 80138c0:	0008      	movs	r0, r1
 80138c2:	0011      	movs	r1, r2
 80138c4:	603b      	str	r3, [r7, #0]
 80138c6:	1dfb      	adds	r3, r7, #7
 80138c8:	1c22      	adds	r2, r4, #0
 80138ca:	701a      	strb	r2, [r3, #0]
 80138cc:	1dbb      	adds	r3, r7, #6
 80138ce:	1c02      	adds	r2, r0, #0
 80138d0:	701a      	strb	r2, [r3, #0]
 80138d2:	1d7b      	adds	r3, r7, #5
 80138d4:	1c0a      	adds	r2, r1, #0
 80138d6:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 80138d8:	210f      	movs	r1, #15
 80138da:	187b      	adds	r3, r7, r1
 80138dc:	1dfa      	adds	r2, r7, #7
 80138de:	7812      	ldrb	r2, [r2, #0]
 80138e0:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80138e2:	187a      	adds	r2, r7, r1
 80138e4:	1dbb      	adds	r3, r7, #6
 80138e6:	1df9      	adds	r1, r7, #7
 80138e8:	780c      	ldrb	r4, [r1, #0]
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	b258      	sxtb	r0, r3
 80138ee:	b261      	sxtb	r1, r4
 80138f0:	4288      	cmp	r0, r1
 80138f2:	da00      	bge.n	80138f6 <LimitTxPower+0x3e>
 80138f4:	1c23      	adds	r3, r4, #0
 80138f6:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 80138f8:	230f      	movs	r3, #15
 80138fa:	18fb      	adds	r3, r7, r3
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	b25b      	sxtb	r3, r3
}
 8013900:	0018      	movs	r0, r3
 8013902:	46bd      	mov	sp, r7
 8013904:	b005      	add	sp, #20
 8013906:	bd90      	pop	{r4, r7, pc}

08013908 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013912:	4b2e      	ldr	r3, [pc, #184]	; (80139cc <VerifyRfFreq+0xc4>)
 8013914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	0010      	movs	r0, r2
 801391a:	4798      	blx	r3
 801391c:	0003      	movs	r3, r0
 801391e:	001a      	movs	r2, r3
 8013920:	2301      	movs	r3, #1
 8013922:	4053      	eors	r3, r2
 8013924:	b2db      	uxtb	r3, r3
 8013926:	2b00      	cmp	r3, #0
 8013928:	d001      	beq.n	801392e <VerifyRfFreq+0x26>
    {
        return false;
 801392a:	2300      	movs	r3, #0
 801392c:	e04a      	b.n	80139c4 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	4a27      	ldr	r2, [pc, #156]	; (80139d0 <VerifyRfFreq+0xc8>)
 8013932:	4293      	cmp	r3, r2
 8013934:	d907      	bls.n	8013946 <VerifyRfFreq+0x3e>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4a26      	ldr	r2, [pc, #152]	; (80139d4 <VerifyRfFreq+0xcc>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d803      	bhi.n	8013946 <VerifyRfFreq+0x3e>
    {
        *band = 2;
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	2202      	movs	r2, #2
 8013942:	701a      	strb	r2, [r3, #0]
 8013944:	e03d      	b.n	80139c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	4a22      	ldr	r2, [pc, #136]	; (80139d4 <VerifyRfFreq+0xcc>)
 801394a:	4293      	cmp	r3, r2
 801394c:	d907      	bls.n	801395e <VerifyRfFreq+0x56>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	4a21      	ldr	r2, [pc, #132]	; (80139d8 <VerifyRfFreq+0xd0>)
 8013952:	4293      	cmp	r3, r2
 8013954:	d803      	bhi.n	801395e <VerifyRfFreq+0x56>
    {
        *band = 0;
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	2200      	movs	r2, #0
 801395a:	701a      	strb	r2, [r3, #0]
 801395c:	e031      	b.n	80139c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4a1d      	ldr	r2, [pc, #116]	; (80139d8 <VerifyRfFreq+0xd0>)
 8013962:	4293      	cmp	r3, r2
 8013964:	d907      	bls.n	8013976 <VerifyRfFreq+0x6e>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	4a1c      	ldr	r2, [pc, #112]	; (80139dc <VerifyRfFreq+0xd4>)
 801396a:	4293      	cmp	r3, r2
 801396c:	d803      	bhi.n	8013976 <VerifyRfFreq+0x6e>
    {
        *band = 1;
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	2201      	movs	r2, #1
 8013972:	701a      	strb	r2, [r3, #0]
 8013974:	e025      	b.n	80139c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4a19      	ldr	r2, [pc, #100]	; (80139e0 <VerifyRfFreq+0xd8>)
 801397a:	4293      	cmp	r3, r2
 801397c:	d907      	bls.n	801398e <VerifyRfFreq+0x86>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4a18      	ldr	r2, [pc, #96]	; (80139e4 <VerifyRfFreq+0xdc>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d803      	bhi.n	801398e <VerifyRfFreq+0x86>
    {
        *band = 2;
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	2202      	movs	r2, #2
 801398a:	701a      	strb	r2, [r3, #0]
 801398c:	e019      	b.n	80139c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4a15      	ldr	r2, [pc, #84]	; (80139e8 <VerifyRfFreq+0xe0>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d907      	bls.n	80139a6 <VerifyRfFreq+0x9e>
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4a14      	ldr	r2, [pc, #80]	; (80139ec <VerifyRfFreq+0xe4>)
 801399a:	4293      	cmp	r3, r2
 801399c:	d803      	bhi.n	80139a6 <VerifyRfFreq+0x9e>
    {
        *band = 3;
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	2203      	movs	r2, #3
 80139a2:	701a      	strb	r2, [r3, #0]
 80139a4:	e00d      	b.n	80139c2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	4a11      	ldr	r2, [pc, #68]	; (80139f0 <VerifyRfFreq+0xe8>)
 80139aa:	4293      	cmp	r3, r2
 80139ac:	d907      	bls.n	80139be <VerifyRfFreq+0xb6>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4a10      	ldr	r2, [pc, #64]	; (80139f4 <VerifyRfFreq+0xec>)
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d803      	bhi.n	80139be <VerifyRfFreq+0xb6>
    {
        *band = 4;
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	2204      	movs	r2, #4
 80139ba:	701a      	strb	r2, [r3, #0]
 80139bc:	e001      	b.n	80139c2 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 80139be:	2300      	movs	r3, #0
 80139c0:	e000      	b.n	80139c4 <VerifyRfFreq+0xbc>
    }
    return true;
 80139c2:	2301      	movs	r3, #1
}
 80139c4:	0018      	movs	r0, r3
 80139c6:	46bd      	mov	sp, r7
 80139c8:	b002      	add	sp, #8
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	08020a5c 	.word	0x08020a5c
 80139d0:	337055bf 	.word	0x337055bf
 80139d4:	338eda3f 	.word	0x338eda3f
 80139d8:	33bca100 	.word	0x33bca100
 80139dc:	33c5c8c0 	.word	0x33c5c8c0
 80139e0:	33c74f5f 	.word	0x33c74f5f
 80139e4:	33cef080 	.word	0x33cef080
 80139e8:	33d1fdbf 	.word	0x33d1fdbf
 80139ec:	33d5ce50 	.word	0x33d5ce50
 80139f0:	33d6919f 	.word	0x33d6919f
 80139f4:	33db2580 	.word	0x33db2580

080139f8 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 80139f8:	b5b0      	push	{r4, r5, r7, lr}
 80139fa:	b086      	sub	sp, #24
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60ba      	str	r2, [r7, #8]
 8013a00:	607b      	str	r3, [r7, #4]
 8013a02:	230f      	movs	r3, #15
 8013a04:	18fb      	adds	r3, r7, r3
 8013a06:	1c02      	adds	r2, r0, #0
 8013a08:	701a      	strb	r2, [r3, #0]
 8013a0a:	230e      	movs	r3, #14
 8013a0c:	18fb      	adds	r3, r7, r3
 8013a0e:	1c0a      	adds	r2, r1, #0
 8013a10:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8013a12:	2317      	movs	r3, #23
 8013a14:	18fb      	adds	r3, r7, r3
 8013a16:	2200      	movs	r2, #0
 8013a18:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8013a1a:	2316      	movs	r3, #22
 8013a1c:	18fb      	adds	r3, r7, r3
 8013a1e:	2200      	movs	r2, #0
 8013a20:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8013a22:	2315      	movs	r3, #21
 8013a24:	18fb      	adds	r3, r7, r3
 8013a26:	2200      	movs	r2, #0
 8013a28:	701a      	strb	r2, [r3, #0]
 8013a2a:	2314      	movs	r3, #20
 8013a2c:	18fb      	adds	r3, r7, r3
 8013a2e:	2200      	movs	r2, #0
 8013a30:	701a      	strb	r2, [r3, #0]
 8013a32:	e0b4      	b.n	8013b9e <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013a34:	2313      	movs	r3, #19
 8013a36:	18fb      	adds	r3, r7, r3
 8013a38:	2200      	movs	r2, #0
 8013a3a:	701a      	strb	r2, [r3, #0]
 8013a3c:	e09d      	b.n	8013b7a <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8013a3e:	2314      	movs	r3, #20
 8013a40:	18fb      	adds	r3, r7, r3
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	005b      	lsls	r3, r3, #1
 8013a46:	68ba      	ldr	r2, [r7, #8]
 8013a48:	18d3      	adds	r3, r2, r3
 8013a4a:	881b      	ldrh	r3, [r3, #0]
 8013a4c:	001a      	movs	r2, r3
 8013a4e:	2313      	movs	r3, #19
 8013a50:	18fb      	adds	r3, r7, r3
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	411a      	asrs	r2, r3
 8013a56:	0013      	movs	r3, r2
 8013a58:	2201      	movs	r2, #1
 8013a5a:	4013      	ands	r3, r2
 8013a5c:	d100      	bne.n	8013a60 <CountNbOfEnabledChannels+0x68>
 8013a5e:	e086      	b.n	8013b6e <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8013a60:	2315      	movs	r3, #21
 8013a62:	18fb      	adds	r3, r7, r3
 8013a64:	781a      	ldrb	r2, [r3, #0]
 8013a66:	2313      	movs	r3, #19
 8013a68:	18fb      	adds	r3, r7, r3
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	18d3      	adds	r3, r2, r3
 8013a6e:	001a      	movs	r2, r3
 8013a70:	0013      	movs	r3, r2
 8013a72:	005b      	lsls	r3, r3, #1
 8013a74:	189b      	adds	r3, r3, r2
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	001a      	movs	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	189b      	adds	r3, r3, r2
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d06f      	beq.n	8013b64 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8013a84:	230f      	movs	r3, #15
 8013a86:	18fb      	adds	r3, r7, r3
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	2201      	movs	r2, #1
 8013a8c:	4053      	eors	r3, r2
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d008      	beq.n	8013aa6 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8013a94:	2313      	movs	r3, #19
 8013a96:	18fb      	adds	r3, r7, r3
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	2207      	movs	r2, #7
 8013a9c:	411a      	asrs	r2, r3
 8013a9e:	0013      	movs	r3, r2
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	4013      	ands	r3, r2
 8013aa4:	d060      	beq.n	8013b68 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8013aa6:	230e      	movs	r3, #14
 8013aa8:	18fb      	adds	r3, r7, r3
 8013aaa:	2000      	movs	r0, #0
 8013aac:	5618      	ldrsb	r0, [r3, r0]
 8013aae:	2415      	movs	r4, #21
 8013ab0:	193b      	adds	r3, r7, r4
 8013ab2:	781a      	ldrb	r2, [r3, #0]
 8013ab4:	2513      	movs	r5, #19
 8013ab6:	197b      	adds	r3, r7, r5
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	18d3      	adds	r3, r2, r3
 8013abc:	001a      	movs	r2, r3
 8013abe:	0013      	movs	r3, r2
 8013ac0:	005b      	lsls	r3, r3, #1
 8013ac2:	189b      	adds	r3, r3, r2
 8013ac4:	009b      	lsls	r3, r3, #2
 8013ac6:	001a      	movs	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	189b      	adds	r3, r3, r2
 8013acc:	7a1b      	ldrb	r3, [r3, #8]
 8013ace:	011b      	lsls	r3, r3, #4
 8013ad0:	b25b      	sxtb	r3, r3
 8013ad2:	111b      	asrs	r3, r3, #4
 8013ad4:	b25b      	sxtb	r3, r3
 8013ad6:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8013ad8:	193b      	adds	r3, r7, r4
 8013ada:	781a      	ldrb	r2, [r3, #0]
 8013adc:	197b      	adds	r3, r7, r5
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	18d3      	adds	r3, r2, r3
 8013ae2:	001a      	movs	r2, r3
 8013ae4:	0013      	movs	r3, r2
 8013ae6:	005b      	lsls	r3, r3, #1
 8013ae8:	189b      	adds	r3, r3, r2
 8013aea:	009b      	lsls	r3, r3, #2
 8013aec:	001a      	movs	r2, r3
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	189b      	adds	r3, r3, r2
 8013af2:	7a1b      	ldrb	r3, [r3, #8]
 8013af4:	b25b      	sxtb	r3, r3
 8013af6:	111b      	asrs	r3, r3, #4
 8013af8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8013afa:	001a      	movs	r2, r3
 8013afc:	f7ff fa20 	bl	8012f40 <RegionCommonValueInRange>
 8013b00:	1e03      	subs	r3, r0, #0
 8013b02:	d033      	beq.n	8013b6c <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8013b04:	2315      	movs	r3, #21
 8013b06:	18fb      	adds	r3, r7, r3
 8013b08:	781a      	ldrb	r2, [r3, #0]
 8013b0a:	2313      	movs	r3, #19
 8013b0c:	18fb      	adds	r3, r7, r3
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	18d3      	adds	r3, r2, r3
 8013b12:	001a      	movs	r2, r3
 8013b14:	0013      	movs	r3, r2
 8013b16:	005b      	lsls	r3, r3, #1
 8013b18:	189b      	adds	r3, r3, r2
 8013b1a:	009b      	lsls	r3, r3, #2
 8013b1c:	001a      	movs	r2, r3
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	189b      	adds	r3, r3, r2
 8013b22:	7a5b      	ldrb	r3, [r3, #9]
 8013b24:	011b      	lsls	r3, r3, #4
 8013b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b28:	18d3      	adds	r3, r2, r3
 8013b2a:	68db      	ldr	r3, [r3, #12]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d006      	beq.n	8013b3e <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8013b30:	2116      	movs	r1, #22
 8013b32:	187b      	adds	r3, r7, r1
 8013b34:	781a      	ldrb	r2, [r3, #0]
 8013b36:	187b      	adds	r3, r7, r1
 8013b38:	3201      	adds	r2, #1
 8013b3a:	701a      	strb	r2, [r3, #0]
                    continue;
 8013b3c:	e017      	b.n	8013b6e <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8013b3e:	2217      	movs	r2, #23
 8013b40:	18bb      	adds	r3, r7, r2
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	18ba      	adds	r2, r7, r2
 8013b46:	1c59      	adds	r1, r3, #1
 8013b48:	7011      	strb	r1, [r2, #0]
 8013b4a:	001a      	movs	r2, r3
 8013b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b4e:	189b      	adds	r3, r3, r2
 8013b50:	2215      	movs	r2, #21
 8013b52:	18b9      	adds	r1, r7, r2
 8013b54:	2213      	movs	r2, #19
 8013b56:	18ba      	adds	r2, r7, r2
 8013b58:	7809      	ldrb	r1, [r1, #0]
 8013b5a:	7812      	ldrb	r2, [r2, #0]
 8013b5c:	188a      	adds	r2, r1, r2
 8013b5e:	b2d2      	uxtb	r2, r2
 8013b60:	701a      	strb	r2, [r3, #0]
 8013b62:	e004      	b.n	8013b6e <CountNbOfEnabledChannels+0x176>
                    continue;
 8013b64:	46c0      	nop			; (mov r8, r8)
 8013b66:	e002      	b.n	8013b6e <CountNbOfEnabledChannels+0x176>
                        continue;
 8013b68:	46c0      	nop			; (mov r8, r8)
 8013b6a:	e000      	b.n	8013b6e <CountNbOfEnabledChannels+0x176>
                    continue;
 8013b6c:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8013b6e:	2113      	movs	r1, #19
 8013b70:	187b      	adds	r3, r7, r1
 8013b72:	781a      	ldrb	r2, [r3, #0]
 8013b74:	187b      	adds	r3, r7, r1
 8013b76:	3201      	adds	r2, #1
 8013b78:	701a      	strb	r2, [r3, #0]
 8013b7a:	2313      	movs	r3, #19
 8013b7c:	18fb      	adds	r3, r7, r3
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	2b0f      	cmp	r3, #15
 8013b82:	d800      	bhi.n	8013b86 <CountNbOfEnabledChannels+0x18e>
 8013b84:	e75b      	b.n	8013a3e <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8013b86:	2215      	movs	r2, #21
 8013b88:	18bb      	adds	r3, r7, r2
 8013b8a:	18ba      	adds	r2, r7, r2
 8013b8c:	7812      	ldrb	r2, [r2, #0]
 8013b8e:	3210      	adds	r2, #16
 8013b90:	701a      	strb	r2, [r3, #0]
 8013b92:	2114      	movs	r1, #20
 8013b94:	187b      	adds	r3, r7, r1
 8013b96:	781a      	ldrb	r2, [r3, #0]
 8013b98:	187b      	adds	r3, r7, r1
 8013b9a:	3201      	adds	r2, #1
 8013b9c:	701a      	strb	r2, [r3, #0]
 8013b9e:	2315      	movs	r3, #21
 8013ba0:	18fb      	adds	r3, r7, r3
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	2b0f      	cmp	r3, #15
 8013ba6:	d800      	bhi.n	8013baa <CountNbOfEnabledChannels+0x1b2>
 8013ba8:	e744      	b.n	8013a34 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8013baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bac:	2216      	movs	r2, #22
 8013bae:	18ba      	adds	r2, r7, r2
 8013bb0:	7812      	ldrb	r2, [r2, #0]
 8013bb2:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8013bb4:	2317      	movs	r3, #23
 8013bb6:	18fb      	adds	r3, r7, r3
 8013bb8:	781b      	ldrb	r3, [r3, #0]
}
 8013bba:	0018      	movs	r0, r3
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	b006      	add	sp, #24
 8013bc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013bc4 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8013bcc:	2308      	movs	r3, #8
 8013bce:	18fb      	adds	r3, r7, r3
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	2b34      	cmp	r3, #52	; 0x34
 8013bda:	d900      	bls.n	8013bde <RegionEU868GetPhyParam+0x1a>
 8013bdc:	e0ce      	b.n	8013d7c <RegionEU868GetPhyParam+0x1b8>
 8013bde:	009a      	lsls	r2, r3, #2
 8013be0:	4b6e      	ldr	r3, [pc, #440]	; (8013d9c <RegionEU868GetPhyParam+0x1d8>)
 8013be2:	18d3      	adds	r3, r2, r3
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8013be8:	2308      	movs	r3, #8
 8013bea:	18fb      	adds	r3, r7, r3
 8013bec:	2200      	movs	r2, #0
 8013bee:	601a      	str	r2, [r3, #0]
            break;
 8013bf0:	e0c5      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8013bf2:	2308      	movs	r3, #8
 8013bf4:	18fb      	adds	r3, r7, r3
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	601a      	str	r2, [r3, #0]
            break;
 8013bfa:	e0c0      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8013bfc:	2308      	movs	r3, #8
 8013bfe:	18fb      	adds	r3, r7, r3
 8013c00:	2200      	movs	r2, #0
 8013c02:	601a      	str	r2, [r3, #0]
            break;
 8013c04:	e0bb      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	785b      	ldrb	r3, [r3, #1]
 8013c0a:	b25b      	sxtb	r3, r3
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	0018      	movs	r0, r3
 8013c10:	f7ff fe0b 	bl	801382a <GetNextLowerTxDr>
 8013c14:	0003      	movs	r3, r0
 8013c16:	001a      	movs	r2, r3
 8013c18:	2308      	movs	r3, #8
 8013c1a:	18fb      	adds	r3, r7, r3
 8013c1c:	601a      	str	r2, [r3, #0]
            break;
 8013c1e:	e0ae      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8013c20:	2308      	movs	r3, #8
 8013c22:	18fb      	adds	r3, r7, r3
 8013c24:	2200      	movs	r2, #0
 8013c26:	601a      	str	r2, [r3, #0]
            break;
 8013c28:	e0a9      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8013c2a:	2308      	movs	r3, #8
 8013c2c:	18fb      	adds	r3, r7, r3
 8013c2e:	2200      	movs	r2, #0
 8013c30:	601a      	str	r2, [r3, #0]
            break;
 8013c32:	e0a4      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8013c34:	2308      	movs	r3, #8
 8013c36:	18fb      	adds	r3, r7, r3
 8013c38:	2240      	movs	r2, #64	; 0x40
 8013c3a:	601a      	str	r2, [r3, #0]
            break;
 8013c3c:	e09f      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8013c3e:	2308      	movs	r3, #8
 8013c40:	18fb      	adds	r3, r7, r3
 8013c42:	2220      	movs	r2, #32
 8013c44:	601a      	str	r2, [r3, #0]
            break;
 8013c46:	e09a      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	785b      	ldrb	r3, [r3, #1]
 8013c4c:	b25b      	sxtb	r3, r3
 8013c4e:	001a      	movs	r2, r3
 8013c50:	4b53      	ldr	r3, [pc, #332]	; (8013da0 <RegionEU868GetPhyParam+0x1dc>)
 8013c52:	5c9b      	ldrb	r3, [r3, r2]
 8013c54:	001a      	movs	r2, r3
 8013c56:	2308      	movs	r3, #8
 8013c58:	18fb      	adds	r3, r7, r3
 8013c5a:	601a      	str	r2, [r3, #0]
            break;
 8013c5c:	e08f      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	785b      	ldrb	r3, [r3, #1]
 8013c62:	b25b      	sxtb	r3, r3
 8013c64:	001a      	movs	r2, r3
 8013c66:	4b4f      	ldr	r3, [pc, #316]	; (8013da4 <RegionEU868GetPhyParam+0x1e0>)
 8013c68:	5c9b      	ldrb	r3, [r3, r2]
 8013c6a:	001a      	movs	r2, r3
 8013c6c:	2308      	movs	r3, #8
 8013c6e:	18fb      	adds	r3, r7, r3
 8013c70:	601a      	str	r2, [r3, #0]
            break;
 8013c72:	e084      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8013c74:	2308      	movs	r3, #8
 8013c76:	18fb      	adds	r3, r7, r3
 8013c78:	2201      	movs	r2, #1
 8013c7a:	601a      	str	r2, [r3, #0]
            break;
 8013c7c:	e07f      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8013c7e:	2308      	movs	r3, #8
 8013c80:	18fb      	adds	r3, r7, r3
 8013c82:	4a49      	ldr	r2, [pc, #292]	; (8013da8 <RegionEU868GetPhyParam+0x1e4>)
 8013c84:	601a      	str	r2, [r3, #0]
            break;
 8013c86:	e07a      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8013c88:	2308      	movs	r3, #8
 8013c8a:	18fb      	adds	r3, r7, r3
 8013c8c:	22fa      	movs	r2, #250	; 0xfa
 8013c8e:	0092      	lsls	r2, r2, #2
 8013c90:	601a      	str	r2, [r3, #0]
            break;
 8013c92:	e074      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8013c94:	2308      	movs	r3, #8
 8013c96:	18fb      	adds	r3, r7, r3
 8013c98:	22fa      	movs	r2, #250	; 0xfa
 8013c9a:	00d2      	lsls	r2, r2, #3
 8013c9c:	601a      	str	r2, [r3, #0]
            break;
 8013c9e:	e06e      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8013ca0:	2308      	movs	r3, #8
 8013ca2:	18fb      	adds	r3, r7, r3
 8013ca4:	4a41      	ldr	r2, [pc, #260]	; (8013dac <RegionEU868GetPhyParam+0x1e8>)
 8013ca6:	601a      	str	r2, [r3, #0]
            break;
 8013ca8:	e069      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8013caa:	2308      	movs	r3, #8
 8013cac:	18fb      	adds	r3, r7, r3
 8013cae:	4a40      	ldr	r2, [pc, #256]	; (8013db0 <RegionEU868GetPhyParam+0x1ec>)
 8013cb0:	601a      	str	r2, [r3, #0]
            break;
 8013cb2:	e064      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8013cb4:	2308      	movs	r3, #8
 8013cb6:	18fb      	adds	r3, r7, r3
 8013cb8:	2280      	movs	r2, #128	; 0x80
 8013cba:	01d2      	lsls	r2, r2, #7
 8013cbc:	601a      	str	r2, [r3, #0]
            break;
 8013cbe:	e05e      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8013cc0:	23fa      	movs	r3, #250	; 0xfa
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	4a3b      	ldr	r2, [pc, #236]	; (8013db4 <RegionEU868GetPhyParam+0x1f0>)
 8013cc6:	0019      	movs	r1, r3
 8013cc8:	0010      	movs	r0, r2
 8013cca:	f001 fbb7 	bl	801543c <randr>
 8013cce:	0003      	movs	r3, r0
 8013cd0:	22fa      	movs	r2, #250	; 0xfa
 8013cd2:	00d2      	lsls	r2, r2, #3
 8013cd4:	4694      	mov	ip, r2
 8013cd6:	4463      	add	r3, ip
 8013cd8:	001a      	movs	r2, r3
 8013cda:	2308      	movs	r3, #8
 8013cdc:	18fb      	adds	r3, r7, r3
 8013cde:	601a      	str	r2, [r3, #0]
            break;
 8013ce0:	e04d      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8013ce2:	2308      	movs	r3, #8
 8013ce4:	18fb      	adds	r3, r7, r3
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	601a      	str	r2, [r3, #0]
            break;
 8013cea:	e048      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8013cec:	2308      	movs	r3, #8
 8013cee:	18fb      	adds	r3, r7, r3
 8013cf0:	4a31      	ldr	r2, [pc, #196]	; (8013db8 <RegionEU868GetPhyParam+0x1f4>)
 8013cf2:	601a      	str	r2, [r3, #0]
            break;
 8013cf4:	e043      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8013cf6:	2308      	movs	r3, #8
 8013cf8:	18fb      	adds	r3, r7, r3
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	601a      	str	r2, [r3, #0]
            break;
 8013cfe:	e03e      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8013d00:	2308      	movs	r3, #8
 8013d02:	18fb      	adds	r3, r7, r3
 8013d04:	4a2d      	ldr	r2, [pc, #180]	; (8013dbc <RegionEU868GetPhyParam+0x1f8>)
 8013d06:	601a      	str	r2, [r3, #0]
            break;
 8013d08:	e039      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8013d0a:	2308      	movs	r3, #8
 8013d0c:	18fb      	adds	r3, r7, r3
 8013d0e:	4a2c      	ldr	r2, [pc, #176]	; (8013dc0 <RegionEU868GetPhyParam+0x1fc>)
 8013d10:	601a      	str	r2, [r3, #0]
            break;
 8013d12:	e034      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8013d14:	2308      	movs	r3, #8
 8013d16:	18fb      	adds	r3, r7, r3
 8013d18:	2210      	movs	r2, #16
 8013d1a:	601a      	str	r2, [r3, #0]
            break;
 8013d1c:	e02f      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8013d1e:	2308      	movs	r3, #8
 8013d20:	18fb      	adds	r3, r7, r3
 8013d22:	4a28      	ldr	r2, [pc, #160]	; (8013dc4 <RegionEU868GetPhyParam+0x200>)
 8013d24:	601a      	str	r2, [r3, #0]
            break;
 8013d26:	e02a      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8013d28:	2308      	movs	r3, #8
 8013d2a:	18fb      	adds	r3, r7, r3
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	601a      	str	r2, [r3, #0]
            break;
 8013d30:	e025      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8013d32:	2308      	movs	r3, #8
 8013d34:	18fb      	adds	r3, r7, r3
 8013d36:	2283      	movs	r2, #131	; 0x83
 8013d38:	05d2      	lsls	r2, r2, #23
 8013d3a:	601a      	str	r2, [r3, #0]
            break;
 8013d3c:	e01f      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8013d3e:	2308      	movs	r3, #8
 8013d40:	18fb      	adds	r3, r7, r3
 8013d42:	4a21      	ldr	r2, [pc, #132]	; (8013dc8 <RegionEU868GetPhyParam+0x204>)
 8013d44:	601a      	str	r2, [r3, #0]
            break;
 8013d46:	e01a      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8013d48:	2308      	movs	r3, #8
 8013d4a:	18fb      	adds	r3, r7, r3
 8013d4c:	4a1a      	ldr	r2, [pc, #104]	; (8013db8 <RegionEU868GetPhyParam+0x1f4>)
 8013d4e:	601a      	str	r2, [r3, #0]
            break;
 8013d50:	e015      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8013d52:	2108      	movs	r1, #8
 8013d54:	187b      	adds	r3, r7, r1
 8013d56:	2211      	movs	r2, #17
 8013d58:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8013d5a:	187b      	adds	r3, r7, r1
 8013d5c:	2202      	movs	r2, #2
 8013d5e:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8013d60:	187b      	adds	r3, r7, r1
 8013d62:	2200      	movs	r2, #0
 8013d64:	709a      	strb	r2, [r3, #2]
            break;
 8013d66:	e00a      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8013d68:	2308      	movs	r3, #8
 8013d6a:	18fb      	adds	r3, r7, r3
 8013d6c:	2203      	movs	r2, #3
 8013d6e:	601a      	str	r2, [r3, #0]
            break;
 8013d70:	e005      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8013d72:	2308      	movs	r3, #8
 8013d74:	18fb      	adds	r3, r7, r3
 8013d76:	2203      	movs	r2, #3
 8013d78:	601a      	str	r2, [r3, #0]
            break;
 8013d7a:	e000      	b.n	8013d7e <RegionEU868GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 8013d7c:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8013d7e:	210c      	movs	r1, #12
 8013d80:	187b      	adds	r3, r7, r1
 8013d82:	2208      	movs	r2, #8
 8013d84:	18ba      	adds	r2, r7, r2
 8013d86:	6812      	ldr	r2, [r2, #0]
 8013d88:	601a      	str	r2, [r3, #0]
 8013d8a:	187b      	adds	r3, r7, r1
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	0013      	movs	r3, r2
}
 8013d92:	0018      	movs	r0, r3
 8013d94:	46bd      	mov	sp, r7
 8013d96:	b004      	add	sp, #16
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	46c0      	nop			; (mov r8, r8)
 8013d9c:	0802095c 	.word	0x0802095c
 8013da0:	0802094c 	.word	0x0802094c
 8013da4:	08020954 	.word	0x08020954
 8013da8:	00000bb8 	.word	0x00000bb8
 8013dac:	00001388 	.word	0x00001388
 8013db0:	00001770 	.word	0x00001770
 8013db4:	fffffc18 	.word	0xfffffc18
 8013db8:	33d3e608 	.word	0x33d3e608
 8013dbc:	20000edc 	.word	0x20000edc
 8013dc0:	20000ede 	.word	0x20000ede
 8013dc4:	20000dcc 	.word	0x20000dcc
 8013dc8:	4009999a 	.word	0x4009999a

08013dcc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	7858      	ldrb	r0, [r3, #1]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	0019      	movs	r1, r3
 8013dde:	4a0a      	ldr	r2, [pc, #40]	; (8013e08 <RegionEU868SetBandTxDone+0x3c>)
 8013de0:	000b      	movs	r3, r1
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	185b      	adds	r3, r3, r1
 8013de6:	009b      	lsls	r3, r3, #2
 8013de8:	18d3      	adds	r3, r2, r3
 8013dea:	3309      	adds	r3, #9
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	330c      	adds	r3, #12
 8013df0:	011a      	lsls	r2, r3, #4
 8013df2:	4b05      	ldr	r3, [pc, #20]	; (8013e08 <RegionEU868SetBandTxDone+0x3c>)
 8013df4:	18d1      	adds	r1, r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	001a      	movs	r2, r3
 8013dfc:	f7ff f978 	bl	80130f0 <RegionCommonSetBandTxDone>
}
 8013e00:	46c0      	nop			; (mov r8, r8)
 8013e02:	46bd      	mov	sp, r7
 8013e04:	b002      	add	sp, #8
 8013e06:	bd80      	pop	{r7, pc}
 8013e08:	20000dcc 	.word	0x20000dcc

08013e0c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8013e0c:	b590      	push	{r4, r7, lr}
 8013e0e:	b097      	sub	sp, #92	; 0x5c
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8013e14:	2108      	movs	r1, #8
 8013e16:	000c      	movs	r4, r1
 8013e18:	187b      	adds	r3, r7, r1
 8013e1a:	0018      	movs	r0, r3
 8013e1c:	2350      	movs	r3, #80	; 0x50
 8013e1e:	001a      	movs	r2, r3
 8013e20:	2100      	movs	r1, #0
 8013e22:	f00a fe1f 	bl	801ea64 <memset>
 8013e26:	0021      	movs	r1, r4
 8013e28:	187b      	adds	r3, r7, r1
 8013e2a:	2264      	movs	r2, #100	; 0x64
 8013e2c:	801a      	strh	r2, [r3, #0]
 8013e2e:	187b      	adds	r3, r7, r1
 8013e30:	2264      	movs	r2, #100	; 0x64
 8013e32:	821a      	strh	r2, [r3, #16]
 8013e34:	187b      	adds	r3, r7, r1
 8013e36:	22fa      	movs	r2, #250	; 0xfa
 8013e38:	0092      	lsls	r2, r2, #2
 8013e3a:	841a      	strh	r2, [r3, #32]
 8013e3c:	187b      	adds	r3, r7, r1
 8013e3e:	220a      	movs	r2, #10
 8013e40:	861a      	strh	r2, [r3, #48]	; 0x30
 8013e42:	187b      	adds	r3, r7, r1
 8013e44:	2240      	movs	r2, #64	; 0x40
 8013e46:	2164      	movs	r1, #100	; 0x64
 8013e48:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	791b      	ldrb	r3, [r3, #4]
 8013e4e:	2b01      	cmp	r3, #1
 8013e50:	d032      	beq.n	8013eb8 <RegionEU868InitDefaults+0xac>
 8013e52:	2b02      	cmp	r3, #2
 8013e54:	d023      	beq.n	8013e9e <RegionEU868InitDefaults+0x92>
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d000      	beq.n	8013e5c <RegionEU868InitDefaults+0x50>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8013e5a:	e03d      	b.n	8013ed8 <RegionEU868InitDefaults+0xcc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8013e5c:	2308      	movs	r3, #8
 8013e5e:	18f9      	adds	r1, r7, r3
 8013e60:	4b1f      	ldr	r3, [pc, #124]	; (8013ee0 <RegionEU868InitDefaults+0xd4>)
 8013e62:	2250      	movs	r2, #80	; 0x50
 8013e64:	0018      	movs	r0, r3
 8013e66:	f001 faff 	bl	8015468 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8013e6a:	4b1e      	ldr	r3, [pc, #120]	; (8013ee4 <RegionEU868InitDefaults+0xd8>)
 8013e6c:	4a1e      	ldr	r2, [pc, #120]	; (8013ee8 <RegionEU868InitDefaults+0xdc>)
 8013e6e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8013e70:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8013e72:	4b1c      	ldr	r3, [pc, #112]	; (8013ee4 <RegionEU868InitDefaults+0xd8>)
 8013e74:	4a1d      	ldr	r2, [pc, #116]	; (8013eec <RegionEU868InitDefaults+0xe0>)
 8013e76:	330c      	adds	r3, #12
 8013e78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8013e7a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8013e7c:	4b19      	ldr	r3, [pc, #100]	; (8013ee4 <RegionEU868InitDefaults+0xd8>)
 8013e7e:	4a1c      	ldr	r2, [pc, #112]	; (8013ef0 <RegionEU868InitDefaults+0xe4>)
 8013e80:	3318      	adds	r3, #24
 8013e82:	ca13      	ldmia	r2!, {r0, r1, r4}
 8013e84:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8013e86:	4a17      	ldr	r2, [pc, #92]	; (8013ee4 <RegionEU868InitDefaults+0xd8>)
 8013e88:	2389      	movs	r3, #137	; 0x89
 8013e8a:	005b      	lsls	r3, r3, #1
 8013e8c:	2107      	movs	r1, #7
 8013e8e:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8013e90:	4918      	ldr	r1, [pc, #96]	; (8013ef4 <RegionEU868InitDefaults+0xe8>)
 8013e92:	4b19      	ldr	r3, [pc, #100]	; (8013ef8 <RegionEU868InitDefaults+0xec>)
 8013e94:	2201      	movs	r2, #1
 8013e96:	0018      	movs	r0, r3
 8013e98:	f7ff f8fb 	bl	8013092 <RegionCommonChanMaskCopy>
            break;
 8013e9c:	e01c      	b.n	8013ed8 <RegionEU868InitDefaults+0xcc>
            if( params->NvmCtx != 0 )
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d017      	beq.n	8013ed6 <RegionEU868InitDefaults+0xca>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6819      	ldr	r1, [r3, #0]
 8013eaa:	238a      	movs	r3, #138	; 0x8a
 8013eac:	005a      	lsls	r2, r3, #1
 8013eae:	4b0d      	ldr	r3, [pc, #52]	; (8013ee4 <RegionEU868InitDefaults+0xd8>)
 8013eb0:	0018      	movs	r0, r3
 8013eb2:	f001 fad9 	bl	8015468 <memcpy1>
            break;
 8013eb6:	e00e      	b.n	8013ed6 <RegionEU868InitDefaults+0xca>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8013eb8:	4a0a      	ldr	r2, [pc, #40]	; (8013ee4 <RegionEU868InitDefaults+0xd8>)
 8013eba:	2388      	movs	r3, #136	; 0x88
 8013ebc:	005b      	lsls	r3, r3, #1
 8013ebe:	5ad2      	ldrh	r2, [r2, r3]
 8013ec0:	4908      	ldr	r1, [pc, #32]	; (8013ee4 <RegionEU868InitDefaults+0xd8>)
 8013ec2:	2389      	movs	r3, #137	; 0x89
 8013ec4:	005b      	lsls	r3, r3, #1
 8013ec6:	5acb      	ldrh	r3, [r1, r3]
 8013ec8:	4313      	orrs	r3, r2
 8013eca:	b299      	uxth	r1, r3
 8013ecc:	4a05      	ldr	r2, [pc, #20]	; (8013ee4 <RegionEU868InitDefaults+0xd8>)
 8013ece:	2388      	movs	r3, #136	; 0x88
 8013ed0:	005b      	lsls	r3, r3, #1
 8013ed2:	52d1      	strh	r1, [r2, r3]
            break;
 8013ed4:	e000      	b.n	8013ed8 <RegionEU868InitDefaults+0xcc>
            break;
 8013ed6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8013ed8:	46c0      	nop			; (mov r8, r8)
 8013eda:	46bd      	mov	sp, r7
 8013edc:	b017      	add	sp, #92	; 0x5c
 8013ede:	bd90      	pop	{r4, r7, pc}
 8013ee0:	20000e8c 	.word	0x20000e8c
 8013ee4:	20000dcc 	.word	0x20000dcc
 8013ee8:	0801f6f0 	.word	0x0801f6f0
 8013eec:	0801f6fc 	.word	0x0801f6fc
 8013ef0:	0801f708 	.word	0x0801f708
 8013ef4:	20000ede 	.word	0x20000ede
 8013ef8:	20000edc 	.word	0x20000edc

08013efc <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	228a      	movs	r2, #138	; 0x8a
 8013f08:	0052      	lsls	r2, r2, #1
 8013f0a:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8013f0c:	4b02      	ldr	r3, [pc, #8]	; (8013f18 <RegionEU868GetNvmCtx+0x1c>)
}
 8013f0e:	0018      	movs	r0, r3
 8013f10:	46bd      	mov	sp, r7
 8013f12:	b002      	add	sp, #8
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	46c0      	nop			; (mov r8, r8)
 8013f18:	20000dcc 	.word	0x20000dcc

08013f1c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	000a      	movs	r2, r1
 8013f26:	1cfb      	adds	r3, r7, #3
 8013f28:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8013f2a:	1cfb      	adds	r3, r7, #3
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	3b04      	subs	r3, #4
 8013f30:	2b0a      	cmp	r3, #10
 8013f32:	d83a      	bhi.n	8013faa <RegionEU868Verify+0x8e>
 8013f34:	009a      	lsls	r2, r3, #2
 8013f36:	4b1f      	ldr	r3, [pc, #124]	; (8013fb4 <RegionEU868Verify+0x98>)
 8013f38:	18d3      	adds	r3, r2, r3
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	469f      	mov	pc, r3
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	b25b      	sxtb	r3, r3
 8013f44:	2207      	movs	r2, #7
 8013f46:	2100      	movs	r1, #0
 8013f48:	0018      	movs	r0, r3
 8013f4a:	f7fe fff9 	bl	8012f40 <RegionCommonValueInRange>
 8013f4e:	0003      	movs	r3, r0
 8013f50:	1e5a      	subs	r2, r3, #1
 8013f52:	4193      	sbcs	r3, r2
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	e029      	b.n	8013fac <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	781b      	ldrb	r3, [r3, #0]
 8013f5c:	b25b      	sxtb	r3, r3
 8013f5e:	2205      	movs	r2, #5
 8013f60:	2100      	movs	r1, #0
 8013f62:	0018      	movs	r0, r3
 8013f64:	f7fe ffec 	bl	8012f40 <RegionCommonValueInRange>
 8013f68:	0003      	movs	r3, r0
 8013f6a:	1e5a      	subs	r2, r3, #1
 8013f6c:	4193      	sbcs	r3, r2
 8013f6e:	b2db      	uxtb	r3, r3
 8013f70:	e01c      	b.n	8013fac <RegionEU868Verify+0x90>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	781b      	ldrb	r3, [r3, #0]
 8013f76:	b25b      	sxtb	r3, r3
 8013f78:	2207      	movs	r2, #7
 8013f7a:	2100      	movs	r1, #0
 8013f7c:	0018      	movs	r0, r3
 8013f7e:	f7fe ffdf 	bl	8012f40 <RegionCommonValueInRange>
 8013f82:	0003      	movs	r3, r0
 8013f84:	1e5a      	subs	r2, r3, #1
 8013f86:	4193      	sbcs	r3, r2
 8013f88:	b2db      	uxtb	r3, r3
 8013f8a:	e00f      	b.n	8013fac <RegionEU868Verify+0x90>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	b25b      	sxtb	r3, r3
 8013f92:	2207      	movs	r2, #7
 8013f94:	2100      	movs	r1, #0
 8013f96:	0018      	movs	r0, r3
 8013f98:	f7fe ffd2 	bl	8012f40 <RegionCommonValueInRange>
 8013f9c:	0003      	movs	r3, r0
 8013f9e:	1e5a      	subs	r2, r3, #1
 8013fa0:	4193      	sbcs	r3, r2
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	e002      	b.n	8013fac <RegionEU868Verify+0x90>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	e000      	b.n	8013fac <RegionEU868Verify+0x90>
        }
        default:
            return false;
 8013faa:	2300      	movs	r3, #0
    }
}
 8013fac:	0018      	movs	r0, r3
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	b002      	add	sp, #8
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	08020a30 	.word	0x08020a30

08013fb8 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8013fb8:	b590      	push	{r4, r7, lr}
 8013fba:	b08b      	sub	sp, #44	; 0x2c
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8013fc0:	2318      	movs	r3, #24
 8013fc2:	18fb      	adds	r3, r7, r3
 8013fc4:	2250      	movs	r2, #80	; 0x50
 8013fc6:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	791b      	ldrb	r3, [r3, #4]
 8013fcc:	2b10      	cmp	r3, #16
 8013fce:	d000      	beq.n	8013fd2 <RegionEU868ApplyCFList+0x1a>
 8013fd0:	e07d      	b.n	80140ce <RegionEU868ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	330f      	adds	r3, #15
 8013fd8:	781b      	ldrb	r3, [r3, #0]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d000      	beq.n	8013fe0 <RegionEU868ApplyCFList+0x28>
 8013fde:	e078      	b.n	80140d2 <RegionEU868ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013fe0:	2327      	movs	r3, #39	; 0x27
 8013fe2:	18fb      	adds	r3, r7, r3
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	701a      	strb	r2, [r3, #0]
 8013fe8:	2326      	movs	r3, #38	; 0x26
 8013fea:	18fb      	adds	r3, r7, r3
 8013fec:	2203      	movs	r2, #3
 8013fee:	701a      	strb	r2, [r3, #0]
 8013ff0:	e067      	b.n	80140c2 <RegionEU868ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8013ff2:	2326      	movs	r3, #38	; 0x26
 8013ff4:	18fb      	adds	r3, r7, r3
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	2b07      	cmp	r3, #7
 8013ffa:	d82e      	bhi.n	801405a <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	2427      	movs	r4, #39	; 0x27
 8014002:	193b      	adds	r3, r7, r4
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	18d3      	adds	r3, r2, r3
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	001a      	movs	r2, r3
 801400c:	2018      	movs	r0, #24
 801400e:	183b      	adds	r3, r7, r0
 8014010:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014012:	183b      	adds	r3, r7, r0
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6819      	ldr	r1, [r3, #0]
 801401a:	193b      	adds	r3, r7, r4
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	3301      	adds	r3, #1
 8014020:	18cb      	adds	r3, r1, r3
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	021b      	lsls	r3, r3, #8
 8014026:	431a      	orrs	r2, r3
 8014028:	183b      	adds	r3, r7, r0
 801402a:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801402c:	183b      	adds	r3, r7, r0
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6819      	ldr	r1, [r3, #0]
 8014034:	193b      	adds	r3, r7, r4
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	3302      	adds	r3, #2
 801403a:	18cb      	adds	r3, r1, r3
 801403c:	781b      	ldrb	r3, [r3, #0]
 801403e:	041b      	lsls	r3, r3, #16
 8014040:	431a      	orrs	r2, r3
 8014042:	183b      	adds	r3, r7, r0
 8014044:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8014046:	183b      	adds	r3, r7, r0
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	2264      	movs	r2, #100	; 0x64
 801404c:	435a      	muls	r2, r3
 801404e:	183b      	adds	r3, r7, r0
 8014050:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014052:	183b      	adds	r3, r7, r0
 8014054:	2200      	movs	r2, #0
 8014056:	605a      	str	r2, [r3, #4]
 8014058:	e009      	b.n	801406e <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 801405a:	2118      	movs	r1, #24
 801405c:	187b      	adds	r3, r7, r1
 801405e:	2200      	movs	r2, #0
 8014060:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8014062:	187b      	adds	r3, r7, r1
 8014064:	2200      	movs	r2, #0
 8014066:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8014068:	187b      	adds	r3, r7, r1
 801406a:	2200      	movs	r2, #0
 801406c:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 801406e:	2318      	movs	r3, #24
 8014070:	18fb      	adds	r3, r7, r3
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d00e      	beq.n	8014096 <RegionEU868ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8014078:	2110      	movs	r1, #16
 801407a:	187b      	adds	r3, r7, r1
 801407c:	2218      	movs	r2, #24
 801407e:	18ba      	adds	r2, r7, r2
 8014080:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8014082:	187b      	adds	r3, r7, r1
 8014084:	2226      	movs	r2, #38	; 0x26
 8014086:	18ba      	adds	r2, r7, r2
 8014088:	7812      	ldrb	r2, [r2, #0]
 801408a:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801408c:	187b      	adds	r3, r7, r1
 801408e:	0018      	movs	r0, r3
 8014090:	f000 fdc2 	bl	8014c18 <RegionEU868ChannelAdd>
 8014094:	e009      	b.n	80140aa <RegionEU868ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8014096:	210c      	movs	r1, #12
 8014098:	187b      	adds	r3, r7, r1
 801409a:	2226      	movs	r2, #38	; 0x26
 801409c:	18ba      	adds	r2, r7, r2
 801409e:	7812      	ldrb	r2, [r2, #0]
 80140a0:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 80140a2:	187b      	adds	r3, r7, r1
 80140a4:	0018      	movs	r0, r3
 80140a6:	f000 fe7b 	bl	8014da0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80140aa:	2227      	movs	r2, #39	; 0x27
 80140ac:	18bb      	adds	r3, r7, r2
 80140ae:	18ba      	adds	r2, r7, r2
 80140b0:	7812      	ldrb	r2, [r2, #0]
 80140b2:	3203      	adds	r2, #3
 80140b4:	701a      	strb	r2, [r3, #0]
 80140b6:	2126      	movs	r1, #38	; 0x26
 80140b8:	187b      	adds	r3, r7, r1
 80140ba:	781a      	ldrb	r2, [r3, #0]
 80140bc:	187b      	adds	r3, r7, r1
 80140be:	3201      	adds	r2, #1
 80140c0:	701a      	strb	r2, [r3, #0]
 80140c2:	2326      	movs	r3, #38	; 0x26
 80140c4:	18fb      	adds	r3, r7, r3
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	2b0f      	cmp	r3, #15
 80140ca:	d992      	bls.n	8013ff2 <RegionEU868ApplyCFList+0x3a>
 80140cc:	e002      	b.n	80140d4 <RegionEU868ApplyCFList+0x11c>
        return;
 80140ce:	46c0      	nop			; (mov r8, r8)
 80140d0:	e000      	b.n	80140d4 <RegionEU868ApplyCFList+0x11c>
        return;
 80140d2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80140d4:	46bd      	mov	sp, r7
 80140d6:	b00b      	add	sp, #44	; 0x2c
 80140d8:	bd90      	pop	{r4, r7, pc}
	...

080140dc <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	791b      	ldrb	r3, [r3, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d002      	beq.n	80140f2 <RegionEU868ChanMaskSet+0x16>
 80140ec:	2b01      	cmp	r3, #1
 80140ee:	d008      	beq.n	8014102 <RegionEU868ChanMaskSet+0x26>
 80140f0:	e00f      	b.n	8014112 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6819      	ldr	r1, [r3, #0]
 80140f6:	4b0a      	ldr	r3, [pc, #40]	; (8014120 <RegionEU868ChanMaskSet+0x44>)
 80140f8:	2201      	movs	r2, #1
 80140fa:	0018      	movs	r0, r3
 80140fc:	f7fe ffc9 	bl	8013092 <RegionCommonChanMaskCopy>
            break;
 8014100:	e009      	b.n	8014116 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6819      	ldr	r1, [r3, #0]
 8014106:	4b07      	ldr	r3, [pc, #28]	; (8014124 <RegionEU868ChanMaskSet+0x48>)
 8014108:	2201      	movs	r2, #1
 801410a:	0018      	movs	r0, r3
 801410c:	f7fe ffc1 	bl	8013092 <RegionCommonChanMaskCopy>
            break;
 8014110:	e001      	b.n	8014116 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 8014112:	2300      	movs	r3, #0
 8014114:	e000      	b.n	8014118 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 8014116:	2301      	movs	r3, #1
}
 8014118:	0018      	movs	r0, r3
 801411a:	46bd      	mov	sp, r7
 801411c:	b002      	add	sp, #8
 801411e:	bd80      	pop	{r7, pc}
 8014120:	20000edc 	.word	0x20000edc
 8014124:	20000ede 	.word	0x20000ede

08014128 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801412a:	b08b      	sub	sp, #44	; 0x2c
 801412c:	af04      	add	r7, sp, #16
 801412e:	60ba      	str	r2, [r7, #8]
 8014130:	607b      	str	r3, [r7, #4]
 8014132:	250f      	movs	r5, #15
 8014134:	197b      	adds	r3, r7, r5
 8014136:	1c02      	adds	r2, r0, #0
 8014138:	701a      	strb	r2, [r3, #0]
 801413a:	230e      	movs	r3, #14
 801413c:	18fb      	adds	r3, r7, r3
 801413e:	1c0a      	adds	r2, r1, #0
 8014140:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8014142:	2300      	movs	r3, #0
 8014144:	2400      	movs	r4, #0
 8014146:	613b      	str	r3, [r7, #16]
 8014148:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801414a:	197b      	adds	r3, r7, r5
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	b25a      	sxtb	r2, r3
 8014150:	2a07      	cmp	r2, #7
 8014152:	dd00      	ble.n	8014156 <RegionEU868ComputeRxWindowParameters+0x2e>
 8014154:	2307      	movs	r3, #7
 8014156:	b25a      	sxtb	r2, r3
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	785b      	ldrb	r3, [r3, #1]
 8014160:	b25b      	sxtb	r3, r3
 8014162:	0018      	movs	r0, r3
 8014164:	f7ff fb8a 	bl	801387c <GetBandwidth>
 8014168:	0003      	movs	r3, r0
 801416a:	b2da      	uxtb	r2, r3
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	785b      	ldrb	r3, [r3, #1]
 8014174:	b25b      	sxtb	r3, r3
 8014176:	2b07      	cmp	r3, #7
 8014178:	d10d      	bne.n	8014196 <RegionEU868ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	785b      	ldrb	r3, [r3, #1]
 801417e:	b25b      	sxtb	r3, r3
 8014180:	001a      	movs	r2, r3
 8014182:	4b1b      	ldr	r3, [pc, #108]	; (80141f0 <RegionEU868ComputeRxWindowParameters+0xc8>)
 8014184:	5c9b      	ldrb	r3, [r3, r2]
 8014186:	0018      	movs	r0, r3
 8014188:	f7ff f9ea 	bl	8013560 <RegionCommonComputeSymbolTimeFsk>
 801418c:	0003      	movs	r3, r0
 801418e:	000c      	movs	r4, r1
 8014190:	613b      	str	r3, [r7, #16]
 8014192:	617c      	str	r4, [r7, #20]
 8014194:	e013      	b.n	80141be <RegionEU868ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	785b      	ldrb	r3, [r3, #1]
 801419a:	b25b      	sxtb	r3, r3
 801419c:	001a      	movs	r2, r3
 801419e:	4b14      	ldr	r3, [pc, #80]	; (80141f0 <RegionEU868ComputeRxWindowParameters+0xc8>)
 80141a0:	5c98      	ldrb	r0, [r3, r2]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	785b      	ldrb	r3, [r3, #1]
 80141a6:	b25b      	sxtb	r3, r3
 80141a8:	001a      	movs	r2, r3
 80141aa:	4b12      	ldr	r3, [pc, #72]	; (80141f4 <RegionEU868ComputeRxWindowParameters+0xcc>)
 80141ac:	0092      	lsls	r2, r2, #2
 80141ae:	58d3      	ldr	r3, [r2, r3]
 80141b0:	0019      	movs	r1, r3
 80141b2:	f7ff f9a9 	bl	8013508 <RegionCommonComputeSymbolTimeLoRa>
 80141b6:	0003      	movs	r3, r0
 80141b8:	000c      	movs	r4, r1
 80141ba:	613b      	str	r3, [r7, #16]
 80141bc:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80141be:	4b0e      	ldr	r3, [pc, #56]	; (80141f8 <RegionEU868ComputeRxWindowParameters+0xd0>)
 80141c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80141c2:	4798      	blx	r3
 80141c4:	0006      	movs	r6, r0
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	3308      	adds	r3, #8
 80141ca:	687a      	ldr	r2, [r7, #4]
 80141cc:	320c      	adds	r2, #12
 80141ce:	68bd      	ldr	r5, [r7, #8]
 80141d0:	210e      	movs	r1, #14
 80141d2:	1879      	adds	r1, r7, r1
 80141d4:	780c      	ldrb	r4, [r1, #0]
 80141d6:	6938      	ldr	r0, [r7, #16]
 80141d8:	6979      	ldr	r1, [r7, #20]
 80141da:	9202      	str	r2, [sp, #8]
 80141dc:	9301      	str	r3, [sp, #4]
 80141de:	9600      	str	r6, [sp, #0]
 80141e0:	002b      	movs	r3, r5
 80141e2:	0022      	movs	r2, r4
 80141e4:	f7ff f9d8 	bl	8013598 <RegionCommonComputeRxWindowParameters>
}
 80141e8:	46c0      	nop			; (mov r8, r8)
 80141ea:	46bd      	mov	sp, r7
 80141ec:	b007      	add	sp, #28
 80141ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141f0:	08020924 	.word	0x08020924
 80141f4:	0802092c 	.word	0x0802092c
 80141f8:	08020a5c 	.word	0x08020a5c

080141fc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80141fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141fe:	b091      	sub	sp, #68	; 0x44
 8014200:	af0a      	add	r7, sp, #40	; 0x28
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8014206:	230f      	movs	r3, #15
 8014208:	18fb      	adds	r3, r7, r3
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	7852      	ldrb	r2, [r2, #1]
 801420e:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8014210:	2316      	movs	r3, #22
 8014212:	18fb      	adds	r3, r7, r3
 8014214:	2200      	movs	r2, #0
 8014216:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8014218:	230e      	movs	r3, #14
 801421a:	18fb      	adds	r3, r7, r3
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8014226:	4b64      	ldr	r3, [pc, #400]	; (80143b8 <RegionEU868RxConfig+0x1bc>)
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	4798      	blx	r3
 801422c:	1e03      	subs	r3, r0, #0
 801422e:	d001      	beq.n	8014234 <RegionEU868RxConfig+0x38>
    {
        return false;
 8014230:	2300      	movs	r3, #0
 8014232:	e0bc      	b.n	80143ae <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	7cdb      	ldrb	r3, [r3, #19]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d122      	bne.n	8014282 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	781b      	ldrb	r3, [r3, #0]
 8014240:	0019      	movs	r1, r3
 8014242:	4a5e      	ldr	r2, [pc, #376]	; (80143bc <RegionEU868RxConfig+0x1c0>)
 8014244:	000b      	movs	r3, r1
 8014246:	005b      	lsls	r3, r3, #1
 8014248:	185b      	adds	r3, r3, r1
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	589b      	ldr	r3, [r3, r2]
 801424e:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	0019      	movs	r1, r3
 8014256:	4a59      	ldr	r2, [pc, #356]	; (80143bc <RegionEU868RxConfig+0x1c0>)
 8014258:	000b      	movs	r3, r1
 801425a:	005b      	lsls	r3, r3, #1
 801425c:	185b      	adds	r3, r3, r1
 801425e:	009b      	lsls	r3, r3, #2
 8014260:	18d3      	adds	r3, r2, r3
 8014262:	3304      	adds	r3, #4
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d00b      	beq.n	8014282 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	0019      	movs	r1, r3
 8014270:	4a52      	ldr	r2, [pc, #328]	; (80143bc <RegionEU868RxConfig+0x1c0>)
 8014272:	000b      	movs	r3, r1
 8014274:	005b      	lsls	r3, r3, #1
 8014276:	185b      	adds	r3, r3, r1
 8014278:	009b      	lsls	r3, r3, #2
 801427a:	18d3      	adds	r3, r2, r3
 801427c:	3304      	adds	r3, #4
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8014282:	240f      	movs	r4, #15
 8014284:	193b      	adds	r3, r7, r4
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	b25b      	sxtb	r3, r3
 801428a:	4a4d      	ldr	r2, [pc, #308]	; (80143c0 <RegionEU868RxConfig+0x1c4>)
 801428c:	5cd2      	ldrb	r2, [r2, r3]
 801428e:	230e      	movs	r3, #14
 8014290:	18fb      	adds	r3, r7, r3
 8014292:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8014294:	4b48      	ldr	r3, [pc, #288]	; (80143b8 <RegionEU868RxConfig+0x1bc>)
 8014296:	695b      	ldr	r3, [r3, #20]
 8014298:	693a      	ldr	r2, [r7, #16]
 801429a:	0010      	movs	r0, r2
 801429c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801429e:	193b      	adds	r3, r7, r4
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	b25b      	sxtb	r3, r3
 80142a4:	2b07      	cmp	r3, #7
 80142a6:	d12f      	bne.n	8014308 <RegionEU868RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 80142a8:	2117      	movs	r1, #23
 80142aa:	187b      	adds	r3, r7, r1
 80142ac:	2200      	movs	r2, #0
 80142ae:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80142b0:	4b41      	ldr	r3, [pc, #260]	; (80143b8 <RegionEU868RxConfig+0x1bc>)
 80142b2:	6a1c      	ldr	r4, [r3, #32]
 80142b4:	230e      	movs	r3, #14
 80142b6:	18fb      	adds	r3, r7, r3
 80142b8:	2200      	movs	r2, #0
 80142ba:	569a      	ldrsb	r2, [r3, r2]
 80142bc:	0013      	movs	r3, r2
 80142be:	015b      	lsls	r3, r3, #5
 80142c0:	1a9b      	subs	r3, r3, r2
 80142c2:	009b      	lsls	r3, r3, #2
 80142c4:	189b      	adds	r3, r3, r2
 80142c6:	00db      	lsls	r3, r3, #3
 80142c8:	001e      	movs	r6, r3
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	689b      	ldr	r3, [r3, #8]
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	7c92      	ldrb	r2, [r2, #18]
 80142d4:	4d3b      	ldr	r5, [pc, #236]	; (80143c4 <RegionEU868RxConfig+0x1c8>)
 80142d6:	1879      	adds	r1, r7, r1
 80142d8:	7808      	ldrb	r0, [r1, #0]
 80142da:	9209      	str	r2, [sp, #36]	; 0x24
 80142dc:	2200      	movs	r2, #0
 80142de:	9208      	str	r2, [sp, #32]
 80142e0:	2200      	movs	r2, #0
 80142e2:	9207      	str	r2, [sp, #28]
 80142e4:	2200      	movs	r2, #0
 80142e6:	9206      	str	r2, [sp, #24]
 80142e8:	2201      	movs	r2, #1
 80142ea:	9205      	str	r2, [sp, #20]
 80142ec:	2200      	movs	r2, #0
 80142ee:	9204      	str	r2, [sp, #16]
 80142f0:	2200      	movs	r2, #0
 80142f2:	9203      	str	r2, [sp, #12]
 80142f4:	9302      	str	r3, [sp, #8]
 80142f6:	2305      	movs	r3, #5
 80142f8:	9301      	str	r3, [sp, #4]
 80142fa:	4b33      	ldr	r3, [pc, #204]	; (80143c8 <RegionEU868RxConfig+0x1cc>)
 80142fc:	9300      	str	r3, [sp, #0]
 80142fe:	2300      	movs	r3, #0
 8014300:	0032      	movs	r2, r6
 8014302:	0029      	movs	r1, r5
 8014304:	47a0      	blx	r4
 8014306:	e029      	b.n	801435c <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8014308:	2117      	movs	r1, #23
 801430a:	187b      	adds	r3, r7, r1
 801430c:	2201      	movs	r2, #1
 801430e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014310:	4b29      	ldr	r3, [pc, #164]	; (80143b8 <RegionEU868RxConfig+0x1bc>)
 8014312:	6a1c      	ldr	r4, [r3, #32]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	789b      	ldrb	r3, [r3, #2]
 8014318:	001e      	movs	r6, r3
 801431a:	230e      	movs	r3, #14
 801431c:	18fb      	adds	r3, r7, r3
 801431e:	2500      	movs	r5, #0
 8014320:	575d      	ldrsb	r5, [r3, r5]
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	689b      	ldr	r3, [r3, #8]
 8014326:	b29b      	uxth	r3, r3
 8014328:	687a      	ldr	r2, [r7, #4]
 801432a:	7c92      	ldrb	r2, [r2, #18]
 801432c:	1879      	adds	r1, r7, r1
 801432e:	7808      	ldrb	r0, [r1, #0]
 8014330:	9209      	str	r2, [sp, #36]	; 0x24
 8014332:	2201      	movs	r2, #1
 8014334:	9208      	str	r2, [sp, #32]
 8014336:	2200      	movs	r2, #0
 8014338:	9207      	str	r2, [sp, #28]
 801433a:	2200      	movs	r2, #0
 801433c:	9206      	str	r2, [sp, #24]
 801433e:	2200      	movs	r2, #0
 8014340:	9205      	str	r2, [sp, #20]
 8014342:	2200      	movs	r2, #0
 8014344:	9204      	str	r2, [sp, #16]
 8014346:	2200      	movs	r2, #0
 8014348:	9203      	str	r2, [sp, #12]
 801434a:	9302      	str	r3, [sp, #8]
 801434c:	2308      	movs	r3, #8
 801434e:	9301      	str	r3, [sp, #4]
 8014350:	2300      	movs	r3, #0
 8014352:	9300      	str	r3, [sp, #0]
 8014354:	2301      	movs	r3, #1
 8014356:	002a      	movs	r2, r5
 8014358:	0031      	movs	r1, r6
 801435a:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	7c5b      	ldrb	r3, [r3, #17]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d009      	beq.n	8014378 <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8014364:	230f      	movs	r3, #15
 8014366:	18fb      	adds	r3, r7, r3
 8014368:	2200      	movs	r2, #0
 801436a:	569a      	ldrsb	r2, [r3, r2]
 801436c:	2316      	movs	r3, #22
 801436e:	18fb      	adds	r3, r7, r3
 8014370:	4916      	ldr	r1, [pc, #88]	; (80143cc <RegionEU868RxConfig+0x1d0>)
 8014372:	5c8a      	ldrb	r2, [r1, r2]
 8014374:	701a      	strb	r2, [r3, #0]
 8014376:	e008      	b.n	801438a <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8014378:	230f      	movs	r3, #15
 801437a:	18fb      	adds	r3, r7, r3
 801437c:	2200      	movs	r2, #0
 801437e:	569a      	ldrsb	r2, [r3, r2]
 8014380:	2316      	movs	r3, #22
 8014382:	18fb      	adds	r3, r7, r3
 8014384:	4912      	ldr	r1, [pc, #72]	; (80143d0 <RegionEU868RxConfig+0x1d4>)
 8014386:	5c8a      	ldrb	r2, [r1, r2]
 8014388:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801438a:	4b0b      	ldr	r3, [pc, #44]	; (80143b8 <RegionEU868RxConfig+0x1bc>)
 801438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801438e:	2216      	movs	r2, #22
 8014390:	18ba      	adds	r2, r7, r2
 8014392:	7812      	ldrb	r2, [r2, #0]
 8014394:	320d      	adds	r2, #13
 8014396:	b2d1      	uxtb	r1, r2
 8014398:	2217      	movs	r2, #23
 801439a:	18ba      	adds	r2, r7, r2
 801439c:	7812      	ldrb	r2, [r2, #0]
 801439e:	0010      	movs	r0, r2
 80143a0:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	220f      	movs	r2, #15
 80143a6:	18ba      	adds	r2, r7, r2
 80143a8:	7812      	ldrb	r2, [r2, #0]
 80143aa:	701a      	strb	r2, [r3, #0]
    return true;
 80143ac:	2301      	movs	r3, #1
}
 80143ae:	0018      	movs	r0, r3
 80143b0:	46bd      	mov	sp, r7
 80143b2:	b007      	add	sp, #28
 80143b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143b6:	46c0      	nop			; (mov r8, r8)
 80143b8:	08020a5c 	.word	0x08020a5c
 80143bc:	20000dcc 	.word	0x20000dcc
 80143c0:	08020924 	.word	0x08020924
 80143c4:	0000c350 	.word	0x0000c350
 80143c8:	00014585 	.word	0x00014585
 80143cc:	08020954 	.word	0x08020954
 80143d0:	0802094c 	.word	0x0802094c

080143d4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80143d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143d6:	b093      	sub	sp, #76	; 0x4c
 80143d8:	af0a      	add	r7, sp, #40	; 0x28
 80143da:	60f8      	str	r0, [r7, #12]
 80143dc:	60b9      	str	r1, [r7, #8]
 80143de:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	785b      	ldrb	r3, [r3, #1]
 80143e4:	b25b      	sxtb	r3, r3
 80143e6:	001a      	movs	r2, r3
 80143e8:	4b60      	ldr	r3, [pc, #384]	; (801456c <RegionEU868TxConfig+0x198>)
 80143ea:	5c9a      	ldrb	r2, [r3, r2]
 80143ec:	231e      	movs	r3, #30
 80143ee:	18fb      	adds	r3, r7, r3
 80143f0:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	2002      	movs	r0, #2
 80143f6:	5618      	ldrsb	r0, [r3, r0]
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	0019      	movs	r1, r3
 80143fe:	4a5c      	ldr	r2, [pc, #368]	; (8014570 <RegionEU868TxConfig+0x19c>)
 8014400:	000b      	movs	r3, r1
 8014402:	005b      	lsls	r3, r3, #1
 8014404:	185b      	adds	r3, r3, r1
 8014406:	009b      	lsls	r3, r3, #2
 8014408:	18d3      	adds	r3, r2, r3
 801440a:	3309      	adds	r3, #9
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	4a58      	ldr	r2, [pc, #352]	; (8014570 <RegionEU868TxConfig+0x19c>)
 8014410:	330c      	adds	r3, #12
 8014412:	011b      	lsls	r3, r3, #4
 8014414:	18d3      	adds	r3, r2, r3
 8014416:	3302      	adds	r3, #2
 8014418:	2100      	movs	r1, #0
 801441a:	5659      	ldrsb	r1, [r3, r1]
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	2201      	movs	r2, #1
 8014420:	569a      	ldrsb	r2, [r3, r2]
 8014422:	251d      	movs	r5, #29
 8014424:	197c      	adds	r4, r7, r5
 8014426:	4b53      	ldr	r3, [pc, #332]	; (8014574 <RegionEU868TxConfig+0x1a0>)
 8014428:	f7ff fa46 	bl	80138b8 <LimitTxPower>
 801442c:	0003      	movs	r3, r0
 801442e:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	785b      	ldrb	r3, [r3, #1]
 8014434:	b25b      	sxtb	r3, r3
 8014436:	0018      	movs	r0, r3
 8014438:	f7ff fa20 	bl	801387c <GetBandwidth>
 801443c:	0003      	movs	r3, r0
 801443e:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8014440:	2017      	movs	r0, #23
 8014442:	183b      	adds	r3, r7, r0
 8014444:	2200      	movs	r2, #0
 8014446:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	6859      	ldr	r1, [r3, #4]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	689a      	ldr	r2, [r3, #8]
 8014450:	183c      	adds	r4, r7, r0
 8014452:	197b      	adds	r3, r7, r5
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	b25b      	sxtb	r3, r3
 8014458:	0018      	movs	r0, r3
 801445a:	f7ff f921 	bl	80136a0 <RegionCommonComputeTxPower>
 801445e:	0003      	movs	r3, r0
 8014460:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8014462:	4b45      	ldr	r3, [pc, #276]	; (8014578 <RegionEU868TxConfig+0x1a4>)
 8014464:	695a      	ldr	r2, [r3, #20]
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	0018      	movs	r0, r3
 801446c:	4940      	ldr	r1, [pc, #256]	; (8014570 <RegionEU868TxConfig+0x19c>)
 801446e:	0003      	movs	r3, r0
 8014470:	005b      	lsls	r3, r3, #1
 8014472:	181b      	adds	r3, r3, r0
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	585b      	ldr	r3, [r3, r1]
 8014478:	0018      	movs	r0, r3
 801447a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	785b      	ldrb	r3, [r3, #1]
 8014480:	b25b      	sxtb	r3, r3
 8014482:	2b07      	cmp	r3, #7
 8014484:	d12d      	bne.n	80144e2 <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8014486:	201f      	movs	r0, #31
 8014488:	183b      	adds	r3, r7, r0
 801448a:	2200      	movs	r2, #0
 801448c:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 801448e:	4b3a      	ldr	r3, [pc, #232]	; (8014578 <RegionEU868TxConfig+0x1a4>)
 8014490:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014492:	231e      	movs	r3, #30
 8014494:	18fb      	adds	r3, r7, r3
 8014496:	2200      	movs	r2, #0
 8014498:	569a      	ldrsb	r2, [r3, r2]
 801449a:	0013      	movs	r3, r2
 801449c:	015b      	lsls	r3, r3, #5
 801449e:	1a9b      	subs	r3, r3, r2
 80144a0:	009b      	lsls	r3, r3, #2
 80144a2:	189b      	adds	r3, r3, r2
 80144a4:	00db      	lsls	r3, r3, #3
 80144a6:	001d      	movs	r5, r3
 80144a8:	69ba      	ldr	r2, [r7, #24]
 80144aa:	4e34      	ldr	r6, [pc, #208]	; (801457c <RegionEU868TxConfig+0x1a8>)
 80144ac:	2317      	movs	r3, #23
 80144ae:	18fb      	adds	r3, r7, r3
 80144b0:	2100      	movs	r1, #0
 80144b2:	5659      	ldrsb	r1, [r3, r1]
 80144b4:	183b      	adds	r3, r7, r0
 80144b6:	7818      	ldrb	r0, [r3, #0]
 80144b8:	4b31      	ldr	r3, [pc, #196]	; (8014580 <RegionEU868TxConfig+0x1ac>)
 80144ba:	9308      	str	r3, [sp, #32]
 80144bc:	2300      	movs	r3, #0
 80144be:	9307      	str	r3, [sp, #28]
 80144c0:	2300      	movs	r3, #0
 80144c2:	9306      	str	r3, [sp, #24]
 80144c4:	2300      	movs	r3, #0
 80144c6:	9305      	str	r3, [sp, #20]
 80144c8:	2301      	movs	r3, #1
 80144ca:	9304      	str	r3, [sp, #16]
 80144cc:	2300      	movs	r3, #0
 80144ce:	9303      	str	r3, [sp, #12]
 80144d0:	2305      	movs	r3, #5
 80144d2:	9302      	str	r3, [sp, #8]
 80144d4:	2300      	movs	r3, #0
 80144d6:	9301      	str	r3, [sp, #4]
 80144d8:	9500      	str	r5, [sp, #0]
 80144da:	0013      	movs	r3, r2
 80144dc:	0032      	movs	r2, r6
 80144de:	47a0      	blx	r4
 80144e0:	e024      	b.n	801452c <RegionEU868TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 80144e2:	201f      	movs	r0, #31
 80144e4:	183b      	adds	r3, r7, r0
 80144e6:	2201      	movs	r2, #1
 80144e8:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 80144ea:	4b23      	ldr	r3, [pc, #140]	; (8014578 <RegionEU868TxConfig+0x1a4>)
 80144ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80144ee:	231e      	movs	r3, #30
 80144f0:	18fb      	adds	r3, r7, r3
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	b25b      	sxtb	r3, r3
 80144f6:	69bd      	ldr	r5, [r7, #24]
 80144f8:	2217      	movs	r2, #23
 80144fa:	18ba      	adds	r2, r7, r2
 80144fc:	2100      	movs	r1, #0
 80144fe:	5651      	ldrsb	r1, [r2, r1]
 8014500:	183a      	adds	r2, r7, r0
 8014502:	7810      	ldrb	r0, [r2, #0]
 8014504:	4a1e      	ldr	r2, [pc, #120]	; (8014580 <RegionEU868TxConfig+0x1ac>)
 8014506:	9208      	str	r2, [sp, #32]
 8014508:	2200      	movs	r2, #0
 801450a:	9207      	str	r2, [sp, #28]
 801450c:	2200      	movs	r2, #0
 801450e:	9206      	str	r2, [sp, #24]
 8014510:	2200      	movs	r2, #0
 8014512:	9205      	str	r2, [sp, #20]
 8014514:	2201      	movs	r2, #1
 8014516:	9204      	str	r2, [sp, #16]
 8014518:	2200      	movs	r2, #0
 801451a:	9203      	str	r2, [sp, #12]
 801451c:	2208      	movs	r2, #8
 801451e:	9202      	str	r2, [sp, #8]
 8014520:	2201      	movs	r2, #1
 8014522:	9201      	str	r2, [sp, #4]
 8014524:	9300      	str	r3, [sp, #0]
 8014526:	002b      	movs	r3, r5
 8014528:	2200      	movs	r2, #0
 801452a:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801452c:	4b12      	ldr	r3, [pc, #72]	; (8014578 <RegionEU868TxConfig+0x1a4>)
 801452e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014530:	68fa      	ldr	r2, [r7, #12]
 8014532:	8992      	ldrh	r2, [r2, #12]
 8014534:	b2d1      	uxtb	r1, r2
 8014536:	241f      	movs	r4, #31
 8014538:	193a      	adds	r2, r7, r4
 801453a:	7812      	ldrb	r2, [r2, #0]
 801453c:	0010      	movs	r0, r2
 801453e:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8014540:	4b0d      	ldr	r3, [pc, #52]	; (8014578 <RegionEU868TxConfig+0x1a4>)
 8014542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014544:	68fa      	ldr	r2, [r7, #12]
 8014546:	8992      	ldrh	r2, [r2, #12]
 8014548:	b2d1      	uxtb	r1, r2
 801454a:	193a      	adds	r2, r7, r4
 801454c:	7812      	ldrb	r2, [r2, #0]
 801454e:	0010      	movs	r0, r2
 8014550:	4798      	blx	r3
 8014552:	0002      	movs	r2, r0
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	221d      	movs	r2, #29
 801455c:	18ba      	adds	r2, r7, r2
 801455e:	7812      	ldrb	r2, [r2, #0]
 8014560:	701a      	strb	r2, [r3, #0]
    return true;
 8014562:	2301      	movs	r3, #1
}
 8014564:	0018      	movs	r0, r3
 8014566:	46bd      	mov	sp, r7
 8014568:	b009      	add	sp, #36	; 0x24
 801456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801456c:	08020924 	.word	0x08020924
 8014570:	20000dcc 	.word	0x20000dcc
 8014574:	20000edc 	.word	0x20000edc
 8014578:	08020a5c 	.word	0x08020a5c
 801457c:	000061a8 	.word	0x000061a8
 8014580:	00000bb8 	.word	0x00000bb8

08014584 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014586:	b093      	sub	sp, #76	; 0x4c
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	607a      	str	r2, [r7, #4]
 8014590:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8014592:	2347      	movs	r3, #71	; 0x47
 8014594:	18fb      	adds	r3, r7, r3
 8014596:	2207      	movs	r2, #7
 8014598:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801459a:	2344      	movs	r3, #68	; 0x44
 801459c:	18fb      	adds	r3, r7, r3
 801459e:	2200      	movs	r2, #0
 80145a0:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 80145a2:	2346      	movs	r3, #70	; 0x46
 80145a4:	18fb      	adds	r3, r7, r3
 80145a6:	2200      	movs	r2, #0
 80145a8:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 80145aa:	233a      	movs	r3, #58	; 0x3a
 80145ac:	18fb      	adds	r3, r7, r3
 80145ae:	2200      	movs	r2, #0
 80145b0:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80145b2:	e09e      	b.n	80146f2 <RegionEU868LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	685a      	ldr	r2, [r3, #4]
 80145b8:	2346      	movs	r3, #70	; 0x46
 80145ba:	18fb      	adds	r3, r7, r3
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	18d3      	adds	r3, r2, r3
 80145c0:	2544      	movs	r5, #68	; 0x44
 80145c2:	197c      	adds	r4, r7, r5
 80145c4:	223c      	movs	r2, #60	; 0x3c
 80145c6:	18ba      	adds	r2, r7, r2
 80145c8:	0011      	movs	r1, r2
 80145ca:	0018      	movs	r0, r3
 80145cc:	f7fe fea0 	bl	8013310 <RegionCommonParseLinkAdrReq>
 80145d0:	0003      	movs	r3, r0
 80145d2:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 80145d4:	197b      	adds	r3, r7, r5
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d100      	bne.n	80145de <RegionEU868LinkAdrReq+0x5a>
 80145dc:	e092      	b.n	8014704 <RegionEU868LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80145de:	2246      	movs	r2, #70	; 0x46
 80145e0:	18bb      	adds	r3, r7, r2
 80145e2:	18b9      	adds	r1, r7, r2
 80145e4:	2244      	movs	r2, #68	; 0x44
 80145e6:	18ba      	adds	r2, r7, r2
 80145e8:	7809      	ldrb	r1, [r1, #0]
 80145ea:	7812      	ldrb	r2, [r2, #0]
 80145ec:	188a      	adds	r2, r1, r2
 80145ee:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80145f0:	2347      	movs	r3, #71	; 0x47
 80145f2:	18fb      	adds	r3, r7, r3
 80145f4:	2207      	movs	r2, #7
 80145f6:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80145f8:	213c      	movs	r1, #60	; 0x3c
 80145fa:	187b      	adds	r3, r7, r1
 80145fc:	889a      	ldrh	r2, [r3, #4]
 80145fe:	233a      	movs	r3, #58	; 0x3a
 8014600:	18fb      	adds	r3, r7, r3
 8014602:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8014604:	187b      	adds	r3, r7, r1
 8014606:	78db      	ldrb	r3, [r3, #3]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d10c      	bne.n	8014626 <RegionEU868LinkAdrReq+0xa2>
 801460c:	233a      	movs	r3, #58	; 0x3a
 801460e:	18fb      	adds	r3, r7, r3
 8014610:	881b      	ldrh	r3, [r3, #0]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d107      	bne.n	8014626 <RegionEU868LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8014616:	2247      	movs	r2, #71	; 0x47
 8014618:	18bb      	adds	r3, r7, r2
 801461a:	18ba      	adds	r2, r7, r2
 801461c:	7812      	ldrb	r2, [r2, #0]
 801461e:	2101      	movs	r1, #1
 8014620:	438a      	bics	r2, r1
 8014622:	701a      	strb	r2, [r3, #0]
 8014624:	e065      	b.n	80146f2 <RegionEU868LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014626:	233c      	movs	r3, #60	; 0x3c
 8014628:	18fb      	adds	r3, r7, r3
 801462a:	78db      	ldrb	r3, [r3, #3]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d004      	beq.n	801463a <RegionEU868LinkAdrReq+0xb6>
 8014630:	233c      	movs	r3, #60	; 0x3c
 8014632:	18fb      	adds	r3, r7, r3
 8014634:	78db      	ldrb	r3, [r3, #3]
 8014636:	2b05      	cmp	r3, #5
 8014638:	d904      	bls.n	8014644 <RegionEU868LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801463a:	233c      	movs	r3, #60	; 0x3c
 801463c:	18fb      	adds	r3, r7, r3
 801463e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014640:	2b06      	cmp	r3, #6
 8014642:	d907      	bls.n	8014654 <RegionEU868LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8014644:	2247      	movs	r2, #71	; 0x47
 8014646:	18bb      	adds	r3, r7, r2
 8014648:	18ba      	adds	r2, r7, r2
 801464a:	7812      	ldrb	r2, [r2, #0]
 801464c:	2101      	movs	r1, #1
 801464e:	438a      	bics	r2, r1
 8014650:	701a      	strb	r2, [r3, #0]
 8014652:	e04e      	b.n	80146f2 <RegionEU868LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014654:	2345      	movs	r3, #69	; 0x45
 8014656:	18fb      	adds	r3, r7, r3
 8014658:	2200      	movs	r2, #0
 801465a:	701a      	strb	r2, [r3, #0]
 801465c:	e044      	b.n	80146e8 <RegionEU868LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801465e:	233c      	movs	r3, #60	; 0x3c
 8014660:	18fb      	adds	r3, r7, r3
 8014662:	78db      	ldrb	r3, [r3, #3]
 8014664:	2b06      	cmp	r3, #6
 8014666:	d11b      	bne.n	80146a0 <RegionEU868LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8014668:	2345      	movs	r3, #69	; 0x45
 801466a:	18fb      	adds	r3, r7, r3
 801466c:	781a      	ldrb	r2, [r3, #0]
 801466e:	496e      	ldr	r1, [pc, #440]	; (8014828 <RegionEU868LinkAdrReq+0x2a4>)
 8014670:	0013      	movs	r3, r2
 8014672:	005b      	lsls	r3, r3, #1
 8014674:	189b      	adds	r3, r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	585b      	ldr	r3, [r3, r1]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d02e      	beq.n	80146dc <RegionEU868LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 801467e:	2345      	movs	r3, #69	; 0x45
 8014680:	18fb      	adds	r3, r7, r3
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	2201      	movs	r2, #1
 8014686:	409a      	lsls	r2, r3
 8014688:	0013      	movs	r3, r2
 801468a:	b21a      	sxth	r2, r3
 801468c:	213a      	movs	r1, #58	; 0x3a
 801468e:	187b      	adds	r3, r7, r1
 8014690:	881b      	ldrh	r3, [r3, #0]
 8014692:	b21b      	sxth	r3, r3
 8014694:	4313      	orrs	r3, r2
 8014696:	b21b      	sxth	r3, r3
 8014698:	b29a      	uxth	r2, r3
 801469a:	187b      	adds	r3, r7, r1
 801469c:	801a      	strh	r2, [r3, #0]
 801469e:	e01d      	b.n	80146dc <RegionEU868LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80146a0:	233a      	movs	r3, #58	; 0x3a
 80146a2:	18fb      	adds	r3, r7, r3
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	001a      	movs	r2, r3
 80146a8:	2345      	movs	r3, #69	; 0x45
 80146aa:	18fb      	adds	r3, r7, r3
 80146ac:	781b      	ldrb	r3, [r3, #0]
 80146ae:	411a      	asrs	r2, r3
 80146b0:	0013      	movs	r3, r2
 80146b2:	2201      	movs	r2, #1
 80146b4:	4013      	ands	r3, r2
 80146b6:	d011      	beq.n	80146dc <RegionEU868LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 80146b8:	2345      	movs	r3, #69	; 0x45
 80146ba:	18fb      	adds	r3, r7, r3
 80146bc:	781a      	ldrb	r2, [r3, #0]
 80146be:	495a      	ldr	r1, [pc, #360]	; (8014828 <RegionEU868LinkAdrReq+0x2a4>)
 80146c0:	0013      	movs	r3, r2
 80146c2:	005b      	lsls	r3, r3, #1
 80146c4:	189b      	adds	r3, r3, r2
 80146c6:	009b      	lsls	r3, r3, #2
 80146c8:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d106      	bne.n	80146dc <RegionEU868LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80146ce:	2247      	movs	r2, #71	; 0x47
 80146d0:	18bb      	adds	r3, r7, r2
 80146d2:	18ba      	adds	r2, r7, r2
 80146d4:	7812      	ldrb	r2, [r2, #0]
 80146d6:	2101      	movs	r1, #1
 80146d8:	438a      	bics	r2, r1
 80146da:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80146dc:	2145      	movs	r1, #69	; 0x45
 80146de:	187b      	adds	r3, r7, r1
 80146e0:	781a      	ldrb	r2, [r3, #0]
 80146e2:	187b      	adds	r3, r7, r1
 80146e4:	3201      	adds	r2, #1
 80146e6:	701a      	strb	r2, [r3, #0]
 80146e8:	2345      	movs	r3, #69	; 0x45
 80146ea:	18fb      	adds	r3, r7, r3
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	2b0f      	cmp	r3, #15
 80146f0:	d9b5      	bls.n	801465e <RegionEU868LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	7a1b      	ldrb	r3, [r3, #8]
 80146f6:	2246      	movs	r2, #70	; 0x46
 80146f8:	18ba      	adds	r2, r7, r2
 80146fa:	7812      	ldrb	r2, [r2, #0]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d200      	bcs.n	8014702 <RegionEU868LinkAdrReq+0x17e>
 8014700:	e758      	b.n	80145b4 <RegionEU868LinkAdrReq+0x30>
 8014702:	e000      	b.n	8014706 <RegionEU868LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8014704:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014706:	2134      	movs	r1, #52	; 0x34
 8014708:	187b      	adds	r3, r7, r1
 801470a:	2201      	movs	r2, #1
 801470c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	7a5a      	ldrb	r2, [r3, #9]
 8014712:	187b      	adds	r3, r7, r1
 8014714:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8014716:	187b      	adds	r3, r7, r1
 8014718:	0018      	movs	r0, r3
 801471a:	f7ff fa53 	bl	8013bc4 <RegionEU868GetPhyParam>
 801471e:	0003      	movs	r3, r0
 8014720:	001a      	movs	r2, r3
 8014722:	2030      	movs	r0, #48	; 0x30
 8014724:	183b      	adds	r3, r7, r0
 8014726:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8014728:	2110      	movs	r1, #16
 801472a:	187b      	adds	r3, r7, r1
 801472c:	2447      	movs	r4, #71	; 0x47
 801472e:	193a      	adds	r2, r7, r4
 8014730:	7812      	ldrb	r2, [r2, #0]
 8014732:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	7a9a      	ldrb	r2, [r3, #10]
 8014738:	187b      	adds	r3, r7, r1
 801473a:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801473c:	253c      	movs	r5, #60	; 0x3c
 801473e:	197b      	adds	r3, r7, r5
 8014740:	2201      	movs	r2, #1
 8014742:	569a      	ldrsb	r2, [r3, r2]
 8014744:	187b      	adds	r3, r7, r1
 8014746:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8014748:	197b      	adds	r3, r7, r5
 801474a:	2202      	movs	r2, #2
 801474c:	569a      	ldrsb	r2, [r3, r2]
 801474e:	187b      	adds	r3, r7, r1
 8014750:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8014752:	197b      	adds	r3, r7, r5
 8014754:	781a      	ldrb	r2, [r3, #0]
 8014756:	187b      	adds	r3, r7, r1
 8014758:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	220b      	movs	r2, #11
 801475e:	569a      	ldrsb	r2, [r3, r2]
 8014760:	187b      	adds	r3, r7, r1
 8014762:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	220c      	movs	r2, #12
 8014768:	569a      	ldrsb	r2, [r3, r2]
 801476a:	187b      	adds	r3, r7, r1
 801476c:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	7b5b      	ldrb	r3, [r3, #13]
 8014772:	b25a      	sxtb	r2, r3
 8014774:	187b      	adds	r3, r7, r1
 8014776:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8014778:	187b      	adds	r3, r7, r1
 801477a:	2210      	movs	r2, #16
 801477c:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801477e:	187b      	adds	r3, r7, r1
 8014780:	223a      	movs	r2, #58	; 0x3a
 8014782:	18ba      	adds	r2, r7, r2
 8014784:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8014786:	183b      	adds	r3, r7, r0
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	b25a      	sxtb	r2, r3
 801478c:	0008      	movs	r0, r1
 801478e:	183b      	adds	r3, r7, r0
 8014790:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8014792:	183b      	adds	r3, r7, r0
 8014794:	2207      	movs	r2, #7
 8014796:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8014798:	183b      	adds	r3, r7, r0
 801479a:	4a23      	ldr	r2, [pc, #140]	; (8014828 <RegionEU868LinkAdrReq+0x2a4>)
 801479c:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801479e:	183b      	adds	r3, r7, r0
 80147a0:	2207      	movs	r2, #7
 80147a2:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80147a4:	183b      	adds	r3, r7, r0
 80147a6:	2200      	movs	r2, #0
 80147a8:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80147aa:	183b      	adds	r3, r7, r0
 80147ac:	68fa      	ldr	r2, [r7, #12]
 80147ae:	6812      	ldr	r2, [r2, #0]
 80147b0:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80147b2:	0026      	movs	r6, r4
 80147b4:	193c      	adds	r4, r7, r4
 80147b6:	0029      	movs	r1, r5
 80147b8:	187d      	adds	r5, r7, r1
 80147ba:	187b      	adds	r3, r7, r1
 80147bc:	1c9a      	adds	r2, r3, #2
 80147be:	187b      	adds	r3, r7, r1
 80147c0:	1c59      	adds	r1, r3, #1
 80147c2:	1838      	adds	r0, r7, r0
 80147c4:	002b      	movs	r3, r5
 80147c6:	f7fe fdf9 	bl	80133bc <RegionCommonLinkAdrReqVerifyParams>
 80147ca:	0003      	movs	r3, r0
 80147cc:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80147ce:	0034      	movs	r4, r6
 80147d0:	193b      	adds	r3, r7, r4
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	2b07      	cmp	r3, #7
 80147d6:	d10c      	bne.n	80147f2 <RegionEU868LinkAdrReq+0x26e>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 80147d8:	4b14      	ldr	r3, [pc, #80]	; (801482c <RegionEU868LinkAdrReq+0x2a8>)
 80147da:	2202      	movs	r2, #2
 80147dc:	2100      	movs	r1, #0
 80147de:	0018      	movs	r0, r3
 80147e0:	f000 fe7e 	bl	80154e0 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80147e4:	233a      	movs	r3, #58	; 0x3a
 80147e6:	18fb      	adds	r3, r7, r3
 80147e8:	8819      	ldrh	r1, [r3, #0]
 80147ea:	4a0f      	ldr	r2, [pc, #60]	; (8014828 <RegionEU868LinkAdrReq+0x2a4>)
 80147ec:	2388      	movs	r3, #136	; 0x88
 80147ee:	005b      	lsls	r3, r3, #1
 80147f0:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80147f2:	213c      	movs	r1, #60	; 0x3c
 80147f4:	187b      	adds	r3, r7, r1
 80147f6:	2201      	movs	r2, #1
 80147f8:	569a      	ldrsb	r2, [r3, r2]
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80147fe:	187b      	adds	r3, r7, r1
 8014800:	2202      	movs	r2, #2
 8014802:	569a      	ldrsb	r2, [r3, r2]
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014808:	187b      	adds	r3, r7, r1
 801480a:	781a      	ldrb	r2, [r3, #0]
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014812:	2246      	movs	r2, #70	; 0x46
 8014814:	18ba      	adds	r2, r7, r2
 8014816:	7812      	ldrb	r2, [r2, #0]
 8014818:	701a      	strb	r2, [r3, #0]

    return status;
 801481a:	2347      	movs	r3, #71	; 0x47
 801481c:	18fb      	adds	r3, r7, r3
 801481e:	781b      	ldrb	r3, [r3, #0]
}
 8014820:	0018      	movs	r0, r3
 8014822:	46bd      	mov	sp, r7
 8014824:	b013      	add	sp, #76	; 0x4c
 8014826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014828:	20000dcc 	.word	0x20000dcc
 801482c:	20000edc 	.word	0x20000edc

08014830 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b084      	sub	sp, #16
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014838:	230f      	movs	r3, #15
 801483a:	18fb      	adds	r3, r7, r3
 801483c:	2207      	movs	r2, #7
 801483e:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8014840:	210e      	movs	r1, #14
 8014842:	187b      	adds	r3, r7, r1
 8014844:	2200      	movs	r2, #0
 8014846:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	187a      	adds	r2, r7, r1
 801484e:	0011      	movs	r1, r2
 8014850:	0018      	movs	r0, r3
 8014852:	f7ff f859 	bl	8013908 <VerifyRfFreq>
 8014856:	0003      	movs	r3, r0
 8014858:	001a      	movs	r2, r3
 801485a:	2301      	movs	r3, #1
 801485c:	4053      	eors	r3, r2
 801485e:	b2db      	uxtb	r3, r3
 8014860:	2b00      	cmp	r3, #0
 8014862:	d006      	beq.n	8014872 <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFE; // Channel frequency KO
 8014864:	220f      	movs	r2, #15
 8014866:	18bb      	adds	r3, r7, r2
 8014868:	18ba      	adds	r2, r7, r2
 801486a:	7812      	ldrb	r2, [r2, #0]
 801486c:	2101      	movs	r1, #1
 801486e:	438a      	bics	r2, r1
 8014870:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	b25b      	sxtb	r3, r3
 8014878:	2207      	movs	r2, #7
 801487a:	2100      	movs	r1, #0
 801487c:	0018      	movs	r0, r3
 801487e:	f7fe fb5f 	bl	8012f40 <RegionCommonValueInRange>
 8014882:	1e03      	subs	r3, r0, #0
 8014884:	d106      	bne.n	8014894 <RegionEU868RxParamSetupReq+0x64>
    {
        status &= 0xFD; // Datarate KO
 8014886:	220f      	movs	r2, #15
 8014888:	18bb      	adds	r3, r7, r2
 801488a:	18ba      	adds	r2, r7, r2
 801488c:	7812      	ldrb	r2, [r2, #0]
 801488e:	2102      	movs	r1, #2
 8014890:	438a      	bics	r2, r1
 8014892:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	785b      	ldrb	r3, [r3, #1]
 8014898:	b25b      	sxtb	r3, r3
 801489a:	2205      	movs	r2, #5
 801489c:	2100      	movs	r1, #0
 801489e:	0018      	movs	r0, r3
 80148a0:	f7fe fb4e 	bl	8012f40 <RegionCommonValueInRange>
 80148a4:	1e03      	subs	r3, r0, #0
 80148a6:	d106      	bne.n	80148b6 <RegionEU868RxParamSetupReq+0x86>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80148a8:	220f      	movs	r2, #15
 80148aa:	18bb      	adds	r3, r7, r2
 80148ac:	18ba      	adds	r2, r7, r2
 80148ae:	7812      	ldrb	r2, [r2, #0]
 80148b0:	2104      	movs	r1, #4
 80148b2:	438a      	bics	r2, r1
 80148b4:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80148b6:	230f      	movs	r3, #15
 80148b8:	18fb      	adds	r3, r7, r3
 80148ba:	781b      	ldrb	r3, [r3, #0]
}
 80148bc:	0018      	movs	r0, r3
 80148be:	46bd      	mov	sp, r7
 80148c0:	b004      	add	sp, #16
 80148c2:	bd80      	pop	{r7, pc}

080148c4 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b086      	sub	sp, #24
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80148cc:	2317      	movs	r3, #23
 80148ce:	18fb      	adds	r3, r7, r3
 80148d0:	2203      	movs	r2, #3
 80148d2:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d119      	bne.n	8014912 <RegionEU868NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	791b      	ldrb	r3, [r3, #4]
 80148e2:	b25b      	sxtb	r3, r3
 80148e4:	b2da      	uxtb	r2, r3
 80148e6:	2108      	movs	r1, #8
 80148e8:	187b      	adds	r3, r7, r1
 80148ea:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80148ec:	187b      	adds	r3, r7, r1
 80148ee:	0018      	movs	r0, r3
 80148f0:	f000 fa56 	bl	8014da0 <RegionEU868ChannelsRemove>
 80148f4:	0003      	movs	r3, r0
 80148f6:	001a      	movs	r2, r3
 80148f8:	2301      	movs	r3, #1
 80148fa:	4053      	eors	r3, r2
 80148fc:	b2db      	uxtb	r3, r3
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d043      	beq.n	801498a <RegionEU868NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8014902:	2217      	movs	r2, #23
 8014904:	18bb      	adds	r3, r7, r2
 8014906:	18ba      	adds	r2, r7, r2
 8014908:	7812      	ldrb	r2, [r2, #0]
 801490a:	2103      	movs	r1, #3
 801490c:	438a      	bics	r2, r1
 801490e:	701a      	strb	r2, [r3, #0]
 8014910:	e03b      	b.n	801498a <RegionEU868NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681a      	ldr	r2, [r3, #0]
 8014916:	210c      	movs	r1, #12
 8014918:	187b      	adds	r3, r7, r1
 801491a:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	791b      	ldrb	r3, [r3, #4]
 8014920:	b25b      	sxtb	r3, r3
 8014922:	b2da      	uxtb	r2, r3
 8014924:	187b      	adds	r3, r7, r1
 8014926:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8014928:	187b      	adds	r3, r7, r1
 801492a:	0018      	movs	r0, r3
 801492c:	f000 f974 	bl	8014c18 <RegionEU868ChannelAdd>
 8014930:	0003      	movs	r3, r0
 8014932:	2b04      	cmp	r3, #4
 8014934:	d008      	beq.n	8014948 <RegionEU868NewChannelReq+0x84>
 8014936:	dc02      	bgt.n	801493e <RegionEU868NewChannelReq+0x7a>
 8014938:	2b00      	cmp	r3, #0
 801493a:	d025      	beq.n	8014988 <RegionEU868NewChannelReq+0xc4>
 801493c:	e01c      	b.n	8014978 <RegionEU868NewChannelReq+0xb4>
 801493e:	2b05      	cmp	r3, #5
 8014940:	d00a      	beq.n	8014958 <RegionEU868NewChannelReq+0x94>
 8014942:	2b06      	cmp	r3, #6
 8014944:	d010      	beq.n	8014968 <RegionEU868NewChannelReq+0xa4>
 8014946:	e017      	b.n	8014978 <RegionEU868NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8014948:	2217      	movs	r2, #23
 801494a:	18bb      	adds	r3, r7, r2
 801494c:	18ba      	adds	r2, r7, r2
 801494e:	7812      	ldrb	r2, [r2, #0]
 8014950:	2101      	movs	r1, #1
 8014952:	438a      	bics	r2, r1
 8014954:	701a      	strb	r2, [r3, #0]
                break;
 8014956:	e018      	b.n	801498a <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8014958:	2217      	movs	r2, #23
 801495a:	18bb      	adds	r3, r7, r2
 801495c:	18ba      	adds	r2, r7, r2
 801495e:	7812      	ldrb	r2, [r2, #0]
 8014960:	2102      	movs	r1, #2
 8014962:	438a      	bics	r2, r1
 8014964:	701a      	strb	r2, [r3, #0]
                break;
 8014966:	e010      	b.n	801498a <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8014968:	2217      	movs	r2, #23
 801496a:	18bb      	adds	r3, r7, r2
 801496c:	18ba      	adds	r2, r7, r2
 801496e:	7812      	ldrb	r2, [r2, #0]
 8014970:	2103      	movs	r1, #3
 8014972:	438a      	bics	r2, r1
 8014974:	701a      	strb	r2, [r3, #0]
                break;
 8014976:	e008      	b.n	801498a <RegionEU868NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8014978:	2217      	movs	r2, #23
 801497a:	18bb      	adds	r3, r7, r2
 801497c:	18ba      	adds	r2, r7, r2
 801497e:	7812      	ldrb	r2, [r2, #0]
 8014980:	2103      	movs	r1, #3
 8014982:	438a      	bics	r2, r1
 8014984:	701a      	strb	r2, [r3, #0]
                break;
 8014986:	e000      	b.n	801498a <RegionEU868NewChannelReq+0xc6>
                break;
 8014988:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801498a:	2317      	movs	r3, #23
 801498c:	18fb      	adds	r3, r7, r3
 801498e:	781b      	ldrb	r3, [r3, #0]
}
 8014990:	0018      	movs	r0, r3
 8014992:	46bd      	mov	sp, r7
 8014994:	b006      	add	sp, #24
 8014996:	bd80      	pop	{r7, pc}

08014998 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
    return -1;
 80149a0:	2301      	movs	r3, #1
 80149a2:	425b      	negs	r3, r3
}
 80149a4:	0018      	movs	r0, r3
 80149a6:	46bd      	mov	sp, r7
 80149a8:	b002      	add	sp, #8
 80149aa:	bd80      	pop	{r7, pc}

080149ac <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80149b4:	230f      	movs	r3, #15
 80149b6:	18fb      	adds	r3, r7, r3
 80149b8:	2203      	movs	r2, #3
 80149ba:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 80149bc:	210e      	movs	r1, #14
 80149be:	187b      	adds	r3, r7, r1
 80149c0:	2200      	movs	r2, #0
 80149c2:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	187a      	adds	r2, r7, r1
 80149ca:	0011      	movs	r1, r2
 80149cc:	0018      	movs	r0, r3
 80149ce:	f7fe ff9b 	bl	8013908 <VerifyRfFreq>
 80149d2:	0003      	movs	r3, r0
 80149d4:	001a      	movs	r2, r3
 80149d6:	2301      	movs	r3, #1
 80149d8:	4053      	eors	r3, r2
 80149da:	b2db      	uxtb	r3, r3
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d006      	beq.n	80149ee <RegionEU868DlChannelReq+0x42>
    {
        status &= 0xFE;
 80149e0:	220f      	movs	r2, #15
 80149e2:	18bb      	adds	r3, r7, r2
 80149e4:	18ba      	adds	r2, r7, r2
 80149e6:	7812      	ldrb	r2, [r2, #0]
 80149e8:	2101      	movs	r1, #1
 80149ea:	438a      	bics	r2, r1
 80149ec:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	0019      	movs	r1, r3
 80149f4:	4a13      	ldr	r2, [pc, #76]	; (8014a44 <RegionEU868DlChannelReq+0x98>)
 80149f6:	000b      	movs	r3, r1
 80149f8:	005b      	lsls	r3, r3, #1
 80149fa:	185b      	adds	r3, r3, r1
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	589b      	ldr	r3, [r3, r2]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d106      	bne.n	8014a12 <RegionEU868DlChannelReq+0x66>
    {
        status &= 0xFD;
 8014a04:	220f      	movs	r2, #15
 8014a06:	18bb      	adds	r3, r7, r2
 8014a08:	18ba      	adds	r2, r7, r2
 8014a0a:	7812      	ldrb	r2, [r2, #0]
 8014a0c:	2102      	movs	r1, #2
 8014a0e:	438a      	bics	r2, r1
 8014a10:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8014a12:	230f      	movs	r3, #15
 8014a14:	18fb      	adds	r3, r7, r3
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	2b03      	cmp	r3, #3
 8014a1a:	d10c      	bne.n	8014a36 <RegionEU868DlChannelReq+0x8a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	0018      	movs	r0, r3
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	685a      	ldr	r2, [r3, #4]
 8014a26:	4907      	ldr	r1, [pc, #28]	; (8014a44 <RegionEU868DlChannelReq+0x98>)
 8014a28:	0003      	movs	r3, r0
 8014a2a:	005b      	lsls	r3, r3, #1
 8014a2c:	181b      	adds	r3, r3, r0
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	18cb      	adds	r3, r1, r3
 8014a32:	3304      	adds	r3, #4
 8014a34:	601a      	str	r2, [r3, #0]
    }

    return status;
 8014a36:	230f      	movs	r3, #15
 8014a38:	18fb      	adds	r3, r7, r3
 8014a3a:	781b      	ldrb	r3, [r3, #0]
}
 8014a3c:	0018      	movs	r0, r3
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	b004      	add	sp, #16
 8014a42:	bd80      	pop	{r7, pc}
 8014a44:	20000dcc 	.word	0x20000dcc

08014a48 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	0002      	movs	r2, r0
 8014a50:	1dfb      	adds	r3, r7, #7
 8014a52:	701a      	strb	r2, [r3, #0]
 8014a54:	1dbb      	adds	r3, r7, #6
 8014a56:	1c0a      	adds	r2, r1, #0
 8014a58:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8014a5a:	1dfb      	adds	r3, r7, #7
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	b25b      	sxtb	r3, r3
}
 8014a60:	0018      	movs	r0, r3
 8014a62:	46bd      	mov	sp, r7
 8014a64:	b002      	add	sp, #8
 8014a66:	bd80      	pop	{r7, pc}

08014a68 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b088      	sub	sp, #32
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8014a70:	210c      	movs	r1, #12
 8014a72:	187b      	adds	r3, r7, r1
 8014a74:	4a12      	ldr	r2, [pc, #72]	; (8014ac0 <RegionEU868CalcBackOff+0x58>)
 8014a76:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8014a78:	187b      	adds	r3, r7, r1
 8014a7a:	4a12      	ldr	r2, [pc, #72]	; (8014ac4 <RegionEU868CalcBackOff+0x5c>)
 8014a7c:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	785a      	ldrb	r2, [r3, #1]
 8014a82:	187b      	adds	r3, r7, r1
 8014a84:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	781a      	ldrb	r2, [r3, #0]
 8014a8a:	187b      	adds	r3, r7, r1
 8014a8c:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	789a      	ldrb	r2, [r3, #2]
 8014a92:	187b      	adds	r3, r7, r1
 8014a94:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	78da      	ldrb	r2, [r3, #3]
 8014a9a:	187b      	adds	r3, r7, r1
 8014a9c:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	685a      	ldr	r2, [r3, #4]
 8014aa2:	187b      	adds	r3, r7, r1
 8014aa4:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	689a      	ldr	r2, [r3, #8]
 8014aaa:	187b      	adds	r3, r7, r1
 8014aac:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8014aae:	187b      	adds	r3, r7, r1
 8014ab0:	0018      	movs	r0, r3
 8014ab2:	f7fe fe2d 	bl	8013710 <RegionCommonCalcBackOff>
}
 8014ab6:	46c0      	nop			; (mov r8, r8)
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	b008      	add	sp, #32
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	46c0      	nop			; (mov r8, r8)
 8014ac0:	20000dcc 	.word	0x20000dcc
 8014ac4:	20000e8c 	.word	0x20000e8c

08014ac8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014ac8:	b5b0      	push	{r4, r5, r7, lr}
 8014aca:	b090      	sub	sp, #64	; 0x40
 8014acc:	af04      	add	r7, sp, #16
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	607a      	str	r2, [r7, #4]
 8014ad4:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8014ad6:	232f      	movs	r3, #47	; 0x2f
 8014ad8:	18fb      	adds	r3, r7, r3
 8014ada:	2200      	movs	r2, #0
 8014adc:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8014ade:	2327      	movs	r3, #39	; 0x27
 8014ae0:	18fb      	adds	r3, r7, r3
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8014ae6:	2314      	movs	r3, #20
 8014ae8:	18fb      	adds	r3, r7, r3
 8014aea:	0018      	movs	r0, r3
 8014aec:	2310      	movs	r3, #16
 8014aee:	001a      	movs	r2, r3
 8014af0:	2100      	movs	r1, #0
 8014af2:	f009 ffb7 	bl	801ea64 <memset>
    TimerTime_t nextTxDelay = 0;
 8014af6:	2300      	movs	r3, #0
 8014af8:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8014afa:	4b44      	ldr	r3, [pc, #272]	; (8014c0c <RegionEU868NextChannel+0x144>)
 8014afc:	2201      	movs	r2, #1
 8014afe:	2100      	movs	r1, #0
 8014b00:	0018      	movs	r0, r3
 8014b02:	f7fe fa85 	bl	8013010 <RegionCommonCountChannels>
 8014b06:	1e03      	subs	r3, r0, #0
 8014b08:	d10a      	bne.n	8014b20 <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8014b0a:	4a41      	ldr	r2, [pc, #260]	; (8014c10 <RegionEU868NextChannel+0x148>)
 8014b0c:	2388      	movs	r3, #136	; 0x88
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	5ad3      	ldrh	r3, [r2, r3]
 8014b12:	2207      	movs	r2, #7
 8014b14:	4313      	orrs	r3, r2
 8014b16:	b299      	uxth	r1, r3
 8014b18:	4a3d      	ldr	r2, [pc, #244]	; (8014c10 <RegionEU868NextChannel+0x148>)
 8014b1a:	2388      	movs	r3, #136	; 0x88
 8014b1c:	005b      	lsls	r3, r3, #1
 8014b1e:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	681c      	ldr	r4, [r3, #0]
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	685b      	ldr	r3, [r3, #4]
 8014b28:	0018      	movs	r0, r3
 8014b2a:	f000 fc50 	bl	80153ce <TimerGetElapsedTime>
 8014b2e:	0003      	movs	r3, r0
 8014b30:	429c      	cmp	r4, r3
 8014b32:	d824      	bhi.n	8014b7e <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	2200      	movs	r2, #0
 8014b38:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	7a58      	ldrb	r0, [r3, #9]
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	7a99      	ldrb	r1, [r3, #10]
 8014b42:	4a34      	ldr	r2, [pc, #208]	; (8014c14 <RegionEU868NextChannel+0x14c>)
 8014b44:	2305      	movs	r3, #5
 8014b46:	f7fe faee 	bl	8013126 <RegionCommonUpdateBandTimeOff>
 8014b4a:	0003      	movs	r3, r0
 8014b4c:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	7a58      	ldrb	r0, [r3, #9]
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	7a1b      	ldrb	r3, [r3, #8]
 8014b56:	b25b      	sxtb	r3, r3
 8014b58:	b2d9      	uxtb	r1, r3
 8014b5a:	232f      	movs	r3, #47	; 0x2f
 8014b5c:	18fc      	adds	r4, r7, r3
 8014b5e:	4d2c      	ldr	r5, [pc, #176]	; (8014c10 <RegionEU868NextChannel+0x148>)
 8014b60:	4a2a      	ldr	r2, [pc, #168]	; (8014c0c <RegionEU868NextChannel+0x144>)
 8014b62:	2327      	movs	r3, #39	; 0x27
 8014b64:	18fb      	adds	r3, r7, r3
 8014b66:	9302      	str	r3, [sp, #8]
 8014b68:	2314      	movs	r3, #20
 8014b6a:	18fb      	adds	r3, r7, r3
 8014b6c:	9301      	str	r3, [sp, #4]
 8014b6e:	4b29      	ldr	r3, [pc, #164]	; (8014c14 <RegionEU868NextChannel+0x14c>)
 8014b70:	9300      	str	r3, [sp, #0]
 8014b72:	002b      	movs	r3, r5
 8014b74:	f7fe ff40 	bl	80139f8 <CountNbOfEnabledChannels>
 8014b78:	0003      	movs	r3, r0
 8014b7a:	7023      	strb	r3, [r4, #0]
 8014b7c:	e010      	b.n	8014ba0 <RegionEU868NextChannel+0xd8>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8014b7e:	2127      	movs	r1, #39	; 0x27
 8014b80:	187b      	adds	r3, r7, r1
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	3301      	adds	r3, #1
 8014b86:	b2da      	uxtb	r2, r3
 8014b88:	187b      	adds	r3, r7, r1
 8014b8a:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	681c      	ldr	r4, [r3, #0]
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	685b      	ldr	r3, [r3, #4]
 8014b94:	0018      	movs	r0, r3
 8014b96:	f000 fc1a 	bl	80153ce <TimerGetElapsedTime>
 8014b9a:	0003      	movs	r3, r0
 8014b9c:	1ae3      	subs	r3, r4, r3
 8014b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8014ba0:	232f      	movs	r3, #47	; 0x2f
 8014ba2:	18fb      	adds	r3, r7, r3
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d012      	beq.n	8014bd0 <RegionEU868NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8014baa:	232f      	movs	r3, #47	; 0x2f
 8014bac:	18fb      	adds	r3, r7, r3
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	3b01      	subs	r3, #1
 8014bb2:	0019      	movs	r1, r3
 8014bb4:	2000      	movs	r0, #0
 8014bb6:	f000 fc41 	bl	801543c <randr>
 8014bba:	0002      	movs	r2, r0
 8014bbc:	2314      	movs	r3, #20
 8014bbe:	18fb      	adds	r3, r7, r3
 8014bc0:	5c9a      	ldrb	r2, [r3, r2]
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	e018      	b.n	8014c02 <RegionEU868NextChannel+0x13a>
    }
    else
    {
        if( delayTx > 0 )
 8014bd0:	2327      	movs	r3, #39	; 0x27
 8014bd2:	18fb      	adds	r3, r7, r3
 8014bd4:	781b      	ldrb	r3, [r3, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d004      	beq.n	8014be4 <RegionEU868NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bde:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014be0:	230b      	movs	r3, #11
 8014be2:	e00e      	b.n	8014c02 <RegionEU868NextChannel+0x13a>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8014be4:	4a0a      	ldr	r2, [pc, #40]	; (8014c10 <RegionEU868NextChannel+0x148>)
 8014be6:	2388      	movs	r3, #136	; 0x88
 8014be8:	005b      	lsls	r3, r3, #1
 8014bea:	5ad3      	ldrh	r3, [r2, r3]
 8014bec:	2207      	movs	r2, #7
 8014bee:	4313      	orrs	r3, r2
 8014bf0:	b299      	uxth	r1, r3
 8014bf2:	4a07      	ldr	r2, [pc, #28]	; (8014c10 <RegionEU868NextChannel+0x148>)
 8014bf4:	2388      	movs	r3, #136	; 0x88
 8014bf6:	005b      	lsls	r3, r3, #1
 8014bf8:	52d1      	strh	r1, [r2, r3]
        *time = 0;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014c00:	230c      	movs	r3, #12
    }
}
 8014c02:	0018      	movs	r0, r3
 8014c04:	46bd      	mov	sp, r7
 8014c06:	b00c      	add	sp, #48	; 0x30
 8014c08:	bdb0      	pop	{r4, r5, r7, pc}
 8014c0a:	46c0      	nop			; (mov r8, r8)
 8014c0c:	20000edc 	.word	0x20000edc
 8014c10:	20000dcc 	.word	0x20000dcc
 8014c14:	20000e8c 	.word	0x20000e8c

08014c18 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8014c18:	b590      	push	{r4, r7, lr}
 8014c1a:	b085      	sub	sp, #20
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8014c20:	230c      	movs	r3, #12
 8014c22:	18fb      	adds	r3, r7, r3
 8014c24:	2200      	movs	r2, #0
 8014c26:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8014c28:	230f      	movs	r3, #15
 8014c2a:	18fb      	adds	r3, r7, r3
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8014c30:	230e      	movs	r3, #14
 8014c32:	18fb      	adds	r3, r7, r3
 8014c34:	2200      	movs	r2, #0
 8014c36:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8014c38:	210d      	movs	r1, #13
 8014c3a:	187b      	adds	r3, r7, r1
 8014c3c:	687a      	ldr	r2, [r7, #4]
 8014c3e:	7912      	ldrb	r2, [r2, #4]
 8014c40:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8014c42:	187b      	adds	r3, r7, r1
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	2b02      	cmp	r3, #2
 8014c48:	d801      	bhi.n	8014c4e <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8014c4a:	2306      	movs	r3, #6
 8014c4c:	e0a2      	b.n	8014d94 <RegionEU868ChannelAdd+0x17c>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8014c4e:	230d      	movs	r3, #13
 8014c50:	18fb      	adds	r3, r7, r3
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	2b0f      	cmp	r3, #15
 8014c56:	d901      	bls.n	8014c5c <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014c58:	2303      	movs	r3, #3
 8014c5a:	e09b      	b.n	8014d94 <RegionEU868ChannelAdd+0x17c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	7a1b      	ldrb	r3, [r3, #8]
 8014c62:	011b      	lsls	r3, r3, #4
 8014c64:	b25b      	sxtb	r3, r3
 8014c66:	111b      	asrs	r3, r3, #4
 8014c68:	b25b      	sxtb	r3, r3
 8014c6a:	2207      	movs	r2, #7
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	0018      	movs	r0, r3
 8014c70:	f7fe f966 	bl	8012f40 <RegionCommonValueInRange>
 8014c74:	1e03      	subs	r3, r0, #0
 8014c76:	d103      	bne.n	8014c80 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8014c78:	230f      	movs	r3, #15
 8014c7a:	18fb      	adds	r3, r7, r3
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	7a1b      	ldrb	r3, [r3, #8]
 8014c86:	b25b      	sxtb	r3, r3
 8014c88:	111b      	asrs	r3, r3, #4
 8014c8a:	b25b      	sxtb	r3, r3
 8014c8c:	2207      	movs	r2, #7
 8014c8e:	2100      	movs	r1, #0
 8014c90:	0018      	movs	r0, r3
 8014c92:	f7fe f955 	bl	8012f40 <RegionCommonValueInRange>
 8014c96:	1e03      	subs	r3, r0, #0
 8014c98:	d103      	bne.n	8014ca2 <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8014c9a:	230f      	movs	r3, #15
 8014c9c:	18fb      	adds	r3, r7, r3
 8014c9e:	2201      	movs	r2, #1
 8014ca0:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	7a1b      	ldrb	r3, [r3, #8]
 8014ca8:	011b      	lsls	r3, r3, #4
 8014caa:	b25b      	sxtb	r3, r3
 8014cac:	111b      	asrs	r3, r3, #4
 8014cae:	b25a      	sxtb	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	7a1b      	ldrb	r3, [r3, #8]
 8014cb6:	b25b      	sxtb	r3, r3
 8014cb8:	111b      	asrs	r3, r3, #4
 8014cba:	b25b      	sxtb	r3, r3
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	dd03      	ble.n	8014cc8 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8014cc0:	230f      	movs	r3, #15
 8014cc2:	18fb      	adds	r3, r7, r3
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8014cc8:	230e      	movs	r3, #14
 8014cca:	18fb      	adds	r3, r7, r3
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	2201      	movs	r2, #1
 8014cd0:	4053      	eors	r3, r2
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d013      	beq.n	8014d00 <RegionEU868ChannelAdd+0xe8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	220c      	movs	r2, #12
 8014ce0:	18ba      	adds	r2, r7, r2
 8014ce2:	0011      	movs	r1, r2
 8014ce4:	0018      	movs	r0, r3
 8014ce6:	f7fe fe0f 	bl	8013908 <VerifyRfFreq>
 8014cea:	0003      	movs	r3, r0
 8014cec:	001a      	movs	r2, r3
 8014cee:	2301      	movs	r3, #1
 8014cf0:	4053      	eors	r3, r2
 8014cf2:	b2db      	uxtb	r3, r3
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d003      	beq.n	8014d00 <RegionEU868ChannelAdd+0xe8>
        {
            freqInvalid = true;
 8014cf8:	230e      	movs	r3, #14
 8014cfa:	18fb      	adds	r3, r7, r3
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8014d00:	230f      	movs	r3, #15
 8014d02:	18fb      	adds	r3, r7, r3
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d006      	beq.n	8014d18 <RegionEU868ChannelAdd+0x100>
 8014d0a:	230e      	movs	r3, #14
 8014d0c:	18fb      	adds	r3, r7, r3
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d001      	beq.n	8014d18 <RegionEU868ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8014d14:	2306      	movs	r3, #6
 8014d16:	e03d      	b.n	8014d94 <RegionEU868ChannelAdd+0x17c>
    }
    if( drInvalid == true )
 8014d18:	230f      	movs	r3, #15
 8014d1a:	18fb      	adds	r3, r7, r3
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d001      	beq.n	8014d26 <RegionEU868ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8014d22:	2305      	movs	r3, #5
 8014d24:	e036      	b.n	8014d94 <RegionEU868ChannelAdd+0x17c>
    }
    if( freqInvalid == true )
 8014d26:	230e      	movs	r3, #14
 8014d28:	18fb      	adds	r3, r7, r3
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d001      	beq.n	8014d34 <RegionEU868ChannelAdd+0x11c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8014d30:	2304      	movs	r3, #4
 8014d32:	e02f      	b.n	8014d94 <RegionEU868ChannelAdd+0x17c>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8014d34:	240d      	movs	r4, #13
 8014d36:	193b      	adds	r3, r7, r4
 8014d38:	781a      	ldrb	r2, [r3, #0]
 8014d3a:	0013      	movs	r3, r2
 8014d3c:	005b      	lsls	r3, r3, #1
 8014d3e:	189b      	adds	r3, r3, r2
 8014d40:	009b      	lsls	r3, r3, #2
 8014d42:	4a16      	ldr	r2, [pc, #88]	; (8014d9c <RegionEU868ChannelAdd+0x184>)
 8014d44:	1898      	adds	r0, r3, r2
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	220c      	movs	r2, #12
 8014d4c:	0019      	movs	r1, r3
 8014d4e:	f000 fb8b 	bl	8015468 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8014d52:	193b      	adds	r3, r7, r4
 8014d54:	781a      	ldrb	r2, [r3, #0]
 8014d56:	230c      	movs	r3, #12
 8014d58:	18fb      	adds	r3, r7, r3
 8014d5a:	7818      	ldrb	r0, [r3, #0]
 8014d5c:	490f      	ldr	r1, [pc, #60]	; (8014d9c <RegionEU868ChannelAdd+0x184>)
 8014d5e:	0013      	movs	r3, r2
 8014d60:	005b      	lsls	r3, r3, #1
 8014d62:	189b      	adds	r3, r3, r2
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	18cb      	adds	r3, r1, r3
 8014d68:	3309      	adds	r3, #9
 8014d6a:	1c02      	adds	r2, r0, #0
 8014d6c:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8014d6e:	4a0b      	ldr	r2, [pc, #44]	; (8014d9c <RegionEU868ChannelAdd+0x184>)
 8014d70:	2388      	movs	r3, #136	; 0x88
 8014d72:	005b      	lsls	r3, r3, #1
 8014d74:	5ad3      	ldrh	r3, [r2, r3]
 8014d76:	b21a      	sxth	r2, r3
 8014d78:	193b      	adds	r3, r7, r4
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	2101      	movs	r1, #1
 8014d7e:	4099      	lsls	r1, r3
 8014d80:	000b      	movs	r3, r1
 8014d82:	b21b      	sxth	r3, r3
 8014d84:	4313      	orrs	r3, r2
 8014d86:	b21b      	sxth	r3, r3
 8014d88:	b299      	uxth	r1, r3
 8014d8a:	4a04      	ldr	r2, [pc, #16]	; (8014d9c <RegionEU868ChannelAdd+0x184>)
 8014d8c:	2388      	movs	r3, #136	; 0x88
 8014d8e:	005b      	lsls	r3, r3, #1
 8014d90:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	0018      	movs	r0, r3
 8014d96:	46bd      	mov	sp, r7
 8014d98:	b005      	add	sp, #20
 8014d9a:	bd90      	pop	{r4, r7, pc}
 8014d9c:	20000dcc 	.word	0x20000dcc

08014da0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8014da0:	b590      	push	{r4, r7, lr}
 8014da2:	b085      	sub	sp, #20
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8014da8:	210f      	movs	r1, #15
 8014daa:	187b      	adds	r3, r7, r1
 8014dac:	687a      	ldr	r2, [r7, #4]
 8014dae:	7812      	ldrb	r2, [r2, #0]
 8014db0:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8014db2:	187b      	adds	r3, r7, r1
 8014db4:	781b      	ldrb	r3, [r3, #0]
 8014db6:	2b02      	cmp	r3, #2
 8014db8:	d801      	bhi.n	8014dbe <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	e015      	b.n	8014dea <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8014dbe:	240f      	movs	r4, #15
 8014dc0:	193b      	adds	r3, r7, r4
 8014dc2:	781a      	ldrb	r2, [r3, #0]
 8014dc4:	490b      	ldr	r1, [pc, #44]	; (8014df4 <RegionEU868ChannelsRemove+0x54>)
 8014dc6:	0013      	movs	r3, r2
 8014dc8:	005b      	lsls	r3, r3, #1
 8014dca:	189b      	adds	r3, r3, r2
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	18cb      	adds	r3, r1, r3
 8014dd0:	220c      	movs	r2, #12
 8014dd2:	2100      	movs	r1, #0
 8014dd4:	0018      	movs	r0, r3
 8014dd6:	f009 fe45 	bl	801ea64 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8014dda:	193b      	adds	r3, r7, r4
 8014ddc:	7819      	ldrb	r1, [r3, #0]
 8014dde:	4b06      	ldr	r3, [pc, #24]	; (8014df8 <RegionEU868ChannelsRemove+0x58>)
 8014de0:	2210      	movs	r2, #16
 8014de2:	0018      	movs	r0, r3
 8014de4:	f7fe f8d2 	bl	8012f8c <RegionCommonChanDisable>
 8014de8:	0003      	movs	r3, r0
}
 8014dea:	0018      	movs	r0, r3
 8014dec:	46bd      	mov	sp, r7
 8014dee:	b005      	add	sp, #20
 8014df0:	bd90      	pop	{r4, r7, pc}
 8014df2:	46c0      	nop			; (mov r8, r8)
 8014df4:	20000dcc 	.word	0x20000dcc
 8014df8:	20000edc 	.word	0x20000edc

08014dfc <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8014dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dfe:	b085      	sub	sp, #20
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2002      	movs	r0, #2
 8014e08:	5618      	ldrsb	r0, [r3, r0]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	0019      	movs	r1, r3
 8014e10:	4a21      	ldr	r2, [pc, #132]	; (8014e98 <RegionEU868SetContinuousWave+0x9c>)
 8014e12:	000b      	movs	r3, r1
 8014e14:	005b      	lsls	r3, r3, #1
 8014e16:	185b      	adds	r3, r3, r1
 8014e18:	009b      	lsls	r3, r3, #2
 8014e1a:	18d3      	adds	r3, r2, r3
 8014e1c:	3309      	adds	r3, #9
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	4a1d      	ldr	r2, [pc, #116]	; (8014e98 <RegionEU868SetContinuousWave+0x9c>)
 8014e22:	330c      	adds	r3, #12
 8014e24:	011b      	lsls	r3, r3, #4
 8014e26:	18d3      	adds	r3, r2, r3
 8014e28:	3302      	adds	r3, #2
 8014e2a:	2100      	movs	r1, #0
 8014e2c:	5659      	ldrsb	r1, [r3, r1]
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2201      	movs	r2, #1
 8014e32:	569a      	ldrsb	r2, [r3, r2]
 8014e34:	260f      	movs	r6, #15
 8014e36:	19bc      	adds	r4, r7, r6
 8014e38:	4b18      	ldr	r3, [pc, #96]	; (8014e9c <RegionEU868SetContinuousWave+0xa0>)
 8014e3a:	f7fe fd3d 	bl	80138b8 <LimitTxPower>
 8014e3e:	0003      	movs	r3, r0
 8014e40:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8014e42:	200e      	movs	r0, #14
 8014e44:	183b      	adds	r3, r7, r0
 8014e46:	2200      	movs	r2, #0
 8014e48:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	0019      	movs	r1, r3
 8014e50:	4a11      	ldr	r2, [pc, #68]	; (8014e98 <RegionEU868SetContinuousWave+0x9c>)
 8014e52:	000b      	movs	r3, r1
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	185b      	adds	r3, r3, r1
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	589b      	ldr	r3, [r3, r2]
 8014e5c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6859      	ldr	r1, [r3, #4]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	689a      	ldr	r2, [r3, #8]
 8014e66:	0005      	movs	r5, r0
 8014e68:	183c      	adds	r4, r7, r0
 8014e6a:	19bb      	adds	r3, r7, r6
 8014e6c:	781b      	ldrb	r3, [r3, #0]
 8014e6e:	b25b      	sxtb	r3, r3
 8014e70:	0018      	movs	r0, r3
 8014e72:	f7fe fc15 	bl	80136a0 <RegionCommonComputeTxPower>
 8014e76:	0003      	movs	r3, r0
 8014e78:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8014e7a:	4b09      	ldr	r3, [pc, #36]	; (8014ea0 <RegionEU868SetContinuousWave+0xa4>)
 8014e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	8994      	ldrh	r4, [r2, #12]
 8014e82:	0028      	movs	r0, r5
 8014e84:	183a      	adds	r2, r7, r0
 8014e86:	2100      	movs	r1, #0
 8014e88:	5651      	ldrsb	r1, [r2, r1]
 8014e8a:	68b8      	ldr	r0, [r7, #8]
 8014e8c:	0022      	movs	r2, r4
 8014e8e:	4798      	blx	r3
}
 8014e90:	46c0      	nop			; (mov r8, r8)
 8014e92:	46bd      	mov	sp, r7
 8014e94:	b005      	add	sp, #20
 8014e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e98:	20000dcc 	.word	0x20000dcc
 8014e9c:	20000edc 	.word	0x20000edc
 8014ea0:	08020a5c 	.word	0x08020a5c

08014ea4 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014ea4:	b590      	push	{r4, r7, lr}
 8014ea6:	b085      	sub	sp, #20
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	0004      	movs	r4, r0
 8014eac:	0008      	movs	r0, r1
 8014eae:	0011      	movs	r1, r2
 8014eb0:	1dfb      	adds	r3, r7, #7
 8014eb2:	1c22      	adds	r2, r4, #0
 8014eb4:	701a      	strb	r2, [r3, #0]
 8014eb6:	1dbb      	adds	r3, r7, #6
 8014eb8:	1c02      	adds	r2, r0, #0
 8014eba:	701a      	strb	r2, [r3, #0]
 8014ebc:	1d7b      	adds	r3, r7, #5
 8014ebe:	1c0a      	adds	r2, r1, #0
 8014ec0:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8014ec2:	1dbb      	adds	r3, r7, #6
 8014ec4:	781a      	ldrb	r2, [r3, #0]
 8014ec6:	1d7b      	adds	r3, r7, #5
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	1ad3      	subs	r3, r2, r3
 8014ecc:	b2da      	uxtb	r2, r3
 8014ece:	210f      	movs	r1, #15
 8014ed0:	187b      	adds	r3, r7, r1
 8014ed2:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8014ed4:	187b      	adds	r3, r7, r1
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8014eda:	d903      	bls.n	8014ee4 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8014edc:	230f      	movs	r3, #15
 8014ede:	18fb      	adds	r3, r7, r3
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8014ee4:	230f      	movs	r3, #15
 8014ee6:	18fb      	adds	r3, r7, r3
 8014ee8:	781b      	ldrb	r3, [r3, #0]
}
 8014eea:	0018      	movs	r0, r3
 8014eec:	46bd      	mov	sp, r7
 8014eee:	b005      	add	sp, #20
 8014ef0:	bd90      	pop	{r4, r7, pc}
	...

08014ef4 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8014ef4:	b082      	sub	sp, #8
 8014ef6:	b580      	push	{r7, lr}
 8014ef8:	b086      	sub	sp, #24
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	60f8      	str	r0, [r7, #12]
 8014efe:	1d38      	adds	r0, r7, #4
 8014f00:	6001      	str	r1, [r0, #0]
 8014f02:	6042      	str	r2, [r0, #4]
 8014f04:	2204      	movs	r2, #4
 8014f06:	2120      	movs	r1, #32
 8014f08:	468c      	mov	ip, r1
 8014f0a:	44bc      	add	ip, r7
 8014f0c:	4462      	add	r2, ip
 8014f0e:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8014f10:	2110      	movs	r1, #16
 8014f12:	187b      	adds	r3, r7, r1
 8014f14:	2200      	movs	r2, #0
 8014f16:	601a      	str	r2, [r3, #0]
 8014f18:	187b      	adds	r3, r7, r1
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 8014f1e:	1d3b      	adds	r3, r7, #4
 8014f20:	681a      	ldr	r2, [r3, #0]
 8014f22:	2304      	movs	r3, #4
 8014f24:	2020      	movs	r0, #32
 8014f26:	4684      	mov	ip, r0
 8014f28:	44bc      	add	ip, r7
 8014f2a:	4463      	add	r3, ip
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	18d2      	adds	r2, r2, r3
 8014f30:	187b      	adds	r3, r7, r1
 8014f32:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014f34:	1d3b      	adds	r3, r7, #4
 8014f36:	2204      	movs	r2, #4
 8014f38:	5e9b      	ldrsh	r3, [r3, r2]
 8014f3a:	b29a      	uxth	r2, r3
 8014f3c:	2304      	movs	r3, #4
 8014f3e:	2020      	movs	r0, #32
 8014f40:	4684      	mov	ip, r0
 8014f42:	44bc      	add	ip, r7
 8014f44:	4463      	add	r3, ip
 8014f46:	2004      	movs	r0, #4
 8014f48:	5e1b      	ldrsh	r3, [r3, r0]
 8014f4a:	b29b      	uxth	r3, r3
 8014f4c:	18d3      	adds	r3, r2, r3
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	b21a      	sxth	r2, r3
 8014f52:	187b      	adds	r3, r7, r1
 8014f54:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 8014f56:	187b      	adds	r3, r7, r1
 8014f58:	2204      	movs	r2, #4
 8014f5a:	5e9b      	ldrsh	r3, [r3, r2]
 8014f5c:	4a0f      	ldr	r2, [pc, #60]	; (8014f9c <SysTimeAdd+0xa8>)
 8014f5e:	4293      	cmp	r3, r2
 8014f60:	dd10      	ble.n	8014f84 <SysTimeAdd+0x90>
    {
        c.Seconds++;
 8014f62:	2110      	movs	r1, #16
 8014f64:	187b      	adds	r3, r7, r1
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	1c5a      	adds	r2, r3, #1
 8014f6a:	187b      	adds	r3, r7, r1
 8014f6c:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 8014f6e:	187b      	adds	r3, r7, r1
 8014f70:	2204      	movs	r2, #4
 8014f72:	5e9b      	ldrsh	r3, [r3, r2]
 8014f74:	b29b      	uxth	r3, r3
 8014f76:	4a0a      	ldr	r2, [pc, #40]	; (8014fa0 <SysTimeAdd+0xac>)
 8014f78:	4694      	mov	ip, r2
 8014f7a:	4463      	add	r3, ip
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	b21a      	sxth	r2, r3
 8014f80:	187b      	adds	r3, r7, r1
 8014f82:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2210      	movs	r2, #16
 8014f88:	18ba      	adds	r2, r7, r2
 8014f8a:	ca03      	ldmia	r2!, {r0, r1}
 8014f8c:	c303      	stmia	r3!, {r0, r1}
}
 8014f8e:	68f8      	ldr	r0, [r7, #12]
 8014f90:	46bd      	mov	sp, r7
 8014f92:	b006      	add	sp, #24
 8014f94:	bc80      	pop	{r7}
 8014f96:	bc08      	pop	{r3}
 8014f98:	b002      	add	sp, #8
 8014f9a:	4718      	bx	r3
 8014f9c:	000003e7 	.word	0x000003e7
 8014fa0:	fffffc18 	.word	0xfffffc18

08014fa4 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8014fa4:	b082      	sub	sp, #8
 8014fa6:	b580      	push	{r7, lr}
 8014fa8:	b086      	sub	sp, #24
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	60f8      	str	r0, [r7, #12]
 8014fae:	1d38      	adds	r0, r7, #4
 8014fb0:	6001      	str	r1, [r0, #0]
 8014fb2:	6042      	str	r2, [r0, #4]
 8014fb4:	2204      	movs	r2, #4
 8014fb6:	2120      	movs	r1, #32
 8014fb8:	468c      	mov	ip, r1
 8014fba:	44bc      	add	ip, r7
 8014fbc:	4462      	add	r2, ip
 8014fbe:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8014fc0:	2110      	movs	r1, #16
 8014fc2:	187b      	adds	r3, r7, r1
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	601a      	str	r2, [r3, #0]
 8014fc8:	187b      	adds	r3, r7, r1
 8014fca:	2200      	movs	r2, #0
 8014fcc:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 8014fce:	1d3b      	adds	r3, r7, #4
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	2304      	movs	r3, #4
 8014fd4:	2020      	movs	r0, #32
 8014fd6:	4684      	mov	ip, r0
 8014fd8:	44bc      	add	ip, r7
 8014fda:	4463      	add	r3, ip
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	1ad2      	subs	r2, r2, r3
 8014fe0:	187b      	adds	r3, r7, r1
 8014fe2:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014fe4:	1d3b      	adds	r3, r7, #4
 8014fe6:	2204      	movs	r2, #4
 8014fe8:	5e9b      	ldrsh	r3, [r3, r2]
 8014fea:	b29a      	uxth	r2, r3
 8014fec:	2304      	movs	r3, #4
 8014fee:	2020      	movs	r0, #32
 8014ff0:	4684      	mov	ip, r0
 8014ff2:	44bc      	add	ip, r7
 8014ff4:	4463      	add	r3, ip
 8014ff6:	2004      	movs	r0, #4
 8014ff8:	5e1b      	ldrsh	r3, [r3, r0]
 8014ffa:	b29b      	uxth	r3, r3
 8014ffc:	1ad3      	subs	r3, r2, r3
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	b21a      	sxth	r2, r3
 8015002:	187b      	adds	r3, r7, r1
 8015004:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 8015006:	187b      	adds	r3, r7, r1
 8015008:	2204      	movs	r2, #4
 801500a:	5e9b      	ldrsh	r3, [r3, r2]
 801500c:	2b00      	cmp	r3, #0
 801500e:	da11      	bge.n	8015034 <SysTimeSub+0x90>
    {
        c.Seconds--;
 8015010:	2110      	movs	r1, #16
 8015012:	187b      	adds	r3, r7, r1
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	1e5a      	subs	r2, r3, #1
 8015018:	187b      	adds	r3, r7, r1
 801501a:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 801501c:	187b      	adds	r3, r7, r1
 801501e:	2204      	movs	r2, #4
 8015020:	5e9b      	ldrsh	r3, [r3, r2]
 8015022:	b29b      	uxth	r3, r3
 8015024:	22fa      	movs	r2, #250	; 0xfa
 8015026:	0092      	lsls	r2, r2, #2
 8015028:	4694      	mov	ip, r2
 801502a:	4463      	add	r3, ip
 801502c:	b29b      	uxth	r3, r3
 801502e:	b21a      	sxth	r2, r3
 8015030:	187b      	adds	r3, r7, r1
 8015032:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	2210      	movs	r2, #16
 8015038:	18ba      	adds	r2, r7, r2
 801503a:	ca03      	ldmia	r2!, {r0, r1}
 801503c:	c303      	stmia	r3!, {r0, r1}
}
 801503e:	68f8      	ldr	r0, [r7, #12]
 8015040:	46bd      	mov	sp, r7
 8015042:	b006      	add	sp, #24
 8015044:	bc80      	pop	{r7}
 8015046:	bc08      	pop	{r3}
 8015048:	b002      	add	sp, #8
 801504a:	4718      	bx	r3

0801504c <SysTimeSet>:


void SysTimeSet( SysTime_t sysTime )
{
 801504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801504e:	b085      	sub	sp, #20
 8015050:	af00      	add	r7, sp, #0
 8015052:	003b      	movs	r3, r7
 8015054:	6018      	str	r0, [r3, #0]
 8015056:	6059      	str	r1, [r3, #4]

	uint64_t t = sysTime.Seconds;
 8015058:	003b      	movs	r3, r7
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	60bb      	str	r3, [r7, #8]
 801505e:	2300      	movs	r3, #0
 8015060:	60fb      	str	r3, [r7, #12]
	t *= 1000;
 8015062:	22fa      	movs	r2, #250	; 0xfa
 8015064:	0092      	lsls	r2, r2, #2
 8015066:	2300      	movs	r3, #0
 8015068:	68b8      	ldr	r0, [r7, #8]
 801506a:	68f9      	ldr	r1, [r7, #12]
 801506c:	f7eb fa4c 	bl	8000508 <__aeabi_lmul>
 8015070:	0003      	movs	r3, r0
 8015072:	000c      	movs	r4, r1
 8015074:	60bb      	str	r3, [r7, #8]
 8015076:	60fc      	str	r4, [r7, #12]
	t += sysTime.SubSeconds;
 8015078:	003b      	movs	r3, r7
 801507a:	2204      	movs	r2, #4
 801507c:	5e9b      	ldrsh	r3, [r3, r2]
 801507e:	001d      	movs	r5, r3
 8015080:	17db      	asrs	r3, r3, #31
 8015082:	001e      	movs	r6, r3
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	68fc      	ldr	r4, [r7, #12]
 8015088:	195b      	adds	r3, r3, r5
 801508a:	4174      	adcs	r4, r6
 801508c:	60bb      	str	r3, [r7, #8]
 801508e:	60fc      	str	r4, [r7, #12]
    itsdk_time_set_ms(t);
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	68fc      	ldr	r4, [r7, #12]
 8015094:	0018      	movs	r0, r3
 8015096:	0021      	movs	r1, r4
 8015098:	f007 fcdc 	bl	801ca54 <itsdk_time_set_ms>
    DeltaTime = SysTimeSub( sysTime, calendarTime );


    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
    */
}
 801509c:	46c0      	nop			; (mov r8, r8)
 801509e:	46bd      	mov	sp, r7
 80150a0:	b005      	add	sp, #20
 80150a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150a4 <SysTimeGet>:


SysTime_t SysTimeGet( void )
{
 80150a4:	b5b0      	push	{r4, r5, r7, lr}
 80150a6:	b086      	sub	sp, #24
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]

    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80150ac:	2008      	movs	r0, #8
 80150ae:	183b      	adds	r3, r7, r0
 80150b0:	2200      	movs	r2, #0
 80150b2:	601a      	str	r2, [r3, #0]
 80150b4:	0005      	movs	r5, r0
 80150b6:	183b      	adds	r3, r7, r0
 80150b8:	2200      	movs	r2, #0
 80150ba:	809a      	strh	r2, [r3, #4]
	uint64_t t = itsdk_time_get_ms();
 80150bc:	f007 fd04 	bl	801cac8 <itsdk_time_get_ms>
 80150c0:	0003      	movs	r3, r0
 80150c2:	000c      	movs	r4, r1
 80150c4:	613b      	str	r3, [r7, #16]
 80150c6:	617c      	str	r4, [r7, #20]
	sysTime.Seconds = t / 1000;
 80150c8:	6938      	ldr	r0, [r7, #16]
 80150ca:	6979      	ldr	r1, [r7, #20]
 80150cc:	22fa      	movs	r2, #250	; 0xfa
 80150ce:	0092      	lsls	r2, r2, #2
 80150d0:	2300      	movs	r3, #0
 80150d2:	f7eb f9f9 	bl	80004c8 <__aeabi_uldivmod>
 80150d6:	0003      	movs	r3, r0
 80150d8:	000c      	movs	r4, r1
 80150da:	001a      	movs	r2, r3
 80150dc:	0028      	movs	r0, r5
 80150de:	183b      	adds	r3, r7, r0
 80150e0:	601a      	str	r2, [r3, #0]
	sysTime.SubSeconds = t - (sysTime.Seconds*1000);
 80150e2:	693b      	ldr	r3, [r7, #16]
 80150e4:	697c      	ldr	r4, [r7, #20]
 80150e6:	b29a      	uxth	r2, r3
 80150e8:	183b      	adds	r3, r7, r0
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	21fa      	movs	r1, #250	; 0xfa
 80150f0:	0089      	lsls	r1, r1, #2
 80150f2:	434b      	muls	r3, r1
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	1ad3      	subs	r3, r2, r3
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	b21a      	sxth	r2, r3
 80150fc:	183b      	adds	r3, r7, r0
 80150fe:	809a      	strh	r2, [r3, #4]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
*/
    return sysTime;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	183a      	adds	r2, r7, r0
 8015104:	ca03      	ldmia	r2!, {r0, r1}
 8015106:	c303      	stmia	r3!, {r0, r1}
}
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	46bd      	mov	sp, r7
 801510c:	b006      	add	sp, #24
 801510e:	bdb0      	pop	{r4, r5, r7, pc}

08015110 <removeFromList>:
 */

/**
 * Remove a element from the list
 */
static void removeFromList( TimerEvent_t *obj ) {
 8015110:	b580      	push	{r7, lr}
 8015112:	b084      	sub	sp, #16
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
	if( TimerListHead == obj ) {
 8015118:	4b11      	ldr	r3, [pc, #68]	; (8015160 <removeFromList+0x50>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	429a      	cmp	r2, r3
 8015120:	d105      	bne.n	801512e <removeFromList+0x1e>
		TimerListHead = TimerListHead->Next;
 8015122:	4b0f      	ldr	r3, [pc, #60]	; (8015160 <removeFromList+0x50>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	695a      	ldr	r2, [r3, #20]
 8015128:	4b0d      	ldr	r3, [pc, #52]	; (8015160 <removeFromList+0x50>)
 801512a:	601a      	str	r2, [r3, #0]
			   break;
		   }
		   cur = cur->Next;
		}
	}
}
 801512c:	e014      	b.n	8015158 <removeFromList+0x48>
		TimerEvent_t* cur = TimerListHead;
 801512e:	4b0c      	ldr	r3, [pc, #48]	; (8015160 <removeFromList+0x50>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 8015134:	e00d      	b.n	8015152 <removeFromList+0x42>
		   if( cur->Next == obj ) {
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	695b      	ldr	r3, [r3, #20]
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	429a      	cmp	r2, r3
 801513e:	d105      	bne.n	801514c <removeFromList+0x3c>
			   cur->Next = obj->Next;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	695a      	ldr	r2, [r3, #20]
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	615a      	str	r2, [r3, #20]
			   break;
 8015148:	46c0      	nop			; (mov r8, r8)
}
 801514a:	e005      	b.n	8015158 <removeFromList+0x48>
		   cur = cur->Next;
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	695b      	ldr	r3, [r3, #20]
 8015150:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d1ee      	bne.n	8015136 <removeFromList+0x26>
}
 8015158:	46c0      	nop			; (mov r8, r8)
 801515a:	46bd      	mov	sp, r7
 801515c:	b004      	add	sp, #16
 801515e:	bd80      	pop	{r7, pc}
 8015160:	20000ee0 	.word	0x20000ee0

08015164 <TimerExists>:

/**
 * Check if the Object to be added is not already in the list
 */
static bool TimerExists( TimerEvent_t *obj )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801516c:	4b0a      	ldr	r3, [pc, #40]	; (8015198 <TimerExists+0x34>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	60fb      	str	r3, [r7, #12]

  while( cur != NULL ) {
 8015172:	e008      	b.n	8015186 <TimerExists+0x22>
    if( cur == obj ) {
 8015174:	68fa      	ldr	r2, [r7, #12]
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	429a      	cmp	r2, r3
 801517a:	d101      	bne.n	8015180 <TimerExists+0x1c>
      return true;
 801517c:	2301      	movs	r3, #1
 801517e:	e006      	b.n	801518e <TimerExists+0x2a>
    }
    cur = cur->Next;
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	695b      	ldr	r3, [r3, #20]
 8015184:	60fb      	str	r3, [r7, #12]
  while( cur != NULL ) {
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d1f3      	bne.n	8015174 <TimerExists+0x10>
  }
  return false;
 801518c:	2300      	movs	r3, #0

}
 801518e:	0018      	movs	r0, r3
 8015190:	46bd      	mov	sp, r7
 8015192:	b004      	add	sp, #16
 8015194:	bd80      	pop	{r7, pc}
 8015196:	46c0      	nop			; (mov r8, r8)
 8015198:	20000ee0 	.word	0x20000ee0

0801519c <TimerInsertTimer>:

/**
 * Insert the timer, as we manage it with no order, just put it on the head
 */
static void TimerInsertTimer( TimerEvent_t *obj)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b082      	sub	sp, #8
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
	obj->Next = TimerListHead;
 80151a4:	4b05      	ldr	r3, [pc, #20]	; (80151bc <TimerInsertTimer+0x20>)
 80151a6:	681a      	ldr	r2, [r3, #0]
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	615a      	str	r2, [r3, #20]
	TimerListHead = obj;
 80151ac:	4b03      	ldr	r3, [pc, #12]	; (80151bc <TimerInsertTimer+0x20>)
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	601a      	str	r2, [r3, #0]
}
 80151b2:	46c0      	nop			; (mov r8, r8)
 80151b4:	46bd      	mov	sp, r7
 80151b6:	b002      	add	sp, #8
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	46c0      	nop			; (mov r8, r8)
 80151bc:	20000ee0 	.word	0x20000ee0

080151c0 <TimerCallback>:


/** *********************************************************************************
 * This is the callback used for all the timer, it calls the callback function
 */
static void TimerCallback( uint32_t value ) {
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]

	TimerEvent_t *obj = (TimerEvent_t *)value;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	60fb      	str	r3, [r7, #12]
	LOG_DEBUG_LORAWAN(("TimerCallback (%d)\r\n",obj->ReloadValue));
	obj->IsStarted = false;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2200      	movs	r2, #0
 80151d0:	721a      	strb	r2, [r3, #8]
	if (obj->Callback != NULL) {
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d006      	beq.n	80151e8 <TimerCallback+0x28>
		obj->Callback(obj->Context);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	68da      	ldr	r2, [r3, #12]
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	691b      	ldr	r3, [r3, #16]
 80151e2:	0018      	movs	r0, r3
 80151e4:	4790      	blx	r2
 80151e6:	e004      	b.n	80151f2 <TimerCallback+0x32>
	} else {
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_NOCALLBACK,0);
 80151e8:	4b06      	ldr	r3, [pc, #24]	; (8015204 <TimerCallback+0x44>)
 80151ea:	2100      	movs	r1, #0
 80151ec:	0018      	movs	r0, r3
 80151ee:	f006 f9f1 	bl	801b5d4 <itsdk_error_report>
	}
	removeFromList(obj);
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	0018      	movs	r0, r3
 80151f6:	f7ff ff8b 	bl	8015110 <removeFromList>
}
 80151fa:	46c0      	nop			; (mov r8, r8)
 80151fc:	46bd      	mov	sp, r7
 80151fe:	b004      	add	sp, #16
 8015200:	bd80      	pop	{r7, pc}
 8015202:	46c0      	nop			; (mov r8, r8)
 8015204:	c0000104 	.word	0xc0000104

08015208 <TimerInit>:
/** ***********************************************************************************
 * Add / remove timer ...
 */

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]
  LOG_DEBUG_LORAWAN(("TimerInit\r\n"));

  obj->Timestamp = 0;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2200      	movs	r2, #0
 8015216:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2200      	movs	r2, #0
 801521c:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2200      	movs	r2, #0
 8015222:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2200      	movs	r2, #0
 8015228:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	683a      	ldr	r2, [r7, #0]
 801522e:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2200      	movs	r2, #0
 8015234:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2200      	movs	r2, #0
 801523a:	615a      	str	r2, [r3, #20]
}
 801523c:	46c0      	nop			; (mov r8, r8)
 801523e:	46bd      	mov	sp, r7
 8015240:	b002      	add	sp, #8
 8015242:	bd80      	pop	{r7, pc}

08015244 <TimerSetValue>:
 * This is changing the duration of the timer. The value is given in ms.
 * We search for the itsdk timer structure and update it when running.
 * If not running the timestamp field will keep the value in ms.
 */
void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b084      	sub	sp, #16
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	6039      	str	r1, [r7, #0]
	LOG_DEBUG_LORAWAN(("TimerSetValue %d\r\n",value));
	// search the real timer based on the context
	itsdk_stimer_slot_t * t = itsdk_stimer_get(TimerCallback,(uint32_t)obj);
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	4b11      	ldr	r3, [pc, #68]	; (8015298 <TimerSetValue+0x54>)
 8015252:	0011      	movs	r1, r2
 8015254:	0018      	movs	r0, r3
 8015256:	f007 fd43 	bl	801cce0 <itsdk_stimer_get>
 801525a:	0003      	movs	r3, r0
 801525c:	60fb      	str	r3, [r7, #12]
	if ( t != NULL ) {
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d00e      	beq.n	8015282 <TimerSetValue+0x3e>
		// best is to stop the timer and restart it with the new duration
		TimerStop(obj);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	0018      	movs	r0, r3
 8015268:	f000 f86e 	bl	8015348 <TimerStop>
		obj->Timestamp = value;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	683a      	ldr	r2, [r7, #0]
 8015270:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	683a      	ldr	r2, [r7, #0]
 8015276:	605a      	str	r2, [r3, #4]
		TimerStart(obj);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	0018      	movs	r0, r3
 801527c:	f000 f80e 	bl	801529c <TimerStart>
	} else {
		// the timer is not running, so we just need to update the local structure
		obj->Timestamp = value;
		obj->ReloadValue = value;
	}
}
 8015280:	e005      	b.n	801528e <TimerSetValue+0x4a>
		obj->Timestamp = value;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	683a      	ldr	r2, [r7, #0]
 8015286:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	683a      	ldr	r2, [r7, #0]
 801528c:	605a      	str	r2, [r3, #4]
}
 801528e:	46c0      	nop			; (mov r8, r8)
 8015290:	46bd      	mov	sp, r7
 8015292:	b004      	add	sp, #16
 8015294:	bd80      	pop	{r7, pc}
 8015296:	46c0      	nop			; (mov r8, r8)
 8015298:	080151c1 	.word	0x080151c1

0801529c <TimerStart>:

/**
 * Add a Timer in the list and start it using the it_sdk timer module
 */
void TimerStart( TimerEvent_t *obj )
{
 801529c:	b5b0      	push	{r4, r5, r7, lr}
 801529e:	b084      	sub	sp, #16
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("St %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 80152a4:	f008 fce0 	bl	801dc68 <itsdk_enterCriticalSection>
	// do not add a timer already existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == true ) ) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d005      	beq.n	80152ba <TimerStart+0x1e>
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	0018      	movs	r0, r3
 80152b2:	f7ff ff57 	bl	8015164 <TimerExists>
 80152b6:	1e03      	subs	r3, r0, #0
 80152b8:	d007      	beq.n	80152ca <TimerStart+0x2e>
		itsdk_leaveCriticalSection();
 80152ba:	f008 fce9 	bl	801dc90 <itsdk_leaveCriticalSection>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_ALREADY_SET,0);
 80152be:	4b1e      	ldr	r3, [pc, #120]	; (8015338 <TimerStart+0x9c>)
 80152c0:	2100      	movs	r1, #0
 80152c2:	0018      	movs	r0, r3
 80152c4:	f006 f986 	bl	801b5d4 <itsdk_error_report>
	    return;
 80152c8:	e032      	b.n	8015330 <TimerStart+0x94>
	}
	obj->Timestamp = obj->ReloadValue;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	685a      	ldr	r2, [r3, #4]
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	601a      	str	r2, [r3, #0]
	obj->IsStarted = true;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2201      	movs	r2, #1
 80152d6:	721a      	strb	r2, [r3, #8]
	obj->IsNext2Expire = false;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2200      	movs	r2, #0
 80152dc:	725a      	strb	r2, [r3, #9]

	if( TimerListHead == NULL ) {
 80152de:	4b17      	ldr	r3, [pc, #92]	; (801533c <TimerStart+0xa0>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d106      	bne.n	80152f4 <TimerStart+0x58>
		obj->Next = NULL;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2200      	movs	r2, #0
 80152ea:	615a      	str	r2, [r3, #20]
		TimerListHead = obj;
 80152ec:	4b13      	ldr	r3, [pc, #76]	; (801533c <TimerStart+0xa0>)
 80152ee:	687a      	ldr	r2, [r7, #4]
 80152f0:	601a      	str	r2, [r3, #0]
 80152f2:	e003      	b.n	80152fc <TimerStart+0x60>
	} else {
	  // obj->Timestamp += elapsedTime; Not needed
      TimerInsertTimer( obj);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	0018      	movs	r0, r3
 80152f8:	f7ff ff50 	bl	801519c <TimerInsertTimer>
	}
	itsdk_timer_return_t ret = itsdk_stimer_register(
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6858      	ldr	r0, [r3, #4]
 8015300:	687a      	ldr	r2, [r7, #4]
 8015302:	250f      	movs	r5, #15
 8015304:	197c      	adds	r4, r7, r5
 8015306:	490e      	ldr	r1, [pc, #56]	; (8015340 <TimerStart+0xa4>)
 8015308:	2300      	movs	r3, #0
 801530a:	f007 fc0f 	bl	801cb2c <itsdk_stimer_register>
 801530e:	0003      	movs	r3, r0
 8015310:	7023      	strb	r3, [r4, #0]
									obj->ReloadValue,
									TimerCallback,
									(uint32_t)obj,
									TIMER_ACCEPT_LOWPOWER
		 	 	 	 	 	   );
	if ( ret != TIMER_INIT_SUCCESS ) {
 8015312:	197b      	adds	r3, r7, r5
 8015314:	781b      	ldrb	r3, [r3, #0]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d008      	beq.n	801532c <TimerStart+0x90>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_INITFLD,(uint16_t)ret);
 801531a:	230f      	movs	r3, #15
 801531c:	18fb      	adds	r3, r7, r3
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	b29b      	uxth	r3, r3
 8015322:	4a08      	ldr	r2, [pc, #32]	; (8015344 <TimerStart+0xa8>)
 8015324:	0019      	movs	r1, r3
 8015326:	0010      	movs	r0, r2
 8015328:	f006 f954 	bl	801b5d4 <itsdk_error_report>
	}
	itsdk_leaveCriticalSection();
 801532c:	f008 fcb0 	bl	801dc90 <itsdk_leaveCriticalSection>

}
 8015330:	46bd      	mov	sp, r7
 8015332:	b004      	add	sp, #16
 8015334:	bdb0      	pop	{r4, r5, r7, pc}
 8015336:	46c0      	nop			; (mov r8, r8)
 8015338:	80000011 	.word	0x80000011
 801533c:	20000ee0 	.word	0x20000ee0
 8015340:	080151c1 	.word	0x080151c1
 8015344:	d0000105 	.word	0xd0000105

08015348 <TimerStop>:

/**
 *
 */
void TimerStop( TimerEvent_t *obj ) 
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("Sp %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 8015350:	f008 fc8a 	bl	801dc68 <itsdk_enterCriticalSection>
	// do not stop a non existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == false ) ) {
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d00a      	beq.n	8015370 <TimerStop+0x28>
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	0018      	movs	r0, r3
 801535e:	f7ff ff01 	bl	8015164 <TimerExists>
 8015362:	0003      	movs	r3, r0
 8015364:	001a      	movs	r2, r3
 8015366:	2301      	movs	r3, #1
 8015368:	4053      	eors	r3, r2
 801536a:	b2db      	uxtb	r3, r3
 801536c:	2b00      	cmp	r3, #0
 801536e:	d002      	beq.n	8015376 <TimerStop+0x2e>
		itsdk_leaveCriticalSection();
 8015370:	f008 fc8e 	bl	801dc90 <itsdk_leaveCriticalSection>
	    return;
 8015374:	e012      	b.n	801539c <TimerStop+0x54>
	}

	if (obj->IsStarted) {
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	7a1b      	ldrb	r3, [r3, #8]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d008      	beq.n	8015390 <TimerStop+0x48>
		itsdk_stimer_stop(
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	4b08      	ldr	r3, [pc, #32]	; (80153a4 <TimerStop+0x5c>)
 8015382:	0011      	movs	r1, r2
 8015384:	0018      	movs	r0, r3
 8015386:	f007 fc3f 	bl	801cc08 <itsdk_stimer_stop>
							TimerCallback,
							(uint32_t)obj
						);
		obj->IsStarted = false;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2200      	movs	r2, #0
 801538e:	721a      	strb	r2, [r3, #8]
	}
	removeFromList(obj);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	0018      	movs	r0, r3
 8015394:	f7ff febc 	bl	8015110 <removeFromList>
	itsdk_leaveCriticalSection();
 8015398:	f008 fc7a 	bl	801dc90 <itsdk_leaveCriticalSection>
}  
 801539c:	46bd      	mov	sp, r7
 801539e:	b002      	add	sp, #8
 80153a0:	bd80      	pop	{r7, pc}
 80153a2:	46c0      	nop			; (mov r8, r8)
 80153a4:	080151c1 	.word	0x080151c1

080153a8 <TimerIsStarted>:
  TimerStop( obj );
  TimerStart( obj );
}

bool TimerIsStarted( TimerEvent_t *obj )
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  return obj->IsStarted;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	7a1b      	ldrb	r3, [r3, #8]
}
 80153b4:	0018      	movs	r0, r3
 80153b6:	46bd      	mov	sp, r7
 80153b8:	b002      	add	sp, #8
 80153ba:	bd80      	pop	{r7, pc}

080153bc <TimerGetCurrentTime>:




TimerTime_t TimerGetCurrentTime( void )
{
 80153bc:	b5b0      	push	{r4, r5, r7, lr}
 80153be:	af00      	add	r7, sp, #0
	return (uint32_t)itsdk_time_get_ms();
 80153c0:	f007 fb82 	bl	801cac8 <itsdk_time_get_ms>
 80153c4:	0003      	movs	r3, r0
 80153c6:	000c      	movs	r4, r1
}
 80153c8:	0018      	movs	r0, r3
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bdb0      	pop	{r4, r5, r7, pc}

080153ce <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 80153ce:	b580      	push	{r7, lr}
 80153d0:	b082      	sub	sp, #8
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
	return TimerGetCurrentTime() - past;
 80153d6:	f7ff fff1 	bl	80153bc <TimerGetCurrentTime>
 80153da:	0002      	movs	r2, r0
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	1ad3      	subs	r3, r2, r3
}
 80153e0:	0018      	movs	r0, r3
 80153e2:	46bd      	mov	sp, r7
 80153e4:	b002      	add	sp, #8
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80153ec:	4b08      	ldr	r3, [pc, #32]	; (8015410 <rand1+0x28>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	4a08      	ldr	r2, [pc, #32]	; (8015414 <rand1+0x2c>)
 80153f2:	4353      	muls	r3, r2
 80153f4:	4a08      	ldr	r2, [pc, #32]	; (8015418 <rand1+0x30>)
 80153f6:	189a      	adds	r2, r3, r2
 80153f8:	4b05      	ldr	r3, [pc, #20]	; (8015410 <rand1+0x28>)
 80153fa:	601a      	str	r2, [r3, #0]
 80153fc:	4b04      	ldr	r3, [pc, #16]	; (8015410 <rand1+0x28>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	4906      	ldr	r1, [pc, #24]	; (801541c <rand1+0x34>)
 8015402:	0018      	movs	r0, r3
 8015404:	f7ea ff0e 	bl	8000224 <__aeabi_uidivmod>
 8015408:	000b      	movs	r3, r1
}
 801540a:	0018      	movs	r0, r3
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}
 8015410:	20000078 	.word	0x20000078
 8015414:	41c64e6d 	.word	0x41c64e6d
 8015418:	00003039 	.word	0x00003039
 801541c:	7fffffff 	.word	0x7fffffff

08015420 <srand1>:

void srand1( uint32_t seed )
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
    next = seed;
 8015428:	4b03      	ldr	r3, [pc, #12]	; (8015438 <srand1+0x18>)
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	601a      	str	r2, [r3, #0]
}
 801542e:	46c0      	nop			; (mov r8, r8)
 8015430:	46bd      	mov	sp, r7
 8015432:	b002      	add	sp, #8
 8015434:	bd80      	pop	{r7, pc}
 8015436:	46c0      	nop			; (mov r8, r8)
 8015438:	20000078 	.word	0x20000078

0801543c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8015446:	f7ff ffcf 	bl	80153e8 <rand1>
 801544a:	683a      	ldr	r2, [r7, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	1ad3      	subs	r3, r2, r3
 8015450:	3301      	adds	r3, #1
 8015452:	0019      	movs	r1, r3
 8015454:	f7ea ffd0 	bl	80003f8 <__aeabi_idivmod>
 8015458:	000b      	movs	r3, r1
 801545a:	001a      	movs	r2, r3
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	18d3      	adds	r3, r2, r3
}
 8015460:	0018      	movs	r0, r3
 8015462:	46bd      	mov	sp, r7
 8015464:	b002      	add	sp, #8
 8015466:	bd80      	pop	{r7, pc}

08015468 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	1dbb      	adds	r3, r7, #6
 8015474:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8015476:	e007      	b.n	8015488 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8015478:	68ba      	ldr	r2, [r7, #8]
 801547a:	1c53      	adds	r3, r2, #1
 801547c:	60bb      	str	r3, [r7, #8]
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	1c59      	adds	r1, r3, #1
 8015482:	60f9      	str	r1, [r7, #12]
 8015484:	7812      	ldrb	r2, [r2, #0]
 8015486:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015488:	1dbb      	adds	r3, r7, #6
 801548a:	881b      	ldrh	r3, [r3, #0]
 801548c:	1dba      	adds	r2, r7, #6
 801548e:	1e59      	subs	r1, r3, #1
 8015490:	8011      	strh	r1, [r2, #0]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d1f0      	bne.n	8015478 <memcpy1+0x10>
    }
}
 8015496:	46c0      	nop			; (mov r8, r8)
 8015498:	46bd      	mov	sp, r7
 801549a:	b004      	add	sp, #16
 801549c:	bd80      	pop	{r7, pc}

0801549e <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801549e:	b580      	push	{r7, lr}
 80154a0:	b084      	sub	sp, #16
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	60f8      	str	r0, [r7, #12]
 80154a6:	60b9      	str	r1, [r7, #8]
 80154a8:	1dbb      	adds	r3, r7, #6
 80154aa:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 80154ac:	1dbb      	adds	r3, r7, #6
 80154ae:	881b      	ldrh	r3, [r3, #0]
 80154b0:	3b01      	subs	r3, #1
 80154b2:	68fa      	ldr	r2, [r7, #12]
 80154b4:	18d3      	adds	r3, r2, r3
 80154b6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80154b8:	e007      	b.n	80154ca <memcpyr+0x2c>
    {
        *dst-- = *src++;
 80154ba:	68ba      	ldr	r2, [r7, #8]
 80154bc:	1c53      	adds	r3, r2, #1
 80154be:	60bb      	str	r3, [r7, #8]
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	1e59      	subs	r1, r3, #1
 80154c4:	60f9      	str	r1, [r7, #12]
 80154c6:	7812      	ldrb	r2, [r2, #0]
 80154c8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80154ca:	1dbb      	adds	r3, r7, #6
 80154cc:	881b      	ldrh	r3, [r3, #0]
 80154ce:	1dba      	adds	r2, r7, #6
 80154d0:	1e59      	subs	r1, r3, #1
 80154d2:	8011      	strh	r1, [r2, #0]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d1f0      	bne.n	80154ba <memcpyr+0x1c>
    }
}
 80154d8:	46c0      	nop			; (mov r8, r8)
 80154da:	46bd      	mov	sp, r7
 80154dc:	b004      	add	sp, #16
 80154de:	bd80      	pop	{r7, pc}

080154e0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b082      	sub	sp, #8
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	0008      	movs	r0, r1
 80154ea:	0011      	movs	r1, r2
 80154ec:	1cfb      	adds	r3, r7, #3
 80154ee:	1c02      	adds	r2, r0, #0
 80154f0:	701a      	strb	r2, [r3, #0]
 80154f2:	003b      	movs	r3, r7
 80154f4:	1c0a      	adds	r2, r1, #0
 80154f6:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80154f8:	e005      	b.n	8015506 <memset1+0x26>
    {
        *dst++ = value;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	1c5a      	adds	r2, r3, #1
 80154fe:	607a      	str	r2, [r7, #4]
 8015500:	1cfa      	adds	r2, r7, #3
 8015502:	7812      	ldrb	r2, [r2, #0]
 8015504:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015506:	003b      	movs	r3, r7
 8015508:	881b      	ldrh	r3, [r3, #0]
 801550a:	003a      	movs	r2, r7
 801550c:	1e59      	subs	r1, r3, #1
 801550e:	8011      	strh	r1, [r2, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d1f2      	bne.n	80154fa <memset1+0x1a>
    }
}
 8015514:	46c0      	nop			; (mov r8, r8)
 8015516:	46bd      	mov	sp, r7
 8015518:	b002      	add	sp, #8
 801551a:	bd80      	pop	{r7, pc}

0801551c <SX1276InitLowPower>:

/**
 * Init the SX1276 device and switch it to low power.
 * This allows to have a basic init before executing the full radio init
 */
void SX1276InitLowPower( void ) {
 801551c:	b580      	push	{r7, lr}
 801551e:	af00      	add	r7, sp, #0

    LOG_INFO_SX1276((">> mSX1276InitLowPower\r\n"));

	gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8015520:	2380      	movs	r3, #128	; 0x80
 8015522:	015b      	lsls	r3, r3, #5
 8015524:	2200      	movs	r2, #0
 8015526:	0019      	movs	r1, r3
 8015528:	2000      	movs	r0, #0
 801552a:	f008 f813 	bl	801d554 <gpio_configure>
    TCXO_ON();
 801552e:	2380      	movs	r3, #128	; 0x80
 8015530:	015b      	lsls	r3, r3, #5
 8015532:	0019      	movs	r1, r3
 8015534:	2000      	movs	r0, #0
 8015536:	f008 fa15 	bl	801d964 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_WAKEUP_TIME);
 801553a:	2035      	movs	r0, #53	; 0x35
 801553c:	f008 fb6e 	bl	801dc1c <itsdk_delayMs>
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015540:	220e      	movs	r2, #14
 8015542:	2110      	movs	r1, #16
 8015544:	2001      	movs	r0, #1
 8015546:	f008 f805 	bl	801d554 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801554a:	220e      	movs	r2, #14
 801554c:	2102      	movs	r1, #2
 801554e:	2001      	movs	r0, #1
 8015550:	f008 f800 	bl	801d554 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015554:	220e      	movs	r2, #14
 8015556:	2101      	movs	r1, #1
 8015558:	2001      	movs	r0, #1
 801555a:	f007 fffb 	bl	801d554 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 801555e:	2380      	movs	r3, #128	; 0x80
 8015560:	019b      	lsls	r3, r3, #6
 8015562:	220e      	movs	r2, #14
 8015564:	0019      	movs	r1, r3
 8015566:	2002      	movs	r0, #2
 8015568:	f007 fff4 	bl	801d554 <gpio_configure>
		if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
			gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
		}
	#endif

 	gpio_configure(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN, GPIO_OUTPUT_PULLUP );
 801556c:	2380      	movs	r3, #128	; 0x80
 801556e:	021b      	lsls	r3, r3, #8
 8015570:	2201      	movs	r2, #1
 8015572:	0019      	movs	r1, r3
 8015574:	2000      	movs	r0, #0
 8015576:	f007 ffed 	bl	801d554 <gpio_configure>
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801557a:	2380      	movs	r3, #128	; 0x80
 801557c:	021b      	lsls	r3, r3, #8
 801557e:	0019      	movs	r1, r3
 8015580:	2000      	movs	r0, #0
 8015582:	f008 f9ef 	bl	801d964 <gpio_set>
	SX1276Reset();
 8015586:	f001 fead 	bl	80172e4 <SX1276Reset>
	SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | RF_OPMODE_SLEEP  );	// SLEEP mode is 1uA when Standby Mode is 1,6mA
 801558a:	2001      	movs	r0, #1
 801558c:	f001 ff80 	bl	8017490 <SX1276Read>
 8015590:	0003      	movs	r3, r0
 8015592:	001a      	movs	r2, r3
 8015594:	2307      	movs	r3, #7
 8015596:	439a      	bics	r2, r3
 8015598:	0013      	movs	r3, r2
 801559a:	b2db      	uxtb	r3, r3
 801559c:	0019      	movs	r1, r3
 801559e:	2001      	movs	r0, #1
 80155a0:	f001 ff62 	bl	8017468 <SX1276Write>
	SX1276SetAntSwLowPower(true);
 80155a4:	2001      	movs	r0, #1
 80155a6:	f000 f9fc 	bl	80159a2 <SX1276SetAntSwLowPower>
	itsdk_delayMs(10);
 80155aa:	200a      	movs	r0, #10
 80155ac:	f008 fb36 	bl	801dc1c <itsdk_delayMs>
	TCXO_OFF();
 80155b0:	2380      	movs	r3, #128	; 0x80
 80155b2:	015b      	lsls	r3, r3, #5
 80155b4:	0019      	movs	r1, r3
 80155b6:	2000      	movs	r0, #0
 80155b8:	f008 f9ec 	bl	801d994 <gpio_reset>

}
 80155bc:	46c0      	nop			; (mov r8, r8)
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <SX1276GetWakeTime>:


uint32_t SX1276GetWakeTime( void )
{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276GetWakeTime\r\n"));
  return  0;
 80155c6:	2300      	movs	r3, #0
}
 80155c8:	0018      	movs	r0, r3
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b082      	sub	sp, #8
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	0002      	movs	r2, r0
 80155d6:	1dfb      	adds	r3, r7, #7
 80155d8:	701a      	strb	r2, [r3, #0]
  LOG_INFO_SX1276((">> mSX1276SetXO (%s)\r\n",((state==SET)?"ON":"OFF")));

  if (state == SET )
 80155da:	1dfb      	adds	r3, r7, #7
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	2b01      	cmp	r3, #1
 80155e0:	d109      	bne.n	80155f6 <SX1276SetXO+0x28>
  {
    TCXO_ON(); 
 80155e2:	2380      	movs	r3, #128	; 0x80
 80155e4:	015b      	lsls	r3, r3, #5
 80155e6:	0019      	movs	r1, r3
 80155e8:	2000      	movs	r0, #0
 80155ea:	f008 f9bb 	bl	801d964 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_TCXO_WARMUP);
 80155ee:	2032      	movs	r0, #50	; 0x32
 80155f0:	f008 fb14 	bl	801dc1c <itsdk_delayMs>
  else
  {
	itsdk_delayMs(10);
    TCXO_OFF(); 
  }
}
 80155f4:	e008      	b.n	8015608 <SX1276SetXO+0x3a>
	itsdk_delayMs(10);
 80155f6:	200a      	movs	r0, #10
 80155f8:	f008 fb10 	bl	801dc1c <itsdk_delayMs>
    TCXO_OFF(); 
 80155fc:	2380      	movs	r3, #128	; 0x80
 80155fe:	015b      	lsls	r3, r3, #5
 8015600:	0019      	movs	r1, r3
 8015602:	2000      	movs	r0, #0
 8015604:	f008 f9c6 	bl	801d994 <gpio_reset>
}
 8015608:	46c0      	nop			; (mov r8, r8)
 801560a:	46bd      	mov	sp, r7
 801560c:	b002      	add	sp, #8
 801560e:	bd80      	pop	{r7, pc}

08015610 <SX1276IoInit>:
 * --
 * Ensure the IRQ are configured later by calling SX1276IoIrqInit or equivalent.
 * For sigfox STLL_Radio_IoInit does the job.
 */
void SX1276IoInit( void )
{
 8015610:	b580      	push	{r7, lr}
 8015612:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276IoInit\r\n"));

  SX1276BoardInit( &BoardCallbacks );
 8015614:	4b11      	ldr	r3, [pc, #68]	; (801565c <SX1276IoInit+0x4c>)
 8015616:	0018      	movs	r0, r3
 8015618:	f000 fa48 	bl	8015aac <SX1276BoardInit>
  if ( ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 801561c:	220e      	movs	r2, #14
 801561e:	2110      	movs	r1, #16
 8015620:	2001      	movs	r0, #1
 8015622:	f007 ff97 	bl	801d554 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015626:	220e      	movs	r2, #14
 8015628:	2102      	movs	r1, #2
 801562a:	2001      	movs	r0, #1
 801562c:	f007 ff92 	bl	801d554 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 8015630:	220e      	movs	r2, #14
 8015632:	2101      	movs	r1, #1
 8015634:	2001      	movs	r0, #1
 8015636:	f007 ff8d 	bl	801d554 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 801563a:	2380      	movs	r3, #128	; 0x80
 801563c:	019b      	lsls	r3, r3, #6
 801563e:	220e      	movs	r2, #14
 8015640:	0019      	movs	r1, r3
 8015642:	2002      	movs	r0, #2
 8015644:	f007 ff86 	bl	801d554 <gpio_configure>
#ifdef RADIO_DIO_5
  if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
  }
#endif
  gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 8015648:	2380      	movs	r3, #128	; 0x80
 801564a:	015b      	lsls	r3, r3, #5
 801564c:	2200      	movs	r2, #0
 801564e:	0019      	movs	r1, r3
 8015650:	2000      	movs	r0, #0
 8015652:	f007 ff7f 	bl	801d554 <gpio_configure>

}
 8015656:	46c0      	nop			; (mov r8, r8)
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}
 801565c:	2000007c 	.word	0x2000007c

08015660 <SX1276IoIrqInit>:


gpio_irq_chain_t __sx1276_gpio_irq[6] = { 0 };
void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276IoIrqInit\r\n"));


	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 8015668:	2110      	movs	r1, #16
 801566a:	2001      	movs	r0, #1
 801566c:	f008 f9f6 	bl	801da5c <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_INTERRUPT_RISING );
 8015670:	2207      	movs	r2, #7
 8015672:	2110      	movs	r1, #16
 8015674:	2001      	movs	r0, #1
 8015676:	f007 ff6d 	bl	801d554 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,IRQ_HIGH_PRIORITY,0);
 801567a:	2300      	movs	r3, #0
 801567c:	2200      	movs	r2, #0
 801567e:	2110      	movs	r1, #16
 8015680:	2001      	movs	r0, #1
 8015682:	f008 f9c3 	bl	801da0c <gpio_interruptPriority>
		__sx1276_gpio_irq[0].irq_func = (void (*)(uint16_t))irqHandlers[0];
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	4b39      	ldr	r3, [pc, #228]	; (8015770 <SX1276IoIrqInit+0x110>)
 801568c:	601a      	str	r2, [r3, #0]
		__sx1276_gpio_irq[0].pinMask = ITSDK_SX1276_DIO_0_PIN;
 801568e:	4b38      	ldr	r3, [pc, #224]	; (8015770 <SX1276IoIrqInit+0x110>)
 8015690:	2210      	movs	r2, #16
 8015692:	809a      	strh	r2, [r3, #4]
		gpio_registerIrqAction(&__sx1276_gpio_irq[0]);
 8015694:	4b36      	ldr	r3, [pc, #216]	; (8015770 <SX1276IoIrqInit+0x110>)
 8015696:	0018      	movs	r0, r3
 8015698:	f008 fa38 	bl	801db0c <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 801569c:	2110      	movs	r1, #16
 801569e:	2001      	movs	r0, #1
 80156a0:	f008 f990 	bl	801d9c4 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 80156a4:	2102      	movs	r1, #2
 80156a6:	2001      	movs	r0, #1
 80156a8:	f008 f9d8 	bl	801da5c <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_INTERRUPT_RISING );
 80156ac:	2207      	movs	r2, #7
 80156ae:	2102      	movs	r1, #2
 80156b0:	2001      	movs	r0, #1
 80156b2:	f007 ff4f 	bl	801d554 <gpio_configure>
  	    gpio_interruptPriority(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,IRQ_HIGH_PRIORITY,0);
 80156b6:	2300      	movs	r3, #0
 80156b8:	2200      	movs	r2, #0
 80156ba:	2102      	movs	r1, #2
 80156bc:	2001      	movs	r0, #1
 80156be:	f008 f9a5 	bl	801da0c <gpio_interruptPriority>
		__sx1276_gpio_irq[1].irq_func = (void (*)(uint16_t))irqHandlers[1];
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	685a      	ldr	r2, [r3, #4]
 80156c6:	4b2a      	ldr	r3, [pc, #168]	; (8015770 <SX1276IoIrqInit+0x110>)
 80156c8:	60da      	str	r2, [r3, #12]
		__sx1276_gpio_irq[1].pinMask = ITSDK_SX1276_DIO_1_PIN;
 80156ca:	4b29      	ldr	r3, [pc, #164]	; (8015770 <SX1276IoIrqInit+0x110>)
 80156cc:	2202      	movs	r2, #2
 80156ce:	821a      	strh	r2, [r3, #16]
		gpio_registerIrqAction(&__sx1276_gpio_irq[1]);
 80156d0:	4b28      	ldr	r3, [pc, #160]	; (8015774 <SX1276IoIrqInit+0x114>)
 80156d2:	0018      	movs	r0, r3
 80156d4:	f008 fa1a 	bl	801db0c <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 80156d8:	2102      	movs	r1, #2
 80156da:	2001      	movs	r0, #1
 80156dc:	f008 f972 	bl	801d9c4 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 80156e0:	2101      	movs	r1, #1
 80156e2:	2001      	movs	r0, #1
 80156e4:	f008 f9ba 	bl	801da5c <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_INTERRUPT_RISING );
 80156e8:	2207      	movs	r2, #7
 80156ea:	2101      	movs	r1, #1
 80156ec:	2001      	movs	r0, #1
 80156ee:	f007 ff31 	bl	801d554 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,IRQ_HIGH_PRIORITY,0);
 80156f2:	2300      	movs	r3, #0
 80156f4:	2200      	movs	r2, #0
 80156f6:	2101      	movs	r1, #1
 80156f8:	2001      	movs	r0, #1
 80156fa:	f008 f987 	bl	801da0c <gpio_interruptPriority>
		__sx1276_gpio_irq[2].irq_func = (void (*)(uint16_t))irqHandlers[2];
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	689a      	ldr	r2, [r3, #8]
 8015702:	4b1b      	ldr	r3, [pc, #108]	; (8015770 <SX1276IoIrqInit+0x110>)
 8015704:	619a      	str	r2, [r3, #24]
		__sx1276_gpio_irq[2].pinMask = ITSDK_SX1276_DIO_2_PIN;
 8015706:	4b1a      	ldr	r3, [pc, #104]	; (8015770 <SX1276IoIrqInit+0x110>)
 8015708:	2201      	movs	r2, #1
 801570a:	839a      	strh	r2, [r3, #28]
		gpio_registerIrqAction(&__sx1276_gpio_irq[2]);
 801570c:	4b1a      	ldr	r3, [pc, #104]	; (8015778 <SX1276IoIrqInit+0x118>)
 801570e:	0018      	movs	r0, r3
 8015710:	f008 f9fc 	bl	801db0c <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 8015714:	2101      	movs	r1, #1
 8015716:	2001      	movs	r0, #1
 8015718:	f008 f954 	bl	801d9c4 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 801571c:	2380      	movs	r3, #128	; 0x80
 801571e:	019b      	lsls	r3, r3, #6
 8015720:	0019      	movs	r1, r3
 8015722:	2002      	movs	r0, #2
 8015724:	f008 f99a 	bl	801da5c <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_INTERRUPT_RISING );
 8015728:	2380      	movs	r3, #128	; 0x80
 801572a:	019b      	lsls	r3, r3, #6
 801572c:	2207      	movs	r2, #7
 801572e:	0019      	movs	r1, r3
 8015730:	2002      	movs	r0, #2
 8015732:	f007 ff0f 	bl	801d554 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,IRQ_HIGH_PRIORITY,0);
 8015736:	2380      	movs	r3, #128	; 0x80
 8015738:	0199      	lsls	r1, r3, #6
 801573a:	2300      	movs	r3, #0
 801573c:	2200      	movs	r2, #0
 801573e:	2002      	movs	r0, #2
 8015740:	f008 f964 	bl	801da0c <gpio_interruptPriority>
		__sx1276_gpio_irq[3].irq_func = (void (*)(uint16_t))irqHandlers[3];
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	68da      	ldr	r2, [r3, #12]
 8015748:	4b09      	ldr	r3, [pc, #36]	; (8015770 <SX1276IoIrqInit+0x110>)
 801574a:	625a      	str	r2, [r3, #36]	; 0x24
		__sx1276_gpio_irq[3].pinMask = ITSDK_SX1276_DIO_3_PIN;
 801574c:	4b08      	ldr	r3, [pc, #32]	; (8015770 <SX1276IoIrqInit+0x110>)
 801574e:	2280      	movs	r2, #128	; 0x80
 8015750:	0192      	lsls	r2, r2, #6
 8015752:	851a      	strh	r2, [r3, #40]	; 0x28
		gpio_registerIrqAction(&__sx1276_gpio_irq[3]);
 8015754:	4b09      	ldr	r3, [pc, #36]	; (801577c <SX1276IoIrqInit+0x11c>)
 8015756:	0018      	movs	r0, r3
 8015758:	f008 f9d8 	bl	801db0c <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 801575c:	2380      	movs	r3, #128	; 0x80
 801575e:	019b      	lsls	r3, r3, #6
 8015760:	0019      	movs	r1, r3
 8015762:	2002      	movs	r0, #2
 8015764:	f008 f92e 	bl	801d9c4 <gpio_interruptEnable>
    if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
        gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_INTERRUPT_RISING );
    }
#endif

}
 8015768:	46c0      	nop			; (mov r8, r8)
 801576a:	46bd      	mov	sp, r7
 801576c:	b002      	add	sp, #8
 801576e:	bd80      	pop	{r7, pc}
 8015770:	20000ee4 	.word	0x20000ee4
 8015774:	20000ef0 	.word	0x20000ef0
 8015778:	20000efc 	.word	0x20000efc
 801577c:	20000f08 	.word	0x20000f08

08015780 <SX1276IoDeInit>:



void SX1276IoDeInit( void )
{
 8015780:	b580      	push	{r7, lr}
 8015782:	af00      	add	r7, sp, #0

  LOG_INFO_SX1276((">> mSX1276IoDeInit\r\n"));
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 8015784:	220e      	movs	r2, #14
 8015786:	2110      	movs	r1, #16
 8015788:	2001      	movs	r0, #1
 801578a:	f007 fee3 	bl	801d554 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 801578e:	2110      	movs	r1, #16
 8015790:	2001      	movs	r0, #1
 8015792:	f008 f963 	bl	801da5c <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 8015796:	220e      	movs	r2, #14
 8015798:	2102      	movs	r1, #2
 801579a:	2001      	movs	r0, #1
 801579c:	f007 feda 	bl	801d554 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 80157a0:	2102      	movs	r1, #2
 80157a2:	2001      	movs	r0, #1
 80157a4:	f008 f95a 	bl	801da5c <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 80157a8:	220e      	movs	r2, #14
 80157aa:	2101      	movs	r1, #1
 80157ac:	2001      	movs	r0, #1
 80157ae:	f007 fed1 	bl	801d554 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 80157b2:	2101      	movs	r1, #1
 80157b4:	2001      	movs	r0, #1
 80157b6:	f008 f951 	bl	801da5c <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 80157ba:	2380      	movs	r3, #128	; 0x80
 80157bc:	019b      	lsls	r3, r3, #6
 80157be:	220e      	movs	r2, #14
 80157c0:	0019      	movs	r1, r3
 80157c2:	2002      	movs	r0, #2
 80157c4:	f007 fec6 	bl	801d554 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 80157c8:	2380      	movs	r3, #128	; 0x80
 80157ca:	019b      	lsls	r3, r3, #6
 80157cc:	0019      	movs	r1, r3
 80157ce:	2002      	movs	r0, #2
 80157d0:	f008 f944 	bl	801da5c <gpio_interruptClear>
	if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
	    gpio_interruptClear(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN);
	}
#endif
}
 80157d4:	46c0      	nop			; (mov r8, r8)
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}

080157da <SX1276SetRfTxPower>:


void SX1276SetRfTxPower( int8_t power )
{
 80157da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157dc:	b085      	sub	sp, #20
 80157de:	af00      	add	r7, sp, #0
 80157e0:	0002      	movs	r2, r0
 80157e2:	1dfb      	adds	r3, r7, #7
 80157e4:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetRfTxPower (%d)\r\n",power));

    uint8_t paConfig = 0;
 80157e6:	250f      	movs	r5, #15
 80157e8:	197b      	adds	r3, r7, r5
 80157ea:	2200      	movs	r2, #0
 80157ec:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 80157ee:	260e      	movs	r6, #14
 80157f0:	19bb      	adds	r3, r7, r6
 80157f2:	2200      	movs	r2, #0
 80157f4:	701a      	strb	r2, [r3, #0]
	#ifdef ITSDK_RADIO_POWER_OFFSET
    power += ITSDK_RADIO_POWER_OFFSET;
	#endif


    paConfig = SX1276Read( REG_PACONFIG );
 80157f6:	197c      	adds	r4, r7, r5
 80157f8:	2009      	movs	r0, #9
 80157fa:	f001 fe49 	bl	8017490 <SX1276Read>
 80157fe:	0003      	movs	r3, r0
 8015800:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8015802:	19bc      	adds	r4, r7, r6
 8015804:	204d      	movs	r0, #77	; 0x4d
 8015806:	f001 fe43 	bl	8017490 <SX1276Read>
 801580a:	0003      	movs	r3, r0
 801580c:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 801580e:	197b      	adds	r3, r7, r5
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	b25b      	sxtb	r3, r3
 8015814:	227f      	movs	r2, #127	; 0x7f
 8015816:	4013      	ands	r3, r2
 8015818:	b25c      	sxtb	r4, r3
 801581a:	1dfb      	adds	r3, r7, #7
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	0018      	movs	r0, r3
 8015820:	f000 f8ae 	bl	8015980 <SX1276GetPaSelect>
 8015824:	0003      	movs	r3, r0
 8015826:	b25b      	sxtb	r3, r3
 8015828:	4323      	orrs	r3, r4
 801582a:	b25a      	sxtb	r2, r3
 801582c:	197b      	adds	r3, r7, r5
 801582e:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8015830:	197b      	adds	r3, r7, r5
 8015832:	197a      	adds	r2, r7, r5
 8015834:	7812      	ldrb	r2, [r2, #0]
 8015836:	2170      	movs	r1, #112	; 0x70
 8015838:	430a      	orrs	r2, r1
 801583a:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801583c:	197b      	adds	r3, r7, r5
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	b25b      	sxtb	r3, r3
 8015842:	2b00      	cmp	r3, #0
 8015844:	da67      	bge.n	8015916 <SX1276SetRfTxPower+0x13c>
    {
        if( power > 17 )
 8015846:	1dfb      	adds	r3, r7, #7
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	b25b      	sxtb	r3, r3
 801584c:	2b11      	cmp	r3, #17
 801584e:	dd07      	ble.n	8015860 <SX1276SetRfTxPower+0x86>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8015850:	220e      	movs	r2, #14
 8015852:	18bb      	adds	r3, r7, r2
 8015854:	18ba      	adds	r2, r7, r2
 8015856:	7812      	ldrb	r2, [r2, #0]
 8015858:	2107      	movs	r1, #7
 801585a:	430a      	orrs	r2, r1
 801585c:	701a      	strb	r2, [r3, #0]
 801585e:	e00b      	b.n	8015878 <SX1276SetRfTxPower+0x9e>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8015860:	210e      	movs	r1, #14
 8015862:	187b      	adds	r3, r7, r1
 8015864:	781b      	ldrb	r3, [r3, #0]
 8015866:	b25b      	sxtb	r3, r3
 8015868:	2207      	movs	r2, #7
 801586a:	4393      	bics	r3, r2
 801586c:	b25b      	sxtb	r3, r3
 801586e:	2204      	movs	r2, #4
 8015870:	4313      	orrs	r3, r2
 8015872:	b25a      	sxtb	r2, r3
 8015874:	187b      	adds	r3, r7, r1
 8015876:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8015878:	230e      	movs	r3, #14
 801587a:	18fb      	adds	r3, r7, r3
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	2207      	movs	r2, #7
 8015880:	4013      	ands	r3, r2
 8015882:	2b07      	cmp	r3, #7
 8015884:	d123      	bne.n	80158ce <SX1276SetRfTxPower+0xf4>
        {
            if( power < 5 )
 8015886:	1dfb      	adds	r3, r7, #7
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	b25b      	sxtb	r3, r3
 801588c:	2b04      	cmp	r3, #4
 801588e:	dc02      	bgt.n	8015896 <SX1276SetRfTxPower+0xbc>
            {
                power = 5;
 8015890:	1dfb      	adds	r3, r7, #7
 8015892:	2205      	movs	r2, #5
 8015894:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8015896:	1dfb      	adds	r3, r7, #7
 8015898:	781b      	ldrb	r3, [r3, #0]
 801589a:	b25b      	sxtb	r3, r3
 801589c:	2b14      	cmp	r3, #20
 801589e:	dd02      	ble.n	80158a6 <SX1276SetRfTxPower+0xcc>
            {
                power = 20;
 80158a0:	1dfb      	adds	r3, r7, #7
 80158a2:	2214      	movs	r2, #20
 80158a4:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80158a6:	200f      	movs	r0, #15
 80158a8:	183b      	adds	r3, r7, r0
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	b25b      	sxtb	r3, r3
 80158ae:	220f      	movs	r2, #15
 80158b0:	4393      	bics	r3, r2
 80158b2:	b25a      	sxtb	r2, r3
 80158b4:	1dfb      	adds	r3, r7, #7
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	3b05      	subs	r3, #5
 80158ba:	b2db      	uxtb	r3, r3
 80158bc:	b25b      	sxtb	r3, r3
 80158be:	210f      	movs	r1, #15
 80158c0:	400b      	ands	r3, r1
 80158c2:	b25b      	sxtb	r3, r3
 80158c4:	4313      	orrs	r3, r2
 80158c6:	b25a      	sxtb	r2, r3
 80158c8:	183b      	adds	r3, r7, r0
 80158ca:	701a      	strb	r2, [r3, #0]
 80158cc:	e046      	b.n	801595c <SX1276SetRfTxPower+0x182>
        }
        else
        {
            if( power < 2 )
 80158ce:	1dfb      	adds	r3, r7, #7
 80158d0:	781b      	ldrb	r3, [r3, #0]
 80158d2:	b25b      	sxtb	r3, r3
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	dc02      	bgt.n	80158de <SX1276SetRfTxPower+0x104>
            {
                power = 2;
 80158d8:	1dfb      	adds	r3, r7, #7
 80158da:	2202      	movs	r2, #2
 80158dc:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 80158de:	1dfb      	adds	r3, r7, #7
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	b25b      	sxtb	r3, r3
 80158e4:	2b11      	cmp	r3, #17
 80158e6:	dd02      	ble.n	80158ee <SX1276SetRfTxPower+0x114>
            {
                power = 17;
 80158e8:	1dfb      	adds	r3, r7, #7
 80158ea:	2211      	movs	r2, #17
 80158ec:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80158ee:	200f      	movs	r0, #15
 80158f0:	183b      	adds	r3, r7, r0
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	b25b      	sxtb	r3, r3
 80158f6:	220f      	movs	r2, #15
 80158f8:	4393      	bics	r3, r2
 80158fa:	b25a      	sxtb	r2, r3
 80158fc:	1dfb      	adds	r3, r7, #7
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	3b02      	subs	r3, #2
 8015902:	b2db      	uxtb	r3, r3
 8015904:	b25b      	sxtb	r3, r3
 8015906:	210f      	movs	r1, #15
 8015908:	400b      	ands	r3, r1
 801590a:	b25b      	sxtb	r3, r3
 801590c:	4313      	orrs	r3, r2
 801590e:	b25a      	sxtb	r2, r3
 8015910:	183b      	adds	r3, r7, r0
 8015912:	701a      	strb	r2, [r3, #0]
 8015914:	e022      	b.n	801595c <SX1276SetRfTxPower+0x182>
        }
    }
    else
    {
        if( power < -1 )
 8015916:	1dfb      	adds	r3, r7, #7
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	b25b      	sxtb	r3, r3
 801591c:	3301      	adds	r3, #1
 801591e:	da02      	bge.n	8015926 <SX1276SetRfTxPower+0x14c>
        {
            power = -1;
 8015920:	1dfb      	adds	r3, r7, #7
 8015922:	22ff      	movs	r2, #255	; 0xff
 8015924:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 8015926:	1dfb      	adds	r3, r7, #7
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	b25b      	sxtb	r3, r3
 801592c:	2b0e      	cmp	r3, #14
 801592e:	dd02      	ble.n	8015936 <SX1276SetRfTxPower+0x15c>
        {
            power = 14;
 8015930:	1dfb      	adds	r3, r7, #7
 8015932:	220e      	movs	r2, #14
 8015934:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8015936:	200f      	movs	r0, #15
 8015938:	183b      	adds	r3, r7, r0
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	b25b      	sxtb	r3, r3
 801593e:	220f      	movs	r2, #15
 8015940:	4393      	bics	r3, r2
 8015942:	b25a      	sxtb	r2, r3
 8015944:	1dfb      	adds	r3, r7, #7
 8015946:	781b      	ldrb	r3, [r3, #0]
 8015948:	3301      	adds	r3, #1
 801594a:	b2db      	uxtb	r3, r3
 801594c:	b25b      	sxtb	r3, r3
 801594e:	210f      	movs	r1, #15
 8015950:	400b      	ands	r3, r1
 8015952:	b25b      	sxtb	r3, r3
 8015954:	4313      	orrs	r3, r2
 8015956:	b25a      	sxtb	r2, r3
 8015958:	183b      	adds	r3, r7, r0
 801595a:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801595c:	230f      	movs	r3, #15
 801595e:	18fb      	adds	r3, r7, r3
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	0019      	movs	r1, r3
 8015964:	2009      	movs	r0, #9
 8015966:	f001 fd7f 	bl	8017468 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801596a:	230e      	movs	r3, #14
 801596c:	18fb      	adds	r3, r7, r3
 801596e:	781b      	ldrb	r3, [r3, #0]
 8015970:	0019      	movs	r1, r3
 8015972:	204d      	movs	r0, #77	; 0x4d
 8015974:	f001 fd78 	bl	8017468 <SX1276Write>
}
 8015978:	46c0      	nop			; (mov r8, r8)
 801597a:	46bd      	mov	sp, r7
 801597c:	b005      	add	sp, #20
 801597e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015980 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint8_t power )
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	0002      	movs	r2, r0
 8015988:	1dfb      	adds	r3, r7, #7
 801598a:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276GetPaSelect\r\n"));

    if (power >14)
 801598c:	1dfb      	adds	r3, r7, #7
 801598e:	781b      	ldrb	r3, [r3, #0]
 8015990:	2b0e      	cmp	r3, #14
 8015992:	d901      	bls.n	8015998 <SX1276GetPaSelect+0x18>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8015994:	2380      	movs	r3, #128	; 0x80
 8015996:	e000      	b.n	801599a <SX1276GetPaSelect+0x1a>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8015998:	2300      	movs	r3, #0
    }
}
 801599a:	0018      	movs	r0, r3
 801599c:	46bd      	mov	sp, r7
 801599e:	b002      	add	sp, #8
 80159a0:	bd80      	pop	{r7, pc}

080159a2 <SX1276SetAntSwLowPower>:

/**
 * Switch PA Low power (true) or Full power (false)
 */
void SX1276SetAntSwLowPower( bool status )
{
 80159a2:	b580      	push	{r7, lr}
 80159a4:	b082      	sub	sp, #8
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	0002      	movs	r2, r0
 80159aa:	1dfb      	adds	r3, r7, #7
 80159ac:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSwLowPower (%s)\r\n",((status)?"LP":"FP")));

    if( status == false )
 80159ae:	1dfb      	adds	r3, r7, #7
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	2201      	movs	r2, #1
 80159b4:	4053      	eors	r3, r2
 80159b6:	b2db      	uxtb	r3, r3
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d01b      	beq.n	80159f4 <SX1276SetAntSwLowPower+0x52>
    {
    	// FP
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_OUTPUT_PP );
 80159bc:	2200      	movs	r2, #0
 80159be:	2102      	movs	r1, #2
 80159c0:	2000      	movs	r0, #0
 80159c2:	f007 fdc7 	bl	801d554 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 80159c6:	2102      	movs	r1, #2
 80159c8:	2000      	movs	r0, #0
 80159ca:	f007 ffe3 	bl	801d994 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_OUTPUT_PP );
 80159ce:	2200      	movs	r2, #0
 80159d0:	2102      	movs	r1, #2
 80159d2:	2002      	movs	r0, #2
 80159d4:	f007 fdbe 	bl	801d554 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 80159d8:	2102      	movs	r1, #2
 80159da:	2002      	movs	r0, #2
 80159dc:	f007 ffda 	bl	801d994 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_OUTPUT_PP );
 80159e0:	2200      	movs	r2, #0
 80159e2:	2104      	movs	r1, #4
 80159e4:	2002      	movs	r0, #2
 80159e6:	f007 fdb5 	bl	801d554 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 80159ea:	2104      	movs	r1, #4
 80159ec:	2002      	movs	r0, #2
 80159ee:	f007 ffd1 	bl	801d994 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
    }
}
 80159f2:	e01a      	b.n	8015a2a <SX1276SetAntSwLowPower+0x88>
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_ANALOG );
 80159f4:	220e      	movs	r2, #14
 80159f6:	2102      	movs	r1, #2
 80159f8:	2000      	movs	r0, #0
 80159fa:	f007 fdab 	bl	801d554 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 80159fe:	2102      	movs	r1, #2
 8015a00:	2000      	movs	r0, #0
 8015a02:	f007 ffc7 	bl	801d994 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
 8015a06:	220e      	movs	r2, #14
 8015a08:	2102      	movs	r1, #2
 8015a0a:	2002      	movs	r0, #2
 8015a0c:	f007 fda2 	bl	801d554 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015a10:	2102      	movs	r1, #2
 8015a12:	2002      	movs	r0, #2
 8015a14:	f007 ffbe 	bl	801d994 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
 8015a18:	220e      	movs	r2, #14
 8015a1a:	2104      	movs	r1, #4
 8015a1c:	2002      	movs	r0, #2
 8015a1e:	f007 fd99 	bl	801d554 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015a22:	2104      	movs	r1, #4
 8015a24:	2002      	movs	r0, #2
 8015a26:	f007 ffb5 	bl	801d994 <gpio_reset>
}
 8015a2a:	46c0      	nop			; (mov r8, r8)
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	b002      	add	sp, #8
 8015a30:	bd80      	pop	{r7, pc}
	...

08015a34 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8015a34:	b590      	push	{r4, r7, lr}
 8015a36:	b085      	sub	sp, #20
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	0002      	movs	r2, r0
 8015a3c:	1dfb      	adds	r3, r7, #7
 8015a3e:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSw (%d)\r\n",opMode));

    uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8015a40:	230f      	movs	r3, #15
 8015a42:	18fc      	adds	r4, r7, r3
 8015a44:	2009      	movs	r0, #9
 8015a46:	f001 fd23 	bl	8017490 <SX1276Read>
 8015a4a:	0003      	movs	r3, r0
 8015a4c:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 8015a4e:	1dfb      	adds	r3, r7, #7
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	2b03      	cmp	r3, #3
 8015a54:	d112      	bne.n	8015a7c <SX1276SetAntSw+0x48>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST ) {
 8015a56:	230f      	movs	r3, #15
 8015a58:	18fb      	adds	r3, r7, r3
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	b25b      	sxtb	r3, r3
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	da04      	bge.n	8015a6c <SX1276SetAntSw+0x38>
    	LOG_INFO_SX1276(("   PABOOST\r\n"));
    	gpio_set(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 8015a62:	2102      	movs	r1, #2
 8015a64:	2002      	movs	r0, #2
 8015a66:	f007 ff7d 	bl	801d964 <gpio_set>
 8015a6a:	e003      	b.n	8015a74 <SX1276SetAntSw+0x40>
      } else {
      	LOG_INFO_SX1276(("   RFO\r\n"));
        gpio_set(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 8015a6c:	2104      	movs	r1, #4
 8015a6e:	2002      	movs	r0, #2
 8015a70:	f007 ff78 	bl	801d964 <gpio_set>
      }
      SX1276.RxTx = 1;
 8015a74:	4b07      	ldr	r3, [pc, #28]	; (8015a94 <SX1276SetAntSw+0x60>)
 8015a76:	2201      	movs	r2, #1
 8015a78:	701a      	strb	r2, [r3, #0]
      break;
 8015a7a:	e007      	b.n	8015a8c <SX1276SetAntSw+0x58>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     LOG_INFO_SX1276(("   Rx Mode\r\n"));
     SX1276.RxTx = 0;
 8015a7c:	4b05      	ldr	r3, [pc, #20]	; (8015a94 <SX1276SetAntSw+0x60>)
 8015a7e:	2200      	movs	r2, #0
 8015a80:	701a      	strb	r2, [r3, #0]
     gpio_set(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 8015a82:	2102      	movs	r1, #2
 8015a84:	2000      	movs	r0, #0
 8015a86:	f007 ff6d 	bl	801d964 <gpio_set>
     break;
 8015a8a:	46c0      	nop			; (mov r8, r8)
    }
}
 8015a8c:	46c0      	nop			; (mov r8, r8)
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	b005      	add	sp, #20
 8015a92:	bd90      	pop	{r4, r7, pc}
 8015a94:	200014a4 	.word	0x200014a4

08015a98 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b082      	sub	sp, #8
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276CheckRfFrequency\r\n"));

    // Implement check. Currently all frequencies are supported
    return true;
 8015aa0:	2301      	movs	r3, #1
}
 8015aa2:	0018      	movs	r0, r3
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	b002      	add	sp, #8
 8015aa8:	bd80      	pop	{r7, pc}
	...

08015aac <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b082      	sub	sp, #8
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276BoardInit\r\n"));

    LoRaBoardCallbacks =callbacks;
 8015ab4:	4b03      	ldr	r3, [pc, #12]	; (8015ac4 <SX1276BoardInit+0x18>)
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	601a      	str	r2, [r3, #0]
}
 8015aba:	46c0      	nop			; (mov r8, r8)
 8015abc:	46bd      	mov	sp, r7
 8015abe:	b002      	add	sp, #8
 8015ac0:	bd80      	pop	{r7, pc}
 8015ac2:	46c0      	nop			; (mov r8, r8)
 8015ac4:	20001030 	.word	0x20001030

08015ac8 <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t * events )
{
 8015ac8:	b590      	push	{r4, r7, lr}
 8015aca:	b085      	sub	sp, #20
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276Init\r\n"));

    uint8_t i;
    RadioEvents = events;
 8015ad0:	4b33      	ldr	r3, [pc, #204]	; (8015ba0 <SX1276Init+0xd8>)
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8015ad6:	4a33      	ldr	r2, [pc, #204]	; (8015ba4 <SX1276Init+0xdc>)
 8015ad8:	4b33      	ldr	r3, [pc, #204]	; (8015ba8 <SX1276Init+0xe0>)
 8015ada:	0011      	movs	r1, r2
 8015adc:	0018      	movs	r0, r3
 8015ade:	f7ff fb93 	bl	8015208 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8015ae2:	4a30      	ldr	r2, [pc, #192]	; (8015ba4 <SX1276Init+0xdc>)
 8015ae4:	4b31      	ldr	r3, [pc, #196]	; (8015bac <SX1276Init+0xe4>)
 8015ae6:	0011      	movs	r1, r2
 8015ae8:	0018      	movs	r0, r3
 8015aea:	f7ff fb8d 	bl	8015208 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8015aee:	4a2d      	ldr	r2, [pc, #180]	; (8015ba4 <SX1276Init+0xdc>)
 8015af0:	4b2f      	ldr	r3, [pc, #188]	; (8015bb0 <SX1276Init+0xe8>)
 8015af2:	0011      	movs	r1, r2
 8015af4:	0018      	movs	r0, r3
 8015af6:	f7ff fb87 	bl	8015208 <TimerInit>


    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8015afa:	4b2e      	ldr	r3, [pc, #184]	; (8015bb4 <SX1276Init+0xec>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	2001      	movs	r0, #1
 8015b02:	4798      	blx	r3

    SX1276Reset( );
 8015b04:	f001 fbee 	bl	80172e4 <SX1276Reset>
    RxChainCalibration( );
 8015b08:	f000 f936 	bl	8015d78 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	f001 fc03 	bl	8017318 <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8015b12:	4b28      	ldr	r3, [pc, #160]	; (8015bb4 <SX1276Init+0xec>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	689b      	ldr	r3, [r3, #8]
 8015b18:	4a27      	ldr	r2, [pc, #156]	; (8015bb8 <SX1276Init+0xf0>)
 8015b1a:	0010      	movs	r0, r2
 8015b1c:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8015b1e:	230f      	movs	r3, #15
 8015b20:	18fb      	adds	r3, r7, r3
 8015b22:	2200      	movs	r2, #0
 8015b24:	701a      	strb	r2, [r3, #0]
 8015b26:	e025      	b.n	8015b74 <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8015b28:	240f      	movs	r4, #15
 8015b2a:	193b      	adds	r3, r7, r4
 8015b2c:	781a      	ldrb	r2, [r3, #0]
 8015b2e:	4923      	ldr	r1, [pc, #140]	; (8015bbc <SX1276Init+0xf4>)
 8015b30:	0013      	movs	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	189b      	adds	r3, r3, r2
 8015b36:	5c5b      	ldrb	r3, [r3, r1]
 8015b38:	0018      	movs	r0, r3
 8015b3a:	f001 fc3d 	bl	80173b8 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8015b3e:	193b      	adds	r3, r7, r4
 8015b40:	781a      	ldrb	r2, [r3, #0]
 8015b42:	491e      	ldr	r1, [pc, #120]	; (8015bbc <SX1276Init+0xf4>)
 8015b44:	0013      	movs	r3, r2
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	189b      	adds	r3, r3, r2
 8015b4a:	18cb      	adds	r3, r1, r3
 8015b4c:	3301      	adds	r3, #1
 8015b4e:	781b      	ldrb	r3, [r3, #0]
 8015b50:	b298      	uxth	r0, r3
 8015b52:	193b      	adds	r3, r7, r4
 8015b54:	781a      	ldrb	r2, [r3, #0]
 8015b56:	4919      	ldr	r1, [pc, #100]	; (8015bbc <SX1276Init+0xf4>)
 8015b58:	0013      	movs	r3, r2
 8015b5a:	005b      	lsls	r3, r3, #1
 8015b5c:	189b      	adds	r3, r3, r2
 8015b5e:	18cb      	adds	r3, r1, r3
 8015b60:	3302      	adds	r3, #2
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	0019      	movs	r1, r3
 8015b66:	f001 fc7f 	bl	8017468 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8015b6a:	193b      	adds	r3, r7, r4
 8015b6c:	781a      	ldrb	r2, [r3, #0]
 8015b6e:	193b      	adds	r3, r7, r4
 8015b70:	3201      	adds	r2, #1
 8015b72:	701a      	strb	r2, [r3, #0]
 8015b74:	230f      	movs	r3, #15
 8015b76:	18fb      	adds	r3, r7, r3
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	2b0f      	cmp	r3, #15
 8015b7c:	d9d4      	bls.n	8015b28 <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8015b7e:	2000      	movs	r0, #0
 8015b80:	f001 fc1a 	bl	80173b8 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8015b84:	4b0e      	ldr	r3, [pc, #56]	; (8015bc0 <SX1276Init+0xf8>)
 8015b86:	2200      	movs	r2, #0
 8015b88:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8015b8a:	4b0a      	ldr	r3, [pc, #40]	; (8015bb4 <SX1276Init+0xec>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	685b      	ldr	r3, [r3, #4]
 8015b90:	4798      	blx	r3
 8015b92:	0003      	movs	r3, r0
 8015b94:	3335      	adds	r3, #53	; 0x35
}
 8015b96:	0018      	movs	r0, r3
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	b005      	add	sp, #20
 8015b9c:	bd90      	pop	{r4, r7, pc}
 8015b9e:	46c0      	nop			; (mov r8, r8)
 8015ba0:	20000f2c 	.word	0x20000f2c
 8015ba4:	08017709 	.word	0x08017709
 8015ba8:	20001474 	.word	0x20001474
 8015bac:	2000150c 	.word	0x2000150c
 8015bb0:	2000148c 	.word	0x2000148c
 8015bb4:	20001030 	.word	0x20001030
 8015bb8:	20000094 	.word	0x20000094
 8015bbc:	08020ad0 	.word	0x08020ad0
 8015bc0:	200014a4 	.word	0x200014a4

08015bc4 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetStatus\r\n"));

    return SX1276.Settings.State;
 8015bc8:	4b02      	ldr	r3, [pc, #8]	; (8015bd4 <SX1276GetStatus+0x10>)
 8015bca:	791b      	ldrb	r3, [r3, #4]
}
 8015bcc:	0018      	movs	r0, r3
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	46c0      	nop			; (mov r8, r8)
 8015bd4:	200014a4 	.word	0x200014a4

08015bd8 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8015bd8:	b590      	push	{r4, r7, lr}
 8015bda:	b087      	sub	sp, #28
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetChannel %d\r\n",freq));

    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8015be0:	4b1d      	ldr	r3, [pc, #116]	; (8015c58 <SX1276SetChannel+0x80>)
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	491c      	ldr	r1, [pc, #112]	; (8015c5c <SX1276SetChannel+0x84>)
 8015bea:	0018      	movs	r0, r3
 8015bec:	f7ea fa94 	bl	8000118 <__udivsi3>
 8015bf0:	0003      	movs	r3, r0
 8015bf2:	617b      	str	r3, [r7, #20]
 8015bf4:	6979      	ldr	r1, [r7, #20]
 8015bf6:	000b      	movs	r3, r1
 8015bf8:	015b      	lsls	r3, r3, #5
 8015bfa:	1a5b      	subs	r3, r3, r1
 8015bfc:	019a      	lsls	r2, r3, #6
 8015bfe:	1ad2      	subs	r2, r2, r3
 8015c00:	00d2      	lsls	r2, r2, #3
 8015c02:	1853      	adds	r3, r2, r1
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	1ad3      	subs	r3, r2, r3
 8015c08:	613b      	str	r3, [r7, #16]
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	021c      	lsls	r4, r3, #8
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	021b      	lsls	r3, r3, #8
 8015c12:	4a13      	ldr	r2, [pc, #76]	; (8015c60 <SX1276SetChannel+0x88>)
 8015c14:	4694      	mov	ip, r2
 8015c16:	4463      	add	r3, ip
 8015c18:	4910      	ldr	r1, [pc, #64]	; (8015c5c <SX1276SetChannel+0x84>)
 8015c1a:	0018      	movs	r0, r3
 8015c1c:	f7ea fa7c 	bl	8000118 <__udivsi3>
 8015c20:	0003      	movs	r3, r0
 8015c22:	18e3      	adds	r3, r4, r3
 8015c24:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	0c1b      	lsrs	r3, r3, #16
 8015c2a:	b2db      	uxtb	r3, r3
 8015c2c:	0019      	movs	r1, r3
 8015c2e:	2006      	movs	r0, #6
 8015c30:	f001 fc1a 	bl	8017468 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	0a1b      	lsrs	r3, r3, #8
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	0019      	movs	r1, r3
 8015c3c:	2007      	movs	r0, #7
 8015c3e:	f001 fc13 	bl	8017468 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	b2db      	uxtb	r3, r3
 8015c46:	0019      	movs	r1, r3
 8015c48:	2008      	movs	r0, #8
 8015c4a:	f001 fc0d 	bl	8017468 <SX1276Write>
}
 8015c4e:	46c0      	nop			; (mov r8, r8)
 8015c50:	46bd      	mov	sp, r7
 8015c52:	b007      	add	sp, #28
 8015c54:	bd90      	pop	{r4, r7, pc}
 8015c56:	46c0      	nop			; (mov r8, r8)
 8015c58:	200014a4 	.word	0x200014a4
 8015c5c:	00003d09 	.word	0x00003d09
 8015c60:	00001e84 	.word	0x00001e84

08015c64 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8015c64:	b5b0      	push	{r4, r5, r7, lr}
 8015c66:	b086      	sub	sp, #24
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60b9      	str	r1, [r7, #8]
 8015c6c:	0011      	movs	r1, r2
 8015c6e:	607b      	str	r3, [r7, #4]
 8015c70:	240f      	movs	r4, #15
 8015c72:	193b      	adds	r3, r7, r4
 8015c74:	1c02      	adds	r2, r0, #0
 8015c76:	701a      	strb	r2, [r3, #0]
 8015c78:	230c      	movs	r3, #12
 8015c7a:	18fb      	adds	r3, r7, r3
 8015c7c:	1c0a      	adds	r2, r1, #0
 8015c7e:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276IsChannelFree\r\n"));

    bool status = true;
 8015c80:	2317      	movs	r3, #23
 8015c82:	18fb      	adds	r3, r7, r3
 8015c84:	2201      	movs	r2, #1
 8015c86:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8015c88:	2314      	movs	r3, #20
 8015c8a:	18fb      	adds	r3, r7, r3
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8015c90:	2300      	movs	r3, #0
 8015c92:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
 8015c94:	193b      	adds	r3, r7, r4
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	0018      	movs	r0, r3
 8015c9a:	f001 fb8d 	bl	80173b8 <SX1276SetModem>

    SX1276SetChannel( freq );
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	0018      	movs	r0, r3
 8015ca2:	f7ff ff99 	bl	8015bd8 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8015ca6:	2005      	movs	r0, #5
 8015ca8:	f001 fb36 	bl	8017318 <SX1276SetOpMode>

    DelayMs( 1 );
 8015cac:	2001      	movs	r0, #1
 8015cae:	f007 ffb5 	bl	801dc1c <itsdk_delayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8015cb2:	f7ff fb83 	bl	80153bc <TimerGetCurrentTime>
 8015cb6:	0003      	movs	r3, r0
 8015cb8:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015cba:	e017      	b.n	8015cec <SX1276IsChannelFree+0x88>
    {
        rssi = SX1276ReadRssi( modem );
 8015cbc:	2514      	movs	r5, #20
 8015cbe:	197c      	adds	r4, r7, r5
 8015cc0:	230f      	movs	r3, #15
 8015cc2:	18fb      	adds	r3, r7, r3
 8015cc4:	781b      	ldrb	r3, [r3, #0]
 8015cc6:	0018      	movs	r0, r3
 8015cc8:	f001 fac0 	bl	801724c <SX1276ReadRssi>
 8015ccc:	0003      	movs	r3, r0
 8015cce:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8015cd0:	197a      	adds	r2, r7, r5
 8015cd2:	230c      	movs	r3, #12
 8015cd4:	18fb      	adds	r3, r7, r3
 8015cd6:	2100      	movs	r1, #0
 8015cd8:	5e52      	ldrsh	r2, [r2, r1]
 8015cda:	2100      	movs	r1, #0
 8015cdc:	5e5b      	ldrsh	r3, [r3, r1]
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	dd04      	ble.n	8015cec <SX1276IsChannelFree+0x88>
        {
            status = false;
 8015ce2:	2317      	movs	r3, #23
 8015ce4:	18fb      	adds	r3, r7, r3
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	701a      	strb	r2, [r3, #0]
            break;
 8015cea:	e007      	b.n	8015cfc <SX1276IsChannelFree+0x98>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	0018      	movs	r0, r3
 8015cf0:	f7ff fb6d 	bl	80153ce <TimerGetElapsedTime>
 8015cf4:	0002      	movs	r2, r0
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	d8df      	bhi.n	8015cbc <SX1276IsChannelFree+0x58>
        }
    }
    SX1276SetSleep( );
 8015cfc:	f000 ffde 	bl	8016cbc <SX1276SetSleep>
    return status;
 8015d00:	2317      	movs	r3, #23
 8015d02:	18fb      	adds	r3, r7, r3
 8015d04:	781b      	ldrb	r3, [r3, #0]
}
 8015d06:	0018      	movs	r0, r3
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	b006      	add	sp, #24
 8015d0c:	bdb0      	pop	{r4, r5, r7, pc}

08015d0e <SX1276Random>:

uint32_t SX1276Random( void )
{
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b082      	sub	sp, #8
 8015d12:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Random\r\n"));

    uint8_t i;
    uint32_t rnd = 0;
 8015d14:	2300      	movs	r3, #0
 8015d16:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8015d18:	2001      	movs	r0, #1
 8015d1a:	f001 fb4d 	bl	80173b8 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8015d1e:	21ff      	movs	r1, #255	; 0xff
 8015d20:	2011      	movs	r0, #17
 8015d22:	f001 fba1 	bl	8017468 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8015d26:	2005      	movs	r0, #5
 8015d28:	f001 faf6 	bl	8017318 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8015d2c:	1dfb      	adds	r3, r7, #7
 8015d2e:	2200      	movs	r2, #0
 8015d30:	701a      	strb	r2, [r3, #0]
 8015d32:	e015      	b.n	8015d60 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 8015d34:	2001      	movs	r0, #1
 8015d36:	f007 ff71 	bl	801dc1c <itsdk_delayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8015d3a:	202c      	movs	r0, #44	; 0x2c
 8015d3c:	f001 fba8 	bl	8017490 <SX1276Read>
 8015d40:	0003      	movs	r3, r0
 8015d42:	001a      	movs	r2, r3
 8015d44:	2301      	movs	r3, #1
 8015d46:	401a      	ands	r2, r3
 8015d48:	1dfb      	adds	r3, r7, #7
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	409a      	lsls	r2, r3
 8015d4e:	0013      	movs	r3, r2
 8015d50:	683a      	ldr	r2, [r7, #0]
 8015d52:	4313      	orrs	r3, r2
 8015d54:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8015d56:	1dfb      	adds	r3, r7, #7
 8015d58:	781a      	ldrb	r2, [r3, #0]
 8015d5a:	1dfb      	adds	r3, r7, #7
 8015d5c:	3201      	adds	r2, #1
 8015d5e:	701a      	strb	r2, [r3, #0]
 8015d60:	1dfb      	adds	r3, r7, #7
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	2b1f      	cmp	r3, #31
 8015d66:	d9e5      	bls.n	8015d34 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8015d68:	f000 ffa8 	bl	8016cbc <SX1276SetSleep>

    return rnd;
 8015d6c:	683b      	ldr	r3, [r7, #0]
}
 8015d6e:	0018      	movs	r0, r3
 8015d70:	46bd      	mov	sp, r7
 8015d72:	b002      	add	sp, #8
 8015d74:	bd80      	pop	{r7, pc}
	...

08015d78 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8015d78:	b590      	push	{r4, r7, lr}
 8015d7a:	b087      	sub	sp, #28
 8015d7c:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8015d7e:	2317      	movs	r3, #23
 8015d80:	18fc      	adds	r4, r7, r3
 8015d82:	2009      	movs	r0, #9
 8015d84:	f001 fb84 	bl	8017490 <SX1276Read>
 8015d88:	0003      	movs	r3, r0
 8015d8a:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8015d8c:	2006      	movs	r0, #6
 8015d8e:	f001 fb7f 	bl	8017490 <SX1276Read>
 8015d92:	0003      	movs	r3, r0
 8015d94:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8015d96:	2007      	movs	r0, #7
 8015d98:	f001 fb7a 	bl	8017490 <SX1276Read>
 8015d9c:	0003      	movs	r3, r0
 8015d9e:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8015da0:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8015da2:	2008      	movs	r0, #8
 8015da4:	f001 fb74 	bl	8017490 <SX1276Read>
 8015da8:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8015daa:	4323      	orrs	r3, r4
 8015dac:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	0a1b      	lsrs	r3, r3, #8
 8015db2:	60fb      	str	r3, [r7, #12]
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	021b      	lsls	r3, r3, #8
 8015db8:	693a      	ldr	r2, [r7, #16]
 8015dba:	1ad3      	subs	r3, r2, r3
 8015dbc:	60bb      	str	r3, [r7, #8]
 8015dbe:	68f9      	ldr	r1, [r7, #12]
 8015dc0:	000b      	movs	r3, r1
 8015dc2:	015b      	lsls	r3, r3, #5
 8015dc4:	1a5b      	subs	r3, r3, r1
 8015dc6:	019a      	lsls	r2, r3, #6
 8015dc8:	1ad2      	subs	r2, r2, r3
 8015dca:	00d2      	lsls	r2, r2, #3
 8015dcc:	1850      	adds	r0, r2, r1
 8015dce:	68b9      	ldr	r1, [r7, #8]
 8015dd0:	000b      	movs	r3, r1
 8015dd2:	015b      	lsls	r3, r3, #5
 8015dd4:	1a5b      	subs	r3, r3, r1
 8015dd6:	019a      	lsls	r2, r3, #6
 8015dd8:	1ad2      	subs	r2, r2, r3
 8015dda:	00d2      	lsls	r2, r2, #3
 8015ddc:	1853      	adds	r3, r2, r1
 8015dde:	3380      	adds	r3, #128	; 0x80
 8015de0:	0a1b      	lsrs	r3, r3, #8
 8015de2:	18c3      	adds	r3, r0, r3
 8015de4:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8015de6:	2100      	movs	r1, #0
 8015de8:	2009      	movs	r0, #9
 8015dea:	f001 fb3d 	bl	8017468 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8015dee:	203b      	movs	r0, #59	; 0x3b
 8015df0:	f001 fb4e 	bl	8017490 <SX1276Read>
 8015df4:	0003      	movs	r3, r0
 8015df6:	001a      	movs	r2, r3
 8015df8:	2340      	movs	r3, #64	; 0x40
 8015dfa:	4313      	orrs	r3, r2
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	0019      	movs	r1, r3
 8015e00:	203b      	movs	r0, #59	; 0x3b
 8015e02:	f001 fb31 	bl	8017468 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8015e06:	46c0      	nop			; (mov r8, r8)
 8015e08:	203b      	movs	r0, #59	; 0x3b
 8015e0a:	f001 fb41 	bl	8017490 <SX1276Read>
 8015e0e:	0003      	movs	r3, r0
 8015e10:	001a      	movs	r2, r3
 8015e12:	2320      	movs	r3, #32
 8015e14:	4013      	ands	r3, r2
 8015e16:	2b20      	cmp	r3, #32
 8015e18:	d0f6      	beq.n	8015e08 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8015e1a:	4b14      	ldr	r3, [pc, #80]	; (8015e6c <RxChainCalibration+0xf4>)
 8015e1c:	0018      	movs	r0, r3
 8015e1e:	f7ff fedb 	bl	8015bd8 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8015e22:	203b      	movs	r0, #59	; 0x3b
 8015e24:	f001 fb34 	bl	8017490 <SX1276Read>
 8015e28:	0003      	movs	r3, r0
 8015e2a:	001a      	movs	r2, r3
 8015e2c:	2340      	movs	r3, #64	; 0x40
 8015e2e:	4313      	orrs	r3, r2
 8015e30:	b2db      	uxtb	r3, r3
 8015e32:	0019      	movs	r1, r3
 8015e34:	203b      	movs	r0, #59	; 0x3b
 8015e36:	f001 fb17 	bl	8017468 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8015e3a:	46c0      	nop			; (mov r8, r8)
 8015e3c:	203b      	movs	r0, #59	; 0x3b
 8015e3e:	f001 fb27 	bl	8017490 <SX1276Read>
 8015e42:	0003      	movs	r3, r0
 8015e44:	001a      	movs	r2, r3
 8015e46:	2320      	movs	r3, #32
 8015e48:	4013      	ands	r3, r2
 8015e4a:	2b20      	cmp	r3, #32
 8015e4c:	d0f6      	beq.n	8015e3c <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8015e4e:	2317      	movs	r3, #23
 8015e50:	18fb      	adds	r3, r7, r3
 8015e52:	781b      	ldrb	r3, [r3, #0]
 8015e54:	0019      	movs	r1, r3
 8015e56:	2009      	movs	r0, #9
 8015e58:	f001 fb06 	bl	8017468 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	0018      	movs	r0, r3
 8015e60:	f7ff feba 	bl	8015bd8 <SX1276SetChannel>
}
 8015e64:	46c0      	nop			; (mov r8, r8)
 8015e66:	46bd      	mov	sp, r7
 8015e68:	b007      	add	sp, #28
 8015e6a:	bd90      	pop	{r4, r7, pc}
 8015e6c:	33bca100 	.word	0x33bca100

08015e70 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b084      	sub	sp, #16
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> GetFskBandwidthRegValue\r\n"));

    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8015e78:	230f      	movs	r3, #15
 8015e7a:	18fb      	adds	r3, r7, r3
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	701a      	strb	r2, [r3, #0]
 8015e80:	e021      	b.n	8015ec6 <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8015e82:	230f      	movs	r3, #15
 8015e84:	18fb      	adds	r3, r7, r3
 8015e86:	781a      	ldrb	r2, [r3, #0]
 8015e88:	4b14      	ldr	r3, [pc, #80]	; (8015edc <GetFskBandwidthRegValue+0x6c>)
 8015e8a:	00d2      	lsls	r2, r2, #3
 8015e8c:	58d3      	ldr	r3, [r2, r3]
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d312      	bcc.n	8015eba <GetFskBandwidthRegValue+0x4a>
 8015e94:	230f      	movs	r3, #15
 8015e96:	18fb      	adds	r3, r7, r3
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	1c5a      	adds	r2, r3, #1
 8015e9c:	4b0f      	ldr	r3, [pc, #60]	; (8015edc <GetFskBandwidthRegValue+0x6c>)
 8015e9e:	00d2      	lsls	r2, r2, #3
 8015ea0:	58d3      	ldr	r3, [r2, r3]
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	429a      	cmp	r2, r3
 8015ea6:	d208      	bcs.n	8015eba <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8015ea8:	230f      	movs	r3, #15
 8015eaa:	18fb      	adds	r3, r7, r3
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	4a0b      	ldr	r2, [pc, #44]	; (8015edc <GetFskBandwidthRegValue+0x6c>)
 8015eb0:	00db      	lsls	r3, r3, #3
 8015eb2:	18d3      	adds	r3, r2, r3
 8015eb4:	3304      	adds	r3, #4
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	e00b      	b.n	8015ed2 <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8015eba:	210f      	movs	r1, #15
 8015ebc:	187b      	adds	r3, r7, r1
 8015ebe:	781a      	ldrb	r2, [r3, #0]
 8015ec0:	187b      	adds	r3, r7, r1
 8015ec2:	3201      	adds	r2, #1
 8015ec4:	701a      	strb	r2, [r3, #0]
 8015ec6:	230f      	movs	r3, #15
 8015ec8:	18fb      	adds	r3, r7, r3
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	2b14      	cmp	r3, #20
 8015ece:	d9d8      	bls.n	8015e82 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8015ed0:	e7fe      	b.n	8015ed0 <GetFskBandwidthRegValue+0x60>
}
 8015ed2:	0018      	movs	r0, r3
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	b004      	add	sp, #16
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	46c0      	nop			; (mov r8, r8)
 8015edc:	08020b00 	.word	0x08020b00

08015ee0 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8015ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ee2:	46c6      	mov	lr, r8
 8015ee4:	b500      	push	{lr}
 8015ee6:	b084      	sub	sp, #16
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60b9      	str	r1, [r7, #8]
 8015eec:	607a      	str	r2, [r7, #4]
 8015eee:	0019      	movs	r1, r3
 8015ef0:	240f      	movs	r4, #15
 8015ef2:	193b      	adds	r3, r7, r4
 8015ef4:	1c02      	adds	r2, r0, #0
 8015ef6:	701a      	strb	r2, [r3, #0]
 8015ef8:	230e      	movs	r3, #14
 8015efa:	18fb      	adds	r3, r7, r3
 8015efc:	1c0a      	adds	r2, r1, #0
 8015efe:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetRxConfig\r\n"));

    SX1276SetModem( modem );
 8015f00:	193b      	adds	r3, r7, r4
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	0018      	movs	r0, r3
 8015f06:	f001 fa57 	bl	80173b8 <SX1276SetModem>

    switch( modem )
 8015f0a:	193b      	adds	r3, r7, r4
 8015f0c:	781b      	ldrb	r3, [r3, #0]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d003      	beq.n	8015f1a <SX1276SetRxConfig+0x3a>
 8015f12:	2b01      	cmp	r3, #1
 8015f14:	d100      	bne.n	8015f18 <SX1276SetRxConfig+0x38>
 8015f16:	e100      	b.n	801611a <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8015f18:	e274      	b.n	8016404 <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8015f1a:	4bc0      	ldr	r3, [pc, #768]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f1c:	68ba      	ldr	r2, [r7, #8]
 8015f1e:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8015f20:	4bbe      	ldr	r3, [pc, #760]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8015f26:	4bbd      	ldr	r3, [pc, #756]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f2a:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8015f2c:	4bbb      	ldr	r3, [pc, #748]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f2e:	222c      	movs	r2, #44	; 0x2c
 8015f30:	2108      	movs	r1, #8
 8015f32:	468c      	mov	ip, r1
 8015f34:	44bc      	add	ip, r7
 8015f36:	4462      	add	r2, ip
 8015f38:	2122      	movs	r1, #34	; 0x22
 8015f3a:	7812      	ldrb	r2, [r2, #0]
 8015f3c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8015f3e:	4bb7      	ldr	r3, [pc, #732]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f40:	2130      	movs	r1, #48	; 0x30
 8015f42:	2008      	movs	r0, #8
 8015f44:	183a      	adds	r2, r7, r0
 8015f46:	1852      	adds	r2, r2, r1
 8015f48:	2123      	movs	r1, #35	; 0x23
 8015f4a:	7812      	ldrb	r2, [r2, #0]
 8015f4c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8015f4e:	4bb3      	ldr	r3, [pc, #716]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f50:	2134      	movs	r1, #52	; 0x34
 8015f52:	183a      	adds	r2, r7, r0
 8015f54:	1852      	adds	r2, r2, r1
 8015f56:	2124      	movs	r1, #36	; 0x24
 8015f58:	7812      	ldrb	r2, [r2, #0]
 8015f5a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8015f5c:	4baf      	ldr	r3, [pc, #700]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f5e:	2220      	movs	r2, #32
 8015f60:	2120      	movs	r1, #32
 8015f62:	468c      	mov	ip, r1
 8015f64:	2108      	movs	r1, #8
 8015f66:	4688      	mov	r8, r1
 8015f68:	44b8      	add	r8, r7
 8015f6a:	44c4      	add	ip, r8
 8015f6c:	4462      	add	r2, ip
 8015f6e:	2125      	movs	r1, #37	; 0x25
 8015f70:	7812      	ldrb	r2, [r2, #0]
 8015f72:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8015f74:	4ba9      	ldr	r3, [pc, #676]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f76:	2224      	movs	r2, #36	; 0x24
 8015f78:	2120      	movs	r1, #32
 8015f7a:	468c      	mov	ip, r1
 8015f7c:	2108      	movs	r1, #8
 8015f7e:	4688      	mov	r8, r1
 8015f80:	44b8      	add	r8, r7
 8015f82:	44c4      	add	ip, r8
 8015f84:	4462      	add	r2, ip
 8015f86:	2126      	movs	r1, #38	; 0x26
 8015f88:	7812      	ldrb	r2, [r2, #0]
 8015f8a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8015f8c:	4ba3      	ldr	r3, [pc, #652]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015f8e:	2624      	movs	r6, #36	; 0x24
 8015f90:	183a      	adds	r2, r7, r0
 8015f92:	1992      	adds	r2, r2, r6
 8015f94:	8812      	ldrh	r2, [r2, #0]
 8015f96:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8015f98:	2328      	movs	r3, #40	; 0x28
 8015f9a:	2208      	movs	r2, #8
 8015f9c:	4694      	mov	ip, r2
 8015f9e:	44bc      	add	ip, r7
 8015fa0:	4463      	add	r3, ip
 8015fa2:	881b      	ldrh	r3, [r3, #0]
 8015fa4:	0018      	movs	r0, r3
 8015fa6:	f7ec faef 	bl	8002588 <__aeabi_i2d>
 8015faa:	0004      	movs	r4, r0
 8015fac:	000d      	movs	r5, r1
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f7ec fb24 	bl	80025fc <__aeabi_ui2d>
 8015fb4:	0002      	movs	r2, r0
 8015fb6:	000b      	movs	r3, r1
 8015fb8:	2000      	movs	r0, #0
 8015fba:	4999      	ldr	r1, [pc, #612]	; (8016220 <SX1276SetRxConfig+0x340>)
 8015fbc:	f7eb f8ea 	bl	8001194 <__aeabi_ddiv>
 8015fc0:	0002      	movs	r2, r0
 8015fc2:	000b      	movs	r3, r1
 8015fc4:	0010      	movs	r0, r2
 8015fc6:	0019      	movs	r1, r3
 8015fc8:	2200      	movs	r2, #0
 8015fca:	4b96      	ldr	r3, [pc, #600]	; (8016224 <SX1276SetRxConfig+0x344>)
 8015fcc:	f7eb fcec 	bl	80019a8 <__aeabi_dmul>
 8015fd0:	0002      	movs	r2, r0
 8015fd2:	000b      	movs	r3, r1
 8015fd4:	0020      	movs	r0, r4
 8015fd6:	0029      	movs	r1, r5
 8015fd8:	f7eb fce6 	bl	80019a8 <__aeabi_dmul>
 8015fdc:	0003      	movs	r3, r0
 8015fde:	000c      	movs	r4, r1
 8015fe0:	0018      	movs	r0, r3
 8015fe2:	0021      	movs	r1, r4
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	4b90      	ldr	r3, [pc, #576]	; (8016228 <SX1276SetRxConfig+0x348>)
 8015fe8:	f7eb fcde 	bl	80019a8 <__aeabi_dmul>
 8015fec:	0003      	movs	r3, r0
 8015fee:	000c      	movs	r4, r1
 8015ff0:	0018      	movs	r0, r3
 8015ff2:	0021      	movs	r1, r4
 8015ff4:	f7ea fab2 	bl	800055c <__aeabi_d2uiz>
 8015ff8:	0002      	movs	r2, r0
 8015ffa:	4b88      	ldr	r3, [pc, #544]	; (801621c <SX1276SetRxConfig+0x33c>)
 8015ffc:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f7ec fafc 	bl	80025fc <__aeabi_ui2d>
 8016004:	0003      	movs	r3, r0
 8016006:	000c      	movs	r4, r1
 8016008:	001a      	movs	r2, r3
 801600a:	0023      	movs	r3, r4
 801600c:	2000      	movs	r0, #0
 801600e:	4987      	ldr	r1, [pc, #540]	; (801622c <SX1276SetRxConfig+0x34c>)
 8016010:	f7eb f8c0 	bl	8001194 <__aeabi_ddiv>
 8016014:	0003      	movs	r3, r0
 8016016:	000c      	movs	r4, r1
 8016018:	0018      	movs	r0, r3
 801601a:	0021      	movs	r1, r4
 801601c:	f7ea fa9e 	bl	800055c <__aeabi_d2uiz>
 8016020:	0003      	movs	r3, r0
 8016022:	b29b      	uxth	r3, r3
 8016024:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	0a1b      	lsrs	r3, r3, #8
 801602a:	b2db      	uxtb	r3, r3
 801602c:	0019      	movs	r1, r3
 801602e:	2002      	movs	r0, #2
 8016030:	f001 fa1a 	bl	8017468 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	b2db      	uxtb	r3, r3
 8016038:	0019      	movs	r1, r3
 801603a:	2003      	movs	r0, #3
 801603c:	f001 fa14 	bl	8017468 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	0018      	movs	r0, r3
 8016044:	f7ff ff14 	bl	8015e70 <GetFskBandwidthRegValue>
 8016048:	0003      	movs	r3, r0
 801604a:	0019      	movs	r1, r3
 801604c:	2012      	movs	r0, #18
 801604e:	f001 fa0b 	bl	8017468 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8016052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016054:	0018      	movs	r0, r3
 8016056:	f7ff ff0b 	bl	8015e70 <GetFskBandwidthRegValue>
 801605a:	0003      	movs	r3, r0
 801605c:	0019      	movs	r1, r3
 801605e:	2013      	movs	r0, #19
 8016060:	f001 fa02 	bl	8017468 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8016064:	2008      	movs	r0, #8
 8016066:	0004      	movs	r4, r0
 8016068:	183b      	adds	r3, r7, r0
 801606a:	199b      	adds	r3, r3, r6
 801606c:	881b      	ldrh	r3, [r3, #0]
 801606e:	0a1b      	lsrs	r3, r3, #8
 8016070:	b29b      	uxth	r3, r3
 8016072:	b2db      	uxtb	r3, r3
 8016074:	0019      	movs	r1, r3
 8016076:	2025      	movs	r0, #37	; 0x25
 8016078:	f001 f9f6 	bl	8017468 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801607c:	193b      	adds	r3, r7, r4
 801607e:	199b      	adds	r3, r3, r6
 8016080:	881b      	ldrh	r3, [r3, #0]
 8016082:	b2db      	uxtb	r3, r3
 8016084:	0019      	movs	r1, r3
 8016086:	2026      	movs	r0, #38	; 0x26
 8016088:	f001 f9ee 	bl	8017468 <SX1276Write>
            if( fixLen == 1 )
 801608c:	222c      	movs	r2, #44	; 0x2c
 801608e:	193b      	adds	r3, r7, r4
 8016090:	189b      	adds	r3, r3, r2
 8016092:	781b      	ldrb	r3, [r3, #0]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d00a      	beq.n	80160ae <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8016098:	2330      	movs	r3, #48	; 0x30
 801609a:	2208      	movs	r2, #8
 801609c:	4694      	mov	ip, r2
 801609e:	44bc      	add	ip, r7
 80160a0:	4463      	add	r3, ip
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	0019      	movs	r1, r3
 80160a6:	2032      	movs	r0, #50	; 0x32
 80160a8:	f001 f9de 	bl	8017468 <SX1276Write>
 80160ac:	e003      	b.n	80160b6 <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80160ae:	21ff      	movs	r1, #255	; 0xff
 80160b0:	2032      	movs	r0, #50	; 0x32
 80160b2:	f001 f9d9 	bl	8017468 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80160b6:	2030      	movs	r0, #48	; 0x30
 80160b8:	f001 f9ea 	bl	8017490 <SX1276Read>
 80160bc:	0003      	movs	r3, r0
 80160be:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80160c0:	226f      	movs	r2, #111	; 0x6f
 80160c2:	4013      	ands	r3, r2
 80160c4:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80160c6:	232c      	movs	r3, #44	; 0x2c
 80160c8:	2108      	movs	r1, #8
 80160ca:	468c      	mov	ip, r1
 80160cc:	44bc      	add	ip, r7
 80160ce:	4463      	add	r3, ip
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d001      	beq.n	80160da <SX1276SetRxConfig+0x1fa>
 80160d6:	2300      	movs	r3, #0
 80160d8:	e001      	b.n	80160de <SX1276SetRxConfig+0x1fe>
 80160da:	2380      	movs	r3, #128	; 0x80
 80160dc:	425b      	negs	r3, r3
 80160de:	4313      	orrs	r3, r2
 80160e0:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80160e2:	2334      	movs	r3, #52	; 0x34
 80160e4:	2108      	movs	r1, #8
 80160e6:	468c      	mov	ip, r1
 80160e8:	44bc      	add	ip, r7
 80160ea:	4463      	add	r3, ip
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80160f0:	b25b      	sxtb	r3, r3
 80160f2:	4313      	orrs	r3, r2
 80160f4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	0019      	movs	r1, r3
 80160fa:	2030      	movs	r0, #48	; 0x30
 80160fc:	f001 f9b4 	bl	8017468 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8016100:	2031      	movs	r0, #49	; 0x31
 8016102:	f001 f9c5 	bl	8017490 <SX1276Read>
 8016106:	0003      	movs	r3, r0
 8016108:	001a      	movs	r2, r3
 801610a:	2340      	movs	r3, #64	; 0x40
 801610c:	4313      	orrs	r3, r2
 801610e:	b2db      	uxtb	r3, r3
 8016110:	0019      	movs	r1, r3
 8016112:	2031      	movs	r0, #49	; 0x31
 8016114:	f001 f9a8 	bl	8017468 <SX1276Write>
        break;
 8016118:	e174      	b.n	8016404 <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 801611a:	68bb      	ldr	r3, [r7, #8]
 801611c:	2b02      	cmp	r3, #2
 801611e:	d900      	bls.n	8016122 <SX1276SetRxConfig+0x242>
                while( 1 );
 8016120:	e7fe      	b.n	8016120 <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	3307      	adds	r3, #7
 8016126:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8016128:	4b3c      	ldr	r3, [pc, #240]	; (801621c <SX1276SetRxConfig+0x33c>)
 801612a:	68ba      	ldr	r2, [r7, #8]
 801612c:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801612e:	4b3b      	ldr	r3, [pc, #236]	; (801621c <SX1276SetRxConfig+0x33c>)
 8016130:	687a      	ldr	r2, [r7, #4]
 8016132:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8016134:	4b39      	ldr	r3, [pc, #228]	; (801621c <SX1276SetRxConfig+0x33c>)
 8016136:	220e      	movs	r2, #14
 8016138:	18ba      	adds	r2, r7, r2
 801613a:	214d      	movs	r1, #77	; 0x4d
 801613c:	7812      	ldrb	r2, [r2, #0]
 801613e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8016140:	4b36      	ldr	r3, [pc, #216]	; (801621c <SX1276SetRxConfig+0x33c>)
 8016142:	2224      	movs	r2, #36	; 0x24
 8016144:	2108      	movs	r1, #8
 8016146:	468c      	mov	ip, r1
 8016148:	44bc      	add	ip, r7
 801614a:	4462      	add	r2, ip
 801614c:	214e      	movs	r1, #78	; 0x4e
 801614e:	8812      	ldrh	r2, [r2, #0]
 8016150:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8016152:	4b32      	ldr	r3, [pc, #200]	; (801621c <SX1276SetRxConfig+0x33c>)
 8016154:	222c      	movs	r2, #44	; 0x2c
 8016156:	2108      	movs	r1, #8
 8016158:	468c      	mov	ip, r1
 801615a:	44bc      	add	ip, r7
 801615c:	4462      	add	r2, ip
 801615e:	2150      	movs	r1, #80	; 0x50
 8016160:	7812      	ldrb	r2, [r2, #0]
 8016162:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8016164:	4b2d      	ldr	r3, [pc, #180]	; (801621c <SX1276SetRxConfig+0x33c>)
 8016166:	2230      	movs	r2, #48	; 0x30
 8016168:	2108      	movs	r1, #8
 801616a:	468c      	mov	ip, r1
 801616c:	44bc      	add	ip, r7
 801616e:	4462      	add	r2, ip
 8016170:	2151      	movs	r1, #81	; 0x51
 8016172:	7812      	ldrb	r2, [r2, #0]
 8016174:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8016176:	4b29      	ldr	r3, [pc, #164]	; (801621c <SX1276SetRxConfig+0x33c>)
 8016178:	2234      	movs	r2, #52	; 0x34
 801617a:	2108      	movs	r1, #8
 801617c:	468c      	mov	ip, r1
 801617e:	44bc      	add	ip, r7
 8016180:	4462      	add	r2, ip
 8016182:	2152      	movs	r1, #82	; 0x52
 8016184:	7812      	ldrb	r2, [r2, #0]
 8016186:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8016188:	4b24      	ldr	r3, [pc, #144]	; (801621c <SX1276SetRxConfig+0x33c>)
 801618a:	2238      	movs	r2, #56	; 0x38
 801618c:	2108      	movs	r1, #8
 801618e:	468c      	mov	ip, r1
 8016190:	44bc      	add	ip, r7
 8016192:	4462      	add	r2, ip
 8016194:	2153      	movs	r1, #83	; 0x53
 8016196:	7812      	ldrb	r2, [r2, #0]
 8016198:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801619a:	4b20      	ldr	r3, [pc, #128]	; (801621c <SX1276SetRxConfig+0x33c>)
 801619c:	223c      	movs	r2, #60	; 0x3c
 801619e:	2108      	movs	r1, #8
 80161a0:	468c      	mov	ip, r1
 80161a2:	44bc      	add	ip, r7
 80161a4:	4462      	add	r2, ip
 80161a6:	2154      	movs	r1, #84	; 0x54
 80161a8:	7812      	ldrb	r2, [r2, #0]
 80161aa:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80161ac:	4b1b      	ldr	r3, [pc, #108]	; (801621c <SX1276SetRxConfig+0x33c>)
 80161ae:	2220      	movs	r2, #32
 80161b0:	2120      	movs	r1, #32
 80161b2:	468c      	mov	ip, r1
 80161b4:	2108      	movs	r1, #8
 80161b6:	4688      	mov	r8, r1
 80161b8:	44b8      	add	r8, r7
 80161ba:	44c4      	add	ip, r8
 80161bc:	4462      	add	r2, ip
 80161be:	2155      	movs	r1, #85	; 0x55
 80161c0:	7812      	ldrb	r2, [r2, #0]
 80161c2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80161c4:	4b15      	ldr	r3, [pc, #84]	; (801621c <SX1276SetRxConfig+0x33c>)
 80161c6:	2224      	movs	r2, #36	; 0x24
 80161c8:	2120      	movs	r1, #32
 80161ca:	468c      	mov	ip, r1
 80161cc:	2108      	movs	r1, #8
 80161ce:	4688      	mov	r8, r1
 80161d0:	44b8      	add	r8, r7
 80161d2:	44c4      	add	ip, r8
 80161d4:	4462      	add	r2, ip
 80161d6:	2156      	movs	r1, #86	; 0x56
 80161d8:	7812      	ldrb	r2, [r2, #0]
 80161da:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2b0c      	cmp	r3, #12
 80161e0:	d902      	bls.n	80161e8 <SX1276SetRxConfig+0x308>
                datarate = 12;
 80161e2:	230c      	movs	r3, #12
 80161e4:	607b      	str	r3, [r7, #4]
 80161e6:	e004      	b.n	80161f2 <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2b05      	cmp	r3, #5
 80161ec:	d801      	bhi.n	80161f2 <SX1276SetRxConfig+0x312>
                datarate = 6;
 80161ee:	2306      	movs	r3, #6
 80161f0:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	2b07      	cmp	r3, #7
 80161f6:	d105      	bne.n	8016204 <SX1276SetRxConfig+0x324>
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	2b0b      	cmp	r3, #11
 80161fc:	d008      	beq.n	8016210 <SX1276SetRxConfig+0x330>
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	2b0c      	cmp	r3, #12
 8016202:	d005      	beq.n	8016210 <SX1276SetRxConfig+0x330>
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	2b08      	cmp	r3, #8
 8016208:	d112      	bne.n	8016230 <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2b0c      	cmp	r3, #12
 801620e:	d10f      	bne.n	8016230 <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8016210:	4b02      	ldr	r3, [pc, #8]	; (801621c <SX1276SetRxConfig+0x33c>)
 8016212:	224c      	movs	r2, #76	; 0x4c
 8016214:	2101      	movs	r1, #1
 8016216:	5499      	strb	r1, [r3, r2]
 8016218:	e00e      	b.n	8016238 <SX1276SetRxConfig+0x358>
 801621a:	46c0      	nop			; (mov r8, r8)
 801621c:	200014a4 	.word	0x200014a4
 8016220:	3ff00000 	.word	0x3ff00000
 8016224:	40200000 	.word	0x40200000
 8016228:	408f4000 	.word	0x408f4000
 801622c:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8016230:	4b77      	ldr	r3, [pc, #476]	; (8016410 <SX1276SetRxConfig+0x530>)
 8016232:	224c      	movs	r2, #76	; 0x4c
 8016234:	2100      	movs	r1, #0
 8016236:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8016238:	201d      	movs	r0, #29
 801623a:	f001 f929 	bl	8017490 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801623e:	68bb      	ldr	r3, [r7, #8]
 8016240:	b2db      	uxtb	r3, r3
 8016242:	011b      	lsls	r3, r3, #4
 8016244:	b2da      	uxtb	r2, r3
 8016246:	230e      	movs	r3, #14
 8016248:	18fb      	adds	r3, r7, r3
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	18db      	adds	r3, r3, r3
 801624e:	b2db      	uxtb	r3, r3
 8016250:	4313      	orrs	r3, r2
 8016252:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8016254:	242c      	movs	r4, #44	; 0x2c
 8016256:	2608      	movs	r6, #8
 8016258:	19bb      	adds	r3, r7, r6
 801625a:	191b      	adds	r3, r3, r4
 801625c:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801625e:	4313      	orrs	r3, r2
 8016260:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8016262:	0019      	movs	r1, r3
 8016264:	201d      	movs	r0, #29
 8016266:	f001 f8ff 	bl	8017468 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801626a:	201e      	movs	r0, #30
 801626c:	f001 f910 	bl	8017490 <SX1276Read>
 8016270:	0003      	movs	r3, r0
 8016272:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8016274:	2308      	movs	r3, #8
 8016276:	4013      	ands	r3, r2
 8016278:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	b2db      	uxtb	r3, r3
 801627e:	011b      	lsls	r3, r3, #4
 8016280:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8016282:	4313      	orrs	r3, r2
 8016284:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8016286:	2334      	movs	r3, #52	; 0x34
 8016288:	2108      	movs	r1, #8
 801628a:	468c      	mov	ip, r1
 801628c:	44bc      	add	ip, r7
 801628e:	4463      	add	r3, ip
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	b2db      	uxtb	r3, r3
 8016296:	4313      	orrs	r3, r2
 8016298:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 801629a:	2528      	movs	r5, #40	; 0x28
 801629c:	19bb      	adds	r3, r7, r6
 801629e:	195b      	adds	r3, r3, r5
 80162a0:	881b      	ldrh	r3, [r3, #0]
 80162a2:	0a1b      	lsrs	r3, r3, #8
 80162a4:	b29b      	uxth	r3, r3
 80162a6:	b2db      	uxtb	r3, r3
 80162a8:	2103      	movs	r1, #3
 80162aa:	400b      	ands	r3, r1
 80162ac:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80162ae:	4313      	orrs	r3, r2
 80162b0:	b2db      	uxtb	r3, r3
 80162b2:	0019      	movs	r1, r3
 80162b4:	201e      	movs	r0, #30
 80162b6:	f001 f8d7 	bl	8017468 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80162ba:	2026      	movs	r0, #38	; 0x26
 80162bc:	f001 f8e8 	bl	8017490 <SX1276Read>
 80162c0:	0003      	movs	r3, r0
 80162c2:	b25b      	sxtb	r3, r3
 80162c4:	2208      	movs	r2, #8
 80162c6:	4393      	bics	r3, r2
 80162c8:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80162ca:	4b51      	ldr	r3, [pc, #324]	; (8016410 <SX1276SetRxConfig+0x530>)
 80162cc:	214c      	movs	r1, #76	; 0x4c
 80162ce:	5c5b      	ldrb	r3, [r3, r1]
 80162d0:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80162d2:	b25b      	sxtb	r3, r3
 80162d4:	4313      	orrs	r3, r2
 80162d6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80162d8:	b2db      	uxtb	r3, r3
 80162da:	0019      	movs	r1, r3
 80162dc:	2026      	movs	r0, #38	; 0x26
 80162de:	f001 f8c3 	bl	8017468 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80162e2:	19bb      	adds	r3, r7, r6
 80162e4:	195b      	adds	r3, r3, r5
 80162e6:	881b      	ldrh	r3, [r3, #0]
 80162e8:	b2db      	uxtb	r3, r3
 80162ea:	0019      	movs	r1, r3
 80162ec:	201f      	movs	r0, #31
 80162ee:	f001 f8bb 	bl	8017468 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80162f2:	2524      	movs	r5, #36	; 0x24
 80162f4:	19bb      	adds	r3, r7, r6
 80162f6:	195b      	adds	r3, r3, r5
 80162f8:	881b      	ldrh	r3, [r3, #0]
 80162fa:	0a1b      	lsrs	r3, r3, #8
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	b2db      	uxtb	r3, r3
 8016300:	0019      	movs	r1, r3
 8016302:	2020      	movs	r0, #32
 8016304:	f001 f8b0 	bl	8017468 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8016308:	19bb      	adds	r3, r7, r6
 801630a:	195b      	adds	r3, r3, r5
 801630c:	881b      	ldrh	r3, [r3, #0]
 801630e:	b2db      	uxtb	r3, r3
 8016310:	0019      	movs	r1, r3
 8016312:	2021      	movs	r0, #33	; 0x21
 8016314:	f001 f8a8 	bl	8017468 <SX1276Write>
            if( fixLen == 1 )
 8016318:	19bb      	adds	r3, r7, r6
 801631a:	191b      	adds	r3, r3, r4
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d009      	beq.n	8016336 <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8016322:	2330      	movs	r3, #48	; 0x30
 8016324:	2208      	movs	r2, #8
 8016326:	4694      	mov	ip, r2
 8016328:	44bc      	add	ip, r7
 801632a:	4463      	add	r3, ip
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	0019      	movs	r1, r3
 8016330:	2022      	movs	r0, #34	; 0x22
 8016332:	f001 f899 	bl	8017468 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8016336:	4b36      	ldr	r3, [pc, #216]	; (8016410 <SX1276SetRxConfig+0x530>)
 8016338:	2253      	movs	r2, #83	; 0x53
 801633a:	5c9b      	ldrb	r3, [r3, r2]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d013      	beq.n	8016368 <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8016340:	2044      	movs	r0, #68	; 0x44
 8016342:	f001 f8a5 	bl	8017490 <SX1276Read>
 8016346:	0003      	movs	r3, r0
 8016348:	001a      	movs	r2, r3
 801634a:	2380      	movs	r3, #128	; 0x80
 801634c:	425b      	negs	r3, r3
 801634e:	4313      	orrs	r3, r2
 8016350:	b2db      	uxtb	r3, r3
 8016352:	0019      	movs	r1, r3
 8016354:	2044      	movs	r0, #68	; 0x44
 8016356:	f001 f887 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801635a:	4b2d      	ldr	r3, [pc, #180]	; (8016410 <SX1276SetRxConfig+0x530>)
 801635c:	2254      	movs	r2, #84	; 0x54
 801635e:	5c9b      	ldrb	r3, [r3, r2]
 8016360:	0019      	movs	r1, r3
 8016362:	2024      	movs	r0, #36	; 0x24
 8016364:	f001 f880 	bl	8017468 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	2b09      	cmp	r3, #9
 801636c:	d10d      	bne.n	801638a <SX1276SetRxConfig+0x4aa>
 801636e:	4b28      	ldr	r3, [pc, #160]	; (8016410 <SX1276SetRxConfig+0x530>)
 8016370:	689b      	ldr	r3, [r3, #8]
 8016372:	4a28      	ldr	r2, [pc, #160]	; (8016414 <SX1276SetRxConfig+0x534>)
 8016374:	4293      	cmp	r3, r2
 8016376:	d908      	bls.n	801638a <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8016378:	2102      	movs	r1, #2
 801637a:	2036      	movs	r0, #54	; 0x36
 801637c:	f001 f874 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8016380:	2164      	movs	r1, #100	; 0x64
 8016382:	203a      	movs	r0, #58	; 0x3a
 8016384:	f001 f870 	bl	8017468 <SX1276Write>
 8016388:	e00f      	b.n	80163aa <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 801638a:	68bb      	ldr	r3, [r7, #8]
 801638c:	2b09      	cmp	r3, #9
 801638e:	d108      	bne.n	80163a2 <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8016390:	2102      	movs	r1, #2
 8016392:	2036      	movs	r0, #54	; 0x36
 8016394:	f001 f868 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8016398:	217f      	movs	r1, #127	; 0x7f
 801639a:	203a      	movs	r0, #58	; 0x3a
 801639c:	f001 f864 	bl	8017468 <SX1276Write>
 80163a0:	e003      	b.n	80163aa <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80163a2:	2103      	movs	r1, #3
 80163a4:	2036      	movs	r0, #54	; 0x36
 80163a6:	f001 f85f 	bl	8017468 <SX1276Write>
            if( datarate == 6 )
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2b06      	cmp	r3, #6
 80163ae:	d114      	bne.n	80163da <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80163b0:	2031      	movs	r0, #49	; 0x31
 80163b2:	f001 f86d 	bl	8017490 <SX1276Read>
 80163b6:	0003      	movs	r3, r0
 80163b8:	b25b      	sxtb	r3, r3
 80163ba:	2207      	movs	r2, #7
 80163bc:	4393      	bics	r3, r2
 80163be:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80163c0:	2205      	movs	r2, #5
 80163c2:	4313      	orrs	r3, r2
 80163c4:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80163c6:	b2db      	uxtb	r3, r3
 80163c8:	0019      	movs	r1, r3
 80163ca:	2031      	movs	r0, #49	; 0x31
 80163cc:	f001 f84c 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80163d0:	210c      	movs	r1, #12
 80163d2:	2037      	movs	r0, #55	; 0x37
 80163d4:	f001 f848 	bl	8017468 <SX1276Write>
        break;
 80163d8:	e013      	b.n	8016402 <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80163da:	2031      	movs	r0, #49	; 0x31
 80163dc:	f001 f858 	bl	8017490 <SX1276Read>
 80163e0:	0003      	movs	r3, r0
 80163e2:	b25b      	sxtb	r3, r3
 80163e4:	2207      	movs	r2, #7
 80163e6:	4393      	bics	r3, r2
 80163e8:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80163ea:	2203      	movs	r2, #3
 80163ec:	4313      	orrs	r3, r2
 80163ee:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	0019      	movs	r1, r3
 80163f4:	2031      	movs	r0, #49	; 0x31
 80163f6:	f001 f837 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80163fa:	210a      	movs	r1, #10
 80163fc:	2037      	movs	r0, #55	; 0x37
 80163fe:	f001 f833 	bl	8017468 <SX1276Write>
        break;
 8016402:	46c0      	nop			; (mov r8, r8)
}
 8016404:	46c0      	nop			; (mov r8, r8)
 8016406:	46bd      	mov	sp, r7
 8016408:	b004      	add	sp, #16
 801640a:	bc04      	pop	{r2}
 801640c:	4690      	mov	r8, r2
 801640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016410:	200014a4 	.word	0x200014a4
 8016414:	1f4add40 	.word	0x1f4add40

08016418 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801641a:	b085      	sub	sp, #20
 801641c:	af00      	add	r7, sp, #0
 801641e:	60ba      	str	r2, [r7, #8]
 8016420:	607b      	str	r3, [r7, #4]
 8016422:	240f      	movs	r4, #15
 8016424:	193b      	adds	r3, r7, r4
 8016426:	1c02      	adds	r2, r0, #0
 8016428:	701a      	strb	r2, [r3, #0]
 801642a:	250e      	movs	r5, #14
 801642c:	197b      	adds	r3, r7, r5
 801642e:	1c0a      	adds	r2, r1, #0
 8016430:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxConfig\r\n"));

    SX1276SetModem( modem );
 8016432:	193b      	adds	r3, r7, r4
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	0018      	movs	r0, r3
 8016438:	f000 ffbe 	bl	80173b8 <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 801643c:	4be5      	ldr	r3, [pc, #916]	; (80167d4 <SX1276SetTxConfig+0x3bc>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	68db      	ldr	r3, [r3, #12]
 8016442:	197a      	adds	r2, r7, r5
 8016444:	7812      	ldrb	r2, [r2, #0]
 8016446:	b252      	sxtb	r2, r2
 8016448:	0010      	movs	r0, r2
 801644a:	4798      	blx	r3

    switch( modem )
 801644c:	193b      	adds	r3, r7, r4
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d003      	beq.n	801645c <SX1276SetTxConfig+0x44>
 8016454:	2b01      	cmp	r3, #1
 8016456:	d100      	bne.n	801645a <SX1276SetTxConfig+0x42>
 8016458:	e0b1      	b.n	80165be <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801645a:	e1d8      	b.n	801680e <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 801645c:	4bde      	ldr	r3, [pc, #888]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 801645e:	220e      	movs	r2, #14
 8016460:	18ba      	adds	r2, r7, r2
 8016462:	7812      	ldrb	r2, [r2, #0]
 8016464:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8016466:	4bdc      	ldr	r3, [pc, #880]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 8016468:	68ba      	ldr	r2, [r7, #8]
 801646a:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801646c:	4bda      	ldr	r3, [pc, #872]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8016472:	4bd9      	ldr	r3, [pc, #868]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 8016474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016476:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8016478:	4bd7      	ldr	r3, [pc, #860]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 801647a:	2528      	movs	r5, #40	; 0x28
 801647c:	2408      	movs	r4, #8
 801647e:	193a      	adds	r2, r7, r4
 8016480:	1952      	adds	r2, r2, r5
 8016482:	8812      	ldrh	r2, [r2, #0]
 8016484:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8016486:	4bd4      	ldr	r3, [pc, #848]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 8016488:	262c      	movs	r6, #44	; 0x2c
 801648a:	193a      	adds	r2, r7, r4
 801648c:	1992      	adds	r2, r2, r6
 801648e:	2122      	movs	r1, #34	; 0x22
 8016490:	7812      	ldrb	r2, [r2, #0]
 8016492:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8016494:	4bd0      	ldr	r3, [pc, #832]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 8016496:	2230      	movs	r2, #48	; 0x30
 8016498:	2108      	movs	r1, #8
 801649a:	468c      	mov	ip, r1
 801649c:	44bc      	add	ip, r7
 801649e:	4462      	add	r2, ip
 80164a0:	2124      	movs	r1, #36	; 0x24
 80164a2:	7812      	ldrb	r2, [r2, #0]
 80164a4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80164a6:	4bcc      	ldr	r3, [pc, #816]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80164a8:	223c      	movs	r2, #60	; 0x3c
 80164aa:	2108      	movs	r1, #8
 80164ac:	468c      	mov	ip, r1
 80164ae:	44bc      	add	ip, r7
 80164b0:	4462      	add	r2, ip
 80164b2:	2125      	movs	r1, #37	; 0x25
 80164b4:	7812      	ldrb	r2, [r2, #0]
 80164b6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80164b8:	4bc7      	ldr	r3, [pc, #796]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80164ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80164bc:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80164be:	68b8      	ldr	r0, [r7, #8]
 80164c0:	f7ec f89c 	bl	80025fc <__aeabi_ui2d>
 80164c4:	2200      	movs	r2, #0
 80164c6:	4bc5      	ldr	r3, [pc, #788]	; (80167dc <SX1276SetTxConfig+0x3c4>)
 80164c8:	f7ea fe64 	bl	8001194 <__aeabi_ddiv>
 80164cc:	0003      	movs	r3, r0
 80164ce:	000c      	movs	r4, r1
 80164d0:	0018      	movs	r0, r3
 80164d2:	0021      	movs	r1, r4
 80164d4:	f7ea f842 	bl	800055c <__aeabi_d2uiz>
 80164d8:	0003      	movs	r3, r0
 80164da:	b29b      	uxth	r3, r3
 80164dc:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80164de:	68bb      	ldr	r3, [r7, #8]
 80164e0:	0a1b      	lsrs	r3, r3, #8
 80164e2:	b2db      	uxtb	r3, r3
 80164e4:	0019      	movs	r1, r3
 80164e6:	2004      	movs	r0, #4
 80164e8:	f000 ffbe 	bl	8017468 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	0019      	movs	r1, r3
 80164f2:	2005      	movs	r0, #5
 80164f4:	f000 ffb8 	bl	8017468 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80164f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164fa:	f7ec f87f 	bl	80025fc <__aeabi_ui2d>
 80164fe:	0003      	movs	r3, r0
 8016500:	000c      	movs	r4, r1
 8016502:	001a      	movs	r2, r3
 8016504:	0023      	movs	r3, r4
 8016506:	2000      	movs	r0, #0
 8016508:	49b5      	ldr	r1, [pc, #724]	; (80167e0 <SX1276SetTxConfig+0x3c8>)
 801650a:	f7ea fe43 	bl	8001194 <__aeabi_ddiv>
 801650e:	0003      	movs	r3, r0
 8016510:	000c      	movs	r4, r1
 8016512:	0018      	movs	r0, r3
 8016514:	0021      	movs	r1, r4
 8016516:	f7ea f821 	bl	800055c <__aeabi_d2uiz>
 801651a:	0003      	movs	r3, r0
 801651c:	b29b      	uxth	r3, r3
 801651e:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8016520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016522:	0a1b      	lsrs	r3, r3, #8
 8016524:	b2db      	uxtb	r3, r3
 8016526:	0019      	movs	r1, r3
 8016528:	2002      	movs	r0, #2
 801652a:	f000 ff9d 	bl	8017468 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016530:	b2db      	uxtb	r3, r3
 8016532:	0019      	movs	r1, r3
 8016534:	2003      	movs	r0, #3
 8016536:	f000 ff97 	bl	8017468 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801653a:	2408      	movs	r4, #8
 801653c:	193b      	adds	r3, r7, r4
 801653e:	195b      	adds	r3, r3, r5
 8016540:	881b      	ldrh	r3, [r3, #0]
 8016542:	0a1b      	lsrs	r3, r3, #8
 8016544:	b29b      	uxth	r3, r3
 8016546:	b2db      	uxtb	r3, r3
 8016548:	0019      	movs	r1, r3
 801654a:	2025      	movs	r0, #37	; 0x25
 801654c:	f000 ff8c 	bl	8017468 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8016550:	193b      	adds	r3, r7, r4
 8016552:	195b      	adds	r3, r3, r5
 8016554:	881b      	ldrh	r3, [r3, #0]
 8016556:	b2db      	uxtb	r3, r3
 8016558:	0019      	movs	r1, r3
 801655a:	2026      	movs	r0, #38	; 0x26
 801655c:	f000 ff84 	bl	8017468 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8016560:	2030      	movs	r0, #48	; 0x30
 8016562:	f000 ff95 	bl	8017490 <SX1276Read>
 8016566:	0003      	movs	r3, r0
 8016568:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801656a:	226f      	movs	r2, #111	; 0x6f
 801656c:	4013      	ands	r3, r2
 801656e:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8016570:	193b      	adds	r3, r7, r4
 8016572:	199b      	adds	r3, r3, r6
 8016574:	781b      	ldrb	r3, [r3, #0]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d001      	beq.n	801657e <SX1276SetTxConfig+0x166>
 801657a:	2300      	movs	r3, #0
 801657c:	e001      	b.n	8016582 <SX1276SetTxConfig+0x16a>
 801657e:	2380      	movs	r3, #128	; 0x80
 8016580:	425b      	negs	r3, r3
 8016582:	4313      	orrs	r3, r2
 8016584:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8016586:	2330      	movs	r3, #48	; 0x30
 8016588:	2108      	movs	r1, #8
 801658a:	468c      	mov	ip, r1
 801658c:	44bc      	add	ip, r7
 801658e:	4463      	add	r3, ip
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8016594:	b25b      	sxtb	r3, r3
 8016596:	4313      	orrs	r3, r2
 8016598:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801659a:	b2db      	uxtb	r3, r3
 801659c:	0019      	movs	r1, r3
 801659e:	2030      	movs	r0, #48	; 0x30
 80165a0:	f000 ff62 	bl	8017468 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80165a4:	2031      	movs	r0, #49	; 0x31
 80165a6:	f000 ff73 	bl	8017490 <SX1276Read>
 80165aa:	0003      	movs	r3, r0
 80165ac:	001a      	movs	r2, r3
 80165ae:	2340      	movs	r3, #64	; 0x40
 80165b0:	4313      	orrs	r3, r2
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	0019      	movs	r1, r3
 80165b6:	2031      	movs	r0, #49	; 0x31
 80165b8:	f000 ff56 	bl	8017468 <SX1276Write>
        break;
 80165bc:	e127      	b.n	801680e <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 80165be:	4b86      	ldr	r3, [pc, #536]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80165c0:	220e      	movs	r2, #14
 80165c2:	18ba      	adds	r2, r7, r2
 80165c4:	2140      	movs	r1, #64	; 0x40
 80165c6:	7812      	ldrb	r2, [r2, #0]
 80165c8:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	2b02      	cmp	r3, #2
 80165ce:	d900      	bls.n	80165d2 <SX1276SetTxConfig+0x1ba>
                while( 1 );
 80165d0:	e7fe      	b.n	80165d0 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	3307      	adds	r3, #7
 80165d6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80165d8:	4b7f      	ldr	r3, [pc, #508]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80165da:	687a      	ldr	r2, [r7, #4]
 80165dc:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80165de:	4b7e      	ldr	r3, [pc, #504]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80165e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165e2:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80165e4:	4b7c      	ldr	r3, [pc, #496]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80165e6:	2224      	movs	r2, #36	; 0x24
 80165e8:	2108      	movs	r1, #8
 80165ea:	468c      	mov	ip, r1
 80165ec:	44bc      	add	ip, r7
 80165ee:	4462      	add	r2, ip
 80165f0:	214d      	movs	r1, #77	; 0x4d
 80165f2:	7812      	ldrb	r2, [r2, #0]
 80165f4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80165f6:	4b78      	ldr	r3, [pc, #480]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80165f8:	2228      	movs	r2, #40	; 0x28
 80165fa:	2108      	movs	r1, #8
 80165fc:	468c      	mov	ip, r1
 80165fe:	44bc      	add	ip, r7
 8016600:	4462      	add	r2, ip
 8016602:	214e      	movs	r1, #78	; 0x4e
 8016604:	8812      	ldrh	r2, [r2, #0]
 8016606:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8016608:	4b73      	ldr	r3, [pc, #460]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 801660a:	222c      	movs	r2, #44	; 0x2c
 801660c:	2108      	movs	r1, #8
 801660e:	468c      	mov	ip, r1
 8016610:	44bc      	add	ip, r7
 8016612:	4462      	add	r2, ip
 8016614:	2150      	movs	r1, #80	; 0x50
 8016616:	7812      	ldrb	r2, [r2, #0]
 8016618:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801661a:	4b6f      	ldr	r3, [pc, #444]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 801661c:	2234      	movs	r2, #52	; 0x34
 801661e:	2108      	movs	r1, #8
 8016620:	468c      	mov	ip, r1
 8016622:	44bc      	add	ip, r7
 8016624:	4462      	add	r2, ip
 8016626:	2153      	movs	r1, #83	; 0x53
 8016628:	7812      	ldrb	r2, [r2, #0]
 801662a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801662c:	4b6a      	ldr	r3, [pc, #424]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 801662e:	2238      	movs	r2, #56	; 0x38
 8016630:	2108      	movs	r1, #8
 8016632:	468c      	mov	ip, r1
 8016634:	44bc      	add	ip, r7
 8016636:	4462      	add	r2, ip
 8016638:	2154      	movs	r1, #84	; 0x54
 801663a:	7812      	ldrb	r2, [r2, #0]
 801663c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801663e:	4b66      	ldr	r3, [pc, #408]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 8016640:	2230      	movs	r2, #48	; 0x30
 8016642:	2108      	movs	r1, #8
 8016644:	468c      	mov	ip, r1
 8016646:	44bc      	add	ip, r7
 8016648:	4462      	add	r2, ip
 801664a:	2152      	movs	r1, #82	; 0x52
 801664c:	7812      	ldrb	r2, [r2, #0]
 801664e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8016650:	4b61      	ldr	r3, [pc, #388]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 8016652:	223c      	movs	r2, #60	; 0x3c
 8016654:	2108      	movs	r1, #8
 8016656:	468c      	mov	ip, r1
 8016658:	44bc      	add	ip, r7
 801665a:	4462      	add	r2, ip
 801665c:	2155      	movs	r1, #85	; 0x55
 801665e:	7812      	ldrb	r2, [r2, #0]
 8016660:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8016662:	4b5d      	ldr	r3, [pc, #372]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 8016664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016666:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8016668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666a:	2b0c      	cmp	r3, #12
 801666c:	d902      	bls.n	8016674 <SX1276SetTxConfig+0x25c>
                datarate = 12;
 801666e:	230c      	movs	r3, #12
 8016670:	62bb      	str	r3, [r7, #40]	; 0x28
 8016672:	e004      	b.n	801667e <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 8016674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016676:	2b05      	cmp	r3, #5
 8016678:	d801      	bhi.n	801667e <SX1276SetTxConfig+0x266>
                datarate = 6;
 801667a:	2306      	movs	r3, #6
 801667c:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2b07      	cmp	r3, #7
 8016682:	d105      	bne.n	8016690 <SX1276SetTxConfig+0x278>
 8016684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016686:	2b0b      	cmp	r3, #11
 8016688:	d008      	beq.n	801669c <SX1276SetTxConfig+0x284>
 801668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668c:	2b0c      	cmp	r3, #12
 801668e:	d005      	beq.n	801669c <SX1276SetTxConfig+0x284>
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2b08      	cmp	r3, #8
 8016694:	d107      	bne.n	80166a6 <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8016696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016698:	2b0c      	cmp	r3, #12
 801669a:	d104      	bne.n	80166a6 <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801669c:	4b4e      	ldr	r3, [pc, #312]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 801669e:	224c      	movs	r2, #76	; 0x4c
 80166a0:	2101      	movs	r1, #1
 80166a2:	5499      	strb	r1, [r3, r2]
 80166a4:	e003      	b.n	80166ae <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80166a6:	4b4c      	ldr	r3, [pc, #304]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80166a8:	224c      	movs	r2, #76	; 0x4c
 80166aa:	2100      	movs	r1, #0
 80166ac:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80166ae:	4b4a      	ldr	r3, [pc, #296]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80166b0:	2253      	movs	r2, #83	; 0x53
 80166b2:	5c9b      	ldrb	r3, [r3, r2]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d013      	beq.n	80166e0 <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80166b8:	2044      	movs	r0, #68	; 0x44
 80166ba:	f000 fee9 	bl	8017490 <SX1276Read>
 80166be:	0003      	movs	r3, r0
 80166c0:	001a      	movs	r2, r3
 80166c2:	2380      	movs	r3, #128	; 0x80
 80166c4:	425b      	negs	r3, r3
 80166c6:	4313      	orrs	r3, r2
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	0019      	movs	r1, r3
 80166cc:	2044      	movs	r0, #68	; 0x44
 80166ce:	f000 fecb 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80166d2:	4b41      	ldr	r3, [pc, #260]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 80166d4:	2254      	movs	r2, #84	; 0x54
 80166d6:	5c9b      	ldrb	r3, [r3, r2]
 80166d8:	0019      	movs	r1, r3
 80166da:	2024      	movs	r0, #36	; 0x24
 80166dc:	f000 fec4 	bl	8017468 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80166e0:	201d      	movs	r0, #29
 80166e2:	f000 fed5 	bl	8017490 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	b2db      	uxtb	r3, r3
 80166ea:	011b      	lsls	r3, r3, #4
 80166ec:	b2da      	uxtb	r2, r3
 80166ee:	2324      	movs	r3, #36	; 0x24
 80166f0:	2108      	movs	r1, #8
 80166f2:	468c      	mov	ip, r1
 80166f4:	44bc      	add	ip, r7
 80166f6:	4463      	add	r3, ip
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	18db      	adds	r3, r3, r3
 80166fc:	b2db      	uxtb	r3, r3
 80166fe:	4313      	orrs	r3, r2
 8016700:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8016702:	232c      	movs	r3, #44	; 0x2c
 8016704:	2108      	movs	r1, #8
 8016706:	468c      	mov	ip, r1
 8016708:	44bc      	add	ip, r7
 801670a:	4463      	add	r3, ip
 801670c:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801670e:	4313      	orrs	r3, r2
 8016710:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8016712:	0019      	movs	r1, r3
 8016714:	201d      	movs	r0, #29
 8016716:	f000 fea7 	bl	8017468 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801671a:	201e      	movs	r0, #30
 801671c:	f000 feb8 	bl	8017490 <SX1276Read>
 8016720:	0003      	movs	r3, r0
 8016722:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8016724:	230b      	movs	r3, #11
 8016726:	4013      	ands	r3, r2
 8016728:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672c:	b2db      	uxtb	r3, r3
 801672e:	011b      	lsls	r3, r3, #4
 8016730:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8016732:	4313      	orrs	r3, r2
 8016734:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8016736:	2330      	movs	r3, #48	; 0x30
 8016738:	2108      	movs	r1, #8
 801673a:	468c      	mov	ip, r1
 801673c:	44bc      	add	ip, r7
 801673e:	4463      	add	r3, ip
 8016740:	781b      	ldrb	r3, [r3, #0]
 8016742:	009b      	lsls	r3, r3, #2
 8016744:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8016746:	4313      	orrs	r3, r2
 8016748:	b2db      	uxtb	r3, r3
 801674a:	0019      	movs	r1, r3
 801674c:	201e      	movs	r0, #30
 801674e:	f000 fe8b 	bl	8017468 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8016752:	2026      	movs	r0, #38	; 0x26
 8016754:	f000 fe9c 	bl	8017490 <SX1276Read>
 8016758:	0003      	movs	r3, r0
 801675a:	b25b      	sxtb	r3, r3
 801675c:	2208      	movs	r2, #8
 801675e:	4393      	bics	r3, r2
 8016760:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8016762:	4b1d      	ldr	r3, [pc, #116]	; (80167d8 <SX1276SetTxConfig+0x3c0>)
 8016764:	214c      	movs	r1, #76	; 0x4c
 8016766:	5c5b      	ldrb	r3, [r3, r1]
 8016768:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801676a:	b25b      	sxtb	r3, r3
 801676c:	4313      	orrs	r3, r2
 801676e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8016770:	b2db      	uxtb	r3, r3
 8016772:	0019      	movs	r1, r3
 8016774:	2026      	movs	r0, #38	; 0x26
 8016776:	f000 fe77 	bl	8017468 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801677a:	2428      	movs	r4, #40	; 0x28
 801677c:	2508      	movs	r5, #8
 801677e:	197b      	adds	r3, r7, r5
 8016780:	191b      	adds	r3, r3, r4
 8016782:	881b      	ldrh	r3, [r3, #0]
 8016784:	0a1b      	lsrs	r3, r3, #8
 8016786:	b29b      	uxth	r3, r3
 8016788:	b2db      	uxtb	r3, r3
 801678a:	0019      	movs	r1, r3
 801678c:	2020      	movs	r0, #32
 801678e:	f000 fe6b 	bl	8017468 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8016792:	197b      	adds	r3, r7, r5
 8016794:	191b      	adds	r3, r3, r4
 8016796:	881b      	ldrh	r3, [r3, #0]
 8016798:	b2db      	uxtb	r3, r3
 801679a:	0019      	movs	r1, r3
 801679c:	2021      	movs	r0, #33	; 0x21
 801679e:	f000 fe63 	bl	8017468 <SX1276Write>
            if( datarate == 6 )
 80167a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a4:	2b06      	cmp	r3, #6
 80167a6:	d11d      	bne.n	80167e4 <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80167a8:	2031      	movs	r0, #49	; 0x31
 80167aa:	f000 fe71 	bl	8017490 <SX1276Read>
 80167ae:	0003      	movs	r3, r0
 80167b0:	b25b      	sxtb	r3, r3
 80167b2:	2207      	movs	r2, #7
 80167b4:	4393      	bics	r3, r2
 80167b6:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80167b8:	2205      	movs	r2, #5
 80167ba:	4313      	orrs	r3, r2
 80167bc:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	0019      	movs	r1, r3
 80167c2:	2031      	movs	r0, #49	; 0x31
 80167c4:	f000 fe50 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80167c8:	210c      	movs	r1, #12
 80167ca:	2037      	movs	r0, #55	; 0x37
 80167cc:	f000 fe4c 	bl	8017468 <SX1276Write>
        break;
 80167d0:	e01c      	b.n	801680c <SX1276SetTxConfig+0x3f4>
 80167d2:	46c0      	nop			; (mov r8, r8)
 80167d4:	20001030 	.word	0x20001030
 80167d8:	200014a4 	.word	0x200014a4
 80167dc:	404e8480 	.word	0x404e8480
 80167e0:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80167e4:	2031      	movs	r0, #49	; 0x31
 80167e6:	f000 fe53 	bl	8017490 <SX1276Read>
 80167ea:	0003      	movs	r3, r0
 80167ec:	b25b      	sxtb	r3, r3
 80167ee:	2207      	movs	r2, #7
 80167f0:	4393      	bics	r3, r2
 80167f2:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80167f4:	2203      	movs	r2, #3
 80167f6:	4313      	orrs	r3, r2
 80167f8:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	0019      	movs	r1, r3
 80167fe:	2031      	movs	r0, #49	; 0x31
 8016800:	f000 fe32 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8016804:	210a      	movs	r1, #10
 8016806:	2037      	movs	r0, #55	; 0x37
 8016808:	f000 fe2e 	bl	8017468 <SX1276Write>
        break;
 801680c:	46c0      	nop			; (mov r8, r8)
}
 801680e:	46c0      	nop			; (mov r8, r8)
 8016810:	46bd      	mov	sp, r7
 8016812:	b005      	add	sp, #20
 8016814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016816:	46c0      	nop			; (mov r8, r8)

08016818 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8016818:	b5b0      	push	{r4, r5, r7, lr}
 801681a:	b094      	sub	sp, #80	; 0x50
 801681c:	af00      	add	r7, sp, #0
 801681e:	0002      	movs	r2, r0
 8016820:	1dfb      	adds	r3, r7, #7
 8016822:	701a      	strb	r2, [r3, #0]
 8016824:	1dbb      	adds	r3, r7, #6
 8016826:	1c0a      	adds	r2, r1, #0
 8016828:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276GetTimeOnAir\r\n"));

    uint32_t airTime = 0;
 801682a:	2300      	movs	r3, #0
 801682c:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 801682e:	1dfb      	adds	r3, r7, #7
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d003      	beq.n	801683e <SX1276GetTimeOnAir+0x26>
 8016836:	2b01      	cmp	r3, #1
 8016838:	d100      	bne.n	801683c <SX1276GetTimeOnAir+0x24>
 801683a:	e086      	b.n	801694a <SX1276GetTimeOnAir+0x132>
 801683c:	e164      	b.n	8016b08 <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801683e:	4bb5      	ldr	r3, [pc, #724]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016840:	8c1b      	ldrh	r3, [r3, #32]
 8016842:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016844:	2027      	movs	r0, #39	; 0x27
 8016846:	f000 fe23 	bl	8017490 <SX1276Read>
 801684a:	0003      	movs	r3, r0
 801684c:	001a      	movs	r2, r3
 801684e:	23f8      	movs	r3, #248	; 0xf8
 8016850:	439a      	bics	r2, r3
 8016852:	0013      	movs	r3, r2
 8016854:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016856:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016858:	0018      	movs	r0, r3
 801685a:	f7eb fe95 	bl	8002588 <__aeabi_i2d>
 801685e:	0004      	movs	r4, r0
 8016860:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8016862:	4bac      	ldr	r3, [pc, #688]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016864:	2222      	movs	r2, #34	; 0x22
 8016866:	5c9b      	ldrb	r3, [r3, r2]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d002      	beq.n	8016872 <SX1276GetTimeOnAir+0x5a>
 801686c:	2000      	movs	r0, #0
 801686e:	2100      	movs	r1, #0
 8016870:	e001      	b.n	8016876 <SX1276GetTimeOnAir+0x5e>
 8016872:	2000      	movs	r0, #0
 8016874:	49a8      	ldr	r1, [pc, #672]	; (8016b18 <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8016876:	0022      	movs	r2, r4
 8016878:	002b      	movs	r3, r5
 801687a:	f7ea f96f 	bl	8000b5c <__aeabi_dadd>
 801687e:	0003      	movs	r3, r0
 8016880:	000c      	movs	r4, r1
 8016882:	0025      	movs	r5, r4
 8016884:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8016886:	2030      	movs	r0, #48	; 0x30
 8016888:	f000 fe02 	bl	8017490 <SX1276Read>
 801688c:	0003      	movs	r3, r0
 801688e:	001a      	movs	r2, r3
 8016890:	23f9      	movs	r3, #249	; 0xf9
 8016892:	439a      	bics	r2, r3
 8016894:	1e13      	subs	r3, r2, #0
 8016896:	d002      	beq.n	801689e <SX1276GetTimeOnAir+0x86>
 8016898:	2000      	movs	r0, #0
 801689a:	499f      	ldr	r1, [pc, #636]	; (8016b18 <SX1276GetTimeOnAir+0x300>)
 801689c:	e001      	b.n	80168a2 <SX1276GetTimeOnAir+0x8a>
 801689e:	2000      	movs	r0, #0
 80168a0:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80168a2:	0022      	movs	r2, r4
 80168a4:	002b      	movs	r3, r5
 80168a6:	f7ea f959 	bl	8000b5c <__aeabi_dadd>
 80168aa:	0003      	movs	r3, r0
 80168ac:	000c      	movs	r4, r1
 80168ae:	0025      	movs	r5, r4
 80168b0:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80168b2:	1dbb      	adds	r3, r7, #6
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	0018      	movs	r0, r3
 80168b8:	f7eb fe66 	bl	8002588 <__aeabi_i2d>
 80168bc:	0002      	movs	r2, r0
 80168be:	000b      	movs	r3, r1
 80168c0:	0020      	movs	r0, r4
 80168c2:	0029      	movs	r1, r5
 80168c4:	f7ea f94a 	bl	8000b5c <__aeabi_dadd>
 80168c8:	0003      	movs	r3, r0
 80168ca:	000c      	movs	r4, r1
 80168cc:	0025      	movs	r5, r4
 80168ce:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80168d0:	4b90      	ldr	r3, [pc, #576]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 80168d2:	2224      	movs	r2, #36	; 0x24
 80168d4:	5c9b      	ldrb	r3, [r3, r2]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d003      	beq.n	80168e2 <SX1276GetTimeOnAir+0xca>
 80168da:	2000      	movs	r0, #0
 80168dc:	2180      	movs	r1, #128	; 0x80
 80168de:	05c9      	lsls	r1, r1, #23
 80168e0:	e001      	b.n	80168e6 <SX1276GetTimeOnAir+0xce>
 80168e2:	2000      	movs	r0, #0
 80168e4:	2100      	movs	r1, #0
                                     pktLen +
 80168e6:	0022      	movs	r2, r4
 80168e8:	002b      	movs	r3, r5
 80168ea:	f7ea f937 	bl	8000b5c <__aeabi_dadd>
 80168ee:	0003      	movs	r3, r0
 80168f0:	000c      	movs	r4, r1
 80168f2:	0018      	movs	r0, r3
 80168f4:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80168f6:	2200      	movs	r2, #0
 80168f8:	4b88      	ldr	r3, [pc, #544]	; (8016b1c <SX1276GetTimeOnAir+0x304>)
 80168fa:	f7eb f855 	bl	80019a8 <__aeabi_dmul>
 80168fe:	0003      	movs	r3, r0
 8016900:	000c      	movs	r4, r1
 8016902:	0025      	movs	r5, r4
 8016904:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 8016906:	4b83      	ldr	r3, [pc, #524]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016908:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 801690a:	0018      	movs	r0, r3
 801690c:	f7eb fe76 	bl	80025fc <__aeabi_ui2d>
 8016910:	0002      	movs	r2, r0
 8016912:	000b      	movs	r3, r1
 8016914:	0020      	movs	r0, r4
 8016916:	0029      	movs	r1, r5
 8016918:	f7ea fc3c 	bl	8001194 <__aeabi_ddiv>
 801691c:	0003      	movs	r3, r0
 801691e:	000c      	movs	r4, r1
 8016920:	0018      	movs	r0, r3
 8016922:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8016924:	2200      	movs	r2, #0
 8016926:	4b7e      	ldr	r3, [pc, #504]	; (8016b20 <SX1276GetTimeOnAir+0x308>)
 8016928:	f7eb f83e 	bl	80019a8 <__aeabi_dmul>
 801692c:	0003      	movs	r3, r0
 801692e:	000c      	movs	r4, r1
 8016930:	0018      	movs	r0, r3
 8016932:	0021      	movs	r1, r4
 8016934:	f008 fda6 	bl	801f484 <round>
 8016938:	0003      	movs	r3, r0
 801693a:	000c      	movs	r4, r1
 801693c:	0018      	movs	r0, r3
 801693e:	0021      	movs	r1, r4
 8016940:	f7e9 fe0c 	bl	800055c <__aeabi_d2uiz>
 8016944:	0003      	movs	r3, r0
 8016946:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8016948:	e0de      	b.n	8016b08 <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 801694a:	2300      	movs	r3, #0
 801694c:	2400      	movs	r4, #0
 801694e:	643b      	str	r3, [r7, #64]	; 0x40
 8016950:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8016952:	4b70      	ldr	r3, [pc, #448]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016956:	2b08      	cmp	r3, #8
 8016958:	d008      	beq.n	801696c <SX1276GetTimeOnAir+0x154>
 801695a:	2b09      	cmp	r3, #9
 801695c:	d00b      	beq.n	8016976 <SX1276GetTimeOnAir+0x15e>
 801695e:	2b07      	cmp	r3, #7
 8016960:	d10e      	bne.n	8016980 <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 8016962:	2300      	movs	r3, #0
 8016964:	4c6f      	ldr	r4, [pc, #444]	; (8016b24 <SX1276GetTimeOnAir+0x30c>)
 8016966:	643b      	str	r3, [r7, #64]	; 0x40
 8016968:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801696a:	e009      	b.n	8016980 <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 801696c:	2300      	movs	r3, #0
 801696e:	4c6e      	ldr	r4, [pc, #440]	; (8016b28 <SX1276GetTimeOnAir+0x310>)
 8016970:	643b      	str	r3, [r7, #64]	; 0x40
 8016972:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8016974:	e004      	b.n	8016980 <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 8016976:	2300      	movs	r3, #0
 8016978:	4c6c      	ldr	r4, [pc, #432]	; (8016b2c <SX1276GetTimeOnAir+0x314>)
 801697a:	643b      	str	r3, [r7, #64]	; 0x40
 801697c:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801697e:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8016980:	4b64      	ldr	r3, [pc, #400]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016984:	2201      	movs	r2, #1
 8016986:	409a      	lsls	r2, r3
 8016988:	0013      	movs	r3, r2
 801698a:	0018      	movs	r0, r3
 801698c:	f7eb fdfc 	bl	8002588 <__aeabi_i2d>
 8016990:	0003      	movs	r3, r0
 8016992:	000c      	movs	r4, r1
 8016994:	001a      	movs	r2, r3
 8016996:	0023      	movs	r3, r4
 8016998:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801699a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801699c:	f7ea fbfa 	bl	8001194 <__aeabi_ddiv>
 80169a0:	0003      	movs	r3, r0
 80169a2:	000c      	movs	r4, r1
 80169a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80169a6:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 80169a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169ac:	2000      	movs	r0, #0
 80169ae:	495a      	ldr	r1, [pc, #360]	; (8016b18 <SX1276GetTimeOnAir+0x300>)
 80169b0:	f7ea fbf0 	bl	8001194 <__aeabi_ddiv>
 80169b4:	0003      	movs	r3, r0
 80169b6:	000c      	movs	r4, r1
 80169b8:	633b      	str	r3, [r7, #48]	; 0x30
 80169ba:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 80169bc:	4b55      	ldr	r3, [pc, #340]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 80169be:	224e      	movs	r2, #78	; 0x4e
 80169c0:	5a9b      	ldrh	r3, [r3, r2]
 80169c2:	0018      	movs	r0, r3
 80169c4:	f7eb fde0 	bl	8002588 <__aeabi_i2d>
 80169c8:	2200      	movs	r2, #0
 80169ca:	4b59      	ldr	r3, [pc, #356]	; (8016b30 <SX1276GetTimeOnAir+0x318>)
 80169cc:	f7ea f8c6 	bl	8000b5c <__aeabi_dadd>
 80169d0:	0003      	movs	r3, r0
 80169d2:	000c      	movs	r4, r1
 80169d4:	001a      	movs	r2, r3
 80169d6:	0023      	movs	r3, r4
 80169d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80169dc:	f7ea ffe4 	bl	80019a8 <__aeabi_dmul>
 80169e0:	0003      	movs	r3, r0
 80169e2:	000c      	movs	r4, r1
 80169e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80169e6:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80169e8:	1dbb      	adds	r3, r7, #6
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	00db      	lsls	r3, r3, #3
 80169ee:	001a      	movs	r2, r3
 80169f0:	4b48      	ldr	r3, [pc, #288]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 80169f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80169f4:	009b      	lsls	r3, r3, #2
 80169f6:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80169f8:	4a46      	ldr	r2, [pc, #280]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 80169fa:	2152      	movs	r1, #82	; 0x52
 80169fc:	5c52      	ldrb	r2, [r2, r1]
 80169fe:	0112      	lsls	r2, r2, #4
 8016a00:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8016a02:	4b44      	ldr	r3, [pc, #272]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016a04:	2150      	movs	r1, #80	; 0x50
 8016a06:	5c5b      	ldrb	r3, [r3, r1]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d001      	beq.n	8016a10 <SX1276GetTimeOnAir+0x1f8>
 8016a0c:	2314      	movs	r3, #20
 8016a0e:	e000      	b.n	8016a12 <SX1276GetTimeOnAir+0x1fa>
 8016a10:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8016a12:	1ad3      	subs	r3, r2, r3
 8016a14:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016a16:	0018      	movs	r0, r3
 8016a18:	f7eb fdf0 	bl	80025fc <__aeabi_ui2d>
 8016a1c:	0004      	movs	r4, r0
 8016a1e:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8016a20:	4b3c      	ldr	r3, [pc, #240]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8016a24:	4b3b      	ldr	r3, [pc, #236]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016a26:	214c      	movs	r1, #76	; 0x4c
 8016a28:	5c5b      	ldrb	r3, [r3, r1]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d001      	beq.n	8016a32 <SX1276GetTimeOnAir+0x21a>
 8016a2e:	2302      	movs	r3, #2
 8016a30:	e000      	b.n	8016a34 <SX1276GetTimeOnAir+0x21c>
 8016a32:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8016a34:	1ad3      	subs	r3, r2, r3
 8016a36:	009b      	lsls	r3, r3, #2
 8016a38:	0018      	movs	r0, r3
 8016a3a:	f7eb fddf 	bl	80025fc <__aeabi_ui2d>
 8016a3e:	0002      	movs	r2, r0
 8016a40:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016a42:	0020      	movs	r0, r4
 8016a44:	0029      	movs	r1, r5
 8016a46:	f7ea fba5 	bl	8001194 <__aeabi_ddiv>
 8016a4a:	0003      	movs	r3, r0
 8016a4c:	000c      	movs	r4, r1
 8016a4e:	0018      	movs	r0, r3
 8016a50:	0021      	movs	r1, r4
 8016a52:	f008 fc13 	bl	801f27c <ceil>
 8016a56:	0004      	movs	r4, r0
 8016a58:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8016a5a:	4b2e      	ldr	r3, [pc, #184]	; (8016b14 <SX1276GetTimeOnAir+0x2fc>)
 8016a5c:	224d      	movs	r2, #77	; 0x4d
 8016a5e:	5c9b      	ldrb	r3, [r3, r2]
 8016a60:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8016a62:	0018      	movs	r0, r3
 8016a64:	f7eb fd90 	bl	8002588 <__aeabi_i2d>
 8016a68:	0002      	movs	r2, r0
 8016a6a:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8016a6c:	0020      	movs	r0, r4
 8016a6e:	0029      	movs	r1, r5
 8016a70:	f7ea ff9a 	bl	80019a8 <__aeabi_dmul>
 8016a74:	0003      	movs	r3, r0
 8016a76:	000c      	movs	r4, r1
 8016a78:	623b      	str	r3, [r7, #32]
 8016a7a:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	2300      	movs	r3, #0
 8016a80:	6a38      	ldr	r0, [r7, #32]
 8016a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a84:	f7e9 fce8 	bl	8000458 <__aeabi_dcmpgt>
 8016a88:	1e03      	subs	r3, r0, #0
 8016a8a:	d008      	beq.n	8016a9e <SX1276GetTimeOnAir+0x286>
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	4b23      	ldr	r3, [pc, #140]	; (8016b1c <SX1276GetTimeOnAir+0x304>)
 8016a90:	6a38      	ldr	r0, [r7, #32]
 8016a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a94:	f7ea f862 	bl	8000b5c <__aeabi_dadd>
 8016a98:	0003      	movs	r3, r0
 8016a9a:	000c      	movs	r4, r1
 8016a9c:	e001      	b.n	8016aa2 <SX1276GetTimeOnAir+0x28a>
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	4c1e      	ldr	r4, [pc, #120]	; (8016b1c <SX1276GetTimeOnAir+0x304>)
 8016aa2:	61bb      	str	r3, [r7, #24]
 8016aa4:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 8016aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aaa:	69b8      	ldr	r0, [r7, #24]
 8016aac:	69f9      	ldr	r1, [r7, #28]
 8016aae:	f7ea ff7b 	bl	80019a8 <__aeabi_dmul>
 8016ab2:	0003      	movs	r3, r0
 8016ab4:	000c      	movs	r4, r1
 8016ab6:	613b      	str	r3, [r7, #16]
 8016ab8:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8016aba:	693a      	ldr	r2, [r7, #16]
 8016abc:	697b      	ldr	r3, [r7, #20]
 8016abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ac2:	f7ea f84b 	bl	8000b5c <__aeabi_dadd>
 8016ac6:	0003      	movs	r3, r0
 8016ac8:	000c      	movs	r4, r1
 8016aca:	60bb      	str	r3, [r7, #8]
 8016acc:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8016ace:	2200      	movs	r2, #0
 8016ad0:	4b13      	ldr	r3, [pc, #76]	; (8016b20 <SX1276GetTimeOnAir+0x308>)
 8016ad2:	68b8      	ldr	r0, [r7, #8]
 8016ad4:	68f9      	ldr	r1, [r7, #12]
 8016ad6:	f7ea ff67 	bl	80019a8 <__aeabi_dmul>
 8016ada:	0003      	movs	r3, r0
 8016adc:	000c      	movs	r4, r1
 8016ade:	0018      	movs	r0, r3
 8016ae0:	0021      	movs	r1, r4
 8016ae2:	4a14      	ldr	r2, [pc, #80]	; (8016b34 <SX1276GetTimeOnAir+0x31c>)
 8016ae4:	4b14      	ldr	r3, [pc, #80]	; (8016b38 <SX1276GetTimeOnAir+0x320>)
 8016ae6:	f7ea f839 	bl	8000b5c <__aeabi_dadd>
 8016aea:	0003      	movs	r3, r0
 8016aec:	000c      	movs	r4, r1
 8016aee:	0018      	movs	r0, r3
 8016af0:	0021      	movs	r1, r4
 8016af2:	f008 fc45 	bl	801f380 <floor>
 8016af6:	0003      	movs	r3, r0
 8016af8:	000c      	movs	r4, r1
 8016afa:	0018      	movs	r0, r3
 8016afc:	0021      	movs	r1, r4
 8016afe:	f7e9 fd2d 	bl	800055c <__aeabi_d2uiz>
 8016b02:	0003      	movs	r3, r0
 8016b04:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8016b06:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 8016b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016b0a:	0018      	movs	r0, r3
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	b014      	add	sp, #80	; 0x50
 8016b10:	bdb0      	pop	{r4, r5, r7, pc}
 8016b12:	46c0      	nop			; (mov r8, r8)
 8016b14:	200014a4 	.word	0x200014a4
 8016b18:	3ff00000 	.word	0x3ff00000
 8016b1c:	40200000 	.word	0x40200000
 8016b20:	408f4000 	.word	0x408f4000
 8016b24:	40fe8480 	.word	0x40fe8480
 8016b28:	410e8480 	.word	0x410e8480
 8016b2c:	411e8480 	.word	0x411e8480
 8016b30:	40110000 	.word	0x40110000
 8016b34:	d916872b 	.word	0xd916872b
 8016b38:	3feff7ce 	.word	0x3feff7ce

08016b3c <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b084      	sub	sp, #16
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	000a      	movs	r2, r1
 8016b46:	1cfb      	adds	r3, r7, #3
 8016b48:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276Send %d bytes\r\n",size));

    uint32_t txTimeout = 0;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8016b4e:	4b59      	ldr	r3, [pc, #356]	; (8016cb4 <SX1276Send+0x178>)
 8016b50:	795b      	ldrb	r3, [r3, #5]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d002      	beq.n	8016b5c <SX1276Send+0x20>
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	d04c      	beq.n	8016bf4 <SX1276Send+0xb8>
 8016b5a:	e0a2      	b.n	8016ca2 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8016b5c:	4b55      	ldr	r3, [pc, #340]	; (8016cb4 <SX1276Send+0x178>)
 8016b5e:	2200      	movs	r2, #0
 8016b60:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8016b62:	1cfb      	adds	r3, r7, #3
 8016b64:	781b      	ldrb	r3, [r3, #0]
 8016b66:	b29a      	uxth	r2, r3
 8016b68:	4b52      	ldr	r3, [pc, #328]	; (8016cb4 <SX1276Send+0x178>)
 8016b6a:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8016b6c:	4b51      	ldr	r3, [pc, #324]	; (8016cb4 <SX1276Send+0x178>)
 8016b6e:	2222      	movs	r2, #34	; 0x22
 8016b70:	5c9b      	ldrb	r3, [r3, r2]
 8016b72:	2201      	movs	r2, #1
 8016b74:	4053      	eors	r3, r2
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d005      	beq.n	8016b88 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8016b7c:	1cfb      	adds	r3, r7, #3
 8016b7e:	2101      	movs	r1, #1
 8016b80:	0018      	movs	r0, r3
 8016b82:	f000 fd3b 	bl	80175fc <SX1276WriteFifo>
 8016b86:	e005      	b.n	8016b94 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8016b88:	1cfb      	adds	r3, r7, #3
 8016b8a:	781b      	ldrb	r3, [r3, #0]
 8016b8c:	0019      	movs	r1, r3
 8016b8e:	2032      	movs	r0, #50	; 0x32
 8016b90:	f000 fc6a 	bl	8017468 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8016b94:	1cfb      	adds	r3, r7, #3
 8016b96:	781b      	ldrb	r3, [r3, #0]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d009      	beq.n	8016bb0 <SX1276Send+0x74>
 8016b9c:	1cfb      	adds	r3, r7, #3
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	2b40      	cmp	r3, #64	; 0x40
 8016ba2:	d805      	bhi.n	8016bb0 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8016ba4:	1cfb      	adds	r3, r7, #3
 8016ba6:	7819      	ldrb	r1, [r3, #0]
 8016ba8:	4b42      	ldr	r3, [pc, #264]	; (8016cb4 <SX1276Send+0x178>)
 8016baa:	223f      	movs	r2, #63	; 0x3f
 8016bac:	5499      	strb	r1, [r3, r2]
 8016bae:	e00b      	b.n	8016bc8 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8016bb0:	1cfb      	adds	r3, r7, #3
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	6879      	ldr	r1, [r7, #4]
 8016bb8:	4b3f      	ldr	r3, [pc, #252]	; (8016cb8 <SX1276Send+0x17c>)
 8016bba:	0018      	movs	r0, r3
 8016bbc:	f7fe fc54 	bl	8015468 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8016bc0:	4b3c      	ldr	r3, [pc, #240]	; (8016cb4 <SX1276Send+0x178>)
 8016bc2:	223f      	movs	r2, #63	; 0x3f
 8016bc4:	2120      	movs	r1, #32
 8016bc6:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8016bc8:	4b3a      	ldr	r3, [pc, #232]	; (8016cb4 <SX1276Send+0x178>)
 8016bca:	223f      	movs	r2, #63	; 0x3f
 8016bcc:	5c9a      	ldrb	r2, [r3, r2]
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	0011      	movs	r1, r2
 8016bd2:	0018      	movs	r0, r3
 8016bd4:	f000 fd12 	bl	80175fc <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8016bd8:	4b36      	ldr	r3, [pc, #216]	; (8016cb4 <SX1276Send+0x178>)
 8016bda:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8016bdc:	4b35      	ldr	r3, [pc, #212]	; (8016cb4 <SX1276Send+0x178>)
 8016bde:	213f      	movs	r1, #63	; 0x3f
 8016be0:	5c5b      	ldrb	r3, [r3, r1]
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	18d3      	adds	r3, r2, r3
 8016be6:	b29a      	uxth	r2, r3
 8016be8:	4b32      	ldr	r3, [pc, #200]	; (8016cb4 <SX1276Send+0x178>)
 8016bea:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8016bec:	4b31      	ldr	r3, [pc, #196]	; (8016cb4 <SX1276Send+0x178>)
 8016bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bf0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8016bf2:	e056      	b.n	8016ca2 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8016bf4:	4b2f      	ldr	r3, [pc, #188]	; (8016cb4 <SX1276Send+0x178>)
 8016bf6:	2255      	movs	r2, #85	; 0x55
 8016bf8:	5c9b      	ldrb	r3, [r3, r2]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d011      	beq.n	8016c22 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8016bfe:	2033      	movs	r0, #51	; 0x33
 8016c00:	f000 fc46 	bl	8017490 <SX1276Read>
 8016c04:	0003      	movs	r3, r0
 8016c06:	001a      	movs	r2, r3
 8016c08:	2341      	movs	r3, #65	; 0x41
 8016c0a:	439a      	bics	r2, r3
 8016c0c:	0013      	movs	r3, r2
 8016c0e:	b2db      	uxtb	r3, r3
 8016c10:	0019      	movs	r1, r3
 8016c12:	2033      	movs	r0, #51	; 0x33
 8016c14:	f000 fc28 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8016c18:	2119      	movs	r1, #25
 8016c1a:	203b      	movs	r0, #59	; 0x3b
 8016c1c:	f000 fc24 	bl	8017468 <SX1276Write>
 8016c20:	e013      	b.n	8016c4a <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8016c22:	2033      	movs	r0, #51	; 0x33
 8016c24:	f000 fc34 	bl	8017490 <SX1276Read>
 8016c28:	0003      	movs	r3, r0
 8016c2a:	b25b      	sxtb	r3, r3
 8016c2c:	2241      	movs	r2, #65	; 0x41
 8016c2e:	4393      	bics	r3, r2
 8016c30:	b25b      	sxtb	r3, r3
 8016c32:	2201      	movs	r2, #1
 8016c34:	4313      	orrs	r3, r2
 8016c36:	b25b      	sxtb	r3, r3
 8016c38:	b2db      	uxtb	r3, r3
 8016c3a:	0019      	movs	r1, r3
 8016c3c:	2033      	movs	r0, #51	; 0x33
 8016c3e:	f000 fc13 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8016c42:	211d      	movs	r1, #29
 8016c44:	203b      	movs	r0, #59	; 0x3b
 8016c46:	f000 fc0f 	bl	8017468 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8016c4a:	1cfb      	adds	r3, r7, #3
 8016c4c:	7819      	ldrb	r1, [r3, #0]
 8016c4e:	4b19      	ldr	r3, [pc, #100]	; (8016cb4 <SX1276Send+0x178>)
 8016c50:	2264      	movs	r2, #100	; 0x64
 8016c52:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8016c54:	1cfb      	adds	r3, r7, #3
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	0019      	movs	r1, r3
 8016c5a:	2022      	movs	r0, #34	; 0x22
 8016c5c:	f000 fc04 	bl	8017468 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8016c60:	2100      	movs	r1, #0
 8016c62:	200e      	movs	r0, #14
 8016c64:	f000 fc00 	bl	8017468 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8016c68:	2100      	movs	r1, #0
 8016c6a:	200d      	movs	r0, #13
 8016c6c:	f000 fbfc 	bl	8017468 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8016c70:	2001      	movs	r0, #1
 8016c72:	f000 fc0d 	bl	8017490 <SX1276Read>
 8016c76:	0003      	movs	r3, r0
 8016c78:	001a      	movs	r2, r3
 8016c7a:	23f8      	movs	r3, #248	; 0xf8
 8016c7c:	439a      	bics	r2, r3
 8016c7e:	1e13      	subs	r3, r2, #0
 8016c80:	d104      	bne.n	8016c8c <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8016c82:	f000 f835 	bl	8016cf0 <SX1276SetStby>
                DelayMs( 1 );
 8016c86:	2001      	movs	r0, #1
 8016c88:	f006 ffc8 	bl	801dc1c <itsdk_delayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8016c8c:	1cfb      	adds	r3, r7, #3
 8016c8e:	781a      	ldrb	r2, [r3, #0]
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	0011      	movs	r1, r2
 8016c94:	0018      	movs	r0, r3
 8016c96:	f000 fcb1 	bl	80175fc <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8016c9a:	4b06      	ldr	r3, [pc, #24]	; (8016cb4 <SX1276Send+0x178>)
 8016c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016c9e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8016ca0:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	0018      	movs	r0, r3
 8016ca6:	f000 f9cd 	bl	8017044 <SX1276SetTx>
}
 8016caa:	46c0      	nop			; (mov r8, r8)
 8016cac:	46bd      	mov	sp, r7
 8016cae:	b004      	add	sp, #16
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	46c0      	nop			; (mov r8, r8)
 8016cb4:	200014a4 	.word	0x200014a4
 8016cb8:	20000f30 	.word	0x20000f30

08016cbc <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetSleep\r\n"));

    TimerStop( &RxTimeoutTimer );
 8016cc0:	4b08      	ldr	r3, [pc, #32]	; (8016ce4 <SX1276SetSleep+0x28>)
 8016cc2:	0018      	movs	r0, r3
 8016cc4:	f7fe fb40 	bl	8015348 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8016cc8:	4b07      	ldr	r3, [pc, #28]	; (8016ce8 <SX1276SetSleep+0x2c>)
 8016cca:	0018      	movs	r0, r3
 8016ccc:	f7fe fb3c 	bl	8015348 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8016cd0:	2000      	movs	r0, #0
 8016cd2:	f000 fb21 	bl	8017318 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8016cd6:	4b05      	ldr	r3, [pc, #20]	; (8016cec <SX1276SetSleep+0x30>)
 8016cd8:	2200      	movs	r2, #0
 8016cda:	711a      	strb	r2, [r3, #4]
}
 8016cdc:	46c0      	nop			; (mov r8, r8)
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bd80      	pop	{r7, pc}
 8016ce2:	46c0      	nop			; (mov r8, r8)
 8016ce4:	2000150c 	.word	0x2000150c
 8016ce8:	20001474 	.word	0x20001474
 8016cec:	200014a4 	.word	0x200014a4

08016cf0 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetStby\r\n"));

    TimerStop( &RxTimeoutTimer );
 8016cf4:	4b08      	ldr	r3, [pc, #32]	; (8016d18 <SX1276SetStby+0x28>)
 8016cf6:	0018      	movs	r0, r3
 8016cf8:	f7fe fb26 	bl	8015348 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8016cfc:	4b07      	ldr	r3, [pc, #28]	; (8016d1c <SX1276SetStby+0x2c>)
 8016cfe:	0018      	movs	r0, r3
 8016d00:	f7fe fb22 	bl	8015348 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8016d04:	2001      	movs	r0, #1
 8016d06:	f000 fb07 	bl	8017318 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8016d0a:	4b05      	ldr	r3, [pc, #20]	; (8016d20 <SX1276SetStby+0x30>)
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	711a      	strb	r2, [r3, #4]
}
 8016d10:	46c0      	nop			; (mov r8, r8)
 8016d12:	46bd      	mov	sp, r7
 8016d14:	bd80      	pop	{r7, pc}
 8016d16:	46c0      	nop			; (mov r8, r8)
 8016d18:	2000150c 	.word	0x2000150c
 8016d1c:	20001474 	.word	0x20001474
 8016d20:	200014a4 	.word	0x200014a4

08016d24 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b084      	sub	sp, #16
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetRx (%d)\r\n",timeout));

    bool rxContinuous = false;
 8016d2c:	230f      	movs	r3, #15
 8016d2e:	18fb      	adds	r3, r7, r3
 8016d30:	2200      	movs	r2, #0
 8016d32:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 8016d34:	4bb8      	ldr	r3, [pc, #736]	; (8017018 <SX1276SetRx+0x2f4>)
 8016d36:	795b      	ldrb	r3, [r3, #5]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d002      	beq.n	8016d42 <SX1276SetRx+0x1e>
 8016d3c:	2b01      	cmp	r3, #1
 8016d3e:	d041      	beq.n	8016dc4 <SX1276SetRx+0xa0>
 8016d40:	e128      	b.n	8016f94 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8016d42:	230f      	movs	r3, #15
 8016d44:	18fb      	adds	r3, r7, r3
 8016d46:	4ab4      	ldr	r2, [pc, #720]	; (8017018 <SX1276SetRx+0x2f4>)
 8016d48:	2126      	movs	r1, #38	; 0x26
 8016d4a:	5c52      	ldrb	r2, [r2, r1]
 8016d4c:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8016d4e:	2040      	movs	r0, #64	; 0x40
 8016d50:	f000 fb9e 	bl	8017490 <SX1276Read>
 8016d54:	0003      	movs	r3, r0
 8016d56:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8016d58:	2203      	movs	r2, #3
 8016d5a:	4013      	ands	r3, r2
 8016d5c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8016d5e:	220c      	movs	r2, #12
 8016d60:	4313      	orrs	r3, r2
 8016d62:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8016d64:	b2db      	uxtb	r3, r3
 8016d66:	0019      	movs	r1, r3
 8016d68:	2040      	movs	r0, #64	; 0x40
 8016d6a:	f000 fb7d 	bl	8017468 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8016d6e:	2041      	movs	r0, #65	; 0x41
 8016d70:	f000 fb8e 	bl	8017490 <SX1276Read>
 8016d74:	0003      	movs	r3, r0
 8016d76:	001a      	movs	r2, r3
 8016d78:	233f      	movs	r3, #63	; 0x3f
 8016d7a:	425b      	negs	r3, r3
 8016d7c:	4313      	orrs	r3, r2
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	0019      	movs	r1, r3
 8016d82:	2041      	movs	r0, #65	; 0x41
 8016d84:	f000 fb70 	bl	8017468 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8016d88:	2035      	movs	r0, #53	; 0x35
 8016d8a:	f000 fb81 	bl	8017490 <SX1276Read>
 8016d8e:	0003      	movs	r3, r0
 8016d90:	001a      	movs	r2, r3
 8016d92:	233f      	movs	r3, #63	; 0x3f
 8016d94:	4013      	ands	r3, r2
 8016d96:	b2d9      	uxtb	r1, r3
 8016d98:	4b9f      	ldr	r3, [pc, #636]	; (8017018 <SX1276SetRx+0x2f4>)
 8016d9a:	223e      	movs	r2, #62	; 0x3e
 8016d9c:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8016d9e:	211e      	movs	r1, #30
 8016da0:	200d      	movs	r0, #13
 8016da2:	f000 fb61 	bl	8017468 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8016da6:	4b9c      	ldr	r3, [pc, #624]	; (8017018 <SX1276SetRx+0x2f4>)
 8016da8:	2230      	movs	r2, #48	; 0x30
 8016daa:	2100      	movs	r1, #0
 8016dac:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8016dae:	4b9a      	ldr	r3, [pc, #616]	; (8017018 <SX1276SetRx+0x2f4>)
 8016db0:	2231      	movs	r2, #49	; 0x31
 8016db2:	2100      	movs	r1, #0
 8016db4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8016db6:	4b98      	ldr	r3, [pc, #608]	; (8017018 <SX1276SetRx+0x2f4>)
 8016db8:	2200      	movs	r2, #0
 8016dba:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8016dbc:	4b96      	ldr	r3, [pc, #600]	; (8017018 <SX1276SetRx+0x2f4>)
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 8016dc2:	e0e7      	b.n	8016f94 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8016dc4:	4b94      	ldr	r3, [pc, #592]	; (8017018 <SX1276SetRx+0x2f4>)
 8016dc6:	2255      	movs	r2, #85	; 0x55
 8016dc8:	5c9b      	ldrb	r3, [r3, r2]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d010      	beq.n	8016df0 <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8016dce:	2033      	movs	r0, #51	; 0x33
 8016dd0:	f000 fb5e 	bl	8017490 <SX1276Read>
 8016dd4:	0003      	movs	r3, r0
 8016dd6:	001a      	movs	r2, r3
 8016dd8:	2341      	movs	r3, #65	; 0x41
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	0019      	movs	r1, r3
 8016de0:	2033      	movs	r0, #51	; 0x33
 8016de2:	f000 fb41 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8016de6:	2119      	movs	r1, #25
 8016de8:	203b      	movs	r0, #59	; 0x3b
 8016dea:	f000 fb3d 	bl	8017468 <SX1276Write>
 8016dee:	e013      	b.n	8016e18 <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8016df0:	2033      	movs	r0, #51	; 0x33
 8016df2:	f000 fb4d 	bl	8017490 <SX1276Read>
 8016df6:	0003      	movs	r3, r0
 8016df8:	b25b      	sxtb	r3, r3
 8016dfa:	2241      	movs	r2, #65	; 0x41
 8016dfc:	4393      	bics	r3, r2
 8016dfe:	b25b      	sxtb	r3, r3
 8016e00:	2201      	movs	r2, #1
 8016e02:	4313      	orrs	r3, r2
 8016e04:	b25b      	sxtb	r3, r3
 8016e06:	b2db      	uxtb	r3, r3
 8016e08:	0019      	movs	r1, r3
 8016e0a:	2033      	movs	r0, #51	; 0x33
 8016e0c:	f000 fb2c 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8016e10:	211d      	movs	r1, #29
 8016e12:	203b      	movs	r0, #59	; 0x3b
 8016e14:	f000 fb28 	bl	8017468 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8016e18:	4b7f      	ldr	r3, [pc, #508]	; (8017018 <SX1276SetRx+0x2f4>)
 8016e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e1c:	2b08      	cmp	r3, #8
 8016e1e:	d900      	bls.n	8016e22 <SX1276SetRx+0xfe>
 8016e20:	e076      	b.n	8016f10 <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8016e22:	2031      	movs	r0, #49	; 0x31
 8016e24:	f000 fb34 	bl	8017490 <SX1276Read>
 8016e28:	0003      	movs	r3, r0
 8016e2a:	001a      	movs	r2, r3
 8016e2c:	237f      	movs	r3, #127	; 0x7f
 8016e2e:	4013      	ands	r3, r2
 8016e30:	b2db      	uxtb	r3, r3
 8016e32:	0019      	movs	r1, r3
 8016e34:	2031      	movs	r0, #49	; 0x31
 8016e36:	f000 fb17 	bl	8017468 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8016e3a:	2100      	movs	r1, #0
 8016e3c:	2030      	movs	r0, #48	; 0x30
 8016e3e:	f000 fb13 	bl	8017468 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8016e42:	4b75      	ldr	r3, [pc, #468]	; (8017018 <SX1276SetRx+0x2f4>)
 8016e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e46:	2b08      	cmp	r3, #8
 8016e48:	d86f      	bhi.n	8016f2a <SX1276SetRx+0x206>
 8016e4a:	009a      	lsls	r2, r3, #2
 8016e4c:	4b73      	ldr	r3, [pc, #460]	; (801701c <SX1276SetRx+0x2f8>)
 8016e4e:	18d3      	adds	r3, r2, r3
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8016e54:	2148      	movs	r1, #72	; 0x48
 8016e56:	202f      	movs	r0, #47	; 0x2f
 8016e58:	f000 fb06 	bl	8017468 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8016e5c:	4b6e      	ldr	r3, [pc, #440]	; (8017018 <SX1276SetRx+0x2f4>)
 8016e5e:	689b      	ldr	r3, [r3, #8]
 8016e60:	4a6f      	ldr	r2, [pc, #444]	; (8017020 <SX1276SetRx+0x2fc>)
 8016e62:	4694      	mov	ip, r2
 8016e64:	4463      	add	r3, ip
 8016e66:	0018      	movs	r0, r3
 8016e68:	f7fe feb6 	bl	8015bd8 <SX1276SetChannel>
                    break;
 8016e6c:	e05d      	b.n	8016f2a <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8016e6e:	2144      	movs	r1, #68	; 0x44
 8016e70:	202f      	movs	r0, #47	; 0x2f
 8016e72:	f000 faf9 	bl	8017468 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8016e76:	4b68      	ldr	r3, [pc, #416]	; (8017018 <SX1276SetRx+0x2f4>)
 8016e78:	689b      	ldr	r3, [r3, #8]
 8016e7a:	4a6a      	ldr	r2, [pc, #424]	; (8017024 <SX1276SetRx+0x300>)
 8016e7c:	4694      	mov	ip, r2
 8016e7e:	4463      	add	r3, ip
 8016e80:	0018      	movs	r0, r3
 8016e82:	f7fe fea9 	bl	8015bd8 <SX1276SetChannel>
                    break;
 8016e86:	e050      	b.n	8016f2a <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8016e88:	2144      	movs	r1, #68	; 0x44
 8016e8a:	202f      	movs	r0, #47	; 0x2f
 8016e8c:	f000 faec 	bl	8017468 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8016e90:	4b61      	ldr	r3, [pc, #388]	; (8017018 <SX1276SetRx+0x2f4>)
 8016e92:	689b      	ldr	r3, [r3, #8]
 8016e94:	4a64      	ldr	r2, [pc, #400]	; (8017028 <SX1276SetRx+0x304>)
 8016e96:	4694      	mov	ip, r2
 8016e98:	4463      	add	r3, ip
 8016e9a:	0018      	movs	r0, r3
 8016e9c:	f7fe fe9c 	bl	8015bd8 <SX1276SetChannel>
                    break;
 8016ea0:	e043      	b.n	8016f2a <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8016ea2:	2144      	movs	r1, #68	; 0x44
 8016ea4:	202f      	movs	r0, #47	; 0x2f
 8016ea6:	f000 fadf 	bl	8017468 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8016eaa:	4b5b      	ldr	r3, [pc, #364]	; (8017018 <SX1276SetRx+0x2f4>)
 8016eac:	689b      	ldr	r3, [r3, #8]
 8016eae:	4a5f      	ldr	r2, [pc, #380]	; (801702c <SX1276SetRx+0x308>)
 8016eb0:	4694      	mov	ip, r2
 8016eb2:	4463      	add	r3, ip
 8016eb4:	0018      	movs	r0, r3
 8016eb6:	f7fe fe8f 	bl	8015bd8 <SX1276SetChannel>
                    break;
 8016eba:	e036      	b.n	8016f2a <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8016ebc:	2144      	movs	r1, #68	; 0x44
 8016ebe:	202f      	movs	r0, #47	; 0x2f
 8016ec0:	f000 fad2 	bl	8017468 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8016ec4:	4b54      	ldr	r3, [pc, #336]	; (8017018 <SX1276SetRx+0x2f4>)
 8016ec6:	689b      	ldr	r3, [r3, #8]
 8016ec8:	4a59      	ldr	r2, [pc, #356]	; (8017030 <SX1276SetRx+0x30c>)
 8016eca:	4694      	mov	ip, r2
 8016ecc:	4463      	add	r3, ip
 8016ece:	0018      	movs	r0, r3
 8016ed0:	f7fe fe82 	bl	8015bd8 <SX1276SetChannel>
                    break;
 8016ed4:	e029      	b.n	8016f2a <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8016ed6:	2144      	movs	r1, #68	; 0x44
 8016ed8:	202f      	movs	r0, #47	; 0x2f
 8016eda:	f000 fac5 	bl	8017468 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8016ede:	4b4e      	ldr	r3, [pc, #312]	; (8017018 <SX1276SetRx+0x2f4>)
 8016ee0:	689b      	ldr	r3, [r3, #8]
 8016ee2:	4a54      	ldr	r2, [pc, #336]	; (8017034 <SX1276SetRx+0x310>)
 8016ee4:	4694      	mov	ip, r2
 8016ee6:	4463      	add	r3, ip
 8016ee8:	0018      	movs	r0, r3
 8016eea:	f7fe fe75 	bl	8015bd8 <SX1276SetChannel>
                    break;
 8016eee:	e01c      	b.n	8016f2a <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8016ef0:	2140      	movs	r1, #64	; 0x40
 8016ef2:	202f      	movs	r0, #47	; 0x2f
 8016ef4:	f000 fab8 	bl	8017468 <SX1276Write>
                    break;
 8016ef8:	e017      	b.n	8016f2a <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8016efa:	2140      	movs	r1, #64	; 0x40
 8016efc:	202f      	movs	r0, #47	; 0x2f
 8016efe:	f000 fab3 	bl	8017468 <SX1276Write>
                    break;
 8016f02:	e012      	b.n	8016f2a <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8016f04:	2140      	movs	r1, #64	; 0x40
 8016f06:	202f      	movs	r0, #47	; 0x2f
 8016f08:	f000 faae 	bl	8017468 <SX1276Write>
                    break;
 8016f0c:	46c0      	nop			; (mov r8, r8)
 8016f0e:	e00c      	b.n	8016f2a <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8016f10:	2031      	movs	r0, #49	; 0x31
 8016f12:	f000 fabd 	bl	8017490 <SX1276Read>
 8016f16:	0003      	movs	r3, r0
 8016f18:	001a      	movs	r2, r3
 8016f1a:	2380      	movs	r3, #128	; 0x80
 8016f1c:	425b      	negs	r3, r3
 8016f1e:	4313      	orrs	r3, r2
 8016f20:	b2db      	uxtb	r3, r3
 8016f22:	0019      	movs	r1, r3
 8016f24:	2031      	movs	r0, #49	; 0x31
 8016f26:	f000 fa9f 	bl	8017468 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8016f2a:	230f      	movs	r3, #15
 8016f2c:	18fb      	adds	r3, r7, r3
 8016f2e:	4a3a      	ldr	r2, [pc, #232]	; (8017018 <SX1276SetRx+0x2f4>)
 8016f30:	2156      	movs	r1, #86	; 0x56
 8016f32:	5c52      	ldrb	r2, [r2, r1]
 8016f34:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8016f36:	4b38      	ldr	r3, [pc, #224]	; (8017018 <SX1276SetRx+0x2f4>)
 8016f38:	2253      	movs	r2, #83	; 0x53
 8016f3a:	5c9b      	ldrb	r3, [r3, r2]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d010      	beq.n	8016f62 <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8016f40:	211d      	movs	r1, #29
 8016f42:	2011      	movs	r0, #17
 8016f44:	f000 fa90 	bl	8017468 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8016f48:	2040      	movs	r0, #64	; 0x40
 8016f4a:	f000 faa1 	bl	8017490 <SX1276Read>
 8016f4e:	0003      	movs	r3, r0
 8016f50:	001a      	movs	r2, r3
 8016f52:	2333      	movs	r3, #51	; 0x33
 8016f54:	4013      	ands	r3, r2
 8016f56:	b2db      	uxtb	r3, r3
 8016f58:	0019      	movs	r1, r3
 8016f5a:	2040      	movs	r0, #64	; 0x40
 8016f5c:	f000 fa84 	bl	8017468 <SX1276Write>
 8016f60:	e00f      	b.n	8016f82 <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8016f62:	211f      	movs	r1, #31
 8016f64:	2011      	movs	r0, #17
 8016f66:	f000 fa7f 	bl	8017468 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8016f6a:	2040      	movs	r0, #64	; 0x40
 8016f6c:	f000 fa90 	bl	8017490 <SX1276Read>
 8016f70:	0003      	movs	r3, r0
 8016f72:	001a      	movs	r2, r3
 8016f74:	233f      	movs	r3, #63	; 0x3f
 8016f76:	4013      	ands	r3, r2
 8016f78:	b2db      	uxtb	r3, r3
 8016f7a:	0019      	movs	r1, r3
 8016f7c:	2040      	movs	r0, #64	; 0x40
 8016f7e:	f000 fa73 	bl	8017468 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8016f82:	2100      	movs	r1, #0
 8016f84:	200f      	movs	r0, #15
 8016f86:	f000 fa6f 	bl	8017468 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8016f8a:	2100      	movs	r1, #0
 8016f8c:	200d      	movs	r0, #13
 8016f8e:	f000 fa6b 	bl	8017468 <SX1276Write>
        }
        break;
 8016f92:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8016f94:	2380      	movs	r3, #128	; 0x80
 8016f96:	005a      	lsls	r2, r3, #1
 8016f98:	4b27      	ldr	r3, [pc, #156]	; (8017038 <SX1276SetRx+0x314>)
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	0018      	movs	r0, r3
 8016f9e:	f007 fd61 	bl	801ea64 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8016fa2:	4b1d      	ldr	r3, [pc, #116]	; (8017018 <SX1276SetRx+0x2f4>)
 8016fa4:	2201      	movs	r2, #1
 8016fa6:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d009      	beq.n	8016fc2 <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	4b22      	ldr	r3, [pc, #136]	; (801703c <SX1276SetRx+0x318>)
 8016fb2:	0011      	movs	r1, r2
 8016fb4:	0018      	movs	r0, r3
 8016fb6:	f7fe f945 	bl	8015244 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8016fba:	4b20      	ldr	r3, [pc, #128]	; (801703c <SX1276SetRx+0x318>)
 8016fbc:	0018      	movs	r0, r3
 8016fbe:	f7fe f96d 	bl	801529c <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8016fc2:	4b15      	ldr	r3, [pc, #84]	; (8017018 <SX1276SetRx+0x2f4>)
 8016fc4:	795b      	ldrb	r3, [r3, #5]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d116      	bne.n	8016ff8 <SX1276SetRx+0x2d4>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8016fca:	2005      	movs	r0, #5
 8016fcc:	f000 f9a4 	bl	8017318 <SX1276SetOpMode>

        if( rxContinuous == false )
 8016fd0:	230f      	movs	r3, #15
 8016fd2:	18fb      	adds	r3, r7, r3
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	4053      	eors	r3, r2
 8016fda:	b2db      	uxtb	r3, r3
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d017      	beq.n	8017010 <SX1276SetRx+0x2ec>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8016fe0:	4b0d      	ldr	r3, [pc, #52]	; (8017018 <SX1276SetRx+0x2f4>)
 8016fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fe4:	4b16      	ldr	r3, [pc, #88]	; (8017040 <SX1276SetRx+0x31c>)
 8016fe6:	0011      	movs	r1, r2
 8016fe8:	0018      	movs	r0, r3
 8016fea:	f7fe f92b 	bl	8015244 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8016fee:	4b14      	ldr	r3, [pc, #80]	; (8017040 <SX1276SetRx+0x31c>)
 8016ff0:	0018      	movs	r0, r3
 8016ff2:	f7fe f953 	bl	801529c <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8016ff6:	e00b      	b.n	8017010 <SX1276SetRx+0x2ec>
        if( rxContinuous == true )
 8016ff8:	230f      	movs	r3, #15
 8016ffa:	18fb      	adds	r3, r7, r3
 8016ffc:	781b      	ldrb	r3, [r3, #0]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d003      	beq.n	801700a <SX1276SetRx+0x2e6>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8017002:	2005      	movs	r0, #5
 8017004:	f000 f988 	bl	8017318 <SX1276SetOpMode>
}
 8017008:	e002      	b.n	8017010 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801700a:	2006      	movs	r0, #6
 801700c:	f000 f984 	bl	8017318 <SX1276SetOpMode>
}
 8017010:	46c0      	nop			; (mov r8, r8)
 8017012:	46bd      	mov	sp, r7
 8017014:	b004      	add	sp, #16
 8017016:	bd80      	pop	{r7, pc}
 8017018:	200014a4 	.word	0x200014a4
 801701c:	08020bb0 	.word	0x08020bb0
 8017020:	00001e82 	.word	0x00001e82
 8017024:	000028b4 	.word	0x000028b4
 8017028:	00003d04 	.word	0x00003d04
 801702c:	0000515e 	.word	0x0000515e
 8017030:	00007a12 	.word	0x00007a12
 8017034:	0000a2c6 	.word	0x0000a2c6
 8017038:	20000f30 	.word	0x20000f30
 801703c:	2000150c 	.word	0x2000150c
 8017040:	2000148c 	.word	0x2000148c

08017044 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b082      	sub	sp, #8
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
    LOG_INFO_SX1276((">> SX1276SetTx (%d)\r\n",timeout));

    TimerSetValue( &TxTimeoutTimer, timeout );
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	4b38      	ldr	r3, [pc, #224]	; (8017130 <SX1276SetTx+0xec>)
 8017050:	0011      	movs	r1, r2
 8017052:	0018      	movs	r0, r3
 8017054:	f7fe f8f6 	bl	8015244 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8017058:	4b36      	ldr	r3, [pc, #216]	; (8017134 <SX1276SetTx+0xf0>)
 801705a:	795b      	ldrb	r3, [r3, #5]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d002      	beq.n	8017066 <SX1276SetTx+0x22>
 8017060:	2b01      	cmp	r3, #1
 8017062:	d028      	beq.n	80170b6 <SX1276SetTx+0x72>
 8017064:	e056      	b.n	8017114 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8017066:	2040      	movs	r0, #64	; 0x40
 8017068:	f000 fa12 	bl	8017490 <SX1276Read>
 801706c:	0003      	movs	r3, r0
 801706e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8017070:	2203      	movs	r2, #3
 8017072:	4013      	ands	r3, r2
 8017074:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8017076:	2210      	movs	r2, #16
 8017078:	4313      	orrs	r3, r2
 801707a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801707c:	b2db      	uxtb	r3, r3
 801707e:	0019      	movs	r1, r3
 8017080:	2040      	movs	r0, #64	; 0x40
 8017082:	f000 f9f1 	bl	8017468 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8017086:	2041      	movs	r0, #65	; 0x41
 8017088:	f000 fa02 	bl	8017490 <SX1276Read>
 801708c:	0003      	movs	r3, r0
 801708e:	001a      	movs	r2, r3
 8017090:	233e      	movs	r3, #62	; 0x3e
 8017092:	4013      	ands	r3, r2
 8017094:	b2db      	uxtb	r3, r3
 8017096:	0019      	movs	r1, r3
 8017098:	2041      	movs	r0, #65	; 0x41
 801709a:	f000 f9e5 	bl	8017468 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801709e:	2035      	movs	r0, #53	; 0x35
 80170a0:	f000 f9f6 	bl	8017490 <SX1276Read>
 80170a4:	0003      	movs	r3, r0
 80170a6:	001a      	movs	r2, r3
 80170a8:	233f      	movs	r3, #63	; 0x3f
 80170aa:	4013      	ands	r3, r2
 80170ac:	b2d9      	uxtb	r1, r3
 80170ae:	4b21      	ldr	r3, [pc, #132]	; (8017134 <SX1276SetTx+0xf0>)
 80170b0:	223e      	movs	r2, #62	; 0x3e
 80170b2:	5499      	strb	r1, [r3, r2]
        }
        break;
 80170b4:	e02e      	b.n	8017114 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80170b6:	4b1f      	ldr	r3, [pc, #124]	; (8017134 <SX1276SetTx+0xf0>)
 80170b8:	2253      	movs	r2, #83	; 0x53
 80170ba:	5c9b      	ldrb	r3, [r3, r2]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d014      	beq.n	80170ea <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80170c0:	21f5      	movs	r1, #245	; 0xf5
 80170c2:	2011      	movs	r0, #17
 80170c4:	f000 f9d0 	bl	8017468 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80170c8:	2040      	movs	r0, #64	; 0x40
 80170ca:	f000 f9e1 	bl	8017490 <SX1276Read>
 80170ce:	0003      	movs	r3, r0
 80170d0:	b25b      	sxtb	r3, r3
 80170d2:	2233      	movs	r2, #51	; 0x33
 80170d4:	4013      	ands	r3, r2
 80170d6:	b25b      	sxtb	r3, r3
 80170d8:	2240      	movs	r2, #64	; 0x40
 80170da:	4313      	orrs	r3, r2
 80170dc:	b25b      	sxtb	r3, r3
 80170de:	b2db      	uxtb	r3, r3
 80170e0:	0019      	movs	r1, r3
 80170e2:	2040      	movs	r0, #64	; 0x40
 80170e4:	f000 f9c0 	bl	8017468 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 80170e8:	e013      	b.n	8017112 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80170ea:	21f7      	movs	r1, #247	; 0xf7
 80170ec:	2011      	movs	r0, #17
 80170ee:	f000 f9bb 	bl	8017468 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80170f2:	2040      	movs	r0, #64	; 0x40
 80170f4:	f000 f9cc 	bl	8017490 <SX1276Read>
 80170f8:	0003      	movs	r3, r0
 80170fa:	b25b      	sxtb	r3, r3
 80170fc:	223f      	movs	r2, #63	; 0x3f
 80170fe:	4013      	ands	r3, r2
 8017100:	b25b      	sxtb	r3, r3
 8017102:	2240      	movs	r2, #64	; 0x40
 8017104:	4313      	orrs	r3, r2
 8017106:	b25b      	sxtb	r3, r3
 8017108:	b2db      	uxtb	r3, r3
 801710a:	0019      	movs	r1, r3
 801710c:	2040      	movs	r0, #64	; 0x40
 801710e:	f000 f9ab 	bl	8017468 <SX1276Write>
        break;
 8017112:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8017114:	4b07      	ldr	r3, [pc, #28]	; (8017134 <SX1276SetTx+0xf0>)
 8017116:	2202      	movs	r2, #2
 8017118:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801711a:	4b05      	ldr	r3, [pc, #20]	; (8017130 <SX1276SetTx+0xec>)
 801711c:	0018      	movs	r0, r3
 801711e:	f7fe f8bd 	bl	801529c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8017122:	2003      	movs	r0, #3
 8017124:	f000 f8f8 	bl	8017318 <SX1276SetOpMode>
}
 8017128:	46c0      	nop			; (mov r8, r8)
 801712a:	46bd      	mov	sp, r7
 801712c:	b002      	add	sp, #8
 801712e:	bd80      	pop	{r7, pc}
 8017130:	20001474 	.word	0x20001474
 8017134:	200014a4 	.word	0x200014a4

08017138 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8017138:	b580      	push	{r7, lr}
 801713a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276StartCad\r\n"));

    switch( SX1276.Settings.Modem )
 801713c:	4b11      	ldr	r3, [pc, #68]	; (8017184 <SX1276StartCad+0x4c>)
 801713e:	795b      	ldrb	r3, [r3, #5]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d01a      	beq.n	801717a <SX1276StartCad+0x42>
 8017144:	2b01      	cmp	r3, #1
 8017146:	d000      	beq.n	801714a <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8017148:	e018      	b.n	801717c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801714a:	21fa      	movs	r1, #250	; 0xfa
 801714c:	2011      	movs	r0, #17
 801714e:	f000 f98b 	bl	8017468 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8017152:	2040      	movs	r0, #64	; 0x40
 8017154:	f000 f99c 	bl	8017490 <SX1276Read>
 8017158:	0003      	movs	r3, r0
 801715a:	001a      	movs	r2, r3
 801715c:	2303      	movs	r3, #3
 801715e:	439a      	bics	r2, r3
 8017160:	0013      	movs	r3, r2
 8017162:	b2db      	uxtb	r3, r3
 8017164:	0019      	movs	r1, r3
 8017166:	2040      	movs	r0, #64	; 0x40
 8017168:	f000 f97e 	bl	8017468 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801716c:	4b05      	ldr	r3, [pc, #20]	; (8017184 <SX1276StartCad+0x4c>)
 801716e:	2203      	movs	r2, #3
 8017170:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8017172:	2007      	movs	r0, #7
 8017174:	f000 f8d0 	bl	8017318 <SX1276SetOpMode>
        break;
 8017178:	e000      	b.n	801717c <SX1276StartCad+0x44>
        break;
 801717a:	46c0      	nop			; (mov r8, r8)
    }
}
 801717c:	46c0      	nop			; (mov r8, r8)
 801717e:	46bd      	mov	sp, r7
 8017180:	bd80      	pop	{r7, pc}
 8017182:	46c0      	nop			; (mov r8, r8)
 8017184:	200014a4 	.word	0x200014a4

08017188 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b08e      	sub	sp, #56	; 0x38
 801718c:	af0a      	add	r7, sp, #40	; 0x28
 801718e:	6078      	str	r0, [r7, #4]
 8017190:	0008      	movs	r0, r1
 8017192:	0011      	movs	r1, r2
 8017194:	1cfb      	adds	r3, r7, #3
 8017196:	1c02      	adds	r2, r0, #0
 8017198:	701a      	strb	r2, [r3, #0]
 801719a:	003b      	movs	r3, r7
 801719c:	1c0a      	adds	r2, r1, #0
 801719e:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxContinuousWave\r\n"));

    uint32_t timeout = ( uint32_t )( time * 1000 );
 80171a0:	003b      	movs	r3, r7
 80171a2:	881a      	ldrh	r2, [r3, #0]
 80171a4:	0013      	movs	r3, r2
 80171a6:	015b      	lsls	r3, r3, #5
 80171a8:	1a9b      	subs	r3, r3, r2
 80171aa:	009b      	lsls	r3, r3, #2
 80171ac:	189b      	adds	r3, r3, r2
 80171ae:	00db      	lsls	r3, r3, #3
 80171b0:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	0018      	movs	r0, r3
 80171b6:	f7fe fd0f 	bl	8015bd8 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80171ba:	1cfb      	adds	r3, r7, #3
 80171bc:	2100      	movs	r1, #0
 80171be:	5659      	ldrsb	r1, [r3, r1]
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	9308      	str	r3, [sp, #32]
 80171c4:	2300      	movs	r3, #0
 80171c6:	9307      	str	r3, [sp, #28]
 80171c8:	2300      	movs	r3, #0
 80171ca:	9306      	str	r3, [sp, #24]
 80171cc:	2300      	movs	r3, #0
 80171ce:	9305      	str	r3, [sp, #20]
 80171d0:	2300      	movs	r3, #0
 80171d2:	9304      	str	r3, [sp, #16]
 80171d4:	2300      	movs	r3, #0
 80171d6:	9303      	str	r3, [sp, #12]
 80171d8:	2305      	movs	r3, #5
 80171da:	9302      	str	r3, [sp, #8]
 80171dc:	2300      	movs	r3, #0
 80171de:	9301      	str	r3, [sp, #4]
 80171e0:	2396      	movs	r3, #150	; 0x96
 80171e2:	015b      	lsls	r3, r3, #5
 80171e4:	9300      	str	r3, [sp, #0]
 80171e6:	2300      	movs	r3, #0
 80171e8:	2200      	movs	r2, #0
 80171ea:	2000      	movs	r0, #0
 80171ec:	f7ff f914 	bl	8016418 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80171f0:	2031      	movs	r0, #49	; 0x31
 80171f2:	f000 f94d 	bl	8017490 <SX1276Read>
 80171f6:	0003      	movs	r3, r0
 80171f8:	001a      	movs	r2, r3
 80171fa:	2340      	movs	r3, #64	; 0x40
 80171fc:	439a      	bics	r2, r3
 80171fe:	0013      	movs	r3, r2
 8017200:	b2db      	uxtb	r3, r3
 8017202:	0019      	movs	r1, r3
 8017204:	2031      	movs	r0, #49	; 0x31
 8017206:	f000 f92f 	bl	8017468 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801720a:	21f0      	movs	r1, #240	; 0xf0
 801720c:	2040      	movs	r0, #64	; 0x40
 801720e:	f000 f92b 	bl	8017468 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8017212:	21a0      	movs	r1, #160	; 0xa0
 8017214:	2041      	movs	r0, #65	; 0x41
 8017216:	f000 f927 	bl	8017468 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801721a:	68fa      	ldr	r2, [r7, #12]
 801721c:	4b09      	ldr	r3, [pc, #36]	; (8017244 <SX1276SetTxContinuousWave+0xbc>)
 801721e:	0011      	movs	r1, r2
 8017220:	0018      	movs	r0, r3
 8017222:	f7fe f80f 	bl	8015244 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8017226:	4b08      	ldr	r3, [pc, #32]	; (8017248 <SX1276SetTxContinuousWave+0xc0>)
 8017228:	2202      	movs	r2, #2
 801722a:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801722c:	4b05      	ldr	r3, [pc, #20]	; (8017244 <SX1276SetTxContinuousWave+0xbc>)
 801722e:	0018      	movs	r0, r3
 8017230:	f7fe f834 	bl	801529c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8017234:	2003      	movs	r0, #3
 8017236:	f000 f86f 	bl	8017318 <SX1276SetOpMode>
}
 801723a:	46c0      	nop			; (mov r8, r8)
 801723c:	46bd      	mov	sp, r7
 801723e:	b004      	add	sp, #16
 8017240:	bd80      	pop	{r7, pc}
 8017242:	46c0      	nop			; (mov r8, r8)
 8017244:	20001474 	.word	0x20001474
 8017248:	200014a4 	.word	0x200014a4

0801724c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b084      	sub	sp, #16
 8017250:	af00      	add	r7, sp, #0
 8017252:	0002      	movs	r2, r0
 8017254:	1dfb      	adds	r3, r7, #7
 8017256:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276ReadRssi\r\n"));

    int16_t rssi = 0;
 8017258:	230e      	movs	r3, #14
 801725a:	18fb      	adds	r3, r7, r3
 801725c:	2200      	movs	r2, #0
 801725e:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8017260:	1dfb      	adds	r3, r7, #7
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d002      	beq.n	801726e <SX1276ReadRssi+0x22>
 8017268:	2b01      	cmp	r3, #1
 801726a:	d00d      	beq.n	8017288 <SX1276ReadRssi+0x3c>
 801726c:	e027      	b.n	80172be <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801726e:	2011      	movs	r0, #17
 8017270:	f000 f90e 	bl	8017490 <SX1276Read>
 8017274:	0003      	movs	r3, r0
 8017276:	085b      	lsrs	r3, r3, #1
 8017278:	b2db      	uxtb	r3, r3
 801727a:	b29b      	uxth	r3, r3
 801727c:	425b      	negs	r3, r3
 801727e:	b29a      	uxth	r2, r3
 8017280:	230e      	movs	r3, #14
 8017282:	18fb      	adds	r3, r7, r3
 8017284:	801a      	strh	r2, [r3, #0]
        break;
 8017286:	e020      	b.n	80172ca <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8017288:	4b14      	ldr	r3, [pc, #80]	; (80172dc <SX1276ReadRssi+0x90>)
 801728a:	689b      	ldr	r3, [r3, #8]
 801728c:	4a14      	ldr	r2, [pc, #80]	; (80172e0 <SX1276ReadRssi+0x94>)
 801728e:	4293      	cmp	r3, r2
 8017290:	d90a      	bls.n	80172a8 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8017292:	201b      	movs	r0, #27
 8017294:	f000 f8fc 	bl	8017490 <SX1276Read>
 8017298:	0003      	movs	r3, r0
 801729a:	b29b      	uxth	r3, r3
 801729c:	3b9d      	subs	r3, #157	; 0x9d
 801729e:	b29a      	uxth	r2, r3
 80172a0:	230e      	movs	r3, #14
 80172a2:	18fb      	adds	r3, r7, r3
 80172a4:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 80172a6:	e010      	b.n	80172ca <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80172a8:	201b      	movs	r0, #27
 80172aa:	f000 f8f1 	bl	8017490 <SX1276Read>
 80172ae:	0003      	movs	r3, r0
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	3ba4      	subs	r3, #164	; 0xa4
 80172b4:	b29a      	uxth	r2, r3
 80172b6:	230e      	movs	r3, #14
 80172b8:	18fb      	adds	r3, r7, r3
 80172ba:	801a      	strh	r2, [r3, #0]
        break;
 80172bc:	e005      	b.n	80172ca <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 80172be:	230e      	movs	r3, #14
 80172c0:	18fb      	adds	r3, r7, r3
 80172c2:	2201      	movs	r2, #1
 80172c4:	4252      	negs	r2, r2
 80172c6:	801a      	strh	r2, [r3, #0]
        break;
 80172c8:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 80172ca:	230e      	movs	r3, #14
 80172cc:	18fb      	adds	r3, r7, r3
 80172ce:	2200      	movs	r2, #0
 80172d0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80172d2:	0018      	movs	r0, r3
 80172d4:	46bd      	mov	sp, r7
 80172d6:	b004      	add	sp, #16
 80172d8:	bd80      	pop	{r7, pc}
 80172da:	46c0      	nop			; (mov r8, r8)
 80172dc:	200014a4 	.word	0x200014a4
 80172e0:	1f4add40 	.word	0x1f4add40

080172e4 <SX1276Reset>:

void SX1276Reset( void )
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Reset\r\n"));

	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_OUTPUT_PP);
 80172e8:	2200      	movs	r2, #0
 80172ea:	2101      	movs	r1, #1
 80172ec:	2002      	movs	r0, #2
 80172ee:	f006 f931 	bl	801d554 <gpio_configure>
	gpio_reset(ITSDK_SX1276_RESET_BANK, ITSDK_SX1276_RESET_PIN);
 80172f2:	2101      	movs	r1, #1
 80172f4:	2002      	movs	r0, #2
 80172f6:	f006 fb4d 	bl	801d994 <gpio_reset>
	itsdk_delayMs(2);
 80172fa:	2002      	movs	r0, #2
 80172fc:	f006 fc8e 	bl	801dc1c <itsdk_delayMs>
	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_INPUT);
 8017300:	2204      	movs	r2, #4
 8017302:	2101      	movs	r1, #1
 8017304:	2002      	movs	r0, #2
 8017306:	f006 f925 	bl	801d554 <gpio_configure>
	itsdk_delayMs(10);
 801730a:	200a      	movs	r0, #10
 801730c:	f006 fc86 	bl	801dc1c <itsdk_delayMs>
}
 8017310:	46c0      	nop			; (mov r8, r8)
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}
	...

08017318 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	0002      	movs	r2, r0
 8017320:	1dfb      	adds	r3, r7, #7
 8017322:	701a      	strb	r2, [r3, #0]
		LOG_INFO_SX1276(("Others)\r\n"));
		break;
	}
#endif

    if( opMode == RF_OPMODE_SLEEP )
 8017324:	1dfb      	adds	r3, r7, #7
 8017326:	781b      	ldrb	r3, [r3, #0]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d11c      	bne.n	8017366 <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801732c:	2001      	movs	r0, #1
 801732e:	f000 f8af 	bl	8017490 <SX1276Read>
 8017332:	0003      	movs	r3, r0
 8017334:	b25b      	sxtb	r3, r3
 8017336:	2207      	movs	r2, #7
 8017338:	4393      	bics	r3, r2
 801733a:	b25a      	sxtb	r2, r3
 801733c:	1dfb      	adds	r3, r7, #7
 801733e:	781b      	ldrb	r3, [r3, #0]
 8017340:	b25b      	sxtb	r3, r3
 8017342:	4313      	orrs	r3, r2
 8017344:	b25b      	sxtb	r3, r3
 8017346:	b2db      	uxtb	r3, r3
 8017348:	0019      	movs	r1, r3
 801734a:	2001      	movs	r0, #1
 801734c:	f000 f88c 	bl	8017468 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8017350:	4b18      	ldr	r3, [pc, #96]	; (80173b4 <SX1276SetOpMode+0x9c>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	691b      	ldr	r3, [r3, #16]
 8017356:	2001      	movs	r0, #1
 8017358:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 801735a:	4b16      	ldr	r3, [pc, #88]	; (80173b4 <SX1276SetOpMode+0x9c>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2000      	movs	r0, #0
 8017362:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 8017364:	e022      	b.n	80173ac <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8017366:	4b13      	ldr	r3, [pc, #76]	; (80173b4 <SX1276SetOpMode+0x9c>)
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	2001      	movs	r0, #1
 801736e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8017370:	4b10      	ldr	r3, [pc, #64]	; (80173b4 <SX1276SetOpMode+0x9c>)
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	691b      	ldr	r3, [r3, #16]
 8017376:	2000      	movs	r0, #0
 8017378:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 801737a:	4b0e      	ldr	r3, [pc, #56]	; (80173b4 <SX1276SetOpMode+0x9c>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	695b      	ldr	r3, [r3, #20]
 8017380:	1dfa      	adds	r2, r7, #7
 8017382:	7812      	ldrb	r2, [r2, #0]
 8017384:	0010      	movs	r0, r2
 8017386:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8017388:	2001      	movs	r0, #1
 801738a:	f000 f881 	bl	8017490 <SX1276Read>
 801738e:	0003      	movs	r3, r0
 8017390:	b25b      	sxtb	r3, r3
 8017392:	2207      	movs	r2, #7
 8017394:	4393      	bics	r3, r2
 8017396:	b25a      	sxtb	r2, r3
 8017398:	1dfb      	adds	r3, r7, #7
 801739a:	781b      	ldrb	r3, [r3, #0]
 801739c:	b25b      	sxtb	r3, r3
 801739e:	4313      	orrs	r3, r2
 80173a0:	b25b      	sxtb	r3, r3
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	0019      	movs	r1, r3
 80173a6:	2001      	movs	r0, #1
 80173a8:	f000 f85e 	bl	8017468 <SX1276Write>
}
 80173ac:	46c0      	nop			; (mov r8, r8)
 80173ae:	46bd      	mov	sp, r7
 80173b0:	b002      	add	sp, #8
 80173b2:	bd80      	pop	{r7, pc}
 80173b4:	20001030 	.word	0x20001030

080173b8 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b082      	sub	sp, #8
 80173bc:	af00      	add	r7, sp, #0
 80173be:	0002      	movs	r2, r0
 80173c0:	1dfb      	adds	r3, r7, #7
 80173c2:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetModem (%s)\r\n",((modem==MODEM_LORA)?"LORA":"FSK")));

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80173c4:	2001      	movs	r0, #1
 80173c6:	f000 f863 	bl	8017490 <SX1276Read>
 80173ca:	0003      	movs	r3, r0
 80173cc:	b25b      	sxtb	r3, r3
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	da03      	bge.n	80173da <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 80173d2:	4b24      	ldr	r3, [pc, #144]	; (8017464 <SX1276SetModem+0xac>)
 80173d4:	2201      	movs	r2, #1
 80173d6:	715a      	strb	r2, [r3, #5]
 80173d8:	e002      	b.n	80173e0 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 80173da:	4b22      	ldr	r3, [pc, #136]	; (8017464 <SX1276SetModem+0xac>)
 80173dc:	2200      	movs	r2, #0
 80173de:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 80173e0:	4b20      	ldr	r3, [pc, #128]	; (8017464 <SX1276SetModem+0xac>)
 80173e2:	795b      	ldrb	r3, [r3, #5]
 80173e4:	1dfa      	adds	r2, r7, #7
 80173e6:	7812      	ldrb	r2, [r2, #0]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d037      	beq.n	801745c <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 80173ec:	4b1d      	ldr	r3, [pc, #116]	; (8017464 <SX1276SetModem+0xac>)
 80173ee:	1dfa      	adds	r2, r7, #7
 80173f0:	7812      	ldrb	r2, [r2, #0]
 80173f2:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 80173f4:	4b1b      	ldr	r3, [pc, #108]	; (8017464 <SX1276SetModem+0xac>)
 80173f6:	795b      	ldrb	r3, [r3, #5]
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	d016      	beq.n	801742a <SX1276SetModem+0x72>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 80173fc:	f7ff fc5e 	bl	8016cbc <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8017400:	2001      	movs	r0, #1
 8017402:	f000 f845 	bl	8017490 <SX1276Read>
 8017406:	0003      	movs	r3, r0
 8017408:	001a      	movs	r2, r3
 801740a:	237f      	movs	r3, #127	; 0x7f
 801740c:	4013      	ands	r3, r2
 801740e:	b2db      	uxtb	r3, r3
 8017410:	0019      	movs	r1, r3
 8017412:	2001      	movs	r0, #1
 8017414:	f000 f828 	bl	8017468 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8017418:	2100      	movs	r1, #0
 801741a:	2040      	movs	r0, #64	; 0x40
 801741c:	f000 f824 	bl	8017468 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8017420:	2130      	movs	r1, #48	; 0x30
 8017422:	2041      	movs	r0, #65	; 0x41
 8017424:	f000 f820 	bl	8017468 <SX1276Write>
        break;
 8017428:	e019      	b.n	801745e <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetSleep( );
 801742a:	f7ff fc47 	bl	8016cbc <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801742e:	2001      	movs	r0, #1
 8017430:	f000 f82e 	bl	8017490 <SX1276Read>
 8017434:	0003      	movs	r3, r0
 8017436:	001a      	movs	r2, r3
 8017438:	2380      	movs	r3, #128	; 0x80
 801743a:	425b      	negs	r3, r3
 801743c:	4313      	orrs	r3, r2
 801743e:	b2db      	uxtb	r3, r3
 8017440:	0019      	movs	r1, r3
 8017442:	2001      	movs	r0, #1
 8017444:	f000 f810 	bl	8017468 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8017448:	2100      	movs	r1, #0
 801744a:	2040      	movs	r0, #64	; 0x40
 801744c:	f000 f80c 	bl	8017468 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8017450:	2100      	movs	r1, #0
 8017452:	2041      	movs	r0, #65	; 0x41
 8017454:	f000 f808 	bl	8017468 <SX1276Write>
        break;
 8017458:	46c0      	nop			; (mov r8, r8)
 801745a:	e000      	b.n	801745e <SX1276SetModem+0xa6>
        return;
 801745c:	46c0      	nop			; (mov r8, r8)
    }
}
 801745e:	46bd      	mov	sp, r7
 8017460:	b002      	add	sp, #8
 8017462:	bd80      	pop	{r7, pc}
 8017464:	200014a4 	.word	0x200014a4

08017468 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b082      	sub	sp, #8
 801746c:	af00      	add	r7, sp, #0
 801746e:	0002      	movs	r2, r0
 8017470:	1dbb      	adds	r3, r7, #6
 8017472:	801a      	strh	r2, [r3, #0]
 8017474:	1d7b      	adds	r3, r7, #5
 8017476:	1c0a      	adds	r2, r1, #0
 8017478:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Write\r\n"));

    SX1276WriteBuffer( addr, &data, 1 );
 801747a:	1d79      	adds	r1, r7, #5
 801747c:	1dbb      	adds	r3, r7, #6
 801747e:	881b      	ldrh	r3, [r3, #0]
 8017480:	2201      	movs	r2, #1
 8017482:	0018      	movs	r0, r3
 8017484:	f000 f818 	bl	80174b8 <SX1276WriteBuffer>
}
 8017488:	46c0      	nop			; (mov r8, r8)
 801748a:	46bd      	mov	sp, r7
 801748c:	b002      	add	sp, #8
 801748e:	bd80      	pop	{r7, pc}

08017490 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 8017490:	b590      	push	{r4, r7, lr}
 8017492:	b085      	sub	sp, #20
 8017494:	af00      	add	r7, sp, #0
 8017496:	0002      	movs	r2, r0
 8017498:	1dbb      	adds	r3, r7, #6
 801749a:	801a      	strh	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Read\r\n"));

    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801749c:	240f      	movs	r4, #15
 801749e:	1939      	adds	r1, r7, r4
 80174a0:	1dbb      	adds	r3, r7, #6
 80174a2:	881b      	ldrh	r3, [r3, #0]
 80174a4:	2201      	movs	r2, #1
 80174a6:	0018      	movs	r0, r3
 80174a8:	f000 f854 	bl	8017554 <SX1276ReadBuffer>
    return data;
 80174ac:	193b      	adds	r3, r7, r4
 80174ae:	781b      	ldrb	r3, [r3, #0]
}
 80174b0:	0018      	movs	r0, r3
 80174b2:	46bd      	mov	sp, r7
 80174b4:	b005      	add	sp, #20
 80174b6:	bd90      	pop	{r4, r7, pc}

080174b8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80174b8:	b590      	push	{r4, r7, lr}
 80174ba:	b085      	sub	sp, #20
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6039      	str	r1, [r7, #0]
 80174c0:	0011      	movs	r1, r2
 80174c2:	1dbb      	adds	r3, r7, #6
 80174c4:	1c02      	adds	r2, r0, #0
 80174c6:	801a      	strh	r2, [r3, #0]
 80174c8:	1d7b      	adds	r3, r7, #5
 80174ca:	1c0a      	adds	r2, r1, #0
 80174cc:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 80174ce:	2380      	movs	r3, #128	; 0x80
 80174d0:	021b      	lsls	r3, r3, #8
 80174d2:	0019      	movs	r1, r3
 80174d4:	2000      	movs	r0, #0
 80174d6:	f006 fa5d 	bl	801d994 <gpio_reset>

	uint16_t tx = addr | 0x80;
 80174da:	1dbb      	adds	r3, r7, #6
 80174dc:	881b      	ldrh	r3, [r3, #0]
 80174de:	2280      	movs	r2, #128	; 0x80
 80174e0:	4313      	orrs	r3, r2
 80174e2:	b29a      	uxth	r2, r3
 80174e4:	210c      	movs	r1, #12
 80174e6:	187b      	adds	r3, r7, r1
 80174e8:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 80174ea:	230a      	movs	r3, #10
 80174ec:	18fa      	adds	r2, r7, r3
 80174ee:	1879      	adds	r1, r7, r1
 80174f0:	4817      	ldr	r0, [pc, #92]	; (8017550 <SX1276WriteBuffer+0x98>)
 80174f2:	2301      	movs	r3, #1
 80174f4:	f007 fa4a 	bl	801e98c <spi_rwRegister>
    for( i = 0; i < size; i++ )
 80174f8:	230f      	movs	r3, #15
 80174fa:	18fb      	adds	r3, r7, r3
 80174fc:	2200      	movs	r2, #0
 80174fe:	701a      	strb	r2, [r3, #0]
 8017500:	e015      	b.n	801752e <SX1276WriteBuffer+0x76>
    {
    	tx = buffer[i];
 8017502:	240f      	movs	r4, #15
 8017504:	193b      	adds	r3, r7, r4
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	683a      	ldr	r2, [r7, #0]
 801750a:	18d3      	adds	r3, r2, r3
 801750c:	781b      	ldrb	r3, [r3, #0]
 801750e:	b29a      	uxth	r2, r3
 8017510:	210c      	movs	r1, #12
 8017512:	187b      	adds	r3, r7, r1
 8017514:	801a      	strh	r2, [r3, #0]
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017516:	230a      	movs	r3, #10
 8017518:	18fa      	adds	r2, r7, r3
 801751a:	1879      	adds	r1, r7, r1
 801751c:	480c      	ldr	r0, [pc, #48]	; (8017550 <SX1276WriteBuffer+0x98>)
 801751e:	2301      	movs	r3, #1
 8017520:	f007 fa34 	bl	801e98c <spi_rwRegister>
    for( i = 0; i < size; i++ )
 8017524:	193b      	adds	r3, r7, r4
 8017526:	781a      	ldrb	r2, [r3, #0]
 8017528:	193b      	adds	r3, r7, r4
 801752a:	3201      	adds	r2, #1
 801752c:	701a      	strb	r2, [r3, #0]
 801752e:	230f      	movs	r3, #15
 8017530:	18fa      	adds	r2, r7, r3
 8017532:	1d7b      	adds	r3, r7, #5
 8017534:	7812      	ldrb	r2, [r2, #0]
 8017536:	781b      	ldrb	r3, [r3, #0]
 8017538:	429a      	cmp	r2, r3
 801753a:	d3e2      	bcc.n	8017502 <SX1276WriteBuffer+0x4a>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801753c:	2380      	movs	r3, #128	; 0x80
 801753e:	021b      	lsls	r3, r3, #8
 8017540:	0019      	movs	r1, r3
 8017542:	2000      	movs	r0, #0
 8017544:	f006 fa0e 	bl	801d964 <gpio_set>
}
 8017548:	46c0      	nop			; (mov r8, r8)
 801754a:	46bd      	mov	sp, r7
 801754c:	b005      	add	sp, #20
 801754e:	bd90      	pop	{r4, r7, pc}
 8017550:	20001288 	.word	0x20001288

08017554 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017554:	b590      	push	{r4, r7, lr}
 8017556:	b085      	sub	sp, #20
 8017558:	af00      	add	r7, sp, #0
 801755a:	6039      	str	r1, [r7, #0]
 801755c:	0011      	movs	r1, r2
 801755e:	1dbb      	adds	r3, r7, #6
 8017560:	1c02      	adds	r2, r0, #0
 8017562:	801a      	strh	r2, [r3, #0]
 8017564:	1d7b      	adds	r3, r7, #5
 8017566:	1c0a      	adds	r2, r1, #0
 8017568:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801756a:	2380      	movs	r3, #128	; 0x80
 801756c:	021b      	lsls	r3, r3, #8
 801756e:	0019      	movs	r1, r3
 8017570:	2000      	movs	r0, #0
 8017572:	f006 fa0f 	bl	801d994 <gpio_reset>

	uint16_t tx = addr & 0x7f;
 8017576:	1dbb      	adds	r3, r7, #6
 8017578:	881b      	ldrh	r3, [r3, #0]
 801757a:	227f      	movs	r2, #127	; 0x7f
 801757c:	4013      	ands	r3, r2
 801757e:	b29a      	uxth	r2, r3
 8017580:	210c      	movs	r1, #12
 8017582:	187b      	adds	r3, r7, r1
 8017584:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 8017586:	230a      	movs	r3, #10
 8017588:	18fa      	adds	r2, r7, r3
 801758a:	000c      	movs	r4, r1
 801758c:	1879      	adds	r1, r7, r1
 801758e:	481a      	ldr	r0, [pc, #104]	; (80175f8 <SX1276ReadBuffer+0xa4>)
 8017590:	2301      	movs	r3, #1
 8017592:	f007 f9fb 	bl	801e98c <spi_rwRegister>

	tx = 0;
 8017596:	0021      	movs	r1, r4
 8017598:	187b      	adds	r3, r7, r1
 801759a:	2200      	movs	r2, #0
 801759c:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801759e:	230f      	movs	r3, #15
 80175a0:	18fb      	adds	r3, r7, r3
 80175a2:	2200      	movs	r2, #0
 80175a4:	701a      	strb	r2, [r3, #0]
 80175a6:	e015      	b.n	80175d4 <SX1276ReadBuffer+0x80>
    {
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 80175a8:	240a      	movs	r4, #10
 80175aa:	193a      	adds	r2, r7, r4
 80175ac:	230c      	movs	r3, #12
 80175ae:	18f9      	adds	r1, r7, r3
 80175b0:	4811      	ldr	r0, [pc, #68]	; (80175f8 <SX1276ReadBuffer+0xa4>)
 80175b2:	2301      	movs	r3, #1
 80175b4:	f007 f9ea 	bl	801e98c <spi_rwRegister>
    	buffer[i] = rx;
 80175b8:	193b      	adds	r3, r7, r4
 80175ba:	8819      	ldrh	r1, [r3, #0]
 80175bc:	200f      	movs	r0, #15
 80175be:	183b      	adds	r3, r7, r0
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	683a      	ldr	r2, [r7, #0]
 80175c4:	18d3      	adds	r3, r2, r3
 80175c6:	b2ca      	uxtb	r2, r1
 80175c8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80175ca:	183b      	adds	r3, r7, r0
 80175cc:	781a      	ldrb	r2, [r3, #0]
 80175ce:	183b      	adds	r3, r7, r0
 80175d0:	3201      	adds	r2, #1
 80175d2:	701a      	strb	r2, [r3, #0]
 80175d4:	230f      	movs	r3, #15
 80175d6:	18fa      	adds	r2, r7, r3
 80175d8:	1d7b      	adds	r3, r7, #5
 80175da:	7812      	ldrb	r2, [r2, #0]
 80175dc:	781b      	ldrb	r3, [r3, #0]
 80175de:	429a      	cmp	r2, r3
 80175e0:	d3e2      	bcc.n	80175a8 <SX1276ReadBuffer+0x54>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 80175e2:	2380      	movs	r3, #128	; 0x80
 80175e4:	021b      	lsls	r3, r3, #8
 80175e6:	0019      	movs	r1, r3
 80175e8:	2000      	movs	r0, #0
 80175ea:	f006 f9bb 	bl	801d964 <gpio_set>
}
 80175ee:	46c0      	nop			; (mov r8, r8)
 80175f0:	46bd      	mov	sp, r7
 80175f2:	b005      	add	sp, #20
 80175f4:	bd90      	pop	{r4, r7, pc}
 80175f6:	46c0      	nop			; (mov r8, r8)
 80175f8:	20001288 	.word	0x20001288

080175fc <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b082      	sub	sp, #8
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
 8017604:	000a      	movs	r2, r1
 8017606:	1cfb      	adds	r3, r7, #3
 8017608:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteFifo\r\n"));
    SX1276WriteBuffer( 0, buffer, size );
 801760a:	1cfb      	adds	r3, r7, #3
 801760c:	781a      	ldrb	r2, [r3, #0]
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	0019      	movs	r1, r3
 8017612:	2000      	movs	r0, #0
 8017614:	f7ff ff50 	bl	80174b8 <SX1276WriteBuffer>
}
 8017618:	46c0      	nop			; (mov r8, r8)
 801761a:	46bd      	mov	sp, r7
 801761c:	b002      	add	sp, #8
 801761e:	bd80      	pop	{r7, pc}

08017620 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b082      	sub	sp, #8
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
 8017628:	000a      	movs	r2, r1
 801762a:	1cfb      	adds	r3, r7, #3
 801762c:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadFifo\r\n"));
    SX1276ReadBuffer( 0, buffer, size );
 801762e:	1cfb      	adds	r3, r7, #3
 8017630:	781a      	ldrb	r2, [r3, #0]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	0019      	movs	r1, r3
 8017636:	2000      	movs	r0, #0
 8017638:	f7ff ff8c 	bl	8017554 <SX1276ReadBuffer>
}
 801763c:	46c0      	nop			; (mov r8, r8)
 801763e:	46bd      	mov	sp, r7
 8017640:	b002      	add	sp, #8
 8017642:	bd80      	pop	{r7, pc}

08017644 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b082      	sub	sp, #8
 8017648:	af00      	add	r7, sp, #0
 801764a:	0002      	movs	r2, r0
 801764c:	1dfb      	adds	r3, r7, #7
 801764e:	701a      	strb	r2, [r3, #0]
 8017650:	1dbb      	adds	r3, r7, #6
 8017652:	1c0a      	adds	r2, r1, #0
 8017654:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetMaxPayloadLength\r\n"));
    SX1276SetModem( modem );
 8017656:	1dfb      	adds	r3, r7, #7
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	0018      	movs	r0, r3
 801765c:	f7ff feac 	bl	80173b8 <SX1276SetModem>

    switch( modem )
 8017660:	1dfb      	adds	r3, r7, #7
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d002      	beq.n	801766e <SX1276SetMaxPayloadLength+0x2a>
 8017668:	2b01      	cmp	r3, #1
 801766a:	d00f      	beq.n	801768c <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801766c:	e016      	b.n	801769c <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801766e:	4b0d      	ldr	r3, [pc, #52]	; (80176a4 <SX1276SetMaxPayloadLength+0x60>)
 8017670:	2222      	movs	r2, #34	; 0x22
 8017672:	5c9b      	ldrb	r3, [r3, r2]
 8017674:	2201      	movs	r2, #1
 8017676:	4053      	eors	r3, r2
 8017678:	b2db      	uxtb	r3, r3
 801767a:	2b00      	cmp	r3, #0
 801767c:	d00d      	beq.n	801769a <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801767e:	1dbb      	adds	r3, r7, #6
 8017680:	781b      	ldrb	r3, [r3, #0]
 8017682:	0019      	movs	r1, r3
 8017684:	2032      	movs	r0, #50	; 0x32
 8017686:	f7ff feef 	bl	8017468 <SX1276Write>
        break;
 801768a:	e006      	b.n	801769a <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801768c:	1dbb      	adds	r3, r7, #6
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	0019      	movs	r1, r3
 8017692:	2023      	movs	r0, #35	; 0x23
 8017694:	f7ff fee8 	bl	8017468 <SX1276Write>
        break;
 8017698:	e000      	b.n	801769c <SX1276SetMaxPayloadLength+0x58>
        break;
 801769a:	46c0      	nop			; (mov r8, r8)
}
 801769c:	46c0      	nop			; (mov r8, r8)
 801769e:	46bd      	mov	sp, r7
 80176a0:	b002      	add	sp, #8
 80176a2:	bd80      	pop	{r7, pc}
 80176a4:	200014a4 	.word	0x200014a4

080176a8 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	0002      	movs	r2, r0
 80176b0:	1dfb      	adds	r3, r7, #7
 80176b2:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetPublicNetwork\r\n"));

    SX1276SetModem( MODEM_LORA );
 80176b4:	2001      	movs	r0, #1
 80176b6:	f7ff fe7f 	bl	80173b8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80176ba:	4b0b      	ldr	r3, [pc, #44]	; (80176e8 <SX1276SetPublicNetwork+0x40>)
 80176bc:	1dfa      	adds	r2, r7, #7
 80176be:	215c      	movs	r1, #92	; 0x5c
 80176c0:	7812      	ldrb	r2, [r2, #0]
 80176c2:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 80176c4:	1dfb      	adds	r3, r7, #7
 80176c6:	781b      	ldrb	r3, [r3, #0]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d004      	beq.n	80176d6 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80176cc:	2134      	movs	r1, #52	; 0x34
 80176ce:	2039      	movs	r0, #57	; 0x39
 80176d0:	f7ff feca 	bl	8017468 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 80176d4:	e003      	b.n	80176de <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80176d6:	2112      	movs	r1, #18
 80176d8:	2039      	movs	r0, #57	; 0x39
 80176da:	f7ff fec5 	bl	8017468 <SX1276Write>
}
 80176de:	46c0      	nop			; (mov r8, r8)
 80176e0:	46bd      	mov	sp, r7
 80176e2:	b002      	add	sp, #8
 80176e4:	bd80      	pop	{r7, pc}
 80176e6:	46c0      	nop			; (mov r8, r8)
 80176e8:	200014a4 	.word	0x200014a4

080176ec <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetWakeupTime\r\n"));

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;
 80176f0:	4b04      	ldr	r3, [pc, #16]	; (8017704 <SX1276GetWakeupTime+0x18>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	4798      	blx	r3
 80176f8:	0003      	movs	r3, r0
 80176fa:	3335      	adds	r3, #53	; 0x35
}
 80176fc:	0018      	movs	r0, r3
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	46c0      	nop			; (mov r8, r8)
 8017704:	20001030 	.word	0x20001030

08017708 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 8017708:	b590      	push	{r4, r7, lr}
 801770a:	b085      	sub	sp, #20
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnTimeoutIrq\r\n"));

    switch( SX1276.Settings.State )
 8017710:	4b51      	ldr	r3, [pc, #324]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 8017712:	791b      	ldrb	r3, [r3, #4]
 8017714:	2b01      	cmp	r3, #1
 8017716:	d002      	beq.n	801771e <SX1276OnTimeoutIrq+0x16>
 8017718:	2b02      	cmp	r3, #2
 801771a:	d045      	beq.n	80177a8 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801771c:	e098      	b.n	8017850 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801771e:	4b4e      	ldr	r3, [pc, #312]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 8017720:	795b      	ldrb	r3, [r3, #5]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d132      	bne.n	801778c <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017726:	4b4c      	ldr	r3, [pc, #304]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 8017728:	2230      	movs	r2, #48	; 0x30
 801772a:	2100      	movs	r1, #0
 801772c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801772e:	4b4a      	ldr	r3, [pc, #296]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 8017730:	2231      	movs	r2, #49	; 0x31
 8017732:	2100      	movs	r1, #0
 8017734:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017736:	4b48      	ldr	r3, [pc, #288]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 8017738:	2200      	movs	r2, #0
 801773a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801773c:	4b46      	ldr	r3, [pc, #280]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 801773e:	2200      	movs	r2, #0
 8017740:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8017742:	210b      	movs	r1, #11
 8017744:	203e      	movs	r0, #62	; 0x3e
 8017746:	f7ff fe8f 	bl	8017468 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801774a:	2110      	movs	r1, #16
 801774c:	203f      	movs	r0, #63	; 0x3f
 801774e:	f7ff fe8b 	bl	8017468 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8017752:	4b41      	ldr	r3, [pc, #260]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 8017754:	2226      	movs	r2, #38	; 0x26
 8017756:	5c9b      	ldrb	r3, [r3, r2]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d010      	beq.n	801777e <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801775c:	200d      	movs	r0, #13
 801775e:	f7ff fe97 	bl	8017490 <SX1276Read>
 8017762:	0003      	movs	r3, r0
 8017764:	001a      	movs	r2, r3
 8017766:	2340      	movs	r3, #64	; 0x40
 8017768:	4313      	orrs	r3, r2
 801776a:	b2db      	uxtb	r3, r3
 801776c:	0019      	movs	r1, r3
 801776e:	200d      	movs	r0, #13
 8017770:	f7ff fe7a 	bl	8017468 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8017774:	4b39      	ldr	r3, [pc, #228]	; (801785c <SX1276OnTimeoutIrq+0x154>)
 8017776:	0018      	movs	r0, r3
 8017778:	f7fd fd90 	bl	801529c <TimerStart>
 801777c:	e006      	b.n	801778c <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 801777e:	4b36      	ldr	r3, [pc, #216]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 8017780:	2200      	movs	r2, #0
 8017782:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8017784:	4b35      	ldr	r3, [pc, #212]	; (801785c <SX1276OnTimeoutIrq+0x154>)
 8017786:	0018      	movs	r0, r3
 8017788:	f7fd fdde 	bl	8015348 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801778c:	4b34      	ldr	r3, [pc, #208]	; (8017860 <SX1276OnTimeoutIrq+0x158>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d05a      	beq.n	801784a <SX1276OnTimeoutIrq+0x142>
 8017794:	4b32      	ldr	r3, [pc, #200]	; (8017860 <SX1276OnTimeoutIrq+0x158>)
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	68db      	ldr	r3, [r3, #12]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d055      	beq.n	801784a <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 801779e:	4b30      	ldr	r3, [pc, #192]	; (8017860 <SX1276OnTimeoutIrq+0x158>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	68db      	ldr	r3, [r3, #12]
 80177a4:	4798      	blx	r3
        break;
 80177a6:	e050      	b.n	801784a <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 80177a8:	f7ff fd9c 	bl	80172e4 <SX1276Reset>
        RxChainCalibration( );
 80177ac:	f7fe fae4 	bl	8015d78 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80177b0:	2000      	movs	r0, #0
 80177b2:	f7ff fdb1 	bl	8017318 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80177b6:	230f      	movs	r3, #15
 80177b8:	18fb      	adds	r3, r7, r3
 80177ba:	2200      	movs	r2, #0
 80177bc:	701a      	strb	r2, [r3, #0]
 80177be:	e025      	b.n	801780c <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 80177c0:	240f      	movs	r4, #15
 80177c2:	193b      	adds	r3, r7, r4
 80177c4:	781a      	ldrb	r2, [r3, #0]
 80177c6:	4927      	ldr	r1, [pc, #156]	; (8017864 <SX1276OnTimeoutIrq+0x15c>)
 80177c8:	0013      	movs	r3, r2
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	189b      	adds	r3, r3, r2
 80177ce:	5c5b      	ldrb	r3, [r3, r1]
 80177d0:	0018      	movs	r0, r3
 80177d2:	f7ff fdf1 	bl	80173b8 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80177d6:	193b      	adds	r3, r7, r4
 80177d8:	781a      	ldrb	r2, [r3, #0]
 80177da:	4922      	ldr	r1, [pc, #136]	; (8017864 <SX1276OnTimeoutIrq+0x15c>)
 80177dc:	0013      	movs	r3, r2
 80177de:	005b      	lsls	r3, r3, #1
 80177e0:	189b      	adds	r3, r3, r2
 80177e2:	18cb      	adds	r3, r1, r3
 80177e4:	3301      	adds	r3, #1
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	b298      	uxth	r0, r3
 80177ea:	193b      	adds	r3, r7, r4
 80177ec:	781a      	ldrb	r2, [r3, #0]
 80177ee:	491d      	ldr	r1, [pc, #116]	; (8017864 <SX1276OnTimeoutIrq+0x15c>)
 80177f0:	0013      	movs	r3, r2
 80177f2:	005b      	lsls	r3, r3, #1
 80177f4:	189b      	adds	r3, r3, r2
 80177f6:	18cb      	adds	r3, r1, r3
 80177f8:	3302      	adds	r3, #2
 80177fa:	781b      	ldrb	r3, [r3, #0]
 80177fc:	0019      	movs	r1, r3
 80177fe:	f7ff fe33 	bl	8017468 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8017802:	193b      	adds	r3, r7, r4
 8017804:	781a      	ldrb	r2, [r3, #0]
 8017806:	193b      	adds	r3, r7, r4
 8017808:	3201      	adds	r2, #1
 801780a:	701a      	strb	r2, [r3, #0]
 801780c:	230f      	movs	r3, #15
 801780e:	18fb      	adds	r3, r7, r3
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	2b0f      	cmp	r3, #15
 8017814:	d9d4      	bls.n	80177c0 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 8017816:	2000      	movs	r0, #0
 8017818:	f7ff fdce 	bl	80173b8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801781c:	4b0e      	ldr	r3, [pc, #56]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 801781e:	225c      	movs	r2, #92	; 0x5c
 8017820:	5c9b      	ldrb	r3, [r3, r2]
 8017822:	0018      	movs	r0, r3
 8017824:	f7ff ff40 	bl	80176a8 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8017828:	4b0b      	ldr	r3, [pc, #44]	; (8017858 <SX1276OnTimeoutIrq+0x150>)
 801782a:	2200      	movs	r2, #0
 801782c:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801782e:	4b0c      	ldr	r3, [pc, #48]	; (8017860 <SX1276OnTimeoutIrq+0x158>)
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d00b      	beq.n	801784e <SX1276OnTimeoutIrq+0x146>
 8017836:	4b0a      	ldr	r3, [pc, #40]	; (8017860 <SX1276OnTimeoutIrq+0x158>)
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	685b      	ldr	r3, [r3, #4]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d006      	beq.n	801784e <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 8017840:	4b07      	ldr	r3, [pc, #28]	; (8017860 <SX1276OnTimeoutIrq+0x158>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	4798      	blx	r3
        break;
 8017848:	e001      	b.n	801784e <SX1276OnTimeoutIrq+0x146>
        break;
 801784a:	46c0      	nop			; (mov r8, r8)
 801784c:	e000      	b.n	8017850 <SX1276OnTimeoutIrq+0x148>
        break;
 801784e:	46c0      	nop			; (mov r8, r8)
    }
}
 8017850:	46c0      	nop			; (mov r8, r8)
 8017852:	46bd      	mov	sp, r7
 8017854:	b005      	add	sp, #20
 8017856:	bd90      	pop	{r4, r7, pc}
 8017858:	200014a4 	.word	0x200014a4
 801785c:	2000148c 	.word	0x2000148c
 8017860:	20000f2c 	.word	0x20000f2c
 8017864:	08020ad0 	.word	0x08020ad0

08017868 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8017868:	b5b0      	push	{r4, r5, r7, lr}
 801786a:	b084      	sub	sp, #16
 801786c:	af00      	add	r7, sp, #0
 801786e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio0Irq\r\n"));

    volatile uint8_t irqFlags = 0;
 8017870:	230d      	movs	r3, #13
 8017872:	18fb      	adds	r3, r7, r3
 8017874:	2200      	movs	r2, #0
 8017876:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8017878:	4bca      	ldr	r3, [pc, #808]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801787a:	791b      	ldrb	r3, [r3, #4]
 801787c:	2b01      	cmp	r3, #1
 801787e:	d003      	beq.n	8017888 <SX1276OnDio0Irq+0x20>
 8017880:	2b02      	cmp	r3, #2
 8017882:	d100      	bne.n	8017886 <SX1276OnDio0Irq+0x1e>
 8017884:	e1f2      	b.n	8017c6c <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 8017886:	e20f      	b.n	8017ca8 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 8017888:	4bc6      	ldr	r3, [pc, #792]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801788a:	795b      	ldrb	r3, [r3, #5]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d003      	beq.n	8017898 <SX1276OnDio0Irq+0x30>
 8017890:	2b01      	cmp	r3, #1
 8017892:	d100      	bne.n	8017896 <SX1276OnDio0Irq+0x2e>
 8017894:	e0eb      	b.n	8017a6e <SX1276OnDio0Irq+0x206>
                break;
 8017896:	e1e8      	b.n	8017c6a <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8017898:	4bc2      	ldr	r3, [pc, #776]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801789a:	2224      	movs	r2, #36	; 0x24
 801789c:	5c9b      	ldrb	r3, [r3, r2]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d057      	beq.n	8017952 <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80178a2:	203f      	movs	r0, #63	; 0x3f
 80178a4:	f7ff fdf4 	bl	8017490 <SX1276Read>
 80178a8:	0003      	movs	r3, r0
 80178aa:	001a      	movs	r2, r3
 80178ac:	210d      	movs	r1, #13
 80178ae:	187b      	adds	r3, r7, r1
 80178b0:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80178b2:	187b      	adds	r3, r7, r1
 80178b4:	781b      	ldrb	r3, [r3, #0]
 80178b6:	b2db      	uxtb	r3, r3
 80178b8:	001a      	movs	r2, r3
 80178ba:	2302      	movs	r3, #2
 80178bc:	4013      	ands	r3, r2
 80178be:	2b02      	cmp	r3, #2
 80178c0:	d047      	beq.n	8017952 <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80178c2:	210b      	movs	r1, #11
 80178c4:	203e      	movs	r0, #62	; 0x3e
 80178c6:	f7ff fdcf 	bl	8017468 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80178ca:	2110      	movs	r1, #16
 80178cc:	203f      	movs	r0, #63	; 0x3f
 80178ce:	f7ff fdcb 	bl	8017468 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80178d2:	4bb5      	ldr	r3, [pc, #724]	; (8017ba8 <SX1276OnDio0Irq+0x340>)
 80178d4:	0018      	movs	r0, r3
 80178d6:	f7fd fd37 	bl	8015348 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80178da:	4bb2      	ldr	r3, [pc, #712]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80178dc:	2226      	movs	r2, #38	; 0x26
 80178de:	5c9b      	ldrb	r3, [r3, r2]
 80178e0:	2201      	movs	r2, #1
 80178e2:	4053      	eors	r3, r2
 80178e4:	b2db      	uxtb	r3, r3
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d007      	beq.n	80178fa <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 80178ea:	4bb0      	ldr	r3, [pc, #704]	; (8017bac <SX1276OnDio0Irq+0x344>)
 80178ec:	0018      	movs	r0, r3
 80178ee:	f7fd fd2b 	bl	8015348 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80178f2:	4bac      	ldr	r3, [pc, #688]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80178f4:	2200      	movs	r2, #0
 80178f6:	711a      	strb	r2, [r3, #4]
 80178f8:	e00f      	b.n	801791a <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80178fa:	200d      	movs	r0, #13
 80178fc:	f7ff fdc8 	bl	8017490 <SX1276Read>
 8017900:	0003      	movs	r3, r0
 8017902:	001a      	movs	r2, r3
 8017904:	2340      	movs	r3, #64	; 0x40
 8017906:	4313      	orrs	r3, r2
 8017908:	b2db      	uxtb	r3, r3
 801790a:	0019      	movs	r1, r3
 801790c:	200d      	movs	r0, #13
 801790e:	f7ff fdab 	bl	8017468 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8017912:	4ba6      	ldr	r3, [pc, #664]	; (8017bac <SX1276OnDio0Irq+0x344>)
 8017914:	0018      	movs	r0, r3
 8017916:	f7fd fcc1 	bl	801529c <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801791a:	4ba5      	ldr	r3, [pc, #660]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d008      	beq.n	8017934 <SX1276OnDio0Irq+0xcc>
 8017922:	4ba3      	ldr	r3, [pc, #652]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	691b      	ldr	r3, [r3, #16]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d003      	beq.n	8017934 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 801792c:	4ba0      	ldr	r3, [pc, #640]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	691b      	ldr	r3, [r3, #16]
 8017932:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017934:	4b9b      	ldr	r3, [pc, #620]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017936:	2230      	movs	r2, #48	; 0x30
 8017938:	2100      	movs	r1, #0
 801793a:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801793c:	4b99      	ldr	r3, [pc, #612]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801793e:	2231      	movs	r2, #49	; 0x31
 8017940:	2100      	movs	r1, #0
 8017942:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017944:	4b97      	ldr	r3, [pc, #604]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017946:	2200      	movs	r2, #0
 8017948:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801794a:	4b96      	ldr	r3, [pc, #600]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801794c:	2200      	movs	r2, #0
 801794e:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 8017950:	e18b      	b.n	8017c6a <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8017952:	4b94      	ldr	r3, [pc, #592]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017954:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017956:	2b00      	cmp	r3, #0
 8017958:	d12d      	bne.n	80179b6 <SX1276OnDio0Irq+0x14e>
 801795a:	4b92      	ldr	r3, [pc, #584]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801795c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801795e:	2b00      	cmp	r3, #0
 8017960:	d129      	bne.n	80179b6 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8017962:	4b90      	ldr	r3, [pc, #576]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017964:	2222      	movs	r2, #34	; 0x22
 8017966:	5c9b      	ldrb	r3, [r3, r2]
 8017968:	2201      	movs	r2, #1
 801796a:	4053      	eors	r3, r2
 801796c:	b2db      	uxtb	r3, r3
 801796e:	2b00      	cmp	r3, #0
 8017970:	d005      	beq.n	801797e <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8017972:	4b90      	ldr	r3, [pc, #576]	; (8017bb4 <SX1276OnDio0Irq+0x34c>)
 8017974:	2101      	movs	r1, #1
 8017976:	0018      	movs	r0, r3
 8017978:	f7ff fe52 	bl	8017620 <SX1276ReadFifo>
 801797c:	e006      	b.n	801798c <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801797e:	2032      	movs	r0, #50	; 0x32
 8017980:	f7ff fd86 	bl	8017490 <SX1276Read>
 8017984:	0003      	movs	r3, r0
 8017986:	b29a      	uxth	r2, r3
 8017988:	4b86      	ldr	r3, [pc, #536]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801798a:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801798c:	4b85      	ldr	r3, [pc, #532]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801798e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017990:	001a      	movs	r2, r3
 8017992:	4b89      	ldr	r3, [pc, #548]	; (8017bb8 <SX1276OnDio0Irq+0x350>)
 8017994:	18d0      	adds	r0, r2, r3
 8017996:	4b83      	ldr	r3, [pc, #524]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017998:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801799a:	b2da      	uxtb	r2, r3
 801799c:	4b81      	ldr	r3, [pc, #516]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 801799e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80179a0:	b2db      	uxtb	r3, r3
 80179a2:	1ad3      	subs	r3, r2, r3
 80179a4:	b2db      	uxtb	r3, r3
 80179a6:	0019      	movs	r1, r3
 80179a8:	f7ff fe3a 	bl	8017620 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80179ac:	4b7d      	ldr	r3, [pc, #500]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179ae:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80179b0:	4b7c      	ldr	r3, [pc, #496]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179b2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80179b4:	e013      	b.n	80179de <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80179b6:	4b7b      	ldr	r3, [pc, #492]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80179ba:	001a      	movs	r2, r3
 80179bc:	4b7e      	ldr	r3, [pc, #504]	; (8017bb8 <SX1276OnDio0Irq+0x350>)
 80179be:	18d0      	adds	r0, r2, r3
 80179c0:	4b78      	ldr	r3, [pc, #480]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179c2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80179c4:	b2da      	uxtb	r2, r3
 80179c6:	4b77      	ldr	r3, [pc, #476]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	1ad3      	subs	r3, r2, r3
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	0019      	movs	r1, r3
 80179d2:	f7ff fe25 	bl	8017620 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80179d6:	4b73      	ldr	r3, [pc, #460]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179d8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80179da:	4b72      	ldr	r3, [pc, #456]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179dc:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80179de:	4b72      	ldr	r3, [pc, #456]	; (8017ba8 <SX1276OnDio0Irq+0x340>)
 80179e0:	0018      	movs	r0, r3
 80179e2:	f7fd fcb1 	bl	8015348 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80179e6:	4b6f      	ldr	r3, [pc, #444]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179e8:	2226      	movs	r2, #38	; 0x26
 80179ea:	5c9b      	ldrb	r3, [r3, r2]
 80179ec:	2201      	movs	r2, #1
 80179ee:	4053      	eors	r3, r2
 80179f0:	b2db      	uxtb	r3, r3
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d007      	beq.n	8017a06 <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 80179f6:	4b6b      	ldr	r3, [pc, #428]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 80179f8:	2200      	movs	r2, #0
 80179fa:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80179fc:	4b6b      	ldr	r3, [pc, #428]	; (8017bac <SX1276OnDio0Irq+0x344>)
 80179fe:	0018      	movs	r0, r3
 8017a00:	f7fd fca2 	bl	8015348 <TimerStop>
 8017a04:	e00f      	b.n	8017a26 <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8017a06:	200d      	movs	r0, #13
 8017a08:	f7ff fd42 	bl	8017490 <SX1276Read>
 8017a0c:	0003      	movs	r3, r0
 8017a0e:	001a      	movs	r2, r3
 8017a10:	2340      	movs	r3, #64	; 0x40
 8017a12:	4313      	orrs	r3, r2
 8017a14:	b2db      	uxtb	r3, r3
 8017a16:	0019      	movs	r1, r3
 8017a18:	200d      	movs	r0, #13
 8017a1a:	f7ff fd25 	bl	8017468 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8017a1e:	4b63      	ldr	r3, [pc, #396]	; (8017bac <SX1276OnDio0Irq+0x344>)
 8017a20:	0018      	movs	r0, r3
 8017a22:	f7fd fc3b 	bl	801529c <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017a26:	4b62      	ldr	r3, [pc, #392]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d010      	beq.n	8017a50 <SX1276OnDio0Irq+0x1e8>
 8017a2e:	4b60      	ldr	r3, [pc, #384]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	689b      	ldr	r3, [r3, #8]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d00b      	beq.n	8017a50 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8017a38:	4b5d      	ldr	r3, [pc, #372]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	689c      	ldr	r4, [r3, #8]
 8017a3e:	4b59      	ldr	r3, [pc, #356]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017a40:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8017a42:	4b58      	ldr	r3, [pc, #352]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017a44:	2232      	movs	r2, #50	; 0x32
 8017a46:	569b      	ldrsb	r3, [r3, r2]
 8017a48:	b21a      	sxth	r2, r3
 8017a4a:	485b      	ldr	r0, [pc, #364]	; (8017bb8 <SX1276OnDio0Irq+0x350>)
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8017a50:	4b54      	ldr	r3, [pc, #336]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017a52:	2230      	movs	r2, #48	; 0x30
 8017a54:	2100      	movs	r1, #0
 8017a56:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8017a58:	4b52      	ldr	r3, [pc, #328]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017a5a:	2231      	movs	r2, #49	; 0x31
 8017a5c:	2100      	movs	r1, #0
 8017a5e:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8017a60:	4b50      	ldr	r3, [pc, #320]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017a62:	2200      	movs	r2, #0
 8017a64:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8017a66:	4b4f      	ldr	r3, [pc, #316]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017a68:	2200      	movs	r2, #0
 8017a6a:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8017a6c:	e0fd      	b.n	8017c6a <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8017a6e:	2140      	movs	r1, #64	; 0x40
 8017a70:	2012      	movs	r0, #18
 8017a72:	f7ff fcf9 	bl	8017468 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8017a76:	2012      	movs	r0, #18
 8017a78:	f7ff fd0a 	bl	8017490 <SX1276Read>
 8017a7c:	0003      	movs	r3, r0
 8017a7e:	001a      	movs	r2, r3
 8017a80:	210d      	movs	r1, #13
 8017a82:	187b      	adds	r3, r7, r1
 8017a84:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8017a86:	187b      	adds	r3, r7, r1
 8017a88:	781b      	ldrb	r3, [r3, #0]
 8017a8a:	b2db      	uxtb	r3, r3
 8017a8c:	001a      	movs	r2, r3
 8017a8e:	2320      	movs	r3, #32
 8017a90:	4013      	ands	r3, r2
 8017a92:	2b20      	cmp	r3, #32
 8017a94:	d122      	bne.n	8017adc <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8017a96:	2120      	movs	r1, #32
 8017a98:	2012      	movs	r0, #18
 8017a9a:	f7ff fce5 	bl	8017468 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8017a9e:	4b41      	ldr	r3, [pc, #260]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017aa0:	2256      	movs	r2, #86	; 0x56
 8017aa2:	5c9b      	ldrb	r3, [r3, r2]
 8017aa4:	2201      	movs	r2, #1
 8017aa6:	4053      	eors	r3, r2
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d002      	beq.n	8017ab4 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 8017aae:	4b3d      	ldr	r3, [pc, #244]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 8017ab4:	4b3c      	ldr	r3, [pc, #240]	; (8017ba8 <SX1276OnDio0Irq+0x340>)
 8017ab6:	0018      	movs	r0, r3
 8017ab8:	f7fd fc46 	bl	8015348 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8017abc:	4b3c      	ldr	r3, [pc, #240]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d100      	bne.n	8017ac6 <SX1276OnDio0Irq+0x25e>
 8017ac4:	e0ce      	b.n	8017c64 <SX1276OnDio0Irq+0x3fc>
 8017ac6:	4b3a      	ldr	r3, [pc, #232]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	691b      	ldr	r3, [r3, #16]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d100      	bne.n	8017ad2 <SX1276OnDio0Irq+0x26a>
 8017ad0:	e0c8      	b.n	8017c64 <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 8017ad2:	4b37      	ldr	r3, [pc, #220]	; (8017bb0 <SX1276OnDio0Irq+0x348>)
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	691b      	ldr	r3, [r3, #16]
 8017ad8:	4798      	blx	r3
                        break;
 8017ada:	e0c3      	b.n	8017c64 <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8017adc:	2019      	movs	r0, #25
 8017ade:	f7ff fcd7 	bl	8017490 <SX1276Read>
 8017ae2:	0003      	movs	r3, r0
 8017ae4:	b25b      	sxtb	r3, r3
 8017ae6:	3302      	adds	r3, #2
 8017ae8:	109b      	asrs	r3, r3, #2
 8017aea:	b259      	sxtb	r1, r3
 8017aec:	4b2d      	ldr	r3, [pc, #180]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017aee:	2260      	movs	r2, #96	; 0x60
 8017af0:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8017af2:	201a      	movs	r0, #26
 8017af4:	f7ff fccc 	bl	8017490 <SX1276Read>
 8017af8:	0003      	movs	r3, r0
 8017afa:	001a      	movs	r2, r3
 8017afc:	230e      	movs	r3, #14
 8017afe:	18fb      	adds	r3, r7, r3
 8017b00:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8017b02:	4b28      	ldr	r3, [pc, #160]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017b04:	2260      	movs	r2, #96	; 0x60
 8017b06:	569b      	ldrsb	r3, [r3, r2]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	da34      	bge.n	8017b76 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8017b0c:	4b25      	ldr	r3, [pc, #148]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017b0e:	689b      	ldr	r3, [r3, #8]
 8017b10:	4a2a      	ldr	r2, [pc, #168]	; (8017bbc <SX1276OnDio0Irq+0x354>)
 8017b12:	4293      	cmp	r3, r2
 8017b14:	d917      	bls.n	8017b46 <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8017b16:	210e      	movs	r1, #14
 8017b18:	187b      	adds	r3, r7, r1
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	5e9b      	ldrsh	r3, [r3, r2]
 8017b1e:	111b      	asrs	r3, r3, #4
 8017b20:	b21b      	sxth	r3, r3
 8017b22:	b29a      	uxth	r2, r3
 8017b24:	187b      	adds	r3, r7, r1
 8017b26:	881b      	ldrh	r3, [r3, #0]
 8017b28:	18d3      	adds	r3, r2, r3
 8017b2a:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8017b2c:	4b1d      	ldr	r3, [pc, #116]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017b2e:	2160      	movs	r1, #96	; 0x60
 8017b30:	565b      	ldrsb	r3, [r3, r1]
 8017b32:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8017b34:	18d3      	adds	r3, r2, r3
 8017b36:	b29b      	uxth	r3, r3
 8017b38:	3b9d      	subs	r3, #157	; 0x9d
 8017b3a:	b29b      	uxth	r3, r3
 8017b3c:	b219      	sxth	r1, r3
 8017b3e:	4b19      	ldr	r3, [pc, #100]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017b40:	2262      	movs	r2, #98	; 0x62
 8017b42:	5299      	strh	r1, [r3, r2]
 8017b44:	e04d      	b.n	8017be2 <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8017b46:	210e      	movs	r1, #14
 8017b48:	187b      	adds	r3, r7, r1
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	5e9b      	ldrsh	r3, [r3, r2]
 8017b4e:	111b      	asrs	r3, r3, #4
 8017b50:	b21b      	sxth	r3, r3
 8017b52:	b29a      	uxth	r2, r3
 8017b54:	187b      	adds	r3, r7, r1
 8017b56:	881b      	ldrh	r3, [r3, #0]
 8017b58:	18d3      	adds	r3, r2, r3
 8017b5a:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8017b5c:	4b11      	ldr	r3, [pc, #68]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017b5e:	2160      	movs	r1, #96	; 0x60
 8017b60:	565b      	ldrsb	r3, [r3, r1]
 8017b62:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8017b64:	18d3      	adds	r3, r2, r3
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	3ba4      	subs	r3, #164	; 0xa4
 8017b6a:	b29b      	uxth	r3, r3
 8017b6c:	b219      	sxth	r1, r3
 8017b6e:	4b0d      	ldr	r3, [pc, #52]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017b70:	2262      	movs	r2, #98	; 0x62
 8017b72:	5299      	strh	r1, [r3, r2]
 8017b74:	e035      	b.n	8017be2 <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8017b76:	4b0b      	ldr	r3, [pc, #44]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017b78:	689b      	ldr	r3, [r3, #8]
 8017b7a:	4a10      	ldr	r2, [pc, #64]	; (8017bbc <SX1276OnDio0Irq+0x354>)
 8017b7c:	4293      	cmp	r3, r2
 8017b7e:	d91f      	bls.n	8017bc0 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8017b80:	210e      	movs	r1, #14
 8017b82:	187b      	adds	r3, r7, r1
 8017b84:	2200      	movs	r2, #0
 8017b86:	5e9b      	ldrsh	r3, [r3, r2]
 8017b88:	111b      	asrs	r3, r3, #4
 8017b8a:	b21b      	sxth	r3, r3
 8017b8c:	b29a      	uxth	r2, r3
 8017b8e:	187b      	adds	r3, r7, r1
 8017b90:	881b      	ldrh	r3, [r3, #0]
 8017b92:	18d3      	adds	r3, r2, r3
 8017b94:	b29b      	uxth	r3, r3
 8017b96:	3b9d      	subs	r3, #157	; 0x9d
 8017b98:	b29b      	uxth	r3, r3
 8017b9a:	b219      	sxth	r1, r3
 8017b9c:	4b01      	ldr	r3, [pc, #4]	; (8017ba4 <SX1276OnDio0Irq+0x33c>)
 8017b9e:	2262      	movs	r2, #98	; 0x62
 8017ba0:	5299      	strh	r1, [r3, r2]
 8017ba2:	e01e      	b.n	8017be2 <SX1276OnDio0Irq+0x37a>
 8017ba4:	200014a4 	.word	0x200014a4
 8017ba8:	2000150c 	.word	0x2000150c
 8017bac:	2000148c 	.word	0x2000148c
 8017bb0:	20000f2c 	.word	0x20000f2c
 8017bb4:	200014de 	.word	0x200014de
 8017bb8:	20000f30 	.word	0x20000f30
 8017bbc:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8017bc0:	210e      	movs	r1, #14
 8017bc2:	187b      	adds	r3, r7, r1
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	5e9b      	ldrsh	r3, [r3, r2]
 8017bc8:	111b      	asrs	r3, r3, #4
 8017bca:	b21b      	sxth	r3, r3
 8017bcc:	b29a      	uxth	r2, r3
 8017bce:	187b      	adds	r3, r7, r1
 8017bd0:	881b      	ldrh	r3, [r3, #0]
 8017bd2:	18d3      	adds	r3, r2, r3
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	3ba4      	subs	r3, #164	; 0xa4
 8017bd8:	b29b      	uxth	r3, r3
 8017bda:	b219      	sxth	r1, r3
 8017bdc:	4b34      	ldr	r3, [pc, #208]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017bde:	2262      	movs	r2, #98	; 0x62
 8017be0:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8017be2:	2013      	movs	r0, #19
 8017be4:	f7ff fc54 	bl	8017490 <SX1276Read>
 8017be8:	0003      	movs	r3, r0
 8017bea:	0019      	movs	r1, r3
 8017bec:	4b30      	ldr	r3, [pc, #192]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017bee:	2264      	movs	r2, #100	; 0x64
 8017bf0:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8017bf2:	2010      	movs	r0, #16
 8017bf4:	f7ff fc4c 	bl	8017490 <SX1276Read>
 8017bf8:	0003      	movs	r3, r0
 8017bfa:	0019      	movs	r1, r3
 8017bfc:	200d      	movs	r0, #13
 8017bfe:	f7ff fc33 	bl	8017468 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8017c02:	4b2b      	ldr	r3, [pc, #172]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017c04:	2264      	movs	r2, #100	; 0x64
 8017c06:	5c9a      	ldrb	r2, [r3, r2]
 8017c08:	4b2a      	ldr	r3, [pc, #168]	; (8017cb4 <SX1276OnDio0Irq+0x44c>)
 8017c0a:	0011      	movs	r1, r2
 8017c0c:	0018      	movs	r0, r3
 8017c0e:	f7ff fd07 	bl	8017620 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8017c12:	4b27      	ldr	r3, [pc, #156]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017c14:	2256      	movs	r2, #86	; 0x56
 8017c16:	5c9b      	ldrb	r3, [r3, r2]
 8017c18:	2201      	movs	r2, #1
 8017c1a:	4053      	eors	r3, r2
 8017c1c:	b2db      	uxtb	r3, r3
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d002      	beq.n	8017c28 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 8017c22:	4b23      	ldr	r3, [pc, #140]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017c24:	2200      	movs	r2, #0
 8017c26:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 8017c28:	4b23      	ldr	r3, [pc, #140]	; (8017cb8 <SX1276OnDio0Irq+0x450>)
 8017c2a:	0018      	movs	r0, r3
 8017c2c:	f7fd fb8c 	bl	8015348 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017c30:	4b22      	ldr	r3, [pc, #136]	; (8017cbc <SX1276OnDio0Irq+0x454>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d017      	beq.n	8017c68 <SX1276OnDio0Irq+0x400>
 8017c38:	4b20      	ldr	r3, [pc, #128]	; (8017cbc <SX1276OnDio0Irq+0x454>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	689b      	ldr	r3, [r3, #8]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d012      	beq.n	8017c68 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8017c42:	4b1e      	ldr	r3, [pc, #120]	; (8017cbc <SX1276OnDio0Irq+0x454>)
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	689c      	ldr	r4, [r3, #8]
 8017c48:	4b19      	ldr	r3, [pc, #100]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017c4a:	2264      	movs	r2, #100	; 0x64
 8017c4c:	5c9b      	ldrb	r3, [r3, r2]
 8017c4e:	b299      	uxth	r1, r3
 8017c50:	4b17      	ldr	r3, [pc, #92]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017c52:	2262      	movs	r2, #98	; 0x62
 8017c54:	5e9d      	ldrsh	r5, [r3, r2]
 8017c56:	4b16      	ldr	r3, [pc, #88]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017c58:	2260      	movs	r2, #96	; 0x60
 8017c5a:	569b      	ldrsb	r3, [r3, r2]
 8017c5c:	4815      	ldr	r0, [pc, #84]	; (8017cb4 <SX1276OnDio0Irq+0x44c>)
 8017c5e:	002a      	movs	r2, r5
 8017c60:	47a0      	blx	r4
                break;
 8017c62:	e001      	b.n	8017c68 <SX1276OnDio0Irq+0x400>
                        break;
 8017c64:	46c0      	nop			; (mov r8, r8)
 8017c66:	e01f      	b.n	8017ca8 <SX1276OnDio0Irq+0x440>
                break;
 8017c68:	46c0      	nop			; (mov r8, r8)
            break;
 8017c6a:	e01d      	b.n	8017ca8 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 8017c6c:	4b14      	ldr	r3, [pc, #80]	; (8017cc0 <SX1276OnDio0Irq+0x458>)
 8017c6e:	0018      	movs	r0, r3
 8017c70:	f7fd fb6a 	bl	8015348 <TimerStop>
            switch( SX1276.Settings.Modem )
 8017c74:	4b0e      	ldr	r3, [pc, #56]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017c76:	795b      	ldrb	r3, [r3, #5]
 8017c78:	2b01      	cmp	r3, #1
 8017c7a:	d103      	bne.n	8017c84 <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8017c7c:	2108      	movs	r1, #8
 8017c7e:	2012      	movs	r0, #18
 8017c80:	f7ff fbf2 	bl	8017468 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8017c84:	4b0a      	ldr	r3, [pc, #40]	; (8017cb0 <SX1276OnDio0Irq+0x448>)
 8017c86:	2200      	movs	r2, #0
 8017c88:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017c8a:	4b0c      	ldr	r3, [pc, #48]	; (8017cbc <SX1276OnDio0Irq+0x454>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d008      	beq.n	8017ca4 <SX1276OnDio0Irq+0x43c>
 8017c92:	4b0a      	ldr	r3, [pc, #40]	; (8017cbc <SX1276OnDio0Irq+0x454>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d003      	beq.n	8017ca4 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 8017c9c:	4b07      	ldr	r3, [pc, #28]	; (8017cbc <SX1276OnDio0Irq+0x454>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	4798      	blx	r3
                break;
 8017ca4:	46c0      	nop			; (mov r8, r8)
            break;
 8017ca6:	46c0      	nop			; (mov r8, r8)
    }
}
 8017ca8:	46c0      	nop			; (mov r8, r8)
 8017caa:	46bd      	mov	sp, r7
 8017cac:	b004      	add	sp, #16
 8017cae:	bdb0      	pop	{r4, r5, r7, pc}
 8017cb0:	200014a4 	.word	0x200014a4
 8017cb4:	20000f30 	.word	0x20000f30
 8017cb8:	2000150c 	.word	0x2000150c
 8017cbc:	20000f2c 	.word	0x20000f2c
 8017cc0:	20001474 	.word	0x20001474

08017cc4 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b082      	sub	sp, #8
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio1Irq\r\n"));

    switch( SX1276.Settings.State )
 8017ccc:	4b61      	ldr	r3, [pc, #388]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017cce:	791b      	ldrb	r3, [r3, #4]
 8017cd0:	2b01      	cmp	r3, #1
 8017cd2:	d003      	beq.n	8017cdc <SX1276OnDio1Irq+0x18>
 8017cd4:	2b02      	cmp	r3, #2
 8017cd6:	d100      	bne.n	8017cda <SX1276OnDio1Irq+0x16>
 8017cd8:	e078      	b.n	8017dcc <SX1276OnDio1Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 8017cda:	e0b6      	b.n	8017e4a <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8017cdc:	4b5d      	ldr	r3, [pc, #372]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017cde:	795b      	ldrb	r3, [r3, #5]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d002      	beq.n	8017cea <SX1276OnDio1Irq+0x26>
 8017ce4:	2b01      	cmp	r3, #1
 8017ce6:	d057      	beq.n	8017d98 <SX1276OnDio1Irq+0xd4>
                break;
 8017ce8:	e06f      	b.n	8017dca <SX1276OnDio1Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8017cea:	4b5a      	ldr	r3, [pc, #360]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017cec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d118      	bne.n	8017d24 <SX1276OnDio1Irq+0x60>
 8017cf2:	4b58      	ldr	r3, [pc, #352]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017cf4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d114      	bne.n	8017d24 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8017cfa:	4b56      	ldr	r3, [pc, #344]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017cfc:	2222      	movs	r2, #34	; 0x22
 8017cfe:	5c9b      	ldrb	r3, [r3, r2]
 8017d00:	2201      	movs	r2, #1
 8017d02:	4053      	eors	r3, r2
 8017d04:	b2db      	uxtb	r3, r3
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d005      	beq.n	8017d16 <SX1276OnDio1Irq+0x52>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8017d0a:	4b53      	ldr	r3, [pc, #332]	; (8017e58 <SX1276OnDio1Irq+0x194>)
 8017d0c:	2101      	movs	r1, #1
 8017d0e:	0018      	movs	r0, r3
 8017d10:	f7ff fc86 	bl	8017620 <SX1276ReadFifo>
 8017d14:	e006      	b.n	8017d24 <SX1276OnDio1Irq+0x60>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8017d16:	2032      	movs	r0, #50	; 0x32
 8017d18:	f7ff fbba 	bl	8017490 <SX1276Read>
 8017d1c:	0003      	movs	r3, r0
 8017d1e:	b29a      	uxth	r2, r3
 8017d20:	4b4c      	ldr	r3, [pc, #304]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d22:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8017d24:	4b4b      	ldr	r3, [pc, #300]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d26:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017d28:	001a      	movs	r2, r3
 8017d2a:	4b4a      	ldr	r3, [pc, #296]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d2c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017d2e:	1ad3      	subs	r3, r2, r3
 8017d30:	4a48      	ldr	r2, [pc, #288]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d32:	213e      	movs	r1, #62	; 0x3e
 8017d34:	5c52      	ldrb	r2, [r2, r1]
 8017d36:	4293      	cmp	r3, r2
 8017d38:	db19      	blt.n	8017d6e <SX1276OnDio1Irq+0xaa>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8017d3a:	4b46      	ldr	r3, [pc, #280]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d3c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017d3e:	001a      	movs	r2, r3
 8017d40:	4b46      	ldr	r3, [pc, #280]	; (8017e5c <SX1276OnDio1Irq+0x198>)
 8017d42:	18d0      	adds	r0, r2, r3
 8017d44:	4b43      	ldr	r3, [pc, #268]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d46:	223e      	movs	r2, #62	; 0x3e
 8017d48:	5c9b      	ldrb	r3, [r3, r2]
 8017d4a:	3b01      	subs	r3, #1
 8017d4c:	b2db      	uxtb	r3, r3
 8017d4e:	0019      	movs	r1, r3
 8017d50:	f7ff fc66 	bl	8017620 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8017d54:	4b3f      	ldr	r3, [pc, #252]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d56:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8017d58:	4b3e      	ldr	r3, [pc, #248]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d5a:	213e      	movs	r1, #62	; 0x3e
 8017d5c:	5c5b      	ldrb	r3, [r3, r1]
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	18d3      	adds	r3, r2, r3
 8017d62:	b29b      	uxth	r3, r3
 8017d64:	3b01      	subs	r3, #1
 8017d66:	b29a      	uxth	r2, r3
 8017d68:	4b3a      	ldr	r3, [pc, #232]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d6a:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8017d6c:	e02d      	b.n	8017dca <SX1276OnDio1Irq+0x106>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017d6e:	4b39      	ldr	r3, [pc, #228]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d70:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017d72:	001a      	movs	r2, r3
 8017d74:	4b39      	ldr	r3, [pc, #228]	; (8017e5c <SX1276OnDio1Irq+0x198>)
 8017d76:	18d0      	adds	r0, r2, r3
 8017d78:	4b36      	ldr	r3, [pc, #216]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d7a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017d7c:	b2da      	uxtb	r2, r3
 8017d7e:	4b35      	ldr	r3, [pc, #212]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017d82:	b2db      	uxtb	r3, r3
 8017d84:	1ad3      	subs	r3, r2, r3
 8017d86:	b2db      	uxtb	r3, r3
 8017d88:	0019      	movs	r1, r3
 8017d8a:	f7ff fc49 	bl	8017620 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017d8e:	4b31      	ldr	r3, [pc, #196]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d90:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017d92:	4b30      	ldr	r3, [pc, #192]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017d94:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8017d96:	e018      	b.n	8017dca <SX1276OnDio1Irq+0x106>
                TimerStop( &RxTimeoutTimer );
 8017d98:	4b31      	ldr	r3, [pc, #196]	; (8017e60 <SX1276OnDio1Irq+0x19c>)
 8017d9a:	0018      	movs	r0, r3
 8017d9c:	f7fd fad4 	bl	8015348 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8017da0:	2180      	movs	r1, #128	; 0x80
 8017da2:	2012      	movs	r0, #18
 8017da4:	f7ff fb60 	bl	8017468 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8017da8:	4b2a      	ldr	r3, [pc, #168]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017daa:	2200      	movs	r2, #0
 8017dac:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017dae:	4b2d      	ldr	r3, [pc, #180]	; (8017e64 <SX1276OnDio1Irq+0x1a0>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d008      	beq.n	8017dc8 <SX1276OnDio1Irq+0x104>
 8017db6:	4b2b      	ldr	r3, [pc, #172]	; (8017e64 <SX1276OnDio1Irq+0x1a0>)
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	68db      	ldr	r3, [r3, #12]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d003      	beq.n	8017dc8 <SX1276OnDio1Irq+0x104>
                    RadioEvents->RxTimeout( );
 8017dc0:	4b28      	ldr	r3, [pc, #160]	; (8017e64 <SX1276OnDio1Irq+0x1a0>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	68db      	ldr	r3, [r3, #12]
 8017dc6:	4798      	blx	r3
                break;
 8017dc8:	46c0      	nop			; (mov r8, r8)
            break;
 8017dca:	e03e      	b.n	8017e4a <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 8017dcc:	4b21      	ldr	r3, [pc, #132]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017dce:	795b      	ldrb	r3, [r3, #5]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d002      	beq.n	8017dda <SX1276OnDio1Irq+0x116>
 8017dd4:	2b01      	cmp	r3, #1
 8017dd6:	d036      	beq.n	8017e46 <SX1276OnDio1Irq+0x182>
                break;
 8017dd8:	e036      	b.n	8017e48 <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8017dda:	4b1e      	ldr	r3, [pc, #120]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017ddc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017dde:	001a      	movs	r2, r3
 8017de0:	4b1c      	ldr	r3, [pc, #112]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017de2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017de4:	1ad3      	subs	r3, r2, r3
 8017de6:	4a1b      	ldr	r2, [pc, #108]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017de8:	213f      	movs	r1, #63	; 0x3f
 8017dea:	5c52      	ldrb	r2, [r2, r1]
 8017dec:	4293      	cmp	r3, r2
 8017dee:	dd15      	ble.n	8017e1c <SX1276OnDio1Irq+0x158>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8017df0:	4b18      	ldr	r3, [pc, #96]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017df2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017df4:	001a      	movs	r2, r3
 8017df6:	4b19      	ldr	r3, [pc, #100]	; (8017e5c <SX1276OnDio1Irq+0x198>)
 8017df8:	18d0      	adds	r0, r2, r3
 8017dfa:	4b16      	ldr	r3, [pc, #88]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017dfc:	223f      	movs	r2, #63	; 0x3f
 8017dfe:	5c9b      	ldrb	r3, [r3, r2]
 8017e00:	0019      	movs	r1, r3
 8017e02:	f7ff fbfb 	bl	80175fc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8017e06:	4b13      	ldr	r3, [pc, #76]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017e08:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8017e0a:	4b12      	ldr	r3, [pc, #72]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017e0c:	213f      	movs	r1, #63	; 0x3f
 8017e0e:	5c5b      	ldrb	r3, [r3, r1]
 8017e10:	b29b      	uxth	r3, r3
 8017e12:	18d3      	adds	r3, r2, r3
 8017e14:	b29a      	uxth	r2, r3
 8017e16:	4b0f      	ldr	r3, [pc, #60]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017e18:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8017e1a:	e015      	b.n	8017e48 <SX1276OnDio1Irq+0x184>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8017e1c:	4b0d      	ldr	r3, [pc, #52]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017e1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017e20:	001a      	movs	r2, r3
 8017e22:	4b0e      	ldr	r3, [pc, #56]	; (8017e5c <SX1276OnDio1Irq+0x198>)
 8017e24:	18d0      	adds	r0, r2, r3
 8017e26:	4b0b      	ldr	r3, [pc, #44]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017e28:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8017e2a:	b2da      	uxtb	r2, r3
 8017e2c:	4b09      	ldr	r3, [pc, #36]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017e2e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8017e30:	b2db      	uxtb	r3, r3
 8017e32:	1ad3      	subs	r3, r2, r3
 8017e34:	b2db      	uxtb	r3, r3
 8017e36:	0019      	movs	r1, r3
 8017e38:	f7ff fbe0 	bl	80175fc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8017e3c:	4b05      	ldr	r3, [pc, #20]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017e3e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8017e40:	4b04      	ldr	r3, [pc, #16]	; (8017e54 <SX1276OnDio1Irq+0x190>)
 8017e42:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8017e44:	e000      	b.n	8017e48 <SX1276OnDio1Irq+0x184>
                break;
 8017e46:	46c0      	nop			; (mov r8, r8)
            break;
 8017e48:	46c0      	nop			; (mov r8, r8)
    }
}
 8017e4a:	46c0      	nop			; (mov r8, r8)
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	b002      	add	sp, #8
 8017e50:	bd80      	pop	{r7, pc}
 8017e52:	46c0      	nop			; (mov r8, r8)
 8017e54:	200014a4 	.word	0x200014a4
 8017e58:	200014de 	.word	0x200014de
 8017e5c:	20000f30 	.word	0x20000f30
 8017e60:	2000150c 	.word	0x2000150c
 8017e64:	20000f2c 	.word	0x20000f2c

08017e68 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 8017e68:	b590      	push	{r4, r7, lr}
 8017e6a:	b087      	sub	sp, #28
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio2Irq\r\n"));

    uint32_t afcChannel = 0;
 8017e70:	2300      	movs	r3, #0
 8017e72:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 8017e74:	4b5c      	ldr	r3, [pc, #368]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017e76:	791b      	ldrb	r3, [r3, #4]
 8017e78:	2b01      	cmp	r3, #1
 8017e7a:	d003      	beq.n	8017e84 <SX1276OnDio2Irq+0x1c>
 8017e7c:	2b02      	cmp	r3, #2
 8017e7e:	d100      	bne.n	8017e82 <SX1276OnDio2Irq+0x1a>
 8017e80:	e083      	b.n	8017f8a <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 8017e82:	e0ad      	b.n	8017fe0 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8017e84:	4b58      	ldr	r3, [pc, #352]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017e86:	795b      	ldrb	r3, [r3, #5]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d002      	beq.n	8017e92 <SX1276OnDio2Irq+0x2a>
 8017e8c:	2b01      	cmp	r3, #1
 8017e8e:	d058      	beq.n	8017f42 <SX1276OnDio2Irq+0xda>
                break;
 8017e90:	e07a      	b.n	8017f88 <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8017e92:	4b55      	ldr	r3, [pc, #340]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017e94:	2230      	movs	r2, #48	; 0x30
 8017e96:	2101      	movs	r1, #1
 8017e98:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8017e9a:	4b53      	ldr	r3, [pc, #332]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017e9c:	2230      	movs	r2, #48	; 0x30
 8017e9e:	5c9b      	ldrb	r3, [r3, r2]
 8017ea0:	2b01      	cmp	r3, #1
 8017ea2:	d16e      	bne.n	8017f82 <SX1276OnDio2Irq+0x11a>
 8017ea4:	4b50      	ldr	r3, [pc, #320]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017ea6:	2231      	movs	r2, #49	; 0x31
 8017ea8:	5c9b      	ldrb	r3, [r3, r2]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d169      	bne.n	8017f82 <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8017eae:	4b4f      	ldr	r3, [pc, #316]	; (8017fec <SX1276OnDio2Irq+0x184>)
 8017eb0:	0018      	movs	r0, r3
 8017eb2:	f7fd fa49 	bl	8015348 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8017eb6:	4b4c      	ldr	r3, [pc, #304]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017eb8:	2231      	movs	r2, #49	; 0x31
 8017eba:	2101      	movs	r1, #1
 8017ebc:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8017ebe:	2011      	movs	r0, #17
 8017ec0:	f7ff fae6 	bl	8017490 <SX1276Read>
 8017ec4:	0003      	movs	r3, r0
 8017ec6:	085b      	lsrs	r3, r3, #1
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	425b      	negs	r3, r3
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	b259      	sxtb	r1, r3
 8017ed0:	4b45      	ldr	r3, [pc, #276]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017ed2:	2232      	movs	r2, #50	; 0x32
 8017ed4:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8017ed6:	201b      	movs	r0, #27
 8017ed8:	f7ff fada 	bl	8017490 <SX1276Read>
 8017edc:	0003      	movs	r3, r0
 8017ede:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8017ee0:	201c      	movs	r0, #28
 8017ee2:	f7ff fad5 	bl	8017490 <SX1276Read>
 8017ee6:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8017ee8:	4323      	orrs	r3, r4
 8017eea:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	0a1b      	lsrs	r3, r3, #8
 8017ef0:	613b      	str	r3, [r7, #16]
 8017ef2:	693b      	ldr	r3, [r7, #16]
 8017ef4:	021b      	lsls	r3, r3, #8
 8017ef6:	697a      	ldr	r2, [r7, #20]
 8017ef8:	1ad3      	subs	r3, r2, r3
 8017efa:	60fb      	str	r3, [r7, #12]
 8017efc:	6939      	ldr	r1, [r7, #16]
 8017efe:	000b      	movs	r3, r1
 8017f00:	015b      	lsls	r3, r3, #5
 8017f02:	1a5b      	subs	r3, r3, r1
 8017f04:	019a      	lsls	r2, r3, #6
 8017f06:	1ad2      	subs	r2, r2, r3
 8017f08:	00d2      	lsls	r2, r2, #3
 8017f0a:	1850      	adds	r0, r2, r1
 8017f0c:	68f9      	ldr	r1, [r7, #12]
 8017f0e:	000b      	movs	r3, r1
 8017f10:	015b      	lsls	r3, r3, #5
 8017f12:	1a5b      	subs	r3, r3, r1
 8017f14:	019a      	lsls	r2, r3, #6
 8017f16:	1ad2      	subs	r2, r2, r3
 8017f18:	00d2      	lsls	r2, r2, #3
 8017f1a:	1853      	adds	r3, r2, r1
 8017f1c:	3380      	adds	r3, #128	; 0x80
 8017f1e:	0a1b      	lsrs	r3, r3, #8
 8017f20:	18c3      	adds	r3, r0, r3
 8017f22:	001a      	movs	r2, r3
 8017f24:	4b30      	ldr	r3, [pc, #192]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017f26:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8017f28:	200c      	movs	r0, #12
 8017f2a:	f7ff fab1 	bl	8017490 <SX1276Read>
 8017f2e:	0003      	movs	r3, r0
 8017f30:	095b      	lsrs	r3, r3, #5
 8017f32:	b2db      	uxtb	r3, r3
 8017f34:	2207      	movs	r2, #7
 8017f36:	4013      	ands	r3, r2
 8017f38:	b2d9      	uxtb	r1, r3
 8017f3a:	4b2b      	ldr	r3, [pc, #172]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017f3c:	2238      	movs	r2, #56	; 0x38
 8017f3e:	5499      	strb	r1, [r3, r2]
                break;
 8017f40:	e01f      	b.n	8017f82 <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8017f42:	4b29      	ldr	r3, [pc, #164]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017f44:	2253      	movs	r2, #83	; 0x53
 8017f46:	5c9b      	ldrb	r3, [r3, r2]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d01c      	beq.n	8017f86 <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8017f4c:	2102      	movs	r1, #2
 8017f4e:	2012      	movs	r0, #18
 8017f50:	f7ff fa8a 	bl	8017468 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8017f54:	4b26      	ldr	r3, [pc, #152]	; (8017ff0 <SX1276OnDio2Irq+0x188>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d014      	beq.n	8017f86 <SX1276OnDio2Irq+0x11e>
 8017f5c:	4b24      	ldr	r3, [pc, #144]	; (8017ff0 <SX1276OnDio2Irq+0x188>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	695b      	ldr	r3, [r3, #20]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d00f      	beq.n	8017f86 <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8017f66:	4b22      	ldr	r3, [pc, #136]	; (8017ff0 <SX1276OnDio2Irq+0x188>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	695c      	ldr	r4, [r3, #20]
 8017f6c:	201c      	movs	r0, #28
 8017f6e:	f7ff fa8f 	bl	8017490 <SX1276Read>
 8017f72:	0003      	movs	r3, r0
 8017f74:	001a      	movs	r2, r3
 8017f76:	233f      	movs	r3, #63	; 0x3f
 8017f78:	4013      	ands	r3, r2
 8017f7a:	b2db      	uxtb	r3, r3
 8017f7c:	0018      	movs	r0, r3
 8017f7e:	47a0      	blx	r4
                break;
 8017f80:	e001      	b.n	8017f86 <SX1276OnDio2Irq+0x11e>
                break;
 8017f82:	46c0      	nop			; (mov r8, r8)
 8017f84:	e02c      	b.n	8017fe0 <SX1276OnDio2Irq+0x178>
                break;
 8017f86:	46c0      	nop			; (mov r8, r8)
            break;
 8017f88:	e02a      	b.n	8017fe0 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8017f8a:	4b17      	ldr	r3, [pc, #92]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017f8c:	795b      	ldrb	r3, [r3, #5]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d022      	beq.n	8017fd8 <SX1276OnDio2Irq+0x170>
 8017f92:	2b01      	cmp	r3, #1
 8017f94:	d000      	beq.n	8017f98 <SX1276OnDio2Irq+0x130>
                break;
 8017f96:	e022      	b.n	8017fde <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8017f98:	4b13      	ldr	r3, [pc, #76]	; (8017fe8 <SX1276OnDio2Irq+0x180>)
 8017f9a:	2253      	movs	r2, #83	; 0x53
 8017f9c:	5c9b      	ldrb	r3, [r3, r2]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d01c      	beq.n	8017fdc <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8017fa2:	2102      	movs	r1, #2
 8017fa4:	2012      	movs	r0, #18
 8017fa6:	f7ff fa5f 	bl	8017468 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8017faa:	4b11      	ldr	r3, [pc, #68]	; (8017ff0 <SX1276OnDio2Irq+0x188>)
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d014      	beq.n	8017fdc <SX1276OnDio2Irq+0x174>
 8017fb2:	4b0f      	ldr	r3, [pc, #60]	; (8017ff0 <SX1276OnDio2Irq+0x188>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	695b      	ldr	r3, [r3, #20]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d00f      	beq.n	8017fdc <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8017fbc:	4b0c      	ldr	r3, [pc, #48]	; (8017ff0 <SX1276OnDio2Irq+0x188>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	695c      	ldr	r4, [r3, #20]
 8017fc2:	201c      	movs	r0, #28
 8017fc4:	f7ff fa64 	bl	8017490 <SX1276Read>
 8017fc8:	0003      	movs	r3, r0
 8017fca:	001a      	movs	r2, r3
 8017fcc:	233f      	movs	r3, #63	; 0x3f
 8017fce:	4013      	ands	r3, r2
 8017fd0:	b2db      	uxtb	r3, r3
 8017fd2:	0018      	movs	r0, r3
 8017fd4:	47a0      	blx	r4
                break;
 8017fd6:	e001      	b.n	8017fdc <SX1276OnDio2Irq+0x174>
                break;
 8017fd8:	46c0      	nop			; (mov r8, r8)
 8017fda:	e000      	b.n	8017fde <SX1276OnDio2Irq+0x176>
                break;
 8017fdc:	46c0      	nop			; (mov r8, r8)
            break;
 8017fde:	46c0      	nop			; (mov r8, r8)
    }
}
 8017fe0:	46c0      	nop			; (mov r8, r8)
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	b007      	add	sp, #28
 8017fe6:	bd90      	pop	{r4, r7, pc}
 8017fe8:	200014a4 	.word	0x200014a4
 8017fec:	2000148c 	.word	0x2000148c
 8017ff0:	20000f2c 	.word	0x20000f2c

08017ff4 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b082      	sub	sp, #8
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio3Irq\r\n"));

    switch( SX1276.Settings.Modem )
 8017ffc:	4b1e      	ldr	r3, [pc, #120]	; (8018078 <SX1276OnDio3Irq+0x84>)
 8017ffe:	795b      	ldrb	r3, [r3, #5]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d031      	beq.n	8018068 <SX1276OnDio3Irq+0x74>
 8018004:	2b01      	cmp	r3, #1
 8018006:	d000      	beq.n	801800a <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8018008:	e031      	b.n	801806e <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801800a:	2012      	movs	r0, #18
 801800c:	f7ff fa40 	bl	8017490 <SX1276Read>
 8018010:	0003      	movs	r3, r0
 8018012:	001a      	movs	r2, r3
 8018014:	2301      	movs	r3, #1
 8018016:	4013      	ands	r3, r2
 8018018:	2b01      	cmp	r3, #1
 801801a:	d112      	bne.n	8018042 <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801801c:	2105      	movs	r1, #5
 801801e:	2012      	movs	r0, #18
 8018020:	f7ff fa22 	bl	8017468 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018024:	4b15      	ldr	r3, [pc, #84]	; (801807c <SX1276OnDio3Irq+0x88>)
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d01f      	beq.n	801806c <SX1276OnDio3Irq+0x78>
 801802c:	4b13      	ldr	r3, [pc, #76]	; (801807c <SX1276OnDio3Irq+0x88>)
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	699b      	ldr	r3, [r3, #24]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d01a      	beq.n	801806c <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8018036:	4b11      	ldr	r3, [pc, #68]	; (801807c <SX1276OnDio3Irq+0x88>)
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	699b      	ldr	r3, [r3, #24]
 801803c:	2001      	movs	r0, #1
 801803e:	4798      	blx	r3
        break;
 8018040:	e014      	b.n	801806c <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8018042:	2104      	movs	r1, #4
 8018044:	2012      	movs	r0, #18
 8018046:	f7ff fa0f 	bl	8017468 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801804a:	4b0c      	ldr	r3, [pc, #48]	; (801807c <SX1276OnDio3Irq+0x88>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d00c      	beq.n	801806c <SX1276OnDio3Irq+0x78>
 8018052:	4b0a      	ldr	r3, [pc, #40]	; (801807c <SX1276OnDio3Irq+0x88>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	699b      	ldr	r3, [r3, #24]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d007      	beq.n	801806c <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 801805c:	4b07      	ldr	r3, [pc, #28]	; (801807c <SX1276OnDio3Irq+0x88>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	699b      	ldr	r3, [r3, #24]
 8018062:	2000      	movs	r0, #0
 8018064:	4798      	blx	r3
        break;
 8018066:	e001      	b.n	801806c <SX1276OnDio3Irq+0x78>
        break;
 8018068:	46c0      	nop			; (mov r8, r8)
 801806a:	e000      	b.n	801806e <SX1276OnDio3Irq+0x7a>
        break;
 801806c:	46c0      	nop			; (mov r8, r8)
    }
}
 801806e:	46c0      	nop			; (mov r8, r8)
 8018070:	46bd      	mov	sp, r7
 8018072:	b002      	add	sp, #8
 8018074:	bd80      	pop	{r7, pc}
 8018076:	46c0      	nop			; (mov r8, r8)
 8018078:	200014a4 	.word	0x200014a4
 801807c:	20000f2c 	.word	0x20000f2c

08018080 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b082      	sub	sp, #8
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio4Irq\r\n"));

    switch( SX1276.Settings.Modem )
 8018088:	4b0b      	ldr	r3, [pc, #44]	; (80180b8 <SX1276OnDio4Irq+0x38>)
 801808a:	795b      	ldrb	r3, [r3, #5]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d002      	beq.n	8018096 <SX1276OnDio4Irq+0x16>
 8018090:	2b01      	cmp	r3, #1
 8018092:	d00a      	beq.n	80180aa <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8018094:	e00c      	b.n	80180b0 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8018096:	4b08      	ldr	r3, [pc, #32]	; (80180b8 <SX1276OnDio4Irq+0x38>)
 8018098:	2230      	movs	r2, #48	; 0x30
 801809a:	5c9b      	ldrb	r3, [r3, r2]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d106      	bne.n	80180ae <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80180a0:	4b05      	ldr	r3, [pc, #20]	; (80180b8 <SX1276OnDio4Irq+0x38>)
 80180a2:	2230      	movs	r2, #48	; 0x30
 80180a4:	2101      	movs	r1, #1
 80180a6:	5499      	strb	r1, [r3, r2]
        break;
 80180a8:	e001      	b.n	80180ae <SX1276OnDio4Irq+0x2e>
        break;
 80180aa:	46c0      	nop			; (mov r8, r8)
 80180ac:	e000      	b.n	80180b0 <SX1276OnDio4Irq+0x30>
        break;
 80180ae:	46c0      	nop			; (mov r8, r8)
    }
}
 80180b0:	46c0      	nop			; (mov r8, r8)
 80180b2:	46bd      	mov	sp, r7
 80180b4:	b002      	add	sp, #8
 80180b6:	bd80      	pop	{r7, pc}
 80180b8:	200014a4 	.word	0x200014a4

080180bc <_itsdk_console_private>:

/**
 * Dafault Operation
 */

static itsdk_console_return_e _itsdk_console_private(char * buffer, uint8_t sz) {
 80180bc:	b5b0      	push	{r4, r5, r7, lr}
 80180be:	b084      	sub	sp, #16
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
 80180c4:	000a      	movs	r2, r1
 80180c6:	1cfb      	adds	r3, r7, #3
 80180c8:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 80180ca:	1cfb      	adds	r3, r7, #3
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d000      	beq.n	80180d4 <_itsdk_console_private+0x18>
 80180d2:	e0d1      	b.n	8018278 <_itsdk_console_private+0x1bc>
		switch ( buffer[0] ) {
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	781b      	ldrb	r3, [r3, #0]
 80180d8:	3b3f      	subs	r3, #63	; 0x3f
 80180da:	2b35      	cmp	r3, #53	; 0x35
 80180dc:	d900      	bls.n	80180e0 <_itsdk_console_private+0x24>
 80180de:	e0e5      	b.n	80182ac <_itsdk_console_private+0x1f0>
 80180e0:	009a      	lsls	r2, r3, #2
 80180e2:	4b78      	ldr	r3, [pc, #480]	; (80182c4 <_itsdk_console_private+0x208>)
 80180e4:	18d3      	adds	r3, r2, r3
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	469f      	mov	pc, r3
		case '?':
			// help
			_itsdk_console_printf("X          : exit console\r\n");
 80180ea:	4b77      	ldr	r3, [pc, #476]	; (80182c8 <_itsdk_console_private+0x20c>)
 80180ec:	0018      	movs	r0, r3
 80180ee:	f000 fa0f 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("R          : reset device\r\n");
 80180f2:	4b76      	ldr	r3, [pc, #472]	; (80182cc <_itsdk_console_private+0x210>)
 80180f4:	0018      	movs	r0, r3
 80180f6:	f000 fa0b 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("R!         : clear the whole eeprom\r\n");
 80180fa:	4b75      	ldr	r3, [pc, #468]	; (80182d0 <_itsdk_console_private+0x214>)
 80180fc:	0018      	movs	r0, r3
 80180fe:	f000 fa07 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("l / L      : switch LowPower ON / OFF\r\n");
 8018102:	4b74      	ldr	r3, [pc, #464]	; (80182d4 <_itsdk_console_private+0x218>)
 8018104:	0018      	movs	r0, r3
 8018106:	f000 fa03 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("s          : print device state\r\n");
 801810a:	4b73      	ldr	r3, [pc, #460]	; (80182d8 <_itsdk_console_private+0x21c>)
 801810c:	0018      	movs	r0, r3
 801810e:	f000 f9ff 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("t          : print current time in S\r\n");
 8018112:	4b72      	ldr	r3, [pc, #456]	; (80182dc <_itsdk_console_private+0x220>)
 8018114:	0018      	movs	r0, r3
 8018116:	f000 f9fb 	bl	8018510 <_itsdk_console_printf>
#if ITSDK_WITH_ADC != __ADC_NONE
			_itsdk_console_printf("T          : print current cpu temperature in oC\r\n");
 801811a:	4b71      	ldr	r3, [pc, #452]	; (80182e0 <_itsdk_console_private+0x224>)
 801811c:	0018      	movs	r0, r3
 801811e:	f000 f9f7 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("b          : print battery level\r\n");
 8018122:	4b70      	ldr	r3, [pc, #448]	; (80182e4 <_itsdk_console_private+0x228>)
 8018124:	0018      	movs	r0, r3
 8018126:	f000 f9f3 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("B          : print VCC level\r\n");
 801812a:	4b6f      	ldr	r3, [pc, #444]	; (80182e8 <_itsdk_console_private+0x22c>)
 801812c:	0018      	movs	r0, r3
 801812e:	f000 f9ef 	bl	8018510 <_itsdk_console_printf>
#endif
			_itsdk_console_printf("r          : print last Reset Cause\r\n");
 8018132:	4b6e      	ldr	r3, [pc, #440]	; (80182ec <_itsdk_console_private+0x230>)
 8018134:	0018      	movs	r0, r3
 8018136:	f000 f9eb 	bl	8018510 <_itsdk_console_printf>
#if ITSDK_RADIO_CERTIF == __ENABLE && (ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE )
			_itsdk_console_printf("c:0:nnn    : CW for CE tests with power\r\n");
			_itsdk_console_printf("c:1:nnn    : CW for EU Sigfox tests with power\r\n");
#endif

			return ITSDK_CONSOLE_SUCCES;
 801813a:	2300      	movs	r3, #0
 801813c:	e0bd      	b.n	80182ba <_itsdk_console_private+0x1fe>
		case 'X':
			// exit console
			__console.loginState=0;
 801813e:	4b6c      	ldr	r3, [pc, #432]	; (80182f0 <_itsdk_console_private+0x234>)
 8018140:	781a      	ldrb	r2, [r3, #0]
 8018142:	2101      	movs	r1, #1
 8018144:	438a      	bics	r2, r1
 8018146:	701a      	strb	r2, [r3, #0]
			goto success;
 8018148:	e0b2      	b.n	80182b0 <_itsdk_console_private+0x1f4>
		case 't':
			// print time
			_itsdk_console_printf("Run time is %d s\r\n",(uint32_t)(itsdk_time_get_ms()/1000L));
 801814a:	f004 fcbd 	bl	801cac8 <itsdk_time_get_ms>
 801814e:	22fa      	movs	r2, #250	; 0xfa
 8018150:	0092      	lsls	r2, r2, #2
 8018152:	2300      	movs	r3, #0
 8018154:	f7e8 f9b8 	bl	80004c8 <__aeabi_uldivmod>
 8018158:	0003      	movs	r3, r0
 801815a:	000c      	movs	r4, r1
 801815c:	001a      	movs	r2, r3
 801815e:	4b65      	ldr	r3, [pc, #404]	; (80182f4 <_itsdk_console_private+0x238>)
 8018160:	0011      	movs	r1, r2
 8018162:	0018      	movs	r0, r3
 8018164:	f000 f9d4 	bl	8018510 <_itsdk_console_printf>
			goto success;
 8018168:	e0a2      	b.n	80182b0 <_itsdk_console_private+0x1f4>
#if ITSDK_WITH_ADC != __ADC_NONE
		case 'T':
			// print temperature
			{
			uint16_t t = adc_getTemperature();
 801816a:	f004 ffbf 	bl	801d0ec <adc_getTemperature>
 801816e:	0003      	movs	r3, r0
 8018170:	001a      	movs	r2, r3
 8018172:	240e      	movs	r4, #14
 8018174:	193b      	adds	r3, r7, r4
 8018176:	801a      	strh	r2, [r3, #0]
			_itsdk_console_printf("Temperature is %d.%doC\r\n",t/100,t-((t/100)*100));
 8018178:	193b      	adds	r3, r7, r4
 801817a:	881b      	ldrh	r3, [r3, #0]
 801817c:	2164      	movs	r1, #100	; 0x64
 801817e:	0018      	movs	r0, r3
 8018180:	f7e7 ffca 	bl	8000118 <__udivsi3>
 8018184:	0003      	movs	r3, r0
 8018186:	b29b      	uxth	r3, r3
 8018188:	001d      	movs	r5, r3
 801818a:	0022      	movs	r2, r4
 801818c:	18bb      	adds	r3, r7, r2
 801818e:	881c      	ldrh	r4, [r3, #0]
 8018190:	18bb      	adds	r3, r7, r2
 8018192:	881b      	ldrh	r3, [r3, #0]
 8018194:	2164      	movs	r1, #100	; 0x64
 8018196:	0018      	movs	r0, r3
 8018198:	f7e7 ffbe 	bl	8000118 <__udivsi3>
 801819c:	0003      	movs	r3, r0
 801819e:	b29b      	uxth	r3, r3
 80181a0:	001a      	movs	r2, r3
 80181a2:	0013      	movs	r3, r2
 80181a4:	065b      	lsls	r3, r3, #25
 80181a6:	1a9b      	subs	r3, r3, r2
 80181a8:	009b      	lsls	r3, r3, #2
 80181aa:	189b      	adds	r3, r3, r2
 80181ac:	00db      	lsls	r3, r3, #3
 80181ae:	1a9b      	subs	r3, r3, r2
 80181b0:	009b      	lsls	r3, r3, #2
 80181b2:	18e2      	adds	r2, r4, r3
 80181b4:	4b50      	ldr	r3, [pc, #320]	; (80182f8 <_itsdk_console_private+0x23c>)
 80181b6:	0029      	movs	r1, r5
 80181b8:	0018      	movs	r0, r3
 80181ba:	f000 f9a9 	bl	8018510 <_itsdk_console_printf>
			goto success;
 80181be:	e077      	b.n	80182b0 <_itsdk_console_private+0x1f4>
			}
		case 'b':
			// battery level
			_itsdk_console_printf("Battery level %dmV\r\n",(uint32_t)(adc_getVBat()));
 80181c0:	f005 f81c 	bl	801d1fc <adc_getVBat>
 80181c4:	0003      	movs	r3, r0
 80181c6:	001a      	movs	r2, r3
 80181c8:	4b4c      	ldr	r3, [pc, #304]	; (80182fc <_itsdk_console_private+0x240>)
 80181ca:	0011      	movs	r1, r2
 80181cc:	0018      	movs	r0, r3
 80181ce:	f000 f99f 	bl	8018510 <_itsdk_console_printf>
			goto success;
 80181d2:	e06d      	b.n	80182b0 <_itsdk_console_private+0x1f4>
		case 'B':
			// Vcc level
			_itsdk_console_printf("VCC level %dmV\r\n",(uint32_t)(adc_getVdd()));
 80181d4:	f004 ffe2 	bl	801d19c <adc_getVdd>
 80181d8:	0003      	movs	r3, r0
 80181da:	001a      	movs	r2, r3
 80181dc:	4b48      	ldr	r3, [pc, #288]	; (8018300 <_itsdk_console_private+0x244>)
 80181de:	0011      	movs	r1, r2
 80181e0:	0018      	movs	r0, r3
 80181e2:	f000 f995 	bl	8018510 <_itsdk_console_printf>
			goto success;
 80181e6:	e063      	b.n	80182b0 <_itsdk_console_private+0x1f4>
#endif
		case 'r':
			// Last Reset cause
			_itsdk_console_printf("Reset: ");
 80181e8:	4b46      	ldr	r3, [pc, #280]	; (8018304 <_itsdk_console_private+0x248>)
 80181ea:	0018      	movs	r0, r3
 80181ec:	f000 f990 	bl	8018510 <_itsdk_console_printf>
			switch(itsdk_state.lastResetCause) {
 80181f0:	4b45      	ldr	r3, [pc, #276]	; (8018308 <_itsdk_console_private+0x24c>)
 80181f2:	781b      	ldrb	r3, [r3, #0]
 80181f4:	2b06      	cmp	r3, #6
 80181f6:	d827      	bhi.n	8018248 <_itsdk_console_private+0x18c>
 80181f8:	009a      	lsls	r2, r3, #2
 80181fa:	4b44      	ldr	r3, [pc, #272]	; (801830c <_itsdk_console_private+0x250>)
 80181fc:	18d3      	adds	r3, r2, r3
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	469f      	mov	pc, r3
			case RESET_CAUSE_BOR: _itsdk_console_printf("BOR\r\n"); break;
 8018202:	4b43      	ldr	r3, [pc, #268]	; (8018310 <_itsdk_console_private+0x254>)
 8018204:	0018      	movs	r0, r3
 8018206:	f000 f983 	bl	8018510 <_itsdk_console_printf>
 801820a:	e022      	b.n	8018252 <_itsdk_console_private+0x196>
			case RESET_CAUSE_RESET_PIN: _itsdk_console_printf("RESET PIN\r\n"); break;
 801820c:	4b41      	ldr	r3, [pc, #260]	; (8018314 <_itsdk_console_private+0x258>)
 801820e:	0018      	movs	r0, r3
 8018210:	f000 f97e 	bl	8018510 <_itsdk_console_printf>
 8018214:	e01d      	b.n	8018252 <_itsdk_console_private+0x196>
			case RESET_CAUSE_POWER_ON: _itsdk_console_printf("POWER ON\r\n"); break;
 8018216:	4b40      	ldr	r3, [pc, #256]	; (8018318 <_itsdk_console_private+0x25c>)
 8018218:	0018      	movs	r0, r3
 801821a:	f000 f979 	bl	8018510 <_itsdk_console_printf>
 801821e:	e018      	b.n	8018252 <_itsdk_console_private+0x196>
			case RESET_CAUSE_SOFTWARE: _itsdk_console_printf("SOFT\r\n"); break;
 8018220:	4b3e      	ldr	r3, [pc, #248]	; (801831c <_itsdk_console_private+0x260>)
 8018222:	0018      	movs	r0, r3
 8018224:	f000 f974 	bl	8018510 <_itsdk_console_printf>
 8018228:	e013      	b.n	8018252 <_itsdk_console_private+0x196>
			case RESET_CAUSE_IWDG: _itsdk_console_printf("IWDG\r\n"); break;
 801822a:	4b3d      	ldr	r3, [pc, #244]	; (8018320 <_itsdk_console_private+0x264>)
 801822c:	0018      	movs	r0, r3
 801822e:	f000 f96f 	bl	8018510 <_itsdk_console_printf>
 8018232:	e00e      	b.n	8018252 <_itsdk_console_private+0x196>
			case RESET_CAUSE_WWDG: _itsdk_console_printf("WWDG\r\n"); break;
 8018234:	4b3b      	ldr	r3, [pc, #236]	; (8018324 <_itsdk_console_private+0x268>)
 8018236:	0018      	movs	r0, r3
 8018238:	f000 f96a 	bl	8018510 <_itsdk_console_printf>
 801823c:	e009      	b.n	8018252 <_itsdk_console_private+0x196>
			case RESET_CAUSE_LOWPOWER: _itsdk_console_printf("LOW POWER"); break;
 801823e:	4b3a      	ldr	r3, [pc, #232]	; (8018328 <_itsdk_console_private+0x26c>)
 8018240:	0018      	movs	r0, r3
 8018242:	f000 f965 	bl	8018510 <_itsdk_console_printf>
 8018246:	e004      	b.n	8018252 <_itsdk_console_private+0x196>
			default:
				_itsdk_console_printf("UNKNOWN\r\n"); break;
 8018248:	4b38      	ldr	r3, [pc, #224]	; (801832c <_itsdk_console_private+0x270>)
 801824a:	0018      	movs	r0, r3
 801824c:	f000 f960 	bl	8018510 <_itsdk_console_printf>
 8018250:	46c0      	nop			; (mov r8, r8)
			}
			goto success;
 8018252:	e02d      	b.n	80182b0 <_itsdk_console_private+0x1f4>
		case 'R':
			// Reset device
			_itsdk_console_printf("OK\r\n");
 8018254:	4b36      	ldr	r3, [pc, #216]	; (8018330 <_itsdk_console_private+0x274>)
 8018256:	0018      	movs	r0, r3
 8018258:	f000 f95a 	bl	8018510 <_itsdk_console_printf>
			itsdk_reset();
 801825c:	f005 fc8c 	bl	801db78 <itsdk_reset>
			_itsdk_console_printf("KO\r\n");			// never reached...
 8018260:	4b34      	ldr	r3, [pc, #208]	; (8018334 <_itsdk_console_private+0x278>)
 8018262:	0018      	movs	r0, r3
 8018264:	f000 f954 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8018268:	2302      	movs	r3, #2
 801826a:	e026      	b.n	80182ba <_itsdk_console_private+0x1fe>
		case 'l':
			// switch lowPower On
			lowPower_enable();
 801826c:	f003 ffc6 	bl	801c1fc <lowPower_enable>
			goto success;
 8018270:	e01e      	b.n	80182b0 <_itsdk_console_private+0x1f4>
		case 'L':
			// switch LowPower Off
			lowPower_disable();
 8018272:	f003 ffcd 	bl	801c210 <lowPower_disable>
			goto success;
 8018276:	e01b      	b.n	80182b0 <_itsdk_console_private+0x1f4>
		}
	} else if (sz==2) {
 8018278:	1cfb      	adds	r3, r7, #3
 801827a:	781b      	ldrb	r3, [r3, #0]
 801827c:	2b02      	cmp	r3, #2
 801827e:	d115      	bne.n	80182ac <_itsdk_console_private+0x1f0>
		if ( buffer[0] == 'R' && buffer[1] == '!' ) {
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	781b      	ldrb	r3, [r3, #0]
 8018284:	2b52      	cmp	r3, #82	; 0x52
 8018286:	d111      	bne.n	80182ac <_itsdk_console_private+0x1f0>
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	3301      	adds	r3, #1
 801828c:	781b      	ldrb	r3, [r3, #0]
 801828e:	2b21      	cmp	r3, #33	; 0x21
 8018290:	d10c      	bne.n	80182ac <_itsdk_console_private+0x1f0>
			// Clear all the eeprom content the reset - hard factory default
			_itsdk_console_printf("OK\r\n");
 8018292:	4b27      	ldr	r3, [pc, #156]	; (8018330 <_itsdk_console_private+0x274>)
 8018294:	0018      	movs	r0, r3
 8018296:	f000 f93b 	bl	8018510 <_itsdk_console_printf>
			eeprom_clearAllEprom();
 801829a:	f000 fc23 	bl	8018ae4 <eeprom_clearAllEprom>
			itsdk_delayMs(100);
 801829e:	2064      	movs	r0, #100	; 0x64
 80182a0:	f005 fcbc 	bl	801dc1c <itsdk_delayMs>
			itsdk_reset();
 80182a4:	f005 fc68 	bl	801db78 <itsdk_reset>
			return ITSDK_CONSOLE_FAILED;
 80182a8:	2302      	movs	r3, #2
 80182aa:	e006      	b.n	80182ba <_itsdk_console_private+0x1fe>
			 goto success;
		 } else goto failed;
		}
	}
#endif
	return ITSDK_CONSOLE_NOTFOUND;
 80182ac:	2301      	movs	r3, #1
 80182ae:	e004      	b.n	80182ba <_itsdk_console_private+0x1fe>

success:
	_itsdk_console_printf("OK\r\n");
 80182b0:	4b1f      	ldr	r3, [pc, #124]	; (8018330 <_itsdk_console_private+0x274>)
 80182b2:	0018      	movs	r0, r3
 80182b4:	f000 f92c 	bl	8018510 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 80182b8:	2300      	movs	r3, #0
failed:
	_itsdk_console_printf("KO\r\n");
	return ITSDK_CONSOLE_FAILED;
}
 80182ba:	0018      	movs	r0, r3
 80182bc:	46bd      	mov	sp, r7
 80182be:	b004      	add	sp, #16
 80182c0:	bdb0      	pop	{r4, r5, r7, pc}
 80182c2:	46c0      	nop			; (mov r8, r8)
 80182c4:	08020bd4 	.word	0x08020bd4
 80182c8:	0801f714 	.word	0x0801f714
 80182cc:	0801f730 	.word	0x0801f730
 80182d0:	0801f74c 	.word	0x0801f74c
 80182d4:	0801f774 	.word	0x0801f774
 80182d8:	0801f79c 	.word	0x0801f79c
 80182dc:	0801f7c0 	.word	0x0801f7c0
 80182e0:	0801f7e8 	.word	0x0801f7e8
 80182e4:	0801f81c 	.word	0x0801f81c
 80182e8:	0801f840 	.word	0x0801f840
 80182ec:	0801f860 	.word	0x0801f860
 80182f0:	20001034 	.word	0x20001034
 80182f4:	0801f888 	.word	0x0801f888
 80182f8:	0801f89c 	.word	0x0801f89c
 80182fc:	0801f8b8 	.word	0x0801f8b8
 8018300:	0801f8d0 	.word	0x0801f8d0
 8018304:	0801f8e4 	.word	0x0801f8e4
 8018308:	20001560 	.word	0x20001560
 801830c:	08020cac 	.word	0x08020cac
 8018310:	0801f8ec 	.word	0x0801f8ec
 8018314:	0801f8f4 	.word	0x0801f8f4
 8018318:	0801f900 	.word	0x0801f900
 801831c:	0801f90c 	.word	0x0801f90c
 8018320:	0801f914 	.word	0x0801f914
 8018324:	0801f91c 	.word	0x0801f91c
 8018328:	0801f924 	.word	0x0801f924
 801832c:	0801f930 	.word	0x0801f930
 8018330:	0801f93c 	.word	0x0801f93c
 8018334:	0801f944 	.word	0x0801f944

08018338 <_itsdk_console_public>:

static itsdk_console_return_e _itsdk_console_public(char * buffer, uint8_t sz) {
 8018338:	b580      	push	{r7, lr}
 801833a:	b082      	sub	sp, #8
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
 8018340:	000a      	movs	r2, r1
 8018342:	1cfb      	adds	r3, r7, #3
 8018344:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 8018346:	1cfb      	adds	r3, r7, #3
 8018348:	781b      	ldrb	r3, [r3, #0]
 801834a:	2b01      	cmp	r3, #1
 801834c:	d14c      	bne.n	80183e8 <_itsdk_console_public+0xb0>
		switch ( buffer[0] ) {
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	781b      	ldrb	r3, [r3, #0]
 8018352:	2b6f      	cmp	r3, #111	; 0x6f
 8018354:	d020      	beq.n	8018398 <_itsdk_console_public+0x60>
 8018356:	dc04      	bgt.n	8018362 <_itsdk_console_public+0x2a>
 8018358:	2b21      	cmp	r3, #33	; 0x21
 801835a:	d023      	beq.n	80183a4 <_itsdk_console_public+0x6c>
 801835c:	2b3f      	cmp	r3, #63	; 0x3f
 801835e:	d005      	beq.n	801836c <_itsdk_console_public+0x34>
 8018360:	e042      	b.n	80183e8 <_itsdk_console_public+0xb0>
 8018362:	2b73      	cmp	r3, #115	; 0x73
 8018364:	d03c      	beq.n	80183e0 <_itsdk_console_public+0xa8>
 8018366:	2b76      	cmp	r3, #118	; 0x76
 8018368:	d026      	beq.n	80183b8 <_itsdk_console_public+0x80>
 801836a:	e03d      	b.n	80183e8 <_itsdk_console_public+0xb0>
		case '?':
			// help
			_itsdk_console_printf("--- Common\r\n");
 801836c:	4b21      	ldr	r3, [pc, #132]	; (80183f4 <_itsdk_console_public+0xbc>)
 801836e:	0018      	movs	r0, r3
 8018370:	f000 f8ce 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("?          : print help\r\n");
 8018374:	4b20      	ldr	r3, [pc, #128]	; (80183f8 <_itsdk_console_public+0xc0>)
 8018376:	0018      	movs	r0, r3
 8018378:	f000 f8ca 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("!          : print copyright\r\n");
 801837c:	4b1f      	ldr	r3, [pc, #124]	; (80183fc <_itsdk_console_public+0xc4>)
 801837e:	0018      	movs	r0, r3
 8018380:	f000 f8c6 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("v          : print version\r\n");
 8018384:	4b1e      	ldr	r3, [pc, #120]	; (8018400 <_itsdk_console_public+0xc8>)
 8018386:	0018      	movs	r0, r3
 8018388:	f000 f8c2 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("o          : print OK\r\n");
 801838c:	4b1d      	ldr	r3, [pc, #116]	; (8018404 <_itsdk_console_public+0xcc>)
 801838e:	0018      	movs	r0, r3
 8018390:	f000 f8be 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8018394:	2300      	movs	r3, #0
 8018396:	e028      	b.n	80183ea <_itsdk_console_public+0xb2>
			break;
		case 'o':
			_itsdk_console_printf("OK\r\n");
 8018398:	4b1b      	ldr	r3, [pc, #108]	; (8018408 <_itsdk_console_public+0xd0>)
 801839a:	0018      	movs	r0, r3
 801839c:	f000 f8b8 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80183a0:	2300      	movs	r3, #0
 80183a2:	e022      	b.n	80183ea <_itsdk_console_public+0xb2>
			break;
		case '!':
			// Copyright
			_itsdk_console_printf("IT_SDK - (c) 2020 - Paul Pinault aka Disk91\r\n");
 80183a4:	4b19      	ldr	r3, [pc, #100]	; (801840c <_itsdk_console_public+0xd4>)
 80183a6:	0018      	movs	r0, r3
 80183a8:	f000 f8b2 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf(ITSKD_CONSOLE_COPYRIGHT);
 80183ac:	4b18      	ldr	r3, [pc, #96]	; (8018410 <_itsdk_console_public+0xd8>)
 80183ae:	0018      	movs	r0, r3
 80183b0:	f000 f8ae 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80183b4:	2300      	movs	r3, #0
 80183b6:	e018      	b.n	80183ea <_itsdk_console_public+0xb2>
			break;
		case 'v':
			// Version
			_itsdk_console_printf("FW Version %s\r\n",ITSDK_USER_VERSION);
 80183b8:	4a16      	ldr	r2, [pc, #88]	; (8018414 <_itsdk_console_public+0xdc>)
 80183ba:	4b17      	ldr	r3, [pc, #92]	; (8018418 <_itsdk_console_public+0xe0>)
 80183bc:	0011      	movs	r1, r2
 80183be:	0018      	movs	r0, r3
 80183c0:	f000 f8a6 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("Build %s %s\r\n",__DATE__, __TIME__);
 80183c4:	4a15      	ldr	r2, [pc, #84]	; (801841c <_itsdk_console_public+0xe4>)
 80183c6:	4916      	ldr	r1, [pc, #88]	; (8018420 <_itsdk_console_public+0xe8>)
 80183c8:	4b16      	ldr	r3, [pc, #88]	; (8018424 <_itsdk_console_public+0xec>)
 80183ca:	0018      	movs	r0, r3
 80183cc:	f000 f8a0 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("IT_SDK Version %s\r\n",ITSDK_VERSION);
 80183d0:	4a15      	ldr	r2, [pc, #84]	; (8018428 <_itsdk_console_public+0xf0>)
 80183d2:	4b16      	ldr	r3, [pc, #88]	; (801842c <_itsdk_console_public+0xf4>)
 80183d4:	0011      	movs	r1, r2
 80183d6:	0018      	movs	r0, r3
 80183d8:	f000 f89a 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80183dc:	2300      	movs	r3, #0
 80183de:	e004      	b.n	80183ea <_itsdk_console_public+0xb2>
			break;
		case 's':
			// State
			itsdk_print_state();
 80183e0:	f001 f852 	bl	8019488 <itsdk_print_state>
			return ITSDK_CONSOLE_SUCCES;
 80183e4:	2300      	movs	r3, #0
 80183e6:	e000      	b.n	80183ea <_itsdk_console_public+0xb2>
			break;
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 80183e8:	2301      	movs	r3, #1
}
 80183ea:	0018      	movs	r0, r3
 80183ec:	46bd      	mov	sp, r7
 80183ee:	b002      	add	sp, #8
 80183f0:	bd80      	pop	{r7, pc}
 80183f2:	46c0      	nop			; (mov r8, r8)
 80183f4:	0801f94c 	.word	0x0801f94c
 80183f8:	0801f95c 	.word	0x0801f95c
 80183fc:	0801f978 	.word	0x0801f978
 8018400:	0801f998 	.word	0x0801f998
 8018404:	0801f9b8 	.word	0x0801f9b8
 8018408:	0801f93c 	.word	0x0801f93c
 801840c:	0801f9d0 	.word	0x0801f9d0
 8018410:	0801fa00 	.word	0x0801fa00
 8018414:	0801fa18 	.word	0x0801fa18
 8018418:	0801fa1c 	.word	0x0801fa1c
 801841c:	0801fa2c 	.word	0x0801fa2c
 8018420:	0801fa38 	.word	0x0801fa38
 8018424:	0801fa44 	.word	0x0801fa44
 8018428:	0801fa54 	.word	0x0801fa54
 801842c:	0801fa64 	.word	0x0801fa64

08018430 <itsdk_console_setup>:


/**
 * Setup the console & associated chain
 */
void itsdk_console_setup() {
 8018430:	b580      	push	{r7, lr}
 8018432:	af00      	add	r7, sp, #0
	__console.expire = 0;
 8018434:	4b0c      	ldr	r3, [pc, #48]	; (8018468 <itsdk_console_setup+0x38>)
 8018436:	2200      	movs	r2, #0
 8018438:	62da      	str	r2, [r3, #44]	; 0x2c
	__console.loginState = 0;
 801843a:	4b0b      	ldr	r3, [pc, #44]	; (8018468 <itsdk_console_setup+0x38>)
 801843c:	781a      	ldrb	r2, [r3, #0]
 801843e:	2101      	movs	r1, #1
 8018440:	438a      	bics	r2, r1
 8018442:	701a      	strb	r2, [r3, #0]
	__console.pBuffer = 0;
 8018444:	4b08      	ldr	r3, [pc, #32]	; (8018468 <itsdk_console_setup+0x38>)
 8018446:	781a      	ldrb	r2, [r3, #0]
 8018448:	2101      	movs	r1, #1
 801844a:	400a      	ands	r2, r1
 801844c:	701a      	strb	r2, [r3, #0]
	__console_head_chain.console_private = _itsdk_console_private;
 801844e:	4b07      	ldr	r3, [pc, #28]	; (801846c <itsdk_console_setup+0x3c>)
 8018450:	4a07      	ldr	r2, [pc, #28]	; (8018470 <itsdk_console_setup+0x40>)
 8018452:	601a      	str	r2, [r3, #0]
	__console_head_chain.console_public = _itsdk_console_public;
 8018454:	4b05      	ldr	r3, [pc, #20]	; (801846c <itsdk_console_setup+0x3c>)
 8018456:	4a07      	ldr	r2, [pc, #28]	; (8018474 <itsdk_console_setup+0x44>)
 8018458:	605a      	str	r2, [r3, #4]
	__console_head_chain.next = NULL;
 801845a:	4b04      	ldr	r3, [pc, #16]	; (801846c <itsdk_console_setup+0x3c>)
 801845c:	2200      	movs	r2, #0
 801845e:	609a      	str	r2, [r3, #8]
}
 8018460:	46c0      	nop			; (mov r8, r8)
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}
 8018466:	46c0      	nop			; (mov r8, r8)
 8018468:	20001034 	.word	0x20001034
 801846c:	20001064 	.word	0x20001064
 8018470:	080180bd 	.word	0x080180bd
 8018474:	08018339 	.word	0x08018339

08018478 <itsdk_console_loop>:

/**
 * This function is call on every wake-up to proceed the pending characters on the serial
 * port and call the associated services.
 */
void itsdk_console_loop() {
 8018478:	b5b0      	push	{r4, r5, r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0

	char c;
	serial_read_response_e r;

	// Check the expiration
	if ( __console.loginState == 1 ) {
 801847e:	4b22      	ldr	r3, [pc, #136]	; (8018508 <itsdk_console_loop+0x90>)
 8018480:	781b      	ldrb	r3, [r3, #0]
 8018482:	2201      	movs	r2, #1
 8018484:	4013      	ands	r3, r2
 8018486:	b2db      	uxtb	r3, r3
 8018488:	2b00      	cmp	r3, #0
 801848a:	d021      	beq.n	80184d0 <itsdk_console_loop+0x58>
		uint64_t s = itsdk_time_get_ms()/1000;
 801848c:	f004 fb1c 	bl	801cac8 <itsdk_time_get_ms>
 8018490:	22fa      	movs	r2, #250	; 0xfa
 8018492:	0092      	lsls	r2, r2, #2
 8018494:	2300      	movs	r3, #0
 8018496:	f7e8 f817 	bl	80004c8 <__aeabi_uldivmod>
 801849a:	0002      	movs	r2, r0
 801849c:	000b      	movs	r3, r1
 801849e:	60ba      	str	r2, [r7, #8]
 80184a0:	60fb      	str	r3, [r7, #12]
		if ( __console.expire < s ) {
 80184a2:	4b19      	ldr	r3, [pc, #100]	; (8018508 <itsdk_console_loop+0x90>)
 80184a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184a6:	001c      	movs	r4, r3
 80184a8:	2300      	movs	r3, #0
 80184aa:	001d      	movs	r5, r3
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	42ab      	cmp	r3, r5
 80184b0:	d805      	bhi.n	80184be <itsdk_console_loop+0x46>
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	42ab      	cmp	r3, r5
 80184b6:	d10b      	bne.n	80184d0 <itsdk_console_loop+0x58>
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	42a3      	cmp	r3, r4
 80184bc:	d908      	bls.n	80184d0 <itsdk_console_loop+0x58>
			 __console.loginState = 0;
 80184be:	4b12      	ldr	r3, [pc, #72]	; (8018508 <itsdk_console_loop+0x90>)
 80184c0:	781a      	ldrb	r2, [r3, #0]
 80184c2:	2101      	movs	r1, #1
 80184c4:	438a      	bics	r2, r1
 80184c6:	701a      	strb	r2, [r3, #0]
			 _itsdk_console_printf("logout\r\n");
 80184c8:	4b10      	ldr	r3, [pc, #64]	; (801850c <itsdk_console_loop+0x94>)
 80184ca:	0018      	movs	r0, r3
 80184cc:	f000 f820 	bl	8018510 <_itsdk_console_printf>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif
  #if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	do {
		 r = serial2_read(&c);
 80184d0:	1dfc      	adds	r4, r7, #7
 80184d2:	1dbb      	adds	r3, r7, #6
 80184d4:	0018      	movs	r0, r3
 80184d6:	f005 fc81 	bl	801dddc <serial2_read>
 80184da:	0003      	movs	r3, r0
 80184dc:	7023      	strb	r3, [r4, #0]
		 if ( r == SERIAL_READ_SUCCESS || r == SERIAL_READ_PENDING_CHAR) {
 80184de:	1dfb      	adds	r3, r7, #7
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d003      	beq.n	80184ee <itsdk_console_loop+0x76>
 80184e6:	1dfb      	adds	r3, r7, #7
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	2b01      	cmp	r3, #1
 80184ec:	d104      	bne.n	80184f8 <itsdk_console_loop+0x80>
			 _itsdk_console_processChar(c);
 80184ee:	1dbb      	adds	r3, r7, #6
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	0018      	movs	r0, r3
 80184f4:	f000 f97e 	bl	80187f4 <_itsdk_console_processChar>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
 80184f8:	1dfb      	adds	r3, r7, #7
 80184fa:	781b      	ldrb	r3, [r3, #0]
 80184fc:	2b01      	cmp	r3, #1
 80184fe:	d0e7      	beq.n	80184d0 <itsdk_console_loop+0x58>
			 _itsdk_console_processChar(c);
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif

}
 8018500:	46c0      	nop			; (mov r8, r8)
 8018502:	46bd      	mov	sp, r7
 8018504:	b004      	add	sp, #16
 8018506:	bdb0      	pop	{r4, r5, r7, pc}
 8018508:	20001034 	.word	0x20001034
 801850c:	0801fa78 	.word	0x0801fa78

08018510 <_itsdk_console_printf>:
void itsdk_console_customProcess_char(char c) {
	_itsdk_console_processChar(c);
}
#endif

void _itsdk_console_printf(char *format, ...) {
 8018510:	b40f      	push	{r0, r1, r2, r3}
 8018512:	b580      	push	{r7, lr}
 8018514:	b096      	sub	sp, #88	; 0x58
 8018516:	af00      	add	r7, sp, #0
	va_list args;
	char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
    va_start(args,format);
 8018518:	2364      	movs	r3, #100	; 0x64
 801851a:	18fb      	adds	r3, r7, r3
 801851c:	657b      	str	r3, [r7, #84]	; 0x54
	vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801851e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018522:	1d38      	adds	r0, r7, #4
 8018524:	2150      	movs	r1, #80	; 0x50
 8018526:	f006 fad1 	bl	801eacc <vsniprintf>
	va_end(args);
#if ( ITSDK_CONSOLE_SERIAL & ( __UART_LPUART1 | __UART_USART1 ) ) > 0
	serial1_print(fmtBuffer);
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	serial2_print(fmtBuffer);
 801852a:	1d3b      	adds	r3, r7, #4
 801852c:	0018      	movs	r0, r3
 801852e:	f005 fc3d 	bl	801ddac <serial2_print>
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_CUSTOM ) > 0
	itsdk_console_customSerial_print(fmtBuffer);
#endif
}
 8018532:	46c0      	nop			; (mov r8, r8)
 8018534:	46bd      	mov	sp, r7
 8018536:	b016      	add	sp, #88	; 0x58
 8018538:	bc80      	pop	{r7}
 801853a:	bc08      	pop	{r3}
 801853c:	b004      	add	sp, #16
 801853e:	4718      	bx	r3

08018540 <_itsdk_console_processLine>:

// =================================================================================================
// Processing input
// =================================================================================================

static void _itsdk_console_processLine() {
 8018540:	b5b0      	push	{r4, r5, r7, lr}
 8018542:	b090      	sub	sp, #64	; 0x40
 8018544:	af00      	add	r7, sp, #0

	// Empty line
	if ( __console.pBuffer == 0 ) return;
 8018546:	4ba5      	ldr	r3, [pc, #660]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	2201      	movs	r2, #1
 801854c:	4393      	bics	r3, r2
 801854e:	b2db      	uxtb	r3, r3
 8018550:	2b00      	cmp	r3, #0
 8018552:	d100      	bne.n	8018556 <_itsdk_console_processLine+0x16>
 8018554:	e13d      	b.n	80187d2 <_itsdk_console_processLine+0x292>

	// Clean the buffer
	if ( __console.pBuffer > 0 && __console.serialBuffer[__console.pBuffer-1] == '\r' ) {
 8018556:	4ba1      	ldr	r3, [pc, #644]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018558:	781b      	ldrb	r3, [r3, #0]
 801855a:	2201      	movs	r2, #1
 801855c:	4393      	bics	r3, r2
 801855e:	b2db      	uxtb	r3, r3
 8018560:	2b00      	cmp	r3, #0
 8018562:	d01d      	beq.n	80185a0 <_itsdk_console_processLine+0x60>
 8018564:	4b9d      	ldr	r3, [pc, #628]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018566:	781b      	ldrb	r3, [r3, #0]
 8018568:	061b      	lsls	r3, r3, #24
 801856a:	0e5b      	lsrs	r3, r3, #25
 801856c:	b2db      	uxtb	r3, r3
 801856e:	3b01      	subs	r3, #1
 8018570:	4a9a      	ldr	r2, [pc, #616]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018572:	18d3      	adds	r3, r2, r3
 8018574:	785b      	ldrb	r3, [r3, #1]
 8018576:	2b0d      	cmp	r3, #13
 8018578:	d112      	bne.n	80185a0 <_itsdk_console_processLine+0x60>
		__console.pBuffer--;
 801857a:	4b98      	ldr	r3, [pc, #608]	; (80187dc <_itsdk_console_processLine+0x29c>)
 801857c:	781b      	ldrb	r3, [r3, #0]
 801857e:	061b      	lsls	r3, r3, #24
 8018580:	0e5b      	lsrs	r3, r3, #25
 8018582:	b2db      	uxtb	r3, r3
 8018584:	337f      	adds	r3, #127	; 0x7f
 8018586:	1c1a      	adds	r2, r3, #0
 8018588:	237f      	movs	r3, #127	; 0x7f
 801858a:	4013      	ands	r3, r2
 801858c:	b2da      	uxtb	r2, r3
 801858e:	4b93      	ldr	r3, [pc, #588]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018590:	1890      	adds	r0, r2, r2
 8018592:	781a      	ldrb	r2, [r3, #0]
 8018594:	2101      	movs	r1, #1
 8018596:	400a      	ands	r2, r1
 8018598:	1c11      	adds	r1, r2, #0
 801859a:	1c02      	adds	r2, r0, #0
 801859c:	430a      	orrs	r2, r1
 801859e:	701a      	strb	r2, [r3, #0]
	}
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 80185a0:	4b8e      	ldr	r3, [pc, #568]	; (80187dc <_itsdk_console_processLine+0x29c>)
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	061b      	lsls	r3, r3, #24
 80185a6:	0e5b      	lsrs	r3, r3, #25
 80185a8:	b2db      	uxtb	r3, r3
 80185aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80185ac:	e008      	b.n	80185c0 <_itsdk_console_processLine+0x80>
		__console.serialBuffer[i] = 0;
 80185ae:	4a8b      	ldr	r2, [pc, #556]	; (80187dc <_itsdk_console_processLine+0x29c>)
 80185b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185b2:	18d3      	adds	r3, r2, r3
 80185b4:	3301      	adds	r3, #1
 80185b6:	2200      	movs	r2, #0
 80185b8:	701a      	strb	r2, [r3, #0]
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 80185ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185bc:	3301      	adds	r3, #1
 80185be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80185c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185c2:	2b27      	cmp	r3, #39	; 0x27
 80185c4:	ddf3      	ble.n	80185ae <_itsdk_console_processLine+0x6e>
	}

	if ( __console.loginState == 0 ) {
 80185c6:	4b85      	ldr	r3, [pc, #532]	; (80187dc <_itsdk_console_processLine+0x29c>)
 80185c8:	781b      	ldrb	r3, [r3, #0]
 80185ca:	2201      	movs	r2, #1
 80185cc:	4013      	ands	r3, r2
 80185ce:	b2db      	uxtb	r3, r3
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d000      	beq.n	80185d6 <_itsdk_console_processLine+0x96>
 80185d4:	e08e      	b.n	80186f4 <_itsdk_console_processLine+0x1b4>
		// console locked

		// We are going to remove the possible \r and create a 16B array with leading 0 to match with
		// the console password field in Secure Store
		// Password max size is 15 byte.
		if ( __console.pBuffer < 16 ) {
 80185d6:	4b81      	ldr	r3, [pc, #516]	; (80187dc <_itsdk_console_processLine+0x29c>)
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	061b      	lsls	r3, r3, #24
 80185dc:	0e5b      	lsrs	r3, r3, #25
 80185de:	b2db      	uxtb	r3, r3
 80185e0:	2b0f      	cmp	r3, #15
 80185e2:	d82e      	bhi.n	8018642 <_itsdk_console_processLine+0x102>
			 __console.loginState=1;
 80185e4:	4b7d      	ldr	r3, [pc, #500]	; (80187dc <_itsdk_console_processLine+0x29c>)
 80185e6:	781a      	ldrb	r2, [r3, #0]
 80185e8:	2101      	movs	r1, #1
 80185ea:	430a      	orrs	r2, r1
 80185ec:	701a      	strb	r2, [r3, #0]
			#if ITSDK_WITH_SECURESTORE == __DISABLE
				uint8_t passwd[16] = ITSDK_SECSTORE_CONSOLEKEY;
			#else
				uint8_t passwd[16];
				itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, passwd);
 80185ee:	003b      	movs	r3, r7
 80185f0:	0019      	movs	r1, r3
 80185f2:	2000      	movs	r0, #0
 80185f4:	f001 f8d4 	bl	80197a0 <itsdk_secstore_readBlock>
			#endif
				for ( int i = 0 ; i < 16 ; i++) {
 80185f8:	2300      	movs	r3, #0
 80185fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80185fc:	e019      	b.n	8018632 <_itsdk_console_processLine+0xf2>
					if (__console.serialBuffer[i] != passwd[i] && __console.loginState == 1) __console.loginState=0;
 80185fe:	4a77      	ldr	r2, [pc, #476]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018602:	18d3      	adds	r3, r2, r3
 8018604:	3301      	adds	r3, #1
 8018606:	781a      	ldrb	r2, [r3, #0]
 8018608:	0039      	movs	r1, r7
 801860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801860c:	18cb      	adds	r3, r1, r3
 801860e:	781b      	ldrb	r3, [r3, #0]
 8018610:	429a      	cmp	r2, r3
 8018612:	d00b      	beq.n	801862c <_itsdk_console_processLine+0xec>
 8018614:	4b71      	ldr	r3, [pc, #452]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018616:	781b      	ldrb	r3, [r3, #0]
 8018618:	2201      	movs	r2, #1
 801861a:	4013      	ands	r3, r2
 801861c:	b2db      	uxtb	r3, r3
 801861e:	2b00      	cmp	r3, #0
 8018620:	d004      	beq.n	801862c <_itsdk_console_processLine+0xec>
 8018622:	4b6e      	ldr	r3, [pc, #440]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018624:	781a      	ldrb	r2, [r3, #0]
 8018626:	2101      	movs	r1, #1
 8018628:	438a      	bics	r2, r1
 801862a:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < 16 ; i++) {
 801862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801862e:	3301      	adds	r3, #1
 8018630:	63bb      	str	r3, [r7, #56]	; 0x38
 8018632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018634:	2b0f      	cmp	r3, #15
 8018636:	dde2      	ble.n	80185fe <_itsdk_console_processLine+0xbe>
				}
				bzero(passwd,16);
 8018638:	003b      	movs	r3, r7
 801863a:	2110      	movs	r1, #16
 801863c:	0018      	movs	r0, r3
 801863e:	f006 f9c5 	bl	801e9cc <bzero>
		}
		if ( __console.loginState == 1 ) {
 8018642:	4b66      	ldr	r3, [pc, #408]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018644:	781b      	ldrb	r3, [r3, #0]
 8018646:	2201      	movs	r2, #1
 8018648:	4013      	ands	r3, r2
 801864a:	b2db      	uxtb	r3, r3
 801864c:	2b00      	cmp	r3, #0
 801864e:	d015      	beq.n	801867c <_itsdk_console_processLine+0x13c>
			// Login sucess
			uint64_t s = itsdk_time_get_ms()/1000;
 8018650:	f004 fa3a 	bl	801cac8 <itsdk_time_get_ms>
 8018654:	22fa      	movs	r2, #250	; 0xfa
 8018656:	0092      	lsls	r2, r2, #2
 8018658:	2300      	movs	r3, #0
 801865a:	f7e7 ff35 	bl	80004c8 <__aeabi_uldivmod>
 801865e:	0003      	movs	r3, r0
 8018660:	000c      	movs	r4, r1
 8018662:	613b      	str	r3, [r7, #16]
 8018664:	617c      	str	r4, [r7, #20]
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	332d      	adds	r3, #45	; 0x2d
 801866a:	33ff      	adds	r3, #255	; 0xff
 801866c:	001a      	movs	r2, r3
 801866e:	4b5b      	ldr	r3, [pc, #364]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018670:	62da      	str	r2, [r3, #44]	; 0x2c
			_itsdk_console_printf("OK\r\n");
 8018672:	4b5b      	ldr	r3, [pc, #364]	; (80187e0 <_itsdk_console_processLine+0x2a0>)
 8018674:	0018      	movs	r0, r3
 8018676:	f7ff ff4b 	bl	8018510 <_itsdk_console_printf>
 801867a:	e0ab      	b.n	80187d4 <_itsdk_console_processLine+0x294>
		} else {
			// Login Failed This can be a public operation request
			itsdk_console_chain_t * c = &__console_head_chain;
 801867c:	4b59      	ldr	r3, [pc, #356]	; (80187e4 <_itsdk_console_processLine+0x2a4>)
 801867e:	637b      	str	r3, [r7, #52]	; 0x34
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8018680:	2333      	movs	r3, #51	; 0x33
 8018682:	18fb      	adds	r3, r7, r3
 8018684:	2201      	movs	r2, #1
 8018686:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8018688:	e022      	b.n	80186d0 <_itsdk_console_processLine+0x190>
				if ( c->console_public != NULL ) {
 801868a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801868c:	685b      	ldr	r3, [r3, #4]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d01a      	beq.n	80186c8 <_itsdk_console_processLine+0x188>
  				   lret= c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8018692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018694:	685b      	ldr	r3, [r3, #4]
 8018696:	4a51      	ldr	r2, [pc, #324]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018698:	7812      	ldrb	r2, [r2, #0]
 801869a:	0612      	lsls	r2, r2, #24
 801869c:	0e52      	lsrs	r2, r2, #25
 801869e:	b2d2      	uxtb	r2, r2
 80186a0:	0011      	movs	r1, r2
 80186a2:	251e      	movs	r5, #30
 80186a4:	197c      	adds	r4, r7, r5
 80186a6:	4a50      	ldr	r2, [pc, #320]	; (80187e8 <_itsdk_console_processLine+0x2a8>)
 80186a8:	0010      	movs	r0, r2
 80186aa:	4798      	blx	r3
 80186ac:	0003      	movs	r3, r0
 80186ae:	7023      	strb	r3, [r4, #0]
				   switch ( lret ) {
 80186b0:	197b      	adds	r3, r7, r5
 80186b2:	781b      	ldrb	r3, [r3, #0]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d002      	beq.n	80186be <_itsdk_console_processLine+0x17e>
 80186b8:	2b02      	cmp	r3, #2
 80186ba:	d000      	beq.n	80186be <_itsdk_console_processLine+0x17e>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:
					      break;
 80186bc:	e005      	b.n	80186ca <_itsdk_console_processLine+0x18a>
						  ret = ITSDK_CONSOLE_SUCCES;
 80186be:	2333      	movs	r3, #51	; 0x33
 80186c0:	18fb      	adds	r3, r7, r3
 80186c2:	2200      	movs	r2, #0
 80186c4:	701a      	strb	r2, [r3, #0]
						  break;
 80186c6:	e000      	b.n	80186ca <_itsdk_console_processLine+0x18a>
				   }
				}
 80186c8:	46c0      	nop			; (mov r8, r8)
			   c = c->next;
 80186ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186cc:	689b      	ldr	r3, [r3, #8]
 80186ce:	637b      	str	r3, [r7, #52]	; 0x34
			while ( c != NULL ) {
 80186d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d1d9      	bne.n	801868a <_itsdk_console_processLine+0x14a>
			}
			// Print the password prompt only when it was not a command
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 80186d6:	2333      	movs	r3, #51	; 0x33
 80186d8:	18fb      	adds	r3, r7, r3
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	2b01      	cmp	r3, #1
 80186de:	d000      	beq.n	80186e2 <_itsdk_console_processLine+0x1a2>
 80186e0:	e078      	b.n	80187d4 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("password:\r\n");
 80186e2:	4b42      	ldr	r3, [pc, #264]	; (80187ec <_itsdk_console_processLine+0x2ac>)
 80186e4:	0018      	movs	r0, r3
 80186e6:	f7ff ff13 	bl	8018510 <_itsdk_console_printf>
				_itsdk_console_printf("KO\r\n");
 80186ea:	4b41      	ldr	r3, [pc, #260]	; (80187f0 <_itsdk_console_processLine+0x2b0>)
 80186ec:	0018      	movs	r0, r3
 80186ee:	f7ff ff0f 	bl	8018510 <_itsdk_console_printf>
 80186f2:	e06f      	b.n	80187d4 <_itsdk_console_processLine+0x294>
			}
		}
	} else {
		if (__console.pBuffer > 0) {
 80186f4:	4b39      	ldr	r3, [pc, #228]	; (80187dc <_itsdk_console_processLine+0x29c>)
 80186f6:	781b      	ldrb	r3, [r3, #0]
 80186f8:	2201      	movs	r2, #1
 80186fa:	4393      	bics	r3, r2
 80186fc:	b2db      	uxtb	r3, r3
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d068      	beq.n	80187d4 <_itsdk_console_processLine+0x294>
			// We are logged

			// Update session expiration
			uint64_t s = itsdk_time_get_ms()/1000;
 8018702:	f004 f9e1 	bl	801cac8 <itsdk_time_get_ms>
 8018706:	22fa      	movs	r2, #250	; 0xfa
 8018708:	0092      	lsls	r2, r2, #2
 801870a:	2300      	movs	r3, #0
 801870c:	f7e7 fedc 	bl	80004c8 <__aeabi_uldivmod>
 8018710:	0003      	movs	r3, r0
 8018712:	000c      	movs	r4, r1
 8018714:	623b      	str	r3, [r7, #32]
 8018716:	627c      	str	r4, [r7, #36]	; 0x24
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 8018718:	6a3b      	ldr	r3, [r7, #32]
 801871a:	332d      	adds	r3, #45	; 0x2d
 801871c:	33ff      	adds	r3, #255	; 0xff
 801871e:	001a      	movs	r2, r3
 8018720:	4b2e      	ldr	r3, [pc, #184]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018722:	62da      	str	r2, [r3, #44]	; 0x2c

			// Process command
			itsdk_console_chain_t * c = &__console_head_chain;
 8018724:	4b2f      	ldr	r3, [pc, #188]	; (80187e4 <_itsdk_console_processLine+0x2a4>)
 8018726:	62fb      	str	r3, [r7, #44]	; 0x2c
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8018728:	232b      	movs	r3, #43	; 0x2b
 801872a:	18fb      	adds	r3, r7, r3
 801872c:	2201      	movs	r2, #1
 801872e:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8018730:	e042      	b.n	80187b8 <_itsdk_console_processLine+0x278>
			  if ( c->console_public != NULL ) {
 8018732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018734:	685b      	ldr	r3, [r3, #4]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d01a      	beq.n	8018770 <_itsdk_console_processLine+0x230>
				  lret = c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801873c:	685b      	ldr	r3, [r3, #4]
 801873e:	4a27      	ldr	r2, [pc, #156]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018740:	7812      	ldrb	r2, [r2, #0]
 8018742:	0612      	lsls	r2, r2, #24
 8018744:	0e52      	lsrs	r2, r2, #25
 8018746:	b2d2      	uxtb	r2, r2
 8018748:	0011      	movs	r1, r2
 801874a:	251f      	movs	r5, #31
 801874c:	197c      	adds	r4, r7, r5
 801874e:	4a26      	ldr	r2, [pc, #152]	; (80187e8 <_itsdk_console_processLine+0x2a8>)
 8018750:	0010      	movs	r0, r2
 8018752:	4798      	blx	r3
 8018754:	0003      	movs	r3, r0
 8018756:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8018758:	197b      	adds	r3, r7, r5
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d002      	beq.n	8018766 <_itsdk_console_processLine+0x226>
 8018760:	2b02      	cmp	r3, #2
 8018762:	d000      	beq.n	8018766 <_itsdk_console_processLine+0x226>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 8018764:	e005      	b.n	8018772 <_itsdk_console_processLine+0x232>
						  ret = ITSDK_CONSOLE_SUCCES;
 8018766:	232b      	movs	r3, #43	; 0x2b
 8018768:	18fb      	adds	r3, r7, r3
 801876a:	2200      	movs	r2, #0
 801876c:	701a      	strb	r2, [r3, #0]
						  break;
 801876e:	e000      	b.n	8018772 <_itsdk_console_processLine+0x232>
				   }
			  }
 8018770:	46c0      	nop			; (mov r8, r8)
			  if ( c->console_private != NULL ) {
 8018772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d01a      	beq.n	80187b0 <_itsdk_console_processLine+0x270>
				  lret = c->console_private((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	4a17      	ldr	r2, [pc, #92]	; (80187dc <_itsdk_console_processLine+0x29c>)
 8018780:	7812      	ldrb	r2, [r2, #0]
 8018782:	0612      	lsls	r2, r2, #24
 8018784:	0e52      	lsrs	r2, r2, #25
 8018786:	b2d2      	uxtb	r2, r2
 8018788:	0011      	movs	r1, r2
 801878a:	251f      	movs	r5, #31
 801878c:	197c      	adds	r4, r7, r5
 801878e:	4a16      	ldr	r2, [pc, #88]	; (80187e8 <_itsdk_console_processLine+0x2a8>)
 8018790:	0010      	movs	r0, r2
 8018792:	4798      	blx	r3
 8018794:	0003      	movs	r3, r0
 8018796:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8018798:	197b      	adds	r3, r7, r5
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d002      	beq.n	80187a6 <_itsdk_console_processLine+0x266>
 80187a0:	2b02      	cmp	r3, #2
 80187a2:	d000      	beq.n	80187a6 <_itsdk_console_processLine+0x266>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 80187a4:	e005      	b.n	80187b2 <_itsdk_console_processLine+0x272>
						  ret = ITSDK_CONSOLE_SUCCES;
 80187a6:	232b      	movs	r3, #43	; 0x2b
 80187a8:	18fb      	adds	r3, r7, r3
 80187aa:	2200      	movs	r2, #0
 80187ac:	701a      	strb	r2, [r3, #0]
						  break;
 80187ae:	e000      	b.n	80187b2 <_itsdk_console_processLine+0x272>
				   }
			  }
 80187b0:	46c0      	nop			; (mov r8, r8)
			  c = c->next;
 80187b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187b4:	689b      	ldr	r3, [r3, #8]
 80187b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			while ( c != NULL ) {
 80187b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d1b9      	bne.n	8018732 <_itsdk_console_processLine+0x1f2>
			}
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 80187be:	232b      	movs	r3, #43	; 0x2b
 80187c0:	18fb      	adds	r3, r7, r3
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	2b01      	cmp	r3, #1
 80187c6:	d105      	bne.n	80187d4 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("KO\r\n");
 80187c8:	4b09      	ldr	r3, [pc, #36]	; (80187f0 <_itsdk_console_processLine+0x2b0>)
 80187ca:	0018      	movs	r0, r3
 80187cc:	f7ff fea0 	bl	8018510 <_itsdk_console_printf>
 80187d0:	e000      	b.n	80187d4 <_itsdk_console_processLine+0x294>
	if ( __console.pBuffer == 0 ) return;
 80187d2:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 80187d4:	46bd      	mov	sp, r7
 80187d6:	b010      	add	sp, #64	; 0x40
 80187d8:	bdb0      	pop	{r4, r5, r7, pc}
 80187da:	46c0      	nop			; (mov r8, r8)
 80187dc:	20001034 	.word	0x20001034
 80187e0:	0801f93c 	.word	0x0801f93c
 80187e4:	20001064 	.word	0x20001064
 80187e8:	20001035 	.word	0x20001035
 80187ec:	0801fa84 	.word	0x0801fa84
 80187f0:	0801f944 	.word	0x0801f944

080187f4 <_itsdk_console_processChar>:

/**
 * Process 1 char read
 */
static void _itsdk_console_processChar(char c) {
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	0002      	movs	r2, r0
 80187fc:	1dfb      	adds	r3, r7, #7
 80187fe:	701a      	strb	r2, [r3, #0]

	if ( c == '\n' || c == '\r' || c == '\0' ) {
 8018800:	1dfb      	adds	r3, r7, #7
 8018802:	781b      	ldrb	r3, [r3, #0]
 8018804:	2b0a      	cmp	r3, #10
 8018806:	d007      	beq.n	8018818 <_itsdk_console_processChar+0x24>
 8018808:	1dfb      	adds	r3, r7, #7
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	2b0d      	cmp	r3, #13
 801880e:	d003      	beq.n	8018818 <_itsdk_console_processChar+0x24>
 8018810:	1dfb      	adds	r3, r7, #7
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d10e      	bne.n	8018836 <_itsdk_console_processChar+0x42>
		if ( __console.pBuffer > 0 ) {
 8018818:	4b1c      	ldr	r3, [pc, #112]	; (801888c <_itsdk_console_processChar+0x98>)
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	2201      	movs	r2, #1
 801881e:	4393      	bics	r3, r2
 8018820:	b2db      	uxtb	r3, r3
 8018822:	2b00      	cmp	r3, #0
 8018824:	d02d      	beq.n	8018882 <_itsdk_console_processChar+0x8e>
//			log_info("RET");
			_itsdk_console_processLine();
 8018826:	f7ff fe8b 	bl	8018540 <_itsdk_console_processLine>
			__console.pBuffer = 0;
 801882a:	4b18      	ldr	r3, [pc, #96]	; (801888c <_itsdk_console_processChar+0x98>)
 801882c:	781a      	ldrb	r2, [r3, #0]
 801882e:	2101      	movs	r1, #1
 8018830:	400a      	ands	r2, r1
 8018832:	701a      	strb	r2, [r3, #0]
		if ( __console.pBuffer > 0 ) {
 8018834:	e025      	b.n	8018882 <_itsdk_console_processChar+0x8e>
		}
//		log_info("ESC");
	} else {
		if ( __console.pBuffer < ITSDK_CONSOLE_LINEBUFFER ) {
 8018836:	4b15      	ldr	r3, [pc, #84]	; (801888c <_itsdk_console_processChar+0x98>)
 8018838:	781b      	ldrb	r3, [r3, #0]
 801883a:	061b      	lsls	r3, r3, #24
 801883c:	0e5b      	lsrs	r3, r3, #25
 801883e:	b2db      	uxtb	r3, r3
 8018840:	2b27      	cmp	r3, #39	; 0x27
 8018842:	d81e      	bhi.n	8018882 <_itsdk_console_processChar+0x8e>

//			if ( c > 32 ) {
//			  log_info("[%c]",c);
//			} else log_info("(%02X)",c);

			__console.serialBuffer[__console.pBuffer] = c;
 8018844:	4b11      	ldr	r3, [pc, #68]	; (801888c <_itsdk_console_processChar+0x98>)
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	061b      	lsls	r3, r3, #24
 801884a:	0e5b      	lsrs	r3, r3, #25
 801884c:	b2db      	uxtb	r3, r3
 801884e:	001a      	movs	r2, r3
 8018850:	4b0e      	ldr	r3, [pc, #56]	; (801888c <_itsdk_console_processChar+0x98>)
 8018852:	189b      	adds	r3, r3, r2
 8018854:	1dfa      	adds	r2, r7, #7
 8018856:	7812      	ldrb	r2, [r2, #0]
 8018858:	705a      	strb	r2, [r3, #1]
			__console.pBuffer++;
 801885a:	4b0c      	ldr	r3, [pc, #48]	; (801888c <_itsdk_console_processChar+0x98>)
 801885c:	781b      	ldrb	r3, [r3, #0]
 801885e:	061b      	lsls	r3, r3, #24
 8018860:	0e5b      	lsrs	r3, r3, #25
 8018862:	b2db      	uxtb	r3, r3
 8018864:	3301      	adds	r3, #1
 8018866:	1c1a      	adds	r2, r3, #0
 8018868:	237f      	movs	r3, #127	; 0x7f
 801886a:	4013      	ands	r3, r2
 801886c:	b2da      	uxtb	r2, r3
 801886e:	4b07      	ldr	r3, [pc, #28]	; (801888c <_itsdk_console_processChar+0x98>)
 8018870:	1890      	adds	r0, r2, r2
 8018872:	781a      	ldrb	r2, [r3, #0]
 8018874:	2101      	movs	r1, #1
 8018876:	400a      	ands	r2, r1
 8018878:	1c11      	adds	r1, r2, #0
 801887a:	1c02      	adds	r2, r0, #0
 801887c:	430a      	orrs	r2, r1
 801887e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8018880:	e7ff      	b.n	8018882 <_itsdk_console_processChar+0x8e>
 8018882:	46c0      	nop			; (mov r8, r8)
 8018884:	46bd      	mov	sp, r7
 8018886:	b002      	add	sp, #8
 8018888:	bd80      	pop	{r7, pc}
 801888a:	46c0      	nop			; (mov r8, r8)
 801888c:	20001034 	.word	0x20001034

08018890 <itsdk_console_registerCommand>:

/**
 * Add an action to the chain, the action **must be** static
 * The action list is added at end of the chain
 */
void itsdk_console_registerCommand(itsdk_console_chain_t * chain) {
 8018890:	b580      	push	{r7, lr}
 8018892:	b084      	sub	sp, #16
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
	itsdk_console_chain_t * c = &__console_head_chain;
 8018898:	4b13      	ldr	r3, [pc, #76]	; (80188e8 <itsdk_console_registerCommand+0x58>)
 801889a:	60fb      	str	r3, [r7, #12]
	if ( c->console_private != _itsdk_console_private ) {
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	4b12      	ldr	r3, [pc, #72]	; (80188ec <itsdk_console_registerCommand+0x5c>)
 80188a2:	429a      	cmp	r2, r3
 80188a4:	d008      	beq.n	80188b8 <itsdk_console_registerCommand+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONSOLE_NOTSETUP,0);
 80188a6:	4b12      	ldr	r3, [pc, #72]	; (80188f0 <itsdk_console_registerCommand+0x60>)
 80188a8:	2100      	movs	r1, #0
 80188aa:	0018      	movs	r0, r3
 80188ac:	f002 fe92 	bl	801b5d4 <itsdk_error_report>
	}

	while ( c->next != NULL && c->next != chain ) {
 80188b0:	e002      	b.n	80188b8 <itsdk_console_registerCommand+0x28>
	  c = c->next;
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	689b      	ldr	r3, [r3, #8]
 80188b6:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->next != chain ) {
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	689b      	ldr	r3, [r3, #8]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d004      	beq.n	80188ca <itsdk_console_registerCommand+0x3a>
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	689b      	ldr	r3, [r3, #8]
 80188c4:	687a      	ldr	r2, [r7, #4]
 80188c6:	429a      	cmp	r2, r3
 80188c8:	d1f3      	bne.n	80188b2 <itsdk_console_registerCommand+0x22>
	}
	if ( c->next != chain ) {
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	689b      	ldr	r3, [r3, #8]
 80188ce:	687a      	ldr	r2, [r7, #4]
 80188d0:	429a      	cmp	r2, r3
 80188d2:	d005      	beq.n	80188e0 <itsdk_console_registerCommand+0x50>
		// the Action is not already existing
		c->next=chain;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	687a      	ldr	r2, [r7, #4]
 80188d8:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	2200      	movs	r2, #0
 80188de:	609a      	str	r2, [r3, #8]
	}
}
 80188e0:	46c0      	nop			; (mov r8, r8)
 80188e2:	46bd      	mov	sp, r7
 80188e4:	b004      	add	sp, #16
 80188e6:	bd80      	pop	{r7, pc}
 80188e8:	20001064 	.word	0x20001064
 80188ec:	080180bd 	.word	0x080180bd
 80188f0:	c0000003 	.word	0xc0000003

080188f4 <eeprom_write_config>:
 * ---> ErrorReport
 * ---> Sigfox Nvm
 * ---> Configuration (*) here
 * ---> UserLand
 */
itsdk_bool_e eeprom_write_config(void * data, uint16_t len, uint8_t version) {
 80188f4:	b590      	push	{r4, r7, lr}
 80188f6:	b089      	sub	sp, #36	; 0x24
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
 80188fc:	0008      	movs	r0, r1
 80188fe:	0011      	movs	r1, r2
 8018900:	1cbb      	adds	r3, r7, #2
 8018902:	1c02      	adds	r2, r0, #0
 8018904:	801a      	strh	r2, [r3, #0]
 8018906:	1c7b      	adds	r3, r7, #1
 8018908:	1c0a      	adds	r2, r1, #0
 801890a:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC_CONFIG;
 801890c:	2410      	movs	r4, #16
 801890e:	193b      	adds	r3, r7, r4
 8018910:	4a17      	ldr	r2, [pc, #92]	; (8018970 <eeprom_write_config+0x7c>)
 8018912:	801a      	strh	r2, [r3, #0]
	t.size = len;
 8018914:	193b      	adds	r3, r7, r4
 8018916:	1cba      	adds	r2, r7, #2
 8018918:	8812      	ldrh	r2, [r2, #0]
 801891a:	809a      	strh	r2, [r3, #4]
	t.version = version;
 801891c:	193b      	adds	r3, r7, r4
 801891e:	1c7a      	adds	r2, r7, #1
 8018920:	7812      	ldrb	r2, [r2, #0]
 8018922:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 8018924:	1cbb      	adds	r3, r7, #2
 8018926:	881a      	ldrh	r2, [r3, #0]
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	0011      	movs	r1, r2
 801892c:	0018      	movs	r0, r3
 801892e:	f003 fcc1 	bl	801c2b4 <itsdk_computeCRC32>
 8018932:	0002      	movs	r2, r0
 8018934:	193b      	adds	r3, r7, r4
 8018936:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 8018938:	2300      	movs	r3, #0
 801893a:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 801893c:	230c      	movs	r3, #12
 801893e:	18fb      	adds	r3, r7, r3
 8018940:	0018      	movs	r0, r3
 8018942:	f000 f88f 	bl	8018a64 <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8018946:	68f9      	ldr	r1, [r7, #12]
 8018948:	193a      	adds	r2, r7, r4
 801894a:	2310      	movs	r3, #16
 801894c:	2000      	movs	r0, #0
 801894e:	f005 fa9f 	bl	801de90 <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	3310      	adds	r3, #16
 8018956:	0019      	movs	r1, r3
 8018958:	1cbb      	adds	r3, r7, #2
 801895a:	881b      	ldrh	r3, [r3, #0]
 801895c:	687a      	ldr	r2, [r7, #4]
 801895e:	2000      	movs	r0, #0
 8018960:	f005 fa96 	bl	801de90 <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return BOOL_TRUE;
 8018964:	2301      	movs	r3, #1
}
 8018966:	0018      	movs	r0, r3
 8018968:	46bd      	mov	sp, r7
 801896a:	b009      	add	sp, #36	; 0x24
 801896c:	bd90      	pop	{r4, r7, pc}
 801896e:	46c0      	nop			; (mov r8, r8)
 8018970:	ffffa5fc 	.word	0xffffa5fc

08018974 <eeprom_read_config>:
 * ---> Configuration (*) here
 * ---> UserLand
 * BypassTest option allows to read the configuration even if the size has changed an dcrc is invalid
 * Version change is detected with a normal read (bypassTest=BOOL_TRUE), get a False with versiuonR != 0
 */
itsdk_bool_e eeprom_read_config(void * data, uint16_t len, uint8_t version, uint8_t * versionR, itsdk_bool_e bypassTest) {
 8018974:	b5b0      	push	{r4, r5, r7, lr}
 8018976:	b08a      	sub	sp, #40	; 0x28
 8018978:	af00      	add	r7, sp, #0
 801897a:	60f8      	str	r0, [r7, #12]
 801897c:	0008      	movs	r0, r1
 801897e:	0011      	movs	r1, r2
 8018980:	607b      	str	r3, [r7, #4]
 8018982:	230a      	movs	r3, #10
 8018984:	18fb      	adds	r3, r7, r3
 8018986:	1c02      	adds	r2, r0, #0
 8018988:	801a      	strh	r2, [r3, #0]
 801898a:	2309      	movs	r3, #9
 801898c:	18fb      	adds	r3, r7, r3
 801898e:	1c0a      	adds	r2, r1, #0
 8018990:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 8018992:	2300      	movs	r3, #0
 8018994:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 8018996:	2310      	movs	r3, #16
 8018998:	18fb      	adds	r3, r7, r3
 801899a:	0018      	movs	r0, r3
 801899c:	f000 f862 	bl	8018a64 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 80189a0:	6939      	ldr	r1, [r7, #16]
 80189a2:	2414      	movs	r4, #20
 80189a4:	193a      	adds	r2, r7, r4
 80189a6:	2310      	movs	r3, #16
 80189a8:	2000      	movs	r0, #0
 80189aa:	f005 fb15 	bl	801dfd8 <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC_CONFIG ) {
 80189ae:	193b      	adds	r3, r7, r4
 80189b0:	881b      	ldrh	r3, [r3, #0]
 80189b2:	4a2b      	ldr	r2, [pc, #172]	; (8018a60 <eeprom_read_config+0xec>)
 80189b4:	4293      	cmp	r3, r2
 80189b6:	d004      	beq.n	80189c2 <eeprom_read_config+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	2200      	movs	r2, #0
 80189bc:	701a      	strb	r2, [r3, #0]
		return BOOL_FALSE;
 80189be:	2300      	movs	r3, #0
 80189c0:	e049      	b.n	8018a56 <eeprom_read_config+0xe2>
	}
	*versionR=t.version;
 80189c2:	2114      	movs	r1, #20
 80189c4:	187b      	adds	r3, r7, r1
 80189c6:	789a      	ldrb	r2, [r3, #2]
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	701a      	strb	r2, [r3, #0]

	if ( t.version != version ) {
 80189cc:	187b      	adds	r3, r7, r1
 80189ce:	789b      	ldrb	r3, [r3, #2]
 80189d0:	2209      	movs	r2, #9
 80189d2:	18ba      	adds	r2, r7, r2
 80189d4:	7812      	ldrb	r2, [r2, #0]
 80189d6:	429a      	cmp	r2, r3
 80189d8:	d001      	beq.n	80189de <eeprom_read_config+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return BOOL_FALSE;
 80189da:	2300      	movs	r3, #0
 80189dc:	e03b      	b.n	8018a56 <eeprom_read_config+0xe2>
	}

	if ( t.size != len && ! bypassTest ) {
 80189de:	2314      	movs	r3, #20
 80189e0:	18fb      	adds	r3, r7, r3
 80189e2:	889b      	ldrh	r3, [r3, #4]
 80189e4:	220a      	movs	r2, #10
 80189e6:	18ba      	adds	r2, r7, r2
 80189e8:	8812      	ldrh	r2, [r2, #0]
 80189ea:	429a      	cmp	r2, r3
 80189ec:	d009      	beq.n	8018a02 <eeprom_read_config+0x8e>
 80189ee:	2330      	movs	r3, #48	; 0x30
 80189f0:	2208      	movs	r2, #8
 80189f2:	4694      	mov	ip, r2
 80189f4:	44bc      	add	ip, r7
 80189f6:	4463      	add	r3, ip
 80189f8:	781b      	ldrb	r3, [r3, #0]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d101      	bne.n	8018a02 <eeprom_read_config+0x8e>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return BOOL_FALSE;
 80189fe:	2300      	movs	r3, #0
 8018a00:	e029      	b.n	8018a56 <eeprom_read_config+0xe2>
	} else {
		len = t.size;
 8018a02:	200a      	movs	r0, #10
 8018a04:	183b      	adds	r3, r7, r0
 8018a06:	2514      	movs	r5, #20
 8018a08:	197a      	adds	r2, r7, r5
 8018a0a:	8892      	ldrh	r2, [r2, #4]
 8018a0c:	801a      	strh	r2, [r3, #0]
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8018a0e:	693b      	ldr	r3, [r7, #16]
 8018a10:	3310      	adds	r3, #16
 8018a12:	0019      	movs	r1, r3
 8018a14:	0004      	movs	r4, r0
 8018a16:	183b      	adds	r3, r7, r0
 8018a18:	881b      	ldrh	r3, [r3, #0]
 8018a1a:	68fa      	ldr	r2, [r7, #12]
 8018a1c:	2000      	movs	r0, #0
 8018a1e:	f005 fadb 	bl	801dfd8 <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 8018a22:	0020      	movs	r0, r4
 8018a24:	183b      	adds	r3, r7, r0
 8018a26:	881a      	ldrh	r2, [r3, #0]
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	0011      	movs	r1, r2
 8018a2c:	0018      	movs	r0, r3
 8018a2e:	f003 fc41 	bl	801c2b4 <itsdk_computeCRC32>
 8018a32:	0003      	movs	r3, r0
 8018a34:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc && ! bypassTest ) {
 8018a36:	197b      	adds	r3, r7, r5
 8018a38:	689b      	ldr	r3, [r3, #8]
 8018a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	d009      	beq.n	8018a54 <eeprom_read_config+0xe0>
 8018a40:	2330      	movs	r3, #48	; 0x30
 8018a42:	2208      	movs	r2, #8
 8018a44:	4694      	mov	ip, r2
 8018a46:	44bc      	add	ip, r7
 8018a48:	4463      	add	r3, ip
 8018a4a:	781b      	ldrb	r3, [r3, #0]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d101      	bne.n	8018a54 <eeprom_read_config+0xe0>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return BOOL_FALSE;
 8018a50:	2300      	movs	r3, #0
 8018a52:	e000      	b.n	8018a56 <eeprom_read_config+0xe2>
	}

	return BOOL_TRUE;
 8018a54:	2301      	movs	r3, #1
}
 8018a56:	0018      	movs	r0, r3
 8018a58:	46bd      	mov	sp, r7
 8018a5a:	b00a      	add	sp, #40	; 0x28
 8018a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8018a5e:	46c0      	nop			; (mov r8, r8)
 8018a60:	0000a5fc 	.word	0x0000a5fc

08018a64 <eeprom_getConfigOffset>:

/**
 * Compute the EEPROM Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
itsdk_bool_e eeprom_getConfigOffset(uint32_t * _offset) {
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b086      	sub	sp, #24
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	613b      	str	r3, [r7, #16]
 8018a70:	2300      	movs	r3, #0
 8018a72:	60fb      	str	r3, [r7, #12]
 8018a74:	2300      	movs	r3, #0
 8018a76:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 8018a78:	2310      	movs	r3, #16
 8018a7a:	18fb      	adds	r3, r7, r3
 8018a7c:	0018      	movs	r0, r3
 8018a7e:	f000 fde6 	bl	801964e <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 8018a82:	230c      	movs	r3, #12
 8018a84:	18fb      	adds	r3, r7, r3
 8018a86:	0018      	movs	r0, r3
 8018a88:	f002 fec9 	bl	801b81e <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	681a      	ldr	r2, [r3, #0]
 8018a90:	6939      	ldr	r1, [r7, #16]
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	18c9      	adds	r1, r1, r3
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	18cb      	adds	r3, r1, r3
 8018a9a:	18d2      	adds	r2, r2, r3
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	601a      	str	r2, [r3, #0]
  return BOOL_TRUE;
 8018aa0:	2301      	movs	r3, #1
}
 8018aa2:	0018      	movs	r0, r3
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	b006      	add	sp, #24
 8018aa8:	bd80      	pop	{r7, pc}

08018aaa <eeprom_getConfigSize>:

/**
 * Get the EEprom config size from the config header
 * it includes the header size
 */
itsdk_bool_e eeprom_getConfigSize(uint32_t * _size) {
 8018aaa:	b590      	push	{r4, r7, lr}
 8018aac:	b089      	sub	sp, #36	; 0x24
 8018aae:	af00      	add	r7, sp, #0
 8018ab0:	6078      	str	r0, [r7, #4]
	t_eeprom_entry t;

	uint32_t offset = 0;
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 8018ab6:	230c      	movs	r3, #12
 8018ab8:	18fb      	adds	r3, r7, r3
 8018aba:	0018      	movs	r0, r3
 8018abc:	f7ff ffd2 	bl	8018a64 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8018ac0:	68f9      	ldr	r1, [r7, #12]
 8018ac2:	2410      	movs	r4, #16
 8018ac4:	193a      	adds	r2, r7, r4
 8018ac6:	2310      	movs	r3, #16
 8018ac8:	2000      	movs	r0, #0
 8018aca:	f005 fa85 	bl	801dfd8 <_eeprom_read>

	*_size = sizeof(t) + t.size;
 8018ace:	193b      	adds	r3, r7, r4
 8018ad0:	889b      	ldrh	r3, [r3, #4]
 8018ad2:	3310      	adds	r3, #16
 8018ad4:	001a      	movs	r2, r3
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	601a      	str	r2, [r3, #0]
	return BOOL_TRUE;
 8018ada:	2301      	movs	r3, #1
}
 8018adc:	0018      	movs	r0, r3
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	b009      	add	sp, #36	; 0x24
 8018ae2:	bd90      	pop	{r4, r7, pc}

08018ae4 <eeprom_clearAllEprom>:
}

/**
 * Clear (write 0) into the whole BANK0
 */
void eeprom_clearAllEprom() {
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b082      	sub	sp, #8
 8018ae8:	af00      	add	r7, sp, #0
	uint32_t v  = 0;
 8018aea:	2300      	movs	r3, #0
 8018aec:	603b      	str	r3, [r7, #0]
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8018aee:	2300      	movs	r3, #0
 8018af0:	607b      	str	r3, [r7, #4]
 8018af2:	e008      	b.n	8018b06 <eeprom_clearAllEprom+0x22>
		_eeprom_write(ITDT_EEPROM_BANK0, i, (void *) &v, sizeof(v));
 8018af4:	6879      	ldr	r1, [r7, #4]
 8018af6:	003a      	movs	r2, r7
 8018af8:	2304      	movs	r3, #4
 8018afa:	2000      	movs	r0, #0
 8018afc:	f005 f9c8 	bl	801de90 <_eeprom_write>
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	3304      	adds	r3, #4
 8018b04:	607b      	str	r3, [r7, #4]
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	4a03      	ldr	r2, [pc, #12]	; (8018b18 <eeprom_clearAllEprom+0x34>)
 8018b0a:	4293      	cmp	r3, r2
 8018b0c:	ddf2      	ble.n	8018af4 <eeprom_clearAllEprom+0x10>
	}
}
 8018b0e:	46c0      	nop			; (mov r8, r8)
 8018b10:	46bd      	mov	sp, r7
 8018b12:	b002      	add	sp, #8
 8018b14:	bd80      	pop	{r7, pc}
 8018b16:	46c0      	nop			; (mov r8, r8)
 8018b18:	000017ff 	.word	0x000017ff

08018b1c <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	af00      	add	r7, sp, #0
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,0);
 8018b20:	4b1b      	ldr	r3, [pc, #108]	; (8018b90 <itsdk_config_sdk_resetToFactory+0x74>)
 8018b22:	2100      	movs	r1, #0
 8018b24:	0018      	movs	r0, r3
 8018b26:	f002 fd55 	bl	801b5d4 <itsdk_error_report>

		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 8018b2a:	4b1a      	ldr	r3, [pc, #104]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b2c:	2216      	movs	r2, #22
 8018b2e:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 8018b30:	4b18      	ldr	r3, [pc, #96]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b32:	2218      	movs	r2, #24
 8018b34:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 8018b36:	4b17      	ldr	r3, [pc, #92]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b38:	2202      	movs	r2, #2
 8018b3a:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 8018b3c:	4b15      	ldr	r3, [pc, #84]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b3e:	7a9a      	ldrb	r2, [r3, #10]
 8018b40:	213f      	movs	r1, #63	; 0x3f
 8018b42:	400a      	ands	r2, r1
 8018b44:	1c11      	adds	r1, r2, #0
 8018b46:	2240      	movs	r2, #64	; 0x40
 8018b48:	430a      	orrs	r2, r1
 8018b4a:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 8018b4c:	4b11      	ldr	r3, [pc, #68]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b4e:	7a9a      	ldrb	r2, [r3, #10]
 8018b50:	2130      	movs	r1, #48	; 0x30
 8018b52:	438a      	bics	r2, r1
 8018b54:	1c11      	adds	r1, r2, #0
 8018b56:	2210      	movs	r2, #16
 8018b58:	430a      	orrs	r2, r1
 8018b5a:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 8018b5c:	4b0d      	ldr	r3, [pc, #52]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b5e:	7a9a      	ldrb	r2, [r3, #10]
 8018b60:	2103      	movs	r1, #3
 8018b62:	438a      	bics	r2, r1
 8018b64:	1c11      	adds	r1, r2, #0
 8018b66:	2201      	movs	r2, #1
 8018b68:	430a      	orrs	r2, r1
 8018b6a:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 8018b6c:	4b09      	ldr	r3, [pc, #36]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b6e:	7a9a      	ldrb	r2, [r3, #10]
 8018b70:	210c      	movs	r1, #12
 8018b72:	438a      	bics	r2, r1
 8018b74:	1c11      	adds	r1, r2, #0
 8018b76:	2204      	movs	r2, #4
 8018b78:	430a      	orrs	r2, r1
 8018b7a:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 8018b7c:	4b05      	ldr	r3, [pc, #20]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b7e:	2200      	movs	r2, #0
 8018b80:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 8018b82:	4b04      	ldr	r3, [pc, #16]	; (8018b94 <itsdk_config_sdk_resetToFactory+0x78>)
 8018b84:	2220      	movs	r2, #32
 8018b86:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 8018b88:	2302      	movs	r3, #2
	}
 8018b8a:	0018      	movs	r0, r3
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	bd80      	pop	{r7, pc}
 8018b90:	10000073 	.word	0x10000073
 8018b94:	20001540 	.word	0x20001540

08018b98 <itsdk_config_app_resetToFactory>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overide - reset the app to factory default
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8018b9c:	4b05      	ldr	r3, [pc, #20]	; (8018bb4 <itsdk_config_app_resetToFactory+0x1c>)
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8018ba2:	4b05      	ldr	r3, [pc, #20]	; (8018bb8 <itsdk_config_app_resetToFactory+0x20>)
 8018ba4:	2100      	movs	r1, #0
 8018ba6:	0018      	movs	r0, r3
 8018ba8:	f002 fd14 	bl	801b5d4 <itsdk_error_report>
			return CONFIG_FAILED;
 8018bac:	2304      	movs	r3, #4
		}
 8018bae:	0018      	movs	r0, r3
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}
 8018bb4:	20001540 	.word	0x20001540
 8018bb8:	40000070 	.word	0x40000070

08018bbc <itsdk_config_app_upgradeConfiguration>:
		/**
		 * This function need to be overide - upgrade the app configuration
		 */
		__weak itsdk_config_ret_e itsdk_config_app_upgradeConfiguration() {
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8018bc0:	4b05      	ldr	r3, [pc, #20]	; (8018bd8 <itsdk_config_app_upgradeConfiguration+0x1c>)
 8018bc2:	2201      	movs	r2, #1
 8018bc4:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8018bc6:	4b05      	ldr	r3, [pc, #20]	; (8018bdc <itsdk_config_app_upgradeConfiguration+0x20>)
 8018bc8:	2100      	movs	r1, #0
 8018bca:	0018      	movs	r0, r3
 8018bcc:	f002 fd02 	bl	801b5d4 <itsdk_error_report>
			return CONFIG_FAILED;
 8018bd0:	2304      	movs	r3, #4
		}
 8018bd2:	0018      	movs	r0, r3
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}
 8018bd8:	20001540 	.word	0x20001540
 8018bdc:	40000070 	.word	0x40000070

08018be0 <itsdk_config_resetToFactory>:
	#endif

	/**
	 * Reset to factory default update eeprom & shadow
	 */
	itsdk_config_ret_e itsdk_config_resetToFactory() {
 8018be0:	b5b0      	push	{r4, r5, r7, lr}
 8018be2:	af00      	add	r7, sp, #0
		 itsdk_config_sdk_resetToFactory();
 8018be4:	f7ff ff9a 	bl	8018b1c <itsdk_config_sdk_resetToFactory>
		 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		 itsdk_config_app_resetToFactory();
 8018be8:	f7ff ffd6 	bl	8018b98 <itsdk_config_app_resetToFactory>
		 #endif
		 #if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
		 eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8018bec:	4b0b      	ldr	r3, [pc, #44]	; (8018c1c <itsdk_config_resetToFactory+0x3c>)
 8018bee:	2201      	movs	r2, #1
 8018bf0:	211c      	movs	r1, #28
 8018bf2:	0018      	movs	r0, r3
 8018bf4:	f7ff fe7e 	bl	80188f4 <eeprom_write_config>
		 #endif
	     bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8018bf8:	4b09      	ldr	r3, [pc, #36]	; (8018c20 <itsdk_config_resetToFactory+0x40>)
 8018bfa:	4a08      	ldr	r2, [pc, #32]	; (8018c1c <itsdk_config_resetToFactory+0x3c>)
 8018bfc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018bfe:	c313      	stmia	r3!, {r0, r1, r4}
 8018c00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018c02:	c313      	stmia	r3!, {r0, r1, r4}
 8018c04:	6812      	ldr	r2, [r2, #0]
 8018c06:	601a      	str	r2, [r3, #0]
		 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8018c08:	4b06      	ldr	r3, [pc, #24]	; (8018c24 <itsdk_config_resetToFactory+0x44>)
 8018c0a:	2103      	movs	r1, #3
 8018c0c:	0018      	movs	r0, r3
 8018c0e:	f002 fce1 	bl	801b5d4 <itsdk_error_report>
	     return CONFIG_SUCCESS;
 8018c12:	2300      	movs	r3, #0
	}
 8018c14:	0018      	movs	r0, r3
 8018c16:	46bd      	mov	sp, r7
 8018c18:	bdb0      	pop	{r4, r5, r7, pc}
 8018c1a:	46c0      	nop			; (mov r8, r8)
 8018c1c:	20001540 	.word	0x20001540
 8018c20:	20001524 	.word	0x20001524
 8018c24:	50000071 	.word	0x50000071

08018c28 <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 8018c28:	b590      	push	{r4, r7, lr}
 8018c2a:	b087      	sub	sp, #28
 8018c2c:	af02      	add	r7, sp, #8
 8018c2e:	0002      	movs	r2, r0
 8018c30:	1dfb      	adds	r3, r7, #7
 8018c32:	701a      	strb	r2, [r3, #0]

#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_configMng.console_private = _itsdk_config_consolePriv;
 8018c34:	4b60      	ldr	r3, [pc, #384]	; (8018db8 <itsdk_config_loadConfiguration+0x190>)
 8018c36:	4a61      	ldr	r2, [pc, #388]	; (8018dbc <itsdk_config_loadConfiguration+0x194>)
 8018c38:	601a      	str	r2, [r3, #0]
	__console_configMng.console_public = _itsdk_config_consolePublic;
 8018c3a:	4b5f      	ldr	r3, [pc, #380]	; (8018db8 <itsdk_config_loadConfiguration+0x190>)
 8018c3c:	4a60      	ldr	r2, [pc, #384]	; (8018dc0 <itsdk_config_loadConfiguration+0x198>)
 8018c3e:	605a      	str	r2, [r3, #4]
	__console_configMng.next = NULL;
 8018c40:	4b5d      	ldr	r3, [pc, #372]	; (8018db8 <itsdk_config_loadConfiguration+0x190>)
 8018c42:	2200      	movs	r2, #0
 8018c44:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_configMng);
 8018c46:	4b5c      	ldr	r3, [pc, #368]	; (8018db8 <itsdk_config_loadConfiguration+0x190>)
 8018c48:	0018      	movs	r0, r3
 8018c4a:	f7ff fe21 	bl	8018890 <itsdk_console_registerCommand>
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v;
  uint8_t requestFactoryReset = 0;
 8018c4e:	230f      	movs	r3, #15
 8018c50:	18fb      	adds	r3, r7, r3
 8018c52:	2200      	movs	r2, #0
 8018c54:	701a      	strb	r2, [r3, #0]
  uint8_t configUpdated = 0;
 8018c56:	230e      	movs	r3, #14
 8018c58:	18fb      	adds	r3, r7, r3
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	701a      	strb	r2, [r3, #0]

  if ( mode != CONFIG_FORCE_TO_FACTORY ) {
 8018c5e:	1dfb      	adds	r3, r7, #7
 8018c60:	781b      	ldrb	r3, [r3, #0]
 8018c62:	2b01      	cmp	r3, #1
 8018c64:	d100      	bne.n	8018c68 <itsdk_config_loadConfiguration+0x40>
 8018c66:	e071      	b.n	8018d4c <itsdk_config_loadConfiguration+0x124>
     if ( ! eeprom_read_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION,&v, true) ) {
 8018c68:	230d      	movs	r3, #13
 8018c6a:	18fa      	adds	r2, r7, r3
 8018c6c:	4855      	ldr	r0, [pc, #340]	; (8018dc4 <itsdk_config_loadConfiguration+0x19c>)
 8018c6e:	2301      	movs	r3, #1
 8018c70:	9300      	str	r3, [sp, #0]
 8018c72:	0013      	movs	r3, r2
 8018c74:	2201      	movs	r2, #1
 8018c76:	211c      	movs	r1, #28
 8018c78:	f7ff fe7c 	bl	8018974 <eeprom_read_config>
 8018c7c:	1e03      	subs	r3, r0, #0
 8018c7e:	d11c      	bne.n	8018cba <itsdk_config_loadConfiguration+0x92>
		 // failed to read configuration
		 if ( v == 0 ) {
 8018c80:	230d      	movs	r3, #13
 8018c82:	18fb      	adds	r3, r7, r3
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d109      	bne.n	8018c9e <itsdk_config_loadConfiguration+0x76>
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMAGIC,0);
 8018c8a:	4b4f      	ldr	r3, [pc, #316]	; (8018dc8 <itsdk_config_loadConfiguration+0x1a0>)
 8018c8c:	2100      	movs	r1, #0
 8018c8e:	0018      	movs	r0, r3
 8018c90:	f002 fca0 	bl	801b5d4 <itsdk_error_report>
			requestFactoryReset=1;
 8018c94:	230f      	movs	r3, #15
 8018c96:	18fb      	adds	r3, r7, r3
 8018c98:	2201      	movs	r2, #1
 8018c9a:	701a      	strb	r2, [r3, #0]
 8018c9c:	e00d      	b.n	8018cba <itsdk_config_loadConfiguration+0x92>
		 } else if ( v!= ITSDK_CONFIGURATION_MNG_VERSION ) {
 8018c9e:	230d      	movs	r3, #13
 8018ca0:	18fb      	adds	r3, r7, r3
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	2b01      	cmp	r3, #1
 8018ca6:	d008      	beq.n	8018cba <itsdk_config_loadConfiguration+0x92>
  		    // magic is invalid or MNG version has changed... impossible to migrate
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMNGV,0);
 8018ca8:	4b48      	ldr	r3, [pc, #288]	; (8018dcc <itsdk_config_loadConfiguration+0x1a4>)
 8018caa:	2100      	movs	r1, #0
 8018cac:	0018      	movs	r0, r3
 8018cae:	f002 fc91 	bl	801b5d4 <itsdk_error_report>
			requestFactoryReset=1;
 8018cb2:	230f      	movs	r3, #15
 8018cb4:	18fb      	adds	r3, r7, r3
 8018cb6:	2201      	movs	r2, #1
 8018cb8:	701a      	strb	r2, [r3, #0]
	  }
   	  // we have a config loaded but it can be a wrong one
	  // Process SDK
      //   management remains the same but the version & size may have changed.
	  //   migration is possible
	  if ( requestFactoryReset == 0 && (itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION || itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) ) {
 8018cba:	230f      	movs	r3, #15
 8018cbc:	18fb      	adds	r3, r7, r3
 8018cbe:	781b      	ldrb	r3, [r3, #0]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d121      	bne.n	8018d08 <itsdk_config_loadConfiguration+0xe0>
 8018cc4:	4b3f      	ldr	r3, [pc, #252]	; (8018dc4 <itsdk_config_loadConfiguration+0x19c>)
 8018cc6:	781b      	ldrb	r3, [r3, #0]
 8018cc8:	2b16      	cmp	r3, #22
 8018cca:	d103      	bne.n	8018cd4 <itsdk_config_loadConfiguration+0xac>
 8018ccc:	4b3d      	ldr	r3, [pc, #244]	; (8018dc4 <itsdk_config_loadConfiguration+0x19c>)
 8018cce:	885b      	ldrh	r3, [r3, #2]
 8018cd0:	2b18      	cmp	r3, #24
 8018cd2:	d019      	beq.n	8018d08 <itsdk_config_loadConfiguration+0xe0>
	     // SDK version has changed or compilation option has changed
	     if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 8018cd4:	4b3b      	ldr	r3, [pc, #236]	; (8018dc4 <itsdk_config_loadConfiguration+0x19c>)
 8018cd6:	885b      	ldrh	r3, [r3, #2]
 8018cd8:	2b18      	cmp	r3, #24
 8018cda:	d009      	beq.n	8018cf0 <itsdk_config_loadConfiguration+0xc8>
	 	    // and the size has changed so we need to force a reset
		    requestFactoryReset=1;
 8018cdc:	230f      	movs	r3, #15
 8018cde:	18fb      	adds	r3, r7, r3
 8018ce0:	2201      	movs	r2, #1
 8018ce2:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,0);
 8018ce4:	4b3a      	ldr	r3, [pc, #232]	; (8018dd0 <itsdk_config_loadConfiguration+0x1a8>)
 8018ce6:	2100      	movs	r1, #0
 8018ce8:	0018      	movs	r0, r3
 8018cea:	f002 fc73 	bl	801b5d4 <itsdk_error_report>
 8018cee:	e00b      	b.n	8018d08 <itsdk_config_loadConfiguration+0xe0>
		 } else {
		    // migration is possible ...
			//  if ( itsdk_config.sdk.version < 0x17 ) {
			//  }
		    itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 8018cf0:	4b34      	ldr	r3, [pc, #208]	; (8018dc4 <itsdk_config_loadConfiguration+0x19c>)
 8018cf2:	2216      	movs	r2, #22
 8018cf4:	701a      	strb	r2, [r3, #0]

		    configUpdated = 1;
 8018cf6:	230e      	movs	r3, #14
 8018cf8:	18fb      	adds	r3, r7, r3
 8018cfa:	2201      	movs	r2, #1
 8018cfc:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKCNF_UPGRADED,ITSDK_CONFIGURATION_SDK_VERSION);
 8018cfe:	4b35      	ldr	r3, [pc, #212]	; (8018dd4 <itsdk_config_loadConfiguration+0x1ac>)
 8018d00:	2116      	movs	r1, #22
 8018d02:	0018      	movs	r0, r3
 8018d04:	f002 fc66 	bl	801b5d4 <itsdk_error_report>
		 }
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( requestFactoryReset == 0 && itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 8018d08:	230f      	movs	r3, #15
 8018d0a:	18fb      	adds	r3, r7, r3
 8018d0c:	781b      	ldrb	r3, [r3, #0]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d120      	bne.n	8018d54 <itsdk_config_loadConfiguration+0x12c>
 8018d12:	4b2c      	ldr	r3, [pc, #176]	; (8018dc4 <itsdk_config_loadConfiguration+0x19c>)
 8018d14:	7e1b      	ldrb	r3, [r3, #24]
 8018d16:	2b01      	cmp	r3, #1
 8018d18:	d01c      	beq.n	8018d54 <itsdk_config_loadConfiguration+0x12c>
		 // version has changed an upgrade can be possible, lets application level to decide.
		 if ( itsdk_config_app_upgradeConfiguration() == CONFIG_UPGRADED ) {
 8018d1a:	f7ff ff4f 	bl	8018bbc <itsdk_config_app_upgradeConfiguration>
 8018d1e:	0003      	movs	r3, r0
 8018d20:	2b03      	cmp	r3, #3
 8018d22:	d109      	bne.n	8018d38 <itsdk_config_loadConfiguration+0x110>
			 // at least the version has been upgraded
			 configUpdated = 1;
 8018d24:	230e      	movs	r3, #14
 8018d26:	18fb      	adds	r3, r7, r3
 8018d28:	2201      	movs	r2, #1
 8018d2a:	701a      	strb	r2, [r3, #0]
			 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,ITSDK_CONFIGURATION_APP_VERSION);
 8018d2c:	4b2a      	ldr	r3, [pc, #168]	; (8018dd8 <itsdk_config_loadConfiguration+0x1b0>)
 8018d2e:	2101      	movs	r1, #1
 8018d30:	0018      	movs	r0, r3
 8018d32:	f002 fc4f 	bl	801b5d4 <itsdk_error_report>
 8018d36:	e00d      	b.n	8018d54 <itsdk_config_loadConfiguration+0x12c>
		 } else {
			 requestFactoryReset = 1;
 8018d38:	230f      	movs	r3, #15
 8018d3a:	18fb      	adds	r3, r7, r3
 8018d3c:	2201      	movs	r2, #1
 8018d3e:	701a      	strb	r2, [r3, #0]
  		     ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,1);
 8018d40:	4b23      	ldr	r3, [pc, #140]	; (8018dd0 <itsdk_config_loadConfiguration+0x1a8>)
 8018d42:	2101      	movs	r1, #1
 8018d44:	0018      	movs	r0, r3
 8018d46:	f002 fc45 	bl	801b5d4 <itsdk_error_report>
 8018d4a:	e003      	b.n	8018d54 <itsdk_config_loadConfiguration+0x12c>
		 }
      }
	  #endif

   } else requestFactoryReset = 1;
 8018d4c:	230f      	movs	r3, #15
 8018d4e:	18fb      	adds	r3, r7, r3
 8018d50:	2201      	movs	r2, #1
 8018d52:	701a      	strb	r2, [r3, #0]


   if ( requestFactoryReset == 1 ) {
 8018d54:	230f      	movs	r3, #15
 8018d56:	18fb      	adds	r3, r7, r3
 8018d58:	781b      	ldrb	r3, [r3, #0]
 8018d5a:	2b01      	cmp	r3, #1
 8018d5c:	d10c      	bne.n	8018d78 <itsdk_config_loadConfiguration+0x150>
	  itsdk_config_sdk_resetToFactory();
 8018d5e:	f7ff fedd 	bl	8018b1c <itsdk_config_sdk_resetToFactory>
	  itsdk_config_app_resetToFactory();
 8018d62:	f7ff ff19 	bl	8018b98 <itsdk_config_app_resetToFactory>
	  configUpdated = 1;
 8018d66:	230e      	movs	r3, #14
 8018d68:	18fb      	adds	r3, r7, r3
 8018d6a:	2201      	movs	r2, #1
 8018d6c:	701a      	strb	r2, [r3, #0]
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8018d6e:	4b1b      	ldr	r3, [pc, #108]	; (8018ddc <itsdk_config_loadConfiguration+0x1b4>)
 8018d70:	2103      	movs	r1, #3
 8018d72:	0018      	movs	r0, r3
 8018d74:	f002 fc2e 	bl	801b5d4 <itsdk_error_report>
   }

   if (configUpdated == 1) {
 8018d78:	230e      	movs	r3, #14
 8018d7a:	18fb      	adds	r3, r7, r3
 8018d7c:	781b      	ldrb	r3, [r3, #0]
 8018d7e:	2b01      	cmp	r3, #1
 8018d80:	d105      	bne.n	8018d8e <itsdk_config_loadConfiguration+0x166>
	  // need to store the configuration
      eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8018d82:	4b10      	ldr	r3, [pc, #64]	; (8018dc4 <itsdk_config_loadConfiguration+0x19c>)
 8018d84:	2201      	movs	r2, #1
 8018d86:	211c      	movs	r1, #28
 8018d88:	0018      	movs	r0, r3
 8018d8a:	f7ff fdb3 	bl	80188f4 <eeprom_write_config>
   }
   bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8018d8e:	4b14      	ldr	r3, [pc, #80]	; (8018de0 <itsdk_config_loadConfiguration+0x1b8>)
 8018d90:	4a0c      	ldr	r2, [pc, #48]	; (8018dc4 <itsdk_config_loadConfiguration+0x19c>)
 8018d92:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018d94:	c313      	stmia	r3!, {r0, r1, r4}
 8018d96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018d98:	c313      	stmia	r3!, {r0, r1, r4}
 8018d9a:	6812      	ldr	r2, [r2, #0]
 8018d9c:	601a      	str	r2, [r3, #0]
	  itsdk_config_app_resetToFactory();
    #endif
      bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 #endif

   return ( requestFactoryReset == 1 )?CONFIG_RESTORED_FROM_FACTORY:CONFIG_LOADED;
 8018d9e:	230f      	movs	r3, #15
 8018da0:	18fb      	adds	r3, r7, r3
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	2b01      	cmp	r3, #1
 8018da6:	d101      	bne.n	8018dac <itsdk_config_loadConfiguration+0x184>
 8018da8:	2302      	movs	r3, #2
 8018daa:	e000      	b.n	8018dae <itsdk_config_loadConfiguration+0x186>
 8018dac:	2301      	movs	r3, #1

}
 8018dae:	0018      	movs	r0, r3
 8018db0:	46bd      	mov	sp, r7
 8018db2:	b005      	add	sp, #20
 8018db4:	bd90      	pop	{r4, r7, pc}
 8018db6:	46c0      	nop			; (mov r8, r8)
 8018db8:	20001070 	.word	0x20001070
 8018dbc:	08018fd9 	.word	0x08018fd9
 8018dc0:	08018e91 	.word	0x08018e91
 8018dc4:	20001540 	.word	0x20001540
 8018dc8:	40000076 	.word	0x40000076
 8018dcc:	40000077 	.word	0x40000077
 8018dd0:	50000078 	.word	0x50000078
 8018dd4:	10000074 	.word	0x10000074
 8018dd8:	10000075 	.word	0x10000075
 8018ddc:	50000071 	.word	0x50000071
 8018de0:	20001524 	.word	0x20001524

08018de4 <itsdk_config_app_commitConfiguration>:
// CONFIG SHADOW
// ====================================================================================================

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC

__weak itsdk_config_ret_e itsdk_config_app_commitConfiguration() {
 8018de4:	b580      	push	{r7, lr}
 8018de6:	af00      	add	r7, sp, #0
	return CONFIG_SUCCESS;
 8018de8:	2300      	movs	r3, #0
}
 8018dea:	0018      	movs	r0, r3
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}

08018df0 <itsdk_config_commitConfiguration>:

/**
 * Commit a shadow configuration into the standard config.
 * Save it
 */
itsdk_config_ret_e itsdk_config_commitConfiguration(itsdk_config_commit_mode_e mode) {
 8018df0:	b5b0      	push	{r4, r5, r7, lr}
 8018df2:	b084      	sub	sp, #16
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	0002      	movs	r2, r0
 8018df8:	1dfb      	adds	r3, r7, #7
 8018dfa:	701a      	strb	r2, [r3, #0]

 itsdk_config_ret_e r = itsdk_config_app_commitConfiguration();
 8018dfc:	250f      	movs	r5, #15
 8018dfe:	197c      	adds	r4, r7, r5
 8018e00:	f7ff fff0 	bl	8018de4 <itsdk_config_app_commitConfiguration>
 8018e04:	0003      	movs	r3, r0
 8018e06:	7023      	strb	r3, [r4, #0]
 if ( r != CONFIG_SUCCESS ) return r;
 8018e08:	197b      	adds	r3, r7, r5
 8018e0a:	781b      	ldrb	r3, [r3, #0]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d003      	beq.n	8018e18 <itsdk_config_commitConfiguration+0x28>
 8018e10:	230f      	movs	r3, #15
 8018e12:	18fb      	adds	r3, r7, r3
 8018e14:	781b      	ldrb	r3, [r3, #0]
 8018e16:	e023      	b.n	8018e60 <itsdk_config_commitConfiguration+0x70>

 bcopy(&itsdk_config_shadow,&itsdk_config,sizeof(itsdk_configuration_nvm_t));
 8018e18:	4b13      	ldr	r3, [pc, #76]	; (8018e68 <itsdk_config_commitConfiguration+0x78>)
 8018e1a:	4a14      	ldr	r2, [pc, #80]	; (8018e6c <itsdk_config_commitConfiguration+0x7c>)
 8018e1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018e1e:	c313      	stmia	r3!, {r0, r1, r4}
 8018e20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018e22:	c313      	stmia	r3!, {r0, r1, r4}
 8018e24:	6812      	ldr	r2, [r2, #0]
 8018e26:	601a      	str	r2, [r3, #0]
 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_COMMIT_NEW_CONF,0);
 8018e28:	2100      	movs	r1, #0
 8018e2a:	2072      	movs	r0, #114	; 0x72
 8018e2c:	f002 fbd2 	bl	801b5d4 <itsdk_error_report>

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
 if ( mode == CONFIG_COMMIT_SAVE || mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 8018e30:	1dfb      	adds	r3, r7, #7
 8018e32:	781b      	ldrb	r3, [r3, #0]
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	d003      	beq.n	8018e40 <itsdk_config_commitConfiguration+0x50>
 8018e38:	1dfb      	adds	r3, r7, #7
 8018e3a:	781b      	ldrb	r3, [r3, #0]
 8018e3c:	2b02      	cmp	r3, #2
 8018e3e:	d105      	bne.n	8018e4c <itsdk_config_commitConfiguration+0x5c>
     eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8018e40:	4b09      	ldr	r3, [pc, #36]	; (8018e68 <itsdk_config_commitConfiguration+0x78>)
 8018e42:	2201      	movs	r2, #1
 8018e44:	211c      	movs	r1, #28
 8018e46:	0018      	movs	r0, r3
 8018e48:	f7ff fd54 	bl	80188f4 <eeprom_write_config>
 }
 if ( mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 8018e4c:	1dfb      	adds	r3, r7, #7
 8018e4e:	781b      	ldrb	r3, [r3, #0]
 8018e50:	2b02      	cmp	r3, #2
 8018e52:	d104      	bne.n	8018e5e <itsdk_config_commitConfiguration+0x6e>
	 itsdk_delayMs(200);
 8018e54:	20c8      	movs	r0, #200	; 0xc8
 8018e56:	f004 fee1 	bl	801dc1c <itsdk_delayMs>
	 itsdk_reset();
 8018e5a:	f004 fe8d 	bl	801db78 <itsdk_reset>
 }
#endif
 return CONFIG_SUCCESS;
 8018e5e:	2300      	movs	r3, #0
}
 8018e60:	0018      	movs	r0, r3
 8018e62:	46bd      	mov	sp, r7
 8018e64:	b004      	add	sp, #16
 8018e66:	bdb0      	pop	{r4, r5, r7, pc}
 8018e68:	20001540 	.word	0x20001540
 8018e6c:	20001524 	.word	0x20001524

08018e70 <itsdk_config_app_printConfig>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak void itsdk_config_app_printConfig(itsdk_configuration_nvm_t * c) {
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b082      	sub	sp, #8
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8018e78:	4b04      	ldr	r3, [pc, #16]	; (8018e8c <itsdk_config_app_printConfig+0x1c>)
 8018e7a:	2100      	movs	r1, #0
 8018e7c:	0018      	movs	r0, r3
 8018e7e:	f002 fba9 	bl	801b5d4 <itsdk_error_report>
			return;
 8018e82:	46c0      	nop			; (mov r8, r8)
		}
 8018e84:	46bd      	mov	sp, r7
 8018e86:	b002      	add	sp, #8
 8018e88:	bd80      	pop	{r7, pc}
 8018e8a:	46c0      	nop			; (mov r8, r8)
 8018e8c:	40000070 	.word	0x40000070

08018e90 <_itsdk_config_consolePublic>:

	#endif // ITSDK_WITH_CONFIGURATION_APP

	static itsdk_console_return_e _itsdk_config_consolePublic(char * buffer, uint8_t sz) {
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b084      	sub	sp, #16
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	000a      	movs	r2, r1
 8018e9a:	1cfb      	adds	r3, r7, #3
 8018e9c:	701a      	strb	r2, [r3, #0]
	   if ( sz == 1 ) {
 8018e9e:	1cfb      	adds	r3, r7, #3
 8018ea0:	781b      	ldrb	r3, [r3, #0]
 8018ea2:	2b01      	cmp	r3, #1
 8018ea4:	d000      	beq.n	8018ea8 <_itsdk_config_consolePublic+0x18>
 8018ea6:	e074      	b.n	8018f92 <_itsdk_config_consolePublic+0x102>
		  switch(buffer[0]){
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	781b      	ldrb	r3, [r3, #0]
 8018eac:	2b43      	cmp	r3, #67	; 0x43
 8018eae:	d012      	beq.n	8018ed6 <_itsdk_config_consolePublic+0x46>
 8018eb0:	2b63      	cmp	r3, #99	; 0x63
 8018eb2:	d010      	beq.n	8018ed6 <_itsdk_config_consolePublic+0x46>
 8018eb4:	2b3f      	cmp	r3, #63	; 0x3f
 8018eb6:	d000      	beq.n	8018eba <_itsdk_config_consolePublic+0x2a>
				  _itsdk_console_printf("OK\r\n");
				}
				return ITSDK_CONSOLE_SUCCES;
				break;
			default:
				break;
 8018eb8:	e06c      	b.n	8018f94 <_itsdk_config_consolePublic+0x104>
				_itsdk_console_printf("--- ConfigMng\r\n");
 8018eba:	4b39      	ldr	r3, [pc, #228]	; (8018fa0 <_itsdk_config_consolePublic+0x110>)
 8018ebc:	0018      	movs	r0, r3
 8018ebe:	f7ff fb27 	bl	8018510 <_itsdk_console_printf>
				_itsdk_console_printf("c          : print config\r\n");
 8018ec2:	4b38      	ldr	r3, [pc, #224]	; (8018fa4 <_itsdk_config_consolePublic+0x114>)
 8018ec4:	0018      	movs	r0, r3
 8018ec6:	f7ff fb23 	bl	8018510 <_itsdk_console_printf>
				_itsdk_console_printf("C          : print shadow config\r\n");
 8018eca:	4b37      	ldr	r3, [pc, #220]	; (8018fa8 <_itsdk_config_consolePublic+0x118>)
 8018ecc:	0018      	movs	r0, r3
 8018ece:	f7ff fb1f 	bl	8018510 <_itsdk_console_printf>
			  return ITSDK_CONSOLE_SUCCES;
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	e05f      	b.n	8018f96 <_itsdk_config_consolePublic+0x106>
					itsdk_configuration_nvm_t * _c = &itsdk_config;
 8018ed6:	4b35      	ldr	r3, [pc, #212]	; (8018fac <_itsdk_config_consolePublic+0x11c>)
 8018ed8:	60fb      	str	r3, [r7, #12]
					if (buffer[0]=='C') _c = &itsdk_config_shadow;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	781b      	ldrb	r3, [r3, #0]
 8018ede:	2b43      	cmp	r3, #67	; 0x43
 8018ee0:	d101      	bne.n	8018ee6 <_itsdk_config_consolePublic+0x56>
 8018ee2:	4b33      	ldr	r3, [pc, #204]	; (8018fb0 <_itsdk_config_consolePublic+0x120>)
 8018ee4:	60fb      	str	r3, [r7, #12]
					_itsdk_console_printf("sdk.version : %02X\r\n",_c->sdk.version);
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	781b      	ldrb	r3, [r3, #0]
 8018eea:	001a      	movs	r2, r3
 8018eec:	4b31      	ldr	r3, [pc, #196]	; (8018fb4 <_itsdk_config_consolePublic+0x124>)
 8018eee:	0011      	movs	r1, r2
 8018ef0:	0018      	movs	r0, r3
 8018ef2:	f7ff fb0d 	bl	8018510 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeNetwork : %d\r\n",_c->sdk.activeNetwork);
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	88db      	ldrh	r3, [r3, #6]
 8018efa:	001a      	movs	r2, r3
 8018efc:	4b2e      	ldr	r3, [pc, #184]	; (8018fb8 <_itsdk_config_consolePublic+0x128>)
 8018efe:	0011      	movs	r1, r2
 8018f00:	0018      	movs	r0, r3
 8018f02:	f7ff fb05 	bl	8018510 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeRegion : %04X\r\n",_c->sdk.activeRegion);
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	891b      	ldrh	r3, [r3, #8]
 8018f0a:	001a      	movs	r2, r3
 8018f0c:	4b2b      	ldr	r3, [pc, #172]	; (8018fbc <_itsdk_config_consolePublic+0x12c>)
 8018f0e:	0011      	movs	r1, r2
 8018f10:	0018      	movs	r0, r3
 8018f12:	f7ff fafd 	bl	8018510 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.adrmode : %d\r\n",_c->sdk.lorawan.adrMode);
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	7a9b      	ldrb	r3, [r3, #10]
 8018f1a:	061b      	lsls	r3, r3, #24
 8018f1c:	0f9b      	lsrs	r3, r3, #30
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	001a      	movs	r2, r3
 8018f22:	4b27      	ldr	r3, [pc, #156]	; (8018fc0 <_itsdk_config_consolePublic+0x130>)
 8018f24:	0011      	movs	r1, r2
 8018f26:	0018      	movs	r0, r3
 8018f28:	f7ff faf2 	bl	8018510 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.devEuiType : %d\r\n",_c->sdk.lorawan.devEuiType);
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	7a9b      	ldrb	r3, [r3, #10]
 8018f30:	069b      	lsls	r3, r3, #26
 8018f32:	0f9b      	lsrs	r3, r3, #30
 8018f34:	b2db      	uxtb	r3, r3
 8018f36:	001a      	movs	r2, r3
 8018f38:	4b22      	ldr	r3, [pc, #136]	; (8018fc4 <_itsdk_config_consolePublic+0x134>)
 8018f3a:	0011      	movs	r1, r2
 8018f3c:	0018      	movs	r0, r3
 8018f3e:	f7ff fae7 	bl	8018510 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.joinMode : %d\r\n",_c->sdk.lorawan.joinMode);
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	7a9b      	ldrb	r3, [r3, #10]
 8018f46:	079b      	lsls	r3, r3, #30
 8018f48:	0f9b      	lsrs	r3, r3, #30
 8018f4a:	b2db      	uxtb	r3, r3
 8018f4c:	001a      	movs	r2, r3
 8018f4e:	4b1e      	ldr	r3, [pc, #120]	; (8018fc8 <_itsdk_config_consolePublic+0x138>)
 8018f50:	0011      	movs	r1, r2
 8018f52:	0018      	movs	r0, r3
 8018f54:	f7ff fadc 	bl	8018510 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.networkType : %d\r\n",_c->sdk.lorawan.networkType);
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	7a9b      	ldrb	r3, [r3, #10]
 8018f5c:	071b      	lsls	r3, r3, #28
 8018f5e:	0f9b      	lsrs	r3, r3, #30
 8018f60:	b2db      	uxtb	r3, r3
 8018f62:	001a      	movs	r2, r3
 8018f64:	4b19      	ldr	r3, [pc, #100]	; (8018fcc <_itsdk_config_consolePublic+0x13c>)
 8018f66:	0011      	movs	r1, r2
 8018f68:	0018      	movs	r0, r3
 8018f6a:	f7ff fad1 	bl	8018510 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.retries : %d\r\n",_c->sdk.lorawan.retries);
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	7adb      	ldrb	r3, [r3, #11]
 8018f72:	001a      	movs	r2, r3
 8018f74:	4b16      	ldr	r3, [pc, #88]	; (8018fd0 <_itsdk_config_consolePublic+0x140>)
 8018f76:	0011      	movs	r1, r2
 8018f78:	0018      	movs	r0, r3
 8018f7a:	f7ff fac9 	bl	8018510 <_itsdk_console_printf>
					   itsdk_config_app_printConfig(_c);
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	0018      	movs	r0, r3
 8018f82:	f7ff ff75 	bl	8018e70 <itsdk_config_app_printConfig>
				  _itsdk_console_printf("OK\r\n");
 8018f86:	4b13      	ldr	r3, [pc, #76]	; (8018fd4 <_itsdk_config_consolePublic+0x144>)
 8018f88:	0018      	movs	r0, r3
 8018f8a:	f7ff fac1 	bl	8018510 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	e001      	b.n	8018f96 <_itsdk_config_consolePublic+0x106>
		  }
	  } //Sz == 1
 8018f92:	46c0      	nop			; (mov r8, r8)
	  return ITSDK_CONSOLE_NOTFOUND;
 8018f94:	2301      	movs	r3, #1
	}
 8018f96:	0018      	movs	r0, r3
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	b004      	add	sp, #16
 8018f9c:	bd80      	pop	{r7, pc}
 8018f9e:	46c0      	nop			; (mov r8, r8)
 8018fa0:	0801fa90 	.word	0x0801fa90
 8018fa4:	0801faa0 	.word	0x0801faa0
 8018fa8:	0801fabc 	.word	0x0801fabc
 8018fac:	20001540 	.word	0x20001540
 8018fb0:	20001524 	.word	0x20001524
 8018fb4:	0801fae0 	.word	0x0801fae0
 8018fb8:	0801faf8 	.word	0x0801faf8
 8018fbc:	0801fb14 	.word	0x0801fb14
 8018fc0:	0801fb30 	.word	0x0801fb30
 8018fc4:	0801fb48 	.word	0x0801fb48
 8018fc8:	0801fb64 	.word	0x0801fb64
 8018fcc:	0801fb80 	.word	0x0801fb80
 8018fd0:	0801fb9c 	.word	0x0801fb9c
 8018fd4:	0801fbb4 	.word	0x0801fbb4

08018fd8 <_itsdk_config_consolePriv>:

static itsdk_console_return_e _itsdk_config_consolePriv(char * buffer, uint8_t sz) {
 8018fd8:	b5b0      	push	{r4, r5, r7, lr}
 8018fda:	b088      	sub	sp, #32
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
 8018fe0:	000a      	movs	r2, r1
 8018fe2:	1cfb      	adds	r3, r7, #3
 8018fe4:	701a      	strb	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	if ( sz == 1 ) {
 8018fe6:	1cfb      	adds	r3, r7, #3
 8018fe8:	781b      	ldrb	r3, [r3, #0]
 8018fea:	2b01      	cmp	r3, #1
 8018fec:	d000      	beq.n	8018ff0 <_itsdk_config_consolePriv+0x18>
 8018fee:	e098      	b.n	8019122 <_itsdk_config_consolePriv+0x14a>
	  switch(buffer[0]){
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	781b      	ldrb	r3, [r3, #0]
 8018ff4:	2b46      	cmp	r3, #70	; 0x46
 8018ff6:	d03b      	beq.n	8019070 <_itsdk_config_consolePriv+0x98>
 8018ff8:	dc02      	bgt.n	8019000 <_itsdk_config_consolePriv+0x28>
 8018ffa:	2b3f      	cmp	r3, #63	; 0x3f
 8018ffc:	d005      	beq.n	801900a <_itsdk_config_consolePriv+0x32>
			  _itsdk_console_printf("OK\r\n");
			 return ITSDK_CONSOLE_SUCCES;
			}
		#endif
		default:
			break;
 8018ffe:	e21c      	b.n	801943a <_itsdk_config_consolePriv+0x462>
	  switch(buffer[0]){
 8019000:	2b53      	cmp	r3, #83	; 0x53
 8019002:	d02c      	beq.n	801905e <_itsdk_config_consolePriv+0x86>
 8019004:	2b6d      	cmp	r3, #109	; 0x6d
 8019006:	d040      	beq.n	801908a <_itsdk_config_consolePriv+0xb2>
			break;
 8019008:	e217      	b.n	801943a <_itsdk_config_consolePriv+0x462>
			  _itsdk_console_printf("S          : commit configuration\r\n");
 801900a:	4bd9      	ldr	r3, [pc, #868]	; (8019370 <_itsdk_config_consolePriv+0x398>)
 801900c:	0018      	movs	r0, r3
 801900e:	f7ff fa7f 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("F          : restore factory default config\r\n");
 8019012:	4bd8      	ldr	r3, [pc, #864]	; (8019374 <_itsdk_config_consolePriv+0x39c>)
 8019014:	0018      	movs	r0, r3
 8019016:	f7ff fa7b 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("m          : see eeprom configuration\r\n");
 801901a:	4bd7      	ldr	r3, [pc, #860]	; (8019378 <_itsdk_config_consolePriv+0x3a0>)
 801901c:	0018      	movs	r0, r3
 801901e:	f7ff fa77 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:N:x     : sdk.activeNetwork 1:SFX 2:LoRa\r\n");
 8019022:	4bd6      	ldr	r3, [pc, #856]	; (801937c <_itsdk_config_consolePriv+0x3a4>)
 8019024:	0018      	movs	r0, r3
 8019026:	f7ff fa73 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:R:xxxx  : sdk.activeRegion __PLWAN_REGION_xx\r\n");
 801902a:	4bd5      	ldr	r3, [pc, #852]	; (8019380 <_itsdk_config_consolePriv+0x3a8>)
 801902c:	0018      	movs	r0, r3
 801902e:	f7ff fa6f 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:0:x     : lora.adrmode 1:OFF/2:ON\r\n");
 8019032:	4bd4      	ldr	r3, [pc, #848]	; (8019384 <_itsdk_config_consolePriv+0x3ac>)
 8019034:	0018      	movs	r0, r3
 8019036:	f7ff fa6b 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:1:x     : lora.devEuiType 1:STATIC/2:GENERATED\r\n");
 801903a:	4bd3      	ldr	r3, [pc, #844]	; (8019388 <_itsdk_config_consolePriv+0x3b0>)
 801903c:	0018      	movs	r0, r3
 801903e:	f7ff fa67 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:2:x     : lora.joinMode 1:OTAA/2:ABP\r\n");
 8019042:	4bd2      	ldr	r3, [pc, #840]	; (801938c <_itsdk_config_consolePriv+0x3b4>)
 8019044:	0018      	movs	r0, r3
 8019046:	f7ff fa63 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:3:x     : lora.networkType 1:PUBLIC/2:PRIVATE\r\n");
 801904a:	4bd1      	ldr	r3, [pc, #836]	; (8019390 <_itsdk_config_consolePriv+0x3b8>)
 801904c:	0018      	movs	r0, r3
 801904e:	f7ff fa5f 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:4:nn    : lora.retries 00..99\r\n");
 8019052:	4bd0      	ldr	r3, [pc, #832]	; (8019394 <_itsdk_config_consolePriv+0x3bc>)
 8019054:	0018      	movs	r0, r3
 8019056:	f7ff fa5b 	bl	8018510 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 801905a:	2300      	movs	r3, #0
 801905c:	e1ee      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 801905e:	2001      	movs	r0, #1
 8019060:	f7ff fec6 	bl	8018df0 <itsdk_config_commitConfiguration>
			_itsdk_console_printf("OK\r\n");
 8019064:	4bcc      	ldr	r3, [pc, #816]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 8019066:	0018      	movs	r0, r3
 8019068:	f7ff fa52 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801906c:	2300      	movs	r3, #0
 801906e:	e1e5      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 8019070:	4bca      	ldr	r3, [pc, #808]	; (801939c <_itsdk_config_consolePriv+0x3c4>)
 8019072:	2103      	movs	r1, #3
 8019074:	0018      	movs	r0, r3
 8019076:	f002 faad 	bl	801b5d4 <itsdk_error_report>
			  itsdk_config_resetToFactory();
 801907a:	f7ff fdb1 	bl	8018be0 <itsdk_config_resetToFactory>
			  _itsdk_console_printf("OK\r\n");
 801907e:	4bc6      	ldr	r3, [pc, #792]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 8019080:	0018      	movs	r0, r3
 8019082:	f7ff fa45 	bl	8018510 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 8019086:	2300      	movs	r3, #0
 8019088:	e1d8      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			  uint32_t offset = 0;
 801908a:	2300      	movs	r3, #0
 801908c:	617b      	str	r3, [r7, #20]
			  uint32_t size = 0;
 801908e:	2300      	movs	r3, #0
 8019090:	60fb      	str	r3, [r7, #12]
			  uint32_t totSize = 0;
 8019092:	2300      	movs	r3, #0
 8019094:	613b      	str	r3, [r7, #16]
			  	itsdk_secstore_getStoreSize(&size);
 8019096:	240c      	movs	r4, #12
 8019098:	193b      	adds	r3, r7, r4
 801909a:	0018      	movs	r0, r3
 801909c:	f000 fad7 	bl	801964e <itsdk_secstore_getStoreSize>
			  	_itsdk_console_printf("SecureStore: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 80190a0:	68fa      	ldr	r2, [r7, #12]
 80190a2:	697b      	ldr	r3, [r7, #20]
 80190a4:	18d2      	adds	r2, r2, r3
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	6979      	ldr	r1, [r7, #20]
 80190aa:	48bd      	ldr	r0, [pc, #756]	; (80193a0 <_itsdk_config_consolePriv+0x3c8>)
 80190ac:	f7ff fa30 	bl	8018510 <_itsdk_console_printf>
			  	offset += size;
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	697a      	ldr	r2, [r7, #20]
 80190b4:	18d3      	adds	r3, r2, r3
 80190b6:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	693a      	ldr	r2, [r7, #16]
 80190bc:	18d3      	adds	r3, r2, r3
 80190be:	613b      	str	r3, [r7, #16]
			  	itsdk_error_getSize(&size);
 80190c0:	193b      	adds	r3, r7, r4
 80190c2:	0018      	movs	r0, r3
 80190c4:	f002 fbab 	bl	801b81e <itsdk_error_getSize>
			  	_itsdk_console_printf("ErrorLog: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 80190c8:	68fa      	ldr	r2, [r7, #12]
 80190ca:	697b      	ldr	r3, [r7, #20]
 80190cc:	18d2      	adds	r2, r2, r3
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	6979      	ldr	r1, [r7, #20]
 80190d2:	48b4      	ldr	r0, [pc, #720]	; (80193a4 <_itsdk_config_consolePriv+0x3cc>)
 80190d4:	f7ff fa1c 	bl	8018510 <_itsdk_console_printf>
			  	offset += size;
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	697a      	ldr	r2, [r7, #20]
 80190dc:	18d3      	adds	r3, r2, r3
 80190de:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	693a      	ldr	r2, [r7, #16]
 80190e4:	18d3      	adds	r3, r2, r3
 80190e6:	613b      	str	r3, [r7, #16]
			  eeprom_getConfigSize(&size);
 80190e8:	193b      	adds	r3, r7, r4
 80190ea:	0018      	movs	r0, r3
 80190ec:	f7ff fcdd 	bl	8018aaa <eeprom_getConfigSize>
  		  	  totSize += size;
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	693a      	ldr	r2, [r7, #16]
 80190f4:	18d3      	adds	r3, r2, r3
 80190f6:	613b      	str	r3, [r7, #16]
			  _itsdk_console_printf("ApplicationConfig: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 80190f8:	68fa      	ldr	r2, [r7, #12]
 80190fa:	697b      	ldr	r3, [r7, #20]
 80190fc:	18d2      	adds	r2, r2, r3
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	6979      	ldr	r1, [r7, #20]
 8019102:	48a9      	ldr	r0, [pc, #676]	; (80193a8 <_itsdk_config_consolePriv+0x3d0>)
 8019104:	f7ff fa04 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("UsedMemory: %dB on %dB\r\n",totSize,ITSDK_EPROM_SIZE);
 8019108:	23c0      	movs	r3, #192	; 0xc0
 801910a:	015a      	lsls	r2, r3, #5
 801910c:	6939      	ldr	r1, [r7, #16]
 801910e:	4ba7      	ldr	r3, [pc, #668]	; (80193ac <_itsdk_config_consolePriv+0x3d4>)
 8019110:	0018      	movs	r0, r3
 8019112:	f7ff f9fd 	bl	8018510 <_itsdk_console_printf>
			  _itsdk_console_printf("OK\r\n");
 8019116:	4ba0      	ldr	r3, [pc, #640]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 8019118:	0018      	movs	r0, r3
 801911a:	f7ff f9f9 	bl	8018510 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 801911e:	2300      	movs	r3, #0
 8019120:	e18c      	b.n	801943c <_itsdk_config_consolePriv+0x464>
	  }
	} else if ( sz == 4 ) {
 8019122:	1cfb      	adds	r3, r7, #3
 8019124:	781b      	ldrb	r3, [r3, #0]
 8019126:	2b04      	cmp	r3, #4
 8019128:	d116      	bne.n	8019158 <_itsdk_config_consolePriv+0x180>
		if ( buffer[0] == 's' && buffer[1] == 'c' && buffer[2] == ':' ) {
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	781b      	ldrb	r3, [r3, #0]
 801912e:	2b73      	cmp	r3, #115	; 0x73
 8019130:	d000      	beq.n	8019134 <_itsdk_config_consolePriv+0x15c>
 8019132:	e182      	b.n	801943a <_itsdk_config_consolePriv+0x462>
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	3301      	adds	r3, #1
 8019138:	781b      	ldrb	r3, [r3, #0]
 801913a:	2b63      	cmp	r3, #99	; 0x63
 801913c:	d000      	beq.n	8019140 <_itsdk_config_consolePriv+0x168>
 801913e:	e17c      	b.n	801943a <_itsdk_config_consolePriv+0x462>
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	3302      	adds	r3, #2
 8019144:	781b      	ldrb	r3, [r3, #0]
 8019146:	2b3a      	cmp	r3, #58	; 0x3a
 8019148:	d000      	beq.n	801914c <_itsdk_config_consolePriv+0x174>
 801914a:	e176      	b.n	801943a <_itsdk_config_consolePriv+0x462>
						return ITSDK_CONSOLE_SUCCES;
					}
					break;
				#endif
				default:
					_itsdk_console_printf("KO\r\n");
 801914c:	4b98      	ldr	r3, [pc, #608]	; (80193b0 <_itsdk_config_consolePriv+0x3d8>)
 801914e:	0018      	movs	r0, r3
 8019150:	f7ff f9de 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8019154:	2302      	movs	r3, #2
 8019156:	e171      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			}
		}
	} else if ( sz >= 6 ) {
 8019158:	1cfb      	adds	r3, r7, #3
 801915a:	781b      	ldrb	r3, [r3, #0]
 801915c:	2b05      	cmp	r3, #5
 801915e:	d800      	bhi.n	8019162 <_itsdk_config_consolePriv+0x18a>
 8019160:	e168      	b.n	8019434 <_itsdk_config_consolePriv+0x45c>
		if ( buffer[0] == 'S' && buffer[1] == 'C' && buffer[2] == ':' && buffer[4] == ':' ) {
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	781b      	ldrb	r3, [r3, #0]
 8019166:	2b53      	cmp	r3, #83	; 0x53
 8019168:	d000      	beq.n	801916c <_itsdk_config_consolePriv+0x194>
 801916a:	e163      	b.n	8019434 <_itsdk_config_consolePriv+0x45c>
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	3301      	adds	r3, #1
 8019170:	781b      	ldrb	r3, [r3, #0]
 8019172:	2b43      	cmp	r3, #67	; 0x43
 8019174:	d000      	beq.n	8019178 <_itsdk_config_consolePriv+0x1a0>
 8019176:	e15d      	b.n	8019434 <_itsdk_config_consolePriv+0x45c>
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	3302      	adds	r3, #2
 801917c:	781b      	ldrb	r3, [r3, #0]
 801917e:	2b3a      	cmp	r3, #58	; 0x3a
 8019180:	d000      	beq.n	8019184 <_itsdk_config_consolePriv+0x1ac>
 8019182:	e157      	b.n	8019434 <_itsdk_config_consolePriv+0x45c>
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	3304      	adds	r3, #4
 8019188:	781b      	ldrb	r3, [r3, #0]
 801918a:	2b3a      	cmp	r3, #58	; 0x3a
 801918c:	d000      	beq.n	8019190 <_itsdk_config_consolePriv+0x1b8>
 801918e:	e151      	b.n	8019434 <_itsdk_config_consolePriv+0x45c>
			switch(buffer[3]) {
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	3303      	adds	r3, #3
 8019194:	781b      	ldrb	r3, [r3, #0]
 8019196:	3b30      	subs	r3, #48	; 0x30
 8019198:	2b22      	cmp	r3, #34	; 0x22
 801919a:	d900      	bls.n	801919e <_itsdk_config_consolePriv+0x1c6>
 801919c:	e14c      	b.n	8019438 <_itsdk_config_consolePriv+0x460>
 801919e:	009a      	lsls	r2, r3, #2
 80191a0:	4b84      	ldr	r3, [pc, #528]	; (80193b4 <_itsdk_config_consolePriv+0x3dc>)
 80191a2:	18d3      	adds	r3, r2, r3
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	469f      	mov	pc, r3
			#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case 'N': {
				// sdk.activeNetwork
				switch ( buffer[5] ) {
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	3305      	adds	r3, #5
 80191ac:	781b      	ldrb	r3, [r3, #0]
 80191ae:	2b31      	cmp	r3, #49	; 0x31
 80191b0:	d007      	beq.n	80191c2 <_itsdk_config_consolePriv+0x1ea>
 80191b2:	2b32      	cmp	r3, #50	; 0x32
 80191b4:	d009      	beq.n	80191ca <_itsdk_config_consolePriv+0x1f2>
 80191b6:	2b30      	cmp	r3, #48	; 0x30
 80191b8:	d10b      	bne.n	80191d2 <_itsdk_config_consolePriv+0x1fa>
					case '0':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_NONE;
 80191ba:	4b7f      	ldr	r3, [pc, #508]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 80191bc:	2200      	movs	r2, #0
 80191be:	80da      	strh	r2, [r3, #6]
					   break;
 80191c0:	e00d      	b.n	80191de <_itsdk_config_consolePriv+0x206>
					case '1':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_SIGFOX;
 80191c2:	4b7d      	ldr	r3, [pc, #500]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 80191c4:	2201      	movs	r2, #1
 80191c6:	80da      	strh	r2, [r3, #6]
					   break;
 80191c8:	e009      	b.n	80191de <_itsdk_config_consolePriv+0x206>
					case '2':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_LORAWAN;
 80191ca:	4b7b      	ldr	r3, [pc, #492]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 80191cc:	2202      	movs	r2, #2
 80191ce:	80da      	strh	r2, [r3, #6]
					   break;
 80191d0:	e005      	b.n	80191de <_itsdk_config_consolePriv+0x206>
					default:
						_itsdk_console_printf("KO\r\n");
 80191d2:	4b77      	ldr	r3, [pc, #476]	; (80193b0 <_itsdk_config_consolePriv+0x3d8>)
 80191d4:	0018      	movs	r0, r3
 80191d6:	f7ff f99b 	bl	8018510 <_itsdk_console_printf>
						return ITSDK_CONSOLE_FAILED;
 80191da:	2302      	movs	r3, #2
 80191dc:	e12e      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				}
				_itsdk_console_printf("OK\r\n");
 80191de:	4b6e      	ldr	r3, [pc, #440]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 80191e0:	0018      	movs	r0, r3
 80191e2:	f7ff f995 	bl	8018510 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 80191e6:	2300      	movs	r3, #0
 80191e8:	e128      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			}
			case 'R': {
				if ( itdt_isHexString( &buffer[5],4,false) ) {
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	3305      	adds	r3, #5
 80191ee:	2200      	movs	r2, #0
 80191f0:	2104      	movs	r1, #4
 80191f2:	0018      	movs	r0, r3
 80191f4:	f003 f9cb 	bl	801c58e <itdt_isHexString>
 80191f8:	1e03      	subs	r3, r0, #0
 80191fa:	d01b      	beq.n	8019234 <_itsdk_config_consolePriv+0x25c>
					uint16_t v = itdt_convertHexChar4Int(&buffer[5]);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	3305      	adds	r3, #5
 8019200:	251e      	movs	r5, #30
 8019202:	197c      	adds	r4, r7, r5
 8019204:	0018      	movs	r0, r3
 8019206:	f003 f916 	bl	801c436 <itdt_convertHexChar4Int>
 801920a:	0003      	movs	r3, r0
 801920c:	8023      	strh	r3, [r4, #0]
					if ( itdt_count_bits_1(v) <= 1 ) {
 801920e:	197b      	adds	r3, r7, r5
 8019210:	881b      	ldrh	r3, [r3, #0]
 8019212:	0018      	movs	r0, r3
 8019214:	f003 fa07 	bl	801c626 <itdt_count_bits_1>
 8019218:	0003      	movs	r3, r0
 801921a:	2b01      	cmp	r3, #1
 801921c:	d80a      	bhi.n	8019234 <_itsdk_config_consolePriv+0x25c>
						itsdk_config_shadow.sdk.activeRegion = v;
 801921e:	4b66      	ldr	r3, [pc, #408]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 8019220:	221e      	movs	r2, #30
 8019222:	18ba      	adds	r2, r7, r2
 8019224:	8812      	ldrh	r2, [r2, #0]
 8019226:	811a      	strh	r2, [r3, #8]
						_itsdk_console_printf("OK\r\n");
 8019228:	4b5b      	ldr	r3, [pc, #364]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 801922a:	0018      	movs	r0, r3
 801922c:	f7ff f970 	bl	8018510 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8019230:	2300      	movs	r3, #0
 8019232:	e103      	b.n	801943c <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8019234:	4b5e      	ldr	r3, [pc, #376]	; (80193b0 <_itsdk_config_consolePriv+0x3d8>)
 8019236:	0018      	movs	r0, r3
 8019238:	f7ff f96a 	bl	8018510 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 801923c:	2302      	movs	r3, #2
 801923e:	e0fd      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			#endif

 	 	 	#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case '0':
				// lora.adrmode
				if ( buffer[5] == '1' ) {
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	3305      	adds	r3, #5
 8019244:	781b      	ldrb	r3, [r3, #0]
 8019246:	2b31      	cmp	r3, #49	; 0x31
 8019248:	d10d      	bne.n	8019266 <_itsdk_config_consolePriv+0x28e>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 801924a:	4b5b      	ldr	r3, [pc, #364]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 801924c:	7a9a      	ldrb	r2, [r3, #10]
 801924e:	213f      	movs	r1, #63	; 0x3f
 8019250:	400a      	ands	r2, r1
 8019252:	1c11      	adds	r1, r2, #0
 8019254:	2240      	movs	r2, #64	; 0x40
 8019256:	430a      	orrs	r2, r1
 8019258:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801925a:	4b4f      	ldr	r3, [pc, #316]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 801925c:	0018      	movs	r0, r3
 801925e:	f7ff f957 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019262:	2300      	movs	r3, #0
 8019264:	e0ea      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	3305      	adds	r3, #5
 801926a:	781b      	ldrb	r3, [r3, #0]
 801926c:	2b32      	cmp	r3, #50	; 0x32
 801926e:	d10e      	bne.n	801928e <_itsdk_config_consolePriv+0x2b6>
			    	itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 8019270:	4b51      	ldr	r3, [pc, #324]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 8019272:	7a9a      	ldrb	r2, [r3, #10]
 8019274:	213f      	movs	r1, #63	; 0x3f
 8019276:	400a      	ands	r2, r1
 8019278:	1c11      	adds	r1, r2, #0
 801927a:	2280      	movs	r2, #128	; 0x80
 801927c:	4252      	negs	r2, r2
 801927e:	430a      	orrs	r2, r1
 8019280:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019282:	4b45      	ldr	r3, [pc, #276]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 8019284:	0018      	movs	r0, r3
 8019286:	f7ff f943 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801928a:	2300      	movs	r3, #0
 801928c:	e0d6      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 801928e:	4b48      	ldr	r3, [pc, #288]	; (80193b0 <_itsdk_config_consolePriv+0x3d8>)
 8019290:	0018      	movs	r0, r3
 8019292:	f7ff f93d 	bl	8018510 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8019296:	2302      	movs	r3, #2
 8019298:	e0d0      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				break;
			case '1':
				// lora.devEuiType
				if ( buffer[5] == '1' ) {
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	3305      	adds	r3, #5
 801929e:	781b      	ldrb	r3, [r3, #0]
 80192a0:	2b31      	cmp	r3, #49	; 0x31
 80192a2:	d10d      	bne.n	80192c0 <_itsdk_config_consolePriv+0x2e8>
					itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_STATIC;
 80192a4:	4b44      	ldr	r3, [pc, #272]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 80192a6:	7a9a      	ldrb	r2, [r3, #10]
 80192a8:	2130      	movs	r1, #48	; 0x30
 80192aa:	438a      	bics	r2, r1
 80192ac:	1c11      	adds	r1, r2, #0
 80192ae:	2210      	movs	r2, #16
 80192b0:	430a      	orrs	r2, r1
 80192b2:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80192b4:	4b38      	ldr	r3, [pc, #224]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 80192b6:	0018      	movs	r0, r3
 80192b8:	f7ff f92a 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80192bc:	2300      	movs	r3, #0
 80192be:	e0bd      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	3305      	adds	r3, #5
 80192c4:	781b      	ldrb	r3, [r3, #0]
 80192c6:	2b32      	cmp	r3, #50	; 0x32
 80192c8:	d10d      	bne.n	80192e6 <_itsdk_config_consolePriv+0x30e>
			    	itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_GENERATED;
 80192ca:	4b3b      	ldr	r3, [pc, #236]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 80192cc:	7a9a      	ldrb	r2, [r3, #10]
 80192ce:	2130      	movs	r1, #48	; 0x30
 80192d0:	438a      	bics	r2, r1
 80192d2:	1c11      	adds	r1, r2, #0
 80192d4:	2220      	movs	r2, #32
 80192d6:	430a      	orrs	r2, r1
 80192d8:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80192da:	4b2f      	ldr	r3, [pc, #188]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 80192dc:	0018      	movs	r0, r3
 80192de:	f7ff f917 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80192e2:	2300      	movs	r3, #0
 80192e4:	e0aa      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 80192e6:	4b32      	ldr	r3, [pc, #200]	; (80193b0 <_itsdk_config_consolePriv+0x3d8>)
 80192e8:	0018      	movs	r0, r3
 80192ea:	f7ff f911 	bl	8018510 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80192ee:	2302      	movs	r3, #2
 80192f0:	e0a4      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				break;
			case '2':
				// lora.joinMode
				if ( buffer[5] == '1' ) {
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	3305      	adds	r3, #5
 80192f6:	781b      	ldrb	r3, [r3, #0]
 80192f8:	2b31      	cmp	r3, #49	; 0x31
 80192fa:	d10d      	bne.n	8019318 <_itsdk_config_consolePriv+0x340>
					itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_OTAA;
 80192fc:	4b2e      	ldr	r3, [pc, #184]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 80192fe:	7a9a      	ldrb	r2, [r3, #10]
 8019300:	2103      	movs	r1, #3
 8019302:	438a      	bics	r2, r1
 8019304:	1c11      	adds	r1, r2, #0
 8019306:	2201      	movs	r2, #1
 8019308:	430a      	orrs	r2, r1
 801930a:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 801930c:	4b22      	ldr	r3, [pc, #136]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 801930e:	0018      	movs	r0, r3
 8019310:	f7ff f8fe 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8019314:	2300      	movs	r3, #0
 8019316:	e091      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	3305      	adds	r3, #5
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	2b32      	cmp	r3, #50	; 0x32
 8019320:	d10d      	bne.n	801933e <_itsdk_config_consolePriv+0x366>
			    	itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_ABP;
 8019322:	4b25      	ldr	r3, [pc, #148]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 8019324:	7a9a      	ldrb	r2, [r3, #10]
 8019326:	2103      	movs	r1, #3
 8019328:	438a      	bics	r2, r1
 801932a:	1c11      	adds	r1, r2, #0
 801932c:	2202      	movs	r2, #2
 801932e:	430a      	orrs	r2, r1
 8019330:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019332:	4b19      	ldr	r3, [pc, #100]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 8019334:	0018      	movs	r0, r3
 8019336:	f7ff f8eb 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801933a:	2300      	movs	r3, #0
 801933c:	e07e      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 801933e:	4b1c      	ldr	r3, [pc, #112]	; (80193b0 <_itsdk_config_consolePriv+0x3d8>)
 8019340:	0018      	movs	r0, r3
 8019342:	f7ff f8e5 	bl	8018510 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8019346:	2302      	movs	r3, #2
 8019348:	e078      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				break;
			case '3':
				// lora.networkType
				if ( buffer[5] == '1' ) {
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	3305      	adds	r3, #5
 801934e:	781b      	ldrb	r3, [r3, #0]
 8019350:	2b31      	cmp	r3, #49	; 0x31
 8019352:	d133      	bne.n	80193bc <_itsdk_config_consolePriv+0x3e4>
					itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PUBLIC;
 8019354:	4b18      	ldr	r3, [pc, #96]	; (80193b8 <_itsdk_config_consolePriv+0x3e0>)
 8019356:	7a9a      	ldrb	r2, [r3, #10]
 8019358:	210c      	movs	r1, #12
 801935a:	438a      	bics	r2, r1
 801935c:	1c11      	adds	r1, r2, #0
 801935e:	2204      	movs	r2, #4
 8019360:	430a      	orrs	r2, r1
 8019362:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8019364:	4b0c      	ldr	r3, [pc, #48]	; (8019398 <_itsdk_config_consolePriv+0x3c0>)
 8019366:	0018      	movs	r0, r3
 8019368:	f7ff f8d2 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801936c:	2300      	movs	r3, #0
 801936e:	e065      	b.n	801943c <_itsdk_config_consolePriv+0x464>
 8019370:	0801fbbc 	.word	0x0801fbbc
 8019374:	0801fbe0 	.word	0x0801fbe0
 8019378:	0801fc10 	.word	0x0801fc10
 801937c:	0801fc38 	.word	0x0801fc38
 8019380:	0801fc68 	.word	0x0801fc68
 8019384:	0801fc9c 	.word	0x0801fc9c
 8019388:	0801fcc4 	.word	0x0801fcc4
 801938c:	0801fcf8 	.word	0x0801fcf8
 8019390:	0801fd24 	.word	0x0801fd24
 8019394:	0801fd58 	.word	0x0801fd58
 8019398:	0801fbb4 	.word	0x0801fbb4
 801939c:	50000071 	.word	0x50000071
 80193a0:	0801fd7c 	.word	0x0801fd7c
 80193a4:	0801fda0 	.word	0x0801fda0
 80193a8:	0801fdc4 	.word	0x0801fdc4
 80193ac:	0801fdf0 	.word	0x0801fdf0
 80193b0:	0801fe0c 	.word	0x0801fe0c
 80193b4:	08020cc8 	.word	0x08020cc8
 80193b8:	20001524 	.word	0x20001524
				}
			    if ( buffer[5] == '2' ) {
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	3305      	adds	r3, #5
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	2b32      	cmp	r3, #50	; 0x32
 80193c4:	d10d      	bne.n	80193e2 <_itsdk_config_consolePriv+0x40a>
			    	itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PRIVATE;
 80193c6:	4b1f      	ldr	r3, [pc, #124]	; (8019444 <_itsdk_config_consolePriv+0x46c>)
 80193c8:	7a9a      	ldrb	r2, [r3, #10]
 80193ca:	210c      	movs	r1, #12
 80193cc:	438a      	bics	r2, r1
 80193ce:	1c11      	adds	r1, r2, #0
 80193d0:	2208      	movs	r2, #8
 80193d2:	430a      	orrs	r2, r1
 80193d4:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80193d6:	4b1c      	ldr	r3, [pc, #112]	; (8019448 <_itsdk_config_consolePriv+0x470>)
 80193d8:	0018      	movs	r0, r3
 80193da:	f7ff f899 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80193de:	2300      	movs	r3, #0
 80193e0:	e02c      	b.n	801943c <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 80193e2:	4b1a      	ldr	r3, [pc, #104]	; (801944c <_itsdk_config_consolePriv+0x474>)
 80193e4:	0018      	movs	r0, r3
 80193e6:	f7ff f893 	bl	8018510 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80193ea:	2302      	movs	r3, #2
 80193ec:	e026      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				break;
			case '4':
				// lora.retries
				if ( sz >= 7 ) {
 80193ee:	1cfb      	adds	r3, r7, #3
 80193f0:	781b      	ldrb	r3, [r3, #0]
 80193f2:	2b06      	cmp	r3, #6
 80193f4:	d918      	bls.n	8019428 <_itsdk_config_consolePriv+0x450>
					int v = itdt_convertDecCharNInt(&buffer[5],2);
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	3305      	adds	r3, #5
 80193fa:	2102      	movs	r1, #2
 80193fc:	0018      	movs	r0, r3
 80193fe:	f003 f83f 	bl	801c480 <itdt_convertDecCharNInt>
 8019402:	0003      	movs	r3, r0
 8019404:	61bb      	str	r3, [r7, #24]
					if ( v != ITSDK_INVALID_VALUE_32B && v <= 5 ) {
 8019406:	69bb      	ldr	r3, [r7, #24]
 8019408:	4a11      	ldr	r2, [pc, #68]	; (8019450 <_itsdk_config_consolePriv+0x478>)
 801940a:	4293      	cmp	r3, r2
 801940c:	d00c      	beq.n	8019428 <_itsdk_config_consolePriv+0x450>
 801940e:	69bb      	ldr	r3, [r7, #24]
 8019410:	2b05      	cmp	r3, #5
 8019412:	dc09      	bgt.n	8019428 <_itsdk_config_consolePriv+0x450>
						itsdk_config_shadow.sdk.lorawan.retries = v;
 8019414:	69bb      	ldr	r3, [r7, #24]
 8019416:	b2da      	uxtb	r2, r3
 8019418:	4b0a      	ldr	r3, [pc, #40]	; (8019444 <_itsdk_config_consolePriv+0x46c>)
 801941a:	72da      	strb	r2, [r3, #11]
						_itsdk_console_printf("OK\r\n");
 801941c:	4b0a      	ldr	r3, [pc, #40]	; (8019448 <_itsdk_config_consolePriv+0x470>)
 801941e:	0018      	movs	r0, r3
 8019420:	f7ff f876 	bl	8018510 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8019424:	2300      	movs	r3, #0
 8019426:	e009      	b.n	801943c <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8019428:	4b08      	ldr	r3, [pc, #32]	; (801944c <_itsdk_config_consolePriv+0x474>)
 801942a:	0018      	movs	r0, r3
 801942c:	f7ff f870 	bl	8018510 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8019430:	2302      	movs	r3, #2
 8019432:	e003      	b.n	801943c <_itsdk_config_consolePriv+0x464>
				break;
			#endif	// ITSDK_WITH_SIGFOX_LIB
			default:
				break;
			}
		}
 8019434:	46c0      	nop			; (mov r8, r8)
 8019436:	e000      	b.n	801943a <_itsdk_config_consolePriv+0x462>
				break;
 8019438:	46c0      	nop			; (mov r8, r8)
	}
#endif
  return ITSDK_CONSOLE_NOTFOUND;
 801943a:	2301      	movs	r3, #1
}
 801943c:	0018      	movs	r0, r3
 801943e:	46bd      	mov	sp, r7
 8019440:	b008      	add	sp, #32
 8019442:	bdb0      	pop	{r4, r5, r7, pc}
 8019444:	20001524 	.word	0x20001524
 8019448:	0801fbb4 	.word	0x0801fbb4
 801944c:	0801fe0c 	.word	0x0801fe0c
 8019450:	0fffffff 	.word	0x0fffffff

08019454 <itsdk_state_init>:
#endif
#include <it_sdk/lorawan/lorawan.h>

itsdk_state_t itsdk_state;

void itsdk_state_init() {
 8019454:	b5b0      	push	{r4, r5, r7, lr}
 8019456:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 8019458:	4a09      	ldr	r2, [pc, #36]	; (8019480 <itsdk_state_init+0x2c>)
 801945a:	2300      	movs	r3, #0
 801945c:	2400      	movs	r4, #0
 801945e:	6093      	str	r3, [r2, #8]
 8019460:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 8019462:	f004 fb8f 	bl	801db84 <itsdk_getResetCause>
 8019466:	0003      	movs	r3, r0
 8019468:	001a      	movs	r2, r3
 801946a:	4b05      	ldr	r3, [pc, #20]	; (8019480 <itsdk_state_init+0x2c>)
 801946c:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 801946e:	4b05      	ldr	r3, [pc, #20]	; (8019484 <itsdk_state_init+0x30>)
 8019470:	88db      	ldrh	r3, [r3, #6]
 8019472:	b2da      	uxtb	r2, r3
 8019474:	4b02      	ldr	r3, [pc, #8]	; (8019480 <itsdk_state_init+0x2c>)
 8019476:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 8019478:	46c0      	nop			; (mov r8, r8)
}
 801947a:	46bd      	mov	sp, r7
 801947c:	bdb0      	pop	{r4, r5, r7, pc}
 801947e:	46c0      	nop			; (mov r8, r8)
 8019480:	20001560 	.word	0x20001560
 8019484:	20001540 	.word	0x20001540

08019488 <itsdk_print_state>:

#if ITSDK_WITH_CONSOLE == __ENABLE
void itsdk_print_state() {
 8019488:	b5b0      	push	{r4, r5, r7, lr}
 801948a:	af00      	add	r7, sp, #0
	_itsdk_console_printf("state.lastWakeUpTimeUs %d ms\r\n",(uint32_t)(itsdk_state.lastWakeUpTimeUs/1000));
 801948c:	4b19      	ldr	r3, [pc, #100]	; (80194f4 <itsdk_print_state+0x6c>)
 801948e:	6898      	ldr	r0, [r3, #8]
 8019490:	68d9      	ldr	r1, [r3, #12]
 8019492:	22fa      	movs	r2, #250	; 0xfa
 8019494:	0092      	lsls	r2, r2, #2
 8019496:	2300      	movs	r3, #0
 8019498:	f7e7 f816 	bl	80004c8 <__aeabi_uldivmod>
 801949c:	0003      	movs	r3, r0
 801949e:	000c      	movs	r4, r1
 80194a0:	001a      	movs	r2, r3
 80194a2:	4b15      	ldr	r3, [pc, #84]	; (80194f8 <itsdk_print_state+0x70>)
 80194a4:	0011      	movs	r1, r2
 80194a6:	0018      	movs	r0, r3
 80194a8:	f7ff f832 	bl	8018510 <_itsdk_console_printf>
	_itsdk_console_printf("state.lastResetCause 0x%X \r\n",(uint32_t)(itsdk_state.lastResetCause));
 80194ac:	4b11      	ldr	r3, [pc, #68]	; (80194f4 <itsdk_print_state+0x6c>)
 80194ae:	781b      	ldrb	r3, [r3, #0]
 80194b0:	001a      	movs	r2, r3
 80194b2:	4b12      	ldr	r3, [pc, #72]	; (80194fc <itsdk_print_state+0x74>)
 80194b4:	0011      	movs	r1, r2
 80194b6:	0018      	movs	r0, r3
 80194b8:	f7ff f82a 	bl	8018510 <_itsdk_console_printf>
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	_itsdk_console_printf("state.activeNetwork : %d\r\n",itsdk_state.activeNetwork);
 80194bc:	4b0d      	ldr	r3, [pc, #52]	; (80194f4 <itsdk_print_state+0x6c>)
 80194be:	785b      	ldrb	r3, [r3, #1]
 80194c0:	001a      	movs	r2, r3
 80194c2:	4b0f      	ldr	r3, [pc, #60]	; (8019500 <itsdk_print_state+0x78>)
 80194c4:	0011      	movs	r1, r2
 80194c6:	0018      	movs	r0, r3
 80194c8:	f7ff f822 	bl	8018510 <_itsdk_console_printf>
	#if ITSDK_WITH_SIGFOX_LIB == __ENABLE
	#endif
   #endif
#endif
#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
	if ( itsdk_state.activeNetwork == __ACTIV_NETWORK_LORAWAN ) {
 80194cc:	4b09      	ldr	r3, [pc, #36]	; (80194f4 <itsdk_print_state+0x6c>)
 80194ce:	785b      	ldrb	r3, [r3, #1]
 80194d0:	2b02      	cmp	r3, #2
 80194d2:	d10b      	bne.n	80194ec <itsdk_print_state+0x64>
  	  _itsdk_console_printf("state.lorawan.joined: %c\r\n",(itsdk_lorawan_hasjoined()?'Y':'N'));
 80194d4:	f002 fd04 	bl	801bee0 <itsdk_lorawan_hasjoined>
 80194d8:	1e03      	subs	r3, r0, #0
 80194da:	d001      	beq.n	80194e0 <itsdk_print_state+0x58>
 80194dc:	2359      	movs	r3, #89	; 0x59
 80194de:	e000      	b.n	80194e2 <itsdk_print_state+0x5a>
 80194e0:	234e      	movs	r3, #78	; 0x4e
 80194e2:	4a08      	ldr	r2, [pc, #32]	; (8019504 <itsdk_print_state+0x7c>)
 80194e4:	0019      	movs	r1, r3
 80194e6:	0010      	movs	r0, r2
 80194e8:	f7ff f812 	bl	8018510 <_itsdk_console_printf>
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

}
 80194ec:	46c0      	nop			; (mov r8, r8)
 80194ee:	46bd      	mov	sp, r7
 80194f0:	bdb0      	pop	{r4, r5, r7, pc}
 80194f2:	46c0      	nop			; (mov r8, r8)
 80194f4:	20001560 	.word	0x20001560
 80194f8:	0801fe14 	.word	0x0801fe14
 80194fc:	0801fe34 	.word	0x0801fe34
 8019500:	0801fe54 	.word	0x0801fe54
 8019504:	0801fe70 	.word	0x0801fe70

08019508 <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 8019508:	b580      	push	{r7, lr}
 801950a:	b086      	sub	sp, #24
 801950c:	af00      	add	r7, sp, #0
 801950e:	60f8      	str	r0, [r7, #12]
 8019510:	60b9      	str	r1, [r7, #8]
 8019512:	1dfb      	adds	r3, r7, #7
 8019514:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 8019516:	2300      	movs	r3, #0
 8019518:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 801951a:	1dfb      	adds	r3, r7, #7
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	2b13      	cmp	r3, #19
 8019520:	d83d      	bhi.n	801959e <_itsdk_secstore_getOffset+0x96>
 8019522:	009a      	lsls	r2, r3, #2
 8019524:	4b27      	ldr	r3, [pc, #156]	; (80195c4 <_itsdk_secstore_getOffset+0xbc>)
 8019526:	18d3      	adds	r3, r2, r3
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 801952c:	693b      	ldr	r3, [r7, #16]
 801952e:	617b      	str	r3, [r7, #20]
		break;
 8019530:	e037      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 8019532:	2301      	movs	r3, #1
 8019534:	e041      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 8019536:	693b      	ldr	r3, [r7, #16]
 8019538:	3310      	adds	r3, #16
 801953a:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 801953c:	e031      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 801953e:	693b      	ldr	r3, [r7, #16]
 8019540:	3320      	adds	r3, #32
 8019542:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019544:	e02d      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 8019546:	693b      	ldr	r3, [r7, #16]
 8019548:	3330      	adds	r3, #48	; 0x30
 801954a:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 801954c:	e029      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 801954e:	693b      	ldr	r3, [r7, #16]
 8019550:	3340      	adds	r3, #64	; 0x40
 8019552:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019554:	e025      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 8019556:	693b      	ldr	r3, [r7, #16]
 8019558:	3350      	adds	r3, #80	; 0x50
 801955a:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 801955c:	e021      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 801955e:	693b      	ldr	r3, [r7, #16]
 8019560:	3310      	adds	r3, #16
 8019562:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019564:	e01d      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 8019566:	693b      	ldr	r3, [r7, #16]
 8019568:	3320      	adds	r3, #32
 801956a:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 801956c:	e019      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 801956e:	693b      	ldr	r3, [r7, #16]
 8019570:	3330      	adds	r3, #48	; 0x30
 8019572:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8019574:	e015      	b.n	80195a2 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019576:	2301      	movs	r3, #1
 8019578:	e01f      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 801957a:	2301      	movs	r3, #1
 801957c:	e01d      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 801957e:	2301      	movs	r3, #1
 8019580:	e01b      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019582:	2301      	movs	r3, #1
 8019584:	e019      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019586:	2301      	movs	r3, #1
 8019588:	e017      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 801958a:	2301      	movs	r3, #1
 801958c:	e015      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 801958e:	2301      	movs	r3, #1
 8019590:	e013      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019592:	2301      	movs	r3, #1
 8019594:	e011      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8019596:	2301      	movs	r3, #1
 8019598:	e00f      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 801959a:	2301      	movs	r3, #1
 801959c:	e00d      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 801959e:	2301      	movs	r3, #1
 80195a0:	e00b      	b.n	80195ba <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 80195a2:	697b      	ldr	r3, [r7, #20]
 80195a4:	091b      	lsrs	r3, r3, #4
 80195a6:	b2da      	uxtb	r2, r3
 80195a8:	68bb      	ldr	r3, [r7, #8]
 80195aa:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 80195ac:	697b      	ldr	r3, [r7, #20]
 80195ae:	3310      	adds	r3, #16
 80195b0:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	697a      	ldr	r2, [r7, #20]
 80195b6:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 80195b8:	2300      	movs	r3, #0
}
 80195ba:	0018      	movs	r0, r3
 80195bc:	46bd      	mov	sp, r7
 80195be:	b006      	add	sp, #24
 80195c0:	bd80      	pop	{r7, pc}
 80195c2:	46c0      	nop			; (mov r8, r8)
 80195c4:	08020d54 	.word	0x08020d54

080195c8 <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b084      	sub	sp, #16
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 80195d0:	210f      	movs	r1, #15
 80195d2:	187b      	adds	r3, r7, r1
 80195d4:	2201      	movs	r2, #1
 80195d6:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 80195d8:	187b      	adds	r3, r7, r1
 80195da:	187a      	adds	r2, r7, r1
 80195dc:	7812      	ldrb	r2, [r2, #0]
 80195de:	3205      	adds	r2, #5
 80195e0:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 80195e2:	187b      	adds	r3, r7, r1
 80195e4:	187a      	adds	r2, r7, r1
 80195e6:	7812      	ldrb	r2, [r2, #0]
 80195e8:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	187a      	adds	r2, r7, r1
 80195ee:	7812      	ldrb	r2, [r2, #0]
 80195f0:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 80195f2:	2300      	movs	r3, #0
}
 80195f4:	0018      	movs	r0, r3
 80195f6:	46bd      	mov	sp, r7
 80195f8:	b004      	add	sp, #16
 80195fa:	bd80      	pop	{r7, pc}

080195fc <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 80195fc:	b590      	push	{r4, r7, lr}
 80195fe:	b085      	sub	sp, #20
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 8019604:	687a      	ldr	r2, [r7, #4]
 8019606:	2310      	movs	r3, #16
 8019608:	2100      	movs	r1, #0
 801960a:	2000      	movs	r0, #0
 801960c:	f004 fce4 	bl	801dfd8 <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	781b      	ldrb	r3, [r3, #0]
 8019614:	220f      	movs	r2, #15
 8019616:	4013      	ands	r3, r2
 8019618:	b2db      	uxtb	r3, r3
 801961a:	2b0c      	cmp	r3, #12
 801961c:	d001      	beq.n	8019622 <_itsdk_secstore_controlHeader+0x26>
 801961e:	2302      	movs	r3, #2
 8019620:	e011      	b.n	8019646 <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 8019622:	240f      	movs	r4, #15
 8019624:	193b      	adds	r3, r7, r4
 8019626:	0018      	movs	r0, r3
 8019628:	f7ff ffce 	bl	80195c8 <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	781b      	ldrb	r3, [r3, #0]
 8019630:	061b      	lsls	r3, r3, #24
 8019632:	0f1b      	lsrs	r3, r3, #28
 8019634:	b2db      	uxtb	r3, r3
 8019636:	001a      	movs	r2, r3
 8019638:	193b      	adds	r3, r7, r4
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	429a      	cmp	r2, r3
 801963e:	d001      	beq.n	8019644 <_itsdk_secstore_controlHeader+0x48>
 8019640:	2302      	movs	r3, #2
 8019642:	e000      	b.n	8019646 <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 8019644:	2300      	movs	r3, #0
}
 8019646:	0018      	movs	r0, r3
 8019648:	46bd      	mov	sp, r7
 801964a:	b005      	add	sp, #20
 801964c:	bd90      	pop	{r4, r7, pc}

0801964e <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 801964e:	b580      	push	{r7, lr}
 8019650:	b082      	sub	sp, #8
 8019652:	af00      	add	r7, sp, #0
 8019654:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	2270      	movs	r2, #112	; 0x70
 801965a:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 801965c:	2300      	movs	r3, #0
}
 801965e:	0018      	movs	r0, r3
 8019660:	46bd      	mov	sp, r7
 8019662:	b002      	add	sp, #8
 8019664:	bd80      	pop	{r7, pc}

08019666 <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 8019666:	b580      	push	{r7, lr}
 8019668:	b084      	sub	sp, #16
 801966a:	af00      	add	r7, sp, #0
 801966c:	6078      	str	r0, [r7, #4]
 801966e:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8019670:	2308      	movs	r3, #8
 8019672:	18fb      	adds	r3, r7, r3
 8019674:	2104      	movs	r1, #4
 8019676:	0018      	movs	r0, r3
 8019678:	f004 fb2a 	bl	801dcd0 <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 801967c:	2300      	movs	r3, #0
 801967e:	60fb      	str	r3, [r7, #12]
 8019680:	e081      	b.n	8019786 <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	2b01      	cmp	r3, #1
 8019686:	dc21      	bgt.n	80196cc <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	683a      	ldr	r2, [r7, #0]
 801968c:	18d3      	adds	r3, r2, r3
 801968e:	2208      	movs	r2, #8
 8019690:	18b9      	adds	r1, r7, r2
 8019692:	68fa      	ldr	r2, [r7, #12]
 8019694:	188a      	adds	r2, r1, r2
 8019696:	7812      	ldrb	r2, [r2, #0]
 8019698:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 801969a:	68fb      	ldr	r3, [r7, #12]
 801969c:	683a      	ldr	r2, [r7, #0]
 801969e:	18d3      	adds	r3, r2, r3
 80196a0:	7819      	ldrb	r1, [r3, #0]
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	687a      	ldr	r2, [r7, #4]
 80196a6:	18d3      	adds	r3, r2, r3
 80196a8:	781a      	ldrb	r2, [r3, #0]
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	6838      	ldr	r0, [r7, #0]
 80196ae:	18c3      	adds	r3, r0, r3
 80196b0:	404a      	eors	r2, r1
 80196b2:	b2d2      	uxtb	r2, r2
 80196b4:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	683a      	ldr	r2, [r7, #0]
 80196ba:	18d3      	adds	r3, r2, r3
 80196bc:	781a      	ldrb	r2, [r3, #0]
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	6839      	ldr	r1, [r7, #0]
 80196c2:	18cb      	adds	r3, r1, r3
 80196c4:	3a33      	subs	r2, #51	; 0x33
 80196c6:	b2d2      	uxtb	r2, r2
 80196c8:	701a      	strb	r2, [r3, #0]
 80196ca:	e059      	b.n	8019780 <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	2b0d      	cmp	r3, #13
 80196d0:	dc33      	bgt.n	801973a <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	3b02      	subs	r3, #2
 80196d6:	687a      	ldr	r2, [r7, #4]
 80196d8:	18d2      	adds	r2, r2, r3
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	6839      	ldr	r1, [r7, #0]
 80196de:	18cb      	adds	r3, r1, r3
 80196e0:	7812      	ldrb	r2, [r2, #0]
 80196e2:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	683a      	ldr	r2, [r7, #0]
 80196e8:	18d3      	adds	r3, r2, r3
 80196ea:	7819      	ldrb	r1, [r3, #0]
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	2203      	movs	r2, #3
 80196f0:	4013      	ands	r3, r2
 80196f2:	2208      	movs	r2, #8
 80196f4:	18ba      	adds	r2, r7, r2
 80196f6:	5cd2      	ldrb	r2, [r2, r3]
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	6838      	ldr	r0, [r7, #0]
 80196fc:	18c3      	adds	r3, r0, r3
 80196fe:	404a      	eors	r2, r1
 8019700:	b2d2      	uxtb	r2, r2
 8019702:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	683a      	ldr	r2, [r7, #0]
 8019708:	18d3      	adds	r3, r2, r3
 801970a:	781a      	ldrb	r2, [r3, #0]
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	6839      	ldr	r1, [r7, #0]
 8019710:	18cb      	adds	r3, r1, r3
 8019712:	212c      	movs	r1, #44	; 0x2c
 8019714:	404a      	eors	r2, r1
 8019716:	b2d2      	uxtb	r2, r2
 8019718:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	683a      	ldr	r2, [r7, #0]
 801971e:	18d3      	adds	r3, r2, r3
 8019720:	7819      	ldrb	r1, [r3, #0]
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	3b01      	subs	r3, #1
 8019726:	683a      	ldr	r2, [r7, #0]
 8019728:	18d3      	adds	r3, r2, r3
 801972a:	781a      	ldrb	r2, [r3, #0]
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	6838      	ldr	r0, [r7, #0]
 8019730:	18c3      	adds	r3, r0, r3
 8019732:	404a      	eors	r2, r1
 8019734:	b2d2      	uxtb	r2, r2
 8019736:	701a      	strb	r2, [r3, #0]
 8019738:	e022      	b.n	8019780 <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	3b0c      	subs	r3, #12
 801973e:	001a      	movs	r2, r3
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	6839      	ldr	r1, [r7, #0]
 8019744:	18cb      	adds	r3, r1, r3
 8019746:	2108      	movs	r1, #8
 8019748:	1879      	adds	r1, r7, r1
 801974a:	5c8a      	ldrb	r2, [r1, r2]
 801974c:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	683a      	ldr	r2, [r7, #0]
 8019752:	18d3      	adds	r3, r2, r3
 8019754:	7819      	ldrb	r1, [r3, #0]
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	3b05      	subs	r3, #5
 801975a:	687a      	ldr	r2, [r7, #4]
 801975c:	18d3      	adds	r3, r2, r3
 801975e:	781a      	ldrb	r2, [r3, #0]
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	6838      	ldr	r0, [r7, #0]
 8019764:	18c3      	adds	r3, r0, r3
 8019766:	404a      	eors	r2, r1
 8019768:	b2d2      	uxtb	r2, r2
 801976a:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	683a      	ldr	r2, [r7, #0]
 8019770:	18d3      	adds	r3, r2, r3
 8019772:	781a      	ldrb	r2, [r3, #0]
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	6839      	ldr	r1, [r7, #0]
 8019778:	18cb      	adds	r3, r1, r3
 801977a:	3a6f      	subs	r2, #111	; 0x6f
 801977c:	b2d2      	uxtb	r2, r2
 801977e:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	3301      	adds	r3, #1
 8019784:	60fb      	str	r3, [r7, #12]
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	2b0f      	cmp	r3, #15
 801978a:	dc00      	bgt.n	801978e <itsdk_secstore_generateMasterKey+0x128>
 801978c:	e779      	b.n	8019682 <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 801978e:	683b      	ldr	r3, [r7, #0]
 8019790:	2110      	movs	r1, #16
 8019792:	0018      	movs	r0, r3
 8019794:	f000 fd96 	bl	801a2c4 <itsdk_encrypt_cifferKey>
}
 8019798:	46c0      	nop			; (mov r8, r8)
 801979a:	46bd      	mov	sp, r7
 801979c:	b004      	add	sp, #16
 801979e:	bd80      	pop	{r7, pc}

080197a0 <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 80197a0:	b590      	push	{r4, r7, lr}
 80197a2:	b08d      	sub	sp, #52	; 0x34
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	0002      	movs	r2, r0
 80197a8:	6039      	str	r1, [r7, #0]
 80197aa:	1dfb      	adds	r3, r7, #7
 80197ac:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 80197ae:	2320      	movs	r3, #32
 80197b0:	18fb      	adds	r3, r7, r3
 80197b2:	0018      	movs	r0, r3
 80197b4:	f7ff ff22 	bl	80195fc <_itsdk_secstore_controlHeader>
 80197b8:	1e03      	subs	r3, r0, #0
 80197ba:	d001      	beq.n	80197c0 <itsdk_secstore_readBlock+0x20>
 80197bc:	2302      	movs	r3, #2
 80197be:	e038      	b.n	8019832 <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 80197c0:	2300      	movs	r3, #0
 80197c2:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 80197c4:	211b      	movs	r1, #27
 80197c6:	187b      	adds	r3, r7, r1
 80197c8:	2200      	movs	r2, #0
 80197ca:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 80197cc:	1dfb      	adds	r3, r7, #7
 80197ce:	781a      	ldrb	r2, [r3, #0]
 80197d0:	1879      	adds	r1, r7, r1
 80197d2:	231c      	movs	r3, #28
 80197d4:	18fb      	adds	r3, r7, r3
 80197d6:	0018      	movs	r0, r3
 80197d8:	f7ff fe96 	bl	8019508 <_itsdk_secstore_getOffset>
 80197dc:	1e03      	subs	r3, r0, #0
 80197de:	d001      	beq.n	80197e4 <itsdk_secstore_readBlock+0x44>
 80197e0:	2301      	movs	r3, #1
 80197e2:	e026      	b.n	8019832 <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 80197e4:	2320      	movs	r3, #32
 80197e6:	18fb      	adds	r3, r7, r3
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	021b      	lsls	r3, r3, #8
 80197ec:	0c1b      	lsrs	r3, r3, #16
 80197ee:	b29b      	uxth	r3, r3
 80197f0:	001a      	movs	r2, r3
 80197f2:	231b      	movs	r3, #27
 80197f4:	18fb      	adds	r3, r7, r3
 80197f6:	781b      	ldrb	r3, [r3, #0]
 80197f8:	411a      	asrs	r2, r3
 80197fa:	0013      	movs	r3, r2
 80197fc:	2201      	movs	r2, #1
 80197fe:	4013      	ands	r3, r2
 8019800:	d101      	bne.n	8019806 <itsdk_secstore_readBlock+0x66>
 8019802:	2303      	movs	r3, #3
 8019804:	e015      	b.n	8019832 <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019806:	69f9      	ldr	r1, [r7, #28]
 8019808:	683a      	ldr	r2, [r7, #0]
 801980a:	2310      	movs	r3, #16
 801980c:	2000      	movs	r0, #0
 801980e:	f004 fbe3 	bl	801dfd8 <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8019812:	2408      	movs	r4, #8
 8019814:	193a      	adds	r2, r7, r4
 8019816:	2320      	movs	r3, #32
 8019818:	18fb      	adds	r3, r7, r3
 801981a:	3304      	adds	r3, #4
 801981c:	0011      	movs	r1, r2
 801981e:	0018      	movs	r0, r3
 8019820:	f7ff ff21 	bl	8019666 <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019824:	193b      	adds	r3, r7, r4
 8019826:	6839      	ldr	r1, [r7, #0]
 8019828:	6838      	ldr	r0, [r7, #0]
 801982a:	2210      	movs	r2, #16
 801982c:	f000 fd0a 	bl	801a244 <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 8019830:	2300      	movs	r3, #0
}
 8019832:	0018      	movs	r0, r3
 8019834:	46bd      	mov	sp, r7
 8019836:	b00d      	add	sp, #52	; 0x34
 8019838:	bd90      	pop	{r4, r7, pc}

0801983a <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 801983a:	b5b0      	push	{r4, r5, r7, lr}
 801983c:	b08c      	sub	sp, #48	; 0x30
 801983e:	af00      	add	r7, sp, #0
 8019840:	0002      	movs	r2, r0
 8019842:	6039      	str	r1, [r7, #0]
 8019844:	1dfb      	adds	r3, r7, #7
 8019846:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8019848:	2320      	movs	r3, #32
 801984a:	18fb      	adds	r3, r7, r3
 801984c:	0018      	movs	r0, r3
 801984e:	f7ff fed5 	bl	80195fc <_itsdk_secstore_controlHeader>
 8019852:	1e03      	subs	r3, r0, #0
 8019854:	d001      	beq.n	801985a <itsdk_secstore_writeBlock+0x20>
 8019856:	2302      	movs	r3, #2
 8019858:	e061      	b.n	801991e <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 801985a:	2300      	movs	r3, #0
 801985c:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 801985e:	211b      	movs	r1, #27
 8019860:	187b      	adds	r3, r7, r1
 8019862:	2200      	movs	r2, #0
 8019864:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8019866:	1dfb      	adds	r3, r7, #7
 8019868:	781a      	ldrb	r2, [r3, #0]
 801986a:	1879      	adds	r1, r7, r1
 801986c:	231c      	movs	r3, #28
 801986e:	18fb      	adds	r3, r7, r3
 8019870:	0018      	movs	r0, r3
 8019872:	f7ff fe49 	bl	8019508 <_itsdk_secstore_getOffset>
 8019876:	1e03      	subs	r3, r0, #0
 8019878:	d001      	beq.n	801987e <itsdk_secstore_writeBlock+0x44>
 801987a:	2301      	movs	r3, #1
 801987c:	e04f      	b.n	801991e <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 801987e:	2408      	movs	r4, #8
 8019880:	193a      	adds	r2, r7, r4
 8019882:	2520      	movs	r5, #32
 8019884:	197b      	adds	r3, r7, r5
 8019886:	3304      	adds	r3, #4
 8019888:	0011      	movs	r1, r2
 801988a:	0018      	movs	r0, r3
 801988c:	f7ff feeb 	bl	8019666 <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019890:	193b      	adds	r3, r7, r4
 8019892:	6839      	ldr	r1, [r7, #0]
 8019894:	6838      	ldr	r0, [r7, #0]
 8019896:	2210      	movs	r2, #16
 8019898:	f000 fc90 	bl	801a1bc <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 801989c:	69f9      	ldr	r1, [r7, #28]
 801989e:	683a      	ldr	r2, [r7, #0]
 80198a0:	2310      	movs	r3, #16
 80198a2:	2000      	movs	r0, #0
 80198a4:	f004 faf4 	bl	801de90 <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 80198a8:	197b      	adds	r3, r7, r5
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	021b      	lsls	r3, r3, #8
 80198ae:	0c1b      	lsrs	r3, r3, #16
 80198b0:	b29b      	uxth	r3, r3
 80198b2:	001a      	movs	r2, r3
 80198b4:	231b      	movs	r3, #27
 80198b6:	18fb      	adds	r3, r7, r3
 80198b8:	781b      	ldrb	r3, [r3, #0]
 80198ba:	411a      	asrs	r2, r3
 80198bc:	0013      	movs	r3, r2
 80198be:	2201      	movs	r2, #1
 80198c0:	4013      	ands	r3, r2
 80198c2:	d12b      	bne.n	801991c <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 80198c4:	2520      	movs	r5, #32
 80198c6:	197b      	adds	r3, r7, r5
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	021b      	lsls	r3, r3, #8
 80198cc:	0c1b      	lsrs	r3, r3, #16
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	b21a      	sxth	r2, r3
 80198d2:	231b      	movs	r3, #27
 80198d4:	18fb      	adds	r3, r7, r3
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	0019      	movs	r1, r3
 80198da:	2301      	movs	r3, #1
 80198dc:	408b      	lsls	r3, r1
 80198de:	b21b      	sxth	r3, r3
 80198e0:	4313      	orrs	r3, r2
 80198e2:	b21b      	sxth	r3, r3
 80198e4:	b29a      	uxth	r2, r3
 80198e6:	197b      	adds	r3, r7, r5
 80198e8:	3301      	adds	r3, #1
 80198ea:	21ff      	movs	r1, #255	; 0xff
 80198ec:	4011      	ands	r1, r2
 80198ee:	000c      	movs	r4, r1
 80198f0:	7819      	ldrb	r1, [r3, #0]
 80198f2:	2000      	movs	r0, #0
 80198f4:	4001      	ands	r1, r0
 80198f6:	1c08      	adds	r0, r1, #0
 80198f8:	1c21      	adds	r1, r4, #0
 80198fa:	4301      	orrs	r1, r0
 80198fc:	7019      	strb	r1, [r3, #0]
 80198fe:	0a12      	lsrs	r2, r2, #8
 8019900:	b290      	uxth	r0, r2
 8019902:	785a      	ldrb	r2, [r3, #1]
 8019904:	2100      	movs	r1, #0
 8019906:	400a      	ands	r2, r1
 8019908:	1c11      	adds	r1, r2, #0
 801990a:	1c02      	adds	r2, r0, #0
 801990c:	430a      	orrs	r2, r1
 801990e:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8019910:	197a      	adds	r2, r7, r5
 8019912:	2310      	movs	r3, #16
 8019914:	2100      	movs	r1, #0
 8019916:	2000      	movs	r0, #0
 8019918:	f004 faba 	bl	801de90 <_eeprom_write>
	}

	return SS_SUCCESS;
 801991c:	2300      	movs	r3, #0
}
 801991e:	0018      	movs	r0, r3
 8019920:	46bd      	mov	sp, r7
 8019922:	b00c      	add	sp, #48	; 0x30
 8019924:	bdb0      	pop	{r4, r5, r7, pc}
	...

08019928 <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 8019928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801992a:	b08d      	sub	sp, #52	; 0x34
 801992c:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 801992e:	2020      	movs	r0, #32
 8019930:	0004      	movs	r4, r0
 8019932:	183b      	adds	r3, r7, r0
 8019934:	781a      	ldrb	r2, [r3, #0]
 8019936:	210f      	movs	r1, #15
 8019938:	438a      	bics	r2, r1
 801993a:	1c11      	adds	r1, r2, #0
 801993c:	220c      	movs	r2, #12
 801993e:	430a      	orrs	r2, r1
 8019940:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 8019942:	251f      	movs	r5, #31
 8019944:	197b      	adds	r3, r7, r5
 8019946:	0018      	movs	r0, r3
 8019948:	f7ff fe3e 	bl	80195c8 <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 801994c:	197b      	adds	r3, r7, r5
 801994e:	781b      	ldrb	r3, [r3, #0]
 8019950:	1c1a      	adds	r2, r3, #0
 8019952:	230f      	movs	r3, #15
 8019954:	4013      	ands	r3, r2
 8019956:	b2da      	uxtb	r2, r3
 8019958:	193b      	adds	r3, r7, r4
 801995a:	0110      	lsls	r0, r2, #4
 801995c:	781a      	ldrb	r2, [r3, #0]
 801995e:	210f      	movs	r1, #15
 8019960:	400a      	ands	r2, r1
 8019962:	1c11      	adds	r1, r2, #0
 8019964:	1c02      	adds	r2, r0, #0
 8019966:	430a      	orrs	r2, r1
 8019968:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 801996a:	0020      	movs	r0, r4
 801996c:	193b      	adds	r3, r7, r4
 801996e:	3301      	adds	r3, #1
 8019970:	781a      	ldrb	r2, [r3, #0]
 8019972:	2100      	movs	r1, #0
 8019974:	400a      	ands	r2, r1
 8019976:	1c11      	adds	r1, r2, #0
 8019978:	2201      	movs	r2, #1
 801997a:	430a      	orrs	r2, r1
 801997c:	701a      	strb	r2, [r3, #0]
 801997e:	785a      	ldrb	r2, [r3, #1]
 8019980:	2100      	movs	r1, #0
 8019982:	400a      	ands	r2, r1
 8019984:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 8019986:	2110      	movs	r1, #16
 8019988:	187b      	adds	r3, r7, r1
 801998a:	4a15      	ldr	r2, [pc, #84]	; (80199e0 <itsdk_secstore_init+0xb8>)
 801998c:	ca70      	ldmia	r2!, {r4, r5, r6}
 801998e:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 8019990:	183b      	adds	r3, r7, r0
 8019992:	187a      	adds	r2, r7, r1
 8019994:	3304      	adds	r3, #4
 8019996:	ca32      	ldmia	r2!, {r1, r4, r5}
 8019998:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 801999a:	183a      	adds	r2, r7, r0
 801999c:	2310      	movs	r3, #16
 801999e:	2100      	movs	r1, #0
 80199a0:	2000      	movs	r0, #0
 80199a2:	f004 fa75 	bl	801de90 <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 80199a6:	0039      	movs	r1, r7
 80199a8:	4a0e      	ldr	r2, [pc, #56]	; (80199e4 <itsdk_secstore_init+0xbc>)
 80199aa:	000b      	movs	r3, r1
 80199ac:	ca11      	ldmia	r2!, {r0, r4}
 80199ae:	c311      	stmia	r3!, {r0, r4}
 80199b0:	7812      	ldrb	r2, [r2, #0]
 80199b2:	701a      	strb	r2, [r3, #0]
 80199b4:	2309      	movs	r3, #9
 80199b6:	18cb      	adds	r3, r1, r3
 80199b8:	2207      	movs	r2, #7
 80199ba:	2100      	movs	r1, #0
 80199bc:	0018      	movs	r0, r3
 80199be:	f005 f851 	bl	801ea64 <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 80199c2:	003b      	movs	r3, r7
 80199c4:	0019      	movs	r1, r3
 80199c6:	2000      	movs	r0, #0
 80199c8:	f7ff ff37 	bl	801983a <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 80199cc:	003b      	movs	r3, r7
 80199ce:	2110      	movs	r1, #16
 80199d0:	0018      	movs	r0, r3
 80199d2:	f004 fffb 	bl	801e9cc <bzero>

	return SS_SUCCESS;
 80199d6:	2300      	movs	r3, #0
}
 80199d8:	0018      	movs	r0, r3
 80199da:	46bd      	mov	sp, r7
 80199dc:	b00d      	add	sp, #52	; 0x34
 80199de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199e0:	0801fe8c 	.word	0x0801fe8c
 80199e4:	0801fe98 	.word	0x0801fe98

080199e8 <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 80199e8:	b580      	push	{r7, lr}
 80199ea:	b084      	sub	sp, #16
 80199ec:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 80199ee:	003b      	movs	r3, r7
 80199f0:	0018      	movs	r0, r3
 80199f2:	f7ff fe03 	bl	80195fc <_itsdk_secstore_controlHeader>
 80199f6:	0003      	movs	r3, r0
}
 80199f8:	0018      	movs	r0, r3
 80199fa:	46bd      	mov	sp, r7
 80199fc:	b004      	add	sp, #16
 80199fe:	bd80      	pop	{r7, pc}

08019a00 <_itsdk_secstore_writeBlockKey>:
								      }

/**
 * Write a block with a specified MasterKey
 */
static itsdk_secStoreReturn_e _itsdk_secstore_writeBlockKey(itsdk_secStoreBlocks_e blockType, uint8_t * buffer, uint8_t * masterKey) {
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b086      	sub	sp, #24
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	60b9      	str	r1, [r7, #8]
 8019a08:	607a      	str	r2, [r7, #4]
 8019a0a:	210f      	movs	r1, #15
 8019a0c:	187b      	adds	r3, r7, r1
 8019a0e:	1c02      	adds	r2, r0, #0
 8019a10:	701a      	strb	r2, [r3, #0]

	// Control the blockId validity
	uint32_t _offset = 0;
 8019a12:	2300      	movs	r3, #0
 8019a14:	617b      	str	r3, [r7, #20]
	uint8_t  _id = 0;
 8019a16:	2013      	movs	r0, #19
 8019a18:	183b      	adds	r3, r7, r0
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8019a1e:	187b      	adds	r3, r7, r1
 8019a20:	781a      	ldrb	r2, [r3, #0]
 8019a22:	1839      	adds	r1, r7, r0
 8019a24:	2314      	movs	r3, #20
 8019a26:	18fb      	adds	r3, r7, r3
 8019a28:	0018      	movs	r0, r3
 8019a2a:	f7ff fd6d 	bl	8019508 <_itsdk_secstore_getOffset>
 8019a2e:	1e03      	subs	r3, r0, #0
 8019a30:	d001      	beq.n	8019a36 <_itsdk_secstore_writeBlockKey+0x36>
 8019a32:	2301      	movs	r3, #1
 8019a34:	e00c      	b.n	8019a50 <_itsdk_secstore_writeBlockKey+0x50>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	68b9      	ldr	r1, [r7, #8]
 8019a3a:	68b8      	ldr	r0, [r7, #8]
 8019a3c:	2210      	movs	r2, #16
 8019a3e:	f000 fbbd 	bl	801a1bc <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8019a42:	6979      	ldr	r1, [r7, #20]
 8019a44:	68ba      	ldr	r2, [r7, #8]
 8019a46:	2310      	movs	r3, #16
 8019a48:	2000      	movs	r0, #0
 8019a4a:	f004 fa21 	bl	801de90 <_eeprom_write>

	return SS_SUCCESS;
 8019a4e:	2300      	movs	r3, #0
}
 8019a50:	0018      	movs	r0, r3
 8019a52:	46bd      	mov	sp, r7
 8019a54:	b006      	add	sp, #24
 8019a56:	bd80      	pop	{r7, pc}

08019a58 <_itsk_secstore_rekey>:


/**
 * Change the dyn key and update all the encrypted elements
 */
static itsdk_console_return_e _itsk_secstore_rekey(uint8_t * newKey){
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b090      	sub	sp, #64	; 0x40
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]

	itsdk_secStoreHead_t	_head;
	uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];

	// Control Header validity & load previous header
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) {
 8019a60:	232c      	movs	r3, #44	; 0x2c
 8019a62:	18fb      	adds	r3, r7, r3
 8019a64:	0018      	movs	r0, r3
 8019a66:	f7ff fdc9 	bl	80195fc <_itsdk_secstore_controlHeader>
 8019a6a:	1e03      	subs	r3, r0, #0
 8019a6c:	d005      	beq.n	8019a7a <_itsk_secstore_rekey+0x22>
		_itsdk_console_printf("KO\r\n");
 8019a6e:	4b4b      	ldr	r3, [pc, #300]	; (8019b9c <_itsk_secstore_rekey+0x144>)
 8019a70:	0018      	movs	r0, r3
 8019a72:	f7fe fd4d 	bl	8018510 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8019a76:	2302      	movs	r3, #2
 8019a78:	e08c      	b.n	8019b94 <_itsk_secstore_rekey+0x13c>
	}

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(newKey,masterKey);
 8019a7a:	230c      	movs	r3, #12
 8019a7c:	18fa      	adds	r2, r7, r3
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	0011      	movs	r1, r2
 8019a82:	0018      	movs	r0, r3
 8019a84:	f7ff fdef 	bl	8019666 <itsdk_secstore_generateMasterKey>

	if ( itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, _b) != SS_FAILED_NOTSET ) {
 8019a88:	231c      	movs	r3, #28
 8019a8a:	18fb      	adds	r3, r7, r3
 8019a8c:	0019      	movs	r1, r3
 8019a8e:	2000      	movs	r0, #0
 8019a90:	f7ff fe86 	bl	80197a0 <itsdk_secstore_readBlock>
 8019a94:	0003      	movs	r3, r0
 8019a96:	2b03      	cmp	r3, #3
 8019a98:	d007      	beq.n	8019aaa <_itsk_secstore_rekey+0x52>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_CONSOLEKEY,_b,masterKey);
 8019a9a:	230c      	movs	r3, #12
 8019a9c:	18fa      	adds	r2, r7, r3
 8019a9e:	231c      	movs	r3, #28
 8019aa0:	18fb      	adds	r3, r7, r3
 8019aa2:	0019      	movs	r1, r3
 8019aa4:	2000      	movs	r0, #0
 8019aa6:	f7ff ffab 	bl	8019a00 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_SIGFOXKEY,_b,masterKey);
	}
#endif
#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
	// we have more ABP in the UNION when Staticly compiled
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETIDDEVID, _b) != SS_FAILED_NOTSET ) {
 8019aaa:	231c      	movs	r3, #28
 8019aac:	18fb      	adds	r3, r7, r3
 8019aae:	0019      	movs	r1, r3
 8019ab0:	2002      	movs	r0, #2
 8019ab2:	f7ff fe75 	bl	80197a0 <itsdk_secstore_readBlock>
 8019ab6:	0003      	movs	r3, r0
 8019ab8:	2b03      	cmp	r3, #3
 8019aba:	d007      	beq.n	8019acc <_itsk_secstore_rekey+0x74>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETIDDEVID,_b,masterKey);
 8019abc:	230c      	movs	r3, #12
 8019abe:	18fa      	adds	r2, r7, r3
 8019ac0:	231c      	movs	r3, #28
 8019ac2:	18fb      	adds	r3, r7, r3
 8019ac4:	0019      	movs	r1, r3
 8019ac6:	2002      	movs	r0, #2
 8019ac8:	f7ff ff9a 	bl	8019a00 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYF, _b) != SS_FAILED_NOTSET ) {
 8019acc:	231c      	movs	r3, #28
 8019ace:	18fb      	adds	r3, r7, r3
 8019ad0:	0019      	movs	r1, r3
 8019ad2:	2003      	movs	r0, #3
 8019ad4:	f7ff fe64 	bl	80197a0 <itsdk_secstore_readBlock>
 8019ad8:	0003      	movs	r3, r0
 8019ada:	2b03      	cmp	r3, #3
 8019adc:	d007      	beq.n	8019aee <_itsk_secstore_rekey+0x96>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYF,_b,masterKey);
 8019ade:	230c      	movs	r3, #12
 8019ae0:	18fa      	adds	r2, r7, r3
 8019ae2:	231c      	movs	r3, #28
 8019ae4:	18fb      	adds	r3, r7, r3
 8019ae6:	0019      	movs	r1, r3
 8019ae8:	2003      	movs	r0, #3
 8019aea:	f7ff ff89 	bl	8019a00 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYS, _b) != SS_FAILED_NOTSET ) {
 8019aee:	231c      	movs	r3, #28
 8019af0:	18fb      	adds	r3, r7, r3
 8019af2:	0019      	movs	r1, r3
 8019af4:	2004      	movs	r0, #4
 8019af6:	f7ff fe53 	bl	80197a0 <itsdk_secstore_readBlock>
 8019afa:	0003      	movs	r3, r0
 8019afc:	2b03      	cmp	r3, #3
 8019afe:	d007      	beq.n	8019b10 <_itsk_secstore_rekey+0xb8>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYS,_b,masterKey);
 8019b00:	230c      	movs	r3, #12
 8019b02:	18fa      	adds	r2, r7, r3
 8019b04:	231c      	movs	r3, #28
 8019b06:	18fb      	adds	r3, r7, r3
 8019b08:	0019      	movs	r1, r3
 8019b0a:	2004      	movs	r0, #4
 8019b0c:	f7ff ff78 	bl	8019a00 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETSKEY, _b) != SS_FAILED_NOTSET ) {
 8019b10:	231c      	movs	r3, #28
 8019b12:	18fb      	adds	r3, r7, r3
 8019b14:	0019      	movs	r1, r3
 8019b16:	2005      	movs	r0, #5
 8019b18:	f7ff fe42 	bl	80197a0 <itsdk_secstore_readBlock>
 8019b1c:	0003      	movs	r3, r0
 8019b1e:	2b03      	cmp	r3, #3
 8019b20:	d007      	beq.n	8019b32 <_itsk_secstore_rekey+0xda>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETSKEY,_b,masterKey);
 8019b22:	230c      	movs	r3, #12
 8019b24:	18fa      	adds	r2, r7, r3
 8019b26:	231c      	movs	r3, #28
 8019b28:	18fb      	adds	r3, r7, r3
 8019b2a:	0019      	movs	r1, r3
 8019b2c:	2005      	movs	r0, #5
 8019b2e:	f7ff ff67 	bl	8019a00 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_APPSKEY, _b) != SS_FAILED_NOTSET ) {
 8019b32:	231c      	movs	r3, #28
 8019b34:	18fb      	adds	r3, r7, r3
 8019b36:	0019      	movs	r1, r3
 8019b38:	2006      	movs	r0, #6
 8019b3a:	f7ff fe31 	bl	80197a0 <itsdk_secstore_readBlock>
 8019b3e:	0003      	movs	r3, r0
 8019b40:	2b03      	cmp	r3, #3
 8019b42:	d007      	beq.n	8019b54 <_itsk_secstore_rekey+0xfc>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_APPSKEY,_b,masterKey);
 8019b44:	230c      	movs	r3, #12
 8019b46:	18fa      	adds	r2, r7, r3
 8019b48:	231c      	movs	r3, #28
 8019b4a:	18fb      	adds	r3, r7, r3
 8019b4c:	0019      	movs	r1, r3
 8019b4e:	2006      	movs	r0, #6
 8019b50:	f7ff ff56 	bl	8019a00 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_USER7,_b,masterKey);
	}
#endif

	// Write Header
	for ( int i = 0 ; i < 12 ; i++) {
 8019b54:	2300      	movs	r3, #0
 8019b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019b58:	e00d      	b.n	8019b76 <_itsk_secstore_rekey+0x11e>
		_head.dynamicKey[i] = newKey[i];
 8019b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b5c:	687a      	ldr	r2, [r7, #4]
 8019b5e:	18d3      	adds	r3, r2, r3
 8019b60:	7819      	ldrb	r1, [r3, #0]
 8019b62:	232c      	movs	r3, #44	; 0x2c
 8019b64:	18fa      	adds	r2, r7, r3
 8019b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b68:	18d3      	adds	r3, r2, r3
 8019b6a:	3304      	adds	r3, #4
 8019b6c:	1c0a      	adds	r2, r1, #0
 8019b6e:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 12 ; i++) {
 8019b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b72:	3301      	adds	r3, #1
 8019b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019b78:	2b0b      	cmp	r3, #11
 8019b7a:	ddee      	ble.n	8019b5a <_itsk_secstore_rekey+0x102>
	}
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8019b7c:	232c      	movs	r3, #44	; 0x2c
 8019b7e:	18fa      	adds	r2, r7, r3
 8019b80:	2310      	movs	r3, #16
 8019b82:	2100      	movs	r1, #0
 8019b84:	2000      	movs	r0, #0
 8019b86:	f004 f983 	bl	801de90 <_eeprom_write>
	_itsdk_console_printf("OK\r\n");
 8019b8a:	4b05      	ldr	r3, [pc, #20]	; (8019ba0 <_itsk_secstore_rekey+0x148>)
 8019b8c:	0018      	movs	r0, r3
 8019b8e:	f7fe fcbf 	bl	8018510 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 8019b92:	2300      	movs	r3, #0
}
 8019b94:	0018      	movs	r0, r3
 8019b96:	46bd      	mov	sp, r7
 8019b98:	b010      	add	sp, #64	; 0x40
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	0801fea8 	.word	0x0801fea8
 8019ba0:	0801feb0 	.word	0x0801feb0

08019ba4 <__checkAndConvert>:
/**
 * convert and verify a char * hex string into a uint8_t array
 * verify : size of the string regarding the sz
 * verify : format of the char to match Hex number
 */
static bool __checkAndConvert(char * str,uint8_t start,uint8_t stop,uint8_t sz,uint8_t * buf) {
 8019ba4:	b590      	push	{r4, r7, lr}
 8019ba6:	b085      	sub	sp, #20
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
 8019bac:	000c      	movs	r4, r1
 8019bae:	0010      	movs	r0, r2
 8019bb0:	0019      	movs	r1, r3
 8019bb2:	1cfb      	adds	r3, r7, #3
 8019bb4:	1c22      	adds	r2, r4, #0
 8019bb6:	701a      	strb	r2, [r3, #0]
 8019bb8:	1cbb      	adds	r3, r7, #2
 8019bba:	1c02      	adds	r2, r0, #0
 8019bbc:	701a      	strb	r2, [r3, #0]
 8019bbe:	1c7b      	adds	r3, r7, #1
 8019bc0:	1c0a      	adds	r2, r1, #0
 8019bc2:	701a      	strb	r2, [r3, #0]
	if ( (stop - start) < 2*sz ) return false;
 8019bc4:	1cbb      	adds	r3, r7, #2
 8019bc6:	781a      	ldrb	r2, [r3, #0]
 8019bc8:	1cfb      	adds	r3, r7, #3
 8019bca:	781b      	ldrb	r3, [r3, #0]
 8019bcc:	1ad2      	subs	r2, r2, r3
 8019bce:	1c7b      	adds	r3, r7, #1
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	005b      	lsls	r3, r3, #1
 8019bd4:	429a      	cmp	r2, r3
 8019bd6:	da01      	bge.n	8019bdc <__checkAndConvert+0x38>
 8019bd8:	2300      	movs	r3, #0
 8019bda:	e034      	b.n	8019c46 <__checkAndConvert+0xa2>
	int k = 0;
 8019bdc:	2300      	movs	r3, #0
 8019bde:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 8019be0:	1cfb      	adds	r3, r7, #3
 8019be2:	781b      	ldrb	r3, [r3, #0]
 8019be4:	60bb      	str	r3, [r7, #8]
 8019be6:	e028      	b.n	8019c3a <__checkAndConvert+0x96>
		if ( itdt_isHexChar(str[i],false) && itdt_isHexChar(str[i+1],false) ) {
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	687a      	ldr	r2, [r7, #4]
 8019bec:	18d3      	adds	r3, r2, r3
 8019bee:	781b      	ldrb	r3, [r3, #0]
 8019bf0:	2100      	movs	r1, #0
 8019bf2:	0018      	movs	r0, r3
 8019bf4:	f002 fc9c 	bl	801c530 <itdt_isHexChar>
 8019bf8:	1e03      	subs	r3, r0, #0
 8019bfa:	d01c      	beq.n	8019c36 <__checkAndConvert+0x92>
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	3301      	adds	r3, #1
 8019c00:	687a      	ldr	r2, [r7, #4]
 8019c02:	18d3      	adds	r3, r2, r3
 8019c04:	781b      	ldrb	r3, [r3, #0]
 8019c06:	2100      	movs	r1, #0
 8019c08:	0018      	movs	r0, r3
 8019c0a:	f002 fc91 	bl	801c530 <itdt_isHexChar>
 8019c0e:	1e03      	subs	r3, r0, #0
 8019c10:	d011      	beq.n	8019c36 <__checkAndConvert+0x92>
			buf[k] = itdt_convertHexChar2Int(&str[i]);
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	687a      	ldr	r2, [r7, #4]
 8019c16:	18d1      	adds	r1, r2, r3
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	6a3a      	ldr	r2, [r7, #32]
 8019c1c:	18d4      	adds	r4, r2, r3
 8019c1e:	0008      	movs	r0, r1
 8019c20:	f002 fbe6 	bl	801c3f0 <itdt_convertHexChar2Int>
 8019c24:	0003      	movs	r3, r0
 8019c26:	7023      	strb	r3, [r4, #0]
			k++;
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	3301      	adds	r3, #1
 8019c2c:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	3302      	adds	r3, #2
 8019c32:	60bb      	str	r3, [r7, #8]
 8019c34:	e001      	b.n	8019c3a <__checkAndConvert+0x96>
		} else return false;
 8019c36:	2300      	movs	r3, #0
 8019c38:	e005      	b.n	8019c46 <__checkAndConvert+0xa2>
	for ( int i = start ; i < stop ; i+=2 ) {
 8019c3a:	1cbb      	adds	r3, r7, #2
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	68ba      	ldr	r2, [r7, #8]
 8019c40:	429a      	cmp	r2, r3
 8019c42:	dbd1      	blt.n	8019be8 <__checkAndConvert+0x44>
	}
	return true;
 8019c44:	2301      	movs	r3, #1
}
 8019c46:	0018      	movs	r0, r3
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	b005      	add	sp, #20
 8019c4c:	bd90      	pop	{r4, r7, pc}
	...

08019c50 <__updateField>:

static itsdk_console_return_e __updateField(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type) {
 8019c50:	b590      	push	{r4, r7, lr}
 8019c52:	b087      	sub	sp, #28
 8019c54:	af02      	add	r7, sp, #8
 8019c56:	60f8      	str	r0, [r7, #12]
 8019c58:	0008      	movs	r0, r1
 8019c5a:	607a      	str	r2, [r7, #4]
 8019c5c:	0019      	movs	r1, r3
 8019c5e:	240b      	movs	r4, #11
 8019c60:	193b      	adds	r3, r7, r4
 8019c62:	1c02      	adds	r2, r0, #0
 8019c64:	701a      	strb	r2, [r3, #0]
 8019c66:	230a      	movs	r3, #10
 8019c68:	18fb      	adds	r3, r7, r3
 8019c6a:	1c0a      	adds	r2, r1, #0
 8019c6c:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,16,b) ) {
 8019c6e:	193b      	adds	r3, r7, r4
 8019c70:	781a      	ldrb	r2, [r3, #0]
 8019c72:	68f8      	ldr	r0, [r7, #12]
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	9300      	str	r3, [sp, #0]
 8019c78:	2310      	movs	r3, #16
 8019c7a:	2105      	movs	r1, #5
 8019c7c:	f7ff ff92 	bl	8019ba4 <__checkAndConvert>
 8019c80:	1e03      	subs	r3, r0, #0
 8019c82:	d01f      	beq.n	8019cc4 <__updateField+0x74>
		if ( type == ITSDK_SS_SIGFOXKEY ) {
 8019c84:	230a      	movs	r3, #10
 8019c86:	18fb      	adds	r3, r7, r3
 8019c88:	781b      	ldrb	r3, [r3, #0]
 8019c8a:	2b01      	cmp	r3, #1
 8019c8c:	d104      	bne.n	8019c98 <__updateField+0x48>
		   itsdk_encrypt_cifferKey(b,16);
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	2110      	movs	r1, #16
 8019c92:	0018      	movs	r0, r3
 8019c94:	f000 fb16 	bl	801a2c4 <itsdk_encrypt_cifferKey>
		}
		if ( itsdk_secstore_writeBlock(type, b) == SS_SUCCESS ) {
 8019c98:	687a      	ldr	r2, [r7, #4]
 8019c9a:	230a      	movs	r3, #10
 8019c9c:	18fb      	adds	r3, r7, r3
 8019c9e:	781b      	ldrb	r3, [r3, #0]
 8019ca0:	0011      	movs	r1, r2
 8019ca2:	0018      	movs	r0, r3
 8019ca4:	f7ff fdc9 	bl	801983a <itsdk_secstore_writeBlock>
 8019ca8:	1e03      	subs	r3, r0, #0
 8019caa:	d105      	bne.n	8019cb8 <__updateField+0x68>
			_itsdk_console_printf("OK\r\n");
 8019cac:	4b0a      	ldr	r3, [pc, #40]	; (8019cd8 <__updateField+0x88>)
 8019cae:	0018      	movs	r0, r3
 8019cb0:	f7fe fc2e 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	e00a      	b.n	8019cce <__updateField+0x7e>
		} else {
			_itsdk_console_printf("KO\r\n");
 8019cb8:	4b08      	ldr	r3, [pc, #32]	; (8019cdc <__updateField+0x8c>)
 8019cba:	0018      	movs	r0, r3
 8019cbc:	f7fe fc28 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8019cc0:	2302      	movs	r3, #2
 8019cc2:	e004      	b.n	8019cce <__updateField+0x7e>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 8019cc4:	4b05      	ldr	r3, [pc, #20]	; (8019cdc <__updateField+0x8c>)
 8019cc6:	0018      	movs	r0, r3
 8019cc8:	f7fe fc22 	bl	8018510 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8019ccc:	2302      	movs	r3, #2
	}
}
 8019cce:	0018      	movs	r0, r3
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	b005      	add	sp, #20
 8019cd4:	bd90      	pop	{r4, r7, pc}
 8019cd6:	46c0      	nop			; (mov r8, r8)
 8019cd8:	0801feb0 	.word	0x0801feb0
 8019cdc:	0801fea8 	.word	0x0801fea8

08019ce0 <__updateField2>:

static itsdk_console_return_e __updateField2(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type, uint8_t offset,uint8_t size) {
 8019ce0:	b590      	push	{r4, r7, lr}
 8019ce2:	b08d      	sub	sp, #52	; 0x34
 8019ce4:	af02      	add	r7, sp, #8
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	0008      	movs	r0, r1
 8019cea:	607a      	str	r2, [r7, #4]
 8019cec:	0019      	movs	r1, r3
 8019cee:	240b      	movs	r4, #11
 8019cf0:	193b      	adds	r3, r7, r4
 8019cf2:	1c02      	adds	r2, r0, #0
 8019cf4:	701a      	strb	r2, [r3, #0]
 8019cf6:	230a      	movs	r3, #10
 8019cf8:	18fb      	adds	r3, r7, r3
 8019cfa:	1c0a      	adds	r2, r1, #0
 8019cfc:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,size,b) ) {
 8019cfe:	2334      	movs	r3, #52	; 0x34
 8019d00:	2208      	movs	r2, #8
 8019d02:	4694      	mov	ip, r2
 8019d04:	44bc      	add	ip, r7
 8019d06:	4463      	add	r3, ip
 8019d08:	7819      	ldrb	r1, [r3, #0]
 8019d0a:	193b      	adds	r3, r7, r4
 8019d0c:	781a      	ldrb	r2, [r3, #0]
 8019d0e:	68f8      	ldr	r0, [r7, #12]
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	9300      	str	r3, [sp, #0]
 8019d14:	000b      	movs	r3, r1
 8019d16:	2105      	movs	r1, #5
 8019d18:	f7ff ff44 	bl	8019ba4 <__checkAndConvert>
 8019d1c:	1e03      	subs	r3, r0, #0
 8019d1e:	d045      	beq.n	8019dac <__updateField2+0xcc>
		uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];
		if ( itsdk_secstore_readBlock(type, _b) != SS_SUCCESS ) {
 8019d20:	2314      	movs	r3, #20
 8019d22:	18fa      	adds	r2, r7, r3
 8019d24:	230a      	movs	r3, #10
 8019d26:	18fb      	adds	r3, r7, r3
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	0011      	movs	r1, r2
 8019d2c:	0018      	movs	r0, r3
 8019d2e:	f7ff fd37 	bl	80197a0 <itsdk_secstore_readBlock>
 8019d32:	1e03      	subs	r3, r0, #0
 8019d34:	d005      	beq.n	8019d42 <__updateField2+0x62>
			_itsdk_console_printf("KO\r\n");
 8019d36:	4b22      	ldr	r3, [pc, #136]	; (8019dc0 <__updateField2+0xe0>)
 8019d38:	0018      	movs	r0, r3
 8019d3a:	f7fe fbe9 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8019d3e:	2302      	movs	r3, #2
 8019d40:	e039      	b.n	8019db6 <__updateField2+0xd6>
		}
		for ( int i = 0 ; i < size ; i++) {
 8019d42:	2300      	movs	r3, #0
 8019d44:	627b      	str	r3, [r7, #36]	; 0x24
 8019d46:	e011      	b.n	8019d6c <__updateField2+0x8c>
			_b[i+offset] = b[i];
 8019d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d4a:	687a      	ldr	r2, [r7, #4]
 8019d4c:	18d2      	adds	r2, r2, r3
 8019d4e:	2330      	movs	r3, #48	; 0x30
 8019d50:	2108      	movs	r1, #8
 8019d52:	468c      	mov	ip, r1
 8019d54:	44bc      	add	ip, r7
 8019d56:	4463      	add	r3, ip
 8019d58:	7819      	ldrb	r1, [r3, #0]
 8019d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d5c:	18cb      	adds	r3, r1, r3
 8019d5e:	7811      	ldrb	r1, [r2, #0]
 8019d60:	2214      	movs	r2, #20
 8019d62:	18ba      	adds	r2, r7, r2
 8019d64:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i < size ; i++) {
 8019d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d68:	3301      	adds	r3, #1
 8019d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8019d6c:	2334      	movs	r3, #52	; 0x34
 8019d6e:	2208      	movs	r2, #8
 8019d70:	4694      	mov	ip, r2
 8019d72:	44bc      	add	ip, r7
 8019d74:	4463      	add	r3, ip
 8019d76:	781b      	ldrb	r3, [r3, #0]
 8019d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d7a:	429a      	cmp	r2, r3
 8019d7c:	dbe4      	blt.n	8019d48 <__updateField2+0x68>
		}
		if ( itsdk_secstore_writeBlock(type, _b) == SS_SUCCESS ) {
 8019d7e:	2314      	movs	r3, #20
 8019d80:	18fa      	adds	r2, r7, r3
 8019d82:	230a      	movs	r3, #10
 8019d84:	18fb      	adds	r3, r7, r3
 8019d86:	781b      	ldrb	r3, [r3, #0]
 8019d88:	0011      	movs	r1, r2
 8019d8a:	0018      	movs	r0, r3
 8019d8c:	f7ff fd55 	bl	801983a <itsdk_secstore_writeBlock>
 8019d90:	1e03      	subs	r3, r0, #0
 8019d92:	d105      	bne.n	8019da0 <__updateField2+0xc0>
			_itsdk_console_printf("OK\r\n");
 8019d94:	4b0b      	ldr	r3, [pc, #44]	; (8019dc4 <__updateField2+0xe4>)
 8019d96:	0018      	movs	r0, r3
 8019d98:	f7fe fbba 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	e00a      	b.n	8019db6 <__updateField2+0xd6>
		} else {
			_itsdk_console_printf("KO\r\n");
 8019da0:	4b07      	ldr	r3, [pc, #28]	; (8019dc0 <__updateField2+0xe0>)
 8019da2:	0018      	movs	r0, r3
 8019da4:	f7fe fbb4 	bl	8018510 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8019da8:	2302      	movs	r3, #2
 8019daa:	e004      	b.n	8019db6 <__updateField2+0xd6>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 8019dac:	4b04      	ldr	r3, [pc, #16]	; (8019dc0 <__updateField2+0xe0>)
 8019dae:	0018      	movs	r0, r3
 8019db0:	f7fe fbae 	bl	8018510 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8019db4:	2302      	movs	r3, #2
	}
}
 8019db6:	0018      	movs	r0, r3
 8019db8:	46bd      	mov	sp, r7
 8019dba:	b00b      	add	sp, #44	; 0x2c
 8019dbc:	bd90      	pop	{r4, r7, pc}
 8019dbe:	46c0      	nop			; (mov r8, r8)
 8019dc0:	0801fea8 	.word	0x0801fea8
 8019dc4:	0801feb0 	.word	0x0801feb0

08019dc8 <_itsdk_secStore_consolePriv>:

/**
 * Extends the console function
 */
static itsdk_console_return_e _itsdk_secStore_consolePriv(char * buffer, uint8_t sz) {
 8019dc8:	b5b0      	push	{r4, r5, r7, lr}
 8019dca:	b090      	sub	sp, #64	; 0x40
 8019dcc:	af02      	add	r7, sp, #8
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	000a      	movs	r2, r1
 8019dd2:	1cfb      	adds	r3, r7, #3
 8019dd4:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 8019dd6:	1cfb      	adds	r3, r7, #3
 8019dd8:	781b      	ldrb	r3, [r3, #0]
 8019dda:	2b01      	cmp	r3, #1
 8019ddc:	d136      	bne.n	8019e4c <_itsdk_secStore_consolePriv+0x84>
		switch(buffer[0]){
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	781b      	ldrb	r3, [r3, #0]
 8019de2:	2b3f      	cmp	r3, #63	; 0x3f
 8019de4:	d000      	beq.n	8019de8 <_itsdk_secStore_consolePriv+0x20>
			_itsdk_console_printf("SS:P:xxxx  : User change key 7 (16B hex)\r\n");
		  #endif
		  return ITSDK_CONSOLE_SUCCES;
		  break;
		default:
			break;
 8019de6:	e1cb      	b.n	801a180 <_itsdk_secStore_consolePriv+0x3b8>
			_itsdk_console_printf("--- SecureStore\r\n");
 8019de8:	4bd3      	ldr	r3, [pc, #844]	; (801a138 <_itsdk_secStore_consolePriv+0x370>)
 8019dea:	0018      	movs	r0, r3
 8019dec:	f7fe fb90 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("ss:R       : restore all SS to factory default\r\n");
 8019df0:	4bd2      	ldr	r3, [pc, #840]	; (801a13c <_itsdk_secStore_consolePriv+0x374>)
 8019df2:	0018      	movs	r0, r3
 8019df4:	f7fe fb8c 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("SS:0:xxxx  : change the secure store dyn Key (12B)\r\n");
 8019df8:	4bd1      	ldr	r3, [pc, #836]	; (801a140 <_itsdk_secStore_consolePriv+0x378>)
 8019dfa:	0018      	movs	r0, r3
 8019dfc:	f7fe fb88 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("SS:1:xxxx  : change the console password (max 15 char)\r\n");
 8019e00:	4bd0      	ldr	r3, [pc, #832]	; (801a144 <_itsdk_secStore_consolePriv+0x37c>)
 8019e02:	0018      	movs	r0, r3
 8019e04:	f7fe fb84 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("ss:Z       : LoRa restore factory setting\r\n");
 8019e08:	4bcf      	ldr	r3, [pc, #828]	; (801a148 <_itsdk_secStore_consolePriv+0x380>)
 8019e0a:	0018      	movs	r0, r3
 8019e0c:	f7fe fb80 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("ss:9       : LoRa OTAA print DevEUI (8B hex)\r\n");
 8019e10:	4bce      	ldr	r3, [pc, #824]	; (801a14c <_itsdk_secStore_consolePriv+0x384>)
 8019e12:	0018      	movs	r0, r3
 8019e14:	f7fe fb7c 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("SS:9:xxxx  : LoRa OTAA change DevEUI (8B hex)\r\n");
 8019e18:	4bcd      	ldr	r3, [pc, #820]	; (801a150 <_itsdk_secStore_consolePriv+0x388>)
 8019e1a:	0018      	movs	r0, r3
 8019e1c:	f7fe fb78 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("ss:A       : LoRa OTAA print AppEUI (8B hex)\r\n");
 8019e20:	4bcc      	ldr	r3, [pc, #816]	; (801a154 <_itsdk_secStore_consolePriv+0x38c>)
 8019e22:	0018      	movs	r0, r3
 8019e24:	f7fe fb74 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("SS:A:xxxx  : LoRa OTAA change AppEUI (8B hex)\r\n");
 8019e28:	4bcb      	ldr	r3, [pc, #812]	; (801a158 <_itsdk_secStore_consolePriv+0x390>)
 8019e2a:	0018      	movs	r0, r3
 8019e2c:	f7fe fb70 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("SS:B:xxxx  : LoRa OTAA change AppKey (16B hex)\r\n");
 8019e30:	4bca      	ldr	r3, [pc, #808]	; (801a15c <_itsdk_secStore_consolePriv+0x394>)
 8019e32:	0018      	movs	r0, r3
 8019e34:	f7fe fb6c 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("SS:C:xxxx  : LoRa OTAA change NwkKey (16B hex)\r\n");
 8019e38:	4bc9      	ldr	r3, [pc, #804]	; (801a160 <_itsdk_secStore_consolePriv+0x398>)
 8019e3a:	0018      	movs	r0, r3
 8019e3c:	f7fe fb68 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("SS:D:xxxx  : LoRa OTAA change Nwk+App (16B hex)\r\n");
 8019e40:	4bc8      	ldr	r3, [pc, #800]	; (801a164 <_itsdk_secStore_consolePriv+0x39c>)
 8019e42:	0018      	movs	r0, r3
 8019e44:	f7fe fb64 	bl	8018510 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 8019e48:	2300      	movs	r3, #0
 8019e4a:	e19a      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
		}
	} else if ( sz >= 4 ) {
 8019e4c:	1cfb      	adds	r3, r7, #3
 8019e4e:	781b      	ldrb	r3, [r3, #0]
 8019e50:	2b03      	cmp	r3, #3
 8019e52:	d800      	bhi.n	8019e56 <_itsdk_secStore_consolePriv+0x8e>
 8019e54:	e194      	b.n	801a180 <_itsdk_secStore_consolePriv+0x3b8>
		uint8_t b[ITSDK_SECSTORE_BLOCKSZ];
		// READ CASE
		if ( buffer[0] == 's' && buffer[1] == 's' && buffer[2] == ':' ) {
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	781b      	ldrb	r3, [r3, #0]
 8019e5a:	2b73      	cmp	r3, #115	; 0x73
 8019e5c:	d000      	beq.n	8019e60 <_itsdk_secStore_consolePriv+0x98>
 8019e5e:	e096      	b.n	8019f8e <_itsdk_secStore_consolePriv+0x1c6>
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	3301      	adds	r3, #1
 8019e64:	781b      	ldrb	r3, [r3, #0]
 8019e66:	2b73      	cmp	r3, #115	; 0x73
 8019e68:	d000      	beq.n	8019e6c <_itsdk_secStore_consolePriv+0xa4>
 8019e6a:	e090      	b.n	8019f8e <_itsdk_secStore_consolePriv+0x1c6>
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	3302      	adds	r3, #2
 8019e70:	781b      	ldrb	r3, [r3, #0]
 8019e72:	2b3a      	cmp	r3, #58	; 0x3a
 8019e74:	d000      	beq.n	8019e78 <_itsdk_secStore_consolePriv+0xb0>
 8019e76:	e08a      	b.n	8019f8e <_itsdk_secStore_consolePriv+0x1c6>
			switch(buffer[3]) {
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	3303      	adds	r3, #3
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	3b39      	subs	r3, #57	; 0x39
 8019e80:	2b28      	cmp	r3, #40	; 0x28
 8019e82:	d900      	bls.n	8019e86 <_itsdk_secStore_consolePriv+0xbe>
 8019e84:	e085      	b.n	8019f92 <_itsdk_secStore_consolePriv+0x1ca>
 8019e86:	009a      	lsls	r2, r3, #2
 8019e88:	4bb7      	ldr	r3, [pc, #732]	; (801a168 <_itsdk_secStore_consolePriv+0x3a0>)
 8019e8a:	18d3      	adds	r3, r2, r3
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	469f      	mov	pc, r3
			case 'R':
				// all config factory default
				{
					uint8_t ret = 0;
 8019e90:	2337      	movs	r3, #55	; 0x37
 8019e92:	18fb      	adds	r3, r7, r3
 8019e94:	2200      	movs	r2, #0
 8019e96:	701a      	strb	r2, [r3, #0]
					#endif
					#if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
					  if ( itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE) != ENCRYPT_RETURN_SUCESS ) ret =1;
					#endif
					#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
					  if ( itsdk_lorawan_resetFactoryDefaults(true) != LORAWAN_RETURN_SUCESS ) ret=1;
 8019e98:	2001      	movs	r0, #1
 8019e9a:	f002 f921 	bl	801c0e0 <itsdk_lorawan_resetFactoryDefaults>
 8019e9e:	1e03      	subs	r3, r0, #0
 8019ea0:	d003      	beq.n	8019eaa <_itsdk_secStore_consolePriv+0xe2>
 8019ea2:	2337      	movs	r3, #55	; 0x37
 8019ea4:	18fb      	adds	r3, r7, r3
 8019ea6:	2201      	movs	r2, #1
 8019ea8:	701a      	strb	r2, [r3, #0]
					#endif
					if ( ret == 0 ) {
 8019eaa:	2337      	movs	r3, #55	; 0x37
 8019eac:	18fb      	adds	r3, r7, r3
 8019eae:	781b      	ldrb	r3, [r3, #0]
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d105      	bne.n	8019ec0 <_itsdk_secStore_consolePriv+0xf8>
					  _itsdk_console_printf("OK\r\n");
 8019eb4:	4bad      	ldr	r3, [pc, #692]	; (801a16c <_itsdk_secStore_consolePriv+0x3a4>)
 8019eb6:	0018      	movs	r0, r3
 8019eb8:	f7fe fb2a 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	e160      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				    } else {
					  _itsdk_console_printf("KO\r\n");
 8019ec0:	4bab      	ldr	r3, [pc, #684]	; (801a170 <_itsdk_secStore_consolePriv+0x3a8>)
 8019ec2:	0018      	movs	r0, r3
 8019ec4:	f7fe fb24 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019ec8:	2302      	movs	r3, #2
 8019eca:	e15a      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				  }
				break;
			 #endif
			 #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
			  case 'Z':
				  if ( itsdk_lorawan_resetFactoryDefaults(true) == LORAWAN_RETURN_SUCESS ) {
 8019ecc:	2001      	movs	r0, #1
 8019ece:	f002 f907 	bl	801c0e0 <itsdk_lorawan_resetFactoryDefaults>
 8019ed2:	1e03      	subs	r3, r0, #0
 8019ed4:	d105      	bne.n	8019ee2 <_itsdk_secStore_consolePriv+0x11a>
					  _itsdk_console_printf("OK\r\n");
 8019ed6:	4ba5      	ldr	r3, [pc, #660]	; (801a16c <_itsdk_secStore_consolePriv+0x3a4>)
 8019ed8:	0018      	movs	r0, r3
 8019eda:	f7fe fb19 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8019ede:	2300      	movs	r3, #0
 8019ee0:	e14f      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 8019ee2:	4ba3      	ldr	r3, [pc, #652]	; (801a170 <_itsdk_secStore_consolePriv+0x3a8>)
 8019ee4:	0018      	movs	r0, r3
 8019ee6:	f7fe fb13 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019eea:	2302      	movs	r3, #2
 8019eec:	e149      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				  }
              #endif
              #if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			  case '9':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 8019eee:	230c      	movs	r3, #12
 8019ef0:	18fb      	adds	r3, r7, r3
 8019ef2:	0019      	movs	r1, r3
 8019ef4:	2007      	movs	r0, #7
 8019ef6:	f7ff fc53 	bl	80197a0 <itsdk_secstore_readBlock>
 8019efa:	1e03      	subs	r3, r0, #0
 8019efc:	d119      	bne.n	8019f32 <_itsdk_secStore_consolePriv+0x16a>
					  __console_print_hex(b,0,8);
 8019efe:	2300      	movs	r3, #0
 8019f00:	633b      	str	r3, [r7, #48]	; 0x30
 8019f02:	e00d      	b.n	8019f20 <_itsdk_secStore_consolePriv+0x158>
 8019f04:	230c      	movs	r3, #12
 8019f06:	18fa      	adds	r2, r7, r3
 8019f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f0a:	18d3      	adds	r3, r2, r3
 8019f0c:	781b      	ldrb	r3, [r3, #0]
 8019f0e:	001a      	movs	r2, r3
 8019f10:	4b98      	ldr	r3, [pc, #608]	; (801a174 <_itsdk_secStore_consolePriv+0x3ac>)
 8019f12:	0011      	movs	r1, r2
 8019f14:	0018      	movs	r0, r3
 8019f16:	f7fe fafb 	bl	8018510 <_itsdk_console_printf>
 8019f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f1c:	3301      	adds	r3, #1
 8019f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8019f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f22:	2b07      	cmp	r3, #7
 8019f24:	ddee      	ble.n	8019f04 <_itsdk_secStore_consolePriv+0x13c>
 8019f26:	4b94      	ldr	r3, [pc, #592]	; (801a178 <_itsdk_secStore_consolePriv+0x3b0>)
 8019f28:	0018      	movs	r0, r3
 8019f2a:	f7fe faf1 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8019f2e:	2300      	movs	r3, #0
 8019f30:	e127      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 8019f32:	4b8f      	ldr	r3, [pc, #572]	; (801a170 <_itsdk_secStore_consolePriv+0x3a8>)
 8019f34:	0018      	movs	r0, r3
 8019f36:	f7fe faeb 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019f3a:	2302      	movs	r3, #2
 8019f3c:	e121      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				  }
			  case 'A':
			  case 'a':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 8019f3e:	230c      	movs	r3, #12
 8019f40:	18fb      	adds	r3, r7, r3
 8019f42:	0019      	movs	r1, r3
 8019f44:	2007      	movs	r0, #7
 8019f46:	f7ff fc2b 	bl	80197a0 <itsdk_secstore_readBlock>
 8019f4a:	1e03      	subs	r3, r0, #0
 8019f4c:	d119      	bne.n	8019f82 <_itsdk_secStore_consolePriv+0x1ba>
					  __console_print_hex(b,8,8);
 8019f4e:	2308      	movs	r3, #8
 8019f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f52:	e00d      	b.n	8019f70 <_itsdk_secStore_consolePriv+0x1a8>
 8019f54:	230c      	movs	r3, #12
 8019f56:	18fa      	adds	r2, r7, r3
 8019f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f5a:	18d3      	adds	r3, r2, r3
 8019f5c:	781b      	ldrb	r3, [r3, #0]
 8019f5e:	001a      	movs	r2, r3
 8019f60:	4b84      	ldr	r3, [pc, #528]	; (801a174 <_itsdk_secStore_consolePriv+0x3ac>)
 8019f62:	0011      	movs	r1, r2
 8019f64:	0018      	movs	r0, r3
 8019f66:	f7fe fad3 	bl	8018510 <_itsdk_console_printf>
 8019f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6c:	3301      	adds	r3, #1
 8019f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f72:	2b0f      	cmp	r3, #15
 8019f74:	ddee      	ble.n	8019f54 <_itsdk_secStore_consolePriv+0x18c>
 8019f76:	4b80      	ldr	r3, [pc, #512]	; (801a178 <_itsdk_secStore_consolePriv+0x3b0>)
 8019f78:	0018      	movs	r0, r3
 8019f7a:	f7fe fac9 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	e0ff      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 8019f82:	4b7b      	ldr	r3, [pc, #492]	; (801a170 <_itsdk_secStore_consolePriv+0x3a8>)
 8019f84:	0018      	movs	r0, r3
 8019f86:	f7fe fac3 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8019f8a:	2302      	movs	r3, #2
 8019f8c:	e0f9      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				  return ITSDK_CONSOLE_SUCCES;
			  #endif
			  default:
				  break;
			}
		}
 8019f8e:	46c0      	nop			; (mov r8, r8)
 8019f90:	e000      	b.n	8019f94 <_itsdk_secStore_consolePriv+0x1cc>
				  break;
 8019f92:	46c0      	nop			; (mov r8, r8)
		// WRITE CASE
		if ( buffer[0] == 'S' && buffer[1] == 'S' && buffer[2] == ':' && buffer[4] == ':' ) {
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	781b      	ldrb	r3, [r3, #0]
 8019f98:	2b53      	cmp	r3, #83	; 0x53
 8019f9a:	d000      	beq.n	8019f9e <_itsdk_secStore_consolePriv+0x1d6>
 8019f9c:	e0f0      	b.n	801a180 <_itsdk_secStore_consolePriv+0x3b8>
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	3301      	adds	r3, #1
 8019fa2:	781b      	ldrb	r3, [r3, #0]
 8019fa4:	2b53      	cmp	r3, #83	; 0x53
 8019fa6:	d000      	beq.n	8019faa <_itsdk_secStore_consolePriv+0x1e2>
 8019fa8:	e0ea      	b.n	801a180 <_itsdk_secStore_consolePriv+0x3b8>
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	3302      	adds	r3, #2
 8019fae:	781b      	ldrb	r3, [r3, #0]
 8019fb0:	2b3a      	cmp	r3, #58	; 0x3a
 8019fb2:	d000      	beq.n	8019fb6 <_itsdk_secStore_consolePriv+0x1ee>
 8019fb4:	e0e4      	b.n	801a180 <_itsdk_secStore_consolePriv+0x3b8>
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	3304      	adds	r3, #4
 8019fba:	781b      	ldrb	r3, [r3, #0]
 8019fbc:	2b3a      	cmp	r3, #58	; 0x3a
 8019fbe:	d000      	beq.n	8019fc2 <_itsdk_secStore_consolePriv+0x1fa>
 8019fc0:	e0de      	b.n	801a180 <_itsdk_secStore_consolePriv+0x3b8>
			int ssz = sz-5;
 8019fc2:	1cfb      	adds	r3, r7, #3
 8019fc4:	781b      	ldrb	r3, [r3, #0]
 8019fc6:	3b05      	subs	r3, #5
 8019fc8:	61fb      	str	r3, [r7, #28]
			switch(buffer[3]) {
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	3303      	adds	r3, #3
 8019fce:	781b      	ldrb	r3, [r3, #0]
 8019fd0:	3b30      	subs	r3, #48	; 0x30
 8019fd2:	2b34      	cmp	r3, #52	; 0x34
 8019fd4:	d900      	bls.n	8019fd8 <_itsdk_secStore_consolePriv+0x210>
 8019fd6:	e0d3      	b.n	801a180 <_itsdk_secStore_consolePriv+0x3b8>
 8019fd8:	009a      	lsls	r2, r3, #2
 8019fda:	4b68      	ldr	r3, [pc, #416]	; (801a17c <_itsdk_secStore_consolePriv+0x3b4>)
 8019fdc:	18d3      	adds	r3, r2, r3
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	469f      	mov	pc, r3
			case '0':
				// DYNKEY
				if ( __checkAndConvert(buffer,5,sz,12,b) ) {
 8019fe2:	1cfb      	adds	r3, r7, #3
 8019fe4:	781a      	ldrb	r2, [r3, #0]
 8019fe6:	6878      	ldr	r0, [r7, #4]
 8019fe8:	230c      	movs	r3, #12
 8019fea:	18fb      	adds	r3, r7, r3
 8019fec:	9300      	str	r3, [sp, #0]
 8019fee:	230c      	movs	r3, #12
 8019ff0:	2105      	movs	r1, #5
 8019ff2:	f7ff fdd7 	bl	8019ba4 <__checkAndConvert>
 8019ff6:	1e03      	subs	r3, r0, #0
 8019ff8:	d006      	beq.n	801a008 <_itsdk_secStore_consolePriv+0x240>
					return _itsk_secstore_rekey(b);
 8019ffa:	230c      	movs	r3, #12
 8019ffc:	18fb      	adds	r3, r7, r3
 8019ffe:	0018      	movs	r0, r3
 801a000:	f7ff fd2a 	bl	8019a58 <_itsk_secstore_rekey>
 801a004:	0003      	movs	r3, r0
 801a006:	e0bc      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 801a008:	4b59      	ldr	r3, [pc, #356]	; (801a170 <_itsdk_secStore_consolePriv+0x3a8>)
 801a00a:	0018      	movs	r0, r3
 801a00c:	f7fe fa80 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 801a010:	2302      	movs	r3, #2
 801a012:	e0b6      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				}
			case '1':
				// ITSDK_SS_CONSOLEKEY
				if ( ssz > 15 ) {
 801a014:	69fb      	ldr	r3, [r7, #28]
 801a016:	2b0f      	cmp	r3, #15
 801a018:	dd05      	ble.n	801a026 <_itsdk_secStore_consolePriv+0x25e>
					  _itsdk_console_printf("KO\r\n");
 801a01a:	4b55      	ldr	r3, [pc, #340]	; (801a170 <_itsdk_secStore_consolePriv+0x3a8>)
 801a01c:	0018      	movs	r0, r3
 801a01e:	f7fe fa77 	bl	8018510 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 801a022:	2302      	movs	r3, #2
 801a024:	e0ad      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				}
				for ( int i = 0 ; i < ssz ; i++) {
 801a026:	2300      	movs	r3, #0
 801a028:	62bb      	str	r3, [r7, #40]	; 0x28
 801a02a:	e00d      	b.n	801a048 <_itsdk_secStore_consolePriv+0x280>
					b[i] = buffer[i+5];
 801a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a02e:	3305      	adds	r3, #5
 801a030:	687a      	ldr	r2, [r7, #4]
 801a032:	18d3      	adds	r3, r2, r3
 801a034:	7819      	ldrb	r1, [r3, #0]
 801a036:	230c      	movs	r3, #12
 801a038:	18fa      	adds	r2, r7, r3
 801a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a03c:	18d3      	adds	r3, r2, r3
 801a03e:	1c0a      	adds	r2, r1, #0
 801a040:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < ssz ; i++) {
 801a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a044:	3301      	adds	r3, #1
 801a046:	62bb      	str	r3, [r7, #40]	; 0x28
 801a048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a04a:	69fb      	ldr	r3, [r7, #28]
 801a04c:	429a      	cmp	r2, r3
 801a04e:	dbed      	blt.n	801a02c <_itsdk_secStore_consolePriv+0x264>
				}
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 801a050:	69fb      	ldr	r3, [r7, #28]
 801a052:	627b      	str	r3, [r7, #36]	; 0x24
 801a054:	e008      	b.n	801a068 <_itsdk_secStore_consolePriv+0x2a0>
					b[i] = 0;
 801a056:	230c      	movs	r3, #12
 801a058:	18fa      	adds	r2, r7, r3
 801a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a05c:	18d3      	adds	r3, r2, r3
 801a05e:	2200      	movs	r2, #0
 801a060:	701a      	strb	r2, [r3, #0]
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 801a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a064:	3301      	adds	r3, #1
 801a066:	627b      	str	r3, [r7, #36]	; 0x24
 801a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a06a:	2b0f      	cmp	r3, #15
 801a06c:	ddf3      	ble.n	801a056 <_itsdk_secStore_consolePriv+0x28e>
				}
				if ( itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY, b) == SS_SUCCESS ) {
 801a06e:	230c      	movs	r3, #12
 801a070:	18fb      	adds	r3, r7, r3
 801a072:	0019      	movs	r1, r3
 801a074:	2000      	movs	r0, #0
 801a076:	f7ff fbe0 	bl	801983a <itsdk_secstore_writeBlock>
 801a07a:	1e03      	subs	r3, r0, #0
 801a07c:	d105      	bne.n	801a08a <_itsdk_secStore_consolePriv+0x2c2>
					_itsdk_console_printf("OK\r\n");
 801a07e:	4b3b      	ldr	r3, [pc, #236]	; (801a16c <_itsdk_secStore_consolePriv+0x3a4>)
 801a080:	0018      	movs	r0, r3
 801a082:	f7fe fa45 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 801a086:	2300      	movs	r3, #0
 801a088:	e07b      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 801a08a:	4b39      	ldr	r3, [pc, #228]	; (801a170 <_itsdk_secStore_consolePriv+0x3a8>)
 801a08c:	0018      	movs	r0, r3
 801a08e:	f7fe fa3f 	bl	8018510 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 801a092:	2302      	movs	r3, #2
 801a094:	e075      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_ABP_APPSKEY);
		#endif
		#if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			case '9':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,0,8);
 801a096:	230c      	movs	r3, #12
 801a098:	18fa      	adds	r2, r7, r3
 801a09a:	1cfb      	adds	r3, r7, #3
 801a09c:	7819      	ldrb	r1, [r3, #0]
 801a09e:	6878      	ldr	r0, [r7, #4]
 801a0a0:	2308      	movs	r3, #8
 801a0a2:	9301      	str	r3, [sp, #4]
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	9300      	str	r3, [sp, #0]
 801a0a8:	2307      	movs	r3, #7
 801a0aa:	f7ff fe19 	bl	8019ce0 <__updateField2>
 801a0ae:	0003      	movs	r3, r0
 801a0b0:	e067      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
			case 'a':
			case 'A':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,8,8);
 801a0b2:	230c      	movs	r3, #12
 801a0b4:	18fa      	adds	r2, r7, r3
 801a0b6:	1cfb      	adds	r3, r7, #3
 801a0b8:	7819      	ldrb	r1, [r3, #0]
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	2308      	movs	r3, #8
 801a0be:	9301      	str	r3, [sp, #4]
 801a0c0:	2308      	movs	r3, #8
 801a0c2:	9300      	str	r3, [sp, #0]
 801a0c4:	2307      	movs	r3, #7
 801a0c6:	f7ff fe0b 	bl	8019ce0 <__updateField2>
 801a0ca:	0003      	movs	r3, r0
 801a0cc:	e059      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
			case 'b':
			case 'B':
				// ITSDK_SS_LORA_OTAA_APPKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 801a0ce:	230c      	movs	r3, #12
 801a0d0:	18fa      	adds	r2, r7, r3
 801a0d2:	1cfb      	adds	r3, r7, #3
 801a0d4:	7819      	ldrb	r1, [r3, #0]
 801a0d6:	6878      	ldr	r0, [r7, #4]
 801a0d8:	2308      	movs	r3, #8
 801a0da:	f7ff fdb9 	bl	8019c50 <__updateField>
 801a0de:	0003      	movs	r3, r0
 801a0e0:	e04f      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
			case 'c':
			case 'C':
				// ITSDK_SS_LORA_OTAA_NWKKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY);
 801a0e2:	230c      	movs	r3, #12
 801a0e4:	18fa      	adds	r2, r7, r3
 801a0e6:	1cfb      	adds	r3, r7, #3
 801a0e8:	7819      	ldrb	r1, [r3, #0]
 801a0ea:	6878      	ldr	r0, [r7, #4]
 801a0ec:	2309      	movs	r3, #9
 801a0ee:	f7ff fdaf 	bl	8019c50 <__updateField>
 801a0f2:	0003      	movs	r3, r0
 801a0f4:	e045      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
			case 'd':
			case 'D': {
				// ITSDK_SS_LORA_OTAA_APPKEY + ITSDK_SS_LORA_OTAA_NWKKEY
				itsdk_console_return_e ret;
				if ( (ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY)) == ITSDK_CONSOLE_SUCCES ) {
 801a0f6:	2523      	movs	r5, #35	; 0x23
 801a0f8:	197c      	adds	r4, r7, r5
 801a0fa:	230c      	movs	r3, #12
 801a0fc:	18fa      	adds	r2, r7, r3
 801a0fe:	1cfb      	adds	r3, r7, #3
 801a100:	7819      	ldrb	r1, [r3, #0]
 801a102:	6878      	ldr	r0, [r7, #4]
 801a104:	2309      	movs	r3, #9
 801a106:	f7ff fda3 	bl	8019c50 <__updateField>
 801a10a:	0003      	movs	r3, r0
 801a10c:	7023      	strb	r3, [r4, #0]
 801a10e:	197b      	adds	r3, r7, r5
 801a110:	781b      	ldrb	r3, [r3, #0]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d10b      	bne.n	801a12e <_itsdk_secStore_consolePriv+0x366>
					ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 801a116:	2323      	movs	r3, #35	; 0x23
 801a118:	18fc      	adds	r4, r7, r3
 801a11a:	230c      	movs	r3, #12
 801a11c:	18fa      	adds	r2, r7, r3
 801a11e:	1cfb      	adds	r3, r7, #3
 801a120:	7819      	ldrb	r1, [r3, #0]
 801a122:	6878      	ldr	r0, [r7, #4]
 801a124:	2308      	movs	r3, #8
 801a126:	f7ff fd93 	bl	8019c50 <__updateField>
 801a12a:	0003      	movs	r3, r0
 801a12c:	7023      	strb	r3, [r4, #0]
				}
				return ret;
 801a12e:	2323      	movs	r3, #35	; 0x23
 801a130:	18fb      	adds	r3, r7, r3
 801a132:	781b      	ldrb	r3, [r3, #0]
 801a134:	e025      	b.n	801a182 <_itsdk_secStore_consolePriv+0x3ba>
 801a136:	46c0      	nop			; (mov r8, r8)
 801a138:	0801feb8 	.word	0x0801feb8
 801a13c:	0801fecc 	.word	0x0801fecc
 801a140:	0801ff00 	.word	0x0801ff00
 801a144:	0801ff38 	.word	0x0801ff38
 801a148:	0801ff74 	.word	0x0801ff74
 801a14c:	0801ffa0 	.word	0x0801ffa0
 801a150:	0801ffd0 	.word	0x0801ffd0
 801a154:	08020000 	.word	0x08020000
 801a158:	08020030 	.word	0x08020030
 801a15c:	08020060 	.word	0x08020060
 801a160:	08020094 	.word	0x08020094
 801a164:	080200c8 	.word	0x080200c8
 801a168:	08020da4 	.word	0x08020da4
 801a16c:	0801feb0 	.word	0x0801feb0
 801a170:	0801fea8 	.word	0x0801fea8
 801a174:	080200fc 	.word	0x080200fc
 801a178:	08020104 	.word	0x08020104
 801a17c:	08020e48 	.word	0x08020e48
				return __updateField(buffer, sz, b, ITSDK_SS_USER7);
	#endif
			} // switch
		} // Write case end
  } //Sz > 4
  return ITSDK_CONSOLE_NOTFOUND;
 801a180:	2301      	movs	r3, #1
}
 801a182:	0018      	movs	r0, r3
 801a184:	46bd      	mov	sp, r7
 801a186:	b00e      	add	sp, #56	; 0x38
 801a188:	bdb0      	pop	{r4, r5, r7, pc}
 801a18a:	46c0      	nop			; (mov r8, r8)

0801a18c <itsdk_secStore_RegisterConsole>:
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 801a18c:	b580      	push	{r7, lr}
 801a18e:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
 801a190:	4b08      	ldr	r3, [pc, #32]	; (801a1b4 <itsdk_secStore_RegisterConsole+0x28>)
 801a192:	4a09      	ldr	r2, [pc, #36]	; (801a1b8 <itsdk_secStore_RegisterConsole+0x2c>)
 801a194:	601a      	str	r2, [r3, #0]
	__console_secStore.console_public = NULL;
 801a196:	4b07      	ldr	r3, [pc, #28]	; (801a1b4 <itsdk_secStore_RegisterConsole+0x28>)
 801a198:	2200      	movs	r2, #0
 801a19a:	605a      	str	r2, [r3, #4]
	__console_secStore.next = NULL;
 801a19c:	4b05      	ldr	r3, [pc, #20]	; (801a1b4 <itsdk_secStore_RegisterConsole+0x28>)
 801a19e:	2200      	movs	r2, #0
 801a1a0:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_secStore);
 801a1a2:	4b04      	ldr	r3, [pc, #16]	; (801a1b4 <itsdk_secStore_RegisterConsole+0x28>)
 801a1a4:	0018      	movs	r0, r3
 801a1a6:	f7fe fb73 	bl	8018890 <itsdk_console_registerCommand>
#endif
	return SS_SUCCESS;
 801a1aa:	2300      	movs	r3, #0
}
 801a1ac:	0018      	movs	r0, r3
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}
 801a1b2:	46c0      	nop			; (mov r8, r8)
 801a1b4:	2000107c 	.word	0x2000107c
 801a1b8:	08019dc9 	.word	0x08019dc9

0801a1bc <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 801a1bc:	b5b0      	push	{r4, r5, r7, lr}
 801a1be:	b0b8      	sub	sp, #224	; 0xe0
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	60f8      	str	r0, [r7, #12]
 801a1c4:	60b9      	str	r1, [r7, #8]
 801a1c6:	603b      	str	r3, [r7, #0]
 801a1c8:	1dfb      	adds	r3, r7, #7
 801a1ca:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 801a1cc:	683b      	ldr	r3, [r7, #0]
 801a1ce:	2110      	movs	r1, #16
 801a1d0:	0018      	movs	r0, r3
 801a1d2:	f000 f8cd 	bl	801a370 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 801a1d6:	24d0      	movs	r4, #208	; 0xd0
 801a1d8:	193a      	adds	r2, r7, r4
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	0010      	movs	r0, r2
 801a1de:	0019      	movs	r1, r3
 801a1e0:	2310      	movs	r3, #16
 801a1e2:	001a      	movs	r2, r3
 801a1e4:	f004 fc22 	bl	801ea2c <memcpy>
	bzero(ctx.Iv,16);
 801a1e8:	2510      	movs	r5, #16
 801a1ea:	197b      	adds	r3, r7, r5
 801a1ec:	33b0      	adds	r3, #176	; 0xb0
 801a1ee:	2110      	movs	r1, #16
 801a1f0:	0018      	movs	r0, r3
 801a1f2:	f004 fbeb 	bl	801e9cc <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 801a1f6:	683a      	ldr	r2, [r7, #0]
 801a1f8:	197b      	adds	r3, r7, r5
 801a1fa:	0011      	movs	r1, r2
 801a1fc:	0018      	movs	r0, r3
 801a1fe:	f000 f9c5 	bl	801a58c <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 801a202:	1939      	adds	r1, r7, r4
 801a204:	197b      	adds	r3, r7, r5
 801a206:	2210      	movs	r2, #16
 801a208:	0018      	movs	r0, r3
 801a20a:	f001 f8d8 	bl	801b3be <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	2110      	movs	r1, #16
 801a212:	0018      	movs	r0, r3
 801a214:	f000 f856 	bl	801a2c4 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 801a218:	68ba      	ldr	r2, [r7, #8]
 801a21a:	193b      	adds	r3, r7, r4
 801a21c:	0010      	movs	r0, r2
 801a21e:	0019      	movs	r1, r3
 801a220:	2310      	movs	r3, #16
 801a222:	001a      	movs	r2, r3
 801a224:	f004 fc02 	bl	801ea2c <memcpy>
	bzero(aesResult,16);
 801a228:	193b      	adds	r3, r7, r4
 801a22a:	2110      	movs	r1, #16
 801a22c:	0018      	movs	r0, r3
 801a22e:	f004 fbcd 	bl	801e9cc <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 801a232:	197b      	adds	r3, r7, r5
 801a234:	21c0      	movs	r1, #192	; 0xc0
 801a236:	0018      	movs	r0, r3
 801a238:	f004 fbc8 	bl	801e9cc <bzero>
}
 801a23c:	46c0      	nop			; (mov r8, r8)
 801a23e:	46bd      	mov	sp, r7
 801a240:	b038      	add	sp, #224	; 0xe0
 801a242:	bdb0      	pop	{r4, r5, r7, pc}

0801a244 <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 801a244:	b5b0      	push	{r4, r5, r7, lr}
 801a246:	b0b8      	sub	sp, #224	; 0xe0
 801a248:	af00      	add	r7, sp, #0
 801a24a:	60f8      	str	r0, [r7, #12]
 801a24c:	60b9      	str	r1, [r7, #8]
 801a24e:	603b      	str	r3, [r7, #0]
 801a250:	1dfb      	adds	r3, r7, #7
 801a252:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 801a254:	683b      	ldr	r3, [r7, #0]
 801a256:	2110      	movs	r1, #16
 801a258:	0018      	movs	r0, r3
 801a25a:	f000 f889 	bl	801a370 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 801a25e:	24d0      	movs	r4, #208	; 0xd0
 801a260:	193a      	adds	r2, r7, r4
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	0010      	movs	r0, r2
 801a266:	0019      	movs	r1, r3
 801a268:	2310      	movs	r3, #16
 801a26a:	001a      	movs	r2, r3
 801a26c:	f004 fbde 	bl	801ea2c <memcpy>
	bzero(ctx.Iv,16);
 801a270:	2510      	movs	r5, #16
 801a272:	197b      	adds	r3, r7, r5
 801a274:	33b0      	adds	r3, #176	; 0xb0
 801a276:	2110      	movs	r1, #16
 801a278:	0018      	movs	r0, r3
 801a27a:	f004 fba7 	bl	801e9cc <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 801a27e:	683a      	ldr	r2, [r7, #0]
 801a280:	197b      	adds	r3, r7, r5
 801a282:	0011      	movs	r1, r2
 801a284:	0018      	movs	r0, r3
 801a286:	f000 f981 	bl	801a58c <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 801a28a:	1939      	adds	r1, r7, r4
 801a28c:	197b      	adds	r3, r7, r5
 801a28e:	2210      	movs	r2, #16
 801a290:	0018      	movs	r0, r3
 801a292:	f001 f8c3 	bl	801b41c <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 801a296:	683b      	ldr	r3, [r7, #0]
 801a298:	2110      	movs	r1, #16
 801a29a:	0018      	movs	r0, r3
 801a29c:	f000 f812 	bl	801a2c4 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 801a2a0:	68ba      	ldr	r2, [r7, #8]
 801a2a2:	193b      	adds	r3, r7, r4
 801a2a4:	0010      	movs	r0, r2
 801a2a6:	0019      	movs	r1, r3
 801a2a8:	2310      	movs	r3, #16
 801a2aa:	001a      	movs	r2, r3
 801a2ac:	f004 fbbe 	bl	801ea2c <memcpy>
	bzero(aesResult,16);
 801a2b0:	193b      	adds	r3, r7, r4
 801a2b2:	2110      	movs	r1, #16
 801a2b4:	0018      	movs	r0, r3
 801a2b6:	f004 fb89 	bl	801e9cc <bzero>
}
 801a2ba:	46c0      	nop			; (mov r8, r8)
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	b038      	add	sp, #224	; 0xe0
 801a2c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a2c4 <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b084      	sub	sp, #16
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]
 801a2cc:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	2203      	movs	r2, #3
 801a2d2:	4013      	ands	r3, r2
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	dd06      	ble.n	801a2e6 <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 801a2d8:	683b      	ldr	r3, [r7, #0]
 801a2da:	b29b      	uxth	r3, r3
 801a2dc:	4a23      	ldr	r2, [pc, #140]	; (801a36c <itsdk_encrypt_cifferKey+0xa8>)
 801a2de:	0019      	movs	r1, r3
 801a2e0:	0010      	movs	r0, r2
 801a2e2:	f001 f977 	bl	801b5d4 <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	60fb      	str	r3, [r7, #12]
 801a2ea:	e037      	b.n	801a35c <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	687a      	ldr	r2, [r7, #4]
 801a2f0:	18d3      	adds	r3, r2, r3
 801a2f2:	781a      	ldrb	r2, [r3, #0]
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	6879      	ldr	r1, [r7, #4]
 801a2f8:	18cb      	adds	r3, r1, r3
 801a2fa:	2159      	movs	r1, #89	; 0x59
 801a2fc:	4249      	negs	r1, r1
 801a2fe:	404a      	eors	r2, r1
 801a300:	b2d2      	uxtb	r2, r2
 801a302:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	3301      	adds	r3, #1
 801a308:	687a      	ldr	r2, [r7, #4]
 801a30a:	18d3      	adds	r3, r2, r3
 801a30c:	781a      	ldrb	r2, [r3, #0]
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	3301      	adds	r3, #1
 801a312:	6879      	ldr	r1, [r7, #4]
 801a314:	18cb      	adds	r3, r1, r3
 801a316:	2145      	movs	r1, #69	; 0x45
 801a318:	404a      	eors	r2, r1
 801a31a:	b2d2      	uxtb	r2, r2
 801a31c:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	3302      	adds	r3, #2
 801a322:	687a      	ldr	r2, [r7, #4]
 801a324:	18d3      	adds	r3, r2, r3
 801a326:	781a      	ldrb	r2, [r3, #0]
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	3302      	adds	r3, #2
 801a32c:	6879      	ldr	r1, [r7, #4]
 801a32e:	18cb      	adds	r3, r1, r3
 801a330:	2165      	movs	r1, #101	; 0x65
 801a332:	4249      	negs	r1, r1
 801a334:	404a      	eors	r2, r1
 801a336:	b2d2      	uxtb	r2, r2
 801a338:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	3303      	adds	r3, #3
 801a33e:	687a      	ldr	r2, [r7, #4]
 801a340:	18d3      	adds	r3, r2, r3
 801a342:	781a      	ldrb	r2, [r3, #0]
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	3303      	adds	r3, #3
 801a348:	6879      	ldr	r1, [r7, #4]
 801a34a:	18cb      	adds	r3, r1, r3
 801a34c:	213d      	movs	r1, #61	; 0x3d
 801a34e:	4249      	negs	r1, r1
 801a350:	404a      	eors	r2, r1
 801a352:	b2d2      	uxtb	r2, r2
 801a354:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	3304      	adds	r3, #4
 801a35a:	60fb      	str	r3, [r7, #12]
 801a35c:	68fa      	ldr	r2, [r7, #12]
 801a35e:	683b      	ldr	r3, [r7, #0]
 801a360:	429a      	cmp	r2, r3
 801a362:	dbc3      	blt.n	801a2ec <itsdk_encrypt_cifferKey+0x28>
	}
}
 801a364:	46c0      	nop			; (mov r8, r8)
 801a366:	46bd      	mov	sp, r7
 801a368:	b004      	add	sp, #16
 801a36a:	bd80      	pop	{r7, pc}
 801a36c:	d0000020 	.word	0xd0000020

0801a370 <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 801a370:	b580      	push	{r7, lr}
 801a372:	b082      	sub	sp, #8
 801a374:	af00      	add	r7, sp, #0
 801a376:	6078      	str	r0, [r7, #4]
 801a378:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 801a37a:	683a      	ldr	r2, [r7, #0]
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	0011      	movs	r1, r2
 801a380:	0018      	movs	r0, r3
 801a382:	f7ff ff9f 	bl	801a2c4 <itsdk_encrypt_cifferKey>
}
 801a386:	46c0      	nop			; (mov r8, r8)
 801a388:	46bd      	mov	sp, r7
 801a38a:	b002      	add	sp, #8
 801a38c:	bd80      	pop	{r7, pc}

0801a38e <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(itsdk_bool_e force) {
 801a38e:	b580      	push	{r7, lr}
 801a390:	b082      	sub	sp, #8
 801a392:	af00      	add	r7, sp, #0
 801a394:	0002      	movs	r2, r0
 801a396:	1dfb      	adds	r3, r7, #7
 801a398:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 801a39a:	2300      	movs	r3, #0
}
 801a39c:	0018      	movs	r0, r3
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	b002      	add	sp, #8
 801a3a2:	bd80      	pop	{r7, pc}

0801a3a4 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 801a3a4:	b590      	push	{r4, r7, lr}
 801a3a6:	b089      	sub	sp, #36	; 0x24
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
 801a3ac:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	61fb      	str	r3, [r7, #28]
 801a3b2:	e030      	b.n	801a416 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 801a3b4:	69fb      	ldr	r3, [r7, #28]
 801a3b6:	009b      	lsls	r3, r3, #2
 801a3b8:	683a      	ldr	r2, [r7, #0]
 801a3ba:	18d2      	adds	r2, r2, r3
 801a3bc:	69fb      	ldr	r3, [r7, #28]
 801a3be:	009b      	lsls	r3, r3, #2
 801a3c0:	6879      	ldr	r1, [r7, #4]
 801a3c2:	18cb      	adds	r3, r1, r3
 801a3c4:	7812      	ldrb	r2, [r2, #0]
 801a3c6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 801a3c8:	69fb      	ldr	r3, [r7, #28]
 801a3ca:	009b      	lsls	r3, r3, #2
 801a3cc:	3301      	adds	r3, #1
 801a3ce:	683a      	ldr	r2, [r7, #0]
 801a3d0:	18d2      	adds	r2, r2, r3
 801a3d2:	69fb      	ldr	r3, [r7, #28]
 801a3d4:	009b      	lsls	r3, r3, #2
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	6879      	ldr	r1, [r7, #4]
 801a3da:	18cb      	adds	r3, r1, r3
 801a3dc:	7812      	ldrb	r2, [r2, #0]
 801a3de:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 801a3e0:	69fb      	ldr	r3, [r7, #28]
 801a3e2:	009b      	lsls	r3, r3, #2
 801a3e4:	3302      	adds	r3, #2
 801a3e6:	683a      	ldr	r2, [r7, #0]
 801a3e8:	18d2      	adds	r2, r2, r3
 801a3ea:	69fb      	ldr	r3, [r7, #28]
 801a3ec:	009b      	lsls	r3, r3, #2
 801a3ee:	3302      	adds	r3, #2
 801a3f0:	6879      	ldr	r1, [r7, #4]
 801a3f2:	18cb      	adds	r3, r1, r3
 801a3f4:	7812      	ldrb	r2, [r2, #0]
 801a3f6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 801a3f8:	69fb      	ldr	r3, [r7, #28]
 801a3fa:	009b      	lsls	r3, r3, #2
 801a3fc:	3303      	adds	r3, #3
 801a3fe:	683a      	ldr	r2, [r7, #0]
 801a400:	18d2      	adds	r2, r2, r3
 801a402:	69fb      	ldr	r3, [r7, #28]
 801a404:	009b      	lsls	r3, r3, #2
 801a406:	3303      	adds	r3, #3
 801a408:	6879      	ldr	r1, [r7, #4]
 801a40a:	18cb      	adds	r3, r1, r3
 801a40c:	7812      	ldrb	r2, [r2, #0]
 801a40e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 801a410:	69fb      	ldr	r3, [r7, #28]
 801a412:	3301      	adds	r3, #1
 801a414:	61fb      	str	r3, [r7, #28]
 801a416:	69fb      	ldr	r3, [r7, #28]
 801a418:	2b03      	cmp	r3, #3
 801a41a:	d9cb      	bls.n	801a3b4 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 801a41c:	2304      	movs	r3, #4
 801a41e:	61fb      	str	r3, [r7, #28]
 801a420:	e0a4      	b.n	801a56c <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 801a422:	69fb      	ldr	r3, [r7, #28]
 801a424:	4a55      	ldr	r2, [pc, #340]	; (801a57c <KeyExpansion+0x1d8>)
 801a426:	4694      	mov	ip, r2
 801a428:	4463      	add	r3, ip
 801a42a:	009b      	lsls	r3, r3, #2
 801a42c:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 801a42e:	687a      	ldr	r2, [r7, #4]
 801a430:	69bb      	ldr	r3, [r7, #24]
 801a432:	18d3      	adds	r3, r2, r3
 801a434:	781a      	ldrb	r2, [r3, #0]
 801a436:	210c      	movs	r1, #12
 801a438:	187b      	adds	r3, r7, r1
 801a43a:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 801a43c:	69bb      	ldr	r3, [r7, #24]
 801a43e:	3301      	adds	r3, #1
 801a440:	687a      	ldr	r2, [r7, #4]
 801a442:	18d3      	adds	r3, r2, r3
 801a444:	781a      	ldrb	r2, [r3, #0]
 801a446:	187b      	adds	r3, r7, r1
 801a448:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 801a44a:	69bb      	ldr	r3, [r7, #24]
 801a44c:	3302      	adds	r3, #2
 801a44e:	687a      	ldr	r2, [r7, #4]
 801a450:	18d3      	adds	r3, r2, r3
 801a452:	781a      	ldrb	r2, [r3, #0]
 801a454:	187b      	adds	r3, r7, r1
 801a456:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 801a458:	69bb      	ldr	r3, [r7, #24]
 801a45a:	3303      	adds	r3, #3
 801a45c:	687a      	ldr	r2, [r7, #4]
 801a45e:	18d3      	adds	r3, r2, r3
 801a460:	781a      	ldrb	r2, [r3, #0]
 801a462:	187b      	adds	r3, r7, r1
 801a464:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 801a466:	69fb      	ldr	r3, [r7, #28]
 801a468:	2203      	movs	r2, #3
 801a46a:	4013      	ands	r3, r2
 801a46c:	d13b      	bne.n	801a4e6 <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 801a46e:	2117      	movs	r1, #23
 801a470:	187b      	adds	r3, r7, r1
 801a472:	200c      	movs	r0, #12
 801a474:	183a      	adds	r2, r7, r0
 801a476:	7812      	ldrb	r2, [r2, #0]
 801a478:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 801a47a:	183b      	adds	r3, r7, r0
 801a47c:	785a      	ldrb	r2, [r3, #1]
 801a47e:	183b      	adds	r3, r7, r0
 801a480:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 801a482:	183b      	adds	r3, r7, r0
 801a484:	789a      	ldrb	r2, [r3, #2]
 801a486:	183b      	adds	r3, r7, r0
 801a488:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 801a48a:	183b      	adds	r3, r7, r0
 801a48c:	78da      	ldrb	r2, [r3, #3]
 801a48e:	183b      	adds	r3, r7, r0
 801a490:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 801a492:	183b      	adds	r3, r7, r0
 801a494:	187a      	adds	r2, r7, r1
 801a496:	7812      	ldrb	r2, [r2, #0]
 801a498:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 801a49a:	183b      	adds	r3, r7, r0
 801a49c:	781b      	ldrb	r3, [r3, #0]
 801a49e:	001a      	movs	r2, r3
 801a4a0:	4b37      	ldr	r3, [pc, #220]	; (801a580 <KeyExpansion+0x1dc>)
 801a4a2:	5c9a      	ldrb	r2, [r3, r2]
 801a4a4:	183b      	adds	r3, r7, r0
 801a4a6:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 801a4a8:	183b      	adds	r3, r7, r0
 801a4aa:	785b      	ldrb	r3, [r3, #1]
 801a4ac:	001a      	movs	r2, r3
 801a4ae:	4b34      	ldr	r3, [pc, #208]	; (801a580 <KeyExpansion+0x1dc>)
 801a4b0:	5c9a      	ldrb	r2, [r3, r2]
 801a4b2:	183b      	adds	r3, r7, r0
 801a4b4:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 801a4b6:	183b      	adds	r3, r7, r0
 801a4b8:	789b      	ldrb	r3, [r3, #2]
 801a4ba:	001a      	movs	r2, r3
 801a4bc:	4b30      	ldr	r3, [pc, #192]	; (801a580 <KeyExpansion+0x1dc>)
 801a4be:	5c9a      	ldrb	r2, [r3, r2]
 801a4c0:	183b      	adds	r3, r7, r0
 801a4c2:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 801a4c4:	183b      	adds	r3, r7, r0
 801a4c6:	78db      	ldrb	r3, [r3, #3]
 801a4c8:	001a      	movs	r2, r3
 801a4ca:	4b2d      	ldr	r3, [pc, #180]	; (801a580 <KeyExpansion+0x1dc>)
 801a4cc:	5c9a      	ldrb	r2, [r3, r2]
 801a4ce:	183b      	adds	r3, r7, r0
 801a4d0:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 801a4d2:	183b      	adds	r3, r7, r0
 801a4d4:	781a      	ldrb	r2, [r3, #0]
 801a4d6:	69fb      	ldr	r3, [r7, #28]
 801a4d8:	089b      	lsrs	r3, r3, #2
 801a4da:	492a      	ldr	r1, [pc, #168]	; (801a584 <KeyExpansion+0x1e0>)
 801a4dc:	5ccb      	ldrb	r3, [r1, r3]
 801a4de:	4053      	eors	r3, r2
 801a4e0:	b2da      	uxtb	r2, r3
 801a4e2:	183b      	adds	r3, r7, r0
 801a4e4:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 801a4e6:	69fb      	ldr	r3, [r7, #28]
 801a4e8:	009b      	lsls	r3, r3, #2
 801a4ea:	613b      	str	r3, [r7, #16]
 801a4ec:	69fb      	ldr	r3, [r7, #28]
 801a4ee:	4a26      	ldr	r2, [pc, #152]	; (801a588 <KeyExpansion+0x1e4>)
 801a4f0:	4694      	mov	ip, r2
 801a4f2:	4463      	add	r3, ip
 801a4f4:	009b      	lsls	r3, r3, #2
 801a4f6:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 801a4f8:	687a      	ldr	r2, [r7, #4]
 801a4fa:	69bb      	ldr	r3, [r7, #24]
 801a4fc:	18d3      	adds	r3, r2, r3
 801a4fe:	7819      	ldrb	r1, [r3, #0]
 801a500:	240c      	movs	r4, #12
 801a502:	193b      	adds	r3, r7, r4
 801a504:	781a      	ldrb	r2, [r3, #0]
 801a506:	6878      	ldr	r0, [r7, #4]
 801a508:	693b      	ldr	r3, [r7, #16]
 801a50a:	18c3      	adds	r3, r0, r3
 801a50c:	404a      	eors	r2, r1
 801a50e:	b2d2      	uxtb	r2, r2
 801a510:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 801a512:	69bb      	ldr	r3, [r7, #24]
 801a514:	3301      	adds	r3, #1
 801a516:	687a      	ldr	r2, [r7, #4]
 801a518:	18d3      	adds	r3, r2, r3
 801a51a:	7819      	ldrb	r1, [r3, #0]
 801a51c:	193b      	adds	r3, r7, r4
 801a51e:	785a      	ldrb	r2, [r3, #1]
 801a520:	693b      	ldr	r3, [r7, #16]
 801a522:	3301      	adds	r3, #1
 801a524:	6878      	ldr	r0, [r7, #4]
 801a526:	18c3      	adds	r3, r0, r3
 801a528:	404a      	eors	r2, r1
 801a52a:	b2d2      	uxtb	r2, r2
 801a52c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 801a52e:	69bb      	ldr	r3, [r7, #24]
 801a530:	3302      	adds	r3, #2
 801a532:	687a      	ldr	r2, [r7, #4]
 801a534:	18d3      	adds	r3, r2, r3
 801a536:	7819      	ldrb	r1, [r3, #0]
 801a538:	193b      	adds	r3, r7, r4
 801a53a:	789a      	ldrb	r2, [r3, #2]
 801a53c:	693b      	ldr	r3, [r7, #16]
 801a53e:	3302      	adds	r3, #2
 801a540:	6878      	ldr	r0, [r7, #4]
 801a542:	18c3      	adds	r3, r0, r3
 801a544:	404a      	eors	r2, r1
 801a546:	b2d2      	uxtb	r2, r2
 801a548:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 801a54a:	69bb      	ldr	r3, [r7, #24]
 801a54c:	3303      	adds	r3, #3
 801a54e:	687a      	ldr	r2, [r7, #4]
 801a550:	18d3      	adds	r3, r2, r3
 801a552:	7819      	ldrb	r1, [r3, #0]
 801a554:	193b      	adds	r3, r7, r4
 801a556:	78da      	ldrb	r2, [r3, #3]
 801a558:	693b      	ldr	r3, [r7, #16]
 801a55a:	3303      	adds	r3, #3
 801a55c:	6878      	ldr	r0, [r7, #4]
 801a55e:	18c3      	adds	r3, r0, r3
 801a560:	404a      	eors	r2, r1
 801a562:	b2d2      	uxtb	r2, r2
 801a564:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 801a566:	69fb      	ldr	r3, [r7, #28]
 801a568:	3301      	adds	r3, #1
 801a56a:	61fb      	str	r3, [r7, #28]
 801a56c:	69fb      	ldr	r3, [r7, #28]
 801a56e:	2b2b      	cmp	r3, #43	; 0x2b
 801a570:	d800      	bhi.n	801a574 <KeyExpansion+0x1d0>
 801a572:	e756      	b.n	801a422 <KeyExpansion+0x7e>
  }
}
 801a574:	46c0      	nop			; (mov r8, r8)
 801a576:	46bd      	mov	sp, r7
 801a578:	b009      	add	sp, #36	; 0x24
 801a57a:	bd90      	pop	{r4, r7, pc}
 801a57c:	3fffffff 	.word	0x3fffffff
 801a580:	08020f1c 	.word	0x08020f1c
 801a584:	0802111c 	.word	0x0802111c
 801a588:	3ffffffc 	.word	0x3ffffffc

0801a58c <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b082      	sub	sp, #8
 801a590:	af00      	add	r7, sp, #0
 801a592:	6078      	str	r0, [r7, #4]
 801a594:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	683a      	ldr	r2, [r7, #0]
 801a59a:	0011      	movs	r1, r2
 801a59c:	0018      	movs	r0, r3
 801a59e:	f7ff ff01 	bl	801a3a4 <KeyExpansion>
}
 801a5a2:	46c0      	nop			; (mov r8, r8)
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	b002      	add	sp, #8
 801a5a8:	bd80      	pop	{r7, pc}

0801a5aa <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 801a5aa:	b5b0      	push	{r4, r5, r7, lr}
 801a5ac:	b086      	sub	sp, #24
 801a5ae:	af00      	add	r7, sp, #0
 801a5b0:	60b9      	str	r1, [r7, #8]
 801a5b2:	607a      	str	r2, [r7, #4]
 801a5b4:	230f      	movs	r3, #15
 801a5b6:	18fb      	adds	r3, r7, r3
 801a5b8:	1c02      	adds	r2, r0, #0
 801a5ba:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 801a5bc:	2317      	movs	r3, #23
 801a5be:	18fb      	adds	r3, r7, r3
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	701a      	strb	r2, [r3, #0]
 801a5c4:	e038      	b.n	801a638 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 801a5c6:	2316      	movs	r3, #22
 801a5c8:	18fb      	adds	r3, r7, r3
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	701a      	strb	r2, [r3, #0]
 801a5ce:	e028      	b.n	801a622 <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 801a5d0:	2517      	movs	r5, #23
 801a5d2:	197b      	adds	r3, r7, r5
 801a5d4:	781a      	ldrb	r2, [r3, #0]
 801a5d6:	2416      	movs	r4, #22
 801a5d8:	193b      	adds	r3, r7, r4
 801a5da:	781b      	ldrb	r3, [r3, #0]
 801a5dc:	68b9      	ldr	r1, [r7, #8]
 801a5de:	0092      	lsls	r2, r2, #2
 801a5e0:	188a      	adds	r2, r1, r2
 801a5e2:	5cd0      	ldrb	r0, [r2, r3]
 801a5e4:	230f      	movs	r3, #15
 801a5e6:	18fb      	adds	r3, r7, r3
 801a5e8:	781b      	ldrb	r3, [r3, #0]
 801a5ea:	009a      	lsls	r2, r3, #2
 801a5ec:	197b      	adds	r3, r7, r5
 801a5ee:	781b      	ldrb	r3, [r3, #0]
 801a5f0:	18d3      	adds	r3, r2, r3
 801a5f2:	009a      	lsls	r2, r3, #2
 801a5f4:	193b      	adds	r3, r7, r4
 801a5f6:	781b      	ldrb	r3, [r3, #0]
 801a5f8:	18d3      	adds	r3, r2, r3
 801a5fa:	001a      	movs	r2, r3
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	189b      	adds	r3, r3, r2
 801a600:	7819      	ldrb	r1, [r3, #0]
 801a602:	197b      	adds	r3, r7, r5
 801a604:	781a      	ldrb	r2, [r3, #0]
 801a606:	193b      	adds	r3, r7, r4
 801a608:	781b      	ldrb	r3, [r3, #0]
 801a60a:	4041      	eors	r1, r0
 801a60c:	b2c8      	uxtb	r0, r1
 801a60e:	68b9      	ldr	r1, [r7, #8]
 801a610:	0092      	lsls	r2, r2, #2
 801a612:	188a      	adds	r2, r1, r2
 801a614:	1c01      	adds	r1, r0, #0
 801a616:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801a618:	193b      	adds	r3, r7, r4
 801a61a:	193a      	adds	r2, r7, r4
 801a61c:	7812      	ldrb	r2, [r2, #0]
 801a61e:	3201      	adds	r2, #1
 801a620:	701a      	strb	r2, [r3, #0]
 801a622:	2316      	movs	r3, #22
 801a624:	18fb      	adds	r3, r7, r3
 801a626:	781b      	ldrb	r3, [r3, #0]
 801a628:	2b03      	cmp	r3, #3
 801a62a:	d9d1      	bls.n	801a5d0 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 801a62c:	2217      	movs	r2, #23
 801a62e:	18bb      	adds	r3, r7, r2
 801a630:	18ba      	adds	r2, r7, r2
 801a632:	7812      	ldrb	r2, [r2, #0]
 801a634:	3201      	adds	r2, #1
 801a636:	701a      	strb	r2, [r3, #0]
 801a638:	2317      	movs	r3, #23
 801a63a:	18fb      	adds	r3, r7, r3
 801a63c:	781b      	ldrb	r3, [r3, #0]
 801a63e:	2b03      	cmp	r3, #3
 801a640:	d9c1      	bls.n	801a5c6 <AddRoundKey+0x1c>
    }
  }
}
 801a642:	46c0      	nop			; (mov r8, r8)
 801a644:	46bd      	mov	sp, r7
 801a646:	b006      	add	sp, #24
 801a648:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a64c <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 801a64c:	b5b0      	push	{r4, r5, r7, lr}
 801a64e:	b084      	sub	sp, #16
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 801a654:	230f      	movs	r3, #15
 801a656:	18fb      	adds	r3, r7, r3
 801a658:	2200      	movs	r2, #0
 801a65a:	701a      	strb	r2, [r3, #0]
 801a65c:	e02a      	b.n	801a6b4 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 801a65e:	230e      	movs	r3, #14
 801a660:	18fb      	adds	r3, r7, r3
 801a662:	2200      	movs	r2, #0
 801a664:	701a      	strb	r2, [r3, #0]
 801a666:	e01a      	b.n	801a69e <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 801a668:	240e      	movs	r4, #14
 801a66a:	193b      	adds	r3, r7, r4
 801a66c:	781a      	ldrb	r2, [r3, #0]
 801a66e:	250f      	movs	r5, #15
 801a670:	197b      	adds	r3, r7, r5
 801a672:	781b      	ldrb	r3, [r3, #0]
 801a674:	6879      	ldr	r1, [r7, #4]
 801a676:	0092      	lsls	r2, r2, #2
 801a678:	188a      	adds	r2, r1, r2
 801a67a:	5cd3      	ldrb	r3, [r2, r3]
 801a67c:	0018      	movs	r0, r3
 801a67e:	193b      	adds	r3, r7, r4
 801a680:	781a      	ldrb	r2, [r3, #0]
 801a682:	197b      	adds	r3, r7, r5
 801a684:	781b      	ldrb	r3, [r3, #0]
 801a686:	4910      	ldr	r1, [pc, #64]	; (801a6c8 <SubBytes+0x7c>)
 801a688:	5c08      	ldrb	r0, [r1, r0]
 801a68a:	6879      	ldr	r1, [r7, #4]
 801a68c:	0092      	lsls	r2, r2, #2
 801a68e:	188a      	adds	r2, r1, r2
 801a690:	1c01      	adds	r1, r0, #0
 801a692:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801a694:	193b      	adds	r3, r7, r4
 801a696:	193a      	adds	r2, r7, r4
 801a698:	7812      	ldrb	r2, [r2, #0]
 801a69a:	3201      	adds	r2, #1
 801a69c:	701a      	strb	r2, [r3, #0]
 801a69e:	230e      	movs	r3, #14
 801a6a0:	18fb      	adds	r3, r7, r3
 801a6a2:	781b      	ldrb	r3, [r3, #0]
 801a6a4:	2b03      	cmp	r3, #3
 801a6a6:	d9df      	bls.n	801a668 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 801a6a8:	220f      	movs	r2, #15
 801a6aa:	18bb      	adds	r3, r7, r2
 801a6ac:	18ba      	adds	r2, r7, r2
 801a6ae:	7812      	ldrb	r2, [r2, #0]
 801a6b0:	3201      	adds	r2, #1
 801a6b2:	701a      	strb	r2, [r3, #0]
 801a6b4:	230f      	movs	r3, #15
 801a6b6:	18fb      	adds	r3, r7, r3
 801a6b8:	781b      	ldrb	r3, [r3, #0]
 801a6ba:	2b03      	cmp	r3, #3
 801a6bc:	d9cf      	bls.n	801a65e <SubBytes+0x12>
    }
  }
}
 801a6be:	46c0      	nop			; (mov r8, r8)
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	b004      	add	sp, #16
 801a6c4:	bdb0      	pop	{r4, r5, r7, pc}
 801a6c6:	46c0      	nop			; (mov r8, r8)
 801a6c8:	08020f1c 	.word	0x08020f1c

0801a6cc <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b084      	sub	sp, #16
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 801a6d4:	210f      	movs	r1, #15
 801a6d6:	187b      	adds	r3, r7, r1
 801a6d8:	687a      	ldr	r2, [r7, #4]
 801a6da:	7852      	ldrb	r2, [r2, #1]
 801a6dc:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	795a      	ldrb	r2, [r3, #5]
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	7a5a      	ldrb	r2, [r3, #9]
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	7b5a      	ldrb	r2, [r3, #13]
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	187a      	adds	r2, r7, r1
 801a6fa:	7812      	ldrb	r2, [r2, #0]
 801a6fc:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 801a6fe:	187b      	adds	r3, r7, r1
 801a700:	687a      	ldr	r2, [r7, #4]
 801a702:	7892      	ldrb	r2, [r2, #2]
 801a704:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	7a9a      	ldrb	r2, [r3, #10]
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	187a      	adds	r2, r7, r1
 801a712:	7812      	ldrb	r2, [r2, #0]
 801a714:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 801a716:	187b      	adds	r3, r7, r1
 801a718:	687a      	ldr	r2, [r7, #4]
 801a71a:	7992      	ldrb	r2, [r2, #6]
 801a71c:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	7b9a      	ldrb	r2, [r3, #14]
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	187a      	adds	r2, r7, r1
 801a72a:	7812      	ldrb	r2, [r2, #0]
 801a72c:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 801a72e:	187b      	adds	r3, r7, r1
 801a730:	687a      	ldr	r2, [r7, #4]
 801a732:	78d2      	ldrb	r2, [r2, #3]
 801a734:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	7bda      	ldrb	r2, [r3, #15]
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	7ada      	ldrb	r2, [r3, #11]
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	79da      	ldrb	r2, [r3, #7]
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	187a      	adds	r2, r7, r1
 801a752:	7812      	ldrb	r2, [r2, #0]
 801a754:	71da      	strb	r2, [r3, #7]
}
 801a756:	46c0      	nop			; (mov r8, r8)
 801a758:	46bd      	mov	sp, r7
 801a75a:	b004      	add	sp, #16
 801a75c:	bd80      	pop	{r7, pc}

0801a75e <xtime>:

static uint8_t xtime(uint8_t x)
{
 801a75e:	b580      	push	{r7, lr}
 801a760:	b082      	sub	sp, #8
 801a762:	af00      	add	r7, sp, #0
 801a764:	0002      	movs	r2, r0
 801a766:	1dfb      	adds	r3, r7, #7
 801a768:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 801a76a:	1dfb      	adds	r3, r7, #7
 801a76c:	781b      	ldrb	r3, [r3, #0]
 801a76e:	005b      	lsls	r3, r3, #1
 801a770:	b25a      	sxtb	r2, r3
 801a772:	1dfb      	adds	r3, r7, #7
 801a774:	781b      	ldrb	r3, [r3, #0]
 801a776:	09db      	lsrs	r3, r3, #7
 801a778:	b2db      	uxtb	r3, r3
 801a77a:	1c19      	adds	r1, r3, #0
 801a77c:	1c0b      	adds	r3, r1, #0
 801a77e:	18db      	adds	r3, r3, r3
 801a780:	185b      	adds	r3, r3, r1
 801a782:	1c19      	adds	r1, r3, #0
 801a784:	00c8      	lsls	r0, r1, #3
 801a786:	1c19      	adds	r1, r3, #0
 801a788:	1c03      	adds	r3, r0, #0
 801a78a:	18cb      	adds	r3, r1, r3
 801a78c:	b2db      	uxtb	r3, r3
 801a78e:	b25b      	sxtb	r3, r3
 801a790:	4053      	eors	r3, r2
 801a792:	b25b      	sxtb	r3, r3
 801a794:	b2db      	uxtb	r3, r3
}
 801a796:	0018      	movs	r0, r3
 801a798:	46bd      	mov	sp, r7
 801a79a:	b002      	add	sp, #8
 801a79c:	bd80      	pop	{r7, pc}

0801a79e <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 801a79e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7a0:	b085      	sub	sp, #20
 801a7a2:	af00      	add	r7, sp, #0
 801a7a4:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 801a7a6:	230f      	movs	r3, #15
 801a7a8:	18fb      	adds	r3, r7, r3
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	701a      	strb	r2, [r3, #0]
 801a7ae:	e0f0      	b.n	801a992 <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 801a7b0:	250f      	movs	r5, #15
 801a7b2:	197b      	adds	r3, r7, r5
 801a7b4:	7819      	ldrb	r1, [r3, #0]
 801a7b6:	230e      	movs	r3, #14
 801a7b8:	18fb      	adds	r3, r7, r3
 801a7ba:	687a      	ldr	r2, [r7, #4]
 801a7bc:	0089      	lsls	r1, r1, #2
 801a7be:	5c8a      	ldrb	r2, [r1, r2]
 801a7c0:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 801a7c2:	197b      	adds	r3, r7, r5
 801a7c4:	781a      	ldrb	r2, [r3, #0]
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	0092      	lsls	r2, r2, #2
 801a7ca:	5cd2      	ldrb	r2, [r2, r3]
 801a7cc:	197b      	adds	r3, r7, r5
 801a7ce:	781b      	ldrb	r3, [r3, #0]
 801a7d0:	6879      	ldr	r1, [r7, #4]
 801a7d2:	009b      	lsls	r3, r3, #2
 801a7d4:	18cb      	adds	r3, r1, r3
 801a7d6:	3301      	adds	r3, #1
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	4053      	eors	r3, r2
 801a7dc:	b2da      	uxtb	r2, r3
 801a7de:	197b      	adds	r3, r7, r5
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	6879      	ldr	r1, [r7, #4]
 801a7e4:	009b      	lsls	r3, r3, #2
 801a7e6:	18cb      	adds	r3, r1, r3
 801a7e8:	3302      	adds	r3, #2
 801a7ea:	781b      	ldrb	r3, [r3, #0]
 801a7ec:	4053      	eors	r3, r2
 801a7ee:	b2d9      	uxtb	r1, r3
 801a7f0:	197b      	adds	r3, r7, r5
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	687a      	ldr	r2, [r7, #4]
 801a7f6:	009b      	lsls	r3, r3, #2
 801a7f8:	18d3      	adds	r3, r2, r3
 801a7fa:	3303      	adds	r3, #3
 801a7fc:	781a      	ldrb	r2, [r3, #0]
 801a7fe:	230d      	movs	r3, #13
 801a800:	18fb      	adds	r3, r7, r3
 801a802:	404a      	eors	r2, r1
 801a804:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 801a806:	197b      	adds	r3, r7, r5
 801a808:	781a      	ldrb	r2, [r3, #0]
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	0092      	lsls	r2, r2, #2
 801a80e:	5cd1      	ldrb	r1, [r2, r3]
 801a810:	197b      	adds	r3, r7, r5
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	687a      	ldr	r2, [r7, #4]
 801a816:	009b      	lsls	r3, r3, #2
 801a818:	18d3      	adds	r3, r2, r3
 801a81a:	3301      	adds	r3, #1
 801a81c:	781a      	ldrb	r2, [r3, #0]
 801a81e:	200c      	movs	r0, #12
 801a820:	183b      	adds	r3, r7, r0
 801a822:	404a      	eors	r2, r1
 801a824:	701a      	strb	r2, [r3, #0]
 801a826:	183c      	adds	r4, r7, r0
 801a828:	0006      	movs	r6, r0
 801a82a:	183b      	adds	r3, r7, r0
 801a82c:	781b      	ldrb	r3, [r3, #0]
 801a82e:	0018      	movs	r0, r3
 801a830:	f7ff ff95 	bl	801a75e <xtime>
 801a834:	0003      	movs	r3, r0
 801a836:	7023      	strb	r3, [r4, #0]
 801a838:	197b      	adds	r3, r7, r5
 801a83a:	781a      	ldrb	r2, [r3, #0]
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	0092      	lsls	r2, r2, #2
 801a840:	5cd1      	ldrb	r1, [r2, r3]
 801a842:	0030      	movs	r0, r6
 801a844:	183a      	adds	r2, r7, r0
 801a846:	230d      	movs	r3, #13
 801a848:	18fb      	adds	r3, r7, r3
 801a84a:	7812      	ldrb	r2, [r2, #0]
 801a84c:	781b      	ldrb	r3, [r3, #0]
 801a84e:	4053      	eors	r3, r2
 801a850:	b2db      	uxtb	r3, r3
 801a852:	197a      	adds	r2, r7, r5
 801a854:	7812      	ldrb	r2, [r2, #0]
 801a856:	404b      	eors	r3, r1
 801a858:	b2d9      	uxtb	r1, r3
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	0092      	lsls	r2, r2, #2
 801a85e:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 801a860:	197b      	adds	r3, r7, r5
 801a862:	781b      	ldrb	r3, [r3, #0]
 801a864:	687a      	ldr	r2, [r7, #4]
 801a866:	009b      	lsls	r3, r3, #2
 801a868:	18d3      	adds	r3, r2, r3
 801a86a:	3301      	adds	r3, #1
 801a86c:	7819      	ldrb	r1, [r3, #0]
 801a86e:	197b      	adds	r3, r7, r5
 801a870:	781b      	ldrb	r3, [r3, #0]
 801a872:	687a      	ldr	r2, [r7, #4]
 801a874:	009b      	lsls	r3, r3, #2
 801a876:	18d3      	adds	r3, r2, r3
 801a878:	3302      	adds	r3, #2
 801a87a:	781a      	ldrb	r2, [r3, #0]
 801a87c:	183b      	adds	r3, r7, r0
 801a87e:	404a      	eors	r2, r1
 801a880:	701a      	strb	r2, [r3, #0]
 801a882:	183c      	adds	r4, r7, r0
 801a884:	0006      	movs	r6, r0
 801a886:	183b      	adds	r3, r7, r0
 801a888:	781b      	ldrb	r3, [r3, #0]
 801a88a:	0018      	movs	r0, r3
 801a88c:	f7ff ff67 	bl	801a75e <xtime>
 801a890:	0003      	movs	r3, r0
 801a892:	7023      	strb	r3, [r4, #0]
 801a894:	197b      	adds	r3, r7, r5
 801a896:	781b      	ldrb	r3, [r3, #0]
 801a898:	687a      	ldr	r2, [r7, #4]
 801a89a:	009b      	lsls	r3, r3, #2
 801a89c:	18d3      	adds	r3, r2, r3
 801a89e:	3301      	adds	r3, #1
 801a8a0:	7819      	ldrb	r1, [r3, #0]
 801a8a2:	0030      	movs	r0, r6
 801a8a4:	183a      	adds	r2, r7, r0
 801a8a6:	230d      	movs	r3, #13
 801a8a8:	18fb      	adds	r3, r7, r3
 801a8aa:	7812      	ldrb	r2, [r2, #0]
 801a8ac:	781b      	ldrb	r3, [r3, #0]
 801a8ae:	4053      	eors	r3, r2
 801a8b0:	b2da      	uxtb	r2, r3
 801a8b2:	197b      	adds	r3, r7, r5
 801a8b4:	781b      	ldrb	r3, [r3, #0]
 801a8b6:	404a      	eors	r2, r1
 801a8b8:	b2d1      	uxtb	r1, r2
 801a8ba:	687a      	ldr	r2, [r7, #4]
 801a8bc:	009b      	lsls	r3, r3, #2
 801a8be:	18d3      	adds	r3, r2, r3
 801a8c0:	3301      	adds	r3, #1
 801a8c2:	1c0a      	adds	r2, r1, #0
 801a8c4:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 801a8c6:	197b      	adds	r3, r7, r5
 801a8c8:	781b      	ldrb	r3, [r3, #0]
 801a8ca:	687a      	ldr	r2, [r7, #4]
 801a8cc:	009b      	lsls	r3, r3, #2
 801a8ce:	18d3      	adds	r3, r2, r3
 801a8d0:	3302      	adds	r3, #2
 801a8d2:	7819      	ldrb	r1, [r3, #0]
 801a8d4:	197b      	adds	r3, r7, r5
 801a8d6:	781b      	ldrb	r3, [r3, #0]
 801a8d8:	687a      	ldr	r2, [r7, #4]
 801a8da:	009b      	lsls	r3, r3, #2
 801a8dc:	18d3      	adds	r3, r2, r3
 801a8de:	3303      	adds	r3, #3
 801a8e0:	781a      	ldrb	r2, [r3, #0]
 801a8e2:	183b      	adds	r3, r7, r0
 801a8e4:	404a      	eors	r2, r1
 801a8e6:	701a      	strb	r2, [r3, #0]
 801a8e8:	183c      	adds	r4, r7, r0
 801a8ea:	0006      	movs	r6, r0
 801a8ec:	183b      	adds	r3, r7, r0
 801a8ee:	781b      	ldrb	r3, [r3, #0]
 801a8f0:	0018      	movs	r0, r3
 801a8f2:	f7ff ff34 	bl	801a75e <xtime>
 801a8f6:	0003      	movs	r3, r0
 801a8f8:	7023      	strb	r3, [r4, #0]
 801a8fa:	197b      	adds	r3, r7, r5
 801a8fc:	781b      	ldrb	r3, [r3, #0]
 801a8fe:	687a      	ldr	r2, [r7, #4]
 801a900:	009b      	lsls	r3, r3, #2
 801a902:	18d3      	adds	r3, r2, r3
 801a904:	3302      	adds	r3, #2
 801a906:	7819      	ldrb	r1, [r3, #0]
 801a908:	0030      	movs	r0, r6
 801a90a:	183a      	adds	r2, r7, r0
 801a90c:	230d      	movs	r3, #13
 801a90e:	18fb      	adds	r3, r7, r3
 801a910:	7812      	ldrb	r2, [r2, #0]
 801a912:	781b      	ldrb	r3, [r3, #0]
 801a914:	4053      	eors	r3, r2
 801a916:	b2da      	uxtb	r2, r3
 801a918:	197b      	adds	r3, r7, r5
 801a91a:	781b      	ldrb	r3, [r3, #0]
 801a91c:	404a      	eors	r2, r1
 801a91e:	b2d1      	uxtb	r1, r2
 801a920:	687a      	ldr	r2, [r7, #4]
 801a922:	009b      	lsls	r3, r3, #2
 801a924:	18d3      	adds	r3, r2, r3
 801a926:	3302      	adds	r3, #2
 801a928:	1c0a      	adds	r2, r1, #0
 801a92a:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 801a92c:	197b      	adds	r3, r7, r5
 801a92e:	781b      	ldrb	r3, [r3, #0]
 801a930:	687a      	ldr	r2, [r7, #4]
 801a932:	009b      	lsls	r3, r3, #2
 801a934:	18d3      	adds	r3, r2, r3
 801a936:	3303      	adds	r3, #3
 801a938:	7819      	ldrb	r1, [r3, #0]
 801a93a:	183b      	adds	r3, r7, r0
 801a93c:	220e      	movs	r2, #14
 801a93e:	18ba      	adds	r2, r7, r2
 801a940:	7812      	ldrb	r2, [r2, #0]
 801a942:	404a      	eors	r2, r1
 801a944:	701a      	strb	r2, [r3, #0]
 801a946:	183c      	adds	r4, r7, r0
 801a948:	0006      	movs	r6, r0
 801a94a:	183b      	adds	r3, r7, r0
 801a94c:	781b      	ldrb	r3, [r3, #0]
 801a94e:	0018      	movs	r0, r3
 801a950:	f7ff ff05 	bl	801a75e <xtime>
 801a954:	0003      	movs	r3, r0
 801a956:	7023      	strb	r3, [r4, #0]
 801a958:	197b      	adds	r3, r7, r5
 801a95a:	781b      	ldrb	r3, [r3, #0]
 801a95c:	687a      	ldr	r2, [r7, #4]
 801a95e:	009b      	lsls	r3, r3, #2
 801a960:	18d3      	adds	r3, r2, r3
 801a962:	3303      	adds	r3, #3
 801a964:	7819      	ldrb	r1, [r3, #0]
 801a966:	19ba      	adds	r2, r7, r6
 801a968:	230d      	movs	r3, #13
 801a96a:	18fb      	adds	r3, r7, r3
 801a96c:	7812      	ldrb	r2, [r2, #0]
 801a96e:	781b      	ldrb	r3, [r3, #0]
 801a970:	4053      	eors	r3, r2
 801a972:	b2da      	uxtb	r2, r3
 801a974:	197b      	adds	r3, r7, r5
 801a976:	781b      	ldrb	r3, [r3, #0]
 801a978:	404a      	eors	r2, r1
 801a97a:	b2d1      	uxtb	r1, r2
 801a97c:	687a      	ldr	r2, [r7, #4]
 801a97e:	009b      	lsls	r3, r3, #2
 801a980:	18d3      	adds	r3, r2, r3
 801a982:	3303      	adds	r3, #3
 801a984:	1c0a      	adds	r2, r1, #0
 801a986:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 801a988:	197b      	adds	r3, r7, r5
 801a98a:	197a      	adds	r2, r7, r5
 801a98c:	7812      	ldrb	r2, [r2, #0]
 801a98e:	3201      	adds	r2, #1
 801a990:	701a      	strb	r2, [r3, #0]
 801a992:	230f      	movs	r3, #15
 801a994:	18fb      	adds	r3, r7, r3
 801a996:	781b      	ldrb	r3, [r3, #0]
 801a998:	2b03      	cmp	r3, #3
 801a99a:	d800      	bhi.n	801a99e <MixColumns+0x200>
 801a99c:	e708      	b.n	801a7b0 <MixColumns+0x12>
  }
}
 801a99e:	46c0      	nop			; (mov r8, r8)
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	b005      	add	sp, #20
 801a9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a9a6 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 801a9a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9a8:	b085      	sub	sp, #20
 801a9aa:	af00      	add	r7, sp, #0
 801a9ac:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	60fb      	str	r3, [r7, #12]
 801a9b2:	e3c3      	b.n	801b13c <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 801a9b4:	260b      	movs	r6, #11
 801a9b6:	19bb      	adds	r3, r7, r6
 801a9b8:	687a      	ldr	r2, [r7, #4]
 801a9ba:	68f9      	ldr	r1, [r7, #12]
 801a9bc:	0089      	lsls	r1, r1, #2
 801a9be:	5c8a      	ldrb	r2, [r1, r2]
 801a9c0:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 801a9c2:	250a      	movs	r5, #10
 801a9c4:	197b      	adds	r3, r7, r5
 801a9c6:	6879      	ldr	r1, [r7, #4]
 801a9c8:	68fa      	ldr	r2, [r7, #12]
 801a9ca:	0092      	lsls	r2, r2, #2
 801a9cc:	188a      	adds	r2, r1, r2
 801a9ce:	3201      	adds	r2, #1
 801a9d0:	7812      	ldrb	r2, [r2, #0]
 801a9d2:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 801a9d4:	2409      	movs	r4, #9
 801a9d6:	193b      	adds	r3, r7, r4
 801a9d8:	6879      	ldr	r1, [r7, #4]
 801a9da:	68fa      	ldr	r2, [r7, #12]
 801a9dc:	0092      	lsls	r2, r2, #2
 801a9de:	188a      	adds	r2, r1, r2
 801a9e0:	3202      	adds	r2, #2
 801a9e2:	7812      	ldrb	r2, [r2, #0]
 801a9e4:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 801a9e6:	2308      	movs	r3, #8
 801a9e8:	18fb      	adds	r3, r7, r3
 801a9ea:	6879      	ldr	r1, [r7, #4]
 801a9ec:	68fa      	ldr	r2, [r7, #12]
 801a9ee:	0092      	lsls	r2, r2, #2
 801a9f0:	188a      	adds	r2, r1, r2
 801a9f2:	3203      	adds	r2, #3
 801a9f4:	7812      	ldrb	r2, [r2, #0]
 801a9f6:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 801a9f8:	19bb      	adds	r3, r7, r6
 801a9fa:	781b      	ldrb	r3, [r3, #0]
 801a9fc:	0018      	movs	r0, r3
 801a9fe:	f7ff feae 	bl	801a75e <xtime>
 801aa02:	0003      	movs	r3, r0
 801aa04:	0018      	movs	r0, r3
 801aa06:	f7ff feaa 	bl	801a75e <xtime>
 801aa0a:	0003      	movs	r3, r0
 801aa0c:	0018      	movs	r0, r3
 801aa0e:	f7ff fea6 	bl	801a75e <xtime>
 801aa12:	0003      	movs	r3, r0
 801aa14:	0018      	movs	r0, r3
 801aa16:	f7ff fea2 	bl	801a75e <xtime>
 801aa1a:	197b      	adds	r3, r7, r5
 801aa1c:	781b      	ldrb	r3, [r3, #0]
 801aa1e:	0018      	movs	r0, r3
 801aa20:	f7ff fe9d 	bl	801a75e <xtime>
 801aa24:	0003      	movs	r3, r0
 801aa26:	0018      	movs	r0, r3
 801aa28:	f7ff fe99 	bl	801a75e <xtime>
 801aa2c:	197b      	adds	r3, r7, r5
 801aa2e:	781b      	ldrb	r3, [r3, #0]
 801aa30:	0018      	movs	r0, r3
 801aa32:	f7ff fe94 	bl	801a75e <xtime>
 801aa36:	0003      	movs	r3, r0
 801aa38:	0018      	movs	r0, r3
 801aa3a:	f7ff fe90 	bl	801a75e <xtime>
 801aa3e:	0003      	movs	r3, r0
 801aa40:	0018      	movs	r0, r3
 801aa42:	f7ff fe8c 	bl	801a75e <xtime>
 801aa46:	0003      	movs	r3, r0
 801aa48:	0018      	movs	r0, r3
 801aa4a:	f7ff fe88 	bl	801a75e <xtime>
 801aa4e:	193b      	adds	r3, r7, r4
 801aa50:	781b      	ldrb	r3, [r3, #0]
 801aa52:	0018      	movs	r0, r3
 801aa54:	f7ff fe83 	bl	801a75e <xtime>
 801aa58:	193b      	adds	r3, r7, r4
 801aa5a:	781b      	ldrb	r3, [r3, #0]
 801aa5c:	0018      	movs	r0, r3
 801aa5e:	f7ff fe7e 	bl	801a75e <xtime>
 801aa62:	0003      	movs	r3, r0
 801aa64:	0018      	movs	r0, r3
 801aa66:	f7ff fe7a 	bl	801a75e <xtime>
 801aa6a:	0003      	movs	r3, r0
 801aa6c:	0018      	movs	r0, r3
 801aa6e:	f7ff fe76 	bl	801a75e <xtime>
 801aa72:	0003      	movs	r3, r0
 801aa74:	0018      	movs	r0, r3
 801aa76:	f7ff fe72 	bl	801a75e <xtime>
 801aa7a:	2308      	movs	r3, #8
 801aa7c:	001c      	movs	r4, r3
 801aa7e:	18fb      	adds	r3, r7, r3
 801aa80:	781b      	ldrb	r3, [r3, #0]
 801aa82:	0018      	movs	r0, r3
 801aa84:	f7ff fe6b 	bl	801a75e <xtime>
 801aa88:	0023      	movs	r3, r4
 801aa8a:	001c      	movs	r4, r3
 801aa8c:	18fb      	adds	r3, r7, r3
 801aa8e:	781b      	ldrb	r3, [r3, #0]
 801aa90:	0018      	movs	r0, r3
 801aa92:	f7ff fe64 	bl	801a75e <xtime>
 801aa96:	0003      	movs	r3, r0
 801aa98:	0018      	movs	r0, r3
 801aa9a:	f7ff fe60 	bl	801a75e <xtime>
 801aa9e:	0023      	movs	r3, r4
 801aaa0:	18fb      	adds	r3, r7, r3
 801aaa2:	781b      	ldrb	r3, [r3, #0]
 801aaa4:	0018      	movs	r0, r3
 801aaa6:	f7ff fe5a 	bl	801a75e <xtime>
 801aaaa:	0003      	movs	r3, r0
 801aaac:	0018      	movs	r0, r3
 801aaae:	f7ff fe56 	bl	801a75e <xtime>
 801aab2:	0003      	movs	r3, r0
 801aab4:	0018      	movs	r0, r3
 801aab6:	f7ff fe52 	bl	801a75e <xtime>
 801aaba:	0003      	movs	r3, r0
 801aabc:	0018      	movs	r0, r3
 801aabe:	f7ff fe4e 	bl	801a75e <xtime>
 801aac2:	19bb      	adds	r3, r7, r6
 801aac4:	781b      	ldrb	r3, [r3, #0]
 801aac6:	0018      	movs	r0, r3
 801aac8:	f7ff fe49 	bl	801a75e <xtime>
 801aacc:	0003      	movs	r3, r0
 801aace:	001c      	movs	r4, r3
 801aad0:	19bb      	adds	r3, r7, r6
 801aad2:	781b      	ldrb	r3, [r3, #0]
 801aad4:	0018      	movs	r0, r3
 801aad6:	f7ff fe42 	bl	801a75e <xtime>
 801aada:	0003      	movs	r3, r0
 801aadc:	0018      	movs	r0, r3
 801aade:	f7ff fe3e 	bl	801a75e <xtime>
 801aae2:	0003      	movs	r3, r0
 801aae4:	4063      	eors	r3, r4
 801aae6:	b2dc      	uxtb	r4, r3
 801aae8:	19bb      	adds	r3, r7, r6
 801aaea:	781b      	ldrb	r3, [r3, #0]
 801aaec:	0018      	movs	r0, r3
 801aaee:	f7ff fe36 	bl	801a75e <xtime>
 801aaf2:	0003      	movs	r3, r0
 801aaf4:	0018      	movs	r0, r3
 801aaf6:	f7ff fe32 	bl	801a75e <xtime>
 801aafa:	0003      	movs	r3, r0
 801aafc:	0018      	movs	r0, r3
 801aafe:	f7ff fe2e 	bl	801a75e <xtime>
 801ab02:	0003      	movs	r3, r0
 801ab04:	4063      	eors	r3, r4
 801ab06:	b2dc      	uxtb	r4, r3
 801ab08:	197b      	adds	r3, r7, r5
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	0018      	movs	r0, r3
 801ab0e:	f7ff fe26 	bl	801a75e <xtime>
 801ab12:	0003      	movs	r3, r0
 801ab14:	001a      	movs	r2, r3
 801ab16:	0029      	movs	r1, r5
 801ab18:	197b      	adds	r3, r7, r5
 801ab1a:	781b      	ldrb	r3, [r3, #0]
 801ab1c:	4053      	eors	r3, r2
 801ab1e:	b2dd      	uxtb	r5, r3
 801ab20:	187b      	adds	r3, r7, r1
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	0018      	movs	r0, r3
 801ab26:	f7ff fe1a 	bl	801a75e <xtime>
 801ab2a:	0003      	movs	r3, r0
 801ab2c:	0018      	movs	r0, r3
 801ab2e:	f7ff fe16 	bl	801a75e <xtime>
 801ab32:	0003      	movs	r3, r0
 801ab34:	0018      	movs	r0, r3
 801ab36:	f7ff fe12 	bl	801a75e <xtime>
 801ab3a:	0003      	movs	r3, r0
 801ab3c:	406b      	eors	r3, r5
 801ab3e:	b2db      	uxtb	r3, r3
 801ab40:	4063      	eors	r3, r4
 801ab42:	b2dc      	uxtb	r4, r3
 801ab44:	2309      	movs	r3, #9
 801ab46:	001d      	movs	r5, r3
 801ab48:	18fb      	adds	r3, r7, r3
 801ab4a:	781b      	ldrb	r3, [r3, #0]
 801ab4c:	0018      	movs	r0, r3
 801ab4e:	f7ff fe06 	bl	801a75e <xtime>
 801ab52:	0003      	movs	r3, r0
 801ab54:	0018      	movs	r0, r3
 801ab56:	f7ff fe02 	bl	801a75e <xtime>
 801ab5a:	0003      	movs	r3, r0
 801ab5c:	001a      	movs	r2, r3
 801ab5e:	002b      	movs	r3, r5
 801ab60:	0018      	movs	r0, r3
 801ab62:	18fb      	adds	r3, r7, r3
 801ab64:	781b      	ldrb	r3, [r3, #0]
 801ab66:	4053      	eors	r3, r2
 801ab68:	b2dd      	uxtb	r5, r3
 801ab6a:	0003      	movs	r3, r0
 801ab6c:	18fb      	adds	r3, r7, r3
 801ab6e:	781b      	ldrb	r3, [r3, #0]
 801ab70:	0018      	movs	r0, r3
 801ab72:	f7ff fdf4 	bl	801a75e <xtime>
 801ab76:	0003      	movs	r3, r0
 801ab78:	0018      	movs	r0, r3
 801ab7a:	f7ff fdf0 	bl	801a75e <xtime>
 801ab7e:	0003      	movs	r3, r0
 801ab80:	0018      	movs	r0, r3
 801ab82:	f7ff fdec 	bl	801a75e <xtime>
 801ab86:	0003      	movs	r3, r0
 801ab88:	406b      	eors	r3, r5
 801ab8a:	b2db      	uxtb	r3, r3
 801ab8c:	4063      	eors	r3, r4
 801ab8e:	b2dc      	uxtb	r4, r3
 801ab90:	2308      	movs	r3, #8
 801ab92:	001d      	movs	r5, r3
 801ab94:	18fb      	adds	r3, r7, r3
 801ab96:	781b      	ldrb	r3, [r3, #0]
 801ab98:	0018      	movs	r0, r3
 801ab9a:	f7ff fde0 	bl	801a75e <xtime>
 801ab9e:	0003      	movs	r3, r0
 801aba0:	0018      	movs	r0, r3
 801aba2:	f7ff fddc 	bl	801a75e <xtime>
 801aba6:	0003      	movs	r3, r0
 801aba8:	0018      	movs	r0, r3
 801abaa:	f7ff fdd8 	bl	801a75e <xtime>
 801abae:	0003      	movs	r3, r0
 801abb0:	001a      	movs	r2, r3
 801abb2:	002b      	movs	r3, r5
 801abb4:	18fb      	adds	r3, r7, r3
 801abb6:	781b      	ldrb	r3, [r3, #0]
 801abb8:	4053      	eors	r3, r2
 801abba:	b2db      	uxtb	r3, r3
 801abbc:	4063      	eors	r3, r4
 801abbe:	b2d9      	uxtb	r1, r3
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	68fa      	ldr	r2, [r7, #12]
 801abc4:	0092      	lsls	r2, r2, #2
 801abc6:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 801abc8:	19bb      	adds	r3, r7, r6
 801abca:	781b      	ldrb	r3, [r3, #0]
 801abcc:	0018      	movs	r0, r3
 801abce:	f7ff fdc6 	bl	801a75e <xtime>
 801abd2:	19bb      	adds	r3, r7, r6
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	0018      	movs	r0, r3
 801abd8:	f7ff fdc1 	bl	801a75e <xtime>
 801abdc:	0003      	movs	r3, r0
 801abde:	0018      	movs	r0, r3
 801abe0:	f7ff fdbd 	bl	801a75e <xtime>
 801abe4:	19bb      	adds	r3, r7, r6
 801abe6:	781b      	ldrb	r3, [r3, #0]
 801abe8:	0018      	movs	r0, r3
 801abea:	f7ff fdb8 	bl	801a75e <xtime>
 801abee:	0003      	movs	r3, r0
 801abf0:	0018      	movs	r0, r3
 801abf2:	f7ff fdb4 	bl	801a75e <xtime>
 801abf6:	0003      	movs	r3, r0
 801abf8:	0018      	movs	r0, r3
 801abfa:	f7ff fdb0 	bl	801a75e <xtime>
 801abfe:	0003      	movs	r3, r0
 801ac00:	0018      	movs	r0, r3
 801ac02:	f7ff fdac 	bl	801a75e <xtime>
 801ac06:	210a      	movs	r1, #10
 801ac08:	000d      	movs	r5, r1
 801ac0a:	187b      	adds	r3, r7, r1
 801ac0c:	781b      	ldrb	r3, [r3, #0]
 801ac0e:	0018      	movs	r0, r3
 801ac10:	f7ff fda5 	bl	801a75e <xtime>
 801ac14:	0003      	movs	r3, r0
 801ac16:	0018      	movs	r0, r3
 801ac18:	f7ff fda1 	bl	801a75e <xtime>
 801ac1c:	0003      	movs	r3, r0
 801ac1e:	0018      	movs	r0, r3
 801ac20:	f7ff fd9d 	bl	801a75e <xtime>
 801ac24:	0003      	movs	r3, r0
 801ac26:	0018      	movs	r0, r3
 801ac28:	f7ff fd99 	bl	801a75e <xtime>
 801ac2c:	2409      	movs	r4, #9
 801ac2e:	193b      	adds	r3, r7, r4
 801ac30:	781b      	ldrb	r3, [r3, #0]
 801ac32:	0018      	movs	r0, r3
 801ac34:	f7ff fd93 	bl	801a75e <xtime>
 801ac38:	0003      	movs	r3, r0
 801ac3a:	0018      	movs	r0, r3
 801ac3c:	f7ff fd8f 	bl	801a75e <xtime>
 801ac40:	193b      	adds	r3, r7, r4
 801ac42:	781b      	ldrb	r3, [r3, #0]
 801ac44:	0018      	movs	r0, r3
 801ac46:	f7ff fd8a 	bl	801a75e <xtime>
 801ac4a:	0003      	movs	r3, r0
 801ac4c:	0018      	movs	r0, r3
 801ac4e:	f7ff fd86 	bl	801a75e <xtime>
 801ac52:	0003      	movs	r3, r0
 801ac54:	0018      	movs	r0, r3
 801ac56:	f7ff fd82 	bl	801a75e <xtime>
 801ac5a:	0003      	movs	r3, r0
 801ac5c:	0018      	movs	r0, r3
 801ac5e:	f7ff fd7e 	bl	801a75e <xtime>
 801ac62:	2308      	movs	r3, #8
 801ac64:	001c      	movs	r4, r3
 801ac66:	18fb      	adds	r3, r7, r3
 801ac68:	781b      	ldrb	r3, [r3, #0]
 801ac6a:	0018      	movs	r0, r3
 801ac6c:	f7ff fd77 	bl	801a75e <xtime>
 801ac70:	0023      	movs	r3, r4
 801ac72:	18fb      	adds	r3, r7, r3
 801ac74:	781b      	ldrb	r3, [r3, #0]
 801ac76:	0018      	movs	r0, r3
 801ac78:	f7ff fd71 	bl	801a75e <xtime>
 801ac7c:	0003      	movs	r3, r0
 801ac7e:	0018      	movs	r0, r3
 801ac80:	f7ff fd6d 	bl	801a75e <xtime>
 801ac84:	0003      	movs	r3, r0
 801ac86:	0018      	movs	r0, r3
 801ac88:	f7ff fd69 	bl	801a75e <xtime>
 801ac8c:	0003      	movs	r3, r0
 801ac8e:	0018      	movs	r0, r3
 801ac90:	f7ff fd65 	bl	801a75e <xtime>
 801ac94:	19bb      	adds	r3, r7, r6
 801ac96:	781b      	ldrb	r3, [r3, #0]
 801ac98:	0018      	movs	r0, r3
 801ac9a:	f7ff fd60 	bl	801a75e <xtime>
 801ac9e:	0003      	movs	r3, r0
 801aca0:	0018      	movs	r0, r3
 801aca2:	f7ff fd5c 	bl	801a75e <xtime>
 801aca6:	0003      	movs	r3, r0
 801aca8:	0018      	movs	r0, r3
 801acaa:	f7ff fd58 	bl	801a75e <xtime>
 801acae:	0003      	movs	r3, r0
 801acb0:	001a      	movs	r2, r3
 801acb2:	19bb      	adds	r3, r7, r6
 801acb4:	781b      	ldrb	r3, [r3, #0]
 801acb6:	4053      	eors	r3, r2
 801acb8:	b2dc      	uxtb	r4, r3
 801acba:	197b      	adds	r3, r7, r5
 801acbc:	781b      	ldrb	r3, [r3, #0]
 801acbe:	0018      	movs	r0, r3
 801acc0:	f7ff fd4d 	bl	801a75e <xtime>
 801acc4:	0003      	movs	r3, r0
 801acc6:	001d      	movs	r5, r3
 801acc8:	230a      	movs	r3, #10
 801acca:	18fb      	adds	r3, r7, r3
 801accc:	781b      	ldrb	r3, [r3, #0]
 801acce:	0018      	movs	r0, r3
 801acd0:	f7ff fd45 	bl	801a75e <xtime>
 801acd4:	0003      	movs	r3, r0
 801acd6:	0018      	movs	r0, r3
 801acd8:	f7ff fd41 	bl	801a75e <xtime>
 801acdc:	0003      	movs	r3, r0
 801acde:	406b      	eors	r3, r5
 801ace0:	b2dd      	uxtb	r5, r3
 801ace2:	230a      	movs	r3, #10
 801ace4:	18fb      	adds	r3, r7, r3
 801ace6:	781b      	ldrb	r3, [r3, #0]
 801ace8:	0018      	movs	r0, r3
 801acea:	f7ff fd38 	bl	801a75e <xtime>
 801acee:	0003      	movs	r3, r0
 801acf0:	0018      	movs	r0, r3
 801acf2:	f7ff fd34 	bl	801a75e <xtime>
 801acf6:	0003      	movs	r3, r0
 801acf8:	0018      	movs	r0, r3
 801acfa:	f7ff fd30 	bl	801a75e <xtime>
 801acfe:	0003      	movs	r3, r0
 801ad00:	406b      	eors	r3, r5
 801ad02:	b2db      	uxtb	r3, r3
 801ad04:	4063      	eors	r3, r4
 801ad06:	b2dc      	uxtb	r4, r3
 801ad08:	2209      	movs	r2, #9
 801ad0a:	0015      	movs	r5, r2
 801ad0c:	18bb      	adds	r3, r7, r2
 801ad0e:	781b      	ldrb	r3, [r3, #0]
 801ad10:	0018      	movs	r0, r3
 801ad12:	f7ff fd24 	bl	801a75e <xtime>
 801ad16:	0003      	movs	r3, r0
 801ad18:	001a      	movs	r2, r3
 801ad1a:	0029      	movs	r1, r5
 801ad1c:	187b      	adds	r3, r7, r1
 801ad1e:	781b      	ldrb	r3, [r3, #0]
 801ad20:	4053      	eors	r3, r2
 801ad22:	b2dd      	uxtb	r5, r3
 801ad24:	187b      	adds	r3, r7, r1
 801ad26:	781b      	ldrb	r3, [r3, #0]
 801ad28:	0018      	movs	r0, r3
 801ad2a:	f7ff fd18 	bl	801a75e <xtime>
 801ad2e:	0003      	movs	r3, r0
 801ad30:	0018      	movs	r0, r3
 801ad32:	f7ff fd14 	bl	801a75e <xtime>
 801ad36:	0003      	movs	r3, r0
 801ad38:	0018      	movs	r0, r3
 801ad3a:	f7ff fd10 	bl	801a75e <xtime>
 801ad3e:	0003      	movs	r3, r0
 801ad40:	406b      	eors	r3, r5
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	4063      	eors	r3, r4
 801ad46:	b2dc      	uxtb	r4, r3
 801ad48:	2208      	movs	r2, #8
 801ad4a:	0015      	movs	r5, r2
 801ad4c:	18bb      	adds	r3, r7, r2
 801ad4e:	781b      	ldrb	r3, [r3, #0]
 801ad50:	0018      	movs	r0, r3
 801ad52:	f7ff fd04 	bl	801a75e <xtime>
 801ad56:	0003      	movs	r3, r0
 801ad58:	0018      	movs	r0, r3
 801ad5a:	f7ff fd00 	bl	801a75e <xtime>
 801ad5e:	0003      	movs	r3, r0
 801ad60:	001a      	movs	r2, r3
 801ad62:	0028      	movs	r0, r5
 801ad64:	183b      	adds	r3, r7, r0
 801ad66:	781b      	ldrb	r3, [r3, #0]
 801ad68:	4053      	eors	r3, r2
 801ad6a:	b2dd      	uxtb	r5, r3
 801ad6c:	0002      	movs	r2, r0
 801ad6e:	18bb      	adds	r3, r7, r2
 801ad70:	781b      	ldrb	r3, [r3, #0]
 801ad72:	0018      	movs	r0, r3
 801ad74:	f7ff fcf3 	bl	801a75e <xtime>
 801ad78:	0003      	movs	r3, r0
 801ad7a:	0018      	movs	r0, r3
 801ad7c:	f7ff fcef 	bl	801a75e <xtime>
 801ad80:	0003      	movs	r3, r0
 801ad82:	0018      	movs	r0, r3
 801ad84:	f7ff fceb 	bl	801a75e <xtime>
 801ad88:	0003      	movs	r3, r0
 801ad8a:	406b      	eors	r3, r5
 801ad8c:	b2db      	uxtb	r3, r3
 801ad8e:	4063      	eors	r3, r4
 801ad90:	b2d9      	uxtb	r1, r3
 801ad92:	687a      	ldr	r2, [r7, #4]
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	009b      	lsls	r3, r3, #2
 801ad98:	18d3      	adds	r3, r2, r3
 801ad9a:	3301      	adds	r3, #1
 801ad9c:	1c0a      	adds	r2, r1, #0
 801ad9e:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 801ada0:	19bb      	adds	r3, r7, r6
 801ada2:	781b      	ldrb	r3, [r3, #0]
 801ada4:	0018      	movs	r0, r3
 801ada6:	f7ff fcda 	bl	801a75e <xtime>
 801adaa:	19bb      	adds	r3, r7, r6
 801adac:	781b      	ldrb	r3, [r3, #0]
 801adae:	0018      	movs	r0, r3
 801adb0:	f7ff fcd5 	bl	801a75e <xtime>
 801adb4:	0003      	movs	r3, r0
 801adb6:	0018      	movs	r0, r3
 801adb8:	f7ff fcd1 	bl	801a75e <xtime>
 801adbc:	0003      	movs	r3, r0
 801adbe:	0018      	movs	r0, r3
 801adc0:	f7ff fccd 	bl	801a75e <xtime>
 801adc4:	0003      	movs	r3, r0
 801adc6:	0018      	movs	r0, r3
 801adc8:	f7ff fcc9 	bl	801a75e <xtime>
 801adcc:	250a      	movs	r5, #10
 801adce:	197b      	adds	r3, r7, r5
 801add0:	781b      	ldrb	r3, [r3, #0]
 801add2:	0018      	movs	r0, r3
 801add4:	f7ff fcc3 	bl	801a75e <xtime>
 801add8:	197b      	adds	r3, r7, r5
 801adda:	781b      	ldrb	r3, [r3, #0]
 801addc:	0018      	movs	r0, r3
 801adde:	f7ff fcbe 	bl	801a75e <xtime>
 801ade2:	0003      	movs	r3, r0
 801ade4:	0018      	movs	r0, r3
 801ade6:	f7ff fcba 	bl	801a75e <xtime>
 801adea:	197b      	adds	r3, r7, r5
 801adec:	781b      	ldrb	r3, [r3, #0]
 801adee:	0018      	movs	r0, r3
 801adf0:	f7ff fcb5 	bl	801a75e <xtime>
 801adf4:	0003      	movs	r3, r0
 801adf6:	0018      	movs	r0, r3
 801adf8:	f7ff fcb1 	bl	801a75e <xtime>
 801adfc:	0003      	movs	r3, r0
 801adfe:	0018      	movs	r0, r3
 801ae00:	f7ff fcad 	bl	801a75e <xtime>
 801ae04:	0003      	movs	r3, r0
 801ae06:	0018      	movs	r0, r3
 801ae08:	f7ff fca9 	bl	801a75e <xtime>
 801ae0c:	2109      	movs	r1, #9
 801ae0e:	187b      	adds	r3, r7, r1
 801ae10:	781b      	ldrb	r3, [r3, #0]
 801ae12:	0018      	movs	r0, r3
 801ae14:	f7ff fca3 	bl	801a75e <xtime>
 801ae18:	0003      	movs	r3, r0
 801ae1a:	0018      	movs	r0, r3
 801ae1c:	f7ff fc9f 	bl	801a75e <xtime>
 801ae20:	0003      	movs	r3, r0
 801ae22:	0018      	movs	r0, r3
 801ae24:	f7ff fc9b 	bl	801a75e <xtime>
 801ae28:	0003      	movs	r3, r0
 801ae2a:	0018      	movs	r0, r3
 801ae2c:	f7ff fc97 	bl	801a75e <xtime>
 801ae30:	2408      	movs	r4, #8
 801ae32:	193b      	adds	r3, r7, r4
 801ae34:	781b      	ldrb	r3, [r3, #0]
 801ae36:	0018      	movs	r0, r3
 801ae38:	f7ff fc91 	bl	801a75e <xtime>
 801ae3c:	0003      	movs	r3, r0
 801ae3e:	0018      	movs	r0, r3
 801ae40:	f7ff fc8d 	bl	801a75e <xtime>
 801ae44:	193b      	adds	r3, r7, r4
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	0018      	movs	r0, r3
 801ae4a:	f7ff fc88 	bl	801a75e <xtime>
 801ae4e:	0003      	movs	r3, r0
 801ae50:	0018      	movs	r0, r3
 801ae52:	f7ff fc84 	bl	801a75e <xtime>
 801ae56:	0003      	movs	r3, r0
 801ae58:	0018      	movs	r0, r3
 801ae5a:	f7ff fc80 	bl	801a75e <xtime>
 801ae5e:	0003      	movs	r3, r0
 801ae60:	0018      	movs	r0, r3
 801ae62:	f7ff fc7c 	bl	801a75e <xtime>
 801ae66:	19bb      	adds	r3, r7, r6
 801ae68:	781b      	ldrb	r3, [r3, #0]
 801ae6a:	0018      	movs	r0, r3
 801ae6c:	f7ff fc77 	bl	801a75e <xtime>
 801ae70:	0003      	movs	r3, r0
 801ae72:	0018      	movs	r0, r3
 801ae74:	f7ff fc73 	bl	801a75e <xtime>
 801ae78:	0003      	movs	r3, r0
 801ae7a:	001a      	movs	r2, r3
 801ae7c:	19bb      	adds	r3, r7, r6
 801ae7e:	781b      	ldrb	r3, [r3, #0]
 801ae80:	4053      	eors	r3, r2
 801ae82:	b2dc      	uxtb	r4, r3
 801ae84:	19bb      	adds	r3, r7, r6
 801ae86:	781b      	ldrb	r3, [r3, #0]
 801ae88:	0018      	movs	r0, r3
 801ae8a:	f7ff fc68 	bl	801a75e <xtime>
 801ae8e:	0003      	movs	r3, r0
 801ae90:	0018      	movs	r0, r3
 801ae92:	f7ff fc64 	bl	801a75e <xtime>
 801ae96:	0003      	movs	r3, r0
 801ae98:	0018      	movs	r0, r3
 801ae9a:	f7ff fc60 	bl	801a75e <xtime>
 801ae9e:	0003      	movs	r3, r0
 801aea0:	4063      	eors	r3, r4
 801aea2:	b2dc      	uxtb	r4, r3
 801aea4:	197b      	adds	r3, r7, r5
 801aea6:	781b      	ldrb	r3, [r3, #0]
 801aea8:	0018      	movs	r0, r3
 801aeaa:	f7ff fc58 	bl	801a75e <xtime>
 801aeae:	0003      	movs	r3, r0
 801aeb0:	0018      	movs	r0, r3
 801aeb2:	f7ff fc54 	bl	801a75e <xtime>
 801aeb6:	0003      	movs	r3, r0
 801aeb8:	0018      	movs	r0, r3
 801aeba:	f7ff fc50 	bl	801a75e <xtime>
 801aebe:	0003      	movs	r3, r0
 801aec0:	001a      	movs	r2, r3
 801aec2:	197b      	adds	r3, r7, r5
 801aec4:	781b      	ldrb	r3, [r3, #0]
 801aec6:	4053      	eors	r3, r2
 801aec8:	b2db      	uxtb	r3, r3
 801aeca:	4063      	eors	r3, r4
 801aecc:	b2dc      	uxtb	r4, r3
 801aece:	2109      	movs	r1, #9
 801aed0:	187b      	adds	r3, r7, r1
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	0018      	movs	r0, r3
 801aed6:	f7ff fc42 	bl	801a75e <xtime>
 801aeda:	0003      	movs	r3, r0
 801aedc:	001d      	movs	r5, r3
 801aede:	2109      	movs	r1, #9
 801aee0:	187b      	adds	r3, r7, r1
 801aee2:	781b      	ldrb	r3, [r3, #0]
 801aee4:	0018      	movs	r0, r3
 801aee6:	f7ff fc3a 	bl	801a75e <xtime>
 801aeea:	0003      	movs	r3, r0
 801aeec:	0018      	movs	r0, r3
 801aeee:	f7ff fc36 	bl	801a75e <xtime>
 801aef2:	0003      	movs	r3, r0
 801aef4:	406b      	eors	r3, r5
 801aef6:	b2dd      	uxtb	r5, r3
 801aef8:	2109      	movs	r1, #9
 801aefa:	187b      	adds	r3, r7, r1
 801aefc:	781b      	ldrb	r3, [r3, #0]
 801aefe:	0018      	movs	r0, r3
 801af00:	f7ff fc2d 	bl	801a75e <xtime>
 801af04:	0003      	movs	r3, r0
 801af06:	0018      	movs	r0, r3
 801af08:	f7ff fc29 	bl	801a75e <xtime>
 801af0c:	0003      	movs	r3, r0
 801af0e:	0018      	movs	r0, r3
 801af10:	f7ff fc25 	bl	801a75e <xtime>
 801af14:	0003      	movs	r3, r0
 801af16:	406b      	eors	r3, r5
 801af18:	b2db      	uxtb	r3, r3
 801af1a:	4063      	eors	r3, r4
 801af1c:	b2dc      	uxtb	r4, r3
 801af1e:	2308      	movs	r3, #8
 801af20:	001d      	movs	r5, r3
 801af22:	18fb      	adds	r3, r7, r3
 801af24:	781b      	ldrb	r3, [r3, #0]
 801af26:	0018      	movs	r0, r3
 801af28:	f7ff fc19 	bl	801a75e <xtime>
 801af2c:	0003      	movs	r3, r0
 801af2e:	001a      	movs	r2, r3
 801af30:	0028      	movs	r0, r5
 801af32:	183b      	adds	r3, r7, r0
 801af34:	781b      	ldrb	r3, [r3, #0]
 801af36:	4053      	eors	r3, r2
 801af38:	b2dd      	uxtb	r5, r3
 801af3a:	0003      	movs	r3, r0
 801af3c:	18fb      	adds	r3, r7, r3
 801af3e:	781b      	ldrb	r3, [r3, #0]
 801af40:	0018      	movs	r0, r3
 801af42:	f7ff fc0c 	bl	801a75e <xtime>
 801af46:	0003      	movs	r3, r0
 801af48:	0018      	movs	r0, r3
 801af4a:	f7ff fc08 	bl	801a75e <xtime>
 801af4e:	0003      	movs	r3, r0
 801af50:	0018      	movs	r0, r3
 801af52:	f7ff fc04 	bl	801a75e <xtime>
 801af56:	0003      	movs	r3, r0
 801af58:	406b      	eors	r3, r5
 801af5a:	b2db      	uxtb	r3, r3
 801af5c:	4063      	eors	r3, r4
 801af5e:	b2d9      	uxtb	r1, r3
 801af60:	687a      	ldr	r2, [r7, #4]
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	009b      	lsls	r3, r3, #2
 801af66:	18d3      	adds	r3, r2, r3
 801af68:	3302      	adds	r3, #2
 801af6a:	1c0a      	adds	r2, r1, #0
 801af6c:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 801af6e:	19bb      	adds	r3, r7, r6
 801af70:	781b      	ldrb	r3, [r3, #0]
 801af72:	0018      	movs	r0, r3
 801af74:	f7ff fbf3 	bl	801a75e <xtime>
 801af78:	0003      	movs	r3, r0
 801af7a:	0018      	movs	r0, r3
 801af7c:	f7ff fbef 	bl	801a75e <xtime>
 801af80:	19bb      	adds	r3, r7, r6
 801af82:	781b      	ldrb	r3, [r3, #0]
 801af84:	0018      	movs	r0, r3
 801af86:	f7ff fbea 	bl	801a75e <xtime>
 801af8a:	0003      	movs	r3, r0
 801af8c:	0018      	movs	r0, r3
 801af8e:	f7ff fbe6 	bl	801a75e <xtime>
 801af92:	0003      	movs	r3, r0
 801af94:	0018      	movs	r0, r3
 801af96:	f7ff fbe2 	bl	801a75e <xtime>
 801af9a:	0003      	movs	r3, r0
 801af9c:	0018      	movs	r0, r3
 801af9e:	f7ff fbde 	bl	801a75e <xtime>
 801afa2:	250a      	movs	r5, #10
 801afa4:	197b      	adds	r3, r7, r5
 801afa6:	781b      	ldrb	r3, [r3, #0]
 801afa8:	0018      	movs	r0, r3
 801afaa:	f7ff fbd8 	bl	801a75e <xtime>
 801afae:	197b      	adds	r3, r7, r5
 801afb0:	781b      	ldrb	r3, [r3, #0]
 801afb2:	0018      	movs	r0, r3
 801afb4:	f7ff fbd3 	bl	801a75e <xtime>
 801afb8:	0003      	movs	r3, r0
 801afba:	0018      	movs	r0, r3
 801afbc:	f7ff fbcf 	bl	801a75e <xtime>
 801afc0:	0003      	movs	r3, r0
 801afc2:	0018      	movs	r0, r3
 801afc4:	f7ff fbcb 	bl	801a75e <xtime>
 801afc8:	0003      	movs	r3, r0
 801afca:	0018      	movs	r0, r3
 801afcc:	f7ff fbc7 	bl	801a75e <xtime>
 801afd0:	2109      	movs	r1, #9
 801afd2:	000c      	movs	r4, r1
 801afd4:	187b      	adds	r3, r7, r1
 801afd6:	781b      	ldrb	r3, [r3, #0]
 801afd8:	0018      	movs	r0, r3
 801afda:	f7ff fbc0 	bl	801a75e <xtime>
 801afde:	193b      	adds	r3, r7, r4
 801afe0:	781b      	ldrb	r3, [r3, #0]
 801afe2:	0018      	movs	r0, r3
 801afe4:	f7ff fbbb 	bl	801a75e <xtime>
 801afe8:	0003      	movs	r3, r0
 801afea:	0018      	movs	r0, r3
 801afec:	f7ff fbb7 	bl	801a75e <xtime>
 801aff0:	193b      	adds	r3, r7, r4
 801aff2:	781b      	ldrb	r3, [r3, #0]
 801aff4:	0018      	movs	r0, r3
 801aff6:	f7ff fbb2 	bl	801a75e <xtime>
 801affa:	0003      	movs	r3, r0
 801affc:	0018      	movs	r0, r3
 801affe:	f7ff fbae 	bl	801a75e <xtime>
 801b002:	0003      	movs	r3, r0
 801b004:	0018      	movs	r0, r3
 801b006:	f7ff fbaa 	bl	801a75e <xtime>
 801b00a:	0003      	movs	r3, r0
 801b00c:	0018      	movs	r0, r3
 801b00e:	f7ff fba6 	bl	801a75e <xtime>
 801b012:	2308      	movs	r3, #8
 801b014:	18fb      	adds	r3, r7, r3
 801b016:	781b      	ldrb	r3, [r3, #0]
 801b018:	0018      	movs	r0, r3
 801b01a:	f7ff fba0 	bl	801a75e <xtime>
 801b01e:	0003      	movs	r3, r0
 801b020:	0018      	movs	r0, r3
 801b022:	f7ff fb9c 	bl	801a75e <xtime>
 801b026:	0003      	movs	r3, r0
 801b028:	0018      	movs	r0, r3
 801b02a:	f7ff fb98 	bl	801a75e <xtime>
 801b02e:	0003      	movs	r3, r0
 801b030:	0018      	movs	r0, r3
 801b032:	f7ff fb94 	bl	801a75e <xtime>
 801b036:	19bb      	adds	r3, r7, r6
 801b038:	781b      	ldrb	r3, [r3, #0]
 801b03a:	0018      	movs	r0, r3
 801b03c:	f7ff fb8f 	bl	801a75e <xtime>
 801b040:	0003      	movs	r3, r0
 801b042:	001a      	movs	r2, r3
 801b044:	19bb      	adds	r3, r7, r6
 801b046:	781b      	ldrb	r3, [r3, #0]
 801b048:	4053      	eors	r3, r2
 801b04a:	b2dc      	uxtb	r4, r3
 801b04c:	19bb      	adds	r3, r7, r6
 801b04e:	781b      	ldrb	r3, [r3, #0]
 801b050:	0018      	movs	r0, r3
 801b052:	f7ff fb84 	bl	801a75e <xtime>
 801b056:	0003      	movs	r3, r0
 801b058:	0018      	movs	r0, r3
 801b05a:	f7ff fb80 	bl	801a75e <xtime>
 801b05e:	0003      	movs	r3, r0
 801b060:	0018      	movs	r0, r3
 801b062:	f7ff fb7c 	bl	801a75e <xtime>
 801b066:	0003      	movs	r3, r0
 801b068:	4063      	eors	r3, r4
 801b06a:	b2dc      	uxtb	r4, r3
 801b06c:	197b      	adds	r3, r7, r5
 801b06e:	781b      	ldrb	r3, [r3, #0]
 801b070:	0018      	movs	r0, r3
 801b072:	f7ff fb74 	bl	801a75e <xtime>
 801b076:	0003      	movs	r3, r0
 801b078:	0018      	movs	r0, r3
 801b07a:	f7ff fb70 	bl	801a75e <xtime>
 801b07e:	0003      	movs	r3, r0
 801b080:	001a      	movs	r2, r3
 801b082:	0029      	movs	r1, r5
 801b084:	197b      	adds	r3, r7, r5
 801b086:	781b      	ldrb	r3, [r3, #0]
 801b088:	4053      	eors	r3, r2
 801b08a:	b2dd      	uxtb	r5, r3
 801b08c:	187b      	adds	r3, r7, r1
 801b08e:	781b      	ldrb	r3, [r3, #0]
 801b090:	0018      	movs	r0, r3
 801b092:	f7ff fb64 	bl	801a75e <xtime>
 801b096:	0003      	movs	r3, r0
 801b098:	0018      	movs	r0, r3
 801b09a:	f7ff fb60 	bl	801a75e <xtime>
 801b09e:	0003      	movs	r3, r0
 801b0a0:	0018      	movs	r0, r3
 801b0a2:	f7ff fb5c 	bl	801a75e <xtime>
 801b0a6:	0003      	movs	r3, r0
 801b0a8:	406b      	eors	r3, r5
 801b0aa:	b2db      	uxtb	r3, r3
 801b0ac:	4063      	eors	r3, r4
 801b0ae:	b2dc      	uxtb	r4, r3
 801b0b0:	2509      	movs	r5, #9
 801b0b2:	197b      	adds	r3, r7, r5
 801b0b4:	781b      	ldrb	r3, [r3, #0]
 801b0b6:	0018      	movs	r0, r3
 801b0b8:	f7ff fb51 	bl	801a75e <xtime>
 801b0bc:	0003      	movs	r3, r0
 801b0be:	0018      	movs	r0, r3
 801b0c0:	f7ff fb4d 	bl	801a75e <xtime>
 801b0c4:	0003      	movs	r3, r0
 801b0c6:	0018      	movs	r0, r3
 801b0c8:	f7ff fb49 	bl	801a75e <xtime>
 801b0cc:	0003      	movs	r3, r0
 801b0ce:	001a      	movs	r2, r3
 801b0d0:	197b      	adds	r3, r7, r5
 801b0d2:	781b      	ldrb	r3, [r3, #0]
 801b0d4:	4053      	eors	r3, r2
 801b0d6:	b2db      	uxtb	r3, r3
 801b0d8:	4063      	eors	r3, r4
 801b0da:	b2dc      	uxtb	r4, r3
 801b0dc:	2608      	movs	r6, #8
 801b0de:	19bb      	adds	r3, r7, r6
 801b0e0:	781b      	ldrb	r3, [r3, #0]
 801b0e2:	0018      	movs	r0, r3
 801b0e4:	f7ff fb3b 	bl	801a75e <xtime>
 801b0e8:	0003      	movs	r3, r0
 801b0ea:	001d      	movs	r5, r3
 801b0ec:	19bb      	adds	r3, r7, r6
 801b0ee:	781b      	ldrb	r3, [r3, #0]
 801b0f0:	0018      	movs	r0, r3
 801b0f2:	f7ff fb34 	bl	801a75e <xtime>
 801b0f6:	0003      	movs	r3, r0
 801b0f8:	0018      	movs	r0, r3
 801b0fa:	f7ff fb30 	bl	801a75e <xtime>
 801b0fe:	0003      	movs	r3, r0
 801b100:	406b      	eors	r3, r5
 801b102:	b2dd      	uxtb	r5, r3
 801b104:	19bb      	adds	r3, r7, r6
 801b106:	781b      	ldrb	r3, [r3, #0]
 801b108:	0018      	movs	r0, r3
 801b10a:	f7ff fb28 	bl	801a75e <xtime>
 801b10e:	0003      	movs	r3, r0
 801b110:	0018      	movs	r0, r3
 801b112:	f7ff fb24 	bl	801a75e <xtime>
 801b116:	0003      	movs	r3, r0
 801b118:	0018      	movs	r0, r3
 801b11a:	f7ff fb20 	bl	801a75e <xtime>
 801b11e:	0003      	movs	r3, r0
 801b120:	406b      	eors	r3, r5
 801b122:	b2db      	uxtb	r3, r3
 801b124:	4063      	eors	r3, r4
 801b126:	b2d9      	uxtb	r1, r3
 801b128:	687a      	ldr	r2, [r7, #4]
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	009b      	lsls	r3, r3, #2
 801b12e:	18d3      	adds	r3, r2, r3
 801b130:	3303      	adds	r3, #3
 801b132:	1c0a      	adds	r2, r1, #0
 801b134:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	3301      	adds	r3, #1
 801b13a:	60fb      	str	r3, [r7, #12]
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	2b03      	cmp	r3, #3
 801b140:	dc00      	bgt.n	801b144 <InvMixColumns+0x79e>
 801b142:	e437      	b.n	801a9b4 <InvMixColumns+0xe>
  }
}
 801b144:	46c0      	nop			; (mov r8, r8)
 801b146:	46bd      	mov	sp, r7
 801b148:	b005      	add	sp, #20
 801b14a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b14c <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 801b14c:	b5b0      	push	{r4, r5, r7, lr}
 801b14e:	b084      	sub	sp, #16
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 801b154:	230f      	movs	r3, #15
 801b156:	18fb      	adds	r3, r7, r3
 801b158:	2200      	movs	r2, #0
 801b15a:	701a      	strb	r2, [r3, #0]
 801b15c:	e02a      	b.n	801b1b4 <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 801b15e:	230e      	movs	r3, #14
 801b160:	18fb      	adds	r3, r7, r3
 801b162:	2200      	movs	r2, #0
 801b164:	701a      	strb	r2, [r3, #0]
 801b166:	e01a      	b.n	801b19e <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 801b168:	240e      	movs	r4, #14
 801b16a:	193b      	adds	r3, r7, r4
 801b16c:	781a      	ldrb	r2, [r3, #0]
 801b16e:	250f      	movs	r5, #15
 801b170:	197b      	adds	r3, r7, r5
 801b172:	781b      	ldrb	r3, [r3, #0]
 801b174:	6879      	ldr	r1, [r7, #4]
 801b176:	0092      	lsls	r2, r2, #2
 801b178:	188a      	adds	r2, r1, r2
 801b17a:	5cd3      	ldrb	r3, [r2, r3]
 801b17c:	0018      	movs	r0, r3
 801b17e:	193b      	adds	r3, r7, r4
 801b180:	781a      	ldrb	r2, [r3, #0]
 801b182:	197b      	adds	r3, r7, r5
 801b184:	781b      	ldrb	r3, [r3, #0]
 801b186:	4910      	ldr	r1, [pc, #64]	; (801b1c8 <InvSubBytes+0x7c>)
 801b188:	5c08      	ldrb	r0, [r1, r0]
 801b18a:	6879      	ldr	r1, [r7, #4]
 801b18c:	0092      	lsls	r2, r2, #2
 801b18e:	188a      	adds	r2, r1, r2
 801b190:	1c01      	adds	r1, r0, #0
 801b192:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 801b194:	193b      	adds	r3, r7, r4
 801b196:	193a      	adds	r2, r7, r4
 801b198:	7812      	ldrb	r2, [r2, #0]
 801b19a:	3201      	adds	r2, #1
 801b19c:	701a      	strb	r2, [r3, #0]
 801b19e:	230e      	movs	r3, #14
 801b1a0:	18fb      	adds	r3, r7, r3
 801b1a2:	781b      	ldrb	r3, [r3, #0]
 801b1a4:	2b03      	cmp	r3, #3
 801b1a6:	d9df      	bls.n	801b168 <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 801b1a8:	220f      	movs	r2, #15
 801b1aa:	18bb      	adds	r3, r7, r2
 801b1ac:	18ba      	adds	r2, r7, r2
 801b1ae:	7812      	ldrb	r2, [r2, #0]
 801b1b0:	3201      	adds	r2, #1
 801b1b2:	701a      	strb	r2, [r3, #0]
 801b1b4:	230f      	movs	r3, #15
 801b1b6:	18fb      	adds	r3, r7, r3
 801b1b8:	781b      	ldrb	r3, [r3, #0]
 801b1ba:	2b03      	cmp	r3, #3
 801b1bc:	d9cf      	bls.n	801b15e <InvSubBytes+0x12>
    }
  }
}
 801b1be:	46c0      	nop			; (mov r8, r8)
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	b004      	add	sp, #16
 801b1c4:	bdb0      	pop	{r4, r5, r7, pc}
 801b1c6:	46c0      	nop			; (mov r8, r8)
 801b1c8:	0802101c 	.word	0x0802101c

0801b1cc <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b084      	sub	sp, #16
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 801b1d4:	210f      	movs	r1, #15
 801b1d6:	187b      	adds	r3, r7, r1
 801b1d8:	687a      	ldr	r2, [r7, #4]
 801b1da:	7b52      	ldrb	r2, [r2, #13]
 801b1dc:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	7a5a      	ldrb	r2, [r3, #9]
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	795a      	ldrb	r2, [r3, #5]
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	785a      	ldrb	r2, [r3, #1]
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	187a      	adds	r2, r7, r1
 801b1fa:	7812      	ldrb	r2, [r2, #0]
 801b1fc:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 801b1fe:	187b      	adds	r3, r7, r1
 801b200:	687a      	ldr	r2, [r7, #4]
 801b202:	7892      	ldrb	r2, [r2, #2]
 801b204:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	7a9a      	ldrb	r2, [r3, #10]
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	187a      	adds	r2, r7, r1
 801b212:	7812      	ldrb	r2, [r2, #0]
 801b214:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 801b216:	187b      	adds	r3, r7, r1
 801b218:	687a      	ldr	r2, [r7, #4]
 801b21a:	7992      	ldrb	r2, [r2, #6]
 801b21c:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	7b9a      	ldrb	r2, [r3, #14]
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	187a      	adds	r2, r7, r1
 801b22a:	7812      	ldrb	r2, [r2, #0]
 801b22c:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 801b22e:	187b      	adds	r3, r7, r1
 801b230:	687a      	ldr	r2, [r7, #4]
 801b232:	78d2      	ldrb	r2, [r2, #3]
 801b234:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	79da      	ldrb	r2, [r3, #7]
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	7ada      	ldrb	r2, [r3, #11]
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	7bda      	ldrb	r2, [r3, #15]
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	187a      	adds	r2, r7, r1
 801b252:	7812      	ldrb	r2, [r2, #0]
 801b254:	73da      	strb	r2, [r3, #15]
}
 801b256:	46c0      	nop			; (mov r8, r8)
 801b258:	46bd      	mov	sp, r7
 801b25a:	b004      	add	sp, #16
 801b25c:	bd80      	pop	{r7, pc}

0801b25e <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 801b25e:	b590      	push	{r4, r7, lr}
 801b260:	b085      	sub	sp, #20
 801b262:	af00      	add	r7, sp, #0
 801b264:	6078      	str	r0, [r7, #4]
 801b266:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 801b268:	240f      	movs	r4, #15
 801b26a:	193b      	adds	r3, r7, r4
 801b26c:	2200      	movs	r2, #0
 801b26e:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 801b270:	683a      	ldr	r2, [r7, #0]
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	0019      	movs	r1, r3
 801b276:	2000      	movs	r0, #0
 801b278:	f7ff f997 	bl	801a5aa <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 801b27c:	193b      	adds	r3, r7, r4
 801b27e:	2201      	movs	r2, #1
 801b280:	701a      	strb	r2, [r3, #0]
 801b282:	e018      	b.n	801b2b6 <Cipher+0x58>
  {
    SubBytes(state);
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	0018      	movs	r0, r3
 801b288:	f7ff f9e0 	bl	801a64c <SubBytes>
    ShiftRows(state);
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	0018      	movs	r0, r3
 801b290:	f7ff fa1c 	bl	801a6cc <ShiftRows>
    MixColumns(state);
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	0018      	movs	r0, r3
 801b298:	f7ff fa81 	bl	801a79e <MixColumns>
    AddRoundKey(round, state, RoundKey);
 801b29c:	683a      	ldr	r2, [r7, #0]
 801b29e:	6879      	ldr	r1, [r7, #4]
 801b2a0:	240f      	movs	r4, #15
 801b2a2:	193b      	adds	r3, r7, r4
 801b2a4:	781b      	ldrb	r3, [r3, #0]
 801b2a6:	0018      	movs	r0, r3
 801b2a8:	f7ff f97f 	bl	801a5aa <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 801b2ac:	193b      	adds	r3, r7, r4
 801b2ae:	193a      	adds	r2, r7, r4
 801b2b0:	7812      	ldrb	r2, [r2, #0]
 801b2b2:	3201      	adds	r2, #1
 801b2b4:	701a      	strb	r2, [r3, #0]
 801b2b6:	230f      	movs	r3, #15
 801b2b8:	18fb      	adds	r3, r7, r3
 801b2ba:	781b      	ldrb	r3, [r3, #0]
 801b2bc:	2b09      	cmp	r3, #9
 801b2be:	d9e1      	bls.n	801b284 <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	0018      	movs	r0, r3
 801b2c4:	f7ff f9c2 	bl	801a64c <SubBytes>
  ShiftRows(state);
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	0018      	movs	r0, r3
 801b2cc:	f7ff f9fe 	bl	801a6cc <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 801b2d0:	683a      	ldr	r2, [r7, #0]
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	0019      	movs	r1, r3
 801b2d6:	200a      	movs	r0, #10
 801b2d8:	f7ff f967 	bl	801a5aa <AddRoundKey>
}
 801b2dc:	46c0      	nop			; (mov r8, r8)
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	b005      	add	sp, #20
 801b2e2:	bd90      	pop	{r4, r7, pc}

0801b2e4 <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 801b2e4:	b590      	push	{r4, r7, lr}
 801b2e6:	b085      	sub	sp, #20
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
 801b2ec:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 801b2ee:	240f      	movs	r4, #15
 801b2f0:	193b      	adds	r3, r7, r4
 801b2f2:	2200      	movs	r2, #0
 801b2f4:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 801b2f6:	683a      	ldr	r2, [r7, #0]
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	0019      	movs	r1, r3
 801b2fc:	200a      	movs	r0, #10
 801b2fe:	f7ff f954 	bl	801a5aa <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 801b302:	193b      	adds	r3, r7, r4
 801b304:	2209      	movs	r2, #9
 801b306:	701a      	strb	r2, [r3, #0]
 801b308:	e018      	b.n	801b33c <InvCipher+0x58>
  {
    InvShiftRows(state);
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	0018      	movs	r0, r3
 801b30e:	f7ff ff5d 	bl	801b1cc <InvShiftRows>
    InvSubBytes(state);
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	0018      	movs	r0, r3
 801b316:	f7ff ff19 	bl	801b14c <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 801b31a:	683a      	ldr	r2, [r7, #0]
 801b31c:	6879      	ldr	r1, [r7, #4]
 801b31e:	240f      	movs	r4, #15
 801b320:	193b      	adds	r3, r7, r4
 801b322:	781b      	ldrb	r3, [r3, #0]
 801b324:	0018      	movs	r0, r3
 801b326:	f7ff f940 	bl	801a5aa <AddRoundKey>
    InvMixColumns(state);
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	0018      	movs	r0, r3
 801b32e:	f7ff fb3a 	bl	801a9a6 <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 801b332:	193b      	adds	r3, r7, r4
 801b334:	193a      	adds	r2, r7, r4
 801b336:	7812      	ldrb	r2, [r2, #0]
 801b338:	3a01      	subs	r2, #1
 801b33a:	701a      	strb	r2, [r3, #0]
 801b33c:	230f      	movs	r3, #15
 801b33e:	18fb      	adds	r3, r7, r3
 801b340:	781b      	ldrb	r3, [r3, #0]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d1e1      	bne.n	801b30a <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	0018      	movs	r0, r3
 801b34a:	f7ff ff3f 	bl	801b1cc <InvShiftRows>
  InvSubBytes(state);
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	0018      	movs	r0, r3
 801b352:	f7ff fefb 	bl	801b14c <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 801b356:	683a      	ldr	r2, [r7, #0]
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	0019      	movs	r1, r3
 801b35c:	2000      	movs	r0, #0
 801b35e:	f7ff f924 	bl	801a5aa <AddRoundKey>
}
 801b362:	46c0      	nop			; (mov r8, r8)
 801b364:	46bd      	mov	sp, r7
 801b366:	b005      	add	sp, #20
 801b368:	bd90      	pop	{r4, r7, pc}

0801b36a <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 801b36a:	b590      	push	{r4, r7, lr}
 801b36c:	b085      	sub	sp, #20
 801b36e:	af00      	add	r7, sp, #0
 801b370:	6078      	str	r0, [r7, #4]
 801b372:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 801b374:	230f      	movs	r3, #15
 801b376:	18fb      	adds	r3, r7, r3
 801b378:	2200      	movs	r2, #0
 801b37a:	701a      	strb	r2, [r3, #0]
 801b37c:	e016      	b.n	801b3ac <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 801b37e:	240f      	movs	r4, #15
 801b380:	193b      	adds	r3, r7, r4
 801b382:	781b      	ldrb	r3, [r3, #0]
 801b384:	687a      	ldr	r2, [r7, #4]
 801b386:	18d3      	adds	r3, r2, r3
 801b388:	7819      	ldrb	r1, [r3, #0]
 801b38a:	193b      	adds	r3, r7, r4
 801b38c:	781b      	ldrb	r3, [r3, #0]
 801b38e:	683a      	ldr	r2, [r7, #0]
 801b390:	18d3      	adds	r3, r2, r3
 801b392:	781a      	ldrb	r2, [r3, #0]
 801b394:	193b      	adds	r3, r7, r4
 801b396:	781b      	ldrb	r3, [r3, #0]
 801b398:	6878      	ldr	r0, [r7, #4]
 801b39a:	18c3      	adds	r3, r0, r3
 801b39c:	404a      	eors	r2, r1
 801b39e:	b2d2      	uxtb	r2, r2
 801b3a0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 801b3a2:	193b      	adds	r3, r7, r4
 801b3a4:	193a      	adds	r2, r7, r4
 801b3a6:	7812      	ldrb	r2, [r2, #0]
 801b3a8:	3201      	adds	r2, #1
 801b3aa:	701a      	strb	r2, [r3, #0]
 801b3ac:	230f      	movs	r3, #15
 801b3ae:	18fb      	adds	r3, r7, r3
 801b3b0:	781b      	ldrb	r3, [r3, #0]
 801b3b2:	2b0f      	cmp	r3, #15
 801b3b4:	d9e3      	bls.n	801b37e <XorWithIv+0x14>
  }
}
 801b3b6:	46c0      	nop			; (mov r8, r8)
 801b3b8:	46bd      	mov	sp, r7
 801b3ba:	b005      	add	sp, #20
 801b3bc:	bd90      	pop	{r4, r7, pc}

0801b3be <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 801b3be:	b580      	push	{r7, lr}
 801b3c0:	b086      	sub	sp, #24
 801b3c2:	af00      	add	r7, sp, #0
 801b3c4:	60f8      	str	r0, [r7, #12]
 801b3c6:	60b9      	str	r1, [r7, #8]
 801b3c8:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	33b0      	adds	r3, #176	; 0xb0
 801b3ce:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	617b      	str	r3, [r7, #20]
 801b3d4:	e013      	b.n	801b3fe <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 801b3d6:	693a      	ldr	r2, [r7, #16]
 801b3d8:	68bb      	ldr	r3, [r7, #8]
 801b3da:	0011      	movs	r1, r2
 801b3dc:	0018      	movs	r0, r3
 801b3de:	f7ff ffc4 	bl	801b36a <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 801b3e2:	68fa      	ldr	r2, [r7, #12]
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	0011      	movs	r1, r2
 801b3e8:	0018      	movs	r0, r3
 801b3ea:	f7ff ff38 	bl	801b25e <Cipher>
    Iv = buf;
 801b3ee:	68bb      	ldr	r3, [r7, #8]
 801b3f0:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	3310      	adds	r3, #16
 801b3f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b3f8:	697b      	ldr	r3, [r7, #20]
 801b3fa:	3310      	adds	r3, #16
 801b3fc:	617b      	str	r3, [r7, #20]
 801b3fe:	697a      	ldr	r2, [r7, #20]
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	429a      	cmp	r2, r3
 801b404:	d3e7      	bcc.n	801b3d6 <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 801b406:	68fb      	ldr	r3, [r7, #12]
 801b408:	33b0      	adds	r3, #176	; 0xb0
 801b40a:	6939      	ldr	r1, [r7, #16]
 801b40c:	2210      	movs	r2, #16
 801b40e:	0018      	movs	r0, r3
 801b410:	f003 fb0c 	bl	801ea2c <memcpy>
}
 801b414:	46c0      	nop			; (mov r8, r8)
 801b416:	46bd      	mov	sp, r7
 801b418:	b006      	add	sp, #24
 801b41a:	bd80      	pop	{r7, pc}

0801b41c <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 801b41c:	b590      	push	{r4, r7, lr}
 801b41e:	b08b      	sub	sp, #44	; 0x2c
 801b420:	af00      	add	r7, sp, #0
 801b422:	60f8      	str	r0, [r7, #12]
 801b424:	60b9      	str	r1, [r7, #8]
 801b426:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b428:	2300      	movs	r3, #0
 801b42a:	627b      	str	r3, [r7, #36]	; 0x24
 801b42c:	e026      	b.n	801b47c <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 801b42e:	2414      	movs	r4, #20
 801b430:	193a      	adds	r2, r7, r4
 801b432:	68bb      	ldr	r3, [r7, #8]
 801b434:	0010      	movs	r0, r2
 801b436:	0019      	movs	r1, r3
 801b438:	2310      	movs	r3, #16
 801b43a:	001a      	movs	r2, r3
 801b43c:	f003 faf6 	bl	801ea2c <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 801b440:	68fa      	ldr	r2, [r7, #12]
 801b442:	68bb      	ldr	r3, [r7, #8]
 801b444:	0011      	movs	r1, r2
 801b446:	0018      	movs	r0, r3
 801b448:	f7ff ff4c 	bl	801b2e4 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	33b0      	adds	r3, #176	; 0xb0
 801b450:	001a      	movs	r2, r3
 801b452:	68bb      	ldr	r3, [r7, #8]
 801b454:	0011      	movs	r1, r2
 801b456:	0018      	movs	r0, r3
 801b458:	f7ff ff87 	bl	801b36a <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	33b0      	adds	r3, #176	; 0xb0
 801b460:	001a      	movs	r2, r3
 801b462:	193b      	adds	r3, r7, r4
 801b464:	0010      	movs	r0, r2
 801b466:	0019      	movs	r1, r3
 801b468:	2310      	movs	r3, #16
 801b46a:	001a      	movs	r2, r3
 801b46c:	f003 fade 	bl	801ea2c <memcpy>
    buf += AES_BLOCKLEN;
 801b470:	68bb      	ldr	r3, [r7, #8]
 801b472:	3310      	adds	r3, #16
 801b474:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 801b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b478:	3310      	adds	r3, #16
 801b47a:	627b      	str	r3, [r7, #36]	; 0x24
 801b47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	429a      	cmp	r2, r3
 801b482:	d3d4      	bcc.n	801b42e <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 801b484:	46c0      	nop			; (mov r8, r8)
 801b486:	46bd      	mov	sp, r7
 801b488:	b00b      	add	sp, #44	; 0x2c
 801b48a:	bd90      	pop	{r4, r7, pc}

0801b48c <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b084      	sub	sp, #16
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 801b494:	2300      	movs	r3, #0
 801b496:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801b498:	230c      	movs	r3, #12
 801b49a:	18fb      	adds	r3, r7, r3
 801b49c:	0018      	movs	r0, r3
 801b49e:	f7fe f8d6 	bl	801964e <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 801b4a2:	68f9      	ldr	r1, [r7, #12]
 801b4a4:	687a      	ldr	r2, [r7, #4]
 801b4a6:	2308      	movs	r3, #8
 801b4a8:	2000      	movs	r0, #0
 801b4aa:	f002 fd95 	bl	801dfd8 <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	881b      	ldrh	r3, [r3, #0]
 801b4b2:	4a05      	ldr	r2, [pc, #20]	; (801b4c8 <_itsdk_error_readHeader+0x3c>)
 801b4b4:	4293      	cmp	r3, r2
 801b4b6:	d001      	beq.n	801b4bc <_itsdk_error_readHeader+0x30>
 801b4b8:	2301      	movs	r3, #1
 801b4ba:	e000      	b.n	801b4be <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 801b4bc:	2300      	movs	r3, #0
}
 801b4be:	0018      	movs	r0, r3
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	b004      	add	sp, #16
 801b4c4:	bd80      	pop	{r7, pc}
 801b4c6:	46c0      	nop			; (mov r8, r8)
 801b4c8:	0000ae73 	.word	0x0000ae73

0801b4cc <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 801b4cc:	b580      	push	{r7, lr}
 801b4ce:	b084      	sub	sp, #16
 801b4d0:	af00      	add	r7, sp, #0
 801b4d2:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801b4d8:	230c      	movs	r3, #12
 801b4da:	18fb      	adds	r3, r7, r3
 801b4dc:	0018      	movs	r0, r3
 801b4de:	f7fe f8b6 	bl	801964e <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 801b4e2:	68f9      	ldr	r1, [r7, #12]
 801b4e4:	687a      	ldr	r2, [r7, #4]
 801b4e6:	2308      	movs	r3, #8
 801b4e8:	2000      	movs	r0, #0
 801b4ea:	f002 fcd1 	bl	801de90 <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 801b4ee:	2300      	movs	r3, #0
}
 801b4f0:	0018      	movs	r0, r3
 801b4f2:	46bd      	mov	sp, r7
 801b4f4:	b004      	add	sp, #16
 801b4f6:	bd80      	pop	{r7, pc}

0801b4f8 <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b084      	sub	sp, #16
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	0002      	movs	r2, r0
 801b500:	6039      	str	r1, [r7, #0]
 801b502:	1dbb      	adds	r3, r7, #6
 801b504:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 801b506:	2300      	movs	r3, #0
 801b508:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801b50a:	230c      	movs	r3, #12
 801b50c:	18fb      	adds	r3, r7, r3
 801b50e:	0018      	movs	r0, r3
 801b510:	f7fe f89d 	bl	801964e <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 801b514:	1dbb      	adds	r3, r7, #6
 801b516:	881b      	ldrh	r3, [r3, #0]
 801b518:	00da      	lsls	r2, r3, #3
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 801b51e:	3308      	adds	r3, #8
 801b520:	0019      	movs	r1, r3
 801b522:	683a      	ldr	r2, [r7, #0]
 801b524:	2308      	movs	r3, #8
 801b526:	2000      	movs	r0, #0
 801b528:	f002 fcb2 	bl	801de90 <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 801b52c:	2300      	movs	r3, #0
}
 801b52e:	0018      	movs	r0, r3
 801b530:	46bd      	mov	sp, r7
 801b532:	b004      	add	sp, #16
 801b534:	bd80      	pop	{r7, pc}

0801b536 <_itsdk_error_read>:

/**
 * Read a given error Id from the NVM
 */
__weak itsdk_error_ret_e _itsdk_error_read(uint16_t blockId,itsdk_error_entry_t * e) {
 801b536:	b580      	push	{r7, lr}
 801b538:	b084      	sub	sp, #16
 801b53a:	af00      	add	r7, sp, #0
 801b53c:	0002      	movs	r2, r0
 801b53e:	6039      	str	r1, [r7, #0]
 801b540:	1dbb      	adds	r3, r7, #6
 801b542:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 801b544:	2300      	movs	r3, #0
 801b546:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 801b548:	230c      	movs	r3, #12
 801b54a:	18fb      	adds	r3, r7, r3
 801b54c:	0018      	movs	r0, r3
 801b54e:	f7fe f87e 	bl	801964e <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 801b552:	1dbb      	adds	r3, r7, #6
 801b554:	881b      	ldrh	r3, [r3, #0]
 801b556:	00da      	lsls	r2, r3, #3
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	18d3      	adds	r3, r2, r3
	_eeprom_read(
 801b55c:	3308      	adds	r3, #8
 801b55e:	0019      	movs	r1, r3
 801b560:	683a      	ldr	r2, [r7, #0]
 801b562:	2308      	movs	r3, #8
 801b564:	2000      	movs	r0, #0
 801b566:	f002 fd37 	bl	801dfd8 <_eeprom_read>
		(void *)e, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 801b56a:	2300      	movs	r3, #0
}
 801b56c:	0018      	movs	r0, r3
 801b56e:	46bd      	mov	sp, r7
 801b570:	b004      	add	sp, #16
 801b572:	bd80      	pop	{r7, pc}

0801b574 <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 801b574:	b580      	push	{r7, lr}
 801b576:	b082      	sub	sp, #8
 801b578:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 801b57a:	003b      	movs	r3, r7
 801b57c:	0018      	movs	r0, r3
 801b57e:	f7ff ff85 	bl	801b48c <_itsdk_error_readHeader>
 801b582:	0003      	movs	r3, r0
 801b584:	2b01      	cmp	r3, #1
 801b586:	d10c      	bne.n	801b5a2 <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 801b588:	003b      	movs	r3, r7
 801b58a:	4a0f      	ldr	r2, [pc, #60]	; (801b5c8 <itsdk_error_setup+0x54>)
 801b58c:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 801b58e:	003b      	movs	r3, r7
 801b590:	2200      	movs	r2, #0
 801b592:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 801b594:	003b      	movs	r3, r7
 801b596:	2200      	movs	r2, #0
 801b598:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 801b59a:	003b      	movs	r3, r7
 801b59c:	0018      	movs	r0, r3
 801b59e:	f7ff ff95 	bl	801b4cc <_itsdk_error_writeHeader>
	}
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_errorMng.console_private = _itsdk_error_consolePriv;
 801b5a2:	4b0a      	ldr	r3, [pc, #40]	; (801b5cc <itsdk_error_setup+0x58>)
 801b5a4:	4a0a      	ldr	r2, [pc, #40]	; (801b5d0 <itsdk_error_setup+0x5c>)
 801b5a6:	601a      	str	r2, [r3, #0]
	__console_errorMng.console_public = NULL;
 801b5a8:	4b08      	ldr	r3, [pc, #32]	; (801b5cc <itsdk_error_setup+0x58>)
 801b5aa:	2200      	movs	r2, #0
 801b5ac:	605a      	str	r2, [r3, #4]
	__console_errorMng.next = NULL;
 801b5ae:	4b07      	ldr	r3, [pc, #28]	; (801b5cc <itsdk_error_setup+0x58>)
 801b5b0:	2200      	movs	r2, #0
 801b5b2:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_errorMng);
 801b5b4:	4b05      	ldr	r3, [pc, #20]	; (801b5cc <itsdk_error_setup+0x58>)
 801b5b6:	0018      	movs	r0, r3
 801b5b8:	f7fd f96a 	bl	8018890 <itsdk_console_registerCommand>
#endif

	return ITSDK_ERROR_SUCCESS;
 801b5bc:	2300      	movs	r3, #0
}
 801b5be:	0018      	movs	r0, r3
 801b5c0:	46bd      	mov	sp, r7
 801b5c2:	b002      	add	sp, #8
 801b5c4:	bd80      	pop	{r7, pc}
 801b5c6:	46c0      	nop			; (mov r8, r8)
 801b5c8:	ffffae73 	.word	0xffffae73
 801b5cc:	20001088 	.word	0x20001088
 801b5d0:	0801b839 	.word	0x0801b839

0801b5d4 <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 801b5d4:	b590      	push	{r4, r7, lr}
 801b5d6:	b08b      	sub	sp, #44	; 0x2c
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
 801b5dc:	000a      	movs	r2, r1
 801b5de:	1cbb      	adds	r3, r7, #2
 801b5e0:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 801b5e2:	687a      	ldr	r2, [r7, #4]
 801b5e4:	2380      	movs	r3, #128	; 0x80
 801b5e6:	055b      	lsls	r3, r3, #21
 801b5e8:	4013      	ands	r3, r2
 801b5ea:	d008      	beq.n	801b5fe <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 801b5ec:	1cbb      	adds	r3, r7, #2
 801b5ee:	881b      	ldrh	r3, [r3, #0]
 801b5f0:	031b      	lsls	r3, r3, #12
 801b5f2:	001a      	movs	r2, r3
 801b5f4:	4b4b      	ldr	r3, [pc, #300]	; (801b724 <itsdk_error_report+0x150>)
 801b5f6:	4013      	ands	r3, r2
 801b5f8:	687a      	ldr	r2, [r7, #4]
 801b5fa:	4313      	orrs	r3, r2
 801b5fc:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 801b5fe:	f001 fa63 	bl	801cac8 <itsdk_time_get_ms>
 801b602:	22fa      	movs	r2, #250	; 0xfa
 801b604:	0092      	lsls	r2, r2, #2
 801b606:	2300      	movs	r3, #0
 801b608:	f7e4 ff5e 	bl	80004c8 <__aeabi_uldivmod>
 801b60c:	0003      	movs	r3, r0
 801b60e:	000c      	movs	r4, r1
 801b610:	61bb      	str	r3, [r7, #24]
 801b612:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 801b614:	2110      	movs	r1, #16
 801b616:	187b      	adds	r3, r7, r1
 801b618:	687a      	ldr	r2, [r7, #4]
 801b61a:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 801b61c:	69ba      	ldr	r2, [r7, #24]
 801b61e:	187b      	adds	r3, r7, r1
 801b620:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801b622:	2308      	movs	r3, #8
 801b624:	18fb      	adds	r3, r7, r3
 801b626:	0018      	movs	r0, r3
 801b628:	f7ff ff30 	bl	801b48c <_itsdk_error_readHeader>
 801b62c:	0003      	movs	r3, r0
 801b62e:	2b01      	cmp	r3, #1
 801b630:	d101      	bne.n	801b636 <itsdk_error_report+0x62>
 801b632:	2301      	movs	r3, #1
 801b634:	e072      	b.n	801b71c <itsdk_error_report+0x148>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 801b636:	2408      	movs	r4, #8
 801b638:	193b      	adds	r3, r7, r4
 801b63a:	889b      	ldrh	r3, [r3, #4]
 801b63c:	2210      	movs	r2, #16
 801b63e:	18ba      	adds	r2, r7, r2
 801b640:	0011      	movs	r1, r2
 801b642:	0018      	movs	r0, r3
 801b644:	f7ff ff58 	bl	801b4f8 <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 801b648:	193b      	adds	r3, r7, r4
 801b64a:	889b      	ldrh	r3, [r3, #4]
 801b64c:	3301      	adds	r3, #1
 801b64e:	4a36      	ldr	r2, [pc, #216]	; (801b728 <itsdk_error_report+0x154>)
 801b650:	4013      	ands	r3, r2
 801b652:	d504      	bpl.n	801b65e <itsdk_error_report+0x8a>
 801b654:	3b01      	subs	r3, #1
 801b656:	2240      	movs	r2, #64	; 0x40
 801b658:	4252      	negs	r2, r2
 801b65a:	4313      	orrs	r3, r2
 801b65c:	3301      	adds	r3, #1
 801b65e:	b29a      	uxth	r2, r3
 801b660:	2108      	movs	r1, #8
 801b662:	187b      	adds	r3, r7, r1
 801b664:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 801b666:	187b      	adds	r3, r7, r1
 801b668:	889a      	ldrh	r2, [r3, #4]
 801b66a:	187b      	adds	r3, r7, r1
 801b66c:	885b      	ldrh	r3, [r3, #2]
 801b66e:	429a      	cmp	r2, r3
 801b670:	d10f      	bne.n	801b692 <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 801b672:	2308      	movs	r3, #8
 801b674:	18fb      	adds	r3, r7, r3
 801b676:	885b      	ldrh	r3, [r3, #2]
 801b678:	3301      	adds	r3, #1
 801b67a:	4a2b      	ldr	r2, [pc, #172]	; (801b728 <itsdk_error_report+0x154>)
 801b67c:	4013      	ands	r3, r2
 801b67e:	d504      	bpl.n	801b68a <itsdk_error_report+0xb6>
 801b680:	3b01      	subs	r3, #1
 801b682:	2240      	movs	r2, #64	; 0x40
 801b684:	4252      	negs	r2, r2
 801b686:	4313      	orrs	r3, r2
 801b688:	3301      	adds	r3, #1
 801b68a:	b29a      	uxth	r2, r3
 801b68c:	2308      	movs	r3, #8
 801b68e:	18fb      	adds	r3, r7, r3
 801b690:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 801b692:	2308      	movs	r3, #8
 801b694:	18fb      	adds	r3, r7, r3
 801b696:	0018      	movs	r0, r3
 801b698:	f7ff ff18 	bl	801b4cc <_itsdk_error_writeHeader>

	char t = 'S';
 801b69c:	2327      	movs	r3, #39	; 0x27
 801b69e:	18fb      	adds	r3, r7, r3
 801b6a0:	2253      	movs	r2, #83	; 0x53
 801b6a2:	701a      	strb	r2, [r3, #0]
	if ((error & ITSDK_ERROR_TYPE_MASK) == ITSDK_ERROR_TYPE_APP) {
 801b6a4:	687a      	ldr	r2, [r7, #4]
 801b6a6:	2380      	movs	r3, #128	; 0x80
 801b6a8:	059b      	lsls	r3, r3, #22
 801b6aa:	4013      	ands	r3, r2
 801b6ac:	d003      	beq.n	801b6b6 <itsdk_error_report+0xe2>
		t = 'A';
 801b6ae:	2327      	movs	r3, #39	; 0x27
 801b6b0:	18fb      	adds	r3, r7, r3
 801b6b2:	2241      	movs	r2, #65	; 0x41
 801b6b4:	701a      	strb	r2, [r3, #0]
	}

	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	0f9b      	lsrs	r3, r3, #30
 801b6ba:	079a      	lsls	r2, r3, #30
 801b6bc:	23c0      	movs	r3, #192	; 0xc0
 801b6be:	061b      	lsls	r3, r3, #24
 801b6c0:	429a      	cmp	r2, r3
 801b6c2:	d108      	bne.n	801b6d6 <itsdk_error_report+0x102>
		log_error("[CRITICAL ERROR] %c 0x%08X\r\n",t,error);
 801b6c4:	2327      	movs	r3, #39	; 0x27
 801b6c6:	18fb      	adds	r3, r7, r3
 801b6c8:	7819      	ldrb	r1, [r3, #0]
 801b6ca:	687a      	ldr	r2, [r7, #4]
 801b6cc:	4b17      	ldr	r3, [pc, #92]	; (801b72c <itsdk_error_report+0x158>)
 801b6ce:	0018      	movs	r0, r3
 801b6d0:	f000 fa0c 	bl	801baec <log_error>
		while(1);
 801b6d4:	e7fe      	b.n	801b6d4 <itsdk_error_report+0x100>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	da08      	bge.n	801b6ee <itsdk_error_report+0x11a>
		log_error("[ERROR] %c 0x%08X\r\n",t,error);
 801b6dc:	2327      	movs	r3, #39	; 0x27
 801b6de:	18fb      	adds	r3, r7, r3
 801b6e0:	7819      	ldrb	r1, [r3, #0]
 801b6e2:	687a      	ldr	r2, [r7, #4]
 801b6e4:	4b12      	ldr	r3, [pc, #72]	; (801b730 <itsdk_error_report+0x15c>)
 801b6e6:	0018      	movs	r0, r3
 801b6e8:	f000 fa00 	bl	801baec <log_error>
 801b6ec:	e015      	b.n	801b71a <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 801b6ee:	687a      	ldr	r2, [r7, #4]
 801b6f0:	2380      	movs	r3, #128	; 0x80
 801b6f2:	05db      	lsls	r3, r3, #23
 801b6f4:	4013      	ands	r3, r2
 801b6f6:	d008      	beq.n	801b70a <itsdk_error_report+0x136>
		log_warn("[WARN] %c 0x%08X\r\n",t,error);
 801b6f8:	2327      	movs	r3, #39	; 0x27
 801b6fa:	18fb      	adds	r3, r7, r3
 801b6fc:	7819      	ldrb	r1, [r3, #0]
 801b6fe:	687a      	ldr	r2, [r7, #4]
 801b700:	4b0c      	ldr	r3, [pc, #48]	; (801b734 <itsdk_error_report+0x160>)
 801b702:	0018      	movs	r0, r3
 801b704:	f000 fa38 	bl	801bb78 <log_warn>
 801b708:	e007      	b.n	801b71a <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] %c 0x%08X\r\n",t,error);
 801b70a:	2327      	movs	r3, #39	; 0x27
 801b70c:	18fb      	adds	r3, r7, r3
 801b70e:	7819      	ldrb	r1, [r3, #0]
 801b710:	687a      	ldr	r2, [r7, #4]
 801b712:	4b09      	ldr	r3, [pc, #36]	; (801b738 <itsdk_error_report+0x164>)
 801b714:	0018      	movs	r0, r3
 801b716:	f000 fa75 	bl	801bc04 <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 801b71a:	2300      	movs	r3, #0
}
 801b71c:	0018      	movs	r0, r3
 801b71e:	46bd      	mov	sp, r7
 801b720:	b00b      	add	sp, #44	; 0x2c
 801b722:	bd90      	pop	{r4, r7, pc}
 801b724:	0ffff000 	.word	0x0ffff000
 801b728:	8000003f 	.word	0x8000003f
 801b72c:	08020108 	.word	0x08020108
 801b730:	08020128 	.word	0x08020128
 801b734:	0802013c 	.word	0x0802013c
 801b738:	08020150 	.word	0x08020150

0801b73c <itsdk_error_get>:
 * When blockId is ITSDK_ERROR_FIRSTBLOCK the first available block is returned
 * Returns the next blockId to be read. ITSDK_ERROR_LASTBLOCK when no more to read
 * The blockId is updated with next block Id value.
 *
 */
itsdk_error_ret_e itsdk_error_get(uint16_t * blockId,itsdk_error_entry_t * e) {
 801b73c:	b580      	push	{r7, lr}
 801b73e:	b084      	sub	sp, #16
 801b740:	af00      	add	r7, sp, #0
 801b742:	6078      	str	r0, [r7, #4]
 801b744:	6039      	str	r1, [r7, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_SUCCESS ) {
 801b746:	2308      	movs	r3, #8
 801b748:	18fb      	adds	r3, r7, r3
 801b74a:	0018      	movs	r0, r3
 801b74c:	f7ff fe9e 	bl	801b48c <_itsdk_error_readHeader>
 801b750:	1e03      	subs	r3, r0, #0
 801b752:	d138      	bne.n	801b7c6 <itsdk_error_get+0x8a>
		// Manage blockId request
		if ( *blockId == ITSDK_ERROR_FIRSTBLOCK ) {
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	881b      	ldrh	r3, [r3, #0]
 801b758:	4a22      	ldr	r2, [pc, #136]	; (801b7e4 <itsdk_error_get+0xa8>)
 801b75a:	4293      	cmp	r3, r2
 801b75c:	d104      	bne.n	801b768 <itsdk_error_get+0x2c>
			*blockId = h.readPt;
 801b75e:	2308      	movs	r3, #8
 801b760:	18fb      	adds	r3, r7, r3
 801b762:	885a      	ldrh	r2, [r3, #2]
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	801a      	strh	r2, [r3, #0]
		}
		if ( *blockId != h.writePt ) {
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	881a      	ldrh	r2, [r3, #0]
 801b76c:	2308      	movs	r3, #8
 801b76e:	18fb      	adds	r3, r7, r3
 801b770:	889b      	ldrh	r3, [r3, #4]
 801b772:	429a      	cmp	r2, r3
 801b774:	d027      	beq.n	801b7c6 <itsdk_error_get+0x8a>
			if ( *blockId < ITSDK_ERROR_BLOCKS ) {
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	881b      	ldrh	r3, [r3, #0]
 801b77a:	2b3f      	cmp	r3, #63	; 0x3f
 801b77c:	d823      	bhi.n	801b7c6 <itsdk_error_get+0x8a>
				// Read the block
				if ( _itsdk_error_read(*blockId,e) == ITSDK_ERROR_SUCCESS ) {
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	881b      	ldrh	r3, [r3, #0]
 801b782:	683a      	ldr	r2, [r7, #0]
 801b784:	0011      	movs	r1, r2
 801b786:	0018      	movs	r0, r3
 801b788:	f7ff fed5 	bl	801b536 <_itsdk_error_read>
 801b78c:	1e03      	subs	r3, r0, #0
 801b78e:	d11a      	bne.n	801b7c6 <itsdk_error_get+0x8a>
					*blockId = (*blockId + 1) % ITSDK_ERROR_BLOCKS;
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	881b      	ldrh	r3, [r3, #0]
 801b794:	3301      	adds	r3, #1
 801b796:	4a14      	ldr	r2, [pc, #80]	; (801b7e8 <itsdk_error_get+0xac>)
 801b798:	4013      	ands	r3, r2
 801b79a:	d504      	bpl.n	801b7a6 <itsdk_error_get+0x6a>
 801b79c:	3b01      	subs	r3, #1
 801b79e:	2240      	movs	r2, #64	; 0x40
 801b7a0:	4252      	negs	r2, r2
 801b7a2:	4313      	orrs	r3, r2
 801b7a4:	3301      	adds	r3, #1
 801b7a6:	b29a      	uxth	r2, r3
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	801a      	strh	r2, [r3, #0]
					if ( *blockId == h.writePt ) *blockId = ITSDK_ERROR_LASTBLOCK;
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	881a      	ldrh	r2, [r3, #0]
 801b7b0:	2308      	movs	r3, #8
 801b7b2:	18fb      	adds	r3, r7, r3
 801b7b4:	889b      	ldrh	r3, [r3, #4]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d103      	bne.n	801b7c2 <itsdk_error_get+0x86>
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	2201      	movs	r2, #1
 801b7be:	4252      	negs	r2, r2
 801b7c0:	801a      	strh	r2, [r3, #0]
					return ITSDK_ERROR_SUCCESS;
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	e00a      	b.n	801b7dc <itsdk_error_get+0xa0>
				}
			}
		}
	}
	e->error = 0;
 801b7c6:	683b      	ldr	r3, [r7, #0]
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	605a      	str	r2, [r3, #4]
	e->timeS = 0;
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	601a      	str	r2, [r3, #0]
	*blockId = ITSDK_ERROR_LASTBLOCK;
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	2201      	movs	r2, #1
 801b7d6:	4252      	negs	r2, r2
 801b7d8:	801a      	strh	r2, [r3, #0]
	return ITSDK_ERROR_FAILED;
 801b7da:	2301      	movs	r3, #1
}
 801b7dc:	0018      	movs	r0, r3
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	b004      	add	sp, #16
 801b7e2:	bd80      	pop	{r7, pc}
 801b7e4:	0000fffe 	.word	0x0000fffe
 801b7e8:	8000003f 	.word	0x8000003f

0801b7ec <itsdk_error_clear>:


/**
 * clear the error log history
 */
itsdk_error_ret_e itsdk_error_clear() {
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b082      	sub	sp, #8
 801b7f0:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 801b7f2:	003b      	movs	r3, r7
 801b7f4:	0018      	movs	r0, r3
 801b7f6:	f7ff fe49 	bl	801b48c <_itsdk_error_readHeader>
 801b7fa:	0003      	movs	r3, r0
 801b7fc:	2b01      	cmp	r3, #1
 801b7fe:	d101      	bne.n	801b804 <itsdk_error_clear+0x18>
 801b800:	2301      	movs	r3, #1
 801b802:	e008      	b.n	801b816 <itsdk_error_clear+0x2a>
	h.readPt = h.writePt;
 801b804:	003b      	movs	r3, r7
 801b806:	889a      	ldrh	r2, [r3, #4]
 801b808:	003b      	movs	r3, r7
 801b80a:	805a      	strh	r2, [r3, #2]
	_itsdk_error_writeHeader(&h);
 801b80c:	003b      	movs	r3, r7
 801b80e:	0018      	movs	r0, r3
 801b810:	f7ff fe5c 	bl	801b4cc <_itsdk_error_writeHeader>
	return ITSDK_ERROR_SUCCESS;
 801b814:	2300      	movs	r3, #0
}
 801b816:	0018      	movs	r0, r3
 801b818:	46bd      	mov	sp, r7
 801b81a:	b002      	add	sp, #8
 801b81c:	bd80      	pop	{r7, pc}

0801b81e <itsdk_error_getSize>:

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 801b81e:	b580      	push	{r7, lr}
 801b820:	b082      	sub	sp, #8
 801b822:	af00      	add	r7, sp, #0
 801b824:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	2282      	movs	r2, #130	; 0x82
 801b82a:	0092      	lsls	r2, r2, #2
 801b82c:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 801b82e:	2300      	movs	r3, #0
}
 801b830:	0018      	movs	r0, r3
 801b832:	46bd      	mov	sp, r7
 801b834:	b002      	add	sp, #8
 801b836:	bd80      	pop	{r7, pc}

0801b838 <_itsdk_error_consolePriv>:
// =================================================================================
// Console options
// =================================================================================

#if ITSDK_WITH_CONSOLE == __ENABLE
static itsdk_console_return_e _itsdk_error_consolePriv(char * buffer, uint8_t sz) {
 801b838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b83a:	b08b      	sub	sp, #44	; 0x2c
 801b83c:	af04      	add	r7, sp, #16
 801b83e:	6078      	str	r0, [r7, #4]
 801b840:	000a      	movs	r2, r1
 801b842:	1cfb      	adds	r3, r7, #3
 801b844:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 801b846:	1cfb      	adds	r3, r7, #3
 801b848:	781b      	ldrb	r3, [r3, #0]
 801b84a:	2b01      	cmp	r3, #1
 801b84c:	d000      	beq.n	801b850 <_itsdk_error_consolePriv+0x18>
 801b84e:	e087      	b.n	801b960 <_itsdk_error_consolePriv+0x128>
	  switch(buffer[0]){
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	781b      	ldrb	r3, [r3, #0]
 801b854:	2b45      	cmp	r3, #69	; 0x45
 801b856:	d100      	bne.n	801b85a <_itsdk_error_consolePriv+0x22>
 801b858:	e07a      	b.n	801b950 <_itsdk_error_consolePriv+0x118>
 801b85a:	2b65      	cmp	r3, #101	; 0x65
 801b85c:	d010      	beq.n	801b880 <_itsdk_error_consolePriv+0x48>
 801b85e:	2b3f      	cmp	r3, #63	; 0x3f
 801b860:	d000      	beq.n	801b864 <_itsdk_error_consolePriv+0x2c>
			itsdk_error_clear();
			_itsdk_console_printf("OK\r\n");
  		    return ITSDK_CONSOLE_SUCCES;
			break;
		default:
			break;
 801b862:	e07e      	b.n	801b962 <_itsdk_error_consolePriv+0x12a>
			_itsdk_console_printf("--- ErrorMng\r\n");
 801b864:	4b41      	ldr	r3, [pc, #260]	; (801b96c <_itsdk_error_consolePriv+0x134>)
 801b866:	0018      	movs	r0, r3
 801b868:	f7fc fe52 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("e          : print errors log\r\n");
 801b86c:	4b40      	ldr	r3, [pc, #256]	; (801b970 <_itsdk_error_consolePriv+0x138>)
 801b86e:	0018      	movs	r0, r3
 801b870:	f7fc fe4e 	bl	8018510 <_itsdk_console_printf>
			_itsdk_console_printf("E          : Clear the error logs\r\n");
 801b874:	4b3f      	ldr	r3, [pc, #252]	; (801b974 <_itsdk_error_consolePriv+0x13c>)
 801b876:	0018      	movs	r0, r3
 801b878:	f7fc fe4a 	bl	8018510 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 801b87c:	2300      	movs	r3, #0
 801b87e:	e071      	b.n	801b964 <_itsdk_error_consolePriv+0x12c>
				uint16_t blockId = ITSDK_ERROR_FIRSTBLOCK;
 801b880:	2314      	movs	r3, #20
 801b882:	18fb      	adds	r3, r7, r3
 801b884:	2202      	movs	r2, #2
 801b886:	4252      	negs	r2, r2
 801b888:	801a      	strh	r2, [r3, #0]
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 801b88a:	e051      	b.n	801b930 <_itsdk_error_consolePriv+0xf8>
					switch (e.error & ITSDK_ERROR_LEVEL_MASK) {
 801b88c:	230c      	movs	r3, #12
 801b88e:	18fb      	adds	r3, r7, r3
 801b890:	685b      	ldr	r3, [r3, #4]
 801b892:	0f9b      	lsrs	r3, r3, #30
 801b894:	079b      	lsls	r3, r3, #30
 801b896:	2280      	movs	r2, #128	; 0x80
 801b898:	0612      	lsls	r2, r2, #24
 801b89a:	4293      	cmp	r3, r2
 801b89c:	d011      	beq.n	801b8c2 <_itsdk_error_consolePriv+0x8a>
 801b89e:	22c0      	movs	r2, #192	; 0xc0
 801b8a0:	0612      	lsls	r2, r2, #24
 801b8a2:	4293      	cmp	r3, r2
 801b8a4:	d012      	beq.n	801b8cc <_itsdk_error_consolePriv+0x94>
 801b8a6:	2280      	movs	r2, #128	; 0x80
 801b8a8:	05d2      	lsls	r2, r2, #23
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	d004      	beq.n	801b8b8 <_itsdk_error_consolePriv+0x80>
					case ITSDK_ERROR_LEVEL_INFO:  l = 'I'; break;
 801b8ae:	2317      	movs	r3, #23
 801b8b0:	18fb      	adds	r3, r7, r3
 801b8b2:	2249      	movs	r2, #73	; 0x49
 801b8b4:	701a      	strb	r2, [r3, #0]
 801b8b6:	e00e      	b.n	801b8d6 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_WARN:  l = 'W'; break;
 801b8b8:	2317      	movs	r3, #23
 801b8ba:	18fb      	adds	r3, r7, r3
 801b8bc:	2257      	movs	r2, #87	; 0x57
 801b8be:	701a      	strb	r2, [r3, #0]
 801b8c0:	e009      	b.n	801b8d6 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_ERROR: l = 'E'; break;
 801b8c2:	2317      	movs	r3, #23
 801b8c4:	18fb      	adds	r3, r7, r3
 801b8c6:	2245      	movs	r2, #69	; 0x45
 801b8c8:	701a      	strb	r2, [r3, #0]
 801b8ca:	e004      	b.n	801b8d6 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_FATAL: l = 'F'; break;
 801b8cc:	2317      	movs	r3, #23
 801b8ce:	18fb      	adds	r3, r7, r3
 801b8d0:	2246      	movs	r2, #70	; 0x46
 801b8d2:	701a      	strb	r2, [r3, #0]
 801b8d4:	46c0      	nop			; (mov r8, r8)
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b8d6:	2317      	movs	r3, #23
 801b8d8:	18fb      	adds	r3, r7, r3
 801b8da:	781c      	ldrb	r4, [r3, #0]
 801b8dc:	220c      	movs	r2, #12
 801b8de:	18bb      	adds	r3, r7, r2
 801b8e0:	681d      	ldr	r5, [r3, #0]
 801b8e2:	18bb      	adds	r3, r7, r2
 801b8e4:	685e      	ldr	r6, [r3, #4]
						(((e.error & ITSDK_ERROR_TYPE_APP) > 0) ? 'A' : 'S'),
 801b8e6:	18bb      	adds	r3, r7, r2
 801b8e8:	685a      	ldr	r2, [r3, #4]
 801b8ea:	2380      	movs	r3, #128	; 0x80
 801b8ec:	059b      	lsls	r3, r3, #22
 801b8ee:	4013      	ands	r3, r2
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b8f0:	d001      	beq.n	801b8f6 <_itsdk_error_consolePriv+0xbe>
 801b8f2:	2241      	movs	r2, #65	; 0x41
 801b8f4:	e000      	b.n	801b8f8 <_itsdk_error_consolePriv+0xc0>
 801b8f6:	2253      	movs	r2, #83	; 0x53
						(e.error & ITSDK_ERROR_ERROR_MASK) >> ITSDK_ERROR_ERROR_SHIFT,
 801b8f8:	200c      	movs	r0, #12
 801b8fa:	183b      	adds	r3, r7, r0
 801b8fc:	685b      	ldr	r3, [r3, #4]
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b8fe:	051b      	lsls	r3, r3, #20
 801b900:	0d19      	lsrs	r1, r3, #20
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 801b902:	183b      	adds	r3, r7, r0
 801b904:	6858      	ldr	r0, [r3, #4]
 801b906:	2380      	movs	r3, #128	; 0x80
 801b908:	055b      	lsls	r3, r3, #21
 801b90a:	4003      	ands	r3, r0
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b90c:	d006      	beq.n	801b91c <_itsdk_error_consolePriv+0xe4>
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 801b90e:	230c      	movs	r3, #12
 801b910:	18fb      	adds	r3, r7, r3
 801b912:	685b      	ldr	r3, [r3, #4]
 801b914:	0b1b      	lsrs	r3, r3, #12
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 801b916:	041b      	lsls	r3, r3, #16
 801b918:	0c1b      	lsrs	r3, r3, #16
 801b91a:	e000      	b.n	801b91e <_itsdk_error_consolePriv+0xe6>
 801b91c:	2300      	movs	r3, #0
 801b91e:	4816      	ldr	r0, [pc, #88]	; (801b978 <_itsdk_error_consolePriv+0x140>)
 801b920:	9302      	str	r3, [sp, #8]
 801b922:	9101      	str	r1, [sp, #4]
 801b924:	9200      	str	r2, [sp, #0]
 801b926:	0033      	movs	r3, r6
 801b928:	002a      	movs	r2, r5
 801b92a:	0021      	movs	r1, r4
 801b92c:	f7fc fdf0 	bl	8018510 <_itsdk_console_printf>
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 801b930:	230c      	movs	r3, #12
 801b932:	18fa      	adds	r2, r7, r3
 801b934:	2314      	movs	r3, #20
 801b936:	18fb      	adds	r3, r7, r3
 801b938:	0011      	movs	r1, r2
 801b93a:	0018      	movs	r0, r3
 801b93c:	f7ff fefe 	bl	801b73c <itsdk_error_get>
 801b940:	1e03      	subs	r3, r0, #0
 801b942:	d0a3      	beq.n	801b88c <_itsdk_error_consolePriv+0x54>
				_itsdk_console_printf("OK\r\n");
 801b944:	4b0d      	ldr	r3, [pc, #52]	; (801b97c <_itsdk_error_consolePriv+0x144>)
 801b946:	0018      	movs	r0, r3
 801b948:	f7fc fde2 	bl	8018510 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 801b94c:	2300      	movs	r3, #0
 801b94e:	e009      	b.n	801b964 <_itsdk_error_consolePriv+0x12c>
			itsdk_error_clear();
 801b950:	f7ff ff4c 	bl	801b7ec <itsdk_error_clear>
			_itsdk_console_printf("OK\r\n");
 801b954:	4b09      	ldr	r3, [pc, #36]	; (801b97c <_itsdk_error_consolePriv+0x144>)
 801b956:	0018      	movs	r0, r3
 801b958:	f7fc fdda 	bl	8018510 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 801b95c:	2300      	movs	r3, #0
 801b95e:	e001      	b.n	801b964 <_itsdk_error_consolePriv+0x12c>
	  }
	} //Sz == 1
 801b960:	46c0      	nop			; (mov r8, r8)
  return ITSDK_CONSOLE_NOTFOUND;
 801b962:	2301      	movs	r3, #1
}
 801b964:	0018      	movs	r0, r3
 801b966:	46bd      	mov	sp, r7
 801b968:	b007      	add	sp, #28
 801b96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b96c:	08020164 	.word	0x08020164
 801b970:	08020174 	.word	0x08020174
 801b974:	08020194 	.word	0x08020194
 801b978:	080201b8 	.word	0x080201b8
 801b97c:	080201e4 	.word	0x080201e4

0801b980 <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 801b980:	b580      	push	{r7, lr}
 801b982:	b082      	sub	sp, #8
 801b984:	af00      	add	r7, sp, #0
 801b986:	0002      	movs	r2, r0
 801b988:	1dbb      	adds	r3, r7, #6
 801b98a:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 801b98c:	1dbb      	adds	r3, r7, #6
 801b98e:	881b      	ldrh	r3, [r3, #0]
 801b990:	4a51      	ldr	r2, [pc, #324]	; (801bad8 <log_init+0x158>)
 801b992:	4013      	ands	r3, r2
 801b994:	17da      	asrs	r2, r3, #31
 801b996:	1ad3      	subs	r3, r2, r3
 801b998:	0fdb      	lsrs	r3, r3, #31
 801b99a:	b2da      	uxtb	r2, r3
 801b99c:	4b4f      	ldr	r3, [pc, #316]	; (801badc <log_init+0x15c>)
 801b99e:	2101      	movs	r1, #1
 801b9a0:	400a      	ands	r2, r1
 801b9a2:	1890      	adds	r0, r2, r2
 801b9a4:	781a      	ldrb	r2, [r3, #0]
 801b9a6:	2102      	movs	r1, #2
 801b9a8:	438a      	bics	r2, r1
 801b9aa:	1c11      	adds	r1, r2, #0
 801b9ac:	1c02      	adds	r2, r0, #0
 801b9ae:	430a      	orrs	r2, r1
 801b9b0:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 801b9b2:	1dbb      	adds	r3, r7, #6
 801b9b4:	881b      	ldrh	r3, [r3, #0]
 801b9b6:	4a4a      	ldr	r2, [pc, #296]	; (801bae0 <log_init+0x160>)
 801b9b8:	4013      	ands	r3, r2
 801b9ba:	17da      	asrs	r2, r3, #31
 801b9bc:	1ad3      	subs	r3, r2, r3
 801b9be:	0fdb      	lsrs	r3, r3, #31
 801b9c0:	b2da      	uxtb	r2, r3
 801b9c2:	4b46      	ldr	r3, [pc, #280]	; (801badc <log_init+0x15c>)
 801b9c4:	2101      	movs	r1, #1
 801b9c6:	400a      	ands	r2, r1
 801b9c8:	0090      	lsls	r0, r2, #2
 801b9ca:	781a      	ldrb	r2, [r3, #0]
 801b9cc:	2104      	movs	r1, #4
 801b9ce:	438a      	bics	r2, r1
 801b9d0:	1c11      	adds	r1, r2, #0
 801b9d2:	1c02      	adds	r2, r0, #0
 801b9d4:	430a      	orrs	r2, r1
 801b9d6:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 801b9d8:	1dbb      	adds	r3, r7, #6
 801b9da:	881b      	ldrh	r3, [r3, #0]
 801b9dc:	4a41      	ldr	r2, [pc, #260]	; (801bae4 <log_init+0x164>)
 801b9de:	4013      	ands	r3, r2
 801b9e0:	17da      	asrs	r2, r3, #31
 801b9e2:	1ad3      	subs	r3, r2, r3
 801b9e4:	0fdb      	lsrs	r3, r3, #31
 801b9e6:	b2da      	uxtb	r2, r3
 801b9e8:	4b3c      	ldr	r3, [pc, #240]	; (801badc <log_init+0x15c>)
 801b9ea:	2101      	movs	r1, #1
 801b9ec:	400a      	ands	r2, r1
 801b9ee:	00d0      	lsls	r0, r2, #3
 801b9f0:	781a      	ldrb	r2, [r3, #0]
 801b9f2:	2108      	movs	r1, #8
 801b9f4:	438a      	bics	r2, r1
 801b9f6:	1c11      	adds	r1, r2, #0
 801b9f8:	1c02      	adds	r2, r0, #0
 801b9fa:	430a      	orrs	r2, r1
 801b9fc:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 801b9fe:	1dbb      	adds	r3, r7, #6
 801ba00:	881b      	ldrh	r3, [r3, #0]
 801ba02:	4a39      	ldr	r2, [pc, #228]	; (801bae8 <log_init+0x168>)
 801ba04:	4013      	ands	r3, r2
 801ba06:	17da      	asrs	r2, r3, #31
 801ba08:	1ad3      	subs	r3, r2, r3
 801ba0a:	0fdb      	lsrs	r3, r3, #31
 801ba0c:	b2da      	uxtb	r2, r3
 801ba0e:	4b33      	ldr	r3, [pc, #204]	; (801badc <log_init+0x15c>)
 801ba10:	2101      	movs	r1, #1
 801ba12:	400a      	ands	r2, r1
 801ba14:	0110      	lsls	r0, r2, #4
 801ba16:	781a      	ldrb	r2, [r3, #0]
 801ba18:	2110      	movs	r1, #16
 801ba1a:	438a      	bics	r2, r1
 801ba1c:	1c11      	adds	r1, r2, #0
 801ba1e:	1c02      	adds	r2, r0, #0
 801ba20:	430a      	orrs	r2, r1
 801ba22:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 801ba24:	1dbb      	adds	r3, r7, #6
 801ba26:	881a      	ldrh	r2, [r3, #0]
 801ba28:	23f0      	movs	r3, #240	; 0xf0
 801ba2a:	011b      	lsls	r3, r3, #4
 801ba2c:	4013      	ands	r3, r2
 801ba2e:	17da      	asrs	r2, r3, #31
 801ba30:	1ad3      	subs	r3, r2, r3
 801ba32:	0fdb      	lsrs	r3, r3, #31
 801ba34:	b2da      	uxtb	r2, r3
 801ba36:	4b29      	ldr	r3, [pc, #164]	; (801badc <log_init+0x15c>)
 801ba38:	2101      	movs	r1, #1
 801ba3a:	400a      	ands	r2, r1
 801ba3c:	0150      	lsls	r0, r2, #5
 801ba3e:	781a      	ldrb	r2, [r3, #0]
 801ba40:	2120      	movs	r1, #32
 801ba42:	438a      	bics	r2, r1
 801ba44:	1c11      	adds	r1, r2, #0
 801ba46:	1c02      	adds	r2, r0, #0
 801ba48:	430a      	orrs	r2, r1
 801ba4a:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 801ba4c:	1dbb      	adds	r3, r7, #6
 801ba4e:	881b      	ldrh	r3, [r3, #0]
 801ba50:	22f0      	movs	r2, #240	; 0xf0
 801ba52:	4013      	ands	r3, r2
 801ba54:	17da      	asrs	r2, r3, #31
 801ba56:	1ad3      	subs	r3, r2, r3
 801ba58:	0fdb      	lsrs	r3, r3, #31
 801ba5a:	b2da      	uxtb	r2, r3
 801ba5c:	4b1f      	ldr	r3, [pc, #124]	; (801badc <log_init+0x15c>)
 801ba5e:	2101      	movs	r1, #1
 801ba60:	400a      	ands	r2, r1
 801ba62:	0190      	lsls	r0, r2, #6
 801ba64:	781a      	ldrb	r2, [r3, #0]
 801ba66:	2140      	movs	r1, #64	; 0x40
 801ba68:	438a      	bics	r2, r1
 801ba6a:	1c11      	adds	r1, r2, #0
 801ba6c:	1c02      	adds	r2, r0, #0
 801ba6e:	430a      	orrs	r2, r1
 801ba70:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 801ba72:	1dbb      	adds	r3, r7, #6
 801ba74:	881b      	ldrh	r3, [r3, #0]
 801ba76:	220f      	movs	r2, #15
 801ba78:	4013      	ands	r3, r2
 801ba7a:	17da      	asrs	r2, r3, #31
 801ba7c:	1ad3      	subs	r3, r2, r3
 801ba7e:	0fdb      	lsrs	r3, r3, #31
 801ba80:	b2da      	uxtb	r2, r3
 801ba82:	4b16      	ldr	r3, [pc, #88]	; (801badc <log_init+0x15c>)
 801ba84:	01d0      	lsls	r0, r2, #7
 801ba86:	781a      	ldrb	r2, [r3, #0]
 801ba88:	217f      	movs	r1, #127	; 0x7f
 801ba8a:	400a      	ands	r2, r1
 801ba8c:	1c11      	adds	r1, r2, #0
 801ba8e:	1c02      	adds	r2, r0, #0
 801ba90:	430a      	orrs	r2, r1
 801ba92:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 801ba94:	1dbb      	adds	r3, r7, #6
 801ba96:	881a      	ldrh	r2, [r3, #0]
 801ba98:	23f0      	movs	r3, #240	; 0xf0
 801ba9a:	021b      	lsls	r3, r3, #8
 801ba9c:	4013      	ands	r3, r2
 801ba9e:	17da      	asrs	r2, r3, #31
 801baa0:	1ad3      	subs	r3, r2, r3
 801baa2:	0fdb      	lsrs	r3, r3, #31
 801baa4:	b2da      	uxtb	r2, r3
 801baa6:	4b0d      	ldr	r3, [pc, #52]	; (801badc <log_init+0x15c>)
 801baa8:	2101      	movs	r1, #1
 801baaa:	400a      	ands	r2, r1
 801baac:	0010      	movs	r0, r2
 801baae:	785a      	ldrb	r2, [r3, #1]
 801bab0:	2101      	movs	r1, #1
 801bab2:	438a      	bics	r2, r1
 801bab4:	1c11      	adds	r1, r2, #0
 801bab6:	1c02      	adds	r2, r0, #0
 801bab8:	430a      	orrs	r2, r1
 801baba:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 801babc:	4b07      	ldr	r3, [pc, #28]	; (801badc <log_init+0x15c>)
 801babe:	1dba      	adds	r2, r7, #6
 801bac0:	8812      	ldrh	r2, [r2, #0]
 801bac2:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 801bac4:	4b05      	ldr	r3, [pc, #20]	; (801badc <log_init+0x15c>)
 801bac6:	781a      	ldrb	r2, [r3, #0]
 801bac8:	2101      	movs	r1, #1
 801baca:	430a      	orrs	r2, r1
 801bacc:	701a      	strb	r2, [r3, #0]
  return true;
 801bace:	2301      	movs	r3, #1
}
 801bad0:	0018      	movs	r0, r3
 801bad2:	46bd      	mov	sp, r7
 801bad4:	b002      	add	sp, #8
 801bad6:	bd80      	pop	{r7, pc}
 801bad8:	00001111 	.word	0x00001111
 801badc:	20001570 	.word	0x20001570
 801bae0:	00002222 	.word	0x00002222
 801bae4:	00004444 	.word	0x00004444
 801bae8:	00008888 	.word	0x00008888

0801baec <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 801baec:	b40f      	push	{r0, r1, r2, r3}
 801baee:	b580      	push	{r7, lr}
 801baf0:	b096      	sub	sp, #88	; 0x58
 801baf2:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 801baf4:	4b1f      	ldr	r3, [pc, #124]	; (801bb74 <log_error+0x88>)
 801baf6:	781b      	ldrb	r3, [r3, #0]
 801baf8:	2202      	movs	r2, #2
 801bafa:	4013      	ands	r3, r2
 801bafc:	b2db      	uxtb	r3, r3
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d031      	beq.n	801bb66 <log_error+0x7a>
 801bb02:	4b1c      	ldr	r3, [pc, #112]	; (801bb74 <log_error+0x88>)
 801bb04:	781b      	ldrb	r3, [r3, #0]
 801bb06:	2201      	movs	r2, #1
 801bb08:	4013      	ands	r3, r2
 801bb0a:	b2db      	uxtb	r3, r3
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d02a      	beq.n	801bb66 <log_error+0x7a>
    va_start(args,format);
 801bb10:	2364      	movs	r3, #100	; 0x64
 801bb12:	18fb      	adds	r3, r7, r3
 801bb14:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801bb16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bb18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bb1a:	1d38      	adds	r0, r7, #4
 801bb1c:	2150      	movs	r1, #80	; 0x50
 801bb1e:	f002 ffd5 	bl	801eacc <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801bb22:	4b14      	ldr	r3, [pc, #80]	; (801bb74 <log_error+0x88>)
 801bb24:	781b      	ldrb	r3, [r3, #0]
 801bb26:	2220      	movs	r2, #32
 801bb28:	4013      	ands	r3, r2
 801bb2a:	b2db      	uxtb	r3, r3
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d003      	beq.n	801bb38 <log_error+0x4c>
      serial1_print(fmtBuffer);
 801bb30:	1d3b      	adds	r3, r7, #4
 801bb32:	0018      	movs	r0, r3
 801bb34:	f002 f932 	bl	801dd9c <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801bb38:	4b0e      	ldr	r3, [pc, #56]	; (801bb74 <log_error+0x88>)
 801bb3a:	781b      	ldrb	r3, [r3, #0]
 801bb3c:	2240      	movs	r2, #64	; 0x40
 801bb3e:	4013      	ands	r3, r2
 801bb40:	b2db      	uxtb	r3, r3
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d003      	beq.n	801bb4e <log_error+0x62>
      serial2_print(fmtBuffer);
 801bb46:	1d3b      	adds	r3, r7, #4
 801bb48:	0018      	movs	r0, r3
 801bb4a:	f002 f92f 	bl	801ddac <serial2_print>
    }

    if ( __log.onDebug  ) {
 801bb4e:	4b09      	ldr	r3, [pc, #36]	; (801bb74 <log_error+0x88>)
 801bb50:	781b      	ldrb	r3, [r3, #0]
 801bb52:	227f      	movs	r2, #127	; 0x7f
 801bb54:	4393      	bics	r3, r2
 801bb56:	b2db      	uxtb	r3, r3
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d004      	beq.n	801bb66 <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 801bb5c:	1d3b      	adds	r3, r7, #4
 801bb5e:	0019      	movs	r1, r3
 801bb60:	2003      	movs	r0, #3
 801bb62:	f002 f989 	bl	801de78 <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 801bb66:	46c0      	nop			; (mov r8, r8)
 801bb68:	46bd      	mov	sp, r7
 801bb6a:	b016      	add	sp, #88	; 0x58
 801bb6c:	bc80      	pop	{r7}
 801bb6e:	bc08      	pop	{r3}
 801bb70:	b004      	add	sp, #16
 801bb72:	4718      	bx	r3
 801bb74:	20001570 	.word	0x20001570

0801bb78 <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 801bb78:	b40f      	push	{r0, r1, r2, r3}
 801bb7a:	b580      	push	{r7, lr}
 801bb7c:	b096      	sub	sp, #88	; 0x58
 801bb7e:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 801bb80:	4b1f      	ldr	r3, [pc, #124]	; (801bc00 <log_warn+0x88>)
 801bb82:	781b      	ldrb	r3, [r3, #0]
 801bb84:	2204      	movs	r2, #4
 801bb86:	4013      	ands	r3, r2
 801bb88:	b2db      	uxtb	r3, r3
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d031      	beq.n	801bbf2 <log_warn+0x7a>
 801bb8e:	4b1c      	ldr	r3, [pc, #112]	; (801bc00 <log_warn+0x88>)
 801bb90:	781b      	ldrb	r3, [r3, #0]
 801bb92:	2201      	movs	r2, #1
 801bb94:	4013      	ands	r3, r2
 801bb96:	b2db      	uxtb	r3, r3
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d02a      	beq.n	801bbf2 <log_warn+0x7a>
    va_start(args,format);
 801bb9c:	2364      	movs	r3, #100	; 0x64
 801bb9e:	18fb      	adds	r3, r7, r3
 801bba0:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801bba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bba6:	1d38      	adds	r0, r7, #4
 801bba8:	2150      	movs	r1, #80	; 0x50
 801bbaa:	f002 ff8f 	bl	801eacc <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801bbae:	4b14      	ldr	r3, [pc, #80]	; (801bc00 <log_warn+0x88>)
 801bbb0:	781b      	ldrb	r3, [r3, #0]
 801bbb2:	2220      	movs	r2, #32
 801bbb4:	4013      	ands	r3, r2
 801bbb6:	b2db      	uxtb	r3, r3
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d003      	beq.n	801bbc4 <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 801bbbc:	1d3b      	adds	r3, r7, #4
 801bbbe:	0018      	movs	r0, r3
 801bbc0:	f002 f8ec 	bl	801dd9c <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801bbc4:	4b0e      	ldr	r3, [pc, #56]	; (801bc00 <log_warn+0x88>)
 801bbc6:	781b      	ldrb	r3, [r3, #0]
 801bbc8:	2240      	movs	r2, #64	; 0x40
 801bbca:	4013      	ands	r3, r2
 801bbcc:	b2db      	uxtb	r3, r3
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d003      	beq.n	801bbda <log_warn+0x62>
    	serial2_print(fmtBuffer);
 801bbd2:	1d3b      	adds	r3, r7, #4
 801bbd4:	0018      	movs	r0, r3
 801bbd6:	f002 f8e9 	bl	801ddac <serial2_print>
    }

    if ( __log.onDebug ) {
 801bbda:	4b09      	ldr	r3, [pc, #36]	; (801bc00 <log_warn+0x88>)
 801bbdc:	781b      	ldrb	r3, [r3, #0]
 801bbde:	227f      	movs	r2, #127	; 0x7f
 801bbe0:	4393      	bics	r3, r2
 801bbe2:	b2db      	uxtb	r3, r3
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d004      	beq.n	801bbf2 <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 801bbe8:	1d3b      	adds	r3, r7, #4
 801bbea:	0019      	movs	r1, r3
 801bbec:	2002      	movs	r0, #2
 801bbee:	f002 f943 	bl	801de78 <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 801bbf2:	46c0      	nop			; (mov r8, r8)
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	b016      	add	sp, #88	; 0x58
 801bbf8:	bc80      	pop	{r7}
 801bbfa:	bc08      	pop	{r3}
 801bbfc:	b004      	add	sp, #16
 801bbfe:	4718      	bx	r3
 801bc00:	20001570 	.word	0x20001570

0801bc04 <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 801bc04:	b40f      	push	{r0, r1, r2, r3}
 801bc06:	b580      	push	{r7, lr}
 801bc08:	b096      	sub	sp, #88	; 0x58
 801bc0a:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 801bc0c:	4b1f      	ldr	r3, [pc, #124]	; (801bc8c <log_info+0x88>)
 801bc0e:	781b      	ldrb	r3, [r3, #0]
 801bc10:	2208      	movs	r2, #8
 801bc12:	4013      	ands	r3, r2
 801bc14:	b2db      	uxtb	r3, r3
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d031      	beq.n	801bc7e <log_info+0x7a>
 801bc1a:	4b1c      	ldr	r3, [pc, #112]	; (801bc8c <log_info+0x88>)
 801bc1c:	781b      	ldrb	r3, [r3, #0]
 801bc1e:	2201      	movs	r2, #1
 801bc20:	4013      	ands	r3, r2
 801bc22:	b2db      	uxtb	r3, r3
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d02a      	beq.n	801bc7e <log_info+0x7a>
    va_start(args,format);
 801bc28:	2364      	movs	r3, #100	; 0x64
 801bc2a:	18fb      	adds	r3, r7, r3
 801bc2c:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801bc2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bc32:	1d38      	adds	r0, r7, #4
 801bc34:	2150      	movs	r1, #80	; 0x50
 801bc36:	f002 ff49 	bl	801eacc <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 801bc3a:	4b14      	ldr	r3, [pc, #80]	; (801bc8c <log_info+0x88>)
 801bc3c:	781b      	ldrb	r3, [r3, #0]
 801bc3e:	2220      	movs	r2, #32
 801bc40:	4013      	ands	r3, r2
 801bc42:	b2db      	uxtb	r3, r3
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d003      	beq.n	801bc50 <log_info+0x4c>
    	serial1_print(fmtBuffer);
 801bc48:	1d3b      	adds	r3, r7, #4
 801bc4a:	0018      	movs	r0, r3
 801bc4c:	f002 f8a6 	bl	801dd9c <serial1_print>
    }

    if ( __log.onSerial2 ) {
 801bc50:	4b0e      	ldr	r3, [pc, #56]	; (801bc8c <log_info+0x88>)
 801bc52:	781b      	ldrb	r3, [r3, #0]
 801bc54:	2240      	movs	r2, #64	; 0x40
 801bc56:	4013      	ands	r3, r2
 801bc58:	b2db      	uxtb	r3, r3
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d003      	beq.n	801bc66 <log_info+0x62>
    	serial2_print(fmtBuffer);
 801bc5e:	1d3b      	adds	r3, r7, #4
 801bc60:	0018      	movs	r0, r3
 801bc62:	f002 f8a3 	bl	801ddac <serial2_print>
    }

    if ( __log.onDebug ) {
 801bc66:	4b09      	ldr	r3, [pc, #36]	; (801bc8c <log_info+0x88>)
 801bc68:	781b      	ldrb	r3, [r3, #0]
 801bc6a:	227f      	movs	r2, #127	; 0x7f
 801bc6c:	4393      	bics	r3, r2
 801bc6e:	b2db      	uxtb	r3, r3
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d004      	beq.n	801bc7e <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 801bc74:	1d3b      	adds	r3, r7, #4
 801bc76:	0019      	movs	r1, r3
 801bc78:	2001      	movs	r0, #1
 801bc7a:	f002 f8fd 	bl	801de78 <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 801bc7e:	46c0      	nop			; (mov r8, r8)
 801bc80:	46bd      	mov	sp, r7
 801bc82:	b016      	add	sp, #88	; 0x58
 801bc84:	bc80      	pop	{r7}
 801bc86:	bc08      	pop	{r3}
 801bc88:	b004      	add	sp, #16
 801bc8a:	4718      	bx	r3
 801bc8c:	20001570 	.word	0x20001570

0801bc90 <itsdk_lorawan_setup>:

/**
 * Init the LoRaWan Stack
 * Actually static
 */
itsdk_lorawan_init_t itsdk_lorawan_setup(uint16_t region, itsdk_lorawan_channelInit_t * channelConfig) {
 801bc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc92:	b095      	sub	sp, #84	; 0x54
 801bc94:	af02      	add	r7, sp, #8
 801bc96:	0002      	movs	r2, r0
 801bc98:	6039      	str	r1, [r7, #0]
 801bc9a:	1dbb      	adds	r3, r7, #6
 801bc9c:	801a      	strh	r2, [r3, #0]
	static uint8_t devEui[8];
	static uint8_t appEui[8];
	static uint8_t appKey[16];

	// On first run we store the configuration into the SecureStore
	itsdk_lorawan_resetFactoryDefaults(false);
 801bc9e:	2000      	movs	r0, #0
 801bca0:	f000 fa1e 	bl	801c0e0 <itsdk_lorawan_resetFactoryDefaults>

	itsdk_lorawan_getDeviceEUI(devEui);
 801bca4:	4b72      	ldr	r3, [pc, #456]	; (801be70 <itsdk_lorawan_setup+0x1e0>)
 801bca6:	0018      	movs	r0, r3
 801bca8:	f000 f98e 	bl	801bfc8 <itsdk_lorawan_getDeviceEUI>
	itsdk_lorawan_getAppEUI(appEui);
 801bcac:	4b71      	ldr	r3, [pc, #452]	; (801be74 <itsdk_lorawan_setup+0x1e4>)
 801bcae:	0018      	movs	r0, r3
 801bcb0:	f000 f9bc 	bl	801c02c <itsdk_lorawan_getAppEUI>
	itsdk_lorawan_getAppKEY(appKey);
 801bcb4:	4b70      	ldr	r3, [pc, #448]	; (801be78 <itsdk_lorawan_setup+0x1e8>)
 801bcb6:	0018      	movs	r0, r3
 801bcb8:	f000 f9ea 	bl	801c090 <itsdk_lorawan_getAppKEY>

//	log_info_array("DEV :",devEui,8);
//	log_info_array("APP :",appEui,8);
//	log_info_array("KEY :",appKey,16);

	Radio.IoInit();
 801bcbc:	4b6f      	ldr	r3, [pc, #444]	; (801be7c <itsdk_lorawan_setup+0x1ec>)
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	4798      	blx	r3
	#if ITSDK_CONFIGURATION_MODE == __CONFIG_STATIC
		#if (ITSDK_LORAWAN_DEVEUI_SRC == __LORAWAN_DEVEUI_GENERATED)
		  itsdk_getUniqId(devEui, 8);
		#endif
	#else
	   if ( itsdk_config.sdk.lorawan.devEuiType == __LORAWAN_DEVEUI_GENERATED ) {
 801bcc2:	4b6f      	ldr	r3, [pc, #444]	; (801be80 <itsdk_lorawan_setup+0x1f0>)
 801bcc4:	7a9b      	ldrb	r3, [r3, #10]
 801bcc6:	2230      	movs	r2, #48	; 0x30
 801bcc8:	4013      	ands	r3, r2
 801bcca:	b2db      	uxtb	r3, r3
 801bccc:	2b20      	cmp	r3, #32
 801bcce:	d104      	bne.n	801bcda <itsdk_lorawan_setup+0x4a>
		  itsdk_getUniqId(devEui, 8);
 801bcd0:	4b67      	ldr	r3, [pc, #412]	; (801be70 <itsdk_lorawan_setup+0x1e0>)
 801bcd2:	2108      	movs	r1, #8
 801bcd4:	0018      	movs	r0, r3
 801bcd6:	f001 fffb 	bl	801dcd0 <itsdk_getUniqId>
		__config.adrEnable =LORAWAN_ADR_OFF;
		#else
		  #error Invalid ITSDK_LORAWAN_ADR configuration
		#endif
    #else
		__config.adrEnable = (itsdk_config.sdk.lorawan.adrMode == __LORAWAN_ADR_ON)?LORAWAN_ADR_ON:LORAWAN_ADR_OFF;
 801bcda:	4b69      	ldr	r3, [pc, #420]	; (801be80 <itsdk_lorawan_setup+0x1f0>)
 801bcdc:	7a9b      	ldrb	r3, [r3, #10]
 801bcde:	223f      	movs	r2, #63	; 0x3f
 801bce0:	4393      	bics	r3, r2
 801bce2:	b2db      	uxtb	r3, r3
 801bce4:	3b80      	subs	r3, #128	; 0x80
 801bce6:	425a      	negs	r2, r3
 801bce8:	4153      	adcs	r3, r2
 801bcea:	b2da      	uxtb	r2, r3
 801bcec:	2114      	movs	r1, #20
 801bcee:	187b      	adds	r3, r7, r1
 801bcf0:	701a      	strb	r2, [r3, #0]
	#endif

	#if ITSDK_CONFIGURATION_MODE == __CONFIG_STATIC
	__config.JoinType = ITSDK_LORAWAN_ACTIVATION;
	#else
	__config.JoinType = itsdk_config.sdk.lorawan.joinMode;
 801bcf2:	4b63      	ldr	r3, [pc, #396]	; (801be80 <itsdk_lorawan_setup+0x1f0>)
 801bcf4:	7a9b      	ldrb	r3, [r3, #10]
 801bcf6:	079b      	lsls	r3, r3, #30
 801bcf8:	0f9b      	lsrs	r3, r3, #30
 801bcfa:	b2db      	uxtb	r3, r3
 801bcfc:	001a      	movs	r2, r3
 801bcfe:	187b      	adds	r3, r7, r1
 801bd00:	719a      	strb	r2, [r3, #6]
	#endif
	__config.devEui = devEui;
 801bd02:	187b      	adds	r3, r7, r1
 801bd04:	4a5a      	ldr	r2, [pc, #360]	; (801be70 <itsdk_lorawan_setup+0x1e0>)
 801bd06:	609a      	str	r2, [r3, #8]
		__config.enablePublicNetwork = true;
		#else
		__config.enablePublicNetwork = false;
		#endif
	#else
	__config.enablePublicNetwork = (itsdk_config.sdk.lorawan.networkType == __LORAWAN_NWK_PUBLIC);
 801bd08:	4b5d      	ldr	r3, [pc, #372]	; (801be80 <itsdk_lorawan_setup+0x1f0>)
 801bd0a:	7a9b      	ldrb	r3, [r3, #10]
 801bd0c:	220c      	movs	r2, #12
 801bd0e:	4013      	ands	r3, r2
 801bd10:	b2db      	uxtb	r3, r3
 801bd12:	3b04      	subs	r3, #4
 801bd14:	425a      	negs	r2, r3
 801bd16:	4153      	adcs	r3, r2
 801bd18:	b2da      	uxtb	r2, r3
 801bd1a:	187b      	adds	r3, r7, r1
 801bd1c:	709a      	strb	r2, [r3, #2]
	#endif


	__config.region = region;
 801bd1e:	187b      	adds	r3, r7, r1
 801bd20:	1dba      	adds	r2, r7, #6
 801bd22:	8812      	ldrh	r2, [r2, #0]
 801bd24:	809a      	strh	r2, [r3, #4]
	__config.txDatarate = ITSDK_LORAWAN_DEFAULT_DR;
 801bd26:	187b      	adds	r3, r7, r1
 801bd28:	2201      	movs	r2, #1
 801bd2a:	705a      	strb	r2, [r3, #1]
	#if ( ITSDK_LORAWAN_ACTIVATION &  __LORAWAN_OTAA )> 0
	__config.config.otaa.appEui = appEui;
 801bd2c:	187b      	adds	r3, r7, r1
 801bd2e:	4a51      	ldr	r2, [pc, #324]	; (801be74 <itsdk_lorawan_setup+0x1e4>)
 801bd30:	60da      	str	r2, [r3, #12]
	__config.config.otaa.appKey = appKey;
 801bd32:	187b      	adds	r3, r7, r1
 801bd34:	4a50      	ldr	r2, [pc, #320]	; (801be78 <itsdk_lorawan_setup+0x1e8>)
 801bd36:	611a      	str	r2, [r3, #16]
	__config.config.otaa.nwkKey = appKey;
 801bd38:	187b      	adds	r3, r7, r1
 801bd3a:	4a4f      	ldr	r2, [pc, #316]	; (801be78 <itsdk_lorawan_setup+0x1e8>)
 801bd3c:	615a      	str	r2, [r3, #20]
	#else
		#error "ABP not yest supported"
	#endif

	lorawan_driver_LORA_Init(&__config);
 801bd3e:	000c      	movs	r4, r1
 801bd40:	187b      	adds	r3, r7, r1
 801bd42:	0018      	movs	r0, r3
 801bd44:	f7ec f920 	bl	8007f88 <lorawan_driver_LORA_Init>
	bzero(&__config,sizeof(__config));
 801bd48:	193b      	adds	r3, r7, r4
 801bd4a:	2120      	movs	r1, #32
 801bd4c:	0018      	movs	r0, r3
 801bd4e:	f002 fe3d 	bl	801e9cc <bzero>

	if ( channelConfig != NULL ) {
 801bd52:	683b      	ldr	r3, [r7, #0]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d100      	bne.n	801bd5a <itsdk_lorawan_setup+0xca>
 801bd58:	e084      	b.n	801be64 <itsdk_lorawan_setup+0x1d4>
		switch (region) {
 801bd5a:	1dbb      	adds	r3, r7, #6
 801bd5c:	881a      	ldrh	r2, [r3, #0]
 801bd5e:	2380      	movs	r3, #128	; 0x80
 801bd60:	005b      	lsls	r3, r3, #1
 801bd62:	429a      	cmp	r2, r3
 801bd64:	d142      	bne.n	801bdec <itsdk_lorawan_setup+0x15c>
		case __LORAWAN_REGION_US915:
		{
			// US915 does not allow to addChannel ; all the possible channel are already defined
			// and activated. Here we basically unactivate the one we do not need
			uint16_t channels[6];
			bzero(channels,6*sizeof(uint16_t));
 801bd66:	2308      	movs	r3, #8
 801bd68:	18fb      	adds	r3, r7, r3
 801bd6a:	210c      	movs	r1, #12
 801bd6c:	0018      	movs	r0, r3
 801bd6e:	f002 fe2d 	bl	801e9cc <bzero>
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801bd72:	2300      	movs	r3, #0
 801bd74:	647b      	str	r3, [r7, #68]	; 0x44
 801bd76:	e02a      	b.n	801bdce <itsdk_lorawan_setup+0x13e>
				int channel = (channelConfig->channels[i].frequency - 902300000) / 200000; // get chan ID on the 72
 801bd78:	683a      	ldr	r2, [r7, #0]
 801bd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd7c:	011b      	lsls	r3, r3, #4
 801bd7e:	18d3      	adds	r3, r2, r3
 801bd80:	3308      	adds	r3, #8
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	4a3f      	ldr	r2, [pc, #252]	; (801be84 <itsdk_lorawan_setup+0x1f4>)
 801bd86:	4694      	mov	ip, r2
 801bd88:	4463      	add	r3, ip
 801bd8a:	493f      	ldr	r1, [pc, #252]	; (801be88 <itsdk_lorawan_setup+0x1f8>)
 801bd8c:	0018      	movs	r0, r3
 801bd8e:	f7e4 f9c3 	bl	8000118 <__udivsi3>
 801bd92:	0003      	movs	r3, r0
 801bd94:	63fb      	str	r3, [r7, #60]	; 0x3c
				int index = channel >> 4; // associated word
 801bd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd98:	111b      	asrs	r3, r3, #4
 801bd9a:	63bb      	str	r3, [r7, #56]	; 0x38
				int shift = channel & 0x0F;
 801bd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd9e:	220f      	movs	r2, #15
 801bda0:	4013      	ands	r3, r2
 801bda2:	637b      	str	r3, [r7, #52]	; 0x34
				channels[index] |= (1 << shift);
 801bda4:	2008      	movs	r0, #8
 801bda6:	183b      	adds	r3, r7, r0
 801bda8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bdaa:	0052      	lsls	r2, r2, #1
 801bdac:	5ad3      	ldrh	r3, [r2, r3]
 801bdae:	b21a      	sxth	r2, r3
 801bdb0:	2101      	movs	r1, #1
 801bdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdb4:	4099      	lsls	r1, r3
 801bdb6:	000b      	movs	r3, r1
 801bdb8:	b21b      	sxth	r3, r3
 801bdba:	4313      	orrs	r3, r2
 801bdbc:	b21b      	sxth	r3, r3
 801bdbe:	b299      	uxth	r1, r3
 801bdc0:	183b      	adds	r3, r7, r0
 801bdc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bdc4:	0052      	lsls	r2, r2, #1
 801bdc6:	52d1      	strh	r1, [r2, r3]
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801bdc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bdca:	3301      	adds	r3, #1
 801bdcc:	647b      	str	r3, [r7, #68]	; 0x44
 801bdce:	683b      	ldr	r3, [r7, #0]
 801bdd0:	781b      	ldrb	r3, [r3, #0]
 801bdd2:	001a      	movs	r2, r3
 801bdd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bdd6:	4293      	cmp	r3, r2
 801bdd8:	dbce      	blt.n	801bd78 <itsdk_lorawan_setup+0xe8>
				LOG_DEBUG_LORAWANSTK(("Add channel %d at freq %d on idx %d with shift %d\r\n",channel,channelConfig->channels[i].frequency,index,shift));
			}
			lorawan_driver_LORA_SelectChannels(__LORAWAN_REGION_US915,channels);
 801bdda:	2308      	movs	r3, #8
 801bddc:	18fa      	adds	r2, r7, r3
 801bdde:	2380      	movs	r3, #128	; 0x80
 801bde0:	005b      	lsls	r3, r3, #1
 801bde2:	0011      	movs	r1, r2
 801bde4:	0018      	movs	r0, r3
 801bde6:	f7ec fb11 	bl	800840c <lorawan_driver_LORA_SelectChannels>
		}
		break;
 801bdea:	e03c      	b.n	801be66 <itsdk_lorawan_setup+0x1d6>

		default:
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801bdec:	2300      	movs	r3, #0
 801bdee:	643b      	str	r3, [r7, #64]	; 0x40
 801bdf0:	e031      	b.n	801be56 <itsdk_lorawan_setup+0x1c6>
				if ( lorawan_driver_LORA_AddChannel(
 801bdf2:	683a      	ldr	r2, [r7, #0]
 801bdf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bdf6:	011b      	lsls	r3, r3, #4
 801bdf8:	18d3      	adds	r3, r2, r3
 801bdfa:	3304      	adds	r3, #4
 801bdfc:	7818      	ldrb	r0, [r3, #0]
 801bdfe:	683a      	ldr	r2, [r7, #0]
 801be00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be02:	011b      	lsls	r3, r3, #4
 801be04:	18d3      	adds	r3, r2, r3
 801be06:	3308      	adds	r3, #8
 801be08:	681c      	ldr	r4, [r3, #0]
 801be0a:	683a      	ldr	r2, [r7, #0]
 801be0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be0e:	011b      	lsls	r3, r3, #4
 801be10:	18d3      	adds	r3, r2, r3
 801be12:	330c      	adds	r3, #12
 801be14:	681d      	ldr	r5, [r3, #0]
 801be16:	683a      	ldr	r2, [r7, #0]
 801be18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be1a:	011b      	lsls	r3, r3, #4
 801be1c:	18d3      	adds	r3, r2, r3
 801be1e:	3310      	adds	r3, #16
 801be20:	781e      	ldrb	r6, [r3, #0]
 801be22:	683a      	ldr	r2, [r7, #0]
 801be24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be26:	011b      	lsls	r3, r3, #4
 801be28:	18d3      	adds	r3, r2, r3
 801be2a:	3311      	adds	r3, #17
 801be2c:	781b      	ldrb	r3, [r3, #0]
 801be2e:	6839      	ldr	r1, [r7, #0]
 801be30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801be32:	0112      	lsls	r2, r2, #4
 801be34:	188a      	adds	r2, r1, r2
 801be36:	3212      	adds	r2, #18
 801be38:	7812      	ldrb	r2, [r2, #0]
 801be3a:	9201      	str	r2, [sp, #4]
 801be3c:	9300      	str	r3, [sp, #0]
 801be3e:	0033      	movs	r3, r6
 801be40:	002a      	movs	r2, r5
 801be42:	0021      	movs	r1, r4
 801be44:	f7ec fa78 	bl	8008338 <lorawan_driver_LORA_AddChannel>
 801be48:	1e03      	subs	r3, r0, #0
 801be4a:	d001      	beq.n	801be50 <itsdk_lorawan_setup+0x1c0>
						channelConfig->channels[i].frequency,
						channelConfig->channels[i].frequencyRx,
						channelConfig->channels[i].minDr,
						channelConfig->channels[i].maxDr,
						channelConfig->channels[i].band
					) != LORAWAN_CHANNEL_SUCCESS ) return LORAWAN_INIT_CHANNEL_FAILED;
 801be4c:	2301      	movs	r3, #1
 801be4e:	e00b      	b.n	801be68 <itsdk_lorawan_setup+0x1d8>
			for ( int i=0 ; i < channelConfig->num ; i++ ) {
 801be50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be52:	3301      	adds	r3, #1
 801be54:	643b      	str	r3, [r7, #64]	; 0x40
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	781b      	ldrb	r3, [r3, #0]
 801be5a:	001a      	movs	r2, r3
 801be5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be5e:	4293      	cmp	r3, r2
 801be60:	dbc7      	blt.n	801bdf2 <itsdk_lorawan_setup+0x162>
			}
			break;
 801be62:	e000      	b.n	801be66 <itsdk_lorawan_setup+0x1d6>
		}
	}
 801be64:	46c0      	nop			; (mov r8, r8)
	return LORAWAN_INIT_SUCESS;
 801be66:	2300      	movs	r3, #0
}
 801be68:	0018      	movs	r0, r3
 801be6a:	46bd      	mov	sp, r7
 801be6c:	b013      	add	sp, #76	; 0x4c
 801be6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be70:	2000109c 	.word	0x2000109c
 801be74:	200010a4 	.word	0x200010a4
 801be78:	200010ac 	.word	0x200010ac
 801be7c:	08020a5c 	.word	0x08020a5c
 801be80:	20001540 	.word	0x20001540
 801be84:	ca37fea0 	.word	0xca37fea0
 801be88:	00030d40 	.word	0x00030d40

0801be8c <itsdk_lorawan_join_sync>:
 *                   it allows to switch low power but is a higher risk in term of timing respect.
 *                   returns (LORAWAN_JOIN_SUCCESS/LORAWAN_JOIN_FAILED)
 *                   in async mode the given function will be called with the join status.
 *                   When no function is proposed, the status can be polled.
 */
itsdk_lorawan_join_t itsdk_lorawan_join_sync() {
 801be8c:	b580      	push	{r7, lr}
 801be8e:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_join_sync\r\n"));
	return lorawan_driver_LORA_Join(LORAWAN_RUN_SYNC);
 801be90:	2000      	movs	r0, #0
 801be92:	f7ec f9c5 	bl	8008220 <lorawan_driver_LORA_Join>
 801be96:	0003      	movs	r3, r0
}
 801be98:	0018      	movs	r0, r3
 801be9a:	46bd      	mov	sp, r7
 801be9c:	bd80      	pop	{r7, pc}
	...

0801bea0 <lorawan_driver_onJoinSuccess>:

// Override the underlaying callbacks
static void (*__itsdk_lorawan_join_cb)(itsdk_lorawan_join_t status)  = NULL;
void lorawan_driver_onJoinSuccess() {
 801bea0:	b580      	push	{r7, lr}
 801bea2:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("** onJoinSuccess\r\n"));
	if (__itsdk_lorawan_join_cb != NULL) {
 801bea4:	4b05      	ldr	r3, [pc, #20]	; (801bebc <lorawan_driver_onJoinSuccess+0x1c>)
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d003      	beq.n	801beb4 <lorawan_driver_onJoinSuccess+0x14>
		__itsdk_lorawan_join_cb(LORAWAN_JOIN_SUCCESS);
 801beac:	4b03      	ldr	r3, [pc, #12]	; (801bebc <lorawan_driver_onJoinSuccess+0x1c>)
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	2001      	movs	r0, #1
 801beb2:	4798      	blx	r3
	}
}
 801beb4:	46c0      	nop			; (mov r8, r8)
 801beb6:	46bd      	mov	sp, r7
 801beb8:	bd80      	pop	{r7, pc}
 801beba:	46c0      	nop			; (mov r8, r8)
 801bebc:	20001094 	.word	0x20001094

0801bec0 <lorawan_driver_onJoinFailed>:
void lorawan_driver_onJoinFailed() {
 801bec0:	b580      	push	{r7, lr}
 801bec2:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("** onJoinFailed\r\n"));
	if (__itsdk_lorawan_join_cb != NULL) {
 801bec4:	4b05      	ldr	r3, [pc, #20]	; (801bedc <lorawan_driver_onJoinFailed+0x1c>)
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d003      	beq.n	801bed4 <lorawan_driver_onJoinFailed+0x14>
		__itsdk_lorawan_join_cb(LORAWAN_JOIN_FAILED);
 801becc:	4b03      	ldr	r3, [pc, #12]	; (801bedc <lorawan_driver_onJoinFailed+0x1c>)
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	2002      	movs	r0, #2
 801bed2:	4798      	blx	r3
	}
}
 801bed4:	46c0      	nop			; (mov r8, r8)
 801bed6:	46bd      	mov	sp, r7
 801bed8:	bd80      	pop	{r7, pc}
 801beda:	46c0      	nop			; (mov r8, r8)
 801bedc:	20001094 	.word	0x20001094

0801bee0 <itsdk_lorawan_hasjoined>:
}

/**
 * Return true once the device has joined the the network
 */
bool itsdk_lorawan_hasjoined() {
 801bee0:	b580      	push	{r7, lr}
 801bee2:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_hasjoined\r\n"));
	return ( lorawan_driver_LORA_getJoinState() == LORAWAN_STATE_JOIN_SUCCESS);
 801bee4:	f7ec fab8 	bl	8008458 <lorawan_driver_LORA_getJoinState>
 801bee8:	0003      	movs	r3, r0
 801beea:	3b03      	subs	r3, #3
 801beec:	425a      	negs	r2, r3
 801beee:	4153      	adcs	r3, r2
 801bef0:	b2db      	uxtb	r3, r3
}
 801bef2:	0018      	movs	r0, r3
 801bef4:	46bd      	mov	sp, r7
 801bef6:	bd80      	pop	{r7, pc}

0801bef8 <lorawan_driver_onSendSuccessAckFailed>:
	__itsdk_lorawan_encrypt_payload(payload,payloadSize,encrypt);
	return lorawan_driver_LORA_Send(payload,payloadSize,port,dataRate,confirm,retry,LORAWAN_RUN_SYNC,rPort,rSize,rData);
}

static void (*__itsdk_lorawan_send_cb)(itsdk_lorawan_send_t status, uint8_t port, uint8_t size, uint8_t * rxData) = NULL;
void lorawan_driver_onSendSuccessAckFailed() {
 801bef8:	b5b0      	push	{r4, r5, r7, lr}
 801befa:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccessAckFailed\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801befc:	4b06      	ldr	r3, [pc, #24]	; (801bf18 <lorawan_driver_onSendSuccessAckFailed+0x20>)
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d006      	beq.n	801bf12 <lorawan_driver_onSendSuccessAckFailed+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_SENT,0,0,NULL);
 801bf04:	4b04      	ldr	r3, [pc, #16]	; (801bf18 <lorawan_driver_onSendSuccessAckFailed+0x20>)
 801bf06:	681c      	ldr	r4, [r3, #0]
 801bf08:	2300      	movs	r3, #0
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	2100      	movs	r1, #0
 801bf0e:	2001      	movs	r0, #1
 801bf10:	47a0      	blx	r4
	}
}
 801bf12:	46c0      	nop			; (mov r8, r8)
 801bf14:	46bd      	mov	sp, r7
 801bf16:	bdb0      	pop	{r4, r5, r7, pc}
 801bf18:	20001098 	.word	0x20001098

0801bf1c <lorawan_driver_onSendAckSuccess>:
void lorawan_driver_onSendAckSuccess() {
 801bf1c:	b5b0      	push	{r4, r5, r7, lr}
 801bf1e:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccessAckSuccess\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801bf20:	4b06      	ldr	r3, [pc, #24]	; (801bf3c <lorawan_driver_onSendAckSuccess+0x20>)
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d006      	beq.n	801bf36 <lorawan_driver_onSendAckSuccess+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED,0,0,NULL);
 801bf28:	4b04      	ldr	r3, [pc, #16]	; (801bf3c <lorawan_driver_onSendAckSuccess+0x20>)
 801bf2a:	681c      	ldr	r4, [r3, #0]
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	2200      	movs	r2, #0
 801bf30:	2100      	movs	r1, #0
 801bf32:	2002      	movs	r0, #2
 801bf34:	47a0      	blx	r4
	}
}
 801bf36:	46c0      	nop			; (mov r8, r8)
 801bf38:	46bd      	mov	sp, r7
 801bf3a:	bdb0      	pop	{r4, r5, r7, pc}
 801bf3c:	20001098 	.word	0x20001098

0801bf40 <lorawan_driver_onSendSuccess>:
void lorawan_driver_onSendSuccess() {
 801bf40:	b5b0      	push	{r4, r5, r7, lr}
 801bf42:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onSendSuccess\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801bf44:	4b06      	ldr	r3, [pc, #24]	; (801bf60 <lorawan_driver_onSendSuccess+0x20>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d006      	beq.n	801bf5a <lorawan_driver_onSendSuccess+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_SENT,0,0,NULL);
 801bf4c:	4b04      	ldr	r3, [pc, #16]	; (801bf60 <lorawan_driver_onSendSuccess+0x20>)
 801bf4e:	681c      	ldr	r4, [r3, #0]
 801bf50:	2300      	movs	r3, #0
 801bf52:	2200      	movs	r2, #0
 801bf54:	2100      	movs	r1, #0
 801bf56:	2001      	movs	r0, #1
 801bf58:	47a0      	blx	r4
	}
}
 801bf5a:	46c0      	nop			; (mov r8, r8)
 801bf5c:	46bd      	mov	sp, r7
 801bf5e:	bdb0      	pop	{r4, r5, r7, pc}
 801bf60:	20001098 	.word	0x20001098

0801bf64 <lorawan_driver_onDataReception>:

void lorawan_driver_onDataReception(uint8_t port, uint8_t * data, uint8_t size) {
 801bf64:	b590      	push	{r4, r7, lr}
 801bf66:	b083      	sub	sp, #12
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	6039      	str	r1, [r7, #0]
 801bf6c:	0011      	movs	r1, r2
 801bf6e:	1dfb      	adds	r3, r7, #7
 801bf70:	1c02      	adds	r2, r0, #0
 801bf72:	701a      	strb	r2, [r3, #0]
 801bf74:	1dbb      	adds	r3, r7, #6
 801bf76:	1c0a      	adds	r2, r1, #0
 801bf78:	701a      	strb	r2, [r3, #0]
		for ( int i = 0 ; i < size ; i++ ) {
			LOG_INFO_LORAWANSTK(("%02X ",data[i]));
		}
		LOG_INFO_LORAWANSTK(("\n"));
	#endif
	if (__itsdk_lorawan_send_cb != NULL) {
 801bf7a:	4b09      	ldr	r3, [pc, #36]	; (801bfa0 <lorawan_driver_onDataReception+0x3c>)
 801bf7c:	681b      	ldr	r3, [r3, #0]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d009      	beq.n	801bf96 <lorawan_driver_onDataReception+0x32>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED_WITH_DOWNLINK,port,size,data);
 801bf82:	4b07      	ldr	r3, [pc, #28]	; (801bfa0 <lorawan_driver_onDataReception+0x3c>)
 801bf84:	681c      	ldr	r4, [r3, #0]
 801bf86:	6838      	ldr	r0, [r7, #0]
 801bf88:	1dbb      	adds	r3, r7, #6
 801bf8a:	781a      	ldrb	r2, [r3, #0]
 801bf8c:	1dfb      	adds	r3, r7, #7
 801bf8e:	7819      	ldrb	r1, [r3, #0]
 801bf90:	0003      	movs	r3, r0
 801bf92:	2003      	movs	r0, #3
 801bf94:	47a0      	blx	r4
	}
}
 801bf96:	46c0      	nop			; (mov r8, r8)
 801bf98:	46bd      	mov	sp, r7
 801bf9a:	b003      	add	sp, #12
 801bf9c:	bd90      	pop	{r4, r7, pc}
 801bf9e:	46c0      	nop			; (mov r8, r8)
 801bfa0:	20001098 	.word	0x20001098

0801bfa4 <lorawan_driver_onPendingDownlink>:

void lorawan_driver_onPendingDownlink() {
 801bfa4:	b5b0      	push	{r4, r5, r7, lr}
 801bfa6:	af00      	add	r7, sp, #0
	LOG_INFO_LORAWANSTK(("**onPendingDownlink\r\n"));
	if (__itsdk_lorawan_send_cb != NULL) {
 801bfa8:	4b06      	ldr	r3, [pc, #24]	; (801bfc4 <lorawan_driver_onPendingDownlink+0x20>)
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d006      	beq.n	801bfbe <lorawan_driver_onPendingDownlink+0x1a>
		__itsdk_lorawan_send_cb(LORAWAN_SEND_ACKED_WITH_DOWNLINK_PENDING,0,0,NULL);
 801bfb0:	4b04      	ldr	r3, [pc, #16]	; (801bfc4 <lorawan_driver_onPendingDownlink+0x20>)
 801bfb2:	681c      	ldr	r4, [r3, #0]
 801bfb4:	2300      	movs	r3, #0
 801bfb6:	2200      	movs	r2, #0
 801bfb8:	2100      	movs	r1, #0
 801bfba:	2004      	movs	r0, #4
 801bfbc:	47a0      	blx	r4
	}
}
 801bfbe:	46c0      	nop			; (mov r8, r8)
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bdb0      	pop	{r4, r5, r7, pc}
 801bfc4:	20001098 	.word	0x20001098

0801bfc8 <itsdk_lorawan_getDeviceEUI>:
}

/**
 * Get the device EUI as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getDeviceEUI(uint8_t * devEui){
 801bfc8:	b590      	push	{r4, r7, lr}
 801bfca:	b089      	sub	sp, #36	; 0x24
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getDeviceEUI\r\n"));
	#if ITSDK_WITH_SECURESTORE == __ENABLE
		uint8_t d[8];
		uint8_t buffer[16];
		if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801bfd0:	2308      	movs	r3, #8
 801bfd2:	18fb      	adds	r3, r7, r3
 801bfd4:	0019      	movs	r1, r3
 801bfd6:	2007      	movs	r0, #7
 801bfd8:	f7fd fbe2 	bl	80197a0 <itsdk_secstore_readBlock>
 801bfdc:	1e03      	subs	r3, r0, #0
 801bfde:	d00b      	beq.n	801bff8 <itsdk_lorawan_getDeviceEUI+0x30>
			#if ITSDK_WITH_ERROR_RPT == __ENABLE
				ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,0);
 801bfe0:	4b11      	ldr	r3, [pc, #68]	; (801c028 <itsdk_lorawan_getDeviceEUI+0x60>)
 801bfe2:	2100      	movs	r1, #0
 801bfe4:	0018      	movs	r0, r3
 801bfe6:	f7ff faf5 	bl	801b5d4 <itsdk_error_report>
			#endif
			bzero(devEui,8);
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	2108      	movs	r1, #8
 801bfee:	0018      	movs	r0, r3
 801bff0:	f002 fcec 	bl	801e9cc <bzero>
			return LORAWAN_RETURN_FAILED;
 801bff4:	2301      	movs	r3, #1
 801bff6:	e012      	b.n	801c01e <itsdk_lorawan_getDeviceEUI+0x56>
		} else {
			memcpy(d,buffer,8);
 801bff8:	2418      	movs	r4, #24
 801bffa:	193a      	adds	r2, r7, r4
 801bffc:	2308      	movs	r3, #8
 801bffe:	18fb      	adds	r3, r7, r3
 801c000:	0010      	movs	r0, r2
 801c002:	0019      	movs	r1, r3
 801c004:	2308      	movs	r3, #8
 801c006:	001a      	movs	r2, r3
 801c008:	f002 fd10 	bl	801ea2c <memcpy>
		}
	#else
		uint8_t d[8] = ITSDK_LORAWAN_DEVEUI;
	#endif
	memcpy(devEui,d,8);
 801c00c:	687a      	ldr	r2, [r7, #4]
 801c00e:	193b      	adds	r3, r7, r4
 801c010:	0010      	movs	r0, r2
 801c012:	0019      	movs	r1, r3
 801c014:	2308      	movs	r3, #8
 801c016:	001a      	movs	r2, r3
 801c018:	f002 fd08 	bl	801ea2c <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c01c:	2300      	movs	r3, #0
}
 801c01e:	0018      	movs	r0, r3
 801c020:	46bd      	mov	sp, r7
 801c022:	b009      	add	sp, #36	; 0x24
 801c024:	bd90      	pop	{r4, r7, pc}
 801c026:	46c0      	nop			; (mov r8, r8)
 801c028:	90000106 	.word	0x90000106

0801c02c <itsdk_lorawan_getAppEUI>:

/**
 * Get the appEUI as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getAppEUI(uint8_t * appEui){
 801c02c:	b590      	push	{r4, r7, lr}
 801c02e:	b089      	sub	sp, #36	; 0x24
 801c030:	af00      	add	r7, sp, #0
 801c032:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getAppEUI\r\n"));
#if ITSDK_WITH_SECURESTORE == __ENABLE
	uint8_t d[8];
	uint8_t buffer[16];
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c034:	2308      	movs	r3, #8
 801c036:	18fb      	adds	r3, r7, r3
 801c038:	0019      	movs	r1, r3
 801c03a:	2007      	movs	r0, #7
 801c03c:	f7fd fbb0 	bl	80197a0 <itsdk_secstore_readBlock>
 801c040:	1e03      	subs	r3, r0, #0
 801c042:	d00b      	beq.n	801c05c <itsdk_lorawan_getAppEUI+0x30>
		#if ITSDK_WITH_ERROR_RPT == __ENABLE
			ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,1);
 801c044:	4b11      	ldr	r3, [pc, #68]	; (801c08c <itsdk_lorawan_getAppEUI+0x60>)
 801c046:	2101      	movs	r1, #1
 801c048:	0018      	movs	r0, r3
 801c04a:	f7ff fac3 	bl	801b5d4 <itsdk_error_report>
		#endif
		bzero(appEui,8);
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	2108      	movs	r1, #8
 801c052:	0018      	movs	r0, r3
 801c054:	f002 fcba 	bl	801e9cc <bzero>
		return LORAWAN_RETURN_FAILED;
 801c058:	2301      	movs	r3, #1
 801c05a:	e013      	b.n	801c084 <itsdk_lorawan_getAppEUI+0x58>
	} else {
		memcpy(d,buffer+8,8);
 801c05c:	2308      	movs	r3, #8
 801c05e:	18fb      	adds	r3, r7, r3
 801c060:	3308      	adds	r3, #8
 801c062:	2418      	movs	r4, #24
 801c064:	193a      	adds	r2, r7, r4
 801c066:	0010      	movs	r0, r2
 801c068:	0019      	movs	r1, r3
 801c06a:	2308      	movs	r3, #8
 801c06c:	001a      	movs	r2, r3
 801c06e:	f002 fcdd 	bl	801ea2c <memcpy>
	}
#else
	uint8_t d[8] = ITSDK_LORAWAN_APPEUI;
#endif
	memcpy(appEui,d,8);
 801c072:	687a      	ldr	r2, [r7, #4]
 801c074:	193b      	adds	r3, r7, r4
 801c076:	0010      	movs	r0, r2
 801c078:	0019      	movs	r1, r3
 801c07a:	2308      	movs	r3, #8
 801c07c:	001a      	movs	r2, r3
 801c07e:	f002 fcd5 	bl	801ea2c <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c082:	2300      	movs	r3, #0
}
 801c084:	0018      	movs	r0, r3
 801c086:	46bd      	mov	sp, r7
 801c088:	b009      	add	sp, #36	; 0x24
 801c08a:	bd90      	pop	{r4, r7, pc}
 801c08c:	90000106 	.word	0x90000106

0801c090 <itsdk_lorawan_getAppKEY>:

/**
 * Get the appKEY as a uint8_t[]
 */
__weak itsdk_lorawan_return_t itsdk_lorawan_getAppKEY(uint8_t * appKey){
 801c090:	b580      	push	{r7, lr}
 801c092:	b086      	sub	sp, #24
 801c094:	af00      	add	r7, sp, #0
 801c096:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWANSTK(("itsdk_lorawan_getAppKEY\r\n"));
#if ITSDK_WITH_SECURESTORE == __ENABLE
	uint8_t d[16];
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_APPKEY, d) != SS_SUCCESS ) {
 801c098:	2308      	movs	r3, #8
 801c09a:	18fb      	adds	r3, r7, r3
 801c09c:	0019      	movs	r1, r3
 801c09e:	2008      	movs	r0, #8
 801c0a0:	f7fd fb7e 	bl	80197a0 <itsdk_secstore_readBlock>
 801c0a4:	1e03      	subs	r3, r0, #0
 801c0a6:	d00b      	beq.n	801c0c0 <itsdk_lorawan_getAppKEY+0x30>
		#if ITSDK_WITH_ERROR_RPT == __ENABLE
			ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_SS_INVALID,2);
 801c0a8:	4b0c      	ldr	r3, [pc, #48]	; (801c0dc <itsdk_lorawan_getAppKEY+0x4c>)
 801c0aa:	2102      	movs	r1, #2
 801c0ac:	0018      	movs	r0, r3
 801c0ae:	f7ff fa91 	bl	801b5d4 <itsdk_error_report>
		#endif
		bzero(appKey,16);
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	2110      	movs	r1, #16
 801c0b6:	0018      	movs	r0, r3
 801c0b8:	f002 fc88 	bl	801e9cc <bzero>
		return LORAWAN_RETURN_FAILED;
 801c0bc:	2301      	movs	r3, #1
 801c0be:	e009      	b.n	801c0d4 <itsdk_lorawan_getAppKEY+0x44>
	}
#else
	uint8_t d[16] = ITSDK_LORAWAN_APPKEY;
#endif
	memcpy(appKey,d,16);
 801c0c0:	687a      	ldr	r2, [r7, #4]
 801c0c2:	2308      	movs	r3, #8
 801c0c4:	18fb      	adds	r3, r7, r3
 801c0c6:	0010      	movs	r0, r2
 801c0c8:	0019      	movs	r1, r3
 801c0ca:	2310      	movs	r3, #16
 801c0cc:	001a      	movs	r2, r3
 801c0ce:	f002 fcad 	bl	801ea2c <memcpy>
	return LORAWAN_RETURN_SUCESS;
 801c0d2:	2300      	movs	r3, #0
}
 801c0d4:	0018      	movs	r0, r3
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	b006      	add	sp, #24
 801c0da:	bd80      	pop	{r7, pc}
 801c0dc:	90000106 	.word	0x90000106

0801c0e0 <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 801c0e0:	b5b0      	push	{r4, r5, r7, lr}
 801c0e2:	b090      	sub	sp, #64	; 0x40
 801c0e4:	af00      	add	r7, sp, #0
 801c0e6:	0002      	movs	r2, r0
 801c0e8:	1dfb      	adds	r3, r7, #7
 801c0ea:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 801c0ec:	1dfb      	adds	r3, r7, #7
 801c0ee:	781b      	ldrb	r3, [r3, #0]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d107      	bne.n	801c104 <itsdk_lorawan_resetFactoryDefaults+0x24>
 801c0f4:	232c      	movs	r3, #44	; 0x2c
 801c0f6:	18fb      	adds	r3, r7, r3
 801c0f8:	0019      	movs	r1, r3
 801c0fa:	2007      	movs	r0, #7
 801c0fc:	f7fd fb50 	bl	80197a0 <itsdk_secstore_readBlock>
 801c100:	1e03      	subs	r3, r0, #0
 801c102:	d038      	beq.n	801c176 <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 801c104:	2324      	movs	r3, #36	; 0x24
 801c106:	18fb      	adds	r3, r7, r3
 801c108:	4a1d      	ldr	r2, [pc, #116]	; (801c180 <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 801c10a:	ca03      	ldmia	r2!, {r0, r1}
 801c10c:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 801c10e:	231c      	movs	r3, #28
 801c110:	18fb      	adds	r3, r7, r3
 801c112:	4a1c      	ldr	r2, [pc, #112]	; (801c184 <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 801c114:	ca03      	ldmia	r2!, {r0, r1}
 801c116:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 801c118:	2300      	movs	r3, #0
 801c11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c11c:	e016      	b.n	801c14c <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 801c11e:	2324      	movs	r3, #36	; 0x24
 801c120:	18fa      	adds	r2, r7, r3
 801c122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c124:	18d3      	adds	r3, r2, r3
 801c126:	7819      	ldrb	r1, [r3, #0]
 801c128:	202c      	movs	r0, #44	; 0x2c
 801c12a:	183a      	adds	r2, r7, r0
 801c12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c12e:	18d3      	adds	r3, r2, r3
 801c130:	1c0a      	adds	r2, r1, #0
 801c132:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 801c134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c136:	3308      	adds	r3, #8
 801c138:	221c      	movs	r2, #28
 801c13a:	18b9      	adds	r1, r7, r2
 801c13c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c13e:	188a      	adds	r2, r1, r2
 801c140:	7811      	ldrb	r1, [r2, #0]
 801c142:	183a      	adds	r2, r7, r0
 801c144:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 801c146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c148:	3301      	adds	r3, #1
 801c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c14e:	2b07      	cmp	r3, #7
 801c150:	dde5      	ble.n	801c11e <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 801c152:	232c      	movs	r3, #44	; 0x2c
 801c154:	18fb      	adds	r3, r7, r3
 801c156:	0019      	movs	r1, r3
 801c158:	2007      	movs	r0, #7
 801c15a:	f7fd fb6e 	bl	801983a <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 801c15e:	210c      	movs	r1, #12
 801c160:	187b      	adds	r3, r7, r1
 801c162:	4a09      	ldr	r2, [pc, #36]	; (801c188 <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 801c164:	ca31      	ldmia	r2!, {r0, r4, r5}
 801c166:	c331      	stmia	r3!, {r0, r4, r5}
 801c168:	6812      	ldr	r2, [r2, #0]
 801c16a:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 801c16c:	187b      	adds	r3, r7, r1
 801c16e:	0019      	movs	r1, r3
 801c170:	2008      	movs	r0, #8
 801c172:	f7fd fb62 	bl	801983a <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 801c176:	2300      	movs	r3, #0
}
 801c178:	0018      	movs	r0, r3
 801c17a:	46bd      	mov	sp, r7
 801c17c:	b010      	add	sp, #64	; 0x40
 801c17e:	bdb0      	pop	{r4, r5, r7, pc}
 801c180:	080201ec 	.word	0x080201ec
 801c184:	080201f4 	.word	0x080201f4
 801c188:	080201fc 	.word	0x080201fc

0801c18c <itsdk_lorawan_loop>:

/**
 * This function need to be called in the project_loop function
 * to manage the lorawan stack ( mandatory for async mode )
 */
void itsdk_lorawan_loop() {
 801c18c:	b580      	push	{r7, lr}
 801c18e:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_loop\r\n"));
	lorawan_driver_loop();
 801c190:	f7eb fe38 	bl	8007e04 <lorawan_driver_loop>
}
 801c194:	46c0      	nop			; (mov r8, r8)
 801c196:	46bd      	mov	sp, r7
 801c198:	bd80      	pop	{r7, pc}
	...

0801c19c <lowPower_switch>:
/**
 * Switch to low power mode selected for the expected platform
 */
void __attribute__((optimize("O3"))) lowPower_switch() {

	if (__lowPowerState==LOWPRW_ENABLE) {
 801c19c:	4b13      	ldr	r3, [pc, #76]	; (801c1ec <lowPower_switch+0x50>)
void __attribute__((optimize("O3"))) lowPower_switch() {
 801c19e:	b570      	push	{r4, r5, r6, lr}
	if (__lowPowerState==LOWPRW_ENABLE) {
 801c1a0:	781b      	ldrb	r3, [r3, #0]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d000      	beq.n	801c1a8 <lowPower_switch+0xc>
			}
			#endif
		}
	}

}
 801c1a6:	bd70      	pop	{r4, r5, r6, pc}
			uint32_t schedDur = itdt_sched_nextRun();
 801c1a8:	f000 fba6 	bl	801c8f8 <itdt_sched_nextRun>
			if ( schedDur < duration ) duration = schedDur;
 801c1ac:	4d10      	ldr	r5, [pc, #64]	; (801c1f0 <lowPower_switch+0x54>)
			uint32_t schedDur = itdt_sched_nextRun();
 801c1ae:	0004      	movs	r4, r0
			if ( schedDur < duration ) duration = schedDur;
 801c1b0:	42a8      	cmp	r0, r5
 801c1b2:	d809      	bhi.n	801c1c8 <lowPower_switch+0x2c>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 801c1b4:	f000 fe2e 	bl	801ce14 <itsdk_stimer_nextTimeoutMs>
 801c1b8:	0003      	movs	r3, r0
 801c1ba:	0020      	movs	r0, r4
 801c1bc:	429c      	cmp	r4, r3
 801c1be:	d900      	bls.n	801c1c2 <lowPower_switch+0x26>
 801c1c0:	0018      	movs	r0, r3
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 801c1c2:	2805      	cmp	r0, #5
 801c1c4:	d9ef      	bls.n	801c1a6 <lowPower_switch+0xa>
 801c1c6:	e004      	b.n	801c1d2 <lowPower_switch+0x36>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 801c1c8:	f000 fe24 	bl	801ce14 <itsdk_stimer_nextTimeoutMs>
			if ( maxDur < duration ) duration = maxDur;
 801c1cc:	42a8      	cmp	r0, r5
 801c1ce:	d9f8      	bls.n	801c1c2 <lowPower_switch+0x26>
			duration = ITSDK_LOWPOWER_RTC_MS;
 801c1d0:	4808      	ldr	r0, [pc, #32]	; (801c1f4 <lowPower_switch+0x58>)
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 801c1d2:	2100      	movs	r1, #0
 801c1d4:	f001 ffd2 	bl	801e17c <stm32l_lowPowerSetup>
 801c1d8:	2800      	cmp	r0, #0
 801c1da:	d1e4      	bne.n	801c1a6 <lowPower_switch+0xa>
				stm32l_lowPowerResume(STM32L_LOWPOWER_NORMAL_STOP);
 801c1dc:	f002 f840 	bl	801e260 <stm32l_lowPowerResume>
				itsdk_state.lastWakeUpTimeUs = itsdk_time_get_us();
 801c1e0:	f000 fc84 	bl	801caec <itsdk_time_get_us>
 801c1e4:	4b04      	ldr	r3, [pc, #16]	; (801c1f8 <lowPower_switch+0x5c>)
 801c1e6:	6098      	str	r0, [r3, #8]
 801c1e8:	60d9      	str	r1, [r3, #12]
}
 801c1ea:	e7dc      	b.n	801c1a6 <lowPower_switch+0xa>
 801c1ec:	200010bc 	.word	0x200010bc
 801c1f0:	0000270f 	.word	0x0000270f
 801c1f4:	00002710 	.word	0x00002710
 801c1f8:	20001560 	.word	0x20001560

0801c1fc <lowPower_enable>:

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 801c200:	4b02      	ldr	r3, [pc, #8]	; (801c20c <lowPower_enable+0x10>)
 801c202:	2200      	movs	r2, #0
 801c204:	701a      	strb	r2, [r3, #0]
}
 801c206:	46c0      	nop			; (mov r8, r8)
 801c208:	46bd      	mov	sp, r7
 801c20a:	bd80      	pop	{r7, pc}
 801c20c:	200010bc 	.word	0x200010bc

0801c210 <lowPower_disable>:

/**
 * Enable LowPower mode
 */
void lowPower_disable() {
 801c210:	b580      	push	{r7, lr}
 801c212:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_DISABLE;
 801c214:	4b02      	ldr	r3, [pc, #8]	; (801c220 <lowPower_disable+0x10>)
 801c216:	2201      	movs	r2, #1
 801c218:	701a      	strb	r2, [r3, #0]
}
 801c21a:	46c0      	nop			; (mov r8, r8)
 801c21c:	46bd      	mov	sp, r7
 801c21e:	bd80      	pop	{r7, pc}
 801c220:	200010bc 	.word	0x200010bc

0801c224 <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 801c224:	b580      	push	{r7, lr}
 801c226:	af00      	add	r7, sp, #0

	itsdk_time_init();
 801c228:	f000 fc6c 	bl	801cb04 <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 801c22c:	20f0      	movs	r0, #240	; 0xf0
 801c22e:	f7ff fba7 	bl	801b980 <log_init>
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
	#endif
//	serial1_init(); //Fait planter
//	serial2_init();
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
 801c232:	f7fc f8fd 	bl	8018430 <itsdk_console_setup>
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 801c236:	f7ff f99d 	bl	801b574 <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 801c23a:	f001 fca3 	bl	801db84 <itsdk_getResetCause>
 801c23e:	0003      	movs	r3, r0
 801c240:	b29b      	uxth	r3, r3
 801c242:	4a11      	ldr	r2, [pc, #68]	; (801c288 <itsdk_setup+0x64>)
 801c244:	0019      	movs	r1, r3
 801c246:	0010      	movs	r0, r2
 801c248:	f7ff f9c4 	bl	801b5d4 <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 801c24c:	f7fd fbcc 	bl	80199e8 <itsdk_secstore_isInit>
 801c250:	1e03      	subs	r3, r0, #0
 801c252:	d008      	beq.n	801c266 <itsdk_setup+0x42>
		  itsdk_secstore_init();
 801c254:	f7fd fb68 	bl	8019928 <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE);
 801c258:	2001      	movs	r0, #1
 801c25a:	f7fe f898 	bl	801a38e <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 801c25e:	2001      	movs	r0, #1
 801c260:	f7ff ff3e 	bl	801c0e0 <itsdk_lorawan_resetFactoryDefaults>
 801c264:	e002      	b.n	801c26c <itsdk_setup+0x48>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(BOOL_FALSE);	// on first boot init the ss communication credentials
 801c266:	2000      	movs	r0, #0
 801c268:	f7fe f891 	bl	801a38e <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 801c26c:	f7fd ff8e 	bl	801a18c <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 801c270:	2000      	movs	r0, #0
 801c272:	f7fc fcd9 	bl	8018c28 <itsdk_config_loadConfiguration>
	itsdk_state_init();
 801c276:	f7fd f8ed 	bl	8019454 <itsdk_state_init>
	// Application setup
	project_setup();
 801c27a:	f7e7 f82f 	bl	80032dc <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 801c27e:	f001 fcbf 	bl	801dc00 <itsdk_cleanResetCause>
    #endif

}
 801c282:	46c0      	nop			; (mov r8, r8)
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}
 801c288:	10000001 	.word	0x10000001

0801c28c <itsdk_loop>:
 * if the MCU have no lowpower mode. The function update the time component, call
 * all the recurrent SDK operations to be maintained.
 * When a scheduler has been activated it calls the scheduler task when needed.
 * Then is calls the project specific loop function.
 */
void itsdk_loop() {
 801c28c:	b580      	push	{r7, lr}
 801c28e:	af00      	add	r7, sp, #0

    #if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
	#if ITSDK_TIMER_SLOTS > 0
	   itsdk_stimer_run();
 801c290:	f000 fd64 	bl	801cd5c <itsdk_stimer_run>
	#endif
	#if ITSDK_SHEDULER_TASKS > 0
	   itdt_sched_execute();
 801c294:	f000 fa82 	bl	801c79c <itdt_sched_execute>
	   accel_process_loop();
    #endif
	#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE
	   gnss_process_loop(BOOL_FALSE);
	#endif
	project_loop();
 801c298:	f7e7 f84c 	bl	8003334 <project_loop>
	#if ITSDK_WITH_CONSOLE == __ENABLE
	   itsdk_console_loop();
 801c29c:	f7fc f8ec 	bl	8018478 <itsdk_console_loop>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
		if ( itsdk_stimer_isLowPowerSwitchAutorized() ) {
 801c2a0:	f000 fcf2 	bl	801cc88 <itsdk_stimer_isLowPowerSwitchAutorized>
 801c2a4:	1e03      	subs	r3, r0, #0
 801c2a6:	d001      	beq.n	801c2ac <itsdk_loop+0x20>
	#endif
			lowPower_switch();
 801c2a8:	f7ff ff78 	bl	801c19c <lowPower_switch>
	#if ITSDK_TIMER_SLOTS > 0
		}
	#endif
}
 801c2ac:	46c0      	nop			; (mov r8, r8)
 801c2ae:	46bd      	mov	sp, r7
 801c2b0:	bd80      	pop	{r7, pc}
	...

0801c2b4 <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 801c2b4:	b580      	push	{r7, lr}
 801c2b6:	b086      	sub	sp, #24
 801c2b8:	af00      	add	r7, sp, #0
 801c2ba:	6078      	str	r0, [r7, #4]
 801c2bc:	000a      	movs	r2, r1
 801c2be:	1cbb      	adds	r3, r7, #2
 801c2c0:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 801c2c2:	2301      	movs	r3, #1
 801c2c4:	425b      	negs	r3, r3
 801c2c6:	617b      	str	r3, [r7, #20]
  while (length--) {
 801c2c8:	e039      	b.n	801c33e <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	1c5a      	adds	r2, r3, #1
 801c2ce:	607a      	str	r2, [r7, #4]
 801c2d0:	220e      	movs	r2, #14
 801c2d2:	18ba      	adds	r2, r7, r2
 801c2d4:	781b      	ldrb	r3, [r3, #0]
 801c2d6:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 801c2d8:	2380      	movs	r3, #128	; 0x80
 801c2da:	613b      	str	r3, [r7, #16]
 801c2dc:	e02c      	b.n	801c338 <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 801c2de:	697b      	ldr	r3, [r7, #20]
 801c2e0:	0fdb      	lsrs	r3, r3, #31
 801c2e2:	07da      	lsls	r2, r3, #31
 801c2e4:	230f      	movs	r3, #15
 801c2e6:	18fb      	adds	r3, r7, r3
 801c2e8:	1e51      	subs	r1, r2, #1
 801c2ea:	418a      	sbcs	r2, r1
 801c2ec:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 801c2ee:	230e      	movs	r3, #14
 801c2f0:	18fb      	adds	r3, r7, r3
 801c2f2:	781b      	ldrb	r3, [r3, #0]
 801c2f4:	693a      	ldr	r2, [r7, #16]
 801c2f6:	4013      	ands	r3, r2
 801c2f8:	d00f      	beq.n	801c31a <itsdk_computeCRC32+0x66>
        bit = !bit;
 801c2fa:	210f      	movs	r1, #15
 801c2fc:	187b      	adds	r3, r7, r1
 801c2fe:	781b      	ldrb	r3, [r3, #0]
 801c300:	1e5a      	subs	r2, r3, #1
 801c302:	4193      	sbcs	r3, r2
 801c304:	b2db      	uxtb	r3, r3
 801c306:	2201      	movs	r2, #1
 801c308:	4053      	eors	r3, r2
 801c30a:	b2db      	uxtb	r3, r3
 801c30c:	001a      	movs	r2, r3
 801c30e:	187b      	adds	r3, r7, r1
 801c310:	701a      	strb	r2, [r3, #0]
 801c312:	781a      	ldrb	r2, [r3, #0]
 801c314:	2101      	movs	r1, #1
 801c316:	400a      	ands	r2, r1
 801c318:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	005b      	lsls	r3, r3, #1
 801c31e:	617b      	str	r3, [r7, #20]
      if (bit) {
 801c320:	230f      	movs	r3, #15
 801c322:	18fb      	adds	r3, r7, r3
 801c324:	781b      	ldrb	r3, [r3, #0]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d003      	beq.n	801c332 <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 801c32a:	697b      	ldr	r3, [r7, #20]
 801c32c:	4a0a      	ldr	r2, [pc, #40]	; (801c358 <itsdk_computeCRC32+0xa4>)
 801c32e:	4053      	eors	r3, r2
 801c330:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 801c332:	693b      	ldr	r3, [r7, #16]
 801c334:	085b      	lsrs	r3, r3, #1
 801c336:	613b      	str	r3, [r7, #16]
 801c338:	693b      	ldr	r3, [r7, #16]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d1cf      	bne.n	801c2de <itsdk_computeCRC32+0x2a>
  while (length--) {
 801c33e:	1cbb      	adds	r3, r7, #2
 801c340:	881b      	ldrh	r3, [r3, #0]
 801c342:	1cba      	adds	r2, r7, #2
 801c344:	1e59      	subs	r1, r3, #1
 801c346:	8011      	strh	r1, [r2, #0]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d1be      	bne.n	801c2ca <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 801c34c:	697b      	ldr	r3, [r7, #20]
}
 801c34e:	0018      	movs	r0, r3
 801c350:	46bd      	mov	sp, r7
 801c352:	b006      	add	sp, #24
 801c354:	bd80      	pop	{r7, pc}
 801c356:	46c0      	nop			; (mov r8, r8)
 801c358:	04c11db7 	.word	0x04c11db7

0801c35c <itdt_convertNumChar2Int>:
}

/* -----------------------------------------------------------
 * Convert 0-9 char to 0-9 value
 */
uint8_t itdt_convertNumChar2Int(char c) {
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b082      	sub	sp, #8
 801c360:	af00      	add	r7, sp, #0
 801c362:	0002      	movs	r2, r0
 801c364:	1dfb      	adds	r3, r7, #7
 801c366:	701a      	strb	r2, [r3, #0]
	  if ( c >= '0' && c <= '9' ) return c-'0';
 801c368:	1dfb      	adds	r3, r7, #7
 801c36a:	781b      	ldrb	r3, [r3, #0]
 801c36c:	2b2f      	cmp	r3, #47	; 0x2f
 801c36e:	d908      	bls.n	801c382 <itdt_convertNumChar2Int+0x26>
 801c370:	1dfb      	adds	r3, r7, #7
 801c372:	781b      	ldrb	r3, [r3, #0]
 801c374:	2b39      	cmp	r3, #57	; 0x39
 801c376:	d804      	bhi.n	801c382 <itdt_convertNumChar2Int+0x26>
 801c378:	1dfb      	adds	r3, r7, #7
 801c37a:	781b      	ldrb	r3, [r3, #0]
 801c37c:	3b30      	subs	r3, #48	; 0x30
 801c37e:	b2db      	uxtb	r3, r3
 801c380:	e000      	b.n	801c384 <itdt_convertNumChar2Int+0x28>
	  return 0xFF;
 801c382:	23ff      	movs	r3, #255	; 0xff
}
 801c384:	0018      	movs	r0, r3
 801c386:	46bd      	mov	sp, r7
 801c388:	b002      	add	sp, #8
 801c38a:	bd80      	pop	{r7, pc}

0801c38c <itdt_convertHexChar2HalfInt>:

/* -----------------------------------------------------------
 * Convert a 0-F char to a 0-16 value
 */
uint8_t itdt_convertHexChar2HalfInt(char c) {
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b082      	sub	sp, #8
 801c390:	af00      	add	r7, sp, #0
 801c392:	0002      	movs	r2, r0
 801c394:	1dfb      	adds	r3, r7, #7
 801c396:	701a      	strb	r2, [r3, #0]
  if ( c >= '0' && c <= '9' ) return c-'0';
 801c398:	1dfb      	adds	r3, r7, #7
 801c39a:	781b      	ldrb	r3, [r3, #0]
 801c39c:	2b2f      	cmp	r3, #47	; 0x2f
 801c39e:	d908      	bls.n	801c3b2 <itdt_convertHexChar2HalfInt+0x26>
 801c3a0:	1dfb      	adds	r3, r7, #7
 801c3a2:	781b      	ldrb	r3, [r3, #0]
 801c3a4:	2b39      	cmp	r3, #57	; 0x39
 801c3a6:	d804      	bhi.n	801c3b2 <itdt_convertHexChar2HalfInt+0x26>
 801c3a8:	1dfb      	adds	r3, r7, #7
 801c3aa:	781b      	ldrb	r3, [r3, #0]
 801c3ac:	3b30      	subs	r3, #48	; 0x30
 801c3ae:	b2db      	uxtb	r3, r3
 801c3b0:	e01a      	b.n	801c3e8 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'a' && c <= 'f' ) return 10+c-'a';
 801c3b2:	1dfb      	adds	r3, r7, #7
 801c3b4:	781b      	ldrb	r3, [r3, #0]
 801c3b6:	2b60      	cmp	r3, #96	; 0x60
 801c3b8:	d908      	bls.n	801c3cc <itdt_convertHexChar2HalfInt+0x40>
 801c3ba:	1dfb      	adds	r3, r7, #7
 801c3bc:	781b      	ldrb	r3, [r3, #0]
 801c3be:	2b66      	cmp	r3, #102	; 0x66
 801c3c0:	d804      	bhi.n	801c3cc <itdt_convertHexChar2HalfInt+0x40>
 801c3c2:	1dfb      	adds	r3, r7, #7
 801c3c4:	781b      	ldrb	r3, [r3, #0]
 801c3c6:	3b57      	subs	r3, #87	; 0x57
 801c3c8:	b2db      	uxtb	r3, r3
 801c3ca:	e00d      	b.n	801c3e8 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'A' && c <= 'F' ) return 10+c-'A';
 801c3cc:	1dfb      	adds	r3, r7, #7
 801c3ce:	781b      	ldrb	r3, [r3, #0]
 801c3d0:	2b40      	cmp	r3, #64	; 0x40
 801c3d2:	d908      	bls.n	801c3e6 <itdt_convertHexChar2HalfInt+0x5a>
 801c3d4:	1dfb      	adds	r3, r7, #7
 801c3d6:	781b      	ldrb	r3, [r3, #0]
 801c3d8:	2b46      	cmp	r3, #70	; 0x46
 801c3da:	d804      	bhi.n	801c3e6 <itdt_convertHexChar2HalfInt+0x5a>
 801c3dc:	1dfb      	adds	r3, r7, #7
 801c3de:	781b      	ldrb	r3, [r3, #0]
 801c3e0:	3b37      	subs	r3, #55	; 0x37
 801c3e2:	b2db      	uxtb	r3, r3
 801c3e4:	e000      	b.n	801c3e8 <itdt_convertHexChar2HalfInt+0x5c>
  return 0;
 801c3e6:	2300      	movs	r3, #0
}
 801c3e8:	0018      	movs	r0, r3
 801c3ea:	46bd      	mov	sp, r7
 801c3ec:	b002      	add	sp, #8
 801c3ee:	bd80      	pop	{r7, pc}

0801c3f0 <itdt_convertHexChar2Int>:
}

/* -----------------------------------------------------------
 * Convert a "0"-"FF" value to 0-255 uint8_t value
 */
uint8_t itdt_convertHexChar2Int(char * v) {
 801c3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3f2:	b085      	sub	sp, #20
 801c3f4:	af00      	add	r7, sp, #0
 801c3f6:	6078      	str	r0, [r7, #4]
  uint8_t q0 = itdt_convertHexChar2HalfInt(v[0]);
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	781b      	ldrb	r3, [r3, #0]
 801c3fc:	250f      	movs	r5, #15
 801c3fe:	197c      	adds	r4, r7, r5
 801c400:	0018      	movs	r0, r3
 801c402:	f7ff ffc3 	bl	801c38c <itdt_convertHexChar2HalfInt>
 801c406:	0003      	movs	r3, r0
 801c408:	7023      	strb	r3, [r4, #0]
  uint8_t q1 = itdt_convertHexChar2HalfInt(v[1]);
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	3301      	adds	r3, #1
 801c40e:	781b      	ldrb	r3, [r3, #0]
 801c410:	260e      	movs	r6, #14
 801c412:	19bc      	adds	r4, r7, r6
 801c414:	0018      	movs	r0, r3
 801c416:	f7ff ffb9 	bl	801c38c <itdt_convertHexChar2HalfInt>
 801c41a:	0003      	movs	r3, r0
 801c41c:	7023      	strb	r3, [r4, #0]
  return (q0*16)+q1;
 801c41e:	197b      	adds	r3, r7, r5
 801c420:	781b      	ldrb	r3, [r3, #0]
 801c422:	011b      	lsls	r3, r3, #4
 801c424:	b2da      	uxtb	r2, r3
 801c426:	19bb      	adds	r3, r7, r6
 801c428:	781b      	ldrb	r3, [r3, #0]
 801c42a:	18d3      	adds	r3, r2, r3
 801c42c:	b2db      	uxtb	r3, r3
}
 801c42e:	0018      	movs	r0, r3
 801c430:	46bd      	mov	sp, r7
 801c432:	b005      	add	sp, #20
 801c434:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c436 <itdt_convertHexChar4Int>:
}

/* -----------------------------------------------------------
 *  Convert a 16bit hex string value into uint16_t value
 */
uint16_t itdt_convertHexChar4Int(char * v) {
 801c436:	b590      	push	{r4, r7, lr}
 801c438:	b085      	sub	sp, #20
 801c43a:	af00      	add	r7, sp, #0
 801c43c:	6078      	str	r0, [r7, #4]
  uint16_t ret = itdt_convertHexChar2Int(&v[0]);
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	0018      	movs	r0, r3
 801c442:	f7ff ffd5 	bl	801c3f0 <itdt_convertHexChar2Int>
 801c446:	0003      	movs	r3, r0
 801c448:	001a      	movs	r2, r3
 801c44a:	240e      	movs	r4, #14
 801c44c:	193b      	adds	r3, r7, r4
 801c44e:	801a      	strh	r2, [r3, #0]
  ret <<= 8;
 801c450:	193b      	adds	r3, r7, r4
 801c452:	193a      	adds	r2, r7, r4
 801c454:	8812      	ldrh	r2, [r2, #0]
 801c456:	0212      	lsls	r2, r2, #8
 801c458:	801a      	strh	r2, [r3, #0]
  ret += itdt_convertHexChar2Int(&v[2]);
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	3302      	adds	r3, #2
 801c45e:	0018      	movs	r0, r3
 801c460:	f7ff ffc6 	bl	801c3f0 <itdt_convertHexChar2Int>
 801c464:	0003      	movs	r3, r0
 801c466:	b299      	uxth	r1, r3
 801c468:	193b      	adds	r3, r7, r4
 801c46a:	193a      	adds	r2, r7, r4
 801c46c:	8812      	ldrh	r2, [r2, #0]
 801c46e:	188a      	adds	r2, r1, r2
 801c470:	801a      	strh	r2, [r3, #0]
  return ret;
 801c472:	193b      	adds	r3, r7, r4
 801c474:	881b      	ldrh	r3, [r3, #0]
}
 801c476:	0018      	movs	r0, r3
 801c478:	46bd      	mov	sp, r7
 801c47a:	b005      	add	sp, #20
 801c47c:	bd90      	pop	{r4, r7, pc}
	...

0801c480 <itdt_convertDecCharNInt>:

/**
 * Convert a signed decimal number from a string to
 * an Int32 value.
 */
int32_t itdt_convertDecCharNInt(char * v, int sz) {
 801c480:	b5b0      	push	{r4, r5, r7, lr}
 801c482:	b086      	sub	sp, #24
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
 801c488:	6039      	str	r1, [r7, #0]
	int sign = 1;
 801c48a:	2301      	movs	r3, #1
 801c48c:	617b      	str	r3, [r7, #20]
	if ( *v == '-' ) {
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	781b      	ldrb	r3, [r3, #0]
 801c492:	2b2d      	cmp	r3, #45	; 0x2d
 801c494:	d108      	bne.n	801c4a8 <itdt_convertDecCharNInt+0x28>
	   sign = -1;
 801c496:	2301      	movs	r3, #1
 801c498:	425b      	negs	r3, r3
 801c49a:	617b      	str	r3, [r7, #20]
	   v++;
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	3301      	adds	r3, #1
 801c4a0:	607b      	str	r3, [r7, #4]
	   sz--;
 801c4a2:	683b      	ldr	r3, [r7, #0]
 801c4a4:	3b01      	subs	r3, #1
 801c4a6:	603b      	str	r3, [r7, #0]
	}
	uint16_t ret = 0;
 801c4a8:	2312      	movs	r3, #18
 801c4aa:	18fb      	adds	r3, r7, r3
 801c4ac:	2200      	movs	r2, #0
 801c4ae:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	60fb      	str	r3, [r7, #12]
 801c4b4:	e027      	b.n	801c506 <itdt_convertDecCharNInt+0x86>
	  ret *= 10;
 801c4b6:	2312      	movs	r3, #18
 801c4b8:	18fa      	adds	r2, r7, r3
 801c4ba:	18fb      	adds	r3, r7, r3
 801c4bc:	881b      	ldrh	r3, [r3, #0]
 801c4be:	1c19      	adds	r1, r3, #0
 801c4c0:	0089      	lsls	r1, r1, #2
 801c4c2:	18cb      	adds	r3, r1, r3
 801c4c4:	18db      	adds	r3, r3, r3
 801c4c6:	8013      	strh	r3, [r2, #0]
	  uint8_t c = itdt_convertNumChar2Int(*v);
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	781b      	ldrb	r3, [r3, #0]
 801c4cc:	250b      	movs	r5, #11
 801c4ce:	197c      	adds	r4, r7, r5
 801c4d0:	0018      	movs	r0, r3
 801c4d2:	f7ff ff43 	bl	801c35c <itdt_convertNumChar2Int>
 801c4d6:	0003      	movs	r3, r0
 801c4d8:	7023      	strb	r3, [r4, #0]
	  if ( c == 0xFF ) return ITSDK_INVALID_VALUE_32B;
 801c4da:	197b      	adds	r3, r7, r5
 801c4dc:	781b      	ldrb	r3, [r3, #0]
 801c4de:	2bff      	cmp	r3, #255	; 0xff
 801c4e0:	d101      	bne.n	801c4e6 <itdt_convertDecCharNInt+0x66>
 801c4e2:	4b12      	ldr	r3, [pc, #72]	; (801c52c <itdt_convertDecCharNInt+0xac>)
 801c4e4:	e01d      	b.n	801c522 <itdt_convertDecCharNInt+0xa2>
	  v++;
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	3301      	adds	r3, #1
 801c4ea:	607b      	str	r3, [r7, #4]
	  ret+= c;
 801c4ec:	230b      	movs	r3, #11
 801c4ee:	18fb      	adds	r3, r7, r3
 801c4f0:	781b      	ldrb	r3, [r3, #0]
 801c4f2:	b299      	uxth	r1, r3
 801c4f4:	2212      	movs	r2, #18
 801c4f6:	18bb      	adds	r3, r7, r2
 801c4f8:	18ba      	adds	r2, r7, r2
 801c4fa:	8812      	ldrh	r2, [r2, #0]
 801c4fc:	188a      	adds	r2, r1, r2
 801c4fe:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	3301      	adds	r3, #1
 801c504:	60fb      	str	r3, [r7, #12]
 801c506:	68fa      	ldr	r2, [r7, #12]
 801c508:	683b      	ldr	r3, [r7, #0]
 801c50a:	429a      	cmp	r2, r3
 801c50c:	dbd3      	blt.n	801c4b6 <itdt_convertDecCharNInt+0x36>
	 }
	 ret *= sign;
 801c50e:	697b      	ldr	r3, [r7, #20]
 801c510:	b29a      	uxth	r2, r3
 801c512:	2012      	movs	r0, #18
 801c514:	183b      	adds	r3, r7, r0
 801c516:	1839      	adds	r1, r7, r0
 801c518:	8809      	ldrh	r1, [r1, #0]
 801c51a:	434a      	muls	r2, r1
 801c51c:	801a      	strh	r2, [r3, #0]
	 return ret;
 801c51e:	183b      	adds	r3, r7, r0
 801c520:	881b      	ldrh	r3, [r3, #0]
}
 801c522:	0018      	movs	r0, r3
 801c524:	46bd      	mov	sp, r7
 801c526:	b006      	add	sp, #24
 801c528:	bdb0      	pop	{r4, r5, r7, pc}
 801c52a:	46c0      	nop			; (mov r8, r8)
 801c52c:	0fffffff 	.word	0x0fffffff

0801c530 <itdt_isHexChar>:
}

/* ----------------------------------------------------------
 * Verify a char is an Hex Char
 */
bool itdt_isHexChar(char c, bool upper) {
 801c530:	b580      	push	{r7, lr}
 801c532:	b082      	sub	sp, #8
 801c534:	af00      	add	r7, sp, #0
 801c536:	0002      	movs	r2, r0
 801c538:	1dfb      	adds	r3, r7, #7
 801c53a:	701a      	strb	r2, [r3, #0]
 801c53c:	1dbb      	adds	r3, r7, #6
 801c53e:	1c0a      	adds	r2, r1, #0
 801c540:	701a      	strb	r2, [r3, #0]
  if (    (c >= '0' && c <= '9' )
 801c542:	1dfb      	adds	r3, r7, #7
 801c544:	781b      	ldrb	r3, [r3, #0]
 801c546:	2b2f      	cmp	r3, #47	; 0x2f
 801c548:	d903      	bls.n	801c552 <itdt_isHexChar+0x22>
 801c54a:	1dfb      	adds	r3, r7, #7
 801c54c:	781b      	ldrb	r3, [r3, #0]
 801c54e:	2b39      	cmp	r3, #57	; 0x39
 801c550:	d916      	bls.n	801c580 <itdt_isHexChar+0x50>
       || (c >= 'A' && c <= 'F' )
 801c552:	1dfb      	adds	r3, r7, #7
 801c554:	781b      	ldrb	r3, [r3, #0]
 801c556:	2b40      	cmp	r3, #64	; 0x40
 801c558:	d903      	bls.n	801c562 <itdt_isHexChar+0x32>
 801c55a:	1dfb      	adds	r3, r7, #7
 801c55c:	781b      	ldrb	r3, [r3, #0]
 801c55e:	2b46      	cmp	r3, #70	; 0x46
 801c560:	d90e      	bls.n	801c580 <itdt_isHexChar+0x50>
     || (!upper   && c >= 'a' && c <= 'f')
 801c562:	1dbb      	adds	r3, r7, #6
 801c564:	781b      	ldrb	r3, [r3, #0]
 801c566:	2201      	movs	r2, #1
 801c568:	4053      	eors	r3, r2
 801c56a:	b2db      	uxtb	r3, r3
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d009      	beq.n	801c584 <itdt_isHexChar+0x54>
 801c570:	1dfb      	adds	r3, r7, #7
 801c572:	781b      	ldrb	r3, [r3, #0]
 801c574:	2b60      	cmp	r3, #96	; 0x60
 801c576:	d905      	bls.n	801c584 <itdt_isHexChar+0x54>
 801c578:	1dfb      	adds	r3, r7, #7
 801c57a:	781b      	ldrb	r3, [r3, #0]
 801c57c:	2b66      	cmp	r3, #102	; 0x66
 801c57e:	d801      	bhi.n	801c584 <itdt_isHexChar+0x54>
    ) {
    return true;
 801c580:	2301      	movs	r3, #1
 801c582:	e000      	b.n	801c586 <itdt_isHexChar+0x56>
  }
  return false;
 801c584:	2300      	movs	r3, #0
}
 801c586:	0018      	movs	r0, r3
 801c588:	46bd      	mov	sp, r7
 801c58a:	b002      	add	sp, #8
 801c58c:	bd80      	pop	{r7, pc}

0801c58e <itdt_isHexString>:

/* ----------------------------------------------------------
 * Verify a string is a valid Hex string with given size
 */
bool itdt_isHexString(char * str,int n,itsdk_bool_e upper) {
 801c58e:	b580      	push	{r7, lr}
 801c590:	b086      	sub	sp, #24
 801c592:	af00      	add	r7, sp, #0
 801c594:	60f8      	str	r0, [r7, #12]
 801c596:	60b9      	str	r1, [r7, #8]
 801c598:	1dfb      	adds	r3, r7, #7
 801c59a:	701a      	strb	r2, [r3, #0]
  int i = 0;
 801c59c:	2300      	movs	r3, #0
 801c59e:	617b      	str	r3, [r7, #20]
  while ( i < n && str[i] != 0 ) {
 801c5a0:	e02d      	b.n	801c5fe <itdt_isHexString+0x70>
    if (    (str[i] >= '0' && str[i] <= '9' )
 801c5a2:	697b      	ldr	r3, [r7, #20]
 801c5a4:	68fa      	ldr	r2, [r7, #12]
 801c5a6:	18d3      	adds	r3, r2, r3
 801c5a8:	781b      	ldrb	r3, [r3, #0]
 801c5aa:	2b2f      	cmp	r3, #47	; 0x2f
 801c5ac:	d905      	bls.n	801c5ba <itdt_isHexString+0x2c>
 801c5ae:	697b      	ldr	r3, [r7, #20]
 801c5b0:	68fa      	ldr	r2, [r7, #12]
 801c5b2:	18d3      	adds	r3, r2, r3
 801c5b4:	781b      	ldrb	r3, [r3, #0]
 801c5b6:	2b39      	cmp	r3, #57	; 0x39
 801c5b8:	d91b      	bls.n	801c5f2 <itdt_isHexString+0x64>
       || (str[i] >= 'A' && str[i] <= 'F' )
 801c5ba:	697b      	ldr	r3, [r7, #20]
 801c5bc:	68fa      	ldr	r2, [r7, #12]
 801c5be:	18d3      	adds	r3, r2, r3
 801c5c0:	781b      	ldrb	r3, [r3, #0]
 801c5c2:	2b40      	cmp	r3, #64	; 0x40
 801c5c4:	d905      	bls.n	801c5d2 <itdt_isHexString+0x44>
 801c5c6:	697b      	ldr	r3, [r7, #20]
 801c5c8:	68fa      	ldr	r2, [r7, #12]
 801c5ca:	18d3      	adds	r3, r2, r3
 801c5cc:	781b      	ldrb	r3, [r3, #0]
 801c5ce:	2b46      	cmp	r3, #70	; 0x46
 801c5d0:	d90f      	bls.n	801c5f2 <itdt_isHexString+0x64>
       || (!upper && str[i] >= 'a' && str[i] <= 'f')
 801c5d2:	1dfb      	adds	r3, r7, #7
 801c5d4:	781b      	ldrb	r3, [r3, #0]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d10f      	bne.n	801c5fa <itdt_isHexString+0x6c>
 801c5da:	697b      	ldr	r3, [r7, #20]
 801c5dc:	68fa      	ldr	r2, [r7, #12]
 801c5de:	18d3      	adds	r3, r2, r3
 801c5e0:	781b      	ldrb	r3, [r3, #0]
 801c5e2:	2b60      	cmp	r3, #96	; 0x60
 801c5e4:	d909      	bls.n	801c5fa <itdt_isHexString+0x6c>
 801c5e6:	697b      	ldr	r3, [r7, #20]
 801c5e8:	68fa      	ldr	r2, [r7, #12]
 801c5ea:	18d3      	adds	r3, r2, r3
 801c5ec:	781b      	ldrb	r3, [r3, #0]
 801c5ee:	2b66      	cmp	r3, #102	; 0x66
 801c5f0:	d803      	bhi.n	801c5fa <itdt_isHexString+0x6c>
       ) {
      i++;
 801c5f2:	697b      	ldr	r3, [r7, #20]
 801c5f4:	3301      	adds	r3, #1
 801c5f6:	617b      	str	r3, [r7, #20]
 801c5f8:	e001      	b.n	801c5fe <itdt_isHexString+0x70>
    } else {
      return false;
 801c5fa:	2300      	movs	r3, #0
 801c5fc:	e00f      	b.n	801c61e <itdt_isHexString+0x90>
  while ( i < n && str[i] != 0 ) {
 801c5fe:	697a      	ldr	r2, [r7, #20]
 801c600:	68bb      	ldr	r3, [r7, #8]
 801c602:	429a      	cmp	r2, r3
 801c604:	da05      	bge.n	801c612 <itdt_isHexString+0x84>
 801c606:	697b      	ldr	r3, [r7, #20]
 801c608:	68fa      	ldr	r2, [r7, #12]
 801c60a:	18d3      	adds	r3, r2, r3
 801c60c:	781b      	ldrb	r3, [r3, #0]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d1c7      	bne.n	801c5a2 <itdt_isHexString+0x14>
    }
  }
  return ( i == n )?true:false;
 801c612:	697a      	ldr	r2, [r7, #20]
 801c614:	68bb      	ldr	r3, [r7, #8]
 801c616:	1ad3      	subs	r3, r2, r3
 801c618:	425a      	negs	r2, r3
 801c61a:	4153      	adcs	r3, r2
 801c61c:	b2db      	uxtb	r3, r3
}
 801c61e:	0018      	movs	r0, r3
 801c620:	46bd      	mov	sp, r7
 801c622:	b006      	add	sp, #24
 801c624:	bd80      	pop	{r7, pc}

0801c626 <itdt_count_bits_1>:


/* ---------------------------------------------------
 * Count the number of bit at 1 in a given word
 */
uint8_t itdt_count_bits_1(uint32_t v) {
 801c626:	b580      	push	{r7, lr}
 801c628:	b084      	sub	sp, #16
 801c62a:	af00      	add	r7, sp, #0
 801c62c:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 801c62e:	230f      	movs	r3, #15
 801c630:	18fb      	adds	r3, r7, r3
 801c632:	2200      	movs	r2, #0
 801c634:	701a      	strb	r2, [r3, #0]
	while ( v > 0 ) {
 801c636:	e00c      	b.n	801c652 <itdt_count_bits_1+0x2c>
		if ( v & 1 ) ret++;
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	2201      	movs	r2, #1
 801c63c:	4013      	ands	r3, r2
 801c63e:	d005      	beq.n	801c64c <itdt_count_bits_1+0x26>
 801c640:	210f      	movs	r1, #15
 801c642:	187b      	adds	r3, r7, r1
 801c644:	781a      	ldrb	r2, [r3, #0]
 801c646:	187b      	adds	r3, r7, r1
 801c648:	3201      	adds	r2, #1
 801c64a:	701a      	strb	r2, [r3, #0]
		v >>= 1;
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	085b      	lsrs	r3, r3, #1
 801c650:	607b      	str	r3, [r7, #4]
	while ( v > 0 ) {
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d1ef      	bne.n	801c638 <itdt_count_bits_1+0x12>
	}
	return ret;
 801c658:	230f      	movs	r3, #15
 801c65a:	18fb      	adds	r3, r7, r3
 801c65c:	781b      	ldrb	r3, [r3, #0]
}
 801c65e:	0018      	movs	r0, r3
 801c660:	46bd      	mov	sp, r7
 801c662:	b004      	add	sp, #16
 801c664:	bd80      	pop	{r7, pc}
	...

0801c668 <itdt_sched_registerSched>:
/**
 * Register a new task in the scheduler with the given period in Ms and the
 * associated function to call. The mode params defines the scheduler behavior
 * Returns the scedId on success or ITSDK_SCHED_ERROR on error.
 */
uint8_t itdt_sched_registerSched(uint32_t periodMs,uint16_t mode, void (*f)(void)) {
 801c668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c66a:	b085      	sub	sp, #20
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	60f8      	str	r0, [r7, #12]
 801c670:	607a      	str	r2, [r7, #4]
 801c672:	230a      	movs	r3, #10
 801c674:	18fb      	adds	r3, r7, r3
 801c676:	1c0a      	adds	r2, r1, #0
 801c678:	801a      	strh	r2, [r3, #0]

	if ( periodMs > ITSDK_SCHED_MAX_PERIOD ) {
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	4a43      	ldr	r2, [pc, #268]	; (801c78c <itdt_sched_registerSched+0x124>)
 801c67e:	4293      	cmp	r3, r2
 801c680:	d906      	bls.n	801c690 <itdt_sched_registerSched+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_SCHED_DURATION_OVERFLOW,0);
 801c682:	4b43      	ldr	r3, [pc, #268]	; (801c790 <itdt_sched_registerSched+0x128>)
 801c684:	2100      	movs	r1, #0
 801c686:	0018      	movs	r0, r3
 801c688:	f7fe ffa4 	bl	801b5d4 <itsdk_error_report>
		return ITSDK_SCHED_ERROR;
 801c68c:	23ff      	movs	r3, #255	; 0xff
 801c68e:	e079      	b.n	801c784 <itdt_sched_registerSched+0x11c>
	}
	if ( __sNum < ITSDK_SHEDULER_TASKS ) {
 801c690:	4b40      	ldr	r3, [pc, #256]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c692:	781b      	ldrb	r3, [r3, #0]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d174      	bne.n	801c782 <itdt_sched_registerSched+0x11a>
		__scheds[__sNum].func=f;
 801c698:	4b3e      	ldr	r3, [pc, #248]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c69a:	781b      	ldrb	r3, [r3, #0]
 801c69c:	4a3e      	ldr	r2, [pc, #248]	; (801c798 <itdt_sched_registerSched+0x130>)
 801c69e:	011b      	lsls	r3, r3, #4
 801c6a0:	18d3      	adds	r3, r2, r3
 801c6a2:	330c      	adds	r3, #12
 801c6a4:	687a      	ldr	r2, [r7, #4]
 801c6a6:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].period=periodMs;
 801c6a8:	4b3a      	ldr	r3, [pc, #232]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c6aa:	781b      	ldrb	r3, [r3, #0]
 801c6ac:	001e      	movs	r6, r3
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	021b      	lsls	r3, r3, #8
 801c6b2:	0a1a      	lsrs	r2, r3, #8
 801c6b4:	4938      	ldr	r1, [pc, #224]	; (801c798 <itdt_sched_registerSched+0x130>)
 801c6b6:	2008      	movs	r0, #8
 801c6b8:	0133      	lsls	r3, r6, #4
 801c6ba:	18cb      	adds	r3, r1, r3
 801c6bc:	181b      	adds	r3, r3, r0
 801c6be:	0212      	lsls	r2, r2, #8
 801c6c0:	0a12      	lsrs	r2, r2, #8
 801c6c2:	6819      	ldr	r1, [r3, #0]
 801c6c4:	0e09      	lsrs	r1, r1, #24
 801c6c6:	0609      	lsls	r1, r1, #24
 801c6c8:	430a      	orrs	r2, r1
 801c6ca:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].nextRun=(mode & ITSDK_SCHED_CONF_IMMEDIATE)?itsdk_time_get_ms():itsdk_time_get_ms()+periodMs;
 801c6cc:	230a      	movs	r3, #10
 801c6ce:	18fb      	adds	r3, r7, r3
 801c6d0:	881a      	ldrh	r2, [r3, #0]
 801c6d2:	2380      	movs	r3, #128	; 0x80
 801c6d4:	005b      	lsls	r3, r3, #1
 801c6d6:	4013      	ands	r3, r2
 801c6d8:	d004      	beq.n	801c6e4 <itdt_sched_registerSched+0x7c>
 801c6da:	f000 f9f5 	bl	801cac8 <itsdk_time_get_ms>
 801c6de:	0003      	movs	r3, r0
 801c6e0:	000c      	movs	r4, r1
 801c6e2:	e00b      	b.n	801c6fc <itdt_sched_registerSched+0x94>
 801c6e4:	f000 f9f0 	bl	801cac8 <itsdk_time_get_ms>
 801c6e8:	0002      	movs	r2, r0
 801c6ea:	000b      	movs	r3, r1
 801c6ec:	68f9      	ldr	r1, [r7, #12]
 801c6ee:	000c      	movs	r4, r1
 801c6f0:	2100      	movs	r1, #0
 801c6f2:	000d      	movs	r5, r1
 801c6f4:	1912      	adds	r2, r2, r4
 801c6f6:	416b      	adcs	r3, r5
 801c6f8:	001c      	movs	r4, r3
 801c6fa:	0013      	movs	r3, r2
 801c6fc:	4a25      	ldr	r2, [pc, #148]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c6fe:	7812      	ldrb	r2, [r2, #0]
 801c700:	4925      	ldr	r1, [pc, #148]	; (801c798 <itdt_sched_registerSched+0x130>)
 801c702:	0112      	lsls	r2, r2, #4
 801c704:	188a      	adds	r2, r1, r2
 801c706:	6013      	str	r3, [r2, #0]
 801c708:	6054      	str	r4, [r2, #4]
		__scheds[__sNum].halt=(mode & ITSDK_SCHED_CONF_HALT)?1:0;
 801c70a:	250a      	movs	r5, #10
 801c70c:	197b      	adds	r3, r7, r5
 801c70e:	881b      	ldrh	r3, [r3, #0]
 801c710:	105a      	asrs	r2, r3, #1
 801c712:	4b20      	ldr	r3, [pc, #128]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c714:	781b      	ldrb	r3, [r3, #0]
 801c716:	001c      	movs	r4, r3
 801c718:	2301      	movs	r3, #1
 801c71a:	4013      	ands	r3, r2
 801c71c:	b2da      	uxtb	r2, r3
 801c71e:	491e      	ldr	r1, [pc, #120]	; (801c798 <itdt_sched_registerSched+0x130>)
 801c720:	2008      	movs	r0, #8
 801c722:	0123      	lsls	r3, r4, #4
 801c724:	18cb      	adds	r3, r1, r3
 801c726:	181b      	adds	r3, r3, r0
 801c728:	2101      	movs	r1, #1
 801c72a:	400a      	ands	r2, r1
 801c72c:	1890      	adds	r0, r2, r2
 801c72e:	78da      	ldrb	r2, [r3, #3]
 801c730:	2102      	movs	r1, #2
 801c732:	438a      	bics	r2, r1
 801c734:	1c11      	adds	r1, r2, #0
 801c736:	1c02      	adds	r2, r0, #0
 801c738:	430a      	orrs	r2, r1
 801c73a:	70da      	strb	r2, [r3, #3]
		__scheds[__sNum].skip=(mode & ITSDK_SCHED_CONF_SKIP)?1:0;
 801c73c:	4b15      	ldr	r3, [pc, #84]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c73e:	781b      	ldrb	r3, [r3, #0]
 801c740:	001c      	movs	r4, r3
 801c742:	197b      	adds	r3, r7, r5
 801c744:	881b      	ldrh	r3, [r3, #0]
 801c746:	1c1a      	adds	r2, r3, #0
 801c748:	2301      	movs	r3, #1
 801c74a:	4013      	ands	r3, r2
 801c74c:	b2da      	uxtb	r2, r3
 801c74e:	4912      	ldr	r1, [pc, #72]	; (801c798 <itdt_sched_registerSched+0x130>)
 801c750:	2008      	movs	r0, #8
 801c752:	0123      	lsls	r3, r4, #4
 801c754:	18cb      	adds	r3, r1, r3
 801c756:	181b      	adds	r3, r3, r0
 801c758:	2101      	movs	r1, #1
 801c75a:	400a      	ands	r2, r1
 801c75c:	0010      	movs	r0, r2
 801c75e:	78da      	ldrb	r2, [r3, #3]
 801c760:	2101      	movs	r1, #1
 801c762:	438a      	bics	r2, r1
 801c764:	1c11      	adds	r1, r2, #0
 801c766:	1c02      	adds	r2, r0, #0
 801c768:	430a      	orrs	r2, r1
 801c76a:	70da      	strb	r2, [r3, #3]
		__sNum++;
 801c76c:	4b09      	ldr	r3, [pc, #36]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c76e:	781b      	ldrb	r3, [r3, #0]
 801c770:	3301      	adds	r3, #1
 801c772:	b2da      	uxtb	r2, r3
 801c774:	4b07      	ldr	r3, [pc, #28]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c776:	701a      	strb	r2, [r3, #0]
		return __sNum-1;
 801c778:	4b06      	ldr	r3, [pc, #24]	; (801c794 <itdt_sched_registerSched+0x12c>)
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	3b01      	subs	r3, #1
 801c77e:	b2db      	uxtb	r3, r3
 801c780:	e000      	b.n	801c784 <itdt_sched_registerSched+0x11c>
	} else return ITSDK_SCHED_ERROR;
 801c782:	23ff      	movs	r3, #255	; 0xff

}
 801c784:	0018      	movs	r0, r3
 801c786:	46bd      	mov	sp, r7
 801c788:	b005      	add	sp, #20
 801c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c78c:	00ffffff 	.word	0x00ffffff
 801c790:	80000050 	.word	0x80000050
 801c794:	200010bd 	.word	0x200010bd
 801c798:	20001578 	.word	0x20001578

0801c79c <itdt_sched_execute>:

/**
 * Task executor
 */
void itdt_sched_execute() {
 801c79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c79e:	b087      	sub	sp, #28
 801c7a0:	af00      	add	r7, sp, #0

	uint64_t t = itsdk_time_get_ms();
 801c7a2:	f000 f991 	bl	801cac8 <itsdk_time_get_ms>
 801c7a6:	0003      	movs	r3, r0
 801c7a8:	000c      	movs	r4, r1
 801c7aa:	60bb      	str	r3, [r7, #8]
 801c7ac:	60fc      	str	r4, [r7, #12]
	for (int i = 0 ; i < __sNum ; i++) {
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	617b      	str	r3, [r7, #20]
 801c7b2:	e091      	b.n	801c8d8 <itdt_sched_execute+0x13c>
		do {
			if ( __scheds[i].nextRun <= t ) {
 801c7b4:	4a4e      	ldr	r2, [pc, #312]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c7b6:	697b      	ldr	r3, [r7, #20]
 801c7b8:	011b      	lsls	r3, r3, #4
 801c7ba:	18d3      	adds	r3, r2, r3
 801c7bc:	685c      	ldr	r4, [r3, #4]
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	68fa      	ldr	r2, [r7, #12]
 801c7c2:	42a2      	cmp	r2, r4
 801c7c4:	d332      	bcc.n	801c82c <itdt_sched_execute+0x90>
 801c7c6:	68fa      	ldr	r2, [r7, #12]
 801c7c8:	42a2      	cmp	r2, r4
 801c7ca:	d102      	bne.n	801c7d2 <itdt_sched_execute+0x36>
 801c7cc:	68ba      	ldr	r2, [r7, #8]
 801c7ce:	429a      	cmp	r2, r3
 801c7d0:	d32c      	bcc.n	801c82c <itdt_sched_execute+0x90>
	 		    __scheds[i].nextRun += (uint64_t)__scheds[i].period;
 801c7d2:	4a47      	ldr	r2, [pc, #284]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c7d4:	697b      	ldr	r3, [r7, #20]
 801c7d6:	011b      	lsls	r3, r3, #4
 801c7d8:	18d3      	adds	r3, r2, r3
 801c7da:	685c      	ldr	r4, [r3, #4]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	4944      	ldr	r1, [pc, #272]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c7e0:	697a      	ldr	r2, [r7, #20]
 801c7e2:	2008      	movs	r0, #8
 801c7e4:	0112      	lsls	r2, r2, #4
 801c7e6:	188a      	adds	r2, r1, r2
 801c7e8:	1812      	adds	r2, r2, r0
 801c7ea:	6812      	ldr	r2, [r2, #0]
 801c7ec:	0212      	lsls	r2, r2, #8
 801c7ee:	0a12      	lsrs	r2, r2, #8
 801c7f0:	0015      	movs	r5, r2
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	0016      	movs	r6, r2
 801c7f6:	195b      	adds	r3, r3, r5
 801c7f8:	4174      	adcs	r4, r6
 801c7fa:	493d      	ldr	r1, [pc, #244]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c7fc:	697a      	ldr	r2, [r7, #20]
 801c7fe:	0112      	lsls	r2, r2, #4
 801c800:	188a      	adds	r2, r1, r2
 801c802:	6013      	str	r3, [r2, #0]
 801c804:	6054      	str	r4, [r2, #4]
				if ( !__scheds[i].halt ) {
 801c806:	4a3a      	ldr	r2, [pc, #232]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c808:	697b      	ldr	r3, [r7, #20]
 801c80a:	2108      	movs	r1, #8
 801c80c:	011b      	lsls	r3, r3, #4
 801c80e:	18d3      	adds	r3, r2, r3
 801c810:	185b      	adds	r3, r3, r1
 801c812:	78db      	ldrb	r3, [r3, #3]
 801c814:	079b      	lsls	r3, r3, #30
 801c816:	0fdb      	lsrs	r3, r3, #31
 801c818:	b2db      	uxtb	r3, r3
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d106      	bne.n	801c82c <itdt_sched_execute+0x90>
					_LOG_SCHED(("[sched] (%d) exec @%ld\r\n",i,t));
					(*__scheds[i].func)();
 801c81e:	4a34      	ldr	r2, [pc, #208]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c820:	697b      	ldr	r3, [r7, #20]
 801c822:	011b      	lsls	r3, r3, #4
 801c824:	18d3      	adds	r3, r2, r3
 801c826:	330c      	adds	r3, #12
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	4798      	blx	r3
				}
			}
		} while (!__scheds[i].skip && __scheds[i].nextRun <= t );
 801c82c:	4a30      	ldr	r2, [pc, #192]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c82e:	697b      	ldr	r3, [r7, #20]
 801c830:	2108      	movs	r1, #8
 801c832:	011b      	lsls	r3, r3, #4
 801c834:	18d3      	adds	r3, r2, r3
 801c836:	185b      	adds	r3, r3, r1
 801c838:	78db      	ldrb	r3, [r3, #3]
 801c83a:	07db      	lsls	r3, r3, #31
 801c83c:	0fdb      	lsrs	r3, r3, #31
 801c83e:	b2db      	uxtb	r3, r3
 801c840:	2b00      	cmp	r3, #0
 801c842:	d12b      	bne.n	801c89c <itdt_sched_execute+0x100>
 801c844:	4a2a      	ldr	r2, [pc, #168]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c846:	697b      	ldr	r3, [r7, #20]
 801c848:	011b      	lsls	r3, r3, #4
 801c84a:	18d3      	adds	r3, r2, r3
 801c84c:	685c      	ldr	r4, [r3, #4]
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	68fa      	ldr	r2, [r7, #12]
 801c852:	42a2      	cmp	r2, r4
 801c854:	d322      	bcc.n	801c89c <itdt_sched_execute+0x100>
 801c856:	68fa      	ldr	r2, [r7, #12]
 801c858:	42a2      	cmp	r2, r4
 801c85a:	d1ab      	bne.n	801c7b4 <itdt_sched_execute+0x18>
 801c85c:	68ba      	ldr	r2, [r7, #8]
 801c85e:	429a      	cmp	r2, r3
 801c860:	d31c      	bcc.n	801c89c <itdt_sched_execute+0x100>
 801c862:	e7a7      	b.n	801c7b4 <itdt_sched_execute+0x18>
		while (__scheds[i].skip &&__scheds[i].nextRun <= t) __scheds[i].nextRun += __scheds[i].period;
 801c864:	4a22      	ldr	r2, [pc, #136]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c866:	697b      	ldr	r3, [r7, #20]
 801c868:	011b      	lsls	r3, r3, #4
 801c86a:	18d3      	adds	r3, r2, r3
 801c86c:	685c      	ldr	r4, [r3, #4]
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	491f      	ldr	r1, [pc, #124]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c872:	697a      	ldr	r2, [r7, #20]
 801c874:	2008      	movs	r0, #8
 801c876:	0112      	lsls	r2, r2, #4
 801c878:	188a      	adds	r2, r1, r2
 801c87a:	1812      	adds	r2, r2, r0
 801c87c:	6812      	ldr	r2, [r2, #0]
 801c87e:	0212      	lsls	r2, r2, #8
 801c880:	0a12      	lsrs	r2, r2, #8
 801c882:	603a      	str	r2, [r7, #0]
 801c884:	2200      	movs	r2, #0
 801c886:	607a      	str	r2, [r7, #4]
 801c888:	6839      	ldr	r1, [r7, #0]
 801c88a:	687a      	ldr	r2, [r7, #4]
 801c88c:	185b      	adds	r3, r3, r1
 801c88e:	4154      	adcs	r4, r2
 801c890:	4917      	ldr	r1, [pc, #92]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c892:	697a      	ldr	r2, [r7, #20]
 801c894:	0112      	lsls	r2, r2, #4
 801c896:	188a      	adds	r2, r1, r2
 801c898:	6013      	str	r3, [r2, #0]
 801c89a:	6054      	str	r4, [r2, #4]
 801c89c:	4a14      	ldr	r2, [pc, #80]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c89e:	697b      	ldr	r3, [r7, #20]
 801c8a0:	2108      	movs	r1, #8
 801c8a2:	011b      	lsls	r3, r3, #4
 801c8a4:	18d3      	adds	r3, r2, r3
 801c8a6:	185b      	adds	r3, r3, r1
 801c8a8:	78db      	ldrb	r3, [r3, #3]
 801c8aa:	07db      	lsls	r3, r3, #31
 801c8ac:	0fdb      	lsrs	r3, r3, #31
 801c8ae:	b2db      	uxtb	r3, r3
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d00e      	beq.n	801c8d2 <itdt_sched_execute+0x136>
 801c8b4:	4a0e      	ldr	r2, [pc, #56]	; (801c8f0 <itdt_sched_execute+0x154>)
 801c8b6:	697b      	ldr	r3, [r7, #20]
 801c8b8:	011b      	lsls	r3, r3, #4
 801c8ba:	18d3      	adds	r3, r2, r3
 801c8bc:	685c      	ldr	r4, [r3, #4]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	68fa      	ldr	r2, [r7, #12]
 801c8c2:	42a2      	cmp	r2, r4
 801c8c4:	d305      	bcc.n	801c8d2 <itdt_sched_execute+0x136>
 801c8c6:	68fa      	ldr	r2, [r7, #12]
 801c8c8:	42a2      	cmp	r2, r4
 801c8ca:	d1cb      	bne.n	801c864 <itdt_sched_execute+0xc8>
 801c8cc:	68ba      	ldr	r2, [r7, #8]
 801c8ce:	429a      	cmp	r2, r3
 801c8d0:	d2c8      	bcs.n	801c864 <itdt_sched_execute+0xc8>
	for (int i = 0 ; i < __sNum ; i++) {
 801c8d2:	697b      	ldr	r3, [r7, #20]
 801c8d4:	3301      	adds	r3, #1
 801c8d6:	617b      	str	r3, [r7, #20]
 801c8d8:	4b06      	ldr	r3, [pc, #24]	; (801c8f4 <itdt_sched_execute+0x158>)
 801c8da:	781b      	ldrb	r3, [r3, #0]
 801c8dc:	001a      	movs	r2, r3
 801c8de:	697b      	ldr	r3, [r7, #20]
 801c8e0:	4293      	cmp	r3, r2
 801c8e2:	da00      	bge.n	801c8e6 <itdt_sched_execute+0x14a>
 801c8e4:	e766      	b.n	801c7b4 <itdt_sched_execute+0x18>
		_LOG_SCHED(("[sched] (%d) next @%ld\r\n",i,__scheds[i].nextRun));
	}

}
 801c8e6:	46c0      	nop			; (mov r8, r8)
 801c8e8:	46bd      	mov	sp, r7
 801c8ea:	b007      	add	sp, #28
 801c8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8ee:	46c0      	nop			; (mov r8, r8)
 801c8f0:	20001578 	.word	0x20001578
 801c8f4:	200010bd 	.word	0x200010bd

0801c8f8 <itdt_sched_nextRun>:
}

/**
 * Return time in ms to the next task running
 */
uint32_t itdt_sched_nextRun() {
 801c8f8:	b590      	push	{r4, r7, lr}
 801c8fa:	b087      	sub	sp, #28
 801c8fc:	af00      	add	r7, sp, #0
	uint64_t min = 0;
 801c8fe:	2300      	movs	r3, #0
 801c900:	2400      	movs	r4, #0
 801c902:	613b      	str	r3, [r7, #16]
 801c904:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 801c906:	2300      	movs	r3, #0
 801c908:	60fb      	str	r3, [r7, #12]
 801c90a:	e029      	b.n	801c960 <itdt_sched_nextRun+0x68>
		if (  !__scheds[i].halt && (min == 0 || min > __scheds[i].nextRun) ) {
 801c90c:	4a28      	ldr	r2, [pc, #160]	; (801c9b0 <itdt_sched_nextRun+0xb8>)
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	2108      	movs	r1, #8
 801c912:	011b      	lsls	r3, r3, #4
 801c914:	18d3      	adds	r3, r2, r3
 801c916:	185b      	adds	r3, r3, r1
 801c918:	78db      	ldrb	r3, [r3, #3]
 801c91a:	079b      	lsls	r3, r3, #30
 801c91c:	0fdb      	lsrs	r3, r3, #31
 801c91e:	b2db      	uxtb	r3, r3
 801c920:	2b00      	cmp	r3, #0
 801c922:	d11a      	bne.n	801c95a <itdt_sched_nextRun+0x62>
 801c924:	693b      	ldr	r3, [r7, #16]
 801c926:	697a      	ldr	r2, [r7, #20]
 801c928:	4313      	orrs	r3, r2
 801c92a:	d00e      	beq.n	801c94a <itdt_sched_nextRun+0x52>
 801c92c:	4a20      	ldr	r2, [pc, #128]	; (801c9b0 <itdt_sched_nextRun+0xb8>)
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	011b      	lsls	r3, r3, #4
 801c932:	18d3      	adds	r3, r2, r3
 801c934:	685c      	ldr	r4, [r3, #4]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	697a      	ldr	r2, [r7, #20]
 801c93a:	42a2      	cmp	r2, r4
 801c93c:	d805      	bhi.n	801c94a <itdt_sched_nextRun+0x52>
 801c93e:	697a      	ldr	r2, [r7, #20]
 801c940:	42a2      	cmp	r2, r4
 801c942:	d10a      	bne.n	801c95a <itdt_sched_nextRun+0x62>
 801c944:	693a      	ldr	r2, [r7, #16]
 801c946:	429a      	cmp	r2, r3
 801c948:	d907      	bls.n	801c95a <itdt_sched_nextRun+0x62>
			min = __scheds[i].nextRun;
 801c94a:	4a19      	ldr	r2, [pc, #100]	; (801c9b0 <itdt_sched_nextRun+0xb8>)
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	011b      	lsls	r3, r3, #4
 801c950:	18d3      	adds	r3, r2, r3
 801c952:	685c      	ldr	r4, [r3, #4]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	613b      	str	r3, [r7, #16]
 801c958:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	3301      	adds	r3, #1
 801c95e:	60fb      	str	r3, [r7, #12]
 801c960:	4b14      	ldr	r3, [pc, #80]	; (801c9b4 <itdt_sched_nextRun+0xbc>)
 801c962:	781b      	ldrb	r3, [r3, #0]
 801c964:	001a      	movs	r2, r3
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	4293      	cmp	r3, r2
 801c96a:	dbcf      	blt.n	801c90c <itdt_sched_nextRun+0x14>
		}
	}
	if ( min > 0 ) {
 801c96c:	693b      	ldr	r3, [r7, #16]
 801c96e:	697a      	ldr	r2, [r7, #20]
 801c970:	4313      	orrs	r3, r2
 801c972:	d017      	beq.n	801c9a4 <itdt_sched_nextRun+0xac>
		uint64_t t = itsdk_time_get_ms();
 801c974:	f000 f8a8 	bl	801cac8 <itsdk_time_get_ms>
 801c978:	0003      	movs	r3, r0
 801c97a:	000c      	movs	r4, r1
 801c97c:	603b      	str	r3, [r7, #0]
 801c97e:	607c      	str	r4, [r7, #4]
		if ( min >= t ){
 801c980:	687a      	ldr	r2, [r7, #4]
 801c982:	697b      	ldr	r3, [r7, #20]
 801c984:	429a      	cmp	r2, r3
 801c986:	d80b      	bhi.n	801c9a0 <itdt_sched_nextRun+0xa8>
 801c988:	687a      	ldr	r2, [r7, #4]
 801c98a:	697b      	ldr	r3, [r7, #20]
 801c98c:	429a      	cmp	r2, r3
 801c98e:	d103      	bne.n	801c998 <itdt_sched_nextRun+0xa0>
 801c990:	683a      	ldr	r2, [r7, #0]
 801c992:	693b      	ldr	r3, [r7, #16]
 801c994:	429a      	cmp	r2, r3
 801c996:	d803      	bhi.n	801c9a0 <itdt_sched_nextRun+0xa8>
			return (uint32_t)(min - t);
 801c998:	693a      	ldr	r2, [r7, #16]
 801c99a:	683b      	ldr	r3, [r7, #0]
 801c99c:	1ad3      	subs	r3, r2, r3
 801c99e:	e003      	b.n	801c9a8 <itdt_sched_nextRun+0xb0>
		} else {
			return 0;
 801c9a0:	2300      	movs	r3, #0
 801c9a2:	e001      	b.n	801c9a8 <itdt_sched_nextRun+0xb0>
		}
	} else {
		return __INFINITE_32B; // max duration
 801c9a4:	2301      	movs	r3, #1
 801c9a6:	425b      	negs	r3, r3
	}
}
 801c9a8:	0018      	movs	r0, r3
 801c9aa:	46bd      	mov	sp, r7
 801c9ac:	b007      	add	sp, #28
 801c9ae:	bd90      	pop	{r4, r7, pc}
 801c9b0:	20001578 	.word	0x20001578
 801c9b4:	200010bd 	.word	0x200010bd

0801c9b8 <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 801c9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9ba:	b087      	sub	sp, #28
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 801c9c0:	68fb      	ldr	r3, [r7, #12]
 801c9c2:	603b      	str	r3, [r7, #0]
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	607b      	str	r3, [r7, #4]
 801c9c8:	22fa      	movs	r2, #250	; 0xfa
 801c9ca:	0092      	lsls	r2, r2, #2
 801c9cc:	2300      	movs	r3, #0
 801c9ce:	6838      	ldr	r0, [r7, #0]
 801c9d0:	6879      	ldr	r1, [r7, #4]
 801c9d2:	f7e3 fd99 	bl	8000508 <__aeabi_lmul>
 801c9d6:	0003      	movs	r3, r0
 801c9d8:	000c      	movs	r4, r1
 801c9da:	0018      	movs	r0, r3
 801c9dc:	0021      	movs	r1, r4
 801c9de:	22fa      	movs	r2, #250	; 0xfa
 801c9e0:	0092      	lsls	r2, r2, #2
 801c9e2:	2300      	movs	r3, #0
 801c9e4:	f7e3 fd4c 	bl	8000480 <__aeabi_ldivmod>
 801c9e8:	0003      	movs	r3, r0
 801c9ea:	000c      	movs	r4, r1
 801c9ec:	001a      	movs	r2, r3
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	189b      	adds	r3, r3, r2
 801c9f2:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	001d      	movs	r5, r3
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	001e      	movs	r6, r3
 801c9fc:	4b12      	ldr	r3, [pc, #72]	; (801ca48 <itsdk_time_add_us+0x90>)
 801c9fe:	685c      	ldr	r4, [r3, #4]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	195b      	adds	r3, r3, r5
 801ca04:	4174      	adcs	r4, r6
 801ca06:	613b      	str	r3, [r7, #16]
 801ca08:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 801ca0a:	4b0f      	ldr	r3, [pc, #60]	; (801ca48 <itsdk_time_add_us+0x90>)
 801ca0c:	685c      	ldr	r4, [r3, #4]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	697a      	ldr	r2, [r7, #20]
 801ca12:	42a2      	cmp	r2, r4
 801ca14:	d305      	bcc.n	801ca22 <itsdk_time_add_us+0x6a>
 801ca16:	697a      	ldr	r2, [r7, #20]
 801ca18:	42a2      	cmp	r2, r4
 801ca1a:	d10b      	bne.n	801ca34 <itsdk_time_add_us+0x7c>
 801ca1c:	693a      	ldr	r2, [r7, #16]
 801ca1e:	429a      	cmp	r2, r3
 801ca20:	d208      	bcs.n	801ca34 <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 801ca22:	4b0a      	ldr	r3, [pc, #40]	; (801ca4c <itsdk_time_add_us+0x94>)
 801ca24:	2201      	movs	r2, #1
 801ca26:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 801ca28:	4b09      	ldr	r3, [pc, #36]	; (801ca50 <itsdk_time_add_us+0x98>)
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	3301      	adds	r3, #1
 801ca2e:	b2da      	uxtb	r2, r3
 801ca30:	4b07      	ldr	r3, [pc, #28]	; (801ca50 <itsdk_time_add_us+0x98>)
 801ca32:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 801ca34:	4a04      	ldr	r2, [pc, #16]	; (801ca48 <itsdk_time_add_us+0x90>)
 801ca36:	693b      	ldr	r3, [r7, #16]
 801ca38:	697c      	ldr	r4, [r7, #20]
 801ca3a:	6013      	str	r3, [r2, #0]
 801ca3c:	6054      	str	r4, [r2, #4]
}
 801ca3e:	46c0      	nop			; (mov r8, r8)
 801ca40:	46bd      	mov	sp, r7
 801ca42:	b007      	add	sp, #28
 801ca44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca46:	46c0      	nop			; (mov r8, r8)
 801ca48:	200010c0 	.word	0x200010c0
 801ca4c:	200010c8 	.word	0x200010c8
 801ca50:	200010c9 	.word	0x200010c9

0801ca54 <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 801ca54:	b590      	push	{r4, r7, lr}
 801ca56:	b085      	sub	sp, #20
 801ca58:	af00      	add	r7, sp, #0
 801ca5a:	6038      	str	r0, [r7, #0]
 801ca5c:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 801ca5e:	22fa      	movs	r2, #250	; 0xfa
 801ca60:	0092      	lsls	r2, r2, #2
 801ca62:	2300      	movs	r3, #0
 801ca64:	6838      	ldr	r0, [r7, #0]
 801ca66:	6879      	ldr	r1, [r7, #4]
 801ca68:	f7e3 fd4e 	bl	8000508 <__aeabi_lmul>
 801ca6c:	0003      	movs	r3, r0
 801ca6e:	000c      	movs	r4, r1
 801ca70:	60bb      	str	r3, [r7, #8]
 801ca72:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 801ca74:	4b10      	ldr	r3, [pc, #64]	; (801cab8 <itsdk_time_set_ms+0x64>)
 801ca76:	6819      	ldr	r1, [r3, #0]
 801ca78:	685a      	ldr	r2, [r3, #4]
 801ca7a:	68bb      	ldr	r3, [r7, #8]
 801ca7c:	68fc      	ldr	r4, [r7, #12]
 801ca7e:	1ac9      	subs	r1, r1, r3
 801ca80:	41a2      	sbcs	r2, r4
 801ca82:	000b      	movs	r3, r1
 801ca84:	0014      	movs	r4, r2
 801ca86:	2c00      	cmp	r4, #0
 801ca88:	d103      	bne.n	801ca92 <itsdk_time_set_ms+0x3e>
 801ca8a:	d10b      	bne.n	801caa4 <itsdk_time_set_ms+0x50>
 801ca8c:	4a0b      	ldr	r2, [pc, #44]	; (801cabc <itsdk_time_set_ms+0x68>)
 801ca8e:	4293      	cmp	r3, r2
 801ca90:	d908      	bls.n	801caa4 <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 801ca92:	4b0b      	ldr	r3, [pc, #44]	; (801cac0 <itsdk_time_set_ms+0x6c>)
 801ca94:	2201      	movs	r2, #1
 801ca96:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 801ca98:	4b0a      	ldr	r3, [pc, #40]	; (801cac4 <itsdk_time_set_ms+0x70>)
 801ca9a:	781b      	ldrb	r3, [r3, #0]
 801ca9c:	3301      	adds	r3, #1
 801ca9e:	b2da      	uxtb	r2, r3
 801caa0:	4b08      	ldr	r3, [pc, #32]	; (801cac4 <itsdk_time_set_ms+0x70>)
 801caa2:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 801caa4:	4a04      	ldr	r2, [pc, #16]	; (801cab8 <itsdk_time_set_ms+0x64>)
 801caa6:	68bb      	ldr	r3, [r7, #8]
 801caa8:	68fc      	ldr	r4, [r7, #12]
 801caaa:	6013      	str	r3, [r2, #0]
 801caac:	6054      	str	r4, [r2, #4]
}
 801caae:	46c0      	nop			; (mov r8, r8)
 801cab0:	46bd      	mov	sp, r7
 801cab2:	b005      	add	sp, #20
 801cab4:	bd90      	pop	{r4, r7, pc}
 801cab6:	46c0      	nop			; (mov r8, r8)
 801cab8:	200010c0 	.word	0x200010c0
 801cabc:	000f4240 	.word	0x000f4240
 801cac0:	200010c8 	.word	0x200010c8
 801cac4:	200010c9 	.word	0x200010c9

0801cac8 <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 801cac8:	b5b0      	push	{r4, r5, r7, lr}
 801caca:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 801cacc:	4b06      	ldr	r3, [pc, #24]	; (801cae8 <itsdk_time_get_ms+0x20>)
 801cace:	6818      	ldr	r0, [r3, #0]
 801cad0:	6859      	ldr	r1, [r3, #4]
 801cad2:	22fa      	movs	r2, #250	; 0xfa
 801cad4:	0092      	lsls	r2, r2, #2
 801cad6:	2300      	movs	r3, #0
 801cad8:	f7e3 fcf6 	bl	80004c8 <__aeabi_uldivmod>
 801cadc:	0003      	movs	r3, r0
 801cade:	000c      	movs	r4, r1
}
 801cae0:	0018      	movs	r0, r3
 801cae2:	0021      	movs	r1, r4
 801cae4:	46bd      	mov	sp, r7
 801cae6:	bdb0      	pop	{r4, r5, r7, pc}
 801cae8:	200010c0 	.word	0x200010c0

0801caec <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 801caec:	b590      	push	{r4, r7, lr}
 801caee:	af00      	add	r7, sp, #0
	return __timeus;
 801caf0:	4b03      	ldr	r3, [pc, #12]	; (801cb00 <itsdk_time_get_us+0x14>)
 801caf2:	685c      	ldr	r4, [r3, #4]
 801caf4:	681b      	ldr	r3, [r3, #0]
}
 801caf6:	0018      	movs	r0, r3
 801caf8:	0021      	movs	r1, r4
 801cafa:	46bd      	mov	sp, r7
 801cafc:	bd90      	pop	{r4, r7, pc}
 801cafe:	46c0      	nop			; (mov r8, r8)
 801cb00:	200010c0 	.word	0x200010c0

0801cb04 <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 801cb04:	b5b0      	push	{r4, r5, r7, lr}
 801cb06:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 801cb08:	f001 fde8 	bl	801e6dc <rtc_resetTime>
	rtc_adjustTime();
 801cb0c:	f001 fe6a 	bl	801e7e4 <rtc_adjustTime>
  #endif
	systick_adjustTime();
 801cb10:	f001 fec6 	bl	801e8a0 <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 801cb14:	f001 fcf4 	bl	801e500 <rtc_getTimestampMs>
 801cb18:	0003      	movs	r3, r0
 801cb1a:	000c      	movs	r4, r1
 801cb1c:	0018      	movs	r0, r3
 801cb1e:	0021      	movs	r1, r4
 801cb20:	f7ff ff98 	bl	801ca54 <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 801cb24:	46c0      	nop			; (mov r8, r8)
 801cb26:	46bd      	mov	sp, r7
 801cb28:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801cb2c <itsdk_stimer_register>:
itsdk_timer_return_t itsdk_stimer_register(
		uint32_t ms,
		void (*callback_func)(uint32_t value),
		uint32_t value,
		itsdk_timer_lpAccept allowLowPower
) {
 801cb2c:	b5b0      	push	{r4, r5, r7, lr}
 801cb2e:	b086      	sub	sp, #24
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	60f8      	str	r0, [r7, #12]
 801cb34:	60b9      	str	r1, [r7, #8]
 801cb36:	607a      	str	r2, [r7, #4]
 801cb38:	001a      	movs	r2, r3
 801cb3a:	1cfb      	adds	r3, r7, #3
 801cb3c:	701a      	strb	r2, [r3, #0]
		#endif
		return TIMER_TOO_SHORT;
	}
	*/

	int i = 0;
 801cb3e:	2300      	movs	r3, #0
 801cb40:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 801cb42:	e00e      	b.n	801cb62 <itsdk_stimer_register+0x36>
		if (__stimer_slots[i].inUse == false) {
 801cb44:	492f      	ldr	r1, [pc, #188]	; (801cc04 <itsdk_stimer_register+0xd8>)
 801cb46:	697a      	ldr	r2, [r7, #20]
 801cb48:	0013      	movs	r3, r2
 801cb4a:	005b      	lsls	r3, r3, #1
 801cb4c:	189b      	adds	r3, r3, r2
 801cb4e:	00db      	lsls	r3, r3, #3
 801cb50:	5c5b      	ldrb	r3, [r3, r1]
 801cb52:	2201      	movs	r2, #1
 801cb54:	4053      	eors	r3, r2
 801cb56:	b2db      	uxtb	r3, r3
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d106      	bne.n	801cb6a <itsdk_stimer_register+0x3e>
			break;
		}
		i++;
 801cb5c:	697b      	ldr	r3, [r7, #20]
 801cb5e:	3301      	adds	r3, #1
 801cb60:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 801cb62:	697b      	ldr	r3, [r7, #20]
 801cb64:	2b04      	cmp	r3, #4
 801cb66:	dded      	ble.n	801cb44 <itsdk_stimer_register+0x18>
 801cb68:	e000      	b.n	801cb6c <itsdk_stimer_register+0x40>
			break;
 801cb6a:	46c0      	nop			; (mov r8, r8)
	}
	if ( i < ITSDK_TIMER_SLOTS ) {
 801cb6c:	697b      	ldr	r3, [r7, #20]
 801cb6e:	2b04      	cmp	r3, #4
 801cb70:	dc42      	bgt.n	801cbf8 <itsdk_stimer_register+0xcc>
		__stimer_slots[i].inUse = true;
 801cb72:	4924      	ldr	r1, [pc, #144]	; (801cc04 <itsdk_stimer_register+0xd8>)
 801cb74:	697a      	ldr	r2, [r7, #20]
 801cb76:	0013      	movs	r3, r2
 801cb78:	005b      	lsls	r3, r3, #1
 801cb7a:	189b      	adds	r3, r3, r2
 801cb7c:	00db      	lsls	r3, r3, #3
 801cb7e:	2201      	movs	r2, #1
 801cb80:	545a      	strb	r2, [r3, r1]
		__stimer_slots[i].allowLowPower = ((allowLowPower==TIMER_ACCEPT_LOWPOWER)?true:false);
 801cb82:	1cfb      	adds	r3, r7, #3
 801cb84:	781b      	ldrb	r3, [r3, #0]
 801cb86:	425a      	negs	r2, r3
 801cb88:	4153      	adcs	r3, r2
 801cb8a:	b2d8      	uxtb	r0, r3
 801cb8c:	491d      	ldr	r1, [pc, #116]	; (801cc04 <itsdk_stimer_register+0xd8>)
 801cb8e:	697a      	ldr	r2, [r7, #20]
 801cb90:	0013      	movs	r3, r2
 801cb92:	005b      	lsls	r3, r3, #1
 801cb94:	189b      	adds	r3, r3, r2
 801cb96:	00db      	lsls	r3, r3, #3
 801cb98:	18cb      	adds	r3, r1, r3
 801cb9a:	3301      	adds	r3, #1
 801cb9c:	1c02      	adds	r2, r0, #0
 801cb9e:	701a      	strb	r2, [r3, #0]
		__stimer_slots[i].customValue = value;
 801cba0:	4918      	ldr	r1, [pc, #96]	; (801cc04 <itsdk_stimer_register+0xd8>)
 801cba2:	697a      	ldr	r2, [r7, #20]
 801cba4:	0013      	movs	r3, r2
 801cba6:	005b      	lsls	r3, r3, #1
 801cba8:	189b      	adds	r3, r3, r2
 801cbaa:	00db      	lsls	r3, r3, #3
 801cbac:	18cb      	adds	r3, r1, r3
 801cbae:	3314      	adds	r3, #20
 801cbb0:	687a      	ldr	r2, [r7, #4]
 801cbb2:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].callback_func = callback_func;
 801cbb4:	4913      	ldr	r1, [pc, #76]	; (801cc04 <itsdk_stimer_register+0xd8>)
 801cbb6:	697a      	ldr	r2, [r7, #20]
 801cbb8:	0013      	movs	r3, r2
 801cbba:	005b      	lsls	r3, r3, #1
 801cbbc:	189b      	adds	r3, r3, r2
 801cbbe:	00db      	lsls	r3, r3, #3
 801cbc0:	18cb      	adds	r3, r1, r3
 801cbc2:	3310      	adds	r3, #16
 801cbc4:	68ba      	ldr	r2, [r7, #8]
 801cbc6:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].timeoutMs = itsdk_time_get_ms()+(uint64_t)ms;
 801cbc8:	f7ff ff7e 	bl	801cac8 <itsdk_time_get_ms>
 801cbcc:	0002      	movs	r2, r0
 801cbce:	000b      	movs	r3, r1
 801cbd0:	68f9      	ldr	r1, [r7, #12]
 801cbd2:	000c      	movs	r4, r1
 801cbd4:	2100      	movs	r1, #0
 801cbd6:	000d      	movs	r5, r1
 801cbd8:	1912      	adds	r2, r2, r4
 801cbda:	416b      	adcs	r3, r5
 801cbdc:	0011      	movs	r1, r2
 801cbde:	001a      	movs	r2, r3
 801cbe0:	4c08      	ldr	r4, [pc, #32]	; (801cc04 <itsdk_stimer_register+0xd8>)
 801cbe2:	6978      	ldr	r0, [r7, #20]
 801cbe4:	0003      	movs	r3, r0
 801cbe6:	005b      	lsls	r3, r3, #1
 801cbe8:	181b      	adds	r3, r3, r0
 801cbea:	00db      	lsls	r3, r3, #3
 801cbec:	18e3      	adds	r3, r4, r3
 801cbee:	3308      	adds	r3, #8
 801cbf0:	6019      	str	r1, [r3, #0]
 801cbf2:	605a      	str	r2, [r3, #4]
		return TIMER_INIT_SUCCESS;
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	e000      	b.n	801cbfa <itsdk_stimer_register+0xce>
	}
	#if (ITSDK_LOGGER_MODULE & __LOG_MOD_STIMER) > 0
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_LIST_FULL,0);
	#endif
	return TIMER_LIST_FULL;
 801cbf8:	2303      	movs	r3, #3
}
 801cbfa:	0018      	movs	r0, r3
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	b006      	add	sp, #24
 801cc00:	bdb0      	pop	{r4, r5, r7, pc}
 801cc02:	46c0      	nop			; (mov r8, r8)
 801cc04:	200010d0 	.word	0x200010d0

0801cc08 <itsdk_stimer_stop>:
 * identified by function pointer & value
 */
itsdk_timer_return_t itsdk_stimer_stop(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b084      	sub	sp, #16
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	6078      	str	r0, [r7, #4]
 801cc10:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801cc12:	2300      	movs	r3, #0
 801cc14:	60fb      	str	r3, [r7, #12]
 801cc16:	e02d      	b.n	801cc74 <itsdk_stimer_stop+0x6c>
		if (
				__stimer_slots[i].inUse == true
 801cc18:	491a      	ldr	r1, [pc, #104]	; (801cc84 <itsdk_stimer_stop+0x7c>)
 801cc1a:	68fa      	ldr	r2, [r7, #12]
 801cc1c:	0013      	movs	r3, r2
 801cc1e:	005b      	lsls	r3, r3, #1
 801cc20:	189b      	adds	r3, r3, r2
 801cc22:	00db      	lsls	r3, r3, #3
 801cc24:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d021      	beq.n	801cc6e <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].customValue == value
 801cc2a:	4916      	ldr	r1, [pc, #88]	; (801cc84 <itsdk_stimer_stop+0x7c>)
 801cc2c:	68fa      	ldr	r2, [r7, #12]
 801cc2e:	0013      	movs	r3, r2
 801cc30:	005b      	lsls	r3, r3, #1
 801cc32:	189b      	adds	r3, r3, r2
 801cc34:	00db      	lsls	r3, r3, #3
 801cc36:	18cb      	adds	r3, r1, r3
 801cc38:	3314      	adds	r3, #20
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	683a      	ldr	r2, [r7, #0]
 801cc3e:	429a      	cmp	r2, r3
 801cc40:	d115      	bne.n	801cc6e <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].callback_func == callback_func
 801cc42:	4910      	ldr	r1, [pc, #64]	; (801cc84 <itsdk_stimer_stop+0x7c>)
 801cc44:	68fa      	ldr	r2, [r7, #12]
 801cc46:	0013      	movs	r3, r2
 801cc48:	005b      	lsls	r3, r3, #1
 801cc4a:	189b      	adds	r3, r3, r2
 801cc4c:	00db      	lsls	r3, r3, #3
 801cc4e:	18cb      	adds	r3, r1, r3
 801cc50:	3310      	adds	r3, #16
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	687a      	ldr	r2, [r7, #4]
 801cc56:	429a      	cmp	r2, r3
 801cc58:	d109      	bne.n	801cc6e <itsdk_stimer_stop+0x66>
		) {
			// found
			__stimer_slots[i].inUse = false;
 801cc5a:	490a      	ldr	r1, [pc, #40]	; (801cc84 <itsdk_stimer_stop+0x7c>)
 801cc5c:	68fa      	ldr	r2, [r7, #12]
 801cc5e:	0013      	movs	r3, r2
 801cc60:	005b      	lsls	r3, r3, #1
 801cc62:	189b      	adds	r3, r3, r2
 801cc64:	00db      	lsls	r3, r3, #3
 801cc66:	2200      	movs	r2, #0
 801cc68:	545a      	strb	r2, [r3, r1]
			return TIMER_INIT_SUCCESS;
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	e006      	b.n	801cc7c <itsdk_stimer_stop+0x74>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	3301      	adds	r3, #1
 801cc72:	60fb      	str	r3, [r7, #12]
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	2b04      	cmp	r3, #4
 801cc78:	ddce      	ble.n	801cc18 <itsdk_stimer_stop+0x10>
		}
	}
	return TIMER_NOT_FOUND;
 801cc7a:	2304      	movs	r3, #4
}
 801cc7c:	0018      	movs	r0, r3
 801cc7e:	46bd      	mov	sp, r7
 801cc80:	b004      	add	sp, #16
 801cc82:	bd80      	pop	{r7, pc}
 801cc84:	200010d0 	.word	0x200010d0

0801cc88 <itsdk_stimer_isLowPowerSwitchAutorized>:
 * Some soft timers need to have a precise timing and are not supporting
 * the variation due to the deep sleep RTC duration.
 * An improvement will be to moderate the RTC sleep duration to the duration
 * of these timer to avoid the timing GAP. See it later.
 */
bool itsdk_stimer_isLowPowerSwitchAutorized() {
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	b082      	sub	sp, #8
 801cc8c:	af00      	add	r7, sp, #0
	int i = 0;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 801cc92:	e01b      	b.n	801cccc <itsdk_stimer_isLowPowerSwitchAutorized+0x44>
		if (__stimer_slots[i].inUse && __stimer_slots[i].allowLowPower == false ) {
 801cc94:	4911      	ldr	r1, [pc, #68]	; (801ccdc <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 801cc96:	687a      	ldr	r2, [r7, #4]
 801cc98:	0013      	movs	r3, r2
 801cc9a:	005b      	lsls	r3, r3, #1
 801cc9c:	189b      	adds	r3, r3, r2
 801cc9e:	00db      	lsls	r3, r3, #3
 801cca0:	5c5b      	ldrb	r3, [r3, r1]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d00f      	beq.n	801ccc6 <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
 801cca6:	490d      	ldr	r1, [pc, #52]	; (801ccdc <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 801cca8:	687a      	ldr	r2, [r7, #4]
 801ccaa:	0013      	movs	r3, r2
 801ccac:	005b      	lsls	r3, r3, #1
 801ccae:	189b      	adds	r3, r3, r2
 801ccb0:	00db      	lsls	r3, r3, #3
 801ccb2:	18cb      	adds	r3, r1, r3
 801ccb4:	3301      	adds	r3, #1
 801ccb6:	781b      	ldrb	r3, [r3, #0]
 801ccb8:	2201      	movs	r2, #1
 801ccba:	4053      	eors	r3, r2
 801ccbc:	b2db      	uxtb	r3, r3
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d001      	beq.n	801ccc6 <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
			return false;
 801ccc2:	2300      	movs	r3, #0
 801ccc4:	e006      	b.n	801ccd4 <itsdk_stimer_isLowPowerSwitchAutorized+0x4c>
		}
		i++;
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	3301      	adds	r3, #1
 801ccca:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	2b04      	cmp	r3, #4
 801ccd0:	dde0      	ble.n	801cc94 <itsdk_stimer_isLowPowerSwitchAutorized+0xc>
	}
	return true;
 801ccd2:	2301      	movs	r3, #1
}
 801ccd4:	0018      	movs	r0, r3
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	b002      	add	sp, #8
 801ccda:	bd80      	pop	{r7, pc}
 801ccdc:	200010d0 	.word	0x200010d0

0801cce0 <itsdk_stimer_get>:
 * Get a timer structure from callback & value
 */
itsdk_stimer_slot_t * itsdk_stimer_get(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b084      	sub	sp, #16
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
 801cce8:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801ccea:	2300      	movs	r3, #0
 801ccec:	60fb      	str	r3, [r7, #12]
 801ccee:	e02b      	b.n	801cd48 <itsdk_stimer_get+0x68>
		if (
				__stimer_slots[i].inUse == true
 801ccf0:	4919      	ldr	r1, [pc, #100]	; (801cd58 <itsdk_stimer_get+0x78>)
 801ccf2:	68fa      	ldr	r2, [r7, #12]
 801ccf4:	0013      	movs	r3, r2
 801ccf6:	005b      	lsls	r3, r3, #1
 801ccf8:	189b      	adds	r3, r3, r2
 801ccfa:	00db      	lsls	r3, r3, #3
 801ccfc:	5c5b      	ldrb	r3, [r3, r1]
		if (
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d01f      	beq.n	801cd42 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].customValue == value
 801cd02:	4915      	ldr	r1, [pc, #84]	; (801cd58 <itsdk_stimer_get+0x78>)
 801cd04:	68fa      	ldr	r2, [r7, #12]
 801cd06:	0013      	movs	r3, r2
 801cd08:	005b      	lsls	r3, r3, #1
 801cd0a:	189b      	adds	r3, r3, r2
 801cd0c:	00db      	lsls	r3, r3, #3
 801cd0e:	18cb      	adds	r3, r1, r3
 801cd10:	3314      	adds	r3, #20
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	683a      	ldr	r2, [r7, #0]
 801cd16:	429a      	cmp	r2, r3
 801cd18:	d113      	bne.n	801cd42 <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].callback_func == callback_func
 801cd1a:	490f      	ldr	r1, [pc, #60]	; (801cd58 <itsdk_stimer_get+0x78>)
 801cd1c:	68fa      	ldr	r2, [r7, #12]
 801cd1e:	0013      	movs	r3, r2
 801cd20:	005b      	lsls	r3, r3, #1
 801cd22:	189b      	adds	r3, r3, r2
 801cd24:	00db      	lsls	r3, r3, #3
 801cd26:	18cb      	adds	r3, r1, r3
 801cd28:	3310      	adds	r3, #16
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	687a      	ldr	r2, [r7, #4]
 801cd2e:	429a      	cmp	r2, r3
 801cd30:	d107      	bne.n	801cd42 <itsdk_stimer_get+0x62>
		) {
			// found
			return  &__stimer_slots[i];
 801cd32:	68fa      	ldr	r2, [r7, #12]
 801cd34:	0013      	movs	r3, r2
 801cd36:	005b      	lsls	r3, r3, #1
 801cd38:	189b      	adds	r3, r3, r2
 801cd3a:	00db      	lsls	r3, r3, #3
 801cd3c:	4a06      	ldr	r2, [pc, #24]	; (801cd58 <itsdk_stimer_get+0x78>)
 801cd3e:	189b      	adds	r3, r3, r2
 801cd40:	e006      	b.n	801cd50 <itsdk_stimer_get+0x70>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 801cd42:	68fb      	ldr	r3, [r7, #12]
 801cd44:	3301      	adds	r3, #1
 801cd46:	60fb      	str	r3, [r7, #12]
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	2b04      	cmp	r3, #4
 801cd4c:	ddd0      	ble.n	801ccf0 <itsdk_stimer_get+0x10>
		}
	}
	return NULL;
 801cd4e:	2300      	movs	r3, #0

}
 801cd50:	0018      	movs	r0, r3
 801cd52:	46bd      	mov	sp, r7
 801cd54:	b004      	add	sp, #16
 801cd56:	bd80      	pop	{r7, pc}
 801cd58:	200010d0 	.word	0x200010d0

0801cd5c <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 801cd5c:	b590      	push	{r4, r7, lr}
 801cd5e:	b085      	sub	sp, #20
 801cd60:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 801cd62:	f7ff feb1 	bl	801cac8 <itsdk_time_get_ms>
 801cd66:	0003      	movs	r3, r0
 801cd68:	000c      	movs	r4, r1
 801cd6a:	603b      	str	r3, [r7, #0]
 801cd6c:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801cd6e:	2300      	movs	r3, #0
 801cd70:	60fb      	str	r3, [r7, #12]
 801cd72:	e045      	b.n	801ce00 <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 801cd74:	4926      	ldr	r1, [pc, #152]	; (801ce10 <itsdk_stimer_run+0xb4>)
 801cd76:	68fa      	ldr	r2, [r7, #12]
 801cd78:	0013      	movs	r3, r2
 801cd7a:	005b      	lsls	r3, r3, #1
 801cd7c:	189b      	adds	r3, r3, r2
 801cd7e:	00db      	lsls	r3, r3, #3
 801cd80:	5c5b      	ldrb	r3, [r3, r1]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d039      	beq.n	801cdfa <itsdk_stimer_run+0x9e>
 801cd86:	4922      	ldr	r1, [pc, #136]	; (801ce10 <itsdk_stimer_run+0xb4>)
 801cd88:	68fa      	ldr	r2, [r7, #12]
 801cd8a:	0013      	movs	r3, r2
 801cd8c:	005b      	lsls	r3, r3, #1
 801cd8e:	189b      	adds	r3, r3, r2
 801cd90:	00db      	lsls	r3, r3, #3
 801cd92:	18cb      	adds	r3, r1, r3
 801cd94:	3308      	adds	r3, #8
 801cd96:	685c      	ldr	r4, [r3, #4]
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	687a      	ldr	r2, [r7, #4]
 801cd9c:	42a2      	cmp	r2, r4
 801cd9e:	d32c      	bcc.n	801cdfa <itsdk_stimer_run+0x9e>
 801cda0:	687a      	ldr	r2, [r7, #4]
 801cda2:	42a2      	cmp	r2, r4
 801cda4:	d102      	bne.n	801cdac <itsdk_stimer_run+0x50>
 801cda6:	683a      	ldr	r2, [r7, #0]
 801cda8:	429a      	cmp	r2, r3
 801cdaa:	d326      	bcc.n	801cdfa <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 801cdac:	4918      	ldr	r1, [pc, #96]	; (801ce10 <itsdk_stimer_run+0xb4>)
 801cdae:	68fa      	ldr	r2, [r7, #12]
 801cdb0:	0013      	movs	r3, r2
 801cdb2:	005b      	lsls	r3, r3, #1
 801cdb4:	189b      	adds	r3, r3, r2
 801cdb6:	00db      	lsls	r3, r3, #3
 801cdb8:	2200      	movs	r2, #0
 801cdba:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 801cdbc:	4914      	ldr	r1, [pc, #80]	; (801ce10 <itsdk_stimer_run+0xb4>)
 801cdbe:	68fa      	ldr	r2, [r7, #12]
 801cdc0:	0013      	movs	r3, r2
 801cdc2:	005b      	lsls	r3, r3, #1
 801cdc4:	189b      	adds	r3, r3, r2
 801cdc6:	00db      	lsls	r3, r3, #3
 801cdc8:	18cb      	adds	r3, r1, r3
 801cdca:	3310      	adds	r3, #16
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d013      	beq.n	801cdfa <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 801cdd2:	490f      	ldr	r1, [pc, #60]	; (801ce10 <itsdk_stimer_run+0xb4>)
 801cdd4:	68fa      	ldr	r2, [r7, #12]
 801cdd6:	0013      	movs	r3, r2
 801cdd8:	005b      	lsls	r3, r3, #1
 801cdda:	189b      	adds	r3, r3, r2
 801cddc:	00db      	lsls	r3, r3, #3
 801cdde:	18cb      	adds	r3, r1, r3
 801cde0:	3310      	adds	r3, #16
 801cde2:	6819      	ldr	r1, [r3, #0]
 801cde4:	480a      	ldr	r0, [pc, #40]	; (801ce10 <itsdk_stimer_run+0xb4>)
 801cde6:	68fa      	ldr	r2, [r7, #12]
 801cde8:	0013      	movs	r3, r2
 801cdea:	005b      	lsls	r3, r3, #1
 801cdec:	189b      	adds	r3, r3, r2
 801cdee:	00db      	lsls	r3, r3, #3
 801cdf0:	18c3      	adds	r3, r0, r3
 801cdf2:	3314      	adds	r3, #20
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	0018      	movs	r0, r3
 801cdf8:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	3301      	adds	r3, #1
 801cdfe:	60fb      	str	r3, [r7, #12]
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	2b04      	cmp	r3, #4
 801ce04:	ddb6      	ble.n	801cd74 <itsdk_stimer_run+0x18>
		}
	}
}
 801ce06:	46c0      	nop			; (mov r8, r8)
 801ce08:	46bd      	mov	sp, r7
 801ce0a:	b005      	add	sp, #20
 801ce0c:	bd90      	pop	{r4, r7, pc}
 801ce0e:	46c0      	nop			; (mov r8, r8)
 801ce10:	200010d0 	.word	0x200010d0

0801ce14 <itsdk_stimer_nextTimeoutMs>:

/**
 * Compute the number of Ms from Now to the next Timer to expire.
 * return ITSDK_STIMER_INFINITE when none are in execution or in the future.
 */
uint32_t itsdk_stimer_nextTimeoutMs(){
 801ce14:	b590      	push	{r4, r7, lr}
 801ce16:	b087      	sub	sp, #28
 801ce18:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 801ce1a:	f7ff fe55 	bl	801cac8 <itsdk_time_get_ms>
 801ce1e:	0003      	movs	r3, r0
 801ce20:	000c      	movs	r4, r1
 801ce22:	603b      	str	r3, [r7, #0]
 801ce24:	607c      	str	r4, [r7, #4]
	uint64_t min = __INFINITE_64B;
 801ce26:	2301      	movs	r3, #1
 801ce28:	425b      	negs	r3, r3
 801ce2a:	17dc      	asrs	r4, r3, #31
 801ce2c:	613b      	str	r3, [r7, #16]
 801ce2e:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801ce30:	2300      	movs	r3, #0
 801ce32:	60fb      	str	r3, [r7, #12]
 801ce34:	e03d      	b.n	801ceb2 <itsdk_stimer_nextTimeoutMs+0x9e>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs >= t ) {
 801ce36:	492c      	ldr	r1, [pc, #176]	; (801cee8 <itsdk_stimer_nextTimeoutMs+0xd4>)
 801ce38:	68fa      	ldr	r2, [r7, #12]
 801ce3a:	0013      	movs	r3, r2
 801ce3c:	005b      	lsls	r3, r3, #1
 801ce3e:	189b      	adds	r3, r3, r2
 801ce40:	00db      	lsls	r3, r3, #3
 801ce42:	5c5b      	ldrb	r3, [r3, r1]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d031      	beq.n	801ceac <itsdk_stimer_nextTimeoutMs+0x98>
 801ce48:	4927      	ldr	r1, [pc, #156]	; (801cee8 <itsdk_stimer_nextTimeoutMs+0xd4>)
 801ce4a:	68fa      	ldr	r2, [r7, #12]
 801ce4c:	0013      	movs	r3, r2
 801ce4e:	005b      	lsls	r3, r3, #1
 801ce50:	189b      	adds	r3, r3, r2
 801ce52:	00db      	lsls	r3, r3, #3
 801ce54:	18cb      	adds	r3, r1, r3
 801ce56:	3308      	adds	r3, #8
 801ce58:	685c      	ldr	r4, [r3, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	687a      	ldr	r2, [r7, #4]
 801ce5e:	42a2      	cmp	r2, r4
 801ce60:	d824      	bhi.n	801ceac <itsdk_stimer_nextTimeoutMs+0x98>
 801ce62:	687a      	ldr	r2, [r7, #4]
 801ce64:	42a2      	cmp	r2, r4
 801ce66:	d102      	bne.n	801ce6e <itsdk_stimer_nextTimeoutMs+0x5a>
 801ce68:	683a      	ldr	r2, [r7, #0]
 801ce6a:	429a      	cmp	r2, r3
 801ce6c:	d81e      	bhi.n	801ceac <itsdk_stimer_nextTimeoutMs+0x98>
			if ( __stimer_slots[i].timeoutMs < min ) min = __stimer_slots[i].timeoutMs;
 801ce6e:	491e      	ldr	r1, [pc, #120]	; (801cee8 <itsdk_stimer_nextTimeoutMs+0xd4>)
 801ce70:	68fa      	ldr	r2, [r7, #12]
 801ce72:	0013      	movs	r3, r2
 801ce74:	005b      	lsls	r3, r3, #1
 801ce76:	189b      	adds	r3, r3, r2
 801ce78:	00db      	lsls	r3, r3, #3
 801ce7a:	18cb      	adds	r3, r1, r3
 801ce7c:	3308      	adds	r3, #8
 801ce7e:	685c      	ldr	r4, [r3, #4]
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	697a      	ldr	r2, [r7, #20]
 801ce84:	42a2      	cmp	r2, r4
 801ce86:	d805      	bhi.n	801ce94 <itsdk_stimer_nextTimeoutMs+0x80>
 801ce88:	697a      	ldr	r2, [r7, #20]
 801ce8a:	42a2      	cmp	r2, r4
 801ce8c:	d10e      	bne.n	801ceac <itsdk_stimer_nextTimeoutMs+0x98>
 801ce8e:	693a      	ldr	r2, [r7, #16]
 801ce90:	429a      	cmp	r2, r3
 801ce92:	d90b      	bls.n	801ceac <itsdk_stimer_nextTimeoutMs+0x98>
 801ce94:	4914      	ldr	r1, [pc, #80]	; (801cee8 <itsdk_stimer_nextTimeoutMs+0xd4>)
 801ce96:	68fa      	ldr	r2, [r7, #12]
 801ce98:	0013      	movs	r3, r2
 801ce9a:	005b      	lsls	r3, r3, #1
 801ce9c:	189b      	adds	r3, r3, r2
 801ce9e:	00db      	lsls	r3, r3, #3
 801cea0:	18cb      	adds	r3, r1, r3
 801cea2:	3308      	adds	r3, #8
 801cea4:	685c      	ldr	r4, [r3, #4]
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	613b      	str	r3, [r7, #16]
 801ceaa:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	3301      	adds	r3, #1
 801ceb0:	60fb      	str	r3, [r7, #12]
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	2b04      	cmp	r3, #4
 801ceb6:	ddbe      	ble.n	801ce36 <itsdk_stimer_nextTimeoutMs+0x22>
		}
	}
	if ( min < __INFINITE_64B ) {
 801ceb8:	693b      	ldr	r3, [r7, #16]
 801ceba:	3301      	adds	r3, #1
 801cebc:	d102      	bne.n	801cec4 <itsdk_stimer_nextTimeoutMs+0xb0>
 801cebe:	697b      	ldr	r3, [r7, #20]
 801cec0:	3301      	adds	r3, #1
 801cec2:	d00b      	beq.n	801cedc <itsdk_stimer_nextTimeoutMs+0xc8>
		min = min - t;
 801cec4:	6939      	ldr	r1, [r7, #16]
 801cec6:	697a      	ldr	r2, [r7, #20]
 801cec8:	683b      	ldr	r3, [r7, #0]
 801ceca:	687c      	ldr	r4, [r7, #4]
 801cecc:	1ac9      	subs	r1, r1, r3
 801cece:	41a2      	sbcs	r2, r4
 801ced0:	000b      	movs	r3, r1
 801ced2:	0014      	movs	r4, r2
 801ced4:	613b      	str	r3, [r7, #16]
 801ced6:	617c      	str	r4, [r7, #20]
		return min;
 801ced8:	693b      	ldr	r3, [r7, #16]
 801ceda:	e001      	b.n	801cee0 <itsdk_stimer_nextTimeoutMs+0xcc>
	}
	return __INFINITE_32B;
 801cedc:	2301      	movs	r3, #1
 801cede:	425b      	negs	r3, r3
}
 801cee0:	0018      	movs	r0, r3
 801cee2:	46bd      	mov	sp, r7
 801cee4:	b007      	add	sp, #28
 801cee6:	bd90      	pop	{r4, r7, pc}
 801cee8:	200010d0 	.word	0x200010d0

0801ceec <__getAdcValue>:
#if ITSDK_ADC_OPTIMIZE_SIZE == __ENABLE

/**
 * Read adc
 */
uint32_t __getAdcValue(uint32_t channel, uint8_t oversampling) {
 801ceec:	b580      	push	{r7, lr}
 801ceee:	b084      	sub	sp, #16
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]
 801cef4:	000a      	movs	r2, r1
 801cef6:	1cfb      	adds	r3, r7, #3
 801cef8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801cefa:	b672      	cpsid	i
  uint32_t i;

  __disable_irq();

  // ADC RESET
  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;		// enable ADC clock
 801cefc:	4b73      	ldr	r3, [pc, #460]	; (801d0cc <__getAdcValue+0x1e0>)
 801cefe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801cf00:	4b72      	ldr	r3, [pc, #456]	; (801d0cc <__getAdcValue+0x1e0>)
 801cf02:	2180      	movs	r1, #128	; 0x80
 801cf04:	0089      	lsls	r1, r1, #2
 801cf06:	430a      	orrs	r2, r1
 801cf08:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("nop");
 801cf0a:	46c0      	nop			; (mov r8, r8)
 801cf0c:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 801cf0e:	4b6f      	ldr	r3, [pc, #444]	; (801d0cc <__getAdcValue+0x1e0>)
 801cf10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cf12:	4b6e      	ldr	r3, [pc, #440]	; (801d0cc <__getAdcValue+0x1e0>)
 801cf14:	2180      	movs	r1, #128	; 0x80
 801cf16:	0089      	lsls	r1, r1, #2
 801cf18:	430a      	orrs	r2, r1
 801cf1a:	625a      	str	r2, [r3, #36]	; 0x24
 801cf1c:	46c0      	nop			; (mov r8, r8)
 801cf1e:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 801cf20:	4b6a      	ldr	r3, [pc, #424]	; (801d0cc <__getAdcValue+0x1e0>)
 801cf22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cf24:	4b69      	ldr	r3, [pc, #420]	; (801d0cc <__getAdcValue+0x1e0>)
 801cf26:	496a      	ldr	r1, [pc, #424]	; (801d0d0 <__getAdcValue+0x1e4>)
 801cf28:	400a      	ands	r2, r1
 801cf2a:	625a      	str	r2, [r3, #36]	; 0x24
 801cf2c:	46c0      	nop			; (mov r8, r8)
 801cf2e:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // Enable some basic parts
  ADC1->IER = 0;						// do not allow any interrupts
 801cf30:	4b68      	ldr	r3, [pc, #416]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf32:	2200      	movs	r2, #0
 801cf34:	605a      	str	r2, [r3, #4]
  ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;		// select HSI16 clock
 801cf36:	4b67      	ldr	r3, [pc, #412]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf38:	691a      	ldr	r2, [r3, #16]
 801cf3a:	4b66      	ldr	r3, [pc, #408]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf3c:	0092      	lsls	r2, r2, #2
 801cf3e:	0892      	lsrs	r2, r2, #2
 801cf40:	611a      	str	r2, [r3, #16]

  ADC1->CR |= ADC_CR_ADVREGEN;			// enable ADC voltage regulator, probably not required, because this is automatically activated
 801cf42:	4b64      	ldr	r3, [pc, #400]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf44:	689a      	ldr	r2, [r3, #8]
 801cf46:	4b63      	ldr	r3, [pc, #396]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf48:	2180      	movs	r1, #128	; 0x80
 801cf4a:	0549      	lsls	r1, r1, #21
 801cf4c:	430a      	orrs	r2, r1
 801cf4e:	609a      	str	r2, [r3, #8]
  ADC->CCR |= ADC_CCR_VREFEN; 			// Wake-up the VREFINT
 801cf50:	4b61      	ldr	r3, [pc, #388]	; (801d0d8 <__getAdcValue+0x1ec>)
 801cf52:	681a      	ldr	r2, [r3, #0]
 801cf54:	4b60      	ldr	r3, [pc, #384]	; (801d0d8 <__getAdcValue+0x1ec>)
 801cf56:	2180      	movs	r1, #128	; 0x80
 801cf58:	03c9      	lsls	r1, r1, #15
 801cf5a:	430a      	orrs	r2, r1
 801cf5c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= ADC_CCR_TSEN; 			// Wake-up the temperature sensor
 801cf5e:	4b5e      	ldr	r3, [pc, #376]	; (801d0d8 <__getAdcValue+0x1ec>)
 801cf60:	681a      	ldr	r2, [r3, #0]
 801cf62:	4b5d      	ldr	r3, [pc, #372]	; (801d0d8 <__getAdcValue+0x1ec>)
 801cf64:	2180      	movs	r1, #128	; 0x80
 801cf66:	0409      	lsls	r1, r1, #16
 801cf68:	430a      	orrs	r2, r1
 801cf6a:	601a      	str	r2, [r3, #0]
 801cf6c:	46c0      	nop			; (mov r8, r8)
 801cf6e:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // CALIBRATION
  if ((ADC1->CR & ADC_CR_ADEN) != 0) {		// clear ADEN flag if required
 801cf70:	4b58      	ldr	r3, [pc, #352]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf72:	689b      	ldr	r3, [r3, #8]
 801cf74:	2201      	movs	r2, #1
 801cf76:	4013      	ands	r3, r2
 801cf78:	d005      	beq.n	801cf86 <__getAdcValue+0x9a>
    ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);
 801cf7a:	4b56      	ldr	r3, [pc, #344]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf7c:	689a      	ldr	r2, [r3, #8]
 801cf7e:	4b55      	ldr	r3, [pc, #340]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf80:	2101      	movs	r1, #1
 801cf82:	438a      	bics	r2, r1
 801cf84:	609a      	str	r2, [r3, #8]
  }
  ADC1->CR |= ADC_CR_ADCAL; 				// start calibration
 801cf86:	4b53      	ldr	r3, [pc, #332]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf88:	689a      	ldr	r2, [r3, #8]
 801cf8a:	4b52      	ldr	r3, [pc, #328]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf8c:	2180      	movs	r1, #128	; 0x80
 801cf8e:	0609      	lsls	r1, r1, #24
 801cf90:	430a      	orrs	r2, r1
 801cf92:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_EOCAL) == 0);	// wait for calibration finished
 801cf94:	46c0      	nop			; (mov r8, r8)
 801cf96:	4b4f      	ldr	r3, [pc, #316]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cf98:	681a      	ldr	r2, [r3, #0]
 801cf9a:	2380      	movs	r3, #128	; 0x80
 801cf9c:	011b      	lsls	r3, r3, #4
 801cf9e:	4013      	ands	r3, r2
 801cfa0:	d0f9      	beq.n	801cf96 <__getAdcValue+0xaa>
  ADC1->ISR |= ADC_ISR_EOCAL; 				// clear the status flag, by writing 1 to it
 801cfa2:	4b4c      	ldr	r3, [pc, #304]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfa4:	681a      	ldr	r2, [r3, #0]
 801cfa6:	4b4b      	ldr	r3, [pc, #300]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfa8:	2180      	movs	r1, #128	; 0x80
 801cfaa:	0109      	lsls	r1, r1, #4
 801cfac:	430a      	orrs	r2, r1
 801cfae:	601a      	str	r2, [r3, #0]
 801cfb0:	46c0      	nop			; (mov r8, r8)
 801cfb2:	46c0      	nop			; (mov r8, r8)
 801cfb4:	46c0      	nop			; (mov r8, r8)
 801cfb6:	46c0      	nop			; (mov r8, r8)
 801cfb8:	46c0      	nop			; (mov r8, r8)
 801cfba:	46c0      	nop			; (mov r8, r8)
 801cfbc:	46c0      	nop			; (mov r8, r8)
 801cfbe:	46c0      	nop			; (mov r8, r8)
 801cfc0:	46c0      	nop			; (mov r8, r8)
 801cfc2:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // ENABLE ADC
  ADC1->ISR |= ADC_ISR_ADRDY; 					// clear ready flag
 801cfc4:	4b43      	ldr	r3, [pc, #268]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfc6:	681a      	ldr	r2, [r3, #0]
 801cfc8:	4b42      	ldr	r3, [pc, #264]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfca:	2101      	movs	r1, #1
 801cfcc:	430a      	orrs	r2, r1
 801cfce:	601a      	str	r2, [r3, #0]
  ADC1->CR |= ADC_CR_ADEN; 						// enable ADC
 801cfd0:	4b40      	ldr	r3, [pc, #256]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfd2:	689a      	ldr	r2, [r3, #8]
 801cfd4:	4b3f      	ldr	r3, [pc, #252]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfd6:	2101      	movs	r1, #1
 801cfd8:	430a      	orrs	r2, r1
 801cfda:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);		// wait for ADC
 801cfdc:	46c0      	nop			; (mov r8, r8)
 801cfde:	4b3d      	ldr	r3, [pc, #244]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	2201      	movs	r2, #1
 801cfe4:	4013      	ands	r3, r2
 801cfe6:	d0fa      	beq.n	801cfde <__getAdcValue+0xf2>


  // CONFIGURE ADC
  ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN;				// software enabled conversion start
 801cfe8:	4b3a      	ldr	r3, [pc, #232]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfea:	68da      	ldr	r2, [r3, #12]
 801cfec:	4b39      	ldr	r3, [pc, #228]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cfee:	493b      	ldr	r1, [pc, #236]	; (801d0dc <__getAdcValue+0x1f0>)
 801cff0:	400a      	ands	r2, r1
 801cff2:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;				// right alignment
 801cff4:	4b37      	ldr	r3, [pc, #220]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cff6:	68da      	ldr	r2, [r3, #12]
 801cff8:	4b36      	ldr	r3, [pc, #216]	; (801d0d4 <__getAdcValue+0x1e8>)
 801cffa:	2120      	movs	r1, #32
 801cffc:	438a      	bics	r2, r1
 801cffe:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_RES;				// 12 bit resolution
 801d000:	4b34      	ldr	r3, [pc, #208]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d002:	68da      	ldr	r2, [r3, #12]
 801d004:	4b33      	ldr	r3, [pc, #204]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d006:	2118      	movs	r1, #24
 801d008:	438a      	bics	r2, r1
 801d00a:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = channel & ADC_CHANNEL_MASK; 	// Select channel (1 << channel number)
 801d00c:	4b31      	ldr	r3, [pc, #196]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d00e:	687a      	ldr	r2, [r7, #4]
 801d010:	0352      	lsls	r2, r2, #13
 801d012:	0b52      	lsrs	r2, r2, #13
 801d014:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
 801d016:	4b2f      	ldr	r3, [pc, #188]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d018:	695a      	ldr	r2, [r3, #20]
 801d01a:	4b2e      	ldr	r3, [pc, #184]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d01c:	2107      	movs	r1, #7
 801d01e:	430a      	orrs	r2, r1
 801d020:	615a      	str	r2, [r3, #20]
  	  	  	  	  	  	  	  	  	  	  	  	// Select a sampling mode of 111 (very slow)

  // DO MUTIPLE READ & AVERAGE
  data = 0;
 801d022:	2300      	movs	r3, #0
 801d024:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 801d026:	2300      	movs	r3, #0
 801d028:	60bb      	str	r3, [r7, #8]
 801d02a:	e013      	b.n	801d054 <__getAdcValue+0x168>
  {
    ADC1->CR |= ADC_CR_ADSTART; 				// start the ADC conversion
 801d02c:	4b29      	ldr	r3, [pc, #164]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d02e:	689a      	ldr	r2, [r3, #8]
 801d030:	4b28      	ldr	r3, [pc, #160]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d032:	2104      	movs	r1, #4
 801d034:	430a      	orrs	r2, r1
 801d036:	609a      	str	r2, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0); 	// wait end of conversion
 801d038:	46c0      	nop			; (mov r8, r8)
 801d03a:	4b26      	ldr	r3, [pc, #152]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	2204      	movs	r2, #4
 801d040:	4013      	ands	r3, r2
 801d042:	d0fa      	beq.n	801d03a <__getAdcValue+0x14e>
    data += ADC1->DR;							// get ADC result and clear the ISR_EOC flag
 801d044:	4b23      	ldr	r3, [pc, #140]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d048:	68fa      	ldr	r2, [r7, #12]
 801d04a:	18d3      	adds	r3, r2, r3
 801d04c:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 801d04e:	68bb      	ldr	r3, [r7, #8]
 801d050:	3301      	adds	r3, #1
 801d052:	60bb      	str	r3, [r7, #8]
 801d054:	1cfb      	adds	r3, r7, #3
 801d056:	781b      	ldrb	r3, [r3, #0]
 801d058:	68ba      	ldr	r2, [r7, #8]
 801d05a:	429a      	cmp	r2, r3
 801d05c:	d3e6      	bcc.n	801d02c <__getAdcValue+0x140>
  }
  data = data / oversampling;
 801d05e:	1cfb      	adds	r3, r7, #3
 801d060:	781b      	ldrb	r3, [r3, #0]
 801d062:	0019      	movs	r1, r3
 801d064:	68f8      	ldr	r0, [r7, #12]
 801d066:	f7e3 f857 	bl	8000118 <__udivsi3>
 801d06a:	0003      	movs	r3, r0
 801d06c:	60fb      	str	r3, [r7, #12]

  // DISABLE ADC
  // at this point the end of sampling and end of sequence bits are also set in ISR registr
  if ( (ADC1->CR & ADC_CR_ADEN) != 0 )
 801d06e:	4b19      	ldr	r3, [pc, #100]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d070:	689b      	ldr	r3, [r3, #8]
 801d072:	2201      	movs	r2, #1
 801d074:	4013      	ands	r3, r2
 801d076:	d00b      	beq.n	801d090 <__getAdcValue+0x1a4>
  {
    ADC1->CR |= ADC_CR_ADDIS; 					// disable ADC... maybe better execute a reset
 801d078:	4b16      	ldr	r3, [pc, #88]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d07a:	689a      	ldr	r2, [r3, #8]
 801d07c:	4b15      	ldr	r3, [pc, #84]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d07e:	2102      	movs	r1, #2
 801d080:	430a      	orrs	r2, r1
 801d082:	609a      	str	r2, [r3, #8]
    while ((ADC1->CR & ADC_CR_ADEN) != 0); 		// wait for ADC disable, ADEN is also cleared
 801d084:	46c0      	nop			; (mov r8, r8)
 801d086:	4b13      	ldr	r3, [pc, #76]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d088:	689b      	ldr	r3, [r3, #8]
 801d08a:	2201      	movs	r2, #1
 801d08c:	4013      	ands	r3, r2
 801d08e:	d1fa      	bne.n	801d086 <__getAdcValue+0x19a>
  }

  // DISABLE OTHER PARTS, INCLUDING CLOCK
  ADC->CCR &= ~ADC_CCR_VREFEN; 					// disable VREFINT
 801d090:	4b11      	ldr	r3, [pc, #68]	; (801d0d8 <__getAdcValue+0x1ec>)
 801d092:	681a      	ldr	r2, [r3, #0]
 801d094:	4b10      	ldr	r3, [pc, #64]	; (801d0d8 <__getAdcValue+0x1ec>)
 801d096:	4912      	ldr	r1, [pc, #72]	; (801d0e0 <__getAdcValue+0x1f4>)
 801d098:	400a      	ands	r2, r1
 801d09a:	601a      	str	r2, [r3, #0]
  ADC->CCR &= ~ADC_CCR_TSEN; 					// disable temperature sensor
 801d09c:	4b0e      	ldr	r3, [pc, #56]	; (801d0d8 <__getAdcValue+0x1ec>)
 801d09e:	681a      	ldr	r2, [r3, #0]
 801d0a0:	4b0d      	ldr	r3, [pc, #52]	; (801d0d8 <__getAdcValue+0x1ec>)
 801d0a2:	4910      	ldr	r1, [pc, #64]	; (801d0e4 <__getAdcValue+0x1f8>)
 801d0a4:	400a      	ands	r2, r1
 801d0a6:	601a      	str	r2, [r3, #0]
  ADC1->CR &= ~ADC_CR_ADVREGEN;					// disable ADC voltage regulator
 801d0a8:	4b0a      	ldr	r3, [pc, #40]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d0aa:	689a      	ldr	r2, [r3, #8]
 801d0ac:	4b09      	ldr	r3, [pc, #36]	; (801d0d4 <__getAdcValue+0x1e8>)
 801d0ae:	490e      	ldr	r1, [pc, #56]	; (801d0e8 <__getAdcValue+0x1fc>)
 801d0b0:	400a      	ands	r2, r1
 801d0b2:	609a      	str	r2, [r3, #8]
  RCC->APB2ENR &= ~RCC_APB2ENR_ADCEN;			// disable ADC clock
 801d0b4:	4b05      	ldr	r3, [pc, #20]	; (801d0cc <__getAdcValue+0x1e0>)
 801d0b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d0b8:	4b04      	ldr	r3, [pc, #16]	; (801d0cc <__getAdcValue+0x1e0>)
 801d0ba:	4905      	ldr	r1, [pc, #20]	; (801d0d0 <__getAdcValue+0x1e4>)
 801d0bc:	400a      	ands	r2, r1
 801d0be:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 801d0c0:	b662      	cpsie	i

  __enable_irq();
  return data;
 801d0c2:	68fb      	ldr	r3, [r7, #12]
}
 801d0c4:	0018      	movs	r0, r3
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	b004      	add	sp, #16
 801d0ca:	bd80      	pop	{r7, pc}
 801d0cc:	40021000 	.word	0x40021000
 801d0d0:	fffffdff 	.word	0xfffffdff
 801d0d4:	40012400 	.word	0x40012400
 801d0d8:	40012708 	.word	0x40012708
 801d0dc:	fffff3ff 	.word	0xfffff3ff
 801d0e0:	ffbfffff 	.word	0xffbfffff
 801d0e4:	ff7fffff 	.word	0xff7fffff
 801d0e8:	efffffff 	.word	0xefffffff

0801d0ec <adc_getTemperature>:
/**
 * Return temperature from Adc the temp is in centi-degrés Celcius
 * Ensure to read Temperature at least 8ms after wake up ...
 * Time to get accurate getVdd response
 */
int16_t adc_getTemperature() {
 801d0ec:	b5b0      	push	{r4, r5, r7, lr}
 801d0ee:	b084      	sub	sp, #16
 801d0f0:	af00      	add	r7, sp, #0

	uint16_t vdd = adc_getVdd();
 801d0f2:	240e      	movs	r4, #14
 801d0f4:	0025      	movs	r5, r4
 801d0f6:	193c      	adds	r4, r7, r4
 801d0f8:	f000 f850 	bl	801d19c <adc_getVdd>
 801d0fc:	0003      	movs	r3, r0
 801d0fe:	8023      	strh	r3, [r4, #0]
	uint32_t v = __getAdcValue(ADC_CHANNEL_TEMPSENSOR,ITSDK_ADC_OVERSAMPLING);
 801d100:	4b21      	ldr	r3, [pc, #132]	; (801d188 <adc_getTemperature+0x9c>)
 801d102:	2110      	movs	r1, #16
 801d104:	0018      	movs	r0, r3
 801d106:	f7ff fef1 	bl	801ceec <__getAdcValue>
 801d10a:	0003      	movs	r3, r0
 801d10c:	60bb      	str	r3, [r7, #8]

	// adapt the calibration values to the current VDD reference
	uint16_t cal1_vdd = (*CAL1_VALUE * VDD_CALIB) / vdd;
 801d10e:	4b1f      	ldr	r3, [pc, #124]	; (801d18c <adc_getTemperature+0xa0>)
 801d110:	881b      	ldrh	r3, [r3, #0]
 801d112:	001a      	movs	r2, r3
 801d114:	4b1e      	ldr	r3, [pc, #120]	; (801d190 <adc_getTemperature+0xa4>)
 801d116:	435a      	muls	r2, r3
 801d118:	002c      	movs	r4, r5
 801d11a:	193b      	adds	r3, r7, r4
 801d11c:	881b      	ldrh	r3, [r3, #0]
 801d11e:	0019      	movs	r1, r3
 801d120:	0010      	movs	r0, r2
 801d122:	f7e3 f883 	bl	800022c <__divsi3>
 801d126:	0003      	movs	r3, r0
 801d128:	001a      	movs	r2, r3
 801d12a:	1dbb      	adds	r3, r7, #6
 801d12c:	801a      	strh	r2, [r3, #0]
	uint16_t cal2_vdd = (*CAL2_VALUE * VDD_CALIB) / vdd;
 801d12e:	4b19      	ldr	r3, [pc, #100]	; (801d194 <adc_getTemperature+0xa8>)
 801d130:	881b      	ldrh	r3, [r3, #0]
 801d132:	001a      	movs	r2, r3
 801d134:	4b16      	ldr	r3, [pc, #88]	; (801d190 <adc_getTemperature+0xa4>)
 801d136:	435a      	muls	r2, r3
 801d138:	193b      	adds	r3, r7, r4
 801d13a:	881b      	ldrh	r3, [r3, #0]
 801d13c:	0019      	movs	r1, r3
 801d13e:	0010      	movs	r0, r2
 801d140:	f7e3 f874 	bl	800022c <__divsi3>
 801d144:	0003      	movs	r3, r0
 801d146:	001a      	movs	r2, r3
 801d148:	1d3b      	adds	r3, r7, #4
 801d14a:	801a      	strh	r2, [r3, #0]

	// convert in 0.01�C according to the calibration ref
	int32_t temperature = 100 * (CAL2_TEMP - CAL1_TEMP)*(v - cal1_vdd);
 801d14c:	1dbb      	adds	r3, r7, #6
 801d14e:	881b      	ldrh	r3, [r3, #0]
 801d150:	68ba      	ldr	r2, [r7, #8]
 801d152:	1ad3      	subs	r3, r2, r3
 801d154:	4a10      	ldr	r2, [pc, #64]	; (801d198 <adc_getTemperature+0xac>)
 801d156:	4353      	muls	r3, r2
 801d158:	603b      	str	r3, [r7, #0]
	temperature /= (cal2_vdd - cal1_vdd);
 801d15a:	1d3b      	adds	r3, r7, #4
 801d15c:	881a      	ldrh	r2, [r3, #0]
 801d15e:	1dbb      	adds	r3, r7, #6
 801d160:	881b      	ldrh	r3, [r3, #0]
 801d162:	1ad3      	subs	r3, r2, r3
 801d164:	0019      	movs	r1, r3
 801d166:	6838      	ldr	r0, [r7, #0]
 801d168:	f7e3 f860 	bl	800022c <__divsi3>
 801d16c:	0003      	movs	r3, r0
 801d16e:	603b      	str	r3, [r7, #0]
    temperature = temperature + (100*CAL1_TEMP);
 801d170:	683b      	ldr	r3, [r7, #0]
 801d172:	4a07      	ldr	r2, [pc, #28]	; (801d190 <adc_getTemperature+0xa4>)
 801d174:	4694      	mov	ip, r2
 801d176:	4463      	add	r3, ip
 801d178:	603b      	str	r3, [r7, #0]
    return (int16_t)temperature;
 801d17a:	683b      	ldr	r3, [r7, #0]
 801d17c:	b21b      	sxth	r3, r3

}
 801d17e:	0018      	movs	r0, r3
 801d180:	46bd      	mov	sp, r7
 801d182:	b004      	add	sp, #16
 801d184:	bdb0      	pop	{r4, r5, r7, pc}
 801d186:	46c0      	nop			; (mov r8, r8)
 801d188:	48040000 	.word	0x48040000
 801d18c:	1ff8007a 	.word	0x1ff8007a
 801d190:	00000bb8 	.word	0x00000bb8
 801d194:	1ff8007e 	.word	0x1ff8007e
 801d198:	00002710 	.word	0x00002710

0801d19c <adc_getVdd>:
 * Return VDD in mV ( internal VDD )
 * Be Careful -> right after wakeup from STOP the
 * value can be invalid (200mv error). The solution is to
 * sleep a bit (8ms recommanded) before sampling Vdd
 */
uint16_t adc_getVdd() {
 801d19c:	b590      	push	{r4, r7, lr}
 801d19e:	b083      	sub	sp, #12
 801d1a0:	af00      	add	r7, sp, #0
	// The value measured is not good until we wait about 8ms after MCU wakeup from stop
	uint64_t t = ( itsdk_time_get_us() - itsdk_state.lastWakeUpTimeUs) / 1000;
 801d1a2:	f7ff fca3 	bl	801caec <itsdk_time_get_us>
 801d1a6:	000a      	movs	r2, r1
 801d1a8:	0001      	movs	r1, r0
 801d1aa:	4b13      	ldr	r3, [pc, #76]	; (801d1f8 <adc_getVdd+0x5c>)
 801d1ac:	68dc      	ldr	r4, [r3, #12]
 801d1ae:	689b      	ldr	r3, [r3, #8]
 801d1b0:	1ac9      	subs	r1, r1, r3
 801d1b2:	41a2      	sbcs	r2, r4
 801d1b4:	0008      	movs	r0, r1
 801d1b6:	0011      	movs	r1, r2
 801d1b8:	22fa      	movs	r2, #250	; 0xfa
 801d1ba:	0092      	lsls	r2, r2, #2
 801d1bc:	2300      	movs	r3, #0
 801d1be:	f7e3 f983 	bl	80004c8 <__aeabi_uldivmod>
 801d1c2:	0003      	movs	r3, r0
 801d1c4:	000c      	movs	r4, r1
 801d1c6:	603b      	str	r3, [r7, #0]
 801d1c8:	607c      	str	r4, [r7, #4]
	if ( t < 8 ) {
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d10b      	bne.n	801d1e8 <adc_getVdd+0x4c>
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d102      	bne.n	801d1dc <adc_getVdd+0x40>
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	2b07      	cmp	r3, #7
 801d1da:	d805      	bhi.n	801d1e8 <adc_getVdd+0x4c>
		itsdk_delayMs(8 - t);
 801d1dc:	683b      	ldr	r3, [r7, #0]
 801d1de:	2208      	movs	r2, #8
 801d1e0:	1ad3      	subs	r3, r2, r3
 801d1e2:	0018      	movs	r0, r3
 801d1e4:	f000 fd1a 	bl	801dc1c <itsdk_delayMs>
	}
	return adc_getValue(0);
 801d1e8:	2000      	movs	r0, #0
 801d1ea:	f000 f813 	bl	801d214 <adc_getValue>
 801d1ee:	0003      	movs	r3, r0
}
 801d1f0:	0018      	movs	r0, r3
 801d1f2:	46bd      	mov	sp, r7
 801d1f4:	b003      	add	sp, #12
 801d1f6:	bd90      	pop	{r4, r7, pc}
 801d1f8:	20001560 	.word	0x20001560

0801d1fc <adc_getVBat>:

/**
 * Return VBAT in mV - external VDD when a VBAT pin has been configured with a voltage divider by 2
 * Assuming VBAT have a /2 in front of the ADC
 */
uint16_t adc_getVBat() {
 801d1fc:	b580      	push	{r7, lr}
 801d1fe:	af00      	add	r7, sp, #0
#if ITSDK_VBAT_ADC_PIN >= 0
	return adc_getValue(ITSDK_VBAT_ADC_PIN)*2;
 801d200:	2041      	movs	r0, #65	; 0x41
 801d202:	f000 f807 	bl	801d214 <adc_getValue>
 801d206:	0003      	movs	r3, r0
 801d208:	18db      	adds	r3, r3, r3
 801d20a:	b29b      	uxth	r3, r3
#else
	return adc_getVdd();
#endif
}
 801d20c:	0018      	movs	r0, r3
 801d20e:	46bd      	mov	sp, r7
 801d210:	bd80      	pop	{r7, pc}
	...

0801d214 <adc_getValue>:
/**
 * Return ADC Value for an external PIN or internal
 * Get the pin number (hardware one)...
 * Pin 0 = internal VDD
 */
uint16_t adc_getValue(uint32_t pin) {
 801d214:	b580      	push	{r7, lr}
 801d216:	b08c      	sub	sp, #48	; 0x30
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_TypeDef  	* GPIO_TypeDefStruct = GPIOA;
 801d21c:	23a0      	movs	r3, #160	; 0xa0
 801d21e:	05db      	lsls	r3, r3, #23
 801d220:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d222:	2108      	movs	r1, #8
 801d224:	187b      	adds	r3, r7, r1
 801d226:	2203      	movs	r2, #3
 801d228:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d22a:	187b      	adds	r3, r7, r1
 801d22c:	2200      	movs	r2, #0
 801d22e:	609a      	str	r2, [r3, #8]
	uint32_t channel = 0;
 801d230:	2300      	movs	r3, #0
 801d232:	62bb      	str	r3, [r7, #40]	; 0x28
	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#elif  ITSDK_DEVICE == __DEVICE_STM32L072XX
	// For the BGA device I consider the pin number as Line||Column 65 => line 6 Column 5
	switch (pin) {
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	2b4d      	cmp	r3, #77	; 0x4d
 801d238:	d900      	bls.n	801d23c <adc_getValue+0x28>
 801d23a:	e085      	b.n	801d348 <adc_getValue+0x134>
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	009a      	lsls	r2, r3, #2
 801d240:	4b5f      	ldr	r3, [pc, #380]	; (801d3c0 <adc_getValue+0x1ac>)
 801d242:	18d3      	adds	r3, r2, r3
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	469f      	mov	pc, r3
	case 0:
		channel = ADC_CHANNEL_VREFINT; 	// VDD
 801d248:	4b5e      	ldr	r3, [pc, #376]	; (801d3c4 <adc_getValue+0x1b0>)
 801d24a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d24c:	e083      	b.n	801d356 <adc_getValue+0x142>
	case 55:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d24e:	2308      	movs	r3, #8
 801d250:	18fb      	adds	r3, r7, r3
 801d252:	2201      	movs	r2, #1
 801d254:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d256:	23a0      	movs	r3, #160	; 0xa0
 801d258:	05db      	lsls	r3, r3, #23
 801d25a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_0;	// PA0
 801d25c:	2301      	movs	r3, #1
 801d25e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d260:	e079      	b.n	801d356 <adc_getValue+0x142>
	case 54:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d262:	2308      	movs	r3, #8
 801d264:	18fb      	adds	r3, r7, r3
 801d266:	2202      	movs	r2, #2
 801d268:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d26a:	23a0      	movs	r3, #160	; 0xa0
 801d26c:	05db      	lsls	r3, r3, #23
 801d26e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_1;	// PA1
 801d270:	4b55      	ldr	r3, [pc, #340]	; (801d3c8 <adc_getValue+0x1b4>)
 801d272:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d274:	e06f      	b.n	801d356 <adc_getValue+0x142>
	case 66:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d276:	2308      	movs	r3, #8
 801d278:	18fb      	adds	r3, r7, r3
 801d27a:	2204      	movs	r2, #4
 801d27c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d27e:	23a0      	movs	r3, #160	; 0xa0
 801d280:	05db      	lsls	r3, r3, #23
 801d282:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_2;	// PA2
 801d284:	4b51      	ldr	r3, [pc, #324]	; (801d3cc <adc_getValue+0x1b8>)
 801d286:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d288:	e065      	b.n	801d356 <adc_getValue+0x142>
	case 77:
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 801d28a:	2308      	movs	r3, #8
 801d28c:	18fb      	adds	r3, r7, r3
 801d28e:	2208      	movs	r2, #8
 801d290:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d292:	23a0      	movs	r3, #160	; 0xa0
 801d294:	05db      	lsls	r3, r3, #23
 801d296:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_3;	// PA3
 801d298:	4b4d      	ldr	r3, [pc, #308]	; (801d3d0 <adc_getValue+0x1bc>)
 801d29a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d29c:	e05b      	b.n	801d356 <adc_getValue+0x142>
	case 65:
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 801d29e:	2308      	movs	r3, #8
 801d2a0:	18fb      	adds	r3, r7, r3
 801d2a2:	2210      	movs	r2, #16
 801d2a4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d2a6:	23a0      	movs	r3, #160	; 0xa0
 801d2a8:	05db      	lsls	r3, r3, #23
 801d2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_4; 	// PA4
 801d2ac:	4b49      	ldr	r3, [pc, #292]	; (801d3d4 <adc_getValue+0x1c0>)
 801d2ae:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d2b0:	e051      	b.n	801d356 <adc_getValue+0x142>
	case 76:
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 801d2b2:	2308      	movs	r3, #8
 801d2b4:	18fb      	adds	r3, r7, r3
 801d2b6:	2220      	movs	r2, #32
 801d2b8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d2ba:	23a0      	movs	r3, #160	; 0xa0
 801d2bc:	05db      	lsls	r3, r3, #23
 801d2be:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_5;	// PA5
 801d2c0:	4b45      	ldr	r3, [pc, #276]	; (801d3d8 <adc_getValue+0x1c4>)
 801d2c2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d2c4:	e047      	b.n	801d356 <adc_getValue+0x142>
	case 75:
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 801d2c6:	2308      	movs	r3, #8
 801d2c8:	18fb      	adds	r3, r7, r3
 801d2ca:	2240      	movs	r2, #64	; 0x40
 801d2cc:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d2ce:	23a0      	movs	r3, #160	; 0xa0
 801d2d0:	05db      	lsls	r3, r3, #23
 801d2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_6;	// PA6
 801d2d4:	4b41      	ldr	r3, [pc, #260]	; (801d3dc <adc_getValue+0x1c8>)
 801d2d6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d2d8:	e03d      	b.n	801d356 <adc_getValue+0x142>
	case 64:
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 801d2da:	2308      	movs	r3, #8
 801d2dc:	18fb      	adds	r3, r7, r3
 801d2de:	2280      	movs	r2, #128	; 0x80
 801d2e0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 801d2e2:	23a0      	movs	r3, #160	; 0xa0
 801d2e4:	05db      	lsls	r3, r3, #23
 801d2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_7;	// PA7
 801d2e8:	4b3d      	ldr	r3, [pc, #244]	; (801d3e0 <adc_getValue+0x1cc>)
 801d2ea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d2ec:	e033      	b.n	801d356 <adc_getValue+0x142>
	case 74:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d2ee:	2308      	movs	r3, #8
 801d2f0:	18fb      	adds	r3, r7, r3
 801d2f2:	2201      	movs	r2, #1
 801d2f4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 801d2f6:	4b3b      	ldr	r3, [pc, #236]	; (801d3e4 <adc_getValue+0x1d0>)
 801d2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_8;	// PB0
 801d2fa:	4b3b      	ldr	r3, [pc, #236]	; (801d3e8 <adc_getValue+0x1d4>)
 801d2fc:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d2fe:	e02a      	b.n	801d356 <adc_getValue+0x142>
	case 43:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d300:	2308      	movs	r3, #8
 801d302:	18fb      	adds	r3, r7, r3
 801d304:	2202      	movs	r2, #2
 801d306:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 801d308:	4b36      	ldr	r3, [pc, #216]	; (801d3e4 <adc_getValue+0x1d0>)
 801d30a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_9;	// PB1
 801d30c:	4b37      	ldr	r3, [pc, #220]	; (801d3ec <adc_getValue+0x1d8>)
 801d30e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d310:	e021      	b.n	801d356 <adc_getValue+0x142>
	case 35:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d312:	2308      	movs	r3, #8
 801d314:	18fb      	adds	r3, r7, r3
 801d316:	2201      	movs	r2, #1
 801d318:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d31a:	4b35      	ldr	r3, [pc, #212]	; (801d3f0 <adc_getValue+0x1dc>)
 801d31c:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_10;	// PC0
 801d31e:	4b35      	ldr	r3, [pc, #212]	; (801d3f4 <adc_getValue+0x1e0>)
 801d320:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d322:	e018      	b.n	801d356 <adc_getValue+0x142>
	case 34:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 801d324:	2308      	movs	r3, #8
 801d326:	18fb      	adds	r3, r7, r3
 801d328:	2202      	movs	r2, #2
 801d32a:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d32c:	4b30      	ldr	r3, [pc, #192]	; (801d3f0 <adc_getValue+0x1dc>)
 801d32e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_11;	// PC1
 801d330:	4b31      	ldr	r3, [pc, #196]	; (801d3f8 <adc_getValue+0x1e4>)
 801d332:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d334:	e00f      	b.n	801d356 <adc_getValue+0x142>
	case 57:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 801d336:	2308      	movs	r3, #8
 801d338:	18fb      	adds	r3, r7, r3
 801d33a:	2204      	movs	r2, #4
 801d33c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 801d33e:	4b2c      	ldr	r3, [pc, #176]	; (801d3f0 <adc_getValue+0x1dc>)
 801d340:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_12;	// PC2
 801d342:	4b2e      	ldr	r3, [pc, #184]	; (801d3fc <adc_getValue+0x1e8>)
 801d344:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 801d346:	e006      	b.n	801d356 <adc_getValue+0x142>

	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	4a2c      	ldr	r2, [pc, #176]	; (801d400 <adc_getValue+0x1ec>)
 801d34e:	0019      	movs	r1, r3
 801d350:	0010      	movs	r0, r2
 801d352:	f7fe f93f 	bl	801b5d4 <itsdk_error_report>
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#else
	#error DEVICE NOT DEFINED
#endif
	if(pin!= 0) {
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d006      	beq.n	801d36a <adc_getValue+0x156>
		HAL_GPIO_Init(GPIO_TypeDefStruct, &GPIO_InitStruct);
 801d35c:	2308      	movs	r3, #8
 801d35e:	18fa      	adds	r2, r7, r3
 801d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d362:	0011      	movs	r1, r2
 801d364:	0018      	movs	r0, r3
 801d366:	f7e7 f84d 	bl	8004404 <HAL_GPIO_Init>
	}

	uint32_t v = __getAdcValue(channel,ITSDK_ADC_OVERSAMPLING);
 801d36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d36c:	2110      	movs	r1, #16
 801d36e:	0018      	movs	r0, r3
 801d370:	f7ff fdbc 	bl	801ceec <__getAdcValue>
 801d374:	0003      	movs	r3, r0
 801d376:	627b      	str	r3, [r7, #36]	; 0x24
	if (pin == 0) {
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d112      	bne.n	801d3a4 <adc_getValue+0x190>
		if ( v == 0 ) return 0; // securing
 801d37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d380:	2b00      	cmp	r3, #0
 801d382:	d101      	bne.n	801d388 <adc_getValue+0x174>
 801d384:	2300      	movs	r3, #0
 801d386:	e017      	b.n	801d3b8 <adc_getValue+0x1a4>
   	    int32_t vdd = ((int32_t)(*VREFINT_CAL) * VDD_CALIB) / v;
 801d388:	4b1e      	ldr	r3, [pc, #120]	; (801d404 <adc_getValue+0x1f0>)
 801d38a:	881b      	ldrh	r3, [r3, #0]
 801d38c:	001a      	movs	r2, r3
 801d38e:	4b1e      	ldr	r3, [pc, #120]	; (801d408 <adc_getValue+0x1f4>)
 801d390:	4353      	muls	r3, r2
 801d392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d394:	0018      	movs	r0, r3
 801d396:	f7e2 febf 	bl	8000118 <__udivsi3>
 801d39a:	0003      	movs	r3, r0
 801d39c:	61fb      	str	r3, [r7, #28]
	    return (uint16_t)vdd;
 801d39e:	69fb      	ldr	r3, [r7, #28]
 801d3a0:	b29b      	uxth	r3, r3
 801d3a2:	e009      	b.n	801d3b8 <adc_getValue+0x1a4>
	} else {
		int32_t vdd = ((uint32_t)adc_getVdd() * v )/4096;
 801d3a4:	f7ff fefa 	bl	801d19c <adc_getVdd>
 801d3a8:	0003      	movs	r3, r0
 801d3aa:	001a      	movs	r2, r3
 801d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3ae:	4353      	muls	r3, r2
 801d3b0:	0b1b      	lsrs	r3, r3, #12
 801d3b2:	623b      	str	r3, [r7, #32]
	    return (uint16_t)vdd;
 801d3b4:	6a3b      	ldr	r3, [r7, #32]
 801d3b6:	b29b      	uxth	r3, r3
	}

}
 801d3b8:	0018      	movs	r0, r3
 801d3ba:	46bd      	mov	sp, r7
 801d3bc:	b00c      	add	sp, #48	; 0x30
 801d3be:	bd80      	pop	{r7, pc}
 801d3c0:	08021128 	.word	0x08021128
 801d3c4:	44020000 	.word	0x44020000
 801d3c8:	04000002 	.word	0x04000002
 801d3cc:	08000004 	.word	0x08000004
 801d3d0:	0c000008 	.word	0x0c000008
 801d3d4:	10000010 	.word	0x10000010
 801d3d8:	14000020 	.word	0x14000020
 801d3dc:	18000040 	.word	0x18000040
 801d3e0:	1c000080 	.word	0x1c000080
 801d3e4:	50000400 	.word	0x50000400
 801d3e8:	20000100 	.word	0x20000100
 801d3ec:	24000200 	.word	0x24000200
 801d3f0:	50000800 	.word	0x50000800
 801d3f4:	28000400 	.word	0x28000400
 801d3f8:	2c000800 	.word	0x2c000800
 801d3fc:	30001000 	.word	0x30001000
 801d400:	d0000008 	.word	0xd0000008
 801d404:	1ff80078 	.word	0x1ff80078
 801d408:	00000bb8 	.word	0x00000bb8

0801d40c <getPortFromBankId>:
#endif

/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 801d40c:	b580      	push	{r7, lr}
 801d40e:	b082      	sub	sp, #8
 801d410:	af00      	add	r7, sp, #0
 801d412:	0002      	movs	r2, r0
 801d414:	1dfb      	adds	r3, r7, #7
 801d416:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 801d418:	1dfb      	adds	r3, r7, #7
 801d41a:	781b      	ldrb	r3, [r3, #0]
 801d41c:	2b07      	cmp	r3, #7
 801d41e:	d811      	bhi.n	801d444 <getPortFromBankId+0x38>
 801d420:	009a      	lsls	r2, r3, #2
 801d422:	4b0f      	ldr	r3, [pc, #60]	; (801d460 <getPortFromBankId+0x54>)
 801d424:	18d3      	adds	r3, r2, r3
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 801d42a:	23a0      	movs	r3, #160	; 0xa0
 801d42c:	05db      	lsls	r3, r3, #23
 801d42e:	e012      	b.n	801d456 <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 801d430:	4b0c      	ldr	r3, [pc, #48]	; (801d464 <getPortFromBankId+0x58>)
 801d432:	e010      	b.n	801d456 <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 801d434:	4b0c      	ldr	r3, [pc, #48]	; (801d468 <getPortFromBankId+0x5c>)
 801d436:	e00e      	b.n	801d456 <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 801d438:	4b0c      	ldr	r3, [pc, #48]	; (801d46c <getPortFromBankId+0x60>)
 801d43a:	e00c      	b.n	801d456 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 801d43c:	4b0c      	ldr	r3, [pc, #48]	; (801d470 <getPortFromBankId+0x64>)
 801d43e:	e00a      	b.n	801d456 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H: return GPIOH;
 801d440:	4b0c      	ldr	r3, [pc, #48]	; (801d474 <getPortFromBankId+0x68>)
 801d442:	e008      	b.n	801d456 <getPortFromBankId+0x4a>
#endif
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 801d444:	1dfb      	adds	r3, r7, #7
 801d446:	781b      	ldrb	r3, [r3, #0]
 801d448:	b29b      	uxth	r3, r3
 801d44a:	4a0b      	ldr	r2, [pc, #44]	; (801d478 <getPortFromBankId+0x6c>)
 801d44c:	0019      	movs	r1, r3
 801d44e:	0010      	movs	r0, r2
 801d450:	f7fe f8c0 	bl	801b5d4 <itsdk_error_report>
	}
	return NULL;
 801d454:	2300      	movs	r3, #0
}
 801d456:	0018      	movs	r0, r3
 801d458:	46bd      	mov	sp, r7
 801d45a:	b002      	add	sp, #8
 801d45c:	bd80      	pop	{r7, pc}
 801d45e:	46c0      	nop			; (mov r8, r8)
 801d460:	08021260 	.word	0x08021260
 801d464:	50000400 	.word	0x50000400
 801d468:	50000800 	.word	0x50000800
 801d46c:	50000c00 	.word	0x50000c00
 801d470:	50001000 	.word	0x50001000
 801d474:	50001c00 	.word	0x50001c00
 801d478:	d0000004 	.word	0xd0000004

0801d47c <getPinNumFromPinVector>:

/**
 * Convert the pin vector (every pin is corresponding to a single bit) to a pin number.
 * Internal
 */
uint8_t getPinNumFromPinVector(uint16_t pinId) {
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b084      	sub	sp, #16
 801d480:	af00      	add	r7, sp, #0
 801d482:	0002      	movs	r2, r0
 801d484:	1dbb      	adds	r3, r7, #6
 801d486:	801a      	strh	r2, [r3, #0]
	uint8_t pinPos=0;
 801d488:	230f      	movs	r3, #15
 801d48a:	18fb      	adds	r3, r7, r3
 801d48c:	2200      	movs	r2, #0
 801d48e:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xFF00 ) != 0) { pinPos |= 0x8; }
 801d490:	1dbb      	adds	r3, r7, #6
 801d492:	881a      	ldrh	r2, [r3, #0]
 801d494:	23ff      	movs	r3, #255	; 0xff
 801d496:	021b      	lsls	r3, r3, #8
 801d498:	4013      	ands	r3, r2
 801d49a:	d006      	beq.n	801d4aa <getPinNumFromPinVector+0x2e>
 801d49c:	220f      	movs	r2, #15
 801d49e:	18bb      	adds	r3, r7, r2
 801d4a0:	18ba      	adds	r2, r7, r2
 801d4a2:	7812      	ldrb	r2, [r2, #0]
 801d4a4:	2108      	movs	r1, #8
 801d4a6:	430a      	orrs	r2, r1
 801d4a8:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xF0F0 ) != 0) { pinPos |= 0x4; }
 801d4aa:	1dbb      	adds	r3, r7, #6
 801d4ac:	881b      	ldrh	r3, [r3, #0]
 801d4ae:	4a14      	ldr	r2, [pc, #80]	; (801d500 <getPinNumFromPinVector+0x84>)
 801d4b0:	4013      	ands	r3, r2
 801d4b2:	d006      	beq.n	801d4c2 <getPinNumFromPinVector+0x46>
 801d4b4:	220f      	movs	r2, #15
 801d4b6:	18bb      	adds	r3, r7, r2
 801d4b8:	18ba      	adds	r2, r7, r2
 801d4ba:	7812      	ldrb	r2, [r2, #0]
 801d4bc:	2104      	movs	r1, #4
 801d4be:	430a      	orrs	r2, r1
 801d4c0:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xCCCC ) != 0) { pinPos |= 0x2; }
 801d4c2:	1dbb      	adds	r3, r7, #6
 801d4c4:	881b      	ldrh	r3, [r3, #0]
 801d4c6:	4a0f      	ldr	r2, [pc, #60]	; (801d504 <getPinNumFromPinVector+0x88>)
 801d4c8:	4013      	ands	r3, r2
 801d4ca:	d006      	beq.n	801d4da <getPinNumFromPinVector+0x5e>
 801d4cc:	220f      	movs	r2, #15
 801d4ce:	18bb      	adds	r3, r7, r2
 801d4d0:	18ba      	adds	r2, r7, r2
 801d4d2:	7812      	ldrb	r2, [r2, #0]
 801d4d4:	2102      	movs	r1, #2
 801d4d6:	430a      	orrs	r2, r1
 801d4d8:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xAAAA ) != 0) { pinPos |= 0x1; }
 801d4da:	1dbb      	adds	r3, r7, #6
 801d4dc:	881b      	ldrh	r3, [r3, #0]
 801d4de:	4a0a      	ldr	r2, [pc, #40]	; (801d508 <getPinNumFromPinVector+0x8c>)
 801d4e0:	4013      	ands	r3, r2
 801d4e2:	d006      	beq.n	801d4f2 <getPinNumFromPinVector+0x76>
 801d4e4:	220f      	movs	r2, #15
 801d4e6:	18bb      	adds	r3, r7, r2
 801d4e8:	18ba      	adds	r2, r7, r2
 801d4ea:	7812      	ldrb	r2, [r2, #0]
 801d4ec:	2101      	movs	r1, #1
 801d4ee:	430a      	orrs	r2, r1
 801d4f0:	701a      	strb	r2, [r3, #0]
	return pinPos;
 801d4f2:	230f      	movs	r3, #15
 801d4f4:	18fb      	adds	r3, r7, r3
 801d4f6:	781b      	ldrb	r3, [r3, #0]
}
 801d4f8:	0018      	movs	r0, r3
 801d4fa:	46bd      	mov	sp, r7
 801d4fc:	b004      	add	sp, #16
 801d4fe:	bd80      	pop	{r7, pc}
 801d500:	0000f0f0 	.word	0x0000f0f0
 801d504:	0000cccc 	.word	0x0000cccc
 801d508:	0000aaaa 	.word	0x0000aaaa

0801d50c <getIrqFromBankPin>:

/**
 * Convert a GPIO bank/pin into the corresponding ExtI line
 */
IRQn_Type getIrqFromBankPin(uint8_t bankId, uint16_t id) {
 801d50c:	b5b0      	push	{r4, r5, r7, lr}
 801d50e:	b084      	sub	sp, #16
 801d510:	af00      	add	r7, sp, #0
 801d512:	0002      	movs	r2, r0
 801d514:	1dfb      	adds	r3, r7, #7
 801d516:	701a      	strb	r2, [r3, #0]
 801d518:	1d3b      	adds	r3, r7, #4
 801d51a:	1c0a      	adds	r2, r1, #0
 801d51c:	801a      	strh	r2, [r3, #0]

	uint8_t pinPos = getPinNumFromPinVector(id);
 801d51e:	250f      	movs	r5, #15
 801d520:	197c      	adds	r4, r7, r5
 801d522:	1d3b      	adds	r3, r7, #4
 801d524:	881b      	ldrh	r3, [r3, #0]
 801d526:	0018      	movs	r0, r3
 801d528:	f7ff ffa8 	bl	801d47c <getPinNumFromPinVector>
 801d52c:	0003      	movs	r3, r0
 801d52e:	7023      	strb	r3, [r4, #0]
	if ( pinPos <= 1 ) {
 801d530:	197b      	adds	r3, r7, r5
 801d532:	781b      	ldrb	r3, [r3, #0]
 801d534:	2b01      	cmp	r3, #1
 801d536:	d801      	bhi.n	801d53c <getIrqFromBankPin+0x30>
		return EXTI0_1_IRQn;
 801d538:	2305      	movs	r3, #5
 801d53a:	e007      	b.n	801d54c <getIrqFromBankPin+0x40>
	} else if ( pinPos <= 3 ) {
 801d53c:	230f      	movs	r3, #15
 801d53e:	18fb      	adds	r3, r7, r3
 801d540:	781b      	ldrb	r3, [r3, #0]
 801d542:	2b03      	cmp	r3, #3
 801d544:	d801      	bhi.n	801d54a <getIrqFromBankPin+0x3e>
		return EXTI2_3_IRQn;
 801d546:	2306      	movs	r3, #6
 801d548:	e000      	b.n	801d54c <getIrqFromBankPin+0x40>
	} else {
		return EXTI4_15_IRQn;
 801d54a:	2307      	movs	r3, #7
	}
}
 801d54c:	0018      	movs	r0, r3
 801d54e:	46bd      	mov	sp, r7
 801d550:	b004      	add	sp, #16
 801d552:	bdb0      	pop	{r4, r5, r7, pc}

0801d554 <gpio_configure>:


void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
 801d554:	b590      	push	{r4, r7, lr}
 801d556:	b085      	sub	sp, #20
 801d558:	af02      	add	r7, sp, #8
 801d55a:	0004      	movs	r4, r0
 801d55c:	0008      	movs	r0, r1
 801d55e:	0011      	movs	r1, r2
 801d560:	1dfb      	adds	r3, r7, #7
 801d562:	1c22      	adds	r2, r4, #0
 801d564:	701a      	strb	r2, [r3, #0]
 801d566:	1d3b      	adds	r3, r7, #4
 801d568:	1c02      	adds	r2, r0, #0
 801d56a:	801a      	strh	r2, [r3, #0]
 801d56c:	1dbb      	adds	r3, r7, #6
 801d56e:	1c0a      	adds	r2, r1, #0
 801d570:	701a      	strb	r2, [r3, #0]
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
 801d572:	1dbb      	adds	r3, r7, #6
 801d574:	781a      	ldrb	r2, [r3, #0]
 801d576:	1d3b      	adds	r3, r7, #4
 801d578:	8819      	ldrh	r1, [r3, #0]
 801d57a:	1dfb      	adds	r3, r7, #7
 801d57c:	7818      	ldrb	r0, [r3, #0]
 801d57e:	2300      	movs	r3, #0
 801d580:	9300      	str	r3, [sp, #0]
 801d582:	2300      	movs	r3, #0
 801d584:	f000 f804 	bl	801d590 <gpio_configure_ext>
}
 801d588:	46c0      	nop			; (mov r8, r8)
 801d58a:	46bd      	mov	sp, r7
 801d58c:	b003      	add	sp, #12
 801d58e:	bd90      	pop	{r4, r7, pc}

0801d590 <gpio_configure_ext>:


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 801d590:	b5b0      	push	{r4, r5, r7, lr}
 801d592:	b08e      	sub	sp, #56	; 0x38
 801d594:	af00      	add	r7, sp, #0
 801d596:	0005      	movs	r5, r0
 801d598:	000c      	movs	r4, r1
 801d59a:	0010      	movs	r0, r2
 801d59c:	0019      	movs	r1, r3
 801d59e:	1dfb      	adds	r3, r7, #7
 801d5a0:	1c2a      	adds	r2, r5, #0
 801d5a2:	701a      	strb	r2, [r3, #0]
 801d5a4:	1d3b      	adds	r3, r7, #4
 801d5a6:	1c22      	adds	r2, r4, #0
 801d5a8:	801a      	strh	r2, [r3, #0]
 801d5aa:	1dbb      	adds	r3, r7, #6
 801d5ac:	1c02      	adds	r2, r0, #0
 801d5ae:	701a      	strb	r2, [r3, #0]
 801d5b0:	1cfb      	adds	r3, r7, #3
 801d5b2:	1c0a      	adds	r2, r1, #0
 801d5b4:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 801d5b6:	1dfb      	adds	r3, r7, #7
 801d5b8:	781b      	ldrb	r3, [r3, #0]
 801d5ba:	2b07      	cmp	r3, #7
 801d5bc:	d852      	bhi.n	801d664 <gpio_configure_ext+0xd4>
 801d5be:	009a      	lsls	r2, r3, #2
 801d5c0:	4bd0      	ldr	r3, [pc, #832]	; (801d904 <gpio_configure_ext+0x374>)
 801d5c2:	18d3      	adds	r3, r2, r3
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 801d5c8:	4bcf      	ldr	r3, [pc, #828]	; (801d908 <gpio_configure_ext+0x378>)
 801d5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d5cc:	4bce      	ldr	r3, [pc, #824]	; (801d908 <gpio_configure_ext+0x378>)
 801d5ce:	2101      	movs	r1, #1
 801d5d0:	430a      	orrs	r2, r1
 801d5d2:	62da      	str	r2, [r3, #44]	; 0x2c
 801d5d4:	4bcc      	ldr	r3, [pc, #816]	; (801d908 <gpio_configure_ext+0x378>)
 801d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5d8:	2201      	movs	r2, #1
 801d5da:	4013      	ands	r3, r2
 801d5dc:	61fb      	str	r3, [r7, #28]
 801d5de:	69fb      	ldr	r3, [r7, #28]
		  break;
 801d5e0:	e040      	b.n	801d664 <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 801d5e2:	4bc9      	ldr	r3, [pc, #804]	; (801d908 <gpio_configure_ext+0x378>)
 801d5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d5e6:	4bc8      	ldr	r3, [pc, #800]	; (801d908 <gpio_configure_ext+0x378>)
 801d5e8:	2102      	movs	r1, #2
 801d5ea:	430a      	orrs	r2, r1
 801d5ec:	62da      	str	r2, [r3, #44]	; 0x2c
 801d5ee:	4bc6      	ldr	r3, [pc, #792]	; (801d908 <gpio_configure_ext+0x378>)
 801d5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5f2:	2202      	movs	r2, #2
 801d5f4:	4013      	ands	r3, r2
 801d5f6:	61bb      	str	r3, [r7, #24]
 801d5f8:	69bb      	ldr	r3, [r7, #24]
		  break;
 801d5fa:	e033      	b.n	801d664 <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 801d5fc:	4bc2      	ldr	r3, [pc, #776]	; (801d908 <gpio_configure_ext+0x378>)
 801d5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d600:	4bc1      	ldr	r3, [pc, #772]	; (801d908 <gpio_configure_ext+0x378>)
 801d602:	2104      	movs	r1, #4
 801d604:	430a      	orrs	r2, r1
 801d606:	62da      	str	r2, [r3, #44]	; 0x2c
 801d608:	4bbf      	ldr	r3, [pc, #764]	; (801d908 <gpio_configure_ext+0x378>)
 801d60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d60c:	2204      	movs	r2, #4
 801d60e:	4013      	ands	r3, r2
 801d610:	617b      	str	r3, [r7, #20]
 801d612:	697b      	ldr	r3, [r7, #20]
		  break;
 801d614:	e026      	b.n	801d664 <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 801d616:	4bbc      	ldr	r3, [pc, #752]	; (801d908 <gpio_configure_ext+0x378>)
 801d618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d61a:	4bbb      	ldr	r3, [pc, #748]	; (801d908 <gpio_configure_ext+0x378>)
 801d61c:	2108      	movs	r1, #8
 801d61e:	430a      	orrs	r2, r1
 801d620:	62da      	str	r2, [r3, #44]	; 0x2c
 801d622:	4bb9      	ldr	r3, [pc, #740]	; (801d908 <gpio_configure_ext+0x378>)
 801d624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d626:	2208      	movs	r2, #8
 801d628:	4013      	ands	r3, r2
 801d62a:	613b      	str	r3, [r7, #16]
 801d62c:	693b      	ldr	r3, [r7, #16]
		  break;
 801d62e:	e019      	b.n	801d664 <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 801d630:	4bb5      	ldr	r3, [pc, #724]	; (801d908 <gpio_configure_ext+0x378>)
 801d632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d634:	4bb4      	ldr	r3, [pc, #720]	; (801d908 <gpio_configure_ext+0x378>)
 801d636:	2110      	movs	r1, #16
 801d638:	430a      	orrs	r2, r1
 801d63a:	62da      	str	r2, [r3, #44]	; 0x2c
 801d63c:	4bb2      	ldr	r3, [pc, #712]	; (801d908 <gpio_configure_ext+0x378>)
 801d63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d640:	2210      	movs	r2, #16
 801d642:	4013      	ands	r3, r2
 801d644:	60fb      	str	r3, [r7, #12]
 801d646:	68fb      	ldr	r3, [r7, #12]
		  break;
 801d648:	e00c      	b.n	801d664 <gpio_configure_ext+0xd4>
    #endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 801d64a:	4baf      	ldr	r3, [pc, #700]	; (801d908 <gpio_configure_ext+0x378>)
 801d64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d64e:	4bae      	ldr	r3, [pc, #696]	; (801d908 <gpio_configure_ext+0x378>)
 801d650:	2180      	movs	r1, #128	; 0x80
 801d652:	430a      	orrs	r2, r1
 801d654:	62da      	str	r2, [r3, #44]	; 0x2c
 801d656:	4bac      	ldr	r3, [pc, #688]	; (801d908 <gpio_configure_ext+0x378>)
 801d658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d65a:	2280      	movs	r2, #128	; 0x80
 801d65c:	4013      	ands	r3, r2
 801d65e:	60bb      	str	r3, [r7, #8]
 801d660:	68bb      	ldr	r3, [r7, #8]
		  break;
 801d662:	46c0      	nop			; (mov r8, r8)
	#endif
	}

	GPIO_InitStruct.Pin = id;
 801d664:	1d3b      	adds	r3, r7, #4
 801d666:	881a      	ldrh	r2, [r3, #0]
 801d668:	2320      	movs	r3, #32
 801d66a:	18fb      	adds	r3, r7, r3
 801d66c:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 801d66e:	1cfb      	adds	r3, r7, #3
 801d670:	781b      	ldrb	r3, [r3, #0]
 801d672:	2b00      	cmp	r3, #0
 801d674:	d002      	beq.n	801d67c <gpio_configure_ext+0xec>
 801d676:	2b01      	cmp	r3, #1
 801d678:	d005      	beq.n	801d686 <gpio_configure_ext+0xf6>
 801d67a:	e009      	b.n	801d690 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d67c:	2320      	movs	r3, #32
 801d67e:	18fb      	adds	r3, r7, r3
 801d680:	2200      	movs	r2, #0
 801d682:	60da      	str	r2, [r3, #12]
		break;
 801d684:	e004      	b.n	801d690 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d686:	2320      	movs	r3, #32
 801d688:	18fb      	adds	r3, r7, r3
 801d68a:	2203      	movs	r2, #3
 801d68c:	60da      	str	r2, [r3, #12]
		break;
 801d68e:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 801d690:	1dbb      	adds	r3, r7, #6
 801d692:	781b      	ldrb	r3, [r3, #0]
 801d694:	2b13      	cmp	r3, #19
 801d696:	d900      	bls.n	801d69a <gpio_configure_ext+0x10a>
 801d698:	e0a4      	b.n	801d7e4 <gpio_configure_ext+0x254>
 801d69a:	009a      	lsls	r2, r3, #2
 801d69c:	4b9b      	ldr	r3, [pc, #620]	; (801d90c <gpio_configure_ext+0x37c>)
 801d69e:	18d3      	adds	r3, r2, r3
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d6a4:	2120      	movs	r1, #32
 801d6a6:	187b      	adds	r3, r7, r1
 801d6a8:	2201      	movs	r2, #1
 801d6aa:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d6ac:	187b      	adds	r3, r7, r1
 801d6ae:	2200      	movs	r2, #0
 801d6b0:	609a      	str	r2, [r3, #8]
		break;
 801d6b2:	e097      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d6b4:	2120      	movs	r1, #32
 801d6b6:	187b      	adds	r3, r7, r1
 801d6b8:	2201      	movs	r2, #1
 801d6ba:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d6bc:	187b      	adds	r3, r7, r1
 801d6be:	2201      	movs	r2, #1
 801d6c0:	609a      	str	r2, [r3, #8]
		break;
 801d6c2:	e08f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d6c4:	2120      	movs	r1, #32
 801d6c6:	187b      	adds	r3, r7, r1
 801d6c8:	2201      	movs	r2, #1
 801d6ca:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d6cc:	187b      	adds	r3, r7, r1
 801d6ce:	2202      	movs	r2, #2
 801d6d0:	609a      	str	r2, [r3, #8]
		break;
 801d6d2:	e087      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 801d6d4:	2120      	movs	r1, #32
 801d6d6:	187b      	adds	r3, r7, r1
 801d6d8:	2211      	movs	r2, #17
 801d6da:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d6dc:	187b      	adds	r3, r7, r1
 801d6de:	2200      	movs	r2, #0
 801d6e0:	609a      	str	r2, [r3, #8]
		break;
 801d6e2:	e07f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801d6e4:	2120      	movs	r1, #32
 801d6e6:	187b      	adds	r3, r7, r1
 801d6e8:	2200      	movs	r2, #0
 801d6ea:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d6ec:	187b      	adds	r3, r7, r1
 801d6ee:	2200      	movs	r2, #0
 801d6f0:	609a      	str	r2, [r3, #8]
		break;
 801d6f2:	e077      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801d6f4:	2120      	movs	r1, #32
 801d6f6:	187b      	adds	r3, r7, r1
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d6fc:	187b      	adds	r3, r7, r1
 801d6fe:	2201      	movs	r2, #1
 801d700:	609a      	str	r2, [r3, #8]
		break;
 801d702:	e06f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801d704:	2120      	movs	r1, #32
 801d706:	187b      	adds	r3, r7, r1
 801d708:	2200      	movs	r2, #0
 801d70a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d70c:	187b      	adds	r3, r7, r1
 801d70e:	2202      	movs	r2, #2
 801d710:	609a      	str	r2, [r3, #8]
		break;
 801d712:	e067      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d714:	2120      	movs	r1, #32
 801d716:	187b      	adds	r3, r7, r1
 801d718:	4a7d      	ldr	r2, [pc, #500]	; (801d910 <gpio_configure_ext+0x380>)
 801d71a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d71c:	187b      	adds	r3, r7, r1
 801d71e:	2200      	movs	r2, #0
 801d720:	609a      	str	r2, [r3, #8]
		break;
 801d722:	e05f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d724:	2120      	movs	r1, #32
 801d726:	187b      	adds	r3, r7, r1
 801d728:	4a79      	ldr	r2, [pc, #484]	; (801d910 <gpio_configure_ext+0x380>)
 801d72a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d72c:	187b      	adds	r3, r7, r1
 801d72e:	2202      	movs	r2, #2
 801d730:	609a      	str	r2, [r3, #8]
		break;
 801d732:	e057      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801d734:	2120      	movs	r1, #32
 801d736:	187b      	adds	r3, r7, r1
 801d738:	4a75      	ldr	r2, [pc, #468]	; (801d910 <gpio_configure_ext+0x380>)
 801d73a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d73c:	187b      	adds	r3, r7, r1
 801d73e:	2201      	movs	r2, #1
 801d740:	609a      	str	r2, [r3, #8]
		break;
 801d742:	e04f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d744:	2120      	movs	r1, #32
 801d746:	187b      	adds	r3, r7, r1
 801d748:	4a72      	ldr	r2, [pc, #456]	; (801d914 <gpio_configure_ext+0x384>)
 801d74a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d74c:	187b      	adds	r3, r7, r1
 801d74e:	2200      	movs	r2, #0
 801d750:	609a      	str	r2, [r3, #8]
		break;
 801d752:	e047      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d754:	2120      	movs	r1, #32
 801d756:	187b      	adds	r3, r7, r1
 801d758:	4a6e      	ldr	r2, [pc, #440]	; (801d914 <gpio_configure_ext+0x384>)
 801d75a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d75c:	187b      	adds	r3, r7, r1
 801d75e:	2201      	movs	r2, #1
 801d760:	609a      	str	r2, [r3, #8]
		break;
 801d762:	e03f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801d764:	2120      	movs	r1, #32
 801d766:	187b      	adds	r3, r7, r1
 801d768:	4a6a      	ldr	r2, [pc, #424]	; (801d914 <gpio_configure_ext+0x384>)
 801d76a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d76c:	187b      	adds	r3, r7, r1
 801d76e:	2202      	movs	r2, #2
 801d770:	609a      	str	r2, [r3, #8]
		break;
 801d772:	e037      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801d774:	2120      	movs	r1, #32
 801d776:	187b      	adds	r3, r7, r1
 801d778:	4a67      	ldr	r2, [pc, #412]	; (801d918 <gpio_configure_ext+0x388>)
 801d77a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d77c:	187b      	adds	r3, r7, r1
 801d77e:	2200      	movs	r2, #0
 801d780:	609a      	str	r2, [r3, #8]
		break;
 801d782:	e02f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d784:	2120      	movs	r1, #32
 801d786:	187b      	adds	r3, r7, r1
 801d788:	2203      	movs	r2, #3
 801d78a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d78c:	187b      	adds	r3, r7, r1
 801d78e:	2200      	movs	r2, #0
 801d790:	609a      	str	r2, [r3, #8]
		break;
 801d792:	e027      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801d794:	2120      	movs	r1, #32
 801d796:	187b      	adds	r3, r7, r1
 801d798:	2203      	movs	r2, #3
 801d79a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d79c:	187b      	adds	r3, r7, r1
 801d79e:	2200      	movs	r2, #0
 801d7a0:	609a      	str	r2, [r3, #8]
		break;
 801d7a2:	e01f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d7a4:	2120      	movs	r1, #32
 801d7a6:	187b      	adds	r3, r7, r1
 801d7a8:	2202      	movs	r2, #2
 801d7aa:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7ac:	187b      	adds	r3, r7, r1
 801d7ae:	2200      	movs	r2, #0
 801d7b0:	609a      	str	r2, [r3, #8]
	    break;
 801d7b2:	e017      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d7b4:	2120      	movs	r1, #32
 801d7b6:	187b      	adds	r3, r7, r1
 801d7b8:	2202      	movs	r2, #2
 801d7ba:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801d7bc:	187b      	adds	r3, r7, r1
 801d7be:	2201      	movs	r2, #1
 801d7c0:	609a      	str	r2, [r3, #8]
	    break;
 801d7c2:	e00f      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d7c4:	2120      	movs	r1, #32
 801d7c6:	187b      	adds	r3, r7, r1
 801d7c8:	2202      	movs	r2, #2
 801d7ca:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801d7cc:	187b      	adds	r3, r7, r1
 801d7ce:	2202      	movs	r2, #2
 801d7d0:	609a      	str	r2, [r3, #8]
	    break;
 801d7d2:	e007      	b.n	801d7e4 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801d7d4:	2120      	movs	r1, #32
 801d7d6:	187b      	adds	r3, r7, r1
 801d7d8:	2212      	movs	r2, #18
 801d7da:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7dc:	187b      	adds	r3, r7, r1
 801d7de:	2200      	movs	r2, #0
 801d7e0:	609a      	str	r2, [r3, #8]
	    break;
 801d7e2:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 801d7e4:	2300      	movs	r3, #0
 801d7e6:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 801d7e8:	1dbb      	adds	r3, r7, #6
 801d7ea:	781b      	ldrb	r3, [r3, #0]
 801d7ec:	3b10      	subs	r3, #16
 801d7ee:	2b03      	cmp	r3, #3
 801d7f0:	d900      	bls.n	801d7f4 <gpio_configure_ext+0x264>
 801d7f2:	e0a1      	b.n	801d938 <gpio_configure_ext+0x3a8>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 801d7f4:	2348      	movs	r3, #72	; 0x48
 801d7f6:	18fb      	adds	r3, r7, r3
 801d7f8:	781b      	ldrb	r3, [r3, #0]
 801d7fa:	2b06      	cmp	r3, #6
 801d7fc:	d900      	bls.n	801d800 <gpio_configure_ext+0x270>
 801d7fe:	e092      	b.n	801d926 <gpio_configure_ext+0x396>
 801d800:	009a      	lsls	r2, r3, #2
 801d802:	4b46      	ldr	r3, [pc, #280]	; (801d91c <gpio_configure_ext+0x38c>)
 801d804:	18d3      	adds	r3, r2, r3
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	469f      	mov	pc, r3
		case ITSDK_GPIO_ALT_TIMER2_TR:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801d80a:	1dfb      	adds	r3, r7, #7
 801d80c:	781b      	ldrb	r3, [r3, #0]
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d10a      	bne.n	801d828 <gpio_configure_ext+0x298>
 801d812:	1d3b      	adds	r3, r7, #4
 801d814:	881a      	ldrh	r2, [r3, #0]
 801d816:	2380      	movs	r3, #128	; 0x80
 801d818:	021b      	lsls	r3, r3, #8
 801d81a:	429a      	cmp	r2, r3
 801d81c:	d104      	bne.n	801d828 <gpio_configure_ext+0x298>
 801d81e:	2320      	movs	r3, #32
 801d820:	18fb      	adds	r3, r7, r3
 801d822:	2202      	movs	r2, #2
 801d824:	611a      	str	r2, [r3, #16]
 801d826:	e01c      	b.n	801d862 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801d828:	1dfb      	adds	r3, r7, #7
 801d82a:	781b      	ldrb	r3, [r3, #0]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d108      	bne.n	801d842 <gpio_configure_ext+0x2b2>
 801d830:	1d3b      	adds	r3, r7, #4
 801d832:	881b      	ldrh	r3, [r3, #0]
 801d834:	2b20      	cmp	r3, #32
 801d836:	d104      	bne.n	801d842 <gpio_configure_ext+0x2b2>
 801d838:	2320      	movs	r3, #32
 801d83a:	18fb      	adds	r3, r7, r3
 801d83c:	2202      	movs	r2, #2
 801d83e:	611a      	str	r2, [r3, #16]
 801d840:	e00f      	b.n	801d862 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801d842:	1dfb      	adds	r3, r7, #7
 801d844:	781b      	ldrb	r3, [r3, #0]
 801d846:	2b00      	cmp	r3, #0
 801d848:	d108      	bne.n	801d85c <gpio_configure_ext+0x2cc>
 801d84a:	1d3b      	adds	r3, r7, #4
 801d84c:	881b      	ldrh	r3, [r3, #0]
 801d84e:	2b01      	cmp	r3, #1
 801d850:	d104      	bne.n	801d85c <gpio_configure_ext+0x2cc>
 801d852:	2320      	movs	r3, #32
 801d854:	18fb      	adds	r3, r7, r3
 801d856:	2205      	movs	r2, #5
 801d858:	611a      	str	r2, [r3, #16]
 801d85a:	e002      	b.n	801d862 <gpio_configure_ext+0x2d2>
			else err=1;
 801d85c:	2301      	movs	r3, #1
 801d85e:	637b      	str	r3, [r7, #52]	; 0x34
		#else
		  #warning This device will not accept alternate GPIO configuration: code is missing
		#endif
			break;
 801d860:	e062      	b.n	801d928 <gpio_configure_ext+0x398>
 801d862:	e061      	b.n	801d928 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_TIMER2_C1:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801d864:	1dfb      	adds	r3, r7, #7
 801d866:	781b      	ldrb	r3, [r3, #0]
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d10a      	bne.n	801d882 <gpio_configure_ext+0x2f2>
 801d86c:	1d3b      	adds	r3, r7, #4
 801d86e:	881a      	ldrh	r2, [r3, #0]
 801d870:	2380      	movs	r3, #128	; 0x80
 801d872:	021b      	lsls	r3, r3, #8
 801d874:	429a      	cmp	r2, r3
 801d876:	d104      	bne.n	801d882 <gpio_configure_ext+0x2f2>
 801d878:	2320      	movs	r3, #32
 801d87a:	18fb      	adds	r3, r7, r3
 801d87c:	2205      	movs	r2, #5
 801d87e:	611a      	str	r2, [r3, #16]
 801d880:	e01c      	b.n	801d8bc <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 801d882:	1dfb      	adds	r3, r7, #7
 801d884:	781b      	ldrb	r3, [r3, #0]
 801d886:	2b00      	cmp	r3, #0
 801d888:	d108      	bne.n	801d89c <gpio_configure_ext+0x30c>
 801d88a:	1d3b      	adds	r3, r7, #4
 801d88c:	881b      	ldrh	r3, [r3, #0]
 801d88e:	2b20      	cmp	r3, #32
 801d890:	d104      	bne.n	801d89c <gpio_configure_ext+0x30c>
 801d892:	2320      	movs	r3, #32
 801d894:	18fb      	adds	r3, r7, r3
 801d896:	2205      	movs	r2, #5
 801d898:	611a      	str	r2, [r3, #16]
 801d89a:	e00f      	b.n	801d8bc <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801d89c:	1dfb      	adds	r3, r7, #7
 801d89e:	781b      	ldrb	r3, [r3, #0]
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d108      	bne.n	801d8b6 <gpio_configure_ext+0x326>
 801d8a4:	1d3b      	adds	r3, r7, #4
 801d8a6:	881b      	ldrh	r3, [r3, #0]
 801d8a8:	2b01      	cmp	r3, #1
 801d8aa:	d104      	bne.n	801d8b6 <gpio_configure_ext+0x326>
 801d8ac:	2320      	movs	r3, #32
 801d8ae:	18fb      	adds	r3, r7, r3
 801d8b0:	2202      	movs	r2, #2
 801d8b2:	611a      	str	r2, [r3, #16]
 801d8b4:	e002      	b.n	801d8bc <gpio_configure_ext+0x32c>
			else err=1;
 801d8b6:	2301      	movs	r3, #1
 801d8b8:	637b      	str	r3, [r7, #52]	; 0x34
		#endif
			break;
 801d8ba:	e035      	b.n	801d928 <gpio_configure_ext+0x398>
 801d8bc:	e034      	b.n	801d928 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_SCLK:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801d8be:	1dfb      	adds	r3, r7, #7
 801d8c0:	781b      	ldrb	r3, [r3, #0]
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d108      	bne.n	801d8d8 <gpio_configure_ext+0x348>
 801d8c6:	1d3b      	adds	r3, r7, #4
 801d8c8:	881b      	ldrh	r3, [r3, #0]
 801d8ca:	2b20      	cmp	r3, #32
 801d8cc:	d104      	bne.n	801d8d8 <gpio_configure_ext+0x348>
 801d8ce:	2320      	movs	r3, #32
 801d8d0:	18fb      	adds	r3, r7, r3
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	611a      	str	r2, [r3, #16]
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_3 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801d8d6:	e027      	b.n	801d928 <gpio_configure_ext+0x398>
				else err=1;
 801d8d8:	2301      	movs	r3, #1
 801d8da:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 801d8dc:	e024      	b.n	801d928 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MOSI:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 801d8de:	1dfb      	adds	r3, r7, #7
 801d8e0:	781b      	ldrb	r3, [r3, #0]
 801d8e2:	2b01      	cmp	r3, #1
 801d8e4:	d108      	bne.n	801d8f8 <gpio_configure_ext+0x368>
 801d8e6:	1d3b      	adds	r3, r7, #4
 801d8e8:	881b      	ldrh	r3, [r3, #0]
 801d8ea:	2b20      	cmp	r3, #32
 801d8ec:	d104      	bne.n	801d8f8 <gpio_configure_ext+0x368>
 801d8ee:	2320      	movs	r3, #32
 801d8f0:	18fb      	adds	r3, r7, r3
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	611a      	str	r2, [r3, #16]
				if ( bank == __BANK_A && id == __LP_GPIO_7 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_A && id == __LP_GPIO_12 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801d8f6:	e017      	b.n	801d928 <gpio_configure_ext+0x398>
				else err=1;
 801d8f8:	2301      	movs	r3, #1
 801d8fa:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 801d8fc:	e014      	b.n	801d928 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MISO:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 801d8fe:	2301      	movs	r3, #1
 801d900:	637b      	str	r3, [r7, #52]	; 0x34
				if ( bank == __BANK_A && id == __LP_GPIO_11 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_6 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_B && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801d902:	e011      	b.n	801d928 <gpio_configure_ext+0x398>
 801d904:	08021280 	.word	0x08021280
 801d908:	40021000 	.word	0x40021000
 801d90c:	080212a0 	.word	0x080212a0
 801d910:	10110000 	.word	0x10110000
 801d914:	10210000 	.word	0x10210000
 801d918:	10310000 	.word	0x10310000
 801d91c:	080212f0 	.word	0x080212f0
		case ITSDK_GPIO_ALT_SPI1_NSS:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 801d920:	2301      	movs	r3, #1
 801d922:	637b      	str	r3, [r7, #52]	; 0x34
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 801d924:	e000      	b.n	801d928 <gpio_configure_ext+0x398>
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 801d926:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 801d928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	dd06      	ble.n	801d93c <gpio_configure_ext+0x3ac>
			log_error("Gpio - invalid alternate\r\n");
 801d92e:	4b0c      	ldr	r3, [pc, #48]	; (801d960 <gpio_configure_ext+0x3d0>)
 801d930:	0018      	movs	r0, r3
 801d932:	f7fe f8db 	bl	801baec <log_error>
		}
		break;
 801d936:	e001      	b.n	801d93c <gpio_configure_ext+0x3ac>
	default:
		break;
 801d938:	46c0      	nop			; (mov r8, r8)
 801d93a:	e000      	b.n	801d93e <gpio_configure_ext+0x3ae>
		break;
 801d93c:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 801d93e:	1dfb      	adds	r3, r7, #7
 801d940:	781b      	ldrb	r3, [r3, #0]
 801d942:	0018      	movs	r0, r3
 801d944:	f7ff fd62 	bl	801d40c <getPortFromBankId>
 801d948:	0002      	movs	r2, r0
 801d94a:	2320      	movs	r3, #32
 801d94c:	18fb      	adds	r3, r7, r3
 801d94e:	0019      	movs	r1, r3
 801d950:	0010      	movs	r0, r2
 801d952:	f7e6 fd57 	bl	8004404 <HAL_GPIO_Init>

}
 801d956:	46c0      	nop			; (mov r8, r8)
 801d958:	46bd      	mov	sp, r7
 801d95a:	b00e      	add	sp, #56	; 0x38
 801d95c:	bdb0      	pop	{r4, r5, r7, pc}
 801d95e:	46c0      	nop			; (mov r8, r8)
 801d960:	0802020c 	.word	0x0802020c

0801d964 <gpio_set>:

void gpio_set(uint8_t bank, uint16_t id) {
 801d964:	b580      	push	{r7, lr}
 801d966:	b082      	sub	sp, #8
 801d968:	af00      	add	r7, sp, #0
 801d96a:	0002      	movs	r2, r0
 801d96c:	1dfb      	adds	r3, r7, #7
 801d96e:	701a      	strb	r2, [r3, #0]
 801d970:	1d3b      	adds	r3, r7, #4
 801d972:	1c0a      	adds	r2, r1, #0
 801d974:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_SET);
 801d976:	1dfb      	adds	r3, r7, #7
 801d978:	781b      	ldrb	r3, [r3, #0]
 801d97a:	0018      	movs	r0, r3
 801d97c:	f7ff fd46 	bl	801d40c <getPortFromBankId>
 801d980:	1d3b      	adds	r3, r7, #4
 801d982:	881b      	ldrh	r3, [r3, #0]
 801d984:	2201      	movs	r2, #1
 801d986:	0019      	movs	r1, r3
 801d988:	f7e6 feba 	bl	8004700 <HAL_GPIO_WritePin>
}
 801d98c:	46c0      	nop			; (mov r8, r8)
 801d98e:	46bd      	mov	sp, r7
 801d990:	b002      	add	sp, #8
 801d992:	bd80      	pop	{r7, pc}

0801d994 <gpio_reset>:

void gpio_reset(uint8_t bank, uint16_t id) {
 801d994:	b580      	push	{r7, lr}
 801d996:	b082      	sub	sp, #8
 801d998:	af00      	add	r7, sp, #0
 801d99a:	0002      	movs	r2, r0
 801d99c:	1dfb      	adds	r3, r7, #7
 801d99e:	701a      	strb	r2, [r3, #0]
 801d9a0:	1d3b      	adds	r3, r7, #4
 801d9a2:	1c0a      	adds	r2, r1, #0
 801d9a4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_RESET);
 801d9a6:	1dfb      	adds	r3, r7, #7
 801d9a8:	781b      	ldrb	r3, [r3, #0]
 801d9aa:	0018      	movs	r0, r3
 801d9ac:	f7ff fd2e 	bl	801d40c <getPortFromBankId>
 801d9b0:	1d3b      	adds	r3, r7, #4
 801d9b2:	881b      	ldrh	r3, [r3, #0]
 801d9b4:	2200      	movs	r2, #0
 801d9b6:	0019      	movs	r1, r3
 801d9b8:	f7e6 fea2 	bl	8004700 <HAL_GPIO_WritePin>
}
 801d9bc:	46c0      	nop			; (mov r8, r8)
 801d9be:	46bd      	mov	sp, r7
 801d9c0:	b002      	add	sp, #8
 801d9c2:	bd80      	pop	{r7, pc}

0801d9c4 <gpio_interruptEnable>:
uint8_t gpio_read(uint8_t bank, uint16_t id) {
	return HAL_GPIO_ReadPin(getPortFromBankId(bank), id);
}


void gpio_interruptEnable(uint8_t bank, uint16_t id) {
 801d9c4:	b580      	push	{r7, lr}
 801d9c6:	b082      	sub	sp, #8
 801d9c8:	af00      	add	r7, sp, #0
 801d9ca:	0002      	movs	r2, r0
 801d9cc:	1dfb      	adds	r3, r7, #7
 801d9ce:	701a      	strb	r2, [r3, #0]
 801d9d0:	1d3b      	adds	r3, r7, #4
 801d9d2:	1c0a      	adds	r2, r1, #0
 801d9d4:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(getIrqFromBankPin(bank,id));
 801d9d6:	1d3b      	adds	r3, r7, #4
 801d9d8:	881a      	ldrh	r2, [r3, #0]
 801d9da:	1dfb      	adds	r3, r7, #7
 801d9dc:	781b      	ldrb	r3, [r3, #0]
 801d9de:	0011      	movs	r1, r2
 801d9e0:	0018      	movs	r0, r3
 801d9e2:	f7ff fd93 	bl	801d50c <getIrqFromBankPin>
 801d9e6:	0003      	movs	r3, r0
 801d9e8:	0018      	movs	r0, r3
 801d9ea:	f7e6 fc96 	bl	800431a <HAL_NVIC_EnableIRQ>
}
 801d9ee:	46c0      	nop			; (mov r8, r8)
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	b002      	add	sp, #8
 801d9f4:	bd80      	pop	{r7, pc}

0801d9f6 <gpio_interruptDisableAll>:

void gpio_interruptDisable(uint8_t bank, uint16_t id) {
	HAL_NVIC_DisableIRQ(getIrqFromBankPin(bank,id));
}

void gpio_interruptDisableAll() {
 801d9f6:	b580      	push	{r7, lr}
 801d9f8:	af00      	add	r7, sp, #0
	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 801d9fa:	2005      	movs	r0, #5
 801d9fc:	f7e6 fc9d 	bl	800433a <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 801da00:	2007      	movs	r0, #7
 801da02:	f7e6 fc9a 	bl	800433a <HAL_NVIC_DisableIRQ>
}
 801da06:	46c0      	nop			; (mov r8, r8)
 801da08:	46bd      	mov	sp, r7
 801da0a:	bd80      	pop	{r7, pc}

0801da0c <gpio_interruptPriority>:

void gpio_interruptPriority(uint8_t bank, uint16_t id, uint8_t nPreemption, uint8_t nSubpriority) {
 801da0c:	b5b0      	push	{r4, r5, r7, lr}
 801da0e:	b082      	sub	sp, #8
 801da10:	af00      	add	r7, sp, #0
 801da12:	0005      	movs	r5, r0
 801da14:	000c      	movs	r4, r1
 801da16:	0010      	movs	r0, r2
 801da18:	0019      	movs	r1, r3
 801da1a:	1dfb      	adds	r3, r7, #7
 801da1c:	1c2a      	adds	r2, r5, #0
 801da1e:	701a      	strb	r2, [r3, #0]
 801da20:	1d3b      	adds	r3, r7, #4
 801da22:	1c22      	adds	r2, r4, #0
 801da24:	801a      	strh	r2, [r3, #0]
 801da26:	1dbb      	adds	r3, r7, #6
 801da28:	1c02      	adds	r2, r0, #0
 801da2a:	701a      	strb	r2, [r3, #0]
 801da2c:	1cfb      	adds	r3, r7, #3
 801da2e:	1c0a      	adds	r2, r1, #0
 801da30:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SetPriority(getIrqFromBankPin(bank,id), nPreemption, nSubpriority);
 801da32:	1d3b      	adds	r3, r7, #4
 801da34:	881a      	ldrh	r2, [r3, #0]
 801da36:	1dfb      	adds	r3, r7, #7
 801da38:	781b      	ldrb	r3, [r3, #0]
 801da3a:	0011      	movs	r1, r2
 801da3c:	0018      	movs	r0, r3
 801da3e:	f7ff fd65 	bl	801d50c <getIrqFromBankPin>
 801da42:	0003      	movs	r3, r0
 801da44:	0018      	movs	r0, r3
 801da46:	1dbb      	adds	r3, r7, #6
 801da48:	7819      	ldrb	r1, [r3, #0]
 801da4a:	1cfb      	adds	r3, r7, #3
 801da4c:	781b      	ldrb	r3, [r3, #0]
 801da4e:	001a      	movs	r2, r3
 801da50:	f7e6 fc4e 	bl	80042f0 <HAL_NVIC_SetPriority>
}
 801da54:	46c0      	nop			; (mov r8, r8)
 801da56:	46bd      	mov	sp, r7
 801da58:	b002      	add	sp, #8
 801da5a:	bdb0      	pop	{r4, r5, r7, pc}

0801da5c <gpio_interruptClear>:

void gpio_interruptClear(uint8_t bank, uint16_t id) {
 801da5c:	b580      	push	{r7, lr}
 801da5e:	b082      	sub	sp, #8
 801da60:	af00      	add	r7, sp, #0
 801da62:	0002      	movs	r2, r0
 801da64:	1dfb      	adds	r3, r7, #7
 801da66:	701a      	strb	r2, [r3, #0]
 801da68:	1d3b      	adds	r3, r7, #4
 801da6a:	1c0a      	adds	r2, r1, #0
 801da6c:	801a      	strh	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(id);
 801da6e:	4b04      	ldr	r3, [pc, #16]	; (801da80 <gpio_interruptClear+0x24>)
 801da70:	1d3a      	adds	r2, r7, #4
 801da72:	8812      	ldrh	r2, [r2, #0]
 801da74:	615a      	str	r2, [r3, #20]
}
 801da76:	46c0      	nop			; (mov r8, r8)
 801da78:	46bd      	mov	sp, r7
 801da7a:	b002      	add	sp, #8
 801da7c:	bd80      	pop	{r7, pc}
 801da7e:	46c0      	nop			; (mov r8, r8)
 801da80:	40010400 	.word	0x40010400

0801da84 <HAL_GPIO_EXTI_Callback>:
#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
#else
void gpio_Callback(uint16_t GPIO_Pin)
#endif
{
 801da84:	b580      	push	{r7, lr}
 801da86:	b086      	sub	sp, #24
 801da88:	af00      	add	r7, sp, #0
 801da8a:	0002      	movs	r2, r0
 801da8c:	1dbb      	adds	r3, r7, #6
 801da8e:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 801da90:	4b1b      	ldr	r3, [pc, #108]	; (801db00 <HAL_GPIO_EXTI_Callback+0x7c>)
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d00c      	beq.n	801dab2 <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 801da98:	4b19      	ldr	r3, [pc, #100]	; (801db00 <HAL_GPIO_EXTI_Callback+0x7c>)
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 801daa0:	693b      	ldr	r3, [r7, #16]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d005      	beq.n	801dab2 <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 801daa6:	1dbb      	adds	r3, r7, #6
 801daa8:	881a      	ldrh	r2, [r3, #0]
 801daaa:	693b      	ldr	r3, [r7, #16]
 801daac:	0010      	movs	r0, r2
 801daae:	4798      	blx	r3
			return;
 801dab0:	e023      	b.n	801dafa <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 801dab2:	4b14      	ldr	r3, [pc, #80]	; (801db04 <HAL_GPIO_EXTI_Callback+0x80>)
 801dab4:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801dab6:	e019      	b.n	801daec <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 801dab8:	697b      	ldr	r3, [r7, #20]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 801dabe:	68fb      	ldr	r3, [r7, #12]
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	d010      	beq.n	801dae6 <HAL_GPIO_EXTI_Callback+0x62>
 801dac4:	697b      	ldr	r3, [r7, #20]
 801dac6:	889b      	ldrh	r3, [r3, #4]
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d007      	beq.n	801dadc <HAL_GPIO_EXTI_Callback+0x58>
 801dacc:	697b      	ldr	r3, [r7, #20]
 801dace:	889b      	ldrh	r3, [r3, #4]
 801dad0:	1dba      	adds	r2, r7, #6
 801dad2:	8812      	ldrh	r2, [r2, #0]
 801dad4:	4013      	ands	r3, r2
 801dad6:	b29b      	uxth	r3, r3
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d004      	beq.n	801dae6 <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 801dadc:	1dbb      	adds	r3, r7, #6
 801dade:	881a      	ldrh	r2, [r3, #0]
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	0010      	movs	r0, r2
 801dae4:	4798      	blx	r3
		}
		c = c->next;
 801dae6:	697b      	ldr	r3, [r7, #20]
 801dae8:	689b      	ldr	r3, [r3, #8]
 801daea:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 801daec:	697b      	ldr	r3, [r7, #20]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d1e2      	bne.n	801dab8 <HAL_GPIO_EXTI_Callback+0x34>
	}
	#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801daf2:	4b05      	ldr	r3, [pc, #20]	; (801db08 <HAL_GPIO_EXTI_Callback+0x84>)
 801daf4:	1dba      	adds	r2, r7, #6
 801daf6:	8812      	ldrh	r2, [r2, #0]
 801daf8:	615a      	str	r2, [r3, #20]
	#endif
}
 801dafa:	46bd      	mov	sp, r7
 801dafc:	b006      	add	sp, #24
 801dafe:	bd80      	pop	{r7, pc}
 801db00:	20001154 	.word	0x20001154
 801db04:	20001148 	.word	0x20001148
 801db08:	40010400 	.word	0x40010400

0801db0c <gpio_registerIrqAction>:
}

/**
 * Add an action to the chain, the action **must be** static
 */
void gpio_registerIrqAction(gpio_irq_chain_t * chain) {
 801db0c:	b580      	push	{r7, lr}
 801db0e:	b084      	sub	sp, #16
 801db10:	af00      	add	r7, sp, #0
 801db12:	6078      	str	r0, [r7, #4]
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 801db14:	4b0f      	ldr	r3, [pc, #60]	; (801db54 <gpio_registerIrqAction+0x48>)
 801db16:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 801db18:	e002      	b.n	801db20 <gpio_registerIrqAction+0x14>
	  c = c->next;
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	689b      	ldr	r3, [r3, #8]
 801db1e:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	689b      	ldr	r3, [r3, #8]
 801db24:	2b00      	cmp	r3, #0
 801db26:	d005      	beq.n	801db34 <gpio_registerIrqAction+0x28>
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	681a      	ldr	r2, [r3, #0]
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	429a      	cmp	r2, r3
 801db32:	d1f2      	bne.n	801db1a <gpio_registerIrqAction+0xe>
	}
	if ( c->irq_func != chain->irq_func ) {
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	681a      	ldr	r2, [r3, #0]
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	429a      	cmp	r2, r3
 801db3e:	d005      	beq.n	801db4c <gpio_registerIrqAction+0x40>
		// the Action is not already existing
		c->next=chain;
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	687a      	ldr	r2, [r7, #4]
 801db44:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	2200      	movs	r2, #0
 801db4a:	609a      	str	r2, [r3, #8]
	}
}
 801db4c:	46c0      	nop			; (mov r8, r8)
 801db4e:	46bd      	mov	sp, r7
 801db50:	b004      	add	sp, #16
 801db52:	bd80      	pop	{r7, pc}
 801db54:	20001148 	.word	0x20001148

0801db58 <NVIC_SystemReset>:
{
 801db58:	b580      	push	{r7, lr}
 801db5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801db5c:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801db60:	4b03      	ldr	r3, [pc, #12]	; (801db70 <NVIC_SystemReset+0x18>)
 801db62:	4a04      	ldr	r2, [pc, #16]	; (801db74 <NVIC_SystemReset+0x1c>)
 801db64:	60da      	str	r2, [r3, #12]
 801db66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 801db6a:	46c0      	nop			; (mov r8, r8)
    __NOP();
 801db6c:	e7fd      	b.n	801db6a <NVIC_SystemReset+0x12>
 801db6e:	46c0      	nop			; (mov r8, r8)
 801db70:	e000ed00 	.word	0xe000ed00
 801db74:	05fa0004 	.word	0x05fa0004

0801db78 <itsdk_reset>:
#include "stm32l0xx_hal.h"

/**
 * Reset the device
 */
void itsdk_reset() {
 801db78:	b580      	push	{r7, lr}
 801db7a:	af00      	add	r7, sp, #0
	while(1) NVIC_SystemReset();
 801db7c:	f7ff ffec 	bl	801db58 <NVIC_SystemReset>
 801db80:	e7fc      	b.n	801db7c <itsdk_reset+0x4>
	...

0801db84 <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 801db84:	b580      	push	{r7, lr}
 801db86:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 801db88:	4b1c      	ldr	r3, [pc, #112]	; (801dbfc <itsdk_getResetCause+0x78>)
 801db8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	da01      	bge.n	801db94 <itsdk_getResetCause+0x10>
 801db90:	2306      	movs	r3, #6
 801db92:	e030      	b.n	801dbf6 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 801db94:	4b19      	ldr	r3, [pc, #100]	; (801dbfc <itsdk_getResetCause+0x78>)
 801db96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801db98:	2380      	movs	r3, #128	; 0x80
 801db9a:	05db      	lsls	r3, r3, #23
 801db9c:	4013      	ands	r3, r2
 801db9e:	d001      	beq.n	801dba4 <itsdk_getResetCause+0x20>
 801dba0:	2305      	movs	r3, #5
 801dba2:	e028      	b.n	801dbf6 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 801dba4:	4b15      	ldr	r3, [pc, #84]	; (801dbfc <itsdk_getResetCause+0x78>)
 801dba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dba8:	2380      	movs	r3, #128	; 0x80
 801dbaa:	059b      	lsls	r3, r3, #22
 801dbac:	4013      	ands	r3, r2
 801dbae:	d001      	beq.n	801dbb4 <itsdk_getResetCause+0x30>
 801dbb0:	2304      	movs	r3, #4
 801dbb2:	e020      	b.n	801dbf6 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 801dbb4:	4b11      	ldr	r3, [pc, #68]	; (801dbfc <itsdk_getResetCause+0x78>)
 801dbb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dbb8:	2380      	movs	r3, #128	; 0x80
 801dbba:	055b      	lsls	r3, r3, #21
 801dbbc:	4013      	ands	r3, r2
 801dbbe:	d001      	beq.n	801dbc4 <itsdk_getResetCause+0x40>
 801dbc0:	2303      	movs	r3, #3
 801dbc2:	e018      	b.n	801dbf6 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 801dbc4:	4b0d      	ldr	r3, [pc, #52]	; (801dbfc <itsdk_getResetCause+0x78>)
 801dbc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dbc8:	2380      	movs	r3, #128	; 0x80
 801dbca:	051b      	lsls	r3, r3, #20
 801dbcc:	4013      	ands	r3, r2
 801dbce:	d001      	beq.n	801dbd4 <itsdk_getResetCause+0x50>
 801dbd0:	2302      	movs	r3, #2
 801dbd2:	e010      	b.n	801dbf6 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 801dbd4:	4b09      	ldr	r3, [pc, #36]	; (801dbfc <itsdk_getResetCause+0x78>)
 801dbd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dbd8:	2380      	movs	r3, #128	; 0x80
 801dbda:	04db      	lsls	r3, r3, #19
 801dbdc:	4013      	ands	r3, r2
 801dbde:	d001      	beq.n	801dbe4 <itsdk_getResetCause+0x60>
 801dbe0:	2301      	movs	r3, #1
 801dbe2:	e008      	b.n	801dbf6 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 801dbe4:	4b05      	ldr	r3, [pc, #20]	; (801dbfc <itsdk_getResetCause+0x78>)
 801dbe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dbe8:	2380      	movs	r3, #128	; 0x80
 801dbea:	049b      	lsls	r3, r3, #18
 801dbec:	4013      	ands	r3, r2
 801dbee:	d001      	beq.n	801dbf4 <itsdk_getResetCause+0x70>
 801dbf0:	2306      	movs	r3, #6
 801dbf2:	e000      	b.n	801dbf6 <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 801dbf4:	2307      	movs	r3, #7
}
 801dbf6:	0018      	movs	r0, r3
 801dbf8:	46bd      	mov	sp, r7
 801dbfa:	bd80      	pop	{r7, pc}
 801dbfc:	40021000 	.word	0x40021000

0801dc00 <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 801dc00:	b580      	push	{r7, lr}
 801dc02:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 801dc04:	4b04      	ldr	r3, [pc, #16]	; (801dc18 <itsdk_cleanResetCause+0x18>)
 801dc06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dc08:	4b03      	ldr	r3, [pc, #12]	; (801dc18 <itsdk_cleanResetCause+0x18>)
 801dc0a:	2180      	movs	r1, #128	; 0x80
 801dc0c:	0409      	lsls	r1, r1, #16
 801dc0e:	430a      	orrs	r2, r1
 801dc10:	651a      	str	r2, [r3, #80]	; 0x50
}
 801dc12:	46c0      	nop			; (mov r8, r8)
 801dc14:	46bd      	mov	sp, r7
 801dc16:	bd80      	pop	{r7, pc}
 801dc18:	40021000 	.word	0x40021000

0801dc1c <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 801dc1c:	b580      	push	{r7, lr}
 801dc1e:	b082      	sub	sp, #8
 801dc20:	af00      	add	r7, sp, #0
 801dc22:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	0018      	movs	r0, r3
 801dc28:	f7e6 f816 	bl	8003c58 <HAL_Delay>
}
 801dc2c:	46c0      	nop			; (mov r8, r8)
 801dc2e:	46bd      	mov	sp, r7
 801dc30:	b002      	add	sp, #8
 801dc32:	bd80      	pop	{r7, pc}

0801dc34 <itsdk_getIrqMask>:

/**
 * Get the IRQ Mask
 */
uint32_t itsdk_getIrqMask() {
 801dc34:	b580      	push	{r7, lr}
 801dc36:	b082      	sub	sp, #8
 801dc38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801dc3a:	f3ef 8310 	mrs	r3, PRIMASK
 801dc3e:	607b      	str	r3, [r7, #4]
  return(result);
 801dc40:	687b      	ldr	r3, [r7, #4]
	return __get_PRIMASK();
 801dc42:	46c0      	nop			; (mov r8, r8)
}
 801dc44:	0018      	movs	r0, r3
 801dc46:	46bd      	mov	sp, r7
 801dc48:	b002      	add	sp, #8
 801dc4a:	bd80      	pop	{r7, pc}

0801dc4c <itsdk_setIrqMask>:

/**
 * Set / Restore the IRQ Mask
 */
void itsdk_setIrqMask(uint32_t mask) {
 801dc4c:	b580      	push	{r7, lr}
 801dc4e:	b084      	sub	sp, #16
 801dc50:	af00      	add	r7, sp, #0
 801dc52:	6078      	str	r0, [r7, #4]
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc58:	68fb      	ldr	r3, [r7, #12]
 801dc5a:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(mask);
}
 801dc5e:	46c0      	nop			; (mov r8, r8)
 801dc60:	46bd      	mov	sp, r7
 801dc62:	b004      	add	sp, #16
 801dc64:	bd80      	pop	{r7, pc}
	...

0801dc68 <itsdk_enterCriticalSection>:
/**
 * Enter a critical section / disable interrupt
 */
static uint32_t __interrupt_mask;
void itsdk_enterCriticalSection() {
 801dc68:	b580      	push	{r7, lr}
 801dc6a:	b082      	sub	sp, #8
 801dc6c:	af00      	add	r7, sp, #0
	__interrupt_mask = itsdk_getIrqMask();
 801dc6e:	f7ff ffe1 	bl	801dc34 <itsdk_getIrqMask>
 801dc72:	0002      	movs	r2, r0
 801dc74:	4b05      	ldr	r3, [pc, #20]	; (801dc8c <itsdk_enterCriticalSection+0x24>)
 801dc76:	601a      	str	r2, [r3, #0]
 801dc78:	2301      	movs	r3, #1
 801dc7a:	607b      	str	r3, [r7, #4]
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	f383 8810 	msr	PRIMASK, r3
	//__disable_irq();
	__set_PRIMASK(1);	// allows to capture but not execute the interruption appearing during the critical section execution
}
 801dc82:	46c0      	nop			; (mov r8, r8)
 801dc84:	46bd      	mov	sp, r7
 801dc86:	b002      	add	sp, #8
 801dc88:	bd80      	pop	{r7, pc}
 801dc8a:	46c0      	nop			; (mov r8, r8)
 801dc8c:	20001158 	.word	0x20001158

0801dc90 <itsdk_leaveCriticalSection>:

/**
 * Restore the initial irq mask
 * to leave a critical secqtion
 */
void itsdk_leaveCriticalSection() {
 801dc90:	b580      	push	{r7, lr}
 801dc92:	af00      	add	r7, sp, #0
	itsdk_setIrqMask(__interrupt_mask);
 801dc94:	4b03      	ldr	r3, [pc, #12]	; (801dca4 <itsdk_leaveCriticalSection+0x14>)
 801dc96:	681b      	ldr	r3, [r3, #0]
 801dc98:	0018      	movs	r0, r3
 801dc9a:	f7ff ffd7 	bl	801dc4c <itsdk_setIrqMask>
}
 801dc9e:	46c0      	nop			; (mov r8, r8)
 801dca0:	46bd      	mov	sp, r7
 801dca2:	bd80      	pop	{r7, pc}
 801dca4:	20001158 	.word	0x20001158

0801dca8 <itsdk_getRandomSeed>:
	#define  STM32_ID2    ( 0x1FF80054 )
	#define  STM32_ID3    ( 0x1FF80064 )
#else
    #error "You need to define the MCU ID for this platform"
#endif
uint32_t itsdk_getRandomSeed() {
 801dca8:	b580      	push	{r7, lr}
 801dcaa:	af00      	add	r7, sp, #0
	return ( ( *( uint32_t* )STM32_ID1 ) ^ ( *( uint32_t* )STM32_ID2 ) ^ ( *( uint32_t* )STM32_ID3 ) );
 801dcac:	4b05      	ldr	r3, [pc, #20]	; (801dcc4 <itsdk_getRandomSeed+0x1c>)
 801dcae:	681a      	ldr	r2, [r3, #0]
 801dcb0:	4b05      	ldr	r3, [pc, #20]	; (801dcc8 <itsdk_getRandomSeed+0x20>)
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	405a      	eors	r2, r3
 801dcb6:	4b05      	ldr	r3, [pc, #20]	; (801dccc <itsdk_getRandomSeed+0x24>)
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	4053      	eors	r3, r2
}
 801dcbc:	0018      	movs	r0, r3
 801dcbe:	46bd      	mov	sp, r7
 801dcc0:	bd80      	pop	{r7, pc}
 801dcc2:	46c0      	nop			; (mov r8, r8)
 801dcc4:	1ff80050 	.word	0x1ff80050
 801dcc8:	1ff80054 	.word	0x1ff80054
 801dccc:	1ff80064 	.word	0x1ff80064

0801dcd0 <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 801dcd0:	b580      	push	{r7, lr}
 801dcd2:	b086      	sub	sp, #24
 801dcd4:	af00      	add	r7, sp, #0
 801dcd6:	6078      	str	r0, [r7, #4]
 801dcd8:	000a      	movs	r2, r1
 801dcda:	1cfb      	adds	r3, r7, #3
 801dcdc:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 801dcde:	4b2c      	ldr	r3, [pc, #176]	; (801dd90 <itsdk_getUniqId+0xc0>)
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	041a      	lsls	r2, r3, #16
 801dce4:	4b2b      	ldr	r3, [pc, #172]	; (801dd94 <itsdk_getUniqId+0xc4>)
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	021b      	lsls	r3, r3, #8
 801dcea:	18d2      	adds	r2, r2, r3
 801dcec:	4b2a      	ldr	r3, [pc, #168]	; (801dd98 <itsdk_getUniqId+0xc8>)
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	18d3      	adds	r3, r2, r3
 801dcf2:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 801dcf4:	2317      	movs	r3, #23
 801dcf6:	18fb      	adds	r3, r7, r3
 801dcf8:	2200      	movs	r2, #0
 801dcfa:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 801dcfc:	68fb      	ldr	r3, [r7, #12]
 801dcfe:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 801dd00:	e03a      	b.n	801dd78 <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 801dd02:	2317      	movs	r3, #23
 801dd04:	18fb      	adds	r3, r7, r3
 801dd06:	781b      	ldrb	r3, [r3, #0]
 801dd08:	2203      	movs	r2, #3
 801dd0a:	4013      	ands	r3, r2
 801dd0c:	d11f      	bne.n	801dd4e <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 801dd0e:	2317      	movs	r3, #23
 801dd10:	18fb      	adds	r3, r7, r3
 801dd12:	781b      	ldrb	r3, [r3, #0]
 801dd14:	089b      	lsrs	r3, r3, #2
 801dd16:	b2db      	uxtb	r3, r3
 801dd18:	001a      	movs	r2, r3
 801dd1a:	2303      	movs	r3, #3
 801dd1c:	4013      	ands	r3, r2
 801dd1e:	2b01      	cmp	r3, #1
 801dd20:	d008      	beq.n	801dd34 <itsdk_getUniqId+0x64>
 801dd22:	2b02      	cmp	r3, #2
 801dd24:	d00b      	beq.n	801dd3e <itsdk_getUniqId+0x6e>
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	d10e      	bne.n	801dd48 <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 801dd2a:	68fb      	ldr	r3, [r7, #12]
 801dd2c:	4a18      	ldr	r2, [pc, #96]	; (801dd90 <itsdk_getUniqId+0xc0>)
 801dd2e:	4053      	eors	r3, r2
 801dd30:	613b      	str	r3, [r7, #16]
 801dd32:	e00d      	b.n	801dd50 <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	4a17      	ldr	r2, [pc, #92]	; (801dd94 <itsdk_getUniqId+0xc4>)
 801dd38:	4053      	eors	r3, r2
 801dd3a:	613b      	str	r3, [r7, #16]
 801dd3c:	e008      	b.n	801dd50 <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	4a15      	ldr	r2, [pc, #84]	; (801dd98 <itsdk_getUniqId+0xc8>)
 801dd42:	4053      	eors	r3, r2
 801dd44:	613b      	str	r3, [r7, #16]
 801dd46:	e003      	b.n	801dd50 <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	613b      	str	r3, [r7, #16]
 801dd4c:	e000      	b.n	801dd50 <itsdk_getUniqId+0x80>
			}
		}
 801dd4e:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 801dd50:	2017      	movs	r0, #23
 801dd52:	183b      	adds	r3, r7, r0
 801dd54:	781b      	ldrb	r3, [r3, #0]
 801dd56:	2203      	movs	r2, #3
 801dd58:	4013      	ands	r3, r2
 801dd5a:	00db      	lsls	r3, r3, #3
 801dd5c:	693a      	ldr	r2, [r7, #16]
 801dd5e:	40da      	lsrs	r2, r3
 801dd60:	0011      	movs	r1, r2
 801dd62:	183b      	adds	r3, r7, r0
 801dd64:	781b      	ldrb	r3, [r3, #0]
 801dd66:	687a      	ldr	r2, [r7, #4]
 801dd68:	18d3      	adds	r3, r2, r3
 801dd6a:	b2ca      	uxtb	r2, r1
 801dd6c:	701a      	strb	r2, [r3, #0]
		l++;
 801dd6e:	183b      	adds	r3, r7, r0
 801dd70:	781a      	ldrb	r2, [r3, #0]
 801dd72:	183b      	adds	r3, r7, r0
 801dd74:	3201      	adds	r2, #1
 801dd76:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 801dd78:	2317      	movs	r3, #23
 801dd7a:	18fb      	adds	r3, r7, r3
 801dd7c:	781a      	ldrb	r2, [r3, #0]
 801dd7e:	1cfb      	adds	r3, r7, #3
 801dd80:	781b      	ldrb	r3, [r3, #0]
 801dd82:	b25b      	sxtb	r3, r3
 801dd84:	429a      	cmp	r2, r3
 801dd86:	dbbc      	blt.n	801dd02 <itsdk_getUniqId+0x32>
	}

}
 801dd88:	46c0      	nop			; (mov r8, r8)
 801dd8a:	46bd      	mov	sp, r7
 801dd8c:	b006      	add	sp, #24
 801dd8e:	bd80      	pop	{r7, pc}
 801dd90:	1ff80050 	.word	0x1ff80050
 801dd94:	1ff80054 	.word	0x1ff80054
 801dd98:	1ff80064 	.word	0x1ff80064

0801dd9c <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b082      	sub	sp, #8
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #endif
}
 801dda4:	46c0      	nop			; (mov r8, r8)
 801dda6:	46bd      	mov	sp, r7
 801dda8:	b002      	add	sp, #8
 801ddaa:	bd80      	pop	{r7, pc}

0801ddac <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 801ddac:	b580      	push	{r7, lr}
 801ddae:	b082      	sub	sp, #8
 801ddb0:	af00      	add	r7, sp, #0
 801ddb2:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	0018      	movs	r0, r3
 801ddb8:	f7e2 f9a6 	bl	8000108 <strlen>
 801ddbc:	0003      	movs	r3, r0
 801ddbe:	b29a      	uxth	r2, r3
 801ddc0:	4b04      	ldr	r3, [pc, #16]	; (801ddd4 <serial2_print+0x28>)
 801ddc2:	6879      	ldr	r1, [r7, #4]
 801ddc4:	4804      	ldr	r0, [pc, #16]	; (801ddd8 <serial2_print+0x2c>)
 801ddc6:	f7e8 fe89 	bl	8006adc <HAL_UART_Transmit>
  #endif
}
 801ddca:	46c0      	nop			; (mov r8, r8)
 801ddcc:	46bd      	mov	sp, r7
 801ddce:	b002      	add	sp, #8
 801ddd0:	bd80      	pop	{r7, pc}
 801ddd2:	46c0      	nop			; (mov r8, r8)
 801ddd4:	0000ffff 	.word	0x0000ffff
 801ddd8:	2000139c 	.word	0x2000139c

0801dddc <serial2_read>:
	char * eol = "\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)eol, strlen(eol),0xFFFF);
  #endif
}

serial_read_response_e serial2_read(char * ch) {
 801dddc:	b580      	push	{r7, lr}
 801ddde:	b082      	sub	sp, #8
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	6078      	str	r0, [r7, #4]

#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0

	if ( __serial2_bufferRd != __serial2_bufferWr ) {
 801dde4:	4b17      	ldr	r3, [pc, #92]	; (801de44 <serial2_read+0x68>)
 801dde6:	781b      	ldrb	r3, [r3, #0]
 801dde8:	b2da      	uxtb	r2, r3
 801ddea:	4b17      	ldr	r3, [pc, #92]	; (801de48 <serial2_read+0x6c>)
 801ddec:	781b      	ldrb	r3, [r3, #0]
 801ddee:	b2db      	uxtb	r3, r3
 801ddf0:	429a      	cmp	r2, r3
 801ddf2:	d021      	beq.n	801de38 <serial2_read+0x5c>
		// char available
		*ch = __serial2_buffer[__serial2_bufferRd];
 801ddf4:	4b13      	ldr	r3, [pc, #76]	; (801de44 <serial2_read+0x68>)
 801ddf6:	781b      	ldrb	r3, [r3, #0]
 801ddf8:	b2db      	uxtb	r3, r3
 801ddfa:	001a      	movs	r2, r3
 801ddfc:	4b13      	ldr	r3, [pc, #76]	; (801de4c <serial2_read+0x70>)
 801ddfe:	5c9a      	ldrb	r2, [r3, r2]
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	701a      	strb	r2, [r3, #0]
		itsdk_enterCriticalSection();
 801de04:	f7ff ff30 	bl	801dc68 <itsdk_enterCriticalSection>
		__serial2_bufferRd = (__serial2_bufferRd + 1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1);
 801de08:	4b0e      	ldr	r3, [pc, #56]	; (801de44 <serial2_read+0x68>)
 801de0a:	781b      	ldrb	r3, [r3, #0]
 801de0c:	b2db      	uxtb	r3, r3
 801de0e:	3301      	adds	r3, #1
 801de10:	b2db      	uxtb	r3, r3
 801de12:	223f      	movs	r2, #63	; 0x3f
 801de14:	4013      	ands	r3, r2
 801de16:	b2da      	uxtb	r2, r3
 801de18:	4b0a      	ldr	r3, [pc, #40]	; (801de44 <serial2_read+0x68>)
 801de1a:	701a      	strb	r2, [r3, #0]
		itsdk_leaveCriticalSection();
 801de1c:	f7ff ff38 	bl	801dc90 <itsdk_leaveCriticalSection>
		if ( __serial2_bufferRd != __serial2_bufferWr ) {
 801de20:	4b08      	ldr	r3, [pc, #32]	; (801de44 <serial2_read+0x68>)
 801de22:	781b      	ldrb	r3, [r3, #0]
 801de24:	b2da      	uxtb	r2, r3
 801de26:	4b08      	ldr	r3, [pc, #32]	; (801de48 <serial2_read+0x6c>)
 801de28:	781b      	ldrb	r3, [r3, #0]
 801de2a:	b2db      	uxtb	r3, r3
 801de2c:	429a      	cmp	r2, r3
 801de2e:	d001      	beq.n	801de34 <serial2_read+0x58>
			return SERIAL_READ_PENDING_CHAR;
 801de30:	2301      	movs	r3, #1
 801de32:	e002      	b.n	801de3a <serial2_read+0x5e>
		} else {
			return SERIAL_READ_SUCCESS;
 801de34:	2300      	movs	r3, #0
 801de36:	e000      	b.n	801de3a <serial2_read+0x5e>
		}
	} else {
		return SERIAL_READ_NOCHAR;
 801de38:	2302      	movs	r3, #2
	return SERIAL_READ_NOCHAR;
  #else
	return SERIAL_READ_FAILED;
  #endif
#endif
}
 801de3a:	0018      	movs	r0, r3
 801de3c:	46bd      	mov	sp, r7
 801de3e:	b002      	add	sp, #8
 801de40:	bd80      	pop	{r7, pc}
 801de42:	46c0      	nop			; (mov r8, r8)
 801de44:	200015d6 	.word	0x200015d6
 801de48:	2000158d 	.word	0x2000158d
 801de4c:	20001590 	.word	0x20001590

0801de50 <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 801de50:	b580      	push	{r7, lr}
 801de52:	b082      	sub	sp, #8
 801de54:	af00      	add	r7, sp, #0
 801de56:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	2208      	movs	r2, #8
 801de5e:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 801de60:	687b      	ldr	r3, [r7, #4]
 801de62:	681b      	ldr	r3, [r3, #0]
 801de64:	2204      	movs	r2, #4
 801de66:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	2202      	movs	r2, #2
 801de6e:	621a      	str	r2, [r3, #32]
}
 801de70:	46c0      	nop			; (mov r8, r8)
 801de72:	46bd      	mov	sp, r7
 801de74:	b002      	add	sp, #8
 801de76:	bd80      	pop	{r7, pc}

0801de78 <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 801de78:	b580      	push	{r7, lr}
 801de7a:	b082      	sub	sp, #8
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	0002      	movs	r2, r0
 801de80:	6039      	str	r1, [r7, #0]
 801de82:	1dfb      	adds	r3, r7, #7
 801de84:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 801de86:	46c0      	nop			; (mov r8, r8)
 801de88:	46bd      	mov	sp, r7
 801de8a:	b002      	add	sp, #8
 801de8c:	bd80      	pop	{r7, pc}
	...

0801de90 <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 801de90:	b580      	push	{r7, lr}
 801de92:	b088      	sub	sp, #32
 801de94:	af00      	add	r7, sp, #0
 801de96:	60b9      	str	r1, [r7, #8]
 801de98:	607a      	str	r2, [r7, #4]
 801de9a:	603b      	str	r3, [r7, #0]
 801de9c:	210f      	movs	r1, #15
 801de9e:	187b      	adds	r3, r7, r1
 801dea0:	1c02      	adds	r2, r0, #0
 801dea2:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 801dea4:	687b      	ldr	r3, [r7, #4]
 801dea6:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 801dea8:	187b      	adds	r3, r7, r1
 801deaa:	781b      	ldrb	r3, [r3, #0]
 801deac:	2b00      	cmp	r3, #0
 801deae:	d106      	bne.n	801debe <_eeprom_write+0x2e>
 801deb0:	683a      	ldr	r2, [r7, #0]
 801deb2:	68bb      	ldr	r3, [r7, #8]
 801deb4:	18d2      	adds	r2, r2, r3
 801deb6:	23c0      	movs	r3, #192	; 0xc0
 801deb8:	015b      	lsls	r3, r3, #5
 801deba:	429a      	cmp	r2, r3
 801debc:	d906      	bls.n	801decc <_eeprom_write+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801debe:	683b      	ldr	r3, [r7, #0]
 801dec0:	b29b      	uxth	r3, r3
 801dec2:	4a3f      	ldr	r2, [pc, #252]	; (801dfc0 <_eeprom_write+0x130>)
 801dec4:	0019      	movs	r1, r3
 801dec6:	0010      	movs	r0, r2
 801dec8:	f7fd fb84 	bl	801b5d4 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801decc:	68bb      	ldr	r3, [r7, #8]
 801dece:	4a3d      	ldr	r2, [pc, #244]	; (801dfc4 <_eeprom_write+0x134>)
 801ded0:	4694      	mov	ip, r2
 801ded2:	4463      	add	r3, ip
 801ded4:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801ded6:	69fb      	ldr	r3, [r7, #28]
 801ded8:	2203      	movs	r2, #3
 801deda:	4013      	ands	r3, r2
 801dedc:	d006      	beq.n	801deec <_eeprom_write+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,1);
 801dede:	4b3a      	ldr	r3, [pc, #232]	; (801dfc8 <_eeprom_write+0x138>)
 801dee0:	2101      	movs	r1, #1
 801dee2:	0018      	movs	r0, r3
 801dee4:	f7fd fb76 	bl	801b5d4 <itsdk_error_report>
	    return false;
 801dee8:	2300      	movs	r3, #0
 801deea:	e064      	b.n	801dfb6 <_eeprom_write+0x126>
	}

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 801deec:	4b37      	ldr	r3, [pc, #220]	; (801dfcc <_eeprom_write+0x13c>)
 801deee:	685b      	ldr	r3, [r3, #4]
 801def0:	2201      	movs	r2, #1
 801def2:	4013      	ands	r3, r2
 801def4:	d005      	beq.n	801df02 <_eeprom_write+0x72>
			FLASH->PEKEYR = FLASH_PEKEY1;
 801def6:	4b35      	ldr	r3, [pc, #212]	; (801dfcc <_eeprom_write+0x13c>)
 801def8:	4a35      	ldr	r2, [pc, #212]	; (801dfd0 <_eeprom_write+0x140>)
 801defa:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 801defc:	4b33      	ldr	r3, [pc, #204]	; (801dfcc <_eeprom_write+0x13c>)
 801defe:	4a35      	ldr	r2, [pc, #212]	; (801dfd4 <_eeprom_write+0x144>)
 801df00:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 801df02:	2300      	movs	r3, #0
 801df04:	61bb      	str	r3, [r7, #24]
 801df06:	e04b      	b.n	801dfa0 <_eeprom_write+0x110>
		v = _data[i] << 24;
 801df08:	69bb      	ldr	r3, [r7, #24]
 801df0a:	697a      	ldr	r2, [r7, #20]
 801df0c:	18d3      	adds	r3, r2, r3
 801df0e:	781b      	ldrb	r3, [r3, #0]
 801df10:	061b      	lsls	r3, r3, #24
 801df12:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 801df14:	69bb      	ldr	r3, [r7, #24]
 801df16:	3301      	adds	r3, #1
 801df18:	683a      	ldr	r2, [r7, #0]
 801df1a:	429a      	cmp	r2, r3
 801df1c:	dd07      	ble.n	801df2e <_eeprom_write+0x9e>
 801df1e:	69bb      	ldr	r3, [r7, #24]
 801df20:	3301      	adds	r3, #1
 801df22:	697a      	ldr	r2, [r7, #20]
 801df24:	18d3      	adds	r3, r2, r3
 801df26:	781b      	ldrb	r3, [r3, #0]
 801df28:	041b      	lsls	r3, r3, #16
 801df2a:	001a      	movs	r2, r3
 801df2c:	e000      	b.n	801df30 <_eeprom_write+0xa0>
 801df2e:	2200      	movs	r2, #0
 801df30:	693b      	ldr	r3, [r7, #16]
 801df32:	189b      	adds	r3, r3, r2
 801df34:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 801df36:	69bb      	ldr	r3, [r7, #24]
 801df38:	3302      	adds	r3, #2
 801df3a:	683a      	ldr	r2, [r7, #0]
 801df3c:	429a      	cmp	r2, r3
 801df3e:	dd07      	ble.n	801df50 <_eeprom_write+0xc0>
 801df40:	69bb      	ldr	r3, [r7, #24]
 801df42:	3302      	adds	r3, #2
 801df44:	697a      	ldr	r2, [r7, #20]
 801df46:	18d3      	adds	r3, r2, r3
 801df48:	781b      	ldrb	r3, [r3, #0]
 801df4a:	021b      	lsls	r3, r3, #8
 801df4c:	001a      	movs	r2, r3
 801df4e:	e000      	b.n	801df52 <_eeprom_write+0xc2>
 801df50:	2200      	movs	r2, #0
 801df52:	693b      	ldr	r3, [r7, #16]
 801df54:	189b      	adds	r3, r3, r2
 801df56:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 801df58:	69bb      	ldr	r3, [r7, #24]
 801df5a:	3303      	adds	r3, #3
 801df5c:	683a      	ldr	r2, [r7, #0]
 801df5e:	429a      	cmp	r2, r3
 801df60:	dd06      	ble.n	801df70 <_eeprom_write+0xe0>
 801df62:	69bb      	ldr	r3, [r7, #24]
 801df64:	3303      	adds	r3, #3
 801df66:	697a      	ldr	r2, [r7, #20]
 801df68:	18d3      	adds	r3, r2, r3
 801df6a:	781b      	ldrb	r3, [r3, #0]
 801df6c:	001a      	movs	r2, r3
 801df6e:	e000      	b.n	801df72 <_eeprom_write+0xe2>
 801df70:	2200      	movs	r2, #0
 801df72:	693b      	ldr	r3, [r7, #16]
 801df74:	189b      	adds	r3, r3, r2
 801df76:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 801df78:	69fb      	ldr	r3, [r7, #28]
 801df7a:	0018      	movs	r0, r3
 801df7c:	f000 f8a6 	bl	801e0cc <__eepromRead>
 801df80:	0002      	movs	r2, r0
 801df82:	693b      	ldr	r3, [r7, #16]
 801df84:	4293      	cmp	r3, r2
 801df86:	d005      	beq.n	801df94 <_eeprom_write+0x104>
 801df88:	693a      	ldr	r2, [r7, #16]
 801df8a:	69fb      	ldr	r3, [r7, #28]
 801df8c:	0011      	movs	r1, r2
 801df8e:	0018      	movs	r0, r3
 801df90:	f000 f8a6 	bl	801e0e0 <__eepromWrite>
		_eepromAddr+=4;
 801df94:	69fb      	ldr	r3, [r7, #28]
 801df96:	3304      	adds	r3, #4
 801df98:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 801df9a:	69bb      	ldr	r3, [r7, #24]
 801df9c:	3304      	adds	r3, #4
 801df9e:	61bb      	str	r3, [r7, #24]
 801dfa0:	69ba      	ldr	r2, [r7, #24]
 801dfa2:	683b      	ldr	r3, [r7, #0]
 801dfa4:	429a      	cmp	r2, r3
 801dfa6:	dbaf      	blt.n	801df08 <_eeprom_write+0x78>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 801dfa8:	4b08      	ldr	r3, [pc, #32]	; (801dfcc <_eeprom_write+0x13c>)
 801dfaa:	685a      	ldr	r2, [r3, #4]
 801dfac:	4b07      	ldr	r3, [pc, #28]	; (801dfcc <_eeprom_write+0x13c>)
 801dfae:	2101      	movs	r1, #1
 801dfb0:	430a      	orrs	r2, r1
 801dfb2:	605a      	str	r2, [r3, #4]
	return true;
 801dfb4:	2301      	movs	r3, #1
}
 801dfb6:	0018      	movs	r0, r3
 801dfb8:	46bd      	mov	sp, r7
 801dfba:	b008      	add	sp, #32
 801dfbc:	bd80      	pop	{r7, pc}
 801dfbe:	46c0      	nop			; (mov r8, r8)
 801dfc0:	d0000030 	.word	0xd0000030
 801dfc4:	08080000 	.word	0x08080000
 801dfc8:	d0000031 	.word	0xd0000031
 801dfcc:	40022000 	.word	0x40022000
 801dfd0:	89abcdef 	.word	0x89abcdef
 801dfd4:	02030405 	.word	0x02030405

0801dfd8 <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 801dfd8:	b580      	push	{r7, lr}
 801dfda:	b088      	sub	sp, #32
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	60b9      	str	r1, [r7, #8]
 801dfe0:	607a      	str	r2, [r7, #4]
 801dfe2:	603b      	str	r3, [r7, #0]
 801dfe4:	210f      	movs	r1, #15
 801dfe6:	187b      	adds	r3, r7, r1
 801dfe8:	1c02      	adds	r2, r0, #0
 801dfea:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 801dff0:	187b      	adds	r3, r7, r1
 801dff2:	781b      	ldrb	r3, [r3, #0]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d106      	bne.n	801e006 <_eeprom_read+0x2e>
 801dff8:	683a      	ldr	r2, [r7, #0]
 801dffa:	68bb      	ldr	r3, [r7, #8]
 801dffc:	18d2      	adds	r2, r2, r3
 801dffe:	23c0      	movs	r3, #192	; 0xc0
 801e000:	015b      	lsls	r3, r3, #5
 801e002:	429a      	cmp	r2, r3
 801e004:	d906      	bls.n	801e014 <_eeprom_read+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 801e006:	683b      	ldr	r3, [r7, #0]
 801e008:	b29b      	uxth	r3, r3
 801e00a:	4a2d      	ldr	r2, [pc, #180]	; (801e0c0 <_eeprom_read+0xe8>)
 801e00c:	0019      	movs	r1, r3
 801e00e:	0010      	movs	r0, r2
 801e010:	f7fd fae0 	bl	801b5d4 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 801e014:	68bb      	ldr	r3, [r7, #8]
 801e016:	4a2b      	ldr	r2, [pc, #172]	; (801e0c4 <_eeprom_read+0xec>)
 801e018:	4694      	mov	ip, r2
 801e01a:	4463      	add	r3, ip
 801e01c:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 801e01e:	69fb      	ldr	r3, [r7, #28]
 801e020:	2203      	movs	r2, #3
 801e022:	4013      	ands	r3, r2
 801e024:	d006      	beq.n	801e034 <_eeprom_read+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,0);
 801e026:	4b28      	ldr	r3, [pc, #160]	; (801e0c8 <_eeprom_read+0xf0>)
 801e028:	2100      	movs	r1, #0
 801e02a:	0018      	movs	r0, r3
 801e02c:	f7fd fad2 	bl	801b5d4 <itsdk_error_report>
	    return false;
 801e030:	2300      	movs	r3, #0
 801e032:	e040      	b.n	801e0b6 <_eeprom_read+0xde>
	}

	// Read data
	for (int i = 0; i < len; i += 4) {
 801e034:	2300      	movs	r3, #0
 801e036:	61bb      	str	r3, [r7, #24]
 801e038:	e038      	b.n	801e0ac <_eeprom_read+0xd4>
		v = __eepromRead(_eepromAddr);
 801e03a:	69fb      	ldr	r3, [r7, #28]
 801e03c:	0018      	movs	r0, r3
 801e03e:	f000 f845 	bl	801e0cc <__eepromRead>
 801e042:	0003      	movs	r3, r0
 801e044:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 801e046:	693b      	ldr	r3, [r7, #16]
 801e048:	0e19      	lsrs	r1, r3, #24
 801e04a:	69bb      	ldr	r3, [r7, #24]
 801e04c:	697a      	ldr	r2, [r7, #20]
 801e04e:	18d3      	adds	r3, r2, r3
 801e050:	b2ca      	uxtb	r2, r1
 801e052:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 801e054:	69bb      	ldr	r3, [r7, #24]
 801e056:	3301      	adds	r3, #1
 801e058:	683a      	ldr	r2, [r7, #0]
 801e05a:	429a      	cmp	r2, r3
 801e05c:	dd07      	ble.n	801e06e <_eeprom_read+0x96>
 801e05e:	693b      	ldr	r3, [r7, #16]
 801e060:	0c19      	lsrs	r1, r3, #16
 801e062:	69bb      	ldr	r3, [r7, #24]
 801e064:	3301      	adds	r3, #1
 801e066:	697a      	ldr	r2, [r7, #20]
 801e068:	18d3      	adds	r3, r2, r3
 801e06a:	b2ca      	uxtb	r2, r1
 801e06c:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 801e06e:	69bb      	ldr	r3, [r7, #24]
 801e070:	3302      	adds	r3, #2
 801e072:	683a      	ldr	r2, [r7, #0]
 801e074:	429a      	cmp	r2, r3
 801e076:	dd07      	ble.n	801e088 <_eeprom_read+0xb0>
 801e078:	693b      	ldr	r3, [r7, #16]
 801e07a:	0a19      	lsrs	r1, r3, #8
 801e07c:	69bb      	ldr	r3, [r7, #24]
 801e07e:	3302      	adds	r3, #2
 801e080:	697a      	ldr	r2, [r7, #20]
 801e082:	18d3      	adds	r3, r2, r3
 801e084:	b2ca      	uxtb	r2, r1
 801e086:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 801e088:	69bb      	ldr	r3, [r7, #24]
 801e08a:	3303      	adds	r3, #3
 801e08c:	683a      	ldr	r2, [r7, #0]
 801e08e:	429a      	cmp	r2, r3
 801e090:	dd06      	ble.n	801e0a0 <_eeprom_read+0xc8>
 801e092:	69bb      	ldr	r3, [r7, #24]
 801e094:	3303      	adds	r3, #3
 801e096:	697a      	ldr	r2, [r7, #20]
 801e098:	18d3      	adds	r3, r2, r3
 801e09a:	693a      	ldr	r2, [r7, #16]
 801e09c:	b2d2      	uxtb	r2, r2
 801e09e:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 801e0a0:	69fb      	ldr	r3, [r7, #28]
 801e0a2:	3304      	adds	r3, #4
 801e0a4:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 801e0a6:	69bb      	ldr	r3, [r7, #24]
 801e0a8:	3304      	adds	r3, #4
 801e0aa:	61bb      	str	r3, [r7, #24]
 801e0ac:	69ba      	ldr	r2, [r7, #24]
 801e0ae:	683b      	ldr	r3, [r7, #0]
 801e0b0:	429a      	cmp	r2, r3
 801e0b2:	dbc2      	blt.n	801e03a <_eeprom_read+0x62>
	}
	return true;
 801e0b4:	2301      	movs	r3, #1
}
 801e0b6:	0018      	movs	r0, r3
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	b008      	add	sp, #32
 801e0bc:	bd80      	pop	{r7, pc}
 801e0be:	46c0      	nop			; (mov r8, r8)
 801e0c0:	d0000030 	.word	0xd0000030
 801e0c4:	08080000 	.word	0x08080000
 801e0c8:	d0000031 	.word	0xd0000031

0801e0cc <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 801e0cc:	b580      	push	{r7, lr}
 801e0ce:	b082      	sub	sp, #8
 801e0d0:	af00      	add	r7, sp, #0
 801e0d2:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	681b      	ldr	r3, [r3, #0]
}
 801e0d8:	0018      	movs	r0, r3
 801e0da:	46bd      	mov	sp, r7
 801e0dc:	b002      	add	sp, #8
 801e0de:	bd80      	pop	{r7, pc}

0801e0e0 <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 801e0e0:	b580      	push	{r7, lr}
 801e0e2:	b084      	sub	sp, #16
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	6078      	str	r0, [r7, #4]
 801e0e8:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 801e0ea:	230e      	movs	r3, #14
 801e0ec:	18fb      	adds	r3, r7, r3
 801e0ee:	4a20      	ldr	r2, [pc, #128]	; (801e170 <__eepromWrite+0x90>)
 801e0f0:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801e0f2:	e005      	b.n	801e100 <__eepromWrite+0x20>
 801e0f4:	210e      	movs	r1, #14
 801e0f6:	187b      	adds	r3, r7, r1
 801e0f8:	881a      	ldrh	r2, [r3, #0]
 801e0fa:	187b      	adds	r3, r7, r1
 801e0fc:	3a01      	subs	r2, #1
 801e0fe:	801a      	strh	r2, [r3, #0]
 801e100:	4b1c      	ldr	r3, [pc, #112]	; (801e174 <__eepromWrite+0x94>)
 801e102:	699b      	ldr	r3, [r3, #24]
 801e104:	2201      	movs	r2, #1
 801e106:	4013      	ands	r3, r2
 801e108:	d004      	beq.n	801e114 <__eepromWrite+0x34>
 801e10a:	230e      	movs	r3, #14
 801e10c:	18fb      	adds	r3, r7, r3
 801e10e:	881b      	ldrh	r3, [r3, #0]
 801e110:	2b00      	cmp	r3, #0
 801e112:	d1ef      	bne.n	801e0f4 <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 801e114:	230e      	movs	r3, #14
 801e116:	18fb      	adds	r3, r7, r3
 801e118:	881b      	ldrh	r3, [r3, #0]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d101      	bne.n	801e122 <__eepromWrite+0x42>
 801e11e:	2300      	movs	r3, #0
 801e120:	e021      	b.n	801e166 <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 801e122:	4b14      	ldr	r3, [pc, #80]	; (801e174 <__eepromWrite+0x94>)
 801e124:	685a      	ldr	r2, [r3, #4]
 801e126:	4b13      	ldr	r3, [pc, #76]	; (801e174 <__eepromWrite+0x94>)
 801e128:	4913      	ldr	r1, [pc, #76]	; (801e178 <__eepromWrite+0x98>)
 801e12a:	400a      	ands	r2, r1
 801e12c:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	683a      	ldr	r2, [r7, #0]
 801e132:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 801e134:	e005      	b.n	801e142 <__eepromWrite+0x62>
 801e136:	210e      	movs	r1, #14
 801e138:	187b      	adds	r3, r7, r1
 801e13a:	881a      	ldrh	r2, [r3, #0]
 801e13c:	187b      	adds	r3, r7, r1
 801e13e:	3a01      	subs	r2, #1
 801e140:	801a      	strh	r2, [r3, #0]
 801e142:	4b0c      	ldr	r3, [pc, #48]	; (801e174 <__eepromWrite+0x94>)
 801e144:	699b      	ldr	r3, [r3, #24]
 801e146:	2201      	movs	r2, #1
 801e148:	4013      	ands	r3, r2
 801e14a:	d004      	beq.n	801e156 <__eepromWrite+0x76>
 801e14c:	230e      	movs	r3, #14
 801e14e:	18fb      	adds	r3, r7, r3
 801e150:	881b      	ldrh	r3, [r3, #0]
 801e152:	2b00      	cmp	r3, #0
 801e154:	d1ef      	bne.n	801e136 <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 801e156:	230e      	movs	r3, #14
 801e158:	18fb      	adds	r3, r7, r3
 801e15a:	881b      	ldrh	r3, [r3, #0]
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d101      	bne.n	801e164 <__eepromWrite+0x84>
 801e160:	2300      	movs	r3, #0
 801e162:	e000      	b.n	801e166 <__eepromWrite+0x86>

	return true;
 801e164:	2301      	movs	r3, #1
}
 801e166:	0018      	movs	r0, r3
 801e168:	46bd      	mov	sp, r7
 801e16a:	b004      	add	sp, #16
 801e16c:	bd80      	pop	{r7, pc}
 801e16e:	46c0      	nop			; (mov r8, r8)
 801e170:	00002710 	.word	0x00002710
 801e174:	40022000 	.word	0x40022000
 801e178:	fffffeff 	.word	0xfffffeff

0801e17c <stm32l_lowPowerSetup>:

/**
 * Setup the STM32L Low Power mode for the given amount of ms
 * 0xFFFFFFFF ms when no time limit
 */
stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerSetup(uint32_t durationMs, stm32_lowPowerMode_e mode) {
 801e17c:	b530      	push	{r4, r5, lr}
 801e17e:	000c      	movs	r4, r1
 801e180:	b083      	sub	sp, #12
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// -------------------------------------------------------------
		// Configure the STM32L0x1 for switching to low power stop mode
		// -------------------------------------------------------------
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			if ( durationMs == __INFINITE_32B ) {
 801e182:	1c43      	adds	r3, r0, #1
 801e184:	d05c      	beq.n	801e240 <stm32l_lowPowerSetup+0xc4>
				#endif
			}
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
		    } else {
			   return STM32L_LOWPOWER_TOOSHORT;
 801e186:	2301      	movs	r3, #1
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
 801e188:	2805      	cmp	r0, #5
 801e18a:	d956      	bls.n	801e23a <stm32l_lowPowerSetup+0xbe>
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
 801e18c:	f000 f93c 	bl	801e408 <rtc_configure4LowPower>
			}
		#endif
		HAL_SuspendTick();
 801e190:	f7e5 fd84 	bl	8003c9c <HAL_SuspendTick>
	    __HAL_RCC_PWR_CLK_ENABLE();				// Enable Power Control clock
 801e194:	2380      	movs	r3, #128	; 0x80
 801e196:	4a2b      	ldr	r2, [pc, #172]	; (801e244 <stm32l_lowPowerSetup+0xc8>)
 801e198:	055b      	lsls	r3, r3, #21
 801e19a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 801e19c:	430b      	orrs	r3, r1
 801e19e:	6393      	str	r3, [r2, #56]	; 0x38
 	    HAL_PWREx_EnableUltraLowPower();		// Ultra low power mode
 801e1a0:	f7e6 fc0c 	bl	80049bc <HAL_PWREx_EnableUltraLowPower>
 	    HAL_PWREx_EnableFastWakeUp();			// Fast wake-up for ultra low power mode
 801e1a4:	f7e6 fbfc 	bl	80049a0 <HAL_PWREx_EnableFastWakeUp>

 	    if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 801e1a8:	2c00      	cmp	r4, #0
 801e1aa:	d13e      	bne.n	801e22a <stm32l_lowPowerSetup+0xae>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET){};
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET){};
 801e1ac:	2180      	movs	r1, #128	; 0x80
 801e1ae:	4d26      	ldr	r5, [pc, #152]	; (801e248 <stm32l_lowPowerSetup+0xcc>)
 801e1b0:	0249      	lsls	r1, r1, #9
 801e1b2:	682b      	ldr	r3, [r5, #0]
 801e1b4:	69da      	ldr	r2, [r3, #28]
 801e1b6:	420a      	tst	r2, r1
 801e1b8:	d1fc      	bne.n	801e1b4 <stm32l_lowPowerSetup+0x38>
			#endif


			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART2 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET){}
 801e1ba:	2480      	movs	r4, #128	; 0x80
 801e1bc:	03e4      	lsls	r4, r4, #15
 801e1be:	69da      	ldr	r2, [r3, #28]
 801e1c0:	4222      	tst	r2, r4
 801e1c2:	d0fc      	beq.n	801e1be <stm32l_lowPowerSetup+0x42>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 801e1c4:	23c0      	movs	r3, #192	; 0xc0
 801e1c6:	039b      	lsls	r3, r3, #14
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 801e1c8:	0019      	movs	r1, r3
 801e1ca:	9a01      	ldr	r2, [sp, #4]
 801e1cc:	0028      	movs	r0, r5
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 801e1ce:	9300      	str	r3, [sp, #0]
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 801e1d0:	f7e9 fb24 	bl	800781c <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 801e1d4:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart2);
 801e1d6:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 801e1d8:	689a      	ldr	r2, [r3, #8]
 801e1da:	4314      	orrs	r4, r2
 801e1dc:	609c      	str	r4, [r3, #8]
			  #endif
			#endif

			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART1 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 801e1de:	2480      	movs	r4, #128	; 0x80
				HAL_UARTEx_EnableStopMode(&huart2);
 801e1e0:	f7e9 fb82 	bl	80078e8 <HAL_UARTEx_EnableStopMode>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 801e1e4:	4d19      	ldr	r5, [pc, #100]	; (801e24c <stm32l_lowPowerSetup+0xd0>)
 801e1e6:	03e4      	lsls	r4, r4, #15
 801e1e8:	682a      	ldr	r2, [r5, #0]
 801e1ea:	69d3      	ldr	r3, [r2, #28]
 801e1ec:	4223      	tst	r3, r4
 801e1ee:	d0fc      	beq.n	801e1ea <stm32l_lowPowerSetup+0x6e>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1,wakeup);
 801e1f0:	9900      	ldr	r1, [sp, #0]
 801e1f2:	9a01      	ldr	r2, [sp, #4]
 801e1f4:	0028      	movs	r0, r5
 801e1f6:	f7e9 fb11 	bl	800781c <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 801e1fa:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart1);
 801e1fc:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 801e1fe:	689a      	ldr	r2, [r3, #8]
 801e200:	4314      	orrs	r4, r2
 801e202:	609c      	str	r4, [r3, #8]
				HAL_UARTEx_EnableStopMode(&huart1);
 801e204:	f7e9 fb70 	bl	80078e8 <HAL_UARTEx_EnableStopMode>
				#if (ITSDK_WITH_UART & __UART_USART1) > 0
					__HAL_RCC_USART1_CLK_DISABLE();
				#endif
			#endif

			_stm32l_disableGpios();					// Disable GPIOs based on configuration
 801e208:	f000 f89a 	bl	801e340 <_stm32l_disableGpios>
			  // Register interrupt handler
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
																// (the previously existing handler will be bypassed)
			#else
			  gpio_interruptDisableAll();						// Disable GPIOs interrupts
 801e20c:	f7ff fbf3 	bl	801d9f6 <gpio_interruptDisableAll>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				__HAL_RCC_SPI1_CLK_DISABLE();
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				__HAL_RCC_TIM21_CLK_DISABLE();
 801e210:	2204      	movs	r2, #4
				__HAL_RCC_SPI1_CLK_DISABLE();
 801e212:	4b0c      	ldr	r3, [pc, #48]	; (801e244 <stm32l_lowPowerSetup+0xc8>)
 801e214:	4c0e      	ldr	r4, [pc, #56]	; (801e250 <stm32l_lowPowerSetup+0xd4>)
 801e216:	6b59      	ldr	r1, [r3, #52]	; 0x34
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_DISABLE();
 801e218:	480e      	ldr	r0, [pc, #56]	; (801e254 <stm32l_lowPowerSetup+0xd8>)
				__HAL_RCC_SPI1_CLK_DISABLE();
 801e21a:	4021      	ands	r1, r4
 801e21c:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_TIM21_CLK_DISABLE();
 801e21e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801e220:	4391      	bics	r1, r2
 801e222:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_ADC1_CLK_DISABLE();
 801e224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e226:	4002      	ands	r2, r0
 801e228:	635a      	str	r2, [r3, #52]	; 0x34
		// ??? add ?? Not yet tested
		//__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();


 	    // Switch to STOPMode
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 801e22a:	22ff      	movs	r2, #255	; 0xff
 801e22c:	4b0a      	ldr	r3, [pc, #40]	; (801e258 <stm32l_lowPowerSetup+0xdc>)
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			__lowPower_wakeup_pin=0xFFFF;
		#endif
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 801e22e:	2101      	movs	r1, #1
 801e230:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 801e232:	701a      	strb	r2, [r3, #0]
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 801e234:	f7e6 fb80 	bl	8004938 <HAL_PWR_EnterSTOPMode>
	}
	return STM32L_LOWPOWER_SUCCESS;
 801e238:	2300      	movs	r3, #0
}
 801e23a:	0018      	movs	r0, r3
 801e23c:	b003      	add	sp, #12
 801e23e:	bd30      	pop	{r4, r5, pc}
					  durationMs = ITSDK_WDG_MS - 5;
 801e240:	4806      	ldr	r0, [pc, #24]	; (801e25c <stm32l_lowPowerSetup+0xe0>)
 801e242:	e7a3      	b.n	801e18c <stm32l_lowPowerSetup+0x10>
 801e244:	40021000 	.word	0x40021000
 801e248:	2000139c 	.word	0x2000139c
 801e24c:	2000131c 	.word	0x2000131c
 801e250:	ffffefff 	.word	0xffffefff
 801e254:	fffffdff 	.word	0xfffffdff
 801e258:	200000ac 	.word	0x200000ac
 801e25c:	00003e7b 	.word	0x00003e7b

0801e260 <stm32l_lowPowerResume>:


stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerResume(stm32_lowPowerMode_e mode) {
 801e260:	b510      	push	{r4, lr}
 801e262:	0004      	movs	r4, r0
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// ------------------------------------------------------------
		// Restore from STOP MODE
		// ------------------------------------------------------------

		SystemClock_Config();
 801e264:	f7e4 fe0e 	bl	8002e84 <SystemClock_Config>
		HAL_SuspendTick();
 801e268:	f7e5 fd18 	bl	8003c9c <HAL_SuspendTick>
		#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			rtc_disable4LowPower();
 801e26c:	f000 f8dd 	bl	801e42a <rtc_disable4LowPower>
		#endif

		if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 801e270:	2c00      	cmp	r4, #0
 801e272:	d10f      	bne.n	801e294 <stm32l_lowPowerResume+0x34>

			stm32l_lowPowerRestoreGpioConfig();
 801e274:	f7e4 fd66 	bl	8002d44 <stm32l_lowPowerRestoreGpioConfig>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_I2C2 ) > 0
				HAL_I2C_MspInit(&hi2c2);
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI1 ) > 0
				HAL_SPI_MspInit(&hspi1);
 801e278:	4808      	ldr	r0, [pc, #32]	; (801e29c <stm32l_lowPowerResume+0x3c>)
 801e27a:	f7e5 f99f 	bl	80035bc <HAL_SPI_MspInit>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				HAL_SPI_MspInit(&hspi2);
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				HAL_TIM_Base_MspInit(&htim21);
 801e27e:	4808      	ldr	r0, [pc, #32]	; (801e2a0 <stm32l_lowPowerResume+0x40>)
 801e280:	f7e5 fb64 	bl	800394c <HAL_TIM_Base_MspInit>
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_ENABLE();
 801e284:	2380      	movs	r3, #128	; 0x80
 801e286:	4a07      	ldr	r2, [pc, #28]	; (801e2a4 <stm32l_lowPowerResume+0x44>)
 801e288:	009b      	lsls	r3, r3, #2
 801e28a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801e28c:	430b      	orrs	r3, r1
 801e28e:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_ADCEx_EnableVREFINT();
 801e290:	f7e5 ff46 	bl	8004120 <HAL_ADCEx_EnableVREFINT>
	} else {
		log_info("|");
	}
	#endif

	HAL_ResumeTick();
 801e294:	f7e5 fd10 	bl	8003cb8 <HAL_ResumeTick>
	return STM32L_LOWPOWER_SUCCESS;
}
 801e298:	2000      	movs	r0, #0
 801e29a:	bd10      	pop	{r4, pc}
 801e29c:	20001288 	.word	0x20001288
 801e2a0:	200012e0 	.word	0x200012e0
 801e2a4:	40021000 	.word	0x40021000

0801e2a8 <__GpioAnalog>:

/**
 * Switch the GPIO to Low Power
 */
void __GpioAnalog(GPIO_TypeDef  *GPIOx, uint16_t pins)
{
 801e2a8:	b580      	push	{r7, lr}
 801e2aa:	b086      	sub	sp, #24
 801e2ac:	af00      	add	r7, sp, #0
 801e2ae:	6078      	str	r0, [r7, #4]
 801e2b0:	000a      	movs	r2, r1
 801e2b2:	1cbb      	adds	r3, r7, #2
 801e2b4:	801a      	strh	r2, [r3, #0]
  uint32_t position = 0x00U;
 801e2b6:	2300      	movs	r3, #0
 801e2b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801e2be:	2300      	movs	r3, #0
 801e2c0:	60fb      	str	r3, [r7, #12]

  // Configure the port pins //
  while ((pins >> position) != 0)
 801e2c2:	e033      	b.n	801e32c <__GpioAnalog+0x84>
  {
    iocurrent = (pins) & (1U << position);
 801e2c4:	1cbb      	adds	r3, r7, #2
 801e2c6:	881b      	ldrh	r3, [r3, #0]
 801e2c8:	2101      	movs	r1, #1
 801e2ca:	697a      	ldr	r2, [r7, #20]
 801e2cc:	4091      	lsls	r1, r2
 801e2ce:	000a      	movs	r2, r1
 801e2d0:	4013      	ands	r3, r2
 801e2d2:	613b      	str	r3, [r7, #16]
    if(iocurrent)
 801e2d4:	693b      	ldr	r3, [r7, #16]
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d025      	beq.n	801e326 <__GpioAnalog+0x7e>
    {
      // Configure IO Direction mode (Input, Output, Alternate or Analog)
      temp = GPIOx->MODER;
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801e2e0:	697b      	ldr	r3, [r7, #20]
 801e2e2:	005b      	lsls	r3, r3, #1
 801e2e4:	2203      	movs	r2, #3
 801e2e6:	409a      	lsls	r2, r3
 801e2e8:	0013      	movs	r3, r2
 801e2ea:	43da      	mvns	r2, r3
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	4013      	ands	r3, r2
 801e2f0:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_MODE_ANALOG) << (position * 2U));
 801e2f2:	697b      	ldr	r3, [r7, #20]
 801e2f4:	005b      	lsls	r3, r3, #1
 801e2f6:	2203      	movs	r2, #3
 801e2f8:	409a      	lsls	r2, r3
 801e2fa:	0013      	movs	r3, r2
 801e2fc:	68fa      	ldr	r2, [r7, #12]
 801e2fe:	4313      	orrs	r3, r2
 801e300:	60fb      	str	r3, [r7, #12]
      GPIOx->MODER = temp;
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	68fa      	ldr	r2, [r7, #12]
 801e306:	601a      	str	r2, [r3, #0]

      // Activate the Pull-up or Pull down resistor for the current IO
      temp = GPIOx->PUPDR;
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	68db      	ldr	r3, [r3, #12]
 801e30c:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801e30e:	697b      	ldr	r3, [r7, #20]
 801e310:	005b      	lsls	r3, r3, #1
 801e312:	2203      	movs	r2, #3
 801e314:	409a      	lsls	r2, r3
 801e316:	0013      	movs	r3, r2
 801e318:	43da      	mvns	r2, r3
 801e31a:	68fb      	ldr	r3, [r7, #12]
 801e31c:	4013      	ands	r3, r2
 801e31e:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_NOPULL) << (position * 2U));
      GPIOx->PUPDR = temp;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	68fa      	ldr	r2, [r7, #12]
 801e324:	60da      	str	r2, [r3, #12]
    }
    position++;
 801e326:	697b      	ldr	r3, [r7, #20]
 801e328:	3301      	adds	r3, #1
 801e32a:	617b      	str	r3, [r7, #20]
  while ((pins >> position) != 0)
 801e32c:	1cbb      	adds	r3, r7, #2
 801e32e:	881a      	ldrh	r2, [r3, #0]
 801e330:	697b      	ldr	r3, [r7, #20]
 801e332:	411a      	asrs	r2, r3
 801e334:	1e13      	subs	r3, r2, #0
 801e336:	d1c5      	bne.n	801e2c4 <__GpioAnalog+0x1c>
  }
}
 801e338:	46c0      	nop			; (mov r8, r8)
 801e33a:	46bd      	mov	sp, r7
 801e33c:	b006      	add	sp, #24
 801e33e:	bd80      	pop	{r7, pc}

0801e340 <_stm32l_disableGpios>:

/**
 * Disable GPIOS for Low Power switching
 */
void _stm32l_disableGpios() {
 801e340:	b580      	push	{r7, lr}
 801e342:	af00      	add	r7, sp, #0
    /*       example because communication between ST-link and the device       		*/
    /*       under test is done through UART. All GPIO pins are disabled (set   		*/
    /*       to analog input mode) including  UART I/O pins.           					*/

#ifdef GPIOA
	__GpioAnalog(GPIOA,(~ITSDK_LOWPOWER_GPIO_A_KEEP) & (GPIOA_PIN_AVAILABLE));
 801e344:	4a1f      	ldr	r2, [pc, #124]	; (801e3c4 <_stm32l_disableGpios+0x84>)
 801e346:	23a0      	movs	r3, #160	; 0xa0
 801e348:	05db      	lsls	r3, r3, #23
 801e34a:	0011      	movs	r1, r2
 801e34c:	0018      	movs	r0, r3
 801e34e:	f7ff ffab 	bl	801e2a8 <__GpioAnalog>
		__HAL_RCC_GPIOA_CLK_DISABLE();
	}
#endif

#ifdef GPIOB
	__GpioAnalog(GPIOB,(~ITSDK_LOWPOWER_GPIO_B_KEEP) & (GPIOB_PIN_AVAILABLE));
 801e352:	4a1d      	ldr	r2, [pc, #116]	; (801e3c8 <_stm32l_disableGpios+0x88>)
 801e354:	4b1d      	ldr	r3, [pc, #116]	; (801e3cc <_stm32l_disableGpios+0x8c>)
 801e356:	0011      	movs	r1, r2
 801e358:	0018      	movs	r0, r3
 801e35a:	f7ff ffa5 	bl	801e2a8 <__GpioAnalog>
		__HAL_RCC_GPIOB_CLK_DISABLE();
	}
#endif

#ifdef GPIOC
	__GpioAnalog(GPIOC,(~ITSDK_LOWPOWER_GPIO_C_KEEP) & (GPIOC_PIN_AVAILABLE));
 801e35e:	4a1c      	ldr	r2, [pc, #112]	; (801e3d0 <_stm32l_disableGpios+0x90>)
 801e360:	4b1c      	ldr	r3, [pc, #112]	; (801e3d4 <_stm32l_disableGpios+0x94>)
 801e362:	0011      	movs	r1, r2
 801e364:	0018      	movs	r0, r3
 801e366:	f7ff ff9f 	bl	801e2a8 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_C_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOC_CLK_DISABLE();
 801e36a:	4b1b      	ldr	r3, [pc, #108]	; (801e3d8 <_stm32l_disableGpios+0x98>)
 801e36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e36e:	4b1a      	ldr	r3, [pc, #104]	; (801e3d8 <_stm32l_disableGpios+0x98>)
 801e370:	2104      	movs	r1, #4
 801e372:	438a      	bics	r2, r1
 801e374:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOD
	__GpioAnalog(GPIOD,(~ITSDK_LOWPOWER_GPIO_D_KEEP) & (GPIOD_PIN_AVAILABLE));
 801e376:	4a16      	ldr	r2, [pc, #88]	; (801e3d0 <_stm32l_disableGpios+0x90>)
 801e378:	4b18      	ldr	r3, [pc, #96]	; (801e3dc <_stm32l_disableGpios+0x9c>)
 801e37a:	0011      	movs	r1, r2
 801e37c:	0018      	movs	r0, r3
 801e37e:	f7ff ff93 	bl	801e2a8 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_D_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOD_CLK_DISABLE();
 801e382:	4b15      	ldr	r3, [pc, #84]	; (801e3d8 <_stm32l_disableGpios+0x98>)
 801e384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e386:	4b14      	ldr	r3, [pc, #80]	; (801e3d8 <_stm32l_disableGpios+0x98>)
 801e388:	2108      	movs	r1, #8
 801e38a:	438a      	bics	r2, r1
 801e38c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOE
	__GpioAnalog(GPIOE,(~ITSDK_LOWPOWER_GPIO_E_KEEP) & (GPIOE_PIN_AVAILABLE));
 801e38e:	4a10      	ldr	r2, [pc, #64]	; (801e3d0 <_stm32l_disableGpios+0x90>)
 801e390:	4b13      	ldr	r3, [pc, #76]	; (801e3e0 <_stm32l_disableGpios+0xa0>)
 801e392:	0011      	movs	r1, r2
 801e394:	0018      	movs	r0, r3
 801e396:	f7ff ff87 	bl	801e2a8 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_E_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOE_CLK_DISABLE();
 801e39a:	4b0f      	ldr	r3, [pc, #60]	; (801e3d8 <_stm32l_disableGpios+0x98>)
 801e39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e39e:	4b0e      	ldr	r3, [pc, #56]	; (801e3d8 <_stm32l_disableGpios+0x98>)
 801e3a0:	2110      	movs	r1, #16
 801e3a2:	438a      	bics	r2, r1
 801e3a4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOH
	__GpioAnalog(GPIOH,(~ITSDK_LOWPOWER_GPIO_H_KEEP) & (GPIOH_PIN_AVAILABLE));
 801e3a6:	4a0f      	ldr	r2, [pc, #60]	; (801e3e4 <_stm32l_disableGpios+0xa4>)
 801e3a8:	4b0f      	ldr	r3, [pc, #60]	; (801e3e8 <_stm32l_disableGpios+0xa8>)
 801e3aa:	0011      	movs	r1, r2
 801e3ac:	0018      	movs	r0, r3
 801e3ae:	f7ff ff7b 	bl	801e2a8 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_H_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOH_CLK_DISABLE();
 801e3b2:	4b09      	ldr	r3, [pc, #36]	; (801e3d8 <_stm32l_disableGpios+0x98>)
 801e3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e3b6:	4b08      	ldr	r3, [pc, #32]	; (801e3d8 <_stm32l_disableGpios+0x98>)
 801e3b8:	2180      	movs	r1, #128	; 0x80
 801e3ba:	438a      	bics	r2, r1
 801e3bc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

}
 801e3be:	46c0      	nop			; (mov r8, r8)
 801e3c0:	46bd      	mov	sp, r7
 801e3c2:	bd80      	pop	{r7, pc}
 801e3c4:	0000e0f3 	.word	0x0000e0f3
 801e3c8:	0000ef5b 	.word	0x0000ef5b
 801e3cc:	50000400 	.word	0x50000400
 801e3d0:	0000ffff 	.word	0x0000ffff
 801e3d4:	50000800 	.word	0x50000800
 801e3d8:	40021000 	.word	0x40021000
 801e3dc:	50000c00 	.word	0x50000c00
 801e3e0:	50001000 	.word	0x50001000
 801e3e4:	00000603 	.word	0x00000603
 801e3e8:	50001c00 	.word	0x50001c00

0801e3ec <HAL_UARTEx_WakeupCallback>:
}

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 801e3ec:	b580      	push	{r7, lr}
 801e3ee:	b082      	sub	sp, #8
 801e3f0:	af00      	add	r7, sp, #0
 801e3f2:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 801e3f4:	4b03      	ldr	r3, [pc, #12]	; (801e404 <HAL_UARTEx_WakeupCallback+0x18>)
 801e3f6:	2203      	movs	r2, #3
 801e3f8:	701a      	strb	r2, [r3, #0]
}
 801e3fa:	46c0      	nop			; (mov r8, r8)
 801e3fc:	46bd      	mov	sp, r7
 801e3fe:	b002      	add	sp, #8
 801e400:	bd80      	pop	{r7, pc}
 801e402:	46c0      	nop			; (mov r8, r8)
 801e404:	200000ac 	.word	0x200000ac

0801e408 <rtc_configure4LowPower>:


/**
 * Configure the RTC source clock for running LowPower
 */
void rtc_configure4LowPower(uint32_t ms) {
 801e408:	b580      	push	{r7, lr}
 801e40a:	b082      	sub	sp, #8
 801e40c:	af00      	add	r7, sp, #0
 801e40e:	6078      	str	r0, [r7, #4]
	rtc_prepareSleepTime();
 801e410:	f000 f99a 	bl	801e748 <rtc_prepareSleepTime>
	if ( ms > 0 ) {
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	2b00      	cmp	r3, #0
 801e418:	d003      	beq.n	801e422 <rtc_configure4LowPower+0x1a>
		rtc_runRtcUntil(ms);
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	0018      	movs	r0, r3
 801e41e:	f000 f80d 	bl	801e43c <rtc_runRtcUntil>
	}
}
 801e422:	46c0      	nop			; (mov r8, r8)
 801e424:	46bd      	mov	sp, r7
 801e426:	b002      	add	sp, #8
 801e428:	bd80      	pop	{r7, pc}

0801e42a <rtc_disable4LowPower>:

/**
 * Deactivate the WakeUpTimer for not having the IRQ looping
 */
void rtc_disable4LowPower() {
 801e42a:	b580      	push	{r7, lr}
 801e42c:	af00      	add	r7, sp, #0
	rtc_disableWakeUp();
 801e42e:	f000 f85b 	bl	801e4e8 <rtc_disableWakeUp>
    rtc_updateTimeAfterSleepTime();
 801e432:	f000 f99b 	bl	801e76c <rtc_updateTimeAfterSleepTime>
}
 801e436:	46c0      	nop			; (mov r8, r8)
 801e438:	46bd      	mov	sp, r7
 801e43a:	bd80      	pop	{r7, pc}

0801e43c <rtc_runRtcUntil>:

/**
 * Run Rtc for a given time in ticks
 * Max is 16s
 */
void rtc_runRtcUntil(uint32_t ms) {
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b084      	sub	sp, #16
 801e440:	af00      	add	r7, sp, #0
 801e442:	6078      	str	r0, [r7, #4]
	// Issue #48
	// it seems that timer is limited to 16bis (even if 32 bits in the HAL code)
	// So this is limiting in about 30s of sleeping time
	uint32_t ticks = rtc_getTicksFromDuration((uint32_t)ms);
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	0018      	movs	r0, r3
 801e448:	f000 f816 	bl	801e478 <rtc_getTicksFromDuration>
 801e44c:	0003      	movs	r3, r0
 801e44e:	60fb      	str	r3, [r7, #12]
	if ( ticks < 65536 ) {
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	4a08      	ldr	r2, [pc, #32]	; (801e474 <rtc_runRtcUntil+0x38>)
 801e454:	4293      	cmp	r3, r2
 801e456:	d804      	bhi.n	801e462 <rtc_runRtcUntil+0x26>
	    rtc_runRtcUntilTicks(ticks);
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	0018      	movs	r0, r3
 801e45c:	f000 f81c 	bl	801e498 <rtc_runRtcUntilTicks>
	} else {
		// If larger than 65535 we change the RTC clock to have a 1s time base and a longer period of time
		rtc_runRtcUntilMs(ms);
	}
}
 801e460:	e003      	b.n	801e46a <rtc_runRtcUntil+0x2e>
		rtc_runRtcUntilMs(ms);
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	0018      	movs	r0, r3
 801e466:	f000 f827 	bl	801e4b8 <rtc_runRtcUntilMs>
}
 801e46a:	46c0      	nop			; (mov r8, r8)
 801e46c:	46bd      	mov	sp, r7
 801e46e:	b004      	add	sp, #16
 801e470:	bd80      	pop	{r7, pc}
 801e472:	46c0      	nop			; (mov r8, r8)
 801e474:	0000ffff 	.word	0x0000ffff

0801e478 <rtc_getTicksFromDuration>:

/*
 * Convert a duration in ticks (Wake-Up Clock only)
 */
uint32_t rtc_getTicksFromDuration(uint32_t ms) {
 801e478:	b580      	push	{r7, lr}
 801e47a:	b082      	sub	sp, #8
 801e47c:	af00      	add	r7, sp, #0
 801e47e:	6078      	str	r0, [r7, #4]
    return (ms * (ITSDK_RTC_CLKFREQ/16)) / 1000;
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	02da      	lsls	r2, r3, #11
 801e484:	23fa      	movs	r3, #250	; 0xfa
 801e486:	0099      	lsls	r1, r3, #2
 801e488:	0010      	movs	r0, r2
 801e48a:	f7e1 fe45 	bl	8000118 <__udivsi3>
 801e48e:	0003      	movs	r3, r0
}
 801e490:	0018      	movs	r0, r3
 801e492:	46bd      	mov	sp, r7
 801e494:	b002      	add	sp, #8
 801e496:	bd80      	pop	{r7, pc}

0801e498 <rtc_runRtcUntilTicks>:
}

/**
 * Run the RTC for a given number of ticks
 */
void rtc_runRtcUntilTicks(uint32_t ticks) {
 801e498:	b580      	push	{r7, lr}
 801e49a:	b082      	sub	sp, #8
 801e49c:	af00      	add	r7, sp, #0
 801e49e:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 801e4a0:	6879      	ldr	r1, [r7, #4]
 801e4a2:	4b04      	ldr	r3, [pc, #16]	; (801e4b4 <rtc_runRtcUntilTicks+0x1c>)
 801e4a4:	2200      	movs	r2, #0
 801e4a6:	0018      	movs	r0, r3
 801e4a8:	f7e7 fe96 	bl	80061d8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 801e4ac:	46c0      	nop			; (mov r8, r8)
 801e4ae:	46bd      	mov	sp, r7
 801e4b0:	b002      	add	sp, #8
 801e4b2:	bd80      	pop	{r7, pc}
 801e4b4:	2000120c 	.word	0x2000120c

0801e4b8 <rtc_runRtcUntilMs>:

/**
 * Run the RTC for a given number of ms
 */
void rtc_runRtcUntilMs(uint32_t ms) {
 801e4b8:	b580      	push	{r7, lr}
 801e4ba:	b082      	sub	sp, #8
 801e4bc:	af00      	add	r7, sp, #0
 801e4be:	6078      	str	r0, [r7, #4]
	// the scale is 1 second
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (ms / 1000), RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 801e4c0:	687a      	ldr	r2, [r7, #4]
 801e4c2:	23fa      	movs	r3, #250	; 0xfa
 801e4c4:	0099      	lsls	r1, r3, #2
 801e4c6:	0010      	movs	r0, r2
 801e4c8:	f7e1 fe26 	bl	8000118 <__udivsi3>
 801e4cc:	0003      	movs	r3, r0
 801e4ce:	0019      	movs	r1, r3
 801e4d0:	4b04      	ldr	r3, [pc, #16]	; (801e4e4 <rtc_runRtcUntilMs+0x2c>)
 801e4d2:	2204      	movs	r2, #4
 801e4d4:	0018      	movs	r0, r3
 801e4d6:	f7e7 fe7f 	bl	80061d8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 801e4da:	46c0      	nop			; (mov r8, r8)
 801e4dc:	46bd      	mov	sp, r7
 801e4de:	b002      	add	sp, #8
 801e4e0:	bd80      	pop	{r7, pc}
 801e4e2:	46c0      	nop			; (mov r8, r8)
 801e4e4:	2000120c 	.word	0x2000120c

0801e4e8 <rtc_disableWakeUp>:


void rtc_disableWakeUp() {
 801e4e8:	b580      	push	{r7, lr}
 801e4ea:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 801e4ec:	4b03      	ldr	r3, [pc, #12]	; (801e4fc <rtc_disableWakeUp+0x14>)
 801e4ee:	0018      	movs	r0, r3
 801e4f0:	f7e7 ff38 	bl	8006364 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 801e4f4:	46c0      	nop			; (mov r8, r8)
 801e4f6:	46bd      	mov	sp, r7
 801e4f8:	bd80      	pop	{r7, pc}
 801e4fa:	46c0      	nop			; (mov r8, r8)
 801e4fc:	2000120c 	.word	0x2000120c

0801e500 <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 801e500:	b5b0      	push	{r4, r5, r7, lr}
 801e502:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 801e504:	2001      	movs	r0, #1
 801e506:	f000 f807 	bl	801e518 <rtc_getTimestampMsRaw>
 801e50a:	0003      	movs	r3, r0
 801e50c:	000c      	movs	r4, r1
}
 801e50e:	0018      	movs	r0, r3
 801e510:	0021      	movs	r1, r4
 801e512:	46bd      	mov	sp, r7
 801e514:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801e518 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 801e518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e51a:	b095      	sub	sp, #84	; 0x54
 801e51c:	af00      	add	r7, sp, #0
 801e51e:	0003      	movs	r3, r0
 801e520:	222f      	movs	r2, #47	; 0x2f
 801e522:	18ba      	adds	r2, r7, r2
 801e524:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 801e526:	210c      	movs	r1, #12
 801e528:	000c      	movs	r4, r1
 801e52a:	2328      	movs	r3, #40	; 0x28
 801e52c:	469c      	mov	ip, r3
 801e52e:	44bc      	add	ip, r7
 801e530:	4461      	add	r1, ip
 801e532:	4b61      	ldr	r3, [pc, #388]	; (801e6b8 <rtc_getTimestampMsRaw+0x1a0>)
 801e534:	2200      	movs	r2, #0
 801e536:	0018      	movs	r0, r3
 801e538:	f7e7 fabc 	bl	8005ab4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 801e53c:	2308      	movs	r3, #8
 801e53e:	2028      	movs	r0, #40	; 0x28
 801e540:	183a      	adds	r2, r7, r0
 801e542:	18d1      	adds	r1, r2, r3
 801e544:	4b5c      	ldr	r3, [pc, #368]	; (801e6b8 <rtc_getTimestampMsRaw+0x1a0>)
 801e546:	2200      	movs	r2, #0
 801e548:	0018      	movs	r0, r3
 801e54a:	f7e7 fbbd 	bl	8005cc8 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 801e54e:	0021      	movs	r1, r4
 801e550:	2028      	movs	r0, #40	; 0x28
 801e552:	183b      	adds	r3, r7, r0
 801e554:	185b      	adds	r3, r3, r1
 801e556:	781b      	ldrb	r3, [r3, #0]
 801e558:	001a      	movs	r2, r3
 801e55a:	4b58      	ldr	r3, [pc, #352]	; (801e6bc <rtc_getTimestampMsRaw+0x1a4>)
 801e55c:	4353      	muls	r3, r2
 801e55e:	64bb      	str	r3, [r7, #72]	; 0x48
 801e560:	2300      	movs	r3, #0
 801e562:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 801e564:	183a      	adds	r2, r7, r0
 801e566:	1853      	adds	r3, r2, r1
 801e568:	785b      	ldrb	r3, [r3, #1]
 801e56a:	001a      	movs	r2, r3
 801e56c:	4b54      	ldr	r3, [pc, #336]	; (801e6c0 <rtc_getTimestampMsRaw+0x1a8>)
 801e56e:	4353      	muls	r3, r2
 801e570:	623b      	str	r3, [r7, #32]
 801e572:	2300      	movs	r3, #0
 801e574:	627b      	str	r3, [r7, #36]	; 0x24
 801e576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e578:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801e57a:	6a38      	ldr	r0, [r7, #32]
 801e57c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e57e:	181b      	adds	r3, r3, r0
 801e580:	414c      	adcs	r4, r1
 801e582:	64bb      	str	r3, [r7, #72]	; 0x48
 801e584:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 801e586:	210c      	movs	r1, #12
 801e588:	0008      	movs	r0, r1
 801e58a:	2328      	movs	r3, #40	; 0x28
 801e58c:	18fa      	adds	r2, r7, r3
 801e58e:	1853      	adds	r3, r2, r1
 801e590:	789b      	ldrb	r3, [r3, #2]
 801e592:	001a      	movs	r2, r3
 801e594:	0013      	movs	r3, r2
 801e596:	015b      	lsls	r3, r3, #5
 801e598:	1a9b      	subs	r3, r3, r2
 801e59a:	009b      	lsls	r3, r3, #2
 801e59c:	189b      	adds	r3, r3, r2
 801e59e:	00db      	lsls	r3, r3, #3
 801e5a0:	61bb      	str	r3, [r7, #24]
 801e5a2:	2300      	movs	r3, #0
 801e5a4:	61fb      	str	r3, [r7, #28]
 801e5a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e5a8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801e5aa:	69b9      	ldr	r1, [r7, #24]
 801e5ac:	69fa      	ldr	r2, [r7, #28]
 801e5ae:	185b      	adds	r3, r3, r1
 801e5b0:	4154      	adcs	r4, r2
 801e5b2:	64bb      	str	r3, [r7, #72]	; 0x48
 801e5b4:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 801e5b6:	0001      	movs	r1, r0
 801e5b8:	2028      	movs	r0, #40	; 0x28
 801e5ba:	183b      	adds	r3, r7, r0
 801e5bc:	185b      	adds	r3, r3, r1
 801e5be:	689a      	ldr	r2, [r3, #8]
 801e5c0:	183b      	adds	r3, r7, r0
 801e5c2:	185b      	adds	r3, r3, r1
 801e5c4:	685b      	ldr	r3, [r3, #4]
 801e5c6:	1ad2      	subs	r2, r2, r3
 801e5c8:	0013      	movs	r3, r2
 801e5ca:	015b      	lsls	r3, r3, #5
 801e5cc:	1a9b      	subs	r3, r3, r2
 801e5ce:	009b      	lsls	r3, r3, #2
 801e5d0:	189b      	adds	r3, r3, r2
 801e5d2:	00db      	lsls	r3, r3, #3
 801e5d4:	001a      	movs	r2, r3
 801e5d6:	183b      	adds	r3, r7, r0
 801e5d8:	185b      	adds	r3, r3, r1
 801e5da:	689b      	ldr	r3, [r3, #8]
 801e5dc:	0019      	movs	r1, r3
 801e5de:	0010      	movs	r0, r2
 801e5e0:	f7e1 fd9a 	bl	8000118 <__udivsi3>
 801e5e4:	0003      	movs	r3, r0
 801e5e6:	3301      	adds	r3, #1
 801e5e8:	613b      	str	r3, [r7, #16]
 801e5ea:	2300      	movs	r3, #0
 801e5ec:	617b      	str	r3, [r7, #20]
 801e5ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e5f0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801e5f2:	6939      	ldr	r1, [r7, #16]
 801e5f4:	697a      	ldr	r2, [r7, #20]
 801e5f6:	185b      	adds	r3, r3, r1
 801e5f8:	4154      	adcs	r4, r2
 801e5fa:	64bb      	str	r3, [r7, #72]	; 0x48
 801e5fc:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 801e5fe:	4b31      	ldr	r3, [pc, #196]	; (801e6c4 <rtc_getTimestampMsRaw+0x1ac>)
 801e600:	681b      	ldr	r3, [r3, #0]
 801e602:	001d      	movs	r5, r3
 801e604:	2300      	movs	r3, #0
 801e606:	001e      	movs	r6, r3
 801e608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e60a:	42b3      	cmp	r3, r6
 801e60c:	d305      	bcc.n	801e61a <rtc_getTimestampMsRaw+0x102>
 801e60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e610:	42b3      	cmp	r3, r6
 801e612:	d107      	bne.n	801e624 <rtc_getTimestampMsRaw+0x10c>
 801e614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e616:	42ab      	cmp	r3, r5
 801e618:	d204      	bcs.n	801e624 <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 801e61a:	4b2b      	ldr	r3, [pc, #172]	; (801e6c8 <rtc_getTimestampMsRaw+0x1b0>)
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	1c5a      	adds	r2, r3, #1
 801e620:	4b29      	ldr	r3, [pc, #164]	; (801e6c8 <rtc_getTimestampMsRaw+0x1b0>)
 801e622:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 801e624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e626:	4b27      	ldr	r3, [pc, #156]	; (801e6c4 <rtc_getTimestampMsRaw+0x1ac>)
 801e628:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 801e62a:	4b27      	ldr	r3, [pc, #156]	; (801e6c8 <rtc_getTimestampMsRaw+0x1b0>)
 801e62c:	681b      	ldr	r3, [r3, #0]
 801e62e:	60bb      	str	r3, [r7, #8]
 801e630:	2300      	movs	r3, #0
 801e632:	60fb      	str	r3, [r7, #12]
 801e634:	4a25      	ldr	r2, [pc, #148]	; (801e6cc <rtc_getTimestampMsRaw+0x1b4>)
 801e636:	2300      	movs	r3, #0
 801e638:	68b8      	ldr	r0, [r7, #8]
 801e63a:	68f9      	ldr	r1, [r7, #12]
 801e63c:	f7e1 ff64 	bl	8000508 <__aeabi_lmul>
 801e640:	0003      	movs	r3, r0
 801e642:	000c      	movs	r4, r1
 801e644:	0019      	movs	r1, r3
 801e646:	0022      	movs	r2, r4
 801e648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e64a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801e64c:	185b      	adds	r3, r3, r1
 801e64e:	4154      	adcs	r4, r2
 801e650:	64bb      	str	r3, [r7, #72]	; 0x48
 801e652:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 801e654:	232f      	movs	r3, #47	; 0x2f
 801e656:	18fb      	adds	r3, r7, r3
 801e658:	781b      	ldrb	r3, [r3, #0]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d024      	beq.n	801e6a8 <rtc_getTimestampMsRaw+0x190>
 801e65e:	4b1c      	ldr	r3, [pc, #112]	; (801e6d0 <rtc_getTimestampMsRaw+0x1b8>)
 801e660:	781b      	ldrb	r3, [r3, #0]
 801e662:	2b00      	cmp	r3, #0
 801e664:	d020      	beq.n	801e6a8 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 801e666:	4b1b      	ldr	r3, [pc, #108]	; (801e6d4 <rtc_getTimestampMsRaw+0x1bc>)
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	603b      	str	r3, [r7, #0]
 801e66c:	2300      	movs	r3, #0
 801e66e:	607b      	str	r3, [r7, #4]
 801e670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e674:	6838      	ldr	r0, [r7, #0]
 801e676:	6879      	ldr	r1, [r7, #4]
 801e678:	f7e1 ff46 	bl	8000508 <__aeabi_lmul>
 801e67c:	0003      	movs	r3, r0
 801e67e:	000c      	movs	r4, r1
 801e680:	0018      	movs	r0, r3
 801e682:	0021      	movs	r1, r4
 801e684:	22fa      	movs	r2, #250	; 0xfa
 801e686:	0092      	lsls	r2, r2, #2
 801e688:	2300      	movs	r3, #0
 801e68a:	f7e1 ff1d 	bl	80004c8 <__aeabi_uldivmod>
 801e68e:	0003      	movs	r3, r0
 801e690:	000c      	movs	r4, r1
 801e692:	64bb      	str	r3, [r7, #72]	; 0x48
 801e694:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 801e696:	4b10      	ldr	r3, [pc, #64]	; (801e6d8 <rtc_getTimestampMsRaw+0x1c0>)
 801e698:	685c      	ldr	r4, [r3, #4]
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801e69e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e6a0:	185b      	adds	r3, r3, r1
 801e6a2:	4154      	adcs	r4, r2
 801e6a4:	64bb      	str	r3, [r7, #72]	; 0x48
 801e6a6:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 801e6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e6aa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 801e6ac:	0018      	movs	r0, r3
 801e6ae:	0021      	movs	r1, r4
 801e6b0:	46bd      	mov	sp, r7
 801e6b2:	b015      	add	sp, #84	; 0x54
 801e6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6b6:	46c0      	nop			; (mov r8, r8)
 801e6b8:	2000120c 	.word	0x2000120c
 801e6bc:	0036ee80 	.word	0x0036ee80
 801e6c0:	0000ea60 	.word	0x0000ea60
 801e6c4:	20001164 	.word	0x20001164
 801e6c8:	20001160 	.word	0x20001160
 801e6cc:	05265c00 	.word	0x05265c00
 801e6d0:	2000115c 	.word	0x2000115c
 801e6d4:	20001618 	.word	0x20001618
 801e6d8:	20001620 	.word	0x20001620

0801e6dc <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 801e6dc:	b580      	push	{r7, lr}
 801e6de:	b086      	sub	sp, #24
 801e6e0:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 801e6e2:	2114      	movs	r1, #20
 801e6e4:	187b      	adds	r3, r7, r1
 801e6e6:	2200      	movs	r2, #0
 801e6e8:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 801e6ea:	187b      	adds	r3, r7, r1
 801e6ec:	2201      	movs	r2, #1
 801e6ee:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 801e6f0:	187b      	adds	r3, r7, r1
 801e6f2:	2201      	movs	r2, #1
 801e6f4:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 801e6f6:	1879      	adds	r1, r7, r1
 801e6f8:	4b11      	ldr	r3, [pc, #68]	; (801e740 <rtc_resetTime+0x64>)
 801e6fa:	2200      	movs	r2, #0
 801e6fc:	0018      	movs	r0, r3
 801e6fe:	f7e7 fa35 	bl	8005b6c <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 801e702:	003b      	movs	r3, r7
 801e704:	2200      	movs	r2, #0
 801e706:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 801e708:	003b      	movs	r3, r7
 801e70a:	2200      	movs	r2, #0
 801e70c:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 801e70e:	003b      	movs	r3, r7
 801e710:	2200      	movs	r2, #0
 801e712:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 801e714:	003b      	movs	r3, r7
 801e716:	2200      	movs	r2, #0
 801e718:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801e71a:	003b      	movs	r3, r7
 801e71c:	2200      	movs	r2, #0
 801e71e:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 801e720:	003b      	movs	r3, r7
 801e722:	2200      	movs	r2, #0
 801e724:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 801e726:	0039      	movs	r1, r7
 801e728:	4b05      	ldr	r3, [pc, #20]	; (801e740 <rtc_resetTime+0x64>)
 801e72a:	2200      	movs	r2, #0
 801e72c:	0018      	movs	r0, r3
 801e72e:	f7e7 f8fd 	bl	800592c <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 801e732:	4b04      	ldr	r3, [pc, #16]	; (801e744 <rtc_resetTime+0x68>)
 801e734:	2200      	movs	r2, #0
 801e736:	601a      	str	r2, [r3, #0]
}
 801e738:	46c0      	nop			; (mov r8, r8)
 801e73a:	46bd      	mov	sp, r7
 801e73c:	b006      	add	sp, #24
 801e73e:	bd80      	pop	{r7, pc}
 801e740:	2000120c 	.word	0x2000120c
 801e744:	20001164 	.word	0x20001164

0801e748 <rtc_prepareSleepTime>:

/**
 * Call before any sleep in case there is something to prepare with RTC
 * or others.
 */
void rtc_prepareSleepTime() {
 801e748:	b580      	push	{r7, lr}
 801e74a:	af00      	add	r7, sp, #0
	__enable_systick=false;
 801e74c:	4b05      	ldr	r3, [pc, #20]	; (801e764 <rtc_prepareSleepTime+0x1c>)
 801e74e:	2200      	movs	r2, #0
 801e750:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN2 );

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801e752:	4b05      	ldr	r3, [pc, #20]	; (801e768 <rtc_prepareSleepTime+0x20>)
 801e754:	681a      	ldr	r2, [r3, #0]
 801e756:	4b04      	ldr	r3, [pc, #16]	; (801e768 <rtc_prepareSleepTime+0x20>)
 801e758:	2104      	movs	r1, #4
 801e75a:	430a      	orrs	r2, r1
 801e75c:	601a      	str	r2, [r3, #0]
}
 801e75e:	46c0      	nop			; (mov r8, r8)
 801e760:	46bd      	mov	sp, r7
 801e762:	bd80      	pop	{r7, pc}
 801e764:	200000ad 	.word	0x200000ad
 801e768:	40007000 	.word	0x40007000

0801e76c <rtc_updateTimeAfterSleepTime>:


/**
 * Get the sleep duration based on RTC counter
 */
void rtc_updateTimeAfterSleepTime() {
 801e76c:	b5b0      	push	{r4, r5, r7, lr}
 801e76e:	af00      	add	r7, sp, #0

	itsdk_time_set_ms(rtc_getTimestampMs());
 801e770:	f7ff fec6 	bl	801e500 <rtc_getTimestampMs>
 801e774:	0003      	movs	r3, r0
 801e776:	000c      	movs	r4, r1
 801e778:	0018      	movs	r0, r3
 801e77a:	0021      	movs	r1, r4
 801e77c:	f7fe f96a 	bl	801ca54 <itsdk_time_set_ms>
	__enable_systick=true;
 801e780:	4b02      	ldr	r3, [pc, #8]	; (801e78c <rtc_updateTimeAfterSleepTime+0x20>)
 801e782:	2201      	movs	r2, #1
 801e784:	701a      	strb	r2, [r3, #0]
}
 801e786:	46c0      	nop			; (mov r8, r8)
 801e788:	46bd      	mov	sp, r7
 801e78a:	bdb0      	pop	{r4, r5, r7, pc}
 801e78c:	200000ad 	.word	0x200000ad

0801e790 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801e790:	b580      	push	{r7, lr}
 801e792:	b084      	sub	sp, #16
 801e794:	af00      	add	r7, sp, #0
 801e796:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 801e798:	4b0f      	ldr	r3, [pc, #60]	; (801e7d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 801e79a:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 801e79c:	e00c      	b.n	801e7b8 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 801e79e:	68fb      	ldr	r3, [r7, #12]
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 801e7a4:	68bb      	ldr	r3, [r7, #8]
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d003      	beq.n	801e7b2 <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 801e7aa:	687a      	ldr	r2, [r7, #4]
 801e7ac:	68bb      	ldr	r3, [r7, #8]
 801e7ae:	0010      	movs	r0, r2
 801e7b0:	4798      	blx	r3
		}
		c = c->next;
 801e7b2:	68fb      	ldr	r3, [r7, #12]
 801e7b4:	685b      	ldr	r3, [r3, #4]
 801e7b6:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d1ef      	bne.n	801e79e <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 801e7be:	4b07      	ldr	r3, [pc, #28]	; (801e7dc <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 801e7c0:	681a      	ldr	r2, [r3, #0]
 801e7c2:	4b06      	ldr	r3, [pc, #24]	; (801e7dc <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 801e7c4:	2104      	movs	r1, #4
 801e7c6:	430a      	orrs	r2, r1
 801e7c8:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 801e7ca:	4b05      	ldr	r3, [pc, #20]	; (801e7e0 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 801e7cc:	2200      	movs	r2, #0
 801e7ce:	701a      	strb	r2, [r3, #0]
}
 801e7d0:	46c0      	nop			; (mov r8, r8)
 801e7d2:	46bd      	mov	sp, r7
 801e7d4:	b004      	add	sp, #16
 801e7d6:	bd80      	pop	{r7, pc}
 801e7d8:	20001168 	.word	0x20001168
 801e7dc:	40007000 	.word	0x40007000
 801e7e0:	200000ac 	.word	0x200000ac

0801e7e4 <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 801e7e4:	b590      	push	{r4, r7, lr}
 801e7e6:	b083      	sub	sp, #12
 801e7e8:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 801e7ea:	f000 f825 	bl	801e838 <rtc_calcClockRatio>
 801e7ee:	0003      	movs	r3, r0
 801e7f0:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 801e7f2:	4b0e      	ldr	r3, [pc, #56]	; (801e82c <rtc_adjustTime+0x48>)
 801e7f4:	781b      	ldrb	r3, [r3, #0]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d009      	beq.n	801e80e <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 801e7fa:	f7ff fe81 	bl	801e500 <rtc_getTimestampMs>
 801e7fe:	0003      	movs	r3, r0
 801e800:	000c      	movs	r4, r1
 801e802:	4a0b      	ldr	r2, [pc, #44]	; (801e830 <rtc_adjustTime+0x4c>)
 801e804:	6013      	str	r3, [r2, #0]
 801e806:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 801e808:	f7ff ff68 	bl	801e6dc <rtc_resetTime>
 801e80c:	e004      	b.n	801e818 <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 801e80e:	4a08      	ldr	r2, [pc, #32]	; (801e830 <rtc_adjustTime+0x4c>)
 801e810:	2300      	movs	r3, #0
 801e812:	2400      	movs	r4, #0
 801e814:	6013      	str	r3, [r2, #0]
 801e816:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 801e818:	4b04      	ldr	r3, [pc, #16]	; (801e82c <rtc_adjustTime+0x48>)
 801e81a:	2201      	movs	r2, #1
 801e81c:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 801e81e:	4b05      	ldr	r3, [pc, #20]	; (801e834 <rtc_adjustTime+0x50>)
 801e820:	687a      	ldr	r2, [r7, #4]
 801e822:	601a      	str	r2, [r3, #0]
#endif
}
 801e824:	46c0      	nop			; (mov r8, r8)
 801e826:	46bd      	mov	sp, r7
 801e828:	b003      	add	sp, #12
 801e82a:	bd90      	pop	{r4, r7, pc}
 801e82c:	2000115c 	.word	0x2000115c
 801e830:	20001620 	.word	0x20001620
 801e834:	20001618 	.word	0x20001618

0801e838 <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 801e838:	b580      	push	{r7, lr}
 801e83a:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 801e83c:	23fa      	movs	r3, #250	; 0xfa
 801e83e:	009b      	lsls	r3, r3, #2
#endif
}
 801e840:	0018      	movs	r0, r3
 801e842:	46bd      	mov	sp, r7
 801e844:	bd80      	pop	{r7, pc}
	...

0801e848 <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 801e848:	b580      	push	{r7, lr}
 801e84a:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 801e84c:	4b10      	ldr	r3, [pc, #64]	; (801e890 <HAL_IncTick+0x48>)
 801e84e:	781b      	ldrb	r3, [r3, #0]
 801e850:	2b00      	cmp	r3, #0
 801e852:	d011      	beq.n	801e878 <HAL_IncTick+0x30>
 801e854:	4b0f      	ldr	r3, [pc, #60]	; (801e894 <HAL_IncTick+0x4c>)
 801e856:	681a      	ldr	r2, [r3, #0]
 801e858:	0013      	movs	r3, r2
 801e85a:	015b      	lsls	r3, r3, #5
 801e85c:	1a9b      	subs	r3, r3, r2
 801e85e:	009b      	lsls	r3, r3, #2
 801e860:	189b      	adds	r3, r3, r2
 801e862:	009b      	lsls	r3, r3, #2
 801e864:	001a      	movs	r2, r3
 801e866:	23fa      	movs	r3, #250	; 0xfa
 801e868:	0099      	lsls	r1, r3, #2
 801e86a:	0010      	movs	r0, r2
 801e86c:	f7e1 fc54 	bl	8000118 <__udivsi3>
 801e870:	0003      	movs	r3, r0
 801e872:	0018      	movs	r0, r3
 801e874:	f7fe f8a0 	bl	801c9b8 <itsdk_time_add_us>
	uwTick++;
 801e878:	4b07      	ldr	r3, [pc, #28]	; (801e898 <HAL_IncTick+0x50>)
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	1c5a      	adds	r2, r3, #1
 801e87e:	4b06      	ldr	r3, [pc, #24]	; (801e898 <HAL_IncTick+0x50>)
 801e880:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 801e882:	4b06      	ldr	r3, [pc, #24]	; (801e89c <HAL_IncTick+0x54>)
 801e884:	2202      	movs	r2, #2
 801e886:	701a      	strb	r2, [r3, #0]
}
 801e888:	46c0      	nop			; (mov r8, r8)
 801e88a:	46bd      	mov	sp, r7
 801e88c:	bd80      	pop	{r7, pc}
 801e88e:	46c0      	nop			; (mov r8, r8)
 801e890:	200000ad 	.word	0x200000ad
 801e894:	200000b0 	.word	0x200000b0
 801e898:	2000141c 	.word	0x2000141c
 801e89c:	200000ac 	.word	0x200000ac

0801e8a0 <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 801e8a0:	b590      	push	{r4, r7, lr}
 801e8a2:	b089      	sub	sp, #36	; 0x24
 801e8a4:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 801e8a6:	f7fe f921 	bl	801caec <itsdk_time_get_us>
 801e8aa:	22fa      	movs	r2, #250	; 0xfa
 801e8ac:	0092      	lsls	r2, r2, #2
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	f7e1 fe0a 	bl	80004c8 <__aeabi_uldivmod>
 801e8b4:	0003      	movs	r3, r0
 801e8b6:	000c      	movs	r4, r1
 801e8b8:	613b      	str	r3, [r7, #16]
 801e8ba:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 801e8bc:	2000      	movs	r0, #0
 801e8be:	f7ff fe2b 	bl	801e518 <rtc_getTimestampMsRaw>
 801e8c2:	0003      	movs	r3, r0
 801e8c4:	000c      	movs	r4, r1
 801e8c6:	60bb      	str	r3, [r7, #8]
 801e8c8:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 801e8ca:	46c0      	nop			; (mov r8, r8)
 801e8cc:	2000      	movs	r0, #0
 801e8ce:	f7ff fe23 	bl	801e518 <rtc_getTimestampMsRaw>
 801e8d2:	000a      	movs	r2, r1
 801e8d4:	0001      	movs	r1, r0
 801e8d6:	68bb      	ldr	r3, [r7, #8]
 801e8d8:	68fc      	ldr	r4, [r7, #12]
 801e8da:	1ac9      	subs	r1, r1, r3
 801e8dc:	41a2      	sbcs	r2, r4
 801e8de:	000b      	movs	r3, r1
 801e8e0:	0014      	movs	r4, r2
 801e8e2:	2c00      	cmp	r4, #0
 801e8e4:	d103      	bne.n	801e8ee <systick_adjustTime+0x4e>
 801e8e6:	d1f1      	bne.n	801e8cc <systick_adjustTime+0x2c>
 801e8e8:	2bc7      	cmp	r3, #199	; 0xc7
 801e8ea:	d800      	bhi.n	801e8ee <systick_adjustTime+0x4e>
 801e8ec:	e7ee      	b.n	801e8cc <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 801e8ee:	f7fe f8fd 	bl	801caec <itsdk_time_get_us>
 801e8f2:	22fa      	movs	r2, #250	; 0xfa
 801e8f4:	0092      	lsls	r2, r2, #2
 801e8f6:	2300      	movs	r3, #0
 801e8f8:	f7e1 fde6 	bl	80004c8 <__aeabi_uldivmod>
 801e8fc:	0003      	movs	r3, r0
 801e8fe:	000c      	movs	r4, r1
 801e900:	603b      	str	r3, [r7, #0]
 801e902:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 801e904:	6839      	ldr	r1, [r7, #0]
 801e906:	687a      	ldr	r2, [r7, #4]
 801e908:	693b      	ldr	r3, [r7, #16]
 801e90a:	697c      	ldr	r4, [r7, #20]
 801e90c:	1ac9      	subs	r1, r1, r3
 801e90e:	41a2      	sbcs	r2, r4
 801e910:	000b      	movs	r3, r1
 801e912:	0014      	movs	r4, r2
 801e914:	001a      	movs	r2, r3
 801e916:	0023      	movs	r3, r4
 801e918:	4818      	ldr	r0, [pc, #96]	; (801e97c <systick_adjustTime+0xdc>)
 801e91a:	2100      	movs	r1, #0
 801e91c:	f7e1 fdd4 	bl	80004c8 <__aeabi_uldivmod>
 801e920:	0003      	movs	r3, r0
 801e922:	000c      	movs	r4, r1
 801e924:	61bb      	str	r3, [r7, #24]
 801e926:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 801e928:	69fb      	ldr	r3, [r7, #28]
 801e92a:	2b00      	cmp	r3, #0
 801e92c:	d111      	bne.n	801e952 <systick_adjustTime+0xb2>
 801e92e:	69fb      	ldr	r3, [r7, #28]
 801e930:	2b00      	cmp	r3, #0
 801e932:	d104      	bne.n	801e93e <systick_adjustTime+0x9e>
 801e934:	69ba      	ldr	r2, [r7, #24]
 801e936:	23af      	movs	r3, #175	; 0xaf
 801e938:	00db      	lsls	r3, r3, #3
 801e93a:	429a      	cmp	r2, r3
 801e93c:	d809      	bhi.n	801e952 <systick_adjustTime+0xb2>
 801e93e:	69fb      	ldr	r3, [r7, #28]
 801e940:	2b00      	cmp	r3, #0
 801e942:	d113      	bne.n	801e96c <systick_adjustTime+0xcc>
 801e944:	69fb      	ldr	r3, [r7, #28]
 801e946:	2b00      	cmp	r3, #0
 801e948:	d103      	bne.n	801e952 <systick_adjustTime+0xb2>
 801e94a:	69bb      	ldr	r3, [r7, #24]
 801e94c:	4a0c      	ldr	r2, [pc, #48]	; (801e980 <systick_adjustTime+0xe0>)
 801e94e:	4293      	cmp	r3, r2
 801e950:	d80c      	bhi.n	801e96c <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 801e952:	69bb      	ldr	r3, [r7, #24]
 801e954:	69fc      	ldr	r4, [r7, #28]
 801e956:	b29b      	uxth	r3, r3
 801e958:	4a0a      	ldr	r2, [pc, #40]	; (801e984 <systick_adjustTime+0xe4>)
 801e95a:	0019      	movs	r1, r3
 801e95c:	0010      	movs	r0, r2
 801e95e:	f7fc fe39 	bl	801b5d4 <itsdk_error_report>
		ratio = 1000;
 801e962:	23fa      	movs	r3, #250	; 0xfa
 801e964:	009b      	lsls	r3, r3, #2
 801e966:	2400      	movs	r4, #0
 801e968:	61bb      	str	r3, [r7, #24]
 801e96a:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 801e96c:	69ba      	ldr	r2, [r7, #24]
 801e96e:	4b06      	ldr	r3, [pc, #24]	; (801e988 <systick_adjustTime+0xe8>)
 801e970:	601a      	str	r2, [r3, #0]
#endif
}
 801e972:	46c0      	nop			; (mov r8, r8)
 801e974:	46bd      	mov	sp, r7
 801e976:	b009      	add	sp, #36	; 0x24
 801e978:	bd90      	pop	{r4, r7, pc}
 801e97a:	46c0      	nop			; (mov r8, r8)
 801e97c:	00030d40 	.word	0x00030d40
 801e980:	00000257 	.word	0x00000257
 801e984:	90000061 	.word	0x90000061
 801e988:	200000b0 	.word	0x200000b0

0801e98c <spi_rwRegister>:
_SPI_Status spi_rwRegister(
		SPI_HandleTypeDef * spi,
		uint8_t	* toTransmit,
		uint8_t * toReceive,
		uint8_t   sizeToTransmit
) {
 801e98c:	b590      	push	{r4, r7, lr}
 801e98e:	b087      	sub	sp, #28
 801e990:	af02      	add	r7, sp, #8
 801e992:	60f8      	str	r0, [r7, #12]
 801e994:	60b9      	str	r1, [r7, #8]
 801e996:	607a      	str	r2, [r7, #4]
 801e998:	001a      	movs	r2, r3
 801e99a:	1cfb      	adds	r3, r7, #3
 801e99c:	701a      	strb	r2, [r3, #0]
	return (_SPI_Status)HAL_SPI_TransmitReceive(
 801e99e:	1cfb      	adds	r3, r7, #3
 801e9a0:	781b      	ldrb	r3, [r3, #0]
 801e9a2:	b29c      	uxth	r4, r3
 801e9a4:	687a      	ldr	r2, [r7, #4]
 801e9a6:	68b9      	ldr	r1, [r7, #8]
 801e9a8:	68f8      	ldr	r0, [r7, #12]
 801e9aa:	2364      	movs	r3, #100	; 0x64
 801e9ac:	9300      	str	r3, [sp, #0]
 801e9ae:	0023      	movs	r3, r4
 801e9b0:	f7e7 fdd6 	bl	8006560 <HAL_SPI_TransmitReceive>
 801e9b4:	0003      	movs	r3, r0
				toTransmit,
				toReceive,
				sizeToTransmit,
				ITSDK_SPI_TIMEOUT
		);
}
 801e9b6:	0018      	movs	r0, r3
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	b005      	add	sp, #20
 801e9bc:	bd90      	pop	{r4, r7, pc}

0801e9be <bcopy>:
 801e9be:	000b      	movs	r3, r1
 801e9c0:	b510      	push	{r4, lr}
 801e9c2:	0001      	movs	r1, r0
 801e9c4:	0018      	movs	r0, r3
 801e9c6:	f000 f83a 	bl	801ea3e <memmove>
 801e9ca:	bd10      	pop	{r4, pc}

0801e9cc <bzero>:
 801e9cc:	b510      	push	{r4, lr}
 801e9ce:	000a      	movs	r2, r1
 801e9d0:	2100      	movs	r1, #0
 801e9d2:	f000 f847 	bl	801ea64 <memset>
 801e9d6:	bd10      	pop	{r4, pc}

0801e9d8 <__errno>:
 801e9d8:	4b01      	ldr	r3, [pc, #4]	; (801e9e0 <__errno+0x8>)
 801e9da:	6818      	ldr	r0, [r3, #0]
 801e9dc:	4770      	bx	lr
 801e9de:	46c0      	nop			; (mov r8, r8)
 801e9e0:	200000b4 	.word	0x200000b4

0801e9e4 <__libc_init_array>:
 801e9e4:	b570      	push	{r4, r5, r6, lr}
 801e9e6:	2600      	movs	r6, #0
 801e9e8:	4d0c      	ldr	r5, [pc, #48]	; (801ea1c <__libc_init_array+0x38>)
 801e9ea:	4c0d      	ldr	r4, [pc, #52]	; (801ea20 <__libc_init_array+0x3c>)
 801e9ec:	1b64      	subs	r4, r4, r5
 801e9ee:	10a4      	asrs	r4, r4, #2
 801e9f0:	42a6      	cmp	r6, r4
 801e9f2:	d109      	bne.n	801ea08 <__libc_init_array+0x24>
 801e9f4:	2600      	movs	r6, #0
 801e9f6:	f000 fd8f 	bl	801f518 <_init>
 801e9fa:	4d0a      	ldr	r5, [pc, #40]	; (801ea24 <__libc_init_array+0x40>)
 801e9fc:	4c0a      	ldr	r4, [pc, #40]	; (801ea28 <__libc_init_array+0x44>)
 801e9fe:	1b64      	subs	r4, r4, r5
 801ea00:	10a4      	asrs	r4, r4, #2
 801ea02:	42a6      	cmp	r6, r4
 801ea04:	d105      	bne.n	801ea12 <__libc_init_array+0x2e>
 801ea06:	bd70      	pop	{r4, r5, r6, pc}
 801ea08:	00b3      	lsls	r3, r6, #2
 801ea0a:	58eb      	ldr	r3, [r5, r3]
 801ea0c:	4798      	blx	r3
 801ea0e:	3601      	adds	r6, #1
 801ea10:	e7ee      	b.n	801e9f0 <__libc_init_array+0xc>
 801ea12:	00b3      	lsls	r3, r6, #2
 801ea14:	58eb      	ldr	r3, [r5, r3]
 801ea16:	4798      	blx	r3
 801ea18:	3601      	adds	r6, #1
 801ea1a:	e7f2      	b.n	801ea02 <__libc_init_array+0x1e>
 801ea1c:	08021348 	.word	0x08021348
 801ea20:	08021348 	.word	0x08021348
 801ea24:	08021348 	.word	0x08021348
 801ea28:	0802134c 	.word	0x0802134c

0801ea2c <memcpy>:
 801ea2c:	2300      	movs	r3, #0
 801ea2e:	b510      	push	{r4, lr}
 801ea30:	429a      	cmp	r2, r3
 801ea32:	d100      	bne.n	801ea36 <memcpy+0xa>
 801ea34:	bd10      	pop	{r4, pc}
 801ea36:	5ccc      	ldrb	r4, [r1, r3]
 801ea38:	54c4      	strb	r4, [r0, r3]
 801ea3a:	3301      	adds	r3, #1
 801ea3c:	e7f8      	b.n	801ea30 <memcpy+0x4>

0801ea3e <memmove>:
 801ea3e:	b510      	push	{r4, lr}
 801ea40:	4288      	cmp	r0, r1
 801ea42:	d902      	bls.n	801ea4a <memmove+0xc>
 801ea44:	188b      	adds	r3, r1, r2
 801ea46:	4298      	cmp	r0, r3
 801ea48:	d303      	bcc.n	801ea52 <memmove+0x14>
 801ea4a:	2300      	movs	r3, #0
 801ea4c:	e007      	b.n	801ea5e <memmove+0x20>
 801ea4e:	5c8b      	ldrb	r3, [r1, r2]
 801ea50:	5483      	strb	r3, [r0, r2]
 801ea52:	3a01      	subs	r2, #1
 801ea54:	d2fb      	bcs.n	801ea4e <memmove+0x10>
 801ea56:	bd10      	pop	{r4, pc}
 801ea58:	5ccc      	ldrb	r4, [r1, r3]
 801ea5a:	54c4      	strb	r4, [r0, r3]
 801ea5c:	3301      	adds	r3, #1
 801ea5e:	429a      	cmp	r2, r3
 801ea60:	d1fa      	bne.n	801ea58 <memmove+0x1a>
 801ea62:	e7f8      	b.n	801ea56 <memmove+0x18>

0801ea64 <memset>:
 801ea64:	0003      	movs	r3, r0
 801ea66:	1812      	adds	r2, r2, r0
 801ea68:	4293      	cmp	r3, r2
 801ea6a:	d100      	bne.n	801ea6e <memset+0xa>
 801ea6c:	4770      	bx	lr
 801ea6e:	7019      	strb	r1, [r3, #0]
 801ea70:	3301      	adds	r3, #1
 801ea72:	e7f9      	b.n	801ea68 <memset+0x4>

0801ea74 <_vsniprintf_r>:
 801ea74:	b530      	push	{r4, r5, lr}
 801ea76:	0014      	movs	r4, r2
 801ea78:	b09b      	sub	sp, #108	; 0x6c
 801ea7a:	0005      	movs	r5, r0
 801ea7c:	001a      	movs	r2, r3
 801ea7e:	2c00      	cmp	r4, #0
 801ea80:	da05      	bge.n	801ea8e <_vsniprintf_r+0x1a>
 801ea82:	238b      	movs	r3, #139	; 0x8b
 801ea84:	6003      	str	r3, [r0, #0]
 801ea86:	2001      	movs	r0, #1
 801ea88:	4240      	negs	r0, r0
 801ea8a:	b01b      	add	sp, #108	; 0x6c
 801ea8c:	bd30      	pop	{r4, r5, pc}
 801ea8e:	2382      	movs	r3, #130	; 0x82
 801ea90:	4668      	mov	r0, sp
 801ea92:	009b      	lsls	r3, r3, #2
 801ea94:	8183      	strh	r3, [r0, #12]
 801ea96:	2300      	movs	r3, #0
 801ea98:	9100      	str	r1, [sp, #0]
 801ea9a:	9104      	str	r1, [sp, #16]
 801ea9c:	429c      	cmp	r4, r3
 801ea9e:	d000      	beq.n	801eaa2 <_vsniprintf_r+0x2e>
 801eaa0:	1e63      	subs	r3, r4, #1
 801eaa2:	9302      	str	r3, [sp, #8]
 801eaa4:	9305      	str	r3, [sp, #20]
 801eaa6:	2301      	movs	r3, #1
 801eaa8:	4669      	mov	r1, sp
 801eaaa:	425b      	negs	r3, r3
 801eaac:	81cb      	strh	r3, [r1, #14]
 801eaae:	0028      	movs	r0, r5
 801eab0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801eab2:	f000 f879 	bl	801eba8 <_svfiprintf_r>
 801eab6:	1c43      	adds	r3, r0, #1
 801eab8:	da01      	bge.n	801eabe <_vsniprintf_r+0x4a>
 801eaba:	238b      	movs	r3, #139	; 0x8b
 801eabc:	602b      	str	r3, [r5, #0]
 801eabe:	2c00      	cmp	r4, #0
 801eac0:	d0e3      	beq.n	801ea8a <_vsniprintf_r+0x16>
 801eac2:	2300      	movs	r3, #0
 801eac4:	9a00      	ldr	r2, [sp, #0]
 801eac6:	7013      	strb	r3, [r2, #0]
 801eac8:	e7df      	b.n	801ea8a <_vsniprintf_r+0x16>
	...

0801eacc <vsniprintf>:
 801eacc:	b507      	push	{r0, r1, r2, lr}
 801eace:	9300      	str	r3, [sp, #0]
 801ead0:	0013      	movs	r3, r2
 801ead2:	000a      	movs	r2, r1
 801ead4:	0001      	movs	r1, r0
 801ead6:	4802      	ldr	r0, [pc, #8]	; (801eae0 <vsniprintf+0x14>)
 801ead8:	6800      	ldr	r0, [r0, #0]
 801eada:	f7ff ffcb 	bl	801ea74 <_vsniprintf_r>
 801eade:	bd0e      	pop	{r1, r2, r3, pc}
 801eae0:	200000b4 	.word	0x200000b4

0801eae4 <__ssputs_r>:
 801eae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eae6:	688e      	ldr	r6, [r1, #8]
 801eae8:	b085      	sub	sp, #20
 801eaea:	0007      	movs	r7, r0
 801eaec:	000c      	movs	r4, r1
 801eaee:	9203      	str	r2, [sp, #12]
 801eaf0:	9301      	str	r3, [sp, #4]
 801eaf2:	429e      	cmp	r6, r3
 801eaf4:	d83c      	bhi.n	801eb70 <__ssputs_r+0x8c>
 801eaf6:	2390      	movs	r3, #144	; 0x90
 801eaf8:	898a      	ldrh	r2, [r1, #12]
 801eafa:	00db      	lsls	r3, r3, #3
 801eafc:	421a      	tst	r2, r3
 801eafe:	d034      	beq.n	801eb6a <__ssputs_r+0x86>
 801eb00:	2503      	movs	r5, #3
 801eb02:	6909      	ldr	r1, [r1, #16]
 801eb04:	6823      	ldr	r3, [r4, #0]
 801eb06:	1a5b      	subs	r3, r3, r1
 801eb08:	9302      	str	r3, [sp, #8]
 801eb0a:	6963      	ldr	r3, [r4, #20]
 801eb0c:	9802      	ldr	r0, [sp, #8]
 801eb0e:	435d      	muls	r5, r3
 801eb10:	0feb      	lsrs	r3, r5, #31
 801eb12:	195d      	adds	r5, r3, r5
 801eb14:	9b01      	ldr	r3, [sp, #4]
 801eb16:	106d      	asrs	r5, r5, #1
 801eb18:	3301      	adds	r3, #1
 801eb1a:	181b      	adds	r3, r3, r0
 801eb1c:	42ab      	cmp	r3, r5
 801eb1e:	d900      	bls.n	801eb22 <__ssputs_r+0x3e>
 801eb20:	001d      	movs	r5, r3
 801eb22:	0553      	lsls	r3, r2, #21
 801eb24:	d532      	bpl.n	801eb8c <__ssputs_r+0xa8>
 801eb26:	0029      	movs	r1, r5
 801eb28:	0038      	movs	r0, r7
 801eb2a:	f000 fb07 	bl	801f13c <_malloc_r>
 801eb2e:	1e06      	subs	r6, r0, #0
 801eb30:	d109      	bne.n	801eb46 <__ssputs_r+0x62>
 801eb32:	230c      	movs	r3, #12
 801eb34:	603b      	str	r3, [r7, #0]
 801eb36:	2340      	movs	r3, #64	; 0x40
 801eb38:	2001      	movs	r0, #1
 801eb3a:	89a2      	ldrh	r2, [r4, #12]
 801eb3c:	4240      	negs	r0, r0
 801eb3e:	4313      	orrs	r3, r2
 801eb40:	81a3      	strh	r3, [r4, #12]
 801eb42:	b005      	add	sp, #20
 801eb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb46:	9a02      	ldr	r2, [sp, #8]
 801eb48:	6921      	ldr	r1, [r4, #16]
 801eb4a:	f7ff ff6f 	bl	801ea2c <memcpy>
 801eb4e:	89a3      	ldrh	r3, [r4, #12]
 801eb50:	4a14      	ldr	r2, [pc, #80]	; (801eba4 <__ssputs_r+0xc0>)
 801eb52:	401a      	ands	r2, r3
 801eb54:	2380      	movs	r3, #128	; 0x80
 801eb56:	4313      	orrs	r3, r2
 801eb58:	81a3      	strh	r3, [r4, #12]
 801eb5a:	9b02      	ldr	r3, [sp, #8]
 801eb5c:	6126      	str	r6, [r4, #16]
 801eb5e:	18f6      	adds	r6, r6, r3
 801eb60:	6026      	str	r6, [r4, #0]
 801eb62:	6165      	str	r5, [r4, #20]
 801eb64:	9e01      	ldr	r6, [sp, #4]
 801eb66:	1aed      	subs	r5, r5, r3
 801eb68:	60a5      	str	r5, [r4, #8]
 801eb6a:	9b01      	ldr	r3, [sp, #4]
 801eb6c:	429e      	cmp	r6, r3
 801eb6e:	d900      	bls.n	801eb72 <__ssputs_r+0x8e>
 801eb70:	9e01      	ldr	r6, [sp, #4]
 801eb72:	0032      	movs	r2, r6
 801eb74:	9903      	ldr	r1, [sp, #12]
 801eb76:	6820      	ldr	r0, [r4, #0]
 801eb78:	f7ff ff61 	bl	801ea3e <memmove>
 801eb7c:	68a3      	ldr	r3, [r4, #8]
 801eb7e:	2000      	movs	r0, #0
 801eb80:	1b9b      	subs	r3, r3, r6
 801eb82:	60a3      	str	r3, [r4, #8]
 801eb84:	6823      	ldr	r3, [r4, #0]
 801eb86:	199e      	adds	r6, r3, r6
 801eb88:	6026      	str	r6, [r4, #0]
 801eb8a:	e7da      	b.n	801eb42 <__ssputs_r+0x5e>
 801eb8c:	002a      	movs	r2, r5
 801eb8e:	0038      	movs	r0, r7
 801eb90:	f000 fb32 	bl	801f1f8 <_realloc_r>
 801eb94:	1e06      	subs	r6, r0, #0
 801eb96:	d1e0      	bne.n	801eb5a <__ssputs_r+0x76>
 801eb98:	6921      	ldr	r1, [r4, #16]
 801eb9a:	0038      	movs	r0, r7
 801eb9c:	f000 fa84 	bl	801f0a8 <_free_r>
 801eba0:	e7c7      	b.n	801eb32 <__ssputs_r+0x4e>
 801eba2:	46c0      	nop			; (mov r8, r8)
 801eba4:	fffffb7f 	.word	0xfffffb7f

0801eba8 <_svfiprintf_r>:
 801eba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebaa:	b0a1      	sub	sp, #132	; 0x84
 801ebac:	9003      	str	r0, [sp, #12]
 801ebae:	001d      	movs	r5, r3
 801ebb0:	898b      	ldrh	r3, [r1, #12]
 801ebb2:	000f      	movs	r7, r1
 801ebb4:	0016      	movs	r6, r2
 801ebb6:	061b      	lsls	r3, r3, #24
 801ebb8:	d511      	bpl.n	801ebde <_svfiprintf_r+0x36>
 801ebba:	690b      	ldr	r3, [r1, #16]
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	d10e      	bne.n	801ebde <_svfiprintf_r+0x36>
 801ebc0:	2140      	movs	r1, #64	; 0x40
 801ebc2:	f000 fabb 	bl	801f13c <_malloc_r>
 801ebc6:	6038      	str	r0, [r7, #0]
 801ebc8:	6138      	str	r0, [r7, #16]
 801ebca:	2800      	cmp	r0, #0
 801ebcc:	d105      	bne.n	801ebda <_svfiprintf_r+0x32>
 801ebce:	230c      	movs	r3, #12
 801ebd0:	9a03      	ldr	r2, [sp, #12]
 801ebd2:	3801      	subs	r0, #1
 801ebd4:	6013      	str	r3, [r2, #0]
 801ebd6:	b021      	add	sp, #132	; 0x84
 801ebd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebda:	2340      	movs	r3, #64	; 0x40
 801ebdc:	617b      	str	r3, [r7, #20]
 801ebde:	2300      	movs	r3, #0
 801ebe0:	ac08      	add	r4, sp, #32
 801ebe2:	6163      	str	r3, [r4, #20]
 801ebe4:	3320      	adds	r3, #32
 801ebe6:	7663      	strb	r3, [r4, #25]
 801ebe8:	3310      	adds	r3, #16
 801ebea:	76a3      	strb	r3, [r4, #26]
 801ebec:	9507      	str	r5, [sp, #28]
 801ebee:	0035      	movs	r5, r6
 801ebf0:	782b      	ldrb	r3, [r5, #0]
 801ebf2:	2b00      	cmp	r3, #0
 801ebf4:	d001      	beq.n	801ebfa <_svfiprintf_r+0x52>
 801ebf6:	2b25      	cmp	r3, #37	; 0x25
 801ebf8:	d146      	bne.n	801ec88 <_svfiprintf_r+0xe0>
 801ebfa:	1bab      	subs	r3, r5, r6
 801ebfc:	9305      	str	r3, [sp, #20]
 801ebfe:	d00c      	beq.n	801ec1a <_svfiprintf_r+0x72>
 801ec00:	0032      	movs	r2, r6
 801ec02:	0039      	movs	r1, r7
 801ec04:	9803      	ldr	r0, [sp, #12]
 801ec06:	f7ff ff6d 	bl	801eae4 <__ssputs_r>
 801ec0a:	1c43      	adds	r3, r0, #1
 801ec0c:	d100      	bne.n	801ec10 <_svfiprintf_r+0x68>
 801ec0e:	e0ae      	b.n	801ed6e <_svfiprintf_r+0x1c6>
 801ec10:	6962      	ldr	r2, [r4, #20]
 801ec12:	9b05      	ldr	r3, [sp, #20]
 801ec14:	4694      	mov	ip, r2
 801ec16:	4463      	add	r3, ip
 801ec18:	6163      	str	r3, [r4, #20]
 801ec1a:	782b      	ldrb	r3, [r5, #0]
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	d100      	bne.n	801ec22 <_svfiprintf_r+0x7a>
 801ec20:	e0a5      	b.n	801ed6e <_svfiprintf_r+0x1c6>
 801ec22:	2201      	movs	r2, #1
 801ec24:	2300      	movs	r3, #0
 801ec26:	4252      	negs	r2, r2
 801ec28:	6062      	str	r2, [r4, #4]
 801ec2a:	a904      	add	r1, sp, #16
 801ec2c:	3254      	adds	r2, #84	; 0x54
 801ec2e:	1852      	adds	r2, r2, r1
 801ec30:	1c6e      	adds	r6, r5, #1
 801ec32:	6023      	str	r3, [r4, #0]
 801ec34:	60e3      	str	r3, [r4, #12]
 801ec36:	60a3      	str	r3, [r4, #8]
 801ec38:	7013      	strb	r3, [r2, #0]
 801ec3a:	65a3      	str	r3, [r4, #88]	; 0x58
 801ec3c:	7831      	ldrb	r1, [r6, #0]
 801ec3e:	2205      	movs	r2, #5
 801ec40:	4853      	ldr	r0, [pc, #332]	; (801ed90 <_svfiprintf_r+0x1e8>)
 801ec42:	f000 fa25 	bl	801f090 <memchr>
 801ec46:	1c75      	adds	r5, r6, #1
 801ec48:	2800      	cmp	r0, #0
 801ec4a:	d11f      	bne.n	801ec8c <_svfiprintf_r+0xe4>
 801ec4c:	6822      	ldr	r2, [r4, #0]
 801ec4e:	06d3      	lsls	r3, r2, #27
 801ec50:	d504      	bpl.n	801ec5c <_svfiprintf_r+0xb4>
 801ec52:	2353      	movs	r3, #83	; 0x53
 801ec54:	a904      	add	r1, sp, #16
 801ec56:	185b      	adds	r3, r3, r1
 801ec58:	2120      	movs	r1, #32
 801ec5a:	7019      	strb	r1, [r3, #0]
 801ec5c:	0713      	lsls	r3, r2, #28
 801ec5e:	d504      	bpl.n	801ec6a <_svfiprintf_r+0xc2>
 801ec60:	2353      	movs	r3, #83	; 0x53
 801ec62:	a904      	add	r1, sp, #16
 801ec64:	185b      	adds	r3, r3, r1
 801ec66:	212b      	movs	r1, #43	; 0x2b
 801ec68:	7019      	strb	r1, [r3, #0]
 801ec6a:	7833      	ldrb	r3, [r6, #0]
 801ec6c:	2b2a      	cmp	r3, #42	; 0x2a
 801ec6e:	d016      	beq.n	801ec9e <_svfiprintf_r+0xf6>
 801ec70:	0035      	movs	r5, r6
 801ec72:	2100      	movs	r1, #0
 801ec74:	200a      	movs	r0, #10
 801ec76:	68e3      	ldr	r3, [r4, #12]
 801ec78:	782a      	ldrb	r2, [r5, #0]
 801ec7a:	1c6e      	adds	r6, r5, #1
 801ec7c:	3a30      	subs	r2, #48	; 0x30
 801ec7e:	2a09      	cmp	r2, #9
 801ec80:	d94e      	bls.n	801ed20 <_svfiprintf_r+0x178>
 801ec82:	2900      	cmp	r1, #0
 801ec84:	d018      	beq.n	801ecb8 <_svfiprintf_r+0x110>
 801ec86:	e010      	b.n	801ecaa <_svfiprintf_r+0x102>
 801ec88:	3501      	adds	r5, #1
 801ec8a:	e7b1      	b.n	801ebf0 <_svfiprintf_r+0x48>
 801ec8c:	4b40      	ldr	r3, [pc, #256]	; (801ed90 <_svfiprintf_r+0x1e8>)
 801ec8e:	6822      	ldr	r2, [r4, #0]
 801ec90:	1ac0      	subs	r0, r0, r3
 801ec92:	2301      	movs	r3, #1
 801ec94:	4083      	lsls	r3, r0
 801ec96:	4313      	orrs	r3, r2
 801ec98:	6023      	str	r3, [r4, #0]
 801ec9a:	002e      	movs	r6, r5
 801ec9c:	e7ce      	b.n	801ec3c <_svfiprintf_r+0x94>
 801ec9e:	9b07      	ldr	r3, [sp, #28]
 801eca0:	1d19      	adds	r1, r3, #4
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	9107      	str	r1, [sp, #28]
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	db01      	blt.n	801ecae <_svfiprintf_r+0x106>
 801ecaa:	930b      	str	r3, [sp, #44]	; 0x2c
 801ecac:	e004      	b.n	801ecb8 <_svfiprintf_r+0x110>
 801ecae:	425b      	negs	r3, r3
 801ecb0:	60e3      	str	r3, [r4, #12]
 801ecb2:	2302      	movs	r3, #2
 801ecb4:	4313      	orrs	r3, r2
 801ecb6:	6023      	str	r3, [r4, #0]
 801ecb8:	782b      	ldrb	r3, [r5, #0]
 801ecba:	2b2e      	cmp	r3, #46	; 0x2e
 801ecbc:	d10a      	bne.n	801ecd4 <_svfiprintf_r+0x12c>
 801ecbe:	786b      	ldrb	r3, [r5, #1]
 801ecc0:	2b2a      	cmp	r3, #42	; 0x2a
 801ecc2:	d135      	bne.n	801ed30 <_svfiprintf_r+0x188>
 801ecc4:	9b07      	ldr	r3, [sp, #28]
 801ecc6:	3502      	adds	r5, #2
 801ecc8:	1d1a      	adds	r2, r3, #4
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	9207      	str	r2, [sp, #28]
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	db2b      	blt.n	801ed2a <_svfiprintf_r+0x182>
 801ecd2:	9309      	str	r3, [sp, #36]	; 0x24
 801ecd4:	4e2f      	ldr	r6, [pc, #188]	; (801ed94 <_svfiprintf_r+0x1ec>)
 801ecd6:	7829      	ldrb	r1, [r5, #0]
 801ecd8:	2203      	movs	r2, #3
 801ecda:	0030      	movs	r0, r6
 801ecdc:	f000 f9d8 	bl	801f090 <memchr>
 801ece0:	2800      	cmp	r0, #0
 801ece2:	d006      	beq.n	801ecf2 <_svfiprintf_r+0x14a>
 801ece4:	2340      	movs	r3, #64	; 0x40
 801ece6:	1b80      	subs	r0, r0, r6
 801ece8:	4083      	lsls	r3, r0
 801ecea:	6822      	ldr	r2, [r4, #0]
 801ecec:	3501      	adds	r5, #1
 801ecee:	4313      	orrs	r3, r2
 801ecf0:	6023      	str	r3, [r4, #0]
 801ecf2:	7829      	ldrb	r1, [r5, #0]
 801ecf4:	2206      	movs	r2, #6
 801ecf6:	4828      	ldr	r0, [pc, #160]	; (801ed98 <_svfiprintf_r+0x1f0>)
 801ecf8:	1c6e      	adds	r6, r5, #1
 801ecfa:	7621      	strb	r1, [r4, #24]
 801ecfc:	f000 f9c8 	bl	801f090 <memchr>
 801ed00:	2800      	cmp	r0, #0
 801ed02:	d03c      	beq.n	801ed7e <_svfiprintf_r+0x1d6>
 801ed04:	4b25      	ldr	r3, [pc, #148]	; (801ed9c <_svfiprintf_r+0x1f4>)
 801ed06:	2b00      	cmp	r3, #0
 801ed08:	d125      	bne.n	801ed56 <_svfiprintf_r+0x1ae>
 801ed0a:	2207      	movs	r2, #7
 801ed0c:	9b07      	ldr	r3, [sp, #28]
 801ed0e:	3307      	adds	r3, #7
 801ed10:	4393      	bics	r3, r2
 801ed12:	3308      	adds	r3, #8
 801ed14:	9307      	str	r3, [sp, #28]
 801ed16:	6963      	ldr	r3, [r4, #20]
 801ed18:	9a04      	ldr	r2, [sp, #16]
 801ed1a:	189b      	adds	r3, r3, r2
 801ed1c:	6163      	str	r3, [r4, #20]
 801ed1e:	e766      	b.n	801ebee <_svfiprintf_r+0x46>
 801ed20:	4343      	muls	r3, r0
 801ed22:	2101      	movs	r1, #1
 801ed24:	189b      	adds	r3, r3, r2
 801ed26:	0035      	movs	r5, r6
 801ed28:	e7a6      	b.n	801ec78 <_svfiprintf_r+0xd0>
 801ed2a:	2301      	movs	r3, #1
 801ed2c:	425b      	negs	r3, r3
 801ed2e:	e7d0      	b.n	801ecd2 <_svfiprintf_r+0x12a>
 801ed30:	2300      	movs	r3, #0
 801ed32:	200a      	movs	r0, #10
 801ed34:	001a      	movs	r2, r3
 801ed36:	3501      	adds	r5, #1
 801ed38:	6063      	str	r3, [r4, #4]
 801ed3a:	7829      	ldrb	r1, [r5, #0]
 801ed3c:	1c6e      	adds	r6, r5, #1
 801ed3e:	3930      	subs	r1, #48	; 0x30
 801ed40:	2909      	cmp	r1, #9
 801ed42:	d903      	bls.n	801ed4c <_svfiprintf_r+0x1a4>
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d0c5      	beq.n	801ecd4 <_svfiprintf_r+0x12c>
 801ed48:	9209      	str	r2, [sp, #36]	; 0x24
 801ed4a:	e7c3      	b.n	801ecd4 <_svfiprintf_r+0x12c>
 801ed4c:	4342      	muls	r2, r0
 801ed4e:	2301      	movs	r3, #1
 801ed50:	1852      	adds	r2, r2, r1
 801ed52:	0035      	movs	r5, r6
 801ed54:	e7f1      	b.n	801ed3a <_svfiprintf_r+0x192>
 801ed56:	ab07      	add	r3, sp, #28
 801ed58:	9300      	str	r3, [sp, #0]
 801ed5a:	003a      	movs	r2, r7
 801ed5c:	4b10      	ldr	r3, [pc, #64]	; (801eda0 <_svfiprintf_r+0x1f8>)
 801ed5e:	0021      	movs	r1, r4
 801ed60:	9803      	ldr	r0, [sp, #12]
 801ed62:	e000      	b.n	801ed66 <_svfiprintf_r+0x1be>
 801ed64:	bf00      	nop
 801ed66:	9004      	str	r0, [sp, #16]
 801ed68:	9b04      	ldr	r3, [sp, #16]
 801ed6a:	3301      	adds	r3, #1
 801ed6c:	d1d3      	bne.n	801ed16 <_svfiprintf_r+0x16e>
 801ed6e:	89bb      	ldrh	r3, [r7, #12]
 801ed70:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ed72:	065b      	lsls	r3, r3, #25
 801ed74:	d400      	bmi.n	801ed78 <_svfiprintf_r+0x1d0>
 801ed76:	e72e      	b.n	801ebd6 <_svfiprintf_r+0x2e>
 801ed78:	2001      	movs	r0, #1
 801ed7a:	4240      	negs	r0, r0
 801ed7c:	e72b      	b.n	801ebd6 <_svfiprintf_r+0x2e>
 801ed7e:	ab07      	add	r3, sp, #28
 801ed80:	9300      	str	r3, [sp, #0]
 801ed82:	003a      	movs	r2, r7
 801ed84:	4b06      	ldr	r3, [pc, #24]	; (801eda0 <_svfiprintf_r+0x1f8>)
 801ed86:	0021      	movs	r1, r4
 801ed88:	9803      	ldr	r0, [sp, #12]
 801ed8a:	f000 f879 	bl	801ee80 <_printf_i>
 801ed8e:	e7ea      	b.n	801ed66 <_svfiprintf_r+0x1be>
 801ed90:	0802130c 	.word	0x0802130c
 801ed94:	08021312 	.word	0x08021312
 801ed98:	08021316 	.word	0x08021316
 801ed9c:	00000000 	.word	0x00000000
 801eda0:	0801eae5 	.word	0x0801eae5

0801eda4 <_printf_common>:
 801eda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eda6:	0015      	movs	r5, r2
 801eda8:	9301      	str	r3, [sp, #4]
 801edaa:	688a      	ldr	r2, [r1, #8]
 801edac:	690b      	ldr	r3, [r1, #16]
 801edae:	9000      	str	r0, [sp, #0]
 801edb0:	000c      	movs	r4, r1
 801edb2:	4293      	cmp	r3, r2
 801edb4:	da00      	bge.n	801edb8 <_printf_common+0x14>
 801edb6:	0013      	movs	r3, r2
 801edb8:	0022      	movs	r2, r4
 801edba:	602b      	str	r3, [r5, #0]
 801edbc:	3243      	adds	r2, #67	; 0x43
 801edbe:	7812      	ldrb	r2, [r2, #0]
 801edc0:	2a00      	cmp	r2, #0
 801edc2:	d001      	beq.n	801edc8 <_printf_common+0x24>
 801edc4:	3301      	adds	r3, #1
 801edc6:	602b      	str	r3, [r5, #0]
 801edc8:	6823      	ldr	r3, [r4, #0]
 801edca:	069b      	lsls	r3, r3, #26
 801edcc:	d502      	bpl.n	801edd4 <_printf_common+0x30>
 801edce:	682b      	ldr	r3, [r5, #0]
 801edd0:	3302      	adds	r3, #2
 801edd2:	602b      	str	r3, [r5, #0]
 801edd4:	2706      	movs	r7, #6
 801edd6:	6823      	ldr	r3, [r4, #0]
 801edd8:	401f      	ands	r7, r3
 801edda:	d027      	beq.n	801ee2c <_printf_common+0x88>
 801eddc:	0023      	movs	r3, r4
 801edde:	3343      	adds	r3, #67	; 0x43
 801ede0:	781b      	ldrb	r3, [r3, #0]
 801ede2:	1e5a      	subs	r2, r3, #1
 801ede4:	4193      	sbcs	r3, r2
 801ede6:	6822      	ldr	r2, [r4, #0]
 801ede8:	0692      	lsls	r2, r2, #26
 801edea:	d430      	bmi.n	801ee4e <_printf_common+0xaa>
 801edec:	0022      	movs	r2, r4
 801edee:	9901      	ldr	r1, [sp, #4]
 801edf0:	3243      	adds	r2, #67	; 0x43
 801edf2:	9800      	ldr	r0, [sp, #0]
 801edf4:	9e08      	ldr	r6, [sp, #32]
 801edf6:	47b0      	blx	r6
 801edf8:	1c43      	adds	r3, r0, #1
 801edfa:	d025      	beq.n	801ee48 <_printf_common+0xa4>
 801edfc:	2306      	movs	r3, #6
 801edfe:	6820      	ldr	r0, [r4, #0]
 801ee00:	682a      	ldr	r2, [r5, #0]
 801ee02:	68e1      	ldr	r1, [r4, #12]
 801ee04:	4003      	ands	r3, r0
 801ee06:	2500      	movs	r5, #0
 801ee08:	2b04      	cmp	r3, #4
 801ee0a:	d103      	bne.n	801ee14 <_printf_common+0x70>
 801ee0c:	1a8d      	subs	r5, r1, r2
 801ee0e:	43eb      	mvns	r3, r5
 801ee10:	17db      	asrs	r3, r3, #31
 801ee12:	401d      	ands	r5, r3
 801ee14:	68a3      	ldr	r3, [r4, #8]
 801ee16:	6922      	ldr	r2, [r4, #16]
 801ee18:	4293      	cmp	r3, r2
 801ee1a:	dd01      	ble.n	801ee20 <_printf_common+0x7c>
 801ee1c:	1a9b      	subs	r3, r3, r2
 801ee1e:	18ed      	adds	r5, r5, r3
 801ee20:	2700      	movs	r7, #0
 801ee22:	42bd      	cmp	r5, r7
 801ee24:	d120      	bne.n	801ee68 <_printf_common+0xc4>
 801ee26:	2000      	movs	r0, #0
 801ee28:	e010      	b.n	801ee4c <_printf_common+0xa8>
 801ee2a:	3701      	adds	r7, #1
 801ee2c:	68e3      	ldr	r3, [r4, #12]
 801ee2e:	682a      	ldr	r2, [r5, #0]
 801ee30:	1a9b      	subs	r3, r3, r2
 801ee32:	42bb      	cmp	r3, r7
 801ee34:	ddd2      	ble.n	801eddc <_printf_common+0x38>
 801ee36:	0022      	movs	r2, r4
 801ee38:	2301      	movs	r3, #1
 801ee3a:	3219      	adds	r2, #25
 801ee3c:	9901      	ldr	r1, [sp, #4]
 801ee3e:	9800      	ldr	r0, [sp, #0]
 801ee40:	9e08      	ldr	r6, [sp, #32]
 801ee42:	47b0      	blx	r6
 801ee44:	1c43      	adds	r3, r0, #1
 801ee46:	d1f0      	bne.n	801ee2a <_printf_common+0x86>
 801ee48:	2001      	movs	r0, #1
 801ee4a:	4240      	negs	r0, r0
 801ee4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ee4e:	2030      	movs	r0, #48	; 0x30
 801ee50:	18e1      	adds	r1, r4, r3
 801ee52:	3143      	adds	r1, #67	; 0x43
 801ee54:	7008      	strb	r0, [r1, #0]
 801ee56:	0021      	movs	r1, r4
 801ee58:	1c5a      	adds	r2, r3, #1
 801ee5a:	3145      	adds	r1, #69	; 0x45
 801ee5c:	7809      	ldrb	r1, [r1, #0]
 801ee5e:	18a2      	adds	r2, r4, r2
 801ee60:	3243      	adds	r2, #67	; 0x43
 801ee62:	3302      	adds	r3, #2
 801ee64:	7011      	strb	r1, [r2, #0]
 801ee66:	e7c1      	b.n	801edec <_printf_common+0x48>
 801ee68:	0022      	movs	r2, r4
 801ee6a:	2301      	movs	r3, #1
 801ee6c:	321a      	adds	r2, #26
 801ee6e:	9901      	ldr	r1, [sp, #4]
 801ee70:	9800      	ldr	r0, [sp, #0]
 801ee72:	9e08      	ldr	r6, [sp, #32]
 801ee74:	47b0      	blx	r6
 801ee76:	1c43      	adds	r3, r0, #1
 801ee78:	d0e6      	beq.n	801ee48 <_printf_common+0xa4>
 801ee7a:	3701      	adds	r7, #1
 801ee7c:	e7d1      	b.n	801ee22 <_printf_common+0x7e>
	...

0801ee80 <_printf_i>:
 801ee80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee82:	b089      	sub	sp, #36	; 0x24
 801ee84:	9204      	str	r2, [sp, #16]
 801ee86:	000a      	movs	r2, r1
 801ee88:	3243      	adds	r2, #67	; 0x43
 801ee8a:	9305      	str	r3, [sp, #20]
 801ee8c:	9003      	str	r0, [sp, #12]
 801ee8e:	9202      	str	r2, [sp, #8]
 801ee90:	7e0a      	ldrb	r2, [r1, #24]
 801ee92:	000c      	movs	r4, r1
 801ee94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee96:	2a6e      	cmp	r2, #110	; 0x6e
 801ee98:	d100      	bne.n	801ee9c <_printf_i+0x1c>
 801ee9a:	e086      	b.n	801efaa <_printf_i+0x12a>
 801ee9c:	d81f      	bhi.n	801eede <_printf_i+0x5e>
 801ee9e:	2a63      	cmp	r2, #99	; 0x63
 801eea0:	d033      	beq.n	801ef0a <_printf_i+0x8a>
 801eea2:	d808      	bhi.n	801eeb6 <_printf_i+0x36>
 801eea4:	2a00      	cmp	r2, #0
 801eea6:	d100      	bne.n	801eeaa <_printf_i+0x2a>
 801eea8:	e08c      	b.n	801efc4 <_printf_i+0x144>
 801eeaa:	2a58      	cmp	r2, #88	; 0x58
 801eeac:	d04d      	beq.n	801ef4a <_printf_i+0xca>
 801eeae:	0025      	movs	r5, r4
 801eeb0:	3542      	adds	r5, #66	; 0x42
 801eeb2:	702a      	strb	r2, [r5, #0]
 801eeb4:	e030      	b.n	801ef18 <_printf_i+0x98>
 801eeb6:	2a64      	cmp	r2, #100	; 0x64
 801eeb8:	d001      	beq.n	801eebe <_printf_i+0x3e>
 801eeba:	2a69      	cmp	r2, #105	; 0x69
 801eebc:	d1f7      	bne.n	801eeae <_printf_i+0x2e>
 801eebe:	6819      	ldr	r1, [r3, #0]
 801eec0:	6825      	ldr	r5, [r4, #0]
 801eec2:	1d0a      	adds	r2, r1, #4
 801eec4:	0628      	lsls	r0, r5, #24
 801eec6:	d529      	bpl.n	801ef1c <_printf_i+0x9c>
 801eec8:	6808      	ldr	r0, [r1, #0]
 801eeca:	601a      	str	r2, [r3, #0]
 801eecc:	2800      	cmp	r0, #0
 801eece:	da03      	bge.n	801eed8 <_printf_i+0x58>
 801eed0:	232d      	movs	r3, #45	; 0x2d
 801eed2:	9a02      	ldr	r2, [sp, #8]
 801eed4:	4240      	negs	r0, r0
 801eed6:	7013      	strb	r3, [r2, #0]
 801eed8:	4e6b      	ldr	r6, [pc, #428]	; (801f088 <_printf_i+0x208>)
 801eeda:	270a      	movs	r7, #10
 801eedc:	e04f      	b.n	801ef7e <_printf_i+0xfe>
 801eede:	2a73      	cmp	r2, #115	; 0x73
 801eee0:	d074      	beq.n	801efcc <_printf_i+0x14c>
 801eee2:	d808      	bhi.n	801eef6 <_printf_i+0x76>
 801eee4:	2a6f      	cmp	r2, #111	; 0x6f
 801eee6:	d01f      	beq.n	801ef28 <_printf_i+0xa8>
 801eee8:	2a70      	cmp	r2, #112	; 0x70
 801eeea:	d1e0      	bne.n	801eeae <_printf_i+0x2e>
 801eeec:	2220      	movs	r2, #32
 801eeee:	6809      	ldr	r1, [r1, #0]
 801eef0:	430a      	orrs	r2, r1
 801eef2:	6022      	str	r2, [r4, #0]
 801eef4:	e003      	b.n	801eefe <_printf_i+0x7e>
 801eef6:	2a75      	cmp	r2, #117	; 0x75
 801eef8:	d016      	beq.n	801ef28 <_printf_i+0xa8>
 801eefa:	2a78      	cmp	r2, #120	; 0x78
 801eefc:	d1d7      	bne.n	801eeae <_printf_i+0x2e>
 801eefe:	0022      	movs	r2, r4
 801ef00:	2178      	movs	r1, #120	; 0x78
 801ef02:	3245      	adds	r2, #69	; 0x45
 801ef04:	7011      	strb	r1, [r2, #0]
 801ef06:	4e61      	ldr	r6, [pc, #388]	; (801f08c <_printf_i+0x20c>)
 801ef08:	e022      	b.n	801ef50 <_printf_i+0xd0>
 801ef0a:	0025      	movs	r5, r4
 801ef0c:	681a      	ldr	r2, [r3, #0]
 801ef0e:	3542      	adds	r5, #66	; 0x42
 801ef10:	1d11      	adds	r1, r2, #4
 801ef12:	6019      	str	r1, [r3, #0]
 801ef14:	6813      	ldr	r3, [r2, #0]
 801ef16:	702b      	strb	r3, [r5, #0]
 801ef18:	2301      	movs	r3, #1
 801ef1a:	e065      	b.n	801efe8 <_printf_i+0x168>
 801ef1c:	6808      	ldr	r0, [r1, #0]
 801ef1e:	601a      	str	r2, [r3, #0]
 801ef20:	0669      	lsls	r1, r5, #25
 801ef22:	d5d3      	bpl.n	801eecc <_printf_i+0x4c>
 801ef24:	b200      	sxth	r0, r0
 801ef26:	e7d1      	b.n	801eecc <_printf_i+0x4c>
 801ef28:	6819      	ldr	r1, [r3, #0]
 801ef2a:	6825      	ldr	r5, [r4, #0]
 801ef2c:	1d08      	adds	r0, r1, #4
 801ef2e:	6018      	str	r0, [r3, #0]
 801ef30:	6808      	ldr	r0, [r1, #0]
 801ef32:	062e      	lsls	r6, r5, #24
 801ef34:	d505      	bpl.n	801ef42 <_printf_i+0xc2>
 801ef36:	4e54      	ldr	r6, [pc, #336]	; (801f088 <_printf_i+0x208>)
 801ef38:	2708      	movs	r7, #8
 801ef3a:	2a6f      	cmp	r2, #111	; 0x6f
 801ef3c:	d01b      	beq.n	801ef76 <_printf_i+0xf6>
 801ef3e:	270a      	movs	r7, #10
 801ef40:	e019      	b.n	801ef76 <_printf_i+0xf6>
 801ef42:	066d      	lsls	r5, r5, #25
 801ef44:	d5f7      	bpl.n	801ef36 <_printf_i+0xb6>
 801ef46:	b280      	uxth	r0, r0
 801ef48:	e7f5      	b.n	801ef36 <_printf_i+0xb6>
 801ef4a:	3145      	adds	r1, #69	; 0x45
 801ef4c:	4e4e      	ldr	r6, [pc, #312]	; (801f088 <_printf_i+0x208>)
 801ef4e:	700a      	strb	r2, [r1, #0]
 801ef50:	6818      	ldr	r0, [r3, #0]
 801ef52:	6822      	ldr	r2, [r4, #0]
 801ef54:	1d01      	adds	r1, r0, #4
 801ef56:	6800      	ldr	r0, [r0, #0]
 801ef58:	6019      	str	r1, [r3, #0]
 801ef5a:	0615      	lsls	r5, r2, #24
 801ef5c:	d521      	bpl.n	801efa2 <_printf_i+0x122>
 801ef5e:	07d3      	lsls	r3, r2, #31
 801ef60:	d502      	bpl.n	801ef68 <_printf_i+0xe8>
 801ef62:	2320      	movs	r3, #32
 801ef64:	431a      	orrs	r2, r3
 801ef66:	6022      	str	r2, [r4, #0]
 801ef68:	2710      	movs	r7, #16
 801ef6a:	2800      	cmp	r0, #0
 801ef6c:	d103      	bne.n	801ef76 <_printf_i+0xf6>
 801ef6e:	2320      	movs	r3, #32
 801ef70:	6822      	ldr	r2, [r4, #0]
 801ef72:	439a      	bics	r2, r3
 801ef74:	6022      	str	r2, [r4, #0]
 801ef76:	0023      	movs	r3, r4
 801ef78:	2200      	movs	r2, #0
 801ef7a:	3343      	adds	r3, #67	; 0x43
 801ef7c:	701a      	strb	r2, [r3, #0]
 801ef7e:	6863      	ldr	r3, [r4, #4]
 801ef80:	60a3      	str	r3, [r4, #8]
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	db58      	blt.n	801f038 <_printf_i+0x1b8>
 801ef86:	2204      	movs	r2, #4
 801ef88:	6821      	ldr	r1, [r4, #0]
 801ef8a:	4391      	bics	r1, r2
 801ef8c:	6021      	str	r1, [r4, #0]
 801ef8e:	2800      	cmp	r0, #0
 801ef90:	d154      	bne.n	801f03c <_printf_i+0x1bc>
 801ef92:	9d02      	ldr	r5, [sp, #8]
 801ef94:	2b00      	cmp	r3, #0
 801ef96:	d05a      	beq.n	801f04e <_printf_i+0x1ce>
 801ef98:	0025      	movs	r5, r4
 801ef9a:	7833      	ldrb	r3, [r6, #0]
 801ef9c:	3542      	adds	r5, #66	; 0x42
 801ef9e:	702b      	strb	r3, [r5, #0]
 801efa0:	e055      	b.n	801f04e <_printf_i+0x1ce>
 801efa2:	0655      	lsls	r5, r2, #25
 801efa4:	d5db      	bpl.n	801ef5e <_printf_i+0xde>
 801efa6:	b280      	uxth	r0, r0
 801efa8:	e7d9      	b.n	801ef5e <_printf_i+0xde>
 801efaa:	681a      	ldr	r2, [r3, #0]
 801efac:	680d      	ldr	r5, [r1, #0]
 801efae:	1d10      	adds	r0, r2, #4
 801efb0:	6949      	ldr	r1, [r1, #20]
 801efb2:	6018      	str	r0, [r3, #0]
 801efb4:	6813      	ldr	r3, [r2, #0]
 801efb6:	062e      	lsls	r6, r5, #24
 801efb8:	d501      	bpl.n	801efbe <_printf_i+0x13e>
 801efba:	6019      	str	r1, [r3, #0]
 801efbc:	e002      	b.n	801efc4 <_printf_i+0x144>
 801efbe:	066d      	lsls	r5, r5, #25
 801efc0:	d5fb      	bpl.n	801efba <_printf_i+0x13a>
 801efc2:	8019      	strh	r1, [r3, #0]
 801efc4:	2300      	movs	r3, #0
 801efc6:	9d02      	ldr	r5, [sp, #8]
 801efc8:	6123      	str	r3, [r4, #16]
 801efca:	e04f      	b.n	801f06c <_printf_i+0x1ec>
 801efcc:	681a      	ldr	r2, [r3, #0]
 801efce:	1d11      	adds	r1, r2, #4
 801efd0:	6019      	str	r1, [r3, #0]
 801efd2:	6815      	ldr	r5, [r2, #0]
 801efd4:	2100      	movs	r1, #0
 801efd6:	6862      	ldr	r2, [r4, #4]
 801efd8:	0028      	movs	r0, r5
 801efda:	f000 f859 	bl	801f090 <memchr>
 801efde:	2800      	cmp	r0, #0
 801efe0:	d001      	beq.n	801efe6 <_printf_i+0x166>
 801efe2:	1b40      	subs	r0, r0, r5
 801efe4:	6060      	str	r0, [r4, #4]
 801efe6:	6863      	ldr	r3, [r4, #4]
 801efe8:	6123      	str	r3, [r4, #16]
 801efea:	2300      	movs	r3, #0
 801efec:	9a02      	ldr	r2, [sp, #8]
 801efee:	7013      	strb	r3, [r2, #0]
 801eff0:	e03c      	b.n	801f06c <_printf_i+0x1ec>
 801eff2:	6923      	ldr	r3, [r4, #16]
 801eff4:	002a      	movs	r2, r5
 801eff6:	9904      	ldr	r1, [sp, #16]
 801eff8:	9803      	ldr	r0, [sp, #12]
 801effa:	9d05      	ldr	r5, [sp, #20]
 801effc:	47a8      	blx	r5
 801effe:	1c43      	adds	r3, r0, #1
 801f000:	d03e      	beq.n	801f080 <_printf_i+0x200>
 801f002:	6823      	ldr	r3, [r4, #0]
 801f004:	079b      	lsls	r3, r3, #30
 801f006:	d415      	bmi.n	801f034 <_printf_i+0x1b4>
 801f008:	9b07      	ldr	r3, [sp, #28]
 801f00a:	68e0      	ldr	r0, [r4, #12]
 801f00c:	4298      	cmp	r0, r3
 801f00e:	da39      	bge.n	801f084 <_printf_i+0x204>
 801f010:	0018      	movs	r0, r3
 801f012:	e037      	b.n	801f084 <_printf_i+0x204>
 801f014:	0022      	movs	r2, r4
 801f016:	2301      	movs	r3, #1
 801f018:	3219      	adds	r2, #25
 801f01a:	9904      	ldr	r1, [sp, #16]
 801f01c:	9803      	ldr	r0, [sp, #12]
 801f01e:	9e05      	ldr	r6, [sp, #20]
 801f020:	47b0      	blx	r6
 801f022:	1c43      	adds	r3, r0, #1
 801f024:	d02c      	beq.n	801f080 <_printf_i+0x200>
 801f026:	3501      	adds	r5, #1
 801f028:	68e3      	ldr	r3, [r4, #12]
 801f02a:	9a07      	ldr	r2, [sp, #28]
 801f02c:	1a9b      	subs	r3, r3, r2
 801f02e:	42ab      	cmp	r3, r5
 801f030:	dcf0      	bgt.n	801f014 <_printf_i+0x194>
 801f032:	e7e9      	b.n	801f008 <_printf_i+0x188>
 801f034:	2500      	movs	r5, #0
 801f036:	e7f7      	b.n	801f028 <_printf_i+0x1a8>
 801f038:	2800      	cmp	r0, #0
 801f03a:	d0ad      	beq.n	801ef98 <_printf_i+0x118>
 801f03c:	9d02      	ldr	r5, [sp, #8]
 801f03e:	0039      	movs	r1, r7
 801f040:	f7e1 f8f0 	bl	8000224 <__aeabi_uidivmod>
 801f044:	5c73      	ldrb	r3, [r6, r1]
 801f046:	3d01      	subs	r5, #1
 801f048:	702b      	strb	r3, [r5, #0]
 801f04a:	2800      	cmp	r0, #0
 801f04c:	d1f7      	bne.n	801f03e <_printf_i+0x1be>
 801f04e:	2f08      	cmp	r7, #8
 801f050:	d109      	bne.n	801f066 <_printf_i+0x1e6>
 801f052:	6823      	ldr	r3, [r4, #0]
 801f054:	07db      	lsls	r3, r3, #31
 801f056:	d506      	bpl.n	801f066 <_printf_i+0x1e6>
 801f058:	6863      	ldr	r3, [r4, #4]
 801f05a:	6922      	ldr	r2, [r4, #16]
 801f05c:	4293      	cmp	r3, r2
 801f05e:	dc02      	bgt.n	801f066 <_printf_i+0x1e6>
 801f060:	2330      	movs	r3, #48	; 0x30
 801f062:	3d01      	subs	r5, #1
 801f064:	702b      	strb	r3, [r5, #0]
 801f066:	9b02      	ldr	r3, [sp, #8]
 801f068:	1b5b      	subs	r3, r3, r5
 801f06a:	6123      	str	r3, [r4, #16]
 801f06c:	9b05      	ldr	r3, [sp, #20]
 801f06e:	aa07      	add	r2, sp, #28
 801f070:	9300      	str	r3, [sp, #0]
 801f072:	0021      	movs	r1, r4
 801f074:	9b04      	ldr	r3, [sp, #16]
 801f076:	9803      	ldr	r0, [sp, #12]
 801f078:	f7ff fe94 	bl	801eda4 <_printf_common>
 801f07c:	1c43      	adds	r3, r0, #1
 801f07e:	d1b8      	bne.n	801eff2 <_printf_i+0x172>
 801f080:	2001      	movs	r0, #1
 801f082:	4240      	negs	r0, r0
 801f084:	b009      	add	sp, #36	; 0x24
 801f086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f088:	0802131d 	.word	0x0802131d
 801f08c:	0802132e 	.word	0x0802132e

0801f090 <memchr>:
 801f090:	b2c9      	uxtb	r1, r1
 801f092:	1882      	adds	r2, r0, r2
 801f094:	4290      	cmp	r0, r2
 801f096:	d101      	bne.n	801f09c <memchr+0xc>
 801f098:	2000      	movs	r0, #0
 801f09a:	4770      	bx	lr
 801f09c:	7803      	ldrb	r3, [r0, #0]
 801f09e:	428b      	cmp	r3, r1
 801f0a0:	d0fb      	beq.n	801f09a <memchr+0xa>
 801f0a2:	3001      	adds	r0, #1
 801f0a4:	e7f6      	b.n	801f094 <memchr+0x4>
	...

0801f0a8 <_free_r>:
 801f0a8:	b570      	push	{r4, r5, r6, lr}
 801f0aa:	0005      	movs	r5, r0
 801f0ac:	2900      	cmp	r1, #0
 801f0ae:	d010      	beq.n	801f0d2 <_free_r+0x2a>
 801f0b0:	1f0c      	subs	r4, r1, #4
 801f0b2:	6823      	ldr	r3, [r4, #0]
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	da00      	bge.n	801f0ba <_free_r+0x12>
 801f0b8:	18e4      	adds	r4, r4, r3
 801f0ba:	0028      	movs	r0, r5
 801f0bc:	f000 f8d4 	bl	801f268 <__malloc_lock>
 801f0c0:	4a1d      	ldr	r2, [pc, #116]	; (801f138 <_free_r+0x90>)
 801f0c2:	6813      	ldr	r3, [r2, #0]
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d105      	bne.n	801f0d4 <_free_r+0x2c>
 801f0c8:	6063      	str	r3, [r4, #4]
 801f0ca:	6014      	str	r4, [r2, #0]
 801f0cc:	0028      	movs	r0, r5
 801f0ce:	f000 f8cc 	bl	801f26a <__malloc_unlock>
 801f0d2:	bd70      	pop	{r4, r5, r6, pc}
 801f0d4:	42a3      	cmp	r3, r4
 801f0d6:	d909      	bls.n	801f0ec <_free_r+0x44>
 801f0d8:	6821      	ldr	r1, [r4, #0]
 801f0da:	1860      	adds	r0, r4, r1
 801f0dc:	4283      	cmp	r3, r0
 801f0de:	d1f3      	bne.n	801f0c8 <_free_r+0x20>
 801f0e0:	6818      	ldr	r0, [r3, #0]
 801f0e2:	685b      	ldr	r3, [r3, #4]
 801f0e4:	1841      	adds	r1, r0, r1
 801f0e6:	6021      	str	r1, [r4, #0]
 801f0e8:	e7ee      	b.n	801f0c8 <_free_r+0x20>
 801f0ea:	0013      	movs	r3, r2
 801f0ec:	685a      	ldr	r2, [r3, #4]
 801f0ee:	2a00      	cmp	r2, #0
 801f0f0:	d001      	beq.n	801f0f6 <_free_r+0x4e>
 801f0f2:	42a2      	cmp	r2, r4
 801f0f4:	d9f9      	bls.n	801f0ea <_free_r+0x42>
 801f0f6:	6819      	ldr	r1, [r3, #0]
 801f0f8:	1858      	adds	r0, r3, r1
 801f0fa:	42a0      	cmp	r0, r4
 801f0fc:	d10b      	bne.n	801f116 <_free_r+0x6e>
 801f0fe:	6820      	ldr	r0, [r4, #0]
 801f100:	1809      	adds	r1, r1, r0
 801f102:	1858      	adds	r0, r3, r1
 801f104:	6019      	str	r1, [r3, #0]
 801f106:	4282      	cmp	r2, r0
 801f108:	d1e0      	bne.n	801f0cc <_free_r+0x24>
 801f10a:	6810      	ldr	r0, [r2, #0]
 801f10c:	6852      	ldr	r2, [r2, #4]
 801f10e:	1841      	adds	r1, r0, r1
 801f110:	6019      	str	r1, [r3, #0]
 801f112:	605a      	str	r2, [r3, #4]
 801f114:	e7da      	b.n	801f0cc <_free_r+0x24>
 801f116:	42a0      	cmp	r0, r4
 801f118:	d902      	bls.n	801f120 <_free_r+0x78>
 801f11a:	230c      	movs	r3, #12
 801f11c:	602b      	str	r3, [r5, #0]
 801f11e:	e7d5      	b.n	801f0cc <_free_r+0x24>
 801f120:	6821      	ldr	r1, [r4, #0]
 801f122:	1860      	adds	r0, r4, r1
 801f124:	4282      	cmp	r2, r0
 801f126:	d103      	bne.n	801f130 <_free_r+0x88>
 801f128:	6810      	ldr	r0, [r2, #0]
 801f12a:	6852      	ldr	r2, [r2, #4]
 801f12c:	1841      	adds	r1, r0, r1
 801f12e:	6021      	str	r1, [r4, #0]
 801f130:	6062      	str	r2, [r4, #4]
 801f132:	605c      	str	r4, [r3, #4]
 801f134:	e7ca      	b.n	801f0cc <_free_r+0x24>
 801f136:	46c0      	nop			; (mov r8, r8)
 801f138:	20001170 	.word	0x20001170

0801f13c <_malloc_r>:
 801f13c:	2303      	movs	r3, #3
 801f13e:	b570      	push	{r4, r5, r6, lr}
 801f140:	1ccd      	adds	r5, r1, #3
 801f142:	439d      	bics	r5, r3
 801f144:	3508      	adds	r5, #8
 801f146:	0006      	movs	r6, r0
 801f148:	2d0c      	cmp	r5, #12
 801f14a:	d21e      	bcs.n	801f18a <_malloc_r+0x4e>
 801f14c:	250c      	movs	r5, #12
 801f14e:	42a9      	cmp	r1, r5
 801f150:	d81d      	bhi.n	801f18e <_malloc_r+0x52>
 801f152:	0030      	movs	r0, r6
 801f154:	f000 f888 	bl	801f268 <__malloc_lock>
 801f158:	4a25      	ldr	r2, [pc, #148]	; (801f1f0 <_malloc_r+0xb4>)
 801f15a:	6814      	ldr	r4, [r2, #0]
 801f15c:	0021      	movs	r1, r4
 801f15e:	2900      	cmp	r1, #0
 801f160:	d119      	bne.n	801f196 <_malloc_r+0x5a>
 801f162:	4c24      	ldr	r4, [pc, #144]	; (801f1f4 <_malloc_r+0xb8>)
 801f164:	6823      	ldr	r3, [r4, #0]
 801f166:	2b00      	cmp	r3, #0
 801f168:	d103      	bne.n	801f172 <_malloc_r+0x36>
 801f16a:	0030      	movs	r0, r6
 801f16c:	f000 f86a 	bl	801f244 <_sbrk_r>
 801f170:	6020      	str	r0, [r4, #0]
 801f172:	0029      	movs	r1, r5
 801f174:	0030      	movs	r0, r6
 801f176:	f000 f865 	bl	801f244 <_sbrk_r>
 801f17a:	1c43      	adds	r3, r0, #1
 801f17c:	d12b      	bne.n	801f1d6 <_malloc_r+0x9a>
 801f17e:	230c      	movs	r3, #12
 801f180:	0030      	movs	r0, r6
 801f182:	6033      	str	r3, [r6, #0]
 801f184:	f000 f871 	bl	801f26a <__malloc_unlock>
 801f188:	e003      	b.n	801f192 <_malloc_r+0x56>
 801f18a:	2d00      	cmp	r5, #0
 801f18c:	dadf      	bge.n	801f14e <_malloc_r+0x12>
 801f18e:	230c      	movs	r3, #12
 801f190:	6033      	str	r3, [r6, #0]
 801f192:	2000      	movs	r0, #0
 801f194:	bd70      	pop	{r4, r5, r6, pc}
 801f196:	680b      	ldr	r3, [r1, #0]
 801f198:	1b5b      	subs	r3, r3, r5
 801f19a:	d419      	bmi.n	801f1d0 <_malloc_r+0x94>
 801f19c:	2b0b      	cmp	r3, #11
 801f19e:	d903      	bls.n	801f1a8 <_malloc_r+0x6c>
 801f1a0:	600b      	str	r3, [r1, #0]
 801f1a2:	18cc      	adds	r4, r1, r3
 801f1a4:	6025      	str	r5, [r4, #0]
 801f1a6:	e003      	b.n	801f1b0 <_malloc_r+0x74>
 801f1a8:	684b      	ldr	r3, [r1, #4]
 801f1aa:	428c      	cmp	r4, r1
 801f1ac:	d10d      	bne.n	801f1ca <_malloc_r+0x8e>
 801f1ae:	6013      	str	r3, [r2, #0]
 801f1b0:	0030      	movs	r0, r6
 801f1b2:	f000 f85a 	bl	801f26a <__malloc_unlock>
 801f1b6:	0020      	movs	r0, r4
 801f1b8:	2207      	movs	r2, #7
 801f1ba:	300b      	adds	r0, #11
 801f1bc:	1d23      	adds	r3, r4, #4
 801f1be:	4390      	bics	r0, r2
 801f1c0:	1ac3      	subs	r3, r0, r3
 801f1c2:	d0e7      	beq.n	801f194 <_malloc_r+0x58>
 801f1c4:	425a      	negs	r2, r3
 801f1c6:	50e2      	str	r2, [r4, r3]
 801f1c8:	e7e4      	b.n	801f194 <_malloc_r+0x58>
 801f1ca:	6063      	str	r3, [r4, #4]
 801f1cc:	000c      	movs	r4, r1
 801f1ce:	e7ef      	b.n	801f1b0 <_malloc_r+0x74>
 801f1d0:	000c      	movs	r4, r1
 801f1d2:	6849      	ldr	r1, [r1, #4]
 801f1d4:	e7c3      	b.n	801f15e <_malloc_r+0x22>
 801f1d6:	2303      	movs	r3, #3
 801f1d8:	1cc4      	adds	r4, r0, #3
 801f1da:	439c      	bics	r4, r3
 801f1dc:	42a0      	cmp	r0, r4
 801f1de:	d0e1      	beq.n	801f1a4 <_malloc_r+0x68>
 801f1e0:	1a21      	subs	r1, r4, r0
 801f1e2:	0030      	movs	r0, r6
 801f1e4:	f000 f82e 	bl	801f244 <_sbrk_r>
 801f1e8:	1c43      	adds	r3, r0, #1
 801f1ea:	d1db      	bne.n	801f1a4 <_malloc_r+0x68>
 801f1ec:	e7c7      	b.n	801f17e <_malloc_r+0x42>
 801f1ee:	46c0      	nop			; (mov r8, r8)
 801f1f0:	20001170 	.word	0x20001170
 801f1f4:	20001174 	.word	0x20001174

0801f1f8 <_realloc_r>:
 801f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1fa:	0007      	movs	r7, r0
 801f1fc:	000d      	movs	r5, r1
 801f1fe:	0016      	movs	r6, r2
 801f200:	2900      	cmp	r1, #0
 801f202:	d105      	bne.n	801f210 <_realloc_r+0x18>
 801f204:	0011      	movs	r1, r2
 801f206:	f7ff ff99 	bl	801f13c <_malloc_r>
 801f20a:	0004      	movs	r4, r0
 801f20c:	0020      	movs	r0, r4
 801f20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f210:	2a00      	cmp	r2, #0
 801f212:	d103      	bne.n	801f21c <_realloc_r+0x24>
 801f214:	f7ff ff48 	bl	801f0a8 <_free_r>
 801f218:	0034      	movs	r4, r6
 801f21a:	e7f7      	b.n	801f20c <_realloc_r+0x14>
 801f21c:	f000 f826 	bl	801f26c <_malloc_usable_size_r>
 801f220:	002c      	movs	r4, r5
 801f222:	42b0      	cmp	r0, r6
 801f224:	d2f2      	bcs.n	801f20c <_realloc_r+0x14>
 801f226:	0031      	movs	r1, r6
 801f228:	0038      	movs	r0, r7
 801f22a:	f7ff ff87 	bl	801f13c <_malloc_r>
 801f22e:	1e04      	subs	r4, r0, #0
 801f230:	d0ec      	beq.n	801f20c <_realloc_r+0x14>
 801f232:	0029      	movs	r1, r5
 801f234:	0032      	movs	r2, r6
 801f236:	f7ff fbf9 	bl	801ea2c <memcpy>
 801f23a:	0029      	movs	r1, r5
 801f23c:	0038      	movs	r0, r7
 801f23e:	f7ff ff33 	bl	801f0a8 <_free_r>
 801f242:	e7e3      	b.n	801f20c <_realloc_r+0x14>

0801f244 <_sbrk_r>:
 801f244:	2300      	movs	r3, #0
 801f246:	b570      	push	{r4, r5, r6, lr}
 801f248:	4c06      	ldr	r4, [pc, #24]	; (801f264 <_sbrk_r+0x20>)
 801f24a:	0005      	movs	r5, r0
 801f24c:	0008      	movs	r0, r1
 801f24e:	6023      	str	r3, [r4, #0]
 801f250:	f7e4 fb08 	bl	8003864 <_sbrk>
 801f254:	1c43      	adds	r3, r0, #1
 801f256:	d103      	bne.n	801f260 <_sbrk_r+0x1c>
 801f258:	6823      	ldr	r3, [r4, #0]
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	d000      	beq.n	801f260 <_sbrk_r+0x1c>
 801f25e:	602b      	str	r3, [r5, #0]
 801f260:	bd70      	pop	{r4, r5, r6, pc}
 801f262:	46c0      	nop			; (mov r8, r8)
 801f264:	20001628 	.word	0x20001628

0801f268 <__malloc_lock>:
 801f268:	4770      	bx	lr

0801f26a <__malloc_unlock>:
 801f26a:	4770      	bx	lr

0801f26c <_malloc_usable_size_r>:
 801f26c:	1f0b      	subs	r3, r1, #4
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	1f18      	subs	r0, r3, #4
 801f272:	2b00      	cmp	r3, #0
 801f274:	da01      	bge.n	801f27a <_malloc_usable_size_r+0xe>
 801f276:	580b      	ldr	r3, [r1, r0]
 801f278:	18c0      	adds	r0, r0, r3
 801f27a:	4770      	bx	lr

0801f27c <ceil>:
 801f27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f27e:	004b      	lsls	r3, r1, #1
 801f280:	4a39      	ldr	r2, [pc, #228]	; (801f368 <ceil+0xec>)
 801f282:	0d5b      	lsrs	r3, r3, #21
 801f284:	b085      	sub	sp, #20
 801f286:	189e      	adds	r6, r3, r2
 801f288:	000c      	movs	r4, r1
 801f28a:	0005      	movs	r5, r0
 801f28c:	9003      	str	r0, [sp, #12]
 801f28e:	2e13      	cmp	r6, #19
 801f290:	dc32      	bgt.n	801f2f8 <ceil+0x7c>
 801f292:	2e00      	cmp	r6, #0
 801f294:	da13      	bge.n	801f2be <ceil+0x42>
 801f296:	4a35      	ldr	r2, [pc, #212]	; (801f36c <ceil+0xf0>)
 801f298:	4b35      	ldr	r3, [pc, #212]	; (801f370 <ceil+0xf4>)
 801f29a:	f7e1 fc5f 	bl	8000b5c <__aeabi_dadd>
 801f29e:	2200      	movs	r2, #0
 801f2a0:	2300      	movs	r3, #0
 801f2a2:	f7e1 f8d9 	bl	8000458 <__aeabi_dcmpgt>
 801f2a6:	2800      	cmp	r0, #0
 801f2a8:	d006      	beq.n	801f2b8 <ceil+0x3c>
 801f2aa:	2c00      	cmp	r4, #0
 801f2ac:	db57      	blt.n	801f35e <ceil+0xe2>
 801f2ae:	432c      	orrs	r4, r5
 801f2b0:	2500      	movs	r5, #0
 801f2b2:	42ac      	cmp	r4, r5
 801f2b4:	d000      	beq.n	801f2b8 <ceil+0x3c>
 801f2b6:	4c2f      	ldr	r4, [pc, #188]	; (801f374 <ceil+0xf8>)
 801f2b8:	0028      	movs	r0, r5
 801f2ba:	0021      	movs	r1, r4
 801f2bc:	e026      	b.n	801f30c <ceil+0x90>
 801f2be:	4f2e      	ldr	r7, [pc, #184]	; (801f378 <ceil+0xfc>)
 801f2c0:	4137      	asrs	r7, r6
 801f2c2:	003b      	movs	r3, r7
 801f2c4:	400b      	ands	r3, r1
 801f2c6:	4303      	orrs	r3, r0
 801f2c8:	d020      	beq.n	801f30c <ceil+0x90>
 801f2ca:	9000      	str	r0, [sp, #0]
 801f2cc:	9101      	str	r1, [sp, #4]
 801f2ce:	4a27      	ldr	r2, [pc, #156]	; (801f36c <ceil+0xf0>)
 801f2d0:	4b27      	ldr	r3, [pc, #156]	; (801f370 <ceil+0xf4>)
 801f2d2:	9800      	ldr	r0, [sp, #0]
 801f2d4:	9901      	ldr	r1, [sp, #4]
 801f2d6:	f7e1 fc41 	bl	8000b5c <__aeabi_dadd>
 801f2da:	2200      	movs	r2, #0
 801f2dc:	2300      	movs	r3, #0
 801f2de:	f7e1 f8bb 	bl	8000458 <__aeabi_dcmpgt>
 801f2e2:	2800      	cmp	r0, #0
 801f2e4:	d0e8      	beq.n	801f2b8 <ceil+0x3c>
 801f2e6:	2c00      	cmp	r4, #0
 801f2e8:	dd03      	ble.n	801f2f2 <ceil+0x76>
 801f2ea:	2380      	movs	r3, #128	; 0x80
 801f2ec:	035b      	lsls	r3, r3, #13
 801f2ee:	4133      	asrs	r3, r6
 801f2f0:	18e4      	adds	r4, r4, r3
 801f2f2:	43bc      	bics	r4, r7
 801f2f4:	2500      	movs	r5, #0
 801f2f6:	e7df      	b.n	801f2b8 <ceil+0x3c>
 801f2f8:	2e33      	cmp	r6, #51	; 0x33
 801f2fa:	dd09      	ble.n	801f310 <ceil+0x94>
 801f2fc:	2380      	movs	r3, #128	; 0x80
 801f2fe:	00db      	lsls	r3, r3, #3
 801f300:	429e      	cmp	r6, r3
 801f302:	d103      	bne.n	801f30c <ceil+0x90>
 801f304:	0002      	movs	r2, r0
 801f306:	000b      	movs	r3, r1
 801f308:	f7e1 fc28 	bl	8000b5c <__aeabi_dadd>
 801f30c:	b005      	add	sp, #20
 801f30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f310:	2701      	movs	r7, #1
 801f312:	4a1a      	ldr	r2, [pc, #104]	; (801f37c <ceil+0x100>)
 801f314:	427f      	negs	r7, r7
 801f316:	189b      	adds	r3, r3, r2
 801f318:	40df      	lsrs	r7, r3
 801f31a:	4238      	tst	r0, r7
 801f31c:	d0f6      	beq.n	801f30c <ceil+0x90>
 801f31e:	9000      	str	r0, [sp, #0]
 801f320:	9101      	str	r1, [sp, #4]
 801f322:	4a12      	ldr	r2, [pc, #72]	; (801f36c <ceil+0xf0>)
 801f324:	4b12      	ldr	r3, [pc, #72]	; (801f370 <ceil+0xf4>)
 801f326:	9800      	ldr	r0, [sp, #0]
 801f328:	9901      	ldr	r1, [sp, #4]
 801f32a:	f7e1 fc17 	bl	8000b5c <__aeabi_dadd>
 801f32e:	2200      	movs	r2, #0
 801f330:	2300      	movs	r3, #0
 801f332:	f7e1 f891 	bl	8000458 <__aeabi_dcmpgt>
 801f336:	2800      	cmp	r0, #0
 801f338:	d0be      	beq.n	801f2b8 <ceil+0x3c>
 801f33a:	2c00      	cmp	r4, #0
 801f33c:	dd02      	ble.n	801f344 <ceil+0xc8>
 801f33e:	2e14      	cmp	r6, #20
 801f340:	d102      	bne.n	801f348 <ceil+0xcc>
 801f342:	3401      	adds	r4, #1
 801f344:	43bd      	bics	r5, r7
 801f346:	e7b7      	b.n	801f2b8 <ceil+0x3c>
 801f348:	2334      	movs	r3, #52	; 0x34
 801f34a:	1b9e      	subs	r6, r3, r6
 801f34c:	3b33      	subs	r3, #51	; 0x33
 801f34e:	40b3      	lsls	r3, r6
 801f350:	18ed      	adds	r5, r5, r3
 801f352:	9b03      	ldr	r3, [sp, #12]
 801f354:	429d      	cmp	r5, r3
 801f356:	419b      	sbcs	r3, r3
 801f358:	425b      	negs	r3, r3
 801f35a:	18e4      	adds	r4, r4, r3
 801f35c:	e7f2      	b.n	801f344 <ceil+0xc8>
 801f35e:	2480      	movs	r4, #128	; 0x80
 801f360:	2500      	movs	r5, #0
 801f362:	0624      	lsls	r4, r4, #24
 801f364:	e7a8      	b.n	801f2b8 <ceil+0x3c>
 801f366:	46c0      	nop			; (mov r8, r8)
 801f368:	fffffc01 	.word	0xfffffc01
 801f36c:	8800759c 	.word	0x8800759c
 801f370:	7e37e43c 	.word	0x7e37e43c
 801f374:	3ff00000 	.word	0x3ff00000
 801f378:	000fffff 	.word	0x000fffff
 801f37c:	fffffbed 	.word	0xfffffbed

0801f380 <floor>:
 801f380:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f382:	004b      	lsls	r3, r1, #1
 801f384:	4a39      	ldr	r2, [pc, #228]	; (801f46c <floor+0xec>)
 801f386:	0d5b      	lsrs	r3, r3, #21
 801f388:	b085      	sub	sp, #20
 801f38a:	189e      	adds	r6, r3, r2
 801f38c:	000c      	movs	r4, r1
 801f38e:	0005      	movs	r5, r0
 801f390:	9003      	str	r0, [sp, #12]
 801f392:	2e13      	cmp	r6, #19
 801f394:	dc34      	bgt.n	801f400 <floor+0x80>
 801f396:	2e00      	cmp	r6, #0
 801f398:	da15      	bge.n	801f3c6 <floor+0x46>
 801f39a:	4a35      	ldr	r2, [pc, #212]	; (801f470 <floor+0xf0>)
 801f39c:	4b35      	ldr	r3, [pc, #212]	; (801f474 <floor+0xf4>)
 801f39e:	f7e1 fbdd 	bl	8000b5c <__aeabi_dadd>
 801f3a2:	2200      	movs	r2, #0
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	f7e1 f857 	bl	8000458 <__aeabi_dcmpgt>
 801f3aa:	2800      	cmp	r0, #0
 801f3ac:	d008      	beq.n	801f3c0 <floor+0x40>
 801f3ae:	2c00      	cmp	r4, #0
 801f3b0:	da59      	bge.n	801f466 <floor+0xe6>
 801f3b2:	0063      	lsls	r3, r4, #1
 801f3b4:	085b      	lsrs	r3, r3, #1
 801f3b6:	432b      	orrs	r3, r5
 801f3b8:	2500      	movs	r5, #0
 801f3ba:	42ab      	cmp	r3, r5
 801f3bc:	d000      	beq.n	801f3c0 <floor+0x40>
 801f3be:	4c2e      	ldr	r4, [pc, #184]	; (801f478 <floor+0xf8>)
 801f3c0:	0028      	movs	r0, r5
 801f3c2:	0021      	movs	r1, r4
 801f3c4:	e026      	b.n	801f414 <floor+0x94>
 801f3c6:	4f2d      	ldr	r7, [pc, #180]	; (801f47c <floor+0xfc>)
 801f3c8:	4137      	asrs	r7, r6
 801f3ca:	003b      	movs	r3, r7
 801f3cc:	400b      	ands	r3, r1
 801f3ce:	4303      	orrs	r3, r0
 801f3d0:	d020      	beq.n	801f414 <floor+0x94>
 801f3d2:	9000      	str	r0, [sp, #0]
 801f3d4:	9101      	str	r1, [sp, #4]
 801f3d6:	4a26      	ldr	r2, [pc, #152]	; (801f470 <floor+0xf0>)
 801f3d8:	4b26      	ldr	r3, [pc, #152]	; (801f474 <floor+0xf4>)
 801f3da:	9800      	ldr	r0, [sp, #0]
 801f3dc:	9901      	ldr	r1, [sp, #4]
 801f3de:	f7e1 fbbd 	bl	8000b5c <__aeabi_dadd>
 801f3e2:	2200      	movs	r2, #0
 801f3e4:	2300      	movs	r3, #0
 801f3e6:	f7e1 f837 	bl	8000458 <__aeabi_dcmpgt>
 801f3ea:	2800      	cmp	r0, #0
 801f3ec:	d0e8      	beq.n	801f3c0 <floor+0x40>
 801f3ee:	2c00      	cmp	r4, #0
 801f3f0:	da03      	bge.n	801f3fa <floor+0x7a>
 801f3f2:	2380      	movs	r3, #128	; 0x80
 801f3f4:	035b      	lsls	r3, r3, #13
 801f3f6:	4133      	asrs	r3, r6
 801f3f8:	18e4      	adds	r4, r4, r3
 801f3fa:	43bc      	bics	r4, r7
 801f3fc:	2500      	movs	r5, #0
 801f3fe:	e7df      	b.n	801f3c0 <floor+0x40>
 801f400:	2e33      	cmp	r6, #51	; 0x33
 801f402:	dd09      	ble.n	801f418 <floor+0x98>
 801f404:	2380      	movs	r3, #128	; 0x80
 801f406:	00db      	lsls	r3, r3, #3
 801f408:	429e      	cmp	r6, r3
 801f40a:	d103      	bne.n	801f414 <floor+0x94>
 801f40c:	0002      	movs	r2, r0
 801f40e:	000b      	movs	r3, r1
 801f410:	f7e1 fba4 	bl	8000b5c <__aeabi_dadd>
 801f414:	b005      	add	sp, #20
 801f416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f418:	2701      	movs	r7, #1
 801f41a:	4a19      	ldr	r2, [pc, #100]	; (801f480 <floor+0x100>)
 801f41c:	427f      	negs	r7, r7
 801f41e:	189b      	adds	r3, r3, r2
 801f420:	40df      	lsrs	r7, r3
 801f422:	4238      	tst	r0, r7
 801f424:	d0f6      	beq.n	801f414 <floor+0x94>
 801f426:	9000      	str	r0, [sp, #0]
 801f428:	9101      	str	r1, [sp, #4]
 801f42a:	4a11      	ldr	r2, [pc, #68]	; (801f470 <floor+0xf0>)
 801f42c:	4b11      	ldr	r3, [pc, #68]	; (801f474 <floor+0xf4>)
 801f42e:	9800      	ldr	r0, [sp, #0]
 801f430:	9901      	ldr	r1, [sp, #4]
 801f432:	f7e1 fb93 	bl	8000b5c <__aeabi_dadd>
 801f436:	2200      	movs	r2, #0
 801f438:	2300      	movs	r3, #0
 801f43a:	f7e1 f80d 	bl	8000458 <__aeabi_dcmpgt>
 801f43e:	2800      	cmp	r0, #0
 801f440:	d0be      	beq.n	801f3c0 <floor+0x40>
 801f442:	2c00      	cmp	r4, #0
 801f444:	da02      	bge.n	801f44c <floor+0xcc>
 801f446:	2e14      	cmp	r6, #20
 801f448:	d102      	bne.n	801f450 <floor+0xd0>
 801f44a:	3401      	adds	r4, #1
 801f44c:	43bd      	bics	r5, r7
 801f44e:	e7b7      	b.n	801f3c0 <floor+0x40>
 801f450:	2334      	movs	r3, #52	; 0x34
 801f452:	1b9e      	subs	r6, r3, r6
 801f454:	3b33      	subs	r3, #51	; 0x33
 801f456:	40b3      	lsls	r3, r6
 801f458:	18ed      	adds	r5, r5, r3
 801f45a:	9b03      	ldr	r3, [sp, #12]
 801f45c:	429d      	cmp	r5, r3
 801f45e:	419b      	sbcs	r3, r3
 801f460:	425b      	negs	r3, r3
 801f462:	18e4      	adds	r4, r4, r3
 801f464:	e7f2      	b.n	801f44c <floor+0xcc>
 801f466:	2500      	movs	r5, #0
 801f468:	002c      	movs	r4, r5
 801f46a:	e7a9      	b.n	801f3c0 <floor+0x40>
 801f46c:	fffffc01 	.word	0xfffffc01
 801f470:	8800759c 	.word	0x8800759c
 801f474:	7e37e43c 	.word	0x7e37e43c
 801f478:	bff00000 	.word	0xbff00000
 801f47c:	000fffff 	.word	0x000fffff
 801f480:	fffffbed 	.word	0xfffffbed

0801f484 <round>:
 801f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f486:	004a      	lsls	r2, r1, #1
 801f488:	0007      	movs	r7, r0
 801f48a:	481f      	ldr	r0, [pc, #124]	; (801f508 <round+0x84>)
 801f48c:	0d52      	lsrs	r2, r2, #21
 801f48e:	1815      	adds	r5, r2, r0
 801f490:	000e      	movs	r6, r1
 801f492:	2d13      	cmp	r5, #19
 801f494:	dc18      	bgt.n	801f4c8 <round+0x44>
 801f496:	2d00      	cmp	r5, #0
 801f498:	da09      	bge.n	801f4ae <round+0x2a>
 801f49a:	0fcb      	lsrs	r3, r1, #31
 801f49c:	07db      	lsls	r3, r3, #31
 801f49e:	2200      	movs	r2, #0
 801f4a0:	1c69      	adds	r1, r5, #1
 801f4a2:	d101      	bne.n	801f4a8 <round+0x24>
 801f4a4:	4919      	ldr	r1, [pc, #100]	; (801f50c <round+0x88>)
 801f4a6:	430b      	orrs	r3, r1
 801f4a8:	0019      	movs	r1, r3
 801f4aa:	0010      	movs	r0, r2
 801f4ac:	e017      	b.n	801f4de <round+0x5a>
 801f4ae:	4a18      	ldr	r2, [pc, #96]	; (801f510 <round+0x8c>)
 801f4b0:	412a      	asrs	r2, r5
 801f4b2:	420a      	tst	r2, r1
 801f4b4:	d101      	bne.n	801f4ba <round+0x36>
 801f4b6:	2f00      	cmp	r7, #0
 801f4b8:	d012      	beq.n	801f4e0 <round+0x5c>
 801f4ba:	2380      	movs	r3, #128	; 0x80
 801f4bc:	031b      	lsls	r3, r3, #12
 801f4be:	412b      	asrs	r3, r5
 801f4c0:	199b      	adds	r3, r3, r6
 801f4c2:	4393      	bics	r3, r2
 801f4c4:	2200      	movs	r2, #0
 801f4c6:	e7ef      	b.n	801f4a8 <round+0x24>
 801f4c8:	2d33      	cmp	r5, #51	; 0x33
 801f4ca:	dd0b      	ble.n	801f4e4 <round+0x60>
 801f4cc:	2380      	movs	r3, #128	; 0x80
 801f4ce:	00db      	lsls	r3, r3, #3
 801f4d0:	429d      	cmp	r5, r3
 801f4d2:	d105      	bne.n	801f4e0 <round+0x5c>
 801f4d4:	003a      	movs	r2, r7
 801f4d6:	000b      	movs	r3, r1
 801f4d8:	0038      	movs	r0, r7
 801f4da:	f7e1 fb3f 	bl	8000b5c <__aeabi_dadd>
 801f4de:	0007      	movs	r7, r0
 801f4e0:	0038      	movs	r0, r7
 801f4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4e4:	2601      	movs	r6, #1
 801f4e6:	480b      	ldr	r0, [pc, #44]	; (801f514 <round+0x90>)
 801f4e8:	4276      	negs	r6, r6
 801f4ea:	1812      	adds	r2, r2, r0
 801f4ec:	40d6      	lsrs	r6, r2
 801f4ee:	423e      	tst	r6, r7
 801f4f0:	d0f6      	beq.n	801f4e0 <round+0x5c>
 801f4f2:	2233      	movs	r2, #51	; 0x33
 801f4f4:	1b55      	subs	r5, r2, r5
 801f4f6:	3a32      	subs	r2, #50	; 0x32
 801f4f8:	40aa      	lsls	r2, r5
 801f4fa:	19d2      	adds	r2, r2, r7
 801f4fc:	42ba      	cmp	r2, r7
 801f4fe:	41a4      	sbcs	r4, r4
 801f500:	4264      	negs	r4, r4
 801f502:	190b      	adds	r3, r1, r4
 801f504:	43b2      	bics	r2, r6
 801f506:	e7cf      	b.n	801f4a8 <round+0x24>
 801f508:	fffffc01 	.word	0xfffffc01
 801f50c:	3ff00000 	.word	0x3ff00000
 801f510:	000fffff 	.word	0x000fffff
 801f514:	fffffbed 	.word	0xfffffbed

0801f518 <_init>:
 801f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f51a:	46c0      	nop			; (mov r8, r8)
 801f51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f51e:	bc08      	pop	{r3}
 801f520:	469e      	mov	lr, r3
 801f522:	4770      	bx	lr

0801f524 <_fini>:
 801f524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f526:	46c0      	nop			; (mov r8, r8)
 801f528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f52a:	bc08      	pop	{r3}
 801f52c:	469e      	mov	lr, r3
 801f52e:	4770      	bx	lr
