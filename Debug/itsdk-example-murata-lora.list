
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002693c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000284c  080269fc  080269fc  000369fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029248  08029248  000400c4  2**0
                  CONTENTS
  4 .ARM          00000008  08029248  08029248  00039248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029250  08029250  000400c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029250  08029250  00039250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029254  08029254  00039254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08029258  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000220c  200000c8  0802931c  000400c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200022d4  0802931c  000422d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000400c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00081c44  00000000  00000000  000400ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000c23f  00000000  00000000  000c1d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000031b8  00000000  00000000  000cdf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002d38  00000000  00000000  000d1128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029740  00000000  00000000  000d3e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00042422  00000000  00000000  000fd5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b64ed  00000000  00000000  0013f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f5eaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b4b8  00000000  00000000  001f5f2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c8 	.word	0x200000c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080269e4 	.word	0x080269e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000cc 	.word	0x200000cc
 8000104:	080269e4 	.word	0x080269e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fba9 	bl	8001b6c <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fb01 	bl	8001a2c <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fb9b 	bl	8001b6c <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fb91 	bl	8001b6c <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb23 	bl	8001aa4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb19 	bl	8001aa4 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_cfrcmple>:
 8000480:	4684      	mov	ip, r0
 8000482:	1c08      	adds	r0, r1, #0
 8000484:	4661      	mov	r1, ip
 8000486:	e7ff      	b.n	8000488 <__aeabi_cfcmpeq>

08000488 <__aeabi_cfcmpeq>:
 8000488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048a:	f000 fa13 	bl	80008b4 <__lesf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	d401      	bmi.n	8000496 <__aeabi_cfcmpeq+0xe>
 8000492:	2100      	movs	r1, #0
 8000494:	42c8      	cmn	r0, r1
 8000496:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000498 <__aeabi_fcmpeq>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f000 f995 	bl	80007c8 <__eqsf2>
 800049e:	4240      	negs	r0, r0
 80004a0:	3001      	adds	r0, #1
 80004a2:	bd10      	pop	{r4, pc}

080004a4 <__aeabi_fcmplt>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fa05 	bl	80008b4 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	db01      	blt.n	80004b2 <__aeabi_fcmplt+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmple>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f9fb 	bl	80008b4 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dd01      	ble.n	80004c6 <__aeabi_fcmple+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpgt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f9a3 	bl	8000818 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dc01      	bgt.n	80004da <__aeabi_fcmpgt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpge>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f999 	bl	8000818 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	da01      	bge.n	80004ee <__aeabi_fcmpge+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_ldivmod>:
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d115      	bne.n	8000524 <__aeabi_ldivmod+0x30>
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d113      	bne.n	8000524 <__aeabi_ldivmod+0x30>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	db06      	blt.n	800050e <__aeabi_ldivmod+0x1a>
 8000500:	dc01      	bgt.n	8000506 <__aeabi_ldivmod+0x12>
 8000502:	2800      	cmp	r0, #0
 8000504:	d006      	beq.n	8000514 <__aeabi_ldivmod+0x20>
 8000506:	2000      	movs	r0, #0
 8000508:	43c0      	mvns	r0, r0
 800050a:	0841      	lsrs	r1, r0, #1
 800050c:	e002      	b.n	8000514 <__aeabi_ldivmod+0x20>
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0609      	lsls	r1, r1, #24
 8000512:	2000      	movs	r0, #0
 8000514:	b407      	push	{r0, r1, r2}
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <__aeabi_ldivmod+0x2c>)
 8000518:	a101      	add	r1, pc, #4	; (adr r1, 8000520 <__aeabi_ldivmod+0x2c>)
 800051a:	1840      	adds	r0, r0, r1
 800051c:	9002      	str	r0, [sp, #8]
 800051e:	bd03      	pop	{r0, r1, pc}
 8000520:	fffffee1 	.word	0xfffffee1
 8000524:	b403      	push	{r0, r1}
 8000526:	4668      	mov	r0, sp
 8000528:	b501      	push	{r0, lr}
 800052a:	9802      	ldr	r0, [sp, #8]
 800052c:	f000 f930 	bl	8000790 <__gnu_ldivmod_helper>
 8000530:	9b01      	ldr	r3, [sp, #4]
 8000532:	469e      	mov	lr, r3
 8000534:	b002      	add	sp, #8
 8000536:	bc0c      	pop	{r2, r3}
 8000538:	4770      	bx	lr
 800053a:	46c0      	nop			; (mov r8, r8)

0800053c <__aeabi_uldivmod>:
 800053c:	2b00      	cmp	r3, #0
 800053e:	d111      	bne.n	8000564 <__aeabi_uldivmod+0x28>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d10f      	bne.n	8000564 <__aeabi_uldivmod+0x28>
 8000544:	2900      	cmp	r1, #0
 8000546:	d100      	bne.n	800054a <__aeabi_uldivmod+0xe>
 8000548:	2800      	cmp	r0, #0
 800054a:	d002      	beq.n	8000552 <__aeabi_uldivmod+0x16>
 800054c:	2100      	movs	r1, #0
 800054e:	43c9      	mvns	r1, r1
 8000550:	1c08      	adds	r0, r1, #0
 8000552:	b407      	push	{r0, r1, r2}
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <__aeabi_uldivmod+0x24>)
 8000556:	a102      	add	r1, pc, #8	; (adr r1, 8000560 <__aeabi_uldivmod+0x24>)
 8000558:	1840      	adds	r0, r0, r1
 800055a:	9002      	str	r0, [sp, #8]
 800055c:	bd03      	pop	{r0, r1, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	fffffea1 	.word	0xfffffea1
 8000564:	b403      	push	{r0, r1}
 8000566:	4668      	mov	r0, sp
 8000568:	b501      	push	{r0, lr}
 800056a:	9802      	ldr	r0, [sp, #8]
 800056c:	f000 f84e 	bl	800060c <__udivmoddi4>
 8000570:	9b01      	ldr	r3, [sp, #4]
 8000572:	469e      	mov	lr, r3
 8000574:	b002      	add	sp, #8
 8000576:	bc0c      	pop	{r2, r3}
 8000578:	4770      	bx	lr
 800057a:	46c0      	nop			; (mov r8, r8)

0800057c <__aeabi_lmul>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	46ce      	mov	lr, r9
 8000580:	4647      	mov	r7, r8
 8000582:	0415      	lsls	r5, r2, #16
 8000584:	0c2d      	lsrs	r5, r5, #16
 8000586:	002e      	movs	r6, r5
 8000588:	b580      	push	{r7, lr}
 800058a:	0407      	lsls	r7, r0, #16
 800058c:	0c14      	lsrs	r4, r2, #16
 800058e:	0c3f      	lsrs	r7, r7, #16
 8000590:	4699      	mov	r9, r3
 8000592:	0c03      	lsrs	r3, r0, #16
 8000594:	437e      	muls	r6, r7
 8000596:	435d      	muls	r5, r3
 8000598:	4367      	muls	r7, r4
 800059a:	4363      	muls	r3, r4
 800059c:	197f      	adds	r7, r7, r5
 800059e:	0c34      	lsrs	r4, r6, #16
 80005a0:	19e4      	adds	r4, r4, r7
 80005a2:	469c      	mov	ip, r3
 80005a4:	42a5      	cmp	r5, r4
 80005a6:	d903      	bls.n	80005b0 <__aeabi_lmul+0x34>
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	025b      	lsls	r3, r3, #9
 80005ac:	4698      	mov	r8, r3
 80005ae:	44c4      	add	ip, r8
 80005b0:	464b      	mov	r3, r9
 80005b2:	4343      	muls	r3, r0
 80005b4:	4351      	muls	r1, r2
 80005b6:	0c25      	lsrs	r5, r4, #16
 80005b8:	0436      	lsls	r6, r6, #16
 80005ba:	4465      	add	r5, ip
 80005bc:	0c36      	lsrs	r6, r6, #16
 80005be:	0424      	lsls	r4, r4, #16
 80005c0:	19a4      	adds	r4, r4, r6
 80005c2:	195b      	adds	r3, r3, r5
 80005c4:	1859      	adds	r1, r3, r1
 80005c6:	0020      	movs	r0, r4
 80005c8:	bc0c      	pop	{r2, r3}
 80005ca:	4690      	mov	r8, r2
 80005cc:	4699      	mov	r9, r3
 80005ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d0 <__aeabi_d2uiz>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <__aeabi_d2uiz+0x38>)
 80005d6:	0004      	movs	r4, r0
 80005d8:	000d      	movs	r5, r1
 80005da:	f7ff ff47 	bl	800046c <__aeabi_dcmpge>
 80005de:	2800      	cmp	r0, #0
 80005e0:	d104      	bne.n	80005ec <__aeabi_d2uiz+0x1c>
 80005e2:	0020      	movs	r0, r4
 80005e4:	0029      	movs	r1, r5
 80005e6:	f002 f8e3 	bl	80027b0 <__aeabi_d2iz>
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <__aeabi_d2uiz+0x38>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	0020      	movs	r0, r4
 80005f2:	0029      	movs	r1, r5
 80005f4:	f001 fd94 	bl	8002120 <__aeabi_dsub>
 80005f8:	f002 f8da 	bl	80027b0 <__aeabi_d2iz>
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	469c      	mov	ip, r3
 8000602:	4460      	add	r0, ip
 8000604:	e7f1      	b.n	80005ea <__aeabi_d2uiz+0x1a>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	41e00000 	.word	0x41e00000

0800060c <__udivmoddi4>:
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	464f      	mov	r7, r9
 8000610:	4646      	mov	r6, r8
 8000612:	46d6      	mov	lr, sl
 8000614:	b5c0      	push	{r6, r7, lr}
 8000616:	0004      	movs	r4, r0
 8000618:	b082      	sub	sp, #8
 800061a:	000d      	movs	r5, r1
 800061c:	4691      	mov	r9, r2
 800061e:	4698      	mov	r8, r3
 8000620:	428b      	cmp	r3, r1
 8000622:	d82f      	bhi.n	8000684 <__udivmoddi4+0x78>
 8000624:	d02c      	beq.n	8000680 <__udivmoddi4+0x74>
 8000626:	4641      	mov	r1, r8
 8000628:	4648      	mov	r0, r9
 800062a:	f002 f9d3 	bl	80029d4 <__clzdi2>
 800062e:	0029      	movs	r1, r5
 8000630:	0006      	movs	r6, r0
 8000632:	0020      	movs	r0, r4
 8000634:	f002 f9ce 	bl	80029d4 <__clzdi2>
 8000638:	1a33      	subs	r3, r6, r0
 800063a:	469c      	mov	ip, r3
 800063c:	3b20      	subs	r3, #32
 800063e:	469a      	mov	sl, r3
 8000640:	d500      	bpl.n	8000644 <__udivmoddi4+0x38>
 8000642:	e076      	b.n	8000732 <__udivmoddi4+0x126>
 8000644:	464b      	mov	r3, r9
 8000646:	4652      	mov	r2, sl
 8000648:	4093      	lsls	r3, r2
 800064a:	001f      	movs	r7, r3
 800064c:	464b      	mov	r3, r9
 800064e:	4662      	mov	r2, ip
 8000650:	4093      	lsls	r3, r2
 8000652:	001e      	movs	r6, r3
 8000654:	42af      	cmp	r7, r5
 8000656:	d828      	bhi.n	80006aa <__udivmoddi4+0x9e>
 8000658:	d025      	beq.n	80006a6 <__udivmoddi4+0x9a>
 800065a:	4653      	mov	r3, sl
 800065c:	1ba4      	subs	r4, r4, r6
 800065e:	41bd      	sbcs	r5, r7
 8000660:	2b00      	cmp	r3, #0
 8000662:	da00      	bge.n	8000666 <__udivmoddi4+0x5a>
 8000664:	e07b      	b.n	800075e <__udivmoddi4+0x152>
 8000666:	2200      	movs	r2, #0
 8000668:	2300      	movs	r3, #0
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	4652      	mov	r2, sl
 8000672:	4093      	lsls	r3, r2
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	4662      	mov	r2, ip
 800067a:	4093      	lsls	r3, r2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	e018      	b.n	80006b2 <__udivmoddi4+0xa6>
 8000680:	4282      	cmp	r2, r0
 8000682:	d9d0      	bls.n	8000626 <__udivmoddi4+0x1a>
 8000684:	2200      	movs	r2, #0
 8000686:	2300      	movs	r3, #0
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <__udivmoddi4+0x8a>
 8000692:	601c      	str	r4, [r3, #0]
 8000694:	605d      	str	r5, [r3, #4]
 8000696:	9800      	ldr	r0, [sp, #0]
 8000698:	9901      	ldr	r1, [sp, #4]
 800069a:	b002      	add	sp, #8
 800069c:	bc1c      	pop	{r2, r3, r4}
 800069e:	4690      	mov	r8, r2
 80006a0:	4699      	mov	r9, r3
 80006a2:	46a2      	mov	sl, r4
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d9d7      	bls.n	800065a <__udivmoddi4+0x4e>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4663      	mov	r3, ip
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0e9      	beq.n	800068c <__udivmoddi4+0x80>
 80006b8:	07fb      	lsls	r3, r7, #31
 80006ba:	4698      	mov	r8, r3
 80006bc:	4641      	mov	r1, r8
 80006be:	0872      	lsrs	r2, r6, #1
 80006c0:	430a      	orrs	r2, r1
 80006c2:	087b      	lsrs	r3, r7, #1
 80006c4:	4666      	mov	r6, ip
 80006c6:	e00e      	b.n	80006e6 <__udivmoddi4+0xda>
 80006c8:	42ab      	cmp	r3, r5
 80006ca:	d101      	bne.n	80006d0 <__udivmoddi4+0xc4>
 80006cc:	42a2      	cmp	r2, r4
 80006ce:	d80c      	bhi.n	80006ea <__udivmoddi4+0xde>
 80006d0:	1aa4      	subs	r4, r4, r2
 80006d2:	419d      	sbcs	r5, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	1924      	adds	r4, r4, r4
 80006d8:	416d      	adcs	r5, r5
 80006da:	2100      	movs	r1, #0
 80006dc:	3e01      	subs	r6, #1
 80006de:	1824      	adds	r4, r4, r0
 80006e0:	414d      	adcs	r5, r1
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d006      	beq.n	80006f4 <__udivmoddi4+0xe8>
 80006e6:	42ab      	cmp	r3, r5
 80006e8:	d9ee      	bls.n	80006c8 <__udivmoddi4+0xbc>
 80006ea:	3e01      	subs	r6, #1
 80006ec:	1924      	adds	r4, r4, r4
 80006ee:	416d      	adcs	r5, r5
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d1f8      	bne.n	80006e6 <__udivmoddi4+0xda>
 80006f4:	9800      	ldr	r0, [sp, #0]
 80006f6:	9901      	ldr	r1, [sp, #4]
 80006f8:	4653      	mov	r3, sl
 80006fa:	1900      	adds	r0, r0, r4
 80006fc:	4169      	adcs	r1, r5
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db23      	blt.n	800074a <__udivmoddi4+0x13e>
 8000702:	002b      	movs	r3, r5
 8000704:	4652      	mov	r2, sl
 8000706:	40d3      	lsrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	4664      	mov	r4, ip
 800070c:	40e2      	lsrs	r2, r4
 800070e:	001c      	movs	r4, r3
 8000710:	4653      	mov	r3, sl
 8000712:	0015      	movs	r5, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	db2d      	blt.n	8000774 <__udivmoddi4+0x168>
 8000718:	0026      	movs	r6, r4
 800071a:	4657      	mov	r7, sl
 800071c:	40be      	lsls	r6, r7
 800071e:	0033      	movs	r3, r6
 8000720:	0026      	movs	r6, r4
 8000722:	4667      	mov	r7, ip
 8000724:	40be      	lsls	r6, r7
 8000726:	0032      	movs	r2, r6
 8000728:	1a80      	subs	r0, r0, r2
 800072a:	4199      	sbcs	r1, r3
 800072c:	9000      	str	r0, [sp, #0]
 800072e:	9101      	str	r1, [sp, #4]
 8000730:	e7ac      	b.n	800068c <__udivmoddi4+0x80>
 8000732:	4662      	mov	r2, ip
 8000734:	2320      	movs	r3, #32
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	464a      	mov	r2, r9
 800073a:	40da      	lsrs	r2, r3
 800073c:	4661      	mov	r1, ip
 800073e:	0013      	movs	r3, r2
 8000740:	4642      	mov	r2, r8
 8000742:	408a      	lsls	r2, r1
 8000744:	0017      	movs	r7, r2
 8000746:	431f      	orrs	r7, r3
 8000748:	e780      	b.n	800064c <__udivmoddi4+0x40>
 800074a:	4662      	mov	r2, ip
 800074c:	2320      	movs	r3, #32
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	002a      	movs	r2, r5
 8000752:	4666      	mov	r6, ip
 8000754:	409a      	lsls	r2, r3
 8000756:	0023      	movs	r3, r4
 8000758:	40f3      	lsrs	r3, r6
 800075a:	4313      	orrs	r3, r2
 800075c:	e7d4      	b.n	8000708 <__udivmoddi4+0xfc>
 800075e:	4662      	mov	r2, ip
 8000760:	2320      	movs	r3, #32
 8000762:	2100      	movs	r1, #0
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	2200      	movs	r2, #0
 8000768:	9100      	str	r1, [sp, #0]
 800076a:	9201      	str	r2, [sp, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	40da      	lsrs	r2, r3
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	e780      	b.n	8000676 <__udivmoddi4+0x6a>
 8000774:	2320      	movs	r3, #32
 8000776:	4662      	mov	r2, ip
 8000778:	0026      	movs	r6, r4
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	40de      	lsrs	r6, r3
 800077e:	002f      	movs	r7, r5
 8000780:	46b0      	mov	r8, r6
 8000782:	4666      	mov	r6, ip
 8000784:	40b7      	lsls	r7, r6
 8000786:	4646      	mov	r6, r8
 8000788:	003b      	movs	r3, r7
 800078a:	4333      	orrs	r3, r6
 800078c:	e7c8      	b.n	8000720 <__udivmoddi4+0x114>
 800078e:	46c0      	nop			; (mov r8, r8)

08000790 <__gnu_ldivmod_helper>:
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	0016      	movs	r6, r2
 8000796:	001f      	movs	r7, r3
 8000798:	9000      	str	r0, [sp, #0]
 800079a:	9101      	str	r1, [sp, #4]
 800079c:	f002 f926 	bl	80029ec <__divdi3>
 80007a0:	0004      	movs	r4, r0
 80007a2:	000d      	movs	r5, r1
 80007a4:	0002      	movs	r2, r0
 80007a6:	000b      	movs	r3, r1
 80007a8:	0030      	movs	r0, r6
 80007aa:	0039      	movs	r1, r7
 80007ac:	f7ff fee6 	bl	800057c <__aeabi_lmul>
 80007b0:	9a00      	ldr	r2, [sp, #0]
 80007b2:	9b01      	ldr	r3, [sp, #4]
 80007b4:	1a12      	subs	r2, r2, r0
 80007b6:	418b      	sbcs	r3, r1
 80007b8:	9908      	ldr	r1, [sp, #32]
 80007ba:	0020      	movs	r0, r4
 80007bc:	600a      	str	r2, [r1, #0]
 80007be:	604b      	str	r3, [r1, #4]
 80007c0:	0029      	movs	r1, r5
 80007c2:	b003      	add	sp, #12
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)

080007c8 <__eqsf2>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	0042      	lsls	r2, r0, #1
 80007cc:	024e      	lsls	r6, r1, #9
 80007ce:	004c      	lsls	r4, r1, #1
 80007d0:	0245      	lsls	r5, r0, #9
 80007d2:	0a6d      	lsrs	r5, r5, #9
 80007d4:	0e12      	lsrs	r2, r2, #24
 80007d6:	0fc3      	lsrs	r3, r0, #31
 80007d8:	0a76      	lsrs	r6, r6, #9
 80007da:	0e24      	lsrs	r4, r4, #24
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	2aff      	cmp	r2, #255	; 0xff
 80007e0:	d00f      	beq.n	8000802 <__eqsf2+0x3a>
 80007e2:	2cff      	cmp	r4, #255	; 0xff
 80007e4:	d011      	beq.n	800080a <__eqsf2+0x42>
 80007e6:	2001      	movs	r0, #1
 80007e8:	42a2      	cmp	r2, r4
 80007ea:	d000      	beq.n	80007ee <__eqsf2+0x26>
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	42b5      	cmp	r5, r6
 80007f0:	d1fc      	bne.n	80007ec <__eqsf2+0x24>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d00d      	beq.n	8000812 <__eqsf2+0x4a>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d1f8      	bne.n	80007ec <__eqsf2+0x24>
 80007fa:	0028      	movs	r0, r5
 80007fc:	1e45      	subs	r5, r0, #1
 80007fe:	41a8      	sbcs	r0, r5
 8000800:	e7f4      	b.n	80007ec <__eqsf2+0x24>
 8000802:	2001      	movs	r0, #1
 8000804:	2d00      	cmp	r5, #0
 8000806:	d1f1      	bne.n	80007ec <__eqsf2+0x24>
 8000808:	e7eb      	b.n	80007e2 <__eqsf2+0x1a>
 800080a:	2001      	movs	r0, #1
 800080c:	2e00      	cmp	r6, #0
 800080e:	d1ed      	bne.n	80007ec <__eqsf2+0x24>
 8000810:	e7e9      	b.n	80007e6 <__eqsf2+0x1e>
 8000812:	2000      	movs	r0, #0
 8000814:	e7ea      	b.n	80007ec <__eqsf2+0x24>
 8000816:	46c0      	nop			; (mov r8, r8)

08000818 <__gesf2>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	004a      	lsls	r2, r1, #1
 800081c:	024e      	lsls	r6, r1, #9
 800081e:	0245      	lsls	r5, r0, #9
 8000820:	0044      	lsls	r4, r0, #1
 8000822:	0a6d      	lsrs	r5, r5, #9
 8000824:	0e24      	lsrs	r4, r4, #24
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a76      	lsrs	r6, r6, #9
 800082a:	0e12      	lsrs	r2, r2, #24
 800082c:	0fc9      	lsrs	r1, r1, #31
 800082e:	2cff      	cmp	r4, #255	; 0xff
 8000830:	d015      	beq.n	800085e <__gesf2+0x46>
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d00e      	beq.n	8000854 <__gesf2+0x3c>
 8000836:	2c00      	cmp	r4, #0
 8000838:	d115      	bne.n	8000866 <__gesf2+0x4e>
 800083a:	2a00      	cmp	r2, #0
 800083c:	d101      	bne.n	8000842 <__gesf2+0x2a>
 800083e:	2e00      	cmp	r6, #0
 8000840:	d01c      	beq.n	800087c <__gesf2+0x64>
 8000842:	2d00      	cmp	r5, #0
 8000844:	d014      	beq.n	8000870 <__gesf2+0x58>
 8000846:	428b      	cmp	r3, r1
 8000848:	d027      	beq.n	800089a <__gesf2+0x82>
 800084a:	2002      	movs	r0, #2
 800084c:	3b01      	subs	r3, #1
 800084e:	4018      	ands	r0, r3
 8000850:	3801      	subs	r0, #1
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	2e00      	cmp	r6, #0
 8000856:	d0ee      	beq.n	8000836 <__gesf2+0x1e>
 8000858:	2002      	movs	r0, #2
 800085a:	4240      	negs	r0, r0
 800085c:	e7f9      	b.n	8000852 <__gesf2+0x3a>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d1fa      	bne.n	8000858 <__gesf2+0x40>
 8000862:	2aff      	cmp	r2, #255	; 0xff
 8000864:	d00e      	beq.n	8000884 <__gesf2+0x6c>
 8000866:	2a00      	cmp	r2, #0
 8000868:	d10e      	bne.n	8000888 <__gesf2+0x70>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d0ed      	beq.n	800084a <__gesf2+0x32>
 800086e:	e00b      	b.n	8000888 <__gesf2+0x70>
 8000870:	2301      	movs	r3, #1
 8000872:	3901      	subs	r1, #1
 8000874:	4399      	bics	r1, r3
 8000876:	0008      	movs	r0, r1
 8000878:	3001      	adds	r0, #1
 800087a:	e7ea      	b.n	8000852 <__gesf2+0x3a>
 800087c:	2000      	movs	r0, #0
 800087e:	2d00      	cmp	r5, #0
 8000880:	d0e7      	beq.n	8000852 <__gesf2+0x3a>
 8000882:	e7e2      	b.n	800084a <__gesf2+0x32>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d1e7      	bne.n	8000858 <__gesf2+0x40>
 8000888:	428b      	cmp	r3, r1
 800088a:	d1de      	bne.n	800084a <__gesf2+0x32>
 800088c:	4294      	cmp	r4, r2
 800088e:	dd05      	ble.n	800089c <__gesf2+0x84>
 8000890:	2102      	movs	r1, #2
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	4008      	ands	r0, r1
 8000896:	3801      	subs	r0, #1
 8000898:	e7db      	b.n	8000852 <__gesf2+0x3a>
 800089a:	2400      	movs	r4, #0
 800089c:	42a2      	cmp	r2, r4
 800089e:	dc04      	bgt.n	80008aa <__gesf2+0x92>
 80008a0:	42b5      	cmp	r5, r6
 80008a2:	d8d2      	bhi.n	800084a <__gesf2+0x32>
 80008a4:	2000      	movs	r0, #0
 80008a6:	42b5      	cmp	r5, r6
 80008a8:	d2d3      	bcs.n	8000852 <__gesf2+0x3a>
 80008aa:	1e58      	subs	r0, r3, #1
 80008ac:	2301      	movs	r3, #1
 80008ae:	4398      	bics	r0, r3
 80008b0:	3001      	adds	r0, #1
 80008b2:	e7ce      	b.n	8000852 <__gesf2+0x3a>

080008b4 <__lesf2>:
 80008b4:	b530      	push	{r4, r5, lr}
 80008b6:	0042      	lsls	r2, r0, #1
 80008b8:	0244      	lsls	r4, r0, #9
 80008ba:	024d      	lsls	r5, r1, #9
 80008bc:	0fc3      	lsrs	r3, r0, #31
 80008be:	0048      	lsls	r0, r1, #1
 80008c0:	0a64      	lsrs	r4, r4, #9
 80008c2:	0e12      	lsrs	r2, r2, #24
 80008c4:	0a6d      	lsrs	r5, r5, #9
 80008c6:	0e00      	lsrs	r0, r0, #24
 80008c8:	0fc9      	lsrs	r1, r1, #31
 80008ca:	2aff      	cmp	r2, #255	; 0xff
 80008cc:	d012      	beq.n	80008f4 <__lesf2+0x40>
 80008ce:	28ff      	cmp	r0, #255	; 0xff
 80008d0:	d00c      	beq.n	80008ec <__lesf2+0x38>
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d112      	bne.n	80008fc <__lesf2+0x48>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d119      	bne.n	800090e <__lesf2+0x5a>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d117      	bne.n	800090e <__lesf2+0x5a>
 80008de:	2c00      	cmp	r4, #0
 80008e0:	d02b      	beq.n	800093a <__lesf2+0x86>
 80008e2:	2002      	movs	r0, #2
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4018      	ands	r0, r3
 80008e8:	3801      	subs	r0, #1
 80008ea:	e026      	b.n	800093a <__lesf2+0x86>
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d0f0      	beq.n	80008d2 <__lesf2+0x1e>
 80008f0:	2002      	movs	r0, #2
 80008f2:	e022      	b.n	800093a <__lesf2+0x86>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d1fb      	bne.n	80008f0 <__lesf2+0x3c>
 80008f8:	28ff      	cmp	r0, #255	; 0xff
 80008fa:	d01f      	beq.n	800093c <__lesf2+0x88>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d11f      	bne.n	8000940 <__lesf2+0x8c>
 8000900:	2d00      	cmp	r5, #0
 8000902:	d11d      	bne.n	8000940 <__lesf2+0x8c>
 8000904:	2002      	movs	r0, #2
 8000906:	3b01      	subs	r3, #1
 8000908:	4018      	ands	r0, r3
 800090a:	3801      	subs	r0, #1
 800090c:	e015      	b.n	800093a <__lesf2+0x86>
 800090e:	2c00      	cmp	r4, #0
 8000910:	d00e      	beq.n	8000930 <__lesf2+0x7c>
 8000912:	428b      	cmp	r3, r1
 8000914:	d1e5      	bne.n	80008e2 <__lesf2+0x2e>
 8000916:	2200      	movs	r2, #0
 8000918:	4290      	cmp	r0, r2
 800091a:	dc04      	bgt.n	8000926 <__lesf2+0x72>
 800091c:	42ac      	cmp	r4, r5
 800091e:	d8e0      	bhi.n	80008e2 <__lesf2+0x2e>
 8000920:	2000      	movs	r0, #0
 8000922:	42ac      	cmp	r4, r5
 8000924:	d209      	bcs.n	800093a <__lesf2+0x86>
 8000926:	1e58      	subs	r0, r3, #1
 8000928:	2301      	movs	r3, #1
 800092a:	4398      	bics	r0, r3
 800092c:	3001      	adds	r0, #1
 800092e:	e004      	b.n	800093a <__lesf2+0x86>
 8000930:	2301      	movs	r3, #1
 8000932:	3901      	subs	r1, #1
 8000934:	4399      	bics	r1, r3
 8000936:	0008      	movs	r0, r1
 8000938:	3001      	adds	r0, #1
 800093a:	bd30      	pop	{r4, r5, pc}
 800093c:	2d00      	cmp	r5, #0
 800093e:	d1d7      	bne.n	80008f0 <__lesf2+0x3c>
 8000940:	428b      	cmp	r3, r1
 8000942:	d1ce      	bne.n	80008e2 <__lesf2+0x2e>
 8000944:	4282      	cmp	r2, r0
 8000946:	dde7      	ble.n	8000918 <__lesf2+0x64>
 8000948:	2102      	movs	r1, #2
 800094a:	1e58      	subs	r0, r3, #1
 800094c:	4008      	ands	r0, r1
 800094e:	3801      	subs	r0, #1
 8000950:	e7f3      	b.n	800093a <__lesf2+0x86>
 8000952:	46c0      	nop			; (mov r8, r8)

08000954 <__aeabi_fsub>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	4647      	mov	r7, r8
 8000958:	46ce      	mov	lr, r9
 800095a:	0044      	lsls	r4, r0, #1
 800095c:	0fc2      	lsrs	r2, r0, #31
 800095e:	b580      	push	{r7, lr}
 8000960:	0247      	lsls	r7, r0, #9
 8000962:	0248      	lsls	r0, r1, #9
 8000964:	0a40      	lsrs	r0, r0, #9
 8000966:	4684      	mov	ip, r0
 8000968:	4666      	mov	r6, ip
 800096a:	0048      	lsls	r0, r1, #1
 800096c:	0a7f      	lsrs	r7, r7, #9
 800096e:	0e24      	lsrs	r4, r4, #24
 8000970:	00f6      	lsls	r6, r6, #3
 8000972:	0025      	movs	r5, r4
 8000974:	4690      	mov	r8, r2
 8000976:	00fb      	lsls	r3, r7, #3
 8000978:	0e00      	lsrs	r0, r0, #24
 800097a:	0fc9      	lsrs	r1, r1, #31
 800097c:	46b1      	mov	r9, r6
 800097e:	28ff      	cmp	r0, #255	; 0xff
 8000980:	d100      	bne.n	8000984 <__aeabi_fsub+0x30>
 8000982:	e085      	b.n	8000a90 <__aeabi_fsub+0x13c>
 8000984:	2601      	movs	r6, #1
 8000986:	4071      	eors	r1, r6
 8000988:	1a26      	subs	r6, r4, r0
 800098a:	4291      	cmp	r1, r2
 800098c:	d057      	beq.n	8000a3e <__aeabi_fsub+0xea>
 800098e:	2e00      	cmp	r6, #0
 8000990:	dd43      	ble.n	8000a1a <__aeabi_fsub+0xc6>
 8000992:	2800      	cmp	r0, #0
 8000994:	d000      	beq.n	8000998 <__aeabi_fsub+0x44>
 8000996:	e07f      	b.n	8000a98 <__aeabi_fsub+0x144>
 8000998:	4649      	mov	r1, r9
 800099a:	2900      	cmp	r1, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fsub+0x4c>
 800099e:	e0aa      	b.n	8000af6 <__aeabi_fsub+0x1a2>
 80009a0:	3e01      	subs	r6, #1
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fsub+0x54>
 80009a6:	e0f7      	b.n	8000b98 <__aeabi_fsub+0x244>
 80009a8:	1a5b      	subs	r3, r3, r1
 80009aa:	015a      	lsls	r2, r3, #5
 80009ac:	d400      	bmi.n	80009b0 <__aeabi_fsub+0x5c>
 80009ae:	e08b      	b.n	8000ac8 <__aeabi_fsub+0x174>
 80009b0:	019b      	lsls	r3, r3, #6
 80009b2:	099c      	lsrs	r4, r3, #6
 80009b4:	0020      	movs	r0, r4
 80009b6:	f001 ffef 	bl	8002998 <__clzsi2>
 80009ba:	3805      	subs	r0, #5
 80009bc:	4084      	lsls	r4, r0
 80009be:	4285      	cmp	r5, r0
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_fsub+0x70>
 80009c2:	e0d3      	b.n	8000b6c <__aeabi_fsub+0x218>
 80009c4:	1b45      	subs	r5, r0, r5
 80009c6:	0023      	movs	r3, r4
 80009c8:	2020      	movs	r0, #32
 80009ca:	3501      	adds	r5, #1
 80009cc:	40eb      	lsrs	r3, r5
 80009ce:	1b45      	subs	r5, r0, r5
 80009d0:	40ac      	lsls	r4, r5
 80009d2:	1e62      	subs	r2, r4, #1
 80009d4:	4194      	sbcs	r4, r2
 80009d6:	4323      	orrs	r3, r4
 80009d8:	2407      	movs	r4, #7
 80009da:	2500      	movs	r5, #0
 80009dc:	401c      	ands	r4, r3
 80009de:	2201      	movs	r2, #1
 80009e0:	4641      	mov	r1, r8
 80009e2:	400a      	ands	r2, r1
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d004      	beq.n	80009f2 <__aeabi_fsub+0x9e>
 80009e8:	210f      	movs	r1, #15
 80009ea:	4019      	ands	r1, r3
 80009ec:	2904      	cmp	r1, #4
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fsub+0x9e>
 80009f0:	3304      	adds	r3, #4
 80009f2:	0159      	lsls	r1, r3, #5
 80009f4:	d400      	bmi.n	80009f8 <__aeabi_fsub+0xa4>
 80009f6:	e080      	b.n	8000afa <__aeabi_fsub+0x1a6>
 80009f8:	3501      	adds	r5, #1
 80009fa:	b2ec      	uxtb	r4, r5
 80009fc:	2dff      	cmp	r5, #255	; 0xff
 80009fe:	d000      	beq.n	8000a02 <__aeabi_fsub+0xae>
 8000a00:	e0a3      	b.n	8000b4a <__aeabi_fsub+0x1f6>
 8000a02:	24ff      	movs	r4, #255	; 0xff
 8000a04:	2300      	movs	r3, #0
 8000a06:	025b      	lsls	r3, r3, #9
 8000a08:	05e4      	lsls	r4, r4, #23
 8000a0a:	0a58      	lsrs	r0, r3, #9
 8000a0c:	07d2      	lsls	r2, r2, #31
 8000a0e:	4320      	orrs	r0, r4
 8000a10:	4310      	orrs	r0, r2
 8000a12:	bc0c      	pop	{r2, r3}
 8000a14:	4690      	mov	r8, r2
 8000a16:	4699      	mov	r9, r3
 8000a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	d174      	bne.n	8000b08 <__aeabi_fsub+0x1b4>
 8000a1e:	1c60      	adds	r0, r4, #1
 8000a20:	b2c0      	uxtb	r0, r0
 8000a22:	2801      	cmp	r0, #1
 8000a24:	dc00      	bgt.n	8000a28 <__aeabi_fsub+0xd4>
 8000a26:	e0a7      	b.n	8000b78 <__aeabi_fsub+0x224>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	1a9c      	subs	r4, r3, r2
 8000a2c:	0162      	lsls	r2, r4, #5
 8000a2e:	d500      	bpl.n	8000a32 <__aeabi_fsub+0xde>
 8000a30:	e0b6      	b.n	8000ba0 <__aeabi_fsub+0x24c>
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d1be      	bne.n	80009b4 <__aeabi_fsub+0x60>
 8000a36:	2200      	movs	r2, #0
 8000a38:	2400      	movs	r4, #0
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e7e3      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	dc00      	bgt.n	8000a44 <__aeabi_fsub+0xf0>
 8000a42:	e085      	b.n	8000b50 <__aeabi_fsub+0x1fc>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d046      	beq.n	8000ad6 <__aeabi_fsub+0x182>
 8000a48:	2cff      	cmp	r4, #255	; 0xff
 8000a4a:	d049      	beq.n	8000ae0 <__aeabi_fsub+0x18c>
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	4648      	mov	r0, r9
 8000a50:	04d2      	lsls	r2, r2, #19
 8000a52:	4310      	orrs	r0, r2
 8000a54:	4681      	mov	r9, r0
 8000a56:	2201      	movs	r2, #1
 8000a58:	2e1b      	cmp	r6, #27
 8000a5a:	dc09      	bgt.n	8000a70 <__aeabi_fsub+0x11c>
 8000a5c:	2020      	movs	r0, #32
 8000a5e:	464c      	mov	r4, r9
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	4084      	lsls	r4, r0
 8000a64:	464a      	mov	r2, r9
 8000a66:	0020      	movs	r0, r4
 8000a68:	40f2      	lsrs	r2, r6
 8000a6a:	1e44      	subs	r4, r0, #1
 8000a6c:	41a0      	sbcs	r0, r4
 8000a6e:	4302      	orrs	r2, r0
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	015a      	lsls	r2, r3, #5
 8000a74:	d528      	bpl.n	8000ac8 <__aeabi_fsub+0x174>
 8000a76:	3501      	adds	r5, #1
 8000a78:	2dff      	cmp	r5, #255	; 0xff
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_fsub+0x12a>
 8000a7c:	e0a8      	b.n	8000bd0 <__aeabi_fsub+0x27c>
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2407      	movs	r4, #7
 8000a82:	4994      	ldr	r1, [pc, #592]	; (8000cd4 <__aeabi_fsub+0x380>)
 8000a84:	401a      	ands	r2, r3
 8000a86:	085b      	lsrs	r3, r3, #1
 8000a88:	400b      	ands	r3, r1
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	401c      	ands	r4, r3
 8000a8e:	e7a6      	b.n	80009de <__aeabi_fsub+0x8a>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fsub+0x142>
 8000a94:	e778      	b.n	8000988 <__aeabi_fsub+0x34>
 8000a96:	e775      	b.n	8000984 <__aeabi_fsub+0x30>
 8000a98:	2cff      	cmp	r4, #255	; 0xff
 8000a9a:	d054      	beq.n	8000b46 <__aeabi_fsub+0x1f2>
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	4649      	mov	r1, r9
 8000aa0:	04d2      	lsls	r2, r2, #19
 8000aa2:	4311      	orrs	r1, r2
 8000aa4:	4689      	mov	r9, r1
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2e1b      	cmp	r6, #27
 8000aaa:	dc09      	bgt.n	8000ac0 <__aeabi_fsub+0x16c>
 8000aac:	2120      	movs	r1, #32
 8000aae:	4648      	mov	r0, r9
 8000ab0:	1b89      	subs	r1, r1, r6
 8000ab2:	4088      	lsls	r0, r1
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	0001      	movs	r1, r0
 8000ab8:	40f2      	lsrs	r2, r6
 8000aba:	1e48      	subs	r0, r1, #1
 8000abc:	4181      	sbcs	r1, r0
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	015a      	lsls	r2, r3, #5
 8000ac4:	d500      	bpl.n	8000ac8 <__aeabi_fsub+0x174>
 8000ac6:	e773      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4641      	mov	r1, r8
 8000acc:	400a      	ands	r2, r1
 8000ace:	0759      	lsls	r1, r3, #29
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_fsub+0x180>
 8000ad2:	e789      	b.n	80009e8 <__aeabi_fsub+0x94>
 8000ad4:	e011      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000ad6:	4648      	mov	r0, r9
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d158      	bne.n	8000b8e <__aeabi_fsub+0x23a>
 8000adc:	2cff      	cmp	r4, #255	; 0xff
 8000ade:	d10c      	bne.n	8000afa <__aeabi_fsub+0x1a6>
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fsub+0x194>
 8000ae6:	e78c      	b.n	8000a02 <__aeabi_fsub+0xae>
 8000ae8:	2080      	movs	r0, #128	; 0x80
 8000aea:	03c0      	lsls	r0, r0, #15
 8000aec:	4303      	orrs	r3, r0
 8000aee:	025b      	lsls	r3, r3, #9
 8000af0:	0a5b      	lsrs	r3, r3, #9
 8000af2:	24ff      	movs	r4, #255	; 0xff
 8000af4:	e787      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d025      	beq.n	8000b46 <__aeabi_fsub+0x1f2>
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	2dff      	cmp	r5, #255	; 0xff
 8000afe:	d0f0      	beq.n	8000ae2 <__aeabi_fsub+0x18e>
 8000b00:	025b      	lsls	r3, r3, #9
 8000b02:	0a5b      	lsrs	r3, r3, #9
 8000b04:	b2ec      	uxtb	r4, r5
 8000b06:	e77e      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d04d      	beq.n	8000ba8 <__aeabi_fsub+0x254>
 8000b0c:	28ff      	cmp	r0, #255	; 0xff
 8000b0e:	d018      	beq.n	8000b42 <__aeabi_fsub+0x1ee>
 8000b10:	2480      	movs	r4, #128	; 0x80
 8000b12:	04e4      	lsls	r4, r4, #19
 8000b14:	4272      	negs	r2, r6
 8000b16:	4323      	orrs	r3, r4
 8000b18:	2a1b      	cmp	r2, #27
 8000b1a:	dd00      	ble.n	8000b1e <__aeabi_fsub+0x1ca>
 8000b1c:	e0c4      	b.n	8000ca8 <__aeabi_fsub+0x354>
 8000b1e:	001c      	movs	r4, r3
 8000b20:	2520      	movs	r5, #32
 8000b22:	40d4      	lsrs	r4, r2
 8000b24:	1aaa      	subs	r2, r5, r2
 8000b26:	4093      	lsls	r3, r2
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4323      	orrs	r3, r4
 8000b2e:	464a      	mov	r2, r9
 8000b30:	0005      	movs	r5, r0
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	4688      	mov	r8, r1
 8000b36:	e738      	b.n	80009aa <__aeabi_fsub+0x56>
 8000b38:	1c72      	adds	r2, r6, #1
 8000b3a:	d0f8      	beq.n	8000b2e <__aeabi_fsub+0x1da>
 8000b3c:	43f2      	mvns	r2, r6
 8000b3e:	28ff      	cmp	r0, #255	; 0xff
 8000b40:	d1ea      	bne.n	8000b18 <__aeabi_fsub+0x1c4>
 8000b42:	000a      	movs	r2, r1
 8000b44:	464b      	mov	r3, r9
 8000b46:	25ff      	movs	r5, #255	; 0xff
 8000b48:	e7d7      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000b4a:	019b      	lsls	r3, r3, #6
 8000b4c:	0a5b      	lsrs	r3, r3, #9
 8000b4e:	e75a      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d141      	bne.n	8000bd8 <__aeabi_fsub+0x284>
 8000b54:	1c65      	adds	r5, r4, #1
 8000b56:	b2e9      	uxtb	r1, r5
 8000b58:	2901      	cmp	r1, #1
 8000b5a:	dd45      	ble.n	8000be8 <__aeabi_fsub+0x294>
 8000b5c:	2dff      	cmp	r5, #255	; 0xff
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fsub+0x20e>
 8000b60:	e74f      	b.n	8000a02 <__aeabi_fsub+0xae>
 8000b62:	2407      	movs	r4, #7
 8000b64:	444b      	add	r3, r9
 8000b66:	085b      	lsrs	r3, r3, #1
 8000b68:	401c      	ands	r4, r3
 8000b6a:	e738      	b.n	80009de <__aeabi_fsub+0x8a>
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	4b5a      	ldr	r3, [pc, #360]	; (8000cd8 <__aeabi_fsub+0x384>)
 8000b70:	1a2d      	subs	r5, r5, r0
 8000b72:	4023      	ands	r3, r4
 8000b74:	4014      	ands	r4, r2
 8000b76:	e732      	b.n	80009de <__aeabi_fsub+0x8a>
 8000b78:	2c00      	cmp	r4, #0
 8000b7a:	d11d      	bne.n	8000bb8 <__aeabi_fsub+0x264>
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d17a      	bne.n	8000c76 <__aeabi_fsub+0x322>
 8000b80:	464b      	mov	r3, r9
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x234>
 8000b86:	e091      	b.n	8000cac <__aeabi_fsub+0x358>
 8000b88:	000a      	movs	r2, r1
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	e7b5      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000b8e:	3e01      	subs	r6, #1
 8000b90:	2e00      	cmp	r6, #0
 8000b92:	d119      	bne.n	8000bc8 <__aeabi_fsub+0x274>
 8000b94:	444b      	add	r3, r9
 8000b96:	e76c      	b.n	8000a72 <__aeabi_fsub+0x11e>
 8000b98:	2cff      	cmp	r4, #255	; 0xff
 8000b9a:	d184      	bne.n	8000aa6 <__aeabi_fsub+0x152>
 8000b9c:	25ff      	movs	r5, #255	; 0xff
 8000b9e:	e7ac      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	4688      	mov	r8, r1
 8000ba4:	1ad4      	subs	r4, r2, r3
 8000ba6:	e705      	b.n	80009b4 <__aeabi_fsub+0x60>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1c5      	bne.n	8000b38 <__aeabi_fsub+0x1e4>
 8000bac:	000a      	movs	r2, r1
 8000bae:	28ff      	cmp	r0, #255	; 0xff
 8000bb0:	d0c8      	beq.n	8000b44 <__aeabi_fsub+0x1f0>
 8000bb2:	0005      	movs	r5, r0
 8000bb4:	464b      	mov	r3, r9
 8000bb6:	e7a0      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d149      	bne.n	8000c50 <__aeabi_fsub+0x2fc>
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d077      	beq.n	8000cb2 <__aeabi_fsub+0x35e>
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	25ff      	movs	r5, #255	; 0xff
 8000bc6:	e798      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000bc8:	2cff      	cmp	r4, #255	; 0xff
 8000bca:	d000      	beq.n	8000bce <__aeabi_fsub+0x27a>
 8000bcc:	e743      	b.n	8000a56 <__aeabi_fsub+0x102>
 8000bce:	e787      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000bd0:	000a      	movs	r2, r1
 8000bd2:	24ff      	movs	r4, #255	; 0xff
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e716      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d115      	bne.n	8000c08 <__aeabi_fsub+0x2b4>
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d157      	bne.n	8000c90 <__aeabi_fsub+0x33c>
 8000be0:	28ff      	cmp	r0, #255	; 0xff
 8000be2:	d1e6      	bne.n	8000bb2 <__aeabi_fsub+0x25e>
 8000be4:	464b      	mov	r3, r9
 8000be6:	e77b      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d120      	bne.n	8000c2e <__aeabi_fsub+0x2da>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d057      	beq.n	8000ca0 <__aeabi_fsub+0x34c>
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d053      	beq.n	8000c9e <__aeabi_fsub+0x34a>
 8000bf6:	444b      	add	r3, r9
 8000bf8:	015a      	lsls	r2, r3, #5
 8000bfa:	d568      	bpl.n	8000cce <__aeabi_fsub+0x37a>
 8000bfc:	2407      	movs	r4, #7
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <__aeabi_fsub+0x384>)
 8000c00:	401c      	ands	r4, r3
 8000c02:	2501      	movs	r5, #1
 8000c04:	4013      	ands	r3, r2
 8000c06:	e6ea      	b.n	80009de <__aeabi_fsub+0x8a>
 8000c08:	28ff      	cmp	r0, #255	; 0xff
 8000c0a:	d0eb      	beq.n	8000be4 <__aeabi_fsub+0x290>
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	04d2      	lsls	r2, r2, #19
 8000c10:	4276      	negs	r6, r6
 8000c12:	4313      	orrs	r3, r2
 8000c14:	2e1b      	cmp	r6, #27
 8000c16:	dc53      	bgt.n	8000cc0 <__aeabi_fsub+0x36c>
 8000c18:	2520      	movs	r5, #32
 8000c1a:	1bad      	subs	r5, r5, r6
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	40ab      	lsls	r3, r5
 8000c20:	40f2      	lsrs	r2, r6
 8000c22:	1e5c      	subs	r4, r3, #1
 8000c24:	41a3      	sbcs	r3, r4
 8000c26:	4313      	orrs	r3, r2
 8000c28:	444b      	add	r3, r9
 8000c2a:	0005      	movs	r5, r0
 8000c2c:	e721      	b.n	8000a72 <__aeabi_fsub+0x11e>
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0d8      	beq.n	8000be4 <__aeabi_fsub+0x290>
 8000c32:	4649      	mov	r1, r9
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fsub+0x2e6>
 8000c38:	e752      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	03c9      	lsls	r1, r1, #15
 8000c3e:	420f      	tst	r7, r1
 8000c40:	d100      	bne.n	8000c44 <__aeabi_fsub+0x2f0>
 8000c42:	e74d      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c44:	4660      	mov	r0, ip
 8000c46:	4208      	tst	r0, r1
 8000c48:	d000      	beq.n	8000c4c <__aeabi_fsub+0x2f8>
 8000c4a:	e749      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	e747      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c50:	4648      	mov	r0, r9
 8000c52:	25ff      	movs	r5, #255	; 0xff
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x306>
 8000c58:	e74f      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	03d2      	lsls	r2, r2, #15
 8000c5e:	4217      	tst	r7, r2
 8000c60:	d004      	beq.n	8000c6c <__aeabi_fsub+0x318>
 8000c62:	4660      	mov	r0, ip
 8000c64:	4210      	tst	r0, r2
 8000c66:	d101      	bne.n	8000c6c <__aeabi_fsub+0x318>
 8000c68:	464b      	mov	r3, r9
 8000c6a:	4688      	mov	r8, r1
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4641      	mov	r1, r8
 8000c70:	25ff      	movs	r5, #255	; 0xff
 8000c72:	400a      	ands	r2, r1
 8000c74:	e741      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000c76:	4648      	mov	r0, r9
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d01f      	beq.n	8000cbc <__aeabi_fsub+0x368>
 8000c7c:	1a1a      	subs	r2, r3, r0
 8000c7e:	0150      	lsls	r0, r2, #5
 8000c80:	d520      	bpl.n	8000cc4 <__aeabi_fsub+0x370>
 8000c82:	464a      	mov	r2, r9
 8000c84:	2407      	movs	r4, #7
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	401c      	ands	r4, r3
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	e6a6      	b.n	80009de <__aeabi_fsub+0x8a>
 8000c90:	1c74      	adds	r4, r6, #1
 8000c92:	d0c9      	beq.n	8000c28 <__aeabi_fsub+0x2d4>
 8000c94:	43f6      	mvns	r6, r6
 8000c96:	28ff      	cmp	r0, #255	; 0xff
 8000c98:	d1bc      	bne.n	8000c14 <__aeabi_fsub+0x2c0>
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	e720      	b.n	8000ae0 <__aeabi_fsub+0x18c>
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	2500      	movs	r5, #0
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	e72b      	b.n	8000b00 <__aeabi_fsub+0x1ac>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e740      	b.n	8000b2e <__aeabi_fsub+0x1da>
 8000cac:	2200      	movs	r2, #0
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e6a9      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	03db      	lsls	r3, r3, #15
 8000cb8:	24ff      	movs	r4, #255	; 0xff
 8000cba:	e6a4      	b.n	8000a06 <__aeabi_fsub+0xb2>
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	e71c      	b.n	8000afa <__aeabi_fsub+0x1a6>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e7b1      	b.n	8000c28 <__aeabi_fsub+0x2d4>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d0f1      	beq.n	8000cac <__aeabi_fsub+0x358>
 8000cc8:	0013      	movs	r3, r2
 8000cca:	2500      	movs	r5, #0
 8000ccc:	e6fc      	b.n	8000ac8 <__aeabi_fsub+0x174>
 8000cce:	2500      	movs	r5, #0
 8000cd0:	e6fa      	b.n	8000ac8 <__aeabi_fsub+0x174>
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	7dffffff 	.word	0x7dffffff
 8000cd8:	fbffffff 	.word	0xfbffffff

08000cdc <__aeabi_i2f>:
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	d03d      	beq.n	8000d5e <__aeabi_i2f+0x82>
 8000ce2:	17c3      	asrs	r3, r0, #31
 8000ce4:	18c5      	adds	r5, r0, r3
 8000ce6:	405d      	eors	r5, r3
 8000ce8:	0fc4      	lsrs	r4, r0, #31
 8000cea:	0028      	movs	r0, r5
 8000cec:	f001 fe54 	bl	8002998 <__clzsi2>
 8000cf0:	229e      	movs	r2, #158	; 0x9e
 8000cf2:	1a12      	subs	r2, r2, r0
 8000cf4:	2a96      	cmp	r2, #150	; 0x96
 8000cf6:	dc07      	bgt.n	8000d08 <__aeabi_i2f+0x2c>
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	2808      	cmp	r0, #8
 8000cfc:	dd33      	ble.n	8000d66 <__aeabi_i2f+0x8a>
 8000cfe:	3808      	subs	r0, #8
 8000d00:	4085      	lsls	r5, r0
 8000d02:	0268      	lsls	r0, r5, #9
 8000d04:	0a40      	lsrs	r0, r0, #9
 8000d06:	e023      	b.n	8000d50 <__aeabi_i2f+0x74>
 8000d08:	2a99      	cmp	r2, #153	; 0x99
 8000d0a:	dd0b      	ble.n	8000d24 <__aeabi_i2f+0x48>
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	0029      	movs	r1, r5
 8000d10:	1a1b      	subs	r3, r3, r0
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	0003      	movs	r3, r0
 8000d16:	331b      	adds	r3, #27
 8000d18:	409d      	lsls	r5, r3
 8000d1a:	002b      	movs	r3, r5
 8000d1c:	1e5d      	subs	r5, r3, #1
 8000d1e:	41ab      	sbcs	r3, r5
 8000d20:	4319      	orrs	r1, r3
 8000d22:	000d      	movs	r5, r1
 8000d24:	2805      	cmp	r0, #5
 8000d26:	dd01      	ble.n	8000d2c <__aeabi_i2f+0x50>
 8000d28:	1f43      	subs	r3, r0, #5
 8000d2a:	409d      	lsls	r5, r3
 8000d2c:	002b      	movs	r3, r5
 8000d2e:	490f      	ldr	r1, [pc, #60]	; (8000d6c <__aeabi_i2f+0x90>)
 8000d30:	400b      	ands	r3, r1
 8000d32:	076e      	lsls	r6, r5, #29
 8000d34:	d009      	beq.n	8000d4a <__aeabi_i2f+0x6e>
 8000d36:	260f      	movs	r6, #15
 8000d38:	4035      	ands	r5, r6
 8000d3a:	2d04      	cmp	r5, #4
 8000d3c:	d005      	beq.n	8000d4a <__aeabi_i2f+0x6e>
 8000d3e:	3304      	adds	r3, #4
 8000d40:	015d      	lsls	r5, r3, #5
 8000d42:	d502      	bpl.n	8000d4a <__aeabi_i2f+0x6e>
 8000d44:	229f      	movs	r2, #159	; 0x9f
 8000d46:	400b      	ands	r3, r1
 8000d48:	1a12      	subs	r2, r2, r0
 8000d4a:	019b      	lsls	r3, r3, #6
 8000d4c:	0a58      	lsrs	r0, r3, #9
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	0240      	lsls	r0, r0, #9
 8000d52:	05d2      	lsls	r2, r2, #23
 8000d54:	0a40      	lsrs	r0, r0, #9
 8000d56:	07e4      	lsls	r4, r4, #31
 8000d58:	4310      	orrs	r0, r2
 8000d5a:	4320      	orrs	r0, r4
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2200      	movs	r2, #0
 8000d62:	2000      	movs	r0, #0
 8000d64:	e7f4      	b.n	8000d50 <__aeabi_i2f+0x74>
 8000d66:	0268      	lsls	r0, r5, #9
 8000d68:	0a40      	lsrs	r0, r0, #9
 8000d6a:	e7f1      	b.n	8000d50 <__aeabi_i2f+0x74>
 8000d6c:	fbffffff 	.word	0xfbffffff

08000d70 <__aeabi_ui2f>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	1e04      	subs	r4, r0, #0
 8000d74:	d034      	beq.n	8000de0 <__aeabi_ui2f+0x70>
 8000d76:	f001 fe0f 	bl	8002998 <__clzsi2>
 8000d7a:	229e      	movs	r2, #158	; 0x9e
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	2a96      	cmp	r2, #150	; 0x96
 8000d80:	dc07      	bgt.n	8000d92 <__aeabi_ui2f+0x22>
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	2808      	cmp	r0, #8
 8000d86:	dd2e      	ble.n	8000de6 <__aeabi_ui2f+0x76>
 8000d88:	3808      	subs	r0, #8
 8000d8a:	4084      	lsls	r4, r0
 8000d8c:	0260      	lsls	r0, r4, #9
 8000d8e:	0a40      	lsrs	r0, r0, #9
 8000d90:	e021      	b.n	8000dd6 <__aeabi_ui2f+0x66>
 8000d92:	2a99      	cmp	r2, #153	; 0x99
 8000d94:	dd09      	ble.n	8000daa <__aeabi_ui2f+0x3a>
 8000d96:	0003      	movs	r3, r0
 8000d98:	0021      	movs	r1, r4
 8000d9a:	331b      	adds	r3, #27
 8000d9c:	4099      	lsls	r1, r3
 8000d9e:	1e4b      	subs	r3, r1, #1
 8000da0:	4199      	sbcs	r1, r3
 8000da2:	2305      	movs	r3, #5
 8000da4:	1a1b      	subs	r3, r3, r0
 8000da6:	40dc      	lsrs	r4, r3
 8000da8:	430c      	orrs	r4, r1
 8000daa:	2805      	cmp	r0, #5
 8000dac:	dd01      	ble.n	8000db2 <__aeabi_ui2f+0x42>
 8000dae:	1f43      	subs	r3, r0, #5
 8000db0:	409c      	lsls	r4, r3
 8000db2:	0023      	movs	r3, r4
 8000db4:	490d      	ldr	r1, [pc, #52]	; (8000dec <__aeabi_ui2f+0x7c>)
 8000db6:	400b      	ands	r3, r1
 8000db8:	0765      	lsls	r5, r4, #29
 8000dba:	d009      	beq.n	8000dd0 <__aeabi_ui2f+0x60>
 8000dbc:	250f      	movs	r5, #15
 8000dbe:	402c      	ands	r4, r5
 8000dc0:	2c04      	cmp	r4, #4
 8000dc2:	d005      	beq.n	8000dd0 <__aeabi_ui2f+0x60>
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	015c      	lsls	r4, r3, #5
 8000dc8:	d502      	bpl.n	8000dd0 <__aeabi_ui2f+0x60>
 8000dca:	229f      	movs	r2, #159	; 0x9f
 8000dcc:	400b      	ands	r3, r1
 8000dce:	1a12      	subs	r2, r2, r0
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	0a58      	lsrs	r0, r3, #9
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	0240      	lsls	r0, r0, #9
 8000dd8:	05d2      	lsls	r2, r2, #23
 8000dda:	0a40      	lsrs	r0, r0, #9
 8000ddc:	4310      	orrs	r0, r2
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
 8000de0:	2200      	movs	r2, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	e7f7      	b.n	8000dd6 <__aeabi_ui2f+0x66>
 8000de6:	0260      	lsls	r0, r4, #9
 8000de8:	0a40      	lsrs	r0, r0, #9
 8000dea:	e7f4      	b.n	8000dd6 <__aeabi_ui2f+0x66>
 8000dec:	fbffffff 	.word	0xfbffffff

08000df0 <__aeabi_dadd>:
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	464f      	mov	r7, r9
 8000df4:	4646      	mov	r6, r8
 8000df6:	46d6      	mov	lr, sl
 8000df8:	000c      	movs	r4, r1
 8000dfa:	0309      	lsls	r1, r1, #12
 8000dfc:	b5c0      	push	{r6, r7, lr}
 8000dfe:	0a49      	lsrs	r1, r1, #9
 8000e00:	0f47      	lsrs	r7, r0, #29
 8000e02:	005e      	lsls	r6, r3, #1
 8000e04:	4339      	orrs	r1, r7
 8000e06:	031f      	lsls	r7, r3, #12
 8000e08:	0fdb      	lsrs	r3, r3, #31
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	0065      	lsls	r5, r4, #1
 8000e0e:	0a7b      	lsrs	r3, r7, #9
 8000e10:	0f57      	lsrs	r7, r2, #29
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0d6d      	lsrs	r5, r5, #21
 8000e16:	0fe4      	lsrs	r4, r4, #31
 8000e18:	0d76      	lsrs	r6, r6, #21
 8000e1a:	46a1      	mov	r9, r4
 8000e1c:	00c0      	lsls	r0, r0, #3
 8000e1e:	46b8      	mov	r8, r7
 8000e20:	00d2      	lsls	r2, r2, #3
 8000e22:	1bab      	subs	r3, r5, r6
 8000e24:	4564      	cmp	r4, ip
 8000e26:	d07b      	beq.n	8000f20 <__aeabi_dadd+0x130>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dd5f      	ble.n	8000eec <__aeabi_dadd+0xfc>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x42>
 8000e30:	e0a4      	b.n	8000f7c <__aeabi_dadd+0x18c>
 8000e32:	003e      	movs	r6, r7
 8000e34:	4316      	orrs	r6, r2
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x4a>
 8000e38:	e112      	b.n	8001060 <__aeabi_dadd+0x270>
 8000e3a:	1e5e      	subs	r6, r3, #1
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dadd+0x52>
 8000e40:	e19e      	b.n	8001180 <__aeabi_dadd+0x390>
 8000e42:	1a87      	subs	r7, r0, r2
 8000e44:	4643      	mov	r3, r8
 8000e46:	42b8      	cmp	r0, r7
 8000e48:	4180      	sbcs	r0, r0
 8000e4a:	2501      	movs	r5, #1
 8000e4c:	1ac9      	subs	r1, r1, r3
 8000e4e:	4240      	negs	r0, r0
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	020b      	lsls	r3, r1, #8
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_dadd+0x68>
 8000e56:	e131      	b.n	80010bc <__aeabi_dadd+0x2cc>
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	0a4e      	lsrs	r6, r1, #9
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x72>
 8000e60:	e16e      	b.n	8001140 <__aeabi_dadd+0x350>
 8000e62:	0030      	movs	r0, r6
 8000e64:	f001 fd98 	bl	8002998 <__clzsi2>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	3b08      	subs	r3, #8
 8000e6c:	2b1f      	cmp	r3, #31
 8000e6e:	dd00      	ble.n	8000e72 <__aeabi_dadd+0x82>
 8000e70:	e161      	b.n	8001136 <__aeabi_dadd+0x346>
 8000e72:	2220      	movs	r2, #32
 8000e74:	0039      	movs	r1, r7
 8000e76:	1ad2      	subs	r2, r2, r3
 8000e78:	409e      	lsls	r6, r3
 8000e7a:	40d1      	lsrs	r1, r2
 8000e7c:	409f      	lsls	r7, r3
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	429d      	cmp	r5, r3
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_dadd+0x96>
 8000e84:	e151      	b.n	800112a <__aeabi_dadd+0x33a>
 8000e86:	1b5d      	subs	r5, r3, r5
 8000e88:	1c6b      	adds	r3, r5, #1
 8000e8a:	2b1f      	cmp	r3, #31
 8000e8c:	dd00      	ble.n	8000e90 <__aeabi_dadd+0xa0>
 8000e8e:	e17c      	b.n	800118a <__aeabi_dadd+0x39a>
 8000e90:	2120      	movs	r1, #32
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	003d      	movs	r5, r7
 8000e96:	0030      	movs	r0, r6
 8000e98:	408f      	lsls	r7, r1
 8000e9a:	4088      	lsls	r0, r1
 8000e9c:	40dd      	lsrs	r5, r3
 8000e9e:	1e79      	subs	r1, r7, #1
 8000ea0:	418f      	sbcs	r7, r1
 8000ea2:	0031      	movs	r1, r6
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	4328      	orrs	r0, r5
 8000ea8:	40d9      	lsrs	r1, r3
 8000eaa:	2500      	movs	r5, #0
 8000eac:	4307      	orrs	r7, r0
 8000eae:	403a      	ands	r2, r7
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d009      	beq.n	8000ec8 <__aeabi_dadd+0xd8>
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	403b      	ands	r3, r7
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d005      	beq.n	8000ec8 <__aeabi_dadd+0xd8>
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	42bb      	cmp	r3, r7
 8000ec0:	41bf      	sbcs	r7, r7
 8000ec2:	427f      	negs	r7, r7
 8000ec4:	19c9      	adds	r1, r1, r7
 8000ec6:	001f      	movs	r7, r3
 8000ec8:	020b      	lsls	r3, r1, #8
 8000eca:	d400      	bmi.n	8000ece <__aeabi_dadd+0xde>
 8000ecc:	e226      	b.n	800131c <__aeabi_dadd+0x52c>
 8000ece:	1c6a      	adds	r2, r5, #1
 8000ed0:	4bc6      	ldr	r3, [pc, #792]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000ed2:	0555      	lsls	r5, r2, #21
 8000ed4:	0d6d      	lsrs	r5, r5, #21
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dadd+0xec>
 8000eda:	e106      	b.n	80010ea <__aeabi_dadd+0x2fa>
 8000edc:	4ac4      	ldr	r2, [pc, #784]	; (80011f0 <__aeabi_dadd+0x400>)
 8000ede:	08ff      	lsrs	r7, r7, #3
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	0753      	lsls	r3, r2, #29
 8000ee4:	0252      	lsls	r2, r2, #9
 8000ee6:	433b      	orrs	r3, r7
 8000ee8:	0b12      	lsrs	r2, r2, #12
 8000eea:	e08e      	b.n	800100a <__aeabi_dadd+0x21a>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dadd+0x102>
 8000ef0:	e0b8      	b.n	8001064 <__aeabi_dadd+0x274>
 8000ef2:	1c6b      	adds	r3, r5, #1
 8000ef4:	055b      	lsls	r3, r3, #21
 8000ef6:	0d5b      	lsrs	r3, r3, #21
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_dadd+0x10e>
 8000efc:	e130      	b.n	8001160 <__aeabi_dadd+0x370>
 8000efe:	1a87      	subs	r7, r0, r2
 8000f00:	4643      	mov	r3, r8
 8000f02:	42b8      	cmp	r0, r7
 8000f04:	41b6      	sbcs	r6, r6
 8000f06:	1acb      	subs	r3, r1, r3
 8000f08:	4276      	negs	r6, r6
 8000f0a:	1b9e      	subs	r6, r3, r6
 8000f0c:	0233      	lsls	r3, r6, #8
 8000f0e:	d500      	bpl.n	8000f12 <__aeabi_dadd+0x122>
 8000f10:	e14c      	b.n	80011ac <__aeabi_dadd+0x3bc>
 8000f12:	003b      	movs	r3, r7
 8000f14:	4333      	orrs	r3, r6
 8000f16:	d1a1      	bne.n	8000e5c <__aeabi_dadd+0x6c>
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	e070      	b.n	8001002 <__aeabi_dadd+0x212>
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	dc00      	bgt.n	8000f26 <__aeabi_dadd+0x136>
 8000f24:	e0e5      	b.n	80010f2 <__aeabi_dadd+0x302>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dadd+0x13c>
 8000f2a:	e083      	b.n	8001034 <__aeabi_dadd+0x244>
 8000f2c:	4eaf      	ldr	r6, [pc, #700]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000f2e:	42b5      	cmp	r5, r6
 8000f30:	d060      	beq.n	8000ff4 <__aeabi_dadd+0x204>
 8000f32:	2680      	movs	r6, #128	; 0x80
 8000f34:	0436      	lsls	r6, r6, #16
 8000f36:	4337      	orrs	r7, r6
 8000f38:	46b8      	mov	r8, r7
 8000f3a:	2b38      	cmp	r3, #56	; 0x38
 8000f3c:	dc00      	bgt.n	8000f40 <__aeabi_dadd+0x150>
 8000f3e:	e13e      	b.n	80011be <__aeabi_dadd+0x3ce>
 8000f40:	4643      	mov	r3, r8
 8000f42:	4313      	orrs	r3, r2
 8000f44:	001f      	movs	r7, r3
 8000f46:	1e7a      	subs	r2, r7, #1
 8000f48:	4197      	sbcs	r7, r2
 8000f4a:	183f      	adds	r7, r7, r0
 8000f4c:	4287      	cmp	r7, r0
 8000f4e:	4180      	sbcs	r0, r0
 8000f50:	4240      	negs	r0, r0
 8000f52:	1809      	adds	r1, r1, r0
 8000f54:	020b      	lsls	r3, r1, #8
 8000f56:	d400      	bmi.n	8000f5a <__aeabi_dadd+0x16a>
 8000f58:	e0b0      	b.n	80010bc <__aeabi_dadd+0x2cc>
 8000f5a:	4ba4      	ldr	r3, [pc, #656]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000f5c:	3501      	adds	r5, #1
 8000f5e:	429d      	cmp	r5, r3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dadd+0x174>
 8000f62:	e0c3      	b.n	80010ec <__aeabi_dadd+0x2fc>
 8000f64:	4aa2      	ldr	r2, [pc, #648]	; (80011f0 <__aeabi_dadd+0x400>)
 8000f66:	087b      	lsrs	r3, r7, #1
 8000f68:	400a      	ands	r2, r1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	400f      	ands	r7, r1
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0851      	lsrs	r1, r2, #1
 8000f72:	07d3      	lsls	r3, r2, #31
 8000f74:	2207      	movs	r2, #7
 8000f76:	431f      	orrs	r7, r3
 8000f78:	403a      	ands	r2, r7
 8000f7a:	e799      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 8000f7c:	4e9b      	ldr	r6, [pc, #620]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000f7e:	42b5      	cmp	r5, r6
 8000f80:	d038      	beq.n	8000ff4 <__aeabi_dadd+0x204>
 8000f82:	2680      	movs	r6, #128	; 0x80
 8000f84:	0436      	lsls	r6, r6, #16
 8000f86:	4337      	orrs	r7, r6
 8000f88:	46b8      	mov	r8, r7
 8000f8a:	2b38      	cmp	r3, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_dadd+0x1a0>
 8000f8e:	e0dc      	b.n	800114a <__aeabi_dadd+0x35a>
 8000f90:	2b1f      	cmp	r3, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_dadd+0x1a6>
 8000f94:	e130      	b.n	80011f8 <__aeabi_dadd+0x408>
 8000f96:	001e      	movs	r6, r3
 8000f98:	4647      	mov	r7, r8
 8000f9a:	3e20      	subs	r6, #32
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	46bc      	mov	ip, r7
 8000fa0:	2b20      	cmp	r3, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_dadd+0x1be>
 8000fa4:	2640      	movs	r6, #64	; 0x40
 8000fa6:	1af3      	subs	r3, r6, r3
 8000fa8:	4646      	mov	r6, r8
 8000faa:	409e      	lsls	r6, r3
 8000fac:	4332      	orrs	r2, r6
 8000fae:	0017      	movs	r7, r2
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	1e7a      	subs	r2, r7, #1
 8000fb4:	4197      	sbcs	r7, r2
 8000fb6:	431f      	orrs	r7, r3
 8000fb8:	e0cc      	b.n	8001154 <__aeabi_dadd+0x364>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dadd+0x1d0>
 8000fbe:	e204      	b.n	80013ca <__aeabi_dadd+0x5da>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_dadd+0x1d8>
 8000fc6:	e159      	b.n	800127c <__aeabi_dadd+0x48c>
 8000fc8:	074b      	lsls	r3, r1, #29
 8000fca:	08c0      	lsrs	r0, r0, #3
 8000fcc:	4318      	orrs	r0, r3
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	08c9      	lsrs	r1, r1, #3
 8000fd2:	031b      	lsls	r3, r3, #12
 8000fd4:	4219      	tst	r1, r3
 8000fd6:	d008      	beq.n	8000fea <__aeabi_dadd+0x1fa>
 8000fd8:	4645      	mov	r5, r8
 8000fda:	08ed      	lsrs	r5, r5, #3
 8000fdc:	421d      	tst	r5, r3
 8000fde:	d104      	bne.n	8000fea <__aeabi_dadd+0x1fa>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	08d0      	lsrs	r0, r2, #3
 8000fe4:	0759      	lsls	r1, r3, #29
 8000fe6:	4308      	orrs	r0, r1
 8000fe8:	0029      	movs	r1, r5
 8000fea:	0f42      	lsrs	r2, r0, #29
 8000fec:	00c9      	lsls	r1, r1, #3
 8000fee:	4d7f      	ldr	r5, [pc, #508]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000ff0:	4311      	orrs	r1, r2
 8000ff2:	00c0      	lsls	r0, r0, #3
 8000ff4:	074b      	lsls	r3, r1, #29
 8000ff6:	08ca      	lsrs	r2, r1, #3
 8000ff8:	497c      	ldr	r1, [pc, #496]	; (80011ec <__aeabi_dadd+0x3fc>)
 8000ffa:	08c0      	lsrs	r0, r0, #3
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	428d      	cmp	r5, r1
 8001000:	d068      	beq.n	80010d4 <__aeabi_dadd+0x2e4>
 8001002:	0312      	lsls	r2, r2, #12
 8001004:	056d      	lsls	r5, r5, #21
 8001006:	0b12      	lsrs	r2, r2, #12
 8001008:	0d6d      	lsrs	r5, r5, #21
 800100a:	2100      	movs	r1, #0
 800100c:	0312      	lsls	r2, r2, #12
 800100e:	0018      	movs	r0, r3
 8001010:	0b13      	lsrs	r3, r2, #12
 8001012:	0d0a      	lsrs	r2, r1, #20
 8001014:	0512      	lsls	r2, r2, #20
 8001016:	431a      	orrs	r2, r3
 8001018:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <__aeabi_dadd+0x404>)
 800101a:	052d      	lsls	r5, r5, #20
 800101c:	4013      	ands	r3, r2
 800101e:	432b      	orrs	r3, r5
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	07e4      	lsls	r4, r4, #31
 8001024:	085b      	lsrs	r3, r3, #1
 8001026:	4323      	orrs	r3, r4
 8001028:	0019      	movs	r1, r3
 800102a:	bc1c      	pop	{r2, r3, r4}
 800102c:	4690      	mov	r8, r2
 800102e:	4699      	mov	r9, r3
 8001030:	46a2      	mov	sl, r4
 8001032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001034:	003e      	movs	r6, r7
 8001036:	4316      	orrs	r6, r2
 8001038:	d012      	beq.n	8001060 <__aeabi_dadd+0x270>
 800103a:	1e5e      	subs	r6, r3, #1
 800103c:	2e00      	cmp	r6, #0
 800103e:	d000      	beq.n	8001042 <__aeabi_dadd+0x252>
 8001040:	e100      	b.n	8001244 <__aeabi_dadd+0x454>
 8001042:	1887      	adds	r7, r0, r2
 8001044:	4287      	cmp	r7, r0
 8001046:	4180      	sbcs	r0, r0
 8001048:	4441      	add	r1, r8
 800104a:	4240      	negs	r0, r0
 800104c:	1809      	adds	r1, r1, r0
 800104e:	2501      	movs	r5, #1
 8001050:	020b      	lsls	r3, r1, #8
 8001052:	d533      	bpl.n	80010bc <__aeabi_dadd+0x2cc>
 8001054:	2502      	movs	r5, #2
 8001056:	e785      	b.n	8000f64 <__aeabi_dadd+0x174>
 8001058:	4664      	mov	r4, ip
 800105a:	0033      	movs	r3, r6
 800105c:	4641      	mov	r1, r8
 800105e:	0010      	movs	r0, r2
 8001060:	001d      	movs	r5, r3
 8001062:	e7c7      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001064:	2d00      	cmp	r5, #0
 8001066:	d000      	beq.n	800106a <__aeabi_dadd+0x27a>
 8001068:	e0da      	b.n	8001220 <__aeabi_dadd+0x430>
 800106a:	000c      	movs	r4, r1
 800106c:	4304      	orrs	r4, r0
 800106e:	d0f3      	beq.n	8001058 <__aeabi_dadd+0x268>
 8001070:	1c5c      	adds	r4, r3, #1
 8001072:	d100      	bne.n	8001076 <__aeabi_dadd+0x286>
 8001074:	e19f      	b.n	80013b6 <__aeabi_dadd+0x5c6>
 8001076:	4c5d      	ldr	r4, [pc, #372]	; (80011ec <__aeabi_dadd+0x3fc>)
 8001078:	42a6      	cmp	r6, r4
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x28e>
 800107c:	e12f      	b.n	80012de <__aeabi_dadd+0x4ee>
 800107e:	43db      	mvns	r3, r3
 8001080:	2b38      	cmp	r3, #56	; 0x38
 8001082:	dd00      	ble.n	8001086 <__aeabi_dadd+0x296>
 8001084:	e166      	b.n	8001354 <__aeabi_dadd+0x564>
 8001086:	2b1f      	cmp	r3, #31
 8001088:	dd00      	ble.n	800108c <__aeabi_dadd+0x29c>
 800108a:	e183      	b.n	8001394 <__aeabi_dadd+0x5a4>
 800108c:	2420      	movs	r4, #32
 800108e:	0005      	movs	r5, r0
 8001090:	1ae4      	subs	r4, r4, r3
 8001092:	000f      	movs	r7, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	40d9      	lsrs	r1, r3
 8001098:	40a0      	lsls	r0, r4
 800109a:	4643      	mov	r3, r8
 800109c:	40a7      	lsls	r7, r4
 800109e:	1a5b      	subs	r3, r3, r1
 80010a0:	1e44      	subs	r4, r0, #1
 80010a2:	41a0      	sbcs	r0, r4
 80010a4:	4698      	mov	r8, r3
 80010a6:	432f      	orrs	r7, r5
 80010a8:	4338      	orrs	r0, r7
 80010aa:	1a17      	subs	r7, r2, r0
 80010ac:	42ba      	cmp	r2, r7
 80010ae:	4192      	sbcs	r2, r2
 80010b0:	4643      	mov	r3, r8
 80010b2:	4252      	negs	r2, r2
 80010b4:	1a99      	subs	r1, r3, r2
 80010b6:	4664      	mov	r4, ip
 80010b8:	0035      	movs	r5, r6
 80010ba:	e6ca      	b.n	8000e52 <__aeabi_dadd+0x62>
 80010bc:	2207      	movs	r2, #7
 80010be:	403a      	ands	r2, r7
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_dadd+0x2d6>
 80010c4:	e6f6      	b.n	8000eb4 <__aeabi_dadd+0xc4>
 80010c6:	074b      	lsls	r3, r1, #29
 80010c8:	08ca      	lsrs	r2, r1, #3
 80010ca:	4948      	ldr	r1, [pc, #288]	; (80011ec <__aeabi_dadd+0x3fc>)
 80010cc:	08ff      	lsrs	r7, r7, #3
 80010ce:	433b      	orrs	r3, r7
 80010d0:	428d      	cmp	r5, r1
 80010d2:	d196      	bne.n	8001002 <__aeabi_dadd+0x212>
 80010d4:	0019      	movs	r1, r3
 80010d6:	4311      	orrs	r1, r2
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x2ec>
 80010da:	e19e      	b.n	800141a <__aeabi_dadd+0x62a>
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0309      	lsls	r1, r1, #12
 80010e0:	430a      	orrs	r2, r1
 80010e2:	0312      	lsls	r2, r2, #12
 80010e4:	0b12      	lsrs	r2, r2, #12
 80010e6:	4d41      	ldr	r5, [pc, #260]	; (80011ec <__aeabi_dadd+0x3fc>)
 80010e8:	e78f      	b.n	800100a <__aeabi_dadd+0x21a>
 80010ea:	0015      	movs	r5, r2
 80010ec:	2200      	movs	r2, #0
 80010ee:	2300      	movs	r3, #0
 80010f0:	e78b      	b.n	800100a <__aeabi_dadd+0x21a>
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d000      	beq.n	80010f8 <__aeabi_dadd+0x308>
 80010f6:	e0c7      	b.n	8001288 <__aeabi_dadd+0x498>
 80010f8:	1c6b      	adds	r3, r5, #1
 80010fa:	055f      	lsls	r7, r3, #21
 80010fc:	0d7f      	lsrs	r7, r7, #21
 80010fe:	2f01      	cmp	r7, #1
 8001100:	dc00      	bgt.n	8001104 <__aeabi_dadd+0x314>
 8001102:	e0f1      	b.n	80012e8 <__aeabi_dadd+0x4f8>
 8001104:	4d39      	ldr	r5, [pc, #228]	; (80011ec <__aeabi_dadd+0x3fc>)
 8001106:	42ab      	cmp	r3, r5
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0x31c>
 800110a:	e0b9      	b.n	8001280 <__aeabi_dadd+0x490>
 800110c:	1885      	adds	r5, r0, r2
 800110e:	000a      	movs	r2, r1
 8001110:	4285      	cmp	r5, r0
 8001112:	4189      	sbcs	r1, r1
 8001114:	4442      	add	r2, r8
 8001116:	4249      	negs	r1, r1
 8001118:	1851      	adds	r1, r2, r1
 800111a:	2207      	movs	r2, #7
 800111c:	07cf      	lsls	r7, r1, #31
 800111e:	086d      	lsrs	r5, r5, #1
 8001120:	432f      	orrs	r7, r5
 8001122:	0849      	lsrs	r1, r1, #1
 8001124:	403a      	ands	r2, r7
 8001126:	001d      	movs	r5, r3
 8001128:	e6c2      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 800112a:	2207      	movs	r2, #7
 800112c:	4930      	ldr	r1, [pc, #192]	; (80011f0 <__aeabi_dadd+0x400>)
 800112e:	1aed      	subs	r5, r5, r3
 8001130:	4031      	ands	r1, r6
 8001132:	403a      	ands	r2, r7
 8001134:	e6bc      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 8001136:	003e      	movs	r6, r7
 8001138:	3828      	subs	r0, #40	; 0x28
 800113a:	4086      	lsls	r6, r0
 800113c:	2700      	movs	r7, #0
 800113e:	e69f      	b.n	8000e80 <__aeabi_dadd+0x90>
 8001140:	0038      	movs	r0, r7
 8001142:	f001 fc29 	bl	8002998 <__clzsi2>
 8001146:	3020      	adds	r0, #32
 8001148:	e68e      	b.n	8000e68 <__aeabi_dadd+0x78>
 800114a:	4643      	mov	r3, r8
 800114c:	4313      	orrs	r3, r2
 800114e:	001f      	movs	r7, r3
 8001150:	1e7a      	subs	r2, r7, #1
 8001152:	4197      	sbcs	r7, r2
 8001154:	1bc7      	subs	r7, r0, r7
 8001156:	42b8      	cmp	r0, r7
 8001158:	4180      	sbcs	r0, r0
 800115a:	4240      	negs	r0, r0
 800115c:	1a09      	subs	r1, r1, r0
 800115e:	e678      	b.n	8000e52 <__aeabi_dadd+0x62>
 8001160:	000e      	movs	r6, r1
 8001162:	003b      	movs	r3, r7
 8001164:	4306      	orrs	r6, r0
 8001166:	4313      	orrs	r3, r2
 8001168:	2d00      	cmp	r5, #0
 800116a:	d161      	bne.n	8001230 <__aeabi_dadd+0x440>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d000      	beq.n	8001172 <__aeabi_dadd+0x382>
 8001170:	e0f4      	b.n	800135c <__aeabi_dadd+0x56c>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x388>
 8001176:	e11b      	b.n	80013b0 <__aeabi_dadd+0x5c0>
 8001178:	4664      	mov	r4, ip
 800117a:	0039      	movs	r1, r7
 800117c:	0010      	movs	r0, r2
 800117e:	e739      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001180:	4f1a      	ldr	r7, [pc, #104]	; (80011ec <__aeabi_dadd+0x3fc>)
 8001182:	42bb      	cmp	r3, r7
 8001184:	d07a      	beq.n	800127c <__aeabi_dadd+0x48c>
 8001186:	0033      	movs	r3, r6
 8001188:	e6ff      	b.n	8000f8a <__aeabi_dadd+0x19a>
 800118a:	0030      	movs	r0, r6
 800118c:	3d1f      	subs	r5, #31
 800118e:	40e8      	lsrs	r0, r5
 8001190:	2b20      	cmp	r3, #32
 8001192:	d003      	beq.n	800119c <__aeabi_dadd+0x3ac>
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	1acb      	subs	r3, r1, r3
 8001198:	409e      	lsls	r6, r3
 800119a:	4337      	orrs	r7, r6
 800119c:	1e7b      	subs	r3, r7, #1
 800119e:	419f      	sbcs	r7, r3
 80011a0:	2207      	movs	r2, #7
 80011a2:	4307      	orrs	r7, r0
 80011a4:	403a      	ands	r2, r7
 80011a6:	2100      	movs	r1, #0
 80011a8:	2500      	movs	r5, #0
 80011aa:	e789      	b.n	80010c0 <__aeabi_dadd+0x2d0>
 80011ac:	1a17      	subs	r7, r2, r0
 80011ae:	4643      	mov	r3, r8
 80011b0:	42ba      	cmp	r2, r7
 80011b2:	41b6      	sbcs	r6, r6
 80011b4:	1a59      	subs	r1, r3, r1
 80011b6:	4276      	negs	r6, r6
 80011b8:	1b8e      	subs	r6, r1, r6
 80011ba:	4664      	mov	r4, ip
 80011bc:	e64e      	b.n	8000e5c <__aeabi_dadd+0x6c>
 80011be:	2b1f      	cmp	r3, #31
 80011c0:	dd00      	ble.n	80011c4 <__aeabi_dadd+0x3d4>
 80011c2:	e0ad      	b.n	8001320 <__aeabi_dadd+0x530>
 80011c4:	2620      	movs	r6, #32
 80011c6:	4647      	mov	r7, r8
 80011c8:	1af6      	subs	r6, r6, r3
 80011ca:	40b7      	lsls	r7, r6
 80011cc:	46b9      	mov	r9, r7
 80011ce:	0017      	movs	r7, r2
 80011d0:	46b2      	mov	sl, r6
 80011d2:	40df      	lsrs	r7, r3
 80011d4:	464e      	mov	r6, r9
 80011d6:	433e      	orrs	r6, r7
 80011d8:	0037      	movs	r7, r6
 80011da:	4656      	mov	r6, sl
 80011dc:	40b2      	lsls	r2, r6
 80011de:	1e56      	subs	r6, r2, #1
 80011e0:	41b2      	sbcs	r2, r6
 80011e2:	4317      	orrs	r7, r2
 80011e4:	4642      	mov	r2, r8
 80011e6:	40da      	lsrs	r2, r3
 80011e8:	1889      	adds	r1, r1, r2
 80011ea:	e6ae      	b.n	8000f4a <__aeabi_dadd+0x15a>
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	ff7fffff 	.word	0xff7fffff
 80011f4:	800fffff 	.word	0x800fffff
 80011f8:	2620      	movs	r6, #32
 80011fa:	4647      	mov	r7, r8
 80011fc:	1af6      	subs	r6, r6, r3
 80011fe:	40b7      	lsls	r7, r6
 8001200:	46b9      	mov	r9, r7
 8001202:	0017      	movs	r7, r2
 8001204:	46b2      	mov	sl, r6
 8001206:	40df      	lsrs	r7, r3
 8001208:	464e      	mov	r6, r9
 800120a:	433e      	orrs	r6, r7
 800120c:	0037      	movs	r7, r6
 800120e:	4656      	mov	r6, sl
 8001210:	40b2      	lsls	r2, r6
 8001212:	1e56      	subs	r6, r2, #1
 8001214:	41b2      	sbcs	r2, r6
 8001216:	4317      	orrs	r7, r2
 8001218:	4642      	mov	r2, r8
 800121a:	40da      	lsrs	r2, r3
 800121c:	1a89      	subs	r1, r1, r2
 800121e:	e799      	b.n	8001154 <__aeabi_dadd+0x364>
 8001220:	4c7f      	ldr	r4, [pc, #508]	; (8001420 <__aeabi_dadd+0x630>)
 8001222:	42a6      	cmp	r6, r4
 8001224:	d05b      	beq.n	80012de <__aeabi_dadd+0x4ee>
 8001226:	2480      	movs	r4, #128	; 0x80
 8001228:	0424      	lsls	r4, r4, #16
 800122a:	425b      	negs	r3, r3
 800122c:	4321      	orrs	r1, r4
 800122e:	e727      	b.n	8001080 <__aeabi_dadd+0x290>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d10c      	bne.n	800124e <__aeabi_dadd+0x45e>
 8001234:	2b00      	cmp	r3, #0
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x44a>
 8001238:	e0cb      	b.n	80013d2 <__aeabi_dadd+0x5e2>
 800123a:	4664      	mov	r4, ip
 800123c:	0039      	movs	r1, r7
 800123e:	0010      	movs	r0, r2
 8001240:	4d77      	ldr	r5, [pc, #476]	; (8001420 <__aeabi_dadd+0x630>)
 8001242:	e6d7      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001244:	4f76      	ldr	r7, [pc, #472]	; (8001420 <__aeabi_dadd+0x630>)
 8001246:	42bb      	cmp	r3, r7
 8001248:	d018      	beq.n	800127c <__aeabi_dadd+0x48c>
 800124a:	0033      	movs	r3, r6
 800124c:	e675      	b.n	8000f3a <__aeabi_dadd+0x14a>
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <__aeabi_dadd+0x48c>
 8001252:	074b      	lsls	r3, r1, #29
 8001254:	08c0      	lsrs	r0, r0, #3
 8001256:	4318      	orrs	r0, r3
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	08c9      	lsrs	r1, r1, #3
 800125c:	031b      	lsls	r3, r3, #12
 800125e:	4219      	tst	r1, r3
 8001260:	d007      	beq.n	8001272 <__aeabi_dadd+0x482>
 8001262:	08fc      	lsrs	r4, r7, #3
 8001264:	421c      	tst	r4, r3
 8001266:	d104      	bne.n	8001272 <__aeabi_dadd+0x482>
 8001268:	0779      	lsls	r1, r7, #29
 800126a:	08d0      	lsrs	r0, r2, #3
 800126c:	4308      	orrs	r0, r1
 800126e:	46e1      	mov	r9, ip
 8001270:	0021      	movs	r1, r4
 8001272:	464c      	mov	r4, r9
 8001274:	0f42      	lsrs	r2, r0, #29
 8001276:	00c9      	lsls	r1, r1, #3
 8001278:	4311      	orrs	r1, r2
 800127a:	00c0      	lsls	r0, r0, #3
 800127c:	4d68      	ldr	r5, [pc, #416]	; (8001420 <__aeabi_dadd+0x630>)
 800127e:	e6b9      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001280:	001d      	movs	r5, r3
 8001282:	2200      	movs	r2, #0
 8001284:	2300      	movs	r3, #0
 8001286:	e6c0      	b.n	800100a <__aeabi_dadd+0x21a>
 8001288:	2d00      	cmp	r5, #0
 800128a:	d15b      	bne.n	8001344 <__aeabi_dadd+0x554>
 800128c:	000d      	movs	r5, r1
 800128e:	4305      	orrs	r5, r0
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x4a4>
 8001292:	e6e2      	b.n	800105a <__aeabi_dadd+0x26a>
 8001294:	1c5d      	adds	r5, r3, #1
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x4aa>
 8001298:	e0b0      	b.n	80013fc <__aeabi_dadd+0x60c>
 800129a:	4d61      	ldr	r5, [pc, #388]	; (8001420 <__aeabi_dadd+0x630>)
 800129c:	42ae      	cmp	r6, r5
 800129e:	d01f      	beq.n	80012e0 <__aeabi_dadd+0x4f0>
 80012a0:	43db      	mvns	r3, r3
 80012a2:	2b38      	cmp	r3, #56	; 0x38
 80012a4:	dc71      	bgt.n	800138a <__aeabi_dadd+0x59a>
 80012a6:	2b1f      	cmp	r3, #31
 80012a8:	dd00      	ble.n	80012ac <__aeabi_dadd+0x4bc>
 80012aa:	e096      	b.n	80013da <__aeabi_dadd+0x5ea>
 80012ac:	2520      	movs	r5, #32
 80012ae:	000f      	movs	r7, r1
 80012b0:	1aed      	subs	r5, r5, r3
 80012b2:	40af      	lsls	r7, r5
 80012b4:	46b9      	mov	r9, r7
 80012b6:	0007      	movs	r7, r0
 80012b8:	46aa      	mov	sl, r5
 80012ba:	40df      	lsrs	r7, r3
 80012bc:	464d      	mov	r5, r9
 80012be:	433d      	orrs	r5, r7
 80012c0:	002f      	movs	r7, r5
 80012c2:	4655      	mov	r5, sl
 80012c4:	40a8      	lsls	r0, r5
 80012c6:	40d9      	lsrs	r1, r3
 80012c8:	1e45      	subs	r5, r0, #1
 80012ca:	41a8      	sbcs	r0, r5
 80012cc:	4488      	add	r8, r1
 80012ce:	4307      	orrs	r7, r0
 80012d0:	18bf      	adds	r7, r7, r2
 80012d2:	4297      	cmp	r7, r2
 80012d4:	4192      	sbcs	r2, r2
 80012d6:	4251      	negs	r1, r2
 80012d8:	4441      	add	r1, r8
 80012da:	0035      	movs	r5, r6
 80012dc:	e63a      	b.n	8000f54 <__aeabi_dadd+0x164>
 80012de:	4664      	mov	r4, ip
 80012e0:	0035      	movs	r5, r6
 80012e2:	4641      	mov	r1, r8
 80012e4:	0010      	movs	r0, r2
 80012e6:	e685      	b.n	8000ff4 <__aeabi_dadd+0x204>
 80012e8:	000b      	movs	r3, r1
 80012ea:	4303      	orrs	r3, r0
 80012ec:	2d00      	cmp	r5, #0
 80012ee:	d000      	beq.n	80012f2 <__aeabi_dadd+0x502>
 80012f0:	e663      	b.n	8000fba <__aeabi_dadd+0x1ca>
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f5      	beq.n	80012e2 <__aeabi_dadd+0x4f2>
 80012f6:	4643      	mov	r3, r8
 80012f8:	4313      	orrs	r3, r2
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x50e>
 80012fc:	e67a      	b.n	8000ff4 <__aeabi_dadd+0x204>
 80012fe:	1887      	adds	r7, r0, r2
 8001300:	4287      	cmp	r7, r0
 8001302:	4180      	sbcs	r0, r0
 8001304:	2207      	movs	r2, #7
 8001306:	4441      	add	r1, r8
 8001308:	4240      	negs	r0, r0
 800130a:	1809      	adds	r1, r1, r0
 800130c:	403a      	ands	r2, r7
 800130e:	020b      	lsls	r3, r1, #8
 8001310:	d400      	bmi.n	8001314 <__aeabi_dadd+0x524>
 8001312:	e6d5      	b.n	80010c0 <__aeabi_dadd+0x2d0>
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <__aeabi_dadd+0x634>)
 8001316:	3501      	adds	r5, #1
 8001318:	4019      	ands	r1, r3
 800131a:	e5c9      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 800131c:	0038      	movs	r0, r7
 800131e:	e669      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001320:	001e      	movs	r6, r3
 8001322:	4647      	mov	r7, r8
 8001324:	3e20      	subs	r6, #32
 8001326:	40f7      	lsrs	r7, r6
 8001328:	46bc      	mov	ip, r7
 800132a:	2b20      	cmp	r3, #32
 800132c:	d004      	beq.n	8001338 <__aeabi_dadd+0x548>
 800132e:	2640      	movs	r6, #64	; 0x40
 8001330:	1af3      	subs	r3, r6, r3
 8001332:	4646      	mov	r6, r8
 8001334:	409e      	lsls	r6, r3
 8001336:	4332      	orrs	r2, r6
 8001338:	0017      	movs	r7, r2
 800133a:	4663      	mov	r3, ip
 800133c:	1e7a      	subs	r2, r7, #1
 800133e:	4197      	sbcs	r7, r2
 8001340:	431f      	orrs	r7, r3
 8001342:	e602      	b.n	8000f4a <__aeabi_dadd+0x15a>
 8001344:	4d36      	ldr	r5, [pc, #216]	; (8001420 <__aeabi_dadd+0x630>)
 8001346:	42ae      	cmp	r6, r5
 8001348:	d0ca      	beq.n	80012e0 <__aeabi_dadd+0x4f0>
 800134a:	2580      	movs	r5, #128	; 0x80
 800134c:	042d      	lsls	r5, r5, #16
 800134e:	425b      	negs	r3, r3
 8001350:	4329      	orrs	r1, r5
 8001352:	e7a6      	b.n	80012a2 <__aeabi_dadd+0x4b2>
 8001354:	4308      	orrs	r0, r1
 8001356:	1e41      	subs	r1, r0, #1
 8001358:	4188      	sbcs	r0, r1
 800135a:	e6a6      	b.n	80010aa <__aeabi_dadd+0x2ba>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x572>
 8001360:	e648      	b.n	8000ff4 <__aeabi_dadd+0x204>
 8001362:	1a87      	subs	r7, r0, r2
 8001364:	4643      	mov	r3, r8
 8001366:	42b8      	cmp	r0, r7
 8001368:	41b6      	sbcs	r6, r6
 800136a:	1acb      	subs	r3, r1, r3
 800136c:	4276      	negs	r6, r6
 800136e:	1b9e      	subs	r6, r3, r6
 8001370:	0233      	lsls	r3, r6, #8
 8001372:	d54b      	bpl.n	800140c <__aeabi_dadd+0x61c>
 8001374:	1a17      	subs	r7, r2, r0
 8001376:	4643      	mov	r3, r8
 8001378:	42ba      	cmp	r2, r7
 800137a:	4192      	sbcs	r2, r2
 800137c:	1a59      	subs	r1, r3, r1
 800137e:	4252      	negs	r2, r2
 8001380:	1a89      	subs	r1, r1, r2
 8001382:	2207      	movs	r2, #7
 8001384:	4664      	mov	r4, ip
 8001386:	403a      	ands	r2, r7
 8001388:	e592      	b.n	8000eb0 <__aeabi_dadd+0xc0>
 800138a:	4301      	orrs	r1, r0
 800138c:	000f      	movs	r7, r1
 800138e:	1e79      	subs	r1, r7, #1
 8001390:	418f      	sbcs	r7, r1
 8001392:	e79d      	b.n	80012d0 <__aeabi_dadd+0x4e0>
 8001394:	001c      	movs	r4, r3
 8001396:	000f      	movs	r7, r1
 8001398:	3c20      	subs	r4, #32
 800139a:	40e7      	lsrs	r7, r4
 800139c:	2b20      	cmp	r3, #32
 800139e:	d003      	beq.n	80013a8 <__aeabi_dadd+0x5b8>
 80013a0:	2440      	movs	r4, #64	; 0x40
 80013a2:	1ae3      	subs	r3, r4, r3
 80013a4:	4099      	lsls	r1, r3
 80013a6:	4308      	orrs	r0, r1
 80013a8:	1e41      	subs	r1, r0, #1
 80013aa:	4188      	sbcs	r0, r1
 80013ac:	4338      	orrs	r0, r7
 80013ae:	e67c      	b.n	80010aa <__aeabi_dadd+0x2ba>
 80013b0:	2200      	movs	r2, #0
 80013b2:	2400      	movs	r4, #0
 80013b4:	e625      	b.n	8001002 <__aeabi_dadd+0x212>
 80013b6:	1a17      	subs	r7, r2, r0
 80013b8:	4643      	mov	r3, r8
 80013ba:	42ba      	cmp	r2, r7
 80013bc:	4192      	sbcs	r2, r2
 80013be:	1a59      	subs	r1, r3, r1
 80013c0:	4252      	negs	r2, r2
 80013c2:	1a89      	subs	r1, r1, r2
 80013c4:	4664      	mov	r4, ip
 80013c6:	0035      	movs	r5, r6
 80013c8:	e543      	b.n	8000e52 <__aeabi_dadd+0x62>
 80013ca:	4641      	mov	r1, r8
 80013cc:	0010      	movs	r0, r2
 80013ce:	4d14      	ldr	r5, [pc, #80]	; (8001420 <__aeabi_dadd+0x630>)
 80013d0:	e610      	b.n	8000ff4 <__aeabi_dadd+0x204>
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	2400      	movs	r4, #0
 80013d6:	0312      	lsls	r2, r2, #12
 80013d8:	e680      	b.n	80010dc <__aeabi_dadd+0x2ec>
 80013da:	001d      	movs	r5, r3
 80013dc:	000f      	movs	r7, r1
 80013de:	3d20      	subs	r5, #32
 80013e0:	40ef      	lsrs	r7, r5
 80013e2:	46bc      	mov	ip, r7
 80013e4:	2b20      	cmp	r3, #32
 80013e6:	d003      	beq.n	80013f0 <__aeabi_dadd+0x600>
 80013e8:	2540      	movs	r5, #64	; 0x40
 80013ea:	1aeb      	subs	r3, r5, r3
 80013ec:	4099      	lsls	r1, r3
 80013ee:	4308      	orrs	r0, r1
 80013f0:	0007      	movs	r7, r0
 80013f2:	4663      	mov	r3, ip
 80013f4:	1e78      	subs	r0, r7, #1
 80013f6:	4187      	sbcs	r7, r0
 80013f8:	431f      	orrs	r7, r3
 80013fa:	e769      	b.n	80012d0 <__aeabi_dadd+0x4e0>
 80013fc:	1887      	adds	r7, r0, r2
 80013fe:	4297      	cmp	r7, r2
 8001400:	419b      	sbcs	r3, r3
 8001402:	4441      	add	r1, r8
 8001404:	425b      	negs	r3, r3
 8001406:	18c9      	adds	r1, r1, r3
 8001408:	0035      	movs	r5, r6
 800140a:	e5a3      	b.n	8000f54 <__aeabi_dadd+0x164>
 800140c:	003b      	movs	r3, r7
 800140e:	4333      	orrs	r3, r6
 8001410:	d0ce      	beq.n	80013b0 <__aeabi_dadd+0x5c0>
 8001412:	2207      	movs	r2, #7
 8001414:	0031      	movs	r1, r6
 8001416:	403a      	ands	r2, r7
 8001418:	e652      	b.n	80010c0 <__aeabi_dadd+0x2d0>
 800141a:	2300      	movs	r3, #0
 800141c:	001a      	movs	r2, r3
 800141e:	e5f4      	b.n	800100a <__aeabi_dadd+0x21a>
 8001420:	000007ff 	.word	0x000007ff
 8001424:	ff7fffff 	.word	0xff7fffff

08001428 <__aeabi_ddiv>:
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	4657      	mov	r7, sl
 800142c:	46de      	mov	lr, fp
 800142e:	464e      	mov	r6, r9
 8001430:	4645      	mov	r5, r8
 8001432:	b5e0      	push	{r5, r6, r7, lr}
 8001434:	4683      	mov	fp, r0
 8001436:	0007      	movs	r7, r0
 8001438:	030e      	lsls	r6, r1, #12
 800143a:	0048      	lsls	r0, r1, #1
 800143c:	b085      	sub	sp, #20
 800143e:	4692      	mov	sl, r2
 8001440:	001c      	movs	r4, r3
 8001442:	0b36      	lsrs	r6, r6, #12
 8001444:	0d40      	lsrs	r0, r0, #21
 8001446:	0fcd      	lsrs	r5, r1, #31
 8001448:	2800      	cmp	r0, #0
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0x26>
 800144c:	e09d      	b.n	800158a <__aeabi_ddiv+0x162>
 800144e:	4b95      	ldr	r3, [pc, #596]	; (80016a4 <__aeabi_ddiv+0x27c>)
 8001450:	4298      	cmp	r0, r3
 8001452:	d039      	beq.n	80014c8 <__aeabi_ddiv+0xa0>
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	00f6      	lsls	r6, r6, #3
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431e      	orrs	r6, r3
 800145c:	4a92      	ldr	r2, [pc, #584]	; (80016a8 <__aeabi_ddiv+0x280>)
 800145e:	0f7b      	lsrs	r3, r7, #29
 8001460:	4333      	orrs	r3, r6
 8001462:	4699      	mov	r9, r3
 8001464:	4694      	mov	ip, r2
 8001466:	0003      	movs	r3, r0
 8001468:	4463      	add	r3, ip
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	2600      	movs	r6, #0
 8001470:	00ff      	lsls	r7, r7, #3
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	0323      	lsls	r3, r4, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4698      	mov	r8, r3
 800147a:	0063      	lsls	r3, r4, #1
 800147c:	0fe4      	lsrs	r4, r4, #31
 800147e:	4652      	mov	r2, sl
 8001480:	0d5b      	lsrs	r3, r3, #21
 8001482:	9401      	str	r4, [sp, #4]
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x60>
 8001486:	e0b3      	b.n	80015f0 <__aeabi_ddiv+0x1c8>
 8001488:	4986      	ldr	r1, [pc, #536]	; (80016a4 <__aeabi_ddiv+0x27c>)
 800148a:	428b      	cmp	r3, r1
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x68>
 800148e:	e09e      	b.n	80015ce <__aeabi_ddiv+0x1a6>
 8001490:	4642      	mov	r2, r8
 8001492:	00d1      	lsls	r1, r2, #3
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0412      	lsls	r2, r2, #16
 8001498:	430a      	orrs	r2, r1
 800149a:	4651      	mov	r1, sl
 800149c:	0f49      	lsrs	r1, r1, #29
 800149e:	4311      	orrs	r1, r2
 80014a0:	468b      	mov	fp, r1
 80014a2:	4981      	ldr	r1, [pc, #516]	; (80016a8 <__aeabi_ddiv+0x280>)
 80014a4:	4652      	mov	r2, sl
 80014a6:	468c      	mov	ip, r1
 80014a8:	9900      	ldr	r1, [sp, #0]
 80014aa:	4463      	add	r3, ip
 80014ac:	1acb      	subs	r3, r1, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	00d2      	lsls	r2, r2, #3
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	002b      	movs	r3, r5
 80014b6:	4063      	eors	r3, r4
 80014b8:	469a      	mov	sl, r3
 80014ba:	2e0f      	cmp	r6, #15
 80014bc:	d900      	bls.n	80014c0 <__aeabi_ddiv+0x98>
 80014be:	e105      	b.n	80016cc <__aeabi_ddiv+0x2a4>
 80014c0:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <__aeabi_ddiv+0x284>)
 80014c2:	00b6      	lsls	r6, r6, #2
 80014c4:	599b      	ldr	r3, [r3, r6]
 80014c6:	469f      	mov	pc, r3
 80014c8:	465b      	mov	r3, fp
 80014ca:	4333      	orrs	r3, r6
 80014cc:	4699      	mov	r9, r3
 80014ce:	d000      	beq.n	80014d2 <__aeabi_ddiv+0xaa>
 80014d0:	e0b8      	b.n	8001644 <__aeabi_ddiv+0x21c>
 80014d2:	2302      	movs	r3, #2
 80014d4:	2608      	movs	r6, #8
 80014d6:	2700      	movs	r7, #0
 80014d8:	9000      	str	r0, [sp, #0]
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	e7ca      	b.n	8001474 <__aeabi_ddiv+0x4c>
 80014de:	46cb      	mov	fp, r9
 80014e0:	003a      	movs	r2, r7
 80014e2:	9902      	ldr	r1, [sp, #8]
 80014e4:	9501      	str	r5, [sp, #4]
 80014e6:	9b01      	ldr	r3, [sp, #4]
 80014e8:	469a      	mov	sl, r3
 80014ea:	2902      	cmp	r1, #2
 80014ec:	d027      	beq.n	800153e <__aeabi_ddiv+0x116>
 80014ee:	2903      	cmp	r1, #3
 80014f0:	d100      	bne.n	80014f4 <__aeabi_ddiv+0xcc>
 80014f2:	e280      	b.n	80019f6 <__aeabi_ddiv+0x5ce>
 80014f4:	2901      	cmp	r1, #1
 80014f6:	d044      	beq.n	8001582 <__aeabi_ddiv+0x15a>
 80014f8:	496d      	ldr	r1, [pc, #436]	; (80016b0 <__aeabi_ddiv+0x288>)
 80014fa:	9b00      	ldr	r3, [sp, #0]
 80014fc:	468c      	mov	ip, r1
 80014fe:	4463      	add	r3, ip
 8001500:	001c      	movs	r4, r3
 8001502:	2c00      	cmp	r4, #0
 8001504:	dd38      	ble.n	8001578 <__aeabi_ddiv+0x150>
 8001506:	0753      	lsls	r3, r2, #29
 8001508:	d000      	beq.n	800150c <__aeabi_ddiv+0xe4>
 800150a:	e213      	b.n	8001934 <__aeabi_ddiv+0x50c>
 800150c:	08d2      	lsrs	r2, r2, #3
 800150e:	465b      	mov	r3, fp
 8001510:	01db      	lsls	r3, r3, #7
 8001512:	d509      	bpl.n	8001528 <__aeabi_ddiv+0x100>
 8001514:	4659      	mov	r1, fp
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <__aeabi_ddiv+0x28c>)
 8001518:	4019      	ands	r1, r3
 800151a:	468b      	mov	fp, r1
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	00c9      	lsls	r1, r1, #3
 8001520:	468c      	mov	ip, r1
 8001522:	9b00      	ldr	r3, [sp, #0]
 8001524:	4463      	add	r3, ip
 8001526:	001c      	movs	r4, r3
 8001528:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <__aeabi_ddiv+0x290>)
 800152a:	429c      	cmp	r4, r3
 800152c:	dc07      	bgt.n	800153e <__aeabi_ddiv+0x116>
 800152e:	465b      	mov	r3, fp
 8001530:	0564      	lsls	r4, r4, #21
 8001532:	075f      	lsls	r7, r3, #29
 8001534:	025b      	lsls	r3, r3, #9
 8001536:	4317      	orrs	r7, r2
 8001538:	0b1b      	lsrs	r3, r3, #12
 800153a:	0d62      	lsrs	r2, r4, #21
 800153c:	e002      	b.n	8001544 <__aeabi_ddiv+0x11c>
 800153e:	2300      	movs	r3, #0
 8001540:	2700      	movs	r7, #0
 8001542:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <__aeabi_ddiv+0x27c>)
 8001544:	2100      	movs	r1, #0
 8001546:	031b      	lsls	r3, r3, #12
 8001548:	0b1c      	lsrs	r4, r3, #12
 800154a:	0d0b      	lsrs	r3, r1, #20
 800154c:	051b      	lsls	r3, r3, #20
 800154e:	4323      	orrs	r3, r4
 8001550:	0514      	lsls	r4, r2, #20
 8001552:	4a5a      	ldr	r2, [pc, #360]	; (80016bc <__aeabi_ddiv+0x294>)
 8001554:	0038      	movs	r0, r7
 8001556:	4013      	ands	r3, r2
 8001558:	431c      	orrs	r4, r3
 800155a:	4653      	mov	r3, sl
 800155c:	0064      	lsls	r4, r4, #1
 800155e:	07db      	lsls	r3, r3, #31
 8001560:	0864      	lsrs	r4, r4, #1
 8001562:	431c      	orrs	r4, r3
 8001564:	0021      	movs	r1, r4
 8001566:	b005      	add	sp, #20
 8001568:	bc3c      	pop	{r2, r3, r4, r5}
 800156a:	4690      	mov	r8, r2
 800156c:	4699      	mov	r9, r3
 800156e:	46a2      	mov	sl, r4
 8001570:	46ab      	mov	fp, r5
 8001572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001574:	2201      	movs	r2, #1
 8001576:	4252      	negs	r2, r2
 8001578:	2301      	movs	r3, #1
 800157a:	1b1b      	subs	r3, r3, r4
 800157c:	2b38      	cmp	r3, #56	; 0x38
 800157e:	dc00      	bgt.n	8001582 <__aeabi_ddiv+0x15a>
 8001580:	e1ad      	b.n	80018de <__aeabi_ddiv+0x4b6>
 8001582:	2200      	movs	r2, #0
 8001584:	2300      	movs	r3, #0
 8001586:	2700      	movs	r7, #0
 8001588:	e7dc      	b.n	8001544 <__aeabi_ddiv+0x11c>
 800158a:	465b      	mov	r3, fp
 800158c:	4333      	orrs	r3, r6
 800158e:	4699      	mov	r9, r3
 8001590:	d05e      	beq.n	8001650 <__aeabi_ddiv+0x228>
 8001592:	2e00      	cmp	r6, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_ddiv+0x170>
 8001596:	e18a      	b.n	80018ae <__aeabi_ddiv+0x486>
 8001598:	0030      	movs	r0, r6
 800159a:	f001 f9fd 	bl	8002998 <__clzsi2>
 800159e:	0003      	movs	r3, r0
 80015a0:	3b0b      	subs	r3, #11
 80015a2:	2b1c      	cmp	r3, #28
 80015a4:	dd00      	ble.n	80015a8 <__aeabi_ddiv+0x180>
 80015a6:	e17b      	b.n	80018a0 <__aeabi_ddiv+0x478>
 80015a8:	221d      	movs	r2, #29
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	465a      	mov	r2, fp
 80015ae:	0001      	movs	r1, r0
 80015b0:	40da      	lsrs	r2, r3
 80015b2:	3908      	subs	r1, #8
 80015b4:	408e      	lsls	r6, r1
 80015b6:	0013      	movs	r3, r2
 80015b8:	465f      	mov	r7, fp
 80015ba:	4333      	orrs	r3, r6
 80015bc:	4699      	mov	r9, r3
 80015be:	408f      	lsls	r7, r1
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <__aeabi_ddiv+0x298>)
 80015c2:	2600      	movs	r6, #0
 80015c4:	1a1b      	subs	r3, r3, r0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	e752      	b.n	8001474 <__aeabi_ddiv+0x4c>
 80015ce:	4641      	mov	r1, r8
 80015d0:	4653      	mov	r3, sl
 80015d2:	430b      	orrs	r3, r1
 80015d4:	493b      	ldr	r1, [pc, #236]	; (80016c4 <__aeabi_ddiv+0x29c>)
 80015d6:	469b      	mov	fp, r3
 80015d8:	468c      	mov	ip, r1
 80015da:	9b00      	ldr	r3, [sp, #0]
 80015dc:	4463      	add	r3, ip
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	465b      	mov	r3, fp
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d13b      	bne.n	800165e <__aeabi_ddiv+0x236>
 80015e6:	2302      	movs	r3, #2
 80015e8:	2200      	movs	r2, #0
 80015ea:	431e      	orrs	r6, r3
 80015ec:	2102      	movs	r1, #2
 80015ee:	e761      	b.n	80014b4 <__aeabi_ddiv+0x8c>
 80015f0:	4643      	mov	r3, r8
 80015f2:	4313      	orrs	r3, r2
 80015f4:	469b      	mov	fp, r3
 80015f6:	d037      	beq.n	8001668 <__aeabi_ddiv+0x240>
 80015f8:	4643      	mov	r3, r8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_ddiv+0x1d8>
 80015fe:	e162      	b.n	80018c6 <__aeabi_ddiv+0x49e>
 8001600:	4640      	mov	r0, r8
 8001602:	f001 f9c9 	bl	8002998 <__clzsi2>
 8001606:	0003      	movs	r3, r0
 8001608:	3b0b      	subs	r3, #11
 800160a:	2b1c      	cmp	r3, #28
 800160c:	dd00      	ble.n	8001610 <__aeabi_ddiv+0x1e8>
 800160e:	e153      	b.n	80018b8 <__aeabi_ddiv+0x490>
 8001610:	0002      	movs	r2, r0
 8001612:	4641      	mov	r1, r8
 8001614:	3a08      	subs	r2, #8
 8001616:	4091      	lsls	r1, r2
 8001618:	4688      	mov	r8, r1
 800161a:	211d      	movs	r1, #29
 800161c:	1acb      	subs	r3, r1, r3
 800161e:	4651      	mov	r1, sl
 8001620:	40d9      	lsrs	r1, r3
 8001622:	000b      	movs	r3, r1
 8001624:	4641      	mov	r1, r8
 8001626:	430b      	orrs	r3, r1
 8001628:	469b      	mov	fp, r3
 800162a:	4653      	mov	r3, sl
 800162c:	4093      	lsls	r3, r2
 800162e:	001a      	movs	r2, r3
 8001630:	9b00      	ldr	r3, [sp, #0]
 8001632:	4925      	ldr	r1, [pc, #148]	; (80016c8 <__aeabi_ddiv+0x2a0>)
 8001634:	469c      	mov	ip, r3
 8001636:	4460      	add	r0, ip
 8001638:	0003      	movs	r3, r0
 800163a:	468c      	mov	ip, r1
 800163c:	4463      	add	r3, ip
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2100      	movs	r1, #0
 8001642:	e737      	b.n	80014b4 <__aeabi_ddiv+0x8c>
 8001644:	2303      	movs	r3, #3
 8001646:	46b1      	mov	r9, r6
 8001648:	9000      	str	r0, [sp, #0]
 800164a:	260c      	movs	r6, #12
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	e711      	b.n	8001474 <__aeabi_ddiv+0x4c>
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	2604      	movs	r6, #4
 8001658:	2700      	movs	r7, #0
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	e70a      	b.n	8001474 <__aeabi_ddiv+0x4c>
 800165e:	2303      	movs	r3, #3
 8001660:	46c3      	mov	fp, r8
 8001662:	431e      	orrs	r6, r3
 8001664:	2103      	movs	r1, #3
 8001666:	e725      	b.n	80014b4 <__aeabi_ddiv+0x8c>
 8001668:	3301      	adds	r3, #1
 800166a:	431e      	orrs	r6, r3
 800166c:	2200      	movs	r2, #0
 800166e:	2101      	movs	r1, #1
 8001670:	e720      	b.n	80014b4 <__aeabi_ddiv+0x8c>
 8001672:	2300      	movs	r3, #0
 8001674:	469a      	mov	sl, r3
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	2700      	movs	r7, #0
 800167a:	031b      	lsls	r3, r3, #12
 800167c:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <__aeabi_ddiv+0x27c>)
 800167e:	e761      	b.n	8001544 <__aeabi_ddiv+0x11c>
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	4649      	mov	r1, r9
 8001684:	031b      	lsls	r3, r3, #12
 8001686:	4219      	tst	r1, r3
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x264>
 800168a:	e0e2      	b.n	8001852 <__aeabi_ddiv+0x42a>
 800168c:	4659      	mov	r1, fp
 800168e:	4219      	tst	r1, r3
 8001690:	d000      	beq.n	8001694 <__aeabi_ddiv+0x26c>
 8001692:	e0de      	b.n	8001852 <__aeabi_ddiv+0x42a>
 8001694:	430b      	orrs	r3, r1
 8001696:	031b      	lsls	r3, r3, #12
 8001698:	0017      	movs	r7, r2
 800169a:	0b1b      	lsrs	r3, r3, #12
 800169c:	46a2      	mov	sl, r4
 800169e:	4a01      	ldr	r2, [pc, #4]	; (80016a4 <__aeabi_ddiv+0x27c>)
 80016a0:	e750      	b.n	8001544 <__aeabi_ddiv+0x11c>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	000007ff 	.word	0x000007ff
 80016a8:	fffffc01 	.word	0xfffffc01
 80016ac:	08027704 	.word	0x08027704
 80016b0:	000003ff 	.word	0x000003ff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	800fffff 	.word	0x800fffff
 80016c0:	fffffc0d 	.word	0xfffffc0d
 80016c4:	fffff801 	.word	0xfffff801
 80016c8:	000003f3 	.word	0x000003f3
 80016cc:	45d9      	cmp	r9, fp
 80016ce:	d900      	bls.n	80016d2 <__aeabi_ddiv+0x2aa>
 80016d0:	e0cb      	b.n	800186a <__aeabi_ddiv+0x442>
 80016d2:	d100      	bne.n	80016d6 <__aeabi_ddiv+0x2ae>
 80016d4:	e0c6      	b.n	8001864 <__aeabi_ddiv+0x43c>
 80016d6:	003c      	movs	r4, r7
 80016d8:	4648      	mov	r0, r9
 80016da:	2700      	movs	r7, #0
 80016dc:	9b00      	ldr	r3, [sp, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	465b      	mov	r3, fp
 80016e4:	0e16      	lsrs	r6, r2, #24
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	431e      	orrs	r6, r3
 80016ea:	0213      	lsls	r3, r2, #8
 80016ec:	4698      	mov	r8, r3
 80016ee:	0433      	lsls	r3, r6, #16
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	4699      	mov	r9, r3
 80016f4:	0c31      	lsrs	r1, r6, #16
 80016f6:	9101      	str	r1, [sp, #4]
 80016f8:	f7fe fd94 	bl	8000224 <__aeabi_uidivmod>
 80016fc:	464a      	mov	r2, r9
 80016fe:	4342      	muls	r2, r0
 8001700:	040b      	lsls	r3, r1, #16
 8001702:	0c21      	lsrs	r1, r4, #16
 8001704:	0005      	movs	r5, r0
 8001706:	4319      	orrs	r1, r3
 8001708:	428a      	cmp	r2, r1
 800170a:	d907      	bls.n	800171c <__aeabi_ddiv+0x2f4>
 800170c:	1989      	adds	r1, r1, r6
 800170e:	3d01      	subs	r5, #1
 8001710:	428e      	cmp	r6, r1
 8001712:	d803      	bhi.n	800171c <__aeabi_ddiv+0x2f4>
 8001714:	428a      	cmp	r2, r1
 8001716:	d901      	bls.n	800171c <__aeabi_ddiv+0x2f4>
 8001718:	1e85      	subs	r5, r0, #2
 800171a:	1989      	adds	r1, r1, r6
 800171c:	1a88      	subs	r0, r1, r2
 800171e:	9901      	ldr	r1, [sp, #4]
 8001720:	f7fe fd80 	bl	8000224 <__aeabi_uidivmod>
 8001724:	0409      	lsls	r1, r1, #16
 8001726:	468c      	mov	ip, r1
 8001728:	464a      	mov	r2, r9
 800172a:	0421      	lsls	r1, r4, #16
 800172c:	4664      	mov	r4, ip
 800172e:	4342      	muls	r2, r0
 8001730:	0c09      	lsrs	r1, r1, #16
 8001732:	0003      	movs	r3, r0
 8001734:	4321      	orrs	r1, r4
 8001736:	428a      	cmp	r2, r1
 8001738:	d904      	bls.n	8001744 <__aeabi_ddiv+0x31c>
 800173a:	1989      	adds	r1, r1, r6
 800173c:	3b01      	subs	r3, #1
 800173e:	428e      	cmp	r6, r1
 8001740:	d800      	bhi.n	8001744 <__aeabi_ddiv+0x31c>
 8001742:	e0f1      	b.n	8001928 <__aeabi_ddiv+0x500>
 8001744:	042d      	lsls	r5, r5, #16
 8001746:	431d      	orrs	r5, r3
 8001748:	46ab      	mov	fp, r5
 800174a:	4643      	mov	r3, r8
 800174c:	1a89      	subs	r1, r1, r2
 800174e:	4642      	mov	r2, r8
 8001750:	0c28      	lsrs	r0, r5, #16
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	0c1d      	lsrs	r5, r3, #16
 8001756:	465b      	mov	r3, fp
 8001758:	0c14      	lsrs	r4, r2, #16
 800175a:	0022      	movs	r2, r4
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	435a      	muls	r2, r3
 8001762:	9403      	str	r4, [sp, #12]
 8001764:	436b      	muls	r3, r5
 8001766:	4344      	muls	r4, r0
 8001768:	9502      	str	r5, [sp, #8]
 800176a:	4368      	muls	r0, r5
 800176c:	191b      	adds	r3, r3, r4
 800176e:	0c15      	lsrs	r5, r2, #16
 8001770:	18eb      	adds	r3, r5, r3
 8001772:	429c      	cmp	r4, r3
 8001774:	d903      	bls.n	800177e <__aeabi_ddiv+0x356>
 8001776:	2480      	movs	r4, #128	; 0x80
 8001778:	0264      	lsls	r4, r4, #9
 800177a:	46a4      	mov	ip, r4
 800177c:	4460      	add	r0, ip
 800177e:	0c1c      	lsrs	r4, r3, #16
 8001780:	0415      	lsls	r5, r2, #16
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	0c2d      	lsrs	r5, r5, #16
 8001786:	1820      	adds	r0, r4, r0
 8001788:	195d      	adds	r5, r3, r5
 800178a:	4281      	cmp	r1, r0
 800178c:	d377      	bcc.n	800187e <__aeabi_ddiv+0x456>
 800178e:	d073      	beq.n	8001878 <__aeabi_ddiv+0x450>
 8001790:	1a0c      	subs	r4, r1, r0
 8001792:	4aa2      	ldr	r2, [pc, #648]	; (8001a1c <__aeabi_ddiv+0x5f4>)
 8001794:	1b7d      	subs	r5, r7, r5
 8001796:	42af      	cmp	r7, r5
 8001798:	41bf      	sbcs	r7, r7
 800179a:	4694      	mov	ip, r2
 800179c:	9b00      	ldr	r3, [sp, #0]
 800179e:	427f      	negs	r7, r7
 80017a0:	4463      	add	r3, ip
 80017a2:	1be0      	subs	r0, r4, r7
 80017a4:	001c      	movs	r4, r3
 80017a6:	4286      	cmp	r6, r0
 80017a8:	d100      	bne.n	80017ac <__aeabi_ddiv+0x384>
 80017aa:	e0db      	b.n	8001964 <__aeabi_ddiv+0x53c>
 80017ac:	9901      	ldr	r1, [sp, #4]
 80017ae:	f7fe fd39 	bl	8000224 <__aeabi_uidivmod>
 80017b2:	464a      	mov	r2, r9
 80017b4:	4342      	muls	r2, r0
 80017b6:	040b      	lsls	r3, r1, #16
 80017b8:	0c29      	lsrs	r1, r5, #16
 80017ba:	0007      	movs	r7, r0
 80017bc:	4319      	orrs	r1, r3
 80017be:	428a      	cmp	r2, r1
 80017c0:	d907      	bls.n	80017d2 <__aeabi_ddiv+0x3aa>
 80017c2:	1989      	adds	r1, r1, r6
 80017c4:	3f01      	subs	r7, #1
 80017c6:	428e      	cmp	r6, r1
 80017c8:	d803      	bhi.n	80017d2 <__aeabi_ddiv+0x3aa>
 80017ca:	428a      	cmp	r2, r1
 80017cc:	d901      	bls.n	80017d2 <__aeabi_ddiv+0x3aa>
 80017ce:	1e87      	subs	r7, r0, #2
 80017d0:	1989      	adds	r1, r1, r6
 80017d2:	1a88      	subs	r0, r1, r2
 80017d4:	9901      	ldr	r1, [sp, #4]
 80017d6:	f7fe fd25 	bl	8000224 <__aeabi_uidivmod>
 80017da:	0409      	lsls	r1, r1, #16
 80017dc:	464a      	mov	r2, r9
 80017de:	4689      	mov	r9, r1
 80017e0:	0429      	lsls	r1, r5, #16
 80017e2:	464d      	mov	r5, r9
 80017e4:	4342      	muls	r2, r0
 80017e6:	0c09      	lsrs	r1, r1, #16
 80017e8:	0003      	movs	r3, r0
 80017ea:	4329      	orrs	r1, r5
 80017ec:	428a      	cmp	r2, r1
 80017ee:	d907      	bls.n	8001800 <__aeabi_ddiv+0x3d8>
 80017f0:	1989      	adds	r1, r1, r6
 80017f2:	3b01      	subs	r3, #1
 80017f4:	428e      	cmp	r6, r1
 80017f6:	d803      	bhi.n	8001800 <__aeabi_ddiv+0x3d8>
 80017f8:	428a      	cmp	r2, r1
 80017fa:	d901      	bls.n	8001800 <__aeabi_ddiv+0x3d8>
 80017fc:	1e83      	subs	r3, r0, #2
 80017fe:	1989      	adds	r1, r1, r6
 8001800:	043f      	lsls	r7, r7, #16
 8001802:	1a89      	subs	r1, r1, r2
 8001804:	003a      	movs	r2, r7
 8001806:	9f03      	ldr	r7, [sp, #12]
 8001808:	431a      	orrs	r2, r3
 800180a:	0038      	movs	r0, r7
 800180c:	0413      	lsls	r3, r2, #16
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	4358      	muls	r0, r3
 8001812:	4681      	mov	r9, r0
 8001814:	9802      	ldr	r0, [sp, #8]
 8001816:	0c15      	lsrs	r5, r2, #16
 8001818:	436f      	muls	r7, r5
 800181a:	4343      	muls	r3, r0
 800181c:	4345      	muls	r5, r0
 800181e:	4648      	mov	r0, r9
 8001820:	0c00      	lsrs	r0, r0, #16
 8001822:	4684      	mov	ip, r0
 8001824:	19db      	adds	r3, r3, r7
 8001826:	4463      	add	r3, ip
 8001828:	429f      	cmp	r7, r3
 800182a:	d903      	bls.n	8001834 <__aeabi_ddiv+0x40c>
 800182c:	2080      	movs	r0, #128	; 0x80
 800182e:	0240      	lsls	r0, r0, #9
 8001830:	4684      	mov	ip, r0
 8001832:	4465      	add	r5, ip
 8001834:	4648      	mov	r0, r9
 8001836:	0c1f      	lsrs	r7, r3, #16
 8001838:	0400      	lsls	r0, r0, #16
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	0c00      	lsrs	r0, r0, #16
 800183e:	197d      	adds	r5, r7, r5
 8001840:	1818      	adds	r0, r3, r0
 8001842:	42a9      	cmp	r1, r5
 8001844:	d200      	bcs.n	8001848 <__aeabi_ddiv+0x420>
 8001846:	e084      	b.n	8001952 <__aeabi_ddiv+0x52a>
 8001848:	d100      	bne.n	800184c <__aeabi_ddiv+0x424>
 800184a:	e07f      	b.n	800194c <__aeabi_ddiv+0x524>
 800184c:	2301      	movs	r3, #1
 800184e:	431a      	orrs	r2, r3
 8001850:	e657      	b.n	8001502 <__aeabi_ddiv+0xda>
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	464a      	mov	r2, r9
 8001856:	031b      	lsls	r3, r3, #12
 8001858:	4313      	orrs	r3, r2
 800185a:	031b      	lsls	r3, r3, #12
 800185c:	0b1b      	lsrs	r3, r3, #12
 800185e:	46aa      	mov	sl, r5
 8001860:	4a6f      	ldr	r2, [pc, #444]	; (8001a20 <__aeabi_ddiv+0x5f8>)
 8001862:	e66f      	b.n	8001544 <__aeabi_ddiv+0x11c>
 8001864:	42ba      	cmp	r2, r7
 8001866:	d900      	bls.n	800186a <__aeabi_ddiv+0x442>
 8001868:	e735      	b.n	80016d6 <__aeabi_ddiv+0x2ae>
 800186a:	464b      	mov	r3, r9
 800186c:	07dc      	lsls	r4, r3, #31
 800186e:	0858      	lsrs	r0, r3, #1
 8001870:	087b      	lsrs	r3, r7, #1
 8001872:	431c      	orrs	r4, r3
 8001874:	07ff      	lsls	r7, r7, #31
 8001876:	e734      	b.n	80016e2 <__aeabi_ddiv+0x2ba>
 8001878:	2400      	movs	r4, #0
 800187a:	42af      	cmp	r7, r5
 800187c:	d289      	bcs.n	8001792 <__aeabi_ddiv+0x36a>
 800187e:	4447      	add	r7, r8
 8001880:	4547      	cmp	r7, r8
 8001882:	41a4      	sbcs	r4, r4
 8001884:	465b      	mov	r3, fp
 8001886:	4264      	negs	r4, r4
 8001888:	19a4      	adds	r4, r4, r6
 800188a:	1864      	adds	r4, r4, r1
 800188c:	3b01      	subs	r3, #1
 800188e:	42a6      	cmp	r6, r4
 8001890:	d21e      	bcs.n	80018d0 <__aeabi_ddiv+0x4a8>
 8001892:	42a0      	cmp	r0, r4
 8001894:	d86d      	bhi.n	8001972 <__aeabi_ddiv+0x54a>
 8001896:	d100      	bne.n	800189a <__aeabi_ddiv+0x472>
 8001898:	e0b6      	b.n	8001a08 <__aeabi_ddiv+0x5e0>
 800189a:	1a24      	subs	r4, r4, r0
 800189c:	469b      	mov	fp, r3
 800189e:	e778      	b.n	8001792 <__aeabi_ddiv+0x36a>
 80018a0:	0003      	movs	r3, r0
 80018a2:	465a      	mov	r2, fp
 80018a4:	3b28      	subs	r3, #40	; 0x28
 80018a6:	409a      	lsls	r2, r3
 80018a8:	2700      	movs	r7, #0
 80018aa:	4691      	mov	r9, r2
 80018ac:	e688      	b.n	80015c0 <__aeabi_ddiv+0x198>
 80018ae:	4658      	mov	r0, fp
 80018b0:	f001 f872 	bl	8002998 <__clzsi2>
 80018b4:	3020      	adds	r0, #32
 80018b6:	e672      	b.n	800159e <__aeabi_ddiv+0x176>
 80018b8:	0003      	movs	r3, r0
 80018ba:	4652      	mov	r2, sl
 80018bc:	3b28      	subs	r3, #40	; 0x28
 80018be:	409a      	lsls	r2, r3
 80018c0:	4693      	mov	fp, r2
 80018c2:	2200      	movs	r2, #0
 80018c4:	e6b4      	b.n	8001630 <__aeabi_ddiv+0x208>
 80018c6:	4650      	mov	r0, sl
 80018c8:	f001 f866 	bl	8002998 <__clzsi2>
 80018cc:	3020      	adds	r0, #32
 80018ce:	e69a      	b.n	8001606 <__aeabi_ddiv+0x1de>
 80018d0:	42a6      	cmp	r6, r4
 80018d2:	d1e2      	bne.n	800189a <__aeabi_ddiv+0x472>
 80018d4:	45b8      	cmp	r8, r7
 80018d6:	d9dc      	bls.n	8001892 <__aeabi_ddiv+0x46a>
 80018d8:	1a34      	subs	r4, r6, r0
 80018da:	469b      	mov	fp, r3
 80018dc:	e759      	b.n	8001792 <__aeabi_ddiv+0x36a>
 80018de:	2b1f      	cmp	r3, #31
 80018e0:	dc65      	bgt.n	80019ae <__aeabi_ddiv+0x586>
 80018e2:	4c50      	ldr	r4, [pc, #320]	; (8001a24 <__aeabi_ddiv+0x5fc>)
 80018e4:	9900      	ldr	r1, [sp, #0]
 80018e6:	46a4      	mov	ip, r4
 80018e8:	465c      	mov	r4, fp
 80018ea:	4461      	add	r1, ip
 80018ec:	0008      	movs	r0, r1
 80018ee:	408c      	lsls	r4, r1
 80018f0:	0011      	movs	r1, r2
 80018f2:	4082      	lsls	r2, r0
 80018f4:	40d9      	lsrs	r1, r3
 80018f6:	1e50      	subs	r0, r2, #1
 80018f8:	4182      	sbcs	r2, r0
 80018fa:	430c      	orrs	r4, r1
 80018fc:	4314      	orrs	r4, r2
 80018fe:	465a      	mov	r2, fp
 8001900:	40da      	lsrs	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	0762      	lsls	r2, r4, #29
 8001906:	d009      	beq.n	800191c <__aeabi_ddiv+0x4f4>
 8001908:	220f      	movs	r2, #15
 800190a:	4022      	ands	r2, r4
 800190c:	2a04      	cmp	r2, #4
 800190e:	d005      	beq.n	800191c <__aeabi_ddiv+0x4f4>
 8001910:	0022      	movs	r2, r4
 8001912:	1d14      	adds	r4, r2, #4
 8001914:	4294      	cmp	r4, r2
 8001916:	4189      	sbcs	r1, r1
 8001918:	4249      	negs	r1, r1
 800191a:	185b      	adds	r3, r3, r1
 800191c:	021a      	lsls	r2, r3, #8
 800191e:	d562      	bpl.n	80019e6 <__aeabi_ddiv+0x5be>
 8001920:	2201      	movs	r2, #1
 8001922:	2300      	movs	r3, #0
 8001924:	2700      	movs	r7, #0
 8001926:	e60d      	b.n	8001544 <__aeabi_ddiv+0x11c>
 8001928:	428a      	cmp	r2, r1
 800192a:	d800      	bhi.n	800192e <__aeabi_ddiv+0x506>
 800192c:	e70a      	b.n	8001744 <__aeabi_ddiv+0x31c>
 800192e:	1e83      	subs	r3, r0, #2
 8001930:	1989      	adds	r1, r1, r6
 8001932:	e707      	b.n	8001744 <__aeabi_ddiv+0x31c>
 8001934:	230f      	movs	r3, #15
 8001936:	4013      	ands	r3, r2
 8001938:	2b04      	cmp	r3, #4
 800193a:	d100      	bne.n	800193e <__aeabi_ddiv+0x516>
 800193c:	e5e6      	b.n	800150c <__aeabi_ddiv+0xe4>
 800193e:	1d17      	adds	r7, r2, #4
 8001940:	4297      	cmp	r7, r2
 8001942:	4192      	sbcs	r2, r2
 8001944:	4253      	negs	r3, r2
 8001946:	449b      	add	fp, r3
 8001948:	08fa      	lsrs	r2, r7, #3
 800194a:	e5e0      	b.n	800150e <__aeabi_ddiv+0xe6>
 800194c:	2800      	cmp	r0, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_ddiv+0x52a>
 8001950:	e5d7      	b.n	8001502 <__aeabi_ddiv+0xda>
 8001952:	1871      	adds	r1, r6, r1
 8001954:	1e53      	subs	r3, r2, #1
 8001956:	42b1      	cmp	r1, r6
 8001958:	d327      	bcc.n	80019aa <__aeabi_ddiv+0x582>
 800195a:	42a9      	cmp	r1, r5
 800195c:	d315      	bcc.n	800198a <__aeabi_ddiv+0x562>
 800195e:	d058      	beq.n	8001a12 <__aeabi_ddiv+0x5ea>
 8001960:	001a      	movs	r2, r3
 8001962:	e773      	b.n	800184c <__aeabi_ddiv+0x424>
 8001964:	2b00      	cmp	r3, #0
 8001966:	dc00      	bgt.n	800196a <__aeabi_ddiv+0x542>
 8001968:	e604      	b.n	8001574 <__aeabi_ddiv+0x14c>
 800196a:	2301      	movs	r3, #1
 800196c:	2200      	movs	r2, #0
 800196e:	449b      	add	fp, r3
 8001970:	e5cd      	b.n	800150e <__aeabi_ddiv+0xe6>
 8001972:	2302      	movs	r3, #2
 8001974:	4447      	add	r7, r8
 8001976:	4547      	cmp	r7, r8
 8001978:	4189      	sbcs	r1, r1
 800197a:	425b      	negs	r3, r3
 800197c:	469c      	mov	ip, r3
 800197e:	4249      	negs	r1, r1
 8001980:	1989      	adds	r1, r1, r6
 8001982:	190c      	adds	r4, r1, r4
 8001984:	44e3      	add	fp, ip
 8001986:	1a24      	subs	r4, r4, r0
 8001988:	e703      	b.n	8001792 <__aeabi_ddiv+0x36a>
 800198a:	4643      	mov	r3, r8
 800198c:	005f      	lsls	r7, r3, #1
 800198e:	4547      	cmp	r7, r8
 8001990:	419b      	sbcs	r3, r3
 8001992:	46b8      	mov	r8, r7
 8001994:	425b      	negs	r3, r3
 8001996:	199e      	adds	r6, r3, r6
 8001998:	3a02      	subs	r2, #2
 800199a:	1989      	adds	r1, r1, r6
 800199c:	42a9      	cmp	r1, r5
 800199e:	d000      	beq.n	80019a2 <__aeabi_ddiv+0x57a>
 80019a0:	e754      	b.n	800184c <__aeabi_ddiv+0x424>
 80019a2:	4540      	cmp	r0, r8
 80019a4:	d000      	beq.n	80019a8 <__aeabi_ddiv+0x580>
 80019a6:	e751      	b.n	800184c <__aeabi_ddiv+0x424>
 80019a8:	e5ab      	b.n	8001502 <__aeabi_ddiv+0xda>
 80019aa:	001a      	movs	r2, r3
 80019ac:	e7f6      	b.n	800199c <__aeabi_ddiv+0x574>
 80019ae:	211f      	movs	r1, #31
 80019b0:	465f      	mov	r7, fp
 80019b2:	4249      	negs	r1, r1
 80019b4:	1b0c      	subs	r4, r1, r4
 80019b6:	40e7      	lsrs	r7, r4
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	d007      	beq.n	80019cc <__aeabi_ddiv+0x5a4>
 80019bc:	491a      	ldr	r1, [pc, #104]	; (8001a28 <__aeabi_ddiv+0x600>)
 80019be:	9b00      	ldr	r3, [sp, #0]
 80019c0:	468c      	mov	ip, r1
 80019c2:	4463      	add	r3, ip
 80019c4:	0018      	movs	r0, r3
 80019c6:	465b      	mov	r3, fp
 80019c8:	4083      	lsls	r3, r0
 80019ca:	431a      	orrs	r2, r3
 80019cc:	1e50      	subs	r0, r2, #1
 80019ce:	4182      	sbcs	r2, r0
 80019d0:	433a      	orrs	r2, r7
 80019d2:	2707      	movs	r7, #7
 80019d4:	2300      	movs	r3, #0
 80019d6:	4017      	ands	r7, r2
 80019d8:	d009      	beq.n	80019ee <__aeabi_ddiv+0x5c6>
 80019da:	210f      	movs	r1, #15
 80019dc:	2300      	movs	r3, #0
 80019de:	4011      	ands	r1, r2
 80019e0:	0014      	movs	r4, r2
 80019e2:	2904      	cmp	r1, #4
 80019e4:	d195      	bne.n	8001912 <__aeabi_ddiv+0x4ea>
 80019e6:	0022      	movs	r2, r4
 80019e8:	075f      	lsls	r7, r3, #29
 80019ea:	025b      	lsls	r3, r3, #9
 80019ec:	0b1b      	lsrs	r3, r3, #12
 80019ee:	08d2      	lsrs	r2, r2, #3
 80019f0:	4317      	orrs	r7, r2
 80019f2:	2200      	movs	r2, #0
 80019f4:	e5a6      	b.n	8001544 <__aeabi_ddiv+0x11c>
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	4659      	mov	r1, fp
 80019fa:	031b      	lsls	r3, r3, #12
 80019fc:	430b      	orrs	r3, r1
 80019fe:	031b      	lsls	r3, r3, #12
 8001a00:	0017      	movs	r7, r2
 8001a02:	0b1b      	lsrs	r3, r3, #12
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <__aeabi_ddiv+0x5f8>)
 8001a06:	e59d      	b.n	8001544 <__aeabi_ddiv+0x11c>
 8001a08:	42bd      	cmp	r5, r7
 8001a0a:	d8b2      	bhi.n	8001972 <__aeabi_ddiv+0x54a>
 8001a0c:	469b      	mov	fp, r3
 8001a0e:	2400      	movs	r4, #0
 8001a10:	e6bf      	b.n	8001792 <__aeabi_ddiv+0x36a>
 8001a12:	4580      	cmp	r8, r0
 8001a14:	d3b9      	bcc.n	800198a <__aeabi_ddiv+0x562>
 8001a16:	001a      	movs	r2, r3
 8001a18:	e7c3      	b.n	80019a2 <__aeabi_ddiv+0x57a>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	000003ff 	.word	0x000003ff
 8001a20:	000007ff 	.word	0x000007ff
 8001a24:	0000041e 	.word	0x0000041e
 8001a28:	0000043e 	.word	0x0000043e

08001a2c <__eqdf2>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	464f      	mov	r7, r9
 8001a30:	4646      	mov	r6, r8
 8001a32:	46d6      	mov	lr, sl
 8001a34:	4684      	mov	ip, r0
 8001a36:	b5c0      	push	{r6, r7, lr}
 8001a38:	4680      	mov	r8, r0
 8001a3a:	4e19      	ldr	r6, [pc, #100]	; (8001aa0 <__eqdf2+0x74>)
 8001a3c:	0318      	lsls	r0, r3, #12
 8001a3e:	030f      	lsls	r7, r1, #12
 8001a40:	004d      	lsls	r5, r1, #1
 8001a42:	0b00      	lsrs	r0, r0, #12
 8001a44:	005c      	lsls	r4, r3, #1
 8001a46:	4682      	mov	sl, r0
 8001a48:	0b3f      	lsrs	r7, r7, #12
 8001a4a:	0d6d      	lsrs	r5, r5, #21
 8001a4c:	0fc9      	lsrs	r1, r1, #31
 8001a4e:	4691      	mov	r9, r2
 8001a50:	0d64      	lsrs	r4, r4, #21
 8001a52:	0fdb      	lsrs	r3, r3, #31
 8001a54:	2001      	movs	r0, #1
 8001a56:	42b5      	cmp	r5, r6
 8001a58:	d00a      	beq.n	8001a70 <__eqdf2+0x44>
 8001a5a:	42b4      	cmp	r4, r6
 8001a5c:	d003      	beq.n	8001a66 <__eqdf2+0x3a>
 8001a5e:	42a5      	cmp	r5, r4
 8001a60:	d101      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a62:	4557      	cmp	r7, sl
 8001a64:	d00c      	beq.n	8001a80 <__eqdf2+0x54>
 8001a66:	bc1c      	pop	{r2, r3, r4}
 8001a68:	4690      	mov	r8, r2
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	46a2      	mov	sl, r4
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a70:	4666      	mov	r6, ip
 8001a72:	433e      	orrs	r6, r7
 8001a74:	d1f7      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a76:	42ac      	cmp	r4, r5
 8001a78:	d1f5      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a7a:	4654      	mov	r4, sl
 8001a7c:	4314      	orrs	r4, r2
 8001a7e:	d1f2      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a80:	2001      	movs	r0, #1
 8001a82:	45c8      	cmp	r8, r9
 8001a84:	d1ef      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a86:	4299      	cmp	r1, r3
 8001a88:	d007      	beq.n	8001a9a <__eqdf2+0x6e>
 8001a8a:	2d00      	cmp	r5, #0
 8001a8c:	d1eb      	bne.n	8001a66 <__eqdf2+0x3a>
 8001a8e:	4663      	mov	r3, ip
 8001a90:	431f      	orrs	r7, r3
 8001a92:	0038      	movs	r0, r7
 8001a94:	1e47      	subs	r7, r0, #1
 8001a96:	41b8      	sbcs	r0, r7
 8001a98:	e7e5      	b.n	8001a66 <__eqdf2+0x3a>
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	e7e3      	b.n	8001a66 <__eqdf2+0x3a>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	000007ff 	.word	0x000007ff

08001aa4 <__gedf2>:
 8001aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa6:	464f      	mov	r7, r9
 8001aa8:	4646      	mov	r6, r8
 8001aaa:	46d6      	mov	lr, sl
 8001aac:	004d      	lsls	r5, r1, #1
 8001aae:	b5c0      	push	{r6, r7, lr}
 8001ab0:	030e      	lsls	r6, r1, #12
 8001ab2:	0fc9      	lsrs	r1, r1, #31
 8001ab4:	468a      	mov	sl, r1
 8001ab6:	492c      	ldr	r1, [pc, #176]	; (8001b68 <__gedf2+0xc4>)
 8001ab8:	031f      	lsls	r7, r3, #12
 8001aba:	005c      	lsls	r4, r3, #1
 8001abc:	4680      	mov	r8, r0
 8001abe:	0b36      	lsrs	r6, r6, #12
 8001ac0:	0d6d      	lsrs	r5, r5, #21
 8001ac2:	4691      	mov	r9, r2
 8001ac4:	0b3f      	lsrs	r7, r7, #12
 8001ac6:	0d64      	lsrs	r4, r4, #21
 8001ac8:	0fdb      	lsrs	r3, r3, #31
 8001aca:	428d      	cmp	r5, r1
 8001acc:	d01e      	beq.n	8001b0c <__gedf2+0x68>
 8001ace:	428c      	cmp	r4, r1
 8001ad0:	d016      	beq.n	8001b00 <__gedf2+0x5c>
 8001ad2:	2d00      	cmp	r5, #0
 8001ad4:	d11e      	bne.n	8001b14 <__gedf2+0x70>
 8001ad6:	4330      	orrs	r0, r6
 8001ad8:	4684      	mov	ip, r0
 8001ada:	2c00      	cmp	r4, #0
 8001adc:	d101      	bne.n	8001ae2 <__gedf2+0x3e>
 8001ade:	433a      	orrs	r2, r7
 8001ae0:	d023      	beq.n	8001b2a <__gedf2+0x86>
 8001ae2:	4662      	mov	r2, ip
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	d01a      	beq.n	8001b1e <__gedf2+0x7a>
 8001ae8:	459a      	cmp	sl, r3
 8001aea:	d029      	beq.n	8001b40 <__gedf2+0x9c>
 8001aec:	4651      	mov	r1, sl
 8001aee:	2002      	movs	r0, #2
 8001af0:	3901      	subs	r1, #1
 8001af2:	4008      	ands	r0, r1
 8001af4:	3801      	subs	r0, #1
 8001af6:	bc1c      	pop	{r2, r3, r4}
 8001af8:	4690      	mov	r8, r2
 8001afa:	4699      	mov	r9, r3
 8001afc:	46a2      	mov	sl, r4
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	0039      	movs	r1, r7
 8001b02:	4311      	orrs	r1, r2
 8001b04:	d0e5      	beq.n	8001ad2 <__gedf2+0x2e>
 8001b06:	2002      	movs	r0, #2
 8001b08:	4240      	negs	r0, r0
 8001b0a:	e7f4      	b.n	8001af6 <__gedf2+0x52>
 8001b0c:	4330      	orrs	r0, r6
 8001b0e:	d1fa      	bne.n	8001b06 <__gedf2+0x62>
 8001b10:	42ac      	cmp	r4, r5
 8001b12:	d00f      	beq.n	8001b34 <__gedf2+0x90>
 8001b14:	2c00      	cmp	r4, #0
 8001b16:	d10f      	bne.n	8001b38 <__gedf2+0x94>
 8001b18:	433a      	orrs	r2, r7
 8001b1a:	d0e7      	beq.n	8001aec <__gedf2+0x48>
 8001b1c:	e00c      	b.n	8001b38 <__gedf2+0x94>
 8001b1e:	2201      	movs	r2, #1
 8001b20:	3b01      	subs	r3, #1
 8001b22:	4393      	bics	r3, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	3001      	adds	r0, #1
 8001b28:	e7e5      	b.n	8001af6 <__gedf2+0x52>
 8001b2a:	4663      	mov	r3, ip
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0e1      	beq.n	8001af6 <__gedf2+0x52>
 8001b32:	e7db      	b.n	8001aec <__gedf2+0x48>
 8001b34:	433a      	orrs	r2, r7
 8001b36:	d1e6      	bne.n	8001b06 <__gedf2+0x62>
 8001b38:	459a      	cmp	sl, r3
 8001b3a:	d1d7      	bne.n	8001aec <__gedf2+0x48>
 8001b3c:	42a5      	cmp	r5, r4
 8001b3e:	dcd5      	bgt.n	8001aec <__gedf2+0x48>
 8001b40:	42a5      	cmp	r5, r4
 8001b42:	db05      	blt.n	8001b50 <__gedf2+0xac>
 8001b44:	42be      	cmp	r6, r7
 8001b46:	d8d1      	bhi.n	8001aec <__gedf2+0x48>
 8001b48:	d008      	beq.n	8001b5c <__gedf2+0xb8>
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	42be      	cmp	r6, r7
 8001b4e:	d2d2      	bcs.n	8001af6 <__gedf2+0x52>
 8001b50:	4650      	mov	r0, sl
 8001b52:	2301      	movs	r3, #1
 8001b54:	3801      	subs	r0, #1
 8001b56:	4398      	bics	r0, r3
 8001b58:	3001      	adds	r0, #1
 8001b5a:	e7cc      	b.n	8001af6 <__gedf2+0x52>
 8001b5c:	45c8      	cmp	r8, r9
 8001b5e:	d8c5      	bhi.n	8001aec <__gedf2+0x48>
 8001b60:	2000      	movs	r0, #0
 8001b62:	45c8      	cmp	r8, r9
 8001b64:	d3f4      	bcc.n	8001b50 <__gedf2+0xac>
 8001b66:	e7c6      	b.n	8001af6 <__gedf2+0x52>
 8001b68:	000007ff 	.word	0x000007ff

08001b6c <__ledf2>:
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6e:	464f      	mov	r7, r9
 8001b70:	4646      	mov	r6, r8
 8001b72:	46d6      	mov	lr, sl
 8001b74:	004d      	lsls	r5, r1, #1
 8001b76:	b5c0      	push	{r6, r7, lr}
 8001b78:	030e      	lsls	r6, r1, #12
 8001b7a:	0fc9      	lsrs	r1, r1, #31
 8001b7c:	468a      	mov	sl, r1
 8001b7e:	492e      	ldr	r1, [pc, #184]	; (8001c38 <__ledf2+0xcc>)
 8001b80:	031f      	lsls	r7, r3, #12
 8001b82:	005c      	lsls	r4, r3, #1
 8001b84:	4680      	mov	r8, r0
 8001b86:	0b36      	lsrs	r6, r6, #12
 8001b88:	0d6d      	lsrs	r5, r5, #21
 8001b8a:	4691      	mov	r9, r2
 8001b8c:	0b3f      	lsrs	r7, r7, #12
 8001b8e:	0d64      	lsrs	r4, r4, #21
 8001b90:	0fdb      	lsrs	r3, r3, #31
 8001b92:	428d      	cmp	r5, r1
 8001b94:	d018      	beq.n	8001bc8 <__ledf2+0x5c>
 8001b96:	428c      	cmp	r4, r1
 8001b98:	d011      	beq.n	8001bbe <__ledf2+0x52>
 8001b9a:	2d00      	cmp	r5, #0
 8001b9c:	d118      	bne.n	8001bd0 <__ledf2+0x64>
 8001b9e:	4330      	orrs	r0, r6
 8001ba0:	4684      	mov	ip, r0
 8001ba2:	2c00      	cmp	r4, #0
 8001ba4:	d11e      	bne.n	8001be4 <__ledf2+0x78>
 8001ba6:	433a      	orrs	r2, r7
 8001ba8:	d11c      	bne.n	8001be4 <__ledf2+0x78>
 8001baa:	4663      	mov	r3, ip
 8001bac:	2000      	movs	r0, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d030      	beq.n	8001c14 <__ledf2+0xa8>
 8001bb2:	4651      	mov	r1, sl
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	3901      	subs	r1, #1
 8001bb8:	4008      	ands	r0, r1
 8001bba:	3801      	subs	r0, #1
 8001bbc:	e02a      	b.n	8001c14 <__ledf2+0xa8>
 8001bbe:	0039      	movs	r1, r7
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	d0ea      	beq.n	8001b9a <__ledf2+0x2e>
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	e025      	b.n	8001c14 <__ledf2+0xa8>
 8001bc8:	4330      	orrs	r0, r6
 8001bca:	d1fb      	bne.n	8001bc4 <__ledf2+0x58>
 8001bcc:	42ac      	cmp	r4, r5
 8001bce:	d026      	beq.n	8001c1e <__ledf2+0xb2>
 8001bd0:	2c00      	cmp	r4, #0
 8001bd2:	d126      	bne.n	8001c22 <__ledf2+0xb6>
 8001bd4:	433a      	orrs	r2, r7
 8001bd6:	d124      	bne.n	8001c22 <__ledf2+0xb6>
 8001bd8:	4651      	mov	r1, sl
 8001bda:	2002      	movs	r0, #2
 8001bdc:	3901      	subs	r1, #1
 8001bde:	4008      	ands	r0, r1
 8001be0:	3801      	subs	r0, #1
 8001be2:	e017      	b.n	8001c14 <__ledf2+0xa8>
 8001be4:	4662      	mov	r2, ip
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	d00f      	beq.n	8001c0a <__ledf2+0x9e>
 8001bea:	459a      	cmp	sl, r3
 8001bec:	d1e1      	bne.n	8001bb2 <__ledf2+0x46>
 8001bee:	42a5      	cmp	r5, r4
 8001bf0:	db05      	blt.n	8001bfe <__ledf2+0x92>
 8001bf2:	42be      	cmp	r6, r7
 8001bf4:	d8dd      	bhi.n	8001bb2 <__ledf2+0x46>
 8001bf6:	d019      	beq.n	8001c2c <__ledf2+0xc0>
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	42be      	cmp	r6, r7
 8001bfc:	d20a      	bcs.n	8001c14 <__ledf2+0xa8>
 8001bfe:	4650      	mov	r0, sl
 8001c00:	2301      	movs	r3, #1
 8001c02:	3801      	subs	r0, #1
 8001c04:	4398      	bics	r0, r3
 8001c06:	3001      	adds	r0, #1
 8001c08:	e004      	b.n	8001c14 <__ledf2+0xa8>
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	4393      	bics	r3, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	3001      	adds	r0, #1
 8001c14:	bc1c      	pop	{r2, r3, r4}
 8001c16:	4690      	mov	r8, r2
 8001c18:	4699      	mov	r9, r3
 8001c1a:	46a2      	mov	sl, r4
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	433a      	orrs	r2, r7
 8001c20:	d1d0      	bne.n	8001bc4 <__ledf2+0x58>
 8001c22:	459a      	cmp	sl, r3
 8001c24:	d1c5      	bne.n	8001bb2 <__ledf2+0x46>
 8001c26:	42a5      	cmp	r5, r4
 8001c28:	dcc3      	bgt.n	8001bb2 <__ledf2+0x46>
 8001c2a:	e7e0      	b.n	8001bee <__ledf2+0x82>
 8001c2c:	45c8      	cmp	r8, r9
 8001c2e:	d8c0      	bhi.n	8001bb2 <__ledf2+0x46>
 8001c30:	2000      	movs	r0, #0
 8001c32:	45c8      	cmp	r8, r9
 8001c34:	d3e3      	bcc.n	8001bfe <__ledf2+0x92>
 8001c36:	e7ed      	b.n	8001c14 <__ledf2+0xa8>
 8001c38:	000007ff 	.word	0x000007ff

08001c3c <__aeabi_dmul>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	4657      	mov	r7, sl
 8001c40:	46de      	mov	lr, fp
 8001c42:	464e      	mov	r6, r9
 8001c44:	4645      	mov	r5, r8
 8001c46:	b5e0      	push	{r5, r6, r7, lr}
 8001c48:	4683      	mov	fp, r0
 8001c4a:	0006      	movs	r6, r0
 8001c4c:	030f      	lsls	r7, r1, #12
 8001c4e:	0048      	lsls	r0, r1, #1
 8001c50:	b087      	sub	sp, #28
 8001c52:	4692      	mov	sl, r2
 8001c54:	001d      	movs	r5, r3
 8001c56:	0b3f      	lsrs	r7, r7, #12
 8001c58:	0d40      	lsrs	r0, r0, #21
 8001c5a:	0fcc      	lsrs	r4, r1, #31
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_dmul+0x26>
 8001c60:	e06f      	b.n	8001d42 <__aeabi_dmul+0x106>
 8001c62:	4bde      	ldr	r3, [pc, #888]	; (8001fdc <__aeabi_dmul+0x3a0>)
 8001c64:	4298      	cmp	r0, r3
 8001c66:	d038      	beq.n	8001cda <__aeabi_dmul+0x9e>
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	00ff      	lsls	r7, r7, #3
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431f      	orrs	r7, r3
 8001c70:	0f73      	lsrs	r3, r6, #29
 8001c72:	433b      	orrs	r3, r7
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	4bda      	ldr	r3, [pc, #872]	; (8001fe0 <__aeabi_dmul+0x3a4>)
 8001c78:	2700      	movs	r7, #0
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	469b      	mov	fp, r3
 8001c80:	00f6      	lsls	r6, r6, #3
 8001c82:	4481      	add	r9, r0
 8001c84:	032b      	lsls	r3, r5, #12
 8001c86:	0069      	lsls	r1, r5, #1
 8001c88:	0b1b      	lsrs	r3, r3, #12
 8001c8a:	4652      	mov	r2, sl
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	0d49      	lsrs	r1, r1, #21
 8001c90:	0fed      	lsrs	r5, r5, #31
 8001c92:	2900      	cmp	r1, #0
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dmul+0x5c>
 8001c96:	e085      	b.n	8001da4 <__aeabi_dmul+0x168>
 8001c98:	4bd0      	ldr	r3, [pc, #832]	; (8001fdc <__aeabi_dmul+0x3a0>)
 8001c9a:	4299      	cmp	r1, r3
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dmul+0x64>
 8001c9e:	e073      	b.n	8001d88 <__aeabi_dmul+0x14c>
 8001ca0:	4643      	mov	r3, r8
 8001ca2:	00da      	lsls	r2, r3, #3
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	4652      	mov	r2, sl
 8001cac:	48cc      	ldr	r0, [pc, #816]	; (8001fe0 <__aeabi_dmul+0x3a4>)
 8001cae:	0f52      	lsrs	r2, r2, #29
 8001cb0:	4684      	mov	ip, r0
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	4652      	mov	r2, sl
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	4461      	add	r1, ip
 8001cba:	00d2      	lsls	r2, r2, #3
 8001cbc:	4489      	add	r9, r1
 8001cbe:	0021      	movs	r1, r4
 8001cc0:	4069      	eors	r1, r5
 8001cc2:	9100      	str	r1, [sp, #0]
 8001cc4:	468c      	mov	ip, r1
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4449      	add	r1, r9
 8001cca:	468a      	mov	sl, r1
 8001ccc:	2f0f      	cmp	r7, #15
 8001cce:	d900      	bls.n	8001cd2 <__aeabi_dmul+0x96>
 8001cd0:	e090      	b.n	8001df4 <__aeabi_dmul+0x1b8>
 8001cd2:	49c4      	ldr	r1, [pc, #784]	; (8001fe4 <__aeabi_dmul+0x3a8>)
 8001cd4:	00bf      	lsls	r7, r7, #2
 8001cd6:	59cf      	ldr	r7, [r1, r7]
 8001cd8:	46bf      	mov	pc, r7
 8001cda:	465b      	mov	r3, fp
 8001cdc:	433b      	orrs	r3, r7
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	d000      	beq.n	8001ce4 <__aeabi_dmul+0xa8>
 8001ce2:	e16a      	b.n	8001fba <__aeabi_dmul+0x37e>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	2708      	movs	r7, #8
 8001ce8:	2600      	movs	r6, #0
 8001cea:	4681      	mov	r9, r0
 8001cec:	469b      	mov	fp, r3
 8001cee:	e7c9      	b.n	8001c84 <__aeabi_dmul+0x48>
 8001cf0:	0032      	movs	r2, r6
 8001cf2:	4658      	mov	r0, fp
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	4661      	mov	r1, ip
 8001cf8:	9100      	str	r1, [sp, #0]
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dmul+0xc4>
 8001cfe:	e075      	b.n	8001dec <__aeabi_dmul+0x1b0>
 8001d00:	2803      	cmp	r0, #3
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dmul+0xca>
 8001d04:	e1fe      	b.n	8002104 <__aeabi_dmul+0x4c8>
 8001d06:	2801      	cmp	r0, #1
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dmul+0xd0>
 8001d0a:	e12c      	b.n	8001f66 <__aeabi_dmul+0x32a>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2700      	movs	r7, #0
 8001d10:	2600      	movs	r6, #0
 8001d12:	2500      	movs	r5, #0
 8001d14:	033f      	lsls	r7, r7, #12
 8001d16:	0d2a      	lsrs	r2, r5, #20
 8001d18:	0b3f      	lsrs	r7, r7, #12
 8001d1a:	48b3      	ldr	r0, [pc, #716]	; (8001fe8 <__aeabi_dmul+0x3ac>)
 8001d1c:	0512      	lsls	r2, r2, #20
 8001d1e:	433a      	orrs	r2, r7
 8001d20:	4002      	ands	r2, r0
 8001d22:	051b      	lsls	r3, r3, #20
 8001d24:	4313      	orrs	r3, r2
 8001d26:	9a00      	ldr	r2, [sp, #0]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	07d1      	lsls	r1, r2, #31
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	0030      	movs	r0, r6
 8001d32:	0019      	movs	r1, r3
 8001d34:	b007      	add	sp, #28
 8001d36:	bc3c      	pop	{r2, r3, r4, r5}
 8001d38:	4690      	mov	r8, r2
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	46a2      	mov	sl, r4
 8001d3e:	46ab      	mov	fp, r5
 8001d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d42:	465b      	mov	r3, fp
 8001d44:	433b      	orrs	r3, r7
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dmul+0x110>
 8001d4a:	e12f      	b.n	8001fac <__aeabi_dmul+0x370>
 8001d4c:	2f00      	cmp	r7, #0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dmul+0x116>
 8001d50:	e1a5      	b.n	800209e <__aeabi_dmul+0x462>
 8001d52:	0038      	movs	r0, r7
 8001d54:	f000 fe20 	bl	8002998 <__clzsi2>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	3b0b      	subs	r3, #11
 8001d5c:	2b1c      	cmp	r3, #28
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_dmul+0x126>
 8001d60:	e196      	b.n	8002090 <__aeabi_dmul+0x454>
 8001d62:	221d      	movs	r2, #29
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	465a      	mov	r2, fp
 8001d68:	0001      	movs	r1, r0
 8001d6a:	40da      	lsrs	r2, r3
 8001d6c:	465e      	mov	r6, fp
 8001d6e:	3908      	subs	r1, #8
 8001d70:	408f      	lsls	r7, r1
 8001d72:	0013      	movs	r3, r2
 8001d74:	408e      	lsls	r6, r1
 8001d76:	433b      	orrs	r3, r7
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	4b9c      	ldr	r3, [pc, #624]	; (8001fec <__aeabi_dmul+0x3b0>)
 8001d7c:	2700      	movs	r7, #0
 8001d7e:	1a1b      	subs	r3, r3, r0
 8001d80:	4699      	mov	r9, r3
 8001d82:	2300      	movs	r3, #0
 8001d84:	469b      	mov	fp, r3
 8001d86:	e77d      	b.n	8001c84 <__aeabi_dmul+0x48>
 8001d88:	4641      	mov	r1, r8
 8001d8a:	4653      	mov	r3, sl
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	4993      	ldr	r1, [pc, #588]	; (8001fdc <__aeabi_dmul+0x3a0>)
 8001d90:	468c      	mov	ip, r1
 8001d92:	44e1      	add	r9, ip
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d000      	beq.n	8001d9a <__aeabi_dmul+0x15e>
 8001d98:	e11a      	b.n	8001fd0 <__aeabi_dmul+0x394>
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	4317      	orrs	r7, r2
 8001da0:	2200      	movs	r2, #0
 8001da2:	e78c      	b.n	8001cbe <__aeabi_dmul+0x82>
 8001da4:	4313      	orrs	r3, r2
 8001da6:	d100      	bne.n	8001daa <__aeabi_dmul+0x16e>
 8001da8:	e10d      	b.n	8001fc6 <__aeabi_dmul+0x38a>
 8001daa:	4643      	mov	r3, r8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dmul+0x176>
 8001db0:	e181      	b.n	80020b6 <__aeabi_dmul+0x47a>
 8001db2:	4640      	mov	r0, r8
 8001db4:	f000 fdf0 	bl	8002998 <__clzsi2>
 8001db8:	0002      	movs	r2, r0
 8001dba:	3a0b      	subs	r2, #11
 8001dbc:	2a1c      	cmp	r2, #28
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dmul+0x186>
 8001dc0:	e172      	b.n	80020a8 <__aeabi_dmul+0x46c>
 8001dc2:	0001      	movs	r1, r0
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	3908      	subs	r1, #8
 8001dc8:	408b      	lsls	r3, r1
 8001dca:	4698      	mov	r8, r3
 8001dcc:	231d      	movs	r3, #29
 8001dce:	1a9a      	subs	r2, r3, r2
 8001dd0:	4653      	mov	r3, sl
 8001dd2:	40d3      	lsrs	r3, r2
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	4643      	mov	r3, r8
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	4652      	mov	r2, sl
 8001ddc:	408a      	lsls	r2, r1
 8001dde:	4649      	mov	r1, r9
 8001de0:	1a08      	subs	r0, r1, r0
 8001de2:	4982      	ldr	r1, [pc, #520]	; (8001fec <__aeabi_dmul+0x3b0>)
 8001de4:	4689      	mov	r9, r1
 8001de6:	4481      	add	r9, r0
 8001de8:	2000      	movs	r0, #0
 8001dea:	e768      	b.n	8001cbe <__aeabi_dmul+0x82>
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <__aeabi_dmul+0x3a0>)
 8001dee:	2700      	movs	r7, #0
 8001df0:	2600      	movs	r6, #0
 8001df2:	e78e      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8001df4:	0c14      	lsrs	r4, r2, #16
 8001df6:	0412      	lsls	r2, r2, #16
 8001df8:	0c12      	lsrs	r2, r2, #16
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0c37      	lsrs	r7, r6, #16
 8001dfe:	0436      	lsls	r6, r6, #16
 8001e00:	0c35      	lsrs	r5, r6, #16
 8001e02:	4379      	muls	r1, r7
 8001e04:	0028      	movs	r0, r5
 8001e06:	468c      	mov	ip, r1
 8001e08:	002e      	movs	r6, r5
 8001e0a:	4360      	muls	r0, r4
 8001e0c:	4460      	add	r0, ip
 8001e0e:	4683      	mov	fp, r0
 8001e10:	4356      	muls	r6, r2
 8001e12:	0021      	movs	r1, r4
 8001e14:	0c30      	lsrs	r0, r6, #16
 8001e16:	4680      	mov	r8, r0
 8001e18:	4658      	mov	r0, fp
 8001e1a:	4379      	muls	r1, r7
 8001e1c:	4440      	add	r0, r8
 8001e1e:	9102      	str	r1, [sp, #8]
 8001e20:	4584      	cmp	ip, r0
 8001e22:	d906      	bls.n	8001e32 <__aeabi_dmul+0x1f6>
 8001e24:	4688      	mov	r8, r1
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	0249      	lsls	r1, r1, #9
 8001e2a:	468c      	mov	ip, r1
 8001e2c:	44e0      	add	r8, ip
 8001e2e:	4641      	mov	r1, r8
 8001e30:	9102      	str	r1, [sp, #8]
 8001e32:	0436      	lsls	r6, r6, #16
 8001e34:	0c01      	lsrs	r1, r0, #16
 8001e36:	0c36      	lsrs	r6, r6, #16
 8001e38:	0400      	lsls	r0, r0, #16
 8001e3a:	468b      	mov	fp, r1
 8001e3c:	1981      	adds	r1, r0, r6
 8001e3e:	0c1e      	lsrs	r6, r3, #16
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	9103      	str	r1, [sp, #12]
 8001e46:	0019      	movs	r1, r3
 8001e48:	4379      	muls	r1, r7
 8001e4a:	468c      	mov	ip, r1
 8001e4c:	0028      	movs	r0, r5
 8001e4e:	4375      	muls	r5, r6
 8001e50:	4465      	add	r5, ip
 8001e52:	46a8      	mov	r8, r5
 8001e54:	4358      	muls	r0, r3
 8001e56:	0c05      	lsrs	r5, r0, #16
 8001e58:	4445      	add	r5, r8
 8001e5a:	4377      	muls	r7, r6
 8001e5c:	42a9      	cmp	r1, r5
 8001e5e:	d903      	bls.n	8001e68 <__aeabi_dmul+0x22c>
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	0249      	lsls	r1, r1, #9
 8001e64:	468c      	mov	ip, r1
 8001e66:	4467      	add	r7, ip
 8001e68:	0c29      	lsrs	r1, r5, #16
 8001e6a:	468c      	mov	ip, r1
 8001e6c:	0039      	movs	r1, r7
 8001e6e:	0400      	lsls	r0, r0, #16
 8001e70:	0c00      	lsrs	r0, r0, #16
 8001e72:	042d      	lsls	r5, r5, #16
 8001e74:	182d      	adds	r5, r5, r0
 8001e76:	4461      	add	r1, ip
 8001e78:	44ab      	add	fp, r5
 8001e7a:	9105      	str	r1, [sp, #20]
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	9104      	str	r1, [sp, #16]
 8001e80:	9901      	ldr	r1, [sp, #4]
 8001e82:	040f      	lsls	r7, r1, #16
 8001e84:	0c3f      	lsrs	r7, r7, #16
 8001e86:	0c08      	lsrs	r0, r1, #16
 8001e88:	0039      	movs	r1, r7
 8001e8a:	4351      	muls	r1, r2
 8001e8c:	4342      	muls	r2, r0
 8001e8e:	4690      	mov	r8, r2
 8001e90:	0002      	movs	r2, r0
 8001e92:	468c      	mov	ip, r1
 8001e94:	0c09      	lsrs	r1, r1, #16
 8001e96:	468b      	mov	fp, r1
 8001e98:	4362      	muls	r2, r4
 8001e9a:	437c      	muls	r4, r7
 8001e9c:	4444      	add	r4, r8
 8001e9e:	445c      	add	r4, fp
 8001ea0:	45a0      	cmp	r8, r4
 8001ea2:	d903      	bls.n	8001eac <__aeabi_dmul+0x270>
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0249      	lsls	r1, r1, #9
 8001ea8:	4688      	mov	r8, r1
 8001eaa:	4442      	add	r2, r8
 8001eac:	0c21      	lsrs	r1, r4, #16
 8001eae:	4688      	mov	r8, r1
 8001eb0:	4661      	mov	r1, ip
 8001eb2:	0409      	lsls	r1, r1, #16
 8001eb4:	0c09      	lsrs	r1, r1, #16
 8001eb6:	468c      	mov	ip, r1
 8001eb8:	0039      	movs	r1, r7
 8001eba:	4359      	muls	r1, r3
 8001ebc:	4343      	muls	r3, r0
 8001ebe:	4370      	muls	r0, r6
 8001ec0:	437e      	muls	r6, r7
 8001ec2:	0c0f      	lsrs	r7, r1, #16
 8001ec4:	18f6      	adds	r6, r6, r3
 8001ec6:	0424      	lsls	r4, r4, #16
 8001ec8:	19be      	adds	r6, r7, r6
 8001eca:	4464      	add	r4, ip
 8001ecc:	4442      	add	r2, r8
 8001ece:	468c      	mov	ip, r1
 8001ed0:	42b3      	cmp	r3, r6
 8001ed2:	d903      	bls.n	8001edc <__aeabi_dmul+0x2a0>
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	4698      	mov	r8, r3
 8001eda:	4440      	add	r0, r8
 8001edc:	9b02      	ldr	r3, [sp, #8]
 8001ede:	4661      	mov	r1, ip
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	9b04      	ldr	r3, [sp, #16]
 8001ee4:	0437      	lsls	r7, r6, #16
 8001ee6:	4443      	add	r3, r8
 8001ee8:	469b      	mov	fp, r3
 8001eea:	45ab      	cmp	fp, r5
 8001eec:	41ad      	sbcs	r5, r5
 8001eee:	426b      	negs	r3, r5
 8001ef0:	040d      	lsls	r5, r1, #16
 8001ef2:	9905      	ldr	r1, [sp, #20]
 8001ef4:	0c2d      	lsrs	r5, r5, #16
 8001ef6:	468c      	mov	ip, r1
 8001ef8:	197f      	adds	r7, r7, r5
 8001efa:	4467      	add	r7, ip
 8001efc:	18fd      	adds	r5, r7, r3
 8001efe:	46a8      	mov	r8, r5
 8001f00:	465d      	mov	r5, fp
 8001f02:	192d      	adds	r5, r5, r4
 8001f04:	42a5      	cmp	r5, r4
 8001f06:	41a4      	sbcs	r4, r4
 8001f08:	4693      	mov	fp, r2
 8001f0a:	4264      	negs	r4, r4
 8001f0c:	46a4      	mov	ip, r4
 8001f0e:	44c3      	add	fp, r8
 8001f10:	44dc      	add	ip, fp
 8001f12:	428f      	cmp	r7, r1
 8001f14:	41bf      	sbcs	r7, r7
 8001f16:	4598      	cmp	r8, r3
 8001f18:	419b      	sbcs	r3, r3
 8001f1a:	4593      	cmp	fp, r2
 8001f1c:	4192      	sbcs	r2, r2
 8001f1e:	45a4      	cmp	ip, r4
 8001f20:	41a4      	sbcs	r4, r4
 8001f22:	425b      	negs	r3, r3
 8001f24:	427f      	negs	r7, r7
 8001f26:	431f      	orrs	r7, r3
 8001f28:	0c36      	lsrs	r6, r6, #16
 8001f2a:	4252      	negs	r2, r2
 8001f2c:	4264      	negs	r4, r4
 8001f2e:	19bf      	adds	r7, r7, r6
 8001f30:	4322      	orrs	r2, r4
 8001f32:	18bf      	adds	r7, r7, r2
 8001f34:	4662      	mov	r2, ip
 8001f36:	1838      	adds	r0, r7, r0
 8001f38:	0243      	lsls	r3, r0, #9
 8001f3a:	0dd2      	lsrs	r2, r2, #23
 8001f3c:	9903      	ldr	r1, [sp, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	026a      	lsls	r2, r5, #9
 8001f42:	430a      	orrs	r2, r1
 8001f44:	1e50      	subs	r0, r2, #1
 8001f46:	4182      	sbcs	r2, r0
 8001f48:	4661      	mov	r1, ip
 8001f4a:	0ded      	lsrs	r5, r5, #23
 8001f4c:	432a      	orrs	r2, r5
 8001f4e:	024e      	lsls	r6, r1, #9
 8001f50:	4332      	orrs	r2, r6
 8001f52:	01d9      	lsls	r1, r3, #7
 8001f54:	d400      	bmi.n	8001f58 <__aeabi_dmul+0x31c>
 8001f56:	e0b3      	b.n	80020c0 <__aeabi_dmul+0x484>
 8001f58:	2601      	movs	r6, #1
 8001f5a:	0850      	lsrs	r0, r2, #1
 8001f5c:	4032      	ands	r2, r6
 8001f5e:	4302      	orrs	r2, r0
 8001f60:	07de      	lsls	r6, r3, #31
 8001f62:	4332      	orrs	r2, r6
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	4c22      	ldr	r4, [pc, #136]	; (8001ff0 <__aeabi_dmul+0x3b4>)
 8001f68:	4454      	add	r4, sl
 8001f6a:	2c00      	cmp	r4, #0
 8001f6c:	dd62      	ble.n	8002034 <__aeabi_dmul+0x3f8>
 8001f6e:	0751      	lsls	r1, r2, #29
 8001f70:	d009      	beq.n	8001f86 <__aeabi_dmul+0x34a>
 8001f72:	200f      	movs	r0, #15
 8001f74:	4010      	ands	r0, r2
 8001f76:	2804      	cmp	r0, #4
 8001f78:	d005      	beq.n	8001f86 <__aeabi_dmul+0x34a>
 8001f7a:	1d10      	adds	r0, r2, #4
 8001f7c:	4290      	cmp	r0, r2
 8001f7e:	4192      	sbcs	r2, r2
 8001f80:	4252      	negs	r2, r2
 8001f82:	189b      	adds	r3, r3, r2
 8001f84:	0002      	movs	r2, r0
 8001f86:	01d9      	lsls	r1, r3, #7
 8001f88:	d504      	bpl.n	8001f94 <__aeabi_dmul+0x358>
 8001f8a:	2480      	movs	r4, #128	; 0x80
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <__aeabi_dmul+0x3b8>)
 8001f8e:	00e4      	lsls	r4, r4, #3
 8001f90:	4003      	ands	r3, r0
 8001f92:	4454      	add	r4, sl
 8001f94:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <__aeabi_dmul+0x3bc>)
 8001f96:	4284      	cmp	r4, r0
 8001f98:	dd00      	ble.n	8001f9c <__aeabi_dmul+0x360>
 8001f9a:	e727      	b.n	8001dec <__aeabi_dmul+0x1b0>
 8001f9c:	075e      	lsls	r6, r3, #29
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	08d2      	lsrs	r2, r2, #3
 8001fa2:	0b1f      	lsrs	r7, r3, #12
 8001fa4:	0563      	lsls	r3, r4, #21
 8001fa6:	4316      	orrs	r6, r2
 8001fa8:	0d5b      	lsrs	r3, r3, #21
 8001faa:	e6b2      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8001fac:	2300      	movs	r3, #0
 8001fae:	4699      	mov	r9, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	2704      	movs	r7, #4
 8001fb4:	2600      	movs	r6, #0
 8001fb6:	469b      	mov	fp, r3
 8001fb8:	e664      	b.n	8001c84 <__aeabi_dmul+0x48>
 8001fba:	2303      	movs	r3, #3
 8001fbc:	9701      	str	r7, [sp, #4]
 8001fbe:	4681      	mov	r9, r0
 8001fc0:	270c      	movs	r7, #12
 8001fc2:	469b      	mov	fp, r3
 8001fc4:	e65e      	b.n	8001c84 <__aeabi_dmul+0x48>
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2001      	movs	r0, #1
 8001fca:	4317      	orrs	r7, r2
 8001fcc:	2200      	movs	r2, #0
 8001fce:	e676      	b.n	8001cbe <__aeabi_dmul+0x82>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	431f      	orrs	r7, r3
 8001fd6:	4643      	mov	r3, r8
 8001fd8:	e671      	b.n	8001cbe <__aeabi_dmul+0x82>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	000007ff 	.word	0x000007ff
 8001fe0:	fffffc01 	.word	0xfffffc01
 8001fe4:	08027744 	.word	0x08027744
 8001fe8:	800fffff 	.word	0x800fffff
 8001fec:	fffffc0d 	.word	0xfffffc0d
 8001ff0:	000003ff 	.word	0x000003ff
 8001ff4:	feffffff 	.word	0xfeffffff
 8001ff8:	000007fe 	.word	0x000007fe
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2780      	movs	r7, #128	; 0x80
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	033f      	lsls	r7, r7, #12
 8002004:	2600      	movs	r6, #0
 8002006:	4b43      	ldr	r3, [pc, #268]	; (8002114 <__aeabi_dmul+0x4d8>)
 8002008:	e683      	b.n	8001d12 <__aeabi_dmul+0xd6>
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	0032      	movs	r2, r6
 800200e:	46a4      	mov	ip, r4
 8002010:	4658      	mov	r0, fp
 8002012:	e670      	b.n	8001cf6 <__aeabi_dmul+0xba>
 8002014:	46ac      	mov	ip, r5
 8002016:	e66e      	b.n	8001cf6 <__aeabi_dmul+0xba>
 8002018:	2780      	movs	r7, #128	; 0x80
 800201a:	9901      	ldr	r1, [sp, #4]
 800201c:	033f      	lsls	r7, r7, #12
 800201e:	4239      	tst	r1, r7
 8002020:	d02d      	beq.n	800207e <__aeabi_dmul+0x442>
 8002022:	423b      	tst	r3, r7
 8002024:	d12b      	bne.n	800207e <__aeabi_dmul+0x442>
 8002026:	431f      	orrs	r7, r3
 8002028:	033f      	lsls	r7, r7, #12
 800202a:	0b3f      	lsrs	r7, r7, #12
 800202c:	9500      	str	r5, [sp, #0]
 800202e:	0016      	movs	r6, r2
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <__aeabi_dmul+0x4d8>)
 8002032:	e66e      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8002034:	2501      	movs	r5, #1
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	2d38      	cmp	r5, #56	; 0x38
 800203a:	dd00      	ble.n	800203e <__aeabi_dmul+0x402>
 800203c:	e666      	b.n	8001d0c <__aeabi_dmul+0xd0>
 800203e:	2d1f      	cmp	r5, #31
 8002040:	dc40      	bgt.n	80020c4 <__aeabi_dmul+0x488>
 8002042:	4835      	ldr	r0, [pc, #212]	; (8002118 <__aeabi_dmul+0x4dc>)
 8002044:	001c      	movs	r4, r3
 8002046:	4450      	add	r0, sl
 8002048:	0016      	movs	r6, r2
 800204a:	4082      	lsls	r2, r0
 800204c:	4084      	lsls	r4, r0
 800204e:	40ee      	lsrs	r6, r5
 8002050:	1e50      	subs	r0, r2, #1
 8002052:	4182      	sbcs	r2, r0
 8002054:	4334      	orrs	r4, r6
 8002056:	4314      	orrs	r4, r2
 8002058:	40eb      	lsrs	r3, r5
 800205a:	0762      	lsls	r2, r4, #29
 800205c:	d009      	beq.n	8002072 <__aeabi_dmul+0x436>
 800205e:	220f      	movs	r2, #15
 8002060:	4022      	ands	r2, r4
 8002062:	2a04      	cmp	r2, #4
 8002064:	d005      	beq.n	8002072 <__aeabi_dmul+0x436>
 8002066:	0022      	movs	r2, r4
 8002068:	1d14      	adds	r4, r2, #4
 800206a:	4294      	cmp	r4, r2
 800206c:	4180      	sbcs	r0, r0
 800206e:	4240      	negs	r0, r0
 8002070:	181b      	adds	r3, r3, r0
 8002072:	021a      	lsls	r2, r3, #8
 8002074:	d53e      	bpl.n	80020f4 <__aeabi_dmul+0x4b8>
 8002076:	2301      	movs	r3, #1
 8002078:	2700      	movs	r7, #0
 800207a:	2600      	movs	r6, #0
 800207c:	e649      	b.n	8001d12 <__aeabi_dmul+0xd6>
 800207e:	2780      	movs	r7, #128	; 0x80
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	033f      	lsls	r7, r7, #12
 8002084:	431f      	orrs	r7, r3
 8002086:	033f      	lsls	r7, r7, #12
 8002088:	0b3f      	lsrs	r7, r7, #12
 800208a:	9400      	str	r4, [sp, #0]
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <__aeabi_dmul+0x4d8>)
 800208e:	e640      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8002090:	0003      	movs	r3, r0
 8002092:	465a      	mov	r2, fp
 8002094:	3b28      	subs	r3, #40	; 0x28
 8002096:	409a      	lsls	r2, r3
 8002098:	2600      	movs	r6, #0
 800209a:	9201      	str	r2, [sp, #4]
 800209c:	e66d      	b.n	8001d7a <__aeabi_dmul+0x13e>
 800209e:	4658      	mov	r0, fp
 80020a0:	f000 fc7a 	bl	8002998 <__clzsi2>
 80020a4:	3020      	adds	r0, #32
 80020a6:	e657      	b.n	8001d58 <__aeabi_dmul+0x11c>
 80020a8:	0003      	movs	r3, r0
 80020aa:	4652      	mov	r2, sl
 80020ac:	3b28      	subs	r3, #40	; 0x28
 80020ae:	409a      	lsls	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	2200      	movs	r2, #0
 80020b4:	e693      	b.n	8001dde <__aeabi_dmul+0x1a2>
 80020b6:	4650      	mov	r0, sl
 80020b8:	f000 fc6e 	bl	8002998 <__clzsi2>
 80020bc:	3020      	adds	r0, #32
 80020be:	e67b      	b.n	8001db8 <__aeabi_dmul+0x17c>
 80020c0:	46ca      	mov	sl, r9
 80020c2:	e750      	b.n	8001f66 <__aeabi_dmul+0x32a>
 80020c4:	201f      	movs	r0, #31
 80020c6:	001e      	movs	r6, r3
 80020c8:	4240      	negs	r0, r0
 80020ca:	1b04      	subs	r4, r0, r4
 80020cc:	40e6      	lsrs	r6, r4
 80020ce:	2d20      	cmp	r5, #32
 80020d0:	d003      	beq.n	80020da <__aeabi_dmul+0x49e>
 80020d2:	4c12      	ldr	r4, [pc, #72]	; (800211c <__aeabi_dmul+0x4e0>)
 80020d4:	4454      	add	r4, sl
 80020d6:	40a3      	lsls	r3, r4
 80020d8:	431a      	orrs	r2, r3
 80020da:	1e50      	subs	r0, r2, #1
 80020dc:	4182      	sbcs	r2, r0
 80020de:	4332      	orrs	r2, r6
 80020e0:	2607      	movs	r6, #7
 80020e2:	2700      	movs	r7, #0
 80020e4:	4016      	ands	r6, r2
 80020e6:	d009      	beq.n	80020fc <__aeabi_dmul+0x4c0>
 80020e8:	200f      	movs	r0, #15
 80020ea:	2300      	movs	r3, #0
 80020ec:	4010      	ands	r0, r2
 80020ee:	0014      	movs	r4, r2
 80020f0:	2804      	cmp	r0, #4
 80020f2:	d1b9      	bne.n	8002068 <__aeabi_dmul+0x42c>
 80020f4:	0022      	movs	r2, r4
 80020f6:	075e      	lsls	r6, r3, #29
 80020f8:	025b      	lsls	r3, r3, #9
 80020fa:	0b1f      	lsrs	r7, r3, #12
 80020fc:	08d2      	lsrs	r2, r2, #3
 80020fe:	4316      	orrs	r6, r2
 8002100:	2300      	movs	r3, #0
 8002102:	e606      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8002104:	2780      	movs	r7, #128	; 0x80
 8002106:	033f      	lsls	r7, r7, #12
 8002108:	431f      	orrs	r7, r3
 800210a:	033f      	lsls	r7, r7, #12
 800210c:	0b3f      	lsrs	r7, r7, #12
 800210e:	0016      	movs	r6, r2
 8002110:	4b00      	ldr	r3, [pc, #0]	; (8002114 <__aeabi_dmul+0x4d8>)
 8002112:	e5fe      	b.n	8001d12 <__aeabi_dmul+0xd6>
 8002114:	000007ff 	.word	0x000007ff
 8002118:	0000041e 	.word	0x0000041e
 800211c:	0000043e 	.word	0x0000043e

08002120 <__aeabi_dsub>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	4657      	mov	r7, sl
 8002124:	464e      	mov	r6, r9
 8002126:	4645      	mov	r5, r8
 8002128:	46de      	mov	lr, fp
 800212a:	000c      	movs	r4, r1
 800212c:	0309      	lsls	r1, r1, #12
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	0a49      	lsrs	r1, r1, #9
 8002132:	0f46      	lsrs	r6, r0, #29
 8002134:	005f      	lsls	r7, r3, #1
 8002136:	4331      	orrs	r1, r6
 8002138:	031e      	lsls	r6, r3, #12
 800213a:	0fdb      	lsrs	r3, r3, #31
 800213c:	0a76      	lsrs	r6, r6, #9
 800213e:	469b      	mov	fp, r3
 8002140:	0f53      	lsrs	r3, r2, #29
 8002142:	4333      	orrs	r3, r6
 8002144:	4ec8      	ldr	r6, [pc, #800]	; (8002468 <__aeabi_dsub+0x348>)
 8002146:	0065      	lsls	r5, r4, #1
 8002148:	00c0      	lsls	r0, r0, #3
 800214a:	0fe4      	lsrs	r4, r4, #31
 800214c:	00d2      	lsls	r2, r2, #3
 800214e:	0d6d      	lsrs	r5, r5, #21
 8002150:	46a2      	mov	sl, r4
 8002152:	4681      	mov	r9, r0
 8002154:	0d7f      	lsrs	r7, r7, #21
 8002156:	469c      	mov	ip, r3
 8002158:	4690      	mov	r8, r2
 800215a:	42b7      	cmp	r7, r6
 800215c:	d100      	bne.n	8002160 <__aeabi_dsub+0x40>
 800215e:	e0b9      	b.n	80022d4 <__aeabi_dsub+0x1b4>
 8002160:	465b      	mov	r3, fp
 8002162:	2601      	movs	r6, #1
 8002164:	4073      	eors	r3, r6
 8002166:	469b      	mov	fp, r3
 8002168:	1bee      	subs	r6, r5, r7
 800216a:	45a3      	cmp	fp, r4
 800216c:	d100      	bne.n	8002170 <__aeabi_dsub+0x50>
 800216e:	e083      	b.n	8002278 <__aeabi_dsub+0x158>
 8002170:	2e00      	cmp	r6, #0
 8002172:	dd63      	ble.n	800223c <__aeabi_dsub+0x11c>
 8002174:	2f00      	cmp	r7, #0
 8002176:	d000      	beq.n	800217a <__aeabi_dsub+0x5a>
 8002178:	e0b1      	b.n	80022de <__aeabi_dsub+0x1be>
 800217a:	4663      	mov	r3, ip
 800217c:	4313      	orrs	r3, r2
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x62>
 8002180:	e123      	b.n	80023ca <__aeabi_dsub+0x2aa>
 8002182:	1e73      	subs	r3, r6, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d000      	beq.n	800218a <__aeabi_dsub+0x6a>
 8002188:	e1ba      	b.n	8002500 <__aeabi_dsub+0x3e0>
 800218a:	1a86      	subs	r6, r0, r2
 800218c:	4663      	mov	r3, ip
 800218e:	42b0      	cmp	r0, r6
 8002190:	4180      	sbcs	r0, r0
 8002192:	2501      	movs	r5, #1
 8002194:	1ac9      	subs	r1, r1, r3
 8002196:	4240      	negs	r0, r0
 8002198:	1a09      	subs	r1, r1, r0
 800219a:	020b      	lsls	r3, r1, #8
 800219c:	d400      	bmi.n	80021a0 <__aeabi_dsub+0x80>
 800219e:	e147      	b.n	8002430 <__aeabi_dsub+0x310>
 80021a0:	0249      	lsls	r1, r1, #9
 80021a2:	0a4b      	lsrs	r3, r1, #9
 80021a4:	4698      	mov	r8, r3
 80021a6:	4643      	mov	r3, r8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x8e>
 80021ac:	e189      	b.n	80024c2 <__aeabi_dsub+0x3a2>
 80021ae:	4640      	mov	r0, r8
 80021b0:	f000 fbf2 	bl	8002998 <__clzsi2>
 80021b4:	0003      	movs	r3, r0
 80021b6:	3b08      	subs	r3, #8
 80021b8:	2b1f      	cmp	r3, #31
 80021ba:	dd00      	ble.n	80021be <__aeabi_dsub+0x9e>
 80021bc:	e17c      	b.n	80024b8 <__aeabi_dsub+0x398>
 80021be:	2220      	movs	r2, #32
 80021c0:	0030      	movs	r0, r6
 80021c2:	1ad2      	subs	r2, r2, r3
 80021c4:	4641      	mov	r1, r8
 80021c6:	40d0      	lsrs	r0, r2
 80021c8:	4099      	lsls	r1, r3
 80021ca:	0002      	movs	r2, r0
 80021cc:	409e      	lsls	r6, r3
 80021ce:	430a      	orrs	r2, r1
 80021d0:	429d      	cmp	r5, r3
 80021d2:	dd00      	ble.n	80021d6 <__aeabi_dsub+0xb6>
 80021d4:	e16a      	b.n	80024ac <__aeabi_dsub+0x38c>
 80021d6:	1b5d      	subs	r5, r3, r5
 80021d8:	1c6b      	adds	r3, r5, #1
 80021da:	2b1f      	cmp	r3, #31
 80021dc:	dd00      	ble.n	80021e0 <__aeabi_dsub+0xc0>
 80021de:	e194      	b.n	800250a <__aeabi_dsub+0x3ea>
 80021e0:	2120      	movs	r1, #32
 80021e2:	0010      	movs	r0, r2
 80021e4:	0035      	movs	r5, r6
 80021e6:	1ac9      	subs	r1, r1, r3
 80021e8:	408e      	lsls	r6, r1
 80021ea:	40da      	lsrs	r2, r3
 80021ec:	4088      	lsls	r0, r1
 80021ee:	40dd      	lsrs	r5, r3
 80021f0:	1e71      	subs	r1, r6, #1
 80021f2:	418e      	sbcs	r6, r1
 80021f4:	0011      	movs	r1, r2
 80021f6:	2207      	movs	r2, #7
 80021f8:	4328      	orrs	r0, r5
 80021fa:	2500      	movs	r5, #0
 80021fc:	4306      	orrs	r6, r0
 80021fe:	4032      	ands	r2, r6
 8002200:	2a00      	cmp	r2, #0
 8002202:	d009      	beq.n	8002218 <__aeabi_dsub+0xf8>
 8002204:	230f      	movs	r3, #15
 8002206:	4033      	ands	r3, r6
 8002208:	2b04      	cmp	r3, #4
 800220a:	d005      	beq.n	8002218 <__aeabi_dsub+0xf8>
 800220c:	1d33      	adds	r3, r6, #4
 800220e:	42b3      	cmp	r3, r6
 8002210:	41b6      	sbcs	r6, r6
 8002212:	4276      	negs	r6, r6
 8002214:	1989      	adds	r1, r1, r6
 8002216:	001e      	movs	r6, r3
 8002218:	020b      	lsls	r3, r1, #8
 800221a:	d400      	bmi.n	800221e <__aeabi_dsub+0xfe>
 800221c:	e23d      	b.n	800269a <__aeabi_dsub+0x57a>
 800221e:	1c6a      	adds	r2, r5, #1
 8002220:	4b91      	ldr	r3, [pc, #580]	; (8002468 <__aeabi_dsub+0x348>)
 8002222:	0555      	lsls	r5, r2, #21
 8002224:	0d6d      	lsrs	r5, r5, #21
 8002226:	429a      	cmp	r2, r3
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x10c>
 800222a:	e119      	b.n	8002460 <__aeabi_dsub+0x340>
 800222c:	4a8f      	ldr	r2, [pc, #572]	; (800246c <__aeabi_dsub+0x34c>)
 800222e:	08f6      	lsrs	r6, r6, #3
 8002230:	400a      	ands	r2, r1
 8002232:	0757      	lsls	r7, r2, #29
 8002234:	0252      	lsls	r2, r2, #9
 8002236:	4337      	orrs	r7, r6
 8002238:	0b12      	lsrs	r2, r2, #12
 800223a:	e09b      	b.n	8002374 <__aeabi_dsub+0x254>
 800223c:	2e00      	cmp	r6, #0
 800223e:	d000      	beq.n	8002242 <__aeabi_dsub+0x122>
 8002240:	e0c5      	b.n	80023ce <__aeabi_dsub+0x2ae>
 8002242:	1c6e      	adds	r6, r5, #1
 8002244:	0576      	lsls	r6, r6, #21
 8002246:	0d76      	lsrs	r6, r6, #21
 8002248:	2e01      	cmp	r6, #1
 800224a:	dc00      	bgt.n	800224e <__aeabi_dsub+0x12e>
 800224c:	e148      	b.n	80024e0 <__aeabi_dsub+0x3c0>
 800224e:	4667      	mov	r7, ip
 8002250:	1a86      	subs	r6, r0, r2
 8002252:	1bcb      	subs	r3, r1, r7
 8002254:	42b0      	cmp	r0, r6
 8002256:	41bf      	sbcs	r7, r7
 8002258:	427f      	negs	r7, r7
 800225a:	46b8      	mov	r8, r7
 800225c:	001f      	movs	r7, r3
 800225e:	4643      	mov	r3, r8
 8002260:	1aff      	subs	r7, r7, r3
 8002262:	003b      	movs	r3, r7
 8002264:	46b8      	mov	r8, r7
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	d500      	bpl.n	800226c <__aeabi_dsub+0x14c>
 800226a:	e15f      	b.n	800252c <__aeabi_dsub+0x40c>
 800226c:	4337      	orrs	r7, r6
 800226e:	d19a      	bne.n	80021a6 <__aeabi_dsub+0x86>
 8002270:	2200      	movs	r2, #0
 8002272:	2400      	movs	r4, #0
 8002274:	2500      	movs	r5, #0
 8002276:	e079      	b.n	800236c <__aeabi_dsub+0x24c>
 8002278:	2e00      	cmp	r6, #0
 800227a:	dc00      	bgt.n	800227e <__aeabi_dsub+0x15e>
 800227c:	e0fa      	b.n	8002474 <__aeabi_dsub+0x354>
 800227e:	2f00      	cmp	r7, #0
 8002280:	d100      	bne.n	8002284 <__aeabi_dsub+0x164>
 8002282:	e08d      	b.n	80023a0 <__aeabi_dsub+0x280>
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <__aeabi_dsub+0x348>)
 8002286:	429d      	cmp	r5, r3
 8002288:	d067      	beq.n	800235a <__aeabi_dsub+0x23a>
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	4667      	mov	r7, ip
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	431f      	orrs	r7, r3
 8002292:	46bc      	mov	ip, r7
 8002294:	2e38      	cmp	r6, #56	; 0x38
 8002296:	dc00      	bgt.n	800229a <__aeabi_dsub+0x17a>
 8002298:	e152      	b.n	8002540 <__aeabi_dsub+0x420>
 800229a:	4663      	mov	r3, ip
 800229c:	4313      	orrs	r3, r2
 800229e:	1e5a      	subs	r2, r3, #1
 80022a0:	4193      	sbcs	r3, r2
 80022a2:	181e      	adds	r6, r3, r0
 80022a4:	4286      	cmp	r6, r0
 80022a6:	4180      	sbcs	r0, r0
 80022a8:	4240      	negs	r0, r0
 80022aa:	1809      	adds	r1, r1, r0
 80022ac:	020b      	lsls	r3, r1, #8
 80022ae:	d400      	bmi.n	80022b2 <__aeabi_dsub+0x192>
 80022b0:	e0be      	b.n	8002430 <__aeabi_dsub+0x310>
 80022b2:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <__aeabi_dsub+0x348>)
 80022b4:	3501      	adds	r5, #1
 80022b6:	429d      	cmp	r5, r3
 80022b8:	d100      	bne.n	80022bc <__aeabi_dsub+0x19c>
 80022ba:	e0d2      	b.n	8002462 <__aeabi_dsub+0x342>
 80022bc:	4a6b      	ldr	r2, [pc, #428]	; (800246c <__aeabi_dsub+0x34c>)
 80022be:	0873      	lsrs	r3, r6, #1
 80022c0:	400a      	ands	r2, r1
 80022c2:	2101      	movs	r1, #1
 80022c4:	400e      	ands	r6, r1
 80022c6:	431e      	orrs	r6, r3
 80022c8:	0851      	lsrs	r1, r2, #1
 80022ca:	07d3      	lsls	r3, r2, #31
 80022cc:	2207      	movs	r2, #7
 80022ce:	431e      	orrs	r6, r3
 80022d0:	4032      	ands	r2, r6
 80022d2:	e795      	b.n	8002200 <__aeabi_dsub+0xe0>
 80022d4:	001e      	movs	r6, r3
 80022d6:	4316      	orrs	r6, r2
 80022d8:	d000      	beq.n	80022dc <__aeabi_dsub+0x1bc>
 80022da:	e745      	b.n	8002168 <__aeabi_dsub+0x48>
 80022dc:	e740      	b.n	8002160 <__aeabi_dsub+0x40>
 80022de:	4b62      	ldr	r3, [pc, #392]	; (8002468 <__aeabi_dsub+0x348>)
 80022e0:	429d      	cmp	r5, r3
 80022e2:	d03a      	beq.n	800235a <__aeabi_dsub+0x23a>
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	4667      	mov	r7, ip
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431f      	orrs	r7, r3
 80022ec:	46bc      	mov	ip, r7
 80022ee:	2e38      	cmp	r6, #56	; 0x38
 80022f0:	dd00      	ble.n	80022f4 <__aeabi_dsub+0x1d4>
 80022f2:	e0eb      	b.n	80024cc <__aeabi_dsub+0x3ac>
 80022f4:	2e1f      	cmp	r6, #31
 80022f6:	dc00      	bgt.n	80022fa <__aeabi_dsub+0x1da>
 80022f8:	e13a      	b.n	8002570 <__aeabi_dsub+0x450>
 80022fa:	0033      	movs	r3, r6
 80022fc:	4667      	mov	r7, ip
 80022fe:	3b20      	subs	r3, #32
 8002300:	40df      	lsrs	r7, r3
 8002302:	003b      	movs	r3, r7
 8002304:	2e20      	cmp	r6, #32
 8002306:	d005      	beq.n	8002314 <__aeabi_dsub+0x1f4>
 8002308:	2740      	movs	r7, #64	; 0x40
 800230a:	1bbf      	subs	r7, r7, r6
 800230c:	4666      	mov	r6, ip
 800230e:	40be      	lsls	r6, r7
 8002310:	4332      	orrs	r2, r6
 8002312:	4690      	mov	r8, r2
 8002314:	4646      	mov	r6, r8
 8002316:	1e72      	subs	r2, r6, #1
 8002318:	4196      	sbcs	r6, r2
 800231a:	4333      	orrs	r3, r6
 800231c:	e0da      	b.n	80024d4 <__aeabi_dsub+0x3b4>
 800231e:	2b00      	cmp	r3, #0
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x204>
 8002322:	e214      	b.n	800274e <__aeabi_dsub+0x62e>
 8002324:	4663      	mov	r3, ip
 8002326:	4313      	orrs	r3, r2
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x20c>
 800232a:	e168      	b.n	80025fe <__aeabi_dsub+0x4de>
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	074e      	lsls	r6, r1, #29
 8002330:	08c0      	lsrs	r0, r0, #3
 8002332:	08c9      	lsrs	r1, r1, #3
 8002334:	031b      	lsls	r3, r3, #12
 8002336:	4306      	orrs	r6, r0
 8002338:	4219      	tst	r1, r3
 800233a:	d008      	beq.n	800234e <__aeabi_dsub+0x22e>
 800233c:	4660      	mov	r0, ip
 800233e:	08c0      	lsrs	r0, r0, #3
 8002340:	4218      	tst	r0, r3
 8002342:	d104      	bne.n	800234e <__aeabi_dsub+0x22e>
 8002344:	4663      	mov	r3, ip
 8002346:	0001      	movs	r1, r0
 8002348:	08d2      	lsrs	r2, r2, #3
 800234a:	075e      	lsls	r6, r3, #29
 800234c:	4316      	orrs	r6, r2
 800234e:	00f3      	lsls	r3, r6, #3
 8002350:	4699      	mov	r9, r3
 8002352:	00c9      	lsls	r1, r1, #3
 8002354:	0f72      	lsrs	r2, r6, #29
 8002356:	4d44      	ldr	r5, [pc, #272]	; (8002468 <__aeabi_dsub+0x348>)
 8002358:	4311      	orrs	r1, r2
 800235a:	464b      	mov	r3, r9
 800235c:	08de      	lsrs	r6, r3, #3
 800235e:	4b42      	ldr	r3, [pc, #264]	; (8002468 <__aeabi_dsub+0x348>)
 8002360:	074f      	lsls	r7, r1, #29
 8002362:	4337      	orrs	r7, r6
 8002364:	08ca      	lsrs	r2, r1, #3
 8002366:	429d      	cmp	r5, r3
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x24c>
 800236a:	e06e      	b.n	800244a <__aeabi_dsub+0x32a>
 800236c:	0312      	lsls	r2, r2, #12
 800236e:	056d      	lsls	r5, r5, #21
 8002370:	0b12      	lsrs	r2, r2, #12
 8002372:	0d6d      	lsrs	r5, r5, #21
 8002374:	2100      	movs	r1, #0
 8002376:	0312      	lsls	r2, r2, #12
 8002378:	0b13      	lsrs	r3, r2, #12
 800237a:	0d0a      	lsrs	r2, r1, #20
 800237c:	0512      	lsls	r2, r2, #20
 800237e:	431a      	orrs	r2, r3
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <__aeabi_dsub+0x350>)
 8002382:	052d      	lsls	r5, r5, #20
 8002384:	4013      	ands	r3, r2
 8002386:	432b      	orrs	r3, r5
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	07e4      	lsls	r4, r4, #31
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	4323      	orrs	r3, r4
 8002390:	0038      	movs	r0, r7
 8002392:	0019      	movs	r1, r3
 8002394:	bc3c      	pop	{r2, r3, r4, r5}
 8002396:	4690      	mov	r8, r2
 8002398:	4699      	mov	r9, r3
 800239a:	46a2      	mov	sl, r4
 800239c:	46ab      	mov	fp, r5
 800239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023a0:	4663      	mov	r3, ip
 80023a2:	4313      	orrs	r3, r2
 80023a4:	d011      	beq.n	80023ca <__aeabi_dsub+0x2aa>
 80023a6:	1e73      	subs	r3, r6, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d000      	beq.n	80023ae <__aeabi_dsub+0x28e>
 80023ac:	e107      	b.n	80025be <__aeabi_dsub+0x49e>
 80023ae:	1886      	adds	r6, r0, r2
 80023b0:	4286      	cmp	r6, r0
 80023b2:	4180      	sbcs	r0, r0
 80023b4:	4461      	add	r1, ip
 80023b6:	4240      	negs	r0, r0
 80023b8:	1809      	adds	r1, r1, r0
 80023ba:	2501      	movs	r5, #1
 80023bc:	020b      	lsls	r3, r1, #8
 80023be:	d537      	bpl.n	8002430 <__aeabi_dsub+0x310>
 80023c0:	2502      	movs	r5, #2
 80023c2:	e77b      	b.n	80022bc <__aeabi_dsub+0x19c>
 80023c4:	003e      	movs	r6, r7
 80023c6:	4661      	mov	r1, ip
 80023c8:	4691      	mov	r9, r2
 80023ca:	0035      	movs	r5, r6
 80023cc:	e7c5      	b.n	800235a <__aeabi_dsub+0x23a>
 80023ce:	465c      	mov	r4, fp
 80023d0:	2d00      	cmp	r5, #0
 80023d2:	d000      	beq.n	80023d6 <__aeabi_dsub+0x2b6>
 80023d4:	e0e1      	b.n	800259a <__aeabi_dsub+0x47a>
 80023d6:	000b      	movs	r3, r1
 80023d8:	4303      	orrs	r3, r0
 80023da:	d0f3      	beq.n	80023c4 <__aeabi_dsub+0x2a4>
 80023dc:	1c73      	adds	r3, r6, #1
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0x2c2>
 80023e0:	e1ac      	b.n	800273c <__aeabi_dsub+0x61c>
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <__aeabi_dsub+0x348>)
 80023e4:	429f      	cmp	r7, r3
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x2ca>
 80023e8:	e13a      	b.n	8002660 <__aeabi_dsub+0x540>
 80023ea:	43f3      	mvns	r3, r6
 80023ec:	2b38      	cmp	r3, #56	; 0x38
 80023ee:	dd00      	ble.n	80023f2 <__aeabi_dsub+0x2d2>
 80023f0:	e16f      	b.n	80026d2 <__aeabi_dsub+0x5b2>
 80023f2:	2b1f      	cmp	r3, #31
 80023f4:	dd00      	ble.n	80023f8 <__aeabi_dsub+0x2d8>
 80023f6:	e18c      	b.n	8002712 <__aeabi_dsub+0x5f2>
 80023f8:	2520      	movs	r5, #32
 80023fa:	000e      	movs	r6, r1
 80023fc:	1aed      	subs	r5, r5, r3
 80023fe:	40ae      	lsls	r6, r5
 8002400:	46b0      	mov	r8, r6
 8002402:	0006      	movs	r6, r0
 8002404:	46aa      	mov	sl, r5
 8002406:	40de      	lsrs	r6, r3
 8002408:	4645      	mov	r5, r8
 800240a:	4335      	orrs	r5, r6
 800240c:	002e      	movs	r6, r5
 800240e:	4655      	mov	r5, sl
 8002410:	40d9      	lsrs	r1, r3
 8002412:	40a8      	lsls	r0, r5
 8002414:	4663      	mov	r3, ip
 8002416:	1e45      	subs	r5, r0, #1
 8002418:	41a8      	sbcs	r0, r5
 800241a:	1a5b      	subs	r3, r3, r1
 800241c:	469c      	mov	ip, r3
 800241e:	4330      	orrs	r0, r6
 8002420:	1a16      	subs	r6, r2, r0
 8002422:	42b2      	cmp	r2, r6
 8002424:	4192      	sbcs	r2, r2
 8002426:	4663      	mov	r3, ip
 8002428:	4252      	negs	r2, r2
 800242a:	1a99      	subs	r1, r3, r2
 800242c:	003d      	movs	r5, r7
 800242e:	e6b4      	b.n	800219a <__aeabi_dsub+0x7a>
 8002430:	2207      	movs	r2, #7
 8002432:	4032      	ands	r2, r6
 8002434:	2a00      	cmp	r2, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x31a>
 8002438:	e6e4      	b.n	8002204 <__aeabi_dsub+0xe4>
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <__aeabi_dsub+0x348>)
 800243c:	08f6      	lsrs	r6, r6, #3
 800243e:	074f      	lsls	r7, r1, #29
 8002440:	4337      	orrs	r7, r6
 8002442:	08ca      	lsrs	r2, r1, #3
 8002444:	429d      	cmp	r5, r3
 8002446:	d000      	beq.n	800244a <__aeabi_dsub+0x32a>
 8002448:	e790      	b.n	800236c <__aeabi_dsub+0x24c>
 800244a:	003b      	movs	r3, r7
 800244c:	4313      	orrs	r3, r2
 800244e:	d100      	bne.n	8002452 <__aeabi_dsub+0x332>
 8002450:	e1a6      	b.n	80027a0 <__aeabi_dsub+0x680>
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	031b      	lsls	r3, r3, #12
 8002456:	431a      	orrs	r2, r3
 8002458:	0312      	lsls	r2, r2, #12
 800245a:	0b12      	lsrs	r2, r2, #12
 800245c:	4d02      	ldr	r5, [pc, #8]	; (8002468 <__aeabi_dsub+0x348>)
 800245e:	e789      	b.n	8002374 <__aeabi_dsub+0x254>
 8002460:	0015      	movs	r5, r2
 8002462:	2200      	movs	r2, #0
 8002464:	2700      	movs	r7, #0
 8002466:	e785      	b.n	8002374 <__aeabi_dsub+0x254>
 8002468:	000007ff 	.word	0x000007ff
 800246c:	ff7fffff 	.word	0xff7fffff
 8002470:	800fffff 	.word	0x800fffff
 8002474:	2e00      	cmp	r6, #0
 8002476:	d000      	beq.n	800247a <__aeabi_dsub+0x35a>
 8002478:	e0c7      	b.n	800260a <__aeabi_dsub+0x4ea>
 800247a:	1c6b      	adds	r3, r5, #1
 800247c:	055e      	lsls	r6, r3, #21
 800247e:	0d76      	lsrs	r6, r6, #21
 8002480:	2e01      	cmp	r6, #1
 8002482:	dc00      	bgt.n	8002486 <__aeabi_dsub+0x366>
 8002484:	e0f0      	b.n	8002668 <__aeabi_dsub+0x548>
 8002486:	4dc8      	ldr	r5, [pc, #800]	; (80027a8 <__aeabi_dsub+0x688>)
 8002488:	42ab      	cmp	r3, r5
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0x36e>
 800248c:	e0b9      	b.n	8002602 <__aeabi_dsub+0x4e2>
 800248e:	1885      	adds	r5, r0, r2
 8002490:	000a      	movs	r2, r1
 8002492:	4285      	cmp	r5, r0
 8002494:	4189      	sbcs	r1, r1
 8002496:	4462      	add	r2, ip
 8002498:	4249      	negs	r1, r1
 800249a:	1851      	adds	r1, r2, r1
 800249c:	2207      	movs	r2, #7
 800249e:	07ce      	lsls	r6, r1, #31
 80024a0:	086d      	lsrs	r5, r5, #1
 80024a2:	432e      	orrs	r6, r5
 80024a4:	0849      	lsrs	r1, r1, #1
 80024a6:	4032      	ands	r2, r6
 80024a8:	001d      	movs	r5, r3
 80024aa:	e6a9      	b.n	8002200 <__aeabi_dsub+0xe0>
 80024ac:	49bf      	ldr	r1, [pc, #764]	; (80027ac <__aeabi_dsub+0x68c>)
 80024ae:	1aed      	subs	r5, r5, r3
 80024b0:	4011      	ands	r1, r2
 80024b2:	2207      	movs	r2, #7
 80024b4:	4032      	ands	r2, r6
 80024b6:	e6a3      	b.n	8002200 <__aeabi_dsub+0xe0>
 80024b8:	0032      	movs	r2, r6
 80024ba:	3828      	subs	r0, #40	; 0x28
 80024bc:	4082      	lsls	r2, r0
 80024be:	2600      	movs	r6, #0
 80024c0:	e686      	b.n	80021d0 <__aeabi_dsub+0xb0>
 80024c2:	0030      	movs	r0, r6
 80024c4:	f000 fa68 	bl	8002998 <__clzsi2>
 80024c8:	3020      	adds	r0, #32
 80024ca:	e673      	b.n	80021b4 <__aeabi_dsub+0x94>
 80024cc:	4663      	mov	r3, ip
 80024ce:	4313      	orrs	r3, r2
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	4193      	sbcs	r3, r2
 80024d4:	1ac6      	subs	r6, r0, r3
 80024d6:	42b0      	cmp	r0, r6
 80024d8:	4180      	sbcs	r0, r0
 80024da:	4240      	negs	r0, r0
 80024dc:	1a09      	subs	r1, r1, r0
 80024de:	e65c      	b.n	800219a <__aeabi_dsub+0x7a>
 80024e0:	000e      	movs	r6, r1
 80024e2:	4667      	mov	r7, ip
 80024e4:	4306      	orrs	r6, r0
 80024e6:	4317      	orrs	r7, r2
 80024e8:	2d00      	cmp	r5, #0
 80024ea:	d15e      	bne.n	80025aa <__aeabi_dsub+0x48a>
 80024ec:	2e00      	cmp	r6, #0
 80024ee:	d000      	beq.n	80024f2 <__aeabi_dsub+0x3d2>
 80024f0:	e0f3      	b.n	80026da <__aeabi_dsub+0x5ba>
 80024f2:	2f00      	cmp	r7, #0
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x3d8>
 80024f6:	e11e      	b.n	8002736 <__aeabi_dsub+0x616>
 80024f8:	465c      	mov	r4, fp
 80024fa:	4661      	mov	r1, ip
 80024fc:	4691      	mov	r9, r2
 80024fe:	e72c      	b.n	800235a <__aeabi_dsub+0x23a>
 8002500:	4fa9      	ldr	r7, [pc, #676]	; (80027a8 <__aeabi_dsub+0x688>)
 8002502:	42be      	cmp	r6, r7
 8002504:	d07b      	beq.n	80025fe <__aeabi_dsub+0x4de>
 8002506:	001e      	movs	r6, r3
 8002508:	e6f1      	b.n	80022ee <__aeabi_dsub+0x1ce>
 800250a:	0010      	movs	r0, r2
 800250c:	3d1f      	subs	r5, #31
 800250e:	40e8      	lsrs	r0, r5
 8002510:	2b20      	cmp	r3, #32
 8002512:	d003      	beq.n	800251c <__aeabi_dsub+0x3fc>
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	1acb      	subs	r3, r1, r3
 8002518:	409a      	lsls	r2, r3
 800251a:	4316      	orrs	r6, r2
 800251c:	1e73      	subs	r3, r6, #1
 800251e:	419e      	sbcs	r6, r3
 8002520:	2207      	movs	r2, #7
 8002522:	4306      	orrs	r6, r0
 8002524:	4032      	ands	r2, r6
 8002526:	2100      	movs	r1, #0
 8002528:	2500      	movs	r5, #0
 800252a:	e783      	b.n	8002434 <__aeabi_dsub+0x314>
 800252c:	1a16      	subs	r6, r2, r0
 800252e:	4663      	mov	r3, ip
 8002530:	42b2      	cmp	r2, r6
 8002532:	4180      	sbcs	r0, r0
 8002534:	1a59      	subs	r1, r3, r1
 8002536:	4240      	negs	r0, r0
 8002538:	1a0b      	subs	r3, r1, r0
 800253a:	4698      	mov	r8, r3
 800253c:	465c      	mov	r4, fp
 800253e:	e632      	b.n	80021a6 <__aeabi_dsub+0x86>
 8002540:	2e1f      	cmp	r6, #31
 8002542:	dd00      	ble.n	8002546 <__aeabi_dsub+0x426>
 8002544:	e0ab      	b.n	800269e <__aeabi_dsub+0x57e>
 8002546:	2720      	movs	r7, #32
 8002548:	1bbb      	subs	r3, r7, r6
 800254a:	469a      	mov	sl, r3
 800254c:	4663      	mov	r3, ip
 800254e:	4657      	mov	r7, sl
 8002550:	40bb      	lsls	r3, r7
 8002552:	4699      	mov	r9, r3
 8002554:	0013      	movs	r3, r2
 8002556:	464f      	mov	r7, r9
 8002558:	40f3      	lsrs	r3, r6
 800255a:	431f      	orrs	r7, r3
 800255c:	003b      	movs	r3, r7
 800255e:	4657      	mov	r7, sl
 8002560:	40ba      	lsls	r2, r7
 8002562:	1e57      	subs	r7, r2, #1
 8002564:	41ba      	sbcs	r2, r7
 8002566:	4313      	orrs	r3, r2
 8002568:	4662      	mov	r2, ip
 800256a:	40f2      	lsrs	r2, r6
 800256c:	1889      	adds	r1, r1, r2
 800256e:	e698      	b.n	80022a2 <__aeabi_dsub+0x182>
 8002570:	2720      	movs	r7, #32
 8002572:	1bbb      	subs	r3, r7, r6
 8002574:	469a      	mov	sl, r3
 8002576:	4663      	mov	r3, ip
 8002578:	4657      	mov	r7, sl
 800257a:	40bb      	lsls	r3, r7
 800257c:	4699      	mov	r9, r3
 800257e:	0013      	movs	r3, r2
 8002580:	464f      	mov	r7, r9
 8002582:	40f3      	lsrs	r3, r6
 8002584:	431f      	orrs	r7, r3
 8002586:	003b      	movs	r3, r7
 8002588:	4657      	mov	r7, sl
 800258a:	40ba      	lsls	r2, r7
 800258c:	1e57      	subs	r7, r2, #1
 800258e:	41ba      	sbcs	r2, r7
 8002590:	4313      	orrs	r3, r2
 8002592:	4662      	mov	r2, ip
 8002594:	40f2      	lsrs	r2, r6
 8002596:	1a89      	subs	r1, r1, r2
 8002598:	e79c      	b.n	80024d4 <__aeabi_dsub+0x3b4>
 800259a:	4b83      	ldr	r3, [pc, #524]	; (80027a8 <__aeabi_dsub+0x688>)
 800259c:	429f      	cmp	r7, r3
 800259e:	d05f      	beq.n	8002660 <__aeabi_dsub+0x540>
 80025a0:	2580      	movs	r5, #128	; 0x80
 80025a2:	042d      	lsls	r5, r5, #16
 80025a4:	4273      	negs	r3, r6
 80025a6:	4329      	orrs	r1, r5
 80025a8:	e720      	b.n	80023ec <__aeabi_dsub+0x2cc>
 80025aa:	2e00      	cmp	r6, #0
 80025ac:	d10c      	bne.n	80025c8 <__aeabi_dsub+0x4a8>
 80025ae:	2f00      	cmp	r7, #0
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x494>
 80025b2:	e0d0      	b.n	8002756 <__aeabi_dsub+0x636>
 80025b4:	465c      	mov	r4, fp
 80025b6:	4661      	mov	r1, ip
 80025b8:	4691      	mov	r9, r2
 80025ba:	4d7b      	ldr	r5, [pc, #492]	; (80027a8 <__aeabi_dsub+0x688>)
 80025bc:	e6cd      	b.n	800235a <__aeabi_dsub+0x23a>
 80025be:	4f7a      	ldr	r7, [pc, #488]	; (80027a8 <__aeabi_dsub+0x688>)
 80025c0:	42be      	cmp	r6, r7
 80025c2:	d01c      	beq.n	80025fe <__aeabi_dsub+0x4de>
 80025c4:	001e      	movs	r6, r3
 80025c6:	e665      	b.n	8002294 <__aeabi_dsub+0x174>
 80025c8:	2f00      	cmp	r7, #0
 80025ca:	d018      	beq.n	80025fe <__aeabi_dsub+0x4de>
 80025cc:	08c0      	lsrs	r0, r0, #3
 80025ce:	074e      	lsls	r6, r1, #29
 80025d0:	4306      	orrs	r6, r0
 80025d2:	2080      	movs	r0, #128	; 0x80
 80025d4:	08c9      	lsrs	r1, r1, #3
 80025d6:	0300      	lsls	r0, r0, #12
 80025d8:	4201      	tst	r1, r0
 80025da:	d008      	beq.n	80025ee <__aeabi_dsub+0x4ce>
 80025dc:	4663      	mov	r3, ip
 80025de:	08dc      	lsrs	r4, r3, #3
 80025e0:	4204      	tst	r4, r0
 80025e2:	d104      	bne.n	80025ee <__aeabi_dsub+0x4ce>
 80025e4:	0021      	movs	r1, r4
 80025e6:	46da      	mov	sl, fp
 80025e8:	08d2      	lsrs	r2, r2, #3
 80025ea:	075e      	lsls	r6, r3, #29
 80025ec:	4316      	orrs	r6, r2
 80025ee:	00f3      	lsls	r3, r6, #3
 80025f0:	4699      	mov	r9, r3
 80025f2:	2401      	movs	r4, #1
 80025f4:	4653      	mov	r3, sl
 80025f6:	00c9      	lsls	r1, r1, #3
 80025f8:	0f72      	lsrs	r2, r6, #29
 80025fa:	4311      	orrs	r1, r2
 80025fc:	401c      	ands	r4, r3
 80025fe:	4d6a      	ldr	r5, [pc, #424]	; (80027a8 <__aeabi_dsub+0x688>)
 8002600:	e6ab      	b.n	800235a <__aeabi_dsub+0x23a>
 8002602:	001d      	movs	r5, r3
 8002604:	2200      	movs	r2, #0
 8002606:	2700      	movs	r7, #0
 8002608:	e6b4      	b.n	8002374 <__aeabi_dsub+0x254>
 800260a:	2d00      	cmp	r5, #0
 800260c:	d159      	bne.n	80026c2 <__aeabi_dsub+0x5a2>
 800260e:	000b      	movs	r3, r1
 8002610:	4303      	orrs	r3, r0
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x4f6>
 8002614:	e6d6      	b.n	80023c4 <__aeabi_dsub+0x2a4>
 8002616:	1c73      	adds	r3, r6, #1
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x4fc>
 800261a:	e0b2      	b.n	8002782 <__aeabi_dsub+0x662>
 800261c:	4b62      	ldr	r3, [pc, #392]	; (80027a8 <__aeabi_dsub+0x688>)
 800261e:	429f      	cmp	r7, r3
 8002620:	d01e      	beq.n	8002660 <__aeabi_dsub+0x540>
 8002622:	43f3      	mvns	r3, r6
 8002624:	2b38      	cmp	r3, #56	; 0x38
 8002626:	dc6f      	bgt.n	8002708 <__aeabi_dsub+0x5e8>
 8002628:	2b1f      	cmp	r3, #31
 800262a:	dd00      	ble.n	800262e <__aeabi_dsub+0x50e>
 800262c:	e097      	b.n	800275e <__aeabi_dsub+0x63e>
 800262e:	2520      	movs	r5, #32
 8002630:	000e      	movs	r6, r1
 8002632:	1aed      	subs	r5, r5, r3
 8002634:	40ae      	lsls	r6, r5
 8002636:	46b0      	mov	r8, r6
 8002638:	0006      	movs	r6, r0
 800263a:	46aa      	mov	sl, r5
 800263c:	40de      	lsrs	r6, r3
 800263e:	4645      	mov	r5, r8
 8002640:	4335      	orrs	r5, r6
 8002642:	002e      	movs	r6, r5
 8002644:	4655      	mov	r5, sl
 8002646:	40a8      	lsls	r0, r5
 8002648:	40d9      	lsrs	r1, r3
 800264a:	1e45      	subs	r5, r0, #1
 800264c:	41a8      	sbcs	r0, r5
 800264e:	448c      	add	ip, r1
 8002650:	4306      	orrs	r6, r0
 8002652:	18b6      	adds	r6, r6, r2
 8002654:	4296      	cmp	r6, r2
 8002656:	4192      	sbcs	r2, r2
 8002658:	4251      	negs	r1, r2
 800265a:	4461      	add	r1, ip
 800265c:	003d      	movs	r5, r7
 800265e:	e625      	b.n	80022ac <__aeabi_dsub+0x18c>
 8002660:	003d      	movs	r5, r7
 8002662:	4661      	mov	r1, ip
 8002664:	4691      	mov	r9, r2
 8002666:	e678      	b.n	800235a <__aeabi_dsub+0x23a>
 8002668:	000b      	movs	r3, r1
 800266a:	4303      	orrs	r3, r0
 800266c:	2d00      	cmp	r5, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x552>
 8002670:	e655      	b.n	800231e <__aeabi_dsub+0x1fe>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f5      	beq.n	8002662 <__aeabi_dsub+0x542>
 8002676:	4663      	mov	r3, ip
 8002678:	4313      	orrs	r3, r2
 800267a:	d100      	bne.n	800267e <__aeabi_dsub+0x55e>
 800267c:	e66d      	b.n	800235a <__aeabi_dsub+0x23a>
 800267e:	1886      	adds	r6, r0, r2
 8002680:	4286      	cmp	r6, r0
 8002682:	4180      	sbcs	r0, r0
 8002684:	4461      	add	r1, ip
 8002686:	4240      	negs	r0, r0
 8002688:	1809      	adds	r1, r1, r0
 800268a:	2200      	movs	r2, #0
 800268c:	020b      	lsls	r3, r1, #8
 800268e:	d400      	bmi.n	8002692 <__aeabi_dsub+0x572>
 8002690:	e6d0      	b.n	8002434 <__aeabi_dsub+0x314>
 8002692:	4b46      	ldr	r3, [pc, #280]	; (80027ac <__aeabi_dsub+0x68c>)
 8002694:	3501      	adds	r5, #1
 8002696:	4019      	ands	r1, r3
 8002698:	e5b2      	b.n	8002200 <__aeabi_dsub+0xe0>
 800269a:	46b1      	mov	r9, r6
 800269c:	e65d      	b.n	800235a <__aeabi_dsub+0x23a>
 800269e:	0033      	movs	r3, r6
 80026a0:	4667      	mov	r7, ip
 80026a2:	3b20      	subs	r3, #32
 80026a4:	40df      	lsrs	r7, r3
 80026a6:	003b      	movs	r3, r7
 80026a8:	2e20      	cmp	r6, #32
 80026aa:	d005      	beq.n	80026b8 <__aeabi_dsub+0x598>
 80026ac:	2740      	movs	r7, #64	; 0x40
 80026ae:	1bbf      	subs	r7, r7, r6
 80026b0:	4666      	mov	r6, ip
 80026b2:	40be      	lsls	r6, r7
 80026b4:	4332      	orrs	r2, r6
 80026b6:	4690      	mov	r8, r2
 80026b8:	4646      	mov	r6, r8
 80026ba:	1e72      	subs	r2, r6, #1
 80026bc:	4196      	sbcs	r6, r2
 80026be:	4333      	orrs	r3, r6
 80026c0:	e5ef      	b.n	80022a2 <__aeabi_dsub+0x182>
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <__aeabi_dsub+0x688>)
 80026c4:	429f      	cmp	r7, r3
 80026c6:	d0cb      	beq.n	8002660 <__aeabi_dsub+0x540>
 80026c8:	2580      	movs	r5, #128	; 0x80
 80026ca:	042d      	lsls	r5, r5, #16
 80026cc:	4273      	negs	r3, r6
 80026ce:	4329      	orrs	r1, r5
 80026d0:	e7a8      	b.n	8002624 <__aeabi_dsub+0x504>
 80026d2:	4308      	orrs	r0, r1
 80026d4:	1e41      	subs	r1, r0, #1
 80026d6:	4188      	sbcs	r0, r1
 80026d8:	e6a2      	b.n	8002420 <__aeabi_dsub+0x300>
 80026da:	2f00      	cmp	r7, #0
 80026dc:	d100      	bne.n	80026e0 <__aeabi_dsub+0x5c0>
 80026de:	e63c      	b.n	800235a <__aeabi_dsub+0x23a>
 80026e0:	4663      	mov	r3, ip
 80026e2:	1a86      	subs	r6, r0, r2
 80026e4:	1acf      	subs	r7, r1, r3
 80026e6:	42b0      	cmp	r0, r6
 80026e8:	419b      	sbcs	r3, r3
 80026ea:	425b      	negs	r3, r3
 80026ec:	1afb      	subs	r3, r7, r3
 80026ee:	4698      	mov	r8, r3
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	d54e      	bpl.n	8002792 <__aeabi_dsub+0x672>
 80026f4:	1a16      	subs	r6, r2, r0
 80026f6:	4663      	mov	r3, ip
 80026f8:	42b2      	cmp	r2, r6
 80026fa:	4192      	sbcs	r2, r2
 80026fc:	1a59      	subs	r1, r3, r1
 80026fe:	4252      	negs	r2, r2
 8002700:	1a89      	subs	r1, r1, r2
 8002702:	465c      	mov	r4, fp
 8002704:	2200      	movs	r2, #0
 8002706:	e57b      	b.n	8002200 <__aeabi_dsub+0xe0>
 8002708:	4301      	orrs	r1, r0
 800270a:	000e      	movs	r6, r1
 800270c:	1e71      	subs	r1, r6, #1
 800270e:	418e      	sbcs	r6, r1
 8002710:	e79f      	b.n	8002652 <__aeabi_dsub+0x532>
 8002712:	001d      	movs	r5, r3
 8002714:	000e      	movs	r6, r1
 8002716:	3d20      	subs	r5, #32
 8002718:	40ee      	lsrs	r6, r5
 800271a:	46b0      	mov	r8, r6
 800271c:	2b20      	cmp	r3, #32
 800271e:	d004      	beq.n	800272a <__aeabi_dsub+0x60a>
 8002720:	2540      	movs	r5, #64	; 0x40
 8002722:	1aeb      	subs	r3, r5, r3
 8002724:	4099      	lsls	r1, r3
 8002726:	4308      	orrs	r0, r1
 8002728:	4681      	mov	r9, r0
 800272a:	4648      	mov	r0, r9
 800272c:	4643      	mov	r3, r8
 800272e:	1e41      	subs	r1, r0, #1
 8002730:	4188      	sbcs	r0, r1
 8002732:	4318      	orrs	r0, r3
 8002734:	e674      	b.n	8002420 <__aeabi_dsub+0x300>
 8002736:	2200      	movs	r2, #0
 8002738:	2400      	movs	r4, #0
 800273a:	e617      	b.n	800236c <__aeabi_dsub+0x24c>
 800273c:	1a16      	subs	r6, r2, r0
 800273e:	4663      	mov	r3, ip
 8002740:	42b2      	cmp	r2, r6
 8002742:	4192      	sbcs	r2, r2
 8002744:	1a59      	subs	r1, r3, r1
 8002746:	4252      	negs	r2, r2
 8002748:	1a89      	subs	r1, r1, r2
 800274a:	003d      	movs	r5, r7
 800274c:	e525      	b.n	800219a <__aeabi_dsub+0x7a>
 800274e:	4661      	mov	r1, ip
 8002750:	4691      	mov	r9, r2
 8002752:	4d15      	ldr	r5, [pc, #84]	; (80027a8 <__aeabi_dsub+0x688>)
 8002754:	e601      	b.n	800235a <__aeabi_dsub+0x23a>
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	2400      	movs	r4, #0
 800275a:	0312      	lsls	r2, r2, #12
 800275c:	e679      	b.n	8002452 <__aeabi_dsub+0x332>
 800275e:	001d      	movs	r5, r3
 8002760:	000e      	movs	r6, r1
 8002762:	3d20      	subs	r5, #32
 8002764:	40ee      	lsrs	r6, r5
 8002766:	46b0      	mov	r8, r6
 8002768:	2b20      	cmp	r3, #32
 800276a:	d004      	beq.n	8002776 <__aeabi_dsub+0x656>
 800276c:	2540      	movs	r5, #64	; 0x40
 800276e:	1aeb      	subs	r3, r5, r3
 8002770:	4099      	lsls	r1, r3
 8002772:	4308      	orrs	r0, r1
 8002774:	4681      	mov	r9, r0
 8002776:	464e      	mov	r6, r9
 8002778:	4643      	mov	r3, r8
 800277a:	1e71      	subs	r1, r6, #1
 800277c:	418e      	sbcs	r6, r1
 800277e:	431e      	orrs	r6, r3
 8002780:	e767      	b.n	8002652 <__aeabi_dsub+0x532>
 8002782:	1886      	adds	r6, r0, r2
 8002784:	4296      	cmp	r6, r2
 8002786:	419b      	sbcs	r3, r3
 8002788:	4461      	add	r1, ip
 800278a:	425b      	negs	r3, r3
 800278c:	18c9      	adds	r1, r1, r3
 800278e:	003d      	movs	r5, r7
 8002790:	e58c      	b.n	80022ac <__aeabi_dsub+0x18c>
 8002792:	4647      	mov	r7, r8
 8002794:	4337      	orrs	r7, r6
 8002796:	d0ce      	beq.n	8002736 <__aeabi_dsub+0x616>
 8002798:	2207      	movs	r2, #7
 800279a:	4641      	mov	r1, r8
 800279c:	4032      	ands	r2, r6
 800279e:	e649      	b.n	8002434 <__aeabi_dsub+0x314>
 80027a0:	2700      	movs	r7, #0
 80027a2:	003a      	movs	r2, r7
 80027a4:	e5e6      	b.n	8002374 <__aeabi_dsub+0x254>
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	000007ff 	.word	0x000007ff
 80027ac:	ff7fffff 	.word	0xff7fffff

080027b0 <__aeabi_d2iz>:
 80027b0:	b530      	push	{r4, r5, lr}
 80027b2:	4d14      	ldr	r5, [pc, #80]	; (8002804 <__aeabi_d2iz+0x54>)
 80027b4:	030a      	lsls	r2, r1, #12
 80027b6:	004b      	lsls	r3, r1, #1
 80027b8:	0b12      	lsrs	r2, r2, #12
 80027ba:	0d5b      	lsrs	r3, r3, #21
 80027bc:	0fc9      	lsrs	r1, r1, #31
 80027be:	2400      	movs	r4, #0
 80027c0:	42ab      	cmp	r3, r5
 80027c2:	dd11      	ble.n	80027e8 <__aeabi_d2iz+0x38>
 80027c4:	4c10      	ldr	r4, [pc, #64]	; (8002808 <__aeabi_d2iz+0x58>)
 80027c6:	42a3      	cmp	r3, r4
 80027c8:	dc10      	bgt.n	80027ec <__aeabi_d2iz+0x3c>
 80027ca:	2480      	movs	r4, #128	; 0x80
 80027cc:	0364      	lsls	r4, r4, #13
 80027ce:	4322      	orrs	r2, r4
 80027d0:	4c0e      	ldr	r4, [pc, #56]	; (800280c <__aeabi_d2iz+0x5c>)
 80027d2:	1ae4      	subs	r4, r4, r3
 80027d4:	2c1f      	cmp	r4, #31
 80027d6:	dd0c      	ble.n	80027f2 <__aeabi_d2iz+0x42>
 80027d8:	480d      	ldr	r0, [pc, #52]	; (8002810 <__aeabi_d2iz+0x60>)
 80027da:	1ac3      	subs	r3, r0, r3
 80027dc:	40da      	lsrs	r2, r3
 80027de:	0013      	movs	r3, r2
 80027e0:	425c      	negs	r4, r3
 80027e2:	2900      	cmp	r1, #0
 80027e4:	d100      	bne.n	80027e8 <__aeabi_d2iz+0x38>
 80027e6:	001c      	movs	r4, r3
 80027e8:	0020      	movs	r0, r4
 80027ea:	bd30      	pop	{r4, r5, pc}
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <__aeabi_d2iz+0x64>)
 80027ee:	18cc      	adds	r4, r1, r3
 80027f0:	e7fa      	b.n	80027e8 <__aeabi_d2iz+0x38>
 80027f2:	4d09      	ldr	r5, [pc, #36]	; (8002818 <__aeabi_d2iz+0x68>)
 80027f4:	40e0      	lsrs	r0, r4
 80027f6:	46ac      	mov	ip, r5
 80027f8:	4463      	add	r3, ip
 80027fa:	409a      	lsls	r2, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	4303      	orrs	r3, r0
 8002800:	e7ee      	b.n	80027e0 <__aeabi_d2iz+0x30>
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	000003fe 	.word	0x000003fe
 8002808:	0000041d 	.word	0x0000041d
 800280c:	00000433 	.word	0x00000433
 8002810:	00000413 	.word	0x00000413
 8002814:	7fffffff 	.word	0x7fffffff
 8002818:	fffffbed 	.word	0xfffffbed

0800281c <__aeabi_i2d>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	2800      	cmp	r0, #0
 8002820:	d02d      	beq.n	800287e <__aeabi_i2d+0x62>
 8002822:	17c3      	asrs	r3, r0, #31
 8002824:	18c5      	adds	r5, r0, r3
 8002826:	405d      	eors	r5, r3
 8002828:	0fc4      	lsrs	r4, r0, #31
 800282a:	0028      	movs	r0, r5
 800282c:	f000 f8b4 	bl	8002998 <__clzsi2>
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <__aeabi_i2d+0x6c>)
 8002832:	1a1b      	subs	r3, r3, r0
 8002834:	055b      	lsls	r3, r3, #21
 8002836:	0d5b      	lsrs	r3, r3, #21
 8002838:	280a      	cmp	r0, #10
 800283a:	dd15      	ble.n	8002868 <__aeabi_i2d+0x4c>
 800283c:	380b      	subs	r0, #11
 800283e:	4085      	lsls	r5, r0
 8002840:	2200      	movs	r2, #0
 8002842:	032d      	lsls	r5, r5, #12
 8002844:	0b2d      	lsrs	r5, r5, #12
 8002846:	2100      	movs	r1, #0
 8002848:	0010      	movs	r0, r2
 800284a:	032d      	lsls	r5, r5, #12
 800284c:	0d0a      	lsrs	r2, r1, #20
 800284e:	0b2d      	lsrs	r5, r5, #12
 8002850:	0512      	lsls	r2, r2, #20
 8002852:	432a      	orrs	r2, r5
 8002854:	4d0d      	ldr	r5, [pc, #52]	; (800288c <__aeabi_i2d+0x70>)
 8002856:	051b      	lsls	r3, r3, #20
 8002858:	402a      	ands	r2, r5
 800285a:	4313      	orrs	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	07e4      	lsls	r4, r4, #31
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	4323      	orrs	r3, r4
 8002864:	0019      	movs	r1, r3
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	0002      	movs	r2, r0
 800286a:	0029      	movs	r1, r5
 800286c:	3215      	adds	r2, #21
 800286e:	4091      	lsls	r1, r2
 8002870:	000a      	movs	r2, r1
 8002872:	210b      	movs	r1, #11
 8002874:	1a08      	subs	r0, r1, r0
 8002876:	40c5      	lsrs	r5, r0
 8002878:	032d      	lsls	r5, r5, #12
 800287a:	0b2d      	lsrs	r5, r5, #12
 800287c:	e7e3      	b.n	8002846 <__aeabi_i2d+0x2a>
 800287e:	2400      	movs	r4, #0
 8002880:	2300      	movs	r3, #0
 8002882:	2500      	movs	r5, #0
 8002884:	2200      	movs	r2, #0
 8002886:	e7de      	b.n	8002846 <__aeabi_i2d+0x2a>
 8002888:	0000041e 	.word	0x0000041e
 800288c:	800fffff 	.word	0x800fffff

08002890 <__aeabi_ui2d>:
 8002890:	b510      	push	{r4, lr}
 8002892:	1e04      	subs	r4, r0, #0
 8002894:	d025      	beq.n	80028e2 <__aeabi_ui2d+0x52>
 8002896:	f000 f87f 	bl	8002998 <__clzsi2>
 800289a:	4b14      	ldr	r3, [pc, #80]	; (80028ec <__aeabi_ui2d+0x5c>)
 800289c:	1a1b      	subs	r3, r3, r0
 800289e:	055b      	lsls	r3, r3, #21
 80028a0:	0d5b      	lsrs	r3, r3, #21
 80028a2:	280a      	cmp	r0, #10
 80028a4:	dd12      	ble.n	80028cc <__aeabi_ui2d+0x3c>
 80028a6:	380b      	subs	r0, #11
 80028a8:	4084      	lsls	r4, r0
 80028aa:	2200      	movs	r2, #0
 80028ac:	0324      	lsls	r4, r4, #12
 80028ae:	0b24      	lsrs	r4, r4, #12
 80028b0:	2100      	movs	r1, #0
 80028b2:	0010      	movs	r0, r2
 80028b4:	0324      	lsls	r4, r4, #12
 80028b6:	0d0a      	lsrs	r2, r1, #20
 80028b8:	0b24      	lsrs	r4, r4, #12
 80028ba:	0512      	lsls	r2, r2, #20
 80028bc:	4322      	orrs	r2, r4
 80028be:	4c0c      	ldr	r4, [pc, #48]	; (80028f0 <__aeabi_ui2d+0x60>)
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	4022      	ands	r2, r4
 80028c4:	4313      	orrs	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	0859      	lsrs	r1, r3, #1
 80028ca:	bd10      	pop	{r4, pc}
 80028cc:	0002      	movs	r2, r0
 80028ce:	0021      	movs	r1, r4
 80028d0:	3215      	adds	r2, #21
 80028d2:	4091      	lsls	r1, r2
 80028d4:	000a      	movs	r2, r1
 80028d6:	210b      	movs	r1, #11
 80028d8:	1a08      	subs	r0, r1, r0
 80028da:	40c4      	lsrs	r4, r0
 80028dc:	0324      	lsls	r4, r4, #12
 80028de:	0b24      	lsrs	r4, r4, #12
 80028e0:	e7e6      	b.n	80028b0 <__aeabi_ui2d+0x20>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2400      	movs	r4, #0
 80028e6:	2200      	movs	r2, #0
 80028e8:	e7e2      	b.n	80028b0 <__aeabi_ui2d+0x20>
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	0000041e 	.word	0x0000041e
 80028f0:	800fffff 	.word	0x800fffff

080028f4 <__aeabi_f2d>:
 80028f4:	0041      	lsls	r1, r0, #1
 80028f6:	0e09      	lsrs	r1, r1, #24
 80028f8:	1c4b      	adds	r3, r1, #1
 80028fa:	b570      	push	{r4, r5, r6, lr}
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	0246      	lsls	r6, r0, #9
 8002900:	0a75      	lsrs	r5, r6, #9
 8002902:	0fc4      	lsrs	r4, r0, #31
 8002904:	2b01      	cmp	r3, #1
 8002906:	dd14      	ble.n	8002932 <__aeabi_f2d+0x3e>
 8002908:	23e0      	movs	r3, #224	; 0xe0
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	076d      	lsls	r5, r5, #29
 800290e:	0b36      	lsrs	r6, r6, #12
 8002910:	18cb      	adds	r3, r1, r3
 8002912:	2100      	movs	r1, #0
 8002914:	0d0a      	lsrs	r2, r1, #20
 8002916:	0028      	movs	r0, r5
 8002918:	0512      	lsls	r2, r2, #20
 800291a:	4d1c      	ldr	r5, [pc, #112]	; (800298c <__aeabi_f2d+0x98>)
 800291c:	4332      	orrs	r2, r6
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	402a      	ands	r2, r5
 8002922:	085b      	lsrs	r3, r3, #1
 8002924:	4313      	orrs	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	07e4      	lsls	r4, r4, #31
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	4323      	orrs	r3, r4
 800292e:	0019      	movs	r1, r3
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	2900      	cmp	r1, #0
 8002934:	d114      	bne.n	8002960 <__aeabi_f2d+0x6c>
 8002936:	2d00      	cmp	r5, #0
 8002938:	d01e      	beq.n	8002978 <__aeabi_f2d+0x84>
 800293a:	0028      	movs	r0, r5
 800293c:	f000 f82c 	bl	8002998 <__clzsi2>
 8002940:	280a      	cmp	r0, #10
 8002942:	dc1c      	bgt.n	800297e <__aeabi_f2d+0x8a>
 8002944:	230b      	movs	r3, #11
 8002946:	002a      	movs	r2, r5
 8002948:	1a1b      	subs	r3, r3, r0
 800294a:	40da      	lsrs	r2, r3
 800294c:	0003      	movs	r3, r0
 800294e:	3315      	adds	r3, #21
 8002950:	409d      	lsls	r5, r3
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <__aeabi_f2d+0x9c>)
 8002954:	0312      	lsls	r2, r2, #12
 8002956:	1a1b      	subs	r3, r3, r0
 8002958:	055b      	lsls	r3, r3, #21
 800295a:	0b16      	lsrs	r6, r2, #12
 800295c:	0d5b      	lsrs	r3, r3, #21
 800295e:	e7d8      	b.n	8002912 <__aeabi_f2d+0x1e>
 8002960:	2d00      	cmp	r5, #0
 8002962:	d006      	beq.n	8002972 <__aeabi_f2d+0x7e>
 8002964:	0b32      	lsrs	r2, r6, #12
 8002966:	2680      	movs	r6, #128	; 0x80
 8002968:	0336      	lsls	r6, r6, #12
 800296a:	076d      	lsls	r5, r5, #29
 800296c:	4316      	orrs	r6, r2
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <__aeabi_f2d+0xa0>)
 8002970:	e7cf      	b.n	8002912 <__aeabi_f2d+0x1e>
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <__aeabi_f2d+0xa0>)
 8002974:	2600      	movs	r6, #0
 8002976:	e7cc      	b.n	8002912 <__aeabi_f2d+0x1e>
 8002978:	2300      	movs	r3, #0
 800297a:	2600      	movs	r6, #0
 800297c:	e7c9      	b.n	8002912 <__aeabi_f2d+0x1e>
 800297e:	0003      	movs	r3, r0
 8002980:	002a      	movs	r2, r5
 8002982:	3b0b      	subs	r3, #11
 8002984:	409a      	lsls	r2, r3
 8002986:	2500      	movs	r5, #0
 8002988:	e7e3      	b.n	8002952 <__aeabi_f2d+0x5e>
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	800fffff 	.word	0x800fffff
 8002990:	00000389 	.word	0x00000389
 8002994:	000007ff 	.word	0x000007ff

08002998 <__clzsi2>:
 8002998:	211c      	movs	r1, #28
 800299a:	2301      	movs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	4298      	cmp	r0, r3
 80029a0:	d301      	bcc.n	80029a6 <__clzsi2+0xe>
 80029a2:	0c00      	lsrs	r0, r0, #16
 80029a4:	3910      	subs	r1, #16
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	4298      	cmp	r0, r3
 80029aa:	d301      	bcc.n	80029b0 <__clzsi2+0x18>
 80029ac:	0a00      	lsrs	r0, r0, #8
 80029ae:	3908      	subs	r1, #8
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	4298      	cmp	r0, r3
 80029b4:	d301      	bcc.n	80029ba <__clzsi2+0x22>
 80029b6:	0900      	lsrs	r0, r0, #4
 80029b8:	3904      	subs	r1, #4
 80029ba:	a202      	add	r2, pc, #8	; (adr r2, 80029c4 <__clzsi2+0x2c>)
 80029bc:	5c10      	ldrb	r0, [r2, r0]
 80029be:	1840      	adds	r0, r0, r1
 80029c0:	4770      	bx	lr
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	02020304 	.word	0x02020304
 80029c8:	01010101 	.word	0x01010101
	...

080029d4 <__clzdi2>:
 80029d4:	b510      	push	{r4, lr}
 80029d6:	2900      	cmp	r1, #0
 80029d8:	d103      	bne.n	80029e2 <__clzdi2+0xe>
 80029da:	f7ff ffdd 	bl	8002998 <__clzsi2>
 80029de:	3020      	adds	r0, #32
 80029e0:	e002      	b.n	80029e8 <__clzdi2+0x14>
 80029e2:	1c08      	adds	r0, r1, #0
 80029e4:	f7ff ffd8 	bl	8002998 <__clzsi2>
 80029e8:	bd10      	pop	{r4, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)

080029ec <__divdi3>:
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	464e      	mov	r6, r9
 80029f0:	4657      	mov	r7, sl
 80029f2:	46de      	mov	lr, fp
 80029f4:	4645      	mov	r5, r8
 80029f6:	b5e0      	push	{r5, r6, r7, lr}
 80029f8:	000f      	movs	r7, r1
 80029fa:	2100      	movs	r1, #0
 80029fc:	b083      	sub	sp, #12
 80029fe:	0006      	movs	r6, r0
 8002a00:	4689      	mov	r9, r1
 8002a02:	2f00      	cmp	r7, #0
 8002a04:	da06      	bge.n	8002a14 <__divdi3+0x28>
 8002a06:	0039      	movs	r1, r7
 8002a08:	2700      	movs	r7, #0
 8002a0a:	4246      	negs	r6, r0
 8002a0c:	418f      	sbcs	r7, r1
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4249      	negs	r1, r1
 8002a12:	4689      	mov	r9, r1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da07      	bge.n	8002a28 <__divdi3+0x3c>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	43c9      	mvns	r1, r1
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	4689      	mov	r9, r1
 8002a20:	0019      	movs	r1, r3
 8002a22:	2300      	movs	r3, #0
 8002a24:	4242      	negs	r2, r0
 8002a26:	418b      	sbcs	r3, r1
 8002a28:	0034      	movs	r4, r6
 8002a2a:	003d      	movs	r5, r7
 8002a2c:	4692      	mov	sl, r2
 8002a2e:	4698      	mov	r8, r3
 8002a30:	42bb      	cmp	r3, r7
 8002a32:	d869      	bhi.n	8002b08 <__divdi3+0x11c>
 8002a34:	d066      	beq.n	8002b04 <__divdi3+0x118>
 8002a36:	4641      	mov	r1, r8
 8002a38:	4650      	mov	r0, sl
 8002a3a:	f7ff ffcb 	bl	80029d4 <__clzdi2>
 8002a3e:	4683      	mov	fp, r0
 8002a40:	0039      	movs	r1, r7
 8002a42:	0030      	movs	r0, r6
 8002a44:	f7ff ffc6 	bl	80029d4 <__clzdi2>
 8002a48:	465b      	mov	r3, fp
 8002a4a:	1a1b      	subs	r3, r3, r0
 8002a4c:	469c      	mov	ip, r3
 8002a4e:	3b20      	subs	r3, #32
 8002a50:	469b      	mov	fp, r3
 8002a52:	d500      	bpl.n	8002a56 <__divdi3+0x6a>
 8002a54:	e075      	b.n	8002b42 <__divdi3+0x156>
 8002a56:	4651      	mov	r1, sl
 8002a58:	4658      	mov	r0, fp
 8002a5a:	4081      	lsls	r1, r0
 8002a5c:	000b      	movs	r3, r1
 8002a5e:	4651      	mov	r1, sl
 8002a60:	4660      	mov	r0, ip
 8002a62:	4081      	lsls	r1, r0
 8002a64:	000a      	movs	r2, r1
 8002a66:	42bb      	cmp	r3, r7
 8002a68:	d861      	bhi.n	8002b2e <__divdi3+0x142>
 8002a6a:	d05e      	beq.n	8002b2a <__divdi3+0x13e>
 8002a6c:	0034      	movs	r4, r6
 8002a6e:	003d      	movs	r5, r7
 8002a70:	4659      	mov	r1, fp
 8002a72:	1aa4      	subs	r4, r4, r2
 8002a74:	419d      	sbcs	r5, r3
 8002a76:	2900      	cmp	r1, #0
 8002a78:	da00      	bge.n	8002a7c <__divdi3+0x90>
 8002a7a:	e07a      	b.n	8002b72 <__divdi3+0x186>
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2000      	movs	r0, #0
 8002a80:	2601      	movs	r6, #1
 8002a82:	9000      	str	r0, [sp, #0]
 8002a84:	9101      	str	r1, [sp, #4]
 8002a86:	4659      	mov	r1, fp
 8002a88:	408e      	lsls	r6, r1
 8002a8a:	9601      	str	r6, [sp, #4]
 8002a8c:	4661      	mov	r1, ip
 8002a8e:	2601      	movs	r6, #1
 8002a90:	408e      	lsls	r6, r1
 8002a92:	4661      	mov	r1, ip
 8002a94:	9600      	str	r6, [sp, #0]
 8002a96:	2900      	cmp	r1, #0
 8002a98:	d050      	beq.n	8002b3c <__divdi3+0x150>
 8002a9a:	07d9      	lsls	r1, r3, #31
 8002a9c:	0856      	lsrs	r6, r2, #1
 8002a9e:	085f      	lsrs	r7, r3, #1
 8002aa0:	430e      	orrs	r6, r1
 8002aa2:	4663      	mov	r3, ip
 8002aa4:	e00e      	b.n	8002ac4 <__divdi3+0xd8>
 8002aa6:	42af      	cmp	r7, r5
 8002aa8:	d101      	bne.n	8002aae <__divdi3+0xc2>
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d80c      	bhi.n	8002ac8 <__divdi3+0xdc>
 8002aae:	1ba4      	subs	r4, r4, r6
 8002ab0:	41bd      	sbcs	r5, r7
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	1924      	adds	r4, r4, r4
 8002ab6:	416d      	adcs	r5, r5
 8002ab8:	2200      	movs	r2, #0
 8002aba:	3b01      	subs	r3, #1
 8002abc:	1864      	adds	r4, r4, r1
 8002abe:	4155      	adcs	r5, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <__divdi3+0xe6>
 8002ac4:	42af      	cmp	r7, r5
 8002ac6:	d9ee      	bls.n	8002aa6 <__divdi3+0xba>
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	1924      	adds	r4, r4, r4
 8002acc:	416d      	adcs	r5, r5
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f8      	bne.n	8002ac4 <__divdi3+0xd8>
 8002ad2:	9800      	ldr	r0, [sp, #0]
 8002ad4:	9901      	ldr	r1, [sp, #4]
 8002ad6:	465b      	mov	r3, fp
 8002ad8:	1900      	adds	r0, r0, r4
 8002ada:	4169      	adcs	r1, r5
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db3d      	blt.n	8002b5c <__divdi3+0x170>
 8002ae0:	002e      	movs	r6, r5
 8002ae2:	40de      	lsrs	r6, r3
 8002ae4:	4663      	mov	r3, ip
 8002ae6:	002c      	movs	r4, r5
 8002ae8:	40dc      	lsrs	r4, r3
 8002aea:	465b      	mov	r3, fp
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db4b      	blt.n	8002b88 <__divdi3+0x19c>
 8002af0:	0034      	movs	r4, r6
 8002af2:	465d      	mov	r5, fp
 8002af4:	40ac      	lsls	r4, r5
 8002af6:	0023      	movs	r3, r4
 8002af8:	4664      	mov	r4, ip
 8002afa:	40a6      	lsls	r6, r4
 8002afc:	0032      	movs	r2, r6
 8002afe:	1a80      	subs	r0, r0, r2
 8002b00:	4199      	sbcs	r1, r3
 8002b02:	e003      	b.n	8002b0c <__divdi3+0x120>
 8002b04:	42b2      	cmp	r2, r6
 8002b06:	d996      	bls.n	8002a36 <__divdi3+0x4a>
 8002b08:	2000      	movs	r0, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <__divdi3+0x130>
 8002b12:	0003      	movs	r3, r0
 8002b14:	000c      	movs	r4, r1
 8002b16:	2100      	movs	r1, #0
 8002b18:	4258      	negs	r0, r3
 8002b1a:	41a1      	sbcs	r1, r4
 8002b1c:	b003      	add	sp, #12
 8002b1e:	bc3c      	pop	{r2, r3, r4, r5}
 8002b20:	4690      	mov	r8, r2
 8002b22:	4699      	mov	r9, r3
 8002b24:	46a2      	mov	sl, r4
 8002b26:	46ab      	mov	fp, r5
 8002b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2a:	42b1      	cmp	r1, r6
 8002b2c:	d99e      	bls.n	8002a6c <__divdi3+0x80>
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2000      	movs	r0, #0
 8002b32:	9000      	str	r0, [sp, #0]
 8002b34:	9101      	str	r1, [sp, #4]
 8002b36:	4661      	mov	r1, ip
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d1ae      	bne.n	8002a9a <__divdi3+0xae>
 8002b3c:	9800      	ldr	r0, [sp, #0]
 8002b3e:	9901      	ldr	r1, [sp, #4]
 8002b40:	e7e4      	b.n	8002b0c <__divdi3+0x120>
 8002b42:	2320      	movs	r3, #32
 8002b44:	4662      	mov	r2, ip
 8002b46:	4651      	mov	r1, sl
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	40d9      	lsrs	r1, r3
 8002b4c:	4640      	mov	r0, r8
 8002b4e:	9100      	str	r1, [sp, #0]
 8002b50:	4661      	mov	r1, ip
 8002b52:	4088      	lsls	r0, r1
 8002b54:	0003      	movs	r3, r0
 8002b56:	9900      	ldr	r1, [sp, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	e780      	b.n	8002a5e <__divdi3+0x72>
 8002b5c:	4662      	mov	r2, ip
 8002b5e:	2320      	movs	r3, #32
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	002a      	movs	r2, r5
 8002b64:	409a      	lsls	r2, r3
 8002b66:	0026      	movs	r6, r4
 8002b68:	0013      	movs	r3, r2
 8002b6a:	4662      	mov	r2, ip
 8002b6c:	40d6      	lsrs	r6, r2
 8002b6e:	431e      	orrs	r6, r3
 8002b70:	e7b8      	b.n	8002ae4 <__divdi3+0xf8>
 8002b72:	4661      	mov	r1, ip
 8002b74:	2620      	movs	r6, #32
 8002b76:	2701      	movs	r7, #1
 8002b78:	1a76      	subs	r6, r6, r1
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	40f7      	lsrs	r7, r6
 8002b80:	9000      	str	r0, [sp, #0]
 8002b82:	9101      	str	r1, [sp, #4]
 8002b84:	9701      	str	r7, [sp, #4]
 8002b86:	e781      	b.n	8002a8c <__divdi3+0xa0>
 8002b88:	4667      	mov	r7, ip
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	4662      	mov	r2, ip
 8002b8e:	0035      	movs	r5, r6
 8002b90:	40bc      	lsls	r4, r7
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	40dd      	lsrs	r5, r3
 8002b96:	0023      	movs	r3, r4
 8002b98:	432b      	orrs	r3, r5
 8002b9a:	e7ad      	b.n	8002af8 <__divdi3+0x10c>

08002b9c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ba2:	003b      	movs	r3, r7
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	001a      	movs	r2, r3
 8002baa:	2100      	movs	r1, #0
 8002bac:	f023 f9c0 	bl	8025f30 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <MX_ADC_Init+0xc4>)
 8002bb4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	05d2      	lsls	r2, r2, #23
 8002bc2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bd6:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bde:	2220      	movs	r2, #32
 8002be0:	2100      	movs	r1, #0
 8002be2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002be6:	2221      	movs	r2, #33	; 0x21
 8002be8:	2100      	movs	r1, #0
 8002bea:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bf4:	22c2      	movs	r2, #194	; 0xc2
 8002bf6:	32ff      	adds	r2, #255	; 0xff
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002bfc:	222c      	movs	r2, #44	; 0x2c
 8002bfe:	2100      	movs	r1, #0
 8002c00:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c04:	2204      	movs	r2, #4
 8002c06:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f001 f890 	bl	8003d48 <HAL_ADC_Init>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002c2c:	f000 fb04 	bl	8003238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002c30:	003b      	movs	r3, r7
 8002c32:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <MX_ADC_Init+0xc8>)
 8002c34:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002c36:	003b      	movs	r3, r7
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	0152      	lsls	r2, r2, #5
 8002c3c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c3e:	003a      	movs	r2, r7
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_ADC_Init+0xc0>)
 8002c42:	0011      	movs	r1, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f001 f9f3 	bl	8004030 <HAL_ADC_ConfigChannel>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002c4e:	f000 faf3 	bl	8003238 <Error_Handler>
  }

}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b002      	add	sp, #8
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	20001e4c 	.word	0x20001e4c
 8002c60:	40012400 	.word	0x40012400
 8002c64:	48040000 	.word	0x48040000

08002c68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <HAL_ADC_MspInit+0x28>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d106      	bne.n	8002c88 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_ADC_MspInit+0x2c>)
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_ADC_MspInit+0x2c>)
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	0089      	lsls	r1, r1, #2
 8002c84:	430a      	orrs	r2, r1
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40012400 	.word	0x40012400
 8002c94:	40021000 	.word	0x40021000

08002c98 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b08b      	sub	sp, #44	; 0x2c
 8002c9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9e:	2414      	movs	r4, #20
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	2314      	movs	r3, #20
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f023 f941 	bl	8025f30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	4bae      	ldr	r3, [pc, #696]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb2:	4bad      	ldr	r3, [pc, #692]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cba:	4bab      	ldr	r3, [pc, #684]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4ba8      	ldr	r3, [pc, #672]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	4ba7      	ldr	r3, [pc, #668]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002ccc:	2102      	movs	r1, #2
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd2:	4ba5      	ldr	r3, [pc, #660]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cde:	4ba2      	ldr	r3, [pc, #648]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	4ba1      	ldr	r3, [pc, #644]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002ce4:	2104      	movs	r1, #4
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cea:	4b9f      	ldr	r3, [pc, #636]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	2204      	movs	r2, #4
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf6:	4b9c      	ldr	r3, [pc, #624]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfa:	4b9b      	ldr	r3, [pc, #620]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d02:	4b99      	ldr	r3, [pc, #612]	; (8002f68 <MX_GPIO_Init+0x2d0>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	4013      	ands	r3, r2
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d0e:	4997      	ldr	r1, [pc, #604]	; (8002f6c <MX_GPIO_Init+0x2d4>)
 8002d10:	23a0      	movs	r3, #160	; 0xa0
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	2200      	movs	r2, #0
 8002d16:	0018      	movs	r0, r3
 8002d18:	f001 fd1e 	bl	8004758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002d1c:	4b94      	ldr	r3, [pc, #592]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	21e0      	movs	r1, #224	; 0xe0
 8002d22:	0018      	movs	r0, r3
 8002d24:	f001 fd18 	bl	8004758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8002d28:	4b92      	ldr	r3, [pc, #584]	; (8002f74 <MX_GPIO_Init+0x2dc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2107      	movs	r1, #7
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f001 fd12 	bl	8004758 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	4a90      	ldr	r2, [pc, #576]	; (8002f78 <MX_GPIO_Init+0x2e0>)
 8002d38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	2202      	movs	r2, #2
 8002d4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	193a      	adds	r2, r7, r4
 8002d4e:	23a0      	movs	r3, #160	; 0xa0
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f001 fb81 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 8002d5a:	0021      	movs	r1, r4
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	22e0      	movs	r2, #224	; 0xe0
 8002d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2201      	movs	r2, #1
 8002d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	000c      	movs	r4, r1
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	4a7d      	ldr	r2, [pc, #500]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f001 fb6d 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 8002d82:	0021      	movs	r1, r4
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	22f0      	movs	r2, #240	; 0xf0
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8c:	000c      	movs	r4, r1
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2203      	movs	r2, #3
 8002d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	4a74      	ldr	r2, [pc, #464]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f001 fb5b 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA10 PA13 PA8
                           PA11 PA9 PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_8
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	4a74      	ldr	r2, [pc, #464]	; (8002f7c <MX_GPIO_Init+0x2e4>)
 8002daa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dac:	193b      	adds	r3, r7, r4
 8002dae:	2203      	movs	r2, #3
 8002db0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	193a      	adds	r2, r7, r4
 8002dba:	23a0      	movs	r3, #160	; 0xa0
 8002dbc:	05db      	lsls	r3, r3, #23
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f001 fb4b 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8002dc6:	193b      	adds	r3, r7, r4
 8002dc8:	2213      	movs	r2, #19
 8002dca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dcc:	193b      	adds	r3, r7, r4
 8002dce:	4a6c      	ldr	r2, [pc, #432]	; (8002f80 <MX_GPIO_Init+0x2e8>)
 8002dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002ddc:	0019      	movs	r1, r3
 8002dde:	0010      	movs	r0, r2
 8002de0:	f001 fb3c 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8002de4:	0021      	movs	r1, r4
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	0192      	lsls	r2, r2, #6
 8002dec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dee:	000c      	movs	r4, r1
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	4a63      	ldr	r2, [pc, #396]	; (8002f80 <MX_GPIO_Init+0x2e8>)
 8002df4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <MX_GPIO_Init+0x2dc>)
 8002e00:	0019      	movs	r1, r3
 8002e02:	0010      	movs	r0, r2
 8002e04:	f001 fb2a 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8002e08:	193b      	adds	r3, r7, r4
 8002e0a:	2207      	movs	r2, #7
 8002e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0e:	193b      	adds	r3, r7, r4
 8002e10:	2201      	movs	r2, #1
 8002e12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	4a54      	ldr	r2, [pc, #336]	; (8002f74 <MX_GPIO_Init+0x2dc>)
 8002e24:	0019      	movs	r1, r3
 8002e26:	0010      	movs	r0, r2
 8002e28:	f001 fb18 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	2204      	movs	r2, #4
 8002e30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e32:	193b      	adds	r3, r7, r4
 8002e34:	2200      	movs	r2, #0
 8002e36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002e42:	0019      	movs	r1, r3
 8002e44:	0010      	movs	r0, r2
 8002e46:	f001 fb09 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	2201      	movs	r2, #1
 8002e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e62:	193a      	adds	r2, r7, r4
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f001 faf6 	bl	800445c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	2005      	movs	r0, #5
 8002e76:	f001 fa67 	bl	8004348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e7a:	2005      	movs	r0, #5
 8002e7c:	f001 fa79 	bl	8004372 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2100      	movs	r1, #0
 8002e84:	2007      	movs	r0, #7
 8002e86:	f001 fa5f 	bl	8004348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e8a:	2007      	movs	r0, #7
 8002e8c:	f001 fa71 	bl	8004372 <HAL_NVIC_EnableIRQ>

  /* pim testing low power */


  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_5| GPIO_PIN_4 | GPIO_PIN_2| GPIO_PIN_0;
 8002e90:	193b      	adds	r3, r7, r4
 8002e92:	4a3c      	ldr	r2, [pc, #240]	; (8002f84 <MX_GPIO_Init+0x2ec>)
 8002e94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e96:	193b      	adds	r3, r7, r4
 8002e98:	2203      	movs	r2, #3
 8002e9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	193a      	adds	r2, r7, r4
 8002ea4:	23a0      	movs	r3, #160	; 0xa0
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f001 fad6 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb6:	193b      	adds	r3, r7, r4
 8002eb8:	2203      	movs	r2, #3
 8002eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	193a      	adds	r2, r7, r4
 8002ec4:	23a0      	movs	r3, #160	; 0xa0
 8002ec6:	05db      	lsls	r3, r3, #23
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f001 fac6 	bl	800445c <HAL_GPIO_Init>



  // disable power supply & relay
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_8;
 8002ed0:	0021      	movs	r1, r4
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	2290      	movs	r2, #144	; 0x90
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	000c      	movs	r4, r1
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	2201      	movs	r2, #1
 8002ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	193b      	adds	r3, r7, r4
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	193a      	adds	r2, r7, r4
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f001 fab0 	bl	800445c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b299      	uxth	r1, r3
 8002f02:	23a0      	movs	r3, #160	; 0xa0
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	2200      	movs	r2, #0
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f001 fc25 	bl	8004758 <HAL_GPIO_WritePin>

  // disable bat mes & spi_cs
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12;
 8002f0e:	193b      	adds	r3, r7, r4
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <MX_GPIO_Init+0x2f0>)
 8002f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	2201      	movs	r2, #1
 8002f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	0010      	movs	r0, r2
 8002f2e:	f001 fa95 	bl	800445c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_InitStruct.Pin, GPIO_PIN_RESET);
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	480d      	ldr	r0, [pc, #52]	; (8002f70 <MX_GPIO_Init+0x2d8>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	f001 fc0b 	bl	8004758 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_0| GPIO_PIN_1;
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	2203      	movs	r2, #3
 8002f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <MX_GPIO_Init+0x2f4>)
 8002f58:	0019      	movs	r1, r3
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	f001 fa7e 	bl	800445c <HAL_GPIO_Init>
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b00b      	add	sp, #44	; 0x2c
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	00009022 	.word	0x00009022
 8002f70:	50000400 	.word	0x50000400
 8002f74:	50000800 	.word	0x50000800
 8002f78:	00009002 	.word	0x00009002
 8002f7c:	00006f11 	.word	0x00006f11
 8002f80:	10110000 	.word	0x10110000
 8002f84:	00006735 	.word	0x00006735
 8002f88:	00001004 	.word	0x00001004
 8002f8c:	50001c00 	.word	0x50001c00

08002f90 <stm32l_lowPowerRestoreGpioConfig>:

/* USER CODE BEGIN 2 */
void stm32l_lowPowerRestoreGpioConfig() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fa2:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	4b32      	ldr	r3, [pc, #200]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fcc:	2104      	movs	r1, #4
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	4013      	ands	r3, r2
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fde:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]

	  // RF sw
	  gpio_configure_ext(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2102      	movs	r1, #2
 8003000:	2000      	movs	r0, #0
 8003002:	f021 fce3 	bl	80249cc <gpio_configure_ext>

	  // LoRa NSS
	  gpio_configure_ext(ITSDK_SX1276_NSS_BANK,ITSDK_SX1276_NSS_PIN,GPIO_OUTPUT_PULLUP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	0219      	lsls	r1, r3, #8
 800300a:	2300      	movs	r3, #0
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	2301      	movs	r3, #1
 8003010:	2201      	movs	r2, #1
 8003012:	2000      	movs	r0, #0
 8003014:	f021 fcda 	bl	80249cc <gpio_configure_ext>

	  // LoRa TCXO
	  gpio_configure_ext(ITSDK_SX1276_TCXO_VCC_BANK,ITSDK_SX1276_TCXO_VCC_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_LOW,ITSDK_GPIO_ALT_NONE);
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	0159      	lsls	r1, r3, #5
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	2200      	movs	r2, #0
 8003024:	2000      	movs	r0, #0
 8003026:	f021 fcd1 	bl	80249cc <gpio_configure_ext>

	  // LoRa DIO0-1-2-3-4
	  gpio_configure_ext(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2301      	movs	r3, #1
 8003030:	2207      	movs	r2, #7
 8003032:	2110      	movs	r1, #16
 8003034:	2001      	movs	r0, #1
 8003036:	f021 fcc9 	bl	80249cc <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2301      	movs	r3, #1
 8003040:	2207      	movs	r2, #7
 8003042:	2102      	movs	r1, #2
 8003044:	2001      	movs	r0, #1
 8003046:	f021 fcc1 	bl	80249cc <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	2301      	movs	r3, #1
 8003050:	2207      	movs	r2, #7
 8003052:	2101      	movs	r1, #1
 8003054:	2001      	movs	r0, #1
 8003056:	f021 fcb9 	bl	80249cc <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	0199      	lsls	r1, r3, #6
 800305e:	2300      	movs	r3, #0
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2301      	movs	r3, #1
 8003064:	2207      	movs	r2, #7
 8003066:	2002      	movs	r0, #2
 8003068:	f021 fcb0 	bl	80249cc <gpio_configure_ext>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800306c:	2200      	movs	r2, #0
 800306e:	2100      	movs	r1, #0
 8003070:	2005      	movs	r0, #5
 8003072:	f001 f969 	bl	8004348 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003076:	2005      	movs	r0, #5
 8003078:	f001 f97b 	bl	8004372 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	2007      	movs	r0, #7
 8003082:	f001 f961 	bl	8004348 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003086:	2007      	movs	r0, #7
 8003088:	f001 f973 	bl	8004372 <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Pin = LD4_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);*/
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b004      	add	sp, #16
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000

08003098 <main_dbg_disable>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void main_dbg_disable(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2203      	movs	r2, #3
 80030a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStructure.Pin = (GPIO_PIN_13 | GPIO_PIN_14);
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	22c0      	movs	r2, #192	; 0xc0
 80030ae:	01d2      	lsls	r2, r2, #7
 80030b0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030b2:	1d3a      	adds	r2, r7, #4
 80030b4:	23a0      	movs	r3, #160	; 0xa0
 80030b6:	05db      	lsls	r3, r3, #23
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f001 f9ce 	bl	800445c <HAL_GPIO_Init>

    __HAL_RCC_DBGMCU_CLK_ENABLE();
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <main_dbg_disable+0x50>)
 80030c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <main_dbg_disable+0x50>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	03c9      	lsls	r1, r1, #15
 80030ca:	430a      	orrs	r2, r1
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_DBGMCU_DisableDBGStopMode();
 80030ce:	f000 fe2d 	bl	8003d2c <HAL_DBGMCU_DisableDBGStopMode>
    __HAL_RCC_DBGMCU_CLK_DISABLE();
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <main_dbg_disable+0x50>)
 80030d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <main_dbg_disable+0x50>)
 80030d8:	4904      	ldr	r1, [pc, #16]	; (80030ec <main_dbg_disable+0x54>)
 80030da:	400a      	ands	r2, r1
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b006      	add	sp, #24
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	40021000 	.word	0x40021000
 80030ec:	ffbfffff 	.word	0xffbfffff

080030f0 <main>:
  */
extern uint8_t byte;
extern uint8_t tabToPrint[5];

int main(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030f4:	f000 fd7e 	bl	8003bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030f8:	f000 f814 	bl	8003124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030fc:	f7ff fdcc 	bl	8002c98 <MX_GPIO_Init>
  MX_RTC_Init();
 8003100:	f000 f9d4 	bl	80034ac <MX_RTC_Init>
  MX_SPI1_Init();
 8003104:	f000 fa9a 	bl	800363c <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_USART2_UART_Init();
 8003108:	f000 fc94 	bl	8003a34 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800310c:	f000 fc62 	bl	80039d4 <MX_USART1_UART_Init>


//  MX_IWDG_Init();
  MX_ADC_Init();
 8003110:	f7ff fd44 	bl	8002b9c <MX_ADC_Init>
//  MX_TIM21_Init();

  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8003114:	f020 faa4 	bl	8023660 <itsdk_setup>
  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  /********desable debug module and pins (SWLCK & SWDIO)*******/
  /********         important for lowpower              ********/
  main_dbg_disable();
 8003118:	f7ff ffbe 	bl	8003098 <main_dbg_disable>
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */


	 itsdk_loop();
 800311c:	f020 fad4 	bl	80236c8 <itsdk_loop>
 8003120:	e7fc      	b.n	800311c <main+0x2c>
	...

08003124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b09d      	sub	sp, #116	; 0x74
 8003128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800312a:	2438      	movs	r4, #56	; 0x38
 800312c:	193b      	adds	r3, r7, r4
 800312e:	0018      	movs	r0, r3
 8003130:	2338      	movs	r3, #56	; 0x38
 8003132:	001a      	movs	r2, r3
 8003134:	2100      	movs	r1, #0
 8003136:	f022 fefb 	bl	8025f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800313a:	2324      	movs	r3, #36	; 0x24
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	0018      	movs	r0, r3
 8003140:	2314      	movs	r3, #20
 8003142:	001a      	movs	r2, r3
 8003144:	2100      	movs	r1, #0
 8003146:	f022 fef3 	bl	8025f30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800314a:	003b      	movs	r3, r7
 800314c:	0018      	movs	r0, r3
 800314e:	2324      	movs	r3, #36	; 0x24
 8003150:	001a      	movs	r2, r3
 8003152:	2100      	movs	r1, #0
 8003154:	f022 feec 	bl	8025f30 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003158:	4b34      	ldr	r3, [pc, #208]	; (800322c <SystemClock_Config+0x108>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a34      	ldr	r2, [pc, #208]	; (8003230 <SystemClock_Config+0x10c>)
 800315e:	401a      	ands	r2, r3
 8003160:	4b32      	ldr	r3, [pc, #200]	; (800322c <SystemClock_Config+0x108>)
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0109      	lsls	r1, r1, #4
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800316a:	f001 fb2f 	bl	80047cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800316e:	4b31      	ldr	r3, [pc, #196]	; (8003234 <SystemClock_Config+0x110>)
 8003170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <SystemClock_Config+0x110>)
 8003174:	492e      	ldr	r1, [pc, #184]	; (8003230 <SystemClock_Config+0x10c>)
 8003176:	400a      	ands	r2, r1
 8003178:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800317a:	193b      	adds	r3, r7, r4
 800317c:	220e      	movs	r2, #14
 800317e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003180:	193b      	adds	r3, r7, r4
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	0052      	lsls	r2, r2, #1
 8003186:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003188:	0021      	movs	r1, r4
 800318a:	187b      	adds	r3, r7, r1
 800318c:	2201      	movs	r2, #1
 800318e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003190:	187b      	adds	r3, r7, r1
 8003192:	2210      	movs	r2, #16
 8003194:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2201      	movs	r2, #1
 800319a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2202      	movs	r2, #2
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2200      	movs	r2, #0
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	0312      	lsls	r2, r2, #12
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	0412      	lsls	r2, r2, #16
 80031b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	0018      	movs	r0, r3
 80031bc:	f001 fb64 	bl	8004888 <HAL_RCC_OscConfig>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d001      	beq.n	80031c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80031c4:	f000 f838 	bl	8003238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c8:	2124      	movs	r1, #36	; 0x24
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	220f      	movs	r2, #15
 80031ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2203      	movs	r2, #3
 80031d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	2101      	movs	r1, #1
 80031ec:	0018      	movs	r0, r3
 80031ee:	f001 ff1b 	bl	8005028 <HAL_RCC_ClockConfig>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d001      	beq.n	80031fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80031f6:	f000 f81f 	bl	8003238 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80031fa:	003b      	movs	r3, r7
 80031fc:	2223      	movs	r2, #35	; 0x23
 80031fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8003200:	003b      	movs	r3, r7
 8003202:	2208      	movs	r2, #8
 8003204:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003206:	003b      	movs	r3, r7
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800320c:	003b      	movs	r3, r7
 800320e:	2280      	movs	r2, #128	; 0x80
 8003210:	0252      	lsls	r2, r2, #9
 8003212:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003214:	003b      	movs	r3, r7
 8003216:	0018      	movs	r0, r3
 8003218:	f002 f8ea 	bl	80053f0 <HAL_RCCEx_PeriphCLKConfig>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d001      	beq.n	8003224 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8003220:	f000 f80a 	bl	8003238 <Error_Handler>
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
  	  Error_Handler();
    }*/

}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b01d      	add	sp, #116	; 0x74
 800322a:	bd90      	pop	{r4, r7, pc}
 800322c:	40007000 	.word	0x40007000
 8003230:	ffffe7ff 	.word	0xffffe7ff
 8003234:	40021000 	.word	0x40021000

08003238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <task>:
extern uint8_t tabToPrint[5];
void readUart();
void resetMeasure(uint8_t * array, uint8_t size);
int charArrayToInt(uint8_t* array, uint8_t n);

void task() {
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0

	readUart();
 8003246:	f000 f837 	bl	80032b8 <readUart>
			}
		} else {
			s_state.lastComMS += TASKDELAYMS;
		}
	}*/
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <project_setup>:
}

/****************************************************************************************
 * Setup
 ****************************************************************************************/
void project_setup() {
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
	SX1276InitLowPower();
 8003254:	f019 fd9c 	bl	801cd90 <SX1276InitLowPower>
	log_info("Starting up\r\n");				// print a message on the USART2
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <project_setup+0x44>)
 800325a:	0018      	movs	r0, r3
 800325c:	f020 f90c 	bl	8023478 <log_info>
	itsdk_delayMs(2000);
 8003260:	23fa      	movs	r3, #250	; 0xfa
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	0018      	movs	r0, r3
 8003266:	f021 fef7 	bl	8025058 <itsdk_delayMs>
	s_state.lastComMS = COMFREQS;
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <project_setup+0x48>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <project_setup+0x4c>)
 8003270:	601a      	str	r2, [r3, #0]
	s_state.setup = BOOL_FALSE;
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <project_setup+0x4c>)
 8003274:	2200      	movs	r2, #0
 8003276:	711a      	strb	r2, [r3, #4]
	gpio_reset(LEDGreen_PORT,LEDGreen_PIN);		//set led to 0
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	2001      	movs	r0, #1
 800327c:	f021 fda8 	bl	8024dd0 <gpio_reset>
	itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);
 8003280:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <project_setup+0x50>)
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4807      	ldr	r0, [pc, #28]	; (80032a4 <project_setup+0x54>)
 8003288:	0019      	movs	r1, r3
 800328a:	f020 fc0b 	bl	8023aa4 <itdt_sched_registerSched>
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	08026a98 	.word	0x08026a98
 8003298:	20000000 	.word	0x20000000
 800329c:	20001ea8 	.word	0x20001ea8
 80032a0:	08003243 	.word	0x08003243
 80032a4:	00002710 	.word	0x00002710

080032a8 <project_loop>:

/****************************************************************************************
 * Project loop may not contain functional stuff
 * Keep in this loop only really short operations
 ****************************************************************************************/
void project_loop() {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
    itsdk_lorawan_loop();
 80032ac:	f020 f98c 	bl	80235c8 <itsdk_lorawan_loop>

}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <readUart>:
//Test part
//========================================================================================

HAL_StatusTypeDef UART1status;

void readUart(){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0

	 GPIO_InitTypeDef POWER_ACTIVE;
	  POWER_ACTIVE.Pin   = GPIO_PIN_11 ;
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	601a      	str	r2, [r3, #0]
	  POWER_ACTIVE.Mode  = GPIO_MODE_OUTPUT_PP;
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	2201      	movs	r2, #1
 80032ca:	605a      	str	r2, [r3, #4]

	  int measureAttempt = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
	  	int mes1 = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
	 resetMeasure(&tabToPrint[0], 4); //Reset the return array
 80032d4:	4b30      	ldr	r3, [pc, #192]	; (8003398 <readUart+0xe0>)
 80032d6:	2104      	movs	r1, #4
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f8cb 	bl	8003474 <resetMeasure>
	 	HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, GPIO_PIN_SET); //Set on the ultrasonic sensor
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b299      	uxth	r1, r3
 80032e4:	23a0      	movs	r3, #160	; 0xa0
 80032e6:	05db      	lsls	r3, r3, #23
 80032e8:	2201      	movs	r2, #1
 80032ea:	0018      	movs	r0, r3
 80032ec:	f001 fa34 	bl	8004758 <HAL_GPIO_WritePin>
	 	itsdk_delayMs(2500); //Warm up for ultrasonic sensor
 80032f0:	4b2a      	ldr	r3, [pc, #168]	; (800339c <readUart+0xe4>)
 80032f2:	0018      	movs	r0, r3
 80032f4:	f021 feb0 	bl	8025058 <itsdk_delayMs>

	 	log_info("Start the measure !\r\n");
 80032f8:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <readUart+0xe8>)
 80032fa:	0018      	movs	r0, r3
 80032fc:	f020 f8bc 	bl	8023478 <log_info>
	 	while(measureAttempt < 3){
 8003300:	e01f      	b.n	8003342 <readUart+0x8a>
	 		HAL_UART_Receive_IT(&huart1, &byte, 1); //On lance une mesure, ca return dans tabToPrint
 8003302:	4928      	ldr	r1, [pc, #160]	; (80033a4 <readUart+0xec>)
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <readUart+0xf0>)
 8003306:	2201      	movs	r2, #1
 8003308:	0018      	movs	r0, r3
 800330a:	f003 fbe7 	bl	8006adc <HAL_UART_Receive_IT>
	 		HAL_Delay(1500);
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <readUart+0xf4>)
 8003310:	0018      	movs	r0, r3
 8003312:	f000 fccd 	bl	8003cb0 <HAL_Delay>
	 		//tabToPrint[1]=0x34;
	 		mes1 = charArrayToInt(&tabToPrint[0], 4);
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <readUart+0xe0>)
 8003318:	2104      	movs	r1, #4
 800331a:	0018      	movs	r0, r3
 800331c:	f000 f854 	bl	80033c8 <charArrayToInt>
 8003320:	0003      	movs	r3, r0
 8003322:	61bb      	str	r3, [r7, #24]
	 		log_info("Attempt %d ", measureAttempt);
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <readUart+0xf8>)
 8003328:	0011      	movs	r1, r2
 800332a:	0018      	movs	r0, r3
 800332c:	f020 f8a4 	bl	8023478 <log_info>
	 		if (mes1==0){
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d103      	bne.n	800333e <readUart+0x86>
	 			measureAttempt++;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3301      	adds	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e001      	b.n	8003342 <readUart+0x8a>
	 		}
	 		else{
	 			measureAttempt=4;
 800333e:	2304      	movs	r3, #4
 8003340:	61fb      	str	r3, [r7, #28]
	 	while(measureAttempt < 3){
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b02      	cmp	r3, #2
 8003346:	dddc      	ble.n	8003302 <readUart+0x4a>
	 		}
	 	}

	 	log_info("We measure ");
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <readUart+0xfc>)
 800334a:	0018      	movs	r0, r3
 800334c:	f020 f894 	bl	8023478 <log_info>
	 	HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500);
 8003350:	23fa      	movs	r3, #250	; 0xfa
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4910      	ldr	r1, [pc, #64]	; (8003398 <readUart+0xe0>)
 8003356:	4818      	ldr	r0, [pc, #96]	; (80033b8 <readUart+0x100>)
 8003358:	2205      	movs	r2, #5
 800335a:	f003 fb17 	bl	800698c <HAL_UART_Transmit>
	 	log_info(" cm\r\n");
 800335e:	4b17      	ldr	r3, [pc, #92]	; (80033bc <readUart+0x104>)
 8003360:	0018      	movs	r0, r3
 8003362:	f020 f889 	bl	8023478 <log_info>
	 	HAL_GPIO_WritePin(GPIOA, POWER_ACTIVE.Pin, 0);
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b299      	uxth	r1, r3
 800336c:	23a0      	movs	r3, #160	; 0xa0
 800336e:	05db      	lsls	r3, r3, #23
 8003370:	2200      	movs	r2, #0
 8003372:	0018      	movs	r0, r3
 8003374:	f001 f9f0 	bl	8004758 <HAL_GPIO_WritePin>
	 	if(mes1 == 0){
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <readUart+0xd0>
	 			log_info("Measure is not valid\r\n");
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <readUart+0x108>)
 8003380:	0018      	movs	r0, r3
 8003382:	f020 f879 	bl	8023478 <log_info>
	 			return false;
 8003386:	e004      	b.n	8003392 <readUart+0xda>
	 		}
	 		else {
	 			log_info("Measure is valid\r\n");
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <readUart+0x10c>)
 800338a:	0018      	movs	r0, r3
 800338c:	f020 f874 	bl	8023478 <log_info>
	 			return true;
 8003390:	46c0      	nop			; (mov r8, r8)
	 		}

}
 8003392:	46bd      	mov	sp, r7
 8003394:	b008      	add	sp, #32
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20002278 	.word	0x20002278
 800339c:	000009c4 	.word	0x000009c4
 80033a0:	08026aa8 	.word	0x08026aa8
 80033a4:	2000227d 	.word	0x2000227d
 80033a8:	20001eb8 	.word	0x20001eb8
 80033ac:	000005dc 	.word	0x000005dc
 80033b0:	08026ac0 	.word	0x08026ac0
 80033b4:	08026acc 	.word	0x08026acc
 80033b8:	20002048 	.word	0x20002048
 80033bc:	08026ad8 	.word	0x08026ad8
 80033c0:	08026ae0 	.word	0x08026ae0
 80033c4:	08026af8 	.word	0x08026af8

080033c8 <charArrayToInt>:


int charArrayToInt(uint8_t* array, uint8_t n){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	000a      	movs	r2, r1
 80033d2:	1cfb      	adds	r3, r7, #3
 80033d4:	701a      	strb	r2, [r3, #0]
    int number = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
    int mult = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]

    n = (int)n < 0 ? -n : n;       /* quick absolute value check  */
 80033de:	1cfb      	adds	r3, r7, #3
 80033e0:	1cfa      	adds	r2, r7, #3
 80033e2:	7812      	ldrb	r2, [r2, #0]
 80033e4:	701a      	strb	r2, [r3, #0]

    /* for each character in array */
    while (n--)
 80033e6:	e037      	b.n	8003458 <charArrayToInt+0x90>
    {
        /* if not digit or '-', check if number > 0, break or continue */
        if ((array[n] < '0' || array[n] > '9') && array[n] != '-') {
 80033e8:	1cfb      	adds	r3, r7, #3
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	18d3      	adds	r3, r2, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b2f      	cmp	r3, #47	; 0x2f
 80033f4:	d906      	bls.n	8003404 <charArrayToInt+0x3c>
 80033f6:	1cfb      	adds	r3, r7, #3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	18d3      	adds	r3, r2, r3
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b39      	cmp	r3, #57	; 0x39
 8003402:	d90a      	bls.n	800341a <charArrayToInt+0x52>
 8003404:	1cfb      	adds	r3, r7, #3
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	18d3      	adds	r3, r2, r3
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b2d      	cmp	r3, #45	; 0x2d
 8003410:	d003      	beq.n	800341a <charArrayToInt+0x52>
            if (number)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d127      	bne.n	8003468 <charArrayToInt+0xa0>
                break;
            else
                continue;
 8003418:	e01e      	b.n	8003458 <charArrayToInt+0x90>
        }

        if (array[n] == '-') {      /* if '-' if number, negate, break */
 800341a:	1cfb      	adds	r3, r7, #3
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	18d3      	adds	r3, r2, r3
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b2d      	cmp	r3, #45	; 0x2d
 8003426:	d106      	bne.n	8003436 <charArrayToInt+0x6e>
            if (number) {
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d014      	beq.n	8003458 <charArrayToInt+0x90>
                number = -number;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	425b      	negs	r3, r3
 8003432:	60fb      	str	r3, [r7, #12]
                break;
 8003434:	e019      	b.n	800346a <charArrayToInt+0xa2>
            }
        }
        else {                      /* convert digit to numeric value   */
            number += (array[n] - '0') * mult;
 8003436:	1cfb      	adds	r3, r7, #3
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	18d3      	adds	r3, r2, r3
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	3b30      	subs	r3, #48	; 0x30
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	4353      	muls	r3, r2
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	18d3      	adds	r3, r2, r3
 800344a:	60fb      	str	r3, [r7, #12]
            mult *= 10;
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	0013      	movs	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	189b      	adds	r3, r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
    while (n--)
 8003458:	1cfb      	adds	r3, r7, #3
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	1cfa      	adds	r2, r7, #3
 800345e:	1e59      	subs	r1, r3, #1
 8003460:	7011      	strb	r1, [r2, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1c0      	bne.n	80033e8 <charArrayToInt+0x20>
 8003466:	e000      	b.n	800346a <charArrayToInt+0xa2>
                break;
 8003468:	46c0      	nop			; (mov r8, r8)
        }
    }

    return number;
 800346a:	68fb      	ldr	r3, [r7, #12]
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b004      	add	sp, #16
 8003472:	bd80      	pop	{r7, pc}

08003474 <resetMeasure>:
void resetMeasure(uint8_t * array, uint8_t size){
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	000a      	movs	r2, r1
 800347e:	1cfb      	adds	r3, r7, #3
 8003480:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e007      	b.n	8003498 <resetMeasure+0x24>
		array[i] = 0x30; //Set to 0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	18d3      	adds	r3, r2, r3
 800348e:	2230      	movs	r2, #48	; 0x30
 8003490:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	1cfb      	adds	r3, r7, #3
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	429a      	cmp	r2, r3
 80034a0:	dbf2      	blt.n	8003488 <resetMeasure+0x14>
	}
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b004      	add	sp, #16
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b090      	sub	sp, #64	; 0x40
 80034b0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80034b2:	232c      	movs	r3, #44	; 0x2c
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	0018      	movs	r0, r3
 80034b8:	2314      	movs	r3, #20
 80034ba:	001a      	movs	r2, r3
 80034bc:	2100      	movs	r1, #0
 80034be:	f022 fd37 	bl	8025f30 <memset>
  RTC_DateTypeDef sDate = {0};
 80034c2:	2328      	movs	r3, #40	; 0x28
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80034ca:	003b      	movs	r3, r7
 80034cc:	0018      	movs	r0, r3
 80034ce:	2328      	movs	r3, #40	; 0x28
 80034d0:	001a      	movs	r2, r3
 80034d2:	2100      	movs	r1, #0
 80034d4:	f022 fd2c 	bl	8025f30 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034d8:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <MX_RTC_Init+0x148>)
 80034da:	4a47      	ldr	r2, [pc, #284]	; (80035f8 <MX_RTC_Init+0x14c>)
 80034dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034de:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <MX_RTC_Init+0x148>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <MX_RTC_Init+0x148>)
 80034e6:	227f      	movs	r2, #127	; 0x7f
 80034e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <MX_RTC_Init+0x148>)
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <MX_RTC_Init+0x148>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <MX_RTC_Init+0x148>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034fc:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <MX_RTC_Init+0x148>)
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003502:	4b3c      	ldr	r3, [pc, #240]	; (80035f4 <MX_RTC_Init+0x148>)
 8003504:	2200      	movs	r2, #0
 8003506:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003508:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <MX_RTC_Init+0x148>)
 800350a:	0018      	movs	r0, r3
 800350c:	f002 f8c8 	bl	80056a0 <HAL_RTC_Init>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d001      	beq.n	8003518 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003514:	f7ff fe90 	bl	8003238 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	187b      	adds	r3, r7, r1
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003520:	187b      	adds	r3, r7, r1
 8003522:	2200      	movs	r2, #0
 8003524:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2200      	movs	r2, #0
 800352a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003538:	1879      	adds	r1, r7, r1
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <MX_RTC_Init+0x148>)
 800353c:	2200      	movs	r2, #0
 800353e:	0018      	movs	r0, r3
 8003540:	f002 f94c 	bl	80057dc <HAL_RTC_SetTime>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d001      	beq.n	800354c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003548:	f7ff fe76 	bl	8003238 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800354c:	2128      	movs	r1, #40	; 0x28
 800354e:	187b      	adds	r3, r7, r1
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003554:	187b      	adds	r3, r7, r1
 8003556:	2201      	movs	r2, #1
 8003558:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2201      	movs	r2, #1
 800355e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2200      	movs	r2, #0
 8003564:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003566:	1879      	adds	r1, r7, r1
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <MX_RTC_Init+0x148>)
 800356a:	2200      	movs	r2, #0
 800356c:	0018      	movs	r0, r3
 800356e:	f002 fa55 	bl	8005a1c <HAL_RTC_SetDate>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003576:	f7ff fe5f 	bl	8003238 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800357a:	003b      	movs	r3, r7
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003580:	003b      	movs	r3, r7
 8003582:	2200      	movs	r2, #0
 8003584:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003586:	003b      	movs	r3, r7
 8003588:	2200      	movs	r2, #0
 800358a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800358c:	003b      	movs	r3, r7
 800358e:	2200      	movs	r2, #0
 8003590:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003592:	003b      	movs	r3, r7
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003598:	003b      	movs	r3, r7
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800359e:	003b      	movs	r3, r7
 80035a0:	2200      	movs	r2, #0
 80035a2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80035a4:	003b      	movs	r3, r7
 80035a6:	22f0      	movs	r2, #240	; 0xf0
 80035a8:	0512      	lsls	r2, r2, #20
 80035aa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80035ac:	003b      	movs	r3, r7
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80035b2:	003b      	movs	r3, r7
 80035b4:	2220      	movs	r2, #32
 80035b6:	2101      	movs	r1, #1
 80035b8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80035ba:	003b      	movs	r3, r7
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	0052      	lsls	r2, r2, #1
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80035c2:	0039      	movs	r1, r7
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <MX_RTC_Init+0x148>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	0018      	movs	r0, r3
 80035ca:	f002 fb23 	bl	8005c14 <HAL_RTC_SetAlarm_IT>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80035d2:	f7ff fe31 	bl	8003238 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <MX_RTC_Init+0x148>)
 80035d8:	2200      	movs	r2, #0
 80035da:	2100      	movs	r1, #0
 80035dc:	0018      	movs	r0, r3
 80035de:	f002 fd53 	bl	8006088 <HAL_RTCEx_SetWakeUpTimer_IT>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d001      	beq.n	80035ea <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 80035e6:	f7ff fe27 	bl	8003238 <Error_Handler>
  }

}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b010      	add	sp, #64	; 0x40
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	20001f38 	.word	0x20001f38
 80035f8:	40002800 	.word	0x40002800

080035fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RTC_MspInit+0x38>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10e      	bne.n	800362c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_RTC_MspInit+0x3c>)
 8003610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RTC_MspInit+0x3c>)
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	02c9      	lsls	r1, r1, #11
 8003618:	430a      	orrs	r2, r1
 800361a:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	2100      	movs	r1, #0
 8003620:	2002      	movs	r0, #2
 8003622:	f000 fe91 	bl	8004348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003626:	2002      	movs	r0, #2
 8003628:	f000 fea3 	bl	8004372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40002800 	.word	0x40002800
 8003638:	40021000 	.word	0x40021000

0800363c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <MX_SPI1_Init+0x6c>)
 8003644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003648:	2282      	movs	r2, #130	; 0x82
 800364a:	0052      	lsls	r2, r2, #1
 800364c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003654:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <MX_SPI1_Init+0x68>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003670:	2220      	movs	r2, #32
 8003672:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <MX_SPI1_Init+0x68>)
 800367c:	2200      	movs	r2, #0
 800367e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003682:	2200      	movs	r2, #0
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003688:	2207      	movs	r2, #7
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <MX_SPI1_Init+0x68>)
 800368e:	0018      	movs	r0, r3
 8003690:	f002 fe54 	bl	800633c <HAL_SPI_Init>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d001      	beq.n	800369c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003698:	f7ff fdce 	bl	8003238 <Error_Handler>
  }

}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	20001fb4 	.word	0x20001fb4
 80036a8:	40013000 	.word	0x40013000

080036ac <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b08b      	sub	sp, #44	; 0x2c
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	2314      	movs	r3, #20
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	0018      	movs	r0, r3
 80036ba:	2314      	movs	r3, #20
 80036bc:	001a      	movs	r2, r3
 80036be:	2100      	movs	r1, #0
 80036c0:	f022 fc36 	bl	8025f30 <memset>
  if(spiHandle->Instance==SPI1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a41      	ldr	r2, [pc, #260]	; (80037d0 <HAL_SPI_MspInit+0x124>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d14d      	bne.n	800376a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 80036d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d2:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	0149      	lsls	r1, r1, #5
 80036d8:	430a      	orrs	r2, r1
 80036da:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036dc:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 80036e2:	2102      	movs	r1, #2
 80036e4:	430a      	orrs	r2, r1
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80036e8:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2202      	movs	r2, #2
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f4:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	430a      	orrs	r2, r1
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8003700:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	2201      	movs	r2, #1
 8003706:	4013      	ands	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 800370c:	2114      	movs	r1, #20
 800370e:	187b      	adds	r3, r7, r1
 8003710:	2208      	movs	r2, #8
 8003712:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	187b      	adds	r3, r7, r1
 8003716:	2202      	movs	r2, #2
 8003718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	187b      	adds	r3, r7, r1
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003720:	187b      	adds	r3, r7, r1
 8003722:	2203      	movs	r2, #3
 8003724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003726:	187b      	adds	r3, r7, r1
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 800372c:	000c      	movs	r4, r1
 800372e:	187b      	adds	r3, r7, r1
 8003730:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <HAL_SPI_MspInit+0x12c>)
 8003732:	0019      	movs	r1, r3
 8003734:	0010      	movs	r0, r2
 8003736:	f000 fe91 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 800373a:	0021      	movs	r1, r4
 800373c:	187b      	adds	r3, r7, r1
 800373e:	22c0      	movs	r2, #192	; 0xc0
 8003740:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	187b      	adds	r3, r7, r1
 8003744:	2202      	movs	r2, #2
 8003746:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	187b      	adds	r3, r7, r1
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374e:	187b      	adds	r3, r7, r1
 8003750:	2203      	movs	r2, #3
 8003752:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003754:	187b      	adds	r3, r7, r1
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375a:	187a      	adds	r2, r7, r1
 800375c:	23a0      	movs	r3, #160	; 0xa0
 800375e:	05db      	lsls	r3, r3, #23
 8003760:	0011      	movs	r1, r2
 8003762:	0018      	movs	r0, r3
 8003764:	f000 fe7a 	bl	800445c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003768:	e02e      	b.n	80037c8 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_SPI_MspInit+0x130>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d129      	bne.n	80037c8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 8003776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 800377a:	2180      	movs	r1, #128	; 0x80
 800377c:	01c9      	lsls	r1, r1, #7
 800377e:	430a      	orrs	r2, r1
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 8003788:	2102      	movs	r1, #2
 800378a:	430a      	orrs	r2, r1
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_SPI_MspInit+0x128>)
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	2202      	movs	r2, #2
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 800379a:	2114      	movs	r1, #20
 800379c:	187b      	adds	r3, r7, r1
 800379e:	22f0      	movs	r2, #240	; 0xf0
 80037a0:	0212      	lsls	r2, r2, #8
 80037a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2202      	movs	r2, #2
 80037a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	2203      	movs	r2, #3
 80037b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	2200      	movs	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <HAL_SPI_MspInit+0x12c>)
 80037c0:	0019      	movs	r1, r3
 80037c2:	0010      	movs	r0, r2
 80037c4:	f000 fe4a 	bl	800445c <HAL_GPIO_Init>
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b00b      	add	sp, #44	; 0x2c
 80037ce:	bd90      	pop	{r4, r7, pc}
 80037d0:	40013000 	.word	0x40013000
 80037d4:	40021000 	.word	0x40021000
 80037d8:	50000400 	.word	0x50000400
 80037dc:	40003800 	.word	0x40003800

080037e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e4:	4b07      	ldr	r3, [pc, #28]	; (8003804 <HAL_MspInit+0x24>)
 80037e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_MspInit+0x24>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	430a      	orrs	r2, r1
 80037ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <HAL_MspInit+0x24>)
 80037f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_MspInit+0x24>)
 80037f6:	2180      	movs	r1, #128	; 0x80
 80037f8:	0549      	lsls	r1, r1, #21
 80037fa:	430a      	orrs	r2, r1
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000

08003808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003816:	e7fe      	b.n	8003816 <HardFault_Handler+0x4>

08003818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003830:	f022 fa76 	bl	8025d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <RTC_IRQHandler+0x1c>)
 8003842:	0018      	movs	r0, r3
 8003844:	f002 fb32 	bl	8005eac <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <RTC_IRQHandler+0x1c>)
 800384a:	0018      	movs	r0, r3
 800384c:	f002 fd44 	bl	80062d8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	20001f38 	.word	0x20001f38

0800385c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003860:	2001      	movs	r0, #1
 8003862:	f000 ff97 	bl	8004794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003866:	2002      	movs	r0, #2
 8003868:	f000 ff94 	bl	8004794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003876:	2010      	movs	r0, #16
 8003878:	f000 ff8c 	bl	8004794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	019b      	lsls	r3, r3, #6
 8003880:	0018      	movs	r0, r3
 8003882:	f000 ff87 	bl	8004794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <USART1_IRQHandler+0x14>)
 8003892:	0018      	movs	r0, r3
 8003894:	f003 f9da 	bl	8006c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	20001eb8 	.word	0x20001eb8

080038a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <USART2_IRQHandler+0x14>)
 80038aa:	0018      	movs	r0, r3
 80038ac:	f003 f9ce 	bl	8006c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	20002048 	.word	0x20002048

080038bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <_sbrk+0x5c>)
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <_sbrk+0x60>)
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <_sbrk+0x64>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <_sbrk+0x64>)
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <_sbrk+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <_sbrk+0x64>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d207      	bcs.n	80038fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038ec:	f022 fada 	bl	8025ea4 <__errno>
 80038f0:	0003      	movs	r3, r0
 80038f2:	220c      	movs	r2, #12
 80038f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	425b      	negs	r3, r3
 80038fa:	e009      	b.n	8003910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <_sbrk+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <_sbrk+0x64>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	18d2      	adds	r2, r2, r3
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <_sbrk+0x64>)
 800390c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800390e:	68fb      	ldr	r3, [r7, #12]
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b006      	add	sp, #24
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20005000 	.word	0x20005000
 800391c:	00000400 	.word	0x00000400
 8003920:	200000e4 	.word	0x200000e4
 8003924:	200022d8 	.word	0x200022d8

08003928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <SystemInit+0x64>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <SystemInit+0x64>)
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	0049      	lsls	r1, r1, #1
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <SystemInit+0x64>)
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <SystemInit+0x64>)
 8003940:	4913      	ldr	r1, [pc, #76]	; (8003990 <SystemInit+0x68>)
 8003942:	400a      	ands	r2, r1
 8003944:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <SystemInit+0x64>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <SystemInit+0x64>)
 800394c:	4911      	ldr	r1, [pc, #68]	; (8003994 <SystemInit+0x6c>)
 800394e:	400a      	ands	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <SystemInit+0x64>)
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <SystemInit+0x64>)
 8003958:	2101      	movs	r1, #1
 800395a:	438a      	bics	r2, r1
 800395c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <SystemInit+0x64>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <SystemInit+0x64>)
 8003964:	490c      	ldr	r1, [pc, #48]	; (8003998 <SystemInit+0x70>)
 8003966:	400a      	ands	r2, r1
 8003968:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <SystemInit+0x64>)
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <SystemInit+0x64>)
 8003970:	490a      	ldr	r1, [pc, #40]	; (800399c <SystemInit+0x74>)
 8003972:	400a      	ands	r2, r1
 8003974:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <SystemInit+0x64>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <SystemInit+0x78>)
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	0512      	lsls	r2, r2, #20
 8003982:	609a      	str	r2, [r3, #8]
#endif
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	40021000 	.word	0x40021000
 8003990:	88ff400c 	.word	0x88ff400c
 8003994:	fef6fff6 	.word	0xfef6fff6
 8003998:	fffbffff 	.word	0xfffbffff
 800399c:	ff02ffff 	.word	0xff02ffff
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a06      	ldr	r2, [pc, #24]	; (80039cc <HAL_TIM_Base_MspInit+0x28>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d105      	bne.n	80039c2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <HAL_TIM_Base_MspInit+0x2c>)
 80039b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_TIM_Base_MspInit+0x2c>)
 80039bc:	2104      	movs	r1, #4
 80039be:	430a      	orrs	r2, r1
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b002      	add	sp, #8
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	40010800 	.word	0x40010800
 80039d0:	40021000 	.word	0x40021000

080039d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 80039da:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <MX_USART1_UART_Init+0x5c>)
 80039dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 80039e0:	2296      	movs	r2, #150	; 0x96
 80039e2:	0192      	lsls	r2, r2, #6
 80039e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;//;
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 80039fa:	220c      	movs	r2, #12
 80039fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	621a      	str	r2, [r3, #32]
  //huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
  //huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  //huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <MX_USART1_UART_Init+0x58>)
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f002 ff63 	bl	80068e4 <HAL_UART_Init>
 8003a1e:	1e03      	subs	r3, r0, #0
 8003a20:	d001      	beq.n	8003a26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003a22:	f7ff fc09 	bl	8003238 <Error_Handler>
  }

}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20001eb8 	.word	0x20001eb8
 8003a30:	40013800 	.word	0x40013800

08003a34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003a38:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a3a:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <MX_USART2_UART_Init+0x5c>)
 8003a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a40:	2296      	movs	r2, #150	; 0x96
 8003a42:	0192      	lsls	r2, r2, #6
 8003a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <MX_USART2_UART_Init+0x58>)
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f002 ff33 	bl	80068e4 <HAL_UART_Init>
 8003a7e:	1e03      	subs	r3, r0, #0
 8003a80:	d001      	beq.n	8003a86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a82:	f7ff fbd9 	bl	8003238 <Error_Handler>
  }

}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20002048 	.word	0x20002048
 8003a90:	40004400 	.word	0x40004400

08003a94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	2314      	movs	r3, #20
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	2314      	movs	r3, #20
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	f022 fa42 	bl	8025f30 <memset>
  if(uartHandle->Instance==USART1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a38      	ldr	r2, [pc, #224]	; (8003b94 <HAL_UART_MspInit+0x100>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d133      	bne.n	8003b1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ab6:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003abc:	2180      	movs	r1, #128	; 0x80
 8003abe:	01c9      	lsls	r1, r1, #7
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003aca:	2101      	movs	r1, #1
 8003acc:	430a      	orrs	r2, r1
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003adc:	2114      	movs	r1, #20
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	22c0      	movs	r2, #192	; 0xc0
 8003ae2:	00d2      	lsls	r2, r2, #3
 8003ae4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2202      	movs	r2, #2
 8003aea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2203      	movs	r2, #3
 8003af6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2204      	movs	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afe:	187a      	adds	r2, r7, r1
 8003b00:	23a0      	movs	r3, #160	; 0xa0
 8003b02:	05db      	lsls	r3, r3, #23
 8003b04:	0011      	movs	r1, r2
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 fca8 	bl	800445c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2100      	movs	r1, #0
 8003b10:	201b      	movs	r0, #27
 8003b12:	f000 fc19 	bl	8004348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b16:	201b      	movs	r0, #27
 8003b18:	f000 fc2b 	bl	8004372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b1c:	e036      	b.n	8003b8c <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <HAL_UART_MspInit+0x108>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d131      	bne.n	8003b8c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003b2e:	2180      	movs	r1, #128	; 0x80
 8003b30:	0289      	lsls	r1, r1, #10
 8003b32:	430a      	orrs	r2, r1
 8003b34:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b36:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_UART_MspInit+0x104>)
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	2201      	movs	r2, #1
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003b4e:	2114      	movs	r1, #20
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	220c      	movs	r2, #12
 8003b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	2202      	movs	r2, #2
 8003b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5c:	187b      	adds	r3, r7, r1
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	2203      	movs	r2, #3
 8003b66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6e:	187a      	adds	r2, r7, r1
 8003b70:	23a0      	movs	r3, #160	; 0xa0
 8003b72:	05db      	lsls	r3, r3, #23
 8003b74:	0011      	movs	r1, r2
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 fc70 	bl	800445c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2100      	movs	r1, #0
 8003b80:	201c      	movs	r0, #28
 8003b82:	f000 fbe1 	bl	8004348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b86:	201c      	movs	r0, #28
 8003b88:	f000 fbf3 	bl	8004372 <HAL_NVIC_EnableIRQ>
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b00a      	add	sp, #40	; 0x28
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40013800 	.word	0x40013800
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40004400 	.word	0x40004400

08003ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003ba0:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003ba2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ba6:	e003      	b.n	8003bb0 <LoopCopyDataInit>

08003ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bae:	3104      	adds	r1, #4

08003bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bb0:	480b      	ldr	r0, [pc, #44]	; (8003be0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003bb8:	d3f6      	bcc.n	8003ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003bbc:	e002      	b.n	8003bc4 <LoopFillZerobss>

08003bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003bbe:	2300      	movs	r3, #0
  str  r3, [r2]
 8003bc0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc2:	3204      	adds	r2, #4

08003bc4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <LoopForever+0x16>)
  cmp  r2, r3
 8003bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bc8:	d3f9      	bcc.n	8003bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003bca:	f7ff fead 	bl	8003928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bce:	f022 f96f 	bl	8025eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd2:	f7ff fa8d 	bl	80030f0 <main>

08003bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8003bd6:	e7fe      	b.n	8003bd6 <LoopForever>
   ldr   r0, =_estack
 8003bd8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003bdc:	08029258 	.word	0x08029258
  ldr  r0, =_sdata
 8003be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003be4:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 8003be8:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 8003bec:	200022d4 	.word	0x200022d4

08003bf0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf0:	e7fe      	b.n	8003bf0 <ADC1_COMP_IRQHandler>
	...

08003bf4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bfa:	1dfb      	adds	r3, r7, #7
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_Init+0x3c>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_Init+0x3c>)
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f000 f811 	bl	8003c34 <HAL_InitTick>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003c16:	1dfb      	adds	r3, r7, #7
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	e001      	b.n	8003c22 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c1e:	f7ff fddf 	bl	80037e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c22:	1dfb      	adds	r3, r7, #7
 8003c24:	781b      	ldrb	r3, [r3, #0]
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b002      	add	sp, #8
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	40022000 	.word	0x40022000

08003c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <HAL_InitTick+0x5c>)
 8003c3e:	681c      	ldr	r4, [r3, #0]
 8003c40:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <HAL_InitTick+0x60>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	0019      	movs	r1, r3
 8003c46:	23fa      	movs	r3, #250	; 0xfa
 8003c48:	0098      	lsls	r0, r3, #2
 8003c4a:	f7fc fa65 	bl	8000118 <__udivsi3>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	0019      	movs	r1, r3
 8003c52:	0020      	movs	r0, r4
 8003c54:	f7fc fa60 	bl	8000118 <__udivsi3>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 fba9 	bl	80043b2 <HAL_SYSTICK_Config>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e00f      	b.n	8003c88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d80b      	bhi.n	8003c86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	2301      	movs	r3, #1
 8003c72:	425b      	negs	r3, r3
 8003c74:	2200      	movs	r2, #0
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 fb66 	bl	8004348 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_InitTick+0x64>)
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b003      	add	sp, #12
 8003c8e:	bd90      	pop	{r4, r7, pc}
 8003c90:	20000004 	.word	0x20000004
 8003c94:	2000000c 	.word	0x2000000c
 8003c98:	20000008 	.word	0x20000008

08003c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca0:	4b02      	ldr	r3, [pc, #8]	; (8003cac <HAL_GetTick+0x10>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	200020c8 	.word	0x200020c8

08003cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb8:	f7ff fff0 	bl	8003c9c <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	d005      	beq.n	8003cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_Delay+0x40>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	001a      	movs	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	f7ff ffe0 	bl	8003c9c <HAL_GetTick>
 8003cdc:	0002      	movs	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d8f7      	bhi.n	8003cd8 <HAL_Delay+0x28>
  {
  }
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b004      	add	sp, #16
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <HAL_SuspendTick+0x18>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HAL_SuspendTick+0x18>)
 8003cfe:	2102      	movs	r1, #2
 8003d00:	438a      	bics	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	e000e010 	.word	0xe000e010

08003d10 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <HAL_ResumeTick+0x18>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <HAL_ResumeTick+0x18>)
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	e000e010 	.word	0xe000e010

08003d2c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8003d36:	2102      	movs	r1, #2
 8003d38:	438a      	bics	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	40015800 	.word	0x40015800

08003d48 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e159      	b.n	800400e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2250      	movs	r2, #80	; 0x50
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fe ff78 	bl	8002c68 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d005      	beq.n	8003d90 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003d8e:	d00b      	beq.n	8003da8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	2210      	movs	r2, #16
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2250      	movs	r2, #80	; 0x50
 8003da0:	2100      	movs	r1, #0
 8003da2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e132      	b.n	800400e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dac:	4a9a      	ldr	r2, [pc, #616]	; (8004018 <HAL_ADC_Init+0x2d0>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	2202      	movs	r2, #2
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d108      	bne.n	8003dd8 <HAL_ADC_Init+0x90>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_Init+0x90>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_ADC_Init+0x92>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d149      	bne.n	8003e72 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	23c0      	movs	r3, #192	; 0xc0
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d00b      	beq.n	8003e02 <HAL_ADC_Init+0xba>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	05db      	lsls	r3, r3, #23
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d005      	beq.n	8003e02 <HAL_ADC_Init+0xba>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d111      	bne.n	8003e26 <HAL_ADC_Init+0xde>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	0092      	lsls	r2, r2, #2
 8003e0e:	0892      	lsrs	r2, r2, #2
 8003e10:	611a      	str	r2, [r3, #16]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6919      	ldr	r1, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	611a      	str	r2, [r3, #16]
 8003e24:	e014      	b.n	8003e50 <HAL_ADC_Init+0x108>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	0892      	lsrs	r2, r2, #2
 8003e34:	611a      	str	r2, [r3, #16]
 8003e36:	4b79      	ldr	r3, [pc, #484]	; (800401c <HAL_ADC_Init+0x2d4>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b78      	ldr	r3, [pc, #480]	; (800401c <HAL_ADC_Init+0x2d4>)
 8003e3c:	4978      	ldr	r1, [pc, #480]	; (8004020 <HAL_ADC_Init+0x2d8>)
 8003e3e:	400a      	ands	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_ADC_Init+0x2d4>)
 8003e44:	6819      	ldr	r1, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4b74      	ldr	r3, [pc, #464]	; (800401c <HAL_ADC_Init+0x2d4>)
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2118      	movs	r1, #24
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003e72:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_ADC_Init+0x2d4>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b69      	ldr	r3, [pc, #420]	; (800401c <HAL_ADC_Init+0x2d4>)
 8003e78:	496a      	ldr	r1, [pc, #424]	; (8004024 <HAL_ADC_Init+0x2dc>)
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003e7e:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_ADC_Init+0x2d4>)
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	065a      	lsls	r2, r3, #25
 8003e88:	4b64      	ldr	r3, [pc, #400]	; (800401c <HAL_ADC_Init+0x2d4>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	055b      	lsls	r3, r3, #21
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d108      	bne.n	8003eae <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	0549      	lsls	r1, r1, #21
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	495b      	ldr	r1, [pc, #364]	; (8004028 <HAL_ADC_Init+0x2e0>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68d9      	ldr	r1, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d101      	bne.n	8003ed4 <HAL_ADC_Init+0x18c>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADC_Init+0x18e>
 8003ed4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ed6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2020      	movs	r0, #32
 8003edc:	5c1b      	ldrb	r3, [r3, r0]
 8003ede:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003ee0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	202c      	movs	r0, #44	; 0x2c
 8003ee6:	5c1b      	ldrb	r3, [r3, r0]
 8003ee8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003eea:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003ef0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003ef8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003f00:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f0e:	23c2      	movs	r3, #194	; 0xc2
 8003f10:	33ff      	adds	r3, #255	; 0xff
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d00b      	beq.n	8003f2e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68d9      	ldr	r1, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2221      	movs	r2, #33	; 0x21
 8003f32:	5c9b      	ldrb	r3, [r3, r2]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11a      	bne.n	8003f6e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	5c9b      	ldrb	r3, [r3, r2]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	0249      	lsls	r1, r1, #9
 8003f50:	430a      	orrs	r2, r1
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e00b      	b.n	8003f6e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	2201      	movs	r2, #1
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d11f      	bne.n	8003fb6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	492a      	ldr	r1, [pc, #168]	; (800402c <HAL_ADC_Init+0x2e4>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6919      	ldr	r1, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f94:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003f9a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2101      	movs	r1, #1
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	611a      	str	r2, [r3, #16]
 8003fb4:	e00e      	b.n	8003fd4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2107      	movs	r1, #7
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6959      	ldr	r1, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	2203      	movs	r2, #3
 8004002:	4393      	bics	r3, r2
 8004004:	2201      	movs	r2, #1
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	0018      	movs	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	b002      	add	sp, #8
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	fffffefd 	.word	0xfffffefd
 800401c:	40012708 	.word	0x40012708
 8004020:	ffc3ffff 	.word	0xffc3ffff
 8004024:	fdffffff 	.word	0xfdffffff
 8004028:	fffe0219 	.word	0xfffe0219
 800402c:	fffffc03 	.word	0xfffffc03

08004030 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2250      	movs	r2, #80	; 0x50
 800403e:	5c9b      	ldrb	r3, [r3, r2]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x18>
 8004044:	2302      	movs	r3, #2
 8004046:	e06c      	b.n	8004122 <HAL_ADC_ConfigChannel+0xf2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2250      	movs	r2, #80	; 0x50
 800404c:	2101      	movs	r1, #1
 800404e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2204      	movs	r2, #4
 8004058:	4013      	ands	r3, r2
 800405a:	d00b      	beq.n	8004074 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	2220      	movs	r2, #32
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2250      	movs	r2, #80	; 0x50
 800406c:	2100      	movs	r1, #0
 800406e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e056      	b.n	8004122 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4a2c      	ldr	r2, [pc, #176]	; (800412c <HAL_ADC_ConfigChannel+0xfc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d028      	beq.n	80040d0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	035b      	lsls	r3, r3, #13
 800408a:	0b5a      	lsrs	r2, r3, #13
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	02db      	lsls	r3, r3, #11
 800409c:	4013      	ands	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <HAL_ADC_ConfigChannel+0x100>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_ADC_ConfigChannel+0x100>)
 80040a6:	2180      	movs	r1, #128	; 0x80
 80040a8:	0409      	lsls	r1, r1, #16
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80040ae:	200a      	movs	r0, #10
 80040b0:	f000 f844 	bl	800413c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	029b      	lsls	r3, r3, #10
 80040bc:	4013      	ands	r3, r2
 80040be:	d02b      	beq.n	8004118 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_ADC_ConfigChannel+0x100>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_ADC_ConfigChannel+0x100>)
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	03c9      	lsls	r1, r1, #15
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e023      	b.n	8004118 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	035b      	lsls	r3, r3, #13
 80040dc:	0b5b      	lsrs	r3, r3, #13
 80040de:	43d9      	mvns	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	400a      	ands	r2, r1
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	02db      	lsls	r3, r3, #11
 80040f0:	4013      	ands	r3, r2
 80040f2:	d005      	beq.n	8004100 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_ADC_ConfigChannel+0x100>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <HAL_ADC_ConfigChannel+0x100>)
 80040fa:	490e      	ldr	r1, [pc, #56]	; (8004134 <HAL_ADC_ConfigChannel+0x104>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	4013      	ands	r3, r2
 800410a:	d005      	beq.n	8004118 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_ADC_ConfigChannel+0x100>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_ADC_ConfigChannel+0x100>)
 8004112:	4909      	ldr	r1, [pc, #36]	; (8004138 <HAL_ADC_ConfigChannel+0x108>)
 8004114:	400a      	ands	r2, r1
 8004116:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2250      	movs	r2, #80	; 0x50
 800411c:	2100      	movs	r1, #0
 800411e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	00001001 	.word	0x00001001
 8004130:	40012708 	.word	0x40012708
 8004134:	ff7fffff 	.word	0xff7fffff
 8004138:	ffbfffff 	.word	0xffbfffff

0800413c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <ADC_DelayMicroSecond+0x34>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	490a      	ldr	r1, [pc, #40]	; (8004174 <ADC_DelayMicroSecond+0x38>)
 800414a:	0018      	movs	r0, r3
 800414c:	f7fb ffe4 	bl	8000118 <__udivsi3>
 8004150:	0003      	movs	r3, r0
 8004152:	001a      	movs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4353      	muls	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800415a:	e002      	b.n	8004162 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3b01      	subs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f9      	bne.n	800415c <ADC_DelayMicroSecond+0x20>
  } 
}
 8004168:	46c0      	nop			; (mov r8, r8)
 800416a:	46bd      	mov	sp, r7
 800416c:	b004      	add	sp, #16
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000004 	.word	0x20000004
 8004174:	000f4240 	.word	0x000f4240

08004178 <HAL_ADCEx_EnableVREFINT>:
  *         For more details on procedure and buffer current consumption, refer to device reference manual.
  * @note   This is functional only if the LOCK is not set.
  * @retval None
*/
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
  
  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8004188:	2180      	movs	r1, #128	; 0x80
 800418a:	0049      	lsls	r1, r1, #1
 800418c:	430a      	orrs	r2, r1
 800418e:	621a      	str	r2, [r3, #32]
  
  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004190:	f7ff fd84 	bl	8003c9c <HAL_GetTick>
 8004194:	0003      	movs	r3, r0
 8004196:	607b      	str	r3, [r7, #4]
  
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8004198:	e008      	b.n	80041ac <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 800419a:	f7ff fd7f 	bl	8003c9c <HAL_GetTick>
 800419e:	0002      	movs	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d901      	bls.n	80041ac <HAL_ADCEx_EnableVREFINT+0x34>
    { 
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e006      	b.n	80041ba <HAL_ADCEx_EnableVREFINT+0x42>
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_ADCEx_EnableVREFINT+0x4c>)
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	05db      	lsls	r3, r3, #23
 80041b4:	4013      	ands	r3, r2
 80041b6:	d0f0      	beq.n	800419a <HAL_ADCEx_EnableVREFINT+0x22>
    }
  }
  
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b002      	add	sp, #8
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	40010000 	.word	0x40010000

080041c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	0002      	movs	r2, r0
 80041d0:	1dfb      	adds	r3, r7, #7
 80041d2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041d4:	1dfb      	adds	r3, r7, #7
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	001a      	movs	r2, r3
 80041da:	231f      	movs	r3, #31
 80041dc:	401a      	ands	r2, r3
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <NVIC_EnableIRQ+0x28>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	4091      	lsls	r1, r2
 80041e4:	000a      	movs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	e000e100 	.word	0xe000e100

080041f4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	0002      	movs	r2, r0
 80041fc:	1dfb      	adds	r3, r7, #7
 80041fe:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004200:	1dfb      	adds	r3, r7, #7
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	001a      	movs	r2, r3
 8004206:	231f      	movs	r3, #31
 8004208:	4013      	ands	r3, r2
 800420a:	4905      	ldr	r1, [pc, #20]	; (8004220 <NVIC_DisableIRQ+0x2c>)
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	2280      	movs	r2, #128	; 0x80
 8004214:	508b      	str	r3, [r1, r2]
}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	46bd      	mov	sp, r7
 800421a:	b002      	add	sp, #8
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	e000e100 	.word	0xe000e100

08004224 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	0002      	movs	r2, r0
 800422c:	6039      	str	r1, [r7, #0]
 800422e:	1dfb      	adds	r3, r7, #7
 8004230:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004232:	1dfb      	adds	r3, r7, #7
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b7f      	cmp	r3, #127	; 0x7f
 8004238:	d932      	bls.n	80042a0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800423a:	4a2f      	ldr	r2, [pc, #188]	; (80042f8 <NVIC_SetPriority+0xd4>)
 800423c:	1dfb      	adds	r3, r7, #7
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	0019      	movs	r1, r3
 8004242:	230f      	movs	r3, #15
 8004244:	400b      	ands	r3, r1
 8004246:	3b08      	subs	r3, #8
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	3306      	adds	r3, #6
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	18d3      	adds	r3, r2, r3
 8004250:	3304      	adds	r3, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1dfa      	adds	r2, r7, #7
 8004256:	7812      	ldrb	r2, [r2, #0]
 8004258:	0011      	movs	r1, r2
 800425a:	2203      	movs	r2, #3
 800425c:	400a      	ands	r2, r1
 800425e:	00d2      	lsls	r2, r2, #3
 8004260:	21ff      	movs	r1, #255	; 0xff
 8004262:	4091      	lsls	r1, r2
 8004264:	000a      	movs	r2, r1
 8004266:	43d2      	mvns	r2, r2
 8004268:	401a      	ands	r2, r3
 800426a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	019b      	lsls	r3, r3, #6
 8004270:	22ff      	movs	r2, #255	; 0xff
 8004272:	401a      	ands	r2, r3
 8004274:	1dfb      	adds	r3, r7, #7
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	0018      	movs	r0, r3
 800427a:	2303      	movs	r3, #3
 800427c:	4003      	ands	r3, r0
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004282:	481d      	ldr	r0, [pc, #116]	; (80042f8 <NVIC_SetPriority+0xd4>)
 8004284:	1dfb      	adds	r3, r7, #7
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	001c      	movs	r4, r3
 800428a:	230f      	movs	r3, #15
 800428c:	4023      	ands	r3, r4
 800428e:	3b08      	subs	r3, #8
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	430a      	orrs	r2, r1
 8004294:	3306      	adds	r3, #6
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	18c3      	adds	r3, r0, r3
 800429a:	3304      	adds	r3, #4
 800429c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800429e:	e027      	b.n	80042f0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042a0:	4a16      	ldr	r2, [pc, #88]	; (80042fc <NVIC_SetPriority+0xd8>)
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	33c0      	adds	r3, #192	; 0xc0
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	589b      	ldr	r3, [r3, r2]
 80042b0:	1dfa      	adds	r2, r7, #7
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	0011      	movs	r1, r2
 80042b6:	2203      	movs	r2, #3
 80042b8:	400a      	ands	r2, r1
 80042ba:	00d2      	lsls	r2, r2, #3
 80042bc:	21ff      	movs	r1, #255	; 0xff
 80042be:	4091      	lsls	r1, r2
 80042c0:	000a      	movs	r2, r1
 80042c2:	43d2      	mvns	r2, r2
 80042c4:	401a      	ands	r2, r3
 80042c6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	019b      	lsls	r3, r3, #6
 80042cc:	22ff      	movs	r2, #255	; 0xff
 80042ce:	401a      	ands	r2, r3
 80042d0:	1dfb      	adds	r3, r7, #7
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	0018      	movs	r0, r3
 80042d6:	2303      	movs	r3, #3
 80042d8:	4003      	ands	r3, r0
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042de:	4807      	ldr	r0, [pc, #28]	; (80042fc <NVIC_SetPriority+0xd8>)
 80042e0:	1dfb      	adds	r3, r7, #7
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b25b      	sxtb	r3, r3
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	430a      	orrs	r2, r1
 80042ea:	33c0      	adds	r3, #192	; 0xc0
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	501a      	str	r2, [r3, r0]
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b003      	add	sp, #12
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	e000ed00 	.word	0xe000ed00
 80042fc:	e000e100 	.word	0xe000e100

08004300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <SysTick_Config+0x40>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004312:	2301      	movs	r3, #1
 8004314:	e010      	b.n	8004338 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <SysTick_Config+0x44>)
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	3a01      	subs	r2, #1
 800431c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431e:	2301      	movs	r3, #1
 8004320:	425b      	negs	r3, r3
 8004322:	2103      	movs	r1, #3
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff ff7d 	bl	8004224 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <SysTick_Config+0x44>)
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <SysTick_Config+0x44>)
 8004332:	2207      	movs	r2, #7
 8004334:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004336:	2300      	movs	r3, #0
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}
 8004340:	00ffffff 	.word	0x00ffffff
 8004344:	e000e010 	.word	0xe000e010

08004348 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	210f      	movs	r1, #15
 8004354:	187b      	adds	r3, r7, r1
 8004356:	1c02      	adds	r2, r0, #0
 8004358:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	187b      	adds	r3, r7, r1
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b25b      	sxtb	r3, r3
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff ff5d 	bl	8004224 <NVIC_SetPriority>
}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	46bd      	mov	sp, r7
 800436e:	b004      	add	sp, #16
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	0002      	movs	r2, r0
 800437a:	1dfb      	adds	r3, r7, #7
 800437c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800437e:	1dfb      	adds	r3, r7, #7
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b25b      	sxtb	r3, r3
 8004384:	0018      	movs	r0, r3
 8004386:	f7ff ff1f 	bl	80041c8 <NVIC_EnableIRQ>
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	0002      	movs	r2, r0
 800439a:	1dfb      	adds	r3, r7, #7
 800439c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800439e:	1dfb      	adds	r3, r7, #7
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	b25b      	sxtb	r3, r3
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7ff ff25 	bl	80041f4 <NVIC_DisableIRQ>
}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b002      	add	sp, #8
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f7ff ff9f 	bl	8004300 <SysTick_Config>
 80043c2:	0003      	movs	r3, r0
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b002      	add	sp, #8
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	230f      	movs	r3, #15
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2225      	movs	r2, #37	; 0x25
 80043e0:	5c9b      	ldrb	r3, [r3, r2]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d007      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2204      	movs	r2, #4
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043ee:	230f      	movs	r3, #15
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e02a      	b.n	800444e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	210e      	movs	r1, #14
 8004404:	438a      	bics	r2, r1
 8004406:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2101      	movs	r1, #1
 8004414:	438a      	bics	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	221c      	movs	r2, #28
 800441e:	401a      	ands	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2101      	movs	r1, #1
 8004426:	4091      	lsls	r1, r2
 8004428:	000a      	movs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2225      	movs	r2, #37	; 0x25
 8004430:	2101      	movs	r1, #1
 8004432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	2100      	movs	r1, #0
 800443a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	0010      	movs	r0, r2
 800444c:	4798      	blx	r3
    }
  }
  return status;
 800444e:	230f      	movs	r3, #15
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	781b      	ldrb	r3, [r3, #0]
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	b004      	add	sp, #16
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004472:	e155      	b.n	8004720 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4091      	lsls	r1, r2
 800447e:	000a      	movs	r2, r1
 8004480:	4013      	ands	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d100      	bne.n	800448c <HAL_GPIO_Init+0x30>
 800448a:	e146      	b.n	800471a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d00b      	beq.n	80044ac <HAL_GPIO_Init+0x50>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d007      	beq.n	80044ac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044a0:	2b11      	cmp	r3, #17
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b12      	cmp	r3, #18
 80044aa:	d130      	bne.n	800450e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	409a      	lsls	r2, r3
 80044ba:	0013      	movs	r3, r2
 80044bc:	43da      	mvns	r2, r3
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	0013      	movs	r3, r2
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044e2:	2201      	movs	r2, #1
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	409a      	lsls	r2, r3
 80044e8:	0013      	movs	r3, r2
 80044ea:	43da      	mvns	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	2201      	movs	r2, #1
 80044fa:	401a      	ands	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	409a      	lsls	r2, r3
 8004500:	0013      	movs	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	2203      	movs	r2, #3
 800451a:	409a      	lsls	r2, r3
 800451c:	0013      	movs	r3, r2
 800451e:	43da      	mvns	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	0013      	movs	r3, r2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d003      	beq.n	800454e <HAL_GPIO_Init+0xf2>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b12      	cmp	r3, #18
 800454c:	d123      	bne.n	8004596 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	08da      	lsrs	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3208      	adds	r2, #8
 8004556:	0092      	lsls	r2, r2, #2
 8004558:	58d3      	ldr	r3, [r2, r3]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2207      	movs	r2, #7
 8004560:	4013      	ands	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	220f      	movs	r2, #15
 8004566:	409a      	lsls	r2, r3
 8004568:	0013      	movs	r3, r2
 800456a:	43da      	mvns	r2, r3
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2107      	movs	r1, #7
 800457a:	400b      	ands	r3, r1
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	409a      	lsls	r2, r3
 8004580:	0013      	movs	r3, r2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	08da      	lsrs	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3208      	adds	r2, #8
 8004590:	0092      	lsls	r2, r2, #2
 8004592:	6939      	ldr	r1, [r7, #16]
 8004594:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	2203      	movs	r2, #3
 80045a2:	409a      	lsls	r2, r3
 80045a4:	0013      	movs	r3, r2
 80045a6:	43da      	mvns	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2203      	movs	r2, #3
 80045b4:	401a      	ands	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	0013      	movs	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	055b      	lsls	r3, r3, #21
 80045d2:	4013      	ands	r3, r2
 80045d4:	d100      	bne.n	80045d8 <HAL_GPIO_Init+0x17c>
 80045d6:	e0a0      	b.n	800471a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d8:	4b57      	ldr	r3, [pc, #348]	; (8004738 <HAL_GPIO_Init+0x2dc>)
 80045da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045dc:	4b56      	ldr	r3, [pc, #344]	; (8004738 <HAL_GPIO_Init+0x2dc>)
 80045de:	2101      	movs	r1, #1
 80045e0:	430a      	orrs	r2, r1
 80045e2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80045e4:	4a55      	ldr	r2, [pc, #340]	; (800473c <HAL_GPIO_Init+0x2e0>)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	3302      	adds	r3, #2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	589b      	ldr	r3, [r3, r2]
 80045f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2203      	movs	r2, #3
 80045f6:	4013      	ands	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	220f      	movs	r2, #15
 80045fc:	409a      	lsls	r2, r3
 80045fe:	0013      	movs	r3, r2
 8004600:	43da      	mvns	r2, r3
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	23a0      	movs	r3, #160	; 0xa0
 800460c:	05db      	lsls	r3, r3, #23
 800460e:	429a      	cmp	r2, r3
 8004610:	d01f      	beq.n	8004652 <HAL_GPIO_Init+0x1f6>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <HAL_GPIO_Init+0x2e4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d019      	beq.n	800464e <HAL_GPIO_Init+0x1f2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a49      	ldr	r2, [pc, #292]	; (8004744 <HAL_GPIO_Init+0x2e8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <HAL_GPIO_Init+0x1ee>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a48      	ldr	r2, [pc, #288]	; (8004748 <HAL_GPIO_Init+0x2ec>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00d      	beq.n	8004646 <HAL_GPIO_Init+0x1ea>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a47      	ldr	r2, [pc, #284]	; (800474c <HAL_GPIO_Init+0x2f0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <HAL_GPIO_Init+0x1e6>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a46      	ldr	r2, [pc, #280]	; (8004750 <HAL_GPIO_Init+0x2f4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d101      	bne.n	800463e <HAL_GPIO_Init+0x1e2>
 800463a:	2305      	movs	r3, #5
 800463c:	e00a      	b.n	8004654 <HAL_GPIO_Init+0x1f8>
 800463e:	2306      	movs	r3, #6
 8004640:	e008      	b.n	8004654 <HAL_GPIO_Init+0x1f8>
 8004642:	2304      	movs	r3, #4
 8004644:	e006      	b.n	8004654 <HAL_GPIO_Init+0x1f8>
 8004646:	2303      	movs	r3, #3
 8004648:	e004      	b.n	8004654 <HAL_GPIO_Init+0x1f8>
 800464a:	2302      	movs	r3, #2
 800464c:	e002      	b.n	8004654 <HAL_GPIO_Init+0x1f8>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <HAL_GPIO_Init+0x1f8>
 8004652:	2300      	movs	r3, #0
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	2103      	movs	r1, #3
 8004658:	400a      	ands	r2, r1
 800465a:	0092      	lsls	r2, r2, #2
 800465c:	4093      	lsls	r3, r2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004664:	4935      	ldr	r1, [pc, #212]	; (800473c <HAL_GPIO_Init+0x2e0>)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	089b      	lsrs	r3, r3, #2
 800466a:	3302      	adds	r3, #2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004672:	4b38      	ldr	r3, [pc, #224]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	43da      	mvns	r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	025b      	lsls	r3, r3, #9
 800468a:	4013      	ands	r3, r2
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004696:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	43da      	mvns	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4013      	ands	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	4013      	ands	r3, r2
 80046b6:	d003      	beq.n	80046c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	43da      	mvns	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4013      	ands	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	035b      	lsls	r3, r3, #13
 80046de:	4013      	ands	r3, r2
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046ea:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	43da      	mvns	r2, r3
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	039b      	lsls	r3, r3, #14
 8004708:	4013      	ands	r3, r2
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <HAL_GPIO_Init+0x2f8>)
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3301      	adds	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	40da      	lsrs	r2, r3
 8004728:	1e13      	subs	r3, r2, #0
 800472a:	d000      	beq.n	800472e <HAL_GPIO_Init+0x2d2>
 800472c:	e6a2      	b.n	8004474 <HAL_GPIO_Init+0x18>
  }
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b006      	add	sp, #24
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	40021000 	.word	0x40021000
 800473c:	40010000 	.word	0x40010000
 8004740:	50000400 	.word	0x50000400
 8004744:	50000800 	.word	0x50000800
 8004748:	50000c00 	.word	0x50000c00
 800474c:	50001000 	.word	0x50001000
 8004750:	50001c00 	.word	0x50001c00
 8004754:	40010400 	.word	0x40010400

08004758 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	0008      	movs	r0, r1
 8004762:	0011      	movs	r1, r2
 8004764:	1cbb      	adds	r3, r7, #2
 8004766:	1c02      	adds	r2, r0, #0
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	1c7b      	adds	r3, r7, #1
 800476c:	1c0a      	adds	r2, r1, #0
 800476e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004770:	1c7b      	adds	r3, r7, #1
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004778:	1cbb      	adds	r3, r7, #2
 800477a:	881a      	ldrh	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004780:	e003      	b.n	800478a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004782:	1cbb      	adds	r3, r7, #2
 8004784:	881a      	ldrh	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	629a      	str	r2, [r3, #40]	; 0x28
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b002      	add	sp, #8
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	0002      	movs	r2, r0
 800479c:	1dbb      	adds	r3, r7, #6
 800479e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	1dba      	adds	r2, r7, #6
 80047a6:	8812      	ldrh	r2, [r2, #0]
 80047a8:	4013      	ands	r3, r2
 80047aa:	d008      	beq.n	80047be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80047ae:	1dba      	adds	r2, r7, #6
 80047b0:	8812      	ldrh	r2, [r2, #0]
 80047b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f020 fb81 	bl	8024ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b002      	add	sp, #8
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	40010400 	.word	0x40010400

080047cc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d0:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	0049      	lsls	r1, r1, #1
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40007000 	.word	0x40007000

080047e8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	000a      	movs	r2, r1
 80047f2:	1cfb      	adds	r3, r7, #3
 80047f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_PWR_EnterSTOPMode+0x60>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2203      	movs	r2, #3
 8004804:	4393      	bics	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004810:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <HAL_PWR_EnterSTOPMode+0x60>)
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004816:	4b0d      	ldr	r3, [pc, #52]	; (800484c <HAL_PWR_EnterSTOPMode+0x64>)
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_PWR_EnterSTOPMode+0x64>)
 800481c:	2104      	movs	r1, #4
 800481e:	430a      	orrs	r2, r1
 8004820:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004822:	1cfb      	adds	r3, r7, #3
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800482a:	bf30      	wfi
 800482c:	e002      	b.n	8004834 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800482e:	bf40      	sev
  __ASM volatile ("wfe");
 8004830:	bf20      	wfe
 8004832:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_PWR_EnterSTOPMode+0x64>)
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_PWR_EnterSTOPMode+0x64>)
 800483a:	2104      	movs	r1, #4
 800483c:	438a      	bics	r2, r1
 800483e:	611a      	str	r2, [r3, #16]

}
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	46bd      	mov	sp, r7
 8004844:	b004      	add	sp, #16
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40007000 	.word	0x40007000
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800485a:	2180      	movs	r1, #128	; 0x80
 800485c:	00c9      	lsls	r1, r1, #3
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40007000 	.word	0x40007000

0800486c <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	0089      	lsls	r1, r1, #2
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40007000 	.word	0x40007000

08004888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f000 fbbc 	bl	8005014 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489c:	4bc8      	ldr	r3, [pc, #800]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	220c      	movs	r2, #12
 80048a2:	4013      	ands	r3, r2
 80048a4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a6:	4bc6      	ldr	r3, [pc, #792]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	025b      	lsls	r3, r3, #9
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2201      	movs	r2, #1
 80048b8:	4013      	ands	r3, r2
 80048ba:	d100      	bne.n	80048be <HAL_RCC_OscConfig+0x36>
 80048bc:	e07e      	b.n	80049bc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d007      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d112      	bne.n	80048f0 <HAL_RCC_OscConfig+0x68>
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	025b      	lsls	r3, r3, #9
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d4:	4bba      	ldr	r3, [pc, #744]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	029b      	lsls	r3, r3, #10
 80048dc:	4013      	ands	r3, r2
 80048de:	d100      	bne.n	80048e2 <HAL_RCC_OscConfig+0x5a>
 80048e0:	e06b      	b.n	80049ba <HAL_RCC_OscConfig+0x132>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d167      	bne.n	80049ba <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f000 fb92 	bl	8005014 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	2380      	movs	r3, #128	; 0x80
 80048f6:	025b      	lsls	r3, r3, #9
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d107      	bne.n	800490c <HAL_RCC_OscConfig+0x84>
 80048fc:	4bb0      	ldr	r3, [pc, #704]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4baf      	ldr	r3, [pc, #700]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004902:	2180      	movs	r1, #128	; 0x80
 8004904:	0249      	lsls	r1, r1, #9
 8004906:	430a      	orrs	r2, r1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e027      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	23a0      	movs	r3, #160	; 0xa0
 8004912:	02db      	lsls	r3, r3, #11
 8004914:	429a      	cmp	r2, r3
 8004916:	d10e      	bne.n	8004936 <HAL_RCC_OscConfig+0xae>
 8004918:	4ba9      	ldr	r3, [pc, #676]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4ba8      	ldr	r3, [pc, #672]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	02c9      	lsls	r1, r1, #11
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	4ba6      	ldr	r3, [pc, #664]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4ba5      	ldr	r3, [pc, #660]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 800492c:	2180      	movs	r1, #128	; 0x80
 800492e:	0249      	lsls	r1, r1, #9
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e012      	b.n	800495c <HAL_RCC_OscConfig+0xd4>
 8004936:	4ba2      	ldr	r3, [pc, #648]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4ba1      	ldr	r3, [pc, #644]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 800493c:	49a1      	ldr	r1, [pc, #644]	; (8004bc4 <HAL_RCC_OscConfig+0x33c>)
 800493e:	400a      	ands	r2, r1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	4b9f      	ldr	r3, [pc, #636]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	025b      	lsls	r3, r3, #9
 800494a:	4013      	ands	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4b9b      	ldr	r3, [pc, #620]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b9a      	ldr	r3, [pc, #616]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004956:	499c      	ldr	r1, [pc, #624]	; (8004bc8 <HAL_RCC_OscConfig+0x340>)
 8004958:	400a      	ands	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d015      	beq.n	8004990 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7ff f99a 	bl	8003c9c <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800496c:	e009      	b.n	8004982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800496e:	f7ff f995 	bl	8003c9c <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b64      	cmp	r3, #100	; 0x64
 800497a:	d902      	bls.n	8004982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	f000 fb49 	bl	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004982:	4b8f      	ldr	r3, [pc, #572]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	029b      	lsls	r3, r3, #10
 800498a:	4013      	ands	r3, r2
 800498c:	d0ef      	beq.n	800496e <HAL_RCC_OscConfig+0xe6>
 800498e:	e015      	b.n	80049bc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7ff f984 	bl	8003c9c <HAL_GetTick>
 8004994:	0003      	movs	r3, r0
 8004996:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800499a:	f7ff f97f 	bl	8003c9c <HAL_GetTick>
 800499e:	0002      	movs	r2, r0
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b64      	cmp	r3, #100	; 0x64
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e333      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ac:	4b84      	ldr	r3, [pc, #528]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	4013      	ands	r3, r2
 80049b6:	d1f0      	bne.n	800499a <HAL_RCC_OscConfig+0x112>
 80049b8:	e000      	b.n	80049bc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2202      	movs	r2, #2
 80049c2:	4013      	ands	r3, r2
 80049c4:	d100      	bne.n	80049c8 <HAL_RCC_OscConfig+0x140>
 80049c6:	e098      	b.n	8004afa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2220      	movs	r2, #32
 80049d2:	4013      	ands	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80049d6:	4b7a      	ldr	r3, [pc, #488]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b79      	ldr	r3, [pc, #484]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 80049dc:	2120      	movs	r1, #32
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	2220      	movs	r2, #32
 80049e6:	4393      	bics	r3, r2
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	d13d      	bne.n	8004a72 <HAL_RCC_OscConfig+0x1ea>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d13a      	bne.n	8004a72 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80049fc:	4b70      	ldr	r3, [pc, #448]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2204      	movs	r2, #4
 8004a02:	4013      	ands	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_RCC_OscConfig+0x188>
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e301      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a10:	4b6b      	ldr	r3, [pc, #428]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a6d      	ldr	r2, [pc, #436]	; (8004bcc <HAL_RCC_OscConfig+0x344>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	4b67      	ldr	r3, [pc, #412]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a26:	4b66      	ldr	r3, [pc, #408]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2209      	movs	r2, #9
 8004a2c:	4393      	bics	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	4b63      	ldr	r3, [pc, #396]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a38:	f000 fc20 	bl	800527c <HAL_RCC_GetSysClockFreq>
 8004a3c:	0001      	movs	r1, r0
 8004a3e:	4b60      	ldr	r3, [pc, #384]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	220f      	movs	r2, #15
 8004a46:	4013      	ands	r3, r2
 8004a48:	4a61      	ldr	r2, [pc, #388]	; (8004bd0 <HAL_RCC_OscConfig+0x348>)
 8004a4a:	5cd3      	ldrb	r3, [r2, r3]
 8004a4c:	000a      	movs	r2, r1
 8004a4e:	40da      	lsrs	r2, r3
 8004a50:	4b60      	ldr	r3, [pc, #384]	; (8004bd4 <HAL_RCC_OscConfig+0x34c>)
 8004a52:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004a54:	2513      	movs	r5, #19
 8004a56:	197c      	adds	r4, r7, r5
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7ff f8eb 	bl	8003c34 <HAL_InitTick>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004a62:	197b      	adds	r3, r7, r5
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d047      	beq.n	8004afa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004a6a:	2313      	movs	r3, #19
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	e2d0      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d027      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a78:	4b51      	ldr	r3, [pc, #324]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2209      	movs	r2, #9
 8004a7e:	4393      	bics	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	4b4f      	ldr	r3, [pc, #316]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7ff f907 	bl	8003c9c <HAL_GetTick>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a94:	f7ff f902 	bl	8003c9c <HAL_GetTick>
 8004a98:	0002      	movs	r2, r0
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e2b6      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aa6:	4b46      	ldr	r3, [pc, #280]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2204      	movs	r2, #4
 8004aac:	4013      	ands	r3, r2
 8004aae:	d0f1      	beq.n	8004a94 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a45      	ldr	r2, [pc, #276]	; (8004bcc <HAL_RCC_OscConfig+0x344>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	e018      	b.n	8004afa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac8:	4b3d      	ldr	r3, [pc, #244]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004ace:	2101      	movs	r1, #1
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7ff f8e2 	bl	8003c9c <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ade:	f7ff f8dd 	bl	8003c9c <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e291      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004af0:	4b33      	ldr	r3, [pc, #204]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2204      	movs	r2, #4
 8004af6:	4013      	ands	r3, r2
 8004af8:	d1f1      	bne.n	8004ade <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2210      	movs	r2, #16
 8004b00:	4013      	ands	r3, r2
 8004b02:	d100      	bne.n	8004b06 <HAL_RCC_OscConfig+0x27e>
 8004b04:	e09f      	b.n	8004c46 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d13f      	bne.n	8004b8c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4013      	ands	r3, r2
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_OscConfig+0x29c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e277      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b24:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a2b      	ldr	r2, [pc, #172]	; (8004bd8 <HAL_RCC_OscConfig+0x350>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b32:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b38:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	0a19      	lsrs	r1, r3, #8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	061a      	lsls	r2, r3, #24
 8004b46:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	0b5b      	lsrs	r3, r3, #13
 8004b52:	3301      	adds	r3, #1
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	0212      	lsls	r2, r2, #8
 8004b58:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004b5a:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	210f      	movs	r1, #15
 8004b62:	400b      	ands	r3, r1
 8004b64:	491a      	ldr	r1, [pc, #104]	; (8004bd0 <HAL_RCC_OscConfig+0x348>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <HAL_RCC_OscConfig+0x34c>)
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004b6e:	2513      	movs	r5, #19
 8004b70:	197c      	adds	r4, r7, r5
 8004b72:	2000      	movs	r0, #0
 8004b74:	f7ff f85e 	bl	8003c34 <HAL_InitTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004b7c:	197b      	adds	r3, r7, r5
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d060      	beq.n	8004c46 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004b84:	2313      	movs	r3, #19
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	e243      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d03e      	beq.n	8004c12 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <HAL_RCC_OscConfig+0x338>)
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	0049      	lsls	r1, r1, #1
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7ff f87b 	bl	8003c9c <HAL_GetTick>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004baa:	e017      	b.n	8004bdc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bac:	f7ff f876 	bl	8003c9c <HAL_GetTick>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d910      	bls.n	8004bdc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e22a      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	fffeffff 	.word	0xfffeffff
 8004bc8:	fffbffff 	.word	0xfffbffff
 8004bcc:	ffffe0ff 	.word	0xffffe0ff
 8004bd0:	08027784 	.word	0x08027784
 8004bd4:	20000004 	.word	0x20000004
 8004bd8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004bdc:	4bc6      	ldr	r3, [pc, #792]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4013      	ands	r3, r2
 8004be6:	d0e1      	beq.n	8004bac <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be8:	4bc3      	ldr	r3, [pc, #780]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4ac3      	ldr	r2, [pc, #780]	; (8004efc <HAL_RCC_OscConfig+0x674>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf6:	4bc0      	ldr	r3, [pc, #768]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bfc:	4bbe      	ldr	r3, [pc, #760]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	0a19      	lsrs	r1, r3, #8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	061a      	lsls	r2, r3, #24
 8004c0a:	4bbb      	ldr	r3, [pc, #748]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	e019      	b.n	8004c46 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c12:	4bb9      	ldr	r3, [pc, #740]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4bb8      	ldr	r3, [pc, #736]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c18:	49b9      	ldr	r1, [pc, #740]	; (8004f00 <HAL_RCC_OscConfig+0x678>)
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1e:	f7ff f83d 	bl	8003c9c <HAL_GetTick>
 8004c22:	0003      	movs	r3, r0
 8004c24:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c28:	f7ff f838 	bl	8003c9c <HAL_GetTick>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e1ec      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c3a:	4baf      	ldr	r3, [pc, #700]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4013      	ands	r3, r2
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d036      	beq.n	8004cbe <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d019      	beq.n	8004c8c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c58:	4ba7      	ldr	r3, [pc, #668]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c5c:	4ba6      	ldr	r3, [pc, #664]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c5e:	2101      	movs	r1, #1
 8004c60:	430a      	orrs	r2, r1
 8004c62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c64:	f7ff f81a 	bl	8003c9c <HAL_GetTick>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c6e:	f7ff f815 	bl	8003c9c <HAL_GetTick>
 8004c72:	0002      	movs	r2, r0
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e1c9      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c80:	4b9d      	ldr	r3, [pc, #628]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c84:	2202      	movs	r2, #2
 8004c86:	4013      	ands	r3, r2
 8004c88:	d0f1      	beq.n	8004c6e <HAL_RCC_OscConfig+0x3e6>
 8004c8a:	e018      	b.n	8004cbe <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c8c:	4b9a      	ldr	r3, [pc, #616]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c90:	4b99      	ldr	r3, [pc, #612]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004c92:	2101      	movs	r1, #1
 8004c94:	438a      	bics	r2, r1
 8004c96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7ff f800 	bl	8003c9c <HAL_GetTick>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ca2:	f7fe fffb 	bl	8003c9c <HAL_GetTick>
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e1af      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cb4:	4b90      	ldr	r3, [pc, #576]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb8:	2202      	movs	r2, #2
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d1f1      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d100      	bne.n	8004cca <HAL_RCC_OscConfig+0x442>
 8004cc8:	e0af      	b.n	8004e2a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cca:	2323      	movs	r3, #35	; 0x23
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cd2:	4b89      	ldr	r3, [pc, #548]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	055b      	lsls	r3, r3, #21
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d10a      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	4b86      	ldr	r3, [pc, #536]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce2:	4b85      	ldr	r3, [pc, #532]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	0549      	lsls	r1, r1, #21
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004cec:	2323      	movs	r3, #35	; 0x23
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf4:	4b83      	ldr	r3, [pc, #524]	; (8004f04 <HAL_RCC_OscConfig+0x67c>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d11a      	bne.n	8004d36 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d00:	4b80      	ldr	r3, [pc, #512]	; (8004f04 <HAL_RCC_OscConfig+0x67c>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b7f      	ldr	r3, [pc, #508]	; (8004f04 <HAL_RCC_OscConfig+0x67c>)
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	0049      	lsls	r1, r1, #1
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0e:	f7fe ffc5 	bl	8003c9c <HAL_GetTick>
 8004d12:	0003      	movs	r3, r0
 8004d14:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fe ffc0 	bl	8003c9c <HAL_GetTick>
 8004d1c:	0002      	movs	r2, r0
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e174      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2a:	4b76      	ldr	r3, [pc, #472]	; (8004f04 <HAL_RCC_OscConfig+0x67c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	2380      	movs	r3, #128	; 0x80
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4013      	ands	r3, r2
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_OscConfig+0x4ca>
 8004d42:	4b6d      	ldr	r3, [pc, #436]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d46:	4b6c      	ldr	r3, [pc, #432]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d48:	2180      	movs	r1, #128	; 0x80
 8004d4a:	0049      	lsls	r1, r1, #1
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	651a      	str	r2, [r3, #80]	; 0x50
 8004d50:	e031      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4ec>
 8004d5a:	4b67      	ldr	r3, [pc, #412]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d5e:	4b66      	ldr	r3, [pc, #408]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d60:	4967      	ldr	r1, [pc, #412]	; (8004f00 <HAL_RCC_OscConfig+0x678>)
 8004d62:	400a      	ands	r2, r1
 8004d64:	651a      	str	r2, [r3, #80]	; 0x50
 8004d66:	4b64      	ldr	r3, [pc, #400]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d6c:	4966      	ldr	r1, [pc, #408]	; (8004f08 <HAL_RCC_OscConfig+0x680>)
 8004d6e:	400a      	ands	r2, r1
 8004d70:	651a      	str	r2, [r3, #80]	; 0x50
 8004d72:	e020      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	23a0      	movs	r3, #160	; 0xa0
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d10e      	bne.n	8004d9e <HAL_RCC_OscConfig+0x516>
 8004d80:	4b5d      	ldr	r3, [pc, #372]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d84:	4b5c      	ldr	r3, [pc, #368]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d86:	2180      	movs	r1, #128	; 0x80
 8004d88:	00c9      	lsls	r1, r1, #3
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8004d8e:	4b5a      	ldr	r3, [pc, #360]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d92:	4b59      	ldr	r3, [pc, #356]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	0049      	lsls	r1, r1, #1
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d9c:	e00b      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
 8004d9e:	4b56      	ldr	r3, [pc, #344]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004da2:	4b55      	ldr	r3, [pc, #340]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004da4:	4956      	ldr	r1, [pc, #344]	; (8004f00 <HAL_RCC_OscConfig+0x678>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	651a      	str	r2, [r3, #80]	; 0x50
 8004daa:	4b53      	ldr	r3, [pc, #332]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dae:	4b52      	ldr	r3, [pc, #328]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004db0:	4955      	ldr	r1, [pc, #340]	; (8004f08 <HAL_RCC_OscConfig+0x680>)
 8004db2:	400a      	ands	r2, r1
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d015      	beq.n	8004dea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dbe:	f7fe ff6d 	bl	8003c9c <HAL_GetTick>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dc6:	e009      	b.n	8004ddc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc8:	f7fe ff68 	bl	8003c9c <HAL_GetTick>
 8004dcc:	0002      	movs	r2, r0
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	4a4e      	ldr	r2, [pc, #312]	; (8004f0c <HAL_RCC_OscConfig+0x684>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e11b      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ddc:	4b46      	ldr	r3, [pc, #280]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4013      	ands	r3, r2
 8004de6:	d0ef      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x540>
 8004de8:	e014      	b.n	8004e14 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7fe ff57 	bl	8003c9c <HAL_GetTick>
 8004dee:	0003      	movs	r3, r0
 8004df0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004df2:	e009      	b.n	8004e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df4:	f7fe ff52 	bl	8003c9c <HAL_GetTick>
 8004df8:	0002      	movs	r2, r0
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	4a43      	ldr	r2, [pc, #268]	; (8004f0c <HAL_RCC_OscConfig+0x684>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e105      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e08:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4013      	ands	r3, r2
 8004e12:	d1ef      	bne.n	8004df4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e14:	2323      	movs	r3, #35	; 0x23
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1e:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e22:	4b35      	ldr	r3, [pc, #212]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e24:	493a      	ldr	r1, [pc, #232]	; (8004f10 <HAL_RCC_OscConfig+0x688>)
 8004e26:	400a      	ands	r2, r1
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	4013      	ands	r3, r2
 8004e32:	d049      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d026      	beq.n	8004e8a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e42:	2101      	movs	r1, #1
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	635a      	str	r2, [r3, #52]	; 0x34
 8004e54:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <HAL_RCC_OscConfig+0x68c>)
 8004e56:	6a1a      	ldr	r2, [r3, #32]
 8004e58:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <HAL_RCC_OscConfig+0x68c>)
 8004e5a:	2180      	movs	r1, #128	; 0x80
 8004e5c:	0189      	lsls	r1, r1, #6
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e62:	f7fe ff1b 	bl	8003c9c <HAL_GetTick>
 8004e66:	0003      	movs	r3, r0
 8004e68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e6c:	f7fe ff16 	bl	8003c9c <HAL_GetTick>
 8004e70:	0002      	movs	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e0ca      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2202      	movs	r2, #2
 8004e84:	4013      	ands	r3, r2
 8004e86:	d0f1      	beq.n	8004e6c <HAL_RCC_OscConfig+0x5e4>
 8004e88:	e01e      	b.n	8004ec8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004e90:	2101      	movs	r1, #1
 8004e92:	438a      	bics	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <HAL_RCC_OscConfig+0x68c>)
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <HAL_RCC_OscConfig+0x68c>)
 8004e9c:	491e      	ldr	r1, [pc, #120]	; (8004f18 <HAL_RCC_OscConfig+0x690>)
 8004e9e:	400a      	ands	r2, r1
 8004ea0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7fe fefb 	bl	8003c9c <HAL_GetTick>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eac:	f7fe fef6 	bl	8003c9c <HAL_GetTick>
 8004eb0:	0002      	movs	r2, r0
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e0aa      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d1f1      	bne.n	8004eac <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d100      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x64a>
 8004ed0:	e09f      	b.n	8005012 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b0c      	cmp	r3, #12
 8004ed6:	d100      	bne.n	8004eda <HAL_RCC_OscConfig+0x652>
 8004ed8:	e078      	b.n	8004fcc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d159      	bne.n	8004f96 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <HAL_RCC_OscConfig+0x670>)
 8004ee8:	490c      	ldr	r1, [pc, #48]	; (8004f1c <HAL_RCC_OscConfig+0x694>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eee:	f7fe fed5 	bl	8003c9c <HAL_GetTick>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ef6:	e01c      	b.n	8004f32 <HAL_RCC_OscConfig+0x6aa>
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	ffff1fff 	.word	0xffff1fff
 8004f00:	fffffeff 	.word	0xfffffeff
 8004f04:	40007000 	.word	0x40007000
 8004f08:	fffffbff 	.word	0xfffffbff
 8004f0c:	00001388 	.word	0x00001388
 8004f10:	efffffff 	.word	0xefffffff
 8004f14:	40010000 	.word	0x40010000
 8004f18:	ffffdfff 	.word	0xffffdfff
 8004f1c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fe febc 	bl	8003c9c <HAL_GetTick>
 8004f24:	0002      	movs	r2, r0
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e070      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f32:	4b3a      	ldr	r3, [pc, #232]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	049b      	lsls	r3, r3, #18
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4a37      	ldr	r2, [pc, #220]	; (8005020 <HAL_RCC_OscConfig+0x798>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	0019      	movs	r1, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	431a      	orrs	r2, r3
 8004f58:	4b30      	ldr	r3, [pc, #192]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f5e:	4b2f      	ldr	r3, [pc, #188]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b2e      	ldr	r3, [pc, #184]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	0449      	lsls	r1, r1, #17
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fe fe96 	bl	8003c9c <HAL_GetTick>
 8004f70:	0003      	movs	r3, r0
 8004f72:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f76:	f7fe fe91 	bl	8003c9c <HAL_GetTick>
 8004f7a:	0002      	movs	r2, r0
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e045      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f88:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	049b      	lsls	r3, r3, #18
 8004f90:	4013      	ands	r3, r2
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x6ee>
 8004f94:	e03d      	b.n	8005012 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004f9c:	4921      	ldr	r1, [pc, #132]	; (8005024 <HAL_RCC_OscConfig+0x79c>)
 8004f9e:	400a      	ands	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fe fe7b 	bl	8003c9c <HAL_GetTick>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fe fe76 	bl	8003c9c <HAL_GetTick>
 8004fb0:	0002      	movs	r2, r0
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e02a      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fbe:	4b17      	ldr	r3, [pc, #92]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	049b      	lsls	r3, r3, #18
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x724>
 8004fca:	e022      	b.n	8005012 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e01d      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <HAL_RCC_OscConfig+0x794>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	025b      	lsls	r3, r3, #9
 8004fe4:	401a      	ands	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d10f      	bne.n	800500e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	23f0      	movs	r3, #240	; 0xf0
 8004ff2:	039b      	lsls	r3, r3, #14
 8004ff4:	401a      	ands	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	23c0      	movs	r3, #192	; 0xc0
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	401a      	ands	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d001      	beq.n	8005012 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b00a      	add	sp, #40	; 0x28
 800501a:	bdb0      	pop	{r4, r5, r7, pc}
 800501c:	40021000 	.word	0x40021000
 8005020:	ff02ffff 	.word	0xff02ffff
 8005024:	feffffff 	.word	0xfeffffff

08005028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005028:	b5b0      	push	{r4, r5, r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e10d      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800503c:	4b88      	ldr	r3, [pc, #544]	; (8005260 <HAL_RCC_ClockConfig+0x238>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2201      	movs	r2, #1
 8005042:	4013      	ands	r3, r2
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d911      	bls.n	800506e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504a:	4b85      	ldr	r3, [pc, #532]	; (8005260 <HAL_RCC_ClockConfig+0x238>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	4393      	bics	r3, r2
 8005052:	0019      	movs	r1, r3
 8005054:	4b82      	ldr	r3, [pc, #520]	; (8005260 <HAL_RCC_ClockConfig+0x238>)
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505c:	4b80      	ldr	r3, [pc, #512]	; (8005260 <HAL_RCC_ClockConfig+0x238>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	4013      	ands	r3, r2
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d001      	beq.n	800506e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0f4      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2202      	movs	r2, #2
 8005074:	4013      	ands	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005078:	4b7a      	ldr	r3, [pc, #488]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	22f0      	movs	r2, #240	; 0xf0
 800507e:	4393      	bics	r3, r2
 8005080:	0019      	movs	r1, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	4b77      	ldr	r3, [pc, #476]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 8005088:	430a      	orrs	r2, r1
 800508a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2201      	movs	r2, #1
 8005092:	4013      	ands	r3, r2
 8005094:	d100      	bne.n	8005098 <HAL_RCC_ClockConfig+0x70>
 8005096:	e089      	b.n	80051ac <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d107      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050a0:	4b70      	ldr	r3, [pc, #448]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	029b      	lsls	r3, r3, #10
 80050a8:	4013      	ands	r3, r2
 80050aa:	d120      	bne.n	80050ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0d3      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d107      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050b8:	4b6a      	ldr	r3, [pc, #424]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	049b      	lsls	r3, r3, #18
 80050c0:	4013      	ands	r3, r2
 80050c2:	d114      	bne.n	80050ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0c7      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d106      	bne.n	80050de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050d0:	4b64      	ldr	r3, [pc, #400]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2204      	movs	r2, #4
 80050d6:	4013      	ands	r3, r2
 80050d8:	d109      	bne.n	80050ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0bc      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050de:	4b61      	ldr	r3, [pc, #388]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4013      	ands	r3, r2
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0b4      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ee:	4b5d      	ldr	r3, [pc, #372]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2203      	movs	r2, #3
 80050f4:	4393      	bics	r3, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4b59      	ldr	r3, [pc, #356]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005102:	f7fe fdcb 	bl	8003c9c <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d111      	bne.n	8005136 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005112:	e009      	b.n	8005128 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005114:	f7fe fdc2 	bl	8003c9c <HAL_GetTick>
 8005118:	0002      	movs	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	4a52      	ldr	r2, [pc, #328]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e097      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005128:	4b4e      	ldr	r3, [pc, #312]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	220c      	movs	r2, #12
 800512e:	4013      	ands	r3, r2
 8005130:	2b08      	cmp	r3, #8
 8005132:	d1ef      	bne.n	8005114 <HAL_RCC_ClockConfig+0xec>
 8005134:	e03a      	b.n	80051ac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d111      	bne.n	8005162 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800513e:	e009      	b.n	8005154 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005140:	f7fe fdac 	bl	8003c9c <HAL_GetTick>
 8005144:	0002      	movs	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	4a47      	ldr	r2, [pc, #284]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e081      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005154:	4b43      	ldr	r3, [pc, #268]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	220c      	movs	r2, #12
 800515a:	4013      	ands	r3, r2
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d1ef      	bne.n	8005140 <HAL_RCC_ClockConfig+0x118>
 8005160:	e024      	b.n	80051ac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d11b      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800516a:	e009      	b.n	8005180 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516c:	f7fe fd96 	bl	8003c9c <HAL_GetTick>
 8005170:	0002      	movs	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	4a3c      	ldr	r2, [pc, #240]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e06b      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	220c      	movs	r2, #12
 8005186:	4013      	ands	r3, r2
 8005188:	2b04      	cmp	r3, #4
 800518a:	d1ef      	bne.n	800516c <HAL_RCC_ClockConfig+0x144>
 800518c:	e00e      	b.n	80051ac <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800518e:	f7fe fd85 	bl	8003c9c <HAL_GetTick>
 8005192:	0002      	movs	r2, r0
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	4a33      	ldr	r2, [pc, #204]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e05a      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80051a2:	4b30      	ldr	r3, [pc, #192]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	220c      	movs	r2, #12
 80051a8:	4013      	ands	r3, r2
 80051aa:	d1f0      	bne.n	800518e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ac:	4b2c      	ldr	r3, [pc, #176]	; (8005260 <HAL_RCC_ClockConfig+0x238>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	4013      	ands	r3, r2
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d211      	bcs.n	80051de <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b29      	ldr	r3, [pc, #164]	; (8005260 <HAL_RCC_ClockConfig+0x238>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	4393      	bics	r3, r2
 80051c2:	0019      	movs	r1, r3
 80051c4:	4b26      	ldr	r3, [pc, #152]	; (8005260 <HAL_RCC_ClockConfig+0x238>)
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051cc:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RCC_ClockConfig+0x238>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	4013      	ands	r3, r2
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d001      	beq.n	80051de <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e03c      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2204      	movs	r2, #4
 80051e4:	4013      	ands	r3, r2
 80051e6:	d009      	beq.n	80051fc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e8:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a1f      	ldr	r2, [pc, #124]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	0019      	movs	r1, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 80051f8:	430a      	orrs	r2, r1
 80051fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2208      	movs	r2, #8
 8005202:	4013      	ands	r3, r2
 8005204:	d00a      	beq.n	800521c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005206:	4b17      	ldr	r3, [pc, #92]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	4a19      	ldr	r2, [pc, #100]	; (8005270 <HAL_RCC_ClockConfig+0x248>)
 800520c:	4013      	ands	r3, r2
 800520e:	0019      	movs	r1, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	00da      	lsls	r2, r3, #3
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 8005218:	430a      	orrs	r2, r1
 800521a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800521c:	f000 f82e 	bl	800527c <HAL_RCC_GetSysClockFreq>
 8005220:	0001      	movs	r1, r0
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <HAL_RCC_ClockConfig+0x23c>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	220f      	movs	r2, #15
 800522a:	4013      	ands	r3, r2
 800522c:	4a11      	ldr	r2, [pc, #68]	; (8005274 <HAL_RCC_ClockConfig+0x24c>)
 800522e:	5cd3      	ldrb	r3, [r2, r3]
 8005230:	000a      	movs	r2, r1
 8005232:	40da      	lsrs	r2, r3
 8005234:	4b10      	ldr	r3, [pc, #64]	; (8005278 <HAL_RCC_ClockConfig+0x250>)
 8005236:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005238:	250b      	movs	r5, #11
 800523a:	197c      	adds	r4, r7, r5
 800523c:	2000      	movs	r0, #0
 800523e:	f7fe fcf9 	bl	8003c34 <HAL_InitTick>
 8005242:	0003      	movs	r3, r0
 8005244:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005246:	197b      	adds	r3, r7, r5
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800524e:	230b      	movs	r3, #11
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	e000      	b.n	8005258 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	0018      	movs	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	b004      	add	sp, #16
 800525e:	bdb0      	pop	{r4, r5, r7, pc}
 8005260:	40022000 	.word	0x40022000
 8005264:	40021000 	.word	0x40021000
 8005268:	00001388 	.word	0x00001388
 800526c:	fffff8ff 	.word	0xfffff8ff
 8005270:	ffffc7ff 	.word	0xffffc7ff
 8005274:	08027784 	.word	0x08027784
 8005278:	20000004 	.word	0x20000004

0800527c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005282:	4b3b      	ldr	r3, [pc, #236]	; (8005370 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	220c      	movs	r2, #12
 800528c:	4013      	ands	r3, r2
 800528e:	2b08      	cmp	r3, #8
 8005290:	d00e      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0x34>
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d00f      	beq.n	80052b6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005296:	2b04      	cmp	r3, #4
 8005298:	d157      	bne.n	800534a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800529a:	4b35      	ldr	r3, [pc, #212]	; (8005370 <HAL_RCC_GetSysClockFreq+0xf4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2210      	movs	r2, #16
 80052a0:	4013      	ands	r3, r2
 80052a2:	d002      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80052a4:	4b33      	ldr	r3, [pc, #204]	; (8005374 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052a6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80052a8:	e05d      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80052aa:	4b33      	ldr	r3, [pc, #204]	; (8005378 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052ac:	613b      	str	r3, [r7, #16]
      break;
 80052ae:	e05a      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052b0:	4b32      	ldr	r3, [pc, #200]	; (800537c <HAL_RCC_GetSysClockFreq+0x100>)
 80052b2:	613b      	str	r3, [r7, #16]
      break;
 80052b4:	e057      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	0c9b      	lsrs	r3, r3, #18
 80052ba:	220f      	movs	r2, #15
 80052bc:	4013      	ands	r3, r2
 80052be:	4a30      	ldr	r2, [pc, #192]	; (8005380 <HAL_RCC_GetSysClockFreq+0x104>)
 80052c0:	5cd3      	ldrb	r3, [r2, r3]
 80052c2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	0d9b      	lsrs	r3, r3, #22
 80052c8:	2203      	movs	r2, #3
 80052ca:	4013      	ands	r3, r2
 80052cc:	3301      	adds	r3, #1
 80052ce:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCC_GetSysClockFreq+0xf4>)
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	025b      	lsls	r3, r3, #9
 80052d8:	4013      	ands	r3, r2
 80052da:	d00f      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	000a      	movs	r2, r1
 80052e0:	0152      	lsls	r2, r2, #5
 80052e2:	1a52      	subs	r2, r2, r1
 80052e4:	0193      	lsls	r3, r2, #6
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	185b      	adds	r3, r3, r1
 80052ec:	025b      	lsls	r3, r3, #9
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	0018      	movs	r0, r3
 80052f2:	f7fa ff11 	bl	8000118 <__udivsi3>
 80052f6:	0003      	movs	r3, r0
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e023      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80052fc:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <HAL_RCC_GetSysClockFreq+0xf4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2210      	movs	r2, #16
 8005302:	4013      	ands	r3, r2
 8005304:	d00f      	beq.n	8005326 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	000a      	movs	r2, r1
 800530a:	0152      	lsls	r2, r2, #5
 800530c:	1a52      	subs	r2, r2, r1
 800530e:	0193      	lsls	r3, r2, #6
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	185b      	adds	r3, r3, r1
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	0018      	movs	r0, r3
 800531c:	f7fa fefc 	bl	8000118 <__udivsi3>
 8005320:	0003      	movs	r3, r0
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e00e      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	000a      	movs	r2, r1
 800532a:	0152      	lsls	r2, r2, #5
 800532c:	1a52      	subs	r2, r2, r1
 800532e:	0193      	lsls	r3, r2, #6
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	185b      	adds	r3, r3, r1
 8005336:	029b      	lsls	r3, r3, #10
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	0018      	movs	r0, r3
 800533c:	f7fa feec 	bl	8000118 <__udivsi3>
 8005340:	0003      	movs	r3, r0
 8005342:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	613b      	str	r3, [r7, #16]
      break;
 8005348:	e00d      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_GetSysClockFreq+0xf4>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	0b5b      	lsrs	r3, r3, #13
 8005350:	2207      	movs	r2, #7
 8005352:	4013      	ands	r3, r2
 8005354:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	2280      	movs	r2, #128	; 0x80
 800535c:	0212      	lsls	r2, r2, #8
 800535e:	409a      	lsls	r2, r3
 8005360:	0013      	movs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
      break;
 8005364:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005366:	693b      	ldr	r3, [r7, #16]
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b006      	add	sp, #24
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40021000 	.word	0x40021000
 8005374:	003d0900 	.word	0x003d0900
 8005378:	00f42400 	.word	0x00f42400
 800537c:	007a1200 	.word	0x007a1200
 8005380:	0802779c 	.word	0x0802779c

08005384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005388:	4b02      	ldr	r3, [pc, #8]	; (8005394 <HAL_RCC_GetHCLKFreq+0x10>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	20000004 	.word	0x20000004

08005398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800539c:	f7ff fff2 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053a0:	0001      	movs	r1, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	2207      	movs	r2, #7
 80053aa:	4013      	ands	r3, r2
 80053ac:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ae:	5cd3      	ldrb	r3, [r2, r3]
 80053b0:	40d9      	lsrs	r1, r3
 80053b2:	000b      	movs	r3, r1
}
 80053b4:	0018      	movs	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	40021000 	.word	0x40021000
 80053c0:	08027794 	.word	0x08027794

080053c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053c8:	f7ff ffdc 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053cc:	0001      	movs	r1, r0
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	0adb      	lsrs	r3, r3, #11
 80053d4:	2207      	movs	r2, #7
 80053d6:	4013      	ands	r3, r2
 80053d8:	4a04      	ldr	r2, [pc, #16]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80053da:	5cd3      	ldrb	r3, [r2, r3]
 80053dc:	40d9      	lsrs	r1, r3
 80053de:	000b      	movs	r3, r1
}
 80053e0:	0018      	movs	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	40021000 	.word	0x40021000
 80053ec:	08027794 	.word	0x08027794

080053f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2220      	movs	r2, #32
 80053fe:	4013      	ands	r3, r2
 8005400:	d100      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8005402:	e0c7      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005404:	2317      	movs	r3, #23
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540c:	4b99      	ldr	r3, [pc, #612]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800540e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	055b      	lsls	r3, r3, #21
 8005414:	4013      	ands	r3, r2
 8005416:	d10a      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005418:	4b96      	ldr	r3, [pc, #600]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800541a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800541c:	4b95      	ldr	r3, [pc, #596]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800541e:	2180      	movs	r1, #128	; 0x80
 8005420:	0549      	lsls	r1, r1, #21
 8005422:	430a      	orrs	r2, r1
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005426:	2317      	movs	r3, #23
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800542e:	4b92      	ldr	r3, [pc, #584]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	4013      	ands	r3, r2
 8005438:	d11a      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800543a:	4b8f      	ldr	r3, [pc, #572]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b8e      	ldr	r3, [pc, #568]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	0049      	lsls	r1, r1, #1
 8005444:	430a      	orrs	r2, r1
 8005446:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005448:	f7fe fc28 	bl	8003c9c <HAL_GetTick>
 800544c:	0003      	movs	r3, r0
 800544e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005450:	e008      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005452:	f7fe fc23 	bl	8003c9c <HAL_GetTick>
 8005456:	0002      	movs	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b64      	cmp	r3, #100	; 0x64
 800545e:	d901      	bls.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e102      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005464:	4b84      	ldr	r3, [pc, #528]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	4013      	ands	r3, r2
 800546e:	d0f0      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005470:	4b80      	ldr	r3, [pc, #512]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	23c0      	movs	r3, #192	; 0xc0
 8005476:	039b      	lsls	r3, r3, #14
 8005478:	4013      	ands	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	23c0      	movs	r3, #192	; 0xc0
 8005482:	039b      	lsls	r3, r3, #14
 8005484:	4013      	ands	r3, r2
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d013      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	23c0      	movs	r3, #192	; 0xc0
 8005492:	029b      	lsls	r3, r3, #10
 8005494:	401a      	ands	r2, r3
 8005496:	23c0      	movs	r3, #192	; 0xc0
 8005498:	029b      	lsls	r3, r3, #10
 800549a:	429a      	cmp	r2, r3
 800549c:	d10a      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800549e:	4b75      	ldr	r3, [pc, #468]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	401a      	ands	r2, r3
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	029b      	lsls	r3, r3, #10
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d101      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0da      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80054b4:	4b6f      	ldr	r3, [pc, #444]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054b8:	23c0      	movs	r3, #192	; 0xc0
 80054ba:	029b      	lsls	r3, r3, #10
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03b      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	23c0      	movs	r3, #192	; 0xc0
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	4013      	ands	r3, r2
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d033      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2220      	movs	r2, #32
 80054dc:	4013      	ands	r3, r2
 80054de:	d02e      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80054e0:	4b64      	ldr	r3, [pc, #400]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	4a65      	ldr	r2, [pc, #404]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ea:	4b62      	ldr	r3, [pc, #392]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ee:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	0309      	lsls	r1, r1, #12
 80054f4:	430a      	orrs	r2, r1
 80054f6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054f8:	4b5e      	ldr	r3, [pc, #376]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054fc:	4b5d      	ldr	r3, [pc, #372]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054fe:	4960      	ldr	r1, [pc, #384]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005500:	400a      	ands	r2, r1
 8005502:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005504:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4013      	ands	r3, r2
 8005512:	d014      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005514:	f7fe fbc2 	bl	8003c9c <HAL_GetTick>
 8005518:	0003      	movs	r3, r0
 800551a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800551c:	e009      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551e:	f7fe fbbd 	bl	8003c9c <HAL_GetTick>
 8005522:	0002      	movs	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	4a56      	ldr	r2, [pc, #344]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e09b      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005532:	4b50      	ldr	r3, [pc, #320]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4013      	ands	r3, r2
 800553c:	d0ef      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	23c0      	movs	r3, #192	; 0xc0
 8005544:	029b      	lsls	r3, r3, #10
 8005546:	401a      	ands	r2, r3
 8005548:	23c0      	movs	r3, #192	; 0xc0
 800554a:	029b      	lsls	r3, r3, #10
 800554c:	429a      	cmp	r2, r3
 800554e:	d10c      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005550:	4b48      	ldr	r3, [pc, #288]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a4c      	ldr	r2, [pc, #304]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005556:	4013      	ands	r3, r2
 8005558:	0019      	movs	r1, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	23c0      	movs	r3, #192	; 0xc0
 8005560:	039b      	lsls	r3, r3, #14
 8005562:	401a      	ands	r2, r3
 8005564:	4b43      	ldr	r3, [pc, #268]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005566:	430a      	orrs	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	4b42      	ldr	r3, [pc, #264]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800556c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	23c0      	movs	r3, #192	; 0xc0
 8005574:	029b      	lsls	r3, r3, #10
 8005576:	401a      	ands	r2, r3
 8005578:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800557a:	430a      	orrs	r2, r1
 800557c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800557e:	2317      	movs	r3, #23
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d105      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005588:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800558a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558c:	4b39      	ldr	r3, [pc, #228]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800558e:	493f      	ldr	r1, [pc, #252]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005590:	400a      	ands	r2, r1
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2201      	movs	r2, #1
 800559a:	4013      	ands	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800559e:	4b35      	ldr	r3, [pc, #212]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a2:	2203      	movs	r2, #3
 80055a4:	4393      	bics	r3, r2
 80055a6:	0019      	movs	r1, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ae:	430a      	orrs	r2, r1
 80055b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2202      	movs	r2, #2
 80055b8:	4013      	ands	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055bc:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c0:	220c      	movs	r2, #12
 80055c2:	4393      	bics	r3, r2
 80055c4:	0019      	movs	r1, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	4b2a      	ldr	r3, [pc, #168]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055cc:	430a      	orrs	r2, r1
 80055ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2204      	movs	r2, #4
 80055d6:	4013      	ands	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055da:	4b26      	ldr	r3, [pc, #152]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055de:	4a2c      	ldr	r2, [pc, #176]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	0019      	movs	r1, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	4b22      	ldr	r3, [pc, #136]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ea:	430a      	orrs	r2, r1
 80055ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2208      	movs	r2, #8
 80055f4:	4013      	ands	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f8:	4b1e      	ldr	r3, [pc, #120]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fc:	4a25      	ldr	r2, [pc, #148]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80055fe:	4013      	ands	r3, r2
 8005600:	0019      	movs	r1, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005608:	430a      	orrs	r2, r1
 800560a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	4013      	ands	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005618:	4b16      	ldr	r3, [pc, #88]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800561a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800561e:	4013      	ands	r3, r2
 8005620:	0019      	movs	r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005628:	430a      	orrs	r2, r1
 800562a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2240      	movs	r2, #64	; 0x40
 8005632:	4013      	ands	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563a:	4a17      	ldr	r2, [pc, #92]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005646:	430a      	orrs	r2, r1
 8005648:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	4013      	ands	r3, r2
 8005652:	d009      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005654:	4b07      	ldr	r3, [pc, #28]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005658:	4a10      	ldr	r2, [pc, #64]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800565a:	4013      	ands	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	4b04      	ldr	r3, [pc, #16]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005664:	430a      	orrs	r2, r1
 8005666:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	0018      	movs	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	b006      	add	sp, #24
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	40021000 	.word	0x40021000
 8005678:	40007000 	.word	0x40007000
 800567c:	fffcffff 	.word	0xfffcffff
 8005680:	fff7ffff 	.word	0xfff7ffff
 8005684:	00001388 	.word	0x00001388
 8005688:	ffcfffff 	.word	0xffcfffff
 800568c:	efffffff 	.word	0xefffffff
 8005690:	fffff3ff 	.word	0xfffff3ff
 8005694:	ffffcfff 	.word	0xffffcfff
 8005698:	fbffffff 	.word	0xfbffffff
 800569c:	fff3ffff 	.word	0xfff3ffff

080056a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e08e      	b.n	80057d0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2221      	movs	r2, #33	; 0x21
 80056b6:	5c9b      	ldrb	r3, [r3, r2]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d107      	bne.n	80056ce <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	2100      	movs	r1, #0
 80056c4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7fd ff97 	bl	80035fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2221      	movs	r2, #33	; 0x21
 80056d2:	2102      	movs	r1, #2
 80056d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	22ca      	movs	r2, #202	; 0xca
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2253      	movs	r2, #83	; 0x53
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 fc5c 	bl	8005fa6 <RTC_EnterInitMode>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d009      	beq.n	8005706 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	22ff      	movs	r2, #255	; 0xff
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2221      	movs	r2, #33	; 0x21
 80056fe:	2104      	movs	r1, #4
 8005700:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e064      	b.n	80057d0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4931      	ldr	r1, [pc, #196]	; (80057d8 <HAL_RTC_Init+0x138>)
 8005712:	400a      	ands	r2, r1
 8005714:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6899      	ldr	r1, [r3, #8]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	68d2      	ldr	r2, [r2, #12]
 800573c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6919      	ldr	r1, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	041a      	lsls	r2, r3, #16
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2180      	movs	r1, #128	; 0x80
 800575e:	438a      	bics	r2, r1
 8005760:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2103      	movs	r1, #3
 800576e:	438a      	bics	r2, r1
 8005770:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2220      	movs	r2, #32
 8005792:	4013      	ands	r3, r2
 8005794:	d113      	bne.n	80057be <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0018      	movs	r0, r3
 800579a:	f000 fbdd 	bl	8005f58 <HAL_RTC_WaitForSynchro>
 800579e:	1e03      	subs	r3, r0, #0
 80057a0:	d00d      	beq.n	80057be <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	22ff      	movs	r2, #255	; 0xff
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2221      	movs	r2, #33	; 0x21
 80057ae:	2104      	movs	r1, #4
 80057b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	2100      	movs	r1, #0
 80057b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e008      	b.n	80057d0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	22ff      	movs	r2, #255	; 0xff
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2221      	movs	r2, #33	; 0x21
 80057ca:	2101      	movs	r1, #1
 80057cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057ce:	2300      	movs	r3, #0
  }
}
 80057d0:	0018      	movs	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b002      	add	sp, #8
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	ff8fffbf 	.word	0xff8fffbf

080057dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	5c9b      	ldrb	r3, [r3, r2]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_RTC_SetTime+0x1a>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e0ad      	b.n	8005952 <HAL_RTC_SetTime+0x176>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	2101      	movs	r1, #1
 80057fc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2221      	movs	r2, #33	; 0x21
 8005802:	2102      	movs	r1, #2
 8005804:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d125      	bne.n	8005858 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2240      	movs	r2, #64	; 0x40
 8005814:	4013      	ands	r3, r2
 8005816:	d102      	bne.n	800581e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2200      	movs	r2, #0
 800581c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	0018      	movs	r0, r3
 8005824:	f000 fbe9 	bl	8005ffa <RTC_ByteToBcd2>
 8005828:	0003      	movs	r3, r0
 800582a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	0018      	movs	r0, r3
 8005832:	f000 fbe2 	bl	8005ffa <RTC_ByteToBcd2>
 8005836:	0003      	movs	r3, r0
 8005838:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800583a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	789b      	ldrb	r3, [r3, #2]
 8005840:	0018      	movs	r0, r3
 8005842:	f000 fbda 	bl	8005ffa <RTC_ByteToBcd2>
 8005846:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005848:	0022      	movs	r2, r4
 800584a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	78db      	ldrb	r3, [r3, #3]
 8005850:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e017      	b.n	8005888 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	4013      	ands	r3, r2
 8005862:	d102      	bne.n	800586a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005876:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800587c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	78db      	ldrb	r3, [r3, #3]
 8005882:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	22ca      	movs	r2, #202	; 0xca
 800588e:	625a      	str	r2, [r3, #36]	; 0x24
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2253      	movs	r2, #83	; 0x53
 8005896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	0018      	movs	r0, r3
 800589c:	f000 fb83 	bl	8005fa6 <RTC_EnterInitMode>
 80058a0:	1e03      	subs	r3, r0, #0
 80058a2:	d00d      	beq.n	80058c0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	22ff      	movs	r2, #255	; 0xff
 80058aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2221      	movs	r2, #33	; 0x21
 80058b0:	2104      	movs	r1, #4
 80058b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	2100      	movs	r1, #0
 80058ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e048      	b.n	8005952 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4925      	ldr	r1, [pc, #148]	; (800595c <HAL_RTC_SetTime+0x180>)
 80058c8:	400a      	ands	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4922      	ldr	r1, [pc, #136]	; (8005960 <HAL_RTC_SetTime+0x184>)
 80058d8:	400a      	ands	r2, r1
 80058da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6899      	ldr	r1, [r3, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2180      	movs	r1, #128	; 0x80
 8005900:	438a      	bics	r2, r1
 8005902:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2220      	movs	r2, #32
 800590c:	4013      	ands	r3, r2
 800590e:	d113      	bne.n	8005938 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	0018      	movs	r0, r3
 8005914:	f000 fb20 	bl	8005f58 <HAL_RTC_WaitForSynchro>
 8005918:	1e03      	subs	r3, r0, #0
 800591a:	d00d      	beq.n	8005938 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2221      	movs	r2, #33	; 0x21
 8005928:	2104      	movs	r1, #4
 800592a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	2100      	movs	r1, #0
 8005932:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e00c      	b.n	8005952 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	22ff      	movs	r2, #255	; 0xff
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2221      	movs	r2, #33	; 0x21
 8005944:	2101      	movs	r1, #1
 8005946:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	2100      	movs	r1, #0
 800594e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
  }
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b007      	add	sp, #28
 8005958:	bd90      	pop	{r4, r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	007f7f7f 	.word	0x007f7f7f
 8005960:	fffbffff 	.word	0xfffbffff

08005964 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	045b      	lsls	r3, r3, #17
 8005982:	0c5a      	lsrs	r2, r3, #17
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <HAL_RTC_GetTime+0xb4>)
 8005990:	4013      	ands	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	0c1b      	lsrs	r3, r3, #16
 8005998:	b2db      	uxtb	r3, r3
 800599a:	223f      	movs	r2, #63	; 0x3f
 800599c:	4013      	ands	r3, r2
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	227f      	movs	r2, #127	; 0x7f
 80059ac:	4013      	ands	r3, r2
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	227f      	movs	r2, #127	; 0x7f
 80059ba:	4013      	ands	r3, r2
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	0c1b      	lsrs	r3, r3, #16
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2240      	movs	r2, #64	; 0x40
 80059ca:	4013      	ands	r3, r2
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d11a      	bne.n	8005a0e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	0018      	movs	r0, r3
 80059de:	f000 fb35 	bl	800604c <RTC_Bcd2ToByte>
 80059e2:	0003      	movs	r3, r0
 80059e4:	001a      	movs	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 fb2c 	bl	800604c <RTC_Bcd2ToByte>
 80059f4:	0003      	movs	r3, r0
 80059f6:	001a      	movs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	789b      	ldrb	r3, [r3, #2]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 fb23 	bl	800604c <RTC_Bcd2ToByte>
 8005a06:	0003      	movs	r3, r0
 8005a08:	001a      	movs	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b006      	add	sp, #24
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	007f7f7f 	.word	0x007f7f7f

08005a1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	5c9b      	ldrb	r3, [r3, r2]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_RTC_SetDate+0x1a>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e099      	b.n	8005b6a <HAL_RTC_SetDate+0x14e>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2221      	movs	r2, #33	; 0x21
 8005a42:	2102      	movs	r1, #2
 8005a44:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10e      	bne.n	8005a6a <HAL_RTC_SetDate+0x4e>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	001a      	movs	r2, r3
 8005a52:	2310      	movs	r3, #16
 8005a54:	4013      	ands	r3, r2
 8005a56:	d008      	beq.n	8005a6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	4393      	bics	r3, r2
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	330a      	adds	r3, #10
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d11c      	bne.n	8005aaa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	78db      	ldrb	r3, [r3, #3]
 8005a74:	0018      	movs	r0, r3
 8005a76:	f000 fac0 	bl	8005ffa <RTC_ByteToBcd2>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 fab9 	bl	8005ffa <RTC_ByteToBcd2>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	789b      	ldrb	r3, [r3, #2]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f000 fab1 	bl	8005ffa <RTC_ByteToBcd2>
 8005a98:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005a9a:	0022      	movs	r2, r4
 8005a9c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e00e      	b.n	8005ac8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ab6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005abc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	22ca      	movs	r2, #202	; 0xca
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2253      	movs	r2, #83	; 0x53
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	0018      	movs	r0, r3
 8005adc:	f000 fa63 	bl	8005fa6 <RTC_EnterInitMode>
 8005ae0:	1e03      	subs	r3, r0, #0
 8005ae2:	d00d      	beq.n	8005b00 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	22ff      	movs	r2, #255	; 0xff
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2221      	movs	r2, #33	; 0x21
 8005af0:	2104      	movs	r1, #4
 8005af2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	2100      	movs	r1, #0
 8005afa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e034      	b.n	8005b6a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	491b      	ldr	r1, [pc, #108]	; (8005b74 <HAL_RTC_SetDate+0x158>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	438a      	bics	r2, r1
 8005b1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2220      	movs	r2, #32
 8005b24:	4013      	ands	r3, r2
 8005b26:	d113      	bne.n	8005b50 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 fa14 	bl	8005f58 <HAL_RTC_WaitForSynchro>
 8005b30:	1e03      	subs	r3, r0, #0
 8005b32:	d00d      	beq.n	8005b50 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	22ff      	movs	r2, #255	; 0xff
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2221      	movs	r2, #33	; 0x21
 8005b40:	2104      	movs	r1, #4
 8005b42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	2100      	movs	r1, #0
 8005b4a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e00c      	b.n	8005b6a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2221      	movs	r2, #33	; 0x21
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b68:	2300      	movs	r3, #0
  }
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b007      	add	sp, #28
 8005b70:	bd90      	pop	{r4, r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	00ffff3f 	.word	0x00ffff3f

08005b78 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <HAL_RTC_GetDate+0x98>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	0a1b      	lsrs	r3, r3, #8
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	221f      	movs	r2, #31
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	223f      	movs	r2, #63	; 0x3f
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	0b5b      	lsrs	r3, r3, #13
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2207      	movs	r2, #7
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d11a      	bne.n	8005c04 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	78db      	ldrb	r3, [r3, #3]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 fa3a 	bl	800604c <RTC_Bcd2ToByte>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	001a      	movs	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	0018      	movs	r0, r3
 8005be6:	f000 fa31 	bl	800604c <RTC_Bcd2ToByte>
 8005bea:	0003      	movs	r3, r0
 8005bec:	001a      	movs	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	789b      	ldrb	r3, [r3, #2]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 fa28 	bl	800604c <RTC_Bcd2ToByte>
 8005bfc:	0003      	movs	r3, r0
 8005bfe:	001a      	movs	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	0018      	movs	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b006      	add	sp, #24
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	00ffff3f 	.word	0x00ffff3f

08005c14 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	5c9b      	ldrb	r3, [r3, r2]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_RTC_SetAlarm_IT+0x1a>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e130      	b.n	8005e90 <HAL_RTC_SetAlarm_IT+0x27c>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	2101      	movs	r1, #1
 8005c34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2221      	movs	r2, #33	; 0x21
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d136      	bne.n	8005cb2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2240      	movs	r2, #64	; 0x40
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d102      	bne.n	8005c56 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2200      	movs	r2, #0
 8005c54:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 f9cd 	bl	8005ffa <RTC_ByteToBcd2>
 8005c60:	0003      	movs	r3, r0
 8005c62:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 f9c6 	bl	8005ffa <RTC_ByteToBcd2>
 8005c6e:	0003      	movs	r3, r0
 8005c70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c72:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	789b      	ldrb	r3, [r3, #2]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f000 f9be 	bl	8005ffa <RTC_ByteToBcd2>
 8005c7e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005c80:	0022      	movs	r2, r4
 8005c82:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	78db      	ldrb	r3, [r3, #3]
 8005c88:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2220      	movs	r2, #32
 8005c92:	5c9b      	ldrb	r3, [r3, r2]
 8005c94:	0018      	movs	r0, r3
 8005c96:	f000 f9b0 	bl	8005ffa <RTC_ByteToBcd2>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005c9e:	0022      	movs	r2, r4
 8005ca0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ca6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	e022      	b.n	8005cf8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2240      	movs	r2, #64	; 0x40
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005cd0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005cd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	78db      	ldrb	r3, [r3, #3]
 8005cdc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005cde:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2120      	movs	r1, #32
 8005ce4:	5c5b      	ldrb	r3, [r3, r1]
 8005ce6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ce8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005cee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	22ca      	movs	r2, #202	; 0xca
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2253      	movs	r2, #83	; 0x53
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d18:	2380      	movs	r3, #128	; 0x80
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d14e      	bne.n	8005dbe <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	495b      	ldr	r1, [pc, #364]	; (8005e98 <HAL_RTC_SetAlarm_IT+0x284>)
 8005d2c:	400a      	ands	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	22ff      	movs	r2, #255	; 0xff
 8005d38:	401a      	ands	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4957      	ldr	r1, [pc, #348]	; (8005e9c <HAL_RTC_SetAlarm_IT+0x288>)
 8005d40:	430a      	orrs	r2, r1
 8005d42:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d44:	f7fd ffaa 	bl	8003c9c <HAL_GetTick>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d4c:	e016      	b.n	8005d7c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d4e:	f7fd ffa5 	bl	8003c9c <HAL_GetTick>
 8005d52:	0002      	movs	r2, r0
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	1ad2      	subs	r2, r2, r3
 8005d58:	23fa      	movs	r3, #250	; 0xfa
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d90d      	bls.n	8005d7c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	22ff      	movs	r2, #255	; 0xff
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2221      	movs	r2, #33	; 0x21
 8005d6c:	2103      	movs	r1, #3
 8005d6e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	2100      	movs	r1, #0
 8005d76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e089      	b.n	8005e90 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	4013      	ands	r3, r2
 8005d86:	d0e2      	beq.n	8005d4e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2180      	movs	r1, #128	; 0x80
 8005da4:	0049      	lsls	r1, r1, #1
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2180      	movs	r1, #128	; 0x80
 8005db6:	0149      	lsls	r1, r1, #5
 8005db8:	430a      	orrs	r2, r1
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	e04d      	b.n	8005e5a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4935      	ldr	r1, [pc, #212]	; (8005ea0 <HAL_RTC_SetAlarm_IT+0x28c>)
 8005dca:	400a      	ands	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	22ff      	movs	r2, #255	; 0xff
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4931      	ldr	r1, [pc, #196]	; (8005ea4 <HAL_RTC_SetAlarm_IT+0x290>)
 8005dde:	430a      	orrs	r2, r1
 8005de0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005de2:	f7fd ff5b 	bl	8003c9c <HAL_GetTick>
 8005de6:	0003      	movs	r3, r0
 8005de8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005dea:	e016      	b.n	8005e1a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dec:	f7fd ff56 	bl	8003c9c <HAL_GetTick>
 8005df0:	0002      	movs	r2, r0
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	1ad2      	subs	r2, r2, r3
 8005df6:	23fa      	movs	r3, #250	; 0xfa
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d90d      	bls.n	8005e1a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	22ff      	movs	r2, #255	; 0xff
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2221      	movs	r2, #33	; 0x21
 8005e0a:	2103      	movs	r1, #3
 8005e0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	2100      	movs	r1, #0
 8005e14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e03a      	b.n	8005e90 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2202      	movs	r2, #2
 8005e22:	4013      	ands	r3, r2
 8005e24:	d0e2      	beq.n	8005dec <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2180      	movs	r1, #128	; 0x80
 8005e42:	0089      	lsls	r1, r1, #2
 8005e44:	430a      	orrs	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2180      	movs	r1, #128	; 0x80
 8005e54:	0189      	lsls	r1, r1, #6
 8005e56:	430a      	orrs	r2, r1
 8005e58:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005e5a:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005e60:	2180      	movs	r1, #128	; 0x80
 8005e62:	0289      	lsls	r1, r1, #10
 8005e64:	430a      	orrs	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	0289      	lsls	r1, r1, #10
 8005e72:	430a      	orrs	r2, r1
 8005e74:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	22ff      	movs	r2, #255	; 0xff
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2221      	movs	r2, #33	; 0x21
 8005e82:	2101      	movs	r1, #1
 8005e84:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	0018      	movs	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b009      	add	sp, #36	; 0x24
 8005e96:	bd90      	pop	{r4, r7, pc}
 8005e98:	fffffeff 	.word	0xfffffeff
 8005e9c:	fffffe7f 	.word	0xfffffe7f
 8005ea0:	fffffdff 	.word	0xfffffdff
 8005ea4:	fffffd7f 	.word	0xfffffd7f
 8005ea8:	40010400 	.word	0x40010400

08005eac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	015b      	lsls	r3, r3, #5
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d014      	beq.n	8005eec <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d00d      	beq.n	8005eec <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 f838 	bl	8005f48 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	22ff      	movs	r2, #255	; 0xff
 8005ee0:	401a      	ands	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4915      	ldr	r1, [pc, #84]	; (8005f3c <HAL_RTC_AlarmIRQHandler+0x90>)
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	019b      	lsls	r3, r3, #6
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d014      	beq.n	8005f24 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4013      	ands	r3, r2
 8005f06:	d00d      	beq.n	8005f24 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 fa0e 	bl	800632c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	22ff      	movs	r2, #255	; 0xff
 8005f18:	401a      	ands	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4908      	ldr	r1, [pc, #32]	; (8005f40 <HAL_RTC_AlarmIRQHandler+0x94>)
 8005f20:	430a      	orrs	r2, r1
 8005f22:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <HAL_RTC_AlarmIRQHandler+0x98>)
 8005f26:	2280      	movs	r2, #128	; 0x80
 8005f28:	0292      	lsls	r2, r2, #10
 8005f2a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2221      	movs	r2, #33	; 0x21
 8005f30:	2101      	movs	r1, #1
 8005f32:	5499      	strb	r1, [r3, r2]
}
 8005f34:	46c0      	nop			; (mov r8, r8)
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b002      	add	sp, #8
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	fffffe7f 	.word	0xfffffe7f
 8005f40:	fffffd7f 	.word	0xfffffd7f
 8005f44:	40010400 	.word	0x40010400

08005f48 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005f50:	46c0      	nop			; (mov r8, r8)
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b002      	add	sp, #8
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	21a0      	movs	r1, #160	; 0xa0
 8005f6c:	438a      	bics	r2, r1
 8005f6e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005f70:	f7fd fe94 	bl	8003c9c <HAL_GetTick>
 8005f74:	0003      	movs	r3, r0
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f78:	e00a      	b.n	8005f90 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f7a:	f7fd fe8f 	bl	8003c9c <HAL_GetTick>
 8005f7e:	0002      	movs	r2, r0
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	23fa      	movs	r3, #250	; 0xfa
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d901      	bls.n	8005f90 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e006      	b.n	8005f9e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d0ee      	beq.n	8005f7a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b004      	add	sp, #16
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2240      	movs	r2, #64	; 0x40
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d11a      	bne.n	8005ff0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4252      	negs	r2, r2
 8005fc2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005fc4:	f7fd fe6a 	bl	8003c9c <HAL_GetTick>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fcc:	e00a      	b.n	8005fe4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005fce:	f7fd fe65 	bl	8003c9c <HAL_GetTick>
 8005fd2:	0002      	movs	r2, r0
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	23fa      	movs	r3, #250	; 0xfa
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d901      	bls.n	8005fe4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e006      	b.n	8005ff2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	2240      	movs	r2, #64	; 0x40
 8005fec:	4013      	ands	r3, r2
 8005fee:	d0ee      	beq.n	8005fce <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	b004      	add	sp, #16
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	0002      	movs	r2, r0
 8006002:	1dfb      	adds	r3, r7, #7
 8006004:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800600a:	230b      	movs	r3, #11
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	1dfa      	adds	r2, r7, #7
 8006010:	7812      	ldrb	r2, [r2, #0]
 8006012:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006014:	e008      	b.n	8006028 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800601c:	220b      	movs	r2, #11
 800601e:	18bb      	adds	r3, r7, r2
 8006020:	18ba      	adds	r2, r7, r2
 8006022:	7812      	ldrb	r2, [r2, #0]
 8006024:	3a0a      	subs	r2, #10
 8006026:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006028:	230b      	movs	r3, #11
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b09      	cmp	r3, #9
 8006030:	d8f1      	bhi.n	8006016 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	b2db      	uxtb	r3, r3
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	b2da      	uxtb	r2, r3
 800603a:	230b      	movs	r3, #11
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	4313      	orrs	r3, r2
 8006042:	b2db      	uxtb	r3, r3
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b004      	add	sp, #16
 800604a:	bd80      	pop	{r7, pc}

0800604c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	0002      	movs	r2, r0
 8006054:	1dfb      	adds	r3, r7, #7
 8006056:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006058:	1dfb      	adds	r3, r7, #7
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	b2db      	uxtb	r3, r3
 8006060:	001a      	movs	r2, r3
 8006062:	0013      	movs	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	189b      	adds	r3, r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	1dfb      	adds	r3, r7, #7
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	210f      	movs	r1, #15
 8006076:	400b      	ands	r3, r1
 8006078:	b2db      	uxtb	r3, r3
 800607a:	18d3      	adds	r3, r2, r3
 800607c:	b2db      	uxtb	r3, r3
}
 800607e:	0018      	movs	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	b004      	add	sp, #16
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	5c9b      	ldrb	r3, [r3, r2]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800609e:	2302      	movs	r3, #2
 80060a0:	e0ad      	b.n	80061fe <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	2101      	movs	r1, #1
 80060a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2221      	movs	r2, #33	; 0x21
 80060ae:	2102      	movs	r1, #2
 80060b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	22ca      	movs	r2, #202	; 0xca
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2253      	movs	r2, #83	; 0x53
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4013      	ands	r3, r2
 80060ce:	d021      	beq.n	8006114 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 80060d0:	f7fd fde4 	bl	8003c9c <HAL_GetTick>
 80060d4:	0003      	movs	r3, r0
 80060d6:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80060d8:	e016      	b.n	8006108 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060da:	f7fd fddf 	bl	8003c9c <HAL_GetTick>
 80060de:	0002      	movs	r2, r0
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	23fa      	movs	r3, #250	; 0xfa
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d90d      	bls.n	8006108 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	22ff      	movs	r2, #255	; 0xff
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2221      	movs	r2, #33	; 0x21
 80060f8:	2103      	movs	r1, #3
 80060fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	2100      	movs	r1, #0
 8006102:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e07a      	b.n	80061fe <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2204      	movs	r2, #4
 8006110:	4013      	ands	r3, r2
 8006112:	d1e2      	bne.n	80060da <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	493a      	ldr	r1, [pc, #232]	; (8006208 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8006120:	400a      	ands	r2, r1
 8006122:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	22ff      	movs	r2, #255	; 0xff
 800612c:	401a      	ands	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4936      	ldr	r1, [pc, #216]	; (800620c <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8006134:	430a      	orrs	r2, r1
 8006136:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006138:	f7fd fdb0 	bl	8003c9c <HAL_GetTick>
 800613c:	0003      	movs	r3, r0
 800613e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006140:	e016      	b.n	8006170 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006142:	f7fd fdab 	bl	8003c9c <HAL_GetTick>
 8006146:	0002      	movs	r2, r0
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	23fa      	movs	r3, #250	; 0xfa
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	429a      	cmp	r2, r3
 8006152:	d90d      	bls.n	8006170 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2221      	movs	r2, #33	; 0x21
 8006160:	2103      	movs	r1, #3
 8006162:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	2100      	movs	r1, #0
 800616a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e046      	b.n	80061fe <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2204      	movs	r2, #4
 8006178:	4013      	ands	r3, r2
 800617a:	d0e2      	beq.n	8006142 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2107      	movs	r1, #7
 8006190:	438a      	bics	r2, r1
 8006192:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6899      	ldr	r1, [r3, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80061a4:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b19      	ldr	r3, [pc, #100]	; (8006210 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80061aa:	2180      	movs	r1, #128	; 0x80
 80061ac:	0349      	lsls	r1, r1, #13
 80061ae:	430a      	orrs	r2, r1
 80061b0:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80061b2:	4b17      	ldr	r3, [pc, #92]	; (8006210 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	4b16      	ldr	r3, [pc, #88]	; (8006210 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80061b8:	2180      	movs	r1, #128	; 0x80
 80061ba:	0349      	lsls	r1, r1, #13
 80061bc:	430a      	orrs	r2, r1
 80061be:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	01c9      	lsls	r1, r1, #7
 80061ce:	430a      	orrs	r2, r1
 80061d0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	00c9      	lsls	r1, r1, #3
 80061e0:	430a      	orrs	r2, r1
 80061e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	22ff      	movs	r2, #255	; 0xff
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2221      	movs	r2, #33	; 0x21
 80061f0:	2101      	movs	r1, #1
 80061f2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	2100      	movs	r1, #0
 80061fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	0018      	movs	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	b006      	add	sp, #24
 8006204:	bd80      	pop	{r7, pc}
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	fffffbff 	.word	0xfffffbff
 800620c:	fffffb7f 	.word	0xfffffb7f
 8006210:	40010400 	.word	0x40010400

08006214 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	5c9b      	ldrb	r3, [r3, r2]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006226:	2302      	movs	r3, #2
 8006228:	e04e      	b.n	80062c8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	2101      	movs	r1, #1
 8006230:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2221      	movs	r2, #33	; 0x21
 8006236:	2102      	movs	r1, #2
 8006238:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	22ca      	movs	r2, #202	; 0xca
 8006240:	625a      	str	r2, [r3, #36]	; 0x24
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2253      	movs	r2, #83	; 0x53
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	491e      	ldr	r1, [pc, #120]	; (80062d0 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8006256:	400a      	ands	r2, r1
 8006258:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	491b      	ldr	r1, [pc, #108]	; (80062d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8006266:	400a      	ands	r2, r1
 8006268:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800626a:	f7fd fd17 	bl	8003c9c <HAL_GetTick>
 800626e:	0003      	movs	r3, r0
 8006270:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006272:	e016      	b.n	80062a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006274:	f7fd fd12 	bl	8003c9c <HAL_GetTick>
 8006278:	0002      	movs	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad2      	subs	r2, r2, r3
 800627e:	23fa      	movs	r3, #250	; 0xfa
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	429a      	cmp	r2, r3
 8006284:	d90d      	bls.n	80062a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	22ff      	movs	r2, #255	; 0xff
 800628c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2221      	movs	r2, #33	; 0x21
 8006292:	2103      	movs	r1, #3
 8006294:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	2100      	movs	r1, #0
 800629c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e012      	b.n	80062c8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2204      	movs	r2, #4
 80062aa:	4013      	ands	r3, r2
 80062ac:	d0e2      	beq.n	8006274 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	22ff      	movs	r2, #255	; 0xff
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2221      	movs	r2, #33	; 0x21
 80062ba:	2101      	movs	r1, #1
 80062bc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	2100      	movs	r1, #0
 80062c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	0018      	movs	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b004      	add	sp, #16
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	fffffbff 	.word	0xfffffbff
 80062d4:	ffffbfff 	.word	0xffffbfff

080062d8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	4013      	ands	r3, r2
 80062ec:	d00d      	beq.n	800630a <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f01f fcb9 	bl	8025c68 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	22ff      	movs	r2, #255	; 0xff
 80062fe:	401a      	ands	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4907      	ldr	r1, [pc, #28]	; (8006324 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8006306:	430a      	orrs	r2, r1
 8006308:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 800630c:	2280      	movs	r2, #128	; 0x80
 800630e:	0352      	lsls	r2, r2, #13
 8006310:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2221      	movs	r2, #33	; 0x21
 8006316:	2101      	movs	r1, #1
 8006318:	5499      	strb	r1, [r3, r2]
}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	46bd      	mov	sp, r7
 800631e:	b002      	add	sp, #8
 8006320:	bd80      	pop	{r7, pc}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	fffffb7f 	.word	0xfffffb7f
 8006328:	40010400 	.word	0x40010400

0800632c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006334:	46c0      	nop			; (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e059      	b.n	8006402 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2251      	movs	r2, #81	; 0x51
 8006358:	5c9b      	ldrb	r3, [r3, r2]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2250      	movs	r2, #80	; 0x50
 8006364:	2100      	movs	r1, #0
 8006366:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	0018      	movs	r0, r3
 800636c:	f7fd f99e 	bl	80036ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2251      	movs	r2, #81	; 0x51
 8006374:	2102      	movs	r1, #2
 8006376:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2140      	movs	r1, #64	; 0x40
 8006384:	438a      	bics	r2, r1
 8006386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6999      	ldr	r1, [r3, #24]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	400b      	ands	r3, r1
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	0011      	movs	r1, r2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	0c1b      	lsrs	r3, r3, #16
 80063d0:	2204      	movs	r2, #4
 80063d2:	4013      	ands	r3, r2
 80063d4:	0019      	movs	r1, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4907      	ldr	r1, [pc, #28]	; (800640c <HAL_SPI_Init+0xd0>)
 80063ee:	400a      	ands	r2, r1
 80063f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2251      	movs	r2, #81	; 0x51
 80063fc:	2101      	movs	r1, #1
 80063fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	0018      	movs	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	b002      	add	sp, #8
 8006408:	bd80      	pop	{r7, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	fffff7ff 	.word	0xfffff7ff

08006410 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08c      	sub	sp, #48	; 0x30
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	001a      	movs	r2, r3
 800641e:	1cbb      	adds	r3, r7, #2
 8006420:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006422:	2301      	movs	r3, #1
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006426:	232b      	movs	r3, #43	; 0x2b
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2250      	movs	r2, #80	; 0x50
 8006432:	5c9b      	ldrb	r3, [r3, r2]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_SPI_TransmitReceive+0x2c>
 8006438:	2302      	movs	r3, #2
 800643a:	e1a1      	b.n	8006780 <HAL_SPI_TransmitReceive+0x370>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2250      	movs	r2, #80	; 0x50
 8006440:	2101      	movs	r1, #1
 8006442:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006444:	f7fd fc2a 	bl	8003c9c <HAL_GetTick>
 8006448:	0003      	movs	r3, r0
 800644a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800644c:	2023      	movs	r0, #35	; 0x23
 800644e:	183b      	adds	r3, r7, r0
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	2151      	movs	r1, #81	; 0x51
 8006454:	5c52      	ldrb	r2, [r2, r1]
 8006456:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800645e:	231a      	movs	r3, #26
 8006460:	18fb      	adds	r3, r7, r3
 8006462:	1cba      	adds	r2, r7, #2
 8006464:	8812      	ldrh	r2, [r2, #0]
 8006466:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006468:	183b      	adds	r3, r7, r0
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d012      	beq.n	8006496 <HAL_SPI_TransmitReceive+0x86>
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	2382      	movs	r3, #130	; 0x82
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	429a      	cmp	r2, r3
 8006478:	d108      	bne.n	800648c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d104      	bne.n	800648c <HAL_SPI_TransmitReceive+0x7c>
 8006482:	2323      	movs	r3, #35	; 0x23
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d004      	beq.n	8006496 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800648c:	232b      	movs	r3, #43	; 0x2b
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	2202      	movs	r2, #2
 8006492:	701a      	strb	r2, [r3, #0]
    goto error;
 8006494:	e169      	b.n	800676a <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x9a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x9a>
 80064a2:	1cbb      	adds	r3, r7, #2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80064aa:	232b      	movs	r3, #43	; 0x2b
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	2201      	movs	r2, #1
 80064b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80064b2:	e15a      	b.n	800676a <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2251      	movs	r2, #81	; 0x51
 80064b8:	5c9b      	ldrb	r3, [r3, r2]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d003      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2251      	movs	r2, #81	; 0x51
 80064c4:	2105      	movs	r1, #5
 80064c6:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	1cba      	adds	r2, r7, #2
 80064d8:	8812      	ldrh	r2, [r2, #0]
 80064da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	1cba      	adds	r2, r7, #2
 80064e0:	8812      	ldrh	r2, [r2, #0]
 80064e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1cba      	adds	r2, r7, #2
 80064ee:	8812      	ldrh	r2, [r2, #0]
 80064f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1cba      	adds	r2, r7, #2
 80064f6:	8812      	ldrh	r2, [r2, #0]
 80064f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2240      	movs	r2, #64	; 0x40
 800650e:	4013      	ands	r3, r2
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d007      	beq.n	8006524 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2140      	movs	r1, #64	; 0x40
 8006520:	430a      	orrs	r2, r1
 8006522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	429a      	cmp	r2, r3
 800652e:	d000      	beq.n	8006532 <HAL_SPI_TransmitReceive+0x122>
 8006530:	e07a      	b.n	8006628 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <HAL_SPI_TransmitReceive+0x134>
 800653a:	231a      	movs	r3, #26
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d166      	bne.n	8006612 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	881a      	ldrh	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	1c9a      	adds	r2, r3, #2
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006568:	e053      	b.n	8006612 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2202      	movs	r2, #2
 8006572:	4013      	ands	r3, r2
 8006574:	2b02      	cmp	r3, #2
 8006576:	d11b      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x1a0>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d016      	beq.n	80065b0 <HAL_SPI_TransmitReceive+0x1a0>
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d113      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	881a      	ldrh	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	1c9a      	adds	r2, r3, #2
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2201      	movs	r2, #1
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d119      	bne.n	80065f2 <HAL_SPI_TransmitReceive+0x1e2>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d014      	beq.n	80065f2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	b292      	uxth	r2, r2
 80065d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065ee:	2301      	movs	r3, #1
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065f2:	f7fd fb53 	bl	8003c9c <HAL_GetTick>
 80065f6:	0002      	movs	r2, r0
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065fe:	429a      	cmp	r2, r3
 8006600:	d807      	bhi.n	8006612 <HAL_SPI_TransmitReceive+0x202>
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	3301      	adds	r3, #1
 8006606:	d004      	beq.n	8006612 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8006608:	232b      	movs	r3, #43	; 0x2b
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	2203      	movs	r2, #3
 800660e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006610:	e0ab      	b.n	800676a <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1a6      	bne.n	800656a <HAL_SPI_TransmitReceive+0x15a>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1a1      	bne.n	800656a <HAL_SPI_TransmitReceive+0x15a>
 8006626:	e07f      	b.n	8006728 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_SPI_TransmitReceive+0x22c>
 8006630:	231a      	movs	r3, #26
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d000      	beq.n	800663c <HAL_SPI_TransmitReceive+0x22c>
 800663a:	e06b      	b.n	8006714 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	330c      	adds	r3, #12
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006662:	e057      	b.n	8006714 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2202      	movs	r2, #2
 800666c:	4013      	ands	r3, r2
 800666e:	2b02      	cmp	r3, #2
 8006670:	d11c      	bne.n	80066ac <HAL_SPI_TransmitReceive+0x29c>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d017      	beq.n	80066ac <HAL_SPI_TransmitReceive+0x29c>
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d114      	bne.n	80066ac <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	330c      	adds	r3, #12
 800668c:	7812      	ldrb	r2, [r2, #0]
 800668e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2201      	movs	r2, #1
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d119      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x2de>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d014      	beq.n	80066ee <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066ea:	2301      	movs	r3, #1
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066ee:	f7fd fad5 	bl	8003c9c <HAL_GetTick>
 80066f2:	0002      	movs	r2, r0
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d802      	bhi.n	8006704 <HAL_SPI_TransmitReceive+0x2f4>
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	3301      	adds	r3, #1
 8006702:	d102      	bne.n	800670a <HAL_SPI_TransmitReceive+0x2fa>
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800670a:	232b      	movs	r3, #43	; 0x2b
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	2203      	movs	r2, #3
 8006710:	701a      	strb	r2, [r3, #0]
        goto error;
 8006712:	e02a      	b.n	800676a <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1a2      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x254>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d19d      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	0018      	movs	r0, r3
 8006730:	f000 f89a 	bl	8006868 <SPI_EndRxTxTransaction>
 8006734:	1e03      	subs	r3, r0, #0
 8006736:	d007      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8006738:	232b      	movs	r3, #43	; 0x2b
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006746:	e010      	b.n	800676a <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	e000      	b.n	800676a <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8006768:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2251      	movs	r2, #81	; 0x51
 800676e:	2101      	movs	r1, #1
 8006770:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2250      	movs	r2, #80	; 0x50
 8006776:	2100      	movs	r1, #0
 8006778:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800677a:	232b      	movs	r3, #43	; 0x2b
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	781b      	ldrb	r3, [r3, #0]
}
 8006780:	0018      	movs	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	b00c      	add	sp, #48	; 0x30
 8006786:	bd80      	pop	{r7, pc}

08006788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	1dfb      	adds	r3, r7, #7
 8006796:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006798:	e050      	b.n	800683c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	d04d      	beq.n	800683c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80067a0:	f7fd fa7c 	bl	8003c9c <HAL_GetTick>
 80067a4:	0002      	movs	r2, r0
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d902      	bls.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d142      	bne.n	800683c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	21e0      	movs	r1, #224	; 0xe0
 80067c2:	438a      	bics	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	2382      	movs	r3, #130	; 0x82
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d113      	bne.n	80067fa <SPI_WaitFlagStateUntilTimeout+0x72>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	429a      	cmp	r2, r3
 80067dc:	d005      	beq.n	80067ea <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d107      	bne.n	80067fa <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2140      	movs	r1, #64	; 0x40
 80067f6:	438a      	bics	r2, r1
 80067f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	019b      	lsls	r3, r3, #6
 8006802:	429a      	cmp	r2, r3
 8006804:	d110      	bne.n	8006828 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4914      	ldr	r1, [pc, #80]	; (8006864 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8006812:	400a      	ands	r2, r1
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2180      	movs	r1, #128	; 0x80
 8006822:	0189      	lsls	r1, r1, #6
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2251      	movs	r2, #81	; 0x51
 800682c:	2101      	movs	r1, #1
 800682e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2250      	movs	r2, #80	; 0x50
 8006834:	2100      	movs	r1, #0
 8006836:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e00f      	b.n	800685c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	4013      	ands	r3, r2
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	425a      	negs	r2, r3
 800684c:	4153      	adcs	r3, r2
 800684e:	b2db      	uxtb	r3, r3
 8006850:	001a      	movs	r2, r3
 8006852:	1dfb      	adds	r3, r7, #7
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d19f      	bne.n	800679a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	0018      	movs	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	b004      	add	sp, #16
 8006862:	bd80      	pop	{r7, pc}
 8006864:	ffffdfff 	.word	0xffffdfff

08006868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	2382      	movs	r3, #130	; 0x82
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	429a      	cmp	r2, r3
 800687e:	d112      	bne.n	80068a6 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	0013      	movs	r3, r2
 800688a:	2200      	movs	r2, #0
 800688c:	2180      	movs	r1, #128	; 0x80
 800688e:	f7ff ff7b 	bl	8006788 <SPI_WaitFlagStateUntilTimeout>
 8006892:	1e03      	subs	r3, r0, #0
 8006894:	d020      	beq.n	80068d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	2220      	movs	r2, #32
 800689c:	431a      	orrs	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e019      	b.n	80068da <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2251      	movs	r2, #81	; 0x51
 80068aa:	5c9b      	ldrb	r3, [r3, r2]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d112      	bne.n	80068d8 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	0013      	movs	r3, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	2101      	movs	r1, #1
 80068c0:	f7ff ff62 	bl	8006788 <SPI_WaitFlagStateUntilTimeout>
 80068c4:	1e03      	subs	r3, r0, #0
 80068c6:	d007      	beq.n	80068d8 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068cc:	2220      	movs	r2, #32
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e000      	b.n	80068da <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	0018      	movs	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	b004      	add	sp, #16
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e044      	b.n	8006980 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d107      	bne.n	800690e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2270      	movs	r2, #112	; 0x70
 8006902:	2100      	movs	r1, #0
 8006904:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	0018      	movs	r0, r3
 800690a:	f7fd f8c3 	bl	8003a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2224      	movs	r2, #36	; 0x24
 8006912:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2101      	movs	r1, #1
 8006920:	438a      	bics	r2, r1
 8006922:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0018      	movs	r0, r3
 8006928:	f000 fabe 	bl	8006ea8 <UART_SetConfig>
 800692c:	0003      	movs	r3, r0
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e024      	b.n	8006980 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0018      	movs	r0, r3
 8006942:	f000 fde5 	bl	8007510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	490d      	ldr	r1, [pc, #52]	; (8006988 <HAL_UART_Init+0xa4>)
 8006952:	400a      	ands	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	212a      	movs	r1, #42	; 0x2a
 8006962:	438a      	bics	r2, r1
 8006964:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2101      	movs	r1, #1
 8006972:	430a      	orrs	r2, r1
 8006974:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0018      	movs	r0, r3
 800697a:	f000 fe7d 	bl	8007678 <UART_CheckIdleState>
 800697e:	0003      	movs	r3, r0
}
 8006980:	0018      	movs	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	b002      	add	sp, #8
 8006986:	bd80      	pop	{r7, pc}
 8006988:	ffffb7ff 	.word	0xffffb7ff

0800698c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	1dbb      	adds	r3, r7, #6
 800699a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d000      	beq.n	80069a6 <HAL_UART_Transmit+0x1a>
 80069a4:	e094      	b.n	8006ad0 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_UART_Transmit+0x28>
 80069ac:	1dbb      	adds	r3, r7, #6
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e08c      	b.n	8006ad2 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	015b      	lsls	r3, r3, #5
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d109      	bne.n	80069d8 <HAL_UART_Transmit+0x4c>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2201      	movs	r2, #1
 80069d0:	4013      	ands	r3, r2
 80069d2:	d001      	beq.n	80069d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e07c      	b.n	8006ad2 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2270      	movs	r2, #112	; 0x70
 80069dc:	5c9b      	ldrb	r3, [r3, r2]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_UART_Transmit+0x5a>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e075      	b.n	8006ad2 <HAL_UART_Transmit+0x146>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2270      	movs	r2, #112	; 0x70
 80069ea:	2101      	movs	r1, #1
 80069ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2221      	movs	r2, #33	; 0x21
 80069f8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80069fa:	f7fd f94f 	bl	8003c9c <HAL_GetTick>
 80069fe:	0003      	movs	r3, r0
 8006a00:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1dba      	adds	r2, r7, #6
 8006a06:	2150      	movs	r1, #80	; 0x50
 8006a08:	8812      	ldrh	r2, [r2, #0]
 8006a0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	1dba      	adds	r2, r7, #6
 8006a10:	2152      	movs	r1, #82	; 0x52
 8006a12:	8812      	ldrh	r2, [r2, #0]
 8006a14:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	2380      	movs	r3, #128	; 0x80
 8006a1c:	015b      	lsls	r3, r3, #5
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d108      	bne.n	8006a34 <HAL_UART_Transmit+0xa8>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	e003      	b.n	8006a3c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a3c:	e02c      	b.n	8006a98 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	0013      	movs	r3, r2
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2180      	movs	r1, #128	; 0x80
 8006a4c:	f000 fe5a 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8006a50:	1e03      	subs	r3, r0, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e03c      	b.n	8006ad2 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10b      	bne.n	8006a76 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	001a      	movs	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	05d2      	lsls	r2, r2, #23
 8006a6a:	0dd2      	lsrs	r2, r2, #23
 8006a6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	3302      	adds	r3, #2
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e007      	b.n	8006a86 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	781a      	ldrb	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	3301      	adds	r3, #1
 8006a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2252      	movs	r2, #82	; 0x52
 8006a8a:	5a9b      	ldrh	r3, [r3, r2]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b299      	uxth	r1, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2252      	movs	r2, #82	; 0x52
 8006a96:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2252      	movs	r2, #82	; 0x52
 8006a9c:	5a9b      	ldrh	r3, [r3, r2]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1cc      	bne.n	8006a3e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	0013      	movs	r3, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2140      	movs	r1, #64	; 0x40
 8006ab2:	f000 fe27 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8006ab6:	1e03      	subs	r3, r0, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e009      	b.n	8006ad2 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2270      	movs	r2, #112	; 0x70
 8006ac8:	2100      	movs	r1, #0
 8006aca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b008      	add	sp, #32
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	1dbb      	adds	r3, r7, #6
 8006ae8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d000      	beq.n	8006af4 <HAL_UART_Receive_IT+0x18>
 8006af2:	e09f      	b.n	8006c34 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_UART_Receive_IT+0x26>
 8006afa:	1dbb      	adds	r3, r7, #6
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e097      	b.n	8006c36 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	2380      	movs	r3, #128	; 0x80
 8006b0c:	015b      	lsls	r3, r3, #5
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d109      	bne.n	8006b26 <HAL_UART_Receive_IT+0x4a>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d105      	bne.n	8006b26 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	4013      	ands	r3, r2
 8006b20:	d001      	beq.n	8006b26 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e087      	b.n	8006c36 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2270      	movs	r2, #112	; 0x70
 8006b2a:	5c9b      	ldrb	r3, [r3, r2]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_UART_Receive_IT+0x58>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e080      	b.n	8006c36 <HAL_UART_Receive_IT+0x15a>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2270      	movs	r2, #112	; 0x70
 8006b38:	2101      	movs	r1, #1
 8006b3a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1dba      	adds	r2, r7, #6
 8006b46:	2158      	movs	r1, #88	; 0x58
 8006b48:	8812      	ldrh	r2, [r2, #0]
 8006b4a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1dba      	adds	r2, r7, #6
 8006b50:	215a      	movs	r1, #90	; 0x5a
 8006b52:	8812      	ldrh	r2, [r2, #0]
 8006b54:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	2380      	movs	r3, #128	; 0x80
 8006b62:	015b      	lsls	r3, r3, #5
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d10d      	bne.n	8006b84 <HAL_UART_Receive_IT+0xa8>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <HAL_UART_Receive_IT+0x9e>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	225c      	movs	r2, #92	; 0x5c
 8006b74:	4932      	ldr	r1, [pc, #200]	; (8006c40 <HAL_UART_Receive_IT+0x164>)
 8006b76:	5299      	strh	r1, [r3, r2]
 8006b78:	e02e      	b.n	8006bd8 <HAL_UART_Receive_IT+0xfc>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	225c      	movs	r2, #92	; 0x5c
 8006b7e:	21ff      	movs	r1, #255	; 0xff
 8006b80:	5299      	strh	r1, [r3, r2]
 8006b82:	e029      	b.n	8006bd8 <HAL_UART_Receive_IT+0xfc>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10d      	bne.n	8006ba8 <HAL_UART_Receive_IT+0xcc>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <HAL_UART_Receive_IT+0xc2>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	225c      	movs	r2, #92	; 0x5c
 8006b98:	21ff      	movs	r1, #255	; 0xff
 8006b9a:	5299      	strh	r1, [r3, r2]
 8006b9c:	e01c      	b.n	8006bd8 <HAL_UART_Receive_IT+0xfc>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	225c      	movs	r2, #92	; 0x5c
 8006ba2:	217f      	movs	r1, #127	; 0x7f
 8006ba4:	5299      	strh	r1, [r3, r2]
 8006ba6:	e017      	b.n	8006bd8 <HAL_UART_Receive_IT+0xfc>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	055b      	lsls	r3, r3, #21
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d10d      	bne.n	8006bd0 <HAL_UART_Receive_IT+0xf4>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <HAL_UART_Receive_IT+0xea>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	225c      	movs	r2, #92	; 0x5c
 8006bc0:	217f      	movs	r1, #127	; 0x7f
 8006bc2:	5299      	strh	r1, [r3, r2]
 8006bc4:	e008      	b.n	8006bd8 <HAL_UART_Receive_IT+0xfc>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	225c      	movs	r2, #92	; 0x5c
 8006bca:	213f      	movs	r1, #63	; 0x3f
 8006bcc:	5299      	strh	r1, [r3, r2]
 8006bce:	e003      	b.n	8006bd8 <HAL_UART_Receive_IT+0xfc>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	225c      	movs	r2, #92	; 0x5c
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2222      	movs	r2, #34	; 0x22
 8006be2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2101      	movs	r1, #1
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	2380      	movs	r3, #128	; 0x80
 8006bfa:	015b      	lsls	r3, r3, #5
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d107      	bne.n	8006c10 <HAL_UART_Receive_IT+0x134>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d103      	bne.n	8006c10 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a0e      	ldr	r2, [pc, #56]	; (8006c44 <HAL_UART_Receive_IT+0x168>)
 8006c0c:	661a      	str	r2, [r3, #96]	; 0x60
 8006c0e:	e002      	b.n	8006c16 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a0d      	ldr	r2, [pc, #52]	; (8006c48 <HAL_UART_Receive_IT+0x16c>)
 8006c14:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2270      	movs	r2, #112	; 0x70
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2190      	movs	r1, #144	; 0x90
 8006c2a:	0049      	lsls	r1, r1, #1
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	0018      	movs	r0, r3
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b004      	add	sp, #16
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	000001ff 	.word	0x000001ff
 8006c44:	080078f9 	.word	0x080078f9
 8006c48:	0800783d 	.word	0x0800783d

08006c4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	220f      	movs	r2, #15
 8006c70:	4013      	ands	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d112      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d00e      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2220      	movs	r2, #32
 8006c86:	4013      	ands	r3, r2
 8006c88:	d00a      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d100      	bne.n	8006c94 <HAL_UART_IRQHandler+0x48>
 8006c92:	e0f6      	b.n	8006e82 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	0010      	movs	r0, r2
 8006c9c:	4798      	blx	r3
      }
      return;
 8006c9e:	e0f0      	b.n	8006e82 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d100      	bne.n	8006ca8 <HAL_UART_IRQHandler+0x5c>
 8006ca6:	e0b8      	b.n	8006e1a <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2201      	movs	r2, #1
 8006cac:	4013      	ands	r3, r2
 8006cae:	d105      	bne.n	8006cbc <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	2390      	movs	r3, #144	; 0x90
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	d100      	bne.n	8006cbc <HAL_UART_IRQHandler+0x70>
 8006cba:	e0ae      	b.n	8006e1a <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	d00e      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x96>
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	2380      	movs	r3, #128	; 0x80
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d009      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x96>
    {

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cda:	2201      	movs	r2, #1
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	d00d      	beq.n	8006d06 <HAL_UART_IRQHandler+0xba>
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2201      	movs	r2, #1
 8006cee:	4013      	ands	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_UART_IRQHandler+0xba>
    {
    	 // log_info("error frame stm32l0xx_hal_uart L2245");

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfe:	2204      	movs	r2, #4
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d00d      	beq.n	8006d2a <HAL_UART_IRQHandler+0xde>
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2201      	movs	r2, #1
 8006d12:	4013      	ands	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d22:	2202      	movs	r2, #2
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d011      	beq.n	8006d56 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2220      	movs	r2, #32
 8006d36:	4013      	ands	r3, r2
 8006d38:	d103      	bne.n	8006d42 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d40:	d009      	beq.n	8006d56 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2208      	movs	r2, #8
 8006d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4e:	2208      	movs	r2, #8
 8006d50:	431a      	orrs	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d100      	bne.n	8006d60 <HAL_UART_IRQHandler+0x114>
 8006d5e:	e092      	b.n	8006e86 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2220      	movs	r2, #32
 8006d64:	4013      	ands	r3, r2
 8006d66:	d00c      	beq.n	8006d82 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d008      	beq.n	8006d82 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	0010      	movs	r0, r2
 8006d80:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d86:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2240      	movs	r2, #64	; 0x40
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d003      	beq.n	8006d9e <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2208      	movs	r2, #8
 8006d9a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d9c:	d033      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	0018      	movs	r0, r3
 8006da2:	f000 fcf9 	bl	8007798 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2240      	movs	r2, #64	; 0x40
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d123      	bne.n	8006dfc <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2140      	movs	r1, #64	; 0x40
 8006dc0:	438a      	bics	r2, r1
 8006dc2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d012      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd0:	4a30      	ldr	r2, [pc, #192]	; (8006e94 <HAL_UART_IRQHandler+0x248>)
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f7fd faf7 	bl	80043cc <HAL_DMA_Abort_IT>
 8006dde:	1e03      	subs	r3, r0, #0
 8006de0:	d019      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dec:	0018      	movs	r0, r3
 8006dee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df0:	e011      	b.n	8006e16 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	0018      	movs	r0, r3
 8006df6:	f01e fa45 	bl	8025284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfa:	e00c      	b.n	8006e16 <HAL_UART_IRQHandler+0x1ca>
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/

          HAL_UART_ErrorCallback(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f01e fa40 	bl	8025284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e04:	e007      	b.n	8006e16 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	0018      	movs	r0, r3
 8006e0a:	f01e fa3b 	bl	8025284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006e14:	e037      	b.n	8006e86 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e16:	46c0      	nop			; (mov r8, r8)
    return;
 8006e18:	e035      	b.n	8006e86 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	2380      	movs	r3, #128	; 0x80
 8006e1e:	035b      	lsls	r3, r3, #13
 8006e20:	4013      	ands	r3, r2
 8006e22:	d00e      	beq.n	8006e42 <HAL_UART_IRQHandler+0x1f6>
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	2380      	movs	r3, #128	; 0x80
 8006e28:	03db      	lsls	r3, r3, #15
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	0352      	lsls	r2, r2, #13
 8006e36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f01e fd42 	bl	80258c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e40:	e024      	b.n	8006e8c <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	2280      	movs	r2, #128	; 0x80
 8006e46:	4013      	ands	r3, r2
 8006e48:	d00d      	beq.n	8006e66 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2280      	movs	r2, #128	; 0x80
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d017      	beq.n	8006e8a <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	0010      	movs	r0, r2
 8006e62:	4798      	blx	r3
    }
    return;
 8006e64:	e011      	b.n	8006e8a <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d00e      	beq.n	8006e8c <HAL_UART_IRQHandler+0x240>
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2240      	movs	r2, #64	; 0x40
 8006e72:	4013      	ands	r3, r2
 8006e74:	d00a      	beq.n	8006e8c <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f000 fcc4 	bl	8007806 <UART_EndTransmit_IT>
    return;
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	e004      	b.n	8006e8c <HAL_UART_IRQHandler+0x240>
      return;
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	e002      	b.n	8006e8c <HAL_UART_IRQHandler+0x240>
    return;
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	e000      	b.n	8006e8c <HAL_UART_IRQHandler+0x240>
    return;
 8006e8a:	46c0      	nop			; (mov r8, r8)
  }

}
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b008      	add	sp, #32
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	080077d9 	.word	0x080077d9

08006e98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ea0:	46c0      	nop			; (mov r8, r8)
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b002      	add	sp, #8
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ea8:	b5b0      	push	{r4, r5, r7, lr}
 8006eaa:	b08e      	sub	sp, #56	; 0x38
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006eb0:	231b      	movs	r3, #27
 8006eb2:	2218      	movs	r2, #24
 8006eb4:	4694      	mov	ip, r2
 8006eb6:	44bc      	add	ip, r7
 8006eb8:	4463      	add	r3, ip
 8006eba:	2210      	movs	r2, #16
 8006ebc:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ec2:	2313      	movs	r3, #19
 8006ec4:	2218      	movs	r2, #24
 8006ec6:	4694      	mov	ip, r2
 8006ec8:	44bc      	add	ip, r7
 8006eca:	4463      	add	r3, ip
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	431a      	orrs	r2, r3
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4aca      	ldr	r2, [pc, #808]	; (800721c <UART_SetConfig+0x374>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efe:	430a      	orrs	r2, r1
 8006f00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4ac5      	ldr	r2, [pc, #788]	; (8007220 <UART_SetConfig+0x378>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	0019      	movs	r1, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4abf      	ldr	r2, [pc, #764]	; (8007224 <UART_SetConfig+0x37c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d004      	beq.n	8006f34 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f30:	4313      	orrs	r3, r2
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	4abb      	ldr	r2, [pc, #748]	; (8007228 <UART_SetConfig+0x380>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	0019      	movs	r1, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f46:	430a      	orrs	r2, r1
 8006f48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4ab7      	ldr	r2, [pc, #732]	; (800722c <UART_SetConfig+0x384>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d134      	bne.n	8006fbe <UART_SetConfig+0x116>
 8006f54:	4bb6      	ldr	r3, [pc, #728]	; (8007230 <UART_SetConfig+0x388>)
 8006f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f58:	2203      	movs	r2, #3
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d015      	beq.n	8006f8c <UART_SetConfig+0xe4>
 8006f60:	d304      	bcc.n	8006f6c <UART_SetConfig+0xc4>
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d00a      	beq.n	8006f7c <UART_SetConfig+0xd4>
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d018      	beq.n	8006f9c <UART_SetConfig+0xf4>
 8006f6a:	e01f      	b.n	8006fac <UART_SetConfig+0x104>
 8006f6c:	231b      	movs	r3, #27
 8006f6e:	2218      	movs	r2, #24
 8006f70:	4694      	mov	ip, r2
 8006f72:	44bc      	add	ip, r7
 8006f74:	4463      	add	r3, ip
 8006f76:	2201      	movs	r2, #1
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	e0c5      	b.n	8007108 <UART_SetConfig+0x260>
 8006f7c:	231b      	movs	r3, #27
 8006f7e:	2218      	movs	r2, #24
 8006f80:	4694      	mov	ip, r2
 8006f82:	44bc      	add	ip, r7
 8006f84:	4463      	add	r3, ip
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	e0bd      	b.n	8007108 <UART_SetConfig+0x260>
 8006f8c:	231b      	movs	r3, #27
 8006f8e:	2218      	movs	r2, #24
 8006f90:	4694      	mov	ip, r2
 8006f92:	44bc      	add	ip, r7
 8006f94:	4463      	add	r3, ip
 8006f96:	2204      	movs	r2, #4
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e0b5      	b.n	8007108 <UART_SetConfig+0x260>
 8006f9c:	231b      	movs	r3, #27
 8006f9e:	2218      	movs	r2, #24
 8006fa0:	4694      	mov	ip, r2
 8006fa2:	44bc      	add	ip, r7
 8006fa4:	4463      	add	r3, ip
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	e0ad      	b.n	8007108 <UART_SetConfig+0x260>
 8006fac:	231b      	movs	r3, #27
 8006fae:	2218      	movs	r2, #24
 8006fb0:	4694      	mov	ip, r2
 8006fb2:	44bc      	add	ip, r7
 8006fb4:	4463      	add	r3, ip
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	e0a4      	b.n	8007108 <UART_SetConfig+0x260>
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a9c      	ldr	r2, [pc, #624]	; (8007234 <UART_SetConfig+0x38c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d137      	bne.n	8007038 <UART_SetConfig+0x190>
 8006fc8:	4b99      	ldr	r3, [pc, #612]	; (8007230 <UART_SetConfig+0x388>)
 8006fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fcc:	220c      	movs	r2, #12
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d018      	beq.n	8007006 <UART_SetConfig+0x15e>
 8006fd4:	d802      	bhi.n	8006fdc <UART_SetConfig+0x134>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <UART_SetConfig+0x13e>
 8006fda:	e024      	b.n	8007026 <UART_SetConfig+0x17e>
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d00a      	beq.n	8006ff6 <UART_SetConfig+0x14e>
 8006fe0:	2b0c      	cmp	r3, #12
 8006fe2:	d018      	beq.n	8007016 <UART_SetConfig+0x16e>
 8006fe4:	e01f      	b.n	8007026 <UART_SetConfig+0x17e>
 8006fe6:	231b      	movs	r3, #27
 8006fe8:	2218      	movs	r2, #24
 8006fea:	4694      	mov	ip, r2
 8006fec:	44bc      	add	ip, r7
 8006fee:	4463      	add	r3, ip
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	e088      	b.n	8007108 <UART_SetConfig+0x260>
 8006ff6:	231b      	movs	r3, #27
 8006ff8:	2218      	movs	r2, #24
 8006ffa:	4694      	mov	ip, r2
 8006ffc:	44bc      	add	ip, r7
 8006ffe:	4463      	add	r3, ip
 8007000:	2202      	movs	r2, #2
 8007002:	701a      	strb	r2, [r3, #0]
 8007004:	e080      	b.n	8007108 <UART_SetConfig+0x260>
 8007006:	231b      	movs	r3, #27
 8007008:	2218      	movs	r2, #24
 800700a:	4694      	mov	ip, r2
 800700c:	44bc      	add	ip, r7
 800700e:	4463      	add	r3, ip
 8007010:	2204      	movs	r2, #4
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	e078      	b.n	8007108 <UART_SetConfig+0x260>
 8007016:	231b      	movs	r3, #27
 8007018:	2218      	movs	r2, #24
 800701a:	4694      	mov	ip, r2
 800701c:	44bc      	add	ip, r7
 800701e:	4463      	add	r3, ip
 8007020:	2208      	movs	r2, #8
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e070      	b.n	8007108 <UART_SetConfig+0x260>
 8007026:	231b      	movs	r3, #27
 8007028:	2218      	movs	r2, #24
 800702a:	4694      	mov	ip, r2
 800702c:	44bc      	add	ip, r7
 800702e:	4463      	add	r3, ip
 8007030:	2210      	movs	r2, #16
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	46c0      	nop			; (mov r8, r8)
 8007036:	e067      	b.n	8007108 <UART_SetConfig+0x260>
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a7e      	ldr	r2, [pc, #504]	; (8007238 <UART_SetConfig+0x390>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d107      	bne.n	8007052 <UART_SetConfig+0x1aa>
 8007042:	231b      	movs	r3, #27
 8007044:	2218      	movs	r2, #24
 8007046:	4694      	mov	ip, r2
 8007048:	44bc      	add	ip, r7
 800704a:	4463      	add	r3, ip
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e05a      	b.n	8007108 <UART_SetConfig+0x260>
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a79      	ldr	r2, [pc, #484]	; (800723c <UART_SetConfig+0x394>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d107      	bne.n	800706c <UART_SetConfig+0x1c4>
 800705c:	231b      	movs	r3, #27
 800705e:	2218      	movs	r2, #24
 8007060:	4694      	mov	ip, r2
 8007062:	44bc      	add	ip, r7
 8007064:	4463      	add	r3, ip
 8007066:	2200      	movs	r2, #0
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	e04d      	b.n	8007108 <UART_SetConfig+0x260>
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a6c      	ldr	r2, [pc, #432]	; (8007224 <UART_SetConfig+0x37c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d141      	bne.n	80070fa <UART_SetConfig+0x252>
 8007076:	4b6e      	ldr	r3, [pc, #440]	; (8007230 <UART_SetConfig+0x388>)
 8007078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800707a:	23c0      	movs	r3, #192	; 0xc0
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	4013      	ands	r3, r2
 8007080:	2280      	movs	r2, #128	; 0x80
 8007082:	00d2      	lsls	r2, r2, #3
 8007084:	4293      	cmp	r3, r2
 8007086:	d01f      	beq.n	80070c8 <UART_SetConfig+0x220>
 8007088:	2280      	movs	r2, #128	; 0x80
 800708a:	00d2      	lsls	r2, r2, #3
 800708c:	4293      	cmp	r3, r2
 800708e:	d802      	bhi.n	8007096 <UART_SetConfig+0x1ee>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <UART_SetConfig+0x200>
 8007094:	e028      	b.n	80070e8 <UART_SetConfig+0x240>
 8007096:	2280      	movs	r2, #128	; 0x80
 8007098:	0112      	lsls	r2, r2, #4
 800709a:	4293      	cmp	r3, r2
 800709c:	d00c      	beq.n	80070b8 <UART_SetConfig+0x210>
 800709e:	22c0      	movs	r2, #192	; 0xc0
 80070a0:	0112      	lsls	r2, r2, #4
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d018      	beq.n	80070d8 <UART_SetConfig+0x230>
 80070a6:	e01f      	b.n	80070e8 <UART_SetConfig+0x240>
 80070a8:	231b      	movs	r3, #27
 80070aa:	2218      	movs	r2, #24
 80070ac:	4694      	mov	ip, r2
 80070ae:	44bc      	add	ip, r7
 80070b0:	4463      	add	r3, ip
 80070b2:	2200      	movs	r2, #0
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	e027      	b.n	8007108 <UART_SetConfig+0x260>
 80070b8:	231b      	movs	r3, #27
 80070ba:	2218      	movs	r2, #24
 80070bc:	4694      	mov	ip, r2
 80070be:	44bc      	add	ip, r7
 80070c0:	4463      	add	r3, ip
 80070c2:	2202      	movs	r2, #2
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	e01f      	b.n	8007108 <UART_SetConfig+0x260>
 80070c8:	231b      	movs	r3, #27
 80070ca:	2218      	movs	r2, #24
 80070cc:	4694      	mov	ip, r2
 80070ce:	44bc      	add	ip, r7
 80070d0:	4463      	add	r3, ip
 80070d2:	2204      	movs	r2, #4
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e017      	b.n	8007108 <UART_SetConfig+0x260>
 80070d8:	231b      	movs	r3, #27
 80070da:	2218      	movs	r2, #24
 80070dc:	4694      	mov	ip, r2
 80070de:	44bc      	add	ip, r7
 80070e0:	4463      	add	r3, ip
 80070e2:	2208      	movs	r2, #8
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e00f      	b.n	8007108 <UART_SetConfig+0x260>
 80070e8:	231b      	movs	r3, #27
 80070ea:	2218      	movs	r2, #24
 80070ec:	4694      	mov	ip, r2
 80070ee:	44bc      	add	ip, r7
 80070f0:	4463      	add	r3, ip
 80070f2:	2210      	movs	r2, #16
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	e006      	b.n	8007108 <UART_SetConfig+0x260>
 80070fa:	231b      	movs	r3, #27
 80070fc:	2218      	movs	r2, #24
 80070fe:	4694      	mov	ip, r2
 8007100:	44bc      	add	ip, r7
 8007102:	4463      	add	r3, ip
 8007104:	2210      	movs	r2, #16
 8007106:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a45      	ldr	r2, [pc, #276]	; (8007224 <UART_SetConfig+0x37c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d000      	beq.n	8007114 <UART_SetConfig+0x26c>
 8007112:	e09d      	b.n	8007250 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007114:	231b      	movs	r3, #27
 8007116:	2218      	movs	r2, #24
 8007118:	4694      	mov	ip, r2
 800711a:	44bc      	add	ip, r7
 800711c:	4463      	add	r3, ip
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b02      	cmp	r3, #2
 8007122:	d00d      	beq.n	8007140 <UART_SetConfig+0x298>
 8007124:	dc02      	bgt.n	800712c <UART_SetConfig+0x284>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <UART_SetConfig+0x28e>
 800712a:	e01d      	b.n	8007168 <UART_SetConfig+0x2c0>
 800712c:	2b04      	cmp	r3, #4
 800712e:	d012      	beq.n	8007156 <UART_SetConfig+0x2ae>
 8007130:	2b08      	cmp	r3, #8
 8007132:	d015      	beq.n	8007160 <UART_SetConfig+0x2b8>
 8007134:	e018      	b.n	8007168 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007136:	f7fe f92f 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 800713a:	0003      	movs	r3, r0
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800713e:	e01b      	b.n	8007178 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007140:	4b3b      	ldr	r3, [pc, #236]	; (8007230 <UART_SetConfig+0x388>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2210      	movs	r2, #16
 8007146:	4013      	ands	r3, r2
 8007148:	d002      	beq.n	8007150 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800714a:	4b3d      	ldr	r3, [pc, #244]	; (8007240 <UART_SetConfig+0x398>)
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800714e:	e013      	b.n	8007178 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007150:	4b3c      	ldr	r3, [pc, #240]	; (8007244 <UART_SetConfig+0x39c>)
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007154:	e010      	b.n	8007178 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007156:	f7fe f891 	bl	800527c <HAL_RCC_GetSysClockFreq>
 800715a:	0003      	movs	r3, r0
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800715e:	e00b      	b.n	8007178 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007160:	2380      	movs	r3, #128	; 0x80
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007166:	e007      	b.n	8007178 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007168:	2313      	movs	r3, #19
 800716a:	2218      	movs	r2, #24
 800716c:	4694      	mov	ip, r2
 800716e:	44bc      	add	ip, r7
 8007170:	4463      	add	r3, ip
 8007172:	2201      	movs	r2, #1
 8007174:	701a      	strb	r2, [r3, #0]
        break;
 8007176:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	2b00      	cmp	r3, #0
 800717c:	d100      	bne.n	8007180 <UART_SetConfig+0x2d8>
 800717e:	e1a6      	b.n	80074ce <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	0013      	movs	r3, r2
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	189b      	adds	r3, r3, r2
 800718a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718c:	429a      	cmp	r2, r3
 800718e:	d305      	bcc.n	800719c <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007198:	429a      	cmp	r2, r3
 800719a:	d907      	bls.n	80071ac <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 800719c:	2313      	movs	r3, #19
 800719e:	2218      	movs	r2, #24
 80071a0:	4694      	mov	ip, r2
 80071a2:	44bc      	add	ip, r7
 80071a4:	4463      	add	r3, ip
 80071a6:	2201      	movs	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e190      	b.n	80074ce <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	6939      	ldr	r1, [r7, #16]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	000b      	movs	r3, r1
 80071ba:	0e1b      	lsrs	r3, r3, #24
 80071bc:	0010      	movs	r0, r2
 80071be:	0205      	lsls	r5, r0, #8
 80071c0:	431d      	orrs	r5, r3
 80071c2:	000b      	movs	r3, r1
 80071c4:	021c      	lsls	r4, r3, #8
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	68b8      	ldr	r0, [r7, #8]
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	1900      	adds	r0, r0, r4
 80071d8:	4169      	adcs	r1, r5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	2300      	movs	r3, #0
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f7f9 f9a8 	bl	800053c <__aeabi_uldivmod>
 80071ec:	0003      	movs	r3, r0
 80071ee:	000c      	movs	r4, r1
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	4a14      	ldr	r2, [pc, #80]	; (8007248 <UART_SetConfig+0x3a0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d908      	bls.n	800720c <UART_SetConfig+0x364>
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	4a13      	ldr	r2, [pc, #76]	; (800724c <UART_SetConfig+0x3a4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d804      	bhi.n	800720c <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007208:	60da      	str	r2, [r3, #12]
 800720a:	e160      	b.n	80074ce <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 800720c:	2313      	movs	r3, #19
 800720e:	2218      	movs	r2, #24
 8007210:	4694      	mov	ip, r2
 8007212:	44bc      	add	ip, r7
 8007214:	4463      	add	r3, ip
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e158      	b.n	80074ce <UART_SetConfig+0x626>
 800721c:	efff69f3 	.word	0xefff69f3
 8007220:	ffffcfff 	.word	0xffffcfff
 8007224:	40004800 	.word	0x40004800
 8007228:	fffff4ff 	.word	0xfffff4ff
 800722c:	40013800 	.word	0x40013800
 8007230:	40021000 	.word	0x40021000
 8007234:	40004400 	.word	0x40004400
 8007238:	40004c00 	.word	0x40004c00
 800723c:	40005000 	.word	0x40005000
 8007240:	003d0900 	.word	0x003d0900
 8007244:	00f42400 	.word	0x00f42400
 8007248:	000002ff 	.word	0x000002ff
 800724c:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	429a      	cmp	r2, r3
 800725a:	d000      	beq.n	800725e <UART_SetConfig+0x3b6>
 800725c:	e0a9      	b.n	80073b2 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800725e:	231b      	movs	r3, #27
 8007260:	2218      	movs	r2, #24
 8007262:	4694      	mov	ip, r2
 8007264:	44bc      	add	ip, r7
 8007266:	4463      	add	r3, ip
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b08      	cmp	r3, #8
 800726c:	d86d      	bhi.n	800734a <UART_SetConfig+0x4a2>
 800726e:	009a      	lsls	r2, r3, #2
 8007270:	4b9f      	ldr	r3, [pc, #636]	; (80074f0 <UART_SetConfig+0x648>)
 8007272:	18d3      	adds	r3, r2, r3
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007278:	f7fe f88e 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 800727c:	0003      	movs	r3, r0
 800727e:	005a      	lsls	r2, r3, #1
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	085b      	lsrs	r3, r3, #1
 8007286:	18d2      	adds	r2, r2, r3
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	0019      	movs	r1, r3
 800728e:	0010      	movs	r0, r2
 8007290:	f7f8 ff42 	bl	8000118 <__udivsi3>
 8007294:	0003      	movs	r3, r0
 8007296:	b29b      	uxth	r3, r3
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800729a:	e05e      	b.n	800735a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800729c:	f7fe f892 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 80072a0:	0003      	movs	r3, r0
 80072a2:	005a      	lsls	r2, r3, #1
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	18d2      	adds	r2, r2, r3
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	0019      	movs	r1, r3
 80072b2:	0010      	movs	r0, r2
 80072b4:	f7f8 ff30 	bl	8000118 <__udivsi3>
 80072b8:	0003      	movs	r3, r0
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072be:	e04c      	b.n	800735a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c0:	4b8c      	ldr	r3, [pc, #560]	; (80074f4 <UART_SetConfig+0x64c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2210      	movs	r2, #16
 80072c6:	4013      	ands	r3, r2
 80072c8:	d00e      	beq.n	80072e8 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	4a89      	ldr	r2, [pc, #548]	; (80074f8 <UART_SetConfig+0x650>)
 80072d2:	189a      	adds	r2, r3, r2
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	0019      	movs	r1, r3
 80072da:	0010      	movs	r0, r2
 80072dc:	f7f8 ff1c 	bl	8000118 <__udivsi3>
 80072e0:	0003      	movs	r3, r0
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80072e6:	e038      	b.n	800735a <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	4a83      	ldr	r2, [pc, #524]	; (80074fc <UART_SetConfig+0x654>)
 80072f0:	189a      	adds	r2, r3, r2
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	0019      	movs	r1, r3
 80072f8:	0010      	movs	r0, r2
 80072fa:	f7f8 ff0d 	bl	8000118 <__udivsi3>
 80072fe:	0003      	movs	r3, r0
 8007300:	b29b      	uxth	r3, r3
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007304:	e029      	b.n	800735a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007306:	f7fd ffb9 	bl	800527c <HAL_RCC_GetSysClockFreq>
 800730a:	0003      	movs	r3, r0
 800730c:	005a      	lsls	r2, r3, #1
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	085b      	lsrs	r3, r3, #1
 8007314:	18d2      	adds	r2, r2, r3
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	0019      	movs	r1, r3
 800731c:	0010      	movs	r0, r2
 800731e:	f7f8 fefb 	bl	8000118 <__udivsi3>
 8007322:	0003      	movs	r3, r0
 8007324:	b29b      	uxth	r3, r3
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007328:	e017      	b.n	800735a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	2280      	movs	r2, #128	; 0x80
 8007332:	0252      	lsls	r2, r2, #9
 8007334:	189a      	adds	r2, r3, r2
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	0019      	movs	r1, r3
 800733c:	0010      	movs	r0, r2
 800733e:	f7f8 feeb 	bl	8000118 <__udivsi3>
 8007342:	0003      	movs	r3, r0
 8007344:	b29b      	uxth	r3, r3
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007348:	e007      	b.n	800735a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800734a:	2313      	movs	r3, #19
 800734c:	2218      	movs	r2, #24
 800734e:	4694      	mov	ip, r2
 8007350:	44bc      	add	ip, r7
 8007352:	4463      	add	r3, ip
 8007354:	2201      	movs	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
        break;
 8007358:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	2b0f      	cmp	r3, #15
 800735e:	d920      	bls.n	80073a2 <UART_SetConfig+0x4fa>
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	4a67      	ldr	r2, [pc, #412]	; (8007500 <UART_SetConfig+0x658>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d81c      	bhi.n	80073a2 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	b29a      	uxth	r2, r3
 800736c:	200a      	movs	r0, #10
 800736e:	2418      	movs	r4, #24
 8007370:	193b      	adds	r3, r7, r4
 8007372:	181b      	adds	r3, r3, r0
 8007374:	210f      	movs	r1, #15
 8007376:	438a      	bics	r2, r1
 8007378:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	b29b      	uxth	r3, r3
 8007380:	2207      	movs	r2, #7
 8007382:	4013      	ands	r3, r2
 8007384:	b299      	uxth	r1, r3
 8007386:	193b      	adds	r3, r7, r4
 8007388:	181b      	adds	r3, r3, r0
 800738a:	193a      	adds	r2, r7, r4
 800738c:	1812      	adds	r2, r2, r0
 800738e:	8812      	ldrh	r2, [r2, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	193a      	adds	r2, r7, r4
 800739a:	1812      	adds	r2, r2, r0
 800739c:	8812      	ldrh	r2, [r2, #0]
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	e095      	b.n	80074ce <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80073a2:	2313      	movs	r3, #19
 80073a4:	2218      	movs	r2, #24
 80073a6:	4694      	mov	ip, r2
 80073a8:	44bc      	add	ip, r7
 80073aa:	4463      	add	r3, ip
 80073ac:	2201      	movs	r2, #1
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	e08d      	b.n	80074ce <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 80073b2:	231b      	movs	r3, #27
 80073b4:	2218      	movs	r2, #24
 80073b6:	4694      	mov	ip, r2
 80073b8:	44bc      	add	ip, r7
 80073ba:	4463      	add	r3, ip
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d86a      	bhi.n	8007498 <UART_SetConfig+0x5f0>
 80073c2:	009a      	lsls	r2, r3, #2
 80073c4:	4b4f      	ldr	r3, [pc, #316]	; (8007504 <UART_SetConfig+0x65c>)
 80073c6:	18d3      	adds	r3, r2, r3
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80073cc:	f7fd ffe4 	bl	8005398 <HAL_RCC_GetPCLK1Freq>
 80073d0:	0002      	movs	r2, r0
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	18d2      	adds	r2, r2, r3
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	0019      	movs	r1, r3
 80073e0:	0010      	movs	r0, r2
 80073e2:	f7f8 fe99 	bl	8000118 <__udivsi3>
 80073e6:	0003      	movs	r3, r0
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073ec:	e05c      	b.n	80074a8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80073ee:	f7fd ffe9 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 80073f2:	0002      	movs	r2, r0
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	085b      	lsrs	r3, r3, #1
 80073fa:	18d2      	adds	r2, r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	0019      	movs	r1, r3
 8007402:	0010      	movs	r0, r2
 8007404:	f7f8 fe88 	bl	8000118 <__udivsi3>
 8007408:	0003      	movs	r3, r0
 800740a:	b29b      	uxth	r3, r3
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800740e:	e04b      	b.n	80074a8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007410:	4b38      	ldr	r3, [pc, #224]	; (80074f4 <UART_SetConfig+0x64c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2210      	movs	r2, #16
 8007416:	4013      	ands	r3, r2
 8007418:	d00e      	beq.n	8007438 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	4a39      	ldr	r2, [pc, #228]	; (8007508 <UART_SetConfig+0x660>)
 8007422:	189a      	adds	r2, r3, r2
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	0019      	movs	r1, r3
 800742a:	0010      	movs	r0, r2
 800742c:	f7f8 fe74 	bl	8000118 <__udivsi3>
 8007430:	0003      	movs	r3, r0
 8007432:	b29b      	uxth	r3, r3
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8007436:	e037      	b.n	80074a8 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	085b      	lsrs	r3, r3, #1
 800743e:	4a33      	ldr	r2, [pc, #204]	; (800750c <UART_SetConfig+0x664>)
 8007440:	189a      	adds	r2, r3, r2
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	0019      	movs	r1, r3
 8007448:	0010      	movs	r0, r2
 800744a:	f7f8 fe65 	bl	8000118 <__udivsi3>
 800744e:	0003      	movs	r3, r0
 8007450:	b29b      	uxth	r3, r3
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007454:	e028      	b.n	80074a8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007456:	f7fd ff11 	bl	800527c <HAL_RCC_GetSysClockFreq>
 800745a:	0002      	movs	r2, r0
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	18d2      	adds	r2, r2, r3
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	0019      	movs	r1, r3
 800746a:	0010      	movs	r0, r2
 800746c:	f7f8 fe54 	bl	8000118 <__udivsi3>
 8007470:	0003      	movs	r3, r0
 8007472:	b29b      	uxth	r3, r3
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007476:	e017      	b.n	80074a8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	085b      	lsrs	r3, r3, #1
 800747e:	2280      	movs	r2, #128	; 0x80
 8007480:	0212      	lsls	r2, r2, #8
 8007482:	189a      	adds	r2, r3, r2
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	0019      	movs	r1, r3
 800748a:	0010      	movs	r0, r2
 800748c:	f7f8 fe44 	bl	8000118 <__udivsi3>
 8007490:	0003      	movs	r3, r0
 8007492:	b29b      	uxth	r3, r3
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007496:	e007      	b.n	80074a8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007498:	2313      	movs	r3, #19
 800749a:	2218      	movs	r2, #24
 800749c:	4694      	mov	ip, r2
 800749e:	44bc      	add	ip, r7
 80074a0:	4463      	add	r3, ip
 80074a2:	2201      	movs	r2, #1
 80074a4:	701a      	strb	r2, [r3, #0]
        break;
 80074a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	d908      	bls.n	80074c0 <UART_SetConfig+0x618>
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	4a13      	ldr	r2, [pc, #76]	; (8007500 <UART_SetConfig+0x658>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d804      	bhi.n	80074c0 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074bc:	60da      	str	r2, [r3, #12]
 80074be:	e006      	b.n	80074ce <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 80074c0:	2313      	movs	r3, #19
 80074c2:	2218      	movs	r2, #24
 80074c4:	4694      	mov	ip, r2
 80074c6:	44bc      	add	ip, r7
 80074c8:	4463      	add	r3, ip
 80074ca:	2201      	movs	r2, #1
 80074cc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2200      	movs	r2, #0
 80074d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	2200      	movs	r2, #0
 80074d8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80074da:	2313      	movs	r3, #19
 80074dc:	2218      	movs	r2, #24
 80074de:	4694      	mov	ip, r2
 80074e0:	44bc      	add	ip, r7
 80074e2:	4463      	add	r3, ip
 80074e4:	781b      	ldrb	r3, [r3, #0]
}
 80074e6:	0018      	movs	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b00e      	add	sp, #56	; 0x38
 80074ec:	bdb0      	pop	{r4, r5, r7, pc}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	080277a8 	.word	0x080277a8
 80074f4:	40021000 	.word	0x40021000
 80074f8:	007a1200 	.word	0x007a1200
 80074fc:	01e84800 	.word	0x01e84800
 8007500:	0000ffff 	.word	0x0000ffff
 8007504:	080277cc 	.word	0x080277cc
 8007508:	003d0900 	.word	0x003d0900
 800750c:	00f42400 	.word	0x00f42400

08007510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2201      	movs	r2, #1
 800751e:	4013      	ands	r3, r2
 8007520:	d00b      	beq.n	800753a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	4a4a      	ldr	r2, [pc, #296]	; (8007654 <UART_AdvFeatureConfig+0x144>)
 800752a:	4013      	ands	r3, r2
 800752c:	0019      	movs	r1, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	2202      	movs	r2, #2
 8007540:	4013      	ands	r3, r2
 8007542:	d00b      	beq.n	800755c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4a43      	ldr	r2, [pc, #268]	; (8007658 <UART_AdvFeatureConfig+0x148>)
 800754c:	4013      	ands	r3, r2
 800754e:	0019      	movs	r1, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2204      	movs	r2, #4
 8007562:	4013      	ands	r3, r2
 8007564:	d00b      	beq.n	800757e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	4a3b      	ldr	r2, [pc, #236]	; (800765c <UART_AdvFeatureConfig+0x14c>)
 800756e:	4013      	ands	r3, r2
 8007570:	0019      	movs	r1, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	2208      	movs	r2, #8
 8007584:	4013      	ands	r3, r2
 8007586:	d00b      	beq.n	80075a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	4a34      	ldr	r2, [pc, #208]	; (8007660 <UART_AdvFeatureConfig+0x150>)
 8007590:	4013      	ands	r3, r2
 8007592:	0019      	movs	r1, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	2210      	movs	r2, #16
 80075a6:	4013      	ands	r3, r2
 80075a8:	d00b      	beq.n	80075c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4a2c      	ldr	r2, [pc, #176]	; (8007664 <UART_AdvFeatureConfig+0x154>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	0019      	movs	r1, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	2220      	movs	r2, #32
 80075c8:	4013      	ands	r3, r2
 80075ca:	d00b      	beq.n	80075e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	4a25      	ldr	r2, [pc, #148]	; (8007668 <UART_AdvFeatureConfig+0x158>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	0019      	movs	r1, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	2240      	movs	r2, #64	; 0x40
 80075ea:	4013      	ands	r3, r2
 80075ec:	d01d      	beq.n	800762a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4a1d      	ldr	r2, [pc, #116]	; (800766c <UART_AdvFeatureConfig+0x15c>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	0019      	movs	r1, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800760a:	2380      	movs	r3, #128	; 0x80
 800760c:	035b      	lsls	r3, r3, #13
 800760e:	429a      	cmp	r2, r3
 8007610:	d10b      	bne.n	800762a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	4a15      	ldr	r2, [pc, #84]	; (8007670 <UART_AdvFeatureConfig+0x160>)
 800761a:	4013      	ands	r3, r2
 800761c:	0019      	movs	r1, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2280      	movs	r2, #128	; 0x80
 8007630:	4013      	ands	r3, r2
 8007632:	d00b      	beq.n	800764c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	4a0e      	ldr	r2, [pc, #56]	; (8007674 <UART_AdvFeatureConfig+0x164>)
 800763c:	4013      	ands	r3, r2
 800763e:	0019      	movs	r1, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	605a      	str	r2, [r3, #4]
  }
}
 800764c:	46c0      	nop			; (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b002      	add	sp, #8
 8007652:	bd80      	pop	{r7, pc}
 8007654:	fffdffff 	.word	0xfffdffff
 8007658:	fffeffff 	.word	0xfffeffff
 800765c:	fffbffff 	.word	0xfffbffff
 8007660:	ffff7fff 	.word	0xffff7fff
 8007664:	ffffefff 	.word	0xffffefff
 8007668:	ffffdfff 	.word	0xffffdfff
 800766c:	ffefffff 	.word	0xffefffff
 8007670:	ff9fffff 	.word	0xff9fffff
 8007674:	fff7ffff 	.word	0xfff7ffff

08007678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af02      	add	r7, sp, #8
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007686:	f7fc fb09 	bl	8003c9c <HAL_GetTick>
 800768a:	0003      	movs	r3, r0
 800768c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2208      	movs	r2, #8
 8007696:	4013      	ands	r3, r2
 8007698:	2b08      	cmp	r3, #8
 800769a:	d10d      	bne.n	80076b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	2380      	movs	r3, #128	; 0x80
 80076a0:	0399      	lsls	r1, r3, #14
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4b16      	ldr	r3, [pc, #88]	; (8007700 <UART_CheckIdleState+0x88>)
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	0013      	movs	r3, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	f000 f82a 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 80076b0:	1e03      	subs	r3, r0, #0
 80076b2:	d001      	beq.n	80076b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e01f      	b.n	80076f8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2204      	movs	r2, #4
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d10d      	bne.n	80076e2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	03d9      	lsls	r1, r3, #15
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <UART_CheckIdleState+0x88>)
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	0013      	movs	r3, r2
 80076d4:	2200      	movs	r2, #0
 80076d6:	f000 f815 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 80076da:	1e03      	subs	r3, r0, #0
 80076dc:	d001      	beq.n	80076e2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e00a      	b.n	80076f8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2270      	movs	r2, #112	; 0x70
 80076f2:	2100      	movs	r1, #0
 80076f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	0018      	movs	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	b004      	add	sp, #16
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	01ffffff 	.word	0x01ffffff

08007704 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	1dfb      	adds	r3, r7, #7
 8007712:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007714:	e029      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	3301      	adds	r3, #1
 800771a:	d026      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771c:	f7fc fabe 	bl	8003c9c <HAL_GetTick>
 8007720:	0002      	movs	r2, r0
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <UART_WaitOnFlagUntilTimeout+0x2e>
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d11b      	bne.n	800776a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4915      	ldr	r1, [pc, #84]	; (8007794 <UART_WaitOnFlagUntilTimeout+0x90>)
 800773e:	400a      	ands	r2, r1
 8007740:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2101      	movs	r1, #1
 800774e:	438a      	bics	r2, r1
 8007750:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2220      	movs	r2, #32
 8007756:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2270      	movs	r2, #112	; 0x70
 8007762:	2100      	movs	r1, #0
 8007764:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e00f      	b.n	800778a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	4013      	ands	r3, r2
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	425a      	negs	r2, r3
 800777a:	4153      	adcs	r3, r2
 800777c:	b2db      	uxtb	r3, r3
 800777e:	001a      	movs	r2, r3
 8007780:	1dfb      	adds	r3, r7, #7
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d0c6      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	0018      	movs	r0, r3
 800778c:	46bd      	mov	sp, r7
 800778e:	b004      	add	sp, #16
 8007790:	bd80      	pop	{r7, pc}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	fffffe5f 	.word	0xfffffe5f

08007798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	490a      	ldr	r1, [pc, #40]	; (80077d4 <UART_EndRxTransfer+0x3c>)
 80077ac:	400a      	ands	r2, r1
 80077ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2101      	movs	r1, #1
 80077bc:	438a      	bics	r2, r1
 80077be:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	661a      	str	r2, [r3, #96]	; 0x60
}
 80077cc:	46c0      	nop			; (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b002      	add	sp, #8
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	fffffedf 	.word	0xfffffedf

080077d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	225a      	movs	r2, #90	; 0x5a
 80077ea:	2100      	movs	r1, #0
 80077ec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2252      	movs	r2, #82	; 0x52
 80077f2:	2100      	movs	r1, #0
 80077f4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	0018      	movs	r0, r3
 80077fa:	f01d fd43 	bl	8025284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	46bd      	mov	sp, r7
 8007802:	b004      	add	sp, #16
 8007804:	bd80      	pop	{r7, pc}

08007806 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2140      	movs	r1, #64	; 0x40
 800781a:	438a      	bics	r2, r1
 800781c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	0018      	movs	r0, r3
 800782e:	f7ff fb33 	bl	8006e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	46bd      	mov	sp, r7
 8007836:	b002      	add	sp, #8
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007844:	230e      	movs	r3, #14
 8007846:	18fb      	adds	r3, r7, r3
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	215c      	movs	r1, #92	; 0x5c
 800784c:	5a52      	ldrh	r2, [r2, r1]
 800784e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007854:	2b22      	cmp	r3, #34	; 0x22
 8007856:	d140      	bne.n	80078da <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800785e:	210c      	movs	r1, #12
 8007860:	187b      	adds	r3, r7, r1
 8007862:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007864:	187b      	adds	r3, r7, r1
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b2da      	uxtb	r2, r3
 800786a:	230e      	movs	r3, #14
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b2d9      	uxtb	r1, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	400a      	ands	r2, r1
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	225a      	movs	r2, #90	; 0x5a
 800788a:	5a9b      	ldrh	r3, [r3, r2]
 800788c:	b29b      	uxth	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	b299      	uxth	r1, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	225a      	movs	r2, #90	; 0x5a
 8007896:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	225a      	movs	r2, #90	; 0x5a
 800789c:	5a9b      	ldrh	r3, [r3, r2]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d122      	bne.n	80078ea <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4911      	ldr	r1, [pc, #68]	; (80078f4 <UART_RxISR_8BIT+0xb8>)
 80078b0:	400a      	ands	r2, r1
 80078b2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2101      	movs	r1, #1
 80078c0:	438a      	bics	r2, r1
 80078c2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	0018      	movs	r0, r3
 80078d4:	f01d fcea 	bl	80252ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078d8:	e007      	b.n	80078ea <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699a      	ldr	r2, [r3, #24]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2108      	movs	r1, #8
 80078e6:	430a      	orrs	r2, r1
 80078e8:	619a      	str	r2, [r3, #24]
}
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	46bd      	mov	sp, r7
 80078ee:	b004      	add	sp, #16
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	fffffedf 	.word	0xfffffedf

080078f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007900:	230e      	movs	r3, #14
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	215c      	movs	r1, #92	; 0x5c
 8007908:	5a52      	ldrh	r2, [r2, r1]
 800790a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007910:	2b22      	cmp	r3, #34	; 0x22
 8007912:	d140      	bne.n	8007996 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800791a:	210c      	movs	r1, #12
 800791c:	187b      	adds	r3, r7, r1
 800791e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007924:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007926:	187b      	adds	r3, r7, r1
 8007928:	220e      	movs	r2, #14
 800792a:	18ba      	adds	r2, r7, r2
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	8812      	ldrh	r2, [r2, #0]
 8007930:	4013      	ands	r3, r2
 8007932:	b29a      	uxth	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793c:	1c9a      	adds	r2, r3, #2
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	225a      	movs	r2, #90	; 0x5a
 8007946:	5a9b      	ldrh	r3, [r3, r2]
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b299      	uxth	r1, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	225a      	movs	r2, #90	; 0x5a
 8007952:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	225a      	movs	r2, #90	; 0x5a
 8007958:	5a9b      	ldrh	r3, [r3, r2]
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d122      	bne.n	80079a6 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4911      	ldr	r1, [pc, #68]	; (80079b0 <UART_RxISR_16BIT+0xb8>)
 800796c:	400a      	ands	r2, r1
 800796e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2101      	movs	r1, #1
 800797c:	438a      	bics	r2, r1
 800797e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	0018      	movs	r0, r3
 8007990:	f01d fc8c 	bl	80252ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007994:	e007      	b.n	80079a6 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2108      	movs	r1, #8
 80079a2:	430a      	orrs	r2, r1
 80079a4:	619a      	str	r2, [r3, #24]
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b004      	add	sp, #16
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	fffffedf 	.word	0xfffffedf

080079b4 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	1d3b      	adds	r3, r7, #4
 80079be:	6019      	str	r1, [r3, #0]
 80079c0:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079c2:	2317      	movs	r3, #23
 80079c4:	18fb      	adds	r3, r7, r3
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2270      	movs	r2, #112	; 0x70
 80079ce:	5c9b      	ldrb	r3, [r3, r2]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e04b      	b.n	8007a70 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xbc>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2270      	movs	r2, #112	; 0x70
 80079dc:	2101      	movs	r1, #1
 80079de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2224      	movs	r2, #36	; 0x24
 80079e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2101      	movs	r1, #1
 80079f2:	438a      	bics	r2, r1
 80079f4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 80079fe:	4013      	ands	r3, r2
 8007a00:	0019      	movs	r1, r3
 8007a02:	1d3b      	adds	r3, r7, #4
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007a0e:	1d3b      	adds	r3, r7, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007a16:	1d3b      	adds	r3, r7, #4
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	6819      	ldr	r1, [r3, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	f000 f84f 	bl	8007ac0 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a32:	f7fc f933 	bl	8003c9c <HAL_GetTick>
 8007a36:	0003      	movs	r3, r0
 8007a38:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	2380      	movs	r3, #128	; 0x80
 8007a3e:	03d9      	lsls	r1, r3, #15
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	4b0e      	ldr	r3, [pc, #56]	; (8007a7c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	0013      	movs	r3, r2
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f7ff fe5b 	bl	8007704 <UART_WaitOnFlagUntilTimeout>
 8007a4e:	1e03      	subs	r3, r0, #0
 8007a50:	d004      	beq.n	8007a5c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa8>
  {
    status = HAL_TIMEOUT;
 8007a52:	2317      	movs	r3, #23
 8007a54:	18fb      	adds	r3, r7, r3
 8007a56:	2203      	movs	r2, #3
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	e002      	b.n	8007a62 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2270      	movs	r2, #112	; 0x70
 8007a66:	2100      	movs	r1, #0
 8007a68:	5499      	strb	r1, [r3, r2]

  return status;
 8007a6a:	2317      	movs	r3, #23
 8007a6c:	18fb      	adds	r3, r7, r3
 8007a6e:	781b      	ldrb	r3, [r3, #0]
}
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b006      	add	sp, #24
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	ffcfffff 	.word	0xffcfffff
 8007a7c:	01ffffff 	.word	0x01ffffff

08007a80 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2270      	movs	r2, #112	; 0x70
 8007a8c:	5c9b      	ldrb	r3, [r3, r2]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <HAL_UARTEx_EnableStopMode+0x16>
 8007a92:	2302      	movs	r3, #2
 8007a94:	e010      	b.n	8007ab8 <HAL_UARTEx_EnableStopMode+0x38>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2270      	movs	r2, #112	; 0x70
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2102      	movs	r1, #2
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2270      	movs	r2, #112	; 0x70
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	0018      	movs	r0, r3
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b002      	add	sp, #8
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	6019      	str	r1, [r3, #0]
 8007acc:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	4393      	bics	r3, r2
 8007ad8:	001a      	movs	r2, r3
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	889b      	ldrh	r3, [r3, #4]
 8007ade:	0019      	movs	r1, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	0a19      	lsrs	r1, r3, #8
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	799b      	ldrb	r3, [r3, #6]
 8007af6:	061a      	lsls	r2, r3, #24
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
}
 8007b00:	46c0      	nop			; (mov r8, r8)
 8007b02:	46bd      	mov	sp, r7
 8007b04:	b004      	add	sp, #16
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <lorawan_driver_loop>:
 * lorawan loop : process the LoRaMac
 * This need to be called as much as possible.
 * in Sync mode the function is call by the waitUntilEndOfExecution
 * when switch in async mode you need to call this function as much as possible
 */
void lorawan_driver_loop() {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0

	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007b0c:	e004      	b.n	8007b18 <lorawan_driver_loop+0x10>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
			&& __loraWanState.reqPending ) {
		__loraWanState.reqPending=false;
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <lorawan_driver_loop+0x34>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	721a      	strb	r2, [r3, #8]
        LoRaMacProcess( );
 8007b14:	f002 fc50 	bl	800a3b8 <LoRaMacProcess>
	while (    __loraWanState.joinState != LORAWAN_STATE_NONE
 8007b18:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <lorawan_driver_loop+0x34>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <lorawan_driver_loop+0x2c>
			&& __loraWanState.joinState != LORAWAN_STATE_INITIALIZED
 8007b22:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <lorawan_driver_loop+0x34>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d003      	beq.n	8007b34 <lorawan_driver_loop+0x2c>
			&& __loraWanState.reqPending ) {
 8007b2c:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <lorawan_driver_loop+0x34>)
 8007b2e:	7a1b      	ldrb	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1ec      	bne.n	8007b0e <lorawan_driver_loop+0x6>
	}

}
 8007b34:	46c0      	nop			; (mov r8, r8)
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	46c0      	nop			; (mov r8, r8)
 8007b3c:	200000e8 	.word	0x200000e8

08007b40 <lorawan_driver_LORA_getJoinState>:

/**
 * Return the current JoinState - use to follow the async join procedure
 * if used in polling mode
 */
lorawan_driver_joinState lorawan_driver_LORA_getJoinState(){
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWAN(("lorawan_driver_LORA_getJoinState\r\n"));
	return __loraWanState.joinState;
 8007b44:	4b02      	ldr	r3, [pc, #8]	; (8007b50 <lorawan_driver_LORA_getJoinState+0x10>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	b2db      	uxtb	r3, r3
}
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200000e8 	.word	0x200000e8

08007b54 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781a      	ldrb	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	7852      	ldrb	r2, [r2, #1]
 8007b6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3302      	adds	r3, #2
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	7892      	ldrb	r2, [r2, #2]
 8007b78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3303      	adds	r3, #3
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	78d2      	ldrb	r2, [r2, #3]
 8007b82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	7912      	ldrb	r2, [r2, #4]
 8007b8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3305      	adds	r3, #5
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	7952      	ldrb	r2, [r2, #5]
 8007b96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3306      	adds	r3, #6
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	7992      	ldrb	r2, [r2, #6]
 8007ba0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3307      	adds	r3, #7
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	79d2      	ldrb	r2, [r2, #7]
 8007baa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	7a12      	ldrb	r2, [r2, #8]
 8007bb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3309      	adds	r3, #9
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	7a52      	ldrb	r2, [r2, #9]
 8007bbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	330a      	adds	r3, #10
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	7a92      	ldrb	r2, [r2, #10]
 8007bc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	330b      	adds	r3, #11
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	7ad2      	ldrb	r2, [r2, #11]
 8007bd2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	7b12      	ldrb	r2, [r2, #12]
 8007bdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	330d      	adds	r3, #13
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	7b52      	ldrb	r2, [r2, #13]
 8007be6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	330e      	adds	r3, #14
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	7b92      	ldrb	r2, [r2, #14]
 8007bf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	330f      	adds	r3, #15
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	7bd2      	ldrb	r2, [r2, #15]
 8007bfa:	701a      	strb	r2, [r3, #0]
#endif
}
 8007bfc:	46c0      	nop			; (mov r8, r8)
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b002      	add	sp, #8
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	1dfb      	adds	r3, r7, #7
 8007c10:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007c12:	e007      	b.n	8007c24 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	1c53      	adds	r3, r2, #1
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	1c59      	adds	r1, r3, #1
 8007c1e:	60f9      	str	r1, [r7, #12]
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 8007c24:	1dfb      	adds	r3, r7, #7
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	1dfa      	adds	r2, r7, #7
 8007c2a:	1e59      	subs	r1, r3, #1
 8007c2c:	7011      	strb	r1, [r2, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f0      	bne.n	8007c14 <copy_block_nn+0x10>
}
 8007c32:	46c0      	nop			; (mov r8, r8)
 8007c34:	46bd      	mov	sp, r7
 8007c36:	b004      	add	sp, #16
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <xor_block>:

static void xor_block( void *d, const void *s )
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	781a      	ldrb	r2, [r3, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	4053      	eors	r3, r2
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	7819      	ldrb	r1, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	781a      	ldrb	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3301      	adds	r3, #1
 8007c64:	404a      	eors	r2, r1
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	7819      	ldrb	r1, [r3, #0]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	3302      	adds	r3, #2
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3302      	adds	r3, #2
 8007c7a:	404a      	eors	r2, r1
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3303      	adds	r3, #3
 8007c84:	7819      	ldrb	r1, [r3, #0]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	3303      	adds	r3, #3
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3303      	adds	r3, #3
 8007c90:	404a      	eors	r2, r1
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	7819      	ldrb	r1, [r3, #0]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	781a      	ldrb	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	404a      	eors	r2, r1
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3305      	adds	r3, #5
 8007cb0:	7819      	ldrb	r1, [r3, #0]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	3305      	adds	r3, #5
 8007cb6:	781a      	ldrb	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3305      	adds	r3, #5
 8007cbc:	404a      	eors	r2, r1
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3306      	adds	r3, #6
 8007cc6:	7819      	ldrb	r1, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	3306      	adds	r3, #6
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3306      	adds	r3, #6
 8007cd2:	404a      	eors	r2, r1
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3307      	adds	r3, #7
 8007cdc:	7819      	ldrb	r1, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	3307      	adds	r3, #7
 8007ce2:	781a      	ldrb	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3307      	adds	r3, #7
 8007ce8:	404a      	eors	r2, r1
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	7819      	ldrb	r1, [r3, #0]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	781a      	ldrb	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	404a      	eors	r2, r1
 8007d00:	b2d2      	uxtb	r2, r2
 8007d02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3309      	adds	r3, #9
 8007d08:	7819      	ldrb	r1, [r3, #0]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	3309      	adds	r3, #9
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3309      	adds	r3, #9
 8007d14:	404a      	eors	r2, r1
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	330a      	adds	r3, #10
 8007d1e:	7819      	ldrb	r1, [r3, #0]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	330a      	adds	r3, #10
 8007d24:	781a      	ldrb	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	330a      	adds	r3, #10
 8007d2a:	404a      	eors	r2, r1
 8007d2c:	b2d2      	uxtb	r2, r2
 8007d2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	330b      	adds	r3, #11
 8007d34:	7819      	ldrb	r1, [r3, #0]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	330b      	adds	r3, #11
 8007d3a:	781a      	ldrb	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	330b      	adds	r3, #11
 8007d40:	404a      	eors	r2, r1
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	7819      	ldrb	r1, [r3, #0]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	330c      	adds	r3, #12
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	330c      	adds	r3, #12
 8007d56:	404a      	eors	r2, r1
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	330d      	adds	r3, #13
 8007d60:	7819      	ldrb	r1, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	330d      	adds	r3, #13
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	330d      	adds	r3, #13
 8007d6c:	404a      	eors	r2, r1
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	330e      	adds	r3, #14
 8007d76:	7819      	ldrb	r1, [r3, #0]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	330e      	adds	r3, #14
 8007d7c:	781a      	ldrb	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	330e      	adds	r3, #14
 8007d82:	404a      	eors	r2, r1
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	330f      	adds	r3, #15
 8007d8c:	7819      	ldrb	r1, [r3, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	330f      	adds	r3, #15
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	330f      	adds	r3, #15
 8007d98:	404a      	eors	r2, r1
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
#endif
}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	46bd      	mov	sp, r7
 8007da2:	b002      	add	sp, #8
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	4053      	eors	r3, r2
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	7819      	ldrb	r1, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	404a      	eors	r2, r1
 8007dd4:	b2d2      	uxtb	r2, r2
 8007dd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3302      	adds	r3, #2
 8007ddc:	7819      	ldrb	r1, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3302      	adds	r3, #2
 8007de2:	781a      	ldrb	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3302      	adds	r3, #2
 8007de8:	404a      	eors	r2, r1
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	3303      	adds	r3, #3
 8007df2:	7819      	ldrb	r1, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3303      	adds	r3, #3
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3303      	adds	r3, #3
 8007dfe:	404a      	eors	r2, r1
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	3304      	adds	r3, #4
 8007e08:	7819      	ldrb	r1, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3304      	adds	r3, #4
 8007e14:	404a      	eors	r2, r1
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	3305      	adds	r3, #5
 8007e1e:	7819      	ldrb	r1, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3305      	adds	r3, #5
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3305      	adds	r3, #5
 8007e2a:	404a      	eors	r2, r1
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	3306      	adds	r3, #6
 8007e34:	7819      	ldrb	r1, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3306      	adds	r3, #6
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3306      	adds	r3, #6
 8007e40:	404a      	eors	r2, r1
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	3307      	adds	r3, #7
 8007e4a:	7819      	ldrb	r1, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3307      	adds	r3, #7
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3307      	adds	r3, #7
 8007e56:	404a      	eors	r2, r1
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	7819      	ldrb	r1, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3308      	adds	r3, #8
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	404a      	eors	r2, r1
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	3309      	adds	r3, #9
 8007e76:	7819      	ldrb	r1, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3309      	adds	r3, #9
 8007e7c:	781a      	ldrb	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3309      	adds	r3, #9
 8007e82:	404a      	eors	r2, r1
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	330a      	adds	r3, #10
 8007e8c:	7819      	ldrb	r1, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	330a      	adds	r3, #10
 8007e92:	781a      	ldrb	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	330a      	adds	r3, #10
 8007e98:	404a      	eors	r2, r1
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	330b      	adds	r3, #11
 8007ea2:	7819      	ldrb	r1, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	330b      	adds	r3, #11
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	330b      	adds	r3, #11
 8007eae:	404a      	eors	r2, r1
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	330c      	adds	r3, #12
 8007eb8:	7819      	ldrb	r1, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	781a      	ldrb	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	330c      	adds	r3, #12
 8007ec4:	404a      	eors	r2, r1
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	330d      	adds	r3, #13
 8007ece:	7819      	ldrb	r1, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	330d      	adds	r3, #13
 8007ed4:	781a      	ldrb	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	330d      	adds	r3, #13
 8007eda:	404a      	eors	r2, r1
 8007edc:	b2d2      	uxtb	r2, r2
 8007ede:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	330e      	adds	r3, #14
 8007ee4:	7819      	ldrb	r1, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	330e      	adds	r3, #14
 8007eea:	781a      	ldrb	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	330e      	adds	r3, #14
 8007ef0:	404a      	eors	r2, r1
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	330f      	adds	r3, #15
 8007efa:	7819      	ldrb	r1, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	330f      	adds	r3, #15
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	330f      	adds	r3, #15
 8007f06:	404a      	eors	r2, r1
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007f0c:	46c0      	nop			; (mov r8, r8)
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	b004      	add	sp, #16
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	0011      	movs	r1, r2
 8007f24:	0018      	movs	r0, r3
 8007f26:	f7ff fe88 	bl	8007c3a <xor_block>
}
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b002      	add	sp, #8
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	001a      	movs	r2, r3
 8007f42:	4b4c      	ldr	r3, [pc, #304]	; (8008074 <shift_sub_rows+0x140>)
 8007f44:	5c9a      	ldrb	r2, [r3, r2]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	0019      	movs	r1, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4a47      	ldr	r2, [pc, #284]	; (8008074 <shift_sub_rows+0x140>)
 8007f58:	5c52      	ldrb	r2, [r2, r1]
 8007f5a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3308      	adds	r3, #8
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	0019      	movs	r1, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3308      	adds	r3, #8
 8007f68:	4a42      	ldr	r2, [pc, #264]	; (8008074 <shift_sub_rows+0x140>)
 8007f6a:	5c52      	ldrb	r2, [r2, r1]
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	330c      	adds	r3, #12
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	0019      	movs	r1, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	330c      	adds	r3, #12
 8007f7a:	4a3e      	ldr	r2, [pc, #248]	; (8008074 <shift_sub_rows+0x140>)
 8007f7c:	5c52      	ldrb	r2, [r2, r1]
 8007f7e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007f80:	200f      	movs	r0, #15
 8007f82:	183b      	adds	r3, r7, r0
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	7852      	ldrb	r2, [r2, #1]
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	3305      	adds	r3, #5
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	0019      	movs	r1, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3301      	adds	r3, #1
 8007f96:	4a37      	ldr	r2, [pc, #220]	; (8008074 <shift_sub_rows+0x140>)
 8007f98:	5c52      	ldrb	r2, [r2, r1]
 8007f9a:	701a      	strb	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3309      	adds	r3, #9
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3305      	adds	r3, #5
 8007fa8:	4a32      	ldr	r2, [pc, #200]	; (8008074 <shift_sub_rows+0x140>)
 8007faa:	5c52      	ldrb	r2, [r2, r1]
 8007fac:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	330d      	adds	r3, #13
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	0019      	movs	r1, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3309      	adds	r3, #9
 8007fba:	4a2e      	ldr	r2, [pc, #184]	; (8008074 <shift_sub_rows+0x140>)
 8007fbc:	5c52      	ldrb	r2, [r2, r1]
 8007fbe:	701a      	strb	r2, [r3, #0]
 8007fc0:	183b      	adds	r3, r7, r0
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	330d      	adds	r3, #13
 8007fc8:	492a      	ldr	r1, [pc, #168]	; (8008074 <shift_sub_rows+0x140>)
 8007fca:	5c8a      	ldrb	r2, [r1, r2]
 8007fcc:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007fce:	183b      	adds	r3, r7, r0
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	7892      	ldrb	r2, [r2, #2]
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	330a      	adds	r3, #10
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	0019      	movs	r1, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	4a24      	ldr	r2, [pc, #144]	; (8008074 <shift_sub_rows+0x140>)
 8007fe4:	5c52      	ldrb	r2, [r2, r1]
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	183b      	adds	r3, r7, r0
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	330a      	adds	r3, #10
 8007ff0:	4920      	ldr	r1, [pc, #128]	; (8008074 <shift_sub_rows+0x140>)
 8007ff2:	5c8a      	ldrb	r2, [r1, r2]
 8007ff4:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007ff6:	183b      	adds	r3, r7, r0
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	7992      	ldrb	r2, [r2, #6]
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	330e      	adds	r3, #14
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	0019      	movs	r1, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3306      	adds	r3, #6
 800800a:	4a1a      	ldr	r2, [pc, #104]	; (8008074 <shift_sub_rows+0x140>)
 800800c:	5c52      	ldrb	r2, [r2, r1]
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	183b      	adds	r3, r7, r0
 8008012:	781a      	ldrb	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	330e      	adds	r3, #14
 8008018:	4916      	ldr	r1, [pc, #88]	; (8008074 <shift_sub_rows+0x140>)
 800801a:	5c8a      	ldrb	r2, [r1, r2]
 800801c:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800801e:	183b      	adds	r3, r7, r0
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	7bd2      	ldrb	r2, [r2, #15]
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	330b      	adds	r3, #11
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	0019      	movs	r1, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	330f      	adds	r3, #15
 8008032:	4a10      	ldr	r2, [pc, #64]	; (8008074 <shift_sub_rows+0x140>)
 8008034:	5c52      	ldrb	r2, [r2, r1]
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3307      	adds	r3, #7
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	0019      	movs	r1, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	330b      	adds	r3, #11
 8008044:	4a0b      	ldr	r2, [pc, #44]	; (8008074 <shift_sub_rows+0x140>)
 8008046:	5c52      	ldrb	r2, [r2, r1]
 8008048:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3303      	adds	r3, #3
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	0019      	movs	r1, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3307      	adds	r3, #7
 8008056:	4a07      	ldr	r2, [pc, #28]	; (8008074 <shift_sub_rows+0x140>)
 8008058:	5c52      	ldrb	r2, [r2, r1]
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	183b      	adds	r3, r7, r0
 800805e:	781a      	ldrb	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3303      	adds	r3, #3
 8008064:	4903      	ldr	r1, [pc, #12]	; (8008074 <shift_sub_rows+0x140>)
 8008066:	5c8a      	ldrb	r2, [r1, r2]
 8008068:	701a      	strb	r2, [r3, #0]
}
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	46bd      	mov	sp, r7
 800806e:	b004      	add	sp, #16
 8008070:	bd80      	pop	{r7, pc}
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	080277f0 	.word	0x080277f0

08008078 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8008078:	b590      	push	{r4, r7, lr}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	2008      	movs	r0, #8
 8008084:	0004      	movs	r4, r0
 8008086:	183b      	adds	r3, r7, r0
 8008088:	0011      	movs	r1, r2
 800808a:	0018      	movs	r0, r3
 800808c:	f7ff fd62 	bl	8007b54 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8008090:	0020      	movs	r0, r4
 8008092:	183b      	adds	r3, r7, r0
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	001a      	movs	r2, r3
 8008098:	4be7      	ldr	r3, [pc, #924]	; (8008438 <mix_sub_columns+0x3c0>)
 800809a:	5c9a      	ldrb	r2, [r3, r2]
 800809c:	183b      	adds	r3, r7, r0
 800809e:	795b      	ldrb	r3, [r3, #5]
 80080a0:	0019      	movs	r1, r3
 80080a2:	4be6      	ldr	r3, [pc, #920]	; (800843c <mix_sub_columns+0x3c4>)
 80080a4:	5c5b      	ldrb	r3, [r3, r1]
 80080a6:	4053      	eors	r3, r2
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	183b      	adds	r3, r7, r0
 80080ac:	7a9b      	ldrb	r3, [r3, #10]
 80080ae:	0019      	movs	r1, r3
 80080b0:	4be3      	ldr	r3, [pc, #908]	; (8008440 <mix_sub_columns+0x3c8>)
 80080b2:	5c5b      	ldrb	r3, [r3, r1]
 80080b4:	4053      	eors	r3, r2
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	183b      	adds	r3, r7, r0
 80080ba:	7bdb      	ldrb	r3, [r3, #15]
 80080bc:	0019      	movs	r1, r3
 80080be:	4be0      	ldr	r3, [pc, #896]	; (8008440 <mix_sub_columns+0x3c8>)
 80080c0:	5c5b      	ldrb	r3, [r3, r1]
 80080c2:	4053      	eors	r3, r2
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80080ca:	183b      	adds	r3, r7, r0
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	001a      	movs	r2, r3
 80080d0:	4bdb      	ldr	r3, [pc, #876]	; (8008440 <mix_sub_columns+0x3c8>)
 80080d2:	5c9a      	ldrb	r2, [r3, r2]
 80080d4:	183b      	adds	r3, r7, r0
 80080d6:	795b      	ldrb	r3, [r3, #5]
 80080d8:	0019      	movs	r1, r3
 80080da:	4bd7      	ldr	r3, [pc, #860]	; (8008438 <mix_sub_columns+0x3c0>)
 80080dc:	5c5b      	ldrb	r3, [r3, r1]
 80080de:	4053      	eors	r3, r2
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	183b      	adds	r3, r7, r0
 80080e4:	7a9b      	ldrb	r3, [r3, #10]
 80080e6:	0019      	movs	r1, r3
 80080e8:	4bd4      	ldr	r3, [pc, #848]	; (800843c <mix_sub_columns+0x3c4>)
 80080ea:	5c5b      	ldrb	r3, [r3, r1]
 80080ec:	4053      	eors	r3, r2
 80080ee:	b2d9      	uxtb	r1, r3
 80080f0:	183b      	adds	r3, r7, r0
 80080f2:	7bdb      	ldrb	r3, [r3, #15]
 80080f4:	001a      	movs	r2, r3
 80080f6:	4bd2      	ldr	r3, [pc, #840]	; (8008440 <mix_sub_columns+0x3c8>)
 80080f8:	5c9a      	ldrb	r2, [r3, r2]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3301      	adds	r3, #1
 80080fe:	404a      	eors	r2, r1
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8008104:	183b      	adds	r3, r7, r0
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	001a      	movs	r2, r3
 800810a:	4bcd      	ldr	r3, [pc, #820]	; (8008440 <mix_sub_columns+0x3c8>)
 800810c:	5c9a      	ldrb	r2, [r3, r2]
 800810e:	183b      	adds	r3, r7, r0
 8008110:	795b      	ldrb	r3, [r3, #5]
 8008112:	0019      	movs	r1, r3
 8008114:	4bca      	ldr	r3, [pc, #808]	; (8008440 <mix_sub_columns+0x3c8>)
 8008116:	5c5b      	ldrb	r3, [r3, r1]
 8008118:	4053      	eors	r3, r2
 800811a:	b2da      	uxtb	r2, r3
 800811c:	183b      	adds	r3, r7, r0
 800811e:	7a9b      	ldrb	r3, [r3, #10]
 8008120:	0019      	movs	r1, r3
 8008122:	4bc5      	ldr	r3, [pc, #788]	; (8008438 <mix_sub_columns+0x3c0>)
 8008124:	5c5b      	ldrb	r3, [r3, r1]
 8008126:	4053      	eors	r3, r2
 8008128:	b2d9      	uxtb	r1, r3
 800812a:	183b      	adds	r3, r7, r0
 800812c:	7bdb      	ldrb	r3, [r3, #15]
 800812e:	001a      	movs	r2, r3
 8008130:	4bc2      	ldr	r3, [pc, #776]	; (800843c <mix_sub_columns+0x3c4>)
 8008132:	5c9a      	ldrb	r2, [r3, r2]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3302      	adds	r3, #2
 8008138:	404a      	eors	r2, r1
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800813e:	183b      	adds	r3, r7, r0
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	001a      	movs	r2, r3
 8008144:	4bbd      	ldr	r3, [pc, #756]	; (800843c <mix_sub_columns+0x3c4>)
 8008146:	5c9a      	ldrb	r2, [r3, r2]
 8008148:	183b      	adds	r3, r7, r0
 800814a:	795b      	ldrb	r3, [r3, #5]
 800814c:	0019      	movs	r1, r3
 800814e:	4bbc      	ldr	r3, [pc, #752]	; (8008440 <mix_sub_columns+0x3c8>)
 8008150:	5c5b      	ldrb	r3, [r3, r1]
 8008152:	4053      	eors	r3, r2
 8008154:	b2da      	uxtb	r2, r3
 8008156:	183b      	adds	r3, r7, r0
 8008158:	7a9b      	ldrb	r3, [r3, #10]
 800815a:	0019      	movs	r1, r3
 800815c:	4bb8      	ldr	r3, [pc, #736]	; (8008440 <mix_sub_columns+0x3c8>)
 800815e:	5c5b      	ldrb	r3, [r3, r1]
 8008160:	4053      	eors	r3, r2
 8008162:	b2d9      	uxtb	r1, r3
 8008164:	183b      	adds	r3, r7, r0
 8008166:	7bdb      	ldrb	r3, [r3, #15]
 8008168:	001a      	movs	r2, r3
 800816a:	4bb3      	ldr	r3, [pc, #716]	; (8008438 <mix_sub_columns+0x3c0>)
 800816c:	5c9a      	ldrb	r2, [r3, r2]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3303      	adds	r3, #3
 8008172:	404a      	eors	r2, r1
 8008174:	b2d2      	uxtb	r2, r2
 8008176:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8008178:	183b      	adds	r3, r7, r0
 800817a:	791b      	ldrb	r3, [r3, #4]
 800817c:	001a      	movs	r2, r3
 800817e:	4bae      	ldr	r3, [pc, #696]	; (8008438 <mix_sub_columns+0x3c0>)
 8008180:	5c9a      	ldrb	r2, [r3, r2]
 8008182:	183b      	adds	r3, r7, r0
 8008184:	7a5b      	ldrb	r3, [r3, #9]
 8008186:	0019      	movs	r1, r3
 8008188:	4bac      	ldr	r3, [pc, #688]	; (800843c <mix_sub_columns+0x3c4>)
 800818a:	5c5b      	ldrb	r3, [r3, r1]
 800818c:	4053      	eors	r3, r2
 800818e:	b2da      	uxtb	r2, r3
 8008190:	183b      	adds	r3, r7, r0
 8008192:	7b9b      	ldrb	r3, [r3, #14]
 8008194:	0019      	movs	r1, r3
 8008196:	4baa      	ldr	r3, [pc, #680]	; (8008440 <mix_sub_columns+0x3c8>)
 8008198:	5c5b      	ldrb	r3, [r3, r1]
 800819a:	4053      	eors	r3, r2
 800819c:	b2d9      	uxtb	r1, r3
 800819e:	183b      	adds	r3, r7, r0
 80081a0:	78db      	ldrb	r3, [r3, #3]
 80081a2:	001a      	movs	r2, r3
 80081a4:	4ba6      	ldr	r3, [pc, #664]	; (8008440 <mix_sub_columns+0x3c8>)
 80081a6:	5c9a      	ldrb	r2, [r3, r2]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3304      	adds	r3, #4
 80081ac:	404a      	eors	r2, r1
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80081b2:	183b      	adds	r3, r7, r0
 80081b4:	791b      	ldrb	r3, [r3, #4]
 80081b6:	001a      	movs	r2, r3
 80081b8:	4ba1      	ldr	r3, [pc, #644]	; (8008440 <mix_sub_columns+0x3c8>)
 80081ba:	5c9a      	ldrb	r2, [r3, r2]
 80081bc:	183b      	adds	r3, r7, r0
 80081be:	7a5b      	ldrb	r3, [r3, #9]
 80081c0:	0019      	movs	r1, r3
 80081c2:	4b9d      	ldr	r3, [pc, #628]	; (8008438 <mix_sub_columns+0x3c0>)
 80081c4:	5c5b      	ldrb	r3, [r3, r1]
 80081c6:	4053      	eors	r3, r2
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	183b      	adds	r3, r7, r0
 80081cc:	7b9b      	ldrb	r3, [r3, #14]
 80081ce:	0019      	movs	r1, r3
 80081d0:	4b9a      	ldr	r3, [pc, #616]	; (800843c <mix_sub_columns+0x3c4>)
 80081d2:	5c5b      	ldrb	r3, [r3, r1]
 80081d4:	4053      	eors	r3, r2
 80081d6:	b2d9      	uxtb	r1, r3
 80081d8:	183b      	adds	r3, r7, r0
 80081da:	78db      	ldrb	r3, [r3, #3]
 80081dc:	001a      	movs	r2, r3
 80081de:	4b98      	ldr	r3, [pc, #608]	; (8008440 <mix_sub_columns+0x3c8>)
 80081e0:	5c9a      	ldrb	r2, [r3, r2]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3305      	adds	r3, #5
 80081e6:	404a      	eors	r2, r1
 80081e8:	b2d2      	uxtb	r2, r2
 80081ea:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80081ec:	183b      	adds	r3, r7, r0
 80081ee:	791b      	ldrb	r3, [r3, #4]
 80081f0:	001a      	movs	r2, r3
 80081f2:	4b93      	ldr	r3, [pc, #588]	; (8008440 <mix_sub_columns+0x3c8>)
 80081f4:	5c9a      	ldrb	r2, [r3, r2]
 80081f6:	183b      	adds	r3, r7, r0
 80081f8:	7a5b      	ldrb	r3, [r3, #9]
 80081fa:	0019      	movs	r1, r3
 80081fc:	4b90      	ldr	r3, [pc, #576]	; (8008440 <mix_sub_columns+0x3c8>)
 80081fe:	5c5b      	ldrb	r3, [r3, r1]
 8008200:	4053      	eors	r3, r2
 8008202:	b2da      	uxtb	r2, r3
 8008204:	183b      	adds	r3, r7, r0
 8008206:	7b9b      	ldrb	r3, [r3, #14]
 8008208:	0019      	movs	r1, r3
 800820a:	4b8b      	ldr	r3, [pc, #556]	; (8008438 <mix_sub_columns+0x3c0>)
 800820c:	5c5b      	ldrb	r3, [r3, r1]
 800820e:	4053      	eors	r3, r2
 8008210:	b2d9      	uxtb	r1, r3
 8008212:	183b      	adds	r3, r7, r0
 8008214:	78db      	ldrb	r3, [r3, #3]
 8008216:	001a      	movs	r2, r3
 8008218:	4b88      	ldr	r3, [pc, #544]	; (800843c <mix_sub_columns+0x3c4>)
 800821a:	5c9a      	ldrb	r2, [r3, r2]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3306      	adds	r3, #6
 8008220:	404a      	eors	r2, r1
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8008226:	183b      	adds	r3, r7, r0
 8008228:	791b      	ldrb	r3, [r3, #4]
 800822a:	001a      	movs	r2, r3
 800822c:	4b83      	ldr	r3, [pc, #524]	; (800843c <mix_sub_columns+0x3c4>)
 800822e:	5c9a      	ldrb	r2, [r3, r2]
 8008230:	183b      	adds	r3, r7, r0
 8008232:	7a5b      	ldrb	r3, [r3, #9]
 8008234:	0019      	movs	r1, r3
 8008236:	4b82      	ldr	r3, [pc, #520]	; (8008440 <mix_sub_columns+0x3c8>)
 8008238:	5c5b      	ldrb	r3, [r3, r1]
 800823a:	4053      	eors	r3, r2
 800823c:	b2da      	uxtb	r2, r3
 800823e:	183b      	adds	r3, r7, r0
 8008240:	7b9b      	ldrb	r3, [r3, #14]
 8008242:	0019      	movs	r1, r3
 8008244:	4b7e      	ldr	r3, [pc, #504]	; (8008440 <mix_sub_columns+0x3c8>)
 8008246:	5c5b      	ldrb	r3, [r3, r1]
 8008248:	4053      	eors	r3, r2
 800824a:	b2d9      	uxtb	r1, r3
 800824c:	183b      	adds	r3, r7, r0
 800824e:	78db      	ldrb	r3, [r3, #3]
 8008250:	001a      	movs	r2, r3
 8008252:	4b79      	ldr	r3, [pc, #484]	; (8008438 <mix_sub_columns+0x3c0>)
 8008254:	5c9a      	ldrb	r2, [r3, r2]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3307      	adds	r3, #7
 800825a:	404a      	eors	r2, r1
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8008260:	183b      	adds	r3, r7, r0
 8008262:	7a1b      	ldrb	r3, [r3, #8]
 8008264:	001a      	movs	r2, r3
 8008266:	4b74      	ldr	r3, [pc, #464]	; (8008438 <mix_sub_columns+0x3c0>)
 8008268:	5c9a      	ldrb	r2, [r3, r2]
 800826a:	183b      	adds	r3, r7, r0
 800826c:	7b5b      	ldrb	r3, [r3, #13]
 800826e:	0019      	movs	r1, r3
 8008270:	4b72      	ldr	r3, [pc, #456]	; (800843c <mix_sub_columns+0x3c4>)
 8008272:	5c5b      	ldrb	r3, [r3, r1]
 8008274:	4053      	eors	r3, r2
 8008276:	b2da      	uxtb	r2, r3
 8008278:	183b      	adds	r3, r7, r0
 800827a:	789b      	ldrb	r3, [r3, #2]
 800827c:	0019      	movs	r1, r3
 800827e:	4b70      	ldr	r3, [pc, #448]	; (8008440 <mix_sub_columns+0x3c8>)
 8008280:	5c5b      	ldrb	r3, [r3, r1]
 8008282:	4053      	eors	r3, r2
 8008284:	b2d9      	uxtb	r1, r3
 8008286:	183b      	adds	r3, r7, r0
 8008288:	79db      	ldrb	r3, [r3, #7]
 800828a:	001a      	movs	r2, r3
 800828c:	4b6c      	ldr	r3, [pc, #432]	; (8008440 <mix_sub_columns+0x3c8>)
 800828e:	5c9a      	ldrb	r2, [r3, r2]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3308      	adds	r3, #8
 8008294:	404a      	eors	r2, r1
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800829a:	183b      	adds	r3, r7, r0
 800829c:	7a1b      	ldrb	r3, [r3, #8]
 800829e:	001a      	movs	r2, r3
 80082a0:	4b67      	ldr	r3, [pc, #412]	; (8008440 <mix_sub_columns+0x3c8>)
 80082a2:	5c9a      	ldrb	r2, [r3, r2]
 80082a4:	183b      	adds	r3, r7, r0
 80082a6:	7b5b      	ldrb	r3, [r3, #13]
 80082a8:	0019      	movs	r1, r3
 80082aa:	4b63      	ldr	r3, [pc, #396]	; (8008438 <mix_sub_columns+0x3c0>)
 80082ac:	5c5b      	ldrb	r3, [r3, r1]
 80082ae:	4053      	eors	r3, r2
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	183b      	adds	r3, r7, r0
 80082b4:	789b      	ldrb	r3, [r3, #2]
 80082b6:	0019      	movs	r1, r3
 80082b8:	4b60      	ldr	r3, [pc, #384]	; (800843c <mix_sub_columns+0x3c4>)
 80082ba:	5c5b      	ldrb	r3, [r3, r1]
 80082bc:	4053      	eors	r3, r2
 80082be:	b2d9      	uxtb	r1, r3
 80082c0:	183b      	adds	r3, r7, r0
 80082c2:	79db      	ldrb	r3, [r3, #7]
 80082c4:	001a      	movs	r2, r3
 80082c6:	4b5e      	ldr	r3, [pc, #376]	; (8008440 <mix_sub_columns+0x3c8>)
 80082c8:	5c9a      	ldrb	r2, [r3, r2]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3309      	adds	r3, #9
 80082ce:	404a      	eors	r2, r1
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80082d4:	183b      	adds	r3, r7, r0
 80082d6:	7a1b      	ldrb	r3, [r3, #8]
 80082d8:	001a      	movs	r2, r3
 80082da:	4b59      	ldr	r3, [pc, #356]	; (8008440 <mix_sub_columns+0x3c8>)
 80082dc:	5c9a      	ldrb	r2, [r3, r2]
 80082de:	183b      	adds	r3, r7, r0
 80082e0:	7b5b      	ldrb	r3, [r3, #13]
 80082e2:	0019      	movs	r1, r3
 80082e4:	4b56      	ldr	r3, [pc, #344]	; (8008440 <mix_sub_columns+0x3c8>)
 80082e6:	5c5b      	ldrb	r3, [r3, r1]
 80082e8:	4053      	eors	r3, r2
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	183b      	adds	r3, r7, r0
 80082ee:	789b      	ldrb	r3, [r3, #2]
 80082f0:	0019      	movs	r1, r3
 80082f2:	4b51      	ldr	r3, [pc, #324]	; (8008438 <mix_sub_columns+0x3c0>)
 80082f4:	5c5b      	ldrb	r3, [r3, r1]
 80082f6:	4053      	eors	r3, r2
 80082f8:	b2d9      	uxtb	r1, r3
 80082fa:	183b      	adds	r3, r7, r0
 80082fc:	79db      	ldrb	r3, [r3, #7]
 80082fe:	001a      	movs	r2, r3
 8008300:	4b4e      	ldr	r3, [pc, #312]	; (800843c <mix_sub_columns+0x3c4>)
 8008302:	5c9a      	ldrb	r2, [r3, r2]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	330a      	adds	r3, #10
 8008308:	404a      	eors	r2, r1
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800830e:	183b      	adds	r3, r7, r0
 8008310:	7a1b      	ldrb	r3, [r3, #8]
 8008312:	001a      	movs	r2, r3
 8008314:	4b49      	ldr	r3, [pc, #292]	; (800843c <mix_sub_columns+0x3c4>)
 8008316:	5c9a      	ldrb	r2, [r3, r2]
 8008318:	183b      	adds	r3, r7, r0
 800831a:	7b5b      	ldrb	r3, [r3, #13]
 800831c:	0019      	movs	r1, r3
 800831e:	4b48      	ldr	r3, [pc, #288]	; (8008440 <mix_sub_columns+0x3c8>)
 8008320:	5c5b      	ldrb	r3, [r3, r1]
 8008322:	4053      	eors	r3, r2
 8008324:	b2da      	uxtb	r2, r3
 8008326:	183b      	adds	r3, r7, r0
 8008328:	789b      	ldrb	r3, [r3, #2]
 800832a:	0019      	movs	r1, r3
 800832c:	4b44      	ldr	r3, [pc, #272]	; (8008440 <mix_sub_columns+0x3c8>)
 800832e:	5c5b      	ldrb	r3, [r3, r1]
 8008330:	4053      	eors	r3, r2
 8008332:	b2d9      	uxtb	r1, r3
 8008334:	183b      	adds	r3, r7, r0
 8008336:	79db      	ldrb	r3, [r3, #7]
 8008338:	001a      	movs	r2, r3
 800833a:	4b3f      	ldr	r3, [pc, #252]	; (8008438 <mix_sub_columns+0x3c0>)
 800833c:	5c9a      	ldrb	r2, [r3, r2]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	330b      	adds	r3, #11
 8008342:	404a      	eors	r2, r1
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8008348:	183b      	adds	r3, r7, r0
 800834a:	7b1b      	ldrb	r3, [r3, #12]
 800834c:	001a      	movs	r2, r3
 800834e:	4b3a      	ldr	r3, [pc, #232]	; (8008438 <mix_sub_columns+0x3c0>)
 8008350:	5c9a      	ldrb	r2, [r3, r2]
 8008352:	183b      	adds	r3, r7, r0
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	0019      	movs	r1, r3
 8008358:	4b38      	ldr	r3, [pc, #224]	; (800843c <mix_sub_columns+0x3c4>)
 800835a:	5c5b      	ldrb	r3, [r3, r1]
 800835c:	4053      	eors	r3, r2
 800835e:	b2da      	uxtb	r2, r3
 8008360:	183b      	adds	r3, r7, r0
 8008362:	799b      	ldrb	r3, [r3, #6]
 8008364:	0019      	movs	r1, r3
 8008366:	4b36      	ldr	r3, [pc, #216]	; (8008440 <mix_sub_columns+0x3c8>)
 8008368:	5c5b      	ldrb	r3, [r3, r1]
 800836a:	4053      	eors	r3, r2
 800836c:	b2d9      	uxtb	r1, r3
 800836e:	183b      	adds	r3, r7, r0
 8008370:	7adb      	ldrb	r3, [r3, #11]
 8008372:	001a      	movs	r2, r3
 8008374:	4b32      	ldr	r3, [pc, #200]	; (8008440 <mix_sub_columns+0x3c8>)
 8008376:	5c9a      	ldrb	r2, [r3, r2]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	330c      	adds	r3, #12
 800837c:	404a      	eors	r2, r1
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8008382:	183b      	adds	r3, r7, r0
 8008384:	7b1b      	ldrb	r3, [r3, #12]
 8008386:	001a      	movs	r2, r3
 8008388:	4b2d      	ldr	r3, [pc, #180]	; (8008440 <mix_sub_columns+0x3c8>)
 800838a:	5c9a      	ldrb	r2, [r3, r2]
 800838c:	183b      	adds	r3, r7, r0
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	0019      	movs	r1, r3
 8008392:	4b29      	ldr	r3, [pc, #164]	; (8008438 <mix_sub_columns+0x3c0>)
 8008394:	5c5b      	ldrb	r3, [r3, r1]
 8008396:	4053      	eors	r3, r2
 8008398:	b2da      	uxtb	r2, r3
 800839a:	183b      	adds	r3, r7, r0
 800839c:	799b      	ldrb	r3, [r3, #6]
 800839e:	0019      	movs	r1, r3
 80083a0:	4b26      	ldr	r3, [pc, #152]	; (800843c <mix_sub_columns+0x3c4>)
 80083a2:	5c5b      	ldrb	r3, [r3, r1]
 80083a4:	4053      	eors	r3, r2
 80083a6:	b2d9      	uxtb	r1, r3
 80083a8:	183b      	adds	r3, r7, r0
 80083aa:	7adb      	ldrb	r3, [r3, #11]
 80083ac:	001a      	movs	r2, r3
 80083ae:	4b24      	ldr	r3, [pc, #144]	; (8008440 <mix_sub_columns+0x3c8>)
 80083b0:	5c9a      	ldrb	r2, [r3, r2]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	330d      	adds	r3, #13
 80083b6:	404a      	eors	r2, r1
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80083bc:	183b      	adds	r3, r7, r0
 80083be:	7b1b      	ldrb	r3, [r3, #12]
 80083c0:	001a      	movs	r2, r3
 80083c2:	4b1f      	ldr	r3, [pc, #124]	; (8008440 <mix_sub_columns+0x3c8>)
 80083c4:	5c9a      	ldrb	r2, [r3, r2]
 80083c6:	183b      	adds	r3, r7, r0
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	0019      	movs	r1, r3
 80083cc:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <mix_sub_columns+0x3c8>)
 80083ce:	5c5b      	ldrb	r3, [r3, r1]
 80083d0:	4053      	eors	r3, r2
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	183b      	adds	r3, r7, r0
 80083d6:	799b      	ldrb	r3, [r3, #6]
 80083d8:	0019      	movs	r1, r3
 80083da:	4b17      	ldr	r3, [pc, #92]	; (8008438 <mix_sub_columns+0x3c0>)
 80083dc:	5c5b      	ldrb	r3, [r3, r1]
 80083de:	4053      	eors	r3, r2
 80083e0:	b2d9      	uxtb	r1, r3
 80083e2:	183b      	adds	r3, r7, r0
 80083e4:	7adb      	ldrb	r3, [r3, #11]
 80083e6:	001a      	movs	r2, r3
 80083e8:	4b14      	ldr	r3, [pc, #80]	; (800843c <mix_sub_columns+0x3c4>)
 80083ea:	5c9a      	ldrb	r2, [r3, r2]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	330e      	adds	r3, #14
 80083f0:	404a      	eors	r2, r1
 80083f2:	b2d2      	uxtb	r2, r2
 80083f4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80083f6:	183b      	adds	r3, r7, r0
 80083f8:	7b1b      	ldrb	r3, [r3, #12]
 80083fa:	001a      	movs	r2, r3
 80083fc:	4b0f      	ldr	r3, [pc, #60]	; (800843c <mix_sub_columns+0x3c4>)
 80083fe:	5c9a      	ldrb	r2, [r3, r2]
 8008400:	183b      	adds	r3, r7, r0
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	0019      	movs	r1, r3
 8008406:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <mix_sub_columns+0x3c8>)
 8008408:	5c5b      	ldrb	r3, [r3, r1]
 800840a:	4053      	eors	r3, r2
 800840c:	b2da      	uxtb	r2, r3
 800840e:	183b      	adds	r3, r7, r0
 8008410:	799b      	ldrb	r3, [r3, #6]
 8008412:	0019      	movs	r1, r3
 8008414:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <mix_sub_columns+0x3c8>)
 8008416:	5c5b      	ldrb	r3, [r3, r1]
 8008418:	4053      	eors	r3, r2
 800841a:	b2d9      	uxtb	r1, r3
 800841c:	183b      	adds	r3, r7, r0
 800841e:	7adb      	ldrb	r3, [r3, #11]
 8008420:	001a      	movs	r2, r3
 8008422:	4b05      	ldr	r3, [pc, #20]	; (8008438 <mix_sub_columns+0x3c0>)
 8008424:	5c9a      	ldrb	r2, [r3, r2]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	330f      	adds	r3, #15
 800842a:	404a      	eors	r2, r1
 800842c:	b2d2      	uxtb	r2, r2
 800842e:	701a      	strb	r2, [r3, #0]
  }
 8008430:	46c0      	nop			; (mov r8, r8)
 8008432:	46bd      	mov	sp, r7
 8008434:	b007      	add	sp, #28
 8008436:	bd90      	pop	{r4, r7, pc}
 8008438:	080278f0 	.word	0x080278f0
 800843c:	080279f0 	.word	0x080279f0
 8008440:	080277f0 	.word	0x080277f0

08008444 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8008444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	607a      	str	r2, [r7, #4]
 800844e:	200b      	movs	r0, #11
 8008450:	183b      	adds	r3, r7, r0
 8008452:	1c0a      	adds	r2, r1, #0
 8008454:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 8008456:	183b      	adds	r3, r7, r0
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b18      	cmp	r3, #24
 800845c:	d009      	beq.n	8008472 <aes_set_key+0x2e>
 800845e:	2b20      	cmp	r3, #32
 8008460:	d007      	beq.n	8008472 <aes_set_key+0x2e>
 8008462:	2b10      	cmp	r3, #16
 8008464:	d005      	beq.n	8008472 <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	22f0      	movs	r2, #240	; 0xf0
 800846a:	2100      	movs	r1, #0
 800846c:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800846e:	23ff      	movs	r3, #255	; 0xff
 8008470:	e113      	b.n	800869a <aes_set_key+0x256>
        break;
 8008472:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	240b      	movs	r4, #11
 8008478:	193b      	adds	r3, r7, r4
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	0019      	movs	r1, r3
 8008480:	f7ff fbc0 	bl	8007c04 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8008484:	0020      	movs	r0, r4
 8008486:	183b      	adds	r3, r7, r0
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	331c      	adds	r3, #28
 800848c:	b2da      	uxtb	r2, r3
 800848e:	2111      	movs	r1, #17
 8008490:	187b      	adds	r3, r7, r1
 8008492:	0092      	lsls	r2, r2, #2
 8008494:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 8008496:	187b      	adds	r3, r7, r1
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	091b      	lsrs	r3, r3, #4
 800849c:	b2db      	uxtb	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	b2d9      	uxtb	r1, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	22f0      	movs	r2, #240	; 0xf0
 80084a6:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80084a8:	2317      	movs	r3, #23
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	183a      	adds	r2, r7, r0
 80084ae:	7812      	ldrb	r2, [r2, #0]
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	2316      	movs	r3, #22
 80084b4:	18fb      	adds	r3, r7, r3
 80084b6:	2201      	movs	r2, #1
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	e0e4      	b.n	8008686 <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 80084bc:	2017      	movs	r0, #23
 80084be:	183b      	adds	r3, r7, r0
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	1f1a      	subs	r2, r3, #4
 80084c4:	2315      	movs	r3, #21
 80084c6:	18fb      	adds	r3, r7, r3
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	5c8a      	ldrb	r2, [r1, r2]
 80084cc:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 80084ce:	183b      	adds	r3, r7, r0
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	1eda      	subs	r2, r3, #3
 80084d4:	2314      	movs	r3, #20
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	5c8a      	ldrb	r2, [r1, r2]
 80084dc:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 80084de:	183b      	adds	r3, r7, r0
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	1e9a      	subs	r2, r3, #2
 80084e4:	2313      	movs	r3, #19
 80084e6:	18fb      	adds	r3, r7, r3
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	5c8a      	ldrb	r2, [r1, r2]
 80084ec:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 80084ee:	183b      	adds	r3, r7, r0
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	1e5a      	subs	r2, r3, #1
 80084f4:	2312      	movs	r3, #18
 80084f6:	18fb      	adds	r3, r7, r3
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	5c8a      	ldrb	r2, [r1, r2]
 80084fc:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 80084fe:	183a      	adds	r2, r7, r0
 8008500:	230b      	movs	r3, #11
 8008502:	18fb      	adds	r3, r7, r3
 8008504:	7812      	ldrb	r2, [r2, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	0019      	movs	r1, r3
 800850a:	0010      	movs	r0, r2
 800850c:	f7f7 fe8a 	bl	8000224 <__aeabi_uidivmod>
 8008510:	000b      	movs	r3, r1
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d13e      	bne.n	8008596 <aes_set_key+0x152>
        {
            tt = t0;
 8008518:	2410      	movs	r4, #16
 800851a:	193b      	adds	r3, r7, r4
 800851c:	2015      	movs	r0, #21
 800851e:	183a      	adds	r2, r7, r0
 8008520:	7812      	ldrb	r2, [r2, #0]
 8008522:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 8008524:	2514      	movs	r5, #20
 8008526:	197b      	adds	r3, r7, r5
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	4a5e      	ldr	r2, [pc, #376]	; (80086a4 <aes_set_key+0x260>)
 800852c:	5cd1      	ldrb	r1, [r2, r3]
 800852e:	183b      	adds	r3, r7, r0
 8008530:	2016      	movs	r0, #22
 8008532:	183a      	adds	r2, r7, r0
 8008534:	7812      	ldrb	r2, [r2, #0]
 8008536:	404a      	eors	r2, r1
 8008538:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800853a:	2613      	movs	r6, #19
 800853c:	19bb      	adds	r3, r7, r6
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	197b      	adds	r3, r7, r5
 8008542:	4958      	ldr	r1, [pc, #352]	; (80086a4 <aes_set_key+0x260>)
 8008544:	5c8a      	ldrb	r2, [r1, r2]
 8008546:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 8008548:	2512      	movs	r5, #18
 800854a:	197b      	adds	r3, r7, r5
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	19bb      	adds	r3, r7, r6
 8008550:	4954      	ldr	r1, [pc, #336]	; (80086a4 <aes_set_key+0x260>)
 8008552:	5c8a      	ldrb	r2, [r1, r2]
 8008554:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 8008556:	193b      	adds	r3, r7, r4
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	197b      	adds	r3, r7, r5
 800855c:	4951      	ldr	r1, [pc, #324]	; (80086a4 <aes_set_key+0x260>)
 800855e:	5c8a      	ldrb	r2, [r1, r2]
 8008560:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 8008562:	183b      	adds	r3, r7, r0
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	b25a      	sxtb	r2, r3
 800856a:	0004      	movs	r4, r0
 800856c:	183b      	adds	r3, r7, r0
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	09db      	lsrs	r3, r3, #7
 8008572:	b2db      	uxtb	r3, r3
 8008574:	1c19      	adds	r1, r3, #0
 8008576:	1c0b      	adds	r3, r1, #0
 8008578:	18db      	adds	r3, r3, r3
 800857a:	185b      	adds	r3, r3, r1
 800857c:	1c19      	adds	r1, r3, #0
 800857e:	00c8      	lsls	r0, r1, #3
 8008580:	1c19      	adds	r1, r3, #0
 8008582:	1c03      	adds	r3, r0, #0
 8008584:	18cb      	adds	r3, r1, r3
 8008586:	b2db      	uxtb	r3, r3
 8008588:	b25b      	sxtb	r3, r3
 800858a:	4053      	eors	r3, r2
 800858c:	b25a      	sxtb	r2, r3
 800858e:	0020      	movs	r0, r4
 8008590:	183b      	adds	r3, r7, r0
 8008592:	701a      	strb	r2, [r3, #0]
 8008594:	e02e      	b.n	80085f4 <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 8008596:	230b      	movs	r3, #11
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b18      	cmp	r3, #24
 800859e:	d929      	bls.n	80085f4 <aes_set_key+0x1b0>
 80085a0:	2317      	movs	r3, #23
 80085a2:	18fa      	adds	r2, r7, r3
 80085a4:	230b      	movs	r3, #11
 80085a6:	18fb      	adds	r3, r7, r3
 80085a8:	7812      	ldrb	r2, [r2, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	0019      	movs	r1, r3
 80085ae:	0010      	movs	r0, r2
 80085b0:	f7f7 fe38 	bl	8000224 <__aeabi_uidivmod>
 80085b4:	000b      	movs	r3, r1
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d11b      	bne.n	80085f4 <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 80085bc:	2115      	movs	r1, #21
 80085be:	187b      	adds	r3, r7, r1
 80085c0:	781a      	ldrb	r2, [r3, #0]
 80085c2:	187b      	adds	r3, r7, r1
 80085c4:	4937      	ldr	r1, [pc, #220]	; (80086a4 <aes_set_key+0x260>)
 80085c6:	5c8a      	ldrb	r2, [r1, r2]
 80085c8:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 80085ca:	2114      	movs	r1, #20
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	781a      	ldrb	r2, [r3, #0]
 80085d0:	187b      	adds	r3, r7, r1
 80085d2:	4934      	ldr	r1, [pc, #208]	; (80086a4 <aes_set_key+0x260>)
 80085d4:	5c8a      	ldrb	r2, [r1, r2]
 80085d6:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 80085d8:	2113      	movs	r1, #19
 80085da:	187b      	adds	r3, r7, r1
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	187b      	adds	r3, r7, r1
 80085e0:	4930      	ldr	r1, [pc, #192]	; (80086a4 <aes_set_key+0x260>)
 80085e2:	5c8a      	ldrb	r2, [r1, r2]
 80085e4:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 80085e6:	2112      	movs	r1, #18
 80085e8:	187b      	adds	r3, r7, r1
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	187b      	adds	r3, r7, r1
 80085ee:	492d      	ldr	r1, [pc, #180]	; (80086a4 <aes_set_key+0x260>)
 80085f0:	5c8a      	ldrb	r2, [r1, r2]
 80085f2:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 80085f4:	2410      	movs	r4, #16
 80085f6:	193b      	adds	r3, r7, r4
 80085f8:	2017      	movs	r0, #23
 80085fa:	1839      	adds	r1, r7, r0
 80085fc:	220b      	movs	r2, #11
 80085fe:	18ba      	adds	r2, r7, r2
 8008600:	7809      	ldrb	r1, [r1, #0]
 8008602:	7812      	ldrb	r2, [r2, #0]
 8008604:	1a8a      	subs	r2, r1, r2
 8008606:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8008608:	193b      	adds	r3, r7, r4
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	5cd1      	ldrb	r1, [r2, r3]
 8008610:	183b      	adds	r3, r7, r0
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2215      	movs	r2, #21
 8008616:	18ba      	adds	r2, r7, r2
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	404a      	eors	r2, r1
 800861c:	b2d1      	uxtb	r1, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8008622:	193b      	adds	r3, r7, r4
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	5cd1      	ldrb	r1, [r2, r3]
 800862c:	183b      	adds	r3, r7, r0
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	2214      	movs	r2, #20
 8008634:	18ba      	adds	r2, r7, r2
 8008636:	7812      	ldrb	r2, [r2, #0]
 8008638:	404a      	eors	r2, r1
 800863a:	b2d1      	uxtb	r1, r2
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8008640:	193b      	adds	r3, r7, r4
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	3302      	adds	r3, #2
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	5cd1      	ldrb	r1, [r2, r3]
 800864a:	183b      	adds	r3, r7, r0
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	3302      	adds	r3, #2
 8008650:	2213      	movs	r2, #19
 8008652:	18ba      	adds	r2, r7, r2
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	404a      	eors	r2, r1
 8008658:	b2d1      	uxtb	r1, r2
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800865e:	193b      	adds	r3, r7, r4
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	3303      	adds	r3, #3
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	5cd1      	ldrb	r1, [r2, r3]
 8008668:	183b      	adds	r3, r7, r0
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	3303      	adds	r3, #3
 800866e:	2212      	movs	r2, #18
 8008670:	18ba      	adds	r2, r7, r2
 8008672:	7812      	ldrb	r2, [r2, #0]
 8008674:	404a      	eors	r2, r1
 8008676:	b2d1      	uxtb	r1, r2
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800867c:	183b      	adds	r3, r7, r0
 800867e:	183a      	adds	r2, r7, r0
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	3204      	adds	r2, #4
 8008684:	701a      	strb	r2, [r3, #0]
 8008686:	2317      	movs	r3, #23
 8008688:	18fa      	adds	r2, r7, r3
 800868a:	2311      	movs	r3, #17
 800868c:	18fb      	adds	r3, r7, r3
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d200      	bcs.n	8008698 <aes_set_key+0x254>
 8008696:	e711      	b.n	80084bc <aes_set_key+0x78>
    }
    return 0;
 8008698:	2300      	movs	r3, #0
}
 800869a:	0018      	movs	r0, r3
 800869c:	46bd      	mov	sp, r7
 800869e:	b007      	add	sp, #28
 80086a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a2:	46c0      	nop			; (mov r8, r8)
 80086a4:	080277f0 	.word	0x080277f0

080086a8 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 80086a8:	b5b0      	push	{r4, r5, r7, lr}
 80086aa:	b08a      	sub	sp, #40	; 0x28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	22f0      	movs	r2, #240	; 0xf0
 80086b8:	5c9b      	ldrb	r3, [r3, r2]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d03a      	beq.n	8008734 <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	68f9      	ldr	r1, [r7, #12]
 80086c2:	2314      	movs	r3, #20
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	0018      	movs	r0, r3
 80086c8:	f7ff fb6d 	bl	8007da6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80086cc:	2327      	movs	r3, #39	; 0x27
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	2201      	movs	r2, #1
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e014      	b.n	8008700 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80086d6:	2514      	movs	r5, #20
 80086d8:	197b      	adds	r3, r7, r5
 80086da:	0018      	movs	r0, r3
 80086dc:	f7ff fccc 	bl	8008078 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2427      	movs	r4, #39	; 0x27
 80086e4:	193a      	adds	r2, r7, r4
 80086e6:	7812      	ldrb	r2, [r2, #0]
 80086e8:	0112      	lsls	r2, r2, #4
 80086ea:	189a      	adds	r2, r3, r2
 80086ec:	197b      	adds	r3, r7, r5
 80086ee:	0011      	movs	r1, r2
 80086f0:	0018      	movs	r0, r3
 80086f2:	f7ff fc0f 	bl	8007f14 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80086f6:	193b      	adds	r3, r7, r4
 80086f8:	193a      	adds	r2, r7, r4
 80086fa:	7812      	ldrb	r2, [r2, #0]
 80086fc:	3201      	adds	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	22f0      	movs	r2, #240	; 0xf0
 8008704:	5c9b      	ldrb	r3, [r3, r2]
 8008706:	2227      	movs	r2, #39	; 0x27
 8008708:	18ba      	adds	r2, r7, r2
 800870a:	7812      	ldrb	r2, [r2, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	d3e2      	bcc.n	80086d6 <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8008710:	2414      	movs	r4, #20
 8008712:	193b      	adds	r3, r7, r4
 8008714:	0018      	movs	r0, r3
 8008716:	f7ff fc0d 	bl	8007f34 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2227      	movs	r2, #39	; 0x27
 800871e:	18ba      	adds	r2, r7, r2
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	0112      	lsls	r2, r2, #4
 8008724:	189a      	adds	r2, r3, r2
 8008726:	1939      	adds	r1, r7, r4
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	0018      	movs	r0, r3
 800872c:	f7ff fb3b 	bl	8007da6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8008730:	2300      	movs	r3, #0
 8008732:	e000      	b.n	8008736 <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 8008734:	23ff      	movs	r3, #255	; 0xff
}
 8008736:	0018      	movs	r0, r3
 8008738:	46bd      	mov	sp, r7
 800873a:	b00a      	add	sp, #40	; 0x28
 800873c:	bdb0      	pop	{r4, r5, r7, pc}

0800873e <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	33f1      	adds	r3, #241	; 0xf1
 800874a:	2210      	movs	r2, #16
 800874c:	2100      	movs	r1, #0
 800874e:	0018      	movs	r0, r3
 8008750:	f014 fb00 	bl	801cd54 <memset1>
            ctx->M_n = 0;
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	238a      	movs	r3, #138	; 0x8a
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	2100      	movs	r1, #0
 800875c:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	22f0      	movs	r2, #240	; 0xf0
 8008762:	2100      	movs	r1, #0
 8008764:	0018      	movs	r0, r3
 8008766:	f014 faf5 	bl	801cd54 <memset1>
}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	46bd      	mov	sp, r7
 800876e:	b002      	add	sp, #8
 8008770:	bd80      	pop	{r7, pc}

08008772 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2110      	movs	r1, #16
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff fe5e 	bl	8008444 <aes_set_key>
}
 8008788:	46c0      	nop			; (mov r8, r8)
 800878a:	46bd      	mov	sp, r7
 800878c:	b002      	add	sp, #8
 800878e:	bd80      	pop	{r7, pc}

08008790 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 8008790:	b590      	push	{r4, r7, lr}
 8008792:	b08d      	sub	sp, #52	; 0x34
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	238a      	movs	r3, #138	; 0x8a
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	58d3      	ldr	r3, [r2, r3]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d100      	bne.n	80087aa <AES_CMAC_Update+0x1a>
 80087a8:	e097      	b.n	80088da <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	238a      	movs	r3, #138	; 0x8a
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	58d3      	ldr	r3, [r2, r3]
 80087b2:	2210      	movs	r2, #16
 80087b4:	1ad2      	subs	r2, r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d900      	bls.n	80087be <AES_CMAC_Update+0x2e>
 80087bc:	0013      	movs	r3, r2
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	1c9a      	adds	r2, r3, #2
 80087c4:	32ff      	adds	r2, #255	; 0xff
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	238a      	movs	r3, #138	; 0x8a
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	58cb      	ldr	r3, [r1, r3]
 80087ce:	18d3      	adds	r3, r2, r3
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	b292      	uxth	r2, r2
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	0018      	movs	r0, r3
 80087d8:	f014 fa80 	bl	801ccdc <memcpy1>
                    ctx->M_n += mlen;
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	238a      	movs	r3, #138	; 0x8a
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	58d2      	ldr	r2, [r2, r3]
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	18d1      	adds	r1, r2, r3
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	238a      	movs	r3, #138	; 0x8a
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	238a      	movs	r3, #138	; 0x8a
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	58d3      	ldr	r3, [r2, r3]
 80087f8:	2b0f      	cmp	r3, #15
 80087fa:	d800      	bhi.n	80087fe <AES_CMAC_Update+0x6e>
 80087fc:	e07f      	b.n	80088fe <AES_CMAC_Update+0x16e>
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	429a      	cmp	r2, r3
 8008804:	d100      	bne.n	8008808 <AES_CMAC_Update+0x78>
 8008806:	e07a      	b.n	80088fe <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 8008808:	2300      	movs	r3, #0
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800880c:	e018      	b.n	8008840 <AES_CMAC_Update+0xb0>
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	21f1      	movs	r1, #241	; 0xf1
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	18d3      	adds	r3, r2, r3
 8008816:	185b      	adds	r3, r3, r1
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	2302      	movs	r3, #2
 800881e:	33ff      	adds	r3, #255	; 0xff
 8008820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008822:	1841      	adds	r1, r0, r1
 8008824:	18cb      	adds	r3, r1, r3
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	4053      	eors	r3, r2
 800882a:	b2d8      	uxtb	r0, r3
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	21f1      	movs	r1, #241	; 0xf1
 8008830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008832:	18d3      	adds	r3, r2, r3
 8008834:	185b      	adds	r3, r3, r1
 8008836:	1c02      	adds	r2, r0, #0
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	3301      	adds	r3, #1
 800883e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	2b0f      	cmp	r3, #15
 8008844:	dde3      	ble.n	800880e <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	33f1      	adds	r3, #241	; 0xf1
 800884a:	0018      	movs	r0, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	33f1      	adds	r3, #241	; 0xf1
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	0019      	movs	r1, r3
 8008854:	f7ff ff28 	bl	80086a8 <aes_encrypt>
                    data += mlen;
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	18d3      	adds	r3, r2, r3
 800885e:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 8008868:	e037      	b.n	80088da <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 800886a:	2300      	movs	r3, #0
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28
 800886e:	e015      	b.n	800889c <AES_CMAC_Update+0x10c>
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	21f1      	movs	r1, #241	; 0xf1
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	18d3      	adds	r3, r2, r3
 8008878:	185b      	adds	r3, r3, r1
 800887a:	781a      	ldrb	r2, [r3, #0]
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	18cb      	adds	r3, r1, r3
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	4053      	eors	r3, r2
 8008886:	b2d8      	uxtb	r0, r3
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	21f1      	movs	r1, #241	; 0xf1
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	18d3      	adds	r3, r2, r3
 8008890:	185b      	adds	r3, r3, r1
 8008892:	1c02      	adds	r2, r0, #0
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	3301      	adds	r3, #1
 800889a:	62bb      	str	r3, [r7, #40]	; 0x28
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	2b0f      	cmp	r3, #15
 80088a0:	dde6      	ble.n	8008870 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	33f1      	adds	r3, #241	; 0xf1
 80088a6:	0019      	movs	r1, r3
 80088a8:	2414      	movs	r4, #20
 80088aa:	193b      	adds	r3, r7, r4
 80088ac:	2210      	movs	r2, #16
 80088ae:	0018      	movs	r0, r3
 80088b0:	f014 fa14 	bl	801ccdc <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	1939      	adds	r1, r7, r4
 80088b8:	193b      	adds	r3, r7, r4
 80088ba:	0018      	movs	r0, r3
 80088bc:	f7ff fef4 	bl	80086a8 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	33f1      	adds	r3, #241	; 0xf1
 80088c4:	1939      	adds	r1, r7, r4
 80088c6:	2210      	movs	r2, #16
 80088c8:	0018      	movs	r0, r3
 80088ca:	f014 fa07 	bl	801ccdc <memcpy1>

                    data += 16;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	3310      	adds	r3, #16
 80088d2:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3b10      	subs	r3, #16
 80088d8:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b10      	cmp	r3, #16
 80088de:	d8c4      	bhi.n	800886a <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3302      	adds	r3, #2
 80088e4:	33ff      	adds	r3, #255	; 0xff
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	b292      	uxth	r2, r2
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f014 f9f5 	bl	801ccdc <memcpy1>
            ctx->M_n = len;
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	238a      	movs	r3, #138	; 0x8a
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	50d1      	str	r1, [r2, r3]
 80088fc:	e000      	b.n	8008900 <AES_CMAC_Update+0x170>
                            return;
 80088fe:	46c0      	nop			; (mov r8, r8)
}
 8008900:	46bd      	mov	sp, r7
 8008902:	b00d      	add	sp, #52	; 0x34
 8008904:	bd90      	pop	{r4, r7, pc}

08008906 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8008906:	b590      	push	{r4, r7, lr}
 8008908:	b093      	sub	sp, #76	; 0x4c
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8008910:	241c      	movs	r4, #28
 8008912:	193b      	adds	r3, r7, r4
 8008914:	2210      	movs	r2, #16
 8008916:	2100      	movs	r1, #0
 8008918:	0018      	movs	r0, r3
 800891a:	f014 fa1b 	bl	801cd54 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	1939      	adds	r1, r7, r4
 8008922:	193b      	adds	r3, r7, r4
 8008924:	0018      	movs	r0, r3
 8008926:	f7ff febf 	bl	80086a8 <aes_encrypt>

            if (K[0] & 0x80) {
 800892a:	193b      	adds	r3, r7, r4
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	b25b      	sxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	da2e      	bge.n	8008992 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 8008934:	2300      	movs	r3, #0
 8008936:	647b      	str	r3, [r7, #68]	; 0x44
 8008938:	e018      	b.n	800896c <AES_CMAC_Final+0x66>
 800893a:	201c      	movs	r0, #28
 800893c:	183a      	adds	r2, r7, r0
 800893e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008940:	18d3      	adds	r3, r2, r3
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	b25a      	sxtb	r2, r3
 8008948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800894a:	3301      	adds	r3, #1
 800894c:	1839      	adds	r1, r7, r0
 800894e:	5ccb      	ldrb	r3, [r1, r3]
 8008950:	09db      	lsrs	r3, r3, #7
 8008952:	b2db      	uxtb	r3, r3
 8008954:	b25b      	sxtb	r3, r3
 8008956:	4313      	orrs	r3, r2
 8008958:	b25b      	sxtb	r3, r3
 800895a:	b2d9      	uxtb	r1, r3
 800895c:	183a      	adds	r2, r7, r0
 800895e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008960:	18d3      	adds	r3, r2, r3
 8008962:	1c0a      	adds	r2, r1, #0
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008968:	3301      	adds	r3, #1
 800896a:	647b      	str	r3, [r7, #68]	; 0x44
 800896c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896e:	2b0e      	cmp	r3, #14
 8008970:	dde3      	ble.n	800893a <AES_CMAC_Final+0x34>
 8008972:	211c      	movs	r1, #28
 8008974:	187b      	adds	r3, r7, r1
 8008976:	7bdb      	ldrb	r3, [r3, #15]
 8008978:	18db      	adds	r3, r3, r3
 800897a:	b2da      	uxtb	r2, r3
 800897c:	187b      	adds	r3, r7, r1
 800897e:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 8008980:	187b      	adds	r3, r7, r1
 8008982:	7bdb      	ldrb	r3, [r3, #15]
 8008984:	2279      	movs	r2, #121	; 0x79
 8008986:	4252      	negs	r2, r2
 8008988:	4053      	eors	r3, r2
 800898a:	b2da      	uxtb	r2, r3
 800898c:	187b      	adds	r3, r7, r1
 800898e:	73da      	strb	r2, [r3, #15]
 8008990:	e025      	b.n	80089de <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 8008992:	2300      	movs	r3, #0
 8008994:	643b      	str	r3, [r7, #64]	; 0x40
 8008996:	e018      	b.n	80089ca <AES_CMAC_Final+0xc4>
 8008998:	201c      	movs	r0, #28
 800899a:	183a      	adds	r2, r7, r0
 800899c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800899e:	18d3      	adds	r3, r2, r3
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	b25a      	sxtb	r2, r3
 80089a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a8:	3301      	adds	r3, #1
 80089aa:	1839      	adds	r1, r7, r0
 80089ac:	5ccb      	ldrb	r3, [r1, r3]
 80089ae:	09db      	lsrs	r3, r3, #7
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	4313      	orrs	r3, r2
 80089b6:	b25b      	sxtb	r3, r3
 80089b8:	b2d9      	uxtb	r1, r3
 80089ba:	183a      	adds	r2, r7, r0
 80089bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089be:	18d3      	adds	r3, r2, r3
 80089c0:	1c0a      	adds	r2, r1, #0
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c6:	3301      	adds	r3, #1
 80089c8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089cc:	2b0e      	cmp	r3, #14
 80089ce:	dde3      	ble.n	8008998 <AES_CMAC_Final+0x92>
 80089d0:	211c      	movs	r1, #28
 80089d2:	187b      	adds	r3, r7, r1
 80089d4:	7bdb      	ldrb	r3, [r3, #15]
 80089d6:	18db      	adds	r3, r3, r3
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	187b      	adds	r3, r7, r1
 80089dc:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	238a      	movs	r3, #138	; 0x8a
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	58d3      	ldr	r3, [r2, r3]
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d11f      	bne.n	8008a2a <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 80089ea:	2300      	movs	r3, #0
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ee:	e018      	b.n	8008a22 <AES_CMAC_Final+0x11c>
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	2302      	movs	r3, #2
 80089f4:	33ff      	adds	r3, #255	; 0xff
 80089f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089f8:	188a      	adds	r2, r1, r2
 80089fa:	18d3      	adds	r3, r2, r3
 80089fc:	781a      	ldrb	r2, [r3, #0]
 80089fe:	231c      	movs	r3, #28
 8008a00:	18f9      	adds	r1, r7, r3
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	18cb      	adds	r3, r1, r3
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	4053      	eors	r3, r2
 8008a0a:	b2d8      	uxtb	r0, r3
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	2302      	movs	r3, #2
 8008a10:	33ff      	adds	r3, #255	; 0xff
 8008a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a14:	188a      	adds	r2, r1, r2
 8008a16:	18d3      	adds	r3, r2, r3
 8008a18:	1c02      	adds	r2, r0, #0
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1e:	3301      	adds	r3, #1
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a24:	2b0f      	cmp	r3, #15
 8008a26:	dde3      	ble.n	80089f0 <AES_CMAC_Final+0xea>
 8008a28:	e09f      	b.n	8008b6a <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 8008a2a:	231c      	movs	r3, #28
 8008a2c:	18fb      	adds	r3, r7, r3
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da2e      	bge.n	8008a94 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 8008a36:	2300      	movs	r3, #0
 8008a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a3a:	e018      	b.n	8008a6e <AES_CMAC_Final+0x168>
 8008a3c:	201c      	movs	r0, #28
 8008a3e:	183a      	adds	r2, r7, r0
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	18d3      	adds	r3, r2, r3
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	b25a      	sxtb	r2, r3
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	1839      	adds	r1, r7, r0
 8008a50:	5ccb      	ldrb	r3, [r1, r3]
 8008a52:	09db      	lsrs	r3, r3, #7
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	b25b      	sxtb	r3, r3
 8008a5c:	b2d9      	uxtb	r1, r3
 8008a5e:	183a      	adds	r2, r7, r0
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	18d3      	adds	r3, r2, r3
 8008a64:	1c0a      	adds	r2, r1, #0
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	2b0e      	cmp	r3, #14
 8008a72:	dde3      	ble.n	8008a3c <AES_CMAC_Final+0x136>
 8008a74:	211c      	movs	r1, #28
 8008a76:	187b      	adds	r3, r7, r1
 8008a78:	7bdb      	ldrb	r3, [r3, #15]
 8008a7a:	18db      	adds	r3, r3, r3
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	187b      	adds	r3, r7, r1
 8008a80:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 8008a82:	187b      	adds	r3, r7, r1
 8008a84:	7bdb      	ldrb	r3, [r3, #15]
 8008a86:	2279      	movs	r2, #121	; 0x79
 8008a88:	4252      	negs	r2, r2
 8008a8a:	4053      	eors	r3, r2
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	187b      	adds	r3, r7, r1
 8008a90:	73da      	strb	r2, [r3, #15]
 8008a92:	e025      	b.n	8008ae0 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 8008a94:	2300      	movs	r3, #0
 8008a96:	637b      	str	r3, [r7, #52]	; 0x34
 8008a98:	e018      	b.n	8008acc <AES_CMAC_Final+0x1c6>
 8008a9a:	201c      	movs	r0, #28
 8008a9c:	183a      	adds	r2, r7, r0
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	18d3      	adds	r3, r2, r3
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	b25a      	sxtb	r2, r3
 8008aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aaa:	3301      	adds	r3, #1
 8008aac:	1839      	adds	r1, r7, r0
 8008aae:	5ccb      	ldrb	r3, [r1, r3]
 8008ab0:	09db      	lsrs	r3, r3, #7
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	b25b      	sxtb	r3, r3
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	b25b      	sxtb	r3, r3
 8008aba:	b2d9      	uxtb	r1, r3
 8008abc:	183a      	adds	r2, r7, r0
 8008abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac0:	18d3      	adds	r3, r2, r3
 8008ac2:	1c0a      	adds	r2, r1, #0
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	3301      	adds	r3, #1
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
 8008acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ace:	2b0e      	cmp	r3, #14
 8008ad0:	dde3      	ble.n	8008a9a <AES_CMAC_Final+0x194>
 8008ad2:	211c      	movs	r1, #28
 8008ad4:	187b      	adds	r3, r7, r1
 8008ad6:	7bdb      	ldrb	r3, [r3, #15]
 8008ad8:	18db      	adds	r3, r3, r3
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	187b      	adds	r3, r7, r1
 8008ade:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	238a      	movs	r3, #138	; 0x8a
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	58d2      	ldr	r2, [r2, r3]
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	2302      	movs	r3, #2
 8008aec:	33ff      	adds	r3, #255	; 0xff
 8008aee:	188a      	adds	r2, r1, r2
 8008af0:	18d3      	adds	r3, r2, r3
 8008af2:	2280      	movs	r2, #128	; 0x80
 8008af4:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008af6:	e00a      	b.n	8008b0e <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	238a      	movs	r3, #138	; 0x8a
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	58d2      	ldr	r2, [r2, r3]
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	2302      	movs	r3, #2
 8008b04:	33ff      	adds	r3, #255	; 0xff
 8008b06:	188a      	adds	r2, r1, r2
 8008b08:	18d3      	adds	r3, r2, r3
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	238a      	movs	r3, #138	; 0x8a
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	58d3      	ldr	r3, [r2, r3]
 8008b16:	1c59      	adds	r1, r3, #1
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	238a      	movs	r3, #138	; 0x8a
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	50d1      	str	r1, [r2, r3]
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	238a      	movs	r3, #138	; 0x8a
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	58d3      	ldr	r3, [r2, r3]
 8008b28:	2b0f      	cmp	r3, #15
 8008b2a:	d9e5      	bls.n	8008af8 <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b30:	e018      	b.n	8008b64 <AES_CMAC_Final+0x25e>
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	2302      	movs	r3, #2
 8008b36:	33ff      	adds	r3, #255	; 0xff
 8008b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b3a:	188a      	adds	r2, r1, r2
 8008b3c:	18d3      	adds	r3, r2, r3
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	231c      	movs	r3, #28
 8008b42:	18f9      	adds	r1, r7, r3
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	18cb      	adds	r3, r1, r3
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	4053      	eors	r3, r2
 8008b4c:	b2d8      	uxtb	r0, r3
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	2302      	movs	r3, #2
 8008b52:	33ff      	adds	r3, #255	; 0xff
 8008b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b56:	188a      	adds	r2, r1, r2
 8008b58:	18d3      	adds	r3, r2, r3
 8008b5a:	1c02      	adds	r2, r0, #0
 8008b5c:	701a      	strb	r2, [r3, #0]
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	3301      	adds	r3, #1
 8008b62:	633b      	str	r3, [r7, #48]	; 0x30
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	2b0f      	cmp	r3, #15
 8008b68:	dde3      	ble.n	8008b32 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b6e:	e018      	b.n	8008ba2 <AES_CMAC_Final+0x29c>
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	21f1      	movs	r1, #241	; 0xf1
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	18d3      	adds	r3, r2, r3
 8008b78:	185b      	adds	r3, r3, r1
 8008b7a:	781a      	ldrb	r2, [r3, #0]
 8008b7c:	6838      	ldr	r0, [r7, #0]
 8008b7e:	2302      	movs	r3, #2
 8008b80:	33ff      	adds	r3, #255	; 0xff
 8008b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b84:	1841      	adds	r1, r0, r1
 8008b86:	18cb      	adds	r3, r1, r3
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	4053      	eors	r3, r2
 8008b8c:	b2d8      	uxtb	r0, r3
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	21f1      	movs	r1, #241	; 0xf1
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	18d3      	adds	r3, r2, r3
 8008b96:	185b      	adds	r3, r3, r1
 8008b98:	1c02      	adds	r2, r0, #0
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	2b0f      	cmp	r3, #15
 8008ba6:	dde3      	ble.n	8008b70 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	33f1      	adds	r3, #241	; 0xf1
 8008bac:	0019      	movs	r1, r3
 8008bae:	240c      	movs	r4, #12
 8008bb0:	193b      	adds	r3, r7, r4
 8008bb2:	2210      	movs	r2, #16
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f014 f891 	bl	801ccdc <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	193b      	adds	r3, r7, r4
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f7ff fd71 	bl	80086a8 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8008bc6:	231c      	movs	r3, #28
 8008bc8:	18fb      	adds	r3, r7, r3
 8008bca:	2210      	movs	r2, #16
 8008bcc:	2100      	movs	r1, #0
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f014 f8c0 	bl	801cd54 <memset1>

}
 8008bd4:	46c0      	nop			; (mov r8, r8)
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b013      	add	sp, #76	; 0x4c
 8008bda:	bd90      	pop	{r4, r7, pc}

08008bdc <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	0002      	movs	r2, r0
 8008be4:	6039      	str	r1, [r7, #0]
 8008be6:	1dfb      	adds	r3, r7, #7
 8008be8:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008bea:	230f      	movs	r3, #15
 8008bec:	18fb      	adds	r3, r7, r3
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	e025      	b.n	8008c40 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8008bf4:	230f      	movs	r3, #15
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	4816      	ldr	r0, [pc, #88]	; (8008c54 <GetKeyByID+0x78>)
 8008bfc:	2383      	movs	r3, #131	; 0x83
 8008bfe:	0099      	lsls	r1, r3, #2
 8008c00:	0013      	movs	r3, r2
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	189b      	adds	r3, r3, r2
 8008c06:	18c3      	adds	r3, r0, r3
 8008c08:	185b      	adds	r3, r3, r1
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	1dfa      	adds	r2, r7, #7
 8008c0e:	7812      	ldrb	r2, [r2, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d10f      	bne.n	8008c34 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8008c14:	230f      	movs	r3, #15
 8008c16:	18fb      	adds	r3, r7, r3
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	0013      	movs	r3, r2
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	189b      	adds	r3, r3, r2
 8008c20:	2282      	movs	r2, #130	; 0x82
 8008c22:	0092      	lsls	r2, r2, #2
 8008c24:	189a      	adds	r2, r3, r2
 8008c26:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <GetKeyByID+0x78>)
 8008c28:	18d3      	adds	r3, r2, r3
 8008c2a:	1d1a      	adds	r2, r3, #4
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8008c30:	2300      	movs	r3, #0
 8008c32:	e00b      	b.n	8008c4c <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008c34:	210f      	movs	r1, #15
 8008c36:	187b      	adds	r3, r7, r1
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	3201      	adds	r2, #1
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	230f      	movs	r3, #15
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b15      	cmp	r3, #21
 8008c48:	d9d4      	bls.n	8008bf4 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008c4a:	2303      	movs	r3, #3
}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b004      	add	sp, #16
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	2000010c 	.word	0x2000010c

08008c58 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
SecureElementStatus_t ComputeCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8008c58:	b5b0      	push	{r4, r5, r7, lr}
 8008c5a:	b08a      	sub	sp, #40	; 0x28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	0008      	movs	r0, r1
 8008c62:	0011      	movs	r1, r2
 8008c64:	607b      	str	r3, [r7, #4]
 8008c66:	230a      	movs	r3, #10
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	1c02      	adds	r2, r0, #0
 8008c6c:	801a      	strh	r2, [r3, #0]
 8008c6e:	2309      	movs	r3, #9
 8008c70:	18fb      	adds	r3, r7, r3
 8008c72:	1c0a      	adds	r2, r1, #0
 8008c74:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || cmac == NULL )
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <ComputeCmac+0x2a>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <ComputeCmac+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008c82:	2302      	movs	r3, #2
 8008c84:	e03f      	b.n	8008d06 <ComputeCmac+0xae>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8008c86:	4b22      	ldr	r3, [pc, #136]	; (8008d10 <ComputeCmac+0xb8>)
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f7ff fd58 	bl	800873e <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8008c8e:	2527      	movs	r5, #39	; 0x27
 8008c90:	197c      	adds	r4, r7, r5
 8008c92:	2310      	movs	r3, #16
 8008c94:	18fa      	adds	r2, r7, r3
 8008c96:	2309      	movs	r3, #9
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	0011      	movs	r1, r2
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	f7ff ff9c 	bl	8008bdc <GetKeyByID>
 8008ca4:	0003      	movs	r3, r0
 8008ca6:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8008ca8:	197b      	adds	r3, r7, r5
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d127      	bne.n	8008d00 <ComputeCmac+0xa8>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <ComputeCmac+0xb8>)
 8008cb6:	0011      	movs	r1, r2
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7ff fd5a 	bl	8008772 <AES_CMAC_SetKey>

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8008cbe:	230a      	movs	r3, #10
 8008cc0:	18fb      	adds	r3, r7, r3
 8008cc2:	881a      	ldrh	r2, [r3, #0]
 8008cc4:	68f9      	ldr	r1, [r7, #12]
 8008cc6:	4b12      	ldr	r3, [pc, #72]	; (8008d10 <ComputeCmac+0xb8>)
 8008cc8:	0018      	movs	r0, r3
 8008cca:	f7ff fd61 	bl	8008790 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8008cce:	4a10      	ldr	r2, [pc, #64]	; (8008d10 <ComputeCmac+0xb8>)
 8008cd0:	2114      	movs	r1, #20
 8008cd2:	000c      	movs	r4, r1
 8008cd4:	187b      	adds	r3, r7, r1
 8008cd6:	0011      	movs	r1, r2
 8008cd8:	0018      	movs	r0, r3
 8008cda:	f7ff fe14 	bl	8008906 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8008cde:	0021      	movs	r1, r4
 8008ce0:	187b      	adds	r3, r7, r1
 8008ce2:	78db      	ldrb	r3, [r3, #3]
 8008ce4:	061a      	lsls	r2, r3, #24
 8008ce6:	187b      	adds	r3, r7, r1
 8008ce8:	789b      	ldrb	r3, [r3, #2]
 8008cea:	041b      	lsls	r3, r3, #16
 8008cec:	431a      	orrs	r2, r3
 8008cee:	187b      	adds	r3, r7, r1
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	021b      	lsls	r3, r3, #8
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	187a      	adds	r2, r7, r1
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	601a      	str	r2, [r3, #0]
    }

    return retval;
 8008d00:	2327      	movs	r3, #39	; 0x27
 8008d02:	18fb      	adds	r3, r7, r3
 8008d04:	781b      	ldrb	r3, [r3, #0]
}
 8008d06:	0018      	movs	r0, r3
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	b00a      	add	sp, #40	; 0x28
 8008d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d0e:	46c0      	nop			; (mov r8, r8)
 8008d10:	20000200 	.word	0x20000200

08008d14 <SecureElementSetKey>:
    *seNvmCtxSize = sizeof( SeNvmCtx );
    return &SeNvmCtx;
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8008d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d16:	b089      	sub	sp, #36	; 0x24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	0002      	movs	r2, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	1dfb      	adds	r3, r7, #7
 8008d20:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e063      	b.n	8008df4 <SecureElementSetKey+0xe0>
    }
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008d2c:	231e      	movs	r3, #30
 8008d2e:	18fb      	adds	r3, r7, r3
 8008d30:	2206      	movs	r2, #6
 8008d32:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008d34:	231f      	movs	r3, #31
 8008d36:	18fb      	adds	r3, r7, r3
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	e054      	b.n	8008de8 <SecureElementSetKey+0xd4>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8008d3e:	231f      	movs	r3, #31
 8008d40:	18fb      	adds	r3, r7, r3
 8008d42:	781a      	ldrb	r2, [r3, #0]
 8008d44:	482d      	ldr	r0, [pc, #180]	; (8008dfc <SecureElementSetKey+0xe8>)
 8008d46:	2383      	movs	r3, #131	; 0x83
 8008d48:	0099      	lsls	r1, r3, #2
 8008d4a:	0013      	movs	r3, r2
 8008d4c:	011b      	lsls	r3, r3, #4
 8008d4e:	189b      	adds	r3, r3, r2
 8008d50:	18c3      	adds	r3, r0, r3
 8008d52:	185b      	adds	r3, r3, r1
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	1dfa      	adds	r2, r7, #7
 8008d58:	7812      	ldrb	r2, [r2, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d13e      	bne.n	8008ddc <SecureElementSetKey+0xc8>
        {
            if( LORAMAC_CRYPTO_MULITCAST_KEYS < SeNvmCtx.KeyList[i].KeyID )
 8008d5e:	231f      	movs	r3, #31
 8008d60:	18fb      	adds	r3, r7, r3
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	4825      	ldr	r0, [pc, #148]	; (8008dfc <SecureElementSetKey+0xe8>)
 8008d66:	2383      	movs	r3, #131	; 0x83
 8008d68:	0099      	lsls	r1, r3, #2
 8008d6a:	0013      	movs	r3, r2
 8008d6c:	011b      	lsls	r3, r3, #4
 8008d6e:	189b      	adds	r3, r3, r2
 8008d70:	18c3      	adds	r3, r0, r3
 8008d72:	185b      	adds	r3, r3, r1
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	b25b      	sxtb	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	da19      	bge.n	8008db0 <SecureElementSetKey+0x9c>
            {  // Decrypt the key if its a Mulitcast key

                uint8_t decryptedKey[16] = { 0 };
 8008d7c:	250c      	movs	r5, #12
 8008d7e:	197b      	adds	r3, r7, r5
 8008d80:	0018      	movs	r0, r3
 8008d82:	2310      	movs	r3, #16
 8008d84:	001a      	movs	r2, r3
 8008d86:	2100      	movs	r1, #0
 8008d88:	f01d f8d2 	bl	8025f30 <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8008d8c:	261e      	movs	r6, #30
 8008d8e:	19bc      	adds	r4, r7, r6
 8008d90:	197b      	adds	r3, r7, r5
 8008d92:	6838      	ldr	r0, [r7, #0]
 8008d94:	227f      	movs	r2, #127	; 0x7f
 8008d96:	2110      	movs	r1, #16
 8008d98:	f000 f89a 	bl	8008ed0 <SecureElementAesEncrypt>
 8008d9c:	0003      	movs	r3, r0
 8008d9e:	7023      	strb	r3, [r4, #0]
                if( retval != SECURE_ELEMENT_SUCCESS )
 8008da0:	19bb      	adds	r3, r7, r6
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d019      	beq.n	8008ddc <SecureElementSetKey+0xc8>
                {
                    return retval;
 8008da8:	231e      	movs	r3, #30
 8008daa:	18fb      	adds	r3, r7, r3
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	e021      	b.n	8008df4 <SecureElementSetKey+0xe0>
                }
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8008db0:	231f      	movs	r3, #31
 8008db2:	18fb      	adds	r3, r7, r3
 8008db4:	781a      	ldrb	r2, [r3, #0]
 8008db6:	0013      	movs	r3, r2
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	189b      	adds	r3, r3, r2
 8008dbc:	2282      	movs	r2, #130	; 0x82
 8008dbe:	0092      	lsls	r2, r2, #2
 8008dc0:	189a      	adds	r2, r3, r2
 8008dc2:	4b0e      	ldr	r3, [pc, #56]	; (8008dfc <SecureElementSetKey+0xe8>)
 8008dc4:	18d3      	adds	r3, r2, r3
 8008dc6:	3305      	adds	r3, #5
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	2210      	movs	r2, #16
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f013 ff85 	bl	801ccdc <memcpy1>
                SeNvmCtxChanged( );
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <SecureElementSetKey+0xec>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e00b      	b.n	8008df4 <SecureElementSetKey+0xe0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8008ddc:	211f      	movs	r1, #31
 8008dde:	187b      	adds	r3, r7, r1
 8008de0:	781a      	ldrb	r2, [r3, #0]
 8008de2:	187b      	adds	r3, r7, r1
 8008de4:	3201      	adds	r2, #1
 8008de6:	701a      	strb	r2, [r3, #0]
 8008de8:	231f      	movs	r3, #31
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b15      	cmp	r3, #21
 8008df0:	d9a5      	bls.n	8008d3e <SecureElementSetKey+0x2a>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008df2:	2303      	movs	r3, #3
}
 8008df4:	0018      	movs	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b009      	add	sp, #36	; 0x24
 8008dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dfc:	2000010c 	.word	0x2000010c
 8008e00:	20000490 	.word	0x20000490

08008e04 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8008e04:	b590      	push	{r4, r7, lr}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	0008      	movs	r0, r1
 8008e0e:	0011      	movs	r1, r2
 8008e10:	607b      	str	r3, [r7, #4]
 8008e12:	230a      	movs	r3, #10
 8008e14:	18fb      	adds	r3, r7, r3
 8008e16:	1c02      	adds	r2, r0, #0
 8008e18:	801a      	strh	r2, [r3, #0]
 8008e1a:	2009      	movs	r0, #9
 8008e1c:	183b      	adds	r3, r7, r0
 8008e1e:	1c0a      	adds	r2, r1, #0
 8008e20:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULITCAST_KEYS )
 8008e22:	183b      	adds	r3, r7, r0
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b7e      	cmp	r3, #126	; 0x7e
 8008e28:	d901      	bls.n	8008e2e <SecureElementComputeAesCmac+0x2a>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e00b      	b.n	8008e46 <SecureElementComputeAesCmac+0x42>
    }

    return ComputeCmac( buffer, size, keyID, cmac );
 8008e2e:	687c      	ldr	r4, [r7, #4]
 8008e30:	2309      	movs	r3, #9
 8008e32:	18fb      	adds	r3, r7, r3
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	230a      	movs	r3, #10
 8008e38:	18fb      	adds	r3, r7, r3
 8008e3a:	8819      	ldrh	r1, [r3, #0]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	0023      	movs	r3, r4
 8008e40:	f7ff ff0a 	bl	8008c58 <ComputeCmac>
 8008e44:	0003      	movs	r3, r0
}
 8008e46:	0018      	movs	r0, r3
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	b005      	add	sp, #20
 8008e4c:	bd90      	pop	{r4, r7, pc}

08008e4e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8008e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e50:	b087      	sub	sp, #28
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	0008      	movs	r0, r1
 8008e58:	607a      	str	r2, [r7, #4]
 8008e5a:	0019      	movs	r1, r3
 8008e5c:	230a      	movs	r3, #10
 8008e5e:	18fb      	adds	r3, r7, r3
 8008e60:	1c02      	adds	r2, r0, #0
 8008e62:	801a      	strh	r2, [r3, #0]
 8008e64:	2309      	movs	r3, #9
 8008e66:	18fb      	adds	r3, r7, r3
 8008e68:	1c0a      	adds	r2, r1, #0
 8008e6a:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008e72:	2302      	movs	r3, #2
 8008e74:	e027      	b.n	8008ec6 <SecureElementVerifyAesCmac+0x78>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008e76:	2617      	movs	r6, #23
 8008e78:	19bb      	adds	r3, r7, r6
 8008e7a:	2206      	movs	r2, #6
 8008e7c:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	613b      	str	r3, [r7, #16]

    retval = ComputeCmac( buffer, size, keyID, &compCmac );
 8008e82:	19bc      	adds	r4, r7, r6
 8008e84:	2310      	movs	r3, #16
 8008e86:	18fd      	adds	r5, r7, r3
 8008e88:	2309      	movs	r3, #9
 8008e8a:	18fb      	adds	r3, r7, r3
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	230a      	movs	r3, #10
 8008e90:	18fb      	adds	r3, r7, r3
 8008e92:	8819      	ldrh	r1, [r3, #0]
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	002b      	movs	r3, r5
 8008e98:	f7ff fede 	bl	8008c58 <ComputeCmac>
 8008e9c:	0003      	movs	r3, r0
 8008e9e:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8008ea0:	19bb      	adds	r3, r7, r6
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <SecureElementVerifyAesCmac+0x62>
    {
        return retval;
 8008ea8:	2317      	movs	r3, #23
 8008eaa:	18fb      	adds	r3, r7, r3
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	e00a      	b.n	8008ec6 <SecureElementVerifyAesCmac+0x78>
    }

    if( expectedCmac != compCmac )
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d003      	beq.n	8008ec0 <SecureElementVerifyAesCmac+0x72>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8008eb8:	2317      	movs	r3, #23
 8008eba:	18fb      	adds	r3, r7, r3
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 8008ec0:	2317      	movs	r3, #23
 8008ec2:	18fb      	adds	r3, r7, r3
 8008ec4:	781b      	ldrb	r3, [r3, #0]
}
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	b007      	add	sp, #28
 8008ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008ed0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8008ed0:	b5b0      	push	{r4, r5, r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	0008      	movs	r0, r1
 8008eda:	0011      	movs	r1, r2
 8008edc:	607b      	str	r3, [r7, #4]
 8008ede:	230a      	movs	r3, #10
 8008ee0:	18fb      	adds	r3, r7, r3
 8008ee2:	1c02      	adds	r2, r0, #0
 8008ee4:	801a      	strh	r2, [r3, #0]
 8008ee6:	2309      	movs	r3, #9
 8008ee8:	18fb      	adds	r3, r7, r3
 8008eea:	1c0a      	adds	r2, r1, #0
 8008eec:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <SecureElementAesEncrypt+0x2a>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008efa:	2302      	movs	r3, #2
 8008efc:	e04c      	b.n	8008f98 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8008efe:	230a      	movs	r3, #10
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	220f      	movs	r2, #15
 8008f06:	4013      	ands	r3, r2
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8008f0e:	2305      	movs	r3, #5
 8008f10:	e042      	b.n	8008f98 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8008f12:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <SecureElementAesEncrypt+0xd0>)
 8008f14:	22f0      	movs	r2, #240	; 0xf0
 8008f16:	2100      	movs	r1, #0
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f013 ff1b 	bl	801cd54 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8008f1e:	2516      	movs	r5, #22
 8008f20:	197c      	adds	r4, r7, r5
 8008f22:	2310      	movs	r3, #16
 8008f24:	18fa      	adds	r2, r7, r3
 8008f26:	2309      	movs	r3, #9
 8008f28:	18fb      	adds	r3, r7, r3
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	0011      	movs	r1, r2
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f7ff fe54 	bl	8008bdc <GetKeyByID>
 8008f34:	0003      	movs	r3, r0
 8008f36:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8008f38:	197b      	adds	r3, r7, r5
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d128      	bne.n	8008f92 <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	3301      	adds	r3, #1
 8008f44:	4a16      	ldr	r2, [pc, #88]	; (8008fa0 <SecureElementAesEncrypt+0xd0>)
 8008f46:	2110      	movs	r1, #16
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f7ff fa7b 	bl	8008444 <aes_set_key>

        uint8_t block = 0;
 8008f4e:	2317      	movs	r3, #23
 8008f50:	18fb      	adds	r3, r7, r3
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 8008f56:	e017      	b.n	8008f88 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8008f58:	2417      	movs	r4, #23
 8008f5a:	193b      	adds	r3, r7, r4
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	18d0      	adds	r0, r2, r3
 8008f62:	193b      	adds	r3, r7, r4
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	18d3      	adds	r3, r2, r3
 8008f6a:	4a0d      	ldr	r2, [pc, #52]	; (8008fa0 <SecureElementAesEncrypt+0xd0>)
 8008f6c:	0019      	movs	r1, r3
 8008f6e:	f7ff fb9b 	bl	80086a8 <aes_encrypt>
            block = block + 16;
 8008f72:	193b      	adds	r3, r7, r4
 8008f74:	193a      	adds	r2, r7, r4
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	3210      	adds	r2, #16
 8008f7a:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 8008f7c:	220a      	movs	r2, #10
 8008f7e:	18bb      	adds	r3, r7, r2
 8008f80:	18ba      	adds	r2, r7, r2
 8008f82:	8812      	ldrh	r2, [r2, #0]
 8008f84:	3a10      	subs	r2, #16
 8008f86:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 8008f88:	230a      	movs	r3, #10
 8008f8a:	18fb      	adds	r3, r7, r3
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e2      	bne.n	8008f58 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 8008f92:	2316      	movs	r3, #22
 8008f94:	18fb      	adds	r3, r7, r3
 8008f96:	781b      	ldrb	r3, [r3, #0]
}
 8008f98:	0018      	movs	r0, r3
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b006      	add	sp, #24
 8008f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008fa0:	2000010c 	.word	0x2000010c

08008fa4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8008fa4:	b5b0      	push	{r4, r5, r7, lr}
 8008fa6:	b08a      	sub	sp, #40	; 0x28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	0019      	movs	r1, r3
 8008fb0:	1dfb      	adds	r3, r7, #7
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	1dbb      	adds	r3, r7, #6
 8008fb6:	1c0a      	adds	r2, r1, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e066      	b.n	8009092 <SecureElementDeriveAndStoreKey+0xee>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8008fc4:	2327      	movs	r3, #39	; 0x27
 8008fc6:	18fb      	adds	r3, r7, r3
 8008fc8:	2206      	movs	r2, #6
 8008fca:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 8008fcc:	2314      	movs	r3, #20
 8008fce:	18fb      	adds	r3, r7, r3
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	2310      	movs	r3, #16
 8008fd4:	001a      	movs	r2, r3
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	f01c ffaa 	bl	8025f30 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8008fdc:	1dbb      	adds	r3, r7, #6
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8008fe2:	d10e      	bne.n	8009002 <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8008fe4:	1dfb      	adds	r3, r7, #7
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <SecureElementDeriveAndStoreKey+0x52>
 8008fec:	230c      	movs	r3, #12
 8008fee:	18fb      	adds	r3, r7, r3
 8008ff0:	789b      	ldrb	r3, [r3, #2]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <SecureElementDeriveAndStoreKey+0x5a>
 8008ff6:	1dfb      	adds	r3, r7, #7
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e047      	b.n	8009092 <SecureElementDeriveAndStoreKey+0xee>
        }
    }

    // In case of McKEKey derivation, the parameter input is concatenated: nonce | DevEUI  | pad16
    // where nonce SHALL be greater than 15
    uint16_t nonce = input[0];
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	2124      	movs	r1, #36	; 0x24
 8009008:	187b      	adds	r3, r7, r1
 800900a:	801a      	strh	r2, [r3, #0]
    nonce |= ( ( uint16_t ) input[1] << 8 );
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	3301      	adds	r3, #1
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	b21a      	sxth	r2, r3
 8009016:	187b      	adds	r3, r7, r1
 8009018:	2000      	movs	r0, #0
 800901a:	5e1b      	ldrsh	r3, [r3, r0]
 800901c:	4313      	orrs	r3, r2
 800901e:	b21a      	sxth	r2, r3
 8009020:	187b      	adds	r3, r7, r1
 8009022:	801a      	strh	r2, [r3, #0]
    if( ( targetKeyID == MC_KE_KEY ) && ( nonce < 16 ) )
 8009024:	1dbb      	adds	r3, r7, #6
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b7f      	cmp	r3, #127	; 0x7f
 800902a:	d108      	bne.n	800903e <SecureElementDeriveAndStoreKey+0x9a>
 800902c:	2324      	movs	r3, #36	; 0x24
 800902e:	18fb      	adds	r3, r7, r3
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	2b0f      	cmp	r3, #15
 8009034:	d803      	bhi.n	800903e <SecureElementDeriveAndStoreKey+0x9a>
    {
        return retval;
 8009036:	2327      	movs	r3, #39	; 0x27
 8009038:	18fb      	adds	r3, r7, r3
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	e029      	b.n	8009092 <SecureElementDeriveAndStoreKey+0xee>
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800903e:	2527      	movs	r5, #39	; 0x27
 8009040:	197c      	adds	r4, r7, r5
 8009042:	2314      	movs	r3, #20
 8009044:	18f9      	adds	r1, r7, r3
 8009046:	1dfb      	adds	r3, r7, #7
 8009048:	781a      	ldrb	r2, [r3, #0]
 800904a:	68b8      	ldr	r0, [r7, #8]
 800904c:	000b      	movs	r3, r1
 800904e:	2110      	movs	r1, #16
 8009050:	f7ff ff3e 	bl	8008ed0 <SecureElementAesEncrypt>
 8009054:	0003      	movs	r3, r0
 8009056:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009058:	197b      	adds	r3, r7, r5
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <SecureElementDeriveAndStoreKey+0xc4>
    {
        return retval;
 8009060:	2327      	movs	r3, #39	; 0x27
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	e014      	b.n	8009092 <SecureElementDeriveAndStoreKey+0xee>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 8009068:	2527      	movs	r5, #39	; 0x27
 800906a:	197c      	adds	r4, r7, r5
 800906c:	2314      	movs	r3, #20
 800906e:	18fa      	adds	r2, r7, r3
 8009070:	1dbb      	adds	r3, r7, #6
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	0011      	movs	r1, r2
 8009076:	0018      	movs	r0, r3
 8009078:	f7ff fe4c 	bl	8008d14 <SecureElementSetKey>
 800907c:	0003      	movs	r3, r0
 800907e:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8009080:	197b      	adds	r3, r7, r5
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <SecureElementDeriveAndStoreKey+0xec>
    {
        return retval;
 8009088:	2327      	movs	r3, #39	; 0x27
 800908a:	18fb      	adds	r3, r7, r3
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	e000      	b.n	8009092 <SecureElementDeriveAndStoreKey+0xee>
    }

    return SECURE_ELEMENT_SUCCESS;
 8009090:	2300      	movs	r3, #0
}
 8009092:	0018      	movs	r0, r3
 8009094:	46bd      	mov	sp, r7
 8009096:	b00a      	add	sp, #40	; 0x28
 8009098:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800909c <ProcessRadioTxDone>:
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
#endif
}

static void ProcessRadioTxDone( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80090a2:	4a5e      	ldr	r2, [pc, #376]	; (800921c <ProcessRadioTxDone+0x180>)
 80090a4:	238e      	movs	r3, #142	; 0x8e
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	58d3      	ldr	r3, [r2, r3]
 80090aa:	22c8      	movs	r2, #200	; 0xc8
 80090ac:	5c9b      	ldrb	r3, [r3, r2]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d003      	beq.n	80090ba <ProcessRadioTxDone+0x1e>
    {
        Radio.Sleep( );
 80090b2:	4b5b      	ldr	r3, [pc, #364]	; (8009220 <ProcessRadioTxDone+0x184>)
 80090b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b6:	4798      	blx	r3
 80090b8:	e001      	b.n	80090be <ProcessRadioTxDone+0x22>
    }
    else
    {
        OpenContinuousRx2Window( );
 80090ba:	f002 fbc5 	bl	800b848 <OpenContinuousRx2Window>
    }

    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80090be:	4a57      	ldr	r2, [pc, #348]	; (800921c <ProcessRadioTxDone+0x180>)
 80090c0:	23f1      	movs	r3, #241	; 0xf1
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	58d2      	ldr	r2, [r2, r3]
 80090c6:	4b57      	ldr	r3, [pc, #348]	; (8009224 <ProcessRadioTxDone+0x188>)
 80090c8:	0011      	movs	r1, r2
 80090ca:	0018      	movs	r0, r3
 80090cc:	f013 fd02 	bl	801cad4 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80090d0:	4b54      	ldr	r3, [pc, #336]	; (8009224 <ProcessRadioTxDone+0x188>)
 80090d2:	0018      	movs	r0, r3
 80090d4:	f013 fd2a 	bl	801cb2c <TimerStart>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80090d8:	4a50      	ldr	r2, [pc, #320]	; (800921c <ProcessRadioTxDone+0x180>)
 80090da:	238e      	movs	r3, #142	; 0x8e
 80090dc:	00db      	lsls	r3, r3, #3
 80090de:	58d3      	ldr	r3, [r2, r3]
 80090e0:	22c8      	movs	r2, #200	; 0xc8
 80090e2:	5c9b      	ldrb	r3, [r3, r2]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d00c      	beq.n	8009102 <ProcessRadioTxDone+0x66>
    {
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80090e8:	4a4c      	ldr	r2, [pc, #304]	; (800921c <ProcessRadioTxDone+0x180>)
 80090ea:	23f2      	movs	r3, #242	; 0xf2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	58d2      	ldr	r2, [r2, r3]
 80090f0:	4b4d      	ldr	r3, [pc, #308]	; (8009228 <ProcessRadioTxDone+0x18c>)
 80090f2:	0011      	movs	r1, r2
 80090f4:	0018      	movs	r0, r3
 80090f6:	f013 fced 	bl	801cad4 <TimerSetValue>
        TimerStart( &MacCtx.RxWindowTimer2 );
 80090fa:	4b4b      	ldr	r3, [pc, #300]	; (8009228 <ProcessRadioTxDone+0x18c>)
 80090fc:	0018      	movs	r0, r3
 80090fe:	f013 fd15 	bl	801cb2c <TimerStart>
    }
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NvmCtx->NodeAckRequested == true ) )
 8009102:	4a46      	ldr	r2, [pc, #280]	; (800921c <ProcessRadioTxDone+0x180>)
 8009104:	238e      	movs	r3, #142	; 0x8e
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	58d3      	ldr	r3, [r2, r3]
 800910a:	22c8      	movs	r2, #200	; 0xc8
 800910c:	5c9b      	ldrb	r3, [r3, r2]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d007      	beq.n	8009122 <ProcessRadioTxDone+0x86>
 8009112:	4a42      	ldr	r2, [pc, #264]	; (800921c <ProcessRadioTxDone+0x180>)
 8009114:	238e      	movs	r3, #142	; 0x8e
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	58d3      	ldr	r3, [r2, r3]
 800911a:	4a44      	ldr	r2, [pc, #272]	; (800922c <ProcessRadioTxDone+0x190>)
 800911c:	5c9b      	ldrb	r3, [r3, r2]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d022      	beq.n	8009168 <ProcessRadioTxDone+0xcc>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8009122:	210c      	movs	r1, #12
 8009124:	187b      	adds	r3, r7, r1
 8009126:	2215      	movs	r2, #21
 8009128:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800912a:	4a3c      	ldr	r2, [pc, #240]	; (800921c <ProcessRadioTxDone+0x180>)
 800912c:	238e      	movs	r3, #142	; 0x8e
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	58d3      	ldr	r3, [r2, r3]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	187a      	adds	r2, r7, r1
 8009136:	0011      	movs	r1, r2
 8009138:	0018      	movs	r0, r3
 800913a:	f005 fb77 	bl	800e82c <RegionGetPhyParam>
 800913e:	0003      	movs	r3, r0
 8009140:	001a      	movs	r2, r3
 8009142:	2108      	movs	r1, #8
 8009144:	187b      	adds	r3, r7, r1
 8009146:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009148:	4a34      	ldr	r2, [pc, #208]	; (800921c <ProcessRadioTxDone+0x180>)
 800914a:	23f2      	movs	r3, #242	; 0xf2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	58d2      	ldr	r2, [r2, r3]
 8009150:	187b      	adds	r3, r7, r1
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	18d2      	adds	r2, r2, r3
 8009156:	4b36      	ldr	r3, [pc, #216]	; (8009230 <ProcessRadioTxDone+0x194>)
 8009158:	0011      	movs	r1, r2
 800915a:	0018      	movs	r0, r3
 800915c:	f013 fcba 	bl	801cad4 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009160:	4b33      	ldr	r3, [pc, #204]	; (8009230 <ProcessRadioTxDone+0x194>)
 8009162:	0018      	movs	r0, r3
 8009164:	f013 fce2 	bl	801cb2c <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
 8009168:	4a2c      	ldr	r2, [pc, #176]	; (800921c <ProcessRadioTxDone+0x180>)
 800916a:	238e      	movs	r3, #142	; 0x8e
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	58d1      	ldr	r1, [r2, r3]
 8009170:	4a2a      	ldr	r2, [pc, #168]	; (800921c <ProcessRadioTxDone+0x180>)
 8009172:	238e      	movs	r3, #142	; 0x8e
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	58d2      	ldr	r2, [r2, r3]
 8009178:	2314      	movs	r3, #20
 800917a:	33ff      	adds	r3, #255	; 0xff
 800917c:	5cc9      	ldrb	r1, [r1, r3]
 800917e:	238a      	movs	r3, #138	; 0x8a
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.NvmCtx->Channel;
 8009184:	4a25      	ldr	r2, [pc, #148]	; (800921c <ProcessRadioTxDone+0x180>)
 8009186:	238e      	movs	r3, #142	; 0x8e
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	58d2      	ldr	r2, [r2, r3]
 800918c:	2314      	movs	r3, #20
 800918e:	33ff      	adds	r3, #255	; 0xff
 8009190:	5cd2      	ldrb	r2, [r2, r3]
 8009192:	003b      	movs	r3, r7
 8009194:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009196:	4a21      	ldr	r2, [pc, #132]	; (800921c <ProcessRadioTxDone+0x180>)
 8009198:	238e      	movs	r3, #142	; 0x8e
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	58d2      	ldr	r2, [r2, r3]
 800919e:	2389      	movs	r3, #137	; 0x89
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	5cd3      	ldrb	r3, [r2, r3]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d103      	bne.n	80091b0 <ProcessRadioTxDone+0x114>
    {
        txDone.Joined  = false;
 80091a8:	003b      	movs	r3, r7
 80091aa:	2200      	movs	r2, #0
 80091ac:	705a      	strb	r2, [r3, #1]
 80091ae:	e002      	b.n	80091b6 <ProcessRadioTxDone+0x11a>
    }
    else
    {
        txDone.Joined  = true;
 80091b0:	003b      	movs	r3, r7
 80091b2:	2201      	movs	r2, #1
 80091b4:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80091b6:	4b1f      	ldr	r3, [pc, #124]	; (8009234 <ProcessRadioTxDone+0x198>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	003b      	movs	r3, r7
 80091bc:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 80091be:	4a17      	ldr	r2, [pc, #92]	; (800921c <ProcessRadioTxDone+0x180>)
 80091c0:	238e      	movs	r3, #142	; 0x8e
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	58d3      	ldr	r3, [r2, r3]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	003a      	movs	r2, r7
 80091ca:	0011      	movs	r1, r2
 80091cc:	0018      	movs	r0, r3
 80091ce:	f005 fbb7 	bl	800e940 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.AggregatedLastTxDoneTime = TxDoneParams.CurTime;
 80091d2:	4b18      	ldr	r3, [pc, #96]	; (8009234 <ProcessRadioTxDone+0x198>)
 80091d4:	6819      	ldr	r1, [r3, #0]
 80091d6:	4a11      	ldr	r2, [pc, #68]	; (800921c <ProcessRadioTxDone+0x180>)
 80091d8:	23d0      	movs	r3, #208	; 0xd0
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested == false )
 80091de:	4a0f      	ldr	r2, [pc, #60]	; (800921c <ProcessRadioTxDone+0x180>)
 80091e0:	238e      	movs	r3, #142	; 0x8e
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	58d3      	ldr	r3, [r2, r3]
 80091e6:	4a11      	ldr	r2, [pc, #68]	; (800922c <ProcessRadioTxDone+0x190>)
 80091e8:	5c9b      	ldrb	r3, [r3, r2]
 80091ea:	2201      	movs	r2, #1
 80091ec:	4053      	eors	r3, r2
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00f      	beq.n	8009214 <ProcessRadioTxDone+0x178>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80091f4:	4b09      	ldr	r3, [pc, #36]	; (800921c <ProcessRadioTxDone+0x180>)
 80091f6:	4a10      	ldr	r2, [pc, #64]	; (8009238 <ProcessRadioTxDone+0x19c>)
 80091f8:	2100      	movs	r1, #0
 80091fa:	5499      	strb	r1, [r3, r2]
        MacCtx.NvmCtx->ChannelsNbTransCounter++;
 80091fc:	4a07      	ldr	r2, [pc, #28]	; (800921c <ProcessRadioTxDone+0x180>)
 80091fe:	238e      	movs	r3, #142	; 0x8e
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	58d3      	ldr	r3, [r2, r3]
 8009204:	2288      	movs	r2, #136	; 0x88
 8009206:	0052      	lsls	r2, r2, #1
 8009208:	5c9a      	ldrb	r2, [r3, r2]
 800920a:	3201      	adds	r2, #1
 800920c:	b2d1      	uxtb	r1, r2
 800920e:	2288      	movs	r2, #136	; 0x88
 8009210:	0052      	lsls	r2, r2, #1
 8009212:	5499      	strb	r1, [r3, r2]
    }
}
 8009214:	46c0      	nop			; (mov r8, r8)
 8009216:	46bd      	mov	sp, r7
 8009218:	b004      	add	sp, #16
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000494 	.word	0x20000494
 8009220:	08028964 	.word	0x08028964
 8009224:	20000828 	.word	0x20000828
 8009228:	20000840 	.word	0x20000840
 800922c:	00000219 	.word	0x00000219
 8009230:	20000888 	.word	0x20000888
 8009234:	200020cc 	.word	0x200020cc
 8009238:	0000042d 	.word	0x0000042d

0800923c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009240:	4a12      	ldr	r2, [pc, #72]	; (800928c <PrepareRxDoneAbort+0x50>)
 8009242:	23d5      	movs	r3, #213	; 0xd5
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	58d3      	ldr	r3, [r2, r3]
 8009248:	2280      	movs	r2, #128	; 0x80
 800924a:	431a      	orrs	r2, r3
 800924c:	0011      	movs	r1, r2
 800924e:	4a0f      	ldr	r2, [pc, #60]	; (800928c <PrepareRxDoneAbort+0x50>)
 8009250:	23d5      	movs	r3, #213	; 0xd5
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NodeAckRequested )
 8009256:	4a0d      	ldr	r2, [pc, #52]	; (800928c <PrepareRxDoneAbort+0x50>)
 8009258:	238e      	movs	r3, #142	; 0x8e
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	58d3      	ldr	r3, [r2, r3]
 800925e:	4a0c      	ldr	r2, [pc, #48]	; (8009290 <PrepareRxDoneAbort+0x54>)
 8009260:	5c9b      	ldrb	r3, [r3, r2]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <PrepareRxDoneAbort+0x30>
    {
        OnAckTimeoutTimerEvent( NULL );
 8009266:	2000      	movs	r0, #0
 8009268:	f001 f9d4 	bl	800a614 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800926c:	4b07      	ldr	r3, [pc, #28]	; (800928c <PrepareRxDoneAbort+0x50>)
 800926e:	4a09      	ldr	r2, [pc, #36]	; (8009294 <PrepareRxDoneAbort+0x58>)
 8009270:	5c99      	ldrb	r1, [r3, r2]
 8009272:	2002      	movs	r0, #2
 8009274:	4301      	orrs	r1, r0
 8009276:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009278:	4b04      	ldr	r3, [pc, #16]	; (800928c <PrepareRxDoneAbort+0x50>)
 800927a:	4a06      	ldr	r2, [pc, #24]	; (8009294 <PrepareRxDoneAbort+0x58>)
 800927c:	5c99      	ldrb	r1, [r3, r2]
 800927e:	2010      	movs	r0, #16
 8009280:	4301      	orrs	r1, r0
 8009282:	5499      	strb	r1, [r3, r2]
}
 8009284:	46c0      	nop			; (mov r8, r8)
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	46c0      	nop			; (mov r8, r8)
 800928c:	20000494 	.word	0x20000494
 8009290:	00000219 	.word	0x00000219
 8009294:	0000046d 	.word	0x0000046d

08009298 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8009298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800929a:	b0a7      	sub	sp, #156	; 0x9c
 800929c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800929e:	2380      	movs	r3, #128	; 0x80
 80092a0:	18fb      	adds	r3, r7, r3
 80092a2:	2210      	movs	r2, #16
 80092a4:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 80092a6:	4bda      	ldr	r3, [pc, #872]	; (8009610 <ProcessRadioRxDone+0x378>)
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 80092ac:	247a      	movs	r4, #122	; 0x7a
 80092ae:	193b      	adds	r3, r7, r4
 80092b0:	4ad7      	ldr	r2, [pc, #860]	; (8009610 <ProcessRadioRxDone+0x378>)
 80092b2:	8912      	ldrh	r2, [r2, #8]
 80092b4:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 80092b6:	2078      	movs	r0, #120	; 0x78
 80092b8:	183b      	adds	r3, r7, r0
 80092ba:	4ad5      	ldr	r2, [pc, #852]	; (8009610 <ProcessRadioRxDone+0x378>)
 80092bc:	8952      	ldrh	r2, [r2, #10]
 80092be:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 80092c0:	2577      	movs	r5, #119	; 0x77
 80092c2:	197b      	adds	r3, r7, r5
 80092c4:	4ad2      	ldr	r2, [pc, #840]	; (8009610 <ProcessRadioRxDone+0x378>)
 80092c6:	7b12      	ldrb	r2, [r2, #12]
 80092c8:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 80092ca:	2376      	movs	r3, #118	; 0x76
 80092cc:	18fb      	adds	r3, r7, r3
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80092d6:	4acf      	ldr	r2, [pc, #828]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80092d8:	238e      	movs	r3, #142	; 0x8e
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	58d3      	ldr	r3, [r2, r3]
 80092de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e0:	2284      	movs	r2, #132	; 0x84
 80092e2:	18ba      	adds	r2, r7, r2
 80092e4:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 80092e6:	2383      	movs	r3, #131	; 0x83
 80092e8:	18fb      	adds	r3, r7, r3
 80092ea:	2200      	movs	r2, #0
 80092ec:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80092ee:	2382      	movs	r3, #130	; 0x82
 80092f0:	18fb      	adds	r3, r7, r3
 80092f2:	2204      	movs	r2, #4
 80092f4:	701a      	strb	r2, [r3, #0]
    LoRaMacFCntHandlerStatus_t fCntHandlerStatus;
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 80092f6:	4ac7      	ldr	r2, [pc, #796]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80092f8:	2386      	movs	r3, #134	; 0x86
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	2100      	movs	r1, #0
 80092fe:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 8009300:	4bc4      	ldr	r3, [pc, #784]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009302:	183a      	adds	r2, r7, r0
 8009304:	49c4      	ldr	r1, [pc, #784]	; (8009618 <ProcessRadioRxDone+0x380>)
 8009306:	8812      	ldrh	r2, [r2, #0]
 8009308:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800930a:	4ac2      	ldr	r2, [pc, #776]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800930c:	1979      	adds	r1, r7, r5
 800930e:	2384      	movs	r3, #132	; 0x84
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	7809      	ldrb	r1, [r1, #0]
 8009314:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009316:	4bbf      	ldr	r3, [pc, #764]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009318:	4ac0      	ldr	r2, [pc, #768]	; (800961c <ProcessRadioRxDone+0x384>)
 800931a:	5c99      	ldrb	r1, [r3, r2]
 800931c:	4bbd      	ldr	r3, [pc, #756]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800931e:	4ac0      	ldr	r2, [pc, #768]	; (8009620 <ProcessRadioRxDone+0x388>)
 8009320:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 8009322:	4bbc      	ldr	r3, [pc, #752]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009324:	4abf      	ldr	r2, [pc, #764]	; (8009624 <ProcessRadioRxDone+0x38c>)
 8009326:	2100      	movs	r1, #0
 8009328:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800932a:	4bba      	ldr	r3, [pc, #744]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800932c:	4abe      	ldr	r2, [pc, #760]	; (8009628 <ProcessRadioRxDone+0x390>)
 800932e:	2100      	movs	r1, #0
 8009330:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8009332:	4bb8      	ldr	r3, [pc, #736]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009334:	4abd      	ldr	r2, [pc, #756]	; (800962c <ProcessRadioRxDone+0x394>)
 8009336:	2100      	movs	r1, #0
 8009338:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800933a:	4ab6      	ldr	r2, [pc, #728]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800933c:	2383      	movs	r3, #131	; 0x83
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	2100      	movs	r1, #0
 8009342:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 8009344:	4bb3      	ldr	r3, [pc, #716]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009346:	4aba      	ldr	r2, [pc, #744]	; (8009630 <ProcessRadioRxDone+0x398>)
 8009348:	2100      	movs	r1, #0
 800934a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.RxData = false;
 800934c:	4bb1      	ldr	r3, [pc, #708]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800934e:	4ab9      	ldr	r2, [pc, #740]	; (8009634 <ProcessRadioRxDone+0x39c>)
 8009350:	2100      	movs	r1, #0
 8009352:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8009354:	4baf      	ldr	r3, [pc, #700]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009356:	4ab8      	ldr	r2, [pc, #736]	; (8009638 <ProcessRadioRxDone+0x3a0>)
 8009358:	2100      	movs	r1, #0
 800935a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800935c:	4bad      	ldr	r3, [pc, #692]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800935e:	4ab7      	ldr	r2, [pc, #732]	; (800963c <ProcessRadioRxDone+0x3a4>)
 8009360:	2100      	movs	r1, #0
 8009362:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009364:	4aab      	ldr	r2, [pc, #684]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009366:	2382      	movs	r3, #130	; 0x82
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	2100      	movs	r1, #0
 800936c:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 800936e:	4aa9      	ldr	r2, [pc, #676]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009370:	2385      	movs	r3, #133	; 0x85
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	2100      	movs	r1, #0
 8009376:	50d1      	str	r1, [r2, r3]

    Radio.Sleep( );
 8009378:	4bb1      	ldr	r3, [pc, #708]	; (8009640 <ProcessRadioRxDone+0x3a8>)
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937c:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800937e:	4bb1      	ldr	r3, [pc, #708]	; (8009644 <ProcessRadioRxDone+0x3ac>)
 8009380:	0018      	movs	r0, r3
 8009382:	f013 fc29 	bl	801cbd8 <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009386:	193b      	adds	r3, r7, r4
 8009388:	881a      	ldrh	r2, [r3, #0]
 800938a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800938c:	0011      	movs	r1, r2
 800938e:	0018      	movs	r0, r3
 8009390:	f002 fd32 	bl	800bdf8 <LoRaMacClassBRxBeacon>
 8009394:	1e03      	subs	r3, r0, #0
 8009396:	d00d      	beq.n	80093b4 <ProcessRadioRxDone+0x11c>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009398:	4b9e      	ldr	r3, [pc, #632]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800939a:	2278      	movs	r2, #120	; 0x78
 800939c:	18ba      	adds	r2, r7, r2
 800939e:	49aa      	ldr	r1, [pc, #680]	; (8009648 <ProcessRadioRxDone+0x3b0>)
 80093a0:	8812      	ldrh	r2, [r2, #0]
 80093a2:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80093a4:	4b9b      	ldr	r3, [pc, #620]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80093a6:	2277      	movs	r2, #119	; 0x77
 80093a8:	18ba      	adds	r2, r7, r2
 80093aa:	49a8      	ldr	r1, [pc, #672]	; (800964c <ProcessRadioRxDone+0x3b4>)
 80093ac:	7812      	ldrb	r2, [r2, #0]
 80093ae:	545a      	strb	r2, [r3, r1]
        return;
 80093b0:	f000 fc85 	bl	8009cbe <ProcessRadioRxDone+0xa26>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80093b4:	4a97      	ldr	r2, [pc, #604]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80093b6:	238e      	movs	r3, #142	; 0x8e
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	58d3      	ldr	r3, [r2, r3]
 80093bc:	22c8      	movs	r2, #200	; 0xc8
 80093be:	5c9b      	ldrb	r3, [r3, r2]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d11c      	bne.n	80093fe <ProcessRadioRxDone+0x166>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80093c4:	f002 fd2a 	bl	800be1c <LoRaMacClassBIsPingExpected>
 80093c8:	1e03      	subs	r3, r0, #0
 80093ca:	d00a      	beq.n	80093e2 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80093cc:	2000      	movs	r0, #0
 80093ce:	f002 fce7 	bl	800bda0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80093d2:	2000      	movs	r0, #0
 80093d4:	f002 fd00 	bl	800bdd8 <LoRaMacClassBPingSlotTimerEvent>
             MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_PING_SLOT;
 80093d8:	4b8e      	ldr	r3, [pc, #568]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80093da:	4a91      	ldr	r2, [pc, #580]	; (8009620 <ProcessRadioRxDone+0x388>)
 80093dc:	2103      	movs	r1, #3
 80093de:	5499      	strb	r1, [r3, r2]
 80093e0:	e00d      	b.n	80093fe <ProcessRadioRxDone+0x166>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80093e2:	f002 fd21 	bl	800be28 <LoRaMacClassBIsMulticastExpected>
 80093e6:	1e03      	subs	r3, r0, #0
 80093e8:	d009      	beq.n	80093fe <ProcessRadioRxDone+0x166>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80093ea:	2000      	movs	r0, #0
 80093ec:	f002 fce2 	bl	800bdb4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80093f0:	2000      	movs	r0, #0
 80093f2:	f002 fcf9 	bl	800bde8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_MULTICAST_SLOT;
 80093f6:	4b87      	ldr	r3, [pc, #540]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80093f8:	4a89      	ldr	r2, [pc, #548]	; (8009620 <ProcessRadioRxDone+0x388>)
 80093fa:	2104      	movs	r1, #4
 80093fc:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 80093fe:	2276      	movs	r2, #118	; 0x76
 8009400:	18bb      	adds	r3, r7, r2
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	18ba      	adds	r2, r7, r2
 8009406:	1c59      	adds	r1, r3, #1
 8009408:	7011      	strb	r1, [r2, #0]
 800940a:	001a      	movs	r2, r3
 800940c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800940e:	189b      	adds	r3, r3, r2
 8009410:	781a      	ldrb	r2, [r3, #0]
 8009412:	2174      	movs	r1, #116	; 0x74
 8009414:	187b      	adds	r3, r7, r1
 8009416:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 8009418:	187b      	adds	r3, r7, r1
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	061b      	lsls	r3, r3, #24
 800941e:	0f5b      	lsrs	r3, r3, #29
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b03      	cmp	r3, #3
 8009424:	d100      	bne.n	8009428 <ProcessRadioRxDone+0x190>
 8009426:	e11c      	b.n	8009662 <ProcessRadioRxDone+0x3ca>
 8009428:	dc03      	bgt.n	8009432 <ProcessRadioRxDone+0x19a>
 800942a:	2b01      	cmp	r3, #1
 800942c:	d00a      	beq.n	8009444 <ProcessRadioRxDone+0x1ac>
 800942e:	f000 fc18 	bl	8009c62 <ProcessRadioRxDone+0x9ca>
 8009432:	2b05      	cmp	r3, #5
 8009434:	d100      	bne.n	8009438 <ProcessRadioRxDone+0x1a0>
 8009436:	e10f      	b.n	8009658 <ProcessRadioRxDone+0x3c0>
 8009438:	2b07      	cmp	r3, #7
 800943a:	d101      	bne.n	8009440 <ProcessRadioRxDone+0x1a8>
 800943c:	f000 fbe6 	bl	8009c0c <ProcessRadioRxDone+0x974>
 8009440:	f000 fc0f 	bl	8009c62 <ProcessRadioRxDone+0x9ca>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 8009444:	210c      	movs	r1, #12
 8009446:	187b      	adds	r3, r7, r1
 8009448:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800944a:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800944c:	237a      	movs	r3, #122	; 0x7a
 800944e:	18fb      	adds	r3, r7, r3
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b2da      	uxtb	r2, r3
 8009454:	187b      	adds	r3, r7, r1
 8009456:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009458:	4a6e      	ldr	r2, [pc, #440]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800945a:	238e      	movs	r3, #142	; 0x8e
 800945c:	00db      	lsls	r3, r3, #3
 800945e:	58d2      	ldr	r2, [r2, r3]
 8009460:	2389      	movs	r3, #137	; 0x89
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	5cd3      	ldrb	r3, [r2, r3]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <ProcessRadioRxDone+0x1e2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800946a:	4b6a      	ldr	r3, [pc, #424]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800946c:	4a78      	ldr	r2, [pc, #480]	; (8009650 <ProcessRadioRxDone+0x3b8>)
 800946e:	2101      	movs	r1, #1
 8009470:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009472:	f7ff fee3 	bl	800923c <PrepareRxDoneAbort>
                return;
 8009476:	f000 fc22 	bl	8009cbe <ProcessRadioRxDone+0xa26>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, MacCtx.JoinEui, &macMsgJoinAccept );
 800947a:	4b66      	ldr	r3, [pc, #408]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2580      	movs	r5, #128	; 0x80
 8009480:	197c      	adds	r4, r7, r5
 8009482:	220c      	movs	r2, #12
 8009484:	18ba      	adds	r2, r7, r2
 8009486:	0019      	movs	r1, r3
 8009488:	20ff      	movs	r0, #255	; 0xff
 800948a:	f004 f841 	bl	800d510 <LoRaMacCryptoHandleJoinAccept>
 800948e:	0003      	movs	r3, r0
 8009490:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8009492:	197b      	adds	r3, r7, r5
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d000      	beq.n	800949c <ProcessRadioRxDone+0x204>
 800949a:	e0ad      	b.n	80095f8 <ProcessRadioRxDone+0x360>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800949c:	240c      	movs	r4, #12
 800949e:	193b      	adds	r3, r7, r4
 80094a0:	7a59      	ldrb	r1, [r3, #9]
 80094a2:	4a5c      	ldr	r2, [pc, #368]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80094a4:	238e      	movs	r3, #142	; 0x8e
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	58d3      	ldr	r3, [r2, r3]
 80094aa:	000a      	movs	r2, r1
 80094ac:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80094ae:	4a59      	ldr	r2, [pc, #356]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80094b0:	238e      	movs	r3, #142	; 0x8e
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	58d3      	ldr	r3, [r2, r3]
 80094b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80094b8:	193b      	adds	r3, r7, r4
 80094ba:	7a9b      	ldrb	r3, [r3, #10]
 80094bc:	021a      	lsls	r2, r3, #8
 80094be:	4855      	ldr	r0, [pc, #340]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80094c0:	238e      	movs	r3, #142	; 0x8e
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	58c3      	ldr	r3, [r0, r3]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	641a      	str	r2, [r3, #64]	; 0x40
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80094ca:	4a52      	ldr	r2, [pc, #328]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80094cc:	238e      	movs	r3, #142	; 0x8e
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	58d3      	ldr	r3, [r2, r3]
 80094d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80094d4:	193b      	adds	r3, r7, r4
 80094d6:	7adb      	ldrb	r3, [r3, #11]
 80094d8:	041a      	lsls	r2, r3, #16
 80094da:	484e      	ldr	r0, [pc, #312]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80094dc:	238e      	movs	r3, #142	; 0x8e
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	58c3      	ldr	r3, [r0, r3]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	641a      	str	r2, [r3, #64]	; 0x40

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 80094e6:	4a4b      	ldr	r2, [pc, #300]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80094e8:	238e      	movs	r3, #142	; 0x8e
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	58d3      	ldr	r3, [r2, r3]
 80094ee:	193a      	adds	r2, r7, r4
 80094f0:	68d2      	ldr	r2, [r2, #12]
 80094f2:	645a      	str	r2, [r3, #68]	; 0x44

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80094f4:	193b      	adds	r3, r7, r4
 80094f6:	7c1b      	ldrb	r3, [r3, #16]
 80094f8:	065b      	lsls	r3, r3, #25
 80094fa:	0f5b      	lsrs	r3, r3, #29
 80094fc:	b2d9      	uxtb	r1, r3
 80094fe:	4a45      	ldr	r2, [pc, #276]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009500:	238e      	movs	r3, #142	; 0x8e
 8009502:	00db      	lsls	r3, r3, #3
 8009504:	58d3      	ldr	r3, [r2, r3]
 8009506:	22f5      	movs	r2, #245	; 0xf5
 8009508:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800950a:	193b      	adds	r3, r7, r4
 800950c:	7c1b      	ldrb	r3, [r3, #16]
 800950e:	071b      	lsls	r3, r3, #28
 8009510:	0f1b      	lsrs	r3, r3, #28
 8009512:	b2d9      	uxtb	r1, r3
 8009514:	4a3f      	ldr	r2, [pc, #252]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009516:	238e      	movs	r3, #142	; 0x8e
 8009518:	00db      	lsls	r3, r3, #3
 800951a:	58d3      	ldr	r3, [r2, r3]
 800951c:	22fc      	movs	r2, #252	; 0xfc
 800951e:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009520:	193b      	adds	r3, r7, r4
 8009522:	7c59      	ldrb	r1, [r3, #17]
 8009524:	4a3b      	ldr	r2, [pc, #236]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009526:	238e      	movs	r3, #142	; 0x8e
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	58d3      	ldr	r3, [r2, r3]
 800952c:	22e4      	movs	r2, #228	; 0xe4
 800952e:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8009530:	4a38      	ldr	r2, [pc, #224]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009532:	238e      	movs	r3, #142	; 0x8e
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	58d3      	ldr	r3, [r2, r3]
 8009538:	22e4      	movs	r2, #228	; 0xe4
 800953a:	589b      	ldr	r3, [r3, r2]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d106      	bne.n	800954e <ProcessRadioRxDone+0x2b6>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8009540:	4a34      	ldr	r2, [pc, #208]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009542:	238e      	movs	r3, #142	; 0x8e
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	58d3      	ldr	r3, [r2, r3]
 8009548:	22e4      	movs	r2, #228	; 0xe4
 800954a:	2101      	movs	r1, #1
 800954c:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800954e:	4a31      	ldr	r2, [pc, #196]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009550:	238e      	movs	r3, #142	; 0x8e
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	58d3      	ldr	r3, [r2, r3]
 8009556:	22e4      	movs	r2, #228	; 0xe4
 8009558:	589a      	ldr	r2, [r3, r2]
 800955a:	492e      	ldr	r1, [pc, #184]	; (8009614 <ProcessRadioRxDone+0x37c>)
 800955c:	238e      	movs	r3, #142	; 0x8e
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	58c9      	ldr	r1, [r1, r3]
 8009562:	0013      	movs	r3, r2
 8009564:	015b      	lsls	r3, r3, #5
 8009566:	1a9b      	subs	r3, r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	189b      	adds	r3, r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	001a      	movs	r2, r3
 8009570:	23e4      	movs	r3, #228	; 0xe4
 8009572:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009574:	4a27      	ldr	r2, [pc, #156]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009576:	238e      	movs	r3, #142	; 0x8e
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	58d3      	ldr	r3, [r2, r3]
 800957c:	22e4      	movs	r2, #228	; 0xe4
 800957e:	589a      	ldr	r2, [r3, r2]
 8009580:	4924      	ldr	r1, [pc, #144]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009582:	238e      	movs	r3, #142	; 0x8e
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	58cb      	ldr	r3, [r1, r3]
 8009588:	21fa      	movs	r1, #250	; 0xfa
 800958a:	0089      	lsls	r1, r1, #2
 800958c:	468c      	mov	ip, r1
 800958e:	4462      	add	r2, ip
 8009590:	21e8      	movs	r1, #232	; 0xe8
 8009592:	505a      	str	r2, [r3, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8009594:	4a1f      	ldr	r2, [pc, #124]	; (8009614 <ProcessRadioRxDone+0x37c>)
 8009596:	238e      	movs	r3, #142	; 0x8e
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	58d3      	ldr	r3, [r2, r3]
 800959c:	4a2d      	ldr	r2, [pc, #180]	; (8009654 <ProcessRadioRxDone+0x3bc>)
 800959e:	2100      	movs	r1, #0
 80095a0:	5499      	strb	r1, [r3, r2]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80095a2:	216c      	movs	r1, #108	; 0x6c
 80095a4:	187b      	adds	r3, r7, r1
 80095a6:	220c      	movs	r2, #12
 80095a8:	18ba      	adds	r2, r7, r2
 80095aa:	3212      	adds	r2, #18
 80095ac:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 80095ae:	237a      	movs	r3, #122	; 0x7a
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	3b11      	subs	r3, #17
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	187b      	adds	r3, r7, r1
 80095bc:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 80095be:	4a15      	ldr	r2, [pc, #84]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80095c0:	238e      	movs	r3, #142	; 0x8e
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	58d3      	ldr	r3, [r2, r3]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	187a      	adds	r2, r7, r1
 80095ca:	0011      	movs	r1, r2
 80095cc:	0018      	movs	r0, r3
 80095ce:	f005 fa49 	bl	800ea64 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 80095d2:	4a10      	ldr	r2, [pc, #64]	; (8009614 <ProcessRadioRxDone+0x37c>)
 80095d4:	238e      	movs	r3, #142	; 0x8e
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	58d2      	ldr	r2, [r2, r3]
 80095da:	2389      	movs	r3, #137	; 0x89
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	2102      	movs	r1, #2
 80095e0:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80095e2:	2000      	movs	r0, #0
 80095e4:	f002 ffa6 	bl	800c534 <LoRaMacConfirmQueueIsCmdActive>
 80095e8:	1e03      	subs	r3, r0, #0
 80095ea:	d100      	bne.n	80095ee <ProcessRadioRxDone+0x356>
 80095ec:	e340      	b.n	8009c70 <ProcessRadioRxDone+0x9d8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80095ee:	2100      	movs	r1, #0
 80095f0:	2000      	movs	r0, #0
 80095f2:	f002 ff11 	bl	800c418 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 80095f6:	e33b      	b.n	8009c70 <ProcessRadioRxDone+0x9d8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80095f8:	2000      	movs	r0, #0
 80095fa:	f002 ff9b 	bl	800c534 <LoRaMacConfirmQueueIsCmdActive>
 80095fe:	1e03      	subs	r3, r0, #0
 8009600:	d100      	bne.n	8009604 <ProcessRadioRxDone+0x36c>
 8009602:	e335      	b.n	8009c70 <ProcessRadioRxDone+0x9d8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009604:	2100      	movs	r1, #0
 8009606:	2007      	movs	r0, #7
 8009608:	f002 ff06 	bl	800c418 <LoRaMacConfirmQueueSetStatus>
            break;
 800960c:	e330      	b.n	8009c70 <ProcessRadioRxDone+0x9d8>
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	200020d0 	.word	0x200020d0
 8009614:	20000494 	.word	0x20000494
 8009618:	0000041e 	.word	0x0000041e
 800961c:	0000046c 	.word	0x0000046c
 8009620:	00000421 	.word	0x00000421
 8009624:	00000413 	.word	0x00000413
 8009628:	00000412 	.word	0x00000412
 800962c:	00000415 	.word	0x00000415
 8009630:	0000041c 	.word	0x0000041c
 8009634:	0000041d 	.word	0x0000041d
 8009638:	00000422 	.word	0x00000422
 800963c:	00000424 	.word	0x00000424
 8009640:	08028964 	.word	0x08028964
 8009644:	20000840 	.word	0x20000840
 8009648:	00000462 	.word	0x00000462
 800964c:	00000464 	.word	0x00000464
 8009650:	00000411 	.word	0x00000411
 8009654:	00000222 	.word	0x00000222
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009658:	4ac7      	ldr	r2, [pc, #796]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 800965a:	2382      	movs	r3, #130	; 0x82
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	2101      	movs	r1, #1
 8009660:	54d1      	strb	r1, [r2, r3]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009662:	4ac5      	ldr	r2, [pc, #788]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009664:	238e      	movs	r3, #142	; 0x8e
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	58d2      	ldr	r2, [r2, r3]
 800966a:	2302      	movs	r3, #2
 800966c:	33ff      	adds	r3, #255	; 0xff
 800966e:	5cd2      	ldrb	r2, [r2, r3]
 8009670:	2168      	movs	r1, #104	; 0x68
 8009672:	187b      	adds	r3, r7, r1
 8009674:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009676:	4bc0      	ldr	r3, [pc, #768]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009678:	4ac0      	ldr	r2, [pc, #768]	; (800997c <ProcessRadioRxDone+0x6e4>)
 800967a:	5c9b      	ldrb	r3, [r3, r2]
 800967c:	b25a      	sxtb	r2, r3
 800967e:	187b      	adds	r3, r7, r1
 8009680:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009682:	187b      	adds	r3, r7, r1
 8009684:	220c      	movs	r2, #12
 8009686:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009688:	4abb      	ldr	r2, [pc, #748]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 800968a:	238e      	movs	r3, #142	; 0x8e
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	58d2      	ldr	r2, [r2, r3]
 8009690:	2316      	movs	r3, #22
 8009692:	33ff      	adds	r3, #255	; 0xff
 8009694:	5cd3      	ldrb	r3, [r2, r3]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <ProcessRadioRxDone+0x40a>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800969a:	2368      	movs	r3, #104	; 0x68
 800969c:	18fb      	adds	r3, r7, r3
 800969e:	220d      	movs	r2, #13
 80096a0:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096a2:	4ab5      	ldr	r2, [pc, #724]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80096a4:	238e      	movs	r3, #142	; 0x8e
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	58d3      	ldr	r3, [r2, r3]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2268      	movs	r2, #104	; 0x68
 80096ae:	18ba      	adds	r2, r7, r2
 80096b0:	0011      	movs	r1, r2
 80096b2:	0018      	movs	r0, r3
 80096b4:	f005 f8ba 	bl	800e82c <RegionGetPhyParam>
 80096b8:	0003      	movs	r3, r0
 80096ba:	001a      	movs	r2, r3
 80096bc:	2364      	movs	r3, #100	; 0x64
 80096be:	18fb      	adds	r3, r7, r3
 80096c0:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 80096c2:	237a      	movs	r3, #122	; 0x7a
 80096c4:	18fb      	adds	r3, r7, r3
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	3b0d      	subs	r3, #13
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	b21b      	sxth	r3, r3
 80096ce:	1c1a      	adds	r2, r3, #0
 80096d0:	b213      	sxth	r3, r2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	da01      	bge.n	80096da <ProcessRadioRxDone+0x442>
 80096d6:	2300      	movs	r3, #0
 80096d8:	1c1a      	adds	r2, r3, #0
 80096da:	b212      	sxth	r2, r2
 80096dc:	2364      	movs	r3, #100	; 0x64
 80096de:	18fb      	adds	r3, r7, r3
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	b21b      	sxth	r3, r3
 80096e4:	429a      	cmp	r2, r3
 80096e6:	dd06      	ble.n	80096f6 <ProcessRadioRxDone+0x45e>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80096e8:	4ba3      	ldr	r3, [pc, #652]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80096ea:	4aa5      	ldr	r2, [pc, #660]	; (8009980 <ProcessRadioRxDone+0x6e8>)
 80096ec:	2101      	movs	r1, #1
 80096ee:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 80096f0:	f7ff fda4 	bl	800923c <PrepareRxDoneAbort>
                return;
 80096f4:	e2e3      	b.n	8009cbe <ProcessRadioRxDone+0xa26>
            }
            macMsgData.Buffer = payload;
 80096f6:	2134      	movs	r1, #52	; 0x34
 80096f8:	187b      	adds	r3, r7, r1
 80096fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096fc:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 80096fe:	237a      	movs	r3, #122	; 0x7a
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	b2da      	uxtb	r2, r3
 8009706:	187b      	adds	r3, r7, r1
 8009708:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800970a:	187b      	adds	r3, r7, r1
 800970c:	4a9d      	ldr	r2, [pc, #628]	; (8009984 <ProcessRadioRxDone+0x6ec>)
 800970e:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009710:	0008      	movs	r0, r1
 8009712:	187b      	adds	r3, r7, r1
 8009714:	2228      	movs	r2, #40	; 0x28
 8009716:	21ff      	movs	r1, #255	; 0xff
 8009718:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800971a:	183b      	adds	r3, r7, r0
 800971c:	0018      	movs	r0, r3
 800971e:	f004 fdb6 	bl	800e28e <LoRaMacParserData>
 8009722:	1e03      	subs	r3, r0, #0
 8009724:	d006      	beq.n	8009734 <ProcessRadioRxDone+0x49c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009726:	4b94      	ldr	r3, [pc, #592]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009728:	4a95      	ldr	r2, [pc, #596]	; (8009980 <ProcessRadioRxDone+0x6e8>)
 800972a:	2101      	movs	r1, #1
 800972c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800972e:	f7ff fd85 	bl	800923c <PrepareRxDoneAbort>
                return;
 8009732:	e2c4      	b.n	8009cbe <ProcessRadioRxDone+0xa26>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009734:	2034      	movs	r0, #52	; 0x34
 8009736:	183b      	adds	r3, r7, r0
 8009738:	6899      	ldr	r1, [r3, #8]
 800973a:	4a8f      	ldr	r2, [pc, #572]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 800973c:	2385      	movs	r3, #133	; 0x85
 800973e:	00db      	lsls	r3, r3, #3
 8009740:	50d1      	str	r1, [r2, r3]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009742:	1dba      	adds	r2, r7, #6
 8009744:	183b      	adds	r3, r7, r0
 8009746:	0011      	movs	r1, r2
 8009748:	0018      	movs	r0, r3
 800974a:	f002 f951 	bl	800b9f0 <DetermineFrameType>
 800974e:	1e03      	subs	r3, r0, #0
 8009750:	d006      	beq.n	8009760 <ProcessRadioRxDone+0x4c8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009752:	4b89      	ldr	r3, [pc, #548]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009754:	4a8a      	ldr	r2, [pc, #552]	; (8009980 <ProcessRadioRxDone+0x6e8>)
 8009756:	2101      	movs	r1, #1
 8009758:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800975a:	f7ff fd6f 	bl	800923c <PrepareRxDoneAbort>
                return;
 800975e:	e2ae      	b.n	8009cbe <ProcessRadioRxDone+0xa26>
            }

            //Check if it is a multicast message
            multicast = 0;
 8009760:	2383      	movs	r3, #131	; 0x83
 8009762:	18fb      	adds	r3, r7, r3
 8009764:	2200      	movs	r2, #0
 8009766:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800976c:	2381      	movs	r3, #129	; 0x81
 800976e:	18fb      	adds	r3, r7, r3
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e051      	b.n	800981a <ProcessRadioRxDone+0x582>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 8009776:	4a80      	ldr	r2, [pc, #512]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009778:	238e      	movs	r3, #142	; 0x8e
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	58d2      	ldr	r2, [r2, r3]
 800977e:	2381      	movs	r3, #129	; 0x81
 8009780:	18fb      	adds	r3, r7, r3
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	015b      	lsls	r3, r3, #5
 8009786:	18d3      	adds	r3, r2, r3
 8009788:	334c      	adds	r3, #76	; 0x4c
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	2334      	movs	r3, #52	; 0x34
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	d13b      	bne.n	800980e <ProcessRadioRxDone+0x576>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].IsEnabled == true ) )
 8009796:	4a78      	ldr	r2, [pc, #480]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009798:	238e      	movs	r3, #142	; 0x8e
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	58d2      	ldr	r2, [r2, r3]
 800979e:	2381      	movs	r3, #129	; 0x81
 80097a0:	18fb      	adds	r3, r7, r3
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2154      	movs	r1, #84	; 0x54
 80097a6:	015b      	lsls	r3, r3, #5
 80097a8:	18d3      	adds	r3, r2, r3
 80097aa:	185b      	adds	r3, r3, r1
 80097ac:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].Address == macMsgData.FHDR.DevAddr ) &&
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d02d      	beq.n	800980e <ProcessRadioRxDone+0x576>
                {
                    multicast = 1;
 80097b2:	2383      	movs	r3, #131	; 0x83
 80097b4:	18fb      	adds	r3, r7, r3
 80097b6:	2201      	movs	r2, #1
 80097b8:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].AddrID;
 80097ba:	4a6f      	ldr	r2, [pc, #444]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80097bc:	238e      	movs	r3, #142	; 0x8e
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	58d1      	ldr	r1, [r2, r3]
 80097c2:	2481      	movs	r4, #129	; 0x81
 80097c4:	193b      	adds	r3, r7, r4
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	2382      	movs	r3, #130	; 0x82
 80097ca:	18fb      	adds	r3, r7, r3
 80097cc:	2048      	movs	r0, #72	; 0x48
 80097ce:	0152      	lsls	r2, r2, #5
 80097d0:	188a      	adds	r2, r1, r2
 80097d2:	1812      	adds	r2, r2, r0
 80097d4:	7812      	ldrb	r2, [r2, #0]
 80097d6:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80097d8:	4a67      	ldr	r2, [pc, #412]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80097da:	238e      	movs	r3, #142	; 0x8e
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	58d2      	ldr	r2, [r2, r3]
 80097e0:	0021      	movs	r1, r4
 80097e2:	187b      	adds	r3, r7, r1
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	015b      	lsls	r3, r3, #5
 80097e8:	18d3      	adds	r3, r2, r3
 80097ea:	3350      	adds	r3, #80	; 0x50
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].Address;
 80097f2:	4a61      	ldr	r2, [pc, #388]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80097f4:	238e      	movs	r3, #142	; 0x8e
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	58d2      	ldr	r2, [r2, r3]
 80097fa:	187b      	adds	r3, r7, r1
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	015b      	lsls	r3, r3, #5
 8009800:	18d3      	adds	r3, r2, r3
 8009802:	334c      	adds	r3, #76	; 0x4c
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2284      	movs	r2, #132	; 0x84
 8009808:	18ba      	adds	r2, r7, r2
 800980a:	6013      	str	r3, [r2, #0]
                    break;
 800980c:	e00a      	b.n	8009824 <ProcessRadioRxDone+0x58c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800980e:	2181      	movs	r1, #129	; 0x81
 8009810:	187b      	adds	r3, r7, r1
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	187b      	adds	r3, r7, r1
 8009816:	3201      	adds	r2, #1
 8009818:	701a      	strb	r2, [r3, #0]
 800981a:	2381      	movs	r3, #129	; 0x81
 800981c:	18fb      	adds	r3, r7, r3
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2b03      	cmp	r3, #3
 8009822:	d9a8      	bls.n	8009776 <ProcessRadioRxDone+0x4de>
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8009824:	2168      	movs	r1, #104	; 0x68
 8009826:	187b      	adds	r3, r7, r1
 8009828:	2214      	movs	r2, #20
 800982a:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800982c:	4a52      	ldr	r2, [pc, #328]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 800982e:	238e      	movs	r3, #142	; 0x8e
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	58d3      	ldr	r3, [r2, r3]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	187a      	adds	r2, r7, r1
 8009838:	0011      	movs	r1, r2
 800983a:	0018      	movs	r0, r3
 800983c:	f004 fff6 	bl	800e82c <RegionGetPhyParam>
 8009840:	0003      	movs	r3, r0
 8009842:	001a      	movs	r2, r3
 8009844:	2064      	movs	r0, #100	; 0x64
 8009846:	183b      	adds	r3, r7, r0
 8009848:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            fCntHandlerStatus = LoRaMacGetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800984a:	1dbb      	adds	r3, r7, #6
 800984c:	781d      	ldrb	r5, [r3, #0]
 800984e:	4a4a      	ldr	r2, [pc, #296]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009850:	238e      	movs	r3, #142	; 0x8e
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	58d1      	ldr	r1, [r2, r3]
 8009856:	183b      	adds	r3, r7, r0
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	b29b      	uxth	r3, r3
 800985c:	2275      	movs	r2, #117	; 0x75
 800985e:	18bc      	adds	r4, r7, r2
 8009860:	2288      	movs	r2, #136	; 0x88
 8009862:	0092      	lsls	r2, r2, #2
 8009864:	588e      	ldr	r6, [r1, r2]
 8009866:	2134      	movs	r1, #52	; 0x34
 8009868:	1879      	adds	r1, r7, r1
 800986a:	2082      	movs	r0, #130	; 0x82
 800986c:	183a      	adds	r2, r7, r0
 800986e:	7810      	ldrb	r0, [r2, #0]
 8009870:	2208      	movs	r2, #8
 8009872:	18ba      	adds	r2, r7, r2
 8009874:	9202      	str	r2, [sp, #8]
 8009876:	1dfa      	adds	r2, r7, #7
 8009878:	9201      	str	r2, [sp, #4]
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	0033      	movs	r3, r6
 800987e:	000a      	movs	r2, r1
 8009880:	0029      	movs	r1, r5
 8009882:	f004 fad9 	bl	800de38 <LoRaMacGetFCntDown>
 8009886:	0003      	movs	r3, r0
 8009888:	7023      	strb	r3, [r4, #0]
            if( fCntHandlerStatus != LORAMAC_FCNT_HANDLER_SUCCESS )
 800988a:	2275      	movs	r2, #117	; 0x75
 800988c:	18bb      	adds	r3, r7, r2
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d041      	beq.n	8009918 <ProcessRadioRxDone+0x680>
            {
                if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_CHECK_FAIL )
 8009894:	2375      	movs	r3, #117	; 0x75
 8009896:	18fb      	adds	r3, r7, r3
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d127      	bne.n	80098ee <ProcessRadioRxDone+0x656>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800989e:	4b36      	ldr	r3, [pc, #216]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80098a0:	4a37      	ldr	r2, [pc, #220]	; (8009980 <ProcessRadioRxDone+0x6e8>)
 80098a2:	2108      	movs	r1, #8
 80098a4:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 80098a6:	4a34      	ldr	r2, [pc, #208]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80098a8:	238e      	movs	r3, #142	; 0x8e
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	58d3      	ldr	r3, [r2, r3]
 80098ae:	4a36      	ldr	r2, [pc, #216]	; (8009988 <ProcessRadioRxDone+0x6f0>)
 80098b0:	5c9b      	ldrb	r3, [r3, r2]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d129      	bne.n	800990a <ProcessRadioRxDone+0x672>
 80098b6:	2374      	movs	r3, #116	; 0x74
 80098b8:	18fb      	adds	r3, r7, r3
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	221f      	movs	r2, #31
 80098be:	4393      	bics	r3, r2
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2ba0      	cmp	r3, #160	; 0xa0
 80098c4:	d121      	bne.n	800990a <ProcessRadioRxDone+0x672>
 80098c6:	4a2c      	ldr	r2, [pc, #176]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80098c8:	238e      	movs	r3, #142	; 0x8e
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	58d2      	ldr	r2, [r2, r3]
 80098ce:	238a      	movs	r3, #138	; 0x8a
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	58d2      	ldr	r2, [r2, r3]
 80098d4:	2334      	movs	r3, #52	; 0x34
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098da:	429a      	cmp	r2, r3
 80098dc:	d115      	bne.n	800990a <ProcessRadioRxDone+0x672>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 80098de:	4a26      	ldr	r2, [pc, #152]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80098e0:	238e      	movs	r3, #142	; 0x8e
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	58d3      	ldr	r3, [r2, r3]
 80098e6:	4a29      	ldr	r2, [pc, #164]	; (800998c <ProcessRadioRxDone+0x6f4>)
 80098e8:	2101      	movs	r1, #1
 80098ea:	5499      	strb	r1, [r3, r2]
 80098ec:	e00d      	b.n	800990a <ProcessRadioRxDone+0x672>
                    }
                }
                else if( fCntHandlerStatus == LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL )
 80098ee:	2375      	movs	r3, #117	; 0x75
 80098f0:	18fb      	adds	r3, r7, r3
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d104      	bne.n	8009902 <ProcessRadioRxDone+0x66a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80098f8:	4b1f      	ldr	r3, [pc, #124]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 80098fa:	4a21      	ldr	r2, [pc, #132]	; (8009980 <ProcessRadioRxDone+0x6e8>)
 80098fc:	210a      	movs	r1, #10
 80098fe:	5499      	strb	r1, [r3, r2]
 8009900:	e003      	b.n	800990a <ProcessRadioRxDone+0x672>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009902:	4b1d      	ldr	r3, [pc, #116]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009904:	4a1e      	ldr	r2, [pc, #120]	; (8009980 <ProcessRadioRxDone+0x6e8>)
 8009906:	2101      	movs	r1, #1
 8009908:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 800990e:	4920      	ldr	r1, [pc, #128]	; (8009990 <ProcessRadioRxDone+0x6f8>)
 8009910:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 8009912:	f7ff fc93 	bl	800923c <PrepareRxDoneAbort>
                return;
 8009916:	e1d2      	b.n	8009cbe <ProcessRadioRxDone+0xa26>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8009918:	1dfb      	adds	r3, r7, #7
 800991a:	781a      	ldrb	r2, [r3, #0]
 800991c:	68bd      	ldr	r5, [r7, #8]
 800991e:	2680      	movs	r6, #128	; 0x80
 8009920:	19bc      	adds	r4, r7, r6
 8009922:	2384      	movs	r3, #132	; 0x84
 8009924:	18fb      	adds	r3, r7, r3
 8009926:	6819      	ldr	r1, [r3, #0]
 8009928:	2382      	movs	r3, #130	; 0x82
 800992a:	18fb      	adds	r3, r7, r3
 800992c:	7818      	ldrb	r0, [r3, #0]
 800992e:	2334      	movs	r3, #52	; 0x34
 8009930:	18fb      	adds	r3, r7, r3
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	002b      	movs	r3, r5
 8009936:	f004 f987 	bl	800dc48 <LoRaMacCryptoUnsecureMessage>
 800993a:	0003      	movs	r3, r0
 800993c:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800993e:	19bb      	adds	r3, r7, r6
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d028      	beq.n	8009998 <ProcessRadioRxDone+0x700>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8009946:	2380      	movs	r3, #128	; 0x80
 8009948:	18fb      	adds	r3, r7, r3
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d10c      	bne.n	800996a <ProcessRadioRxDone+0x6d2>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 8009952:	4a0b      	ldr	r2, [pc, #44]	; (8009980 <ProcessRadioRxDone+0x6e8>)
 8009954:	210b      	movs	r1, #11
 8009956:	5499      	strb	r1, [r3, r2]

                    // Abort the reception, if we are not in RX_SLOT_WIN_CLASS_C
                    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 8009958:	4b07      	ldr	r3, [pc, #28]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 800995a:	4a0e      	ldr	r2, [pc, #56]	; (8009994 <ProcessRadioRxDone+0x6fc>)
 800995c:	5c9b      	ldrb	r3, [r3, r2]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d100      	bne.n	8009964 <ProcessRadioRxDone+0x6cc>
 8009962:	e1ab      	b.n	8009cbc <ProcessRadioRxDone+0xa24>
                    {
                        PrepareRxDoneAbort( );
 8009964:	f7ff fc6a 	bl	800923c <PrepareRxDoneAbort>
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
                    PrepareRxDoneAbort( );
                }
                return;
 8009968:	e1a8      	b.n	8009cbc <ProcessRadioRxDone+0xa24>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800996a:	4b03      	ldr	r3, [pc, #12]	; (8009978 <ProcessRadioRxDone+0x6e0>)
 800996c:	4a04      	ldr	r2, [pc, #16]	; (8009980 <ProcessRadioRxDone+0x6e8>)
 800996e:	210c      	movs	r1, #12
 8009970:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 8009972:	f7ff fc63 	bl	800923c <PrepareRxDoneAbort>
                return;
 8009976:	e1a1      	b.n	8009cbc <ProcessRadioRxDone+0xa24>
 8009978:	20000494 	.word	0x20000494
 800997c:	00000414 	.word	0x00000414
 8009980:	00000411 	.word	0x00000411
 8009984:	200006d4 	.word	0x200006d4
 8009988:	00000222 	.word	0x00000222
 800998c:	0000021a 	.word	0x0000021a
 8009990:	00000424 	.word	0x00000424
 8009994:	00000421 	.word	0x00000421
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009998:	4bca      	ldr	r3, [pc, #808]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 800999a:	4acb      	ldr	r2, [pc, #812]	; (8009cc8 <ProcessRadioRxDone+0xa30>)
 800999c:	2100      	movs	r1, #0
 800999e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 80099a0:	4bc8      	ldr	r3, [pc, #800]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 80099a2:	2483      	movs	r4, #131	; 0x83
 80099a4:	193a      	adds	r2, r7, r4
 80099a6:	49c9      	ldr	r1, [pc, #804]	; (8009ccc <ProcessRadioRxDone+0xa34>)
 80099a8:	7812      	ldrb	r2, [r2, #0]
 80099aa:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80099ac:	2034      	movs	r0, #52	; 0x34
 80099ae:	183b      	adds	r3, r7, r0
 80099b0:	7b1b      	ldrb	r3, [r3, #12]
 80099b2:	06db      	lsls	r3, r3, #27
 80099b4:	0fdb      	lsrs	r3, r3, #31
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	0019      	movs	r1, r3
 80099ba:	4bc2      	ldr	r3, [pc, #776]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 80099bc:	4ac4      	ldr	r2, [pc, #784]	; (8009cd0 <ProcessRadioRxDone+0xa38>)
 80099be:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 80099c0:	4ac0      	ldr	r2, [pc, #768]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 80099c2:	2383      	movs	r3, #131	; 0x83
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	2100      	movs	r1, #0
 80099c8:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = 0;
 80099ca:	4bbe      	ldr	r3, [pc, #760]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 80099cc:	4ac1      	ldr	r2, [pc, #772]	; (8009cd4 <ProcessRadioRxDone+0xa3c>)
 80099ce:	2100      	movs	r1, #0
 80099d0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	4bbb      	ldr	r3, [pc, #748]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 80099d6:	49c0      	ldr	r1, [pc, #768]	; (8009cd8 <ProcessRadioRxDone+0xa40>)
 80099d8:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80099da:	183b      	adds	r3, r7, r0
 80099dc:	7b1b      	ldrb	r3, [r3, #12]
 80099de:	069b      	lsls	r3, r3, #26
 80099e0:	0fdb      	lsrs	r3, r3, #31
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	1e5a      	subs	r2, r3, #1
 80099e6:	4193      	sbcs	r3, r2
 80099e8:	b2d9      	uxtb	r1, r3
 80099ea:	4bb6      	ldr	r3, [pc, #728]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 80099ec:	4abb      	ldr	r2, [pc, #748]	; (8009cdc <ProcessRadioRxDone+0xa44>)
 80099ee:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80099f0:	4bb4      	ldr	r3, [pc, #720]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 80099f2:	4abb      	ldr	r2, [pc, #748]	; (8009ce0 <ProcessRadioRxDone+0xa48>)
 80099f4:	2100      	movs	r1, #0
 80099f6:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80099f8:	183b      	adds	r3, r7, r0
 80099fa:	7b1b      	ldrb	r3, [r3, #12]
 80099fc:	069b      	lsls	r3, r3, #26
 80099fe:	0fdb      	lsrs	r3, r3, #31
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	1e5a      	subs	r2, r3, #1
 8009a04:	4193      	sbcs	r3, r2
 8009a06:	b2d9      	uxtb	r1, r3
 8009a08:	4aae      	ldr	r2, [pc, #696]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a0a:	2386      	movs	r3, #134	; 0x86
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	54d1      	strb	r1, [r2, r3]

            MacCtx.NvmCtx->AdrAckCounter = 0;
 8009a10:	4aac      	ldr	r2, [pc, #688]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a12:	238e      	movs	r3, #142	; 0x8e
 8009a14:	00db      	lsls	r3, r3, #3
 8009a16:	58d3      	ldr	r3, [r2, r3]
 8009a18:	22cc      	movs	r2, #204	; 0xcc
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	5099      	str	r1, [r3, r2]

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8009a1e:	193b      	adds	r3, r7, r4
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d105      	bne.n	8009a32 <ProcessRadioRxDone+0x79a>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009a26:	4aa7      	ldr	r2, [pc, #668]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a28:	2382      	movs	r3, #130	; 0x82
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	2102      	movs	r1, #2
 8009a2e:	54d1      	strb	r1, [r2, r3]
 8009a30:	e032      	b.n	8009a98 <ProcessRadioRxDone+0x800>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009a32:	2374      	movs	r3, #116	; 0x74
 8009a34:	18fb      	adds	r3, r7, r3
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	221f      	movs	r2, #31
 8009a3a:	4393      	bics	r3, r2
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2ba0      	cmp	r3, #160	; 0xa0
 8009a40:	d11e      	bne.n	8009a80 <ProcessRadioRxDone+0x7e8>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 8009a42:	4aa0      	ldr	r2, [pc, #640]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a44:	238e      	movs	r3, #142	; 0x8e
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	58d3      	ldr	r3, [r2, r3]
 8009a4a:	4aa6      	ldr	r2, [pc, #664]	; (8009ce4 <ProcessRadioRxDone+0xa4c>)
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	5499      	strb	r1, [r3, r2]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8009a50:	4a9c      	ldr	r2, [pc, #624]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a52:	238e      	movs	r3, #142	; 0x8e
 8009a54:	00db      	lsls	r3, r3, #3
 8009a56:	58d3      	ldr	r3, [r2, r3]
 8009a58:	4aa3      	ldr	r2, [pc, #652]	; (8009ce8 <ProcessRadioRxDone+0xa50>)
 8009a5a:	5c9b      	ldrb	r3, [r3, r2]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d109      	bne.n	8009a74 <ProcessRadioRxDone+0x7dc>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8009a60:	4a98      	ldr	r2, [pc, #608]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a62:	238e      	movs	r3, #142	; 0x8e
 8009a64:	00db      	lsls	r3, r3, #3
 8009a66:	58d2      	ldr	r2, [r2, r3]
 8009a68:	2334      	movs	r3, #52	; 0x34
 8009a6a:	18fb      	adds	r3, r7, r3
 8009a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a6e:	238a      	movs	r3, #138	; 0x8a
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009a74:	4a93      	ldr	r2, [pc, #588]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a76:	2382      	movs	r3, #130	; 0x82
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	54d1      	strb	r1, [r2, r3]
 8009a7e:	e00b      	b.n	8009a98 <ProcessRadioRxDone+0x800>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 8009a80:	4a90      	ldr	r2, [pc, #576]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a82:	238e      	movs	r3, #142	; 0x8e
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	58d3      	ldr	r3, [r2, r3]
 8009a88:	4a96      	ldr	r2, [pc, #600]	; (8009ce4 <ProcessRadioRxDone+0xa4c>)
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009a8e:	4a8d      	ldr	r2, [pc, #564]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009a90:	2382      	movs	r3, #130	; 0x82
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	2100      	movs	r1, #0
 8009a96:	54d1      	strb	r1, [r2, r3]
                }
            }

            // Update downlink counter in mac context / multicast context.
            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntDown( fCntID, downLinkCounter ) )
 8009a98:	1dfb      	adds	r3, r7, #7
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	0011      	movs	r1, r2
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f004 fa77 	bl	800df94 <LoRaMacSetFCntDown>
 8009aa6:	1e03      	subs	r3, r0, #0
 8009aa8:	d007      	beq.n	8009aba <ProcessRadioRxDone+0x822>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009aaa:	4b86      	ldr	r3, [pc, #536]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009aac:	4a86      	ldr	r2, [pc, #536]	; (8009cc8 <ProcessRadioRxDone+0xa30>)
 8009aae:	2101      	movs	r1, #1
 8009ab0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8009ab2:	f7ff fbc3 	bl	800923c <PrepareRxDoneAbort>
                return;
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	e101      	b.n	8009cbe <ProcessRadioRxDone+0xa26>
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009aba:	4b82      	ldr	r3, [pc, #520]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009abc:	4a8b      	ldr	r2, [pc, #556]	; (8009cec <ProcessRadioRxDone+0xa54>)
 8009abe:	5c98      	ldrb	r0, [r3, r2]
 8009ac0:	4b80      	ldr	r3, [pc, #512]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009ac2:	4a8b      	ldr	r2, [pc, #556]	; (8009cf0 <ProcessRadioRxDone+0xa58>)
 8009ac4:	5c9a      	ldrb	r2, [r3, r2]
 8009ac6:	2334      	movs	r3, #52	; 0x34
 8009ac8:	18fb      	adds	r3, r7, r3
 8009aca:	7b1b      	ldrb	r3, [r3, #12]
 8009acc:	1c19      	adds	r1, r3, #0
 8009ace:	f001 fe93 	bl	800b7f8 <RemoveMacCommands>

            switch( fType )
 8009ad2:	1dbb      	adds	r3, r7, #6
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d038      	beq.n	8009b4c <ProcessRadioRxDone+0x8b4>
 8009ada:	dc02      	bgt.n	8009ae2 <ProcessRadioRxDone+0x84a>
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d005      	beq.n	8009aec <ProcessRadioRxDone+0x854>
 8009ae0:	e086      	b.n	8009bf0 <ProcessRadioRxDone+0x958>
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d052      	beq.n	8009b8c <ProcessRadioRxDone+0x8f4>
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d06a      	beq.n	8009bc0 <ProcessRadioRxDone+0x928>
 8009aea:	e081      	b.n	8009bf0 <ProcessRadioRxDone+0x958>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009aec:	2034      	movs	r0, #52	; 0x34
 8009aee:	183b      	adds	r3, r7, r0
 8009af0:	7b1b      	ldrb	r3, [r3, #12]
 8009af2:	071b      	lsls	r3, r3, #28
 8009af4:	0f1b      	lsrs	r3, r3, #28
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	001c      	movs	r4, r3
 8009afa:	4b72      	ldr	r3, [pc, #456]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009afc:	4a7b      	ldr	r2, [pc, #492]	; (8009cec <ProcessRadioRxDone+0xa54>)
 8009afe:	5c9b      	ldrb	r3, [r3, r2]
 8009b00:	2277      	movs	r2, #119	; 0x77
 8009b02:	18ba      	adds	r2, r7, r2
 8009b04:	2100      	movs	r1, #0
 8009b06:	5651      	ldrsb	r1, [r2, r1]
 8009b08:	0005      	movs	r5, r0
 8009b0a:	183a      	adds	r2, r7, r0
 8009b0c:	3210      	adds	r2, #16
 8009b0e:	0010      	movs	r0, r2
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	000b      	movs	r3, r1
 8009b14:	0022      	movs	r2, r4
 8009b16:	2100      	movs	r1, #0
 8009b18:	f000 fe72 	bl	800a800 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009b1c:	0028      	movs	r0, r5
 8009b1e:	183b      	adds	r3, r7, r0
 8009b20:	2220      	movs	r2, #32
 8009b22:	5c99      	ldrb	r1, [r3, r2]
 8009b24:	4b67      	ldr	r3, [pc, #412]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009b26:	4a73      	ldr	r2, [pc, #460]	; (8009cf4 <ProcessRadioRxDone+0xa5c>)
 8009b28:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009b2a:	183b      	adds	r3, r7, r0
 8009b2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009b2e:	4a65      	ldr	r2, [pc, #404]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009b30:	2383      	movs	r3, #131	; 0x83
 8009b32:	00db      	lsls	r3, r3, #3
 8009b34:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009b36:	183b      	adds	r3, r7, r0
 8009b38:	2228      	movs	r2, #40	; 0x28
 8009b3a:	5c99      	ldrb	r1, [r3, r2]
 8009b3c:	4b61      	ldr	r3, [pc, #388]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009b3e:	4a65      	ldr	r2, [pc, #404]	; (8009cd4 <ProcessRadioRxDone+0xa3c>)
 8009b40:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 8009b42:	4b60      	ldr	r3, [pc, #384]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009b44:	4a6c      	ldr	r2, [pc, #432]	; (8009cf8 <ProcessRadioRxDone+0xa60>)
 8009b46:	2101      	movs	r1, #1
 8009b48:	5499      	strb	r1, [r3, r2]
                    break;
 8009b4a:	e058      	b.n	8009bfe <ProcessRadioRxDone+0x966>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009b4c:	2034      	movs	r0, #52	; 0x34
 8009b4e:	183b      	adds	r3, r7, r0
 8009b50:	7b1b      	ldrb	r3, [r3, #12]
 8009b52:	071b      	lsls	r3, r3, #28
 8009b54:	0f1b      	lsrs	r3, r3, #28
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	001c      	movs	r4, r3
 8009b5a:	4b5a      	ldr	r3, [pc, #360]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009b5c:	4a63      	ldr	r2, [pc, #396]	; (8009cec <ProcessRadioRxDone+0xa54>)
 8009b5e:	5c9b      	ldrb	r3, [r3, r2]
 8009b60:	2277      	movs	r2, #119	; 0x77
 8009b62:	18ba      	adds	r2, r7, r2
 8009b64:	2100      	movs	r1, #0
 8009b66:	5651      	ldrsb	r1, [r2, r1]
 8009b68:	0005      	movs	r5, r0
 8009b6a:	183a      	adds	r2, r7, r0
 8009b6c:	3210      	adds	r2, #16
 8009b6e:	0010      	movs	r0, r2
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	000b      	movs	r3, r1
 8009b74:	0022      	movs	r2, r4
 8009b76:	2100      	movs	r1, #0
 8009b78:	f000 fe42 	bl	800a800 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009b7c:	0028      	movs	r0, r5
 8009b7e:	183b      	adds	r3, r7, r0
 8009b80:	2220      	movs	r2, #32
 8009b82:	5c99      	ldrb	r1, [r3, r2]
 8009b84:	4b4f      	ldr	r3, [pc, #316]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009b86:	4a5b      	ldr	r2, [pc, #364]	; (8009cf4 <ProcessRadioRxDone+0xa5c>)
 8009b88:	5499      	strb	r1, [r3, r2]
                    break;
 8009b8a:	e038      	b.n	8009bfe <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8009b8c:	2434      	movs	r4, #52	; 0x34
 8009b8e:	193b      	adds	r3, r7, r4
 8009b90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009b92:	193b      	adds	r3, r7, r4
 8009b94:	2228      	movs	r2, #40	; 0x28
 8009b96:	5c99      	ldrb	r1, [r3, r2]
 8009b98:	4b4a      	ldr	r3, [pc, #296]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009b9a:	4a54      	ldr	r2, [pc, #336]	; (8009cec <ProcessRadioRxDone+0xa54>)
 8009b9c:	5c9b      	ldrb	r3, [r3, r2]
 8009b9e:	2277      	movs	r2, #119	; 0x77
 8009ba0:	18ba      	adds	r2, r7, r2
 8009ba2:	7812      	ldrb	r2, [r2, #0]
 8009ba4:	b252      	sxtb	r2, r2
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	0013      	movs	r3, r2
 8009baa:	000a      	movs	r2, r1
 8009bac:	2100      	movs	r1, #0
 8009bae:	f000 fe27 	bl	800a800 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009bb2:	193b      	adds	r3, r7, r4
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	5c99      	ldrb	r1, [r3, r2]
 8009bb8:	4b42      	ldr	r3, [pc, #264]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009bba:	4a4e      	ldr	r2, [pc, #312]	; (8009cf4 <ProcessRadioRxDone+0xa5c>)
 8009bbc:	5499      	strb	r1, [r3, r2]
                    break;
 8009bbe:	e01e      	b.n	8009bfe <ProcessRadioRxDone+0x966>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009bc0:	2034      	movs	r0, #52	; 0x34
 8009bc2:	183b      	adds	r3, r7, r0
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	5c99      	ldrb	r1, [r3, r2]
 8009bc8:	4b3e      	ldr	r3, [pc, #248]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009bca:	4a4a      	ldr	r2, [pc, #296]	; (8009cf4 <ProcessRadioRxDone+0xa5c>)
 8009bcc:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009bce:	183b      	adds	r3, r7, r0
 8009bd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009bd2:	4a3c      	ldr	r2, [pc, #240]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009bd4:	2383      	movs	r3, #131	; 0x83
 8009bd6:	00db      	lsls	r3, r3, #3
 8009bd8:	50d1      	str	r1, [r2, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009bda:	183b      	adds	r3, r7, r0
 8009bdc:	2228      	movs	r2, #40	; 0x28
 8009bde:	5c99      	ldrb	r1, [r3, r2]
 8009be0:	4b38      	ldr	r3, [pc, #224]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009be2:	4a3c      	ldr	r2, [pc, #240]	; (8009cd4 <ProcessRadioRxDone+0xa3c>)
 8009be4:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.RxData = true;
 8009be6:	4b37      	ldr	r3, [pc, #220]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009be8:	4a43      	ldr	r2, [pc, #268]	; (8009cf8 <ProcessRadioRxDone+0xa60>)
 8009bea:	2101      	movs	r1, #1
 8009bec:	5499      	strb	r1, [r3, r2]
                    break;
 8009bee:	e006      	b.n	8009bfe <ProcessRadioRxDone+0x966>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009bf0:	4b34      	ldr	r3, [pc, #208]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009bf2:	4a35      	ldr	r2, [pc, #212]	; (8009cc8 <ProcessRadioRxDone+0xa30>)
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 8009bf8:	f7ff fb20 	bl	800923c <PrepareRxDoneAbort>
                    break;
 8009bfc:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009bfe:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c00:	4a3e      	ldr	r2, [pc, #248]	; (8009cfc <ProcessRadioRxDone+0xa64>)
 8009c02:	5c99      	ldrb	r1, [r3, r2]
 8009c04:	2002      	movs	r0, #2
 8009c06:	4301      	orrs	r1, r0
 8009c08:	5499      	strb	r1, [r3, r2]

            break;
 8009c0a:	e032      	b.n	8009c72 <ProcessRadioRxDone+0x9da>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size );
 8009c0c:	2476      	movs	r4, #118	; 0x76
 8009c0e:	193b      	adds	r3, r7, r4
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c14:	18d1      	adds	r1, r2, r3
 8009c16:	257a      	movs	r5, #122	; 0x7a
 8009c18:	197b      	adds	r3, r7, r5
 8009c1a:	881a      	ldrh	r2, [r3, #0]
 8009c1c:	4b38      	ldr	r3, [pc, #224]	; (8009d00 <ProcessRadioRxDone+0xa68>)
 8009c1e:	0018      	movs	r0, r3
 8009c20:	f013 f85c 	bl	801ccdc <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009c24:	4a27      	ldr	r2, [pc, #156]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c26:	2382      	movs	r3, #130	; 0x82
 8009c28:	00db      	lsls	r3, r3, #3
 8009c2a:	2103      	movs	r1, #3
 8009c2c:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009c2e:	4b25      	ldr	r3, [pc, #148]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c30:	4a25      	ldr	r2, [pc, #148]	; (8009cc8 <ProcessRadioRxDone+0xa30>)
 8009c32:	2100      	movs	r1, #0
 8009c34:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009c36:	4a23      	ldr	r2, [pc, #140]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c38:	2383      	movs	r3, #131	; 0x83
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	4930      	ldr	r1, [pc, #192]	; (8009d00 <ProcessRadioRxDone+0xa68>)
 8009c3e:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009c40:	197b      	adds	r3, r7, r5
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	193b      	adds	r3, r7, r4
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	b2d9      	uxtb	r1, r3
 8009c4e:	4b1d      	ldr	r3, [pc, #116]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c50:	4a20      	ldr	r2, [pc, #128]	; (8009cd4 <ProcessRadioRxDone+0xa3c>)
 8009c52:	5499      	strb	r1, [r3, r2]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009c54:	4b1b      	ldr	r3, [pc, #108]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c56:	4a29      	ldr	r2, [pc, #164]	; (8009cfc <ProcessRadioRxDone+0xa64>)
 8009c58:	5c99      	ldrb	r1, [r3, r2]
 8009c5a:	2002      	movs	r0, #2
 8009c5c:	4301      	orrs	r1, r0
 8009c5e:	5499      	strb	r1, [r3, r2]
            break;
 8009c60:	e007      	b.n	8009c72 <ProcessRadioRxDone+0x9da>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009c62:	4b18      	ldr	r3, [pc, #96]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c64:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <ProcessRadioRxDone+0xa30>)
 8009c66:	2101      	movs	r1, #1
 8009c68:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 8009c6a:	f7ff fae7 	bl	800923c <PrepareRxDoneAbort>
            break;
 8009c6e:	e000      	b.n	8009c72 <ProcessRadioRxDone+0x9da>
            break;
 8009c70:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( MacCtx.NvmCtx->NodeAckRequested, MacCtx.NvmCtx->DeviceClass, MacCtx.McpsConfirm.AckReceived );
 8009c72:	4a14      	ldr	r2, [pc, #80]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c74:	238e      	movs	r3, #142	; 0x8e
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	58d3      	ldr	r3, [r2, r3]
 8009c7a:	4a22      	ldr	r2, [pc, #136]	; (8009d04 <ProcessRadioRxDone+0xa6c>)
 8009c7c:	5c98      	ldrb	r0, [r3, r2]
 8009c7e:	4a11      	ldr	r2, [pc, #68]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c80:	238e      	movs	r3, #142	; 0x8e
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	58d3      	ldr	r3, [r2, r3]
 8009c86:	22c8      	movs	r2, #200	; 0xc8
 8009c88:	5c99      	ldrb	r1, [r3, r2]
 8009c8a:	4a0e      	ldr	r2, [pc, #56]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009c8c:	2386      	movs	r3, #134	; 0x86
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	5cd3      	ldrb	r3, [r2, r3]
 8009c92:	001a      	movs	r2, r3
 8009c94:	f000 fc94 	bl	800a5c0 <CheckToDisableAckTimeout>

    if( TimerIsStarted( &MacCtx.AckTimeoutTimer ) == false )
 8009c98:	4b1b      	ldr	r3, [pc, #108]	; (8009d08 <ProcessRadioRxDone+0xa70>)
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	f012 ffcc 	bl	801cc38 <TimerIsStarted>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	001a      	movs	r2, r3
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4053      	eors	r3, r2
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <ProcessRadioRxDone+0xa26>
    {  // Procedure is completed when the AckTimeoutTimer is not running anymore
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009cae:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <ProcessRadioRxDone+0xa2c>)
 8009cb0:	4a12      	ldr	r2, [pc, #72]	; (8009cfc <ProcessRadioRxDone+0xa64>)
 8009cb2:	5c99      	ldrb	r1, [r3, r2]
 8009cb4:	2010      	movs	r0, #16
 8009cb6:	4301      	orrs	r1, r0
 8009cb8:	5499      	strb	r1, [r3, r2]
 8009cba:	e000      	b.n	8009cbe <ProcessRadioRxDone+0xa26>
                return;
 8009cbc:	46c0      	nop			; (mov r8, r8)
    }
}
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	b023      	add	sp, #140	; 0x8c
 8009cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc4:	20000494 	.word	0x20000494
 8009cc8:	00000411 	.word	0x00000411
 8009ccc:	00000412 	.word	0x00000412
 8009cd0:	00000415 	.word	0x00000415
 8009cd4:	0000041c 	.word	0x0000041c
 8009cd8:	00000424 	.word	0x00000424
 8009cdc:	00000422 	.word	0x00000422
 8009ce0:	0000042d 	.word	0x0000042d
 8009ce4:	0000021a 	.word	0x0000021a
 8009ce8:	00000222 	.word	0x00000222
 8009cec:	00000421 	.word	0x00000421
 8009cf0:	0000042c 	.word	0x0000042c
 8009cf4:	00000413 	.word	0x00000413
 8009cf8:	0000041d 	.word	0x0000041d
 8009cfc:	0000046d 	.word	0x0000046d
 8009d00:	200006d4 	.word	0x200006d4
 8009d04:	00000219 	.word	0x00000219
 8009d08:	20000888 	.word	0x20000888

08009d0c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009d10:	4a0e      	ldr	r2, [pc, #56]	; (8009d4c <ProcessRadioTxTimeout+0x40>)
 8009d12:	238e      	movs	r3, #142	; 0x8e
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	58d3      	ldr	r3, [r2, r3]
 8009d18:	22c8      	movs	r2, #200	; 0xc8
 8009d1a:	5c9b      	ldrb	r3, [r3, r2]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d003      	beq.n	8009d28 <ProcessRadioTxTimeout+0x1c>
    {
        Radio.Sleep( );
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <ProcessRadioTxTimeout+0x44>)
 8009d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d24:	4798      	blx	r3
 8009d26:	e001      	b.n	8009d2c <ProcessRadioTxTimeout+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 8009d28:	f001 fd8e 	bl	800b848 <OpenContinuousRx2Window>
    }

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <ProcessRadioTxTimeout+0x40>)
 8009d2e:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <ProcessRadioTxTimeout+0x48>)
 8009d30:	2102      	movs	r1, #2
 8009d32:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009d34:	2002      	movs	r0, #2
 8009d36:	f002 fbc1 	bl	800c4bc <LoRaMacConfirmQueueSetStatusCmn>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009d3a:	4b04      	ldr	r3, [pc, #16]	; (8009d4c <ProcessRadioTxTimeout+0x40>)
 8009d3c:	4a06      	ldr	r2, [pc, #24]	; (8009d58 <ProcessRadioTxTimeout+0x4c>)
 8009d3e:	5c99      	ldrb	r1, [r3, r2]
 8009d40:	2010      	movs	r0, #16
 8009d42:	4301      	orrs	r1, r0
 8009d44:	5499      	strb	r1, [r3, r2]
}
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	20000494 	.word	0x20000494
 8009d50:	08028964 	.word	0x08028964
 8009d54:	0000042d 	.word	0x0000042d
 8009d58:	0000046d 	.word	0x0000046d

08009d5c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	0002      	movs	r2, r0
 8009d64:	1dfb      	adds	r3, r7, #7
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	1dbb      	adds	r3, r7, #6
 8009d6a:	1c0a      	adds	r2, r1, #0
 8009d6c:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 8009d6e:	230f      	movs	r3, #15
 8009d70:	18fb      	adds	r3, r7, r3
 8009d72:	2200      	movs	r2, #0
 8009d74:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009d76:	4a55      	ldr	r2, [pc, #340]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009d78:	238e      	movs	r3, #142	; 0x8e
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	58d3      	ldr	r3, [r2, r3]
 8009d7e:	22c8      	movs	r2, #200	; 0xc8
 8009d80:	5c9b      	ldrb	r3, [r3, r2]
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d002      	beq.n	8009d8c <HandleRadioRxErrorTimeout+0x30>
    {
        Radio.Sleep( );
 8009d86:	4b52      	ldr	r3, [pc, #328]	; (8009ed0 <HandleRadioRxErrorTimeout+0x174>)
 8009d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009d8c:	f002 f840 	bl	800be10 <LoRaMacClassBIsBeaconExpected>
 8009d90:	1e03      	subs	r3, r0, #0
 8009d92:	d009      	beq.n	8009da8 <HandleRadioRxErrorTimeout+0x4c>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009d94:	2002      	movs	r0, #2
 8009d96:	f001 fff9 	bl	800bd8c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	f002 f814 	bl	800bdc8 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009da0:	230f      	movs	r3, #15
 8009da2:	18fb      	adds	r3, r7, r3
 8009da4:	2201      	movs	r2, #1
 8009da6:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009da8:	4a48      	ldr	r2, [pc, #288]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009daa:	238e      	movs	r3, #142	; 0x8e
 8009dac:	00db      	lsls	r3, r3, #3
 8009dae:	58d3      	ldr	r3, [r2, r3]
 8009db0:	22c8      	movs	r2, #200	; 0xc8
 8009db2:	5c9b      	ldrb	r3, [r3, r2]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d11b      	bne.n	8009df0 <HandleRadioRxErrorTimeout+0x94>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009db8:	f002 f830 	bl	800be1c <LoRaMacClassBIsPingExpected>
 8009dbc:	1e03      	subs	r3, r0, #0
 8009dbe:	d009      	beq.n	8009dd4 <HandleRadioRxErrorTimeout+0x78>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	f001 ffed 	bl	800bda0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	f002 f806 	bl	800bdd8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009dcc:	230f      	movs	r3, #15
 8009dce:	18fb      	adds	r3, r7, r3
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009dd4:	f002 f828 	bl	800be28 <LoRaMacClassBIsMulticastExpected>
 8009dd8:	1e03      	subs	r3, r0, #0
 8009dda:	d009      	beq.n	8009df0 <HandleRadioRxErrorTimeout+0x94>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009ddc:	2000      	movs	r0, #0
 8009dde:	f001 ffe9 	bl	800bdb4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009de2:	2000      	movs	r0, #0
 8009de4:	f002 f800 	bl	800bde8 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8009de8:	230f      	movs	r3, #15
 8009dea:	18fb      	adds	r3, r7, r3
 8009dec:	2201      	movs	r2, #1
 8009dee:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 8009df0:	230f      	movs	r3, #15
 8009df2:	18fb      	adds	r3, r7, r3
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2201      	movs	r2, #1
 8009df8:	4053      	eors	r3, r2
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d057      	beq.n	8009eb0 <HandleRadioRxErrorTimeout+0x154>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009e00:	4b32      	ldr	r3, [pc, #200]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e02:	4a34      	ldr	r2, [pc, #208]	; (8009ed4 <HandleRadioRxErrorTimeout+0x178>)
 8009e04:	5c9b      	ldrb	r3, [r3, r2]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d132      	bne.n	8009e70 <HandleRadioRxErrorTimeout+0x114>
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 8009e0a:	4a30      	ldr	r2, [pc, #192]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e0c:	238e      	movs	r3, #142	; 0x8e
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	58d3      	ldr	r3, [r2, r3]
 8009e12:	4a31      	ldr	r2, [pc, #196]	; (8009ed8 <HandleRadioRxErrorTimeout+0x17c>)
 8009e14:	5c9b      	ldrb	r3, [r3, r2]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <HandleRadioRxErrorTimeout+0xc8>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009e1a:	4b2c      	ldr	r3, [pc, #176]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e1c:	1dfa      	adds	r2, r7, #7
 8009e1e:	492f      	ldr	r1, [pc, #188]	; (8009edc <HandleRadioRxErrorTimeout+0x180>)
 8009e20:	7812      	ldrb	r2, [r2, #0]
 8009e22:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009e24:	1dfb      	adds	r3, r7, #7
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	0018      	movs	r0, r3
 8009e2a:	f002 fb47 	bl	800c4bc <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009e2e:	4a27      	ldr	r2, [pc, #156]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e30:	238e      	movs	r3, #142	; 0x8e
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	58d3      	ldr	r3, [r2, r3]
 8009e36:	22c8      	movs	r2, #200	; 0xc8
 8009e38:	5c9b      	ldrb	r3, [r3, r2]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d038      	beq.n	8009eb0 <HandleRadioRxErrorTimeout+0x154>
            {
                if( TimerGetElapsedTime( MacCtx.AggregatedLastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8009e3e:	4a23      	ldr	r2, [pc, #140]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e40:	23d0      	movs	r3, #208	; 0xd0
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	58d3      	ldr	r3, [r2, r3]
 8009e46:	0018      	movs	r0, r3
 8009e48:	f012 ff09 	bl	801cc5e <TimerGetElapsedTime>
 8009e4c:	0001      	movs	r1, r0
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e50:	23f2      	movs	r3, #242	; 0xf2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	58d3      	ldr	r3, [r2, r3]
 8009e56:	4299      	cmp	r1, r3
 8009e58:	d32a      	bcc.n	8009eb0 <HandleRadioRxErrorTimeout+0x154>
                {
                    TimerStop( &MacCtx.RxWindowTimer2 );
 8009e5a:	4b21      	ldr	r3, [pc, #132]	; (8009ee0 <HandleRadioRxErrorTimeout+0x184>)
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	f012 febb 	bl	801cbd8 <TimerStop>
                    MacCtx.MacFlags.Bits.MacDone = 1;
 8009e62:	4b1a      	ldr	r3, [pc, #104]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e64:	4a1f      	ldr	r2, [pc, #124]	; (8009ee4 <HandleRadioRxErrorTimeout+0x188>)
 8009e66:	5c99      	ldrb	r1, [r3, r2]
 8009e68:	2010      	movs	r0, #16
 8009e6a:	4301      	orrs	r1, r0
 8009e6c:	5499      	strb	r1, [r3, r2]
 8009e6e:	e01f      	b.n	8009eb0 <HandleRadioRxErrorTimeout+0x154>
                }
            }
        }
        else
        {
            if( MacCtx.NvmCtx->NodeAckRequested == true )
 8009e70:	4a16      	ldr	r2, [pc, #88]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e72:	238e      	movs	r3, #142	; 0x8e
 8009e74:	00db      	lsls	r3, r3, #3
 8009e76:	58d3      	ldr	r3, [r2, r3]
 8009e78:	4a17      	ldr	r2, [pc, #92]	; (8009ed8 <HandleRadioRxErrorTimeout+0x17c>)
 8009e7a:	5c9b      	ldrb	r3, [r3, r2]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d004      	beq.n	8009e8a <HandleRadioRxErrorTimeout+0x12e>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009e80:	4b12      	ldr	r3, [pc, #72]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e82:	1dba      	adds	r2, r7, #6
 8009e84:	4915      	ldr	r1, [pc, #84]	; (8009edc <HandleRadioRxErrorTimeout+0x180>)
 8009e86:	7812      	ldrb	r2, [r2, #0]
 8009e88:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009e8a:	1dbb      	adds	r3, r7, #6
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	0018      	movs	r0, r3
 8009e90:	f002 fb14 	bl	800c4bc <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009e94:	4a0d      	ldr	r2, [pc, #52]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009e96:	238e      	movs	r3, #142	; 0x8e
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	58d3      	ldr	r3, [r2, r3]
 8009e9c:	22c8      	movs	r2, #200	; 0xc8
 8009e9e:	5c9b      	ldrb	r3, [r3, r2]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d005      	beq.n	8009eb0 <HandleRadioRxErrorTimeout+0x154>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009ea4:	4b09      	ldr	r3, [pc, #36]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009ea6:	4a0f      	ldr	r2, [pc, #60]	; (8009ee4 <HandleRadioRxErrorTimeout+0x188>)
 8009ea8:	5c99      	ldrb	r1, [r3, r2]
 8009eaa:	2010      	movs	r0, #16
 8009eac:	4301      	orrs	r1, r0
 8009eae:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009eb0:	4a06      	ldr	r2, [pc, #24]	; (8009ecc <HandleRadioRxErrorTimeout+0x170>)
 8009eb2:	238e      	movs	r3, #142	; 0x8e
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	58d3      	ldr	r3, [r2, r3]
 8009eb8:	22c8      	movs	r2, #200	; 0xc8
 8009eba:	5c9b      	ldrb	r3, [r3, r2]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d101      	bne.n	8009ec4 <HandleRadioRxErrorTimeout+0x168>
    {
        OpenContinuousRx2Window( );
 8009ec0:	f001 fcc2 	bl	800b848 <OpenContinuousRx2Window>
    }
}
 8009ec4:	46c0      	nop			; (mov r8, r8)
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	b004      	add	sp, #16
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20000494 	.word	0x20000494
 8009ed0:	08028964 	.word	0x08028964
 8009ed4:	0000046c 	.word	0x0000046c
 8009ed8:	00000219 	.word	0x00000219
 8009edc:	0000042d 	.word	0x0000042d
 8009ee0:	20000840 	.word	0x20000840
 8009ee4:	0000046d 	.word	0x0000046d

08009ee8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009eec:	2106      	movs	r1, #6
 8009eee:	2005      	movs	r0, #5
 8009ef0:	f7ff ff34 	bl	8009d5c <HandleRadioRxErrorTimeout>
}
 8009ef4:	46c0      	nop			; (mov r8, r8)
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009efe:	2104      	movs	r1, #4
 8009f00:	2003      	movs	r0, #3
 8009f02:	f7ff ff2b 	bl	8009d5c <HandleRadioRxErrorTimeout>
}
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8009f12:	f01b f8c7 	bl	80250a4 <itsdk_enterCriticalSection>
    events = LoRaMacRadioEvents;
 8009f16:	4b1e      	ldr	r3, [pc, #120]	; (8009f90 <LoRaMacHandleIrqEvents+0x84>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	607b      	str	r3, [r7, #4]
    LoRaMacRadioEvents.Value = 0;
 8009f1c:	4b1c      	ldr	r3, [pc, #112]	; (8009f90 <LoRaMacHandleIrqEvents+0x84>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]
    CRITICAL_SECTION_END( );
 8009f22:	f01b f8d3 	bl	80250cc <itsdk_leaveCriticalSection>

    if( events.Value != 0 )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d02c      	beq.n	8009f86 <LoRaMacHandleIrqEvents+0x7a>
    {
        if( events.Events.TxDone == 1 )
 8009f2c:	1d3b      	adds	r3, r7, #4
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	2210      	movs	r2, #16
 8009f32:	4013      	ands	r3, r2
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <LoRaMacHandleIrqEvents+0x32>
        {
            ProcessRadioTxDone( );
 8009f3a:	f7ff f8af 	bl	800909c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8009f3e:	1d3b      	adds	r3, r7, #4
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2208      	movs	r2, #8
 8009f44:	4013      	ands	r3, r2
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioRxDone( );
 8009f4c:	f7ff f9a4 	bl	8009298 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8009f50:	1d3b      	adds	r3, r7, #4
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2204      	movs	r2, #4
 8009f56:	4013      	ands	r3, r2
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioTxTimeout( );
 8009f5e:	f7ff fed5 	bl	8009d0c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8009f62:	1d3b      	adds	r3, r7, #4
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	2202      	movs	r2, #2
 8009f68:	4013      	ands	r3, r2
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioRxError( );
 8009f70:	f7ff ffba 	bl	8009ee8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8009f74:	1d3b      	adds	r3, r7, #4
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxTimeout( );
 8009f82:	f7ff ffba 	bl	8009efa <ProcessRadioRxTimeout>
        }
    }
}
 8009f86:	46c0      	nop			; (mov r8, r8)
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	b002      	add	sp, #8
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	20000908 	.word	0x20000908

08009f94 <LoRaMacEnableRequests>:
    return LORAMAC_TRUE;
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	0002      	movs	r2, r0
 8009f9c:	1dfb      	adds	r3, r7, #7
 8009f9e:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 8009fa0:	4b04      	ldr	r3, [pc, #16]	; (8009fb4 <LoRaMacEnableRequests+0x20>)
 8009fa2:	1dfa      	adds	r2, r7, #7
 8009fa4:	4904      	ldr	r1, [pc, #16]	; (8009fb8 <LoRaMacEnableRequests+0x24>)
 8009fa6:	7812      	ldrb	r2, [r2, #0]
 8009fa8:	545a      	strb	r2, [r3, r1]
}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b002      	add	sp, #8
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	20000494 	.word	0x20000494
 8009fb8:	0000046e 	.word	0x0000046e

08009fbc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8009fc2:	1d3b      	adds	r3, r7, #4
 8009fc4:	4a2c      	ldr	r2, [pc, #176]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 8009fc6:	492d      	ldr	r1, [pc, #180]	; (800a07c <LoRaMacHandleRequestEvents+0xc0>)
 8009fc8:	5c52      	ldrb	r2, [r2, r1]
 8009fca:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8009fcc:	4a2a      	ldr	r2, [pc, #168]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 8009fce:	23d5      	movs	r3, #213	; 0xd5
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	58d3      	ldr	r3, [r2, r3]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d14a      	bne.n	800a06e <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009fd8:	4b27      	ldr	r3, [pc, #156]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 8009fda:	4a28      	ldr	r2, [pc, #160]	; (800a07c <LoRaMacHandleRequestEvents+0xc0>)
 8009fdc:	5c9b      	ldrb	r3, [r3, r2]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009fe8:	4b23      	ldr	r3, [pc, #140]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 8009fea:	4a24      	ldr	r2, [pc, #144]	; (800a07c <LoRaMacHandleRequestEvents+0xc0>)
 8009fec:	5c99      	ldrb	r1, [r3, r2]
 8009fee:	2001      	movs	r0, #1
 8009ff0:	4381      	bics	r1, r0
 8009ff2:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009ff4:	4b20      	ldr	r3, [pc, #128]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 8009ff6:	4a21      	ldr	r2, [pc, #132]	; (800a07c <LoRaMacHandleRequestEvents+0xc0>)
 8009ff8:	5c9b      	ldrb	r3, [r3, r2]
 8009ffa:	2204      	movs	r2, #4
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d005      	beq.n	800a010 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a004:	4b1c      	ldr	r3, [pc, #112]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 800a006:	4a1d      	ldr	r2, [pc, #116]	; (800a07c <LoRaMacHandleRequestEvents+0xc0>)
 800a008:	5c99      	ldrb	r1, [r3, r2]
 800a00a:	2004      	movs	r0, #4
 800a00c:	4381      	bics	r1, r0
 800a00e:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a010:	2001      	movs	r0, #1
 800a012:	f7ff ffbf 	bl	8009f94 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800a016:	1d3b      	adds	r3, r7, #4
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2201      	movs	r2, #1
 800a01c:	4013      	ands	r3, r2
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b00      	cmp	r3, #0
 800a022:	d007      	beq.n	800a034 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a024:	4a14      	ldr	r2, [pc, #80]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 800a026:	23d6      	movs	r3, #214	; 0xd6
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	58d3      	ldr	r3, [r2, r3]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a14      	ldr	r2, [pc, #80]	; (800a080 <LoRaMacHandleRequestEvents+0xc4>)
 800a030:	0010      	movs	r0, r2
 800a032:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800a034:	1d3b      	adds	r3, r7, #4
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2204      	movs	r2, #4
 800a03a:	4013      	ands	r3, r2
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00d      	beq.n	800a05e <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a042:	4b10      	ldr	r3, [pc, #64]	; (800a084 <LoRaMacHandleRequestEvents+0xc8>)
 800a044:	0018      	movs	r0, r3
 800a046:	f002 fa8f 	bl	800c568 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a04a:	f002 faef 	bl	800c62c <LoRaMacConfirmQueueGetCnt>
 800a04e:	1e03      	subs	r3, r0, #0
 800a050:	d005      	beq.n	800a05e <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a052:	4b09      	ldr	r3, [pc, #36]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 800a054:	4a09      	ldr	r2, [pc, #36]	; (800a07c <LoRaMacHandleRequestEvents+0xc0>)
 800a056:	5c99      	ldrb	r1, [r3, r2]
 800a058:	2004      	movs	r0, #4
 800a05a:	4301      	orrs	r1, r0
 800a05c:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800a05e:	f001 fef4 	bl	800be4a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a062:	4b05      	ldr	r3, [pc, #20]	; (800a078 <LoRaMacHandleRequestEvents+0xbc>)
 800a064:	4a05      	ldr	r2, [pc, #20]	; (800a07c <LoRaMacHandleRequestEvents+0xc0>)
 800a066:	5c99      	ldrb	r1, [r3, r2]
 800a068:	2010      	movs	r0, #16
 800a06a:	4381      	bics	r1, r0
 800a06c:	5499      	strb	r1, [r3, r2]
    }
}
 800a06e:	46c0      	nop			; (mov r8, r8)
 800a070:	46bd      	mov	sp, r7
 800a072:	b002      	add	sp, #8
 800a074:	bd80      	pop	{r7, pc}
 800a076:	46c0      	nop			; (mov r8, r8)
 800a078:	20000494 	.word	0x20000494
 800a07c:	0000046d 	.word	0x0000046d
 800a080:	200008c0 	.word	0x200008c0
 800a084:	200008d4 	.word	0x200008d4

0800a088 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a08e:	4b2d      	ldr	r3, [pc, #180]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a090:	4a2d      	ldr	r2, [pc, #180]	; (800a148 <LoRaMacHandleIndicationEvents+0xc0>)
 800a092:	5c9b      	ldrb	r3, [r3, r2]
 800a094:	2208      	movs	r2, #8
 800a096:	4013      	ands	r3, r2
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00d      	beq.n	800a0ba <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a09e:	4a29      	ldr	r2, [pc, #164]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a0a0:	23d6      	movs	r3, #214	; 0xd6
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	58d3      	ldr	r3, [r2, r3]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	4a28      	ldr	r2, [pc, #160]	; (800a14c <LoRaMacHandleIndicationEvents+0xc4>)
 800a0aa:	0010      	movs	r0, r2
 800a0ac:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a0ae:	4b25      	ldr	r3, [pc, #148]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a0b0:	4a25      	ldr	r2, [pc, #148]	; (800a148 <LoRaMacHandleIndicationEvents+0xc0>)
 800a0b2:	5c99      	ldrb	r1, [r3, r2]
 800a0b4:	2008      	movs	r0, #8
 800a0b6:	4381      	bics	r1, r0
 800a0b8:	5499      	strb	r1, [r3, r2]
    }

    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a0ba:	4a22      	ldr	r2, [pc, #136]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a0bc:	23d5      	movs	r3, #213	; 0xd5
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	58d3      	ldr	r3, [r2, r3]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d114      	bne.n	800a0f0 <LoRaMacHandleIndicationEvents+0x68>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800a0c6:	1dfb      	adds	r3, r7, #7
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a0cc:	1dfb      	adds	r3, r7, #7
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f002 f8ee 	bl	800c2b0 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a0d4:	1dfb      	adds	r3, r7, #7
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <LoRaMacHandleIndicationEvents+0x68>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800a0dc:	f000 fb7a 	bl	800a7d4 <SetMlmeScheduleUplinkIndication>
            MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a0e0:	4a18      	ldr	r2, [pc, #96]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a0e2:	23d6      	movs	r3, #214	; 0xd6
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	58d3      	ldr	r3, [r2, r3]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	4a18      	ldr	r2, [pc, #96]	; (800a14c <LoRaMacHandleIndicationEvents+0xc4>)
 800a0ec:	0010      	movs	r0, r2
 800a0ee:	4798      	blx	r3
        }
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a0f0:	4b14      	ldr	r3, [pc, #80]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a0f2:	4a15      	ldr	r2, [pc, #84]	; (800a148 <LoRaMacHandleIndicationEvents+0xc0>)
 800a0f4:	5c9b      	ldrb	r3, [r3, r2]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01d      	beq.n	800a13c <LoRaMacHandleIndicationEvents+0xb4>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800a100:	4b10      	ldr	r3, [pc, #64]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a102:	4a11      	ldr	r2, [pc, #68]	; (800a148 <LoRaMacHandleIndicationEvents+0xc0>)
 800a104:	5c99      	ldrb	r1, [r3, r2]
 800a106:	2002      	movs	r0, #2
 800a108:	4381      	bics	r1, r0
 800a10a:	5499      	strb	r1, [r3, r2]
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a10c:	4a0d      	ldr	r2, [pc, #52]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a10e:	238e      	movs	r3, #142	; 0x8e
 800a110:	00db      	lsls	r3, r3, #3
 800a112:	58d3      	ldr	r3, [r2, r3]
 800a114:	22c8      	movs	r2, #200	; 0xc8
 800a116:	5c9b      	ldrb	r3, [r3, r2]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d107      	bne.n	800a12c <LoRaMacHandleIndicationEvents+0xa4>
        {// Activate RX2 window for Class C
            if( MacCtx.MacState == LORAMAC_IDLE )
 800a11c:	4a09      	ldr	r2, [pc, #36]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a11e:	23d5      	movs	r3, #213	; 0xd5
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	58d3      	ldr	r3, [r2, r3]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <LoRaMacHandleIndicationEvents+0xa4>
            {
                OpenContinuousRx2Window( );
 800a128:	f001 fb8e 	bl	800b848 <OpenContinuousRx2Window>
            }
        }
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800a12c:	4a05      	ldr	r2, [pc, #20]	; (800a144 <LoRaMacHandleIndicationEvents+0xbc>)
 800a12e:	23d6      	movs	r3, #214	; 0xd6
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	58d3      	ldr	r3, [r2, r3]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	4a06      	ldr	r2, [pc, #24]	; (800a150 <LoRaMacHandleIndicationEvents+0xc8>)
 800a138:	0010      	movs	r0, r2
 800a13a:	4798      	blx	r3
    }
}
 800a13c:	46c0      	nop			; (mov r8, r8)
 800a13e:	46bd      	mov	sp, r7
 800a140:	b002      	add	sp, #8
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20000494 	.word	0x20000494
 800a148:	0000046d 	.word	0x0000046d
 800a14c:	200008e8 	.word	0x200008e8
 800a150:	200008a4 	.word	0x200008a4

0800a154 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800a154:	b590      	push	{r4, r7, lr}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a15a:	4b36      	ldr	r3, [pc, #216]	; (800a234 <LoRaMacHandleMcpsRequest+0xe0>)
 800a15c:	4a36      	ldr	r2, [pc, #216]	; (800a238 <LoRaMacHandleMcpsRequest+0xe4>)
 800a15e:	5c9b      	ldrb	r3, [r3, r2]
 800a160:	2201      	movs	r2, #1
 800a162:	4013      	ands	r3, r2
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d05f      	beq.n	800a22a <LoRaMacHandleMcpsRequest+0xd6>
    {
        bool stopRetransmission = false;
 800a16a:	1dfb      	adds	r3, r7, #7
 800a16c:	2200      	movs	r2, #0
 800a16e:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800a170:	1dbb      	adds	r3, r7, #6
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a176:	4b2f      	ldr	r3, [pc, #188]	; (800a234 <LoRaMacHandleMcpsRequest+0xe0>)
 800a178:	4a30      	ldr	r2, [pc, #192]	; (800a23c <LoRaMacHandleMcpsRequest+0xe8>)
 800a17a:	5c9b      	ldrb	r3, [r3, r2]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800a180:	4b2c      	ldr	r3, [pc, #176]	; (800a234 <LoRaMacHandleMcpsRequest+0xe0>)
 800a182:	4a2e      	ldr	r2, [pc, #184]	; (800a23c <LoRaMacHandleMcpsRequest+0xe8>)
 800a184:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a186:	2b03      	cmp	r3, #3
 800a188:	d105      	bne.n	800a196 <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800a18a:	1dfc      	adds	r4, r7, #7
 800a18c:	f001 fc7e 	bl	800ba8c <CheckRetransUnconfirmedUplink>
 800a190:	0003      	movs	r3, r0
 800a192:	7023      	strb	r3, [r4, #0]
 800a194:	e02a      	b.n	800a1ec <LoRaMacHandleMcpsRequest+0x98>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a196:	4b27      	ldr	r3, [pc, #156]	; (800a234 <LoRaMacHandleMcpsRequest+0xe0>)
 800a198:	4a28      	ldr	r2, [pc, #160]	; (800a23c <LoRaMacHandleMcpsRequest+0xe8>)
 800a19a:	5c9b      	ldrb	r3, [r3, r2]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d125      	bne.n	800a1ec <LoRaMacHandleMcpsRequest+0x98>
        {
            if( MacCtx.NvmCtx->AckTimeoutRetry == true )
 800a1a0:	4a24      	ldr	r2, [pc, #144]	; (800a234 <LoRaMacHandleMcpsRequest+0xe0>)
 800a1a2:	238e      	movs	r3, #142	; 0x8e
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	58d2      	ldr	r2, [r2, r3]
 800a1a8:	2386      	movs	r3, #134	; 0x86
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	5cd3      	ldrb	r3, [r2, r3]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d019      	beq.n	800a1e6 <LoRaMacHandleMcpsRequest+0x92>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800a1b2:	1dfc      	adds	r4, r7, #7
 800a1b4:	f001 fca0 	bl	800baf8 <CheckRetransConfirmedUplink>
 800a1b8:	0003      	movs	r3, r0
 800a1ba:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a1bc:	4a1d      	ldr	r2, [pc, #116]	; (800a234 <LoRaMacHandleMcpsRequest+0xe0>)
 800a1be:	238e      	movs	r3, #142	; 0x8e
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	58d3      	ldr	r3, [r2, r3]
 800a1c4:	4a1e      	ldr	r2, [pc, #120]	; (800a240 <LoRaMacHandleMcpsRequest+0xec>)
 800a1c6:	5c9b      	ldrb	r3, [r3, r2]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10f      	bne.n	800a1ec <LoRaMacHandleMcpsRequest+0x98>
                {
                    if( stopRetransmission == false )
 800a1cc:	1dfb      	adds	r3, r7, #7
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	4053      	eors	r3, r2
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <LoRaMacHandleMcpsRequest+0x8c>
                    {
                        AckTimeoutRetriesProcess( );
 800a1da:	f001 fd17 	bl	800bc0c <AckTimeoutRetriesProcess>
 800a1de:	e005      	b.n	800a1ec <LoRaMacHandleMcpsRequest+0x98>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800a1e0:	f001 fd78 	bl	800bcd4 <AckTimeoutRetriesFinalize>
 800a1e4:	e002      	b.n	800a1ec <LoRaMacHandleMcpsRequest+0x98>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800a1e6:	1dbb      	adds	r3, r7, #6
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800a1ec:	1dfb      	adds	r3, r7, #7
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <LoRaMacHandleMcpsRequest+0xa6>
        {// Stop retransmission
            StopRetransmission( );
 800a1f4:	f001 fcae 	bl	800bb54 <StopRetransmission>
            MacCtx.NvmCtx->AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800a1f8:	e017      	b.n	800a22a <LoRaMacHandleMcpsRequest+0xd6>
        else if( waitForRetransmission == false )
 800a1fa:	1dbb      	adds	r3, r7, #6
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2201      	movs	r2, #1
 800a200:	4053      	eors	r3, r2
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d010      	beq.n	800a22a <LoRaMacHandleMcpsRequest+0xd6>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a208:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <LoRaMacHandleMcpsRequest+0xe0>)
 800a20a:	4a0b      	ldr	r2, [pc, #44]	; (800a238 <LoRaMacHandleMcpsRequest+0xe4>)
 800a20c:	5c99      	ldrb	r1, [r3, r2]
 800a20e:	2010      	movs	r0, #16
 800a210:	4381      	bics	r1, r0
 800a212:	5499      	strb	r1, [r3, r2]
            MacCtx.NvmCtx->AckTimeoutRetry = false;
 800a214:	4a07      	ldr	r2, [pc, #28]	; (800a234 <LoRaMacHandleMcpsRequest+0xe0>)
 800a216:	238e      	movs	r3, #142	; 0x8e
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	58d2      	ldr	r2, [r2, r3]
 800a21c:	2386      	movs	r3, #134	; 0x86
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	2100      	movs	r1, #0
 800a222:	54d1      	strb	r1, [r2, r3]
            OnTxDelayedTimerEvent( NULL );
 800a224:	2000      	movs	r0, #0
 800a226:	f000 f90b 	bl	800a440 <OnTxDelayedTimerEvent>
}
 800a22a:	46c0      	nop			; (mov r8, r8)
 800a22c:	46bd      	mov	sp, r7
 800a22e:	b003      	add	sp, #12
 800a230:	bd90      	pop	{r4, r7, pc}
 800a232:	46c0      	nop			; (mov r8, r8)
 800a234:	20000494 	.word	0x20000494
 800a238:	0000046d 	.word	0x0000046d
 800a23c:	0000042c 	.word	0x0000042c
 800a240:	00000222 	.word	0x00000222

0800a244 <LoRaMacHandleJoinRequest>:

static void LoRaMacHandleJoinRequest( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
    // Handle join request
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800a248:	4b14      	ldr	r3, [pc, #80]	; (800a29c <LoRaMacHandleJoinRequest+0x58>)
 800a24a:	4a15      	ldr	r2, [pc, #84]	; (800a2a0 <LoRaMacHandleJoinRequest+0x5c>)
 800a24c:	5c9b      	ldrb	r3, [r3, r2]
 800a24e:	2204      	movs	r2, #4
 800a250:	4013      	ands	r3, r2
 800a252:	b2db      	uxtb	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	d01e      	beq.n	800a296 <LoRaMacHandleJoinRequest+0x52>
 800a258:	2000      	movs	r0, #0
 800a25a:	f002 f96b 	bl	800c534 <LoRaMacConfirmQueueIsCmdActive>
 800a25e:	1e03      	subs	r3, r0, #0
 800a260:	d019      	beq.n	800a296 <LoRaMacHandleJoinRequest+0x52>
    {
        if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a262:	2000      	movs	r0, #0
 800a264:	f002 f904 	bl	800c470 <LoRaMacConfirmQueueGetStatus>
 800a268:	1e03      	subs	r3, r0, #0
 800a26a:	d109      	bne.n	800a280 <LoRaMacHandleJoinRequest+0x3c>
        {// Node joined successfully
            LoRaMacResetFCnts( );
 800a26c:	f003 fef4 	bl	800e058 <LoRaMacResetFCnts>
            MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800a270:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <LoRaMacHandleJoinRequest+0x58>)
 800a272:	238e      	movs	r3, #142	; 0x8e
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	58d2      	ldr	r2, [r2, r3]
 800a278:	2388      	movs	r3, #136	; 0x88
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	2100      	movs	r1, #0
 800a27e:	54d1      	strb	r1, [r2, r3]
        }
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a280:	4a06      	ldr	r2, [pc, #24]	; (800a29c <LoRaMacHandleJoinRequest+0x58>)
 800a282:	23d5      	movs	r3, #213	; 0xd5
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	58d3      	ldr	r3, [r2, r3]
 800a288:	2202      	movs	r2, #2
 800a28a:	4393      	bics	r3, r2
 800a28c:	0019      	movs	r1, r3
 800a28e:	4a03      	ldr	r2, [pc, #12]	; (800a29c <LoRaMacHandleJoinRequest+0x58>)
 800a290:	23d5      	movs	r3, #213	; 0xd5
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	50d1      	str	r1, [r2, r3]
    }
}
 800a296:	46c0      	nop			; (mov r8, r8)
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	20000494 	.word	0x20000494
 800a2a0:	0000046d 	.word	0x0000046d

0800a2a4 <LoRaMacCheckForTxTimeout>:

static uint8_t LoRaMacCheckForTxTimeout( void )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800a2a8:	f002 f93a 	bl	800c520 <LoRaMacConfirmQueueGetStatusCmn>
 800a2ac:	0003      	movs	r3, r0
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d004      	beq.n	800a2bc <LoRaMacCheckForTxTimeout+0x18>
        ( MacCtx.McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
 800a2b2:	4b14      	ldr	r3, [pc, #80]	; (800a304 <LoRaMacCheckForTxTimeout+0x60>)
 800a2b4:	4a14      	ldr	r2, [pc, #80]	; (800a308 <LoRaMacCheckForTxTimeout+0x64>)
 800a2b6:	5c9b      	ldrb	r3, [r3, r2]
    if( ( LoRaMacConfirmQueueGetStatusCmn( ) == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d11e      	bne.n	800a2fa <LoRaMacCheckForTxTimeout+0x56>
    {
        // Stop transmit cycle due to tx timeout
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a2bc:	4a11      	ldr	r2, [pc, #68]	; (800a304 <LoRaMacCheckForTxTimeout+0x60>)
 800a2be:	23d5      	movs	r3, #213	; 0xd5
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	58d3      	ldr	r3, [r2, r3]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	4393      	bics	r3, r2
 800a2c8:	0019      	movs	r1, r3
 800a2ca:	4a0e      	ldr	r2, [pc, #56]	; (800a304 <LoRaMacCheckForTxTimeout+0x60>)
 800a2cc:	23d5      	movs	r3, #213	; 0xd5
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	50d1      	str	r1, [r2, r3]
        MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800a2d2:	4a0c      	ldr	r2, [pc, #48]	; (800a304 <LoRaMacCheckForTxTimeout+0x60>)
 800a2d4:	238e      	movs	r3, #142	; 0x8e
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	58d3      	ldr	r3, [r2, r3]
 800a2da:	4a0c      	ldr	r2, [pc, #48]	; (800a30c <LoRaMacCheckForTxTimeout+0x68>)
 800a2dc:	5c99      	ldrb	r1, [r3, r2]
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <LoRaMacCheckForTxTimeout+0x60>)
 800a2e0:	4a0b      	ldr	r2, [pc, #44]	; (800a310 <LoRaMacCheckForTxTimeout+0x6c>)
 800a2e2:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800a2e4:	4a07      	ldr	r2, [pc, #28]	; (800a304 <LoRaMacCheckForTxTimeout+0x60>)
 800a2e6:	2386      	movs	r3, #134	; 0x86
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	54d1      	strb	r1, [r2, r3]
        MacCtx.McpsConfirm.TxTimeOnAir = 0;
 800a2ee:	4b05      	ldr	r3, [pc, #20]	; (800a304 <LoRaMacCheckForTxTimeout+0x60>)
 800a2f0:	4a08      	ldr	r2, [pc, #32]	; (800a314 <LoRaMacCheckForTxTimeout+0x70>)
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	5099      	str	r1, [r3, r2]
        return 0x01;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e000      	b.n	800a2fc <LoRaMacCheckForTxTimeout+0x58>
    }
    return 0x00;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	20000494 	.word	0x20000494
 800a308:	0000042d 	.word	0x0000042d
 800a30c:	00000217 	.word	0x00000217
 800a310:	00000431 	.word	0x00000431
 800a314:	00000434 	.word	0x00000434

0800a318 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a31c:	200b      	movs	r0, #11
 800a31e:	f002 f909 	bl	800c534 <LoRaMacConfirmQueueIsCmdActive>
 800a322:	1e03      	subs	r3, r0, #0
 800a324:	d01c      	beq.n	800a360 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800a326:	4b10      	ldr	r3, [pc, #64]	; (800a368 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a328:	4a10      	ldr	r2, [pc, #64]	; (800a36c <LoRaMacCheckForBeaconAcquisition+0x54>)
 800a32a:	5c9b      	ldrb	r3, [r3, r2]
 800a32c:	2201      	movs	r2, #1
 800a32e:	4013      	ands	r3, r2
 800a330:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a332:	2b00      	cmp	r3, #0
 800a334:	d114      	bne.n	800a360 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a338:	4a0c      	ldr	r2, [pc, #48]	; (800a36c <LoRaMacCheckForBeaconAcquisition+0x54>)
 800a33a:	5c9b      	ldrb	r3, [r3, r2]
 800a33c:	2204      	movs	r2, #4
 800a33e:	4013      	ands	r3, r2
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00c      	beq.n	800a360 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a346:	4a08      	ldr	r2, [pc, #32]	; (800a368 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a348:	23d5      	movs	r3, #213	; 0xd5
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	58d3      	ldr	r3, [r2, r3]
 800a34e:	2202      	movs	r2, #2
 800a350:	4393      	bics	r3, r2
 800a352:	0019      	movs	r1, r3
 800a354:	4a04      	ldr	r2, [pc, #16]	; (800a368 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800a356:	23d5      	movs	r3, #213	; 0xd5
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e000      	b.n	800a362 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800a360:	2300      	movs	r3, #0
}
 800a362:	0018      	movs	r0, r3
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000494 	.word	0x20000494
 800a36c:	0000046d 	.word	0x0000046d

0800a370 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a374:	4a0f      	ldr	r2, [pc, #60]	; (800a3b4 <LoRaMacCheckForRxAbort+0x44>)
 800a376:	23d5      	movs	r3, #213	; 0xd5
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	58d3      	ldr	r3, [r2, r3]
 800a37c:	2280      	movs	r2, #128	; 0x80
 800a37e:	4013      	ands	r3, r2
 800a380:	d015      	beq.n	800a3ae <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800a382:	4a0c      	ldr	r2, [pc, #48]	; (800a3b4 <LoRaMacCheckForRxAbort+0x44>)
 800a384:	23d5      	movs	r3, #213	; 0xd5
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	58d3      	ldr	r3, [r2, r3]
 800a38a:	2280      	movs	r2, #128	; 0x80
 800a38c:	4393      	bics	r3, r2
 800a38e:	0019      	movs	r1, r3
 800a390:	4a08      	ldr	r2, [pc, #32]	; (800a3b4 <LoRaMacCheckForRxAbort+0x44>)
 800a392:	23d5      	movs	r3, #213	; 0xd5
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a398:	4a06      	ldr	r2, [pc, #24]	; (800a3b4 <LoRaMacCheckForRxAbort+0x44>)
 800a39a:	23d5      	movs	r3, #213	; 0xd5
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	58d3      	ldr	r3, [r2, r3]
 800a3a0:	2202      	movs	r2, #2
 800a3a2:	4393      	bics	r3, r2
 800a3a4:	0019      	movs	r1, r3
 800a3a6:	4a03      	ldr	r2, [pc, #12]	; (800a3b4 <LoRaMacCheckForRxAbort+0x44>)
 800a3a8:	23d5      	movs	r3, #213	; 0xd5
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	50d1      	str	r1, [r2, r3]
    }
}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20000494 	.word	0x20000494

0800a3b8 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800a3be:	1dfb      	adds	r3, r7, #7
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800a3c4:	f7ff fda2 	bl	8009f0c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a3c8:	f001 fd7f 	bl	800beca <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <LoRaMacProcess+0x80>)
 800a3ce:	4a1b      	ldr	r2, [pc, #108]	; (800a43c <LoRaMacProcess+0x84>)
 800a3d0:	5c9b      	ldrb	r3, [r3, r2]
 800a3d2:	2210      	movs	r2, #16
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d027      	beq.n	800a42c <LoRaMacProcess+0x74>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a3dc:	2000      	movs	r0, #0
 800a3de:	f7ff fdd9 	bl	8009f94 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a3e2:	f7ff ffc5 	bl	800a370 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800a3e6:	f001 fcb5 	bl	800bd54 <IsRequestPending>
 800a3ea:	1e03      	subs	r3, r0, #0
 800a3ec:	d011      	beq.n	800a412 <LoRaMacProcess+0x5a>
        {
            noTx |= LoRaMacCheckForTxTimeout( );
 800a3ee:	f7ff ff59 	bl	800a2a4 <LoRaMacCheckForTxTimeout>
 800a3f2:	0003      	movs	r3, r0
 800a3f4:	0019      	movs	r1, r3
 800a3f6:	1dfb      	adds	r3, r7, #7
 800a3f8:	1dfa      	adds	r2, r7, #7
 800a3fa:	7812      	ldrb	r2, [r2, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	701a      	strb	r2, [r3, #0]
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a400:	f7ff ff8a 	bl	800a318 <LoRaMacCheckForBeaconAcquisition>
 800a404:	0003      	movs	r3, r0
 800a406:	0019      	movs	r1, r3
 800a408:	1dfb      	adds	r3, r7, #7
 800a40a:	1dfa      	adds	r2, r7, #7
 800a40c:	7812      	ldrb	r2, [r2, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800a412:	1dfb      	adds	r3, r7, #7
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d103      	bne.n	800a422 <LoRaMacProcess+0x6a>
        {
            LoRaMacHandleJoinRequest( );
 800a41a:	f7ff ff13 	bl	800a244 <LoRaMacHandleJoinRequest>
            LoRaMacHandleMcpsRequest( );
 800a41e:	f7ff fe99 	bl	800a154 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800a422:	f7ff fdcb 	bl	8009fbc <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a426:	2001      	movs	r0, #1
 800a428:	f7ff fdb4 	bl	8009f94 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800a42c:	f7ff fe2c 	bl	800a088 <LoRaMacHandleIndicationEvents>
}
 800a430:	46c0      	nop			; (mov r8, r8)
 800a432:	46bd      	mov	sp, r7
 800a434:	b002      	add	sp, #8
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000494 	.word	0x20000494
 800a43c:	0000046d 	.word	0x0000046d

0800a440 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800a448:	4b1b      	ldr	r3, [pc, #108]	; (800a4b8 <OnTxDelayedTimerEvent+0x78>)
 800a44a:	0018      	movs	r0, r3
 800a44c:	f012 fbc4 	bl	801cbd8 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a450:	4a1a      	ldr	r2, [pc, #104]	; (800a4bc <OnTxDelayedTimerEvent+0x7c>)
 800a452:	23d5      	movs	r3, #213	; 0xd5
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	58d3      	ldr	r3, [r2, r3]
 800a458:	2220      	movs	r2, #32
 800a45a:	4393      	bics	r3, r2
 800a45c:	0019      	movs	r1, r3
 800a45e:	4a17      	ldr	r2, [pc, #92]	; (800a4bc <OnTxDelayedTimerEvent+0x7c>)
 800a460:	23d5      	movs	r3, #213	; 0xd5
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800a466:	2001      	movs	r0, #1
 800a468:	f000 ff7a 	bl	800b360 <ScheduleTx>
 800a46c:	1e03      	subs	r3, r0, #0
 800a46e:	d01e      	beq.n	800a4ae <OnTxDelayedTimerEvent+0x6e>
 800a470:	2b0b      	cmp	r3, #11
 800a472:	d01c      	beq.n	800a4ae <OnTxDelayedTimerEvent+0x6e>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a474:	4a11      	ldr	r2, [pc, #68]	; (800a4bc <OnTxDelayedTimerEvent+0x7c>)
 800a476:	238e      	movs	r3, #142	; 0x8e
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	58d3      	ldr	r3, [r2, r3]
 800a47c:	22d5      	movs	r2, #213	; 0xd5
 800a47e:	569b      	ldrsb	r3, [r3, r2]
 800a480:	b2d9      	uxtb	r1, r3
 800a482:	4b0e      	ldr	r3, [pc, #56]	; (800a4bc <OnTxDelayedTimerEvent+0x7c>)
 800a484:	4a0e      	ldr	r2, [pc, #56]	; (800a4c0 <OnTxDelayedTimerEvent+0x80>)
 800a486:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800a488:	4a0c      	ldr	r2, [pc, #48]	; (800a4bc <OnTxDelayedTimerEvent+0x7c>)
 800a48a:	238e      	movs	r3, #142	; 0x8e
 800a48c:	00db      	lsls	r3, r3, #3
 800a48e:	58d3      	ldr	r3, [r2, r3]
 800a490:	4a0c      	ldr	r2, [pc, #48]	; (800a4c4 <OnTxDelayedTimerEvent+0x84>)
 800a492:	5c99      	ldrb	r1, [r3, r2]
 800a494:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <OnTxDelayedTimerEvent+0x7c>)
 800a496:	4a0c      	ldr	r2, [pc, #48]	; (800a4c8 <OnTxDelayedTimerEvent+0x88>)
 800a498:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800a49a:	4b08      	ldr	r3, [pc, #32]	; (800a4bc <OnTxDelayedTimerEvent+0x7c>)
 800a49c:	4a0b      	ldr	r2, [pc, #44]	; (800a4cc <OnTxDelayedTimerEvent+0x8c>)
 800a49e:	2109      	movs	r1, #9
 800a4a0:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800a4a2:	2009      	movs	r0, #9
 800a4a4:	f002 f80a 	bl	800c4bc <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800a4a8:	f001 fb54 	bl	800bb54 <StopRetransmission>
            break;
 800a4ac:	e000      	b.n	800a4b0 <OnTxDelayedTimerEvent+0x70>
            break;
 800a4ae:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800a4b0:	46c0      	nop			; (mov r8, r8)
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	b002      	add	sp, #8
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	20000810 	.word	0x20000810
 800a4bc:	20000494 	.word	0x20000494
 800a4c0:	0000042e 	.word	0x0000042e
 800a4c4:	00000217 	.word	0x00000217
 800a4c8:	00000431 	.word	0x00000431
 800a4cc:	0000042d 	.word	0x0000042d

0800a4d0 <OnRxWindow2TimerEvent>:
    RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow1Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate );
    RxWindowSetup( MacCtx.RxWindow1Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
}

static void OnRxWindow2TimerEvent( void* context )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a4d8:	4b31      	ldr	r3, [pc, #196]	; (800a5a0 <OnRxWindow2TimerEvent+0xd0>)
 800a4da:	0018      	movs	r0, r3
 800a4dc:	f012 fb7c 	bl	801cbd8 <TimerStop>

    MacCtx.RxWindow2Config.Channel = MacCtx.NvmCtx->Channel;
 800a4e0:	4a30      	ldr	r2, [pc, #192]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a4e2:	238e      	movs	r3, #142	; 0x8e
 800a4e4:	00db      	lsls	r3, r3, #3
 800a4e6:	58d2      	ldr	r2, [r2, r3]
 800a4e8:	2314      	movs	r3, #20
 800a4ea:	33ff      	adds	r3, #255	; 0xff
 800a4ec:	5cd1      	ldrb	r1, [r2, r3]
 800a4ee:	4a2d      	ldr	r2, [pc, #180]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a4f0:	23f8      	movs	r3, #248	; 0xf8
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800a4f6:	4a2b      	ldr	r2, [pc, #172]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a4f8:	238e      	movs	r3, #142	; 0x8e
 800a4fa:	00db      	lsls	r3, r3, #3
 800a4fc:	58d3      	ldr	r3, [r2, r3]
 800a4fe:	22f8      	movs	r2, #248	; 0xf8
 800a500:	5899      	ldr	r1, [r3, r2]
 800a502:	4a28      	ldr	r2, [pc, #160]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a504:	23f9      	movs	r3, #249	; 0xf9
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a50a:	4a26      	ldr	r2, [pc, #152]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a50c:	238e      	movs	r3, #142	; 0x8e
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	58d2      	ldr	r2, [r2, r3]
 800a512:	2302      	movs	r3, #2
 800a514:	33ff      	adds	r3, #255	; 0xff
 800a516:	5cd1      	ldrb	r1, [r2, r3]
 800a518:	4a22      	ldr	r2, [pc, #136]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a51a:	23fc      	movs	r3, #252	; 0xfc
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800a520:	4a20      	ldr	r2, [pc, #128]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a522:	238e      	movs	r3, #142	; 0x8e
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	58d2      	ldr	r2, [r2, r3]
 800a528:	2316      	movs	r3, #22
 800a52a:	33ff      	adds	r3, #255	; 0xff
 800a52c:	5cd1      	ldrb	r1, [r2, r3]
 800a52e:	4b1d      	ldr	r3, [pc, #116]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a530:	4a1d      	ldr	r2, [pc, #116]	; (800a5a8 <OnRxWindow2TimerEvent+0xd8>)
 800a532:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a534:	4b1b      	ldr	r3, [pc, #108]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a536:	4a1d      	ldr	r2, [pc, #116]	; (800a5ac <OnRxWindow2TimerEvent+0xdc>)
 800a538:	2101      	movs	r1, #1
 800a53a:	5499      	strb	r1, [r3, r2]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a53c:	4a19      	ldr	r2, [pc, #100]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a53e:	238e      	movs	r3, #142	; 0x8e
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	58d3      	ldr	r3, [r2, r3]
 800a544:	22c8      	movs	r2, #200	; 0xc8
 800a546:	5c9b      	ldrb	r3, [r3, r2]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d004      	beq.n	800a556 <OnRxWindow2TimerEvent+0x86>
    {
        MacCtx.RxWindow2Config.RxContinuous = false;
 800a54c:	4b15      	ldr	r3, [pc, #84]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a54e:	4a18      	ldr	r2, [pc, #96]	; (800a5b0 <OnRxWindow2TimerEvent+0xe0>)
 800a550:	2100      	movs	r1, #0
 800a552:	5499      	strb	r1, [r3, r2]
 800a554:	e003      	b.n	800a55e <OnRxWindow2TimerEvent+0x8e>
    }
    else
    {
        // Setup continuous listening for class c
        MacCtx.RxWindow2Config.RxContinuous = true;
 800a556:	4b13      	ldr	r3, [pc, #76]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a558:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <OnRxWindow2TimerEvent+0xe0>)
 800a55a:	2101      	movs	r1, #1
 800a55c:	5499      	strb	r1, [r3, r2]
    }

    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindow2Config, ( int8_t* ) &MacCtx.McpsIndication.RxDatarate ) == true )
 800a55e:	4a11      	ldr	r2, [pc, #68]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a560:	238e      	movs	r3, #142	; 0x8e
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	58d3      	ldr	r3, [r2, r3]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	4a12      	ldr	r2, [pc, #72]	; (800a5b4 <OnRxWindow2TimerEvent+0xe4>)
 800a56a:	4913      	ldr	r1, [pc, #76]	; (800a5b8 <OnRxWindow2TimerEvent+0xe8>)
 800a56c:	0018      	movs	r0, r3
 800a56e:	f004 fb53 	bl	800ec18 <RegionRxConfig>
 800a572:	1e03      	subs	r3, r0, #0
 800a574:	d00f      	beq.n	800a596 <OnRxWindow2TimerEvent+0xc6>
    {
        RxWindowSetup( MacCtx.RxWindow2Config.RxContinuous, MacCtx.NvmCtx->MacParams.MaxRxWindow );
 800a576:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a578:	4a0d      	ldr	r2, [pc, #52]	; (800a5b0 <OnRxWindow2TimerEvent+0xe0>)
 800a57a:	5c98      	ldrb	r0, [r3, r2]
 800a57c:	4a09      	ldr	r2, [pc, #36]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a57e:	238e      	movs	r3, #142	; 0x8e
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	58d3      	ldr	r3, [r2, r3]
 800a584:	22e0      	movs	r2, #224	; 0xe0
 800a586:	589b      	ldr	r3, [r3, r2]
 800a588:	0019      	movs	r1, r3
 800a58a:	f000 f889 	bl	800a6a0 <RxWindowSetup>
        MacCtx.RxSlot = RX_SLOT_WIN_2;
 800a58e:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <OnRxWindow2TimerEvent+0xd4>)
 800a590:	4a0a      	ldr	r2, [pc, #40]	; (800a5bc <OnRxWindow2TimerEvent+0xec>)
 800a592:	2101      	movs	r1, #1
 800a594:	5499      	strb	r1, [r3, r2]
    }
}
 800a596:	46c0      	nop			; (mov r8, r8)
 800a598:	46bd      	mov	sp, r7
 800a59a:	b002      	add	sp, #8
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	20000840 	.word	0x20000840
 800a5a4:	20000494 	.word	0x20000494
 800a5a8:	000003f1 	.word	0x000003f1
 800a5ac:	000003f3 	.word	0x000003f3
 800a5b0:	000003f2 	.word	0x000003f2
 800a5b4:	200008a8 	.word	0x200008a8
 800a5b8:	20000874 	.word	0x20000874
 800a5bc:	0000046c 	.word	0x0000046c

0800a5c0 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived )
{
 800a5c0:	b590      	push	{r4, r7, lr}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	0004      	movs	r4, r0
 800a5c8:	0008      	movs	r0, r1
 800a5ca:	0011      	movs	r1, r2
 800a5cc:	1dfb      	adds	r3, r7, #7
 800a5ce:	1c22      	adds	r2, r4, #0
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	1dbb      	adds	r3, r7, #6
 800a5d4:	1c02      	adds	r2, r0, #0
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	1d7b      	adds	r3, r7, #5
 800a5da:	1c0a      	adds	r2, r1, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800a5de:	1dfb      	adds	r3, r7, #7
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	4053      	eors	r3, r2
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d007      	beq.n	800a5fc <CheckToDisableAckTimeout+0x3c>
    {
        if( devClass == CLASS_C )
 800a5ec:	1dbb      	adds	r3, r7, #6
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d10a      	bne.n	800a60a <CheckToDisableAckTimeout+0x4a>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            OnAckTimeoutTimerEvent( NULL );
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f000 f80d 	bl	800a614 <OnAckTimeoutTimerEvent>
            // We have performed a confirmed uplink and have received a
            // downlink with a valid ACK.
            OnAckTimeoutTimerEvent( NULL );
        }
    }
}
 800a5fa:	e006      	b.n	800a60a <CheckToDisableAckTimeout+0x4a>
        if( ackReceived == 1 )
 800a5fc:	1d7b      	adds	r3, r7, #5
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <CheckToDisableAckTimeout+0x4a>
            OnAckTimeoutTimerEvent( NULL );
 800a604:	2000      	movs	r0, #0
 800a606:	f000 f805 	bl	800a614 <OnAckTimeoutTimerEvent>
}
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	46bd      	mov	sp, r7
 800a60e:	b003      	add	sp, #12
 800a610:	bd90      	pop	{r4, r7, pc}
	...

0800a614 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800a61c:	4b1c      	ldr	r3, [pc, #112]	; (800a690 <OnAckTimeoutTimerEvent+0x7c>)
 800a61e:	0018      	movs	r0, r3
 800a620:	f012 fada 	bl	801cbd8 <TimerStop>

    if( MacCtx.NvmCtx->NodeAckRequested == true )
 800a624:	4a1b      	ldr	r2, [pc, #108]	; (800a694 <OnAckTimeoutTimerEvent+0x80>)
 800a626:	238e      	movs	r3, #142	; 0x8e
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	58d3      	ldr	r3, [r2, r3]
 800a62c:	4a1a      	ldr	r2, [pc, #104]	; (800a698 <OnAckTimeoutTimerEvent+0x84>)
 800a62e:	5c9b      	ldrb	r3, [r3, r2]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d007      	beq.n	800a644 <OnAckTimeoutTimerEvent+0x30>
    {
        MacCtx.NvmCtx->AckTimeoutRetry = true;
 800a634:	4a17      	ldr	r2, [pc, #92]	; (800a694 <OnAckTimeoutTimerEvent+0x80>)
 800a636:	238e      	movs	r3, #142	; 0x8e
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	58d2      	ldr	r2, [r2, r3]
 800a63c:	2386      	movs	r3, #134	; 0x86
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	2101      	movs	r1, #1
 800a642:	54d1      	strb	r1, [r2, r3]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a644:	4a13      	ldr	r2, [pc, #76]	; (800a694 <OnAckTimeoutTimerEvent+0x80>)
 800a646:	238e      	movs	r3, #142	; 0x8e
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	58d3      	ldr	r3, [r2, r3]
 800a64c:	22c8      	movs	r2, #200	; 0xc8
 800a64e:	5c9b      	ldrb	r3, [r3, r2]
 800a650:	2b02      	cmp	r3, #2
 800a652:	d105      	bne.n	800a660 <OnAckTimeoutTimerEvent+0x4c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a654:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <OnAckTimeoutTimerEvent+0x80>)
 800a656:	4a11      	ldr	r2, [pc, #68]	; (800a69c <OnAckTimeoutTimerEvent+0x88>)
 800a658:	5c99      	ldrb	r1, [r3, r2]
 800a65a:	2010      	movs	r0, #16
 800a65c:	4301      	orrs	r1, r0
 800a65e:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a660:	4a0c      	ldr	r2, [pc, #48]	; (800a694 <OnAckTimeoutTimerEvent+0x80>)
 800a662:	23d7      	movs	r3, #215	; 0xd7
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	58d3      	ldr	r3, [r2, r3]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00c      	beq.n	800a686 <OnAckTimeoutTimerEvent+0x72>
 800a66c:	4a09      	ldr	r2, [pc, #36]	; (800a694 <OnAckTimeoutTimerEvent+0x80>)
 800a66e:	23d7      	movs	r3, #215	; 0xd7
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	58d3      	ldr	r3, [r2, r3]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <OnAckTimeoutTimerEvent+0x72>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a67a:	4a06      	ldr	r2, [pc, #24]	; (800a694 <OnAckTimeoutTimerEvent+0x80>)
 800a67c:	23d7      	movs	r3, #215	; 0xd7
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	58d3      	ldr	r3, [r2, r3]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	4798      	blx	r3
    }
}
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	46bd      	mov	sp, r7
 800a68a:	b002      	add	sp, #8
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	46c0      	nop			; (mov r8, r8)
 800a690:	20000888 	.word	0x20000888
 800a694:	20000494 	.word	0x20000494
 800a698:	00000219 	.word	0x00000219
 800a69c:	0000046d 	.word	0x0000046d

0800a6a0 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	0002      	movs	r2, r0
 800a6a8:	6039      	str	r1, [r7, #0]
 800a6aa:	1dfb      	adds	r3, r7, #7
 800a6ac:	701a      	strb	r2, [r3, #0]
    if( rxContinuous == false )
 800a6ae:	1dfb      	adds	r3, r7, #7
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	4053      	eors	r3, r2
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <RxWindowSetup+0x28>
    {
        Radio.Rx( maxRxWindow );
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <RxWindowSetup+0x38>)
 800a6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	0010      	movs	r0, r2
 800a6c4:	4798      	blx	r3
    }
    else
    {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 800a6c6:	e003      	b.n	800a6d0 <RxWindowSetup+0x30>
        Radio.Rx( 0 ); // Continuous mode
 800a6c8:	4b03      	ldr	r3, [pc, #12]	; (800a6d8 <RxWindowSetup+0x38>)
 800a6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	4798      	blx	r3
}
 800a6d0:	46c0      	nop			; (mov r8, r8)
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	b002      	add	sp, #8
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	08028964 	.word	0x08028964

0800a6dc <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	0002      	movs	r2, r0
 800a6e4:	1dfb      	adds	r3, r7, #7
 800a6e6:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a6e8:	4a1a      	ldr	r2, [pc, #104]	; (800a754 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a6ea:	238e      	movs	r3, #142	; 0x8e
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	58d2      	ldr	r2, [r2, r3]
 800a6f0:	2380      	movs	r3, #128	; 0x80
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	5cd2      	ldrb	r2, [r2, r3]
 800a6f6:	210c      	movs	r1, #12
 800a6f8:	187b      	adds	r3, r7, r1
 800a6fa:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800a6fc:	187b      	adds	r3, r7, r1
 800a6fe:	1dfa      	adds	r2, r7, #7
 800a700:	7812      	ldrb	r2, [r2, #0]
 800a702:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a704:	187b      	adds	r3, r7, r1
 800a706:	220c      	movs	r2, #12
 800a708:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800a70a:	4a12      	ldr	r2, [pc, #72]	; (800a754 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a70c:	238e      	movs	r3, #142	; 0x8e
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	58d2      	ldr	r2, [r2, r3]
 800a712:	2316      	movs	r3, #22
 800a714:	33ff      	adds	r3, #255	; 0xff
 800a716:	5cd3      	ldrb	r3, [r2, r3]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <GetMaxAppPayloadWithoutFOptsLength+0x48>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a71c:	230c      	movs	r3, #12
 800a71e:	18fb      	adds	r3, r7, r3
 800a720:	220d      	movs	r2, #13
 800a722:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a724:	4a0b      	ldr	r2, [pc, #44]	; (800a754 <GetMaxAppPayloadWithoutFOptsLength+0x78>)
 800a726:	238e      	movs	r3, #142	; 0x8e
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	58d3      	ldr	r3, [r2, r3]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	220c      	movs	r2, #12
 800a730:	18ba      	adds	r2, r7, r2
 800a732:	0011      	movs	r1, r2
 800a734:	0018      	movs	r0, r3
 800a736:	f004 f879 	bl	800e82c <RegionGetPhyParam>
 800a73a:	0003      	movs	r3, r0
 800a73c:	001a      	movs	r2, r3
 800a73e:	2108      	movs	r1, #8
 800a740:	187b      	adds	r3, r7, r1
 800a742:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800a744:	187b      	adds	r3, r7, r1
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	b2db      	uxtb	r3, r3
}
 800a74a:	0018      	movs	r0, r3
 800a74c:	46bd      	mov	sp, r7
 800a74e:	b004      	add	sp, #16
 800a750:	bd80      	pop	{r7, pc}
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	20000494 	.word	0x20000494

0800a758 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800a758:	b5b0      	push	{r4, r5, r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	0004      	movs	r4, r0
 800a760:	0008      	movs	r0, r1
 800a762:	0011      	movs	r1, r2
 800a764:	1dfb      	adds	r3, r7, #7
 800a766:	1c22      	adds	r2, r4, #0
 800a768:	701a      	strb	r2, [r3, #0]
 800a76a:	1dbb      	adds	r3, r7, #6
 800a76c:	1c02      	adds	r2, r0, #0
 800a76e:	701a      	strb	r2, [r3, #0]
 800a770:	1d7b      	adds	r3, r7, #5
 800a772:	1c0a      	adds	r2, r1, #0
 800a774:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800a776:	200e      	movs	r0, #14
 800a778:	0004      	movs	r4, r0
 800a77a:	183b      	adds	r3, r7, r0
 800a77c:	2200      	movs	r2, #0
 800a77e:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800a780:	250c      	movs	r5, #12
 800a782:	197b      	adds	r3, r7, r5
 800a784:	2200      	movs	r2, #0
 800a786:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a788:	1dbb      	adds	r3, r7, #6
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	b25b      	sxtb	r3, r3
 800a78e:	0018      	movs	r0, r3
 800a790:	f7ff ffa4 	bl	800a6dc <GetMaxAppPayloadWithoutFOptsLength>
 800a794:	0003      	movs	r3, r0
 800a796:	001a      	movs	r2, r3
 800a798:	0020      	movs	r0, r4
 800a79a:	183b      	adds	r3, r7, r0
 800a79c:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800a79e:	1dfb      	adds	r3, r7, #7
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	b299      	uxth	r1, r3
 800a7a4:	1d7b      	adds	r3, r7, #5
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	197b      	adds	r3, r7, r5
 800a7ac:	188a      	adds	r2, r1, r2
 800a7ae:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800a7b0:	197a      	adds	r2, r7, r5
 800a7b2:	183b      	adds	r3, r7, r0
 800a7b4:	8812      	ldrh	r2, [r2, #0]
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d806      	bhi.n	800a7ca <ValidatePayloadLength+0x72>
 800a7bc:	230c      	movs	r3, #12
 800a7be:	18fb      	adds	r3, r7, r3
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	2bff      	cmp	r3, #255	; 0xff
 800a7c4:	d801      	bhi.n	800a7ca <ValidatePayloadLength+0x72>
    {
        return true;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <ValidatePayloadLength+0x74>
    }
    return false;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	b004      	add	sp, #16
 800a7d2:	bdb0      	pop	{r4, r5, r7, pc}

0800a7d4 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
    MacCtx.MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a7d8:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <SetMlmeScheduleUplinkIndication+0x20>)
 800a7da:	4a07      	ldr	r2, [pc, #28]	; (800a7f8 <SetMlmeScheduleUplinkIndication+0x24>)
 800a7dc:	2106      	movs	r1, #6
 800a7de:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MlmeInd = 1;
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <SetMlmeScheduleUplinkIndication+0x20>)
 800a7e2:	4a06      	ldr	r2, [pc, #24]	; (800a7fc <SetMlmeScheduleUplinkIndication+0x28>)
 800a7e4:	5c99      	ldrb	r1, [r3, r2]
 800a7e6:	2008      	movs	r0, #8
 800a7e8:	4301      	orrs	r1, r0
 800a7ea:	5499      	strb	r1, [r3, r2]
}
 800a7ec:	46c0      	nop			; (mov r8, r8)
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	46c0      	nop			; (mov r8, r8)
 800a7f4:	20000494 	.word	0x20000494
 800a7f8:	00000454 	.word	0x00000454
 800a7fc:	0000046d 	.word	0x0000046d

0800a800 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800a800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a802:	b0a5      	sub	sp, #148	; 0x94
 800a804:	af02      	add	r7, sp, #8
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	000c      	movs	r4, r1
 800a80a:	0010      	movs	r0, r2
 800a80c:	0019      	movs	r1, r3
 800a80e:	1cfb      	adds	r3, r7, #3
 800a810:	1c22      	adds	r2, r4, #0
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	1cbb      	adds	r3, r7, #2
 800a816:	1c02      	adds	r2, r0, #0
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	1c7b      	adds	r3, r7, #1
 800a81c:	1c0a      	adds	r2, r1, #0
 800a81e:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800a820:	236b      	movs	r3, #107	; 0x6b
 800a822:	18fb      	adds	r3, r7, r3
 800a824:	2200      	movs	r2, #0
 800a826:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800a828:	2387      	movs	r3, #135	; 0x87
 800a82a:	18fb      	adds	r3, r7, r3
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a830:	2168      	movs	r1, #104	; 0x68
 800a832:	187b      	adds	r3, r7, r1
 800a834:	2200      	movs	r2, #0
 800a836:	701a      	strb	r2, [r3, #0]
 800a838:	187b      	adds	r3, r7, r1
 800a83a:	2200      	movs	r2, #0
 800a83c:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 800a83e:	f000 fd7a 	bl	800b336 <ProcessMacCommands+0xb36>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800a842:	1cfb      	adds	r3, r7, #3
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	1cfa      	adds	r2, r7, #3
 800a848:	1c59      	adds	r1, r3, #1
 800a84a:	7011      	strb	r1, [r2, #0]
 800a84c:	001a      	movs	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	189b      	adds	r3, r3, r2
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b13      	cmp	r3, #19
 800a856:	d901      	bls.n	800a85c <ProcessMacCommands+0x5c>
 800a858:	f000 fd76 	bl	800b348 <ProcessMacCommands+0xb48>
 800a85c:	009a      	lsls	r2, r3, #2
 800a85e:	4be3      	ldr	r3, [pc, #908]	; (800abec <ProcessMacCommands+0x3ec>)
 800a860:	18d3      	adds	r3, r2, r3
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800a866:	2003      	movs	r0, #3
 800a868:	f001 fe64 	bl	800c534 <LoRaMacConfirmQueueIsCmdActive>
 800a86c:	1e03      	subs	r3, r0, #0
 800a86e:	d01c      	beq.n	800a8aa <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800a870:	2103      	movs	r1, #3
 800a872:	2000      	movs	r0, #0
 800a874:	f001 fdd0 	bl	800c418 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800a878:	1cfb      	adds	r3, r7, #3
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	1cfa      	adds	r2, r7, #3
 800a87e:	1c59      	adds	r1, r3, #1
 800a880:	7011      	strb	r1, [r2, #0]
 800a882:	001a      	movs	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	189b      	adds	r3, r3, r2
 800a888:	7819      	ldrb	r1, [r3, #0]
 800a88a:	4ad9      	ldr	r2, [pc, #868]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a88c:	2389      	movs	r3, #137	; 0x89
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800a892:	1cfb      	adds	r3, r7, #3
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	1cfa      	adds	r2, r7, #3
 800a898:	1c59      	adds	r1, r3, #1
 800a89a:	7011      	strb	r1, [r2, #0]
 800a89c:	001a      	movs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	189b      	adds	r3, r3, r2
 800a8a2:	7819      	ldrb	r1, [r3, #0]
 800a8a4:	4bd2      	ldr	r3, [pc, #840]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a8a6:	4ad3      	ldr	r2, [pc, #844]	; (800abf4 <ProcessMacCommands+0x3f4>)
 800a8a8:	5499      	strb	r1, [r3, r2]
 800a8aa:	2287      	movs	r2, #135	; 0x87
 800a8ac:	18bb      	adds	r3, r7, r2
 800a8ae:	18ba      	adds	r2, r7, r2
 800a8b0:	7812      	ldrb	r2, [r2, #0]
 800a8b2:	701a      	strb	r2, [r3, #0]
                }
                break;
 800a8b4:	f000 fd3f 	bl	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800a8b8:	2357      	movs	r3, #87	; 0x57
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	2200      	movs	r2, #0
 800a8be:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800a8c0:	2356      	movs	r3, #86	; 0x56
 800a8c2:	18fb      	adds	r3, r7, r3
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800a8c8:	2355      	movs	r3, #85	; 0x55
 800a8ca:	18fb      	adds	r3, r7, r3
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800a8d0:	2354      	movs	r3, #84	; 0x54
 800a8d2:	18fb      	adds	r3, r7, r3
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800a8d8:	2387      	movs	r3, #135	; 0x87
 800a8da:	18fb      	adds	r3, r7, r3
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	4053      	eors	r3, r2
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d100      	bne.n	800a8ea <ProcessMacCommands+0xea>
 800a8e8:	e0ae      	b.n	800aa48 <ProcessMacCommands+0x248>
                {
                    adrBlockFound = true;
 800a8ea:	2387      	movs	r3, #135	; 0x87
 800a8ec:	18fb      	adds	r3, r7, r3
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800a8f2:	1cfb      	adds	r3, r7, #3
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	18d2      	adds	r2, r2, r3
 800a8fc:	2158      	movs	r1, #88	; 0x58
 800a8fe:	187b      	adds	r3, r7, r1
 800a900:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a902:	1cba      	adds	r2, r7, #2
 800a904:	1cfb      	adds	r3, r7, #3
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	3301      	adds	r3, #1
 800a910:	b2da      	uxtb	r2, r3
 800a912:	187b      	adds	r3, r7, r1
 800a914:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a916:	4ab6      	ldr	r2, [pc, #728]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a918:	238e      	movs	r3, #142	; 0x8e
 800a91a:	00db      	lsls	r3, r3, #3
 800a91c:	58d3      	ldr	r3, [r2, r3]
 800a91e:	22ca      	movs	r2, #202	; 0xca
 800a920:	5c9a      	ldrb	r2, [r3, r2]
 800a922:	187b      	adds	r3, r7, r1
 800a924:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a926:	4ab2      	ldr	r2, [pc, #712]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a928:	238e      	movs	r3, #142	; 0x8e
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	58d2      	ldr	r2, [r2, r3]
 800a92e:	2380      	movs	r3, #128	; 0x80
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	5cd2      	ldrb	r2, [r2, r3]
 800a934:	187b      	adds	r3, r7, r1
 800a936:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a938:	4aad      	ldr	r2, [pc, #692]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a93a:	238e      	movs	r3, #142	; 0x8e
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	58d3      	ldr	r3, [r2, r3]
 800a940:	22d5      	movs	r2, #213	; 0xd5
 800a942:	569a      	ldrsb	r2, [r3, r2]
 800a944:	187b      	adds	r3, r7, r1
 800a946:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a948:	4aa9      	ldr	r2, [pc, #676]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a94a:	238e      	movs	r3, #142	; 0x8e
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	58d3      	ldr	r3, [r2, r3]
 800a950:	22d4      	movs	r2, #212	; 0xd4
 800a952:	569a      	ldrsb	r2, [r3, r2]
 800a954:	187b      	adds	r3, r7, r1
 800a956:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800a958:	4aa5      	ldr	r2, [pc, #660]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a95a:	238e      	movs	r3, #142	; 0x8e
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	58d3      	ldr	r3, [r2, r3]
 800a960:	22f4      	movs	r2, #244	; 0xf4
 800a962:	5c9a      	ldrb	r2, [r3, r2]
 800a964:	000d      	movs	r5, r1
 800a966:	197b      	adds	r3, r7, r5
 800a968:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800a96a:	4aa1      	ldr	r2, [pc, #644]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a96c:	238e      	movs	r3, #142	; 0x8e
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	58d1      	ldr	r1, [r2, r3]
 800a972:	197b      	adds	r3, r7, r5
 800a974:	2288      	movs	r2, #136	; 0x88
 800a976:	0092      	lsls	r2, r2, #2
 800a978:	588a      	ldr	r2, [r1, r2]
 800a97a:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800a97c:	4a9c      	ldr	r2, [pc, #624]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a97e:	238e      	movs	r3, #142	; 0x8e
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	58d3      	ldr	r3, [r2, r3]
 800a984:	7818      	ldrb	r0, [r3, #0]
 800a986:	2356      	movs	r3, #86	; 0x56
 800a988:	18fc      	adds	r4, r7, r3
 800a98a:	2357      	movs	r3, #87	; 0x57
 800a98c:	18fa      	adds	r2, r7, r3
 800a98e:	1979      	adds	r1, r7, r5
 800a990:	2354      	movs	r3, #84	; 0x54
 800a992:	18fb      	adds	r3, r7, r3
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	2355      	movs	r3, #85	; 0x55
 800a998:	18fb      	adds	r3, r7, r3
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	0023      	movs	r3, r4
 800a99e:	f004 fa0f 	bl	800edc0 <RegionLinkAdrReq>
 800a9a2:	0003      	movs	r3, r0
 800a9a4:	001a      	movs	r2, r3
 800a9a6:	216b      	movs	r1, #107	; 0x6b
 800a9a8:	187b      	adds	r3, r7, r1
 800a9aa:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800a9ac:	187b      	adds	r3, r7, r1
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	001a      	movs	r2, r3
 800a9b2:	2307      	movs	r3, #7
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	2b07      	cmp	r3, #7
 800a9b8:	d11c      	bne.n	800a9f4 <ProcessMacCommands+0x1f4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800a9ba:	4a8d      	ldr	r2, [pc, #564]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a9bc:	238e      	movs	r3, #142	; 0x8e
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	58d3      	ldr	r3, [r2, r3]
 800a9c2:	2257      	movs	r2, #87	; 0x57
 800a9c4:	18ba      	adds	r2, r7, r2
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	5651      	ldrsb	r1, [r2, r1]
 800a9ca:	22d5      	movs	r2, #213	; 0xd5
 800a9cc:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800a9ce:	4a88      	ldr	r2, [pc, #544]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a9d0:	238e      	movs	r3, #142	; 0x8e
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	58d3      	ldr	r3, [r2, r3]
 800a9d6:	2256      	movs	r2, #86	; 0x56
 800a9d8:	18ba      	adds	r2, r7, r2
 800a9da:	2100      	movs	r1, #0
 800a9dc:	5651      	ldrsb	r1, [r2, r1]
 800a9de:	22d4      	movs	r2, #212	; 0xd4
 800a9e0:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800a9e2:	4a83      	ldr	r2, [pc, #524]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800a9e4:	238e      	movs	r3, #142	; 0x8e
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	58d3      	ldr	r3, [r2, r3]
 800a9ea:	2255      	movs	r2, #85	; 0x55
 800a9ec:	18ba      	adds	r2, r7, r2
 800a9ee:	7811      	ldrb	r1, [r2, #0]
 800a9f0:	22f4      	movs	r2, #244	; 0xf4
 800a9f2:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a9f4:	2386      	movs	r3, #134	; 0x86
 800a9f6:	18fb      	adds	r3, r7, r3
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e00c      	b.n	800aa18 <ProcessMacCommands+0x218>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800a9fe:	236b      	movs	r3, #107	; 0x6b
 800aa00:	18fb      	adds	r3, r7, r3
 800aa02:	2201      	movs	r2, #1
 800aa04:	0019      	movs	r1, r3
 800aa06:	2003      	movs	r0, #3
 800aa08:	f001 fb76 	bl	800c0f8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800aa0c:	2186      	movs	r1, #134	; 0x86
 800aa0e:	187b      	adds	r3, r7, r1
 800aa10:	781a      	ldrb	r2, [r3, #0]
 800aa12:	187b      	adds	r3, r7, r1
 800aa14:	3201      	adds	r2, #1
 800aa16:	701a      	strb	r2, [r3, #0]
 800aa18:	2354      	movs	r3, #84	; 0x54
 800aa1a:	18fb      	adds	r3, r7, r3
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2105      	movs	r1, #5
 800aa20:	0018      	movs	r0, r3
 800aa22:	f7f5 fb79 	bl	8000118 <__udivsi3>
 800aa26:	0003      	movs	r3, r0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2286      	movs	r2, #134	; 0x86
 800aa2c:	18ba      	adds	r2, r7, r2
 800aa2e:	7812      	ldrb	r2, [r2, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d3e4      	bcc.n	800a9fe <ProcessMacCommands+0x1fe>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800aa34:	2354      	movs	r3, #84	; 0x54
 800aa36:	18fb      	adds	r3, r7, r3
 800aa38:	781a      	ldrb	r2, [r3, #0]
 800aa3a:	1cfb      	adds	r3, r7, #3
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	18d3      	adds	r3, r2, r3
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	1cfb      	adds	r3, r7, #3
 800aa44:	3a01      	subs	r2, #1
 800aa46:	701a      	strb	r2, [r3, #0]
                }
                break;
 800aa48:	46c0      	nop			; (mov r8, r8)
 800aa4a:	f000 fc74 	bl	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800aa4e:	1cfb      	adds	r3, r7, #3
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	1cfa      	adds	r2, r7, #3
 800aa54:	1c59      	adds	r1, r3, #1
 800aa56:	7011      	strb	r1, [r2, #0]
 800aa58:	001a      	movs	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	189b      	adds	r3, r3, r2
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	4963      	ldr	r1, [pc, #396]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800aa62:	228e      	movs	r2, #142	; 0x8e
 800aa64:	00d2      	lsls	r2, r2, #3
 800aa66:	588a      	ldr	r2, [r1, r2]
 800aa68:	210f      	movs	r1, #15
 800aa6a:	400b      	ands	r3, r1
 800aa6c:	b2d9      	uxtb	r1, r3
 800aa6e:	2312      	movs	r3, #18
 800aa70:	33ff      	adds	r3, #255	; 0xff
 800aa72:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800aa74:	4a5e      	ldr	r2, [pc, #376]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800aa76:	238e      	movs	r3, #142	; 0x8e
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	58d2      	ldr	r2, [r2, r3]
 800aa7c:	2312      	movs	r3, #18
 800aa7e:	33ff      	adds	r3, #255	; 0xff
 800aa80:	5cd3      	ldrb	r3, [r2, r3]
 800aa82:	001a      	movs	r2, r3
 800aa84:	2301      	movs	r3, #1
 800aa86:	4093      	lsls	r3, r2
 800aa88:	0019      	movs	r1, r3
 800aa8a:	4a59      	ldr	r2, [pc, #356]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800aa8c:	238e      	movs	r3, #142	; 0x8e
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	58d2      	ldr	r2, [r2, r3]
 800aa92:	b289      	uxth	r1, r1
 800aa94:	2387      	movs	r3, #135	; 0x87
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800aa9a:	2368      	movs	r3, #104	; 0x68
 800aa9c:	18fb      	adds	r3, r7, r3
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	0019      	movs	r1, r3
 800aaa2:	2004      	movs	r0, #4
 800aaa4:	f001 fb28 	bl	800c0f8 <LoRaMacCommandsAddCmd>
 800aaa8:	2287      	movs	r2, #135	; 0x87
 800aaaa:	18bb      	adds	r3, r7, r2
 800aaac:	18ba      	adds	r2, r7, r2
 800aaae:	7812      	ldrb	r2, [r2, #0]
 800aab0:	701a      	strb	r2, [r3, #0]
                break;
 800aab2:	f000 fc40 	bl	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800aab6:	246b      	movs	r4, #107	; 0x6b
 800aab8:	193b      	adds	r3, r7, r4
 800aaba:	2207      	movs	r2, #7
 800aabc:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800aabe:	1cfb      	adds	r3, r7, #3
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	18d3      	adds	r3, r2, r3
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	091b      	lsrs	r3, r3, #4
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	b25b      	sxtb	r3, r3
 800aace:	2207      	movs	r2, #7
 800aad0:	4013      	ands	r3, r2
 800aad2:	b25a      	sxtb	r2, r3
 800aad4:	204c      	movs	r0, #76	; 0x4c
 800aad6:	183b      	adds	r3, r7, r0
 800aad8:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800aada:	1cfb      	adds	r3, r7, #3
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	18d3      	adds	r3, r2, r3
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	b25b      	sxtb	r3, r3
 800aae6:	220f      	movs	r2, #15
 800aae8:	4013      	ands	r3, r2
 800aaea:	b25a      	sxtb	r2, r3
 800aaec:	183b      	adds	r3, r7, r0
 800aaee:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800aaf0:	1cfb      	adds	r3, r7, #3
 800aaf2:	781a      	ldrb	r2, [r3, #0]
 800aaf4:	1cfb      	adds	r3, r7, #3
 800aaf6:	3201      	adds	r2, #1
 800aaf8:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800aafa:	1cfb      	adds	r3, r7, #3
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	1cfa      	adds	r2, r7, #3
 800ab00:	1c59      	adds	r1, r3, #1
 800ab02:	7011      	strb	r1, [r2, #0]
 800ab04:	001a      	movs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	189b      	adds	r3, r3, r2
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	001a      	movs	r2, r3
 800ab0e:	183b      	adds	r3, r7, r0
 800ab10:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ab12:	1cfb      	adds	r3, r7, #3
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	1cfa      	adds	r2, r7, #3
 800ab18:	1c59      	adds	r1, r3, #1
 800ab1a:	7011      	strb	r1, [r2, #0]
 800ab1c:	001a      	movs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	189b      	adds	r3, r3, r2
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	021a      	lsls	r2, r3, #8
 800ab26:	183b      	adds	r3, r7, r0
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	183b      	adds	r3, r7, r0
 800ab2e:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ab30:	1cfb      	adds	r3, r7, #3
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	1cfa      	adds	r2, r7, #3
 800ab36:	1c59      	adds	r1, r3, #1
 800ab38:	7011      	strb	r1, [r2, #0]
 800ab3a:	001a      	movs	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	189b      	adds	r3, r3, r2
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	041a      	lsls	r2, r3, #16
 800ab44:	0001      	movs	r1, r0
 800ab46:	187b      	adds	r3, r7, r1
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	187b      	adds	r3, r7, r1
 800ab4e:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800ab50:	187b      	adds	r3, r7, r1
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	2264      	movs	r2, #100	; 0x64
 800ab56:	435a      	muls	r2, r3
 800ab58:	187b      	adds	r3, r7, r1
 800ab5a:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800ab5c:	4a24      	ldr	r2, [pc, #144]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800ab5e:	238e      	movs	r3, #142	; 0x8e
 800ab60:	00db      	lsls	r3, r3, #3
 800ab62:	58d3      	ldr	r3, [r2, r3]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	187a      	adds	r2, r7, r1
 800ab68:	0011      	movs	r1, r2
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	f004 f9b0 	bl	800eed0 <RegionRxParamSetupReq>
 800ab70:	0003      	movs	r3, r0
 800ab72:	001a      	movs	r2, r3
 800ab74:	193b      	adds	r3, r7, r4
 800ab76:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800ab78:	193b      	adds	r3, r7, r4
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	001a      	movs	r2, r3
 800ab7e:	2307      	movs	r3, #7
 800ab80:	4013      	ands	r3, r2
 800ab82:	2b07      	cmp	r3, #7
 800ab84:	d11c      	bne.n	800abc0 <ProcessMacCommands+0x3c0>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800ab86:	204c      	movs	r0, #76	; 0x4c
 800ab88:	183b      	adds	r3, r7, r0
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	5659      	ldrsb	r1, [r3, r1]
 800ab8e:	4a18      	ldr	r2, [pc, #96]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800ab90:	238e      	movs	r3, #142	; 0x8e
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	58d3      	ldr	r3, [r2, r3]
 800ab96:	b2c9      	uxtb	r1, r1
 800ab98:	22fc      	movs	r2, #252	; 0xfc
 800ab9a:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800ab9c:	4a14      	ldr	r2, [pc, #80]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800ab9e:	238e      	movs	r3, #142	; 0x8e
 800aba0:	00db      	lsls	r3, r3, #3
 800aba2:	58d2      	ldr	r2, [r2, r3]
 800aba4:	183b      	adds	r3, r7, r0
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	21f8      	movs	r1, #248	; 0xf8
 800abaa:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800abac:	183b      	adds	r3, r7, r0
 800abae:	2101      	movs	r1, #1
 800abb0:	5659      	ldrsb	r1, [r3, r1]
 800abb2:	4a0f      	ldr	r2, [pc, #60]	; (800abf0 <ProcessMacCommands+0x3f0>)
 800abb4:	238e      	movs	r3, #142	; 0x8e
 800abb6:	00db      	lsls	r3, r3, #3
 800abb8:	58d3      	ldr	r3, [r2, r3]
 800abba:	b2c9      	uxtb	r1, r1
 800abbc:	22f5      	movs	r2, #245	; 0xf5
 800abbe:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 800abc0:	236b      	movs	r3, #107	; 0x6b
 800abc2:	18fb      	adds	r3, r7, r3
 800abc4:	781a      	ldrb	r2, [r3, #0]
 800abc6:	2168      	movs	r1, #104	; 0x68
 800abc8:	187b      	adds	r3, r7, r1
 800abca:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800abcc:	187b      	adds	r3, r7, r1
 800abce:	2201      	movs	r2, #1
 800abd0:	0019      	movs	r1, r3
 800abd2:	2005      	movs	r0, #5
 800abd4:	f001 fa90 	bl	800c0f8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800abd8:	f7ff fdfc 	bl	800a7d4 <SetMlmeScheduleUplinkIndication>
                break;
 800abdc:	46c0      	nop			; (mov r8, r8)
 800abde:	2287      	movs	r2, #135	; 0x87
 800abe0:	18bb      	adds	r3, r7, r2
 800abe2:	18ba      	adds	r2, r7, r2
 800abe4:	7812      	ldrb	r2, [r2, #0]
 800abe6:	701a      	strb	r2, [r3, #0]
 800abe8:	e3a5      	b.n	800b336 <ProcessMacCommands+0xb36>
 800abea:	46c0      	nop			; (mov r8, r8)
 800abec:	08027b00 	.word	0x08027b00
 800abf0:	20000494 	.word	0x20000494
 800abf4:	00000449 	.word	0x00000449
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800abf8:	2385      	movs	r3, #133	; 0x85
 800abfa:	18fb      	adds	r3, r7, r3
 800abfc:	22ff      	movs	r2, #255	; 0xff
 800abfe:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800ac00:	4ac5      	ldr	r2, [pc, #788]	; (800af18 <ProcessMacCommands+0x718>)
 800ac02:	23d7      	movs	r3, #215	; 0xd7
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	58d3      	ldr	r3, [r2, r3]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d010      	beq.n	800ac2e <ProcessMacCommands+0x42e>
 800ac0c:	4ac2      	ldr	r2, [pc, #776]	; (800af18 <ProcessMacCommands+0x718>)
 800ac0e:	23d7      	movs	r3, #215	; 0xd7
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	58d3      	ldr	r3, [r2, r3]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d009      	beq.n	800ac2e <ProcessMacCommands+0x42e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800ac1a:	4abf      	ldr	r2, [pc, #764]	; (800af18 <ProcessMacCommands+0x718>)
 800ac1c:	23d7      	movs	r3, #215	; 0xd7
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	58d3      	ldr	r3, [r2, r3]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2285      	movs	r2, #133	; 0x85
 800ac26:	18bc      	adds	r4, r7, r2
 800ac28:	4798      	blx	r3
 800ac2a:	0003      	movs	r3, r0
 800ac2c:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800ac2e:	2168      	movs	r1, #104	; 0x68
 800ac30:	187b      	adds	r3, r7, r1
 800ac32:	2285      	movs	r2, #133	; 0x85
 800ac34:	18ba      	adds	r2, r7, r2
 800ac36:	7812      	ldrb	r2, [r2, #0]
 800ac38:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800ac3a:	1c7b      	adds	r3, r7, #1
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	223f      	movs	r2, #63	; 0x3f
 800ac40:	4013      	ands	r3, r2
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	187b      	adds	r3, r7, r1
 800ac46:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800ac48:	187b      	adds	r3, r7, r1
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	0019      	movs	r1, r3
 800ac4e:	2006      	movs	r0, #6
 800ac50:	f001 fa52 	bl	800c0f8 <LoRaMacCommandsAddCmd>
 800ac54:	2287      	movs	r2, #135	; 0x87
 800ac56:	18bb      	adds	r3, r7, r2
 800ac58:	18ba      	adds	r2, r7, r2
 800ac5a:	7812      	ldrb	r2, [r2, #0]
 800ac5c:	701a      	strb	r2, [r3, #0]
                break;
 800ac5e:	e36a      	b.n	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800ac60:	246b      	movs	r4, #107	; 0x6b
 800ac62:	193b      	adds	r3, r7, r4
 800ac64:	2203      	movs	r2, #3
 800ac66:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800ac68:	1cfb      	adds	r3, r7, #3
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	1cfa      	adds	r2, r7, #3
 800ac6e:	1c59      	adds	r1, r3, #1
 800ac70:	7011      	strb	r1, [r2, #0]
 800ac72:	001a      	movs	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	189b      	adds	r3, r3, r2
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	b25a      	sxtb	r2, r3
 800ac7c:	2544      	movs	r5, #68	; 0x44
 800ac7e:	197b      	adds	r3, r7, r5
 800ac80:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800ac82:	197b      	adds	r3, r7, r5
 800ac84:	2038      	movs	r0, #56	; 0x38
 800ac86:	183a      	adds	r2, r7, r0
 800ac88:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800ac8a:	1cfb      	adds	r3, r7, #3
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	1cfa      	adds	r2, r7, #3
 800ac90:	1c59      	adds	r1, r3, #1
 800ac92:	7011      	strb	r1, [r2, #0]
 800ac94:	001a      	movs	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	189b      	adds	r3, r3, r2
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	001a      	movs	r2, r3
 800ac9e:	183b      	adds	r3, r7, r0
 800aca0:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800aca2:	1cfb      	adds	r3, r7, #3
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	1cfa      	adds	r2, r7, #3
 800aca8:	1c59      	adds	r1, r3, #1
 800acaa:	7011      	strb	r1, [r2, #0]
 800acac:	001a      	movs	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	189b      	adds	r3, r3, r2
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	021a      	lsls	r2, r3, #8
 800acb6:	183b      	adds	r3, r7, r0
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	431a      	orrs	r2, r3
 800acbc:	183b      	adds	r3, r7, r0
 800acbe:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800acc0:	1cfb      	adds	r3, r7, #3
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	1cfa      	adds	r2, r7, #3
 800acc6:	1c59      	adds	r1, r3, #1
 800acc8:	7011      	strb	r1, [r2, #0]
 800acca:	001a      	movs	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	189b      	adds	r3, r3, r2
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	041a      	lsls	r2, r3, #16
 800acd4:	183b      	adds	r3, r7, r0
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	431a      	orrs	r2, r3
 800acda:	183b      	adds	r3, r7, r0
 800acdc:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800acde:	183b      	adds	r3, r7, r0
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2264      	movs	r2, #100	; 0x64
 800ace4:	435a      	muls	r2, r3
 800ace6:	183b      	adds	r3, r7, r0
 800ace8:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800acea:	183b      	adds	r3, r7, r0
 800acec:	2200      	movs	r2, #0
 800acee:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800acf0:	1cfb      	adds	r3, r7, #3
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	1cfa      	adds	r2, r7, #3
 800acf6:	1c59      	adds	r1, r3, #1
 800acf8:	7011      	strb	r1, [r2, #0]
 800acfa:	001a      	movs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	189b      	adds	r3, r3, r2
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	b25a      	sxtb	r2, r3
 800ad04:	183b      	adds	r3, r7, r0
 800ad06:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800ad08:	4a83      	ldr	r2, [pc, #524]	; (800af18 <ProcessMacCommands+0x718>)
 800ad0a:	238e      	movs	r3, #142	; 0x8e
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	58d3      	ldr	r3, [r2, r3]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	197a      	adds	r2, r7, r5
 800ad14:	0011      	movs	r1, r2
 800ad16:	0018      	movs	r0, r3
 800ad18:	f004 f92e 	bl	800ef78 <RegionNewChannelReq>
 800ad1c:	0003      	movs	r3, r0
 800ad1e:	001a      	movs	r2, r3
 800ad20:	193b      	adds	r3, r7, r4
 800ad22:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800ad24:	193b      	adds	r3, r7, r4
 800ad26:	781a      	ldrb	r2, [r3, #0]
 800ad28:	2168      	movs	r1, #104	; 0x68
 800ad2a:	187b      	adds	r3, r7, r1
 800ad2c:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800ad2e:	187b      	adds	r3, r7, r1
 800ad30:	2201      	movs	r2, #1
 800ad32:	0019      	movs	r1, r3
 800ad34:	2007      	movs	r0, #7
 800ad36:	f001 f9df 	bl	800c0f8 <LoRaMacCommandsAddCmd>
                break;
 800ad3a:	46c0      	nop			; (mov r8, r8)
 800ad3c:	2287      	movs	r2, #135	; 0x87
 800ad3e:	18bb      	adds	r3, r7, r2
 800ad40:	18ba      	adds	r2, r7, r2
 800ad42:	7812      	ldrb	r2, [r2, #0]
 800ad44:	701a      	strb	r2, [r3, #0]
 800ad46:	e2f6      	b.n	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800ad48:	1cfb      	adds	r3, r7, #3
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	1cfa      	adds	r2, r7, #3
 800ad4e:	1c59      	adds	r1, r3, #1
 800ad50:	7011      	strb	r1, [r2, #0]
 800ad52:	001a      	movs	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	189b      	adds	r3, r3, r2
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	2084      	movs	r0, #132	; 0x84
 800ad5c:	183b      	adds	r3, r7, r0
 800ad5e:	210f      	movs	r1, #15
 800ad60:	400a      	ands	r2, r1
 800ad62:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800ad64:	183b      	adds	r3, r7, r0
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d105      	bne.n	800ad78 <ProcessMacCommands+0x578>
                {
                    delay++;
 800ad6c:	2184      	movs	r1, #132	; 0x84
 800ad6e:	187b      	adds	r3, r7, r1
 800ad70:	781a      	ldrb	r2, [r3, #0]
 800ad72:	187b      	adds	r3, r7, r1
 800ad74:	3201      	adds	r2, #1
 800ad76:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800ad78:	2384      	movs	r3, #132	; 0x84
 800ad7a:	18fb      	adds	r3, r7, r3
 800ad7c:	781a      	ldrb	r2, [r3, #0]
 800ad7e:	0013      	movs	r3, r2
 800ad80:	015b      	lsls	r3, r3, #5
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	189b      	adds	r3, r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	0019      	movs	r1, r3
 800ad8c:	4a62      	ldr	r2, [pc, #392]	; (800af18 <ProcessMacCommands+0x718>)
 800ad8e:	238e      	movs	r3, #142	; 0x8e
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	58d3      	ldr	r3, [r2, r3]
 800ad94:	22e4      	movs	r2, #228	; 0xe4
 800ad96:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800ad98:	4a5f      	ldr	r2, [pc, #380]	; (800af18 <ProcessMacCommands+0x718>)
 800ad9a:	238e      	movs	r3, #142	; 0x8e
 800ad9c:	00db      	lsls	r3, r3, #3
 800ad9e:	58d3      	ldr	r3, [r2, r3]
 800ada0:	22e4      	movs	r2, #228	; 0xe4
 800ada2:	589a      	ldr	r2, [r3, r2]
 800ada4:	495c      	ldr	r1, [pc, #368]	; (800af18 <ProcessMacCommands+0x718>)
 800ada6:	238e      	movs	r3, #142	; 0x8e
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	58cb      	ldr	r3, [r1, r3]
 800adac:	21fa      	movs	r1, #250	; 0xfa
 800adae:	0089      	lsls	r1, r1, #2
 800adb0:	468c      	mov	ip, r1
 800adb2:	4462      	add	r2, ip
 800adb4:	21e8      	movs	r1, #232	; 0xe8
 800adb6:	505a      	str	r2, [r3, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800adb8:	2368      	movs	r3, #104	; 0x68
 800adba:	18fb      	adds	r3, r7, r3
 800adbc:	2200      	movs	r2, #0
 800adbe:	0019      	movs	r1, r3
 800adc0:	2008      	movs	r0, #8
 800adc2:	f001 f999 	bl	800c0f8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800adc6:	f7ff fd05 	bl	800a7d4 <SetMlmeScheduleUplinkIndication>
 800adca:	2287      	movs	r2, #135	; 0x87
 800adcc:	18bb      	adds	r3, r7, r2
 800adce:	18ba      	adds	r2, r7, r2
 800add0:	7812      	ldrb	r2, [r2, #0]
 800add2:	701a      	strb	r2, [r3, #0]
                break;
 800add4:	e2af      	b.n	800b336 <ProcessMacCommands+0xb36>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800add6:	1cfb      	adds	r3, r7, #3
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	1cfa      	adds	r2, r7, #3
 800addc:	1c59      	adds	r1, r3, #1
 800adde:	7011      	strb	r1, [r2, #0]
 800ade0:	001a      	movs	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	189a      	adds	r2, r3, r2
 800ade6:	2176      	movs	r1, #118	; 0x76
 800ade8:	187b      	adds	r3, r7, r1
 800adea:	7812      	ldrb	r2, [r2, #0]
 800adec:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800adee:	2034      	movs	r0, #52	; 0x34
 800adf0:	183b      	adds	r3, r7, r0
 800adf2:	2200      	movs	r2, #0
 800adf4:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800adf6:	183b      	adds	r3, r7, r0
 800adf8:	2200      	movs	r2, #0
 800adfa:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800adfc:	187b      	adds	r3, r7, r1
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2220      	movs	r2, #32
 800ae02:	4013      	ands	r3, r2
 800ae04:	d003      	beq.n	800ae0e <ProcessMacCommands+0x60e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800ae06:	2334      	movs	r3, #52	; 0x34
 800ae08:	18fb      	adds	r3, r7, r3
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800ae0e:	2376      	movs	r3, #118	; 0x76
 800ae10:	18fb      	adds	r3, r7, r3
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2210      	movs	r2, #16
 800ae16:	4013      	ands	r3, r2
 800ae18:	d003      	beq.n	800ae22 <ProcessMacCommands+0x622>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800ae1a:	2334      	movs	r3, #52	; 0x34
 800ae1c:	18fb      	adds	r3, r7, r3
 800ae1e:	2201      	movs	r2, #1
 800ae20:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800ae22:	2376      	movs	r3, #118	; 0x76
 800ae24:	18fb      	adds	r3, r7, r3
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	220f      	movs	r2, #15
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	2134      	movs	r1, #52	; 0x34
 800ae30:	187b      	adds	r3, r7, r1
 800ae32:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800ae34:	4a38      	ldr	r2, [pc, #224]	; (800af18 <ProcessMacCommands+0x718>)
 800ae36:	238e      	movs	r3, #142	; 0x8e
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	58d3      	ldr	r3, [r2, r3]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	187a      	adds	r2, r7, r1
 800ae40:	0011      	movs	r1, r2
 800ae42:	0018      	movs	r0, r3
 800ae44:	f004 f8ec 	bl	800f020 <RegionTxParamSetupReq>
 800ae48:	0003      	movs	r3, r0
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	d05c      	beq.n	800af08 <ProcessMacCommands+0x708>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800ae4e:	4a32      	ldr	r2, [pc, #200]	; (800af18 <ProcessMacCommands+0x718>)
 800ae50:	238e      	movs	r3, #142	; 0x8e
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	58d2      	ldr	r2, [r2, r3]
 800ae56:	2034      	movs	r0, #52	; 0x34
 800ae58:	183b      	adds	r3, r7, r0
 800ae5a:	7819      	ldrb	r1, [r3, #0]
 800ae5c:	2380      	movs	r3, #128	; 0x80
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800ae62:	4a2d      	ldr	r2, [pc, #180]	; (800af18 <ProcessMacCommands+0x718>)
 800ae64:	238e      	movs	r3, #142	; 0x8e
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	58d2      	ldr	r2, [r2, r3]
 800ae6a:	183b      	adds	r3, r7, r0
 800ae6c:	7859      	ldrb	r1, [r3, #1]
 800ae6e:	2302      	movs	r3, #2
 800ae70:	33ff      	adds	r3, #255	; 0xff
 800ae72:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800ae74:	183b      	adds	r3, r7, r0
 800ae76:	789b      	ldrb	r3, [r3, #2]
 800ae78:	001a      	movs	r2, r3
 800ae7a:	4b28      	ldr	r3, [pc, #160]	; (800af1c <ProcessMacCommands+0x71c>)
 800ae7c:	5c99      	ldrb	r1, [r3, r2]
 800ae7e:	4a26      	ldr	r2, [pc, #152]	; (800af18 <ProcessMacCommands+0x718>)
 800ae80:	238e      	movs	r3, #142	; 0x8e
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	58d4      	ldr	r4, [r2, r3]
 800ae86:	0008      	movs	r0, r1
 800ae88:	f7f5 ff72 	bl	8000d70 <__aeabi_ui2f>
 800ae8c:	1c02      	adds	r2, r0, #0
 800ae8e:	2382      	movs	r3, #130	; 0x82
 800ae90:	005b      	lsls	r3, r3, #1
 800ae92:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ae94:	2130      	movs	r1, #48	; 0x30
 800ae96:	187b      	adds	r3, r7, r1
 800ae98:	2201      	movs	r2, #1
 800ae9a:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ae9c:	4a1e      	ldr	r2, [pc, #120]	; (800af18 <ProcessMacCommands+0x718>)
 800ae9e:	238e      	movs	r3, #142	; 0x8e
 800aea0:	00db      	lsls	r3, r3, #3
 800aea2:	58d2      	ldr	r2, [r2, r3]
 800aea4:	2380      	movs	r3, #128	; 0x80
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	5cd2      	ldrb	r2, [r2, r3]
 800aeaa:	187b      	adds	r3, r7, r1
 800aeac:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aeae:	4a1a      	ldr	r2, [pc, #104]	; (800af18 <ProcessMacCommands+0x718>)
 800aeb0:	238e      	movs	r3, #142	; 0x8e
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	58d3      	ldr	r3, [r2, r3]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	187a      	adds	r2, r7, r1
 800aeba:	0011      	movs	r1, r2
 800aebc:	0018      	movs	r0, r3
 800aebe:	f003 fcb5 	bl	800e82c <RegionGetPhyParam>
 800aec2:	0003      	movs	r3, r0
 800aec4:	001a      	movs	r2, r3
 800aec6:	212c      	movs	r1, #44	; 0x2c
 800aec8:	187b      	adds	r3, r7, r1
 800aeca:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800aecc:	187b      	adds	r3, r7, r1
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	b259      	sxtb	r1, r3
 800aed2:	4a11      	ldr	r2, [pc, #68]	; (800af18 <ProcessMacCommands+0x718>)
 800aed4:	238e      	movs	r3, #142	; 0x8e
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	58d3      	ldr	r3, [r2, r3]
 800aeda:	22d5      	movs	r2, #213	; 0xd5
 800aedc:	5698      	ldrsb	r0, [r3, r2]
 800aede:	4a0e      	ldr	r2, [pc, #56]	; (800af18 <ProcessMacCommands+0x718>)
 800aee0:	238e      	movs	r3, #142	; 0x8e
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	58d3      	ldr	r3, [r2, r3]
 800aee6:	1c04      	adds	r4, r0, #0
 800aee8:	1c08      	adds	r0, r1, #0
 800aeea:	b241      	sxtb	r1, r0
 800aeec:	b262      	sxtb	r2, r4
 800aeee:	4291      	cmp	r1, r2
 800aef0:	da00      	bge.n	800aef4 <ProcessMacCommands+0x6f4>
 800aef2:	1c20      	adds	r0, r4, #0
 800aef4:	b241      	sxtb	r1, r0
 800aef6:	22d5      	movs	r2, #213	; 0xd5
 800aef8:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800aefa:	2368      	movs	r3, #104	; 0x68
 800aefc:	18fb      	adds	r3, r7, r3
 800aefe:	2200      	movs	r2, #0
 800af00:	0019      	movs	r1, r3
 800af02:	2009      	movs	r0, #9
 800af04:	f001 f8f8 	bl	800c0f8 <LoRaMacCommandsAddCmd>
                }
                break;
 800af08:	46c0      	nop			; (mov r8, r8)
 800af0a:	2287      	movs	r2, #135	; 0x87
 800af0c:	18bb      	adds	r3, r7, r2
 800af0e:	18ba      	adds	r2, r7, r2
 800af10:	7812      	ldrb	r2, [r2, #0]
 800af12:	701a      	strb	r2, [r3, #0]
 800af14:	e20f      	b.n	800b336 <ProcessMacCommands+0xb36>
 800af16:	46c0      	nop			; (mov r8, r8)
 800af18:	20000494 	.word	0x20000494
 800af1c:	08027af0 	.word	0x08027af0
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800af20:	246b      	movs	r4, #107	; 0x6b
 800af22:	193b      	adds	r3, r7, r4
 800af24:	2203      	movs	r2, #3
 800af26:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800af28:	1cfb      	adds	r3, r7, #3
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	1cfa      	adds	r2, r7, #3
 800af2e:	1c59      	adds	r1, r3, #1
 800af30:	7011      	strb	r1, [r2, #0]
 800af32:	001a      	movs	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	189b      	adds	r3, r3, r2
 800af38:	781a      	ldrb	r2, [r3, #0]
 800af3a:	2024      	movs	r0, #36	; 0x24
 800af3c:	183b      	adds	r3, r7, r0
 800af3e:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800af40:	1cfb      	adds	r3, r7, #3
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	1cfa      	adds	r2, r7, #3
 800af46:	1c59      	adds	r1, r3, #1
 800af48:	7011      	strb	r1, [r2, #0]
 800af4a:	001a      	movs	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	189b      	adds	r3, r3, r2
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	001a      	movs	r2, r3
 800af54:	183b      	adds	r3, r7, r0
 800af56:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800af58:	1cfb      	adds	r3, r7, #3
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	1cfa      	adds	r2, r7, #3
 800af5e:	1c59      	adds	r1, r3, #1
 800af60:	7011      	strb	r1, [r2, #0]
 800af62:	001a      	movs	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	189b      	adds	r3, r3, r2
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	021a      	lsls	r2, r3, #8
 800af6c:	183b      	adds	r3, r7, r0
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	431a      	orrs	r2, r3
 800af72:	183b      	adds	r3, r7, r0
 800af74:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800af76:	1cfb      	adds	r3, r7, #3
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	1cfa      	adds	r2, r7, #3
 800af7c:	1c59      	adds	r1, r3, #1
 800af7e:	7011      	strb	r1, [r2, #0]
 800af80:	001a      	movs	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	189b      	adds	r3, r3, r2
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	041a      	lsls	r2, r3, #16
 800af8a:	0001      	movs	r1, r0
 800af8c:	187b      	adds	r3, r7, r1
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	431a      	orrs	r2, r3
 800af92:	187b      	adds	r3, r7, r1
 800af94:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800af96:	187b      	adds	r3, r7, r1
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	2264      	movs	r2, #100	; 0x64
 800af9c:	435a      	muls	r2, r3
 800af9e:	187b      	adds	r3, r7, r1
 800afa0:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800afa2:	4aeb      	ldr	r2, [pc, #940]	; (800b350 <ProcessMacCommands+0xb50>)
 800afa4:	238e      	movs	r3, #142	; 0x8e
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	58d3      	ldr	r3, [r2, r3]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	187a      	adds	r2, r7, r1
 800afae:	0011      	movs	r1, r2
 800afb0:	0018      	movs	r0, r3
 800afb2:	f004 f889 	bl	800f0c8 <RegionDlChannelReq>
 800afb6:	0003      	movs	r3, r0
 800afb8:	001a      	movs	r2, r3
 800afba:	193b      	adds	r3, r7, r4
 800afbc:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800afbe:	193b      	adds	r3, r7, r4
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	2168      	movs	r1, #104	; 0x68
 800afc4:	187b      	adds	r3, r7, r1
 800afc6:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800afc8:	187b      	adds	r3, r7, r1
 800afca:	2201      	movs	r2, #1
 800afcc:	0019      	movs	r1, r3
 800afce:	200a      	movs	r0, #10
 800afd0:	f001 f892 	bl	800c0f8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800afd4:	f7ff fbfe 	bl	800a7d4 <SetMlmeScheduleUplinkIndication>
                break;
 800afd8:	46c0      	nop			; (mov r8, r8)
 800afda:	2287      	movs	r2, #135	; 0x87
 800afdc:	18bb      	adds	r3, r7, r2
 800afde:	18ba      	adds	r2, r7, r2
 800afe0:	7812      	ldrb	r2, [r2, #0]
 800afe2:	701a      	strb	r2, [r3, #0]
 800afe4:	e1a7      	b.n	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800afe6:	241c      	movs	r4, #28
 800afe8:	193b      	adds	r3, r7, r4
 800afea:	0018      	movs	r0, r3
 800afec:	2308      	movs	r3, #8
 800afee:	001a      	movs	r2, r3
 800aff0:	2100      	movs	r1, #0
 800aff2:	f01a ff9d 	bl	8025f30 <memset>
                SysTime_t sysTime = { 0 };
 800aff6:	2514      	movs	r5, #20
 800aff8:	197b      	adds	r3, r7, r5
 800affa:	0018      	movs	r0, r3
 800affc:	2308      	movs	r3, #8
 800affe:	001a      	movs	r2, r3
 800b000:	2100      	movs	r1, #0
 800b002:	f01a ff95 	bl	8025f30 <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800b006:	260c      	movs	r6, #12
 800b008:	19bb      	adds	r3, r7, r6
 800b00a:	0018      	movs	r0, r3
 800b00c:	2308      	movs	r3, #8
 800b00e:	001a      	movs	r2, r3
 800b010:	2100      	movs	r1, #0
 800b012:	f01a ff8d 	bl	8025f30 <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800b016:	1cfb      	adds	r3, r7, #3
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	1cfa      	adds	r2, r7, #3
 800b01c:	1c59      	adds	r1, r3, #1
 800b01e:	7011      	strb	r1, [r2, #0]
 800b020:	001a      	movs	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	189b      	adds	r3, r3, r2
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	001a      	movs	r2, r3
 800b02a:	0020      	movs	r0, r4
 800b02c:	183b      	adds	r3, r7, r0
 800b02e:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800b030:	1cfb      	adds	r3, r7, #3
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	1cfa      	adds	r2, r7, #3
 800b036:	1c59      	adds	r1, r3, #1
 800b038:	7011      	strb	r1, [r2, #0]
 800b03a:	001a      	movs	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	189b      	adds	r3, r3, r2
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	021a      	lsls	r2, r3, #8
 800b044:	183b      	adds	r3, r7, r0
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	431a      	orrs	r2, r3
 800b04a:	183b      	adds	r3, r7, r0
 800b04c:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800b04e:	1cfb      	adds	r3, r7, #3
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	1cfa      	adds	r2, r7, #3
 800b054:	1c59      	adds	r1, r3, #1
 800b056:	7011      	strb	r1, [r2, #0]
 800b058:	001a      	movs	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	189b      	adds	r3, r3, r2
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	041a      	lsls	r2, r3, #16
 800b062:	183b      	adds	r3, r7, r0
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	431a      	orrs	r2, r3
 800b068:	183b      	adds	r3, r7, r0
 800b06a:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800b06c:	1cfb      	adds	r3, r7, #3
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	1cfa      	adds	r2, r7, #3
 800b072:	1c59      	adds	r1, r3, #1
 800b074:	7011      	strb	r1, [r2, #0]
 800b076:	001a      	movs	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	189b      	adds	r3, r3, r2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	061a      	lsls	r2, r3, #24
 800b080:	183b      	adds	r3, r7, r0
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	431a      	orrs	r2, r3
 800b086:	183b      	adds	r3, r7, r0
 800b088:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800b08a:	1cfb      	adds	r3, r7, #3
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	1cfa      	adds	r2, r7, #3
 800b090:	1c59      	adds	r1, r3, #1
 800b092:	7011      	strb	r1, [r2, #0]
 800b094:	001a      	movs	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	189b      	adds	r3, r3, r2
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	b21a      	sxth	r2, r3
 800b09e:	183b      	adds	r3, r7, r0
 800b0a0:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800b0a2:	0001      	movs	r1, r0
 800b0a4:	183b      	adds	r3, r7, r0
 800b0a6:	2204      	movs	r2, #4
 800b0a8:	5e9b      	ldrsh	r3, [r3, r2]
 800b0aa:	001a      	movs	r2, r3
 800b0ac:	0013      	movs	r3, r2
 800b0ae:	015b      	lsls	r3, r3, #5
 800b0b0:	1a9b      	subs	r3, r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	189b      	adds	r3, r3, r2
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	121b      	asrs	r3, r3, #8
 800b0ba:	b21a      	sxth	r2, r3
 800b0bc:	187b      	adds	r3, r7, r1
 800b0be:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800b0c0:	002c      	movs	r4, r5
 800b0c2:	193b      	adds	r3, r7, r4
 800b0c4:	187a      	adds	r2, r7, r1
 800b0c6:	ca03      	ldmia	r2!, {r0, r1}
 800b0c8:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b0ca:	193b      	adds	r3, r7, r4
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4aa1      	ldr	r2, [pc, #644]	; (800b354 <ProcessMacCommands+0xb54>)
 800b0d0:	189a      	adds	r2, r3, r2
 800b0d2:	193b      	adds	r3, r7, r4
 800b0d4:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800b0d6:	19bb      	adds	r3, r7, r6
 800b0d8:	0018      	movs	r0, r3
 800b0da:	f011 fc2b 	bl	801c934 <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800b0de:	236c      	movs	r3, #108	; 0x6c
 800b0e0:	18fd      	adds	r5, r7, r3
 800b0e2:	499b      	ldr	r1, [pc, #620]	; (800b350 <ProcessMacCommands+0xb50>)
 800b0e4:	23d3      	movs	r3, #211	; 0xd3
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	0026      	movs	r6, r4
 800b0ea:	193a      	adds	r2, r7, r4
 800b0ec:	2404      	movs	r4, #4
 800b0ee:	18c8      	adds	r0, r1, r3
 800b0f0:	1900      	adds	r0, r0, r4
 800b0f2:	466c      	mov	r4, sp
 800b0f4:	6800      	ldr	r0, [r0, #0]
 800b0f6:	6020      	str	r0, [r4, #0]
 800b0f8:	58cb      	ldr	r3, [r1, r3]
 800b0fa:	6811      	ldr	r1, [r2, #0]
 800b0fc:	6852      	ldr	r2, [r2, #4]
 800b0fe:	0028      	movs	r0, r5
 800b100:	f011 fb98 	bl	801c834 <SysTimeSub>
 800b104:	0034      	movs	r4, r6
 800b106:	0025      	movs	r5, r4
 800b108:	193c      	adds	r4, r7, r4
 800b10a:	236c      	movs	r3, #108	; 0x6c
 800b10c:	18fb      	adds	r3, r7, r3
 800b10e:	260c      	movs	r6, #12
 800b110:	19ba      	adds	r2, r7, r6
 800b112:	4669      	mov	r1, sp
 800b114:	6858      	ldr	r0, [r3, #4]
 800b116:	6008      	str	r0, [r1, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6811      	ldr	r1, [r2, #0]
 800b11c:	6852      	ldr	r2, [r2, #4]
 800b11e:	0020      	movs	r0, r4
 800b120:	f011 fb30 	bl	801c784 <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800b124:	002c      	movs	r4, r5
 800b126:	193b      	adds	r3, r7, r4
 800b128:	6818      	ldr	r0, [r3, #0]
 800b12a:	6859      	ldr	r1, [r3, #4]
 800b12c:	f011 fbd6 	bl	801c8dc <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800b130:	f000 feaf 	bl	800be92 <LoRaMacClassBDeviceTimeAns>
                break;
 800b134:	46c0      	nop			; (mov r8, r8)
 800b136:	2287      	movs	r2, #135	; 0x87
 800b138:	18bb      	adds	r3, r7, r2
 800b13a:	18ba      	adds	r2, r7, r2
 800b13c:	7812      	ldrb	r2, [r2, #0]
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	e0f9      	b.n	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_MULTICAST_SLOT ) )
 800b142:	4b83      	ldr	r3, [pc, #524]	; (800b350 <ProcessMacCommands+0xb50>)
 800b144:	4a84      	ldr	r2, [pc, #528]	; (800b358 <ProcessMacCommands+0xb58>)
 800b146:	5c9b      	ldrb	r3, [r3, r2]
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d006      	beq.n	800b15a <ProcessMacCommands+0x95a>
 800b14c:	4b80      	ldr	r3, [pc, #512]	; (800b350 <ProcessMacCommands+0xb50>)
 800b14e:	4a82      	ldr	r2, [pc, #520]	; (800b358 <ProcessMacCommands+0xb58>)
 800b150:	5c9b      	ldrb	r3, [r3, r2]
 800b152:	2b04      	cmp	r3, #4
 800b154:	d001      	beq.n	800b15a <ProcessMacCommands+0x95a>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800b156:	f000 fe7d 	bl	800be54 <LoRaMacClassBPingSlotInfoAns>
 800b15a:	2287      	movs	r2, #135	; 0x87
 800b15c:	18bb      	adds	r3, r7, r2
 800b15e:	18ba      	adds	r2, r7, r2
 800b160:	7812      	ldrb	r2, [r2, #0]
 800b162:	701a      	strb	r2, [r3, #0]
                }
                break;
 800b164:	e0e7      	b.n	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800b166:	207c      	movs	r0, #124	; 0x7c
 800b168:	183b      	adds	r3, r7, r0
 800b16a:	2203      	movs	r2, #3
 800b16c:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800b172:	1cfb      	adds	r3, r7, #3
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	1cfa      	adds	r2, r7, #3
 800b178:	1c59      	adds	r1, r3, #1
 800b17a:	7011      	strb	r1, [r2, #0]
 800b17c:	001a      	movs	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	189b      	adds	r3, r3, r2
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b186:	1cfb      	adds	r3, r7, #3
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	1cfa      	adds	r2, r7, #3
 800b18c:	1c59      	adds	r1, r3, #1
 800b18e:	7011      	strb	r1, [r2, #0]
 800b190:	001a      	movs	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	189b      	adds	r3, r3, r2
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	021b      	lsls	r3, r3, #8
 800b19a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b19c:	4313      	orrs	r3, r2
 800b19e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b1a0:	1cfb      	adds	r3, r7, #3
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	1cfa      	adds	r2, r7, #3
 800b1a6:	1c59      	adds	r1, r3, #1
 800b1a8:	7011      	strb	r1, [r2, #0]
 800b1aa:	001a      	movs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	189b      	adds	r3, r3, r2
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	041b      	lsls	r3, r3, #16
 800b1b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800b1ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1bc:	2264      	movs	r2, #100	; 0x64
 800b1be:	4353      	muls	r3, r2
 800b1c0:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800b1c2:	1cfb      	adds	r3, r7, #3
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	1cfa      	adds	r2, r7, #3
 800b1c8:	1c59      	adds	r1, r3, #1
 800b1ca:	7011      	strb	r1, [r2, #0]
 800b1cc:	001a      	movs	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	189b      	adds	r3, r3, r2
 800b1d2:	781a      	ldrb	r2, [r3, #0]
 800b1d4:	2677      	movs	r6, #119	; 0x77
 800b1d6:	19bb      	adds	r3, r7, r6
 800b1d8:	210f      	movs	r1, #15
 800b1da:	400a      	ands	r2, r1
 800b1dc:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800b1de:	0005      	movs	r5, r0
 800b1e0:	183c      	adds	r4, r7, r0
 800b1e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b1e4:	19bb      	adds	r3, r7, r6
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	0011      	movs	r1, r2
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f000 fe37 	bl	800be5e <LoRaMacClassBPingSlotChannelReq>
 800b1f0:	0003      	movs	r3, r0
 800b1f2:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800b1f4:	2168      	movs	r1, #104	; 0x68
 800b1f6:	187b      	adds	r3, r7, r1
 800b1f8:	0028      	movs	r0, r5
 800b1fa:	183a      	adds	r2, r7, r0
 800b1fc:	7812      	ldrb	r2, [r2, #0]
 800b1fe:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800b200:	187b      	adds	r3, r7, r1
 800b202:	2201      	movs	r2, #1
 800b204:	0019      	movs	r1, r3
 800b206:	2011      	movs	r0, #17
 800b208:	f000 ff76 	bl	800c0f8 <LoRaMacCommandsAddCmd>
 800b20c:	2287      	movs	r2, #135	; 0x87
 800b20e:	18bb      	adds	r3, r7, r2
 800b210:	18ba      	adds	r2, r7, r2
 800b212:	7812      	ldrb	r2, [r2, #0]
 800b214:	701a      	strb	r2, [r3, #0]
                break;
 800b216:	e08e      	b.n	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800b218:	207e      	movs	r0, #126	; 0x7e
 800b21a:	183b      	adds	r3, r7, r0
 800b21c:	2200      	movs	r2, #0
 800b21e:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800b220:	247d      	movs	r4, #125	; 0x7d
 800b222:	193b      	adds	r3, r7, r4
 800b224:	2200      	movs	r2, #0
 800b226:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800b228:	1cfb      	adds	r3, r7, #3
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	1cfa      	adds	r2, r7, #3
 800b22e:	1c59      	adds	r1, r3, #1
 800b230:	7011      	strb	r1, [r2, #0]
 800b232:	001a      	movs	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	189b      	adds	r3, r3, r2
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	183b      	adds	r3, r7, r0
 800b23c:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800b23e:	1cfb      	adds	r3, r7, #3
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	1cfa      	adds	r2, r7, #3
 800b244:	1c59      	adds	r1, r3, #1
 800b246:	7011      	strb	r1, [r2, #0]
 800b248:	001a      	movs	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	189b      	adds	r3, r3, r2
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	b21a      	sxth	r2, r3
 800b254:	183b      	adds	r3, r7, r0
 800b256:	2100      	movs	r1, #0
 800b258:	5e5b      	ldrsh	r3, [r3, r1]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	b21a      	sxth	r2, r3
 800b25e:	183b      	adds	r3, r7, r0
 800b260:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800b262:	1cfb      	adds	r3, r7, #3
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	1cfa      	adds	r2, r7, #3
 800b268:	1c59      	adds	r1, r3, #1
 800b26a:	7011      	strb	r1, [r2, #0]
 800b26c:	001a      	movs	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	189a      	adds	r2, r3, r2
 800b272:	193b      	adds	r3, r7, r4
 800b274:	7812      	ldrb	r2, [r2, #0]
 800b276:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800b278:	4b38      	ldr	r3, [pc, #224]	; (800b35c <ProcessMacCommands+0xb5c>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	193b      	adds	r3, r7, r4
 800b27e:	7819      	ldrb	r1, [r3, #0]
 800b280:	183b      	adds	r3, r7, r0
 800b282:	881b      	ldrh	r3, [r3, #0]
 800b284:	0018      	movs	r0, r3
 800b286:	f000 fdf6 	bl	800be76 <LoRaMacClassBBeaconTimingAns>
 800b28a:	2287      	movs	r2, #135	; 0x87
 800b28c:	18bb      	adds	r3, r7, r2
 800b28e:	18ba      	adds	r2, r7, r2
 800b290:	7812      	ldrb	r2, [r2, #0]
 800b292:	701a      	strb	r2, [r3, #0]
                break;
 800b294:	e04f      	b.n	800b336 <ProcessMacCommands+0xb36>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	2080      	movs	r0, #128	; 0x80
 800b29a:	183a      	adds	r2, r7, r0
 800b29c:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800b29e:	1cfb      	adds	r3, r7, #3
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	1cfa      	adds	r2, r7, #3
 800b2a4:	1c59      	adds	r1, r3, #1
 800b2a6:	7011      	strb	r1, [r2, #0]
 800b2a8:	001a      	movs	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	189b      	adds	r3, r3, r2
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	183a      	adds	r2, r7, r0
 800b2b2:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b2b4:	1cfb      	adds	r3, r7, #3
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	1cfa      	adds	r2, r7, #3
 800b2ba:	1c59      	adds	r1, r3, #1
 800b2bc:	7011      	strb	r1, [r2, #0]
 800b2be:	001a      	movs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	189b      	adds	r3, r3, r2
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	021b      	lsls	r3, r3, #8
 800b2c8:	183a      	adds	r2, r7, r0
 800b2ca:	6812      	ldr	r2, [r2, #0]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	183a      	adds	r2, r7, r0
 800b2d0:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b2d2:	1cfb      	adds	r3, r7, #3
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	1cfa      	adds	r2, r7, #3
 800b2d8:	1c59      	adds	r1, r3, #1
 800b2da:	7011      	strb	r1, [r2, #0]
 800b2dc:	001a      	movs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	189b      	adds	r3, r3, r2
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	041b      	lsls	r3, r3, #16
 800b2e6:	183a      	adds	r2, r7, r0
 800b2e8:	6812      	ldr	r2, [r2, #0]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	183a      	adds	r2, r7, r0
 800b2ee:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800b2f0:	183b      	adds	r3, r7, r0
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2264      	movs	r2, #100	; 0x64
 800b2f6:	4353      	muls	r3, r2
 800b2f8:	183a      	adds	r2, r7, r0
 800b2fa:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800b2fc:	183b      	adds	r3, r7, r0
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	0018      	movs	r0, r3
 800b302:	f000 fdcb 	bl	800be9c <LoRaMacClassBBeaconFreqReq>
 800b306:	1e03      	subs	r3, r0, #0
 800b308:	d004      	beq.n	800b314 <ProcessMacCommands+0xb14>
                    {
                        macCmdPayload[0] = 1;
 800b30a:	2368      	movs	r3, #104	; 0x68
 800b30c:	18fb      	adds	r3, r7, r3
 800b30e:	2201      	movs	r2, #1
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	e003      	b.n	800b31c <ProcessMacCommands+0xb1c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800b314:	2368      	movs	r3, #104	; 0x68
 800b316:	18fb      	adds	r3, r7, r3
 800b318:	2200      	movs	r2, #0
 800b31a:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800b31c:	2368      	movs	r3, #104	; 0x68
 800b31e:	18fb      	adds	r3, r7, r3
 800b320:	2201      	movs	r2, #1
 800b322:	0019      	movs	r1, r3
 800b324:	2013      	movs	r0, #19
 800b326:	f000 fee7 	bl	800c0f8 <LoRaMacCommandsAddCmd>
 800b32a:	2287      	movs	r2, #135	; 0x87
 800b32c:	18bb      	adds	r3, r7, r2
 800b32e:	18ba      	adds	r2, r7, r2
 800b330:	7812      	ldrb	r2, [r2, #0]
 800b332:	701a      	strb	r2, [r3, #0]
                }
                break;
 800b334:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 800b336:	1cfa      	adds	r2, r7, #3
 800b338:	1cbb      	adds	r3, r7, #2
 800b33a:	7812      	ldrb	r2, [r2, #0]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d201      	bcs.n	800b346 <ProcessMacCommands+0xb46>
 800b342:	f7ff fa7e 	bl	800a842 <ProcessMacCommands+0x42>
 800b346:	e000      	b.n	800b34a <ProcessMacCommands+0xb4a>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800b348:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800b34a:	46bd      	mov	sp, r7
 800b34c:	b023      	add	sp, #140	; 0x8c
 800b34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b350:	20000494 	.word	0x20000494
 800b354:	12d53d80 	.word	0x12d53d80
 800b358:	0000046c 	.word	0x0000046c
 800b35c:	200020d0 	.word	0x200020d0

0800b360 <ScheduleTx>:
    status = ScheduleTx( allowDelayedTx );
    return status;
}

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800b360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b362:	b08b      	sub	sp, #44	; 0x2c
 800b364:	af02      	add	r7, sp, #8
 800b366:	0002      	movs	r2, r0
 800b368:	1dfb      	adds	r3, r7, #7
 800b36a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b36c:	231f      	movs	r3, #31
 800b36e:	18fb      	adds	r3, r7, r3
 800b370:	2203      	movs	r2, #3
 800b372:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800b37c:	4ab1      	ldr	r2, [pc, #708]	; (800b644 <ScheduleTx+0x2e4>)
 800b37e:	238e      	movs	r3, #142	; 0x8e
 800b380:	00db      	lsls	r3, r3, #3
 800b382:	58d2      	ldr	r2, [r2, r3]
 800b384:	238a      	movs	r3, #138	; 0x8a
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	5cd3      	ldrb	r3, [r2, r3]
 800b38a:	0018      	movs	r0, r3
 800b38c:	f000 f9c4 	bl	800b718 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.AggregatedTimeOff;
 800b390:	4aac      	ldr	r2, [pc, #688]	; (800b644 <ScheduleTx+0x2e4>)
 800b392:	23d1      	movs	r3, #209	; 0xd1
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	58d2      	ldr	r2, [r2, r3]
 800b398:	210c      	movs	r1, #12
 800b39a:	187b      	adds	r3, r7, r1
 800b39c:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b39e:	4aa9      	ldr	r2, [pc, #676]	; (800b644 <ScheduleTx+0x2e4>)
 800b3a0:	238e      	movs	r3, #142	; 0x8e
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	58d3      	ldr	r3, [r2, r3]
 800b3a6:	22d5      	movs	r2, #213	; 0xd5
 800b3a8:	569a      	ldrsb	r2, [r3, r2]
 800b3aa:	187b      	adds	r3, r7, r1
 800b3ac:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800b3ae:	4aa5      	ldr	r2, [pc, #660]	; (800b644 <ScheduleTx+0x2e4>)
 800b3b0:	238e      	movs	r3, #142	; 0x8e
 800b3b2:	00db      	lsls	r3, r3, #3
 800b3b4:	58d2      	ldr	r2, [r2, r3]
 800b3b6:	2389      	movs	r3, #137	; 0x89
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	5cd2      	ldrb	r2, [r2, r3]
 800b3bc:	187b      	adds	r3, r7, r1
 800b3be:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b3c0:	4aa0      	ldr	r2, [pc, #640]	; (800b644 <ScheduleTx+0x2e4>)
 800b3c2:	238e      	movs	r3, #142	; 0x8e
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	58d2      	ldr	r2, [r2, r3]
 800b3c8:	2389      	movs	r3, #137	; 0x89
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	5cd3      	ldrb	r3, [r2, r3]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d104      	bne.n	800b3dc <ScheduleTx+0x7c>
    {
        nextChan.Joined = false;
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	18fb      	adds	r3, r7, r3
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	725a      	strb	r2, [r3, #9]
 800b3da:	e003      	b.n	800b3e4 <ScheduleTx+0x84>
    }
    else
    {
        nextChan.Joined = true;
 800b3dc:	230c      	movs	r3, #12
 800b3de:	18fb      	adds	r3, r7, r3
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.AggregatedLastTxDoneTime;
 800b3e4:	4a97      	ldr	r2, [pc, #604]	; (800b644 <ScheduleTx+0x2e4>)
 800b3e6:	23d0      	movs	r3, #208	; 0xd0
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	58d2      	ldr	r2, [r2, r3]
 800b3ec:	210c      	movs	r1, #12
 800b3ee:	187b      	adds	r3, r7, r1
 800b3f0:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.NvmCtx->Channel, &dutyCycleTimeOff, &MacCtx.AggregatedTimeOff );
 800b3f2:	4a94      	ldr	r2, [pc, #592]	; (800b644 <ScheduleTx+0x2e4>)
 800b3f4:	238e      	movs	r3, #142	; 0x8e
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	58d3      	ldr	r3, [r2, r3]
 800b3fa:	7818      	ldrb	r0, [r3, #0]
 800b3fc:	4a91      	ldr	r2, [pc, #580]	; (800b644 <ScheduleTx+0x2e4>)
 800b3fe:	238e      	movs	r3, #142	; 0x8e
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	58d3      	ldr	r3, [r2, r3]
 800b404:	3314      	adds	r3, #20
 800b406:	33ff      	adds	r3, #255	; 0xff
 800b408:	001a      	movs	r2, r3
 800b40a:	261f      	movs	r6, #31
 800b40c:	19bc      	adds	r4, r7, r6
 800b40e:	2318      	movs	r3, #24
 800b410:	18fd      	adds	r5, r7, r3
 800b412:	1879      	adds	r1, r7, r1
 800b414:	4b8c      	ldr	r3, [pc, #560]	; (800b648 <ScheduleTx+0x2e8>)
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	002b      	movs	r3, r5
 800b41a:	f003 fef3 	bl	800f204 <RegionNextChannel>
 800b41e:	0003      	movs	r3, r0
 800b420:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 800b422:	19bb      	adds	r3, r7, r6
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d026      	beq.n	800b478 <ScheduleTx+0x118>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800b42a:	231f      	movs	r3, #31
 800b42c:	18fb      	adds	r3, r7, r3
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b0b      	cmp	r3, #11
 800b432:	d11d      	bne.n	800b470 <ScheduleTx+0x110>
 800b434:	1dfb      	adds	r3, r7, #7
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d019      	beq.n	800b470 <ScheduleTx+0x110>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d014      	beq.n	800b46c <ScheduleTx+0x10c>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800b442:	4a80      	ldr	r2, [pc, #512]	; (800b644 <ScheduleTx+0x2e4>)
 800b444:	23d5      	movs	r3, #213	; 0xd5
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	58d3      	ldr	r3, [r2, r3]
 800b44a:	2220      	movs	r2, #32
 800b44c:	431a      	orrs	r2, r3
 800b44e:	0011      	movs	r1, r2
 800b450:	4a7c      	ldr	r2, [pc, #496]	; (800b644 <ScheduleTx+0x2e4>)
 800b452:	23d5      	movs	r3, #213	; 0xd5
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	4b7c      	ldr	r3, [pc, #496]	; (800b64c <ScheduleTx+0x2ec>)
 800b45c:	0011      	movs	r1, r2
 800b45e:	0018      	movs	r0, r3
 800b460:	f011 fb38 	bl	801cad4 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800b464:	4b79      	ldr	r3, [pc, #484]	; (800b64c <ScheduleTx+0x2ec>)
 800b466:	0018      	movs	r0, r3
 800b468:	f011 fb60 	bl	801cb2c <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e0e5      	b.n	800b63c <ScheduleTx+0x2dc>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800b470:	231f      	movs	r3, #31
 800b472:	18fb      	adds	r3, r7, r3
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	e0e1      	b.n	800b63c <ScheduleTx+0x2dc>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b478:	4a72      	ldr	r2, [pc, #456]	; (800b644 <ScheduleTx+0x2e4>)
 800b47a:	238e      	movs	r3, #142	; 0x8e
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	58d3      	ldr	r3, [r2, r3]
 800b480:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800b482:	4a70      	ldr	r2, [pc, #448]	; (800b644 <ScheduleTx+0x2e4>)
 800b484:	238e      	movs	r3, #142	; 0x8e
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	58d3      	ldr	r3, [r2, r3]
 800b48a:	7818      	ldrb	r0, [r3, #0]
 800b48c:	4a6d      	ldr	r2, [pc, #436]	; (800b644 <ScheduleTx+0x2e4>)
 800b48e:	238e      	movs	r3, #142	; 0x8e
 800b490:	00db      	lsls	r3, r3, #3
 800b492:	58d2      	ldr	r2, [r2, r3]
 800b494:	2302      	movs	r3, #2
 800b496:	33ff      	adds	r3, #255	; 0xff
 800b498:	5cd1      	ldrb	r1, [r2, r3]
 800b49a:	4a6a      	ldr	r2, [pc, #424]	; (800b644 <ScheduleTx+0x2e4>)
 800b49c:	238e      	movs	r3, #142	; 0x8e
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	58d3      	ldr	r3, [r2, r3]
 800b4a2:	22d5      	movs	r2, #213	; 0xd5
 800b4a4:	569d      	ldrsb	r5, [r3, r2]
 800b4a6:	4a67      	ldr	r2, [pc, #412]	; (800b644 <ScheduleTx+0x2e4>)
 800b4a8:	238e      	movs	r3, #142	; 0x8e
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	58d3      	ldr	r3, [r2, r3]
 800b4ae:	22f5      	movs	r2, #245	; 0xf5
 800b4b0:	5c9b      	ldrb	r3, [r3, r2]
 800b4b2:	b25b      	sxtb	r3, r3
 800b4b4:	002a      	movs	r2, r5
 800b4b6:	f003 ff0f 	bl	800f2d8 <RegionApplyDrOffset>
 800b4ba:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4bc:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b4be:	4a61      	ldr	r2, [pc, #388]	; (800b644 <ScheduleTx+0x2e4>)
 800b4c0:	238e      	movs	r3, #142	; 0x8e
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4c6:	22dc      	movs	r2, #220	; 0xdc
 800b4c8:	5c98      	ldrb	r0, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b4ca:	4a5e      	ldr	r2, [pc, #376]	; (800b644 <ScheduleTx+0x2e4>)
 800b4cc:	238e      	movs	r3, #142	; 0x8e
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4d2:	22d8      	movs	r2, #216	; 0xd8
 800b4d4:	589a      	ldr	r2, [r3, r2]
 800b4d6:	4b5e      	ldr	r3, [pc, #376]	; (800b650 <ScheduleTx+0x2f0>)
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	0013      	movs	r3, r2
 800b4dc:	0002      	movs	r2, r0
 800b4de:	0020      	movs	r0, r4
 800b4e0:	f003 fb0a 	bl	800eaf8 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4e4:	4a57      	ldr	r2, [pc, #348]	; (800b644 <ScheduleTx+0x2e4>)
 800b4e6:	238e      	movs	r3, #142	; 0x8e
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	58d3      	ldr	r3, [r2, r3]
 800b4ec:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800b4ee:	4a55      	ldr	r2, [pc, #340]	; (800b644 <ScheduleTx+0x2e4>)
 800b4f0:	238e      	movs	r3, #142	; 0x8e
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	58d3      	ldr	r3, [r2, r3]
 800b4f6:	22fc      	movs	r2, #252	; 0xfc
 800b4f8:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b4fa:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800b4fc:	4a51      	ldr	r2, [pc, #324]	; (800b644 <ScheduleTx+0x2e4>)
 800b4fe:	238e      	movs	r3, #142	; 0x8e
 800b500:	00db      	lsls	r3, r3, #3
 800b502:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b504:	22dc      	movs	r2, #220	; 0xdc
 800b506:	5c9c      	ldrb	r4, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800b508:	4a4e      	ldr	r2, [pc, #312]	; (800b644 <ScheduleTx+0x2e4>)
 800b50a:	238e      	movs	r3, #142	; 0x8e
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	58d3      	ldr	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800b510:	22d8      	movs	r2, #216	; 0xd8
 800b512:	589a      	ldr	r2, [r3, r2]
 800b514:	4b4f      	ldr	r3, [pc, #316]	; (800b654 <ScheduleTx+0x2f4>)
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	0013      	movs	r3, r2
 800b51a:	0022      	movs	r2, r4
 800b51c:	f003 faec 	bl	800eaf8 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b520:	4a48      	ldr	r2, [pc, #288]	; (800b644 <ScheduleTx+0x2e4>)
 800b522:	238e      	movs	r3, #142	; 0x8e
 800b524:	00db      	lsls	r3, r3, #3
 800b526:	58d2      	ldr	r2, [r2, r3]
 800b528:	2389      	movs	r3, #137	; 0x89
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	5cd3      	ldrb	r3, [r2, r3]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d11e      	bne.n	800b570 <ScheduleTx+0x210>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b532:	4a44      	ldr	r2, [pc, #272]	; (800b644 <ScheduleTx+0x2e4>)
 800b534:	238e      	movs	r3, #142	; 0x8e
 800b536:	00db      	lsls	r3, r3, #3
 800b538:	58d3      	ldr	r3, [r2, r3]
 800b53a:	22ec      	movs	r2, #236	; 0xec
 800b53c:	589b      	ldr	r3, [r3, r2]
 800b53e:	4941      	ldr	r1, [pc, #260]	; (800b644 <ScheduleTx+0x2e4>)
 800b540:	22f6      	movs	r2, #246	; 0xf6
 800b542:	0092      	lsls	r2, r2, #2
 800b544:	588a      	ldr	r2, [r1, r2]
 800b546:	1899      	adds	r1, r3, r2
 800b548:	4a3e      	ldr	r2, [pc, #248]	; (800b644 <ScheduleTx+0x2e4>)
 800b54a:	23f1      	movs	r3, #241	; 0xf1
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b550:	4a3c      	ldr	r2, [pc, #240]	; (800b644 <ScheduleTx+0x2e4>)
 800b552:	238e      	movs	r3, #142	; 0x8e
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	58d3      	ldr	r3, [r2, r3]
 800b558:	22f0      	movs	r2, #240	; 0xf0
 800b55a:	589b      	ldr	r3, [r3, r2]
 800b55c:	4939      	ldr	r1, [pc, #228]	; (800b644 <ScheduleTx+0x2e4>)
 800b55e:	22fb      	movs	r2, #251	; 0xfb
 800b560:	0092      	lsls	r2, r2, #2
 800b562:	588a      	ldr	r2, [r1, r2]
 800b564:	1899      	adds	r1, r3, r2
 800b566:	4a37      	ldr	r2, [pc, #220]	; (800b644 <ScheduleTx+0x2e4>)
 800b568:	23f2      	movs	r3, #242	; 0xf2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	50d1      	str	r1, [r2, r3]
 800b56e:	e03d      	b.n	800b5ec <ScheduleTx+0x28c>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b570:	2308      	movs	r3, #8
 800b572:	18fb      	adds	r3, r7, r3
 800b574:	0018      	movs	r0, r3
 800b576:	f000 fe85 	bl	800c284 <LoRaMacCommandsGetSizeSerializedCmds>
 800b57a:	1e03      	subs	r3, r0, #0
 800b57c:	d001      	beq.n	800b582 <ScheduleTx+0x222>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b57e:	2313      	movs	r3, #19
 800b580:	e05c      	b.n	800b63c <ScheduleTx+0x2dc>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800b582:	4b30      	ldr	r3, [pc, #192]	; (800b644 <ScheduleTx+0x2e4>)
 800b584:	4a34      	ldr	r2, [pc, #208]	; (800b658 <ScheduleTx+0x2f8>)
 800b586:	5c98      	ldrb	r0, [r3, r2]
 800b588:	4a2e      	ldr	r2, [pc, #184]	; (800b644 <ScheduleTx+0x2e4>)
 800b58a:	238e      	movs	r3, #142	; 0x8e
 800b58c:	00db      	lsls	r3, r3, #3
 800b58e:	58d3      	ldr	r3, [r2, r3]
 800b590:	22d5      	movs	r2, #213	; 0xd5
 800b592:	569b      	ldrsb	r3, [r3, r2]
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	b2d2      	uxtb	r2, r2
 800b598:	0019      	movs	r1, r3
 800b59a:	f7ff f8dd 	bl	800a758 <ValidatePayloadLength>
 800b59e:	0003      	movs	r3, r0
 800b5a0:	001a      	movs	r2, r3
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4053      	eors	r3, r2
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <ScheduleTx+0x250>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800b5ac:	2308      	movs	r3, #8
 800b5ae:	e045      	b.n	800b63c <ScheduleTx+0x2dc>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800b5b0:	4a24      	ldr	r2, [pc, #144]	; (800b644 <ScheduleTx+0x2e4>)
 800b5b2:	238e      	movs	r3, #142	; 0x8e
 800b5b4:	00db      	lsls	r3, r3, #3
 800b5b6:	58d3      	ldr	r3, [r2, r3]
 800b5b8:	22e4      	movs	r2, #228	; 0xe4
 800b5ba:	589b      	ldr	r3, [r3, r2]
 800b5bc:	4921      	ldr	r1, [pc, #132]	; (800b644 <ScheduleTx+0x2e4>)
 800b5be:	22f6      	movs	r2, #246	; 0xf6
 800b5c0:	0092      	lsls	r2, r2, #2
 800b5c2:	588a      	ldr	r2, [r1, r2]
 800b5c4:	1899      	adds	r1, r3, r2
 800b5c6:	4a1f      	ldr	r2, [pc, #124]	; (800b644 <ScheduleTx+0x2e4>)
 800b5c8:	23f1      	movs	r3, #241	; 0xf1
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800b5ce:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <ScheduleTx+0x2e4>)
 800b5d0:	238e      	movs	r3, #142	; 0x8e
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	58d3      	ldr	r3, [r2, r3]
 800b5d6:	22e8      	movs	r2, #232	; 0xe8
 800b5d8:	589b      	ldr	r3, [r3, r2]
 800b5da:	491a      	ldr	r1, [pc, #104]	; (800b644 <ScheduleTx+0x2e4>)
 800b5dc:	22fb      	movs	r2, #251	; 0xfb
 800b5de:	0092      	lsls	r2, r2, #2
 800b5e0:	588a      	ldr	r2, [r1, r2]
 800b5e2:	1899      	adds	r1, r3, r2
 800b5e4:	4a17      	ldr	r2, [pc, #92]	; (800b644 <ScheduleTx+0x2e4>)
 800b5e6:	23f2      	movs	r3, #242	; 0xf2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->Channel );
 800b5ec:	4a15      	ldr	r2, [pc, #84]	; (800b644 <ScheduleTx+0x2e4>)
 800b5ee:	238e      	movs	r3, #142	; 0x8e
 800b5f0:	00db      	lsls	r3, r3, #3
 800b5f2:	58d3      	ldr	r3, [r2, r3]
 800b5f4:	22d5      	movs	r2, #213	; 0xd5
 800b5f6:	569b      	ldrsb	r3, [r3, r2]
 800b5f8:	b2d8      	uxtb	r0, r3
 800b5fa:	4a12      	ldr	r2, [pc, #72]	; (800b644 <ScheduleTx+0x2e4>)
 800b5fc:	238e      	movs	r3, #142	; 0x8e
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	58d2      	ldr	r2, [r2, r3]
 800b602:	2314      	movs	r3, #20
 800b604:	33ff      	adds	r3, #255	; 0xff
 800b606:	5cd3      	ldrb	r3, [r2, r3]
 800b608:	251e      	movs	r5, #30
 800b60a:	197c      	adds	r4, r7, r5
 800b60c:	0019      	movs	r1, r3
 800b60e:	f000 f825 	bl	800b65c <SecureFrame>
 800b612:	0003      	movs	r3, r0
 800b614:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 800b616:	197b      	adds	r3, r7, r5
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d003      	beq.n	800b626 <ScheduleTx+0x2c6>
    {
        return retval;
 800b61e:	231e      	movs	r3, #30
 800b620:	18fb      	adds	r3, r7, r3
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	e00a      	b.n	800b63c <ScheduleTx+0x2dc>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.NvmCtx->Channel );
 800b626:	4a07      	ldr	r2, [pc, #28]	; (800b644 <ScheduleTx+0x2e4>)
 800b628:	238e      	movs	r3, #142	; 0x8e
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	58d2      	ldr	r2, [r2, r3]
 800b62e:	2314      	movs	r3, #20
 800b630:	33ff      	adds	r3, #255	; 0xff
 800b632:	5cd3      	ldrb	r3, [r2, r3]
 800b634:	0018      	movs	r0, r3
 800b636:	f000 f917 	bl	800b868 <SendFrameOnChannel>
 800b63a:	0003      	movs	r3, r0
}
 800b63c:	0018      	movs	r0, r3
 800b63e:	46bd      	mov	sp, r7
 800b640:	b009      	add	sp, #36	; 0x24
 800b642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b644:	20000494 	.word	0x20000494
 800b648:	200007d8 	.word	0x200007d8
 800b64c:	20000810 	.word	0x20000810
 800b650:	20000860 	.word	0x20000860
 800b654:	20000874 	.word	0x20000874
 800b658:	0000023f 	.word	0x0000023f

0800b65c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	0002      	movs	r2, r0
 800b664:	1dfb      	adds	r3, r7, #7
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	1dbb      	adds	r3, r7, #6
 800b66a:	1c0a      	adds	r2, r1, #0
 800b66c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800b66e:	230f      	movs	r3, #15
 800b670:	18fb      	adds	r3, r7, r3
 800b672:	2210      	movs	r2, #16
 800b674:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 800b676:	2300      	movs	r3, #0
 800b678:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800b67a:	4a25      	ldr	r2, [pc, #148]	; (800b710 <SecureFrame+0xb4>)
 800b67c:	2386      	movs	r3, #134	; 0x86
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	5cd3      	ldrb	r3, [r2, r3]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d002      	beq.n	800b68c <SecureFrame+0x30>
 800b686:	2b04      	cmp	r3, #4
 800b688:	d016      	beq.n	800b6b8 <SecureFrame+0x5c>
 800b68a:	e039      	b.n	800b700 <SecureFrame+0xa4>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800b68c:	250f      	movs	r5, #15
 800b68e:	197c      	adds	r4, r7, r5
 800b690:	4b20      	ldr	r3, [pc, #128]	; (800b714 <SecureFrame+0xb8>)
 800b692:	0018      	movs	r0, r3
 800b694:	f001 fec8 	bl	800d428 <LoRaMacCryptoPrepareJoinRequest>
 800b698:	0003      	movs	r3, r0
 800b69a:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b69c:	197b      	adds	r3, r7, r5
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b6a4:	2311      	movs	r3, #17
 800b6a6:	e02e      	b.n	800b706 <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800b6a8:	4a19      	ldr	r2, [pc, #100]	; (800b710 <SecureFrame+0xb4>)
 800b6aa:	238a      	movs	r3, #138	; 0x8a
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	5cd3      	ldrb	r3, [r2, r3]
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	4b17      	ldr	r3, [pc, #92]	; (800b710 <SecureFrame+0xb4>)
 800b6b4:	811a      	strh	r2, [r3, #8]
            break;
 800b6b6:	e025      	b.n	800b704 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800b6b8:	2308      	movs	r3, #8
 800b6ba:	18fb      	adds	r3, r7, r3
 800b6bc:	0018      	movs	r0, r3
 800b6be:	f002 fca5 	bl	800e00c <LoRaMacGetFCntUp>
 800b6c2:	1e03      	subs	r3, r0, #0
 800b6c4:	d001      	beq.n	800b6ca <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b6c6:	2312      	movs	r3, #18
 800b6c8:	e01d      	b.n	800b706 <SecureFrame+0xaa>
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800b6ca:	68b8      	ldr	r0, [r7, #8]
 800b6cc:	260f      	movs	r6, #15
 800b6ce:	19bc      	adds	r4, r7, r6
 800b6d0:	4d10      	ldr	r5, [pc, #64]	; (800b714 <SecureFrame+0xb8>)
 800b6d2:	1dbb      	adds	r3, r7, #6
 800b6d4:	781a      	ldrb	r2, [r3, #0]
 800b6d6:	1dfb      	adds	r3, r7, #7
 800b6d8:	7819      	ldrb	r1, [r3, #0]
 800b6da:	002b      	movs	r3, r5
 800b6dc:	f002 f992 	bl	800da04 <LoRaMacCryptoSecureMessage>
 800b6e0:	0003      	movs	r3, r0
 800b6e2:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800b6e4:	19bb      	adds	r3, r7, r6
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <SecureFrame+0x94>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800b6ec:	2311      	movs	r3, #17
 800b6ee:	e00a      	b.n	800b706 <SecureFrame+0xaa>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800b6f0:	4a07      	ldr	r2, [pc, #28]	; (800b710 <SecureFrame+0xb4>)
 800b6f2:	238a      	movs	r3, #138	; 0x8a
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	5cd3      	ldrb	r3, [r2, r3]
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	4b05      	ldr	r3, [pc, #20]	; (800b710 <SecureFrame+0xb4>)
 800b6fc:	811a      	strh	r2, [r3, #8]
            break;
 800b6fe:	e001      	b.n	800b704 <SecureFrame+0xa8>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800b700:	2303      	movs	r3, #3
 800b702:	e000      	b.n	800b706 <SecureFrame+0xaa>
    }
    return LORAMAC_STATUS_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	0018      	movs	r0, r3
 800b708:	46bd      	mov	sp, r7
 800b70a:	b005      	add	sp, #20
 800b70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b70e:	46c0      	nop			; (mov r8, r8)
 800b710:	20000494 	.word	0x20000494
 800b714:	200005a4 	.word	0x200005a4

0800b718 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800b718:	b590      	push	{r4, r7, lr}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	0002      	movs	r2, r0
 800b720:	1dfb      	adds	r3, r7, #7
 800b722:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b724:	4a31      	ldr	r2, [pc, #196]	; (800b7ec <CalculateBackOff+0xd4>)
 800b726:	238e      	movs	r3, #142	; 0x8e
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	58d2      	ldr	r2, [r2, r3]
 800b72c:	2389      	movs	r3, #137	; 0x89
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	5cd3      	ldrb	r3, [r2, r3]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d104      	bne.n	800b740 <CalculateBackOff+0x28>
    {
        calcBackOff.Joined = false;
 800b736:	230c      	movs	r3, #12
 800b738:	18fb      	adds	r3, r7, r3
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	e003      	b.n	800b748 <CalculateBackOff+0x30>
    }
    else
    {
        calcBackOff.Joined = true;
 800b740:	230c      	movs	r3, #12
 800b742:	18fb      	adds	r3, r7, r3
 800b744:	2201      	movs	r2, #1
 800b746:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800b748:	4a28      	ldr	r2, [pc, #160]	; (800b7ec <CalculateBackOff+0xd4>)
 800b74a:	238e      	movs	r3, #142	; 0x8e
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	58d2      	ldr	r2, [r2, r3]
 800b750:	2389      	movs	r3, #137	; 0x89
 800b752:	005b      	lsls	r3, r3, #1
 800b754:	5cd2      	ldrb	r2, [r2, r3]
 800b756:	240c      	movs	r4, #12
 800b758:	193b      	adds	r3, r7, r4
 800b75a:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 800b75c:	193b      	adds	r3, r7, r4
 800b75e:	1dfa      	adds	r2, r7, #7
 800b760:	7812      	ldrb	r2, [r2, #0]
 800b762:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.InitializationTime );
 800b764:	4a21      	ldr	r2, [pc, #132]	; (800b7ec <CalculateBackOff+0xd4>)
 800b766:	23d2      	movs	r3, #210	; 0xd2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	58d3      	ldr	r3, [r2, r3]
 800b76c:	0018      	movs	r0, r3
 800b76e:	f011 fa76 	bl	801cc5e <TimerGetElapsedTime>
 800b772:	0002      	movs	r2, r0
 800b774:	193b      	adds	r3, r7, r4
 800b776:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b778:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <CalculateBackOff+0xd4>)
 800b77a:	4a1d      	ldr	r2, [pc, #116]	; (800b7f0 <CalculateBackOff+0xd8>)
 800b77c:	589a      	ldr	r2, [r3, r2]
 800b77e:	193b      	adds	r3, r7, r4
 800b780:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 800b782:	193b      	adds	r3, r7, r4
 800b784:	2200      	movs	r2, #0
 800b786:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800b788:	4b18      	ldr	r3, [pc, #96]	; (800b7ec <CalculateBackOff+0xd4>)
 800b78a:	4a1a      	ldr	r2, [pc, #104]	; (800b7f4 <CalculateBackOff+0xdc>)
 800b78c:	5c9b      	ldrb	r3, [r3, r2]
 800b78e:	2204      	movs	r2, #4
 800b790:	4013      	ands	r3, r2
 800b792:	b2db      	uxtb	r3, r3
 800b794:	2b00      	cmp	r3, #0
 800b796:	d008      	beq.n	800b7aa <CalculateBackOff+0x92>
 800b798:	2000      	movs	r0, #0
 800b79a:	f000 fecb 	bl	800c534 <LoRaMacConfirmQueueIsCmdActive>
 800b79e:	1e03      	subs	r3, r0, #0
 800b7a0:	d003      	beq.n	800b7aa <CalculateBackOff+0x92>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 800b7a2:	230c      	movs	r3, #12
 800b7a4:	18fb      	adds	r3, r7, r3
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800b7aa:	4a10      	ldr	r2, [pc, #64]	; (800b7ec <CalculateBackOff+0xd4>)
 800b7ac:	238e      	movs	r3, #142	; 0x8e
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	58d3      	ldr	r3, [r2, r3]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	220c      	movs	r2, #12
 800b7b6:	18ba      	adds	r2, r7, r2
 800b7b8:	0011      	movs	r1, r2
 800b7ba:	0018      	movs	r0, r3
 800b7bc:	f003 fcd8 	bl	800f170 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b7c0:	4a0a      	ldr	r2, [pc, #40]	; (800b7ec <CalculateBackOff+0xd4>)
 800b7c2:	238e      	movs	r3, #142	; 0x8e
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	58d2      	ldr	r2, [r2, r3]
 800b7c8:	2387      	movs	r3, #135	; 0x87
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	5ad3      	ldrh	r3, [r2, r3]
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	4a06      	ldr	r2, [pc, #24]	; (800b7ec <CalculateBackOff+0xd4>)
 800b7d2:	4907      	ldr	r1, [pc, #28]	; (800b7f0 <CalculateBackOff+0xd8>)
 800b7d4:	5852      	ldr	r2, [r2, r1]
 800b7d6:	435a      	muls	r2, r3
 800b7d8:	0011      	movs	r1, r2
 800b7da:	4a04      	ldr	r2, [pc, #16]	; (800b7ec <CalculateBackOff+0xd4>)
 800b7dc:	23d1      	movs	r3, #209	; 0xd1
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	50d1      	str	r1, [r2, r3]
}
 800b7e2:	46c0      	nop			; (mov r8, r8)
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	b007      	add	sp, #28
 800b7e8:	bd90      	pop	{r4, r7, pc}
 800b7ea:	46c0      	nop			; (mov r8, r8)
 800b7ec:	20000494 	.word	0x20000494
 800b7f0:	0000040c 	.word	0x0000040c
 800b7f4:	0000046d 	.word	0x0000046d

0800b7f8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	1d3b      	adds	r3, r7, #4
 800b800:	7019      	strb	r1, [r3, #0]
 800b802:	0011      	movs	r1, r2
 800b804:	1dfb      	adds	r3, r7, #7
 800b806:	1c02      	adds	r2, r0, #0
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	1dbb      	adds	r3, r7, #6
 800b80c:	1c0a      	adds	r2, r1, #0
 800b80e:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800b810:	1dfb      	adds	r3, r7, #7
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d003      	beq.n	800b820 <RemoveMacCommands+0x28>
 800b818:	1dfb      	adds	r3, r7, #7
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d10f      	bne.n	800b840 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800b820:	1dbb      	adds	r3, r7, #6
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d109      	bne.n	800b83c <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 800b828:	1d3b      	adds	r3, r7, #4
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2220      	movs	r2, #32
 800b82e:	4013      	ands	r3, r2
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d004      	beq.n	800b840 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800b836:	f000 fce9 	bl	800c20c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800b83a:	e001      	b.n	800b840 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800b83c:	f000 fce6 	bl	800c20c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800b840:	46c0      	nop			; (mov r8, r8)
 800b842:	46bd      	mov	sp, r7
 800b844:	b002      	add	sp, #8
 800b846:	bd80      	pop	{r7, pc}

0800b848 <OpenContinuousRx2Window>:
    MacCtx.NvmCtx->Channel = 0;
    MacCtx.NvmCtx->LastTxChannel = MacCtx.NvmCtx->Channel;
}

static void OpenContinuousRx2Window( void )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( NULL );
 800b84c:	2000      	movs	r0, #0
 800b84e:	f7fe fe3f 	bl	800a4d0 <OnRxWindow2TimerEvent>
    MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b852:	4b03      	ldr	r3, [pc, #12]	; (800b860 <OpenContinuousRx2Window+0x18>)
 800b854:	4a03      	ldr	r2, [pc, #12]	; (800b864 <OpenContinuousRx2Window+0x1c>)
 800b856:	2102      	movs	r1, #2
 800b858:	5499      	strb	r1, [r3, r2]
}
 800b85a:	46c0      	nop			; (mov r8, r8)
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	20000494 	.word	0x20000494
 800b864:	0000046c 	.word	0x0000046c

0800b868 <SendFrameOnChannel>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b089      	sub	sp, #36	; 0x24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	0002      	movs	r2, r0
 800b870:	1dfb      	adds	r3, r7, #7
 800b872:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800b874:	230b      	movs	r3, #11
 800b876:	18fb      	adds	r3, r7, r3
 800b878:	2200      	movs	r2, #0
 800b87a:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 800b87c:	210c      	movs	r1, #12
 800b87e:	187b      	adds	r3, r7, r1
 800b880:	1dfa      	adds	r2, r7, #7
 800b882:	7812      	ldrb	r2, [r2, #0]
 800b884:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b886:	4a4f      	ldr	r2, [pc, #316]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b888:	238e      	movs	r3, #142	; 0x8e
 800b88a:	00db      	lsls	r3, r3, #3
 800b88c:	58d3      	ldr	r3, [r2, r3]
 800b88e:	22d5      	movs	r2, #213	; 0xd5
 800b890:	569a      	ldrsb	r2, [r3, r2]
 800b892:	187b      	adds	r3, r7, r1
 800b894:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b896:	4a4b      	ldr	r2, [pc, #300]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b898:	238e      	movs	r3, #142	; 0x8e
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	58d3      	ldr	r3, [r2, r3]
 800b89e:	22d4      	movs	r2, #212	; 0xd4
 800b8a0:	569a      	ldrsb	r2, [r3, r2]
 800b8a2:	187b      	adds	r3, r7, r1
 800b8a4:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800b8a6:	4a47      	ldr	r2, [pc, #284]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b8a8:	238e      	movs	r3, #142	; 0x8e
 800b8aa:	00db      	lsls	r3, r3, #3
 800b8ac:	58d2      	ldr	r2, [r2, r3]
 800b8ae:	2382      	movs	r3, #130	; 0x82
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	58d2      	ldr	r2, [r2, r3]
 800b8b4:	187b      	adds	r3, r7, r1
 800b8b6:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800b8b8:	4a42      	ldr	r2, [pc, #264]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b8ba:	238e      	movs	r3, #142	; 0x8e
 800b8bc:	00db      	lsls	r3, r3, #3
 800b8be:	58d2      	ldr	r2, [r2, r3]
 800b8c0:	2384      	movs	r3, #132	; 0x84
 800b8c2:	005b      	lsls	r3, r3, #1
 800b8c4:	58d2      	ldr	r2, [r2, r3]
 800b8c6:	187b      	adds	r3, r7, r1
 800b8c8:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800b8ca:	4b3e      	ldr	r3, [pc, #248]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b8cc:	891a      	ldrh	r2, [r3, #8]
 800b8ce:	187b      	adds	r3, r7, r1
 800b8d0:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b8d2:	f000 fa9d 	bl	800be10 <LoRaMacClassBIsBeaconExpected>
 800b8d6:	1e03      	subs	r3, r0, #0
 800b8d8:	d001      	beq.n	800b8de <SendFrameOnChannel+0x76>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800b8da:	230e      	movs	r3, #14
 800b8dc:	e06d      	b.n	800b9ba <SendFrameOnChannel+0x152>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800b8de:	4a39      	ldr	r2, [pc, #228]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b8e0:	238e      	movs	r3, #142	; 0x8e
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	58d3      	ldr	r3, [r2, r3]
 800b8e6:	22c8      	movs	r2, #200	; 0xc8
 800b8e8:	5c9b      	ldrb	r3, [r3, r2]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d10d      	bne.n	800b90a <SendFrameOnChannel+0xa2>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b8ee:	f000 fa95 	bl	800be1c <LoRaMacClassBIsPingExpected>
 800b8f2:	1e03      	subs	r3, r0, #0
 800b8f4:	d001      	beq.n	800b8fa <SendFrameOnChannel+0x92>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b8f6:	230f      	movs	r3, #15
 800b8f8:	e05f      	b.n	800b9ba <SendFrameOnChannel+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b8fa:	f000 fa95 	bl	800be28 <LoRaMacClassBIsMulticastExpected>
 800b8fe:	1e03      	subs	r3, r0, #0
 800b900:	d001      	beq.n	800b906 <SendFrameOnChannel+0x9e>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800b902:	230f      	movs	r3, #15
 800b904:	e059      	b.n	800b9ba <SendFrameOnChannel+0x152>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 800b906:	f000 fadb 	bl	800bec0 <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800b90a:	4a2e      	ldr	r2, [pc, #184]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b90c:	238e      	movs	r3, #142	; 0x8e
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	58d3      	ldr	r3, [r2, r3]
 800b912:	7818      	ldrb	r0, [r3, #0]
 800b914:	4b2c      	ldr	r3, [pc, #176]	; (800b9c8 <SendFrameOnChannel+0x160>)
 800b916:	240b      	movs	r4, #11
 800b918:	193a      	adds	r2, r7, r4
 800b91a:	210c      	movs	r1, #12
 800b91c:	1879      	adds	r1, r7, r1
 800b91e:	f003 f9e5 	bl	800ecec <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b922:	4b28      	ldr	r3, [pc, #160]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b924:	4a29      	ldr	r2, [pc, #164]	; (800b9cc <SendFrameOnChannel+0x164>)
 800b926:	2101      	movs	r1, #1
 800b928:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b92a:	4a26      	ldr	r2, [pc, #152]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b92c:	238e      	movs	r3, #142	; 0x8e
 800b92e:	00db      	lsls	r3, r3, #3
 800b930:	58d3      	ldr	r3, [r2, r3]
 800b932:	22d5      	movs	r2, #213	; 0xd5
 800b934:	569b      	ldrsb	r3, [r3, r2]
 800b936:	b2d9      	uxtb	r1, r3
 800b938:	4b22      	ldr	r3, [pc, #136]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b93a:	4a25      	ldr	r2, [pc, #148]	; (800b9d0 <SendFrameOnChannel+0x168>)
 800b93c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 800b93e:	193b      	adds	r3, r7, r4
 800b940:	2100      	movs	r1, #0
 800b942:	5659      	ldrsb	r1, [r3, r1]
 800b944:	4b1f      	ldr	r3, [pc, #124]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b946:	4a23      	ldr	r2, [pc, #140]	; (800b9d4 <SendFrameOnChannel+0x16c>)
 800b948:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 800b94a:	1dfb      	adds	r3, r7, #7
 800b94c:	781a      	ldrb	r2, [r3, #0]
 800b94e:	4b1d      	ldr	r3, [pc, #116]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b950:	4921      	ldr	r1, [pc, #132]	; (800b9d8 <SendFrameOnChannel+0x170>)
 800b952:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b954:	4b1b      	ldr	r3, [pc, #108]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b956:	4a21      	ldr	r2, [pc, #132]	; (800b9dc <SendFrameOnChannel+0x174>)
 800b958:	589a      	ldr	r2, [r3, r2]
 800b95a:	4b1a      	ldr	r3, [pc, #104]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b95c:	4920      	ldr	r1, [pc, #128]	; (800b9e0 <SendFrameOnChannel+0x178>)
 800b95e:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800b960:	4b18      	ldr	r3, [pc, #96]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b962:	4a1e      	ldr	r2, [pc, #120]	; (800b9dc <SendFrameOnChannel+0x174>)
 800b964:	589a      	ldr	r2, [r3, r2]
 800b966:	4b17      	ldr	r3, [pc, #92]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b968:	491e      	ldr	r1, [pc, #120]	; (800b9e4 <SendFrameOnChannel+0x17c>)
 800b96a:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800b96c:	f000 fa62 	bl	800be34 <LoRaMacClassBIsBeaconModeActive>
 800b970:	1e03      	subs	r3, r0, #0
 800b972:	d00c      	beq.n	800b98e <SendFrameOnChannel+0x126>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800b974:	4b13      	ldr	r3, [pc, #76]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b976:	4a19      	ldr	r2, [pc, #100]	; (800b9dc <SendFrameOnChannel+0x174>)
 800b978:	589b      	ldr	r3, [r3, r2]
 800b97a:	0018      	movs	r0, r3
 800b97c:	f000 fa97 	bl	800beae <LoRaMacClassBIsUplinkCollision>
 800b980:	0003      	movs	r3, r0
 800b982:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <SendFrameOnChannel+0x126>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800b98a:	2310      	movs	r3, #16
 800b98c:	e015      	b.n	800b9ba <SendFrameOnChannel+0x152>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 800b98e:	f000 fa57 	bl	800be40 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b992:	4a0c      	ldr	r2, [pc, #48]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b994:	23d5      	movs	r3, #213	; 0xd5
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	58d3      	ldr	r3, [r2, r3]
 800b99a:	2202      	movs	r2, #2
 800b99c:	431a      	orrs	r2, r3
 800b99e:	0011      	movs	r1, r2
 800b9a0:	4a08      	ldr	r2, [pc, #32]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b9a2:	23d5      	movs	r3, #213	; 0xd5
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	50d1      	str	r1, [r2, r3]

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800b9a8:	4b0f      	ldr	r3, [pc, #60]	; (800b9e8 <SendFrameOnChannel+0x180>)
 800b9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ac:	4a05      	ldr	r2, [pc, #20]	; (800b9c4 <SendFrameOnChannel+0x15c>)
 800b9ae:	8912      	ldrh	r2, [r2, #8]
 800b9b0:	b2d1      	uxtb	r1, r2
 800b9b2:	4a0e      	ldr	r2, [pc, #56]	; (800b9ec <SendFrameOnChannel+0x184>)
 800b9b4:	0010      	movs	r0, r2
 800b9b6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	0018      	movs	r0, r3
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	b009      	add	sp, #36	; 0x24
 800b9c0:	bd90      	pop	{r4, r7, pc}
 800b9c2:	46c0      	nop			; (mov r8, r8)
 800b9c4:	20000494 	.word	0x20000494
 800b9c8:	200008a0 	.word	0x200008a0
 800b9cc:	0000042d 	.word	0x0000042d
 800b9d0:	0000042e 	.word	0x0000042e
 800b9d4:	0000042f 	.word	0x0000042f
 800b9d8:	0000043c 	.word	0x0000043c
 800b9dc:	0000040c 	.word	0x0000040c
 800b9e0:	00000434 	.word	0x00000434
 800b9e4:	00000444 	.word	0x00000444
 800b9e8:	08028964 	.word	0x08028964
 800b9ec:	2000049e 	.word	0x2000049e

0800b9f0 <DetermineFrameType>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <DetermineFrameType+0x16>
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d101      	bne.n	800ba0a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ba06:	2303      	movs	r3, #3
 800ba08:	e03b      	b.n	800ba82 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	7b1b      	ldrb	r3, [r3, #12]
 800ba0e:	220f      	movs	r2, #15
 800ba10:	4013      	ands	r3, r2
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d008      	beq.n	800ba2a <DetermineFrameType+0x3a>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	5c9b      	ldrb	r3, [r3, r2]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	e02a      	b.n	800ba80 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2228      	movs	r2, #40	; 0x28
 800ba2e:	5c9b      	ldrb	r3, [r3, r2]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d103      	bne.n	800ba3c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2201      	movs	r2, #1
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	e021      	b.n	800ba80 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	7b1b      	ldrb	r3, [r3, #12]
 800ba40:	220f      	movs	r2, #15
 800ba42:	4013      	ands	r3, r2
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d108      	bne.n	800ba5c <DetermineFrameType+0x6c>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	5c9b      	ldrb	r3, [r3, r2]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d103      	bne.n	800ba5c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2202      	movs	r2, #2
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	e011      	b.n	800ba80 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	7b1b      	ldrb	r3, [r3, #12]
 800ba60:	220f      	movs	r2, #15
 800ba62:	4013      	ands	r3, r2
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d108      	bne.n	800ba7c <DetermineFrameType+0x8c>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2220      	movs	r2, #32
 800ba6e:	5c9b      	ldrb	r3, [r3, r2]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	2203      	movs	r2, #3
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	e001      	b.n	800ba80 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800ba7c:	2316      	movs	r3, #22
 800ba7e:	e000      	b.n	800ba82 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	0018      	movs	r0, r3
 800ba84:	46bd      	mov	sp, r7
 800ba86:	b002      	add	sp, #8
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800ba90:	4a16      	ldr	r2, [pc, #88]	; (800baec <CheckRetransUnconfirmedUplink+0x60>)
 800ba92:	238e      	movs	r3, #142	; 0x8e
 800ba94:	00db      	lsls	r3, r3, #3
 800ba96:	58d2      	ldr	r2, [r2, r3]
 800ba98:	2388      	movs	r3, #136	; 0x88
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800ba9e:	4913      	ldr	r1, [pc, #76]	; (800baec <CheckRetransUnconfirmedUplink+0x60>)
 800baa0:	238e      	movs	r3, #142	; 0x8e
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	58cb      	ldr	r3, [r1, r3]
 800baa6:	21f4      	movs	r1, #244	; 0xf4
 800baa8:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->ChannelsNbTransCounter >=
 800baaa:	429a      	cmp	r2, r3
 800baac:	d301      	bcc.n	800bab2 <CheckRetransUnconfirmedUplink+0x26>
    {
        return true;
 800baae:	2301      	movs	r3, #1
 800bab0:	e019      	b.n	800bae6 <CheckRetransUnconfirmedUplink+0x5a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800bab2:	4b0e      	ldr	r3, [pc, #56]	; (800baec <CheckRetransUnconfirmedUplink+0x60>)
 800bab4:	4a0e      	ldr	r2, [pc, #56]	; (800baf0 <CheckRetransUnconfirmedUplink+0x64>)
 800bab6:	5c9b      	ldrb	r3, [r3, r2]
 800bab8:	2202      	movs	r2, #2
 800baba:	4013      	ands	r3, r2
 800babc:	b2db      	uxtb	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d010      	beq.n	800bae4 <CheckRetransUnconfirmedUplink+0x58>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800bac2:	4a0a      	ldr	r2, [pc, #40]	; (800baec <CheckRetransUnconfirmedUplink+0x60>)
 800bac4:	238e      	movs	r3, #142	; 0x8e
 800bac6:	00db      	lsls	r3, r3, #3
 800bac8:	58d3      	ldr	r3, [r2, r3]
 800baca:	22c8      	movs	r2, #200	; 0xc8
 800bacc:	5c9b      	ldrb	r3, [r3, r2]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e007      	b.n	800bae6 <CheckRetransUnconfirmedUplink+0x5a>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800bad6:	4b05      	ldr	r3, [pc, #20]	; (800baec <CheckRetransUnconfirmedUplink+0x60>)
 800bad8:	4a06      	ldr	r2, [pc, #24]	; (800baf4 <CheckRetransUnconfirmedUplink+0x68>)
 800bada:	5c9b      	ldrb	r3, [r3, r2]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <CheckRetransUnconfirmedUplink+0x58>
            {
                return true;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e000      	b.n	800bae6 <CheckRetransUnconfirmedUplink+0x5a>
            }
        }
    }
    return false;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	0018      	movs	r0, r3
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20000494 	.word	0x20000494
 800baf0:	0000046d 	.word	0x0000046d
 800baf4:	0000046c 	.word	0x0000046c

0800baf8 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800bafc:	4a11      	ldr	r2, [pc, #68]	; (800bb44 <CheckRetransConfirmedUplink+0x4c>)
 800bafe:	238e      	movs	r3, #142	; 0x8e
 800bb00:	00db      	lsls	r3, r3, #3
 800bb02:	58d3      	ldr	r3, [r2, r3]
 800bb04:	4a10      	ldr	r2, [pc, #64]	; (800bb48 <CheckRetransConfirmedUplink+0x50>)
 800bb06:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.NvmCtx->AckTimeoutRetries )
 800bb08:	490e      	ldr	r1, [pc, #56]	; (800bb44 <CheckRetransConfirmedUplink+0x4c>)
 800bb0a:	238e      	movs	r3, #142	; 0x8e
 800bb0c:	00db      	lsls	r3, r3, #3
 800bb0e:	58cb      	ldr	r3, [r1, r3]
 800bb10:	490e      	ldr	r1, [pc, #56]	; (800bb4c <CheckRetransConfirmedUplink+0x54>)
 800bb12:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.NvmCtx->AckTimeoutRetriesCounter >=
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d301      	bcc.n	800bb1c <CheckRetransConfirmedUplink+0x24>
    {
        return true;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e010      	b.n	800bb3e <CheckRetransConfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800bb1c:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <CheckRetransConfirmedUplink+0x4c>)
 800bb1e:	4a0c      	ldr	r2, [pc, #48]	; (800bb50 <CheckRetransConfirmedUplink+0x58>)
 800bb20:	5c9b      	ldrb	r3, [r3, r2]
 800bb22:	2202      	movs	r2, #2
 800bb24:	4013      	ands	r3, r2
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d007      	beq.n	800bb3c <CheckRetransConfirmedUplink+0x44>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800bb2c:	4a05      	ldr	r2, [pc, #20]	; (800bb44 <CheckRetransConfirmedUplink+0x4c>)
 800bb2e:	2386      	movs	r3, #134	; 0x86
 800bb30:	00db      	lsls	r3, r3, #3
 800bb32:	5cd3      	ldrb	r3, [r2, r3]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <CheckRetransConfirmedUplink+0x44>
        {
            return true;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e000      	b.n	800bb3e <CheckRetransConfirmedUplink+0x46>
        }
    }
    return false;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	0018      	movs	r0, r3
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	20000494 	.word	0x20000494
 800bb48:	00000217 	.word	0x00000217
 800bb4c:	00000216 	.word	0x00000216
 800bb50:	0000046d 	.word	0x0000046d

0800bb54 <StopRetransmission>:


static bool StopRetransmission( void )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
    // Increase the current value by 1
    uint32_t fCntUp = 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	607b      	str	r3, [r7, #4]
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacGetFCntUp( &fCntUp ) )
 800bb5e:	1d3b      	adds	r3, r7, #4
 800bb60:	0018      	movs	r0, r3
 800bb62:	f002 fa53 	bl	800e00c <LoRaMacGetFCntUp>
 800bb66:	1e03      	subs	r3, r0, #0
 800bb68:	d001      	beq.n	800bb6e <StopRetransmission+0x1a>
    {
        return false;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	e043      	b.n	800bbf6 <StopRetransmission+0xa2>
    }
    if( LORAMAC_FCNT_HANDLER_SUCCESS != LoRaMacSetFCntUp( ( fCntUp ) ) )
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	0018      	movs	r0, r3
 800bb72:	f002 fa61 	bl	800e038 <LoRaMacSetFCntUp>
 800bb76:	1e03      	subs	r3, r0, #0
 800bb78:	d001      	beq.n	800bb7e <StopRetransmission+0x2a>
    {
        return false;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	e03b      	b.n	800bbf6 <StopRetransmission+0xa2>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 0 )
 800bb7e:	4b20      	ldr	r3, [pc, #128]	; (800bc00 <StopRetransmission+0xac>)
 800bb80:	4a20      	ldr	r2, [pc, #128]	; (800bc04 <StopRetransmission+0xb0>)
 800bb82:	5c9b      	ldrb	r3, [r3, r2]
 800bb84:	2202      	movs	r2, #2
 800bb86:	4013      	ands	r3, r2
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d110      	bne.n	800bbb0 <StopRetransmission+0x5c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800bb8e:	4a1c      	ldr	r2, [pc, #112]	; (800bc00 <StopRetransmission+0xac>)
 800bb90:	238e      	movs	r3, #142	; 0x8e
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	58d3      	ldr	r3, [r2, r3]
 800bb96:	22ca      	movs	r2, #202	; 0xca
 800bb98:	5c9b      	ldrb	r3, [r3, r2]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d008      	beq.n	800bbb0 <StopRetransmission+0x5c>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 800bb9e:	4a18      	ldr	r2, [pc, #96]	; (800bc00 <StopRetransmission+0xac>)
 800bba0:	238e      	movs	r3, #142	; 0x8e
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	58d3      	ldr	r3, [r2, r3]
 800bba6:	22cc      	movs	r2, #204	; 0xcc
 800bba8:	589a      	ldr	r2, [r3, r2]
 800bbaa:	3201      	adds	r2, #1
 800bbac:	21cc      	movs	r1, #204	; 0xcc
 800bbae:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.NvmCtx->ChannelsNbTransCounter = 0;
 800bbb0:	4a13      	ldr	r2, [pc, #76]	; (800bc00 <StopRetransmission+0xac>)
 800bbb2:	238e      	movs	r3, #142	; 0x8e
 800bbb4:	00db      	lsls	r3, r3, #3
 800bbb6:	58d2      	ldr	r2, [r2, r3]
 800bbb8:	2388      	movs	r3, #136	; 0x88
 800bbba:	005b      	lsls	r3, r3, #1
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->NodeAckRequested = false;
 800bbc0:	4a0f      	ldr	r2, [pc, #60]	; (800bc00 <StopRetransmission+0xac>)
 800bbc2:	238e      	movs	r3, #142	; 0x8e
 800bbc4:	00db      	lsls	r3, r3, #3
 800bbc6:	58d3      	ldr	r3, [r2, r3]
 800bbc8:	4a0f      	ldr	r2, [pc, #60]	; (800bc08 <StopRetransmission+0xb4>)
 800bbca:	2100      	movs	r1, #0
 800bbcc:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AckTimeoutRetry = false;
 800bbce:	4a0c      	ldr	r2, [pc, #48]	; (800bc00 <StopRetransmission+0xac>)
 800bbd0:	238e      	movs	r3, #142	; 0x8e
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	58d2      	ldr	r2, [r2, r3]
 800bbd6:	2386      	movs	r3, #134	; 0x86
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	2100      	movs	r1, #0
 800bbdc:	54d1      	strb	r1, [r2, r3]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bbde:	4a08      	ldr	r2, [pc, #32]	; (800bc00 <StopRetransmission+0xac>)
 800bbe0:	23d5      	movs	r3, #213	; 0xd5
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	58d3      	ldr	r3, [r2, r3]
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	4393      	bics	r3, r2
 800bbea:	0019      	movs	r1, r3
 800bbec:	4a04      	ldr	r2, [pc, #16]	; (800bc00 <StopRetransmission+0xac>)
 800bbee:	23d5      	movs	r3, #213	; 0xd5
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	50d1      	str	r1, [r2, r3]

    return true;
 800bbf4:	2301      	movs	r3, #1
}
 800bbf6:	0018      	movs	r0, r3
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	b002      	add	sp, #8
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	46c0      	nop			; (mov r8, r8)
 800bc00:	20000494 	.word	0x20000494
 800bc04:	0000046d 	.word	0x0000046d
 800bc08:	00000219 	.word	0x00000219

0800bc0c <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
    if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter < MacCtx.NvmCtx->AckTimeoutRetries ) && ( MacCtx.NvmCtx->AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) )
 800bc12:	4a2d      	ldr	r2, [pc, #180]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bc14:	238e      	movs	r3, #142	; 0x8e
 800bc16:	00db      	lsls	r3, r3, #3
 800bc18:	58d3      	ldr	r3, [r2, r3]
 800bc1a:	4a2c      	ldr	r2, [pc, #176]	; (800bccc <AckTimeoutRetriesProcess+0xc0>)
 800bc1c:	5c9a      	ldrb	r2, [r3, r2]
 800bc1e:	492a      	ldr	r1, [pc, #168]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bc20:	238e      	movs	r3, #142	; 0x8e
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	58cb      	ldr	r3, [r1, r3]
 800bc26:	492a      	ldr	r1, [pc, #168]	; (800bcd0 <AckTimeoutRetriesProcess+0xc4>)
 800bc28:	5c5b      	ldrb	r3, [r3, r1]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d247      	bcs.n	800bcbe <AckTimeoutRetriesProcess+0xb2>
 800bc2e:	4a26      	ldr	r2, [pc, #152]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bc30:	238e      	movs	r3, #142	; 0x8e
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	58d3      	ldr	r3, [r2, r3]
 800bc36:	4a25      	ldr	r2, [pc, #148]	; (800bccc <AckTimeoutRetriesProcess+0xc0>)
 800bc38:	5c9b      	ldrb	r3, [r3, r2]
 800bc3a:	2b08      	cmp	r3, #8
 800bc3c:	d83f      	bhi.n	800bcbe <AckTimeoutRetriesProcess+0xb2>
    {
        MacCtx.NvmCtx->AckTimeoutRetriesCounter++;
 800bc3e:	4a22      	ldr	r2, [pc, #136]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bc40:	238e      	movs	r3, #142	; 0x8e
 800bc42:	00db      	lsls	r3, r3, #3
 800bc44:	58d3      	ldr	r3, [r2, r3]
 800bc46:	4a21      	ldr	r2, [pc, #132]	; (800bccc <AckTimeoutRetriesProcess+0xc0>)
 800bc48:	5c9a      	ldrb	r2, [r3, r2]
 800bc4a:	3201      	adds	r2, #1
 800bc4c:	b2d1      	uxtb	r1, r2
 800bc4e:	4a1f      	ldr	r2, [pc, #124]	; (800bccc <AckTimeoutRetriesProcess+0xc0>)
 800bc50:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.NvmCtx->AckTimeoutRetriesCounter % 2 ) == 1 )
 800bc52:	4a1d      	ldr	r2, [pc, #116]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bc54:	238e      	movs	r3, #142	; 0x8e
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	58d3      	ldr	r3, [r2, r3]
 800bc5a:	4a1c      	ldr	r2, [pc, #112]	; (800bccc <AckTimeoutRetriesProcess+0xc0>)
 800bc5c:	5c9b      	ldrb	r3, [r3, r2]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	4013      	ands	r3, r2
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d02a      	beq.n	800bcbe <AckTimeoutRetriesProcess+0xb2>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800bc68:	1d3b      	adds	r3, r7, #4
 800bc6a:	2221      	movs	r2, #33	; 0x21
 800bc6c:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bc6e:	4a16      	ldr	r2, [pc, #88]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bc70:	238e      	movs	r3, #142	; 0x8e
 800bc72:	00db      	lsls	r3, r3, #3
 800bc74:	58d2      	ldr	r2, [r2, r3]
 800bc76:	2380      	movs	r3, #128	; 0x80
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	5cd2      	ldrb	r2, [r2, r3]
 800bc7c:	1d3b      	adds	r3, r7, #4
 800bc7e:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bc80:	4a11      	ldr	r2, [pc, #68]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bc82:	238e      	movs	r3, #142	; 0x8e
 800bc84:	00db      	lsls	r3, r3, #3
 800bc86:	58d3      	ldr	r3, [r2, r3]
 800bc88:	22d5      	movs	r2, #213	; 0xd5
 800bc8a:	569a      	ldrsb	r2, [r3, r2]
 800bc8c:	1d3b      	adds	r3, r7, #4
 800bc8e:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800bc90:	4a0d      	ldr	r2, [pc, #52]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bc92:	238e      	movs	r3, #142	; 0x8e
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	58d3      	ldr	r3, [r2, r3]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	1d3a      	adds	r2, r7, #4
 800bc9c:	0011      	movs	r1, r2
 800bc9e:	0018      	movs	r0, r3
 800bca0:	f002 fdc4 	bl	800e82c <RegionGetPhyParam>
 800bca4:	0003      	movs	r3, r0
 800bca6:	001a      	movs	r2, r3
 800bca8:	003b      	movs	r3, r7
 800bcaa:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800bcac:	003b      	movs	r3, r7
 800bcae:	6819      	ldr	r1, [r3, #0]
 800bcb0:	4a05      	ldr	r2, [pc, #20]	; (800bcc8 <AckTimeoutRetriesProcess+0xbc>)
 800bcb2:	238e      	movs	r3, #142	; 0x8e
 800bcb4:	00db      	lsls	r3, r3, #3
 800bcb6:	58d3      	ldr	r3, [r2, r3]
 800bcb8:	b249      	sxtb	r1, r1
 800bcba:	22d5      	movs	r2, #213	; 0xd5
 800bcbc:	5499      	strb	r1, [r3, r2]
        }
    }
}
 800bcbe:	46c0      	nop			; (mov r8, r8)
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	b002      	add	sp, #8
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	46c0      	nop			; (mov r8, r8)
 800bcc8:	20000494 	.word	0x20000494
 800bccc:	00000217 	.word	0x00000217
 800bcd0:	00000216 	.word	0x00000216

0800bcd4 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800bcda:	4a19      	ldr	r2, [pc, #100]	; (800bd40 <AckTimeoutRetriesFinalize+0x6c>)
 800bcdc:	2386      	movs	r3, #134	; 0x86
 800bcde:	00db      	lsls	r3, r3, #3
 800bce0:	5cd3      	ldrb	r3, [r2, r3]
 800bce2:	2201      	movs	r2, #1
 800bce4:	4053      	eors	r3, r2
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d01c      	beq.n	800bd26 <AckTimeoutRetriesFinalize+0x52>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800bcec:	003b      	movs	r3, r7
 800bcee:	2201      	movs	r2, #1
 800bcf0:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800bcf2:	4b14      	ldr	r3, [pc, #80]	; (800bd44 <AckTimeoutRetriesFinalize+0x70>)
 800bcf4:	689a      	ldr	r2, [r3, #8]
 800bcf6:	003b      	movs	r3, r7
 800bcf8:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800bcfa:	4a11      	ldr	r2, [pc, #68]	; (800bd40 <AckTimeoutRetriesFinalize+0x6c>)
 800bcfc:	238e      	movs	r3, #142	; 0x8e
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	58d3      	ldr	r3, [r2, r3]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	003a      	movs	r2, r7
 800bd06:	0011      	movs	r1, r2
 800bd08:	0018      	movs	r0, r3
 800bd0a:	f002 fe61 	bl	800e9d0 <RegionInitDefaults>

        MacCtx.NvmCtx->NodeAckRequested = false;
 800bd0e:	4a0c      	ldr	r2, [pc, #48]	; (800bd40 <AckTimeoutRetriesFinalize+0x6c>)
 800bd10:	238e      	movs	r3, #142	; 0x8e
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	58d3      	ldr	r3, [r2, r3]
 800bd16:	4a0c      	ldr	r2, [pc, #48]	; (800bd48 <AckTimeoutRetriesFinalize+0x74>)
 800bd18:	2100      	movs	r1, #0
 800bd1a:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 800bd1c:	4a08      	ldr	r2, [pc, #32]	; (800bd40 <AckTimeoutRetriesFinalize+0x6c>)
 800bd1e:	2386      	movs	r3, #134	; 0x86
 800bd20:	00db      	lsls	r3, r3, #3
 800bd22:	2100      	movs	r1, #0
 800bd24:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.NvmCtx->AckTimeoutRetriesCounter;
 800bd26:	4a06      	ldr	r2, [pc, #24]	; (800bd40 <AckTimeoutRetriesFinalize+0x6c>)
 800bd28:	238e      	movs	r3, #142	; 0x8e
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	58d3      	ldr	r3, [r2, r3]
 800bd2e:	4a07      	ldr	r2, [pc, #28]	; (800bd4c <AckTimeoutRetriesFinalize+0x78>)
 800bd30:	5c99      	ldrb	r1, [r3, r2]
 800bd32:	4b03      	ldr	r3, [pc, #12]	; (800bd40 <AckTimeoutRetriesFinalize+0x6c>)
 800bd34:	4a06      	ldr	r2, [pc, #24]	; (800bd50 <AckTimeoutRetriesFinalize+0x7c>)
 800bd36:	5499      	strb	r1, [r3, r2]
}
 800bd38:	46c0      	nop			; (mov r8, r8)
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	b002      	add	sp, #8
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	20000494 	.word	0x20000494
 800bd44:	200020e0 	.word	0x200020e0
 800bd48:	00000219 	.word	0x00000219
 800bd4c:	00000217 	.word	0x00000217
 800bd50:	00000431 	.word	0x00000431

0800bd54 <IsRequestPending>:
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_FCNT_HANDLER );
}

static uint8_t IsRequestPending( void )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800bd58:	4b0a      	ldr	r3, [pc, #40]	; (800bd84 <IsRequestPending+0x30>)
 800bd5a:	4a0b      	ldr	r2, [pc, #44]	; (800bd88 <IsRequestPending+0x34>)
 800bd5c:	5c9b      	ldrb	r3, [r3, r2]
 800bd5e:	2204      	movs	r2, #4
 800bd60:	4013      	ands	r3, r2
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d107      	bne.n	800bd78 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800bd68:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <IsRequestPending+0x30>)
 800bd6a:	4a07      	ldr	r2, [pc, #28]	; (800bd88 <IsRequestPending+0x34>)
 800bd6c:	5c9b      	ldrb	r3, [r3, r2]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	4013      	ands	r3, r2
 800bd72:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <IsRequestPending+0x28>
    {
        return 1;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e000      	b.n	800bd7e <IsRequestPending+0x2a>
    }
    return 0;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	0018      	movs	r0, r3
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20000494 	.word	0x20000494
 800bd88:	0000046d 	.word	0x0000046d

0800bd8c <LoRaMacClassBSetBeaconState>:
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	0002      	movs	r2, r0
 800bd94:	1dfb      	adds	r3, r7, #7
 800bd96:	701a      	strb	r2, [r3, #0]
    }

    NvmContextChange( );

#endif // LORAMAC_CLASSB_ENABLED
}
 800bd98:	46c0      	nop			; (mov r8, r8)
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	b002      	add	sp, #8
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	0002      	movs	r2, r0
 800bda8:	1dfb      	adds	r3, r7, #7
 800bdaa:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotState = pingSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bdac:	46c0      	nop			; (mov r8, r8)
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	b002      	add	sp, #8
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	0002      	movs	r2, r0
 800bdbc:	1dfb      	adds	r3, r7, #7
 800bdbe:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->MulticastSlotState = multicastSlotState;
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bdc0:	46c0      	nop			; (mov r8, r8)
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	b002      	add	sp, #8
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <LoRaMacClassBBeaconTimerEvent>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bdd0:	46c0      	nop			; (mov r8, r8)
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	b002      	add	sp, #8
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <LoRaMacClassBPingSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bde0:	46c0      	nop			; (mov r8, r8)
 800bde2:	46bd      	mov	sp, r7
 800bde4:	b002      	add	sp, #8
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <LoRaMacClassBMulticastSlotTimerEvent>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bdf0:	46c0      	nop			; (mov r8, r8)
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	b002      	add	sp, #8
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <LoRaMacClassBRxBeacon>:
    NvmContextChange( );
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	000a      	movs	r2, r1
 800be02:	1cbb      	adds	r3, r7, #2
 800be04:	801a      	strh	r2, [r3, #0]

    NvmContextChange( );

    return beaconProcessed;
#else
    return false;
 800be06:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be08:	0018      	movs	r0, r3
 800be0a:	46bd      	mov	sp, r7
 800be0c:	b002      	add	sp, #8
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800be14:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be16:	0018      	movs	r0, r3
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800be20:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be22:	0018      	movs	r0, r3
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800be2c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be2e:	0018      	movs	r0, r3
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800be38:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be3a:	0018      	movs	r0, r3
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <LoRaMacClassBHaltBeaconing>:
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBHaltBeaconing( void )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	af00      	add	r7, sp, #0
        LoRaMacClassBStopRxSlots( );

        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800be44:	46c0      	nop			; (mov r8, r8)
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	af00      	add	r7, sp, #0

        LoRaMacClassBBeaconTimerEvent( NULL );
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800be4e:	46c0      	nop			; (mov r8, r8)
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <LoRaMacClassBPingSlotInfoAns>:
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBPingSlotInfoAns( void )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800be58:	46c0      	nop			; (mov r8, r8)
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b082      	sub	sp, #8
 800be62:	af00      	add	r7, sp, #0
 800be64:	0002      	movs	r2, r0
 800be66:	6039      	str	r1, [r7, #0]
 800be68:	1dfb      	adds	r3, r7, #7
 800be6a:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 800be6c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800be6e:	0018      	movs	r0, r3
 800be70:	46bd      	mov	sp, r7
 800be72:	b002      	add	sp, #8
 800be74:	bd80      	pop	{r7, pc}

0800be76 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	603a      	str	r2, [r7, #0]
 800be7e:	1dbb      	adds	r3, r7, #6
 800be80:	1c02      	adds	r2, r0, #0
 800be82:	801a      	strh	r2, [r3, #0]
 800be84:	1d7b      	adds	r3, r7, #5
 800be86:	1c0a      	adds	r2, r1, #0
 800be88:	701a      	strb	r2, [r3, #0]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.NvmCtx->BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.NvmCtx->BeaconCtx.BeaconTimingChannel;
    }
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800be8a:	46c0      	nop			; (mov r8, r8)
 800be8c:	46bd      	mov	sp, r7
 800be8e:	b002      	add	sp, #8
 800be90:	bd80      	pop	{r7, pc}

0800be92 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800be92:	b580      	push	{r7, lr}
 800be94:	af00      	add	r7, sp, #0
        }
    }

    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800be96:	46c0      	nop			; (mov r8, r8)
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
        return true;
    }
    NvmContextChange( );
    return false;
#else
    return false;
 800bea4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800bea6:	0018      	movs	r0, r3
 800bea8:	46bd      	mov	sp, r7
 800beaa:	b002      	add	sp, #8
 800beac:	bd80      	pop	{r7, pc}

0800beae <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800beb6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b002      	add	sp, #8
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800bec4:	46c0      	nop			; (mov r8, r8)
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 800beca:	b580      	push	{r7, lr}
 800becc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800bece:	46c0      	nop			; (mov r8, r8)
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <isSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
bool isSlotFree( const MacCommand_t* slot )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
    uint8_t* mem = (uint8_t*) slot;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800bee0:	230e      	movs	r3, #14
 800bee2:	18fb      	adds	r3, r7, r3
 800bee4:	2200      	movs	r2, #0
 800bee6:	801a      	strh	r2, [r3, #0]
 800bee8:	e00f      	b.n	800bf0a <isSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 800beea:	230e      	movs	r3, #14
 800beec:	18fb      	adds	r3, r7, r3
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	18d3      	adds	r3, r2, r3
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <isSlotFree+0x2a>
        {
            return false;
 800befa:	2300      	movs	r3, #0
 800befc:	e00b      	b.n	800bf16 <isSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800befe:	210e      	movs	r1, #14
 800bf00:	187b      	adds	r3, r7, r1
 800bf02:	881a      	ldrh	r2, [r3, #0]
 800bf04:	187b      	adds	r3, r7, r1
 800bf06:	3201      	adds	r2, #1
 800bf08:	801a      	strh	r2, [r3, #0]
 800bf0a:	230e      	movs	r3, #14
 800bf0c:	18fb      	adds	r3, r7, r3
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	2b0f      	cmp	r3, #15
 800bf12:	d9ea      	bls.n	800beea <isSlotFree+0x16>
        }
    }
    return true;
 800bf14:	2301      	movs	r3, #1
}
 800bf16:	0018      	movs	r0, r3
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	b004      	add	sp, #16
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <mallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
MacCommand_t* mallocNewMacCommandSlot( )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800bf26:	1dfb      	adds	r3, r7, #7
 800bf28:	2200      	movs	r2, #0
 800bf2a:	701a      	strb	r2, [r3, #0]

    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800bf2c:	e00a      	b.n	800bf44 <mallocNewMacCommandSlot+0x24>
    {
        itr++;
 800bf2e:	1dfb      	adds	r3, r7, #7
 800bf30:	781a      	ldrb	r2, [r3, #0]
 800bf32:	1dfb      	adds	r3, r7, #7
 800bf34:	3201      	adds	r2, #1
 800bf36:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 800bf38:	1dfb      	adds	r3, r7, #7
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b0f      	cmp	r3, #15
 800bf3e:	d101      	bne.n	800bf44 <mallocNewMacCommandSlot+0x24>
        {
            return 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e017      	b.n	800bf74 <mallocNewMacCommandSlot+0x54>
    while( isSlotFree( ( const MacCommand_t* ) &NvmCtx.MacCommandSlots[itr]) == false )
 800bf44:	1dfb      	adds	r3, r7, #7
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	011b      	lsls	r3, r3, #4
 800bf4a:	3308      	adds	r3, #8
 800bf4c:	001a      	movs	r2, r3
 800bf4e:	4b0b      	ldr	r3, [pc, #44]	; (800bf7c <mallocNewMacCommandSlot+0x5c>)
 800bf50:	18d3      	adds	r3, r2, r3
 800bf52:	0018      	movs	r0, r3
 800bf54:	f7ff ffbe 	bl	800bed4 <isSlotFree>
 800bf58:	0003      	movs	r3, r0
 800bf5a:	001a      	movs	r2, r3
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	4053      	eors	r3, r2
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1e3      	bne.n	800bf2e <mallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 800bf66:	1dfb      	adds	r3, r7, #7
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	011b      	lsls	r3, r3, #4
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	001a      	movs	r2, r3
 800bf70:	4b02      	ldr	r3, [pc, #8]	; (800bf7c <mallocNewMacCommandSlot+0x5c>)
 800bf72:	18d3      	adds	r3, r2, r3
}
 800bf74:	0018      	movs	r0, r3
 800bf76:	46bd      	mov	sp, r7
 800bf78:	b002      	add	sp, #8
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	20000910 	.word	0x20000910

0800bf80 <freeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
bool freeMacCommandSlot( MacCommand_t* slot )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d101      	bne.n	800bf92 <freeMacCommandSlot+0x12>
    {
        return false;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e006      	b.n	800bfa0 <freeMacCommandSlot+0x20>
    }

    memset1( (uint8_t*) slot, 0x00, sizeof( MacCommand_t ));
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2210      	movs	r2, #16
 800bf96:	2100      	movs	r1, #0
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f010 fedb 	bl	801cd54 <memset1>

    return true;
 800bf9e:	2301      	movs	r3, #1
}
 800bfa0:	0018      	movs	r0, r3
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	b002      	add	sp, #8
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <linkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool linkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <linkedListAdd+0x1a>
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <linkedListAdd+0x1a>
    {
        return false;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	e015      	b.n	800bfee <linkedListAdd+0x46>
    }

    /* Check if this is the first entry to enter the list. */
    if( list->First == 0 )
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d102      	bne.n	800bfd0 <linkedListAdd+0x28>
    {
        list->First = element;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	601a      	str	r2, [r3, #0]
    }

    /* Check if the last entry exists and update its next point. */
    if( list->Last )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d003      	beq.n	800bfe0 <linkedListAdd+0x38>
    {
        list->Last->Next = element;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	601a      	str	r2, [r3, #0]
    }

    /* Update the next point of this entry. */
    element->Next = 0;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]

    /* Update the last entry of the list. */
    list->Last = element;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	605a      	str	r2, [r3, #4]

    return true;
 800bfec:	2301      	movs	r3, #1
}
 800bfee:	0018      	movs	r0, r3
 800bff0:	46bd      	mov	sp, r7
 800bff2:	b002      	add	sp, #8
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <linkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* linkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d104      	bne.n	800c010 <linkedListGetPrevious+0x1a>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d101      	bne.n	800c010 <linkedListGetPrevious+0x1a>
    {
        return NULL;
 800c00c:	2300      	movs	r3, #0
 800c00e:	e016      	b.n	800c03e <linkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	60fb      	str	r3, [r7, #12]

    /*
     * When current element is the first of the list, there's no previous element so we can return NULL immediately.
     */
    if( element != curElement)
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d00c      	beq.n	800c038 <linkedListGetPrevious+0x42>
    {

        // Loop through all elements until the end is reached or the next of current is the current element.
        while(curElement && (curElement->Next != element))
 800c01e:	e002      	b.n	800c026 <linkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	60fb      	str	r3, [r7, #12]
        while(curElement && (curElement->Next != element))
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d007      	beq.n	800c03c <linkedListGetPrevious+0x46>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	683a      	ldr	r2, [r7, #0]
 800c032:	429a      	cmp	r2, r3
 800c034:	d1f4      	bne.n	800c020 <linkedListGetPrevious+0x2a>
 800c036:	e001      	b.n	800c03c <linkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800c03c:	68fb      	ldr	r3, [r7, #12]
}
 800c03e:	0018      	movs	r0, r3
 800c040:	46bd      	mov	sp, r7
 800c042:	b004      	add	sp, #16
 800c044:	bd80      	pop	{r7, pc}

0800c046 <linkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool linkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d104      	bne.n	800c060 <linkedListRemove+0x1a>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <linkedListRemove+0x1a>
    {
        return false;
 800c05c:	2300      	movs	r3, #0
 800c05e:	e023      	b.n	800c0a8 <linkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = linkedListGetPrevious( list, element );
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	0011      	movs	r1, r2
 800c066:	0018      	movs	r0, r3
 800c068:	f7ff ffc5 	bl	800bff6 <linkedListGetPrevious>
 800c06c:	0003      	movs	r3, r0
 800c06e:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	429a      	cmp	r2, r3
 800c078:	d103      	bne.n	800c082 <linkedListRemove+0x3c>
    {
        list->First = element->Next;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d102      	bne.n	800c092 <linkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement )
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d003      	beq.n	800c0a0 <linkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	601a      	str	r2, [r3, #0]
    }

    element->Next = 0;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]

    return true;
 800c0a6:	2301      	movs	r3, #1
}
 800c0a8:	0018      	movs	r0, r3
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	b004      	add	sp, #16
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	0002      	movs	r2, r0
 800c0b8:	1dfb      	adds	r3, r7, #7
 800c0ba:	701a      	strb	r2, [r3, #0]
    switch( cid )
 800c0bc:	1dfb      	adds	r3, r7, #7
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	2b08      	cmp	r3, #8
 800c0c2:	d003      	beq.n	800c0cc <IsSticky+0x1c>
 800c0c4:	2b0a      	cmp	r3, #10
 800c0c6:	d001      	beq.n	800c0cc <IsSticky+0x1c>
 800c0c8:	2b05      	cmp	r3, #5
 800c0ca:	d101      	bne.n	800c0d0 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e000      	b.n	800c0d2 <IsSticky+0x22>
        default:
            return false;
 800c0d0:	2300      	movs	r3, #0
    }
}
 800c0d2:	0018      	movs	r0, r3
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	b002      	add	sp, #8
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 800c0e0:	4b04      	ldr	r3, [pc, #16]	; (800c0f4 <NvmCtxCallback+0x18>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 800c0e8:	4b02      	ldr	r3, [pc, #8]	; (800c0f4 <NvmCtxCallback+0x18>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4798      	blx	r3
    }
}
 800c0ee:	46c0      	nop			; (mov r8, r8)
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	2000090c 	.word	0x2000090c

0800c0f8 <LoRaMacCommandsAddCmd>:
    *commandsNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
}

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid,  uint8_t* payload, size_t payloadSize )
{
 800c0f8:	b590      	push	{r4, r7, lr}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
 800c102:	230f      	movs	r3, #15
 800c104:	18fb      	adds	r3, r7, r3
 800c106:	1c02      	adds	r2, r0, #0
 800c108:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c110:	2301      	movs	r3, #1
 800c112:	e03c      	b.n	800c18e <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = mallocNewMacCommandSlot( );
 800c114:	f7ff ff04 	bl	800bf20 <mallocNewMacCommandSlot>
 800c118:	0003      	movs	r3, r0
 800c11a:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800c122:	2302      	movs	r3, #2
 800c124:	e033      	b.n	800c18e <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( linkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	4b1b      	ldr	r3, [pc, #108]	; (800c198 <LoRaMacCommandsAddCmd+0xa0>)
 800c12a:	0011      	movs	r1, r2
 800c12c:	0018      	movs	r0, r3
 800c12e:	f7ff ff3b 	bl	800bfa8 <linkedListAdd>
 800c132:	0003      	movs	r3, r0
 800c134:	001a      	movs	r2, r3
 800c136:	2301      	movs	r3, #1
 800c138:	4053      	eors	r3, r2
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d001      	beq.n	800c144 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 800c140:	2305      	movs	r3, #5
 800c142:	e024      	b.n	800c18e <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	240f      	movs	r4, #15
 800c148:	193a      	adds	r2, r7, r4
 800c14a:	7812      	ldrb	r2, [r2, #0]
 800c14c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* ) newCmd->Payload, payload, payloadSize );
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	3305      	adds	r3, #5
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	b292      	uxth	r2, r2
 800c15c:	68b9      	ldr	r1, [r7, #8]
 800c15e:	0018      	movs	r0, r3
 800c160:	f010 fdbc 	bl	801ccdc <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800c164:	193b      	adds	r3, r7, r4
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	0018      	movs	r0, r3
 800c16a:	f7ff ffa1 	bl	800c0b0 <IsSticky>
 800c16e:	0003      	movs	r3, r0
 800c170:	001a      	movs	r2, r3
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c176:	4b08      	ldr	r3, [pc, #32]	; (800c198 <LoRaMacCommandsAddCmd+0xa0>)
 800c178:	22f8      	movs	r2, #248	; 0xf8
 800c17a:	589a      	ldr	r2, [r3, r2]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	18d3      	adds	r3, r2, r3
 800c180:	1c5a      	adds	r2, r3, #1
 800c182:	4b05      	ldr	r3, [pc, #20]	; (800c198 <LoRaMacCommandsAddCmd+0xa0>)
 800c184:	21f8      	movs	r1, #248	; 0xf8
 800c186:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 800c188:	f7ff ffa8 	bl	800c0dc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	0018      	movs	r0, r3
 800c190:	46bd      	mov	sp, r7
 800c192:	b007      	add	sp, #28
 800c194:	bd90      	pop	{r4, r7, pc}
 800c196:	46c0      	nop			; (mov r8, r8)
 800c198:	20000910 	.word	0x20000910

0800c19c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e028      	b.n	800c200 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( linkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4b15      	ldr	r3, [pc, #84]	; (800c208 <LoRaMacCommandsRemoveCmd+0x6c>)
 800c1b2:	0011      	movs	r1, r2
 800c1b4:	0018      	movs	r0, r3
 800c1b6:	f7ff ff46 	bl	800c046 <linkedListRemove>
 800c1ba:	0003      	movs	r3, r0
 800c1bc:	001a      	movs	r2, r3
 800c1be:	2301      	movs	r3, #1
 800c1c0:	4053      	eors	r3, r2
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	e019      	b.n	800c200 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c1cc:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <LoRaMacCommandsRemoveCmd+0x6c>)
 800c1ce:	22f8      	movs	r2, #248	; 0xf8
 800c1d0:	589a      	ldr	r2, [r3, r2]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	1e5a      	subs	r2, r3, #1
 800c1da:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <LoRaMacCommandsRemoveCmd+0x6c>)
 800c1dc:	21f8      	movs	r1, #248	; 0xf8
 800c1de:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( freeMacCommandSlot( macCmd ) == false )
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	0018      	movs	r0, r3
 800c1e4:	f7ff fecc 	bl	800bf80 <freeMacCommandSlot>
 800c1e8:	0003      	movs	r3, r0
 800c1ea:	001a      	movs	r2, r3
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	4053      	eors	r3, r2
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 800c1f6:	2305      	movs	r3, #5
 800c1f8:	e002      	b.n	800c200 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 800c1fa:	f7ff ff6f 	bl	800c0dc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	0018      	movs	r0, r3
 800c202:	46bd      	mov	sp, r7
 800c204:	b002      	add	sp, #8
 800c206:	bd80      	pop	{r7, pc}
 800c208:	20000910 	.word	0x20000910

0800c20c <LoRaMacCommandsRemoveStickyAnsCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800c212:	4b1a      	ldr	r3, [pc, #104]	; (800c27c <LoRaMacCommandsRemoveStickyAnsCmds+0x70>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	60fb      	str	r3, [r7, #12]

    // Loop through all elements
    while( curElement != NULL )
 800c218:	e026      	b.n	800c268 <LoRaMacCommandsRemoveStickyAnsCmds+0x5c>
    {
        nexElement = curElement->Next;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	607b      	str	r3, [r7, #4]
        if( curElement->IsSticky == true )
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	7b1b      	ldrb	r3, [r3, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d01d      	beq.n	800c264 <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
        {
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 800c228:	230b      	movs	r3, #11
 800c22a:	18fb      	adds	r3, r7, r3
 800c22c:	2200      	movs	r2, #0
 800c22e:	701a      	strb	r2, [r3, #0]
 800c230:	e013      	b.n	800c25a <LoRaMacCommandsRemoveStickyAnsCmds+0x4e>
            {
                if( curElement->CID == CIDsStickyAnsCmds[i] )
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	791a      	ldrb	r2, [r3, #4]
 800c236:	230b      	movs	r3, #11
 800c238:	18fb      	adds	r3, r7, r3
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	4910      	ldr	r1, [pc, #64]	; (800c280 <LoRaMacCommandsRemoveStickyAnsCmds+0x74>)
 800c23e:	5ccb      	ldrb	r3, [r1, r3]
 800c240:	429a      	cmp	r2, r3
 800c242:	d104      	bne.n	800c24e <LoRaMacCommandsRemoveStickyAnsCmds+0x42>
                {
                    LoRaMacCommandsRemoveCmd( curElement );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	0018      	movs	r0, r3
 800c248:	f7ff ffa8 	bl	800c19c <LoRaMacCommandsRemoveCmd>
                    break;
 800c24c:	e00a      	b.n	800c264 <LoRaMacCommandsRemoveStickyAnsCmds+0x58>
            for( uint8_t i = 0; i < sizeof( CIDsStickyAnsCmds ); i++)
 800c24e:	210b      	movs	r1, #11
 800c250:	187b      	adds	r3, r7, r1
 800c252:	781a      	ldrb	r2, [r3, #0]
 800c254:	187b      	adds	r3, r7, r1
 800c256:	3201      	adds	r2, #1
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	230b      	movs	r3, #11
 800c25c:	18fb      	adds	r3, r7, r3
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b02      	cmp	r3, #2
 800c262:	d9e6      	bls.n	800c232 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
                }
            }
        }
        curElement = nexElement;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1d5      	bne.n	800c21a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 800c26e:	f7ff ff35 	bl	800c0dc <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800c272:	2300      	movs	r3, #0
}
 800c274:	0018      	movs	r0, r3
 800c276:	46bd      	mov	sp, r7
 800c278:	b004      	add	sp, #16
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	20000910 	.word	0x20000910
 800c280:	08027b50 	.word	0x08027b50

0800c284 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c292:	2301      	movs	r3, #1
 800c294:	e005      	b.n	800c2a2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800c298:	22f8      	movs	r2, #248	; 0xf8
 800c29a:	589a      	ldr	r2, [r3, r2]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800c2a0:	2300      	movs	r3, #0

}
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	b002      	add	sp, #8
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	46c0      	nop			; (mov r8, r8)
 800c2ac:	20000910 	.word	0x20000910

0800c2b0 <LoRaMacCommandsStickyCmdsPending>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e016      	b.n	800c2f0 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800c2c2:	4b0d      	ldr	r3, [pc, #52]	; (800c2f8 <LoRaMacCommandsStickyCmdsPending+0x48>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement )
 800c2ce:	e00b      	b.n	800c2e8 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	7b1b      	ldrb	r3, [r3, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d004      	beq.n	800c2e2 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e006      	b.n	800c2f0 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	60fb      	str	r3, [r7, #12]
    while( curElement )
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1f0      	bne.n	800c2d0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	b004      	add	sp, #16
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	20000910 	.word	0x20000910

0800c2fc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c304:	4b08      	ldr	r3, [pc, #32]	; (800c328 <IncreaseBufferPointer+0x2c>)
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	3310      	adds	r3, #16
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d103      	bne.n	800c318 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c310:	4b05      	ldr	r3, [pc, #20]	; (800c328 <IncreaseBufferPointer+0x2c>)
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	607b      	str	r3, [r7, #4]
 800c316:	e002      	b.n	800c31e <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3304      	adds	r3, #4
 800c31c:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800c31e:	687b      	ldr	r3, [r7, #4]
}
 800c320:	0018      	movs	r0, r3
 800c322:	46bd      	mov	sp, r7
 800c324:	b002      	add	sp, #8
 800c326:	bd80      	pop	{r7, pc}
 800c328:	20000a0c 	.word	0x20000a0c

0800c32c <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	607a      	str	r2, [r7, #4]
 800c336:	230f      	movs	r3, #15
 800c338:	18fb      	adds	r3, r7, r3
 800c33a:	1c02      	adds	r2, r0, #0
 800c33c:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 800c342:	e00e      	b.n	800c362 <GetElement+0x36>
    {
        if( element->Request == request )
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	220f      	movs	r2, #15
 800c34a:	18ba      	adds	r2, r7, r2
 800c34c:	7812      	ldrb	r2, [r2, #0]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d101      	bne.n	800c356 <GetElement+0x2a>
        {
            // We have found the element
            return element;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	e00a      	b.n	800c36c <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	0018      	movs	r0, r3
 800c35a:	f7ff ffcf 	bl	800c2fc <IncreaseBufferPointer>
 800c35e:	0003      	movs	r3, r0
 800c360:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	429a      	cmp	r2, r3
 800c368:	d1ec      	bne.n	800c344 <GetElement+0x18>
        }
    }
    return NULL;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	0018      	movs	r0, r3
 800c36e:	46bd      	mov	sp, r7
 800c370:	b006      	add	sp, #24
 800c372:	bd80      	pop	{r7, pc}

0800c374 <LoRaMacConfirmQueueAdd>:
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
    return &ConfirmQueueNvmCtx;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c37c:	4b16      	ldr	r3, [pc, #88]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x64>)
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	7d1b      	ldrb	r3, [r3, #20]
 800c382:	2b04      	cmp	r3, #4
 800c384:	d901      	bls.n	800c38a <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 800c386:	2300      	movs	r3, #0
 800c388:	e021      	b.n	800c3ce <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c38a:	4b13      	ldr	r3, [pc, #76]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x64>)
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	7812      	ldrb	r2, [r2, #0]
 800c392:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c394:	4b10      	ldr	r3, [pc, #64]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x64>)
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	7852      	ldrb	r2, [r2, #1]
 800c39c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c39e:	4b0e      	ldr	r3, [pc, #56]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x64>)
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	78d2      	ldrb	r2, [r2, #3]
 800c3a6:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800c3a8:	4b0b      	ldr	r3, [pc, #44]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x64>)
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800c3b0:	4b09      	ldr	r3, [pc, #36]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x64>)
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	7d1a      	ldrb	r2, [r3, #20]
 800c3b6:	3201      	adds	r2, #1
 800c3b8:	b2d2      	uxtb	r2, r2
 800c3ba:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c3bc:	4b06      	ldr	r3, [pc, #24]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x64>)
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	0018      	movs	r0, r3
 800c3c2:	f7ff ff9b 	bl	800c2fc <IncreaseBufferPointer>
 800c3c6:	0002      	movs	r2, r0
 800c3c8:	4b03      	ldr	r3, [pc, #12]	; (800c3d8 <LoRaMacConfirmQueueAdd+0x64>)
 800c3ca:	609a      	str	r2, [r3, #8]

    return true;
 800c3cc:	2301      	movs	r3, #1
}
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	b002      	add	sp, #8
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	46c0      	nop			; (mov r8, r8)
 800c3d8:	20000a0c 	.word	0x20000a0c

0800c3dc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800c3e0:	4b0c      	ldr	r3, [pc, #48]	; (800c414 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	7d1b      	ldrb	r3, [r3, #20]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	e00e      	b.n	800c40c <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800c3ee:	4b09      	ldr	r3, [pc, #36]	; (800c414 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	7d1a      	ldrb	r2, [r3, #20]
 800c3f4:	3a01      	subs	r2, #1
 800c3f6:	b2d2      	uxtb	r2, r2
 800c3f8:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c3fa:	4b06      	ldr	r3, [pc, #24]	; (800c414 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	0018      	movs	r0, r3
 800c400:	f7ff ff7c 	bl	800c2fc <IncreaseBufferPointer>
 800c404:	0002      	movs	r2, r0
 800c406:	4b03      	ldr	r3, [pc, #12]	; (800c414 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 800c408:	605a      	str	r2, [r3, #4]

    return true;
 800c40a:	2301      	movs	r3, #1
}
 800c40c:	0018      	movs	r0, r3
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	46c0      	nop			; (mov r8, r8)
 800c414:	20000a0c 	.word	0x20000a0c

0800c418 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	0002      	movs	r2, r0
 800c420:	1dfb      	adds	r3, r7, #7
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	1dbb      	adds	r3, r7, #6
 800c426:	1c0a      	adds	r2, r1, #0
 800c428:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c42e:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <LoRaMacConfirmQueueSetStatus+0x54>)
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	7d1b      	ldrb	r3, [r3, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d014      	beq.n	800c462 <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c438:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <LoRaMacConfirmQueueSetStatus+0x54>)
 800c43a:	6859      	ldr	r1, [r3, #4]
 800c43c:	4b0b      	ldr	r3, [pc, #44]	; (800c46c <LoRaMacConfirmQueueSetStatus+0x54>)
 800c43e:	689a      	ldr	r2, [r3, #8]
 800c440:	1dbb      	adds	r3, r7, #6
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	0018      	movs	r0, r3
 800c446:	f7ff ff71 	bl	800c32c <GetElement>
 800c44a:	0003      	movs	r3, r0
 800c44c:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d006      	beq.n	800c462 <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	1dfa      	adds	r2, r7, #7
 800c458:	7812      	ldrb	r2, [r2, #0]
 800c45a:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2201      	movs	r2, #1
 800c460:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800c462:	46c0      	nop			; (mov r8, r8)
 800c464:	46bd      	mov	sp, r7
 800c466:	b004      	add	sp, #16
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	46c0      	nop			; (mov r8, r8)
 800c46c:	20000a0c 	.word	0x20000a0c

0800c470 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	0002      	movs	r2, r0
 800c478:	1dfb      	adds	r3, r7, #7
 800c47a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 800c47c:	2300      	movs	r3, #0
 800c47e:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c480:	4b0d      	ldr	r3, [pc, #52]	; (800c4b8 <LoRaMacConfirmQueueGetStatus+0x48>)
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	7d1b      	ldrb	r3, [r3, #20]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d010      	beq.n	800c4ac <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c48a:	4b0b      	ldr	r3, [pc, #44]	; (800c4b8 <LoRaMacConfirmQueueGetStatus+0x48>)
 800c48c:	6859      	ldr	r1, [r3, #4]
 800c48e:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <LoRaMacConfirmQueueGetStatus+0x48>)
 800c490:	689a      	ldr	r2, [r3, #8]
 800c492:	1dfb      	adds	r3, r7, #7
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	0018      	movs	r0, r3
 800c498:	f7ff ff48 	bl	800c32c <GetElement>
 800c49c:	0003      	movs	r3, r0
 800c49e:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	785b      	ldrb	r3, [r3, #1]
 800c4aa:	e000      	b.n	800c4ae <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c4ac:	2301      	movs	r3, #1
}
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	b004      	add	sp, #16
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	46c0      	nop			; (mov r8, r8)
 800c4b8:	20000a0c 	.word	0x20000a0c

0800c4bc <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	0002      	movs	r2, r0
 800c4c4:	1dfb      	adds	r3, r7, #7
 800c4c6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c4c8:	4b14      	ldr	r3, [pc, #80]	; (800c51c <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800c4ce:	4b13      	ldr	r3, [pc, #76]	; (800c51c <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	1dfa      	adds	r2, r7, #7
 800c4d4:	7812      	ldrb	r2, [r2, #0]
 800c4d6:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800c4d8:	4b10      	ldr	r3, [pc, #64]	; (800c51c <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	7d1b      	ldrb	r3, [r3, #20]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d018      	beq.n	800c514 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	1dfa      	adds	r2, r7, #7
 800c4e6:	7812      	ldrb	r2, [r2, #0]
 800c4e8:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	78db      	ldrb	r3, [r3, #3]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	4053      	eors	r3, r2
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	0018      	movs	r0, r3
 800c502:	f7ff fefb 	bl	800c2fc <IncreaseBufferPointer>
 800c506:	0003      	movs	r3, r0
 800c508:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c50a:	4b04      	ldr	r3, [pc, #16]	; (800c51c <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	429a      	cmp	r2, r3
 800c512:	d1e6      	bne.n	800c4e2 <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 800c514:	46c0      	nop			; (mov r8, r8)
 800c516:	46bd      	mov	sp, r7
 800c518:	b004      	add	sp, #16
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20000a0c 	.word	0x20000a0c

0800c520 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	7d5b      	ldrb	r3, [r3, #21]
}
 800c52a:	0018      	movs	r0, r3
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20000a0c 	.word	0x20000a0c

0800c534 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	0002      	movs	r2, r0
 800c53c:	1dfb      	adds	r3, r7, #7
 800c53e:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c540:	4b08      	ldr	r3, [pc, #32]	; (800c564 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800c542:	6859      	ldr	r1, [r3, #4]
 800c544:	4b07      	ldr	r3, [pc, #28]	; (800c564 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 800c546:	689a      	ldr	r2, [r3, #8]
 800c548:	1dfb      	adds	r3, r7, #7
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	0018      	movs	r0, r3
 800c54e:	f7ff feed 	bl	800c32c <GetElement>
 800c552:	1e03      	subs	r3, r0, #0
 800c554:	d001      	beq.n	800c55a <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 800c556:	2301      	movs	r3, #1
 800c558:	e000      	b.n	800c55c <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	0018      	movs	r0, r3
 800c55e:	46bd      	mov	sp, r7
 800c560:	b002      	add	sp, #8
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20000a0c 	.word	0x20000a0c

0800c568 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c570:	4b2d      	ldr	r3, [pc, #180]	; (800c628 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c572:	691a      	ldr	r2, [r3, #16]
 800c574:	230e      	movs	r3, #14
 800c576:	18fb      	adds	r3, r7, r3
 800c578:	7d12      	ldrb	r2, [r2, #20]
 800c57a:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 800c57c:	230d      	movs	r3, #13
 800c57e:	18fb      	adds	r3, r7, r3
 800c580:	2200      	movs	r2, #0
 800c582:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800c584:	230f      	movs	r3, #15
 800c586:	18fb      	adds	r3, r7, r3
 800c588:	2200      	movs	r2, #0
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	e03f      	b.n	800c60e <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c58e:	4b26      	ldr	r3, [pc, #152]	; (800c628 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	781a      	ldrb	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c598:	4b23      	ldr	r3, [pc, #140]	; (800c628 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	785a      	ldrb	r2, [r3, #1]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c5a2:	4b21      	ldr	r3, [pc, #132]	; (800c628 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	210d      	movs	r1, #13
 800c5a8:	187b      	adds	r3, r7, r1
 800c5aa:	7892      	ldrb	r2, [r2, #2]
 800c5ac:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 800c5ae:	187b      	adds	r3, r7, r1
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d006      	beq.n	800c5c4 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c5b6:	4b1c      	ldr	r3, [pc, #112]	; (800c628 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	0010      	movs	r0, r2
 800c5c0:	4798      	blx	r3
 800c5c2:	e00f      	b.n	800c5e4 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c5c4:	4b18      	ldr	r3, [pc, #96]	; (800c628 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	781a      	ldrb	r2, [r3, #0]
 800c5ca:	2108      	movs	r1, #8
 800c5cc:	187b      	adds	r3, r7, r1
 800c5ce:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c5d0:	4b15      	ldr	r3, [pc, #84]	; (800c628 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	785a      	ldrb	r2, [r3, #1]
 800c5d6:	187b      	adds	r3, r7, r1
 800c5d8:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c5da:	4b13      	ldr	r3, [pc, #76]	; (800c628 <LoRaMacConfirmQueueHandleCb+0xc0>)
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	78da      	ldrb	r2, [r3, #3]
 800c5e0:	187b      	adds	r3, r7, r1
 800c5e2:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800c5e4:	f7ff fefa 	bl	800c3dc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800c5e8:	230d      	movs	r3, #13
 800c5ea:	18fb      	adds	r3, r7, r3
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	4053      	eors	r3, r2
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d004      	beq.n	800c602 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c5f8:	2308      	movs	r3, #8
 800c5fa:	18fb      	adds	r3, r7, r3
 800c5fc:	0018      	movs	r0, r3
 800c5fe:	f7ff feb9 	bl	800c374 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c602:	210f      	movs	r1, #15
 800c604:	187b      	adds	r3, r7, r1
 800c606:	781a      	ldrb	r2, [r3, #0]
 800c608:	187b      	adds	r3, r7, r1
 800c60a:	3201      	adds	r2, #1
 800c60c:	701a      	strb	r2, [r3, #0]
 800c60e:	230f      	movs	r3, #15
 800c610:	18fa      	adds	r2, r7, r3
 800c612:	230e      	movs	r3, #14
 800c614:	18fb      	adds	r3, r7, r3
 800c616:	7812      	ldrb	r2, [r2, #0]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d3b7      	bcc.n	800c58e <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 800c61e:	46c0      	nop			; (mov r8, r8)
 800c620:	46bd      	mov	sp, r7
 800c622:	b004      	add	sp, #16
 800c624:	bd80      	pop	{r7, pc}
 800c626:	46c0      	nop			; (mov r8, r8)
 800c628:	20000a0c 	.word	0x20000a0c

0800c62c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c630:	4b02      	ldr	r3, [pc, #8]	; (800c63c <LoRaMacConfirmQueueGetCnt+0x10>)
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	7d1b      	ldrb	r3, [r3, #20]
}
 800c636:	0018      	movs	r0, r3
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	20000a0c 	.word	0x20000a0c

0800c640 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 800c640:	b590      	push	{r4, r7, lr}
 800c642:	b08f      	sub	sp, #60	; 0x3c
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	0008      	movs	r0, r1
 800c64a:	0011      	movs	r1, r2
 800c64c:	607b      	str	r3, [r7, #4]
 800c64e:	230a      	movs	r3, #10
 800c650:	18fb      	adds	r3, r7, r3
 800c652:	1c02      	adds	r2, r0, #0
 800c654:	801a      	strh	r2, [r3, #0]
 800c656:	2309      	movs	r3, #9
 800c658:	18fb      	adds	r3, r7, r3
 800c65a:	1c0a      	adds	r2, r1, #0
 800c65c:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c664:	2307      	movs	r3, #7
 800c666:	e0e9      	b.n	800c83c <PayloadEncrypt+0x1fc>
    }

    uint8_t bufferIndex = 0;
 800c668:	2337      	movs	r3, #55	; 0x37
 800c66a:	18fb      	adds	r3, r7, r3
 800c66c:	2200      	movs	r2, #0
 800c66e:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 800c670:	2334      	movs	r3, #52	; 0x34
 800c672:	18fb      	adds	r3, r7, r3
 800c674:	2201      	movs	r2, #1
 800c676:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 800c678:	2320      	movs	r3, #32
 800c67a:	18fb      	adds	r3, r7, r3
 800c67c:	0018      	movs	r0, r3
 800c67e:	2310      	movs	r3, #16
 800c680:	001a      	movs	r2, r3
 800c682:	2100      	movs	r1, #0
 800c684:	f019 fc54 	bl	8025f30 <memset>
    uint8_t aBlock[16] = { 0 };
 800c688:	2110      	movs	r1, #16
 800c68a:	000c      	movs	r4, r1
 800c68c:	187b      	adds	r3, r7, r1
 800c68e:	0018      	movs	r0, r3
 800c690:	2310      	movs	r3, #16
 800c692:	001a      	movs	r2, r3
 800c694:	2100      	movs	r1, #0
 800c696:	f019 fc4b 	bl	8025f30 <memset>

    aBlock[0] = 0x01;
 800c69a:	0021      	movs	r1, r4
 800c69c:	187b      	adds	r3, r7, r1
 800c69e:	2201      	movs	r2, #1
 800c6a0:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 800c6a2:	187b      	adds	r3, r7, r1
 800c6a4:	2240      	movs	r2, #64	; 0x40
 800c6a6:	2008      	movs	r0, #8
 800c6a8:	4684      	mov	ip, r0
 800c6aa:	44bc      	add	ip, r7
 800c6ac:	4462      	add	r2, ip
 800c6ae:	7812      	ldrb	r2, [r2, #0]
 800c6b0:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	187b      	adds	r3, r7, r1
 800c6b8:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	0a1b      	lsrs	r3, r3, #8
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	187b      	adds	r3, r7, r1
 800c6c2:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	0c1b      	lsrs	r3, r3, #16
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	187b      	adds	r3, r7, r1
 800c6cc:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	0e1b      	lsrs	r3, r3, #24
 800c6d2:	b2da      	uxtb	r2, r3
 800c6d4:	187b      	adds	r3, r7, r1
 800c6d6:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 800c6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6da:	b2da      	uxtb	r2, r3
 800c6dc:	187b      	adds	r3, r7, r1
 800c6de:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6e2:	0a1b      	lsrs	r3, r3, #8
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	187b      	adds	r3, r7, r1
 800c6e8:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6ec:	0c1b      	lsrs	r3, r3, #16
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	187b      	adds	r3, r7, r1
 800c6f2:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6f6:	0e1b      	lsrs	r3, r3, #24
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	187b      	adds	r3, r7, r1
 800c6fc:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 800c6fe:	e04f      	b.n	800c7a0 <PayloadEncrypt+0x160>
    {
        aBlock[15] = ctr & 0xFF;
 800c700:	2134      	movs	r1, #52	; 0x34
 800c702:	187b      	adds	r3, r7, r1
 800c704:	881b      	ldrh	r3, [r3, #0]
 800c706:	b2da      	uxtb	r2, r3
 800c708:	2010      	movs	r0, #16
 800c70a:	183b      	adds	r3, r7, r0
 800c70c:	73da      	strb	r2, [r3, #15]
        ctr++;
 800c70e:	187b      	adds	r3, r7, r1
 800c710:	881a      	ldrh	r2, [r3, #0]
 800c712:	187b      	adds	r3, r7, r1
 800c714:	3201      	adds	r2, #1
 800c716:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c718:	2320      	movs	r3, #32
 800c71a:	18f9      	adds	r1, r7, r3
 800c71c:	2309      	movs	r3, #9
 800c71e:	18fb      	adds	r3, r7, r3
 800c720:	781a      	ldrb	r2, [r3, #0]
 800c722:	1838      	adds	r0, r7, r0
 800c724:	000b      	movs	r3, r1
 800c726:	2110      	movs	r1, #16
 800c728:	f7fc fbd2 	bl	8008ed0 <SecureElementAesEncrypt>
 800c72c:	1e03      	subs	r3, r0, #0
 800c72e:	d001      	beq.n	800c734 <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c730:	230c      	movs	r3, #12
 800c732:	e083      	b.n	800c83c <PayloadEncrypt+0x1fc>
        }

        for( uint8_t i = 0; i < 16; i++ )
 800c734:	2333      	movs	r3, #51	; 0x33
 800c736:	18fb      	adds	r3, r7, r3
 800c738:	2200      	movs	r2, #0
 800c73a:	701a      	strb	r2, [r3, #0]
 800c73c:	e01f      	b.n	800c77e <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c73e:	2037      	movs	r0, #55	; 0x37
 800c740:	183b      	adds	r3, r7, r0
 800c742:	781a      	ldrb	r2, [r3, #0]
 800c744:	2433      	movs	r4, #51	; 0x33
 800c746:	193b      	adds	r3, r7, r4
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	18d3      	adds	r3, r2, r3
 800c74c:	001a      	movs	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	189b      	adds	r3, r3, r2
 800c752:	7819      	ldrb	r1, [r3, #0]
 800c754:	193b      	adds	r3, r7, r4
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2220      	movs	r2, #32
 800c75a:	18ba      	adds	r2, r7, r2
 800c75c:	5cd2      	ldrb	r2, [r2, r3]
 800c75e:	183b      	adds	r3, r7, r0
 800c760:	7818      	ldrb	r0, [r3, #0]
 800c762:	193b      	adds	r3, r7, r4
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	18c3      	adds	r3, r0, r3
 800c768:	0018      	movs	r0, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	181b      	adds	r3, r3, r0
 800c76e:	404a      	eors	r2, r1
 800c770:	b2d2      	uxtb	r2, r2
 800c772:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < 16; i++ )
 800c774:	193b      	adds	r3, r7, r4
 800c776:	781a      	ldrb	r2, [r3, #0]
 800c778:	193b      	adds	r3, r7, r4
 800c77a:	3201      	adds	r2, #1
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	2333      	movs	r3, #51	; 0x33
 800c780:	18fb      	adds	r3, r7, r3
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b0f      	cmp	r3, #15
 800c786:	d9da      	bls.n	800c73e <PayloadEncrypt+0xfe>
        }
        size -= 16;
 800c788:	220a      	movs	r2, #10
 800c78a:	18bb      	adds	r3, r7, r2
 800c78c:	18ba      	adds	r2, r7, r2
 800c78e:	8812      	ldrh	r2, [r2, #0]
 800c790:	3a10      	subs	r2, #16
 800c792:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 800c794:	2237      	movs	r2, #55	; 0x37
 800c796:	18bb      	adds	r3, r7, r2
 800c798:	18ba      	adds	r2, r7, r2
 800c79a:	7812      	ldrb	r2, [r2, #0]
 800c79c:	3210      	adds	r2, #16
 800c79e:	701a      	strb	r2, [r3, #0]
    while( size >= 16 )
 800c7a0:	230a      	movs	r3, #10
 800c7a2:	18fb      	adds	r3, r7, r3
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	2b0f      	cmp	r3, #15
 800c7a8:	d8aa      	bhi.n	800c700 <PayloadEncrypt+0xc0>
    }

    if( size > 0 )
 800c7aa:	230a      	movs	r3, #10
 800c7ac:	18fb      	adds	r3, r7, r3
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d042      	beq.n	800c83a <PayloadEncrypt+0x1fa>
    {
        aBlock[15] = ctr & 0xFF;
 800c7b4:	2334      	movs	r3, #52	; 0x34
 800c7b6:	18fb      	adds	r3, r7, r3
 800c7b8:	881b      	ldrh	r3, [r3, #0]
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	2010      	movs	r0, #16
 800c7be:	183b      	adds	r3, r7, r0
 800c7c0:	73da      	strb	r2, [r3, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c7c2:	2320      	movs	r3, #32
 800c7c4:	18f9      	adds	r1, r7, r3
 800c7c6:	2309      	movs	r3, #9
 800c7c8:	18fb      	adds	r3, r7, r3
 800c7ca:	781a      	ldrb	r2, [r3, #0]
 800c7cc:	1838      	adds	r0, r7, r0
 800c7ce:	000b      	movs	r3, r1
 800c7d0:	2110      	movs	r1, #16
 800c7d2:	f7fc fb7d 	bl	8008ed0 <SecureElementAesEncrypt>
 800c7d6:	1e03      	subs	r3, r0, #0
 800c7d8:	d001      	beq.n	800c7de <PayloadEncrypt+0x19e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c7da:	230c      	movs	r3, #12
 800c7dc:	e02e      	b.n	800c83c <PayloadEncrypt+0x1fc>
        }
        for( uint8_t i = 0; i < size; i++ )
 800c7de:	2332      	movs	r3, #50	; 0x32
 800c7e0:	18fb      	adds	r3, r7, r3
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	701a      	strb	r2, [r3, #0]
 800c7e6:	e01f      	b.n	800c828 <PayloadEncrypt+0x1e8>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c7e8:	2037      	movs	r0, #55	; 0x37
 800c7ea:	183b      	adds	r3, r7, r0
 800c7ec:	781a      	ldrb	r2, [r3, #0]
 800c7ee:	2432      	movs	r4, #50	; 0x32
 800c7f0:	193b      	adds	r3, r7, r4
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	18d3      	adds	r3, r2, r3
 800c7f6:	001a      	movs	r2, r3
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	189b      	adds	r3, r3, r2
 800c7fc:	7819      	ldrb	r1, [r3, #0]
 800c7fe:	193b      	adds	r3, r7, r4
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2220      	movs	r2, #32
 800c804:	18ba      	adds	r2, r7, r2
 800c806:	5cd2      	ldrb	r2, [r2, r3]
 800c808:	183b      	adds	r3, r7, r0
 800c80a:	7818      	ldrb	r0, [r3, #0]
 800c80c:	193b      	adds	r3, r7, r4
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	18c3      	adds	r3, r0, r3
 800c812:	0018      	movs	r0, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	181b      	adds	r3, r3, r0
 800c818:	404a      	eors	r2, r1
 800c81a:	b2d2      	uxtb	r2, r2
 800c81c:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 800c81e:	193b      	adds	r3, r7, r4
 800c820:	781a      	ldrb	r2, [r3, #0]
 800c822:	193b      	adds	r3, r7, r4
 800c824:	3201      	adds	r2, #1
 800c826:	701a      	strb	r2, [r3, #0]
 800c828:	2332      	movs	r3, #50	; 0x32
 800c82a:	18fb      	adds	r3, r7, r3
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	220a      	movs	r2, #10
 800c832:	18ba      	adds	r2, r7, r2
 800c834:	8812      	ldrh	r2, [r2, #0]
 800c836:	429a      	cmp	r2, r3
 800c838:	d8d6      	bhi.n	800c7e8 <PayloadEncrypt+0x1a8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	0018      	movs	r0, r3
 800c83e:	46bd      	mov	sp, r7
 800c840:	b00f      	add	sp, #60	; 0x3c
 800c842:	bd90      	pop	{r4, r7, pc}

0800c844 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
 800c844:	b590      	push	{r4, r7, lr}
 800c846:	b08d      	sub	sp, #52	; 0x34
 800c848:	af00      	add	r7, sp, #0
 800c84a:	0004      	movs	r4, r0
 800c84c:	6039      	str	r1, [r7, #0]
 800c84e:	0010      	movs	r0, r2
 800c850:	0019      	movs	r1, r3
 800c852:	1dbb      	adds	r3, r7, #6
 800c854:	1c22      	adds	r2, r4, #0
 800c856:	801a      	strh	r2, [r3, #0]
 800c858:	1d7b      	adds	r3, r7, #5
 800c85a:	1c02      	adds	r2, r0, #0
 800c85c:	701a      	strb	r2, [r3, #0]
 800c85e:	1d3b      	adds	r3, r7, #4
 800c860:	1c0a      	adds	r2, r1, #0
 800c862:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 800c864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <FOptsEncrypt+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c86a:	2307      	movs	r3, #7
 800c86c:	e09b      	b.n	800c9a6 <FOptsEncrypt+0x162>
    }

    uint8_t bufferIndex = 0;
 800c86e:	232e      	movs	r3, #46	; 0x2e
 800c870:	18fb      	adds	r3, r7, r3
 800c872:	2200      	movs	r2, #0
 800c874:	701a      	strb	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 800c876:	231c      	movs	r3, #28
 800c878:	18fb      	adds	r3, r7, r3
 800c87a:	0018      	movs	r0, r3
 800c87c:	2310      	movs	r3, #16
 800c87e:	001a      	movs	r2, r3
 800c880:	2100      	movs	r1, #0
 800c882:	f019 fb55 	bl	8025f30 <memset>
    uint8_t aBlock[16] = { 0 };
 800c886:	240c      	movs	r4, #12
 800c888:	193b      	adds	r3, r7, r4
 800c88a:	0018      	movs	r0, r3
 800c88c:	2310      	movs	r3, #16
 800c88e:	001a      	movs	r2, r3
 800c890:	2100      	movs	r1, #0
 800c892:	f019 fb4d 	bl	8025f30 <memset>

    aBlock[0] = 0x01;
 800c896:	193b      	adds	r3, r7, r4
 800c898:	2201      	movs	r2, #1
 800c89a:	701a      	strb	r2, [r3, #0]

    switch( fCntID )
 800c89c:	1d3b      	adds	r3, r7, #4
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d008      	beq.n	800c8b6 <FOptsEncrypt+0x72>
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d00b      	beq.n	800c8c0 <FOptsEncrypt+0x7c>
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10e      	bne.n	800c8ca <FOptsEncrypt+0x86>
    {
        case FCNT_UP:
        {
            aBlock[4] = 0x01;
 800c8ac:	230c      	movs	r3, #12
 800c8ae:	18fb      	adds	r3, r7, r3
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	711a      	strb	r2, [r3, #4]
            break;
 800c8b4:	e00b      	b.n	800c8ce <FOptsEncrypt+0x8a>
        }
        case N_FCNT_DOWN:
        {
            aBlock[4] = 0x01;
 800c8b6:	230c      	movs	r3, #12
 800c8b8:	18fb      	adds	r3, r7, r3
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	711a      	strb	r2, [r3, #4]
            break;
 800c8be:	e006      	b.n	800c8ce <FOptsEncrypt+0x8a>
        }
        case A_FCNT_DOWN:
        {
            aBlock[4] = 0x02;
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	18fb      	adds	r3, r7, r3
 800c8c4:	2202      	movs	r2, #2
 800c8c6:	711a      	strb	r2, [r3, #4]
            break;
 800c8c8:	e001      	b.n	800c8ce <FOptsEncrypt+0x8a>
        }
        default:
            return LORAMAC_CRYPTO_FAIL_PARAM;
 800c8ca:	2306      	movs	r3, #6
 800c8cc:	e06b      	b.n	800c9a6 <FOptsEncrypt+0x162>
    }

    aBlock[5] = dir;
 800c8ce:	210c      	movs	r1, #12
 800c8d0:	187b      	adds	r3, r7, r1
 800c8d2:	1d7a      	adds	r2, r7, #5
 800c8d4:	7812      	ldrb	r2, [r2, #0]
 800c8d6:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	187b      	adds	r3, r7, r1
 800c8de:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	0a1b      	lsrs	r3, r3, #8
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	187b      	adds	r3, r7, r1
 800c8e8:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	0c1b      	lsrs	r3, r3, #16
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	187b      	adds	r3, r7, r1
 800c8f2:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	0e1b      	lsrs	r3, r3, #24
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	187b      	adds	r3, r7, r1
 800c8fc:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 800c8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c900:	b2da      	uxtb	r2, r3
 800c902:	187b      	adds	r3, r7, r1
 800c904:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c908:	0a1b      	lsrs	r3, r3, #8
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	187b      	adds	r3, r7, r1
 800c90e:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c912:	0c1b      	lsrs	r3, r3, #16
 800c914:	b2da      	uxtb	r2, r3
 800c916:	187b      	adds	r3, r7, r1
 800c918:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91c:	0e1b      	lsrs	r3, r3, #24
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	187b      	adds	r3, r7, r1
 800c922:	735a      	strb	r2, [r3, #13]

    aBlock[15] = 0x01;
 800c924:	187b      	adds	r3, r7, r1
 800c926:	2201      	movs	r2, #1
 800c928:	73da      	strb	r2, [r3, #15]

    if( size > 0 )
 800c92a:	1dbb      	adds	r3, r7, #6
 800c92c:	881b      	ldrh	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d038      	beq.n	800c9a4 <FOptsEncrypt+0x160>
    {
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c932:	231c      	movs	r3, #28
 800c934:	18fb      	adds	r3, r7, r3
 800c936:	220c      	movs	r2, #12
 800c938:	18b8      	adds	r0, r7, r2
 800c93a:	2206      	movs	r2, #6
 800c93c:	2110      	movs	r1, #16
 800c93e:	f7fc fac7 	bl	8008ed0 <SecureElementAesEncrypt>
 800c942:	1e03      	subs	r3, r0, #0
 800c944:	d001      	beq.n	800c94a <FOptsEncrypt+0x106>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c946:	230c      	movs	r3, #12
 800c948:	e02d      	b.n	800c9a6 <FOptsEncrypt+0x162>
        }
        for( uint8_t i = 0; i < size; i++ )
 800c94a:	232f      	movs	r3, #47	; 0x2f
 800c94c:	18fb      	adds	r3, r7, r3
 800c94e:	2200      	movs	r2, #0
 800c950:	701a      	strb	r2, [r3, #0]
 800c952:	e01f      	b.n	800c994 <FOptsEncrypt+0x150>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c954:	202e      	movs	r0, #46	; 0x2e
 800c956:	183b      	adds	r3, r7, r0
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	242f      	movs	r4, #47	; 0x2f
 800c95c:	193b      	adds	r3, r7, r4
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	18d3      	adds	r3, r2, r3
 800c962:	001a      	movs	r2, r3
 800c964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c966:	189b      	adds	r3, r3, r2
 800c968:	7819      	ldrb	r1, [r3, #0]
 800c96a:	193b      	adds	r3, r7, r4
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	221c      	movs	r2, #28
 800c970:	18ba      	adds	r2, r7, r2
 800c972:	5cd2      	ldrb	r2, [r2, r3]
 800c974:	183b      	adds	r3, r7, r0
 800c976:	7818      	ldrb	r0, [r3, #0]
 800c978:	193b      	adds	r3, r7, r4
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	18c3      	adds	r3, r0, r3
 800c97e:	0018      	movs	r0, r3
 800c980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c982:	181b      	adds	r3, r3, r0
 800c984:	404a      	eors	r2, r1
 800c986:	b2d2      	uxtb	r2, r2
 800c988:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < size; i++ )
 800c98a:	193b      	adds	r3, r7, r4
 800c98c:	781a      	ldrb	r2, [r3, #0]
 800c98e:	193b      	adds	r3, r7, r4
 800c990:	3201      	adds	r2, #1
 800c992:	701a      	strb	r2, [r3, #0]
 800c994:	232f      	movs	r3, #47	; 0x2f
 800c996:	18fb      	adds	r3, r7, r3
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	1dba      	adds	r2, r7, #6
 800c99e:	8812      	ldrh	r2, [r2, #0]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d8d7      	bhi.n	800c954 <FOptsEncrypt+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	b00d      	add	sp, #52	; 0x34
 800c9ac:	bd90      	pop	{r4, r7, pc}

0800c9ae <LoraMacCryptoComputeCmac>:
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac );

static LoRaMacCryptoStatus_t LoraMacCryptoComputeCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c9ae:	b5b0      	push	{r4, r5, r7, lr}
 800c9b0:	b084      	sub	sp, #16
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	0008      	movs	r0, r1
 800c9b8:	0011      	movs	r1, r2
 800c9ba:	607b      	str	r3, [r7, #4]
 800c9bc:	250a      	movs	r5, #10
 800c9be:	197b      	adds	r3, r7, r5
 800c9c0:	1c02      	adds	r2, r0, #0
 800c9c2:	801a      	strh	r2, [r3, #0]
 800c9c4:	2009      	movs	r0, #9
 800c9c6:	183b      	adds	r3, r7, r0
 800c9c8:	1c0a      	adds	r2, r1, #0
 800c9ca:	701a      	strb	r2, [r3, #0]
    if( SecureElementComputeAesCmac( msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c9cc:	687c      	ldr	r4, [r7, #4]
 800c9ce:	183b      	adds	r3, r7, r0
 800c9d0:	781a      	ldrb	r2, [r3, #0]
 800c9d2:	197b      	adds	r3, r7, r5
 800c9d4:	8819      	ldrh	r1, [r3, #0]
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	0023      	movs	r3, r4
 800c9da:	f7fc fa13 	bl	8008e04 <SecureElementComputeAesCmac>
 800c9de:	1e03      	subs	r3, r0, #0
 800c9e0:	d001      	beq.n	800c9e6 <LoraMacCryptoComputeCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c9e2:	230c      	movs	r3, #12
 800c9e4:	e000      	b.n	800c9e8 <LoraMacCryptoComputeCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	0018      	movs	r0, r3
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	b004      	add	sp, #16
 800c9ee:	bdb0      	pop	{r4, r5, r7, pc}

0800c9f0 <VerifyCmac>:
 * \param[in]  expectedCmac   - Expected cmac
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmac( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, uint32_t expectedcmac )
{
 800c9f0:	b5b0      	push	{r4, r5, r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	0008      	movs	r0, r1
 800c9fa:	0011      	movs	r1, r2
 800c9fc:	607b      	str	r3, [r7, #4]
 800c9fe:	250a      	movs	r5, #10
 800ca00:	197b      	adds	r3, r7, r5
 800ca02:	1c02      	adds	r2, r0, #0
 800ca04:	801a      	strh	r2, [r3, #0]
 800ca06:	2009      	movs	r0, #9
 800ca08:	183b      	adds	r3, r7, r0
 800ca0a:	1c0a      	adds	r2, r1, #0
 800ca0c:	701a      	strb	r2, [r3, #0]
    if( SecureElementVerifyAesCmac( msg, len, expectedcmac, keyID ) != SECURE_ELEMENT_SUCCESS )
 800ca0e:	183b      	adds	r3, r7, r0
 800ca10:	781c      	ldrb	r4, [r3, #0]
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	197b      	adds	r3, r7, r5
 800ca16:	8819      	ldrh	r1, [r3, #0]
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	0023      	movs	r3, r4
 800ca1c:	f7fc fa17 	bl	8008e4e <SecureElementVerifyAesCmac>
 800ca20:	1e03      	subs	r3, r0, #0
 800ca22:	d001      	beq.n	800ca28 <VerifyCmac+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ca24:	230c      	movs	r3, #12
 800ca26:	e000      	b.n	800ca2a <VerifyCmac+0x3a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	0018      	movs	r0, r3
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	b004      	add	sp, #16
 800ca30:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ca34 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800ca34:	b5b0      	push	{r4, r5, r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	0005      	movs	r5, r0
 800ca3c:	000c      	movs	r4, r1
 800ca3e:	0010      	movs	r0, r2
 800ca40:	0019      	movs	r1, r3
 800ca42:	1dbb      	adds	r3, r7, #6
 800ca44:	1c2a      	adds	r2, r5, #0
 800ca46:	801a      	strh	r2, [r3, #0]
 800ca48:	1d7b      	adds	r3, r7, #5
 800ca4a:	1c22      	adds	r2, r4, #0
 800ca4c:	701a      	strb	r2, [r3, #0]
 800ca4e:	1d3b      	adds	r3, r7, #4
 800ca50:	1c02      	adds	r2, r0, #0
 800ca52:	701a      	strb	r2, [r3, #0]
 800ca54:	1cfb      	adds	r3, r7, #3
 800ca56:	1c0a      	adds	r2, r1, #0
 800ca58:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d101      	bne.n	800ca64 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca60:	2307      	movs	r3, #7
 800ca62:	e079      	b.n	800cb58 <PrepareB0+0x124>
    }

    b0[0] = 0x49;
 800ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca66:	2249      	movs	r2, #73	; 0x49
 800ca68:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 800ca6a:	1d3b      	adds	r3, r7, #4
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d024      	beq.n	800cabc <PrepareB0+0x88>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 800ca72:	230e      	movs	r3, #14
 800ca74:	18fb      	adds	r3, r7, r3
 800ca76:	2200      	movs	r2, #0
 800ca78:	801a      	strh	r2, [r3, #0]
        if( dir == UPLINK )
 800ca7a:	1cfb      	adds	r3, r7, #3
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d106      	bne.n	800ca90 <PrepareB0+0x5c>
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntDown % 65536 );
 800ca82:	4b37      	ldr	r3, [pc, #220]	; (800cb60 <PrepareB0+0x12c>)
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	695a      	ldr	r2, [r3, #20]
 800ca88:	230e      	movs	r3, #14
 800ca8a:	18fb      	adds	r3, r7, r3
 800ca8c:	801a      	strh	r2, [r3, #0]
 800ca8e:	e005      	b.n	800ca9c <PrepareB0+0x68>
        }
        else
        {
            confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntUp % 65536 );
 800ca90:	4b33      	ldr	r3, [pc, #204]	; (800cb60 <PrepareB0+0x12c>)
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	689a      	ldr	r2, [r3, #8]
 800ca96:	230e      	movs	r3, #14
 800ca98:	18fb      	adds	r3, r7, r3
 800ca9a:	801a      	strh	r2, [r3, #0]
        }

        b0[1] = confFCnt & 0xFF;
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	3301      	adds	r3, #1
 800caa0:	210e      	movs	r1, #14
 800caa2:	187a      	adds	r2, r7, r1
 800caa4:	8812      	ldrh	r2, [r2, #0]
 800caa6:	b2d2      	uxtb	r2, r2
 800caa8:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800caaa:	187b      	adds	r3, r7, r1
 800caac:	881b      	ldrh	r3, [r3, #0]
 800caae:	0a1b      	lsrs	r3, r3, #8
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	3302      	adds	r3, #2
 800cab6:	b2d2      	uxtb	r2, r2
 800cab8:	701a      	strb	r2, [r3, #0]
 800caba:	e007      	b.n	800cacc <PrepareB0+0x98>
    }
    else
    {
        b0[1] = 0x00;
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	3301      	adds	r3, #1
 800cac0:	2200      	movs	r2, #0
 800cac2:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	3302      	adds	r3, #2
 800cac8:	2200      	movs	r2, #0
 800caca:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	3303      	adds	r3, #3
 800cad0:	2200      	movs	r2, #0
 800cad2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	3304      	adds	r3, #4
 800cad8:	2200      	movs	r2, #0
 800cada:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	3305      	adds	r3, #5
 800cae0:	1cfa      	adds	r2, r7, #3
 800cae2:	7812      	ldrb	r2, [r2, #0]
 800cae4:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	3306      	adds	r3, #6
 800caea:	6a3a      	ldr	r2, [r7, #32]
 800caec:	b2d2      	uxtb	r2, r2
 800caee:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800caf0:	6a3b      	ldr	r3, [r7, #32]
 800caf2:	0a1a      	lsrs	r2, r3, #8
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	3307      	adds	r3, #7
 800caf8:	b2d2      	uxtb	r2, r2
 800cafa:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	0c1a      	lsrs	r2, r3, #16
 800cb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb02:	3308      	adds	r3, #8
 800cb04:	b2d2      	uxtb	r2, r2
 800cb06:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	0e1a      	lsrs	r2, r3, #24
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	3309      	adds	r3, #9
 800cb10:	b2d2      	uxtb	r2, r2
 800cb12:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 800cb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb16:	330a      	adds	r3, #10
 800cb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	0a1a      	lsrs	r2, r3, #8
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	330b      	adds	r3, #11
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	0c1a      	lsrs	r2, r3, #16
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	330c      	adds	r3, #12
 800cb32:	b2d2      	uxtb	r2, r2
 800cb34:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	0e1a      	lsrs	r2, r3, #24
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	330d      	adds	r3, #13
 800cb3e:	b2d2      	uxtb	r2, r2
 800cb40:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 800cb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb44:	330e      	adds	r3, #14
 800cb46:	2200      	movs	r2, #0
 800cb48:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 800cb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4c:	330f      	adds	r3, #15
 800cb4e:	1dba      	adds	r2, r7, #6
 800cb50:	8812      	ldrh	r2, [r2, #0]
 800cb52:	b2d2      	uxtb	r2, r2
 800cb54:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	0018      	movs	r0, r3
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	b004      	add	sp, #16
 800cb5e:	bdb0      	pop	{r4, r5, r7, pc}
 800cb60:	20000a20 	.word	0x20000a20

0800cb64 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 800cb64:	b5b0      	push	{r4, r5, r7, lr}
 800cb66:	b0ca      	sub	sp, #296	; 0x128
 800cb68:	af04      	add	r7, sp, #16
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	000c      	movs	r4, r1
 800cb6e:	0010      	movs	r0, r2
 800cb70:	0019      	movs	r1, r3
 800cb72:	4b47      	ldr	r3, [pc, #284]	; (800cc90 <ComputeCmacB0+0x12c>)
 800cb74:	228c      	movs	r2, #140	; 0x8c
 800cb76:	0052      	lsls	r2, r2, #1
 800cb78:	4694      	mov	ip, r2
 800cb7a:	44bc      	add	ip, r7
 800cb7c:	4463      	add	r3, ip
 800cb7e:	1c22      	adds	r2, r4, #0
 800cb80:	801a      	strh	r2, [r3, #0]
 800cb82:	4b44      	ldr	r3, [pc, #272]	; (800cc94 <ComputeCmacB0+0x130>)
 800cb84:	228c      	movs	r2, #140	; 0x8c
 800cb86:	0052      	lsls	r2, r2, #1
 800cb88:	4694      	mov	ip, r2
 800cb8a:	44bc      	add	ip, r7
 800cb8c:	4463      	add	r3, ip
 800cb8e:	1c02      	adds	r2, r0, #0
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	4b41      	ldr	r3, [pc, #260]	; (800cc98 <ComputeCmacB0+0x134>)
 800cb94:	228c      	movs	r2, #140	; 0x8c
 800cb96:	0052      	lsls	r2, r2, #1
 800cb98:	4694      	mov	ip, r2
 800cb9a:	44bc      	add	ip, r7
 800cb9c:	4463      	add	r3, ip
 800cb9e:	1c0a      	adds	r2, r1, #0
 800cba0:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d005      	beq.n	800cbb4 <ComputeCmacB0+0x50>
 800cba8:	239a      	movs	r3, #154	; 0x9a
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	18fb      	adds	r3, r7, r3
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <ComputeCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cbb4:	2307      	movs	r3, #7
 800cbb6:	e066      	b.n	800cc86 <ComputeCmacB0+0x122>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800cbb8:	4b35      	ldr	r3, [pc, #212]	; (800cc90 <ComputeCmacB0+0x12c>)
 800cbba:	228c      	movs	r2, #140	; 0x8c
 800cbbc:	0052      	lsls	r2, r2, #1
 800cbbe:	4694      	mov	ip, r2
 800cbc0:	44bc      	add	ip, r7
 800cbc2:	4463      	add	r3, ip
 800cbc4:	881a      	ldrh	r2, [r3, #0]
 800cbc6:	2380      	movs	r3, #128	; 0x80
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d901      	bls.n	800cbd2 <ComputeCmacB0+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800cbce:	230b      	movs	r3, #11
 800cbd0:	e059      	b.n	800cc86 <ComputeCmacB0+0x122>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800cbd2:	2388      	movs	r3, #136	; 0x88
 800cbd4:	005a      	lsls	r2, r3, #1
 800cbd6:	2508      	movs	r5, #8
 800cbd8:	197b      	adds	r3, r7, r5
 800cbda:	2100      	movs	r1, #0
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f010 f8b9 	bl	801cd54 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800cbe2:	2394      	movs	r3, #148	; 0x94
 800cbe4:	005b      	lsls	r3, r3, #1
 800cbe6:	18fb      	adds	r3, r7, r3
 800cbe8:	781c      	ldrb	r4, [r3, #0]
 800cbea:	4b2b      	ldr	r3, [pc, #172]	; (800cc98 <ComputeCmacB0+0x134>)
 800cbec:	228c      	movs	r2, #140	; 0x8c
 800cbee:	0052      	lsls	r2, r2, #1
 800cbf0:	4694      	mov	ip, r2
 800cbf2:	44bc      	add	ip, r7
 800cbf4:	4463      	add	r3, ip
 800cbf6:	781a      	ldrb	r2, [r3, #0]
 800cbf8:	4b26      	ldr	r3, [pc, #152]	; (800cc94 <ComputeCmacB0+0x130>)
 800cbfa:	218c      	movs	r1, #140	; 0x8c
 800cbfc:	0049      	lsls	r1, r1, #1
 800cbfe:	468c      	mov	ip, r1
 800cc00:	44bc      	add	ip, r7
 800cc02:	4463      	add	r3, ip
 800cc04:	7819      	ldrb	r1, [r3, #0]
 800cc06:	4b22      	ldr	r3, [pc, #136]	; (800cc90 <ComputeCmacB0+0x12c>)
 800cc08:	208c      	movs	r0, #140	; 0x8c
 800cc0a:	0040      	lsls	r0, r0, #1
 800cc0c:	4684      	mov	ip, r0
 800cc0e:	44bc      	add	ip, r7
 800cc10:	4463      	add	r3, ip
 800cc12:	8818      	ldrh	r0, [r3, #0]
 800cc14:	197b      	adds	r3, r7, r5
 800cc16:	9302      	str	r3, [sp, #8]
 800cc18:	2398      	movs	r3, #152	; 0x98
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	18fb      	adds	r3, r7, r3
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	2396      	movs	r3, #150	; 0x96
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	18fb      	adds	r3, r7, r3
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	0023      	movs	r3, r4
 800cc2e:	f7ff ff01 	bl	800ca34 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800cc32:	197b      	adds	r3, r7, r5
 800cc34:	3310      	adds	r3, #16
 800cc36:	4a16      	ldr	r2, [pc, #88]	; (800cc90 <ComputeCmacB0+0x12c>)
 800cc38:	218c      	movs	r1, #140	; 0x8c
 800cc3a:	0049      	lsls	r1, r1, #1
 800cc3c:	468c      	mov	ip, r1
 800cc3e:	44bc      	add	ip, r7
 800cc40:	4462      	add	r2, ip
 800cc42:	8812      	ldrh	r2, [r2, #0]
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	0018      	movs	r0, r3
 800cc48:	f010 f848 	bl	801ccdc <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800cc4c:	4b10      	ldr	r3, [pc, #64]	; (800cc90 <ComputeCmacB0+0x12c>)
 800cc4e:	228c      	movs	r2, #140	; 0x8c
 800cc50:	0052      	lsls	r2, r2, #1
 800cc52:	4694      	mov	ip, r2
 800cc54:	44bc      	add	ip, r7
 800cc56:	4463      	add	r3, ip
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	3310      	adds	r3, #16
 800cc5c:	b299      	uxth	r1, r3
 800cc5e:	239a      	movs	r3, #154	; 0x9a
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	18fb      	adds	r3, r7, r3
 800cc64:	681c      	ldr	r4, [r3, #0]
 800cc66:	4b0b      	ldr	r3, [pc, #44]	; (800cc94 <ComputeCmacB0+0x130>)
 800cc68:	228c      	movs	r2, #140	; 0x8c
 800cc6a:	0052      	lsls	r2, r2, #1
 800cc6c:	4694      	mov	ip, r2
 800cc6e:	44bc      	add	ip, r7
 800cc70:	4463      	add	r3, ip
 800cc72:	781a      	ldrb	r2, [r3, #0]
 800cc74:	1978      	adds	r0, r7, r5
 800cc76:	0023      	movs	r3, r4
 800cc78:	f7fc f8c4 	bl	8008e04 <SecureElementComputeAesCmac>
 800cc7c:	1e03      	subs	r3, r0, #0
 800cc7e:	d001      	beq.n	800cc84 <ComputeCmacB0+0x120>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cc80:	230c      	movs	r3, #12
 800cc82:	e000      	b.n	800cc86 <ComputeCmacB0+0x122>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	0018      	movs	r0, r3
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	b046      	add	sp, #280	; 0x118
 800cc8c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc8e:	46c0      	nop			; (mov r8, r8)
 800cc90:	fffffeea 	.word	0xfffffeea
 800cc94:	fffffee9 	.word	0xfffffee9
 800cc98:	fffffee8 	.word	0xfffffee8

0800cc9c <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 800cc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc9e:	b0cd      	sub	sp, #308	; 0x134
 800cca0:	af04      	add	r7, sp, #16
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	000c      	movs	r4, r1
 800cca6:	0010      	movs	r0, r2
 800cca8:	0019      	movs	r1, r3
 800ccaa:	4b52      	ldr	r3, [pc, #328]	; (800cdf4 <VerifyCmacB0+0x158>)
 800ccac:	2290      	movs	r2, #144	; 0x90
 800ccae:	0052      	lsls	r2, r2, #1
 800ccb0:	4694      	mov	ip, r2
 800ccb2:	44bc      	add	ip, r7
 800ccb4:	4463      	add	r3, ip
 800ccb6:	1c22      	adds	r2, r4, #0
 800ccb8:	801a      	strh	r2, [r3, #0]
 800ccba:	4b4f      	ldr	r3, [pc, #316]	; (800cdf8 <VerifyCmacB0+0x15c>)
 800ccbc:	2290      	movs	r2, #144	; 0x90
 800ccbe:	0052      	lsls	r2, r2, #1
 800ccc0:	4694      	mov	ip, r2
 800ccc2:	44bc      	add	ip, r7
 800ccc4:	4463      	add	r3, ip
 800ccc6:	1c02      	adds	r2, r0, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
 800ccca:	4b4c      	ldr	r3, [pc, #304]	; (800cdfc <VerifyCmacB0+0x160>)
 800cccc:	2290      	movs	r2, #144	; 0x90
 800ccce:	0052      	lsls	r2, r2, #1
 800ccd0:	4694      	mov	ip, r2
 800ccd2:	44bc      	add	ip, r7
 800ccd4:	4463      	add	r3, ip
 800ccd6:	1c0a      	adds	r2, r1, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d101      	bne.n	800cce4 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cce0:	2307      	movs	r3, #7
 800cce2:	e083      	b.n	800cdec <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800cce4:	4b43      	ldr	r3, [pc, #268]	; (800cdf4 <VerifyCmacB0+0x158>)
 800cce6:	2290      	movs	r2, #144	; 0x90
 800cce8:	0052      	lsls	r2, r2, #1
 800ccea:	4694      	mov	ip, r2
 800ccec:	44bc      	add	ip, r7
 800ccee:	4463      	add	r3, ip
 800ccf0:	881a      	ldrh	r2, [r3, #0]
 800ccf2:	2380      	movs	r3, #128	; 0x80
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d901      	bls.n	800ccfe <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ccfa:	230b      	movs	r3, #11
 800ccfc:	e076      	b.n	800cdec <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ccfe:	2388      	movs	r3, #136	; 0x88
 800cd00:	005a      	lsls	r2, r3, #1
 800cd02:	250c      	movs	r5, #12
 800cd04:	197b      	adds	r3, r7, r5
 800cd06:	2100      	movs	r1, #0
 800cd08:	0018      	movs	r0, r3
 800cd0a:	f010 f823 	bl	801cd54 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800cd0e:	2398      	movs	r3, #152	; 0x98
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	2208      	movs	r2, #8
 800cd14:	4694      	mov	ip, r2
 800cd16:	44bc      	add	ip, r7
 800cd18:	4463      	add	r3, ip
 800cd1a:	781c      	ldrb	r4, [r3, #0]
 800cd1c:	4b37      	ldr	r3, [pc, #220]	; (800cdfc <VerifyCmacB0+0x160>)
 800cd1e:	2290      	movs	r2, #144	; 0x90
 800cd20:	0052      	lsls	r2, r2, #1
 800cd22:	4694      	mov	ip, r2
 800cd24:	44bc      	add	ip, r7
 800cd26:	4463      	add	r3, ip
 800cd28:	781a      	ldrb	r2, [r3, #0]
 800cd2a:	4b33      	ldr	r3, [pc, #204]	; (800cdf8 <VerifyCmacB0+0x15c>)
 800cd2c:	2190      	movs	r1, #144	; 0x90
 800cd2e:	0049      	lsls	r1, r1, #1
 800cd30:	468c      	mov	ip, r1
 800cd32:	44bc      	add	ip, r7
 800cd34:	4463      	add	r3, ip
 800cd36:	7819      	ldrb	r1, [r3, #0]
 800cd38:	4b2e      	ldr	r3, [pc, #184]	; (800cdf4 <VerifyCmacB0+0x158>)
 800cd3a:	2090      	movs	r0, #144	; 0x90
 800cd3c:	0040      	lsls	r0, r0, #1
 800cd3e:	4684      	mov	ip, r0
 800cd40:	44bc      	add	ip, r7
 800cd42:	4463      	add	r3, ip
 800cd44:	8818      	ldrh	r0, [r3, #0]
 800cd46:	197b      	adds	r3, r7, r5
 800cd48:	9302      	str	r3, [sp, #8]
 800cd4a:	239c      	movs	r3, #156	; 0x9c
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	2608      	movs	r6, #8
 800cd50:	46b4      	mov	ip, r6
 800cd52:	44bc      	add	ip, r7
 800cd54:	4463      	add	r3, ip
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	239a      	movs	r3, #154	; 0x9a
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	2608      	movs	r6, #8
 800cd60:	46b4      	mov	ip, r6
 800cd62:	44bc      	add	ip, r7
 800cd64:	4463      	add	r3, ip
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	0023      	movs	r3, r4
 800cd6c:	f7ff fe62 	bl	800ca34 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800cd70:	197b      	adds	r3, r7, r5
 800cd72:	3310      	adds	r3, #16
 800cd74:	4a1f      	ldr	r2, [pc, #124]	; (800cdf4 <VerifyCmacB0+0x158>)
 800cd76:	2190      	movs	r1, #144	; 0x90
 800cd78:	0049      	lsls	r1, r1, #1
 800cd7a:	468c      	mov	ip, r1
 800cd7c:	44bc      	add	ip, r7
 800cd7e:	4462      	add	r2, ip
 800cd80:	8812      	ldrh	r2, [r2, #0]
 800cd82:	6879      	ldr	r1, [r7, #4]
 800cd84:	0018      	movs	r0, r3
 800cd86:	f00f ffa9 	bl	801ccdc <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cd8a:	2620      	movs	r6, #32
 800cd8c:	36ff      	adds	r6, #255	; 0xff
 800cd8e:	19bb      	adds	r3, r7, r6
 800cd90:	2206      	movs	r2, #6
 800cd92:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800cd94:	4b17      	ldr	r3, [pc, #92]	; (800cdf4 <VerifyCmacB0+0x158>)
 800cd96:	2290      	movs	r2, #144	; 0x90
 800cd98:	0052      	lsls	r2, r2, #1
 800cd9a:	4694      	mov	ip, r2
 800cd9c:	44bc      	add	ip, r7
 800cd9e:	4463      	add	r3, ip
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	3310      	adds	r3, #16
 800cda4:	b299      	uxth	r1, r3
 800cda6:	19bc      	adds	r4, r7, r6
 800cda8:	4b13      	ldr	r3, [pc, #76]	; (800cdf8 <VerifyCmacB0+0x15c>)
 800cdaa:	2290      	movs	r2, #144	; 0x90
 800cdac:	0052      	lsls	r2, r2, #1
 800cdae:	4694      	mov	ip, r2
 800cdb0:	44bc      	add	ip, r7
 800cdb2:	4463      	add	r3, ip
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	229e      	movs	r2, #158	; 0x9e
 800cdb8:	0052      	lsls	r2, r2, #1
 800cdba:	2008      	movs	r0, #8
 800cdbc:	4684      	mov	ip, r0
 800cdbe:	44bc      	add	ip, r7
 800cdc0:	4462      	add	r2, ip
 800cdc2:	6812      	ldr	r2, [r2, #0]
 800cdc4:	1978      	adds	r0, r7, r5
 800cdc6:	f7fc f842 	bl	8008e4e <SecureElementVerifyAesCmac>
 800cdca:	0003      	movs	r3, r0
 800cdcc:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cdce:	19bb      	adds	r3, r7, r6
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	e008      	b.n	800cdec <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800cdda:	2320      	movs	r3, #32
 800cddc:	33ff      	adds	r3, #255	; 0xff
 800cdde:	18fb      	adds	r3, r7, r3
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d101      	bne.n	800cdea <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e000      	b.n	800cdec <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cdea:	230c      	movs	r3, #12
}
 800cdec:	0018      	movs	r0, r3
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	b049      	add	sp, #292	; 0x124
 800cdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf4:	fffffee2 	.word	0xfffffee2
 800cdf8:	fffffee1 	.word	0xfffffee1
 800cdfc:	fffffee0 	.word	0xfffffee0

0800ce00 <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 800ce00:	b5b0      	push	{r4, r5, r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	0005      	movs	r5, r0
 800ce08:	000c      	movs	r4, r1
 800ce0a:	0010      	movs	r0, r2
 800ce0c:	0019      	movs	r1, r3
 800ce0e:	1dbb      	adds	r3, r7, #6
 800ce10:	1c2a      	adds	r2, r5, #0
 800ce12:	801a      	strh	r2, [r3, #0]
 800ce14:	1d7b      	adds	r3, r7, #5
 800ce16:	1c22      	adds	r2, r4, #0
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	1d3b      	adds	r3, r7, #4
 800ce1c:	1c02      	adds	r2, r0, #0
 800ce1e:	701a      	strb	r2, [r3, #0]
 800ce20:	1cfb      	adds	r3, r7, #3
 800ce22:	1c0a      	adds	r2, r1, #0
 800ce24:	701a      	strb	r2, [r3, #0]
    if( b1 == 0 )
 800ce26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <PrepareB1+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ce2c:	2307      	movs	r3, #7
 800ce2e:	e06c      	b.n	800cf0a <PrepareB1+0x10a>
    }

    b1[0] = 0x49;
 800ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce32:	2249      	movs	r2, #73	; 0x49
 800ce34:	701a      	strb	r2, [r3, #0]

    if( isAck == true )
 800ce36:	1d3b      	adds	r3, r7, #4
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d015      	beq.n	800ce6a <PrepareB1+0x6a>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( *CryptoCtx.NvmCtx->LastDownFCnt % 65536 );
 800ce3e:	4b35      	ldr	r3, [pc, #212]	; (800cf14 <PrepareB1+0x114>)
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	210e      	movs	r1, #14
 800ce48:	187b      	adds	r3, r7, r1
 800ce4a:	801a      	strh	r2, [r3, #0]
        b1[1] = confFCnt & 0xFF;
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	3301      	adds	r3, #1
 800ce50:	187a      	adds	r2, r7, r1
 800ce52:	8812      	ldrh	r2, [r2, #0]
 800ce54:	b2d2      	uxtb	r2, r2
 800ce56:	701a      	strb	r2, [r3, #0]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 800ce58:	187b      	adds	r3, r7, r1
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	0a1b      	lsrs	r3, r3, #8
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	3302      	adds	r3, #2
 800ce64:	b2d2      	uxtb	r2, r2
 800ce66:	701a      	strb	r2, [r3, #0]
 800ce68:	e007      	b.n	800ce7a <PrepareB1+0x7a>
    }
    else
    {
        b1[1] = 0x00;
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	2200      	movs	r2, #0
 800ce70:	701a      	strb	r2, [r3, #0]
        b1[2] = 0x00;
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	3302      	adds	r3, #2
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]
    }

    b1[3] = txDr;
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	3303      	adds	r3, #3
 800ce7e:	1cfa      	adds	r2, r7, #3
 800ce80:	7812      	ldrb	r2, [r2, #0]
 800ce82:	701a      	strb	r2, [r3, #0]
    b1[4] = txCh;
 800ce84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce86:	3304      	adds	r3, #4
 800ce88:	2220      	movs	r2, #32
 800ce8a:	18ba      	adds	r2, r7, r2
 800ce8c:	7812      	ldrb	r2, [r2, #0]
 800ce8e:	701a      	strb	r2, [r3, #0]
    b1[5] = UPLINK;  // dir = Uplink
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	3305      	adds	r3, #5
 800ce94:	2200      	movs	r2, #0
 800ce96:	701a      	strb	r2, [r3, #0]

    b1[6] = devAddr & 0xFF;
 800ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9a:	3306      	adds	r3, #6
 800ce9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce9e:	b2d2      	uxtb	r2, r2
 800cea0:	701a      	strb	r2, [r3, #0]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 800cea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea4:	0a1a      	lsrs	r2, r3, #8
 800cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea8:	3307      	adds	r3, #7
 800ceaa:	b2d2      	uxtb	r2, r2
 800ceac:	701a      	strb	r2, [r3, #0]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 800ceae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb0:	0c1a      	lsrs	r2, r3, #16
 800ceb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	b2d2      	uxtb	r2, r2
 800ceb8:	701a      	strb	r2, [r3, #0]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 800ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebc:	0e1a      	lsrs	r2, r3, #24
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	3309      	adds	r3, #9
 800cec2:	b2d2      	uxtb	r2, r2
 800cec4:	701a      	strb	r2, [r3, #0]

    b1[10] = fCntUp & 0xFF;
 800cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec8:	330a      	adds	r3, #10
 800ceca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	701a      	strb	r2, [r3, #0]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 800ced0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced2:	0a1a      	lsrs	r2, r3, #8
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	330b      	adds	r3, #11
 800ced8:	b2d2      	uxtb	r2, r2
 800ceda:	701a      	strb	r2, [r3, #0]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 800cedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cede:	0c1a      	lsrs	r2, r3, #16
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	330c      	adds	r3, #12
 800cee4:	b2d2      	uxtb	r2, r2
 800cee6:	701a      	strb	r2, [r3, #0]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	0e1a      	lsrs	r2, r3, #24
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	330d      	adds	r3, #13
 800cef0:	b2d2      	uxtb	r2, r2
 800cef2:	701a      	strb	r2, [r3, #0]

    b1[14] = 0x00;
 800cef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef6:	330e      	adds	r3, #14
 800cef8:	2200      	movs	r2, #0
 800cefa:	701a      	strb	r2, [r3, #0]

    b1[15] = msgLen & 0xFF;
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	330f      	adds	r3, #15
 800cf00:	1dba      	adds	r2, r7, #6
 800cf02:	8812      	ldrh	r2, [r2, #0]
 800cf04:	b2d2      	uxtb	r2, r2
 800cf06:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	b004      	add	sp, #16
 800cf10:	bdb0      	pop	{r4, r5, r7, pc}
 800cf12:	46c0      	nop			; (mov r8, r8)
 800cf14:	20000a20 	.word	0x20000a20

0800cf18 <ComputeCmacB1>:
 * \param[IN]  fCntUp         - Uplink Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB1( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint32_t* cmac )
{
 800cf18:	b5b0      	push	{r4, r5, r7, lr}
 800cf1a:	b0ca      	sub	sp, #296	; 0x128
 800cf1c:	af04      	add	r7, sp, #16
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	000c      	movs	r4, r1
 800cf22:	0010      	movs	r0, r2
 800cf24:	0019      	movs	r1, r3
 800cf26:	4b49      	ldr	r3, [pc, #292]	; (800d04c <ComputeCmacB1+0x134>)
 800cf28:	228c      	movs	r2, #140	; 0x8c
 800cf2a:	0052      	lsls	r2, r2, #1
 800cf2c:	4694      	mov	ip, r2
 800cf2e:	44bc      	add	ip, r7
 800cf30:	4463      	add	r3, ip
 800cf32:	1c22      	adds	r2, r4, #0
 800cf34:	801a      	strh	r2, [r3, #0]
 800cf36:	4b46      	ldr	r3, [pc, #280]	; (800d050 <ComputeCmacB1+0x138>)
 800cf38:	228c      	movs	r2, #140	; 0x8c
 800cf3a:	0052      	lsls	r2, r2, #1
 800cf3c:	4694      	mov	ip, r2
 800cf3e:	44bc      	add	ip, r7
 800cf40:	4463      	add	r3, ip
 800cf42:	1c02      	adds	r2, r0, #0
 800cf44:	701a      	strb	r2, [r3, #0]
 800cf46:	4b43      	ldr	r3, [pc, #268]	; (800d054 <ComputeCmacB1+0x13c>)
 800cf48:	228c      	movs	r2, #140	; 0x8c
 800cf4a:	0052      	lsls	r2, r2, #1
 800cf4c:	4694      	mov	ip, r2
 800cf4e:	44bc      	add	ip, r7
 800cf50:	4463      	add	r3, ip
 800cf52:	1c0a      	adds	r2, r1, #0
 800cf54:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d005      	beq.n	800cf68 <ComputeCmacB1+0x50>
 800cf5c:	239c      	movs	r3, #156	; 0x9c
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	18fb      	adds	r3, r7, r3
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <ComputeCmacB1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cf68:	2307      	movs	r3, #7
 800cf6a:	e06b      	b.n	800d044 <ComputeCmacB1+0x12c>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800cf6c:	4b37      	ldr	r3, [pc, #220]	; (800d04c <ComputeCmacB1+0x134>)
 800cf6e:	228c      	movs	r2, #140	; 0x8c
 800cf70:	0052      	lsls	r2, r2, #1
 800cf72:	4694      	mov	ip, r2
 800cf74:	44bc      	add	ip, r7
 800cf76:	4463      	add	r3, ip
 800cf78:	881a      	ldrh	r2, [r3, #0]
 800cf7a:	2380      	movs	r3, #128	; 0x80
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d901      	bls.n	800cf86 <ComputeCmacB1+0x6e>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800cf82:	230b      	movs	r3, #11
 800cf84:	e05e      	b.n	800d044 <ComputeCmacB1+0x12c>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800cf86:	2388      	movs	r3, #136	; 0x88
 800cf88:	005a      	lsls	r2, r3, #1
 800cf8a:	2508      	movs	r5, #8
 800cf8c:	197b      	adds	r3, r7, r5
 800cf8e:	2100      	movs	r1, #0
 800cf90:	0018      	movs	r0, r3
 800cf92:	f00f fedf 	bl	801cd54 <memset1>

    // Initialize the first Block
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 800cf96:	2394      	movs	r3, #148	; 0x94
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	18fb      	adds	r3, r7, r3
 800cf9c:	781c      	ldrb	r4, [r3, #0]
 800cf9e:	4b2d      	ldr	r3, [pc, #180]	; (800d054 <ComputeCmacB1+0x13c>)
 800cfa0:	228c      	movs	r2, #140	; 0x8c
 800cfa2:	0052      	lsls	r2, r2, #1
 800cfa4:	4694      	mov	ip, r2
 800cfa6:	44bc      	add	ip, r7
 800cfa8:	4463      	add	r3, ip
 800cfaa:	781a      	ldrb	r2, [r3, #0]
 800cfac:	4b28      	ldr	r3, [pc, #160]	; (800d050 <ComputeCmacB1+0x138>)
 800cfae:	218c      	movs	r1, #140	; 0x8c
 800cfb0:	0049      	lsls	r1, r1, #1
 800cfb2:	468c      	mov	ip, r1
 800cfb4:	44bc      	add	ip, r7
 800cfb6:	4463      	add	r3, ip
 800cfb8:	7819      	ldrb	r1, [r3, #0]
 800cfba:	4b24      	ldr	r3, [pc, #144]	; (800d04c <ComputeCmacB1+0x134>)
 800cfbc:	208c      	movs	r0, #140	; 0x8c
 800cfbe:	0040      	lsls	r0, r0, #1
 800cfc0:	4684      	mov	ip, r0
 800cfc2:	44bc      	add	ip, r7
 800cfc4:	4463      	add	r3, ip
 800cfc6:	8818      	ldrh	r0, [r3, #0]
 800cfc8:	197b      	adds	r3, r7, r5
 800cfca:	9303      	str	r3, [sp, #12]
 800cfcc:	239a      	movs	r3, #154	; 0x9a
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	18fb      	adds	r3, r7, r3
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	9302      	str	r3, [sp, #8]
 800cfd6:	2398      	movs	r3, #152	; 0x98
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	18fb      	adds	r3, r7, r3
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	2396      	movs	r3, #150	; 0x96
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	18fb      	adds	r3, r7, r3
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	0023      	movs	r3, r4
 800cfec:	f7ff ff08 	bl	800ce00 <PrepareB1>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800cff0:	197b      	adds	r3, r7, r5
 800cff2:	3310      	adds	r3, #16
 800cff4:	4a15      	ldr	r2, [pc, #84]	; (800d04c <ComputeCmacB1+0x134>)
 800cff6:	218c      	movs	r1, #140	; 0x8c
 800cff8:	0049      	lsls	r1, r1, #1
 800cffa:	468c      	mov	ip, r1
 800cffc:	44bc      	add	ip, r7
 800cffe:	4462      	add	r2, ip
 800d000:	8812      	ldrh	r2, [r2, #0]
 800d002:	6879      	ldr	r1, [r7, #4]
 800d004:	0018      	movs	r0, r3
 800d006:	f00f fe69 	bl	801ccdc <memcpy1>

    if( SecureElementComputeAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d00a:	4b10      	ldr	r3, [pc, #64]	; (800d04c <ComputeCmacB1+0x134>)
 800d00c:	228c      	movs	r2, #140	; 0x8c
 800d00e:	0052      	lsls	r2, r2, #1
 800d010:	4694      	mov	ip, r2
 800d012:	44bc      	add	ip, r7
 800d014:	4463      	add	r3, ip
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	3310      	adds	r3, #16
 800d01a:	b299      	uxth	r1, r3
 800d01c:	239c      	movs	r3, #156	; 0x9c
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	18fb      	adds	r3, r7, r3
 800d022:	681c      	ldr	r4, [r3, #0]
 800d024:	4b0a      	ldr	r3, [pc, #40]	; (800d050 <ComputeCmacB1+0x138>)
 800d026:	228c      	movs	r2, #140	; 0x8c
 800d028:	0052      	lsls	r2, r2, #1
 800d02a:	4694      	mov	ip, r2
 800d02c:	44bc      	add	ip, r7
 800d02e:	4463      	add	r3, ip
 800d030:	781a      	ldrb	r2, [r3, #0]
 800d032:	1978      	adds	r0, r7, r5
 800d034:	0023      	movs	r3, r4
 800d036:	f7fb fee5 	bl	8008e04 <SecureElementComputeAesCmac>
 800d03a:	1e03      	subs	r3, r0, #0
 800d03c:	d001      	beq.n	800d042 <ComputeCmacB1+0x12a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d03e:	230c      	movs	r3, #12
 800d040:	e000      	b.n	800d044 <ComputeCmacB1+0x12c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d042:	2300      	movs	r3, #0
}
 800d044:	0018      	movs	r0, r3
 800d046:	46bd      	mov	sp, r7
 800d048:	b046      	add	sp, #280	; 0x118
 800d04a:	bdb0      	pop	{r4, r5, r7, pc}
 800d04c:	fffffeea 	.word	0xfffffeea
 800d050:	fffffee9 	.word	0xfffffee9
 800d054:	fffffee8 	.word	0xfffffee8

0800d058 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	0002      	movs	r2, r0
 800d060:	6039      	str	r1, [r7, #0]
 800d062:	1dfb      	adds	r3, r7, #7
 800d064:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d066:	230f      	movs	r3, #15
 800d068:	18fb      	adds	r3, r7, r3
 800d06a:	2200      	movs	r2, #0
 800d06c:	701a      	strb	r2, [r3, #0]
 800d06e:	e019      	b.n	800d0a4 <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d070:	230f      	movs	r3, #15
 800d072:	18fb      	adds	r3, r7, r3
 800d074:	781a      	ldrb	r2, [r3, #0]
 800d076:	4b10      	ldr	r3, [pc, #64]	; (800d0b8 <GetKeyAddrItem+0x60>)
 800d078:	0092      	lsls	r2, r2, #2
 800d07a:	5cd3      	ldrb	r3, [r2, r3]
 800d07c:	1dfa      	adds	r2, r7, #7
 800d07e:	7812      	ldrb	r2, [r2, #0]
 800d080:	429a      	cmp	r2, r3
 800d082:	d109      	bne.n	800d098 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 800d084:	230f      	movs	r3, #15
 800d086:	18fb      	adds	r3, r7, r3
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	009a      	lsls	r2, r3, #2
 800d08c:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <GetKeyAddrItem+0x60>)
 800d08e:	18d2      	adds	r2, r2, r3
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d094:	2300      	movs	r3, #0
 800d096:	e00b      	b.n	800d0b0 <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d098:	210f      	movs	r1, #15
 800d09a:	187b      	adds	r3, r7, r1
 800d09c:	781a      	ldrb	r2, [r3, #0]
 800d09e:	187b      	adds	r3, r7, r1
 800d0a0:	3201      	adds	r2, #1
 800d0a2:	701a      	strb	r2, [r3, #0]
 800d0a4:	230f      	movs	r3, #15
 800d0a6:	18fb      	adds	r3, r7, r3
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b04      	cmp	r3, #4
 800d0ac:	d9e0      	bls.n	800d070 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d0ae:	2309      	movs	r3, #9
}
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	b004      	add	sp, #16
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	20000010 	.word	0x20000010

0800d0bc <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 800d0bc:	b590      	push	{r4, r7, lr}
 800d0be:	b089      	sub	sp, #36	; 0x24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60b9      	str	r1, [r7, #8]
 800d0c4:	607a      	str	r2, [r7, #4]
 800d0c6:	603b      	str	r3, [r7, #0]
 800d0c8:	230f      	movs	r3, #15
 800d0ca:	18fb      	adds	r3, r7, r3
 800d0cc:	1c02      	adds	r2, r0, #0
 800d0ce:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d005      	beq.n	800d0e2 <DeriveSessionKey10x+0x26>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <DeriveSessionKey10x+0x26>
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d0e2:	2307      	movs	r3, #7
 800d0e4:	e042      	b.n	800d16c <DeriveSessionKey10x+0xb0>
    }

    uint8_t compBase[16] = { 0 };
 800d0e6:	2310      	movs	r3, #16
 800d0e8:	18fb      	adds	r3, r7, r3
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	2310      	movs	r3, #16
 800d0ee:	001a      	movs	r2, r3
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	f018 ff1d 	bl	8025f30 <memset>

    switch( keyID )
 800d0f6:	230f      	movs	r3, #15
 800d0f8:	18fb      	adds	r3, r7, r3
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	2b04      	cmp	r3, #4
 800d0fe:	db0e      	blt.n	800d11e <DeriveSessionKey10x+0x62>
 800d100:	2b06      	cmp	r3, #6
 800d102:	dd02      	ble.n	800d10a <DeriveSessionKey10x+0x4e>
 800d104:	2b07      	cmp	r3, #7
 800d106:	d005      	beq.n	800d114 <DeriveSessionKey10x+0x58>
 800d108:	e009      	b.n	800d11e <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 800d10a:	2310      	movs	r3, #16
 800d10c:	18fb      	adds	r3, r7, r3
 800d10e:	2201      	movs	r2, #1
 800d110:	701a      	strb	r2, [r3, #0]
            break;
 800d112:	e006      	b.n	800d122 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 800d114:	2310      	movs	r3, #16
 800d116:	18fb      	adds	r3, r7, r3
 800d118:	2202      	movs	r2, #2
 800d11a:	701a      	strb	r2, [r3, #0]
            break;
 800d11c:	e001      	b.n	800d122 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d11e:	2308      	movs	r3, #8
 800d120:	e024      	b.n	800d16c <DeriveSessionKey10x+0xb0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 800d122:	2410      	movs	r4, #16
 800d124:	193b      	adds	r3, r7, r4
 800d126:	3301      	adds	r3, #1
 800d128:	68b9      	ldr	r1, [r7, #8]
 800d12a:	2203      	movs	r2, #3
 800d12c:	0018      	movs	r0, r3
 800d12e:	f00f fdd5 	bl	801ccdc <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800d132:	193b      	adds	r3, r7, r4
 800d134:	3304      	adds	r3, #4
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	2203      	movs	r2, #3
 800d13a:	0018      	movs	r0, r3
 800d13c:	f00f fdce 	bl	801ccdc <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800d140:	193b      	adds	r3, r7, r4
 800d142:	3307      	adds	r3, #7
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	2202      	movs	r2, #2
 800d148:	0018      	movs	r0, r3
 800d14a:	f00f fdc7 	bl	801ccdc <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d14e:	230f      	movs	r3, #15
 800d150:	18fb      	adds	r3, r7, r3
 800d152:	781a      	ldrb	r2, [r3, #0]
 800d154:	1939      	adds	r1, r7, r4
 800d156:	4b07      	ldr	r3, [pc, #28]	; (800d174 <DeriveSessionKey10x+0xb8>)
 800d158:	6818      	ldr	r0, [r3, #0]
 800d15a:	0013      	movs	r3, r2
 800d15c:	2201      	movs	r2, #1
 800d15e:	f7fb ff21 	bl	8008fa4 <SecureElementDeriveAndStoreKey>
 800d162:	1e03      	subs	r3, r0, #0
 800d164:	d001      	beq.n	800d16a <DeriveSessionKey10x+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d166:	230c      	movs	r3, #12
 800d168:	e000      	b.n	800d16c <DeriveSessionKey10x+0xb0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	0018      	movs	r0, r3
 800d16e:	46bd      	mov	sp, r7
 800d170:	b009      	add	sp, #36	; 0x24
 800d172:	bd90      	pop	{r4, r7, pc}
 800d174:	20000a20 	.word	0x20000a20

0800d178 <DeriveSessionKey11x>:
 * \param[IN]  joinEUI        - Join Server EUI
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey11x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* joinEUI, uint8_t* devNonce )
{
 800d178:	b5b0      	push	{r4, r5, r7, lr}
 800d17a:	b08a      	sub	sp, #40	; 0x28
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	607a      	str	r2, [r7, #4]
 800d182:	603b      	str	r3, [r7, #0]
 800d184:	230f      	movs	r3, #15
 800d186:	18fb      	adds	r3, r7, r3
 800d188:	1c02      	adds	r2, r0, #0
 800d18a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( joinEUI == 0 ) || ( devNonce == 0 ) )
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d005      	beq.n	800d19e <DeriveSessionKey11x+0x26>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <DeriveSessionKey11x+0x26>
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d101      	bne.n	800d1a2 <DeriveSessionKey11x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d19e:	2307      	movs	r3, #7
 800d1a0:	e05a      	b.n	800d258 <DeriveSessionKey11x+0xe0>
    }

    uint8_t compBase[16] = { 0 };
 800d1a2:	2314      	movs	r3, #20
 800d1a4:	18fb      	adds	r3, r7, r3
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	2310      	movs	r3, #16
 800d1aa:	001a      	movs	r2, r3
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	f018 febf 	bl	8025f30 <memset>
    KeyIdentifier_t rootKeyId = NWK_KEY;
 800d1b2:	2327      	movs	r3, #39	; 0x27
 800d1b4:	18fb      	adds	r3, r7, r3
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	701a      	strb	r2, [r3, #0]

    switch( keyID )
 800d1ba:	230f      	movs	r3, #15
 800d1bc:	18fb      	adds	r3, r7, r3
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	2b05      	cmp	r3, #5
 800d1c2:	d00d      	beq.n	800d1e0 <DeriveSessionKey11x+0x68>
 800d1c4:	dc02      	bgt.n	800d1cc <DeriveSessionKey11x+0x54>
 800d1c6:	2b04      	cmp	r3, #4
 800d1c8:	d005      	beq.n	800d1d6 <DeriveSessionKey11x+0x5e>
 800d1ca:	e01c      	b.n	800d206 <DeriveSessionKey11x+0x8e>
 800d1cc:	2b06      	cmp	r3, #6
 800d1ce:	d00c      	beq.n	800d1ea <DeriveSessionKey11x+0x72>
 800d1d0:	2b07      	cmp	r3, #7
 800d1d2:	d00f      	beq.n	800d1f4 <DeriveSessionKey11x+0x7c>
 800d1d4:	e017      	b.n	800d206 <DeriveSessionKey11x+0x8e>
    {
        case F_NWK_S_INT_KEY:
            compBase[0] = 0x01;
 800d1d6:	2314      	movs	r3, #20
 800d1d8:	18fb      	adds	r3, r7, r3
 800d1da:	2201      	movs	r2, #1
 800d1dc:	701a      	strb	r2, [r3, #0]
            break;
 800d1de:	e014      	b.n	800d20a <DeriveSessionKey11x+0x92>
        case S_NWK_S_INT_KEY:
            compBase[0] = 0x03;
 800d1e0:	2314      	movs	r3, #20
 800d1e2:	18fb      	adds	r3, r7, r3
 800d1e4:	2203      	movs	r2, #3
 800d1e6:	701a      	strb	r2, [r3, #0]
            break;
 800d1e8:	e00f      	b.n	800d20a <DeriveSessionKey11x+0x92>
        case NWK_S_ENC_KEY:
            compBase[0] = 0x04;
 800d1ea:	2314      	movs	r3, #20
 800d1ec:	18fb      	adds	r3, r7, r3
 800d1ee:	2204      	movs	r2, #4
 800d1f0:	701a      	strb	r2, [r3, #0]
            break;
 800d1f2:	e00a      	b.n	800d20a <DeriveSessionKey11x+0x92>
        case APP_S_KEY:
            rootKeyId = APP_KEY;
 800d1f4:	2327      	movs	r3, #39	; 0x27
 800d1f6:	18fb      	adds	r3, r7, r3
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	701a      	strb	r2, [r3, #0]
            compBase[0] = 0x02;
 800d1fc:	2314      	movs	r3, #20
 800d1fe:	18fb      	adds	r3, r7, r3
 800d200:	2202      	movs	r2, #2
 800d202:	701a      	strb	r2, [r3, #0]
            break;
 800d204:	e001      	b.n	800d20a <DeriveSessionKey11x+0x92>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d206:	2308      	movs	r3, #8
 800d208:	e026      	b.n	800d258 <DeriveSessionKey11x+0xe0>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 800d20a:	2514      	movs	r5, #20
 800d20c:	197b      	adds	r3, r7, r5
 800d20e:	3301      	adds	r3, #1
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	2203      	movs	r2, #3
 800d214:	0018      	movs	r0, r3
 800d216:	f00f fd61 	bl	801ccdc <memcpy1>
    memcpyr( compBase + 4, joinEUI, 8 );
 800d21a:	197b      	adds	r3, r7, r5
 800d21c:	3304      	adds	r3, #4
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	2208      	movs	r2, #8
 800d222:	0018      	movs	r0, r3
 800d224:	f00f fd75 	bl	801cd12 <memcpyr>
    memcpy1( compBase + 12, devNonce, 2 );
 800d228:	197b      	adds	r3, r7, r5
 800d22a:	330c      	adds	r3, #12
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	2202      	movs	r2, #2
 800d230:	0018      	movs	r0, r3
 800d232:	f00f fd53 	bl	801ccdc <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d236:	230f      	movs	r3, #15
 800d238:	18fb      	adds	r3, r7, r3
 800d23a:	781c      	ldrb	r4, [r3, #0]
 800d23c:	2327      	movs	r3, #39	; 0x27
 800d23e:	18fb      	adds	r3, r7, r3
 800d240:	781a      	ldrb	r2, [r3, #0]
 800d242:	1979      	adds	r1, r7, r5
 800d244:	4b06      	ldr	r3, [pc, #24]	; (800d260 <DeriveSessionKey11x+0xe8>)
 800d246:	6818      	ldr	r0, [r3, #0]
 800d248:	0023      	movs	r3, r4
 800d24a:	f7fb feab 	bl	8008fa4 <SecureElementDeriveAndStoreKey>
 800d24e:	1e03      	subs	r3, r0, #0
 800d250:	d001      	beq.n	800d256 <DeriveSessionKey11x+0xde>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d252:	230c      	movs	r3, #12
 800d254:	e000      	b.n	800d258 <DeriveSessionKey11x+0xe0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d256:	2300      	movs	r3, #0
}
 800d258:	0018      	movs	r0, r3
 800d25a:	46bd      	mov	sp, r7
 800d25c:	b00a      	add	sp, #40	; 0x28
 800d25e:	bdb0      	pop	{r4, r5, r7, pc}
 800d260:	20000a20 	.word	0x20000a20

0800d264 <DeriveLifeTimeSessionKey>:
 * \param[IN]  keyID          - Key Identifier for the key to be calculated
 * \param[IN]  devEUI         - Device EUI
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveLifeTimeSessionKey( KeyIdentifier_t keyID, uint8_t* devEUI )
{
 800d264:	b590      	push	{r4, r7, lr}
 800d266:	b087      	sub	sp, #28
 800d268:	af00      	add	r7, sp, #0
 800d26a:	0002      	movs	r2, r0
 800d26c:	6039      	str	r1, [r7, #0]
 800d26e:	1dfb      	adds	r3, r7, #7
 800d270:	701a      	strb	r2, [r3, #0]
    if( devEUI == 0 )
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d101      	bne.n	800d27c <DeriveLifeTimeSessionKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d278:	2307      	movs	r3, #7
 800d27a:	e030      	b.n	800d2de <DeriveLifeTimeSessionKey+0x7a>
    }

    uint8_t compBase[16] = { 0 };
 800d27c:	2308      	movs	r3, #8
 800d27e:	18fb      	adds	r3, r7, r3
 800d280:	0018      	movs	r0, r3
 800d282:	2310      	movs	r3, #16
 800d284:	001a      	movs	r2, r3
 800d286:	2100      	movs	r1, #0
 800d288:	f018 fe52 	bl	8025f30 <memset>

    switch( keyID )
 800d28c:	1dfb      	adds	r3, r7, #7
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b02      	cmp	r3, #2
 800d292:	d002      	beq.n	800d29a <DeriveLifeTimeSessionKey+0x36>
 800d294:	2b03      	cmp	r3, #3
 800d296:	d005      	beq.n	800d2a4 <DeriveLifeTimeSessionKey+0x40>
 800d298:	e009      	b.n	800d2ae <DeriveLifeTimeSessionKey+0x4a>
    {
        case J_S_INT_KEY:
            compBase[0] = 0x06;
 800d29a:	2308      	movs	r3, #8
 800d29c:	18fb      	adds	r3, r7, r3
 800d29e:	2206      	movs	r2, #6
 800d2a0:	701a      	strb	r2, [r3, #0]
            break;
 800d2a2:	e006      	b.n	800d2b2 <DeriveLifeTimeSessionKey+0x4e>
        case J_S_ENC_KEY:
            compBase[0] = 0x05;
 800d2a4:	2308      	movs	r3, #8
 800d2a6:	18fb      	adds	r3, r7, r3
 800d2a8:	2205      	movs	r2, #5
 800d2aa:	701a      	strb	r2, [r3, #0]
            break;
 800d2ac:	e001      	b.n	800d2b2 <DeriveLifeTimeSessionKey+0x4e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d2ae:	2308      	movs	r3, #8
 800d2b0:	e015      	b.n	800d2de <DeriveLifeTimeSessionKey+0x7a>
    }

    memcpyr( compBase + 1, devEUI, 8 );
 800d2b2:	2408      	movs	r4, #8
 800d2b4:	193b      	adds	r3, r7, r4
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	6839      	ldr	r1, [r7, #0]
 800d2ba:	2208      	movs	r2, #8
 800d2bc:	0018      	movs	r0, r3
 800d2be:	f00f fd28 	bl	801cd12 <memcpyr>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d2c2:	1dfb      	adds	r3, r7, #7
 800d2c4:	781a      	ldrb	r2, [r3, #0]
 800d2c6:	1939      	adds	r1, r7, r4
 800d2c8:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <DeriveLifeTimeSessionKey+0x84>)
 800d2ca:	6818      	ldr	r0, [r3, #0]
 800d2cc:	0013      	movs	r3, r2
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f7fb fe68 	bl	8008fa4 <SecureElementDeriveAndStoreKey>
 800d2d4:	1e03      	subs	r3, r0, #0
 800d2d6:	d001      	beq.n	800d2dc <DeriveLifeTimeSessionKey+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d2d8:	230c      	movs	r3, #12
 800d2da:	e000      	b.n	800d2de <DeriveLifeTimeSessionKey+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	0018      	movs	r0, r3
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	b007      	add	sp, #28
 800d2e4:	bd90      	pop	{r4, r7, pc}
 800d2e6:	46c0      	nop			; (mov r8, r8)
 800d2e8:	20000a20 	.word	0x20000a20

0800d2ec <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	0002      	movs	r2, r0
 800d2f4:	6039      	str	r1, [r7, #0]
 800d2f6:	1dfb      	adds	r3, r7, #7
 800d2f8:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	60fb      	str	r3, [r7, #12]
    switch( fCntID )
 800d2fe:	1dfb      	adds	r3, r7, #7
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	2b07      	cmp	r3, #7
 800d304:	d83b      	bhi.n	800d37e <CheckFCntDown+0x92>
 800d306:	009a      	lsls	r2, r3, #2
 800d308:	4b25      	ldr	r3, [pc, #148]	; (800d3a0 <CheckFCntDown+0xb4>)
 800d30a:	18d3      	adds	r3, r2, r3
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return false;
 800d310:	2300      	movs	r3, #0
 800d312:	e040      	b.n	800d396 <CheckFCntDown+0xaa>
        case N_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->NFCntDown;
 800d314:	4b23      	ldr	r3, [pc, #140]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->NFCntDown;
 800d31c:	4b21      	ldr	r3, [pc, #132]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d31e:	689a      	ldr	r2, [r3, #8]
 800d320:	4b20      	ldr	r3, [pc, #128]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	320c      	adds	r2, #12
 800d326:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d328:	e02b      	b.n	800d382 <CheckFCntDown+0x96>
        case A_FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->AFCntDown;
 800d32a:	4b1e      	ldr	r3, [pc, #120]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d32c:	689b      	ldr	r3, [r3, #8]
 800d32e:	691b      	ldr	r3, [r3, #16]
 800d330:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->AFCntDown;
 800d332:	4b1c      	ldr	r3, [pc, #112]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d334:	689a      	ldr	r2, [r3, #8]
 800d336:	4b1b      	ldr	r3, [pc, #108]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	3210      	adds	r2, #16
 800d33c:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d33e:	e020      	b.n	800d382 <CheckFCntDown+0x96>
        case FCNT_DOWN:
            lastDown = CryptoCtx.NvmCtx->FCntDown;
 800d340:	4b18      	ldr	r3, [pc, #96]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	695b      	ldr	r3, [r3, #20]
 800d346:	60fb      	str	r3, [r7, #12]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntDown;
 800d348:	4b16      	ldr	r3, [pc, #88]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d34a:	689a      	ldr	r2, [r3, #8]
 800d34c:	4b15      	ldr	r3, [pc, #84]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	3214      	adds	r2, #20
 800d352:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800d354:	e015      	b.n	800d382 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_0:
            lastDown = CryptoCtx.NvmCtx->McFCntDown0;
 800d356:	4b13      	ldr	r3, [pc, #76]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	60fb      	str	r3, [r7, #12]
            break;
 800d35e:	e010      	b.n	800d382 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_1:
            lastDown = CryptoCtx.NvmCtx->McFCntDown1;
 800d360:	4b10      	ldr	r3, [pc, #64]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	69db      	ldr	r3, [r3, #28]
 800d366:	60fb      	str	r3, [r7, #12]
            break;
 800d368:	e00b      	b.n	800d382 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_2:
            lastDown = CryptoCtx.NvmCtx->McFCntDown2;
 800d36a:	4b0e      	ldr	r3, [pc, #56]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	6a1b      	ldr	r3, [r3, #32]
 800d370:	60fb      	str	r3, [r7, #12]
            break;
 800d372:	e006      	b.n	800d382 <CheckFCntDown+0x96>
        case MC_FCNT_DOWN_3:
            lastDown = CryptoCtx.NvmCtx->McFCntDown3;
 800d374:	4b0b      	ldr	r3, [pc, #44]	; (800d3a4 <CheckFCntDown+0xb8>)
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37a:	60fb      	str	r3, [r7, #12]
            break;
 800d37c:	e001      	b.n	800d382 <CheckFCntDown+0x96>
        default:
            return false;
 800d37e:	2300      	movs	r3, #0
 800d380:	e009      	b.n	800d396 <CheckFCntDown+0xaa>
    }
    if( ( currentDown > lastDown ) ||
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	429a      	cmp	r2, r3
 800d388:	d802      	bhi.n	800d390 <CheckFCntDown+0xa4>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3301      	adds	r3, #1
 800d38e:	d101      	bne.n	800d394 <CheckFCntDown+0xa8>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
    {
        return true;
 800d390:	2301      	movs	r3, #1
 800d392:	e000      	b.n	800d396 <CheckFCntDown+0xaa>
    }
    else
    {
        return false;
 800d394:	2300      	movs	r3, #0
    }
}
 800d396:	0018      	movs	r0, r3
 800d398:	46bd      	mov	sp, r7
 800d39a:	b004      	add	sp, #16
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	46c0      	nop			; (mov r8, r8)
 800d3a0:	08027b54 	.word	0x08027b54
 800d3a4:	20000a20 	.word	0x20000a20

0800d3a8 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	0002      	movs	r2, r0
 800d3b0:	6039      	str	r1, [r7, #0]
 800d3b2:	1dfb      	adds	r3, r7, #7
 800d3b4:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 800d3b6:	1dfb      	adds	r3, r7, #7
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	2b07      	cmp	r3, #7
 800d3bc:	d827      	bhi.n	800d40e <UpdateFCntDown+0x66>
 800d3be:	009a      	lsls	r2, r3, #2
 800d3c0:	4b17      	ldr	r3, [pc, #92]	; (800d420 <UpdateFCntDown+0x78>)
 800d3c2:	18d3      	adds	r3, r2, r3
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->NFCntDown = currentDown;
 800d3c8:	4b16      	ldr	r3, [pc, #88]	; (800d424 <UpdateFCntDown+0x7c>)
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	60da      	str	r2, [r3, #12]
            break;
 800d3d0:	e01e      	b.n	800d410 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->AFCntDown = currentDown;
 800d3d2:	4b14      	ldr	r3, [pc, #80]	; (800d424 <UpdateFCntDown+0x7c>)
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	611a      	str	r2, [r3, #16]
            break;
 800d3da:	e019      	b.n	800d410 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntDown = currentDown;
 800d3dc:	4b11      	ldr	r3, [pc, #68]	; (800d424 <UpdateFCntDown+0x7c>)
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	615a      	str	r2, [r3, #20]
            break;
 800d3e4:	e014      	b.n	800d410 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->McFCntDown0 = currentDown;
 800d3e6:	4b0f      	ldr	r3, [pc, #60]	; (800d424 <UpdateFCntDown+0x7c>)
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	619a      	str	r2, [r3, #24]
            break;
 800d3ee:	e00f      	b.n	800d410 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->McFCntDown1 = currentDown;
 800d3f0:	4b0c      	ldr	r3, [pc, #48]	; (800d424 <UpdateFCntDown+0x7c>)
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	61da      	str	r2, [r3, #28]
            break;
 800d3f8:	e00a      	b.n	800d410 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->McFCntDown2 = currentDown;
 800d3fa:	4b0a      	ldr	r3, [pc, #40]	; (800d424 <UpdateFCntDown+0x7c>)
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	621a      	str	r2, [r3, #32]
            break;
 800d402:	e005      	b.n	800d410 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->McFCntDown3 = currentDown;
 800d404:	4b07      	ldr	r3, [pc, #28]	; (800d424 <UpdateFCntDown+0x7c>)
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 800d40c:	e000      	b.n	800d410 <UpdateFCntDown+0x68>
        default:
            break;
 800d40e:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d410:	4b04      	ldr	r3, [pc, #16]	; (800d424 <UpdateFCntDown+0x7c>)
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	4798      	blx	r3
}
 800d416:	46c0      	nop			; (mov r8, r8)
 800d418:	46bd      	mov	sp, r7
 800d41a:	b002      	add	sp, #8
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	46c0      	nop			; (mov r8, r8)
 800d420:	08027b74 	.word	0x08027b74
 800d424:	20000a20 	.word	0x20000a20

0800d428 <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800d428:	b5b0      	push	{r4, r5, r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d101      	bne.n	800d43a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d436:	2307      	movs	r3, #7
 800d438:	e064      	b.n	800d504 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 800d43a:	230f      	movs	r3, #15
 800d43c:	18fb      	adds	r3, r7, r3
 800d43e:	2201      	movs	r2, #1
 800d440:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800d442:	240e      	movs	r4, #14
 800d444:	193b      	adds	r3, r7, r4
 800d446:	2210      	movs	r2, #16
 800d448:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#ifdef NONCE_INC
    CryptoCtx.NvmCtx->DevNonce++;
#else  
    CryptoCtx.NvmCtx->DevNonce = (uint16_t) rand1( );
 800d44a:	f00f fc15 	bl	801cc78 <rand1>
 800d44e:	0002      	movs	r2, r0
 800d450:	4b2e      	ldr	r3, [pc, #184]	; (800d50c <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	b292      	uxth	r2, r2
 800d456:	801a      	strh	r2, [r3, #0]
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d458:	4b2c      	ldr	r3, [pc, #176]	; (800d50c <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800d45e:	4b2b      	ldr	r3, [pc, #172]	; (800d50c <LoRaMacCryptoPrepareJoinRequest+0xe4>)
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	881a      	ldrh	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	82da      	strh	r2, [r3, #22]

    // Derive lifetime session keys
    retval = DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI );
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	330e      	adds	r3, #14
 800d46c:	0025      	movs	r5, r4
 800d46e:	193c      	adds	r4, r7, r4
 800d470:	0019      	movs	r1, r3
 800d472:	2002      	movs	r0, #2
 800d474:	f7ff fef6 	bl	800d264 <DeriveLifeTimeSessionKey>
 800d478:	0003      	movs	r3, r0
 800d47a:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d47c:	002c      	movs	r4, r5
 800d47e:	193b      	adds	r3, r7, r4
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <LoRaMacCryptoPrepareJoinRequest+0x66>
    {
        return retval;
 800d486:	230e      	movs	r3, #14
 800d488:	18fb      	adds	r3, r7, r3
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	e03a      	b.n	800d504 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }
    retval = DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI );
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	330e      	adds	r3, #14
 800d492:	250e      	movs	r5, #14
 800d494:	197c      	adds	r4, r7, r5
 800d496:	0019      	movs	r1, r3
 800d498:	2003      	movs	r0, #3
 800d49a:	f7ff fee3 	bl	800d264 <DeriveLifeTimeSessionKey>
 800d49e:	0003      	movs	r3, r0
 800d4a0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d4a2:	197b      	adds	r3, r7, r5
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d003      	beq.n	800d4b2 <LoRaMacCryptoPrepareJoinRequest+0x8a>
    {
        return retval;
 800d4aa:	230e      	movs	r3, #14
 800d4ac:	18fb      	adds	r3, r7, r3
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	e028      	b.n	800d504 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	0018      	movs	r0, r3
 800d4b6:	f000 fffc 	bl	800e4b2 <LoRaMacSerializerJoinRequest>
 800d4ba:	1e03      	subs	r3, r0, #0
 800d4bc:	d001      	beq.n	800d4c2 <LoRaMacCryptoPrepareJoinRequest+0x9a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d4be:	230e      	movs	r3, #14
 800d4c0:	e020      	b.n	800d504 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Compute mic
    retval = LoraMacCryptoComputeCmac( macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC );
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6818      	ldr	r0, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3318      	adds	r3, #24
 800d4ca:	0019      	movs	r1, r3
 800d4cc:	250e      	movs	r5, #14
 800d4ce:	197c      	adds	r4, r7, r5
 800d4d0:	230f      	movs	r3, #15
 800d4d2:	18fb      	adds	r3, r7, r3
 800d4d4:	781a      	ldrb	r2, [r3, #0]
 800d4d6:	000b      	movs	r3, r1
 800d4d8:	2113      	movs	r1, #19
 800d4da:	f7ff fa68 	bl	800c9ae <LoraMacCryptoComputeCmac>
 800d4de:	0003      	movs	r3, r0
 800d4e0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d4e2:	197b      	adds	r3, r7, r5
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d003      	beq.n	800d4f2 <LoRaMacCryptoPrepareJoinRequest+0xca>
    {
        return retval;
 800d4ea:	230e      	movs	r3, #14
 800d4ec:	18fb      	adds	r3, r7, r3
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	e008      	b.n	800d504 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	0018      	movs	r0, r3
 800d4f6:	f000 ffdc 	bl	800e4b2 <LoRaMacSerializerJoinRequest>
 800d4fa:	1e03      	subs	r3, r0, #0
 800d4fc:	d001      	beq.n	800d502 <LoRaMacCryptoPrepareJoinRequest+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d4fe:	230e      	movs	r3, #14
 800d500:	e000      	b.n	800d504 <LoRaMacCryptoPrepareJoinRequest+0xdc>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800d502:	2300      	movs	r3, #0
}
 800d504:	0018      	movs	r0, r3
 800d506:	46bd      	mov	sp, r7
 800d508:	b004      	add	sp, #16
 800d50a:	bdb0      	pop	{r4, r5, r7, pc}
 800d50c:	20000a20 	.word	0x20000a20

0800d510 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 800d510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d512:	b0cd      	sub	sp, #308	; 0x134
 800d514:	af00      	add	r7, sp, #0
 800d516:	60b9      	str	r1, [r7, #8]
 800d518:	607a      	str	r2, [r7, #4]
 800d51a:	4bde      	ldr	r3, [pc, #888]	; (800d894 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d51c:	2298      	movs	r2, #152	; 0x98
 800d51e:	0052      	lsls	r2, r2, #1
 800d520:	4694      	mov	ip, r2
 800d522:	44bc      	add	ip, r7
 800d524:	4463      	add	r3, ip
 800d526:	1c02      	adds	r2, r0, #0
 800d528:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <LoRaMacCryptoHandleJoinAccept+0x26>
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d101      	bne.n	800d53a <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d536:	2307      	movs	r3, #7
 800d538:	e25e      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800d53a:	2328      	movs	r3, #40	; 0x28
 800d53c:	33ff      	adds	r3, #255	; 0xff
 800d53e:	18fb      	adds	r3, r7, r3
 800d540:	2210      	movs	r2, #16
 800d542:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 800d544:	232e      	movs	r3, #46	; 0x2e
 800d546:	33ff      	adds	r3, #255	; 0xff
 800d548:	18fb      	adds	r3, r7, r3
 800d54a:	2200      	movs	r2, #0
 800d54c:	701a      	strb	r2, [r3, #0]
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
 800d54e:	4bd2      	ldr	r3, [pc, #840]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	2294      	movs	r2, #148	; 0x94
 800d554:	0052      	lsls	r2, r2, #1
 800d556:	18ba      	adds	r2, r7, r2
 800d558:	6013      	str	r3, [r2, #0]

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 800d55a:	4bce      	ldr	r3, [pc, #824]	; (800d894 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d55c:	2298      	movs	r2, #152	; 0x98
 800d55e:	0052      	lsls	r2, r2, #1
 800d560:	4694      	mov	ip, r2
 800d562:	44bc      	add	ip, r7
 800d564:	4463      	add	r3, ip
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	2bff      	cmp	r3, #255	; 0xff
 800d56a:	d10a      	bne.n	800d582 <LoRaMacCryptoHandleJoinAccept+0x72>
    {
        encryptionKeyID = NWK_KEY;
 800d56c:	2397      	movs	r3, #151	; 0x97
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	18fb      	adds	r3, r7, r3
 800d572:	2201      	movs	r2, #1
 800d574:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 800d576:	232e      	movs	r3, #46	; 0x2e
 800d578:	33ff      	adds	r3, #255	; 0xff
 800d57a:	18fb      	adds	r3, r7, r3
 800d57c:	220c      	movs	r2, #12
 800d57e:	701a      	strb	r2, [r3, #0]
 800d580:	e023      	b.n	800d5ca <LoRaMacCryptoHandleJoinAccept+0xba>
    }
    else
    {
        encryptionKeyID = J_S_ENC_KEY;
 800d582:	2397      	movs	r3, #151	; 0x97
 800d584:	005b      	lsls	r3, r3, #1
 800d586:	18fb      	adds	r3, r7, r3
 800d588:	2203      	movs	r2, #3
 800d58a:	701a      	strb	r2, [r3, #0]

        // If Join-accept is a reply to a rejoin, the RJcount(0 or 1) replaces DevNonce in the key derivation process.
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 800d58c:	4bc1      	ldr	r3, [pc, #772]	; (800d894 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d58e:	2298      	movs	r2, #152	; 0x98
 800d590:	0052      	lsls	r2, r2, #1
 800d592:	4694      	mov	ip, r2
 800d594:	44bc      	add	ip, r7
 800d596:	4463      	add	r3, ip
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d008      	beq.n	800d5b0 <LoRaMacCryptoHandleJoinAccept+0xa0>
 800d59e:	4bbd      	ldr	r3, [pc, #756]	; (800d894 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d5a0:	2298      	movs	r2, #152	; 0x98
 800d5a2:	0052      	lsls	r2, r2, #1
 800d5a4:	4694      	mov	ip, r2
 800d5a6:	44bc      	add	ip, r7
 800d5a8:	4463      	add	r3, ip
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	d105      	bne.n	800d5bc <LoRaMacCryptoHandleJoinAccept+0xac>
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.RJcount0;
 800d5b0:	4bba      	ldr	r3, [pc, #744]	; (800d89c <LoRaMacCryptoHandleJoinAccept+0x38c>)
 800d5b2:	2294      	movs	r2, #148	; 0x94
 800d5b4:	0052      	lsls	r2, r2, #1
 800d5b6:	18ba      	adds	r2, r7, r2
 800d5b8:	6013      	str	r3, [r2, #0]
 800d5ba:	e006      	b.n	800d5ca <LoRaMacCryptoHandleJoinAccept+0xba>
        }
        else
        {
            devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->RJcount1;
 800d5bc:	4bb6      	ldr	r3, [pc, #728]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	3328      	adds	r3, #40	; 0x28
 800d5c2:	2294      	movs	r2, #148	; 0x94
 800d5c4:	0052      	lsls	r2, r2, #1
 800d5c6:	18ba      	adds	r2, r7, r2
 800d5c8:	6013      	str	r3, [r2, #0]
        }
    }

    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	242e      	movs	r4, #46	; 0x2e
 800d5d2:	34ff      	adds	r4, #255	; 0xff
 800d5d4:	193b      	adds	r3, r7, r4
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	18d3      	adds	r3, r2, r3
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	2514      	movs	r5, #20
 800d5e0:	197b      	adds	r3, r7, r5
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	0018      	movs	r0, r3
 800d5e6:	f00f fbb5 	bl	801cd54 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	1c58      	adds	r0, r3, #1
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	791b      	ldrb	r3, [r3, #4]
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	b299      	uxth	r1, r3
 800d5fa:	193b      	adds	r3, r7, r4
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	197a      	adds	r2, r7, r5
 800d600:	18d4      	adds	r4, r2, r3
 800d602:	2397      	movs	r3, #151	; 0x97
 800d604:	005b      	lsls	r3, r3, #1
 800d606:	18fb      	adds	r3, r7, r3
 800d608:	781a      	ldrb	r2, [r3, #0]
 800d60a:	0023      	movs	r3, r4
 800d60c:	f7fb fc60 	bl	8008ed0 <SecureElementAesEncrypt>
 800d610:	1e03      	subs	r3, r0, #0
 800d612:	d001      	beq.n	800d618 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d614:	230c      	movs	r3, #12
 800d616:	e1ef      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	1c58      	adds	r0, r3, #1
 800d61e:	232e      	movs	r3, #46	; 0x2e
 800d620:	33ff      	adds	r3, #255	; 0xff
 800d622:	18fb      	adds	r3, r7, r3
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2214      	movs	r2, #20
 800d628:	18ba      	adds	r2, r7, r2
 800d62a:	18d1      	adds	r1, r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	791b      	ldrb	r3, [r3, #4]
 800d630:	b29b      	uxth	r3, r3
 800d632:	3b01      	subs	r3, #1
 800d634:	b29b      	uxth	r3, r3
 800d636:	001a      	movs	r2, r3
 800d638:	f00f fb50 	bl	801ccdc <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	0018      	movs	r0, r3
 800d640:	f000 fd34 	bl	800e0ac <LoRaMacParserJoinAccept>
 800d644:	1e03      	subs	r3, r0, #0
 800d646:	d001      	beq.n	800d64c <LoRaMacCryptoHandleJoinAccept+0x13c>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d648:	230d      	movs	r3, #13
 800d64a:	e1d5      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7c1b      	ldrb	r3, [r3, #16]
 800d650:	227f      	movs	r2, #127	; 0x7f
 800d652:	4393      	bics	r3, r2
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d008      	beq.n	800d66c <LoRaMacCryptoHandleJoinAccept+0x15c>
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 1;
 800d65a:	4b8f      	ldr	r3, [pc, #572]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 800d660:	2330      	movs	r3, #48	; 0x30
 800d662:	33ff      	adds	r3, #255	; 0xff
 800d664:	18fb      	adds	r3, r7, r3
 800d666:	2202      	movs	r2, #2
 800d668:	701a      	strb	r2, [r3, #0]
 800d66a:	e007      	b.n	800d67c <LoRaMacCryptoHandleJoinAccept+0x16c>
    }
    else
    {
        CryptoCtx.LrWanVersion.Fields.Minor = 0;
 800d66c:	4b8a      	ldr	r3, [pc, #552]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d66e:	2200      	movs	r2, #0
 800d670:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 800d672:	2330      	movs	r3, #48	; 0x30
 800d674:	33ff      	adds	r3, #255	; 0xff
 800d676:	18fb      	adds	r3, r7, r3
 800d678:	2201      	movs	r2, #1
 800d67a:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 800d67c:	4b86      	ldr	r3, [pc, #536]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d67e:	789b      	ldrb	r3, [r3, #2]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d11e      	bne.n	800d6c2 <LoRaMacCryptoHandleJoinAccept+0x1b2>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        retval = VerifyCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6818      	ldr	r0, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	791b      	ldrb	r3, [r3, #4]
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	3b04      	subs	r3, #4
 800d690:	b299      	uxth	r1, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d696:	2628      	movs	r6, #40	; 0x28
 800d698:	36ff      	adds	r6, #255	; 0xff
 800d69a:	19bc      	adds	r4, r7, r6
 800d69c:	2330      	movs	r3, #48	; 0x30
 800d69e:	33ff      	adds	r3, #255	; 0xff
 800d6a0:	18fb      	adds	r3, r7, r3
 800d6a2:	781a      	ldrb	r2, [r3, #0]
 800d6a4:	002b      	movs	r3, r5
 800d6a6:	f7ff f9a3 	bl	800c9f0 <VerifyCmac>
 800d6aa:	0003      	movs	r3, r0
 800d6ac:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6ae:	19bb      	adds	r3, r7, r6
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d100      	bne.n	800d6b8 <LoRaMacCryptoHandleJoinAccept+0x1a8>
 800d6b6:	e0b9      	b.n	800d82c <LoRaMacCryptoHandleJoinAccept+0x31c>
        {
            return retval;
 800d6b8:	2328      	movs	r3, #40	; 0x28
 800d6ba:	33ff      	adds	r3, #255	; 0xff
 800d6bc:	18fb      	adds	r3, r7, r3
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	e19a      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 800d6c2:	2092      	movs	r0, #146	; 0x92
 800d6c4:	0040      	lsls	r0, r0, #1
 800d6c6:	183b      	adds	r3, r7, r0
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800d6cc:	183b      	adds	r3, r7, r0
 800d6ce:	881b      	ldrh	r3, [r3, #0]
 800d6d0:	183a      	adds	r2, r7, r0
 800d6d2:	1c59      	adds	r1, r3, #1
 800d6d4:	8011      	strh	r1, [r2, #0]
 800d6d6:	0019      	movs	r1, r3
 800d6d8:	4b71      	ldr	r3, [pc, #452]	; (800d8a0 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d6da:	2298      	movs	r2, #152	; 0x98
 800d6dc:	0052      	lsls	r2, r2, #1
 800d6de:	4694      	mov	ip, r2
 800d6e0:	44bc      	add	ip, r7
 800d6e2:	4463      	add	r3, ip
 800d6e4:	4a6b      	ldr	r2, [pc, #428]	; (800d894 <LoRaMacCryptoHandleJoinAccept+0x384>)
 800d6e6:	2498      	movs	r4, #152	; 0x98
 800d6e8:	0064      	lsls	r4, r4, #1
 800d6ea:	46a4      	mov	ip, r4
 800d6ec:	44bc      	add	ip, r7
 800d6ee:	4462      	add	r2, ip
 800d6f0:	7812      	ldrb	r2, [r2, #0]
 800d6f2:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d6f4:	0004      	movs	r4, r0
 800d6f6:	183b      	adds	r3, r7, r0
 800d6f8:	881b      	ldrh	r3, [r3, #0]
 800d6fa:	2614      	movs	r6, #20
 800d6fc:	19ba      	adds	r2, r7, r6
 800d6fe:	18d3      	adds	r3, r2, r3
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	2208      	movs	r2, #8
 800d704:	0018      	movs	r0, r3
 800d706:	f00f fb04 	bl	801cd12 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800d70a:	0020      	movs	r0, r4
 800d70c:	183b      	adds	r3, r7, r0
 800d70e:	183a      	adds	r2, r7, r0
 800d710:	8812      	ldrh	r2, [r2, #0]
 800d712:	3208      	adds	r2, #8
 800d714:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800d716:	4b60      	ldr	r3, [pc, #384]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	8819      	ldrh	r1, [r3, #0]
 800d71c:	183b      	adds	r3, r7, r0
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	0004      	movs	r4, r0
 800d722:	183a      	adds	r2, r7, r0
 800d724:	1c58      	adds	r0, r3, #1
 800d726:	8010      	strh	r0, [r2, #0]
 800d728:	001a      	movs	r2, r3
 800d72a:	b2c9      	uxtb	r1, r1
 800d72c:	4b5c      	ldr	r3, [pc, #368]	; (800d8a0 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d72e:	2098      	movs	r0, #152	; 0x98
 800d730:	0040      	lsls	r0, r0, #1
 800d732:	4684      	mov	ip, r0
 800d734:	44bc      	add	ip, r7
 800d736:	4463      	add	r3, ip
 800d738:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800d73a:	4b57      	ldr	r3, [pc, #348]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	881b      	ldrh	r3, [r3, #0]
 800d740:	0a1b      	lsrs	r3, r3, #8
 800d742:	b299      	uxth	r1, r3
 800d744:	193b      	adds	r3, r7, r4
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	193a      	adds	r2, r7, r4
 800d74a:	1c58      	adds	r0, r3, #1
 800d74c:	8010      	strh	r0, [r2, #0]
 800d74e:	001a      	movs	r2, r3
 800d750:	b2c9      	uxtb	r1, r1
 800d752:	4b53      	ldr	r3, [pc, #332]	; (800d8a0 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d754:	2098      	movs	r0, #152	; 0x98
 800d756:	0040      	lsls	r0, r0, #1
 800d758:	4684      	mov	ip, r0
 800d75a:	44bc      	add	ip, r7
 800d75c:	4463      	add	r3, ip
 800d75e:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 800d760:	193b      	adds	r3, r7, r4
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	193a      	adds	r2, r7, r4
 800d766:	1c59      	adds	r1, r3, #1
 800d768:	8011      	strh	r1, [r2, #0]
 800d76a:	001a      	movs	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	7959      	ldrb	r1, [r3, #5]
 800d770:	4b4b      	ldr	r3, [pc, #300]	; (800d8a0 <LoRaMacCryptoHandleJoinAccept+0x390>)
 800d772:	2098      	movs	r0, #152	; 0x98
 800d774:	0040      	lsls	r0, r0, #1
 800d776:	4684      	mov	ip, r0
 800d778:	44bc      	add	ip, r7
 800d77a:	4463      	add	r3, ip
 800d77c:	5499      	strb	r1, [r3, r2]

        retval = VerifyCmac( procBuffer, ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, macMsg->MIC );
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	791b      	ldrb	r3, [r3, #4]
 800d782:	b29a      	uxth	r2, r3
 800d784:	232e      	movs	r3, #46	; 0x2e
 800d786:	33ff      	adds	r3, #255	; 0xff
 800d788:	18fb      	adds	r3, r7, r3
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	18d3      	adds	r3, r2, r3
 800d790:	b29b      	uxth	r3, r3
 800d792:	3b05      	subs	r3, #5
 800d794:	b299      	uxth	r1, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d79a:	2328      	movs	r3, #40	; 0x28
 800d79c:	33ff      	adds	r3, #255	; 0xff
 800d79e:	18fc      	adds	r4, r7, r3
 800d7a0:	2230      	movs	r2, #48	; 0x30
 800d7a2:	32ff      	adds	r2, #255	; 0xff
 800d7a4:	18bb      	adds	r3, r7, r2
 800d7a6:	781a      	ldrb	r2, [r3, #0]
 800d7a8:	19b8      	adds	r0, r7, r6
 800d7aa:	002b      	movs	r3, r5
 800d7ac:	f7ff f920 	bl	800c9f0 <VerifyCmac>
 800d7b0:	0003      	movs	r3, r0
 800d7b2:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d7b4:	2328      	movs	r3, #40	; 0x28
 800d7b6:	33ff      	adds	r3, #255	; 0xff
 800d7b8:	18fb      	adds	r3, r7, r3
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d004      	beq.n	800d7ca <LoRaMacCryptoHandleJoinAccept+0x2ba>
        {
            return retval;
 800d7c0:	2328      	movs	r3, #40	; 0x28
 800d7c2:	33ff      	adds	r3, #255	; 0xff
 800d7c4:	18fb      	adds	r3, r7, r3
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	e116      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	2290      	movs	r2, #144	; 0x90
 800d7ce:	0052      	lsls	r2, r2, #1
 800d7d0:	18b9      	adds	r1, r7, r2
 800d7d2:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	799b      	ldrb	r3, [r3, #6]
 800d7d8:	18b9      	adds	r1, r7, r2
 800d7da:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	79db      	ldrb	r3, [r3, #7]
 800d7e0:	021b      	lsls	r3, r3, #8
 800d7e2:	0011      	movs	r1, r2
 800d7e4:	18ba      	adds	r2, r7, r2
 800d7e6:	6812      	ldr	r2, [r2, #0]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	000a      	movs	r2, r1
 800d7ec:	18b9      	adds	r1, r7, r2
 800d7ee:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7a1b      	ldrb	r3, [r3, #8]
 800d7f4:	041b      	lsls	r3, r3, #16
 800d7f6:	0011      	movs	r1, r2
 800d7f8:	18ba      	adds	r2, r7, r2
 800d7fa:	6812      	ldr	r2, [r2, #0]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	000a      	movs	r2, r1
 800d800:	18b9      	adds	r1, r7, r2
 800d802:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800d804:	4b24      	ldr	r3, [pc, #144]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	18ba      	adds	r2, r7, r2
 800d80c:	6812      	ldr	r2, [r2, #0]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d90a      	bls.n	800d828 <LoRaMacCryptoHandleJoinAccept+0x318>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 800d812:	4b21      	ldr	r3, [pc, #132]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	2290      	movs	r2, #144	; 0x90
 800d818:	0052      	lsls	r2, r2, #1
 800d81a:	18ba      	adds	r2, r7, r2
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	605a      	str	r2, [r3, #4]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 800d820:	4b1d      	ldr	r3, [pc, #116]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	4798      	blx	r3
 800d826:	e001      	b.n	800d82c <LoRaMacCryptoHandleJoinAccept+0x31c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d828:	2303      	movs	r3, #3
 800d82a:	e0e5      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Derive session keys
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800d82c:	4b1a      	ldr	r3, [pc, #104]	; (800d898 <LoRaMacCryptoHandleJoinAccept+0x388>)
 800d82e:	789b      	ldrb	r3, [r3, #2]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d167      	bne.n	800d904 <LoRaMacCryptoHandleJoinAccept+0x3f4>
    {
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	1d99      	adds	r1, r3, #6
 800d838:	2528      	movs	r5, #40	; 0x28
 800d83a:	35ff      	adds	r5, #255	; 0xff
 800d83c:	197c      	adds	r4, r7, r5
 800d83e:	2394      	movs	r3, #148	; 0x94
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	18fb      	adds	r3, r7, r3
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	2004      	movs	r0, #4
 800d84a:	f7ff fc95 	bl	800d178 <DeriveSessionKey11x>
 800d84e:	0003      	movs	r3, r0
 800d850:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d852:	197b      	adds	r3, r7, r5
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d004      	beq.n	800d864 <LoRaMacCryptoHandleJoinAccept+0x354>
        {
            return retval;
 800d85a:	2328      	movs	r3, #40	; 0x28
 800d85c:	33ff      	adds	r3, #255	; 0xff
 800d85e:	18fb      	adds	r3, r7, r3
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	e0c9      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	1d99      	adds	r1, r3, #6
 800d868:	2528      	movs	r5, #40	; 0x28
 800d86a:	35ff      	adds	r5, #255	; 0xff
 800d86c:	197c      	adds	r4, r7, r5
 800d86e:	2394      	movs	r3, #148	; 0x94
 800d870:	005b      	lsls	r3, r3, #1
 800d872:	18fb      	adds	r3, r7, r3
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	2005      	movs	r0, #5
 800d87a:	f7ff fc7d 	bl	800d178 <DeriveSessionKey11x>
 800d87e:	0003      	movs	r3, r0
 800d880:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d882:	197b      	adds	r3, r7, r5
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00c      	beq.n	800d8a4 <LoRaMacCryptoHandleJoinAccept+0x394>
        {
            return retval;
 800d88a:	2328      	movs	r3, #40	; 0x28
 800d88c:	33ff      	adds	r3, #255	; 0xff
 800d88e:	18fb      	adds	r3, r7, r3
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	e0b1      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
 800d894:	fffffedf 	.word	0xfffffedf
 800d898:	20000a20 	.word	0x20000a20
 800d89c:	20000a24 	.word	0x20000a24
 800d8a0:	fffffee4 	.word	0xfffffee4
        }

        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	1d99      	adds	r1, r3, #6
 800d8a8:	2528      	movs	r5, #40	; 0x28
 800d8aa:	35ff      	adds	r5, #255	; 0xff
 800d8ac:	197c      	adds	r4, r7, r5
 800d8ae:	2394      	movs	r3, #148	; 0x94
 800d8b0:	005b      	lsls	r3, r3, #1
 800d8b2:	18fb      	adds	r3, r7, r3
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	2006      	movs	r0, #6
 800d8ba:	f7ff fc5d 	bl	800d178 <DeriveSessionKey11x>
 800d8be:	0003      	movs	r3, r0
 800d8c0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d8c2:	197b      	adds	r3, r7, r5
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d004      	beq.n	800d8d4 <LoRaMacCryptoHandleJoinAccept+0x3c4>
        {
            return retval;
 800d8ca:	2328      	movs	r3, #40	; 0x28
 800d8cc:	33ff      	adds	r3, #255	; 0xff
 800d8ce:	18fb      	adds	r3, r7, r3
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	e091      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey11x( APP_S_KEY, macMsg->JoinNonce, joinEUI, devNonceForKeyDerivation );
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	1d99      	adds	r1, r3, #6
 800d8d8:	2528      	movs	r5, #40	; 0x28
 800d8da:	35ff      	adds	r5, #255	; 0xff
 800d8dc:	197c      	adds	r4, r7, r5
 800d8de:	2394      	movs	r3, #148	; 0x94
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	18fb      	adds	r3, r7, r3
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68ba      	ldr	r2, [r7, #8]
 800d8e8:	2007      	movs	r0, #7
 800d8ea:	f7ff fc45 	bl	800d178 <DeriveSessionKey11x>
 800d8ee:	0003      	movs	r3, r0
 800d8f0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d8f2:	197b      	adds	r3, r7, r5
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d064      	beq.n	800d9c4 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 800d8fa:	2328      	movs	r3, #40	; 0x28
 800d8fc:	33ff      	adds	r3, #255	; 0xff
 800d8fe:	18fb      	adds	r3, r7, r3
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	e079      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
    }
    else
    {
        // prior LoRaWAN 1.1.0

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	1d99      	adds	r1, r3, #6
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	3309      	adds	r3, #9
 800d90c:	001a      	movs	r2, r3
 800d90e:	4b3c      	ldr	r3, [pc, #240]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	2528      	movs	r5, #40	; 0x28
 800d914:	35ff      	adds	r5, #255	; 0xff
 800d916:	197c      	adds	r4, r7, r5
 800d918:	2007      	movs	r0, #7
 800d91a:	f7ff fbcf 	bl	800d0bc <DeriveSessionKey10x>
 800d91e:	0003      	movs	r3, r0
 800d920:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d922:	197b      	adds	r3, r7, r5
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d004      	beq.n	800d934 <LoRaMacCryptoHandleJoinAccept+0x424>
        {
            return retval;
 800d92a:	2328      	movs	r3, #40	; 0x28
 800d92c:	33ff      	adds	r3, #255	; 0xff
 800d92e:	18fb      	adds	r3, r7, r3
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	e061      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	1d99      	adds	r1, r3, #6
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	3309      	adds	r3, #9
 800d93c:	001a      	movs	r2, r3
 800d93e:	4b30      	ldr	r3, [pc, #192]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	2528      	movs	r5, #40	; 0x28
 800d944:	35ff      	adds	r5, #255	; 0xff
 800d946:	197c      	adds	r4, r7, r5
 800d948:	2006      	movs	r0, #6
 800d94a:	f7ff fbb7 	bl	800d0bc <DeriveSessionKey10x>
 800d94e:	0003      	movs	r3, r0
 800d950:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d952:	197b      	adds	r3, r7, r5
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d004      	beq.n	800d964 <LoRaMacCryptoHandleJoinAccept+0x454>
        {
            return retval;
 800d95a:	2328      	movs	r3, #40	; 0x28
 800d95c:	33ff      	adds	r3, #255	; 0xff
 800d95e:	18fb      	adds	r3, r7, r3
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	e049      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	1d99      	adds	r1, r3, #6
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	3309      	adds	r3, #9
 800d96c:	001a      	movs	r2, r3
 800d96e:	4b24      	ldr	r3, [pc, #144]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	2528      	movs	r5, #40	; 0x28
 800d974:	35ff      	adds	r5, #255	; 0xff
 800d976:	197c      	adds	r4, r7, r5
 800d978:	2004      	movs	r0, #4
 800d97a:	f7ff fb9f 	bl	800d0bc <DeriveSessionKey10x>
 800d97e:	0003      	movs	r3, r0
 800d980:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d982:	197b      	adds	r3, r7, r5
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d004      	beq.n	800d994 <LoRaMacCryptoHandleJoinAccept+0x484>
        {
            return retval;
 800d98a:	2328      	movs	r3, #40	; 0x28
 800d98c:	33ff      	adds	r3, #255	; 0xff
 800d98e:	18fb      	adds	r3, r7, r3
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	e031      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	1d99      	adds	r1, r3, #6
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	3309      	adds	r3, #9
 800d99c:	001a      	movs	r2, r3
 800d99e:	4b18      	ldr	r3, [pc, #96]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	2528      	movs	r5, #40	; 0x28
 800d9a4:	35ff      	adds	r5, #255	; 0xff
 800d9a6:	197c      	adds	r4, r7, r5
 800d9a8:	2005      	movs	r0, #5
 800d9aa:	f7ff fb87 	bl	800d0bc <DeriveSessionKey10x>
 800d9ae:	0003      	movs	r3, r0
 800d9b0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d9b2:	197b      	adds	r3, r7, r5
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d004      	beq.n	800d9c4 <LoRaMacCryptoHandleJoinAccept+0x4b4>
        {
            return retval;
 800d9ba:	2328      	movs	r3, #40	; 0x28
 800d9bc:	33ff      	adds	r3, #255	; 0xff
 800d9be:	18fb      	adds	r3, r7, r3
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	e019      	b.n	800d9f8 <LoRaMacCryptoHandleJoinAccept+0x4e8>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 800d9c4:	4b0e      	ldr	r3, [pc, #56]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	809a      	strh	r2, [r3, #4]
    CryptoCtx.NvmCtx->FCntUp = 0;
 800d9ca:	4b0d      	ldr	r3, [pc, #52]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	609a      	str	r2, [r3, #8]
    CryptoCtx.NvmCtx->FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d9d2:	4b0b      	ldr	r3, [pc, #44]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	4252      	negs	r2, r2
 800d9da:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d9dc:	4b08      	ldr	r3, [pc, #32]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	4252      	negs	r2, r2
 800d9e4:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d9e6:	4b06      	ldr	r3, [pc, #24]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4252      	negs	r2, r2
 800d9ee:	611a      	str	r2, [r3, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800d9f0:	4b03      	ldr	r3, [pc, #12]	; (800da00 <LoRaMacCryptoHandleJoinAccept+0x4f0>)
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	b04d      	add	sp, #308	; 0x134
 800d9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da00:	20000a20 	.word	0x20000a20

0800da04 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800da04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da06:	b08f      	sub	sp, #60	; 0x3c
 800da08:	af06      	add	r7, sp, #24
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	0008      	movs	r0, r1
 800da0e:	0011      	movs	r1, r2
 800da10:	607b      	str	r3, [r7, #4]
 800da12:	230b      	movs	r3, #11
 800da14:	18fb      	adds	r3, r7, r3
 800da16:	1c02      	adds	r2, r0, #0
 800da18:	701a      	strb	r2, [r3, #0]
 800da1a:	230a      	movs	r3, #10
 800da1c:	18fb      	adds	r3, r7, r3
 800da1e:	1c0a      	adds	r2, r1, #0
 800da20:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800da22:	231e      	movs	r3, #30
 800da24:	18fb      	adds	r3, r7, r3
 800da26:	2210      	movs	r2, #16
 800da28:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 800da2a:	231f      	movs	r3, #31
 800da2c:	18fb      	adds	r3, r7, r3
 800da2e:	2207      	movs	r2, #7
 800da30:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800da38:	2307      	movs	r3, #7
 800da3a:	e0ff      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntUp )
 800da3c:	4b81      	ldr	r3, [pc, #516]	; (800dc44 <LoRaMacCryptoSecureMessage+0x240>)
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	429a      	cmp	r2, r3
 800da46:	d201      	bcs.n	800da4c <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 800da48:	2305      	movs	r3, #5
 800da4a:	e0f7      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2220      	movs	r2, #32
 800da50:	5c9b      	ldrb	r3, [r3, r2]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d103      	bne.n	800da5e <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 800da56:	231f      	movs	r3, #31
 800da58:	18fb      	adds	r3, r7, r3
 800da5a:	2206      	movs	r2, #6
 800da5c:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntUp )
 800da5e:	4b79      	ldr	r3, [pc, #484]	; (800dc44 <LoRaMacCryptoSecureMessage+0x240>)
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	429a      	cmp	r2, r3
 800da68:	d93e      	bls.n	800dae8 <LoRaMacCryptoSecureMessage+0xe4>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2228      	movs	r2, #40	; 0x28
 800da72:	5c9b      	ldrb	r3, [r3, r2]
 800da74:	b299      	uxth	r1, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	689d      	ldr	r5, [r3, #8]
 800da7a:	261e      	movs	r6, #30
 800da7c:	19bc      	adds	r4, r7, r6
 800da7e:	231f      	movs	r3, #31
 800da80:	18fb      	adds	r3, r7, r3
 800da82:	781a      	ldrb	r2, [r3, #0]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	2300      	movs	r3, #0
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	002b      	movs	r3, r5
 800da8e:	f7fe fdd7 	bl	800c640 <PayloadEncrypt>
 800da92:	0003      	movs	r3, r0
 800da94:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800da96:	19bb      	adds	r3, r7, r6
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d003      	beq.n	800daa6 <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 800da9e:	231e      	movs	r3, #30
 800daa0:	18fb      	adds	r3, r7, r3
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	e0ca      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
        }

        if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800daa6:	4b67      	ldr	r3, [pc, #412]	; (800dc44 <LoRaMacCryptoSecureMessage+0x240>)
 800daa8:	789b      	ldrb	r3, [r3, #2]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d11c      	bne.n	800dae8 <LoRaMacCryptoSecureMessage+0xe4>
        {
            // Encrypt FOpts
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP,  fCntUp, macMsg->FHDR.FOpts );
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	7b1b      	ldrb	r3, [r3, #12]
 800dab2:	071b      	lsls	r3, r3, #28
 800dab4:	0f1b      	lsrs	r3, r3, #28
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	b298      	uxth	r0, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6899      	ldr	r1, [r3, #8]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3310      	adds	r3, #16
 800dac2:	251e      	movs	r5, #30
 800dac4:	197c      	adds	r4, r7, r5
 800dac6:	9301      	str	r3, [sp, #4]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	2300      	movs	r3, #0
 800dace:	2200      	movs	r2, #0
 800dad0:	f7fe feb8 	bl	800c844 <FOptsEncrypt>
 800dad4:	0003      	movs	r3, r0
 800dad6:	7023      	strb	r3, [r4, #0]
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dad8:	197b      	adds	r3, r7, r5
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d003      	beq.n	800dae8 <LoRaMacCryptoSecureMessage+0xe4>
            {
                return retval;
 800dae0:	231e      	movs	r3, #30
 800dae2:	18fb      	adds	r3, r7, r3
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	e0a9      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
            }
        }
    }
    CryptoCtx.NvmCtx->FCntUp = fCntUp;
 800dae8:	4b56      	ldr	r3, [pc, #344]	; (800dc44 <LoRaMacCryptoSecureMessage+0x240>)
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	609a      	str	r2, [r3, #8]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800daf0:	4b54      	ldr	r3, [pc, #336]	; (800dc44 <LoRaMacCryptoSecureMessage+0x240>)
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	0018      	movs	r0, r3
 800dafa:	f000 fd75 	bl	800e5e8 <LoRaMacSerializerData>
 800dafe:	1e03      	subs	r3, r0, #0
 800db00:	d001      	beq.n	800db06 <LoRaMacCryptoSecureMessage+0x102>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800db02:	230e      	movs	r3, #14
 800db04:	e09a      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
    }

    // Compute mic
    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800db06:	4b4f      	ldr	r3, [pc, #316]	; (800dc44 <LoRaMacCryptoSecureMessage+0x240>)
 800db08:	789b      	ldrb	r3, [r3, #2]
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d16a      	bne.n	800dbe4 <LoRaMacCryptoSecureMessage+0x1e0>
    {
        uint32_t cmacS = 0;
 800db0e:	2300      	movs	r3, #0
 800db10:	61bb      	str	r3, [r7, #24]
        uint32_t cmacF = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	617b      	str	r3, [r7, #20]

        // cmacS  = aes128_cmac(SNwkSIntKey, B1 | msg)
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacS );
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6818      	ldr	r0, [r3, #0]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	791b      	ldrb	r3, [r3, #4]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	3b04      	subs	r3, #4
 800db22:	b299      	uxth	r1, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7b1b      	ldrb	r3, [r3, #12]
 800db28:	069b      	lsls	r3, r3, #26
 800db2a:	0fdb      	lsrs	r3, r3, #31
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	1e5a      	subs	r2, r3, #1
 800db30:	4193      	sbcs	r3, r2
 800db32:	b2dd      	uxtb	r5, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	89d2      	ldrh	r2, [r2, #14]
 800db3c:	0016      	movs	r6, r2
 800db3e:	221e      	movs	r2, #30
 800db40:	18bc      	adds	r4, r7, r2
 800db42:	2218      	movs	r2, #24
 800db44:	18ba      	adds	r2, r7, r2
 800db46:	9204      	str	r2, [sp, #16]
 800db48:	9603      	str	r6, [sp, #12]
 800db4a:	9302      	str	r3, [sp, #8]
 800db4c:	230a      	movs	r3, #10
 800db4e:	18fb      	adds	r3, r7, r3
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	9301      	str	r3, [sp, #4]
 800db54:	230b      	movs	r3, #11
 800db56:	18fb      	adds	r3, r7, r3
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	002b      	movs	r3, r5
 800db5e:	2205      	movs	r2, #5
 800db60:	f7ff f9da 	bl	800cf18 <ComputeCmacB1>
 800db64:	0003      	movs	r3, r0
 800db66:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800db68:	221e      	movs	r2, #30
 800db6a:	18bb      	adds	r3, r7, r2
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d003      	beq.n	800db7a <LoRaMacCryptoSecureMessage+0x176>
        {
            return retval;
 800db72:	231e      	movs	r3, #30
 800db74:	18fb      	adds	r3, r7, r3
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	e060      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
        }
        //cmacF = aes128_cmac(FNwkSIntKey, B0 | msg)
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &cmacF );
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6818      	ldr	r0, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	791b      	ldrb	r3, [r3, #4]
 800db82:	b29b      	uxth	r3, r3
 800db84:	3b04      	subs	r3, #4
 800db86:	b299      	uxth	r1, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7b1b      	ldrb	r3, [r3, #12]
 800db8c:	069b      	lsls	r3, r3, #26
 800db8e:	0fdb      	lsrs	r3, r3, #31
 800db90:	b2db      	uxtb	r3, r3
 800db92:	1e5a      	subs	r2, r3, #1
 800db94:	4193      	sbcs	r3, r2
 800db96:	b2dd      	uxtb	r5, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	89d2      	ldrh	r2, [r2, #14]
 800dba0:	0016      	movs	r6, r2
 800dba2:	221e      	movs	r2, #30
 800dba4:	18bc      	adds	r4, r7, r2
 800dba6:	2214      	movs	r2, #20
 800dba8:	18ba      	adds	r2, r7, r2
 800dbaa:	9203      	str	r2, [sp, #12]
 800dbac:	9602      	str	r6, [sp, #8]
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	002b      	movs	r3, r5
 800dbb6:	2204      	movs	r2, #4
 800dbb8:	f7fe ffd4 	bl	800cb64 <ComputeCmacB0>
 800dbbc:	0003      	movs	r3, r0
 800dbbe:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dbc0:	221e      	movs	r2, #30
 800dbc2:	18bb      	adds	r3, r7, r2
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d003      	beq.n	800dbd2 <LoRaMacCryptoSecureMessage+0x1ce>
        {
            return retval;
 800dbca:	231e      	movs	r3, #30
 800dbcc:	18fb      	adds	r3, r7, r3
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	e034      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
        }
        // MIC = cmacS[0..1] | cmacF[0..1]
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	041a      	lsls	r2, r3, #16
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	041b      	lsls	r3, r3, #16
 800dbda:	0c1b      	lsrs	r3, r3, #16
 800dbdc:	431a      	orrs	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	62da      	str	r2, [r3, #44]	; 0x2c
 800dbe2:	e022      	b.n	800dc2a <LoRaMacCryptoSecureMessage+0x226>
    }
    else
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, macMsg->FHDR.FCnt, &macMsg->MIC );
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6818      	ldr	r0, [r3, #0]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	791b      	ldrb	r3, [r3, #4]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	3b04      	subs	r3, #4
 800dbf0:	b299      	uxth	r1, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	89d2      	ldrh	r2, [r2, #14]
 800dbfa:	0015      	movs	r5, r2
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	322c      	adds	r2, #44	; 0x2c
 800dc00:	261e      	movs	r6, #30
 800dc02:	19bc      	adds	r4, r7, r6
 800dc04:	9203      	str	r2, [sp, #12]
 800dc06:	9502      	str	r5, [sp, #8]
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	2206      	movs	r2, #6
 800dc12:	f7fe ffa7 	bl	800cb64 <ComputeCmacB0>
 800dc16:	0003      	movs	r3, r0
 800dc18:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dc1a:	19bb      	adds	r3, r7, r6
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d003      	beq.n	800dc2a <LoRaMacCryptoSecureMessage+0x226>
        {
            return retval;
 800dc22:	231e      	movs	r3, #30
 800dc24:	18fb      	adds	r3, r7, r3
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	e008      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	0018      	movs	r0, r3
 800dc2e:	f000 fcdb 	bl	800e5e8 <LoRaMacSerializerData>
 800dc32:	1e03      	subs	r3, r0, #0
 800dc34:	d001      	beq.n	800dc3a <LoRaMacCryptoSecureMessage+0x236>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800dc36:	230e      	movs	r3, #14
 800dc38:	e000      	b.n	800dc3c <LoRaMacCryptoSecureMessage+0x238>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	b009      	add	sp, #36	; 0x24
 800dc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc44:	20000a20 	.word	0x20000a20

0800dc48 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc4a:	b08b      	sub	sp, #44	; 0x2c
 800dc4c:	af04      	add	r7, sp, #16
 800dc4e:	60b9      	str	r1, [r7, #8]
 800dc50:	0011      	movs	r1, r2
 800dc52:	607b      	str	r3, [r7, #4]
 800dc54:	230f      	movs	r3, #15
 800dc56:	18fb      	adds	r3, r7, r3
 800dc58:	1c02      	adds	r2, r0, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
 800dc5c:	230e      	movs	r3, #14
 800dc5e:	18fb      	adds	r3, r7, r3
 800dc60:	1c0a      	adds	r2, r1, #0
 800dc62:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 800dc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d101      	bne.n	800dc6e <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dc6a:	2307      	movs	r3, #7
 800dc6c:	e0cf      	b.n	800de0e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	230e      	movs	r3, #14
 800dc72:	18fb      	adds	r3, r7, r3
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	0011      	movs	r1, r2
 800dc78:	0018      	movs	r0, r3
 800dc7a:	f7ff fb37 	bl	800d2ec <CheckFCntDown>
 800dc7e:	0003      	movs	r3, r0
 800dc80:	001a      	movs	r2, r3
 800dc82:	2301      	movs	r3, #1
 800dc84:	4053      	eors	r3, r2
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d001      	beq.n	800dc90 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT;
 800dc8c:	2305      	movs	r3, #5
 800dc8e:	e0be      	b.n	800de0e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 800dc90:	2315      	movs	r3, #21
 800dc92:	18fb      	adds	r3, r7, r3
 800dc94:	2210      	movs	r2, #16
 800dc96:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t FRMPayloadDecryptionKeyID = APP_S_KEY;
 800dc98:	2317      	movs	r3, #23
 800dc9a:	18fb      	adds	r3, r7, r3
 800dc9c:	2207      	movs	r2, #7
 800dc9e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 800dca0:	2314      	movs	r3, #20
 800dca2:	18fb      	adds	r3, r7, r3
 800dca4:	2205      	movs	r2, #5
 800dca6:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	0018      	movs	r0, r3
 800dcac:	f000 faef 	bl	800e28e <LoRaMacParserData>
 800dcb0:	1e03      	subs	r3, r0, #0
 800dcb2:	d001      	beq.n	800dcb8 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800dcb4:	230d      	movs	r3, #13
 800dcb6:	e0aa      	b.n	800de0e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800dcb8:	2515      	movs	r5, #21
 800dcba:	197c      	adds	r4, r7, r5
 800dcbc:	2310      	movs	r3, #16
 800dcbe:	18fa      	adds	r2, r7, r3
 800dcc0:	230f      	movs	r3, #15
 800dcc2:	18fb      	adds	r3, r7, r3
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	0011      	movs	r1, r2
 800dcc8:	0018      	movs	r0, r3
 800dcca:	f7ff f9c5 	bl	800d058 <GetKeyAddrItem>
 800dcce:	0003      	movs	r3, r0
 800dcd0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dcd2:	197b      	adds	r3, r7, r5
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d003      	beq.n	800dce2 <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 800dcda:	2315      	movs	r3, #21
 800dcdc:	18fb      	adds	r3, r7, r3
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	e095      	b.n	800de0e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }
    FRMPayloadDecryptionKeyID = curItem->AppSkey;
 800dce2:	693a      	ldr	r2, [r7, #16]
 800dce4:	2317      	movs	r3, #23
 800dce6:	18fb      	adds	r3, r7, r3
 800dce8:	7852      	ldrb	r2, [r2, #1]
 800dcea:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	68ba      	ldr	r2, [r7, #8]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d001      	beq.n	800dcfa <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800dcf6:	2302      	movs	r3, #2
 800dcf8:	e089      	b.n	800de0e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	7b1b      	ldrb	r3, [r3, #12]
 800dcfe:	069b      	lsls	r3, r3, #26
 800dd00:	0fdb      	lsrs	r3, r3, #31
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	001a      	movs	r2, r3
 800dd06:	2316      	movs	r3, #22
 800dd08:	18fb      	adds	r3, r7, r3
 800dd0a:	1e51      	subs	r1, r2, #1
 800dd0c:	418a      	sbcs	r2, r1
 800dd0e:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.LrWanVersion.Fields.Minor == 0 )
 800dd10:	4b41      	ldr	r3, [pc, #260]	; (800de18 <LoRaMacCryptoUnsecureMessage+0x1d0>)
 800dd12:	789b      	ldrb	r3, [r3, #2]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d103      	bne.n	800dd20 <LoRaMacCryptoUnsecureMessage+0xd8>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800dd18:	2316      	movs	r3, #22
 800dd1a:	18fb      	adds	r3, r7, r3
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800dd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd22:	6818      	ldr	r0, [r3, #0]
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	791b      	ldrb	r3, [r3, #4]
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	3b04      	subs	r3, #4
 800dd2c:	b299      	uxth	r1, r3
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd32:	2615      	movs	r6, #21
 800dd34:	19bc      	adds	r4, r7, r6
 800dd36:	2216      	movs	r2, #22
 800dd38:	18ba      	adds	r2, r7, r2
 800dd3a:	7815      	ldrb	r5, [r2, #0]
 800dd3c:	2214      	movs	r2, #20
 800dd3e:	18ba      	adds	r2, r7, r2
 800dd40:	7812      	ldrb	r2, [r2, #0]
 800dd42:	9303      	str	r3, [sp, #12]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	9302      	str	r3, [sp, #8]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	002b      	movs	r3, r5
 800dd52:	f7fe ffa3 	bl	800cc9c <VerifyCmacB0>
 800dd56:	0003      	movs	r3, r0
 800dd58:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dd5a:	19bb      	adds	r3, r7, r6
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <LoRaMacCryptoUnsecureMessage+0x122>
    {
        return retval;
 800dd62:	2315      	movs	r3, #21
 800dd64:	18fb      	adds	r3, r7, r3
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	e051      	b.n	800de0e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6c:	2220      	movs	r2, #32
 800dd6e:	5c9b      	ldrb	r3, [r3, r2]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d103      	bne.n	800dd7c <LoRaMacCryptoUnsecureMessage+0x134>
    {
        // Use network session encryption key
        FRMPayloadDecryptionKeyID = NWK_S_ENC_KEY;
 800dd74:	2317      	movs	r3, #23
 800dd76:	18fb      	adds	r3, r7, r3
 800dd78:	2206      	movs	r2, #6
 800dd7a:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, FRMPayloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd82:	2228      	movs	r2, #40	; 0x28
 800dd84:	5c9b      	ldrb	r3, [r3, r2]
 800dd86:	b299      	uxth	r1, r3
 800dd88:	2615      	movs	r6, #21
 800dd8a:	19bc      	adds	r4, r7, r6
 800dd8c:	68bd      	ldr	r5, [r7, #8]
 800dd8e:	2317      	movs	r3, #23
 800dd90:	18fb      	adds	r3, r7, r3
 800dd92:	781a      	ldrb	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	9301      	str	r3, [sp, #4]
 800dd98:	2301      	movs	r3, #1
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	002b      	movs	r3, r5
 800dd9e:	f7fe fc4f 	bl	800c640 <PayloadEncrypt>
 800dda2:	0003      	movs	r3, r0
 800dda4:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dda6:	19bb      	adds	r3, r7, r6
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d003      	beq.n	800ddb6 <LoRaMacCryptoUnsecureMessage+0x16e>
    {
        return retval;
 800ddae:	2315      	movs	r3, #21
 800ddb0:	18fb      	adds	r3, r7, r3
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	e02b      	b.n	800de0e <LoRaMacCryptoUnsecureMessage+0x1c6>
    }

    if( CryptoCtx.LrWanVersion.Fields.Minor == 1 )
 800ddb6:	4b18      	ldr	r3, [pc, #96]	; (800de18 <LoRaMacCryptoUnsecureMessage+0x1d0>)
 800ddb8:	789b      	ldrb	r3, [r3, #2]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d11e      	bne.n	800ddfc <LoRaMacCryptoUnsecureMessage+0x1b4>
    {
        // Decrypt FOpts
        retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc0:	7b1b      	ldrb	r3, [r3, #12]
 800ddc2:	071b      	lsls	r3, r3, #28
 800ddc4:	0f1b      	lsrs	r3, r3, #28
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	b298      	uxth	r0, r3
 800ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddcc:	3310      	adds	r3, #16
 800ddce:	2515      	movs	r5, #21
 800ddd0:	197c      	adds	r4, r7, r5
 800ddd2:	220e      	movs	r2, #14
 800ddd4:	18ba      	adds	r2, r7, r2
 800ddd6:	7812      	ldrb	r2, [r2, #0]
 800ddd8:	68b9      	ldr	r1, [r7, #8]
 800ddda:	9301      	str	r3, [sp, #4]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	0013      	movs	r3, r2
 800dde2:	2201      	movs	r2, #1
 800dde4:	f7fe fd2e 	bl	800c844 <FOptsEncrypt>
 800dde8:	0003      	movs	r3, r0
 800ddea:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ddec:	197b      	adds	r3, r7, r5
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d003      	beq.n	800ddfc <LoRaMacCryptoUnsecureMessage+0x1b4>
        {
            return retval;
 800ddf4:	2315      	movs	r3, #21
 800ddf6:	18fb      	adds	r3, r7, r3
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	e008      	b.n	800de0e <LoRaMacCryptoUnsecureMessage+0x1c6>
        }
    }

    UpdateFCntDown( fCntID, fCntDown );
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	230e      	movs	r3, #14
 800de00:	18fb      	adds	r3, r7, r3
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	0011      	movs	r1, r2
 800de06:	0018      	movs	r0, r3
 800de08:	f7ff face 	bl	800d3a8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	0018      	movs	r0, r3
 800de10:	46bd      	mov	sp, r7
 800de12:	b007      	add	sp, #28
 800de14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de16:	46c0      	nop			; (mov r8, r8)
 800de18:	20000a20 	.word	0x20000a20

0800de1c <NvmCtxChanged>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxChanged( void )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	af00      	add	r7, sp, #0
    if( FCntHandlerNvmCtxChanged != NULL )
 800de20:	4b04      	ldr	r3, [pc, #16]	; (800de34 <NvmCtxChanged+0x18>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d002      	beq.n	800de2e <NvmCtxChanged+0x12>
    {
        FCntHandlerNvmCtxChanged( );
 800de28:	4b02      	ldr	r3, [pc, #8]	; (800de34 <NvmCtxChanged+0x18>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4798      	blx	r3
    }
}
 800de2e:	46c0      	nop			; (mov r8, r8)
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	20000a50 	.word	0x20000a50

0800de38 <LoRaMacGetFCntDown>:
    return &FCntHandlerNvmCtx;
}

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                               uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60ba      	str	r2, [r7, #8]
 800de40:	607b      	str	r3, [r7, #4]
 800de42:	230f      	movs	r3, #15
 800de44:	18fb      	adds	r3, r7, r3
 800de46:	1c02      	adds	r2, r0, #0
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	230e      	movs	r3, #14
 800de4c:	18fb      	adds	r3, r7, r3
 800de4e:	1c0a      	adds	r2, r1, #0
 800de50:	701a      	strb	r2, [r3, #0]
    uint32_t previousDown = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	613b      	str	r3, [r7, #16]

    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d005      	beq.n	800de6c <LoRaMacGetFCntDown+0x34>
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <LoRaMacGetFCntDown+0x34>
 800de66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d101      	bne.n	800de70 <LoRaMacGetFCntDown+0x38>
        ( currentDown == NULL ) )
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 800de6c:	2304      	movs	r3, #4
 800de6e:	e088      	b.n	800df82 <LoRaMacGetFCntDown+0x14a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800de70:	230f      	movs	r3, #15
 800de72:	18fb      	adds	r3, r7, r3
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	2b04      	cmp	r3, #4
 800de78:	d843      	bhi.n	800df02 <LoRaMacGetFCntDown+0xca>
 800de7a:	009a      	lsls	r2, r3, #2
 800de7c:	4b43      	ldr	r3, [pc, #268]	; (800df8c <LoRaMacGetFCntDown+0x154>)
 800de7e:	18d3      	adds	r3, r2, r3
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800de84:	1d3b      	adds	r3, r7, #4
 800de86:	789b      	ldrb	r3, [r3, #2]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d117      	bne.n	800debc <LoRaMacGetFCntDown+0x84>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800de8c:	230e      	movs	r3, #14
 800de8e:	18fb      	adds	r3, r7, r3
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d004      	beq.n	800dea0 <LoRaMacGetFCntDown+0x68>
 800de96:	230e      	movs	r3, #14
 800de98:	18fb      	adds	r3, r7, r3
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d106      	bne.n	800deae <LoRaMacGetFCntDown+0x76>
                {
                    *fCntID = A_FCNT_DOWN;
 800dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea2:	2202      	movs	r2, #2
 800dea4:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.AFCntDown;
 800dea6:	4b3a      	ldr	r3, [pc, #232]	; (800df90 <LoRaMacGetFCntDown+0x158>)
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	617b      	str	r3, [r7, #20]
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
            }
            break;
 800deac:	e02b      	b.n	800df06 <LoRaMacGetFCntDown+0xce>
                    *fCntID = N_FCNT_DOWN;
 800deae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb0:	2201      	movs	r2, #1
 800deb2:	701a      	strb	r2, [r3, #0]
                    previousDown = FCntHandlerNvmCtx.FCntList.NFCntDown;
 800deb4:	4b36      	ldr	r3, [pc, #216]	; (800df90 <LoRaMacGetFCntDown+0x158>)
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	617b      	str	r3, [r7, #20]
            break;
 800deba:	e024      	b.n	800df06 <LoRaMacGetFCntDown+0xce>
                *fCntID = FCNT_DOWN;
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	2203      	movs	r2, #3
 800dec0:	701a      	strb	r2, [r3, #0]
                previousDown = FCntHandlerNvmCtx.FCntList.FCntDown;
 800dec2:	4b33      	ldr	r3, [pc, #204]	; (800df90 <LoRaMacGetFCntDown+0x158>)
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	617b      	str	r3, [r7, #20]
            break;
 800dec8:	e01d      	b.n	800df06 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800decc:	2204      	movs	r2, #4
 800dece:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown0;
 800ded0:	4b2f      	ldr	r3, [pc, #188]	; (800df90 <LoRaMacGetFCntDown+0x158>)
 800ded2:	691b      	ldr	r3, [r3, #16]
 800ded4:	617b      	str	r3, [r7, #20]
            break;
 800ded6:	e016      	b.n	800df06 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 800ded8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deda:	2205      	movs	r2, #5
 800dedc:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown1;
 800dede:	4b2c      	ldr	r3, [pc, #176]	; (800df90 <LoRaMacGetFCntDown+0x158>)
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	617b      	str	r3, [r7, #20]
            break;
 800dee4:	e00f      	b.n	800df06 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 800dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee8:	2206      	movs	r2, #6
 800deea:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 800deec:	4b28      	ldr	r3, [pc, #160]	; (800df90 <LoRaMacGetFCntDown+0x158>)
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	617b      	str	r3, [r7, #20]
            break;
 800def2:	e008      	b.n	800df06 <LoRaMacGetFCntDown+0xce>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	2207      	movs	r2, #7
 800def8:	701a      	strb	r2, [r3, #0]
            previousDown = FCntHandlerNvmCtx.FCntList.McFCntDown3;
 800defa:	4b25      	ldr	r3, [pc, #148]	; (800df90 <LoRaMacGetFCntDown+0x158>)
 800defc:	69db      	ldr	r3, [r3, #28]
 800defe:	617b      	str	r3, [r7, #20]
            break;
 800df00:	e001      	b.n	800df06 <LoRaMacGetFCntDown+0xce>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 800df02:	2305      	movs	r3, #5
 800df04:	e03d      	b.n	800df82 <LoRaMacGetFCntDown+0x14a>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( previousDown == FCNT_DOWN_INITAL_VALUE )
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	3301      	adds	r3, #1
 800df0a:	d105      	bne.n	800df18 <LoRaMacGetFCntDown+0xe0>
    {
         *currentDown = macMsg->FHDR.FCnt;
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	89db      	ldrh	r3, [r3, #14]
 800df10:	001a      	movs	r2, r3
 800df12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	e023      	b.n	800df60 <LoRaMacGetFCntDown+0x128>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )macMsg->FHDR.FCnt - ( int32_t )( previousDown & 0x0000FFFF );
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	89db      	ldrh	r3, [r3, #14]
 800df1c:	001a      	movs	r2, r3
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	041b      	lsls	r3, r3, #16
 800df22:	0c1b      	lsrs	r3, r3, #16
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	613b      	str	r3, [r7, #16]

        if( fCntDiff > 0 )
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	dd05      	ble.n	800df3a <LoRaMacGetFCntDown+0x102>
        {  // Positive difference
            *currentDown = previousDown + fCntDiff;
 800df2e:	693a      	ldr	r2, [r7, #16]
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	18d2      	adds	r2, r2, r3
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	601a      	str	r2, [r3, #0]
 800df38:	e012      	b.n	800df60 <LoRaMacGetFCntDown+0x128>
        }
        else if( fCntDiff == 0 )
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d104      	bne.n	800df4a <LoRaMacGetFCntDown+0x112>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = previousDown;
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	697a      	ldr	r2, [r7, #20]
 800df44:	601a      	str	r2, [r3, #0]
            return LORAMAC_FCNT_HANDLER_CHECK_FAIL;
 800df46:	2301      	movs	r3, #1
 800df48:	e01b      	b.n	800df82 <LoRaMacGetFCntDown+0x14a>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( previousDown & 0xFFFF0000 ) + 0x10000 + macMsg->FHDR.FCnt;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	0c1b      	lsrs	r3, r3, #16
 800df4e:	041b      	lsls	r3, r3, #16
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	89d2      	ldrh	r2, [r2, #14]
 800df54:	189b      	adds	r3, r3, r2
 800df56:	2280      	movs	r2, #128	; 0x80
 800df58:	0252      	lsls	r2, r2, #9
 800df5a:	189a      	adds	r2, r3, r2
 800df5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5e:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( lrWanVersion.Fields.Minor == 0 )
 800df60:	1d3b      	adds	r3, r7, #4
 800df62:	789b      	ldrb	r3, [r3, #2]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10b      	bne.n	800df80 <LoRaMacGetFCntDown+0x148>
    {
        if( ( ( int32_t )*currentDown - ( int32_t )previousDown ) >= maxFCntGap )
 800df68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	001a      	movs	r2, r3
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	1ad2      	subs	r2, r2, r3
 800df72:	2320      	movs	r3, #32
 800df74:	18fb      	adds	r3, r7, r3
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	db01      	blt.n	800df80 <LoRaMacGetFCntDown+0x148>
        {
            return LORAMAC_FCNT_HANDLER_MAX_GAP_FAIL;
 800df7c:	2302      	movs	r3, #2
 800df7e:	e000      	b.n	800df82 <LoRaMacGetFCntDown+0x14a>
        }
    }

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800df80:	2300      	movs	r3, #0
}
 800df82:	0018      	movs	r0, r3
 800df84:	46bd      	mov	sp, r7
 800df86:	b006      	add	sp, #24
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	46c0      	nop			; (mov r8, r8)
 800df8c:	08027b94 	.word	0x08027b94
 800df90:	20000a30 	.word	0x20000a30

0800df94 <LoRaMacSetFCntDown>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	0002      	movs	r2, r0
 800df9c:	6039      	str	r1, [r7, #0]
 800df9e:	1dfb      	adds	r3, r7, #7
 800dfa0:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 800dfa2:	1dfb      	adds	r3, r7, #7
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	2b07      	cmp	r3, #7
 800dfa8:	d822      	bhi.n	800dff0 <LoRaMacSetFCntDown+0x5c>
 800dfaa:	009a      	lsls	r2, r3, #2
 800dfac:	4b15      	ldr	r3, [pc, #84]	; (800e004 <LoRaMacSetFCntDown+0x70>)
 800dfae:	18d3      	adds	r3, r2, r3
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	469f      	mov	pc, r3
    {
        case FCNT_UP:
            return LORAMAC_FCNT_HANDLER_ERROR_INVALID_FCNT_ID;
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e020      	b.n	800dffa <LoRaMacSetFCntDown+0x66>
        case N_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.NFCntDown = currentDown;
 800dfb8:	4b13      	ldr	r3, [pc, #76]	; (800e008 <LoRaMacSetFCntDown+0x74>)
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	605a      	str	r2, [r3, #4]
            break;
 800dfbe:	e019      	b.n	800dff4 <LoRaMacSetFCntDown+0x60>
        case A_FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.AFCntDown = currentDown;
 800dfc0:	4b11      	ldr	r3, [pc, #68]	; (800e008 <LoRaMacSetFCntDown+0x74>)
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	609a      	str	r2, [r3, #8]
            break;
 800dfc6:	e015      	b.n	800dff4 <LoRaMacSetFCntDown+0x60>
        case FCNT_DOWN:
            FCntHandlerNvmCtx.FCntList.FCntDown = currentDown;
 800dfc8:	4b0f      	ldr	r3, [pc, #60]	; (800e008 <LoRaMacSetFCntDown+0x74>)
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	60da      	str	r2, [r3, #12]
            break;
 800dfce:	e011      	b.n	800dff4 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_0:
            FCntHandlerNvmCtx.FCntList.McFCntDown0 = currentDown;
 800dfd0:	4b0d      	ldr	r3, [pc, #52]	; (800e008 <LoRaMacSetFCntDown+0x74>)
 800dfd2:	683a      	ldr	r2, [r7, #0]
 800dfd4:	611a      	str	r2, [r3, #16]
            break;
 800dfd6:	e00d      	b.n	800dff4 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_1:
            FCntHandlerNvmCtx.FCntList.McFCntDown1 = currentDown;
 800dfd8:	4b0b      	ldr	r3, [pc, #44]	; (800e008 <LoRaMacSetFCntDown+0x74>)
 800dfda:	683a      	ldr	r2, [r7, #0]
 800dfdc:	615a      	str	r2, [r3, #20]
            break;
 800dfde:	e009      	b.n	800dff4 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_2:
            FCntHandlerNvmCtx.FCntList.McFCntDown2 = currentDown;
 800dfe0:	4b09      	ldr	r3, [pc, #36]	; (800e008 <LoRaMacSetFCntDown+0x74>)
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	619a      	str	r2, [r3, #24]
            break;
 800dfe6:	e005      	b.n	800dff4 <LoRaMacSetFCntDown+0x60>
        case MC_FCNT_DOWN_3:
            FCntHandlerNvmCtx.FCntList.McFCntDown3 = currentDown;
 800dfe8:	4b07      	ldr	r3, [pc, #28]	; (800e008 <LoRaMacSetFCntDown+0x74>)
 800dfea:	683a      	ldr	r2, [r7, #0]
 800dfec:	61da      	str	r2, [r3, #28]
            break;
 800dfee:	e001      	b.n	800dff4 <LoRaMacSetFCntDown+0x60>
        default:
            return LORAMAC_FCNT_HANDLER_ERROR;
 800dff0:	2305      	movs	r3, #5
 800dff2:	e002      	b.n	800dffa <LoRaMacSetFCntDown+0x66>
    }

    NvmCtxChanged( );
 800dff4:	f7ff ff12 	bl	800de1c <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	0018      	movs	r0, r3
 800dffc:	46bd      	mov	sp, r7
 800dffe:	b002      	add	sp, #8
 800e000:	bd80      	pop	{r7, pc}
 800e002:	46c0      	nop			; (mov r8, r8)
 800e004:	08027ba8 	.word	0x08027ba8
 800e008:	20000a30 	.word	0x20000a30

0800e00c <LoRaMacGetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacGetFCntUp( uint32_t* currentUp )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d101      	bne.n	800e01e <LoRaMacGetFCntUp+0x12>
    {
        return LORAMAC_FCNT_HANDLER_ERROR_NPE;
 800e01a:	2304      	movs	r3, #4
 800e01c:	e005      	b.n	800e02a <LoRaMacGetFCntUp+0x1e>
    }

    *currentUp = FCntHandlerNvmCtx.FCntList.FCntUp + 1;
 800e01e:	4b05      	ldr	r3, [pc, #20]	; (800e034 <LoRaMacGetFCntUp+0x28>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	601a      	str	r2, [r3, #0]

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	0018      	movs	r0, r3
 800e02c:	46bd      	mov	sp, r7
 800e02e:	b002      	add	sp, #8
 800e030:	bd80      	pop	{r7, pc}
 800e032:	46c0      	nop			; (mov r8, r8)
 800e034:	20000a30 	.word	0x20000a30

0800e038 <LoRaMacSetFCntUp>:

LoRaMacFCntHandlerStatus_t LoRaMacSetFCntUp( uint32_t currentUp )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
    FCntHandlerNvmCtx.FCntList.FCntUp = currentUp;
 800e040:	4b04      	ldr	r3, [pc, #16]	; (800e054 <LoRaMacSetFCntUp+0x1c>)
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	601a      	str	r2, [r3, #0]

    NvmCtxChanged( );
 800e046:	f7ff fee9 	bl	800de1c <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	0018      	movs	r0, r3
 800e04e:	46bd      	mov	sp, r7
 800e050:	b002      	add	sp, #8
 800e052:	bd80      	pop	{r7, pc}
 800e054:	20000a30 	.word	0x20000a30

0800e058 <LoRaMacResetFCnts>:

LoRaMacFCntHandlerStatus_t LoRaMacResetFCnts( void )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	af00      	add	r7, sp, #0

    FCntHandlerNvmCtx.FCntList.FCntUp = 0;
 800e05c:	4b12      	ldr	r3, [pc, #72]	; (800e0a8 <LoRaMacResetFCnts+0x50>)
 800e05e:	2200      	movs	r2, #0
 800e060:	601a      	str	r2, [r3, #0]
    FCntHandlerNvmCtx.FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800e062:	4b11      	ldr	r3, [pc, #68]	; (800e0a8 <LoRaMacResetFCnts+0x50>)
 800e064:	2201      	movs	r2, #1
 800e066:	4252      	negs	r2, r2
 800e068:	605a      	str	r2, [r3, #4]
    FCntHandlerNvmCtx.FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800e06a:	4b0f      	ldr	r3, [pc, #60]	; (800e0a8 <LoRaMacResetFCnts+0x50>)
 800e06c:	2201      	movs	r2, #1
 800e06e:	4252      	negs	r2, r2
 800e070:	609a      	str	r2, [r3, #8]
    FCntHandlerNvmCtx.FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800e072:	4b0d      	ldr	r3, [pc, #52]	; (800e0a8 <LoRaMacResetFCnts+0x50>)
 800e074:	2201      	movs	r2, #1
 800e076:	4252      	negs	r2, r2
 800e078:	60da      	str	r2, [r3, #12]

    FCntHandlerNvmCtx.FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800e07a:	4b0b      	ldr	r3, [pc, #44]	; (800e0a8 <LoRaMacResetFCnts+0x50>)
 800e07c:	2201      	movs	r2, #1
 800e07e:	4252      	negs	r2, r2
 800e080:	611a      	str	r2, [r3, #16]
    FCntHandlerNvmCtx.FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 800e082:	4b09      	ldr	r3, [pc, #36]	; (800e0a8 <LoRaMacResetFCnts+0x50>)
 800e084:	2201      	movs	r2, #1
 800e086:	4252      	negs	r2, r2
 800e088:	615a      	str	r2, [r3, #20]
    FCntHandlerNvmCtx.FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 800e08a:	4b07      	ldr	r3, [pc, #28]	; (800e0a8 <LoRaMacResetFCnts+0x50>)
 800e08c:	2201      	movs	r2, #1
 800e08e:	4252      	negs	r2, r2
 800e090:	619a      	str	r2, [r3, #24]
    FCntHandlerNvmCtx.FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 800e092:	4b05      	ldr	r3, [pc, #20]	; (800e0a8 <LoRaMacResetFCnts+0x50>)
 800e094:	2201      	movs	r2, #1
 800e096:	4252      	negs	r2, r2
 800e098:	61da      	str	r2, [r3, #28]

    NvmCtxChanged( );
 800e09a:	f7ff febf 	bl	800de1c <NvmCtxChanged>

    return LORAMAC_FCNT_HANDLER_SUCCESS;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	0018      	movs	r0, r3
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	46c0      	nop			; (mov r8, r8)
 800e0a8:	20000a30 	.word	0x20000a30

0800e0ac <LoRaMacParserJoinAccept>:

#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacParser.h>

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800e0ac:	b590      	push	{r4, r7, lr}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d003      	beq.n	800e0c2 <LoRaMacParserJoinAccept+0x16>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d101      	bne.n	800e0c6 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800e0c2:	2302      	movs	r3, #2
 800e0c4:	e0df      	b.n	800e286 <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 800e0c6:	240e      	movs	r4, #14
 800e0c8:	193b      	adds	r3, r7, r4
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	193b      	adds	r3, r7, r4
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	1939      	adds	r1, r7, r4
 800e0d8:	1c58      	adds	r0, r3, #1
 800e0da:	8008      	strh	r0, [r1, #0]
 800e0dc:	18d3      	adds	r3, r2, r3
 800e0de:	781a      	ldrb	r2, [r3, #0]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	1d98      	adds	r0, r3, #6
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	193b      	adds	r3, r7, r4
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	18d3      	adds	r3, r2, r3
 800e0f2:	2203      	movs	r2, #3
 800e0f4:	0019      	movs	r1, r3
 800e0f6:	f00e fdf1 	bl	801ccdc <memcpy1>
    bufItr = bufItr + 3;
 800e0fa:	193b      	adds	r3, r7, r4
 800e0fc:	193a      	adds	r2, r7, r4
 800e0fe:	8812      	ldrh	r2, [r2, #0]
 800e100:	3203      	adds	r2, #3
 800e102:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	3309      	adds	r3, #9
 800e108:	0018      	movs	r0, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	193b      	adds	r3, r7, r4
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	18d3      	adds	r3, r2, r3
 800e114:	2203      	movs	r2, #3
 800e116:	0019      	movs	r1, r3
 800e118:	f00e fde0 	bl	801ccdc <memcpy1>
    bufItr = bufItr + 3;
 800e11c:	193b      	adds	r3, r7, r4
 800e11e:	193a      	adds	r2, r7, r4
 800e120:	8812      	ldrh	r2, [r2, #0]
 800e122:	3203      	adds	r2, #3
 800e124:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	193b      	adds	r3, r7, r4
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	1939      	adds	r1, r7, r4
 800e130:	1c58      	adds	r0, r3, #1
 800e132:	8008      	strh	r0, [r1, #0]
 800e134:	18d3      	adds	r3, r2, r3
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	001a      	movs	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	193b      	adds	r3, r7, r4
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	1939      	adds	r1, r7, r4
 800e148:	1c58      	adds	r0, r3, #1
 800e14a:	8008      	strh	r0, [r1, #0]
 800e14c:	18d3      	adds	r3, r2, r3
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	021a      	lsls	r2, r3, #8
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	431a      	orrs	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	193b      	adds	r3, r7, r4
 800e162:	881b      	ldrh	r3, [r3, #0]
 800e164:	1939      	adds	r1, r7, r4
 800e166:	1c58      	adds	r0, r3, #1
 800e168:	8008      	strh	r0, [r1, #0]
 800e16a:	18d3      	adds	r3, r2, r3
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	041a      	lsls	r2, r3, #16
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	431a      	orrs	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	193b      	adds	r3, r7, r4
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	1939      	adds	r1, r7, r4
 800e184:	1c58      	adds	r0, r3, #1
 800e186:	8008      	strh	r0, [r1, #0]
 800e188:	18d3      	adds	r3, r2, r3
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	061a      	lsls	r2, r3, #24
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	431a      	orrs	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	193b      	adds	r3, r7, r4
 800e19e:	881b      	ldrh	r3, [r3, #0]
 800e1a0:	1939      	adds	r1, r7, r4
 800e1a2:	1c58      	adds	r0, r3, #1
 800e1a4:	8008      	strh	r0, [r1, #0]
 800e1a6:	18d3      	adds	r3, r2, r3
 800e1a8:	781a      	ldrb	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	193b      	adds	r3, r7, r4
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	1939      	adds	r1, r7, r4
 800e1b8:	1c58      	adds	r0, r3, #1
 800e1ba:	8008      	strh	r0, [r1, #0]
 800e1bc:	18d3      	adds	r3, r2, r3
 800e1be:	781a      	ldrb	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	791b      	ldrb	r3, [r3, #4]
 800e1c8:	1f1a      	subs	r2, r3, #4
 800e1ca:	193b      	adds	r3, r7, r4
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	2b10      	cmp	r3, #16
 800e1d2:	d112      	bne.n	800e1fa <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3312      	adds	r3, #18
 800e1d8:	0018      	movs	r0, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	240e      	movs	r4, #14
 800e1e0:	193b      	adds	r3, r7, r4
 800e1e2:	881b      	ldrh	r3, [r3, #0]
 800e1e4:	18d3      	adds	r3, r2, r3
 800e1e6:	2210      	movs	r2, #16
 800e1e8:	0019      	movs	r1, r3
 800e1ea:	f00e fd77 	bl	801ccdc <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 800e1ee:	193b      	adds	r3, r7, r4
 800e1f0:	193a      	adds	r2, r7, r4
 800e1f2:	8812      	ldrh	r2, [r2, #0]
 800e1f4:	3210      	adds	r2, #16
 800e1f6:	801a      	strh	r2, [r3, #0]
 800e1f8:	e00a      	b.n	800e210 <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	791b      	ldrb	r3, [r3, #4]
 800e1fe:	1f1a      	subs	r2, r3, #4
 800e200:	230e      	movs	r3, #14
 800e202:	18fb      	adds	r3, r7, r3
 800e204:	881b      	ldrh	r3, [r3, #0]
 800e206:	1ad3      	subs	r3, r2, r3
 800e208:	2b00      	cmp	r3, #0
 800e20a:	dd01      	ble.n	800e210 <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 800e20c:	2301      	movs	r3, #1
 800e20e:	e03a      	b.n	800e286 <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	240e      	movs	r4, #14
 800e216:	193b      	adds	r3, r7, r4
 800e218:	881b      	ldrh	r3, [r3, #0]
 800e21a:	1939      	adds	r1, r7, r4
 800e21c:	1c58      	adds	r0, r3, #1
 800e21e:	8008      	strh	r0, [r1, #0]
 800e220:	18d3      	adds	r3, r2, r3
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	001a      	movs	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	193b      	adds	r3, r7, r4
 800e230:	881b      	ldrh	r3, [r3, #0]
 800e232:	1939      	adds	r1, r7, r4
 800e234:	1c58      	adds	r0, r3, #1
 800e236:	8008      	strh	r0, [r1, #0]
 800e238:	18d3      	adds	r3, r2, r3
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	021a      	lsls	r2, r3, #8
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e242:	431a      	orrs	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	193b      	adds	r3, r7, r4
 800e24e:	881b      	ldrh	r3, [r3, #0]
 800e250:	1939      	adds	r1, r7, r4
 800e252:	1c58      	adds	r0, r3, #1
 800e254:	8008      	strh	r0, [r1, #0]
 800e256:	18d3      	adds	r3, r2, r3
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	041a      	lsls	r2, r3, #16
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e260:	431a      	orrs	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	193b      	adds	r3, r7, r4
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	1939      	adds	r1, r7, r4
 800e270:	1c58      	adds	r0, r3, #1
 800e272:	8008      	strh	r0, [r1, #0]
 800e274:	18d3      	adds	r3, r2, r3
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	061a      	lsls	r2, r3, #24
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27e:	431a      	orrs	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800e284:	2300      	movs	r3, #0
}
 800e286:	0018      	movs	r0, r3
 800e288:	46bd      	mov	sp, r7
 800e28a:	b005      	add	sp, #20
 800e28c:	bd90      	pop	{r4, r7, pc}

0800e28e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800e28e:	b590      	push	{r4, r7, lr}
 800e290:	b085      	sub	sp, #20
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <LoRaMacParserData+0x16>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d101      	bne.n	800e2a8 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	e100      	b.n	800e4aa <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 800e2a8:	240e      	movs	r4, #14
 800e2aa:	193b      	adds	r3, r7, r4
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	193b      	adds	r3, r7, r4
 800e2b6:	881b      	ldrh	r3, [r3, #0]
 800e2b8:	1939      	adds	r1, r7, r4
 800e2ba:	1c58      	adds	r0, r3, #1
 800e2bc:	8008      	strh	r0, [r1, #0]
 800e2be:	18d3      	adds	r3, r2, r3
 800e2c0:	781a      	ldrb	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	193b      	adds	r3, r7, r4
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	1939      	adds	r1, r7, r4
 800e2d0:	1c58      	adds	r0, r3, #1
 800e2d2:	8008      	strh	r0, [r1, #0]
 800e2d4:	18d3      	adds	r3, r2, r3
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	001a      	movs	r2, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	193b      	adds	r3, r7, r4
 800e2e4:	881b      	ldrh	r3, [r3, #0]
 800e2e6:	1939      	adds	r1, r7, r4
 800e2e8:	1c58      	adds	r0, r3, #1
 800e2ea:	8008      	strh	r0, [r1, #0]
 800e2ec:	18d3      	adds	r3, r2, r3
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	021a      	lsls	r2, r3, #8
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	431a      	orrs	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	193b      	adds	r3, r7, r4
 800e302:	881b      	ldrh	r3, [r3, #0]
 800e304:	1939      	adds	r1, r7, r4
 800e306:	1c58      	adds	r0, r3, #1
 800e308:	8008      	strh	r0, [r1, #0]
 800e30a:	18d3      	adds	r3, r2, r3
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	041a      	lsls	r2, r3, #16
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	431a      	orrs	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	193b      	adds	r3, r7, r4
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	1939      	adds	r1, r7, r4
 800e324:	1c58      	adds	r0, r3, #1
 800e326:	8008      	strh	r0, [r1, #0]
 800e328:	18d3      	adds	r3, r2, r3
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	061a      	lsls	r2, r3, #24
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	431a      	orrs	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	193b      	adds	r3, r7, r4
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	1939      	adds	r1, r7, r4
 800e342:	1c58      	adds	r0, r3, #1
 800e344:	8008      	strh	r0, [r1, #0]
 800e346:	18d3      	adds	r3, r2, r3
 800e348:	781a      	ldrb	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	193b      	adds	r3, r7, r4
 800e354:	881b      	ldrh	r3, [r3, #0]
 800e356:	1939      	adds	r1, r7, r4
 800e358:	1c58      	adds	r0, r3, #1
 800e35a:	8008      	strh	r0, [r1, #0]
 800e35c:	18d3      	adds	r3, r2, r3
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	b29a      	uxth	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	193b      	adds	r3, r7, r4
 800e36c:	881b      	ldrh	r3, [r3, #0]
 800e36e:	1939      	adds	r1, r7, r4
 800e370:	1c58      	adds	r0, r3, #1
 800e372:	8008      	strh	r0, [r1, #0]
 800e374:	18d3      	adds	r3, r2, r3
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	0219      	lsls	r1, r3, #8
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	89db      	ldrh	r3, [r3, #14]
 800e37e:	b21a      	sxth	r2, r3
 800e380:	b20b      	sxth	r3, r1
 800e382:	4313      	orrs	r3, r2
 800e384:	b21b      	sxth	r3, r3
 800e386:	b29a      	uxth	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	3310      	adds	r3, #16
 800e390:	0018      	movs	r0, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	193b      	adds	r3, r7, r4
 800e398:	881b      	ldrh	r3, [r3, #0]
 800e39a:	18d1      	adds	r1, r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	7b1b      	ldrb	r3, [r3, #12]
 800e3a0:	071b      	lsls	r3, r3, #28
 800e3a2:	0f1b      	lsrs	r3, r3, #28
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	001a      	movs	r2, r3
 800e3aa:	f00e fc97 	bl	801ccdc <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	7b1b      	ldrb	r3, [r3, #12]
 800e3b2:	071b      	lsls	r3, r3, #28
 800e3b4:	0f1b      	lsrs	r3, r3, #28
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	b299      	uxth	r1, r3
 800e3ba:	193b      	adds	r3, r7, r4
 800e3bc:	193a      	adds	r2, r7, r4
 800e3be:	8812      	ldrh	r2, [r2, #0]
 800e3c0:	188a      	adds	r2, r1, r2
 800e3c2:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2220      	movs	r2, #32
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2228      	movs	r2, #40	; 0x28
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	791b      	ldrb	r3, [r3, #4]
 800e3d8:	001a      	movs	r2, r3
 800e3da:	193b      	adds	r3, r7, r4
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	3b04      	subs	r3, #4
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	dd2f      	ble.n	800e446 <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	240e      	movs	r4, #14
 800e3ec:	193b      	adds	r3, r7, r4
 800e3ee:	881b      	ldrh	r3, [r3, #0]
 800e3f0:	1939      	adds	r1, r7, r4
 800e3f2:	1c58      	adds	r0, r3, #1
 800e3f4:	8008      	strh	r0, [r1, #0]
 800e3f6:	18d3      	adds	r3, r2, r3
 800e3f8:	7819      	ldrb	r1, [r3, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2220      	movs	r2, #32
 800e3fe:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	791a      	ldrb	r2, [r3, #4]
 800e404:	193b      	adds	r3, r7, r4
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	3b04      	subs	r3, #4
 800e410:	b2d9      	uxtb	r1, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2228      	movs	r2, #40	; 0x28
 800e416:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	193b      	adds	r3, r7, r4
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	18d1      	adds	r1, r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2228      	movs	r2, #40	; 0x28
 800e42a:	5c9b      	ldrb	r3, [r3, r2]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	001a      	movs	r2, r3
 800e430:	f00e fc54 	bl	801ccdc <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2228      	movs	r2, #40	; 0x28
 800e438:	5c9b      	ldrb	r3, [r3, r2]
 800e43a:	b299      	uxth	r1, r3
 800e43c:	193b      	adds	r3, r7, r4
 800e43e:	193a      	adds	r2, r7, r4
 800e440:	8812      	ldrh	r2, [r2, #0]
 800e442:	188a      	adds	r2, r1, r2
 800e444:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	791b      	ldrb	r3, [r3, #4]
 800e44e:	3b04      	subs	r3, #4
 800e450:	18d3      	adds	r3, r2, r3
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	001a      	movs	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6819      	ldr	r1, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	791b      	ldrb	r3, [r3, #4]
 800e466:	3b03      	subs	r3, #3
 800e468:	18cb      	adds	r3, r1, r3
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	021b      	lsls	r3, r3, #8
 800e46e:	431a      	orrs	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6819      	ldr	r1, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	791b      	ldrb	r3, [r3, #4]
 800e480:	3b02      	subs	r3, #2
 800e482:	18cb      	adds	r3, r1, r3
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	041b      	lsls	r3, r3, #16
 800e488:	431a      	orrs	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6819      	ldr	r1, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	791b      	ldrb	r3, [r3, #4]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	18cb      	adds	r3, r1, r3
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	061b      	lsls	r3, r3, #24
 800e4a2:	431a      	orrs	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	0018      	movs	r0, r3
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	b005      	add	sp, #20
 800e4b0:	bd90      	pop	{r4, r7, pc}

0800e4b2 <LoRaMacSerializerJoinRequest>:
#include <drivers/lorawan/utilities.h>
#include <drivers/lorawan/mac/LoRaMacSerializer.h>


LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800e4b2:	b5b0      	push	{r4, r5, r7, lr}
 800e4b4:	b084      	sub	sp, #16
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d003      	beq.n	800e4c8 <LoRaMacSerializerJoinRequest+0x16>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e089      	b.n	800e5e0 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 800e4cc:	230e      	movs	r3, #14
 800e4ce:	18fb      	adds	r3, r7, r3
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	791b      	ldrb	r3, [r3, #4]
 800e4d8:	2b16      	cmp	r3, #22
 800e4da:	d801      	bhi.n	800e4e0 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e4dc:	2302      	movs	r3, #2
 800e4de:	e07f      	b.n	800e5e0 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	240e      	movs	r4, #14
 800e4e6:	193b      	adds	r3, r7, r4
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	1939      	adds	r1, r7, r4
 800e4ec:	1c58      	adds	r0, r3, #1
 800e4ee:	8008      	strh	r0, [r1, #0]
 800e4f0:	18d3      	adds	r3, r2, r3
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	7952      	ldrb	r2, [r2, #5]
 800e4f6:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	193b      	adds	r3, r7, r4
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	18d0      	adds	r0, r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	3306      	adds	r3, #6
 800e506:	2208      	movs	r2, #8
 800e508:	0019      	movs	r1, r3
 800e50a:	f00e fc02 	bl	801cd12 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800e50e:	193b      	adds	r3, r7, r4
 800e510:	193a      	adds	r2, r7, r4
 800e512:	8812      	ldrh	r2, [r2, #0]
 800e514:	3208      	adds	r2, #8
 800e516:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	193b      	adds	r3, r7, r4
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	18d0      	adds	r0, r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	330e      	adds	r3, #14
 800e526:	2208      	movs	r2, #8
 800e528:	0019      	movs	r1, r3
 800e52a:	f00e fbf2 	bl	801cd12 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 800e52e:	193b      	adds	r3, r7, r4
 800e530:	0025      	movs	r5, r4
 800e532:	193a      	adds	r2, r7, r4
 800e534:	8812      	ldrh	r2, [r2, #0]
 800e536:	3208      	adds	r2, #8
 800e538:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	8ad8      	ldrh	r0, [r3, #22]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	197b      	adds	r3, r7, r5
 800e544:	881b      	ldrh	r3, [r3, #0]
 800e546:	1979      	adds	r1, r7, r5
 800e548:	1c5c      	adds	r4, r3, #1
 800e54a:	800c      	strh	r4, [r1, #0]
 800e54c:	18d3      	adds	r3, r2, r3
 800e54e:	b2c2      	uxtb	r2, r0
 800e550:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	8adb      	ldrh	r3, [r3, #22]
 800e556:	0a1b      	lsrs	r3, r3, #8
 800e558:	b298      	uxth	r0, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	197b      	adds	r3, r7, r5
 800e560:	881b      	ldrh	r3, [r3, #0]
 800e562:	1979      	adds	r1, r7, r5
 800e564:	1c5c      	adds	r4, r3, #1
 800e566:	800c      	strh	r4, [r1, #0]
 800e568:	18d3      	adds	r3, r2, r3
 800e56a:	b2c2      	uxtb	r2, r0
 800e56c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6998      	ldr	r0, [r3, #24]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	197b      	adds	r3, r7, r5
 800e578:	881b      	ldrh	r3, [r3, #0]
 800e57a:	1979      	adds	r1, r7, r5
 800e57c:	1c5c      	adds	r4, r3, #1
 800e57e:	800c      	strh	r4, [r1, #0]
 800e580:	18d3      	adds	r3, r2, r3
 800e582:	b2c2      	uxtb	r2, r0
 800e584:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	0a18      	lsrs	r0, r3, #8
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	197b      	adds	r3, r7, r5
 800e592:	881b      	ldrh	r3, [r3, #0]
 800e594:	1979      	adds	r1, r7, r5
 800e596:	1c5c      	adds	r4, r3, #1
 800e598:	800c      	strh	r4, [r1, #0]
 800e59a:	18d3      	adds	r3, r2, r3
 800e59c:	b2c2      	uxtb	r2, r0
 800e59e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	0c18      	lsrs	r0, r3, #16
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	197b      	adds	r3, r7, r5
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	1979      	adds	r1, r7, r5
 800e5b0:	1c5c      	adds	r4, r3, #1
 800e5b2:	800c      	strh	r4, [r1, #0]
 800e5b4:	18d3      	adds	r3, r2, r3
 800e5b6:	b2c2      	uxtb	r2, r0
 800e5b8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	699b      	ldr	r3, [r3, #24]
 800e5be:	0e18      	lsrs	r0, r3, #24
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	197b      	adds	r3, r7, r5
 800e5c6:	881b      	ldrh	r3, [r3, #0]
 800e5c8:	1979      	adds	r1, r7, r5
 800e5ca:	1c5c      	adds	r4, r3, #1
 800e5cc:	800c      	strh	r4, [r1, #0]
 800e5ce:	18d3      	adds	r3, r2, r3
 800e5d0:	b2c2      	uxtb	r2, r0
 800e5d2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800e5d4:	197b      	adds	r3, r7, r5
 800e5d6:	881b      	ldrh	r3, [r3, #0]
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	0018      	movs	r0, r3
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	b004      	add	sp, #16
 800e5e6:	bdb0      	pop	{r4, r5, r7, pc}

0800e5e8 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800e5e8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d003      	beq.n	800e5fe <LoRaMacSerializerData+0x16>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d101      	bne.n	800e602 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800e5fe:	2301      	movs	r3, #1
 800e600:	e110      	b.n	800e824 <LoRaMacSerializerData+0x23c>
    }

    uint16_t bufItr = 0;
 800e602:	230e      	movs	r3, #14
 800e604:	18fb      	adds	r3, r7, r3
 800e606:	2200      	movs	r2, #0
 800e608:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 800e60a:	230c      	movs	r3, #12
 800e60c:	18fb      	adds	r3, r7, r3
 800e60e:	2208      	movs	r2, #8
 800e610:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    if( macMsg->FRMPayloadSize == 0 )
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2228      	movs	r2, #40	; 0x28
 800e616:	5c9b      	ldrb	r3, [r3, r2]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d109      	bne.n	800e630 <LoRaMacSerializerData+0x48>
    {
        if( macMsg->BufSize < computedBufSize )
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	791b      	ldrb	r3, [r3, #4]
 800e620:	b29b      	uxth	r3, r3
 800e622:	220c      	movs	r2, #12
 800e624:	18ba      	adds	r2, r7, r2
 800e626:	8812      	ldrh	r2, [r2, #0]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d916      	bls.n	800e65a <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e62c:	2302      	movs	r3, #2
 800e62e:	e0f9      	b.n	800e824 <LoRaMacSerializerData+0x23c>
        }
    }
    else
    {   //If FRMPayload >0, FPort field is present.
        if( macMsg->BufSize < computedBufSize + macMsg->FHDR.FCtrl.Bits.FOptsLen + macMsg->FRMPayloadSize + LORAMAC_F_PORT_FIELD_SIZE )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	791b      	ldrb	r3, [r3, #4]
 800e634:	0018      	movs	r0, r3
 800e636:	230c      	movs	r3, #12
 800e638:	18fb      	adds	r3, r7, r3
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	7b12      	ldrb	r2, [r2, #12]
 800e640:	0712      	lsls	r2, r2, #28
 800e642:	0f12      	lsrs	r2, r2, #28
 800e644:	b2d2      	uxtb	r2, r2
 800e646:	189b      	adds	r3, r3, r2
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	2128      	movs	r1, #40	; 0x28
 800e64c:	5c52      	ldrb	r2, [r2, r1]
 800e64e:	189b      	adds	r3, r3, r2
 800e650:	3301      	adds	r3, #1
 800e652:	4298      	cmp	r0, r3
 800e654:	da01      	bge.n	800e65a <LoRaMacSerializerData+0x72>
        {
            return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800e656:	2302      	movs	r3, #2
 800e658:	e0e4      	b.n	800e824 <LoRaMacSerializerData+0x23c>
        }
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	250e      	movs	r5, #14
 800e660:	197b      	adds	r3, r7, r5
 800e662:	881b      	ldrh	r3, [r3, #0]
 800e664:	1979      	adds	r1, r7, r5
 800e666:	1c58      	adds	r0, r3, #1
 800e668:	8008      	strh	r0, [r1, #0]
 800e66a:	18d3      	adds	r3, r2, r3
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	7952      	ldrb	r2, [r2, #5]
 800e670:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6898      	ldr	r0, [r3, #8]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	197b      	adds	r3, r7, r5
 800e67c:	881b      	ldrh	r3, [r3, #0]
 800e67e:	1979      	adds	r1, r7, r5
 800e680:	1c5c      	adds	r4, r3, #1
 800e682:	800c      	strh	r4, [r1, #0]
 800e684:	18d3      	adds	r3, r2, r3
 800e686:	b2c2      	uxtb	r2, r0
 800e688:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	0a18      	lsrs	r0, r3, #8
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	197b      	adds	r3, r7, r5
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	1979      	adds	r1, r7, r5
 800e69a:	1c5c      	adds	r4, r3, #1
 800e69c:	800c      	strh	r4, [r1, #0]
 800e69e:	18d3      	adds	r3, r2, r3
 800e6a0:	b2c2      	uxtb	r2, r0
 800e6a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	0c18      	lsrs	r0, r3, #16
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	197b      	adds	r3, r7, r5
 800e6b0:	881b      	ldrh	r3, [r3, #0]
 800e6b2:	1979      	adds	r1, r7, r5
 800e6b4:	1c5c      	adds	r4, r3, #1
 800e6b6:	800c      	strh	r4, [r1, #0]
 800e6b8:	18d3      	adds	r3, r2, r3
 800e6ba:	b2c2      	uxtb	r2, r0
 800e6bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	0e18      	lsrs	r0, r3, #24
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	197b      	adds	r3, r7, r5
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	1979      	adds	r1, r7, r5
 800e6ce:	1c5c      	adds	r4, r3, #1
 800e6d0:	800c      	strh	r4, [r1, #0]
 800e6d2:	18d3      	adds	r3, r2, r3
 800e6d4:	b2c2      	uxtb	r2, r0
 800e6d6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	197b      	adds	r3, r7, r5
 800e6de:	881b      	ldrh	r3, [r3, #0]
 800e6e0:	1979      	adds	r1, r7, r5
 800e6e2:	1c58      	adds	r0, r3, #1
 800e6e4:	8008      	strh	r0, [r1, #0]
 800e6e6:	18d3      	adds	r3, r2, r3
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	7b12      	ldrb	r2, [r2, #12]
 800e6ec:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	89d8      	ldrh	r0, [r3, #14]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	197b      	adds	r3, r7, r5
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	1979      	adds	r1, r7, r5
 800e6fc:	1c5c      	adds	r4, r3, #1
 800e6fe:	800c      	strh	r4, [r1, #0]
 800e700:	18d3      	adds	r3, r2, r3
 800e702:	b2c2      	uxtb	r2, r0
 800e704:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	89db      	ldrh	r3, [r3, #14]
 800e70a:	0a1b      	lsrs	r3, r3, #8
 800e70c:	b298      	uxth	r0, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	197b      	adds	r3, r7, r5
 800e714:	881b      	ldrh	r3, [r3, #0]
 800e716:	1979      	adds	r1, r7, r5
 800e718:	1c5c      	adds	r4, r3, #1
 800e71a:	800c      	strh	r4, [r1, #0]
 800e71c:	18d3      	adds	r3, r2, r3
 800e71e:	b2c2      	uxtb	r2, r0
 800e720:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	002c      	movs	r4, r5
 800e728:	197b      	adds	r3, r7, r5
 800e72a:	881b      	ldrh	r3, [r3, #0]
 800e72c:	18d0      	adds	r0, r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3310      	adds	r3, #16
 800e732:	0019      	movs	r1, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	7b1b      	ldrb	r3, [r3, #12]
 800e738:	071b      	lsls	r3, r3, #28
 800e73a:	0f1b      	lsrs	r3, r3, #28
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	b29b      	uxth	r3, r3
 800e740:	001a      	movs	r2, r3
 800e742:	f00e facb 	bl	801ccdc <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	7b1b      	ldrb	r3, [r3, #12]
 800e74a:	071b      	lsls	r3, r3, #28
 800e74c:	0f1b      	lsrs	r3, r3, #28
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	b299      	uxth	r1, r3
 800e752:	193b      	adds	r3, r7, r4
 800e754:	193a      	adds	r2, r7, r4
 800e756:	8812      	ldrh	r2, [r2, #0]
 800e758:	188a      	adds	r2, r1, r2
 800e75a:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2228      	movs	r2, #40	; 0x28
 800e760:	5c9b      	ldrb	r3, [r3, r2]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00c      	beq.n	800e780 <LoRaMacSerializerData+0x198>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	210e      	movs	r1, #14
 800e76c:	187b      	adds	r3, r7, r1
 800e76e:	881b      	ldrh	r3, [r3, #0]
 800e770:	1879      	adds	r1, r7, r1
 800e772:	1c58      	adds	r0, r3, #1
 800e774:	8008      	strh	r0, [r1, #0]
 800e776:	18d3      	adds	r3, r2, r3
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	2120      	movs	r1, #32
 800e77c:	5c52      	ldrb	r2, [r2, r1]
 800e77e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	240e      	movs	r4, #14
 800e786:	193b      	adds	r3, r7, r4
 800e788:	881b      	ldrh	r3, [r3, #0]
 800e78a:	18d0      	adds	r0, r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2228      	movs	r2, #40	; 0x28
 800e794:	5c9b      	ldrb	r3, [r3, r2]
 800e796:	b29b      	uxth	r3, r3
 800e798:	001a      	movs	r2, r3
 800e79a:	f00e fa9f 	bl	801ccdc <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2228      	movs	r2, #40	; 0x28
 800e7a2:	5c9b      	ldrb	r3, [r3, r2]
 800e7a4:	b299      	uxth	r1, r3
 800e7a6:	193b      	adds	r3, r7, r4
 800e7a8:	193a      	adds	r2, r7, r4
 800e7aa:	8812      	ldrh	r2, [r2, #0]
 800e7ac:	188a      	adds	r2, r1, r2
 800e7ae:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	193b      	adds	r3, r7, r4
 800e7ba:	881b      	ldrh	r3, [r3, #0]
 800e7bc:	0025      	movs	r5, r4
 800e7be:	1939      	adds	r1, r7, r4
 800e7c0:	1c5c      	adds	r4, r3, #1
 800e7c2:	800c      	strh	r4, [r1, #0]
 800e7c4:	18d3      	adds	r3, r2, r3
 800e7c6:	b2c2      	uxtb	r2, r0
 800e7c8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ce:	0a18      	lsrs	r0, r3, #8
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	197b      	adds	r3, r7, r5
 800e7d6:	881b      	ldrh	r3, [r3, #0]
 800e7d8:	1979      	adds	r1, r7, r5
 800e7da:	1c5c      	adds	r4, r3, #1
 800e7dc:	800c      	strh	r4, [r1, #0]
 800e7de:	18d3      	adds	r3, r2, r3
 800e7e0:	b2c2      	uxtb	r2, r0
 800e7e2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e8:	0c18      	lsrs	r0, r3, #16
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	197b      	adds	r3, r7, r5
 800e7f0:	881b      	ldrh	r3, [r3, #0]
 800e7f2:	1979      	adds	r1, r7, r5
 800e7f4:	1c5c      	adds	r4, r3, #1
 800e7f6:	800c      	strh	r4, [r1, #0]
 800e7f8:	18d3      	adds	r3, r2, r3
 800e7fa:	b2c2      	uxtb	r2, r0
 800e7fc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e802:	0e18      	lsrs	r0, r3, #24
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	197b      	adds	r3, r7, r5
 800e80a:	881b      	ldrh	r3, [r3, #0]
 800e80c:	1979      	adds	r1, r7, r5
 800e80e:	1c5c      	adds	r4, r3, #1
 800e810:	800c      	strh	r4, [r1, #0]
 800e812:	18d3      	adds	r3, r2, r3
 800e814:	b2c2      	uxtb	r2, r0
 800e816:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800e818:	197b      	adds	r3, r7, r5
 800e81a:	881b      	ldrh	r3, [r3, #0]
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800e822:	2300      	movs	r3, #0
}
 800e824:	0018      	movs	r0, r3
 800e826:	46bd      	mov	sp, r7
 800e828:	b004      	add	sp, #16
 800e82a:	bdb0      	pop	{r4, r5, r7, pc}

0800e82c <RegionGetPhyParam>:
        }
    }
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	0002      	movs	r2, r0
 800e834:	6039      	str	r1, [r7, #0]
 800e836:	1dfb      	adds	r3, r7, #7
 800e838:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 800e83a:	2308      	movs	r3, #8
 800e83c:	18fb      	adds	r3, r7, r3
 800e83e:	2200      	movs	r2, #0
 800e840:	601a      	str	r2, [r3, #0]
    switch( region )
 800e842:	1dfb      	adds	r3, r7, #7
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	2b09      	cmp	r3, #9
 800e848:	d868      	bhi.n	800e91c <RegionGetPhyParam+0xf0>
 800e84a:	009a      	lsls	r2, r3, #2
 800e84c:	4b3b      	ldr	r3, [pc, #236]	; (800e93c <RegionGetPhyParam+0x110>)
 800e84e:	18d3      	adds	r3, r2, r3
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	469f      	mov	pc, r3
    {
        AS923_GET_PHY_PARAM( );
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	0018      	movs	r0, r3
 800e858:	f000 ff64 	bl	800f724 <RegionAS923GetPhyParam>
 800e85c:	0003      	movs	r3, r0
 800e85e:	001a      	movs	r2, r3
 800e860:	230c      	movs	r3, #12
 800e862:	18fb      	adds	r3, r7, r3
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	e05f      	b.n	800e928 <RegionGetPhyParam+0xfc>
        AU915_GET_PHY_PARAM( );
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	0018      	movs	r0, r3
 800e86c:	f002 fa00 	bl	8010c70 <RegionAU915GetPhyParam>
 800e870:	0003      	movs	r3, r0
 800e872:	001a      	movs	r2, r3
 800e874:	230c      	movs	r3, #12
 800e876:	18fb      	adds	r3, r7, r3
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	e055      	b.n	800e928 <RegionGetPhyParam+0xfc>
        CN470_GET_PHY_PARAM( );
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	0018      	movs	r0, r3
 800e880:	f003 fc06 	bl	8012090 <RegionCN470GetPhyParam>
 800e884:	0003      	movs	r3, r0
 800e886:	001a      	movs	r2, r3
 800e888:	230c      	movs	r3, #12
 800e88a:	18fb      	adds	r3, r7, r3
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	e04b      	b.n	800e928 <RegionGetPhyParam+0xfc>
        CN779_GET_PHY_PARAM( );
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	0018      	movs	r0, r3
 800e894:	f004 fbea 	bl	801306c <RegionCN779GetPhyParam>
 800e898:	0003      	movs	r3, r0
 800e89a:	001a      	movs	r2, r3
 800e89c:	230c      	movs	r3, #12
 800e89e:	18fb      	adds	r3, r7, r3
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	e041      	b.n	800e928 <RegionGetPhyParam+0xfc>
        EU433_GET_PHY_PARAM( );
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	0018      	movs	r0, r3
 800e8a8:	f006 fb5c 	bl	8014f64 <RegionEU433GetPhyParam>
 800e8ac:	0003      	movs	r3, r0
 800e8ae:	001a      	movs	r2, r3
 800e8b0:	230c      	movs	r3, #12
 800e8b2:	18fb      	adds	r3, r7, r3
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	e037      	b.n	800e928 <RegionGetPhyParam+0xfc>
        EU868_GET_PHY_PARAM( );
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	f007 fda4 	bl	8016408 <RegionEU868GetPhyParam>
 800e8c0:	0003      	movs	r3, r0
 800e8c2:	001a      	movs	r2, r3
 800e8c4:	230c      	movs	r3, #12
 800e8c6:	18fb      	adds	r3, r7, r3
 800e8c8:	601a      	str	r2, [r3, #0]
 800e8ca:	e02d      	b.n	800e928 <RegionGetPhyParam+0xfc>
        KR920_GET_PHY_PARAM( );
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	0018      	movs	r0, r3
 800e8d0:	f00a fa0a 	bl	8018ce8 <RegionKR920GetPhyParam>
 800e8d4:	0003      	movs	r3, r0
 800e8d6:	001a      	movs	r2, r3
 800e8d8:	230c      	movs	r3, #12
 800e8da:	18fb      	adds	r3, r7, r3
 800e8dc:	601a      	str	r2, [r3, #0]
 800e8de:	e023      	b.n	800e928 <RegionGetPhyParam+0xfc>
        IN865_GET_PHY_PARAM( );
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	0018      	movs	r0, r3
 800e8e4:	f008 ffc6 	bl	8017874 <RegionIN865GetPhyParam>
 800e8e8:	0003      	movs	r3, r0
 800e8ea:	001a      	movs	r2, r3
 800e8ec:	230c      	movs	r3, #12
 800e8ee:	18fb      	adds	r3, r7, r3
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	e019      	b.n	800e928 <RegionGetPhyParam+0xfc>
        US915_GET_PHY_PARAM( );
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	0018      	movs	r0, r3
 800e8f8:	f00c feb4 	bl	801b664 <RegionUS915GetPhyParam>
 800e8fc:	0003      	movs	r3, r0
 800e8fe:	001a      	movs	r2, r3
 800e900:	230c      	movs	r3, #12
 800e902:	18fb      	adds	r3, r7, r3
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	e00f      	b.n	800e928 <RegionGetPhyParam+0xfc>
        RU864_GET_PHY_PARAM( );
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	0018      	movs	r0, r3
 800e90c:	f00b fbae 	bl	801a06c <RegionRU864GetPhyParam>
 800e910:	0003      	movs	r3, r0
 800e912:	001a      	movs	r2, r3
 800e914:	230c      	movs	r3, #12
 800e916:	18fb      	adds	r3, r7, r3
 800e918:	601a      	str	r2, [r3, #0]
 800e91a:	e005      	b.n	800e928 <RegionGetPhyParam+0xfc>
        default:
        {
            return phyParam;
 800e91c:	230c      	movs	r3, #12
 800e91e:	18fb      	adds	r3, r7, r3
 800e920:	2208      	movs	r2, #8
 800e922:	18ba      	adds	r2, r7, r2
 800e924:	6812      	ldr	r2, [r2, #0]
 800e926:	601a      	str	r2, [r3, #0]
 800e928:	230c      	movs	r3, #12
 800e92a:	18fb      	adds	r3, r7, r3
 800e92c:	2200      	movs	r2, #0
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	0013      	movs	r3, r2
        }
    }
}
 800e932:	0018      	movs	r0, r3
 800e934:	46bd      	mov	sp, r7
 800e936:	b004      	add	sp, #16
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	46c0      	nop			; (mov r8, r8)
 800e93c:	08027bc8 	.word	0x08027bc8

0800e940 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	0002      	movs	r2, r0
 800e948:	6039      	str	r1, [r7, #0]
 800e94a:	1dfb      	adds	r3, r7, #7
 800e94c:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e94e:	1dfb      	adds	r3, r7, #7
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	2b09      	cmp	r3, #9
 800e954:	d836      	bhi.n	800e9c4 <RegionSetBandTxDone+0x84>
 800e956:	009a      	lsls	r2, r3, #2
 800e958:	4b1c      	ldr	r3, [pc, #112]	; (800e9cc <RegionSetBandTxDone+0x8c>)
 800e95a:	18d3      	adds	r3, r2, r3
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	469f      	mov	pc, r3
    {
        AS923_SET_BAND_TX_DONE( );
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	0018      	movs	r0, r3
 800e964:	f001 f82c 	bl	800f9c0 <RegionAS923SetBandTxDone>
 800e968:	e02d      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        AU915_SET_BAND_TX_DONE( );
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	0018      	movs	r0, r3
 800e96e:	f002 fad5 	bl	8010f1c <RegionAU915SetBandTxDone>
 800e972:	e028      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        CN470_SET_BAND_TX_DONE( );
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	0018      	movs	r0, r3
 800e978:	f003 fc96 	bl	80122a8 <RegionCN470SetBandTxDone>
 800e97c:	e023      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        CN779_SET_BAND_TX_DONE( );
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	0018      	movs	r0, r3
 800e982:	f004 fc79 	bl	8013278 <RegionCN779SetBandTxDone>
 800e986:	e01e      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        EU433_SET_BAND_TX_DONE( );
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	0018      	movs	r0, r3
 800e98c:	f006 fbee 	bl	801516c <RegionEU433SetBandTxDone>
 800e990:	e019      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        EU868_SET_BAND_TX_DONE( );
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	0018      	movs	r0, r3
 800e996:	f007 fe3b 	bl	8016610 <RegionEU868SetBandTxDone>
 800e99a:	e014      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        KR920_SET_BAND_TX_DONE( );
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	0018      	movs	r0, r3
 800e9a0:	f00a faa8 	bl	8018ef4 <RegionKR920SetBandTxDone>
 800e9a4:	e00f      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        IN865_SET_BAND_TX_DONE( );
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	0018      	movs	r0, r3
 800e9aa:	f009 f867 	bl	8017a7c <RegionIN865SetBandTxDone>
 800e9ae:	e00a      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        US915_SET_BAND_TX_DONE( );
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	0018      	movs	r0, r3
 800e9b4:	f00c ff64 	bl	801b880 <RegionUS915SetBandTxDone>
 800e9b8:	e005      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        RU864_SET_BAND_TX_DONE( );
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	0018      	movs	r0, r3
 800e9be:	f00b fc4f 	bl	801a260 <RegionRU864SetBandTxDone>
 800e9c2:	e000      	b.n	800e9c6 <RegionSetBandTxDone+0x86>
        default:
        {
            return;
 800e9c4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	b002      	add	sp, #8
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	08027bf0 	.word	0x08027bf0

0800e9d0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	0002      	movs	r2, r0
 800e9d8:	6039      	str	r1, [r7, #0]
 800e9da:	1dfb      	adds	r3, r7, #7
 800e9dc:	701a      	strb	r2, [r3, #0]
    switch( region )
 800e9de:	1dfb      	adds	r3, r7, #7
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	2b09      	cmp	r3, #9
 800e9e4:	d836      	bhi.n	800ea54 <RegionInitDefaults+0x84>
 800e9e6:	009a      	lsls	r2, r3, #2
 800e9e8:	4b1d      	ldr	r3, [pc, #116]	; (800ea60 <RegionInitDefaults+0x90>)
 800e9ea:	18d3      	adds	r3, r2, r3
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	469f      	mov	pc, r3
    {
        AS923_INIT_DEFAULTS( );
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	f001 f804 	bl	800fa00 <RegionAS923InitDefaults>
 800e9f8:	e02d      	b.n	800ea56 <RegionInitDefaults+0x86>
        AU915_INIT_DEFAULTS( );
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	0018      	movs	r0, r3
 800e9fe:	f002 faad 	bl	8010f5c <RegionAU915InitDefaults>
 800ea02:	e028      	b.n	800ea56 <RegionInitDefaults+0x86>
        CN470_INIT_DEFAULTS( );
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	0018      	movs	r0, r3
 800ea08:	f003 fc6e 	bl	80122e8 <RegionCN470InitDefaults>
 800ea0c:	e023      	b.n	800ea56 <RegionInitDefaults+0x86>
        CN779_INIT_DEFAULTS( );
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	0018      	movs	r0, r3
 800ea12:	f004 fc51 	bl	80132b8 <RegionCN779InitDefaults>
 800ea16:	e01e      	b.n	800ea56 <RegionInitDefaults+0x86>
        EU433_INIT_DEFAULTS( );
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	0018      	movs	r0, r3
 800ea1c:	f006 fbc6 	bl	80151ac <RegionEU433InitDefaults>
 800ea20:	e019      	b.n	800ea56 <RegionInitDefaults+0x86>
        EU868_INIT_DEFAULTS( );
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	0018      	movs	r0, r3
 800ea26:	f007 fe13 	bl	8016650 <RegionEU868InitDefaults>
 800ea2a:	e014      	b.n	800ea56 <RegionInitDefaults+0x86>
        KR920_INIT_DEFAULTS( );
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	0018      	movs	r0, r3
 800ea30:	f00a fa80 	bl	8018f34 <RegionKR920InitDefaults>
 800ea34:	e00f      	b.n	800ea56 <RegionInitDefaults+0x86>
        IN865_INIT_DEFAULTS( );
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	0018      	movs	r0, r3
 800ea3a:	f009 f83f 	bl	8017abc <RegionIN865InitDefaults>
 800ea3e:	e00a      	b.n	800ea56 <RegionInitDefaults+0x86>
        US915_INIT_DEFAULTS( );
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	0018      	movs	r0, r3
 800ea44:	f00c ff3c 	bl	801b8c0 <RegionUS915InitDefaults>
 800ea48:	e005      	b.n	800ea56 <RegionInitDefaults+0x86>
        RU864_INIT_DEFAULTS( );
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	0018      	movs	r0, r3
 800ea4e:	f00b fc27 	bl	801a2a0 <RegionRU864InitDefaults>
 800ea52:	e000      	b.n	800ea56 <RegionInitDefaults+0x86>
        default:
        {
            break;
 800ea54:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800ea56:	46c0      	nop			; (mov r8, r8)
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	b002      	add	sp, #8
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	46c0      	nop			; (mov r8, r8)
 800ea60:	08027c18 	.word	0x08027c18

0800ea64 <RegionApplyCFList>:
        }
    }
}

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	0002      	movs	r2, r0
 800ea6c:	6039      	str	r1, [r7, #0]
 800ea6e:	1dfb      	adds	r3, r7, #7
 800ea70:	701a      	strb	r2, [r3, #0]
    switch( region )
 800ea72:	1dfb      	adds	r3, r7, #7
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	2b09      	cmp	r3, #9
 800ea78:	d836      	bhi.n	800eae8 <RegionApplyCFList+0x84>
 800ea7a:	009a      	lsls	r2, r3, #2
 800ea7c:	4b1d      	ldr	r3, [pc, #116]	; (800eaf4 <RegionApplyCFList+0x90>)
 800ea7e:	18d3      	adds	r3, r2, r3
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	469f      	mov	pc, r3
    {
        AS923_APPLY_CF_LIST( );
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	0018      	movs	r0, r3
 800ea88:	f001 f81c 	bl	800fac4 <RegionAS923ApplyCFList>
 800ea8c:	e02d      	b.n	800eaea <RegionApplyCFList+0x86>
        AU915_APPLY_CF_LIST( );
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	0018      	movs	r0, r3
 800ea92:	f002 fb81 	bl	8011198 <RegionAU915ApplyCFList>
 800ea96:	e028      	b.n	800eaea <RegionApplyCFList+0x86>
        CN470_APPLY_CF_LIST( );
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	0018      	movs	r0, r3
 800ea9c:	f003 fcd6 	bl	801244c <RegionCN470ApplyCFList>
 800eaa0:	e023      	b.n	800eaea <RegionApplyCFList+0x86>
        CN779_APPLY_CF_LIST( );
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	0018      	movs	r0, r3
 800eaa6:	f004 fc6f 	bl	8013388 <RegionCN779ApplyCFList>
 800eaaa:	e01e      	b.n	800eaea <RegionApplyCFList+0x86>
        EU433_APPLY_CF_LIST( );
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	0018      	movs	r0, r3
 800eab0:	f006 fbe4 	bl	801527c <RegionEU433ApplyCFList>
 800eab4:	e019      	b.n	800eaea <RegionApplyCFList+0x86>
        EU868_APPLY_CF_LIST( );
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	0018      	movs	r0, r3
 800eaba:	f007 fe41 	bl	8016740 <RegionEU868ApplyCFList>
 800eabe:	e014      	b.n	800eaea <RegionApplyCFList+0x86>
        KR920_APPLY_CF_LIST( );
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	0018      	movs	r0, r3
 800eac4:	f00a fa9e 	bl	8019004 <RegionKR920ApplyCFList>
 800eac8:	e00f      	b.n	800eaea <RegionApplyCFList+0x86>
        IN865_APPLY_CF_LIST( );
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	0018      	movs	r0, r3
 800eace:	f009 f85d 	bl	8017b8c <RegionIN865ApplyCFList>
 800ead2:	e00a      	b.n	800eaea <RegionApplyCFList+0x86>
        US915_APPLY_CF_LIST( );
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	0018      	movs	r0, r3
 800ead8:	f00d f81c 	bl	801bb14 <RegionUS915ApplyCFList>
 800eadc:	e005      	b.n	800eaea <RegionApplyCFList+0x86>
        RU864_APPLY_CF_LIST( );
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	0018      	movs	r0, r3
 800eae2:	f00b fc3f 	bl	801a364 <RegionRU864ApplyCFList>
 800eae6:	e000      	b.n	800eaea <RegionApplyCFList+0x86>
        default:
        {
            break;
 800eae8:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800eaea:	46c0      	nop			; (mov r8, r8)
 800eaec:	46bd      	mov	sp, r7
 800eaee:	b002      	add	sp, #8
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	46c0      	nop			; (mov r8, r8)
 800eaf4:	08027c40 	.word	0x08027c40

0800eaf8 <RegionComputeRxWindowParameters>:
        }
    }
}

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800eaf8:	b590      	push	{r4, r7, lr}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	0004      	movs	r4, r0
 800eb00:	0008      	movs	r0, r1
 800eb02:	0011      	movs	r1, r2
 800eb04:	603b      	str	r3, [r7, #0]
 800eb06:	1dfb      	adds	r3, r7, #7
 800eb08:	1c22      	adds	r2, r4, #0
 800eb0a:	701a      	strb	r2, [r3, #0]
 800eb0c:	1dbb      	adds	r3, r7, #6
 800eb0e:	1c02      	adds	r2, r0, #0
 800eb10:	701a      	strb	r2, [r3, #0]
 800eb12:	1d7b      	adds	r3, r7, #5
 800eb14:	1c0a      	adds	r2, r1, #0
 800eb16:	701a      	strb	r2, [r3, #0]
    switch( region )
 800eb18:	1dfb      	adds	r3, r7, #7
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	2b09      	cmp	r3, #9
 800eb1e:	d900      	bls.n	800eb22 <RegionComputeRxWindowParameters+0x2a>
 800eb20:	e072      	b.n	800ec08 <RegionComputeRxWindowParameters+0x110>
 800eb22:	009a      	lsls	r2, r3, #2
 800eb24:	4b3b      	ldr	r3, [pc, #236]	; (800ec14 <RegionComputeRxWindowParameters+0x11c>)
 800eb26:	18d3      	adds	r3, r2, r3
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	469f      	mov	pc, r3
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb2c:	69bc      	ldr	r4, [r7, #24]
 800eb2e:	683a      	ldr	r2, [r7, #0]
 800eb30:	1d7b      	adds	r3, r7, #5
 800eb32:	7819      	ldrb	r1, [r3, #0]
 800eb34:	1dbb      	adds	r3, r7, #6
 800eb36:	2000      	movs	r0, #0
 800eb38:	5618      	ldrsb	r0, [r3, r0]
 800eb3a:	0023      	movs	r3, r4
 800eb3c:	f001 f854 	bl	800fbe8 <RegionAS923ComputeRxWindowParameters>
 800eb40:	e063      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb42:	69bc      	ldr	r4, [r7, #24]
 800eb44:	683a      	ldr	r2, [r7, #0]
 800eb46:	1d7b      	adds	r3, r7, #5
 800eb48:	7819      	ldrb	r1, [r3, #0]
 800eb4a:	1dbb      	adds	r3, r7, #6
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	5618      	ldrsb	r0, [r3, r0]
 800eb50:	0023      	movs	r3, r4
 800eb52:	f002 fbb1 	bl	80112b8 <RegionAU915ComputeRxWindowParameters>
 800eb56:	e058      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb58:	69bc      	ldr	r4, [r7, #24]
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	1d7b      	adds	r3, r7, #5
 800eb5e:	7819      	ldrb	r1, [r3, #0]
 800eb60:	1dbb      	adds	r3, r7, #6
 800eb62:	2000      	movs	r0, #0
 800eb64:	5618      	ldrsb	r0, [r3, r0]
 800eb66:	0023      	movs	r3, r4
 800eb68:	f003 fcd0 	bl	801250c <RegionCN470ComputeRxWindowParameters>
 800eb6c:	e04d      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb6e:	69bc      	ldr	r4, [r7, #24]
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	1d7b      	adds	r3, r7, #5
 800eb74:	7819      	ldrb	r1, [r3, #0]
 800eb76:	1dbb      	adds	r3, r7, #6
 800eb78:	2000      	movs	r0, #0
 800eb7a:	5618      	ldrsb	r0, [r3, r0]
 800eb7c:	0023      	movs	r3, r4
 800eb7e:	f004 fc95 	bl	80134ac <RegionCN779ComputeRxWindowParameters>
 800eb82:	e042      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb84:	69bc      	ldr	r4, [r7, #24]
 800eb86:	683a      	ldr	r2, [r7, #0]
 800eb88:	1d7b      	adds	r3, r7, #5
 800eb8a:	7819      	ldrb	r1, [r3, #0]
 800eb8c:	1dbb      	adds	r3, r7, #6
 800eb8e:	2000      	movs	r0, #0
 800eb90:	5618      	ldrsb	r0, [r3, r0]
 800eb92:	0023      	movs	r3, r4
 800eb94:	f006 fc04 	bl	80153a0 <RegionEU433ComputeRxWindowParameters>
 800eb98:	e037      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800eb9a:	69bc      	ldr	r4, [r7, #24]
 800eb9c:	683a      	ldr	r2, [r7, #0]
 800eb9e:	1d7b      	adds	r3, r7, #5
 800eba0:	7819      	ldrb	r1, [r3, #0]
 800eba2:	1dbb      	adds	r3, r7, #6
 800eba4:	2000      	movs	r0, #0
 800eba6:	5618      	ldrsb	r0, [r3, r0]
 800eba8:	0023      	movs	r3, r4
 800ebaa:	f007 fe5b 	bl	8016864 <RegionEU868ComputeRxWindowParameters>
 800ebae:	e02c      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ebb0:	69bc      	ldr	r4, [r7, #24]
 800ebb2:	683a      	ldr	r2, [r7, #0]
 800ebb4:	1d7b      	adds	r3, r7, #5
 800ebb6:	7819      	ldrb	r1, [r3, #0]
 800ebb8:	1dbb      	adds	r3, r7, #6
 800ebba:	2000      	movs	r0, #0
 800ebbc:	5618      	ldrsb	r0, [r3, r0]
 800ebbe:	0023      	movs	r3, r4
 800ebc0:	f00a fab2 	bl	8019128 <RegionKR920ComputeRxWindowParameters>
 800ebc4:	e021      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ebc6:	69bc      	ldr	r4, [r7, #24]
 800ebc8:	683a      	ldr	r2, [r7, #0]
 800ebca:	1d7b      	adds	r3, r7, #5
 800ebcc:	7819      	ldrb	r1, [r3, #0]
 800ebce:	1dbb      	adds	r3, r7, #6
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	5618      	ldrsb	r0, [r3, r0]
 800ebd4:	0023      	movs	r3, r4
 800ebd6:	f009 f86b 	bl	8017cb0 <RegionIN865ComputeRxWindowParameters>
 800ebda:	e016      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ebdc:	69bc      	ldr	r4, [r7, #24]
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	1d7b      	adds	r3, r7, #5
 800ebe2:	7819      	ldrb	r1, [r3, #0]
 800ebe4:	1dbb      	adds	r3, r7, #6
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	5618      	ldrsb	r0, [r3, r0]
 800ebea:	0023      	movs	r3, r4
 800ebec:	f00d f822 	bl	801bc34 <RegionUS915ComputeRxWindowParameters>
 800ebf0:	e00b      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ebf2:	69bc      	ldr	r4, [r7, #24]
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	1d7b      	adds	r3, r7, #5
 800ebf8:	7819      	ldrb	r1, [r3, #0]
 800ebfa:	1dbb      	adds	r3, r7, #6
 800ebfc:	2000      	movs	r0, #0
 800ebfe:	5618      	ldrsb	r0, [r3, r0]
 800ec00:	0023      	movs	r3, r4
 800ec02:	f00b fc41 	bl	801a488 <RegionRU864ComputeRxWindowParameters>
 800ec06:	e000      	b.n	800ec0a <RegionComputeRxWindowParameters+0x112>
        default:
        {
            break;
 800ec08:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800ec0a:	46c0      	nop			; (mov r8, r8)
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	b003      	add	sp, #12
 800ec10:	bd90      	pop	{r4, r7, pc}
 800ec12:	46c0      	nop			; (mov r8, r8)
 800ec14:	08027c68 	.word	0x08027c68

0800ec18 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60b9      	str	r1, [r7, #8]
 800ec20:	607a      	str	r2, [r7, #4]
 800ec22:	210f      	movs	r1, #15
 800ec24:	187b      	adds	r3, r7, r1
 800ec26:	1c02      	adds	r2, r0, #0
 800ec28:	701a      	strb	r2, [r3, #0]
    switch( region )
 800ec2a:	187b      	adds	r3, r7, r1
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	2b09      	cmp	r3, #9
 800ec30:	d854      	bhi.n	800ecdc <RegionRxConfig+0xc4>
 800ec32:	009a      	lsls	r2, r3, #2
 800ec34:	4b2c      	ldr	r3, [pc, #176]	; (800ece8 <RegionRxConfig+0xd0>)
 800ec36:	18d3      	adds	r3, r2, r3
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	469f      	mov	pc, r3
    {
        AS923_RX_CONFIG( );
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	0011      	movs	r1, r2
 800ec42:	0018      	movs	r0, r3
 800ec44:	f001 f83a 	bl	800fcbc <RegionAS923RxConfig>
 800ec48:	0003      	movs	r3, r0
 800ec4a:	e048      	b.n	800ecde <RegionRxConfig+0xc6>
        AU915_RX_CONFIG( );
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	0011      	movs	r1, r2
 800ec52:	0018      	movs	r0, r3
 800ec54:	f002 fb88 	bl	8011368 <RegionAU915RxConfig>
 800ec58:	0003      	movs	r3, r0
 800ec5a:	e040      	b.n	800ecde <RegionRxConfig+0xc6>
        CN470_RX_CONFIG( );
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	0011      	movs	r1, r2
 800ec62:	0018      	movs	r0, r3
 800ec64:	f003 fcaa 	bl	80125bc <RegionCN470RxConfig>
 800ec68:	0003      	movs	r3, r0
 800ec6a:	e038      	b.n	800ecde <RegionRxConfig+0xc6>
        CN779_RX_CONFIG( );
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	0011      	movs	r1, r2
 800ec72:	0018      	movs	r0, r3
 800ec74:	f004 fc84 	bl	8013580 <RegionCN779RxConfig>
 800ec78:	0003      	movs	r3, r0
 800ec7a:	e030      	b.n	800ecde <RegionRxConfig+0xc6>
        EU433_RX_CONFIG( );
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	0011      	movs	r1, r2
 800ec82:	0018      	movs	r0, r3
 800ec84:	f006 fbf6 	bl	8015474 <RegionEU433RxConfig>
 800ec88:	0003      	movs	r3, r0
 800ec8a:	e028      	b.n	800ecde <RegionRxConfig+0xc6>
        EU868_RX_CONFIG( );
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	0011      	movs	r1, r2
 800ec92:	0018      	movs	r0, r3
 800ec94:	f007 fe50 	bl	8016938 <RegionEU868RxConfig>
 800ec98:	0003      	movs	r3, r0
 800ec9a:	e020      	b.n	800ecde <RegionRxConfig+0xc6>
        KR920_RX_CONFIG( );
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	0011      	movs	r1, r2
 800eca2:	0018      	movs	r0, r3
 800eca4:	f00a fa98 	bl	80191d8 <RegionKR920RxConfig>
 800eca8:	0003      	movs	r3, r0
 800ecaa:	e018      	b.n	800ecde <RegionRxConfig+0xc6>
        IN865_RX_CONFIG( );
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	0011      	movs	r1, r2
 800ecb2:	0018      	movs	r0, r3
 800ecb4:	f009 f866 	bl	8017d84 <RegionIN865RxConfig>
 800ecb8:	0003      	movs	r3, r0
 800ecba:	e010      	b.n	800ecde <RegionRxConfig+0xc6>
        US915_RX_CONFIG( );
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	0011      	movs	r1, r2
 800ecc2:	0018      	movs	r0, r3
 800ecc4:	f00d f80e 	bl	801bce4 <RegionUS915RxConfig>
 800ecc8:	0003      	movs	r3, r0
 800ecca:	e008      	b.n	800ecde <RegionRxConfig+0xc6>
        RU864_RX_CONFIG( );
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	0011      	movs	r1, r2
 800ecd2:	0018      	movs	r0, r3
 800ecd4:	f00b fc42 	bl	801a55c <RegionRU864RxConfig>
 800ecd8:	0003      	movs	r3, r0
 800ecda:	e000      	b.n	800ecde <RegionRxConfig+0xc6>
        default:
        {
            return false;
 800ecdc:	2300      	movs	r3, #0
        }
    }
}
 800ecde:	0018      	movs	r0, r3
 800ece0:	46bd      	mov	sp, r7
 800ece2:	b004      	add	sp, #16
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	46c0      	nop			; (mov r8, r8)
 800ece8:	08027c90 	.word	0x08027c90

0800ecec <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60b9      	str	r1, [r7, #8]
 800ecf4:	607a      	str	r2, [r7, #4]
 800ecf6:	603b      	str	r3, [r7, #0]
 800ecf8:	210f      	movs	r1, #15
 800ecfa:	187b      	adds	r3, r7, r1
 800ecfc:	1c02      	adds	r2, r0, #0
 800ecfe:	701a      	strb	r2, [r3, #0]
    switch( region )
 800ed00:	187b      	adds	r3, r7, r1
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	2b09      	cmp	r3, #9
 800ed06:	d854      	bhi.n	800edb2 <RegionTxConfig+0xc6>
 800ed08:	009a      	lsls	r2, r3, #2
 800ed0a:	4b2c      	ldr	r3, [pc, #176]	; (800edbc <RegionTxConfig+0xd0>)
 800ed0c:	18d3      	adds	r3, r2, r3
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	469f      	mov	pc, r3
    {
        AS923_TX_CONFIG( );
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	6879      	ldr	r1, [r7, #4]
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	0018      	movs	r0, r3
 800ed1a:	f001 f8bb 	bl	800fe94 <RegionAS923TxConfig>
 800ed1e:	0003      	movs	r3, r0
 800ed20:	e048      	b.n	800edb4 <RegionTxConfig+0xc8>
        AU915_TX_CONFIG( );
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	6879      	ldr	r1, [r7, #4]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	0018      	movs	r0, r3
 800ed2a:	f002 fbb1 	bl	8011490 <RegionAU915TxConfig>
 800ed2e:	0003      	movs	r3, r0
 800ed30:	e040      	b.n	800edb4 <RegionTxConfig+0xc8>
        CN470_TX_CONFIG( );
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	6879      	ldr	r1, [r7, #4]
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	0018      	movs	r0, r3
 800ed3a:	f003 fcd7 	bl	80126ec <RegionCN470TxConfig>
 800ed3e:	0003      	movs	r3, r0
 800ed40:	e038      	b.n	800edb4 <RegionTxConfig+0xc8>
        CN779_TX_CONFIG( );
 800ed42:	683a      	ldr	r2, [r7, #0]
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	0018      	movs	r0, r3
 800ed4a:	f004 fd05 	bl	8013758 <RegionCN779TxConfig>
 800ed4e:	0003      	movs	r3, r0
 800ed50:	e030      	b.n	800edb4 <RegionTxConfig+0xc8>
        EU433_TX_CONFIG( );
 800ed52:	683a      	ldr	r2, [r7, #0]
 800ed54:	6879      	ldr	r1, [r7, #4]
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	0018      	movs	r0, r3
 800ed5a:	f006 fc77 	bl	801564c <RegionEU433TxConfig>
 800ed5e:	0003      	movs	r3, r0
 800ed60:	e028      	b.n	800edb4 <RegionTxConfig+0xc8>
        EU868_TX_CONFIG( );
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	6879      	ldr	r1, [r7, #4]
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	0018      	movs	r0, r3
 800ed6a:	f007 fed1 	bl	8016b10 <RegionEU868TxConfig>
 800ed6e:	0003      	movs	r3, r0
 800ed70:	e020      	b.n	800edb4 <RegionTxConfig+0xc8>
        KR920_TX_CONFIG( );
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	6879      	ldr	r1, [r7, #4]
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	0018      	movs	r0, r3
 800ed7a:	f00a fac5 	bl	8019308 <RegionKR920TxConfig>
 800ed7e:	0003      	movs	r3, r0
 800ed80:	e018      	b.n	800edb4 <RegionTxConfig+0xc8>
        IN865_TX_CONFIG( );
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	6879      	ldr	r1, [r7, #4]
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	0018      	movs	r0, r3
 800ed8a:	f009 f8e7 	bl	8017f5c <RegionIN865TxConfig>
 800ed8e:	0003      	movs	r3, r0
 800ed90:	e010      	b.n	800edb4 <RegionTxConfig+0xc8>
        US915_TX_CONFIG( );
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	6879      	ldr	r1, [r7, #4]
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	0018      	movs	r0, r3
 800ed9a:	f00d f837 	bl	801be0c <RegionUS915TxConfig>
 800ed9e:	0003      	movs	r3, r0
 800eda0:	e008      	b.n	800edb4 <RegionTxConfig+0xc8>
        RU864_TX_CONFIG( );
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	6879      	ldr	r1, [r7, #4]
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	0018      	movs	r0, r3
 800edaa:	f00b fcc3 	bl	801a734 <RegionRU864TxConfig>
 800edae:	0003      	movs	r3, r0
 800edb0:	e000      	b.n	800edb4 <RegionTxConfig+0xc8>
        default:
        {
            return false;
 800edb2:	2300      	movs	r3, #0
        }
    }
}
 800edb4:	0018      	movs	r0, r3
 800edb6:	46bd      	mov	sp, r7
 800edb8:	b004      	add	sp, #16
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	08027cb8 	.word	0x08027cb8

0800edc0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800edc0:	b590      	push	{r4, r7, lr}
 800edc2:	b087      	sub	sp, #28
 800edc4:	af02      	add	r7, sp, #8
 800edc6:	60b9      	str	r1, [r7, #8]
 800edc8:	607a      	str	r2, [r7, #4]
 800edca:	603b      	str	r3, [r7, #0]
 800edcc:	210f      	movs	r1, #15
 800edce:	187b      	adds	r3, r7, r1
 800edd0:	1c02      	adds	r2, r0, #0
 800edd2:	701a      	strb	r2, [r3, #0]
    switch( region )
 800edd4:	187b      	adds	r3, r7, r1
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	2b09      	cmp	r3, #9
 800edda:	d872      	bhi.n	800eec2 <RegionLinkAdrReq+0x102>
 800eddc:	009a      	lsls	r2, r3, #2
 800edde:	4b3b      	ldr	r3, [pc, #236]	; (800eecc <RegionLinkAdrReq+0x10c>)
 800ede0:	18d3      	adds	r3, r2, r3
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	469f      	mov	pc, r3
    {
        AS923_LINK_ADR_REQ( );
 800ede6:	6a3c      	ldr	r4, [r7, #32]
 800ede8:	683a      	ldr	r2, [r7, #0]
 800edea:	6879      	ldr	r1, [r7, #4]
 800edec:	68b8      	ldr	r0, [r7, #8]
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	0023      	movs	r3, r4
 800edf4:	f001 f926 	bl	8010044 <RegionAS923LinkAdrReq>
 800edf8:	0003      	movs	r3, r0
 800edfa:	e063      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        AU915_LINK_ADR_REQ( );
 800edfc:	6a3c      	ldr	r4, [r7, #32]
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	6879      	ldr	r1, [r7, #4]
 800ee02:	68b8      	ldr	r0, [r7, #8]
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	0023      	movs	r3, r4
 800ee0a:	f002 fbdb 	bl	80115c4 <RegionAU915LinkAdrReq>
 800ee0e:	0003      	movs	r3, r0
 800ee10:	e058      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        CN470_LINK_ADR_REQ( );
 800ee12:	6a3c      	ldr	r4, [r7, #32]
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	6879      	ldr	r1, [r7, #4]
 800ee18:	68b8      	ldr	r0, [r7, #8]
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	0023      	movs	r3, r4
 800ee20:	f003 fcf4 	bl	801280c <RegionCN470LinkAdrReq>
 800ee24:	0003      	movs	r3, r0
 800ee26:	e04d      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        CN779_LINK_ADR_REQ( );
 800ee28:	6a3c      	ldr	r4, [r7, #32]
 800ee2a:	683a      	ldr	r2, [r7, #0]
 800ee2c:	6879      	ldr	r1, [r7, #4]
 800ee2e:	68b8      	ldr	r0, [r7, #8]
 800ee30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	0023      	movs	r3, r4
 800ee36:	f004 fd67 	bl	8013908 <RegionCN779LinkAdrReq>
 800ee3a:	0003      	movs	r3, r0
 800ee3c:	e042      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        EU433_LINK_ADR_REQ( );
 800ee3e:	6a3c      	ldr	r4, [r7, #32]
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	6879      	ldr	r1, [r7, #4]
 800ee44:	68b8      	ldr	r0, [r7, #8]
 800ee46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	0023      	movs	r3, r4
 800ee4c:	f006 fcd6 	bl	80157fc <RegionEU433LinkAdrReq>
 800ee50:	0003      	movs	r3, r0
 800ee52:	e037      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        EU868_LINK_ADR_REQ( );
 800ee54:	6a3c      	ldr	r4, [r7, #32]
 800ee56:	683a      	ldr	r2, [r7, #0]
 800ee58:	6879      	ldr	r1, [r7, #4]
 800ee5a:	68b8      	ldr	r0, [r7, #8]
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	0023      	movs	r3, r4
 800ee62:	f007 ff2d 	bl	8016cc0 <RegionEU868LinkAdrReq>
 800ee66:	0003      	movs	r3, r0
 800ee68:	e02c      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        KR920_LINK_ADR_REQ( );
 800ee6a:	6a3c      	ldr	r4, [r7, #32]
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	6879      	ldr	r1, [r7, #4]
 800ee70:	68b8      	ldr	r0, [r7, #8]
 800ee72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee74:	9300      	str	r3, [sp, #0]
 800ee76:	0023      	movs	r3, r4
 800ee78:	f00a fb00 	bl	801947c <RegionKR920LinkAdrReq>
 800ee7c:	0003      	movs	r3, r0
 800ee7e:	e021      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        IN865_LINK_ADR_REQ( );
 800ee80:	6a3c      	ldr	r4, [r7, #32]
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	6879      	ldr	r1, [r7, #4]
 800ee86:	68b8      	ldr	r0, [r7, #8]
 800ee88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8a:	9300      	str	r3, [sp, #0]
 800ee8c:	0023      	movs	r3, r4
 800ee8e:	f009 f93d 	bl	801810c <RegionIN865LinkAdrReq>
 800ee92:	0003      	movs	r3, r0
 800ee94:	e016      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        US915_LINK_ADR_REQ( );
 800ee96:	6a3c      	ldr	r4, [r7, #32]
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	68b8      	ldr	r0, [r7, #8]
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	0023      	movs	r3, r4
 800eea4:	f00d f84c 	bl	801bf40 <RegionUS915LinkAdrReq>
 800eea8:	0003      	movs	r3, r0
 800eeaa:	e00b      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        RU864_LINK_ADR_REQ( );
 800eeac:	6a3c      	ldr	r4, [r7, #32]
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	6879      	ldr	r1, [r7, #4]
 800eeb2:	68b8      	ldr	r0, [r7, #8]
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	0023      	movs	r3, r4
 800eeba:	f00b fd13 	bl	801a8e4 <RegionRU864LinkAdrReq>
 800eebe:	0003      	movs	r3, r0
 800eec0:	e000      	b.n	800eec4 <RegionLinkAdrReq+0x104>
        default:
        {
            return 0;
 800eec2:	2300      	movs	r3, #0
        }
    }
}
 800eec4:	0018      	movs	r0, r3
 800eec6:	46bd      	mov	sp, r7
 800eec8:	b005      	add	sp, #20
 800eeca:	bd90      	pop	{r4, r7, pc}
 800eecc:	08027ce0 	.word	0x08027ce0

0800eed0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	0002      	movs	r2, r0
 800eed8:	6039      	str	r1, [r7, #0]
 800eeda:	1dfb      	adds	r3, r7, #7
 800eedc:	701a      	strb	r2, [r3, #0]
    switch( region )
 800eede:	1dfb      	adds	r3, r7, #7
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	2b09      	cmp	r3, #9
 800eee4:	d840      	bhi.n	800ef68 <RegionRxParamSetupReq+0x98>
 800eee6:	009a      	lsls	r2, r3, #2
 800eee8:	4b22      	ldr	r3, [pc, #136]	; (800ef74 <RegionRxParamSetupReq+0xa4>)
 800eeea:	18d3      	adds	r3, r2, r3
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	469f      	mov	pc, r3
    {
        AS923_RX_PARAM_SETUP_REQ( );
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	0018      	movs	r0, r3
 800eef4:	f001 f9fc 	bl	80102f0 <RegionAS923RxParamSetupReq>
 800eef8:	0003      	movs	r3, r0
 800eefa:	e036      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        AU915_RX_PARAM_SETUP_REQ( );
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	0018      	movs	r0, r3
 800ef00:	f002 fdba 	bl	8011a78 <RegionAU915RxParamSetupReq>
 800ef04:	0003      	movs	r3, r0
 800ef06:	e030      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        CN470_RX_PARAM_SETUP_REQ( );
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	0018      	movs	r0, r3
 800ef0c:	f003 fdc4 	bl	8012a98 <RegionCN470RxParamSetupReq>
 800ef10:	0003      	movs	r3, r0
 800ef12:	e02a      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        CN779_RX_PARAM_SETUP_REQ( );
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	0018      	movs	r0, r3
 800ef18:	f004 fe4c 	bl	8013bb4 <RegionCN779RxParamSetupReq>
 800ef1c:	0003      	movs	r3, r0
 800ef1e:	e024      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        EU433_RX_PARAM_SETUP_REQ( );
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	0018      	movs	r0, r3
 800ef24:	f006 fdc0 	bl	8015aa8 <RegionEU433RxParamSetupReq>
 800ef28:	0003      	movs	r3, r0
 800ef2a:	e01e      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        EU868_RX_PARAM_SETUP_REQ( );
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	0018      	movs	r0, r3
 800ef30:	f008 f81c 	bl	8016f6c <RegionEU868RxParamSetupReq>
 800ef34:	0003      	movs	r3, r0
 800ef36:	e018      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        KR920_RX_PARAM_SETUP_REQ( );
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	0018      	movs	r0, r3
 800ef3c:	f00a fbf4 	bl	8019728 <RegionKR920RxParamSetupReq>
 800ef40:	0003      	movs	r3, r0
 800ef42:	e012      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        IN865_RX_PARAM_SETUP_REQ( );
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	0018      	movs	r0, r3
 800ef48:	f009 fa42 	bl	80183d0 <RegionIN865RxParamSetupReq>
 800ef4c:	0003      	movs	r3, r0
 800ef4e:	e00c      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        US915_RX_PARAM_SETUP_REQ( );
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	0018      	movs	r0, r3
 800ef54:	f00d fa4e 	bl	801c3f4 <RegionUS915RxParamSetupReq>
 800ef58:	0003      	movs	r3, r0
 800ef5a:	e006      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        RU864_RX_PARAM_SETUP_REQ( );
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	0018      	movs	r0, r3
 800ef60:	f00b fe16 	bl	801ab90 <RegionRU864RxParamSetupReq>
 800ef64:	0003      	movs	r3, r0
 800ef66:	e000      	b.n	800ef6a <RegionRxParamSetupReq+0x9a>
        default:
        {
            return 0;
 800ef68:	2300      	movs	r3, #0
        }
    }
}
 800ef6a:	0018      	movs	r0, r3
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	b002      	add	sp, #8
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	46c0      	nop			; (mov r8, r8)
 800ef74:	08027d08 	.word	0x08027d08

0800ef78 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	0002      	movs	r2, r0
 800ef80:	6039      	str	r1, [r7, #0]
 800ef82:	1dfb      	adds	r3, r7, #7
 800ef84:	701a      	strb	r2, [r3, #0]
    switch( region )
 800ef86:	1dfb      	adds	r3, r7, #7
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	2b09      	cmp	r3, #9
 800ef8c:	d840      	bhi.n	800f010 <RegionNewChannelReq+0x98>
 800ef8e:	009a      	lsls	r2, r3, #2
 800ef90:	4b22      	ldr	r3, [pc, #136]	; (800f01c <RegionNewChannelReq+0xa4>)
 800ef92:	18d3      	adds	r3, r2, r3
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	469f      	mov	pc, r3
    {
        AS923_NEW_CHANNEL_REQ( );
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	0018      	movs	r0, r3
 800ef9c:	f001 f9ec 	bl	8010378 <RegionAS923NewChannelReq>
 800efa0:	0003      	movs	r3, r0
 800efa2:	e036      	b.n	800f012 <RegionNewChannelReq+0x9a>
        AU915_NEW_CHANNEL_REQ( );
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	0018      	movs	r0, r3
 800efa8:	f002 fdbb 	bl	8011b22 <RegionAU915NewChannelReq>
 800efac:	0003      	movs	r3, r0
 800efae:	e030      	b.n	800f012 <RegionNewChannelReq+0x9a>
        CN470_NEW_CHANNEL_REQ( );
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	0018      	movs	r0, r3
 800efb4:	f003 fdb4 	bl	8012b20 <RegionCN470NewChannelReq>
 800efb8:	0003      	movs	r3, r0
 800efba:	e02a      	b.n	800f012 <RegionNewChannelReq+0x9a>
        CN779_NEW_CHANNEL_REQ( );
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	0018      	movs	r0, r3
 800efc0:	f004 fe3c 	bl	8013c3c <RegionCN779NewChannelReq>
 800efc4:	0003      	movs	r3, r0
 800efc6:	e024      	b.n	800f012 <RegionNewChannelReq+0x9a>
        EU433_NEW_CHANNEL_REQ( );
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	0018      	movs	r0, r3
 800efcc:	f006 fdb0 	bl	8015b30 <RegionEU433NewChannelReq>
 800efd0:	0003      	movs	r3, r0
 800efd2:	e01e      	b.n	800f012 <RegionNewChannelReq+0x9a>
        EU868_NEW_CHANNEL_REQ( );
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	0018      	movs	r0, r3
 800efd8:	f008 f812 	bl	8017000 <RegionEU868NewChannelReq>
 800efdc:	0003      	movs	r3, r0
 800efde:	e018      	b.n	800f012 <RegionNewChannelReq+0x9a>
        KR920_NEW_CHANNEL_REQ( );
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	0018      	movs	r0, r3
 800efe4:	f00a fbe4 	bl	80197b0 <RegionKR920NewChannelReq>
 800efe8:	0003      	movs	r3, r0
 800efea:	e012      	b.n	800f012 <RegionNewChannelReq+0x9a>
        IN865_NEW_CHANNEL_REQ( );
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	0018      	movs	r0, r3
 800eff0:	f009 fa32 	bl	8018458 <RegionIN865NewChannelReq>
 800eff4:	0003      	movs	r3, r0
 800eff6:	e00c      	b.n	800f012 <RegionNewChannelReq+0x9a>
        US915_NEW_CHANNEL_REQ( );
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	0018      	movs	r0, r3
 800effc:	f00d fa55 	bl	801c4aa <RegionUS915NewChannelReq>
 800f000:	0003      	movs	r3, r0
 800f002:	e006      	b.n	800f012 <RegionNewChannelReq+0x9a>
        RU864_NEW_CHANNEL_REQ( );
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	0018      	movs	r0, r3
 800f008:	f00b fe06 	bl	801ac18 <RegionRU864NewChannelReq>
 800f00c:	0003      	movs	r3, r0
 800f00e:	e000      	b.n	800f012 <RegionNewChannelReq+0x9a>
        default:
        {
            return 0;
 800f010:	2300      	movs	r3, #0
        }
    }
}
 800f012:	0018      	movs	r0, r3
 800f014:	46bd      	mov	sp, r7
 800f016:	b002      	add	sp, #8
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	46c0      	nop			; (mov r8, r8)
 800f01c:	08027d30 	.word	0x08027d30

0800f020 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	0002      	movs	r2, r0
 800f028:	6039      	str	r1, [r7, #0]
 800f02a:	1dfb      	adds	r3, r7, #7
 800f02c:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f02e:	1dfb      	adds	r3, r7, #7
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	2b09      	cmp	r3, #9
 800f034:	d840      	bhi.n	800f0b8 <RegionTxParamSetupReq+0x98>
 800f036:	009a      	lsls	r2, r3, #2
 800f038:	4b22      	ldr	r3, [pc, #136]	; (800f0c4 <RegionTxParamSetupReq+0xa4>)
 800f03a:	18d3      	adds	r3, r2, r3
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	469f      	mov	pc, r3
    {
        AS923_TX_PARAM_SETUP_REQ( );
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	0018      	movs	r0, r3
 800f044:	f001 fa02 	bl	801044c <RegionAS923TxParamSetupReq>
 800f048:	0003      	movs	r3, r0
 800f04a:	e036      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        AU915_TX_PARAM_SETUP_REQ( );
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	0018      	movs	r0, r3
 800f050:	f002 fd70 	bl	8011b34 <RegionAU915TxParamSetupReq>
 800f054:	0003      	movs	r3, r0
 800f056:	e030      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        CN470_TX_PARAM_SETUP_REQ( );
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	0018      	movs	r0, r3
 800f05c:	f003 fd69 	bl	8012b32 <RegionCN470TxParamSetupReq>
 800f060:	0003      	movs	r3, r0
 800f062:	e02a      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        CN779_TX_PARAM_SETUP_REQ( );
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	0018      	movs	r0, r3
 800f068:	f004 fe52 	bl	8013d10 <RegionCN779TxParamSetupReq>
 800f06c:	0003      	movs	r3, r0
 800f06e:	e024      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        EU433_TX_PARAM_SETUP_REQ( );
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	0018      	movs	r0, r3
 800f074:	f006 fdc6 	bl	8015c04 <RegionEU433TxParamSetupReq>
 800f078:	0003      	movs	r3, r0
 800f07a:	e01e      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        EU868_TX_PARAM_SETUP_REQ( );
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	0018      	movs	r0, r3
 800f080:	f008 f828 	bl	80170d4 <RegionEU868TxParamSetupReq>
 800f084:	0003      	movs	r3, r0
 800f086:	e018      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        KR920_TX_PARAM_SETUP_REQ( );
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	0018      	movs	r0, r3
 800f08c:	f00a fbfa 	bl	8019884 <RegionKR920TxParamSetupReq>
 800f090:	0003      	movs	r3, r0
 800f092:	e012      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        IN865_TX_PARAM_SETUP_REQ( );
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	0018      	movs	r0, r3
 800f098:	f009 fa48 	bl	801852c <RegionIN865TxParamSetupReq>
 800f09c:	0003      	movs	r3, r0
 800f09e:	e00c      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        US915_TX_PARAM_SETUP_REQ( );
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	0018      	movs	r0, r3
 800f0a4:	f00d fa0a 	bl	801c4bc <RegionUS915TxParamSetupReq>
 800f0a8:	0003      	movs	r3, r0
 800f0aa:	e006      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        RU864_TX_PARAM_SETUP_REQ( );
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	0018      	movs	r0, r3
 800f0b0:	f00b fe1c 	bl	801acec <RegionRU864TxParamSetupReq>
 800f0b4:	0003      	movs	r3, r0
 800f0b6:	e000      	b.n	800f0ba <RegionTxParamSetupReq+0x9a>
        default:
        {
            return 0;
 800f0b8:	2300      	movs	r3, #0
        }
    }
}
 800f0ba:	0018      	movs	r0, r3
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	b002      	add	sp, #8
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	46c0      	nop			; (mov r8, r8)
 800f0c4:	08027d58 	.word	0x08027d58

0800f0c8 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	0002      	movs	r2, r0
 800f0d0:	6039      	str	r1, [r7, #0]
 800f0d2:	1dfb      	adds	r3, r7, #7
 800f0d4:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f0d6:	1dfb      	adds	r3, r7, #7
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	2b09      	cmp	r3, #9
 800f0dc:	d840      	bhi.n	800f160 <RegionDlChannelReq+0x98>
 800f0de:	009a      	lsls	r2, r3, #2
 800f0e0:	4b22      	ldr	r3, [pc, #136]	; (800f16c <RegionDlChannelReq+0xa4>)
 800f0e2:	18d3      	adds	r3, r2, r3
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	469f      	mov	pc, r3
    {
        AS923_DL_CHANNEL_REQ( );
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	0018      	movs	r0, r3
 800f0ec:	f001 f9b8 	bl	8010460 <RegionAS923DlChannelReq>
 800f0f0:	0003      	movs	r3, r0
 800f0f2:	e036      	b.n	800f162 <RegionDlChannelReq+0x9a>
        AU915_DL_CHANNEL_REQ( );
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	0018      	movs	r0, r3
 800f0f8:	f002 fd25 	bl	8011b46 <RegionAU915DlChannelReq>
 800f0fc:	0003      	movs	r3, r0
 800f0fe:	e030      	b.n	800f162 <RegionDlChannelReq+0x9a>
        CN470_DL_CHANNEL_REQ( );
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	0018      	movs	r0, r3
 800f104:	f003 fd1f 	bl	8012b46 <RegionCN470DlChannelReq>
 800f108:	0003      	movs	r3, r0
 800f10a:	e02a      	b.n	800f162 <RegionDlChannelReq+0x9a>
        CN779_DL_CHANNEL_REQ( );
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	0018      	movs	r0, r3
 800f110:	f004 fe08 	bl	8013d24 <RegionCN779DlChannelReq>
 800f114:	0003      	movs	r3, r0
 800f116:	e024      	b.n	800f162 <RegionDlChannelReq+0x9a>
        EU433_DL_CHANNEL_REQ( );
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	0018      	movs	r0, r3
 800f11c:	f006 fd7c 	bl	8015c18 <RegionEU433DlChannelReq>
 800f120:	0003      	movs	r3, r0
 800f122:	e01e      	b.n	800f162 <RegionDlChannelReq+0x9a>
        EU868_DL_CHANNEL_REQ( );
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	0018      	movs	r0, r3
 800f128:	f007 ffde 	bl	80170e8 <RegionEU868DlChannelReq>
 800f12c:	0003      	movs	r3, r0
 800f12e:	e018      	b.n	800f162 <RegionDlChannelReq+0x9a>
        KR920_DL_CHANNEL_REQ( );
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	0018      	movs	r0, r3
 800f134:	f00a fbb0 	bl	8019898 <RegionKR920DlChannelReq>
 800f138:	0003      	movs	r3, r0
 800f13a:	e012      	b.n	800f162 <RegionDlChannelReq+0x9a>
        IN865_DL_CHANNEL_REQ( );
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	0018      	movs	r0, r3
 800f140:	f009 f9fe 	bl	8018540 <RegionIN865DlChannelReq>
 800f144:	0003      	movs	r3, r0
 800f146:	e00c      	b.n	800f162 <RegionDlChannelReq+0x9a>
        US915_DL_CHANNEL_REQ( );
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	0018      	movs	r0, r3
 800f14c:	f00d f9c0 	bl	801c4d0 <RegionUS915DlChannelReq>
 800f150:	0003      	movs	r3, r0
 800f152:	e006      	b.n	800f162 <RegionDlChannelReq+0x9a>
        RU864_DL_CHANNEL_REQ( );
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	0018      	movs	r0, r3
 800f158:	f00b fdd2 	bl	801ad00 <RegionRU864DlChannelReq>
 800f15c:	0003      	movs	r3, r0
 800f15e:	e000      	b.n	800f162 <RegionDlChannelReq+0x9a>
        default:
        {
            return 0;
 800f160:	2300      	movs	r3, #0
        }
    }
}
 800f162:	0018      	movs	r0, r3
 800f164:	46bd      	mov	sp, r7
 800f166:	b002      	add	sp, #8
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	46c0      	nop			; (mov r8, r8)
 800f16c:	08027d80 	.word	0x08027d80

0800f170 <RegionCalcBackOff>:
        }
    }
}

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	0002      	movs	r2, r0
 800f178:	6039      	str	r1, [r7, #0]
 800f17a:	1dfb      	adds	r3, r7, #7
 800f17c:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f17e:	1dfb      	adds	r3, r7, #7
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	2b09      	cmp	r3, #9
 800f184:	d836      	bhi.n	800f1f4 <RegionCalcBackOff+0x84>
 800f186:	009a      	lsls	r2, r3, #2
 800f188:	4b1d      	ldr	r3, [pc, #116]	; (800f200 <RegionCalcBackOff+0x90>)
 800f18a:	18d3      	adds	r3, r2, r3
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	469f      	mov	pc, r3
    {
        AS923_CALC_BACKOFF( );
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	0018      	movs	r0, r3
 800f194:	f001 f9ac 	bl	80104f0 <RegionAS923CalcBackOff>
 800f198:	e02d      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        AU915_CALC_BACKOFF( );
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	0018      	movs	r0, r3
 800f19e:	f002 fcdb 	bl	8011b58 <RegionAU915CalcBackOff>
 800f1a2:	e028      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        CN470_CALC_BACKOFF( );
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	f003 fcd6 	bl	8012b58 <RegionCN470CalcBackOff>
 800f1ac:	e023      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        CN779_CALC_BACKOFF( );
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	0018      	movs	r0, r3
 800f1b2:	f004 fdff 	bl	8013db4 <RegionCN779CalcBackOff>
 800f1b6:	e01e      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        EU433_CALC_BACKOFF( );
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	0018      	movs	r0, r3
 800f1bc:	f006 fd74 	bl	8015ca8 <RegionEU433CalcBackOff>
 800f1c0:	e019      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        EU868_CALC_BACKOFF( );
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	0018      	movs	r0, r3
 800f1c6:	f007 ffdd 	bl	8017184 <RegionEU868CalcBackOff>
 800f1ca:	e014      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        KR920_CALC_BACKOFF( );
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	0018      	movs	r0, r3
 800f1d0:	f00a fbaa 	bl	8019928 <RegionKR920CalcBackOff>
 800f1d4:	e00f      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        IN865_CALC_BACKOFF( );
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	0018      	movs	r0, r3
 800f1da:	f009 f9f9 	bl	80185d0 <RegionIN865CalcBackOff>
 800f1de:	e00a      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        US915_CALC_BACKOFF( );
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	0018      	movs	r0, r3
 800f1e4:	f00d f97e 	bl	801c4e4 <RegionUS915CalcBackOff>
 800f1e8:	e005      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        RU864_CALC_BACKOFF( );
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	0018      	movs	r0, r3
 800f1ee:	f00b fdcf 	bl	801ad90 <RegionRU864CalcBackOff>
 800f1f2:	e000      	b.n	800f1f6 <RegionCalcBackOff+0x86>
        default:
        {
            break;
 800f1f4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800f1f6:	46c0      	nop			; (mov r8, r8)
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	b002      	add	sp, #8
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	46c0      	nop			; (mov r8, r8)
 800f200:	08027da8 	.word	0x08027da8

0800f204 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60b9      	str	r1, [r7, #8]
 800f20c:	607a      	str	r2, [r7, #4]
 800f20e:	603b      	str	r3, [r7, #0]
 800f210:	210f      	movs	r1, #15
 800f212:	187b      	adds	r3, r7, r1
 800f214:	1c02      	adds	r2, r0, #0
 800f216:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f218:	187b      	adds	r3, r7, r1
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	2b09      	cmp	r3, #9
 800f21e:	d854      	bhi.n	800f2ca <RegionNextChannel+0xc6>
 800f220:	009a      	lsls	r2, r3, #2
 800f222:	4b2c      	ldr	r3, [pc, #176]	; (800f2d4 <RegionNextChannel+0xd0>)
 800f224:	18d3      	adds	r3, r2, r3
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	469f      	mov	pc, r3
    {
        AS923_NEXT_CHANNEL( );
 800f22a:	69bb      	ldr	r3, [r7, #24]
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	6879      	ldr	r1, [r7, #4]
 800f230:	68b8      	ldr	r0, [r7, #8]
 800f232:	f001 f98d 	bl	8010550 <RegionAS923NextChannel>
 800f236:	0003      	movs	r3, r0
 800f238:	e048      	b.n	800f2cc <RegionNextChannel+0xc8>
        AU915_NEXT_CHANNEL( );
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	683a      	ldr	r2, [r7, #0]
 800f23e:	6879      	ldr	r1, [r7, #4]
 800f240:	68b8      	ldr	r0, [r7, #8]
 800f242:	f002 fcb9 	bl	8011bb8 <RegionAU915NextChannel>
 800f246:	0003      	movs	r3, r0
 800f248:	e040      	b.n	800f2cc <RegionNextChannel+0xc8>
        CN470_NEXT_CHANNEL( );
 800f24a:	69bb      	ldr	r3, [r7, #24]
 800f24c:	683a      	ldr	r2, [r7, #0]
 800f24e:	6879      	ldr	r1, [r7, #4]
 800f250:	68b8      	ldr	r0, [r7, #8]
 800f252:	f003 fcb1 	bl	8012bb8 <RegionCN470NextChannel>
 800f256:	0003      	movs	r3, r0
 800f258:	e038      	b.n	800f2cc <RegionNextChannel+0xc8>
        CN779_NEXT_CHANNEL( );
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	683a      	ldr	r2, [r7, #0]
 800f25e:	6879      	ldr	r1, [r7, #4]
 800f260:	68b8      	ldr	r0, [r7, #8]
 800f262:	f004 fdd7 	bl	8013e14 <RegionCN779NextChannel>
 800f266:	0003      	movs	r3, r0
 800f268:	e030      	b.n	800f2cc <RegionNextChannel+0xc8>
        EU433_NEXT_CHANNEL( );
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	683a      	ldr	r2, [r7, #0]
 800f26e:	6879      	ldr	r1, [r7, #4]
 800f270:	68b8      	ldr	r0, [r7, #8]
 800f272:	f006 fd49 	bl	8015d08 <RegionEU433NextChannel>
 800f276:	0003      	movs	r3, r0
 800f278:	e028      	b.n	800f2cc <RegionNextChannel+0xc8>
        EU868_NEXT_CHANNEL( );
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	683a      	ldr	r2, [r7, #0]
 800f27e:	6879      	ldr	r1, [r7, #4]
 800f280:	68b8      	ldr	r0, [r7, #8]
 800f282:	f007 ffaf 	bl	80171e4 <RegionEU868NextChannel>
 800f286:	0003      	movs	r3, r0
 800f288:	e020      	b.n	800f2cc <RegionNextChannel+0xc8>
        KR920_NEXT_CHANNEL( );
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	683a      	ldr	r2, [r7, #0]
 800f28e:	6879      	ldr	r1, [r7, #4]
 800f290:	68b8      	ldr	r0, [r7, #8]
 800f292:	f00a fb79 	bl	8019988 <RegionKR920NextChannel>
 800f296:	0003      	movs	r3, r0
 800f298:	e018      	b.n	800f2cc <RegionNextChannel+0xc8>
        IN865_NEXT_CHANNEL( );
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	6879      	ldr	r1, [r7, #4]
 800f2a0:	68b8      	ldr	r0, [r7, #8]
 800f2a2:	f009 f9c5 	bl	8018630 <RegionIN865NextChannel>
 800f2a6:	0003      	movs	r3, r0
 800f2a8:	e010      	b.n	800f2cc <RegionNextChannel+0xc8>
        US915_NEXT_CHANNEL( );
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	683a      	ldr	r2, [r7, #0]
 800f2ae:	6879      	ldr	r1, [r7, #4]
 800f2b0:	68b8      	ldr	r0, [r7, #8]
 800f2b2:	f00d f947 	bl	801c544 <RegionUS915NextChannel>
 800f2b6:	0003      	movs	r3, r0
 800f2b8:	e008      	b.n	800f2cc <RegionNextChannel+0xc8>
        RU864_NEXT_CHANNEL( );
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	6879      	ldr	r1, [r7, #4]
 800f2c0:	68b8      	ldr	r0, [r7, #8]
 800f2c2:	f00b fd95 	bl	801adf0 <RegionRU864NextChannel>
 800f2c6:	0003      	movs	r3, r0
 800f2c8:	e000      	b.n	800f2cc <RegionNextChannel+0xc8>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800f2ca:	2309      	movs	r3, #9
        }
    }
}
 800f2cc:	0018      	movs	r0, r3
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	b004      	add	sp, #16
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	08027dd0 	.word	0x08027dd0

0800f2d8 <RegionApplyDrOffset>:
        }
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800f2d8:	b5b0      	push	{r4, r5, r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	0005      	movs	r5, r0
 800f2e0:	000c      	movs	r4, r1
 800f2e2:	0010      	movs	r0, r2
 800f2e4:	0019      	movs	r1, r3
 800f2e6:	1dfb      	adds	r3, r7, #7
 800f2e8:	1c2a      	adds	r2, r5, #0
 800f2ea:	701a      	strb	r2, [r3, #0]
 800f2ec:	1dbb      	adds	r3, r7, #6
 800f2ee:	1c22      	adds	r2, r4, #0
 800f2f0:	701a      	strb	r2, [r3, #0]
 800f2f2:	1d7b      	adds	r3, r7, #5
 800f2f4:	1c02      	adds	r2, r0, #0
 800f2f6:	701a      	strb	r2, [r3, #0]
 800f2f8:	1d3b      	adds	r3, r7, #4
 800f2fa:	1c0a      	adds	r2, r1, #0
 800f2fc:	701a      	strb	r2, [r3, #0]
    switch( region )
 800f2fe:	1dfb      	adds	r3, r7, #7
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	2b09      	cmp	r3, #9
 800f304:	d900      	bls.n	800f308 <RegionApplyDrOffset+0x30>
 800f306:	e086      	b.n	800f416 <RegionApplyDrOffset+0x13e>
 800f308:	009a      	lsls	r2, r3, #2
 800f30a:	4b46      	ldr	r3, [pc, #280]	; (800f424 <RegionApplyDrOffset+0x14c>)
 800f30c:	18d3      	adds	r3, r2, r3
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	469f      	mov	pc, r3
    {
        AS923_APPLY_DR_OFFSET( );
 800f312:	1d3b      	adds	r3, r7, #4
 800f314:	2200      	movs	r2, #0
 800f316:	569a      	ldrsb	r2, [r3, r2]
 800f318:	1d7b      	adds	r3, r7, #5
 800f31a:	2100      	movs	r1, #0
 800f31c:	5659      	ldrsb	r1, [r3, r1]
 800f31e:	1dbb      	adds	r3, r7, #6
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	0018      	movs	r0, r3
 800f324:	f001 fae2 	bl	80108ec <RegionAS923ApplyDrOffset>
 800f328:	0003      	movs	r3, r0
 800f32a:	e076      	b.n	800f41a <RegionApplyDrOffset+0x142>
        AU915_APPLY_DR_OFFSET( );
 800f32c:	1d3b      	adds	r3, r7, #4
 800f32e:	2200      	movs	r2, #0
 800f330:	569a      	ldrsb	r2, [r3, r2]
 800f332:	1d7b      	adds	r3, r7, #5
 800f334:	2100      	movs	r1, #0
 800f336:	5659      	ldrsb	r1, [r3, r1]
 800f338:	1dbb      	adds	r3, r7, #6
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	0018      	movs	r0, r3
 800f33e:	f002 fced 	bl	8011d1c <RegionAU915ApplyDrOffset>
 800f342:	0003      	movs	r3, r0
 800f344:	e069      	b.n	800f41a <RegionApplyDrOffset+0x142>
        CN470_APPLY_DR_OFFSET( );
 800f346:	1d3b      	adds	r3, r7, #4
 800f348:	2200      	movs	r2, #0
 800f34a:	569a      	ldrsb	r2, [r3, r2]
 800f34c:	1d7b      	adds	r3, r7, #5
 800f34e:	2100      	movs	r1, #0
 800f350:	5659      	ldrsb	r1, [r3, r1]
 800f352:	1dbb      	adds	r3, r7, #6
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	0018      	movs	r0, r3
 800f358:	f003 fce4 	bl	8012d24 <RegionCN470ApplyDrOffset>
 800f35c:	0003      	movs	r3, r0
 800f35e:	e05c      	b.n	800f41a <RegionApplyDrOffset+0x142>
        CN779_APPLY_DR_OFFSET( );
 800f360:	1d3b      	adds	r3, r7, #4
 800f362:	2200      	movs	r2, #0
 800f364:	569a      	ldrsb	r2, [r3, r2]
 800f366:	1d7b      	adds	r3, r7, #5
 800f368:	2100      	movs	r1, #0
 800f36a:	5659      	ldrsb	r1, [r3, r1]
 800f36c:	1dbb      	adds	r3, r7, #6
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	0018      	movs	r0, r3
 800f372:	f004 fedb 	bl	801412c <RegionCN779ApplyDrOffset>
 800f376:	0003      	movs	r3, r0
 800f378:	e04f      	b.n	800f41a <RegionApplyDrOffset+0x142>
        EU433_APPLY_DR_OFFSET( );
 800f37a:	1d3b      	adds	r3, r7, #4
 800f37c:	2200      	movs	r2, #0
 800f37e:	569a      	ldrsb	r2, [r3, r2]
 800f380:	1d7b      	adds	r3, r7, #5
 800f382:	2100      	movs	r1, #0
 800f384:	5659      	ldrsb	r1, [r3, r1]
 800f386:	1dbb      	adds	r3, r7, #6
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	0018      	movs	r0, r3
 800f38c:	f006 fe48 	bl	8016020 <RegionEU433ApplyDrOffset>
 800f390:	0003      	movs	r3, r0
 800f392:	e042      	b.n	800f41a <RegionApplyDrOffset+0x142>
        EU868_APPLY_DR_OFFSET( );
 800f394:	1d3b      	adds	r3, r7, #4
 800f396:	2200      	movs	r2, #0
 800f398:	569a      	ldrsb	r2, [r3, r2]
 800f39a:	1d7b      	adds	r3, r7, #5
 800f39c:	2100      	movs	r1, #0
 800f39e:	5659      	ldrsb	r1, [r3, r1]
 800f3a0:	1dbb      	adds	r3, r7, #6
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	0018      	movs	r0, r3
 800f3a6:	f008 f8b7 	bl	8017518 <RegionEU868ApplyDrOffset>
 800f3aa:	0003      	movs	r3, r0
 800f3ac:	e035      	b.n	800f41a <RegionApplyDrOffset+0x142>
        KR920_APPLY_DR_OFFSET( );
 800f3ae:	1d3b      	adds	r3, r7, #4
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	569a      	ldrsb	r2, [r3, r2]
 800f3b4:	1d7b      	adds	r3, r7, #5
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	5659      	ldrsb	r1, [r3, r1]
 800f3ba:	1dbb      	adds	r3, r7, #6
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	0018      	movs	r0, r3
 800f3c0:	f00a fcb0 	bl	8019d24 <RegionKR920ApplyDrOffset>
 800f3c4:	0003      	movs	r3, r0
 800f3c6:	e028      	b.n	800f41a <RegionApplyDrOffset+0x142>
        IN865_APPLY_DR_OFFSET( );
 800f3c8:	1d3b      	adds	r3, r7, #4
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	569a      	ldrsb	r2, [r3, r2]
 800f3ce:	1d7b      	adds	r3, r7, #5
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	5659      	ldrsb	r1, [r3, r1]
 800f3d4:	1dbb      	adds	r3, r7, #6
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	0018      	movs	r0, r3
 800f3da:	f009 fab5 	bl	8018948 <RegionIN865ApplyDrOffset>
 800f3de:	0003      	movs	r3, r0
 800f3e0:	e01b      	b.n	800f41a <RegionApplyDrOffset+0x142>
        US915_APPLY_DR_OFFSET( );
 800f3e2:	1d3b      	adds	r3, r7, #4
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	569a      	ldrsb	r2, [r3, r2]
 800f3e8:	1d7b      	adds	r3, r7, #5
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	5659      	ldrsb	r1, [r3, r1]
 800f3ee:	1dbb      	adds	r3, r7, #6
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	0018      	movs	r0, r3
 800f3f4:	f00d f998 	bl	801c728 <RegionUS915ApplyDrOffset>
 800f3f8:	0003      	movs	r3, r0
 800f3fa:	e00e      	b.n	800f41a <RegionApplyDrOffset+0x142>
        RU864_APPLY_DR_OFFSET( );
 800f3fc:	1d3b      	adds	r3, r7, #4
 800f3fe:	2200      	movs	r2, #0
 800f400:	569a      	ldrsb	r2, [r3, r2]
 800f402:	1d7b      	adds	r3, r7, #5
 800f404:	2100      	movs	r1, #0
 800f406:	5659      	ldrsb	r1, [r3, r1]
 800f408:	1dbb      	adds	r3, r7, #6
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	0018      	movs	r0, r3
 800f40e:	f00b fe7b 	bl	801b108 <RegionRU864ApplyDrOffset>
 800f412:	0003      	movs	r3, r0
 800f414:	e001      	b.n	800f41a <RegionApplyDrOffset+0x142>
        default:
        {
            return dr;
 800f416:	1d7b      	adds	r3, r7, #5
 800f418:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 800f41a:	0018      	movs	r0, r3
 800f41c:	46bd      	mov	sp, r7
 800f41e:	b002      	add	sp, #8
 800f420:	bdb0      	pop	{r4, r5, r7, pc}
 800f422:	46c0      	nop			; (mov r8, r8)
 800f424:	08027df8 	.word	0x08027df8

0800f428 <GetNextLowerTxDr>:
 */
static RegionAS923NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	0002      	movs	r2, r0
 800f430:	1dfb      	adds	r3, r7, #7
 800f432:	701a      	strb	r2, [r3, #0]
 800f434:	1dbb      	adds	r3, r7, #6
 800f436:	1c0a      	adds	r2, r1, #0
 800f438:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 800f43a:	230f      	movs	r3, #15
 800f43c:	18fb      	adds	r3, r7, r3
 800f43e:	2200      	movs	r2, #0
 800f440:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 800f442:	1dfa      	adds	r2, r7, #7
 800f444:	1dbb      	adds	r3, r7, #6
 800f446:	7812      	ldrb	r2, [r2, #0]
 800f448:	b252      	sxtb	r2, r2
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	b25b      	sxtb	r3, r3
 800f44e:	429a      	cmp	r2, r3
 800f450:	d105      	bne.n	800f45e <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 800f452:	230f      	movs	r3, #15
 800f454:	18fb      	adds	r3, r7, r3
 800f456:	1dba      	adds	r2, r7, #6
 800f458:	7812      	ldrb	r2, [r2, #0]
 800f45a:	701a      	strb	r2, [r3, #0]
 800f45c:	e005      	b.n	800f46a <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 800f45e:	1dfb      	adds	r3, r7, #7
 800f460:	781a      	ldrb	r2, [r3, #0]
 800f462:	230f      	movs	r3, #15
 800f464:	18fb      	adds	r3, r7, r3
 800f466:	3a01      	subs	r2, #1
 800f468:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 800f46a:	230f      	movs	r3, #15
 800f46c:	18fb      	adds	r3, r7, r3
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	b25b      	sxtb	r3, r3
}
 800f472:	0018      	movs	r0, r3
 800f474:	46bd      	mov	sp, r7
 800f476:	b004      	add	sp, #16
 800f478:	bd80      	pop	{r7, pc}
	...

0800f47c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
    switch( BandwidthsAS923[drIndex] )
 800f484:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <GetBandwidth+0x30>)
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	0092      	lsls	r2, r2, #2
 800f48a:	58d3      	ldr	r3, [r2, r3]
 800f48c:	4a08      	ldr	r2, [pc, #32]	; (800f4b0 <GetBandwidth+0x34>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d004      	beq.n	800f49c <GetBandwidth+0x20>
 800f492:	4a08      	ldr	r2, [pc, #32]	; (800f4b4 <GetBandwidth+0x38>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d003      	beq.n	800f4a0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 800f498:	2300      	movs	r3, #0
 800f49a:	e002      	b.n	800f4a2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 800f49c:	2301      	movs	r3, #1
 800f49e:	e000      	b.n	800f4a2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 800f4a0:	2302      	movs	r3, #2
    }
}
 800f4a2:	0018      	movs	r0, r3
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	b002      	add	sp, #8
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	46c0      	nop			; (mov r8, r8)
 800f4ac:	08027e28 	.word	0x08027e28
 800f4b0:	0003d090 	.word	0x0003d090
 800f4b4:	0007a120 	.word	0x0007a120

0800f4b8 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 800f4b8:	b590      	push	{r4, r7, lr}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	0004      	movs	r4, r0
 800f4c0:	0008      	movs	r0, r1
 800f4c2:	0011      	movs	r1, r2
 800f4c4:	603b      	str	r3, [r7, #0]
 800f4c6:	1dfb      	adds	r3, r7, #7
 800f4c8:	1c22      	adds	r2, r4, #0
 800f4ca:	701a      	strb	r2, [r3, #0]
 800f4cc:	1dbb      	adds	r3, r7, #6
 800f4ce:	1c02      	adds	r2, r0, #0
 800f4d0:	701a      	strb	r2, [r3, #0]
 800f4d2:	1d7b      	adds	r3, r7, #5
 800f4d4:	1c0a      	adds	r2, r1, #0
 800f4d6:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 800f4d8:	210f      	movs	r1, #15
 800f4da:	187b      	adds	r3, r7, r1
 800f4dc:	1dfa      	adds	r2, r7, #7
 800f4de:	7812      	ldrb	r2, [r2, #0]
 800f4e0:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800f4e2:	187a      	adds	r2, r7, r1
 800f4e4:	1dbb      	adds	r3, r7, #6
 800f4e6:	1df9      	adds	r1, r7, #7
 800f4e8:	780c      	ldrb	r4, [r1, #0]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	b258      	sxtb	r0, r3
 800f4ee:	b261      	sxtb	r1, r4
 800f4f0:	4288      	cmp	r0, r1
 800f4f2:	da00      	bge.n	800f4f6 <LimitTxPower+0x3e>
 800f4f4:	1c23      	adds	r3, r4, #0
 800f4f6:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 800f4f8:	230f      	movs	r3, #15
 800f4fa:	18fb      	adds	r3, r7, r3
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	b25b      	sxtb	r3, r3
}
 800f500:	0018      	movs	r0, r3
 800f502:	46bd      	mov	sp, r7
 800f504:	b005      	add	sp, #20
 800f506:	bd90      	pop	{r4, r7, pc}

0800f508 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f510:	4b0e      	ldr	r3, [pc, #56]	; (800f54c <VerifyRfFreq+0x44>)
 800f512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	0010      	movs	r0, r2
 800f518:	4798      	blx	r3
 800f51a:	0003      	movs	r3, r0
 800f51c:	001a      	movs	r2, r3
 800f51e:	2301      	movs	r3, #1
 800f520:	4053      	eors	r3, r2
 800f522:	b2db      	uxtb	r3, r3
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <VerifyRfFreq+0x24>
    {
        return false;
 800f528:	2300      	movs	r3, #0
 800f52a:	e00a      	b.n	800f542 <VerifyRfFreq+0x3a>
    }

    if( ( freq < 915000000 ) || ( freq > 928000000 ) )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a08      	ldr	r2, [pc, #32]	; (800f550 <VerifyRfFreq+0x48>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d903      	bls.n	800f53c <VerifyRfFreq+0x34>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4a07      	ldr	r2, [pc, #28]	; (800f554 <VerifyRfFreq+0x4c>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d901      	bls.n	800f540 <VerifyRfFreq+0x38>
    {
        return false;
 800f53c:	2300      	movs	r3, #0
 800f53e:	e000      	b.n	800f542 <VerifyRfFreq+0x3a>
    }
    return true;
 800f540:	2301      	movs	r3, #1
}
 800f542:	0018      	movs	r0, r3
 800f544:	46bd      	mov	sp, r7
 800f546:	b002      	add	sp, #8
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	46c0      	nop			; (mov r8, r8)
 800f54c:	08028964 	.word	0x08028964
 800f550:	3689cabf 	.word	0x3689cabf
 800f554:	37502800 	.word	0x37502800

0800f558 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 800f558:	b5b0      	push	{r4, r5, r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60ba      	str	r2, [r7, #8]
 800f560:	607b      	str	r3, [r7, #4]
 800f562:	230f      	movs	r3, #15
 800f564:	18fb      	adds	r3, r7, r3
 800f566:	1c02      	adds	r2, r0, #0
 800f568:	701a      	strb	r2, [r3, #0]
 800f56a:	230e      	movs	r3, #14
 800f56c:	18fb      	adds	r3, r7, r3
 800f56e:	1c0a      	adds	r2, r1, #0
 800f570:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 800f572:	2317      	movs	r3, #23
 800f574:	18fb      	adds	r3, r7, r3
 800f576:	2200      	movs	r2, #0
 800f578:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 800f57a:	2316      	movs	r3, #22
 800f57c:	18fb      	adds	r3, r7, r3
 800f57e:	2200      	movs	r2, #0
 800f580:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < AS923_MAX_NB_CHANNELS; i += 16, k++ )
 800f582:	2315      	movs	r3, #21
 800f584:	18fb      	adds	r3, r7, r3
 800f586:	2200      	movs	r2, #0
 800f588:	701a      	strb	r2, [r3, #0]
 800f58a:	2314      	movs	r3, #20
 800f58c:	18fb      	adds	r3, r7, r3
 800f58e:	2200      	movs	r2, #0
 800f590:	701a      	strb	r2, [r3, #0]
 800f592:	e0b4      	b.n	800f6fe <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800f594:	2313      	movs	r3, #19
 800f596:	18fb      	adds	r3, r7, r3
 800f598:	2200      	movs	r2, #0
 800f59a:	701a      	strb	r2, [r3, #0]
 800f59c:	e09d      	b.n	800f6da <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 800f59e:	2314      	movs	r3, #20
 800f5a0:	18fb      	adds	r3, r7, r3
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	005b      	lsls	r3, r3, #1
 800f5a6:	68ba      	ldr	r2, [r7, #8]
 800f5a8:	18d3      	adds	r3, r2, r3
 800f5aa:	881b      	ldrh	r3, [r3, #0]
 800f5ac:	001a      	movs	r2, r3
 800f5ae:	2313      	movs	r3, #19
 800f5b0:	18fb      	adds	r3, r7, r3
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	411a      	asrs	r2, r3
 800f5b6:	0013      	movs	r3, r2
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	d100      	bne.n	800f5c0 <CountNbOfEnabledChannels+0x68>
 800f5be:	e086      	b.n	800f6ce <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 800f5c0:	2315      	movs	r3, #21
 800f5c2:	18fb      	adds	r3, r7, r3
 800f5c4:	781a      	ldrb	r2, [r3, #0]
 800f5c6:	2313      	movs	r3, #19
 800f5c8:	18fb      	adds	r3, r7, r3
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	18d3      	adds	r3, r2, r3
 800f5ce:	001a      	movs	r2, r3
 800f5d0:	0013      	movs	r3, r2
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	189b      	adds	r3, r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	001a      	movs	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	189b      	adds	r3, r3, r2
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d06f      	beq.n	800f6c4 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 800f5e4:	230f      	movs	r3, #15
 800f5e6:	18fb      	adds	r3, r7, r3
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	4053      	eors	r3, r2
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d008      	beq.n	800f606 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( AS923_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 800f5f4:	2313      	movs	r3, #19
 800f5f6:	18fb      	adds	r3, r7, r3
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	2203      	movs	r2, #3
 800f5fc:	411a      	asrs	r2, r3
 800f5fe:	0013      	movs	r3, r2
 800f600:	2201      	movs	r2, #1
 800f602:	4013      	ands	r3, r2
 800f604:	d060      	beq.n	800f6c8 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800f606:	230e      	movs	r3, #14
 800f608:	18fb      	adds	r3, r7, r3
 800f60a:	2000      	movs	r0, #0
 800f60c:	5618      	ldrsb	r0, [r3, r0]
 800f60e:	2415      	movs	r4, #21
 800f610:	193b      	adds	r3, r7, r4
 800f612:	781a      	ldrb	r2, [r3, #0]
 800f614:	2513      	movs	r5, #19
 800f616:	197b      	adds	r3, r7, r5
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	18d3      	adds	r3, r2, r3
 800f61c:	001a      	movs	r2, r3
 800f61e:	0013      	movs	r3, r2
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	189b      	adds	r3, r3, r2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	001a      	movs	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	189b      	adds	r3, r3, r2
 800f62c:	7a1b      	ldrb	r3, [r3, #8]
 800f62e:	011b      	lsls	r3, r3, #4
 800f630:	b25b      	sxtb	r3, r3
 800f632:	111b      	asrs	r3, r3, #4
 800f634:	b25b      	sxtb	r3, r3
 800f636:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800f638:	193b      	adds	r3, r7, r4
 800f63a:	781a      	ldrb	r2, [r3, #0]
 800f63c:	197b      	adds	r3, r7, r5
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	18d3      	adds	r3, r2, r3
 800f642:	001a      	movs	r2, r3
 800f644:	0013      	movs	r3, r2
 800f646:	005b      	lsls	r3, r3, #1
 800f648:	189b      	adds	r3, r3, r2
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	001a      	movs	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	189b      	adds	r3, r3, r2
 800f652:	7a1b      	ldrb	r3, [r3, #8]
 800f654:	b25b      	sxtb	r3, r3
 800f656:	111b      	asrs	r3, r3, #4
 800f658:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800f65a:	001a      	movs	r2, r3
 800f65c:	f004 fe90 	bl	8014380 <RegionCommonValueInRange>
 800f660:	1e03      	subs	r3, r0, #0
 800f662:	d033      	beq.n	800f6cc <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 800f664:	2315      	movs	r3, #21
 800f666:	18fb      	adds	r3, r7, r3
 800f668:	781a      	ldrb	r2, [r3, #0]
 800f66a:	2313      	movs	r3, #19
 800f66c:	18fb      	adds	r3, r7, r3
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	18d3      	adds	r3, r2, r3
 800f672:	001a      	movs	r2, r3
 800f674:	0013      	movs	r3, r2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	189b      	adds	r3, r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	001a      	movs	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	189b      	adds	r3, r3, r2
 800f682:	7a5b      	ldrb	r3, [r3, #9]
 800f684:	011b      	lsls	r3, r3, #4
 800f686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f688:	18d3      	adds	r3, r2, r3
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d006      	beq.n	800f69e <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 800f690:	2116      	movs	r1, #22
 800f692:	187b      	adds	r3, r7, r1
 800f694:	781a      	ldrb	r2, [r3, #0]
 800f696:	187b      	adds	r3, r7, r1
 800f698:	3201      	adds	r2, #1
 800f69a:	701a      	strb	r2, [r3, #0]
                    continue;
 800f69c:	e017      	b.n	800f6ce <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 800f69e:	2217      	movs	r2, #23
 800f6a0:	18bb      	adds	r3, r7, r2
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	18ba      	adds	r2, r7, r2
 800f6a6:	1c59      	adds	r1, r3, #1
 800f6a8:	7011      	strb	r1, [r2, #0]
 800f6aa:	001a      	movs	r2, r3
 800f6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ae:	189b      	adds	r3, r3, r2
 800f6b0:	2215      	movs	r2, #21
 800f6b2:	18b9      	adds	r1, r7, r2
 800f6b4:	2213      	movs	r2, #19
 800f6b6:	18ba      	adds	r2, r7, r2
 800f6b8:	7809      	ldrb	r1, [r1, #0]
 800f6ba:	7812      	ldrb	r2, [r2, #0]
 800f6bc:	188a      	adds	r2, r1, r2
 800f6be:	b2d2      	uxtb	r2, r2
 800f6c0:	701a      	strb	r2, [r3, #0]
 800f6c2:	e004      	b.n	800f6ce <CountNbOfEnabledChannels+0x176>
                    continue;
 800f6c4:	46c0      	nop			; (mov r8, r8)
 800f6c6:	e002      	b.n	800f6ce <CountNbOfEnabledChannels+0x176>
                        continue;
 800f6c8:	46c0      	nop			; (mov r8, r8)
 800f6ca:	e000      	b.n	800f6ce <CountNbOfEnabledChannels+0x176>
                    continue;
 800f6cc:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 800f6ce:	2113      	movs	r1, #19
 800f6d0:	187b      	adds	r3, r7, r1
 800f6d2:	781a      	ldrb	r2, [r3, #0]
 800f6d4:	187b      	adds	r3, r7, r1
 800f6d6:	3201      	adds	r2, #1
 800f6d8:	701a      	strb	r2, [r3, #0]
 800f6da:	2313      	movs	r3, #19
 800f6dc:	18fb      	adds	r3, r7, r3
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	2b0f      	cmp	r3, #15
 800f6e2:	d800      	bhi.n	800f6e6 <CountNbOfEnabledChannels+0x18e>
 800f6e4:	e75b      	b.n	800f59e <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < AS923_MAX_NB_CHANNELS; i += 16, k++ )
 800f6e6:	2215      	movs	r2, #21
 800f6e8:	18bb      	adds	r3, r7, r2
 800f6ea:	18ba      	adds	r2, r7, r2
 800f6ec:	7812      	ldrb	r2, [r2, #0]
 800f6ee:	3210      	adds	r2, #16
 800f6f0:	701a      	strb	r2, [r3, #0]
 800f6f2:	2114      	movs	r1, #20
 800f6f4:	187b      	adds	r3, r7, r1
 800f6f6:	781a      	ldrb	r2, [r3, #0]
 800f6f8:	187b      	adds	r3, r7, r1
 800f6fa:	3201      	adds	r2, #1
 800f6fc:	701a      	strb	r2, [r3, #0]
 800f6fe:	2315      	movs	r3, #21
 800f700:	18fb      	adds	r3, r7, r3
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	2b0f      	cmp	r3, #15
 800f706:	d800      	bhi.n	800f70a <CountNbOfEnabledChannels+0x1b2>
 800f708:	e744      	b.n	800f594 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 800f70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70c:	2216      	movs	r2, #22
 800f70e:	18ba      	adds	r2, r7, r2
 800f710:	7812      	ldrb	r2, [r2, #0]
 800f712:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 800f714:	2317      	movs	r3, #23
 800f716:	18fb      	adds	r3, r7, r3
 800f718:	781b      	ldrb	r3, [r3, #0]
}
 800f71a:	0018      	movs	r0, r3
 800f71c:	46bd      	mov	sp, r7
 800f71e:	b006      	add	sp, #24
 800f720:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f724 <RegionAS923GetPhyParam>:

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 800f72c:	2308      	movs	r3, #8
 800f72e:	18fb      	adds	r3, r7, r3
 800f730:	2200      	movs	r2, #0
 800f732:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	2b34      	cmp	r3, #52	; 0x34
 800f73a:	d900      	bls.n	800f73e <RegionAS923GetPhyParam+0x1a>
 800f73c:	e114      	b.n	800f968 <RegionAS923GetPhyParam+0x244>
 800f73e:	009a      	lsls	r2, r3, #2
 800f740:	4b91      	ldr	r3, [pc, #580]	; (800f988 <RegionAS923GetPhyParam+0x264>)
 800f742:	18d3      	adds	r3, r2, r3
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	78db      	ldrb	r3, [r3, #3]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d104      	bne.n	800f75a <RegionAS923GetPhyParam+0x36>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 800f750:	2308      	movs	r3, #8
 800f752:	18fb      	adds	r3, r7, r3
 800f754:	2200      	movs	r2, #0
 800f756:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 800f758:	e107      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800f75a:	2308      	movs	r3, #8
 800f75c:	18fb      	adds	r3, r7, r3
 800f75e:	2202      	movs	r2, #2
 800f760:	601a      	str	r2, [r3, #0]
            break;
 800f762:	e102      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	789b      	ldrb	r3, [r3, #2]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d104      	bne.n	800f776 <RegionAS923GetPhyParam+0x52>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 800f76c:	2308      	movs	r3, #8
 800f76e:	18fb      	adds	r3, r7, r3
 800f770:	2200      	movs	r2, #0
 800f772:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 800f774:	e0f9      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 800f776:	2308      	movs	r3, #8
 800f778:	18fb      	adds	r3, r7, r3
 800f77a:	2202      	movs	r2, #2
 800f77c:	601a      	str	r2, [r3, #0]
            break;
 800f77e:	e0f4      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800f780:	2308      	movs	r3, #8
 800f782:	18fb      	adds	r3, r7, r3
 800f784:	2202      	movs	r2, #2
 800f786:	601a      	str	r2, [r3, #0]
            break;
 800f788:	e0ef      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	789b      	ldrb	r3, [r3, #2]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d10c      	bne.n	800f7ac <RegionAS923GetPhyParam+0x88>
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_TX_MIN_DATARATE );
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	785b      	ldrb	r3, [r3, #1]
 800f796:	b25b      	sxtb	r3, r3
 800f798:	2100      	movs	r1, #0
 800f79a:	0018      	movs	r0, r3
 800f79c:	f7ff fe44 	bl	800f428 <GetNextLowerTxDr>
 800f7a0:	0003      	movs	r3, r0
 800f7a2:	001a      	movs	r2, r3
 800f7a4:	2308      	movs	r3, #8
 800f7a6:	18fb      	adds	r3, r7, r3
 800f7a8:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
            }
            break;
 800f7aa:	e0de      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	785b      	ldrb	r3, [r3, #1]
 800f7b0:	b25b      	sxtb	r3, r3
 800f7b2:	2102      	movs	r1, #2
 800f7b4:	0018      	movs	r0, r3
 800f7b6:	f7ff fe37 	bl	800f428 <GetNextLowerTxDr>
 800f7ba:	0003      	movs	r3, r0
 800f7bc:	001a      	movs	r2, r3
 800f7be:	2308      	movs	r3, #8
 800f7c0:	18fb      	adds	r3, r7, r3
 800f7c2:	601a      	str	r2, [r3, #0]
            break;
 800f7c4:	e0d1      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 800f7c6:	2308      	movs	r3, #8
 800f7c8:	18fb      	adds	r3, r7, r3
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	601a      	str	r2, [r3, #0]
            break;
 800f7ce:	e0cc      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 800f7d0:	2308      	movs	r3, #8
 800f7d2:	18fb      	adds	r3, r7, r3
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	601a      	str	r2, [r3, #0]
            break;
 800f7d8:	e0c7      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = AS923_ADR_ACK_LIMIT;
 800f7da:	2308      	movs	r3, #8
 800f7dc:	18fb      	adds	r3, r7, r3
 800f7de:	2240      	movs	r2, #64	; 0x40
 800f7e0:	601a      	str	r2, [r3, #0]
            break;
 800f7e2:	e0c2      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = AS923_ADR_ACK_DELAY;
 800f7e4:	2308      	movs	r3, #8
 800f7e6:	18fb      	adds	r3, r7, r3
 800f7e8:	2220      	movs	r2, #32
 800f7ea:	601a      	str	r2, [r3, #0]
            break;
 800f7ec:	e0bd      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	789b      	ldrb	r3, [r3, #2]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d10a      	bne.n	800f80c <RegionAS923GetPhyParam+0xe8>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	785b      	ldrb	r3, [r3, #1]
 800f7fa:	b25b      	sxtb	r3, r3
 800f7fc:	001a      	movs	r2, r3
 800f7fe:	4b63      	ldr	r3, [pc, #396]	; (800f98c <RegionAS923GetPhyParam+0x268>)
 800f800:	5c9b      	ldrb	r3, [r3, r2]
 800f802:	001a      	movs	r2, r3
 800f804:	2308      	movs	r3, #8
 800f806:	18fb      	adds	r3, r7, r3
 800f808:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
            }
            break;
 800f80a:	e0ae      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	785b      	ldrb	r3, [r3, #1]
 800f810:	b25b      	sxtb	r3, r3
 800f812:	001a      	movs	r2, r3
 800f814:	4b5e      	ldr	r3, [pc, #376]	; (800f990 <RegionAS923GetPhyParam+0x26c>)
 800f816:	5c9b      	ldrb	r3, [r3, r2]
 800f818:	001a      	movs	r2, r3
 800f81a:	2308      	movs	r3, #8
 800f81c:	18fb      	adds	r3, r7, r3
 800f81e:	601a      	str	r2, [r3, #0]
            break;
 800f820:	e0a3      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	789b      	ldrb	r3, [r3, #2]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d10a      	bne.n	800f840 <RegionAS923GetPhyParam+0x11c>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	785b      	ldrb	r3, [r3, #1]
 800f82e:	b25b      	sxtb	r3, r3
 800f830:	001a      	movs	r2, r3
 800f832:	4b58      	ldr	r3, [pc, #352]	; (800f994 <RegionAS923GetPhyParam+0x270>)
 800f834:	5c9b      	ldrb	r3, [r3, r2]
 800f836:	001a      	movs	r2, r3
 800f838:	2308      	movs	r3, #8
 800f83a:	18fb      	adds	r3, r7, r3
 800f83c:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
            }
            break;
 800f83e:	e094      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	785b      	ldrb	r3, [r3, #1]
 800f844:	b25b      	sxtb	r3, r3
 800f846:	001a      	movs	r2, r3
 800f848:	4b51      	ldr	r3, [pc, #324]	; (800f990 <RegionAS923GetPhyParam+0x26c>)
 800f84a:	5c9b      	ldrb	r3, [r3, r2]
 800f84c:	001a      	movs	r2, r3
 800f84e:	2308      	movs	r3, #8
 800f850:	18fb      	adds	r3, r7, r3
 800f852:	601a      	str	r2, [r3, #0]
            break;
 800f854:	e089      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 800f856:	2308      	movs	r3, #8
 800f858:	18fb      	adds	r3, r7, r3
 800f85a:	2200      	movs	r2, #0
 800f85c:	601a      	str	r2, [r3, #0]
            break;
 800f85e:	e084      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800f860:	2308      	movs	r3, #8
 800f862:	18fb      	adds	r3, r7, r3
 800f864:	4a4c      	ldr	r2, [pc, #304]	; (800f998 <RegionAS923GetPhyParam+0x274>)
 800f866:	601a      	str	r2, [r3, #0]
            break;
 800f868:	e07f      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = AS923_RECEIVE_DELAY1;
 800f86a:	2308      	movs	r3, #8
 800f86c:	18fb      	adds	r3, r7, r3
 800f86e:	22fa      	movs	r2, #250	; 0xfa
 800f870:	0092      	lsls	r2, r2, #2
 800f872:	601a      	str	r2, [r3, #0]
            break;
 800f874:	e079      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = AS923_RECEIVE_DELAY2;
 800f876:	2308      	movs	r3, #8
 800f878:	18fb      	adds	r3, r7, r3
 800f87a:	22fa      	movs	r2, #250	; 0xfa
 800f87c:	00d2      	lsls	r2, r2, #3
 800f87e:	601a      	str	r2, [r3, #0]
            break;
 800f880:	e073      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY1;
 800f882:	2308      	movs	r3, #8
 800f884:	18fb      	adds	r3, r7, r3
 800f886:	4a45      	ldr	r2, [pc, #276]	; (800f99c <RegionAS923GetPhyParam+0x278>)
 800f888:	601a      	str	r2, [r3, #0]
            break;
 800f88a:	e06e      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY2;
 800f88c:	2308      	movs	r3, #8
 800f88e:	18fb      	adds	r3, r7, r3
 800f890:	4a43      	ldr	r2, [pc, #268]	; (800f9a0 <RegionAS923GetPhyParam+0x27c>)
 800f892:	601a      	str	r2, [r3, #0]
            break;
 800f894:	e069      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = AS923_MAX_FCNT_GAP;
 800f896:	2308      	movs	r3, #8
 800f898:	18fb      	adds	r3, r7, r3
 800f89a:	2280      	movs	r2, #128	; 0x80
 800f89c:	01d2      	lsls	r2, r2, #7
 800f89e:	601a      	str	r2, [r3, #0]
            break;
 800f8a0:	e063      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( AS923_ACKTIMEOUT + randr( -AS923_ACK_TIMEOUT_RND, AS923_ACK_TIMEOUT_RND ) );
 800f8a2:	23fa      	movs	r3, #250	; 0xfa
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4a3f      	ldr	r2, [pc, #252]	; (800f9a4 <RegionAS923GetPhyParam+0x280>)
 800f8a8:	0019      	movs	r1, r3
 800f8aa:	0010      	movs	r0, r2
 800f8ac:	f00d fa00 	bl	801ccb0 <randr>
 800f8b0:	0003      	movs	r3, r0
 800f8b2:	22fa      	movs	r2, #250	; 0xfa
 800f8b4:	00d2      	lsls	r2, r2, #3
 800f8b6:	4694      	mov	ip, r2
 800f8b8:	4463      	add	r3, ip
 800f8ba:	001a      	movs	r2, r3
 800f8bc:	2308      	movs	r3, #8
 800f8be:	18fb      	adds	r3, r7, r3
 800f8c0:	601a      	str	r2, [r3, #0]
            break;
 800f8c2:	e052      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = AS923_DEFAULT_RX1_DR_OFFSET;
 800f8c4:	2308      	movs	r3, #8
 800f8c6:	18fb      	adds	r3, r7, r3
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	601a      	str	r2, [r3, #0]
            break;
 800f8cc:	e04d      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ;
 800f8ce:	2308      	movs	r3, #8
 800f8d0:	18fb      	adds	r3, r7, r3
 800f8d2:	4a35      	ldr	r2, [pc, #212]	; (800f9a8 <RegionAS923GetPhyParam+0x284>)
 800f8d4:	601a      	str	r2, [r3, #0]
            break;
 800f8d6:	e048      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 800f8d8:	2308      	movs	r3, #8
 800f8da:	18fb      	adds	r3, r7, r3
 800f8dc:	2202      	movs	r2, #2
 800f8de:	601a      	str	r2, [r3, #0]
            break;
 800f8e0:	e043      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800f8e2:	2308      	movs	r3, #8
 800f8e4:	18fb      	adds	r3, r7, r3
 800f8e6:	4a31      	ldr	r2, [pc, #196]	; (800f9ac <RegionAS923GetPhyParam+0x288>)
 800f8e8:	601a      	str	r2, [r3, #0]
            break;
 800f8ea:	e03e      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800f8ec:	2308      	movs	r3, #8
 800f8ee:	18fb      	adds	r3, r7, r3
 800f8f0:	4a2f      	ldr	r2, [pc, #188]	; (800f9b0 <RegionAS923GetPhyParam+0x28c>)
 800f8f2:	601a      	str	r2, [r3, #0]
            break;
 800f8f4:	e039      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800f8f6:	2308      	movs	r3, #8
 800f8f8:	18fb      	adds	r3, r7, r3
 800f8fa:	2210      	movs	r2, #16
 800f8fc:	601a      	str	r2, [r3, #0]
            break;
 800f8fe:	e034      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 800f900:	2308      	movs	r3, #8
 800f902:	18fb      	adds	r3, r7, r3
 800f904:	4a2b      	ldr	r2, [pc, #172]	; (800f9b4 <RegionAS923GetPhyParam+0x290>)
 800f906:	601a      	str	r2, [r3, #0]
            break;
 800f908:	e02f      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800f90a:	2308      	movs	r3, #8
 800f90c:	18fb      	adds	r3, r7, r3
 800f90e:	2201      	movs	r2, #1
 800f910:	601a      	str	r2, [r3, #0]
            break;
 800f912:	e02a      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 800f914:	2308      	movs	r3, #8
 800f916:	18fb      	adds	r3, r7, r3
 800f918:	2201      	movs	r2, #1
 800f91a:	601a      	str	r2, [r3, #0]
            break;
 800f91c:	e025      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800f91e:	2308      	movs	r3, #8
 800f920:	18fb      	adds	r3, r7, r3
 800f922:	2283      	movs	r2, #131	; 0x83
 800f924:	05d2      	lsls	r2, r2, #23
 800f926:	601a      	str	r2, [r3, #0]
            break;
 800f928:	e01f      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800f92a:	2308      	movs	r3, #8
 800f92c:	18fb      	adds	r3, r7, r3
 800f92e:	4a22      	ldr	r2, [pc, #136]	; (800f9b8 <RegionAS923GetPhyParam+0x294>)
 800f930:	601a      	str	r2, [r3, #0]
            break;
 800f932:	e01a      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ;
 800f934:	2308      	movs	r3, #8
 800f936:	18fb      	adds	r3, r7, r3
 800f938:	4a20      	ldr	r2, [pc, #128]	; (800f9bc <RegionAS923GetPhyParam+0x298>)
 800f93a:	601a      	str	r2, [r3, #0]
            break;
 800f93c:	e015      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800f93e:	2108      	movs	r1, #8
 800f940:	187b      	adds	r3, r7, r1
 800f942:	2211      	movs	r2, #17
 800f944:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 800f946:	187b      	adds	r3, r7, r1
 800f948:	2202      	movs	r2, #2
 800f94a:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 800f94c:	187b      	adds	r3, r7, r1
 800f94e:	2200      	movs	r2, #0
 800f950:	709a      	strb	r2, [r3, #2]
            break;
 800f952:	e00a      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800f954:	2308      	movs	r3, #8
 800f956:	18fb      	adds	r3, r7, r3
 800f958:	2203      	movs	r2, #3
 800f95a:	601a      	str	r2, [r3, #0]
            break;
 800f95c:	e005      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 800f95e:	2308      	movs	r3, #8
 800f960:	18fb      	adds	r3, r7, r3
 800f962:	2203      	movs	r2, #3
 800f964:	601a      	str	r2, [r3, #0]
            break;
 800f966:	e000      	b.n	800f96a <RegionAS923GetPhyParam+0x246>
        }
        default:
        {
            break;
 800f968:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 800f96a:	210c      	movs	r1, #12
 800f96c:	187b      	adds	r3, r7, r1
 800f96e:	2208      	movs	r2, #8
 800f970:	18ba      	adds	r2, r7, r2
 800f972:	6812      	ldr	r2, [r2, #0]
 800f974:	601a      	str	r2, [r3, #0]
 800f976:	187b      	adds	r3, r7, r1
 800f978:	2200      	movs	r2, #0
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	0013      	movs	r3, r2
}
 800f97e:	0018      	movs	r0, r3
 800f980:	46bd      	mov	sp, r7
 800f982:	b004      	add	sp, #16
 800f984:	bd80      	pop	{r7, pc}
 800f986:	46c0      	nop			; (mov r8, r8)
 800f988:	08027e68 	.word	0x08027e68
 800f98c:	08027e48 	.word	0x08027e48
 800f990:	08027e58 	.word	0x08027e58
 800f994:	08027e50 	.word	0x08027e50
 800f998:	00000bb8 	.word	0x00000bb8
 800f99c:	00001388 	.word	0x00001388
 800f9a0:	00001770 	.word	0x00001770
 800f9a4:	fffffc18 	.word	0xfffffc18
 800f9a8:	3706ea00 	.word	0x3706ea00
 800f9ac:	20000b24 	.word	0x20000b24
 800f9b0:	20000b26 	.word	0x20000b26
 800f9b4:	20000a54 	.word	0x20000a54
 800f9b8:	4009999a 	.word	0x4009999a
 800f9bc:	3709f740 	.word	0x3709f740

0800f9c0 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	7858      	ldrb	r0, [r3, #1]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	0019      	movs	r1, r3
 800f9d2:	4a0a      	ldr	r2, [pc, #40]	; (800f9fc <RegionAS923SetBandTxDone+0x3c>)
 800f9d4:	000b      	movs	r3, r1
 800f9d6:	005b      	lsls	r3, r3, #1
 800f9d8:	185b      	adds	r3, r3, r1
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	18d3      	adds	r3, r2, r3
 800f9de:	3309      	adds	r3, #9
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	330c      	adds	r3, #12
 800f9e4:	011a      	lsls	r2, r3, #4
 800f9e6:	4b05      	ldr	r3, [pc, #20]	; (800f9fc <RegionAS923SetBandTxDone+0x3c>)
 800f9e8:	18d1      	adds	r1, r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	001a      	movs	r2, r3
 800f9f0:	f004 fd9e 	bl	8014530 <RegionCommonSetBandTxDone>
}
 800f9f4:	46c0      	nop			; (mov r8, r8)
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	b002      	add	sp, #8
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	20000a54 	.word	0x20000a54

0800fa00 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800fa00:	b590      	push	{r4, r7, lr}
 800fa02:	b087      	sub	sp, #28
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
    Band_t bands[AS923_MAX_NB_BANDS] =
 800fa08:	2108      	movs	r1, #8
 800fa0a:	187b      	adds	r3, r7, r1
 800fa0c:	2264      	movs	r2, #100	; 0x64
 800fa0e:	801a      	strh	r2, [r3, #0]
 800fa10:	187b      	adds	r3, r7, r1
 800fa12:	2200      	movs	r2, #0
 800fa14:	709a      	strb	r2, [r3, #2]
 800fa16:	187b      	adds	r3, r7, r1
 800fa18:	2200      	movs	r2, #0
 800fa1a:	605a      	str	r2, [r3, #4]
 800fa1c:	187b      	adds	r3, r7, r1
 800fa1e:	2200      	movs	r2, #0
 800fa20:	609a      	str	r2, [r3, #8]
 800fa22:	187b      	adds	r3, r7, r1
 800fa24:	2200      	movs	r2, #0
 800fa26:	60da      	str	r2, [r3, #12]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	791b      	ldrb	r3, [r3, #4]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d02b      	beq.n	800fa88 <RegionAS923InitDefaults+0x88>
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d01d      	beq.n	800fa70 <RegionAS923InitDefaults+0x70>
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d000      	beq.n	800fa3a <RegionAS923InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 800fa38:	e033      	b.n	800faa2 <RegionAS923InitDefaults+0xa2>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800fa3a:	2308      	movs	r3, #8
 800fa3c:	18f9      	adds	r1, r7, r3
 800fa3e:	4b1b      	ldr	r3, [pc, #108]	; (800faac <RegionAS923InitDefaults+0xac>)
 800fa40:	2210      	movs	r2, #16
 800fa42:	0018      	movs	r0, r3
 800fa44:	f00d f94a 	bl	801ccdc <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800fa48:	4b19      	ldr	r3, [pc, #100]	; (800fab0 <RegionAS923InitDefaults+0xb0>)
 800fa4a:	4a1a      	ldr	r2, [pc, #104]	; (800fab4 <RegionAS923InitDefaults+0xb4>)
 800fa4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fa4e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800fa50:	4b17      	ldr	r3, [pc, #92]	; (800fab0 <RegionAS923InitDefaults+0xb0>)
 800fa52:	4a19      	ldr	r2, [pc, #100]	; (800fab8 <RegionAS923InitDefaults+0xb8>)
 800fa54:	330c      	adds	r3, #12
 800fa56:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fa58:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800fa5a:	4b15      	ldr	r3, [pc, #84]	; (800fab0 <RegionAS923InitDefaults+0xb0>)
 800fa5c:	22d2      	movs	r2, #210	; 0xd2
 800fa5e:	2103      	movs	r1, #3
 800fa60:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800fa62:	4916      	ldr	r1, [pc, #88]	; (800fabc <RegionAS923InitDefaults+0xbc>)
 800fa64:	4b16      	ldr	r3, [pc, #88]	; (800fac0 <RegionAS923InitDefaults+0xc0>)
 800fa66:	2201      	movs	r2, #1
 800fa68:	0018      	movs	r0, r3
 800fa6a:	f004 fd32 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 800fa6e:	e018      	b.n	800faa2 <RegionAS923InitDefaults+0xa2>
            if( params->NvmCtx != 0 )
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d013      	beq.n	800faa0 <RegionAS923InitDefaults+0xa0>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6819      	ldr	r1, [r3, #0]
 800fa7c:	4b0c      	ldr	r3, [pc, #48]	; (800fab0 <RegionAS923InitDefaults+0xb0>)
 800fa7e:	22d4      	movs	r2, #212	; 0xd4
 800fa80:	0018      	movs	r0, r3
 800fa82:	f00d f92b 	bl	801ccdc <memcpy1>
            break;
 800fa86:	e00b      	b.n	800faa0 <RegionAS923InitDefaults+0xa0>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800fa88:	4b09      	ldr	r3, [pc, #36]	; (800fab0 <RegionAS923InitDefaults+0xb0>)
 800fa8a:	22d0      	movs	r2, #208	; 0xd0
 800fa8c:	5a9a      	ldrh	r2, [r3, r2]
 800fa8e:	4b08      	ldr	r3, [pc, #32]	; (800fab0 <RegionAS923InitDefaults+0xb0>)
 800fa90:	21d2      	movs	r1, #210	; 0xd2
 800fa92:	5a5b      	ldrh	r3, [r3, r1]
 800fa94:	4313      	orrs	r3, r2
 800fa96:	b299      	uxth	r1, r3
 800fa98:	4b05      	ldr	r3, [pc, #20]	; (800fab0 <RegionAS923InitDefaults+0xb0>)
 800fa9a:	22d0      	movs	r2, #208	; 0xd0
 800fa9c:	5299      	strh	r1, [r3, r2]
            break;
 800fa9e:	e000      	b.n	800faa2 <RegionAS923InitDefaults+0xa2>
            break;
 800faa0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800faa2:	46c0      	nop			; (mov r8, r8)
 800faa4:	46bd      	mov	sp, r7
 800faa6:	b007      	add	sp, #28
 800faa8:	bd90      	pop	{r4, r7, pc}
 800faaa:	46c0      	nop			; (mov r8, r8)
 800faac:	20000b14 	.word	0x20000b14
 800fab0:	20000a54 	.word	0x20000a54
 800fab4:	08026b0c 	.word	0x08026b0c
 800fab8:	08026b18 	.word	0x08026b18
 800fabc:	20000b26 	.word	0x20000b26
 800fac0:	20000b24 	.word	0x20000b24

0800fac4 <RegionAS923ApplyCFList>:
            return false;
    }
}

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 800fac4:	b590      	push	{r4, r7, lr}
 800fac6:	b08b      	sub	sp, #44	; 0x2c
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800facc:	2318      	movs	r3, #24
 800face:	18fb      	adds	r3, r7, r3
 800fad0:	2250      	movs	r2, #80	; 0x50
 800fad2:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	791b      	ldrb	r3, [r3, #4]
 800fad8:	2b10      	cmp	r3, #16
 800fada:	d000      	beq.n	800fade <RegionAS923ApplyCFList+0x1a>
 800fadc:	e07d      	b.n	800fbda <RegionAS923ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	330f      	adds	r3, #15
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d000      	beq.n	800faec <RegionAS923ApplyCFList+0x28>
 800faea:	e078      	b.n	800fbde <RegionAS923ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800faec:	2327      	movs	r3, #39	; 0x27
 800faee:	18fb      	adds	r3, r7, r3
 800faf0:	2200      	movs	r2, #0
 800faf2:	701a      	strb	r2, [r3, #0]
 800faf4:	2326      	movs	r3, #38	; 0x26
 800faf6:	18fb      	adds	r3, r7, r3
 800faf8:	2202      	movs	r2, #2
 800fafa:	701a      	strb	r2, [r3, #0]
 800fafc:	e067      	b.n	800fbce <RegionAS923ApplyCFList+0x10a>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800fafe:	2326      	movs	r3, #38	; 0x26
 800fb00:	18fb      	adds	r3, r7, r3
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	2b06      	cmp	r3, #6
 800fb06:	d82e      	bhi.n	800fb66 <RegionAS923ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	2427      	movs	r4, #39	; 0x27
 800fb0e:	193b      	adds	r3, r7, r4
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	18d3      	adds	r3, r2, r3
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	001a      	movs	r2, r3
 800fb18:	2018      	movs	r0, #24
 800fb1a:	183b      	adds	r3, r7, r0
 800fb1c:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800fb1e:	183b      	adds	r3, r7, r0
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6819      	ldr	r1, [r3, #0]
 800fb26:	193b      	adds	r3, r7, r4
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	18cb      	adds	r3, r1, r3
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	021b      	lsls	r3, r3, #8
 800fb32:	431a      	orrs	r2, r3
 800fb34:	183b      	adds	r3, r7, r0
 800fb36:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800fb38:	183b      	adds	r3, r7, r0
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6819      	ldr	r1, [r3, #0]
 800fb40:	193b      	adds	r3, r7, r4
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	3302      	adds	r3, #2
 800fb46:	18cb      	adds	r3, r1, r3
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	041b      	lsls	r3, r3, #16
 800fb4c:	431a      	orrs	r2, r3
 800fb4e:	183b      	adds	r3, r7, r0
 800fb50:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 800fb52:	183b      	adds	r3, r7, r0
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2264      	movs	r2, #100	; 0x64
 800fb58:	435a      	muls	r2, r3
 800fb5a:	183b      	adds	r3, r7, r0
 800fb5c:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 800fb5e:	183b      	adds	r3, r7, r0
 800fb60:	2200      	movs	r2, #0
 800fb62:	605a      	str	r2, [r3, #4]
 800fb64:	e009      	b.n	800fb7a <RegionAS923ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 800fb66:	2118      	movs	r1, #24
 800fb68:	187b      	adds	r3, r7, r1
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 800fb6e:	187b      	adds	r3, r7, r1
 800fb70:	2200      	movs	r2, #0
 800fb72:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 800fb74:	187b      	adds	r3, r7, r1
 800fb76:	2200      	movs	r2, #0
 800fb78:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 800fb7a:	2318      	movs	r3, #24
 800fb7c:	18fb      	adds	r3, r7, r3
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00e      	beq.n	800fba2 <RegionAS923ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 800fb84:	2110      	movs	r1, #16
 800fb86:	187b      	adds	r3, r7, r1
 800fb88:	2218      	movs	r2, #24
 800fb8a:	18ba      	adds	r2, r7, r2
 800fb8c:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 800fb8e:	187b      	adds	r3, r7, r1
 800fb90:	2226      	movs	r2, #38	; 0x26
 800fb92:	18ba      	adds	r2, r7, r2
 800fb94:	7812      	ldrb	r2, [r2, #0]
 800fb96:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 800fb98:	187b      	adds	r3, r7, r1
 800fb9a:	0018      	movs	r0, r3
 800fb9c:	f000 fdbe 	bl	801071c <RegionAS923ChannelAdd>
 800fba0:	e009      	b.n	800fbb6 <RegionAS923ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 800fba2:	210c      	movs	r1, #12
 800fba4:	187b      	adds	r3, r7, r1
 800fba6:	2226      	movs	r2, #38	; 0x26
 800fba8:	18ba      	adds	r2, r7, r2
 800fbaa:	7812      	ldrb	r2, [r2, #0]
 800fbac:	701a      	strb	r2, [r3, #0]

            RegionAS923ChannelsRemove( &channelRemove );
 800fbae:	187b      	adds	r3, r7, r1
 800fbb0:	0018      	movs	r0, r3
 800fbb2:	f000 fe6d 	bl	8010890 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800fbb6:	2227      	movs	r2, #39	; 0x27
 800fbb8:	18bb      	adds	r3, r7, r2
 800fbba:	18ba      	adds	r2, r7, r2
 800fbbc:	7812      	ldrb	r2, [r2, #0]
 800fbbe:	3203      	adds	r2, #3
 800fbc0:	701a      	strb	r2, [r3, #0]
 800fbc2:	2126      	movs	r1, #38	; 0x26
 800fbc4:	187b      	adds	r3, r7, r1
 800fbc6:	781a      	ldrb	r2, [r3, #0]
 800fbc8:	187b      	adds	r3, r7, r1
 800fbca:	3201      	adds	r2, #1
 800fbcc:	701a      	strb	r2, [r3, #0]
 800fbce:	2326      	movs	r3, #38	; 0x26
 800fbd0:	18fb      	adds	r3, r7, r3
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	2b0f      	cmp	r3, #15
 800fbd6:	d992      	bls.n	800fafe <RegionAS923ApplyCFList+0x3a>
 800fbd8:	e002      	b.n	800fbe0 <RegionAS923ApplyCFList+0x11c>
        return;
 800fbda:	46c0      	nop			; (mov r8, r8)
 800fbdc:	e000      	b.n	800fbe0 <RegionAS923ApplyCFList+0x11c>
        return;
 800fbde:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	b00b      	add	sp, #44	; 0x2c
 800fbe4:	bd90      	pop	{r4, r7, pc}
	...

0800fbe8 <RegionAS923ComputeRxWindowParameters>:
    }
    return true;
}

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbea:	b08b      	sub	sp, #44	; 0x2c
 800fbec:	af04      	add	r7, sp, #16
 800fbee:	60ba      	str	r2, [r7, #8]
 800fbf0:	607b      	str	r3, [r7, #4]
 800fbf2:	250f      	movs	r5, #15
 800fbf4:	197b      	adds	r3, r7, r5
 800fbf6:	1c02      	adds	r2, r0, #0
 800fbf8:	701a      	strb	r2, [r3, #0]
 800fbfa:	230e      	movs	r3, #14
 800fbfc:	18fb      	adds	r3, r7, r3
 800fbfe:	1c0a      	adds	r2, r1, #0
 800fc00:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 800fc02:	2300      	movs	r3, #0
 800fc04:	2400      	movs	r4, #0
 800fc06:	613b      	str	r3, [r7, #16]
 800fc08:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800fc0a:	197b      	adds	r3, r7, r5
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	b25a      	sxtb	r2, r3
 800fc10:	2a07      	cmp	r2, #7
 800fc12:	dd00      	ble.n	800fc16 <RegionAS923ComputeRxWindowParameters+0x2e>
 800fc14:	2307      	movs	r3, #7
 800fc16:	b25a      	sxtb	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	785b      	ldrb	r3, [r3, #1]
 800fc20:	b25b      	sxtb	r3, r3
 800fc22:	0018      	movs	r0, r3
 800fc24:	f7ff fc2a 	bl	800f47c <GetBandwidth>
 800fc28:	0003      	movs	r3, r0
 800fc2a:	b2da      	uxtb	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	785b      	ldrb	r3, [r3, #1]
 800fc34:	b25b      	sxtb	r3, r3
 800fc36:	2b07      	cmp	r3, #7
 800fc38:	d10d      	bne.n	800fc56 <RegionAS923ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	785b      	ldrb	r3, [r3, #1]
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	001a      	movs	r2, r3
 800fc42:	4b1b      	ldr	r3, [pc, #108]	; (800fcb0 <RegionAS923ComputeRxWindowParameters+0xc8>)
 800fc44:	5c9b      	ldrb	r3, [r3, r2]
 800fc46:	0018      	movs	r0, r3
 800fc48:	f004 feaa 	bl	80149a0 <RegionCommonComputeSymbolTimeFsk>
 800fc4c:	0003      	movs	r3, r0
 800fc4e:	000c      	movs	r4, r1
 800fc50:	613b      	str	r3, [r7, #16]
 800fc52:	617c      	str	r4, [r7, #20]
 800fc54:	e013      	b.n	800fc7e <RegionAS923ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	785b      	ldrb	r3, [r3, #1]
 800fc5a:	b25b      	sxtb	r3, r3
 800fc5c:	001a      	movs	r2, r3
 800fc5e:	4b14      	ldr	r3, [pc, #80]	; (800fcb0 <RegionAS923ComputeRxWindowParameters+0xc8>)
 800fc60:	5c98      	ldrb	r0, [r3, r2]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	785b      	ldrb	r3, [r3, #1]
 800fc66:	b25b      	sxtb	r3, r3
 800fc68:	001a      	movs	r2, r3
 800fc6a:	4b12      	ldr	r3, [pc, #72]	; (800fcb4 <RegionAS923ComputeRxWindowParameters+0xcc>)
 800fc6c:	0092      	lsls	r2, r2, #2
 800fc6e:	58d3      	ldr	r3, [r2, r3]
 800fc70:	0019      	movs	r1, r3
 800fc72:	f004 fe69 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 800fc76:	0003      	movs	r3, r0
 800fc78:	000c      	movs	r4, r1
 800fc7a:	613b      	str	r3, [r7, #16]
 800fc7c:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800fc7e:	4b0e      	ldr	r3, [pc, #56]	; (800fcb8 <RegionAS923ComputeRxWindowParameters+0xd0>)
 800fc80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc82:	4798      	blx	r3
 800fc84:	0006      	movs	r6, r0
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	3308      	adds	r3, #8
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	320c      	adds	r2, #12
 800fc8e:	68bd      	ldr	r5, [r7, #8]
 800fc90:	210e      	movs	r1, #14
 800fc92:	1879      	adds	r1, r7, r1
 800fc94:	780c      	ldrb	r4, [r1, #0]
 800fc96:	6938      	ldr	r0, [r7, #16]
 800fc98:	6979      	ldr	r1, [r7, #20]
 800fc9a:	9202      	str	r2, [sp, #8]
 800fc9c:	9301      	str	r3, [sp, #4]
 800fc9e:	9600      	str	r6, [sp, #0]
 800fca0:	002b      	movs	r3, r5
 800fca2:	0022      	movs	r2, r4
 800fca4:	f004 fe98 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 800fca8:	46c0      	nop			; (mov r8, r8)
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	b007      	add	sp, #28
 800fcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcb0:	08027e20 	.word	0x08027e20
 800fcb4:	08027e28 	.word	0x08027e28
 800fcb8:	08028964 	.word	0x08028964

0800fcbc <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800fcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcbe:	b091      	sub	sp, #68	; 0x44
 800fcc0:	af0a      	add	r7, sp, #40	; 0x28
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800fcc6:	230f      	movs	r3, #15
 800fcc8:	18fb      	adds	r3, r7, r3
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	7852      	ldrb	r2, [r2, #1]
 800fcce:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 800fcd0:	2316      	movs	r3, #22
 800fcd2:	18fb      	adds	r3, r7, r3
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 800fcd8:	230e      	movs	r3, #14
 800fcda:	18fb      	adds	r3, r7, r3
 800fcdc:	2200      	movs	r2, #0
 800fcde:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800fce6:	4b64      	ldr	r3, [pc, #400]	; (800fe78 <RegionAS923RxConfig+0x1bc>)
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	4798      	blx	r3
 800fcec:	1e03      	subs	r3, r0, #0
 800fcee:	d001      	beq.n	800fcf4 <RegionAS923RxConfig+0x38>
    {
        return false;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	e0bc      	b.n	800fe6e <RegionAS923RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	7cdb      	ldrb	r3, [r3, #19]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d122      	bne.n	800fd42 <RegionAS923RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	0019      	movs	r1, r3
 800fd02:	4a5e      	ldr	r2, [pc, #376]	; (800fe7c <RegionAS923RxConfig+0x1c0>)
 800fd04:	000b      	movs	r3, r1
 800fd06:	005b      	lsls	r3, r3, #1
 800fd08:	185b      	adds	r3, r3, r1
 800fd0a:	009b      	lsls	r3, r3, #2
 800fd0c:	589b      	ldr	r3, [r3, r2]
 800fd0e:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	0019      	movs	r1, r3
 800fd16:	4a59      	ldr	r2, [pc, #356]	; (800fe7c <RegionAS923RxConfig+0x1c0>)
 800fd18:	000b      	movs	r3, r1
 800fd1a:	005b      	lsls	r3, r3, #1
 800fd1c:	185b      	adds	r3, r3, r1
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	18d3      	adds	r3, r2, r3
 800fd22:	3304      	adds	r3, #4
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00b      	beq.n	800fd42 <RegionAS923RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	0019      	movs	r1, r3
 800fd30:	4a52      	ldr	r2, [pc, #328]	; (800fe7c <RegionAS923RxConfig+0x1c0>)
 800fd32:	000b      	movs	r3, r1
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	185b      	adds	r3, r3, r1
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	18d3      	adds	r3, r2, r3
 800fd3c:	3304      	adds	r3, #4
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800fd42:	240f      	movs	r4, #15
 800fd44:	193b      	adds	r3, r7, r4
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	b25b      	sxtb	r3, r3
 800fd4a:	4a4d      	ldr	r2, [pc, #308]	; (800fe80 <RegionAS923RxConfig+0x1c4>)
 800fd4c:	5cd2      	ldrb	r2, [r2, r3]
 800fd4e:	230e      	movs	r3, #14
 800fd50:	18fb      	adds	r3, r7, r3
 800fd52:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 800fd54:	4b48      	ldr	r3, [pc, #288]	; (800fe78 <RegionAS923RxConfig+0x1bc>)
 800fd56:	695b      	ldr	r3, [r3, #20]
 800fd58:	693a      	ldr	r2, [r7, #16]
 800fd5a:	0010      	movs	r0, r2
 800fd5c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800fd5e:	193b      	adds	r3, r7, r4
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	b25b      	sxtb	r3, r3
 800fd64:	2b07      	cmp	r3, #7
 800fd66:	d12f      	bne.n	800fdc8 <RegionAS923RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 800fd68:	2117      	movs	r1, #23
 800fd6a:	187b      	adds	r3, r7, r1
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800fd70:	4b41      	ldr	r3, [pc, #260]	; (800fe78 <RegionAS923RxConfig+0x1bc>)
 800fd72:	6a1c      	ldr	r4, [r3, #32]
 800fd74:	230e      	movs	r3, #14
 800fd76:	18fb      	adds	r3, r7, r3
 800fd78:	2200      	movs	r2, #0
 800fd7a:	569a      	ldrsb	r2, [r3, r2]
 800fd7c:	0013      	movs	r3, r2
 800fd7e:	015b      	lsls	r3, r3, #5
 800fd80:	1a9b      	subs	r3, r3, r2
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	189b      	adds	r3, r3, r2
 800fd86:	00db      	lsls	r3, r3, #3
 800fd88:	001e      	movs	r6, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	689b      	ldr	r3, [r3, #8]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	7c92      	ldrb	r2, [r2, #18]
 800fd94:	4d3b      	ldr	r5, [pc, #236]	; (800fe84 <RegionAS923RxConfig+0x1c8>)
 800fd96:	1879      	adds	r1, r7, r1
 800fd98:	7808      	ldrb	r0, [r1, #0]
 800fd9a:	9209      	str	r2, [sp, #36]	; 0x24
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	9208      	str	r2, [sp, #32]
 800fda0:	2200      	movs	r2, #0
 800fda2:	9207      	str	r2, [sp, #28]
 800fda4:	2200      	movs	r2, #0
 800fda6:	9206      	str	r2, [sp, #24]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	9205      	str	r2, [sp, #20]
 800fdac:	2200      	movs	r2, #0
 800fdae:	9204      	str	r2, [sp, #16]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	9203      	str	r2, [sp, #12]
 800fdb4:	9302      	str	r3, [sp, #8]
 800fdb6:	2305      	movs	r3, #5
 800fdb8:	9301      	str	r3, [sp, #4]
 800fdba:	4b33      	ldr	r3, [pc, #204]	; (800fe88 <RegionAS923RxConfig+0x1cc>)
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	0032      	movs	r2, r6
 800fdc2:	0029      	movs	r1, r5
 800fdc4:	47a0      	blx	r4
 800fdc6:	e029      	b.n	800fe1c <RegionAS923RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 800fdc8:	2117      	movs	r1, #23
 800fdca:	187b      	adds	r3, r7, r1
 800fdcc:	2201      	movs	r2, #1
 800fdce:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800fdd0:	4b29      	ldr	r3, [pc, #164]	; (800fe78 <RegionAS923RxConfig+0x1bc>)
 800fdd2:	6a1c      	ldr	r4, [r3, #32]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	789b      	ldrb	r3, [r3, #2]
 800fdd8:	001e      	movs	r6, r3
 800fdda:	230e      	movs	r3, #14
 800fddc:	18fb      	adds	r3, r7, r3
 800fdde:	2500      	movs	r5, #0
 800fde0:	575d      	ldrsb	r5, [r3, r5]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	7c92      	ldrb	r2, [r2, #18]
 800fdec:	1879      	adds	r1, r7, r1
 800fdee:	7808      	ldrb	r0, [r1, #0]
 800fdf0:	9209      	str	r2, [sp, #36]	; 0x24
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	9208      	str	r2, [sp, #32]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	9207      	str	r2, [sp, #28]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	9206      	str	r2, [sp, #24]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	9205      	str	r2, [sp, #20]
 800fe02:	2200      	movs	r2, #0
 800fe04:	9204      	str	r2, [sp, #16]
 800fe06:	2200      	movs	r2, #0
 800fe08:	9203      	str	r2, [sp, #12]
 800fe0a:	9302      	str	r3, [sp, #8]
 800fe0c:	2308      	movs	r3, #8
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	2300      	movs	r3, #0
 800fe12:	9300      	str	r3, [sp, #0]
 800fe14:	2301      	movs	r3, #1
 800fe16:	002a      	movs	r2, r5
 800fe18:	0031      	movs	r1, r6
 800fe1a:	47a0      	blx	r4
    }

    // Check for repeater support
    if( rxConfig->RepeaterSupport == true )
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	7c5b      	ldrb	r3, [r3, #17]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d009      	beq.n	800fe38 <RegionAS923RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800fe24:	230f      	movs	r3, #15
 800fe26:	18fb      	adds	r3, r7, r3
 800fe28:	2200      	movs	r2, #0
 800fe2a:	569a      	ldrsb	r2, [r3, r2]
 800fe2c:	2316      	movs	r3, #22
 800fe2e:	18fb      	adds	r3, r7, r3
 800fe30:	4916      	ldr	r1, [pc, #88]	; (800fe8c <RegionAS923RxConfig+0x1d0>)
 800fe32:	5c8a      	ldrb	r2, [r1, r2]
 800fe34:	701a      	strb	r2, [r3, #0]
 800fe36:	e008      	b.n	800fe4a <RegionAS923RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800fe38:	230f      	movs	r3, #15
 800fe3a:	18fb      	adds	r3, r7, r3
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	569a      	ldrsb	r2, [r3, r2]
 800fe40:	2316      	movs	r3, #22
 800fe42:	18fb      	adds	r3, r7, r3
 800fe44:	4912      	ldr	r1, [pc, #72]	; (800fe90 <RegionAS923RxConfig+0x1d4>)
 800fe46:	5c8a      	ldrb	r2, [r1, r2]
 800fe48:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 800fe4a:	4b0b      	ldr	r3, [pc, #44]	; (800fe78 <RegionAS923RxConfig+0x1bc>)
 800fe4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe4e:	2216      	movs	r2, #22
 800fe50:	18ba      	adds	r2, r7, r2
 800fe52:	7812      	ldrb	r2, [r2, #0]
 800fe54:	320d      	adds	r2, #13
 800fe56:	b2d1      	uxtb	r1, r2
 800fe58:	2217      	movs	r2, #23
 800fe5a:	18ba      	adds	r2, r7, r2
 800fe5c:	7812      	ldrb	r2, [r2, #0]
 800fe5e:	0010      	movs	r0, r2
 800fe60:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	220f      	movs	r2, #15
 800fe66:	18ba      	adds	r2, r7, r2
 800fe68:	7812      	ldrb	r2, [r2, #0]
 800fe6a:	701a      	strb	r2, [r3, #0]
    return true;
 800fe6c:	2301      	movs	r3, #1
}
 800fe6e:	0018      	movs	r0, r3
 800fe70:	46bd      	mov	sp, r7
 800fe72:	b007      	add	sp, #28
 800fe74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe76:	46c0      	nop			; (mov r8, r8)
 800fe78:	08028964 	.word	0x08028964
 800fe7c:	20000a54 	.word	0x20000a54
 800fe80:	08027e20 	.word	0x08027e20
 800fe84:	0000c350 	.word	0x0000c350
 800fe88:	00014585 	.word	0x00014585
 800fe8c:	08027e50 	.word	0x08027e50
 800fe90:	08027e48 	.word	0x08027e48

0800fe94 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800fe94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe96:	b093      	sub	sp, #76	; 0x4c
 800fe98:	af0a      	add	r7, sp, #40	; 0x28
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	785b      	ldrb	r3, [r3, #1]
 800fea4:	b25b      	sxtb	r3, r3
 800fea6:	001a      	movs	r2, r3
 800fea8:	4b60      	ldr	r3, [pc, #384]	; (801002c <RegionAS923TxConfig+0x198>)
 800feaa:	5c9a      	ldrb	r2, [r3, r2]
 800feac:	231e      	movs	r3, #30
 800feae:	18fb      	adds	r3, r7, r3
 800feb0:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2002      	movs	r0, #2
 800feb6:	5618      	ldrsb	r0, [r3, r0]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	0019      	movs	r1, r3
 800febe:	4a5c      	ldr	r2, [pc, #368]	; (8010030 <RegionAS923TxConfig+0x19c>)
 800fec0:	000b      	movs	r3, r1
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	185b      	adds	r3, r3, r1
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	18d3      	adds	r3, r2, r3
 800feca:	3309      	adds	r3, #9
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	4a58      	ldr	r2, [pc, #352]	; (8010030 <RegionAS923TxConfig+0x19c>)
 800fed0:	330c      	adds	r3, #12
 800fed2:	011b      	lsls	r3, r3, #4
 800fed4:	18d3      	adds	r3, r2, r3
 800fed6:	3302      	adds	r3, #2
 800fed8:	2100      	movs	r1, #0
 800feda:	5659      	ldrsb	r1, [r3, r1]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2201      	movs	r2, #1
 800fee0:	569a      	ldrsb	r2, [r3, r2]
 800fee2:	251d      	movs	r5, #29
 800fee4:	197c      	adds	r4, r7, r5
 800fee6:	4b53      	ldr	r3, [pc, #332]	; (8010034 <RegionAS923TxConfig+0x1a0>)
 800fee8:	f7ff fae6 	bl	800f4b8 <LimitTxPower>
 800feec:	0003      	movs	r3, r0
 800feee:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	785b      	ldrb	r3, [r3, #1]
 800fef4:	b25b      	sxtb	r3, r3
 800fef6:	0018      	movs	r0, r3
 800fef8:	f7ff fac0 	bl	800f47c <GetBandwidth>
 800fefc:	0003      	movs	r3, r0
 800fefe:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 800ff00:	2017      	movs	r0, #23
 800ff02:	183b      	adds	r3, r7, r0
 800ff04:	2200      	movs	r2, #0
 800ff06:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	6859      	ldr	r1, [r3, #4]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	689a      	ldr	r2, [r3, #8]
 800ff10:	183c      	adds	r4, r7, r0
 800ff12:	197b      	adds	r3, r7, r5
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	b25b      	sxtb	r3, r3
 800ff18:	0018      	movs	r0, r3
 800ff1a:	f004 fde1 	bl	8014ae0 <RegionCommonComputeTxPower>
 800ff1e:	0003      	movs	r3, r0
 800ff20:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800ff22:	4b45      	ldr	r3, [pc, #276]	; (8010038 <RegionAS923TxConfig+0x1a4>)
 800ff24:	695a      	ldr	r2, [r3, #20]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	0018      	movs	r0, r3
 800ff2c:	4940      	ldr	r1, [pc, #256]	; (8010030 <RegionAS923TxConfig+0x19c>)
 800ff2e:	0003      	movs	r3, r0
 800ff30:	005b      	lsls	r3, r3, #1
 800ff32:	181b      	adds	r3, r3, r0
 800ff34:	009b      	lsls	r3, r3, #2
 800ff36:	585b      	ldr	r3, [r3, r1]
 800ff38:	0018      	movs	r0, r3
 800ff3a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	785b      	ldrb	r3, [r3, #1]
 800ff40:	b25b      	sxtb	r3, r3
 800ff42:	2b07      	cmp	r3, #7
 800ff44:	d12d      	bne.n	800ffa2 <RegionAS923TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 800ff46:	201f      	movs	r0, #31
 800ff48:	183b      	adds	r3, r7, r0
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 800ff4e:	4b3a      	ldr	r3, [pc, #232]	; (8010038 <RegionAS923TxConfig+0x1a4>)
 800ff50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ff52:	231e      	movs	r3, #30
 800ff54:	18fb      	adds	r3, r7, r3
 800ff56:	2200      	movs	r2, #0
 800ff58:	569a      	ldrsb	r2, [r3, r2]
 800ff5a:	0013      	movs	r3, r2
 800ff5c:	015b      	lsls	r3, r3, #5
 800ff5e:	1a9b      	subs	r3, r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	189b      	adds	r3, r3, r2
 800ff64:	00db      	lsls	r3, r3, #3
 800ff66:	001d      	movs	r5, r3
 800ff68:	69ba      	ldr	r2, [r7, #24]
 800ff6a:	4e34      	ldr	r6, [pc, #208]	; (801003c <RegionAS923TxConfig+0x1a8>)
 800ff6c:	2317      	movs	r3, #23
 800ff6e:	18fb      	adds	r3, r7, r3
 800ff70:	2100      	movs	r1, #0
 800ff72:	5659      	ldrsb	r1, [r3, r1]
 800ff74:	183b      	adds	r3, r7, r0
 800ff76:	7818      	ldrb	r0, [r3, #0]
 800ff78:	4b31      	ldr	r3, [pc, #196]	; (8010040 <RegionAS923TxConfig+0x1ac>)
 800ff7a:	9308      	str	r3, [sp, #32]
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	9307      	str	r3, [sp, #28]
 800ff80:	2300      	movs	r3, #0
 800ff82:	9306      	str	r3, [sp, #24]
 800ff84:	2300      	movs	r3, #0
 800ff86:	9305      	str	r3, [sp, #20]
 800ff88:	2301      	movs	r3, #1
 800ff8a:	9304      	str	r3, [sp, #16]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	9303      	str	r3, [sp, #12]
 800ff90:	2305      	movs	r3, #5
 800ff92:	9302      	str	r3, [sp, #8]
 800ff94:	2300      	movs	r3, #0
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	9500      	str	r5, [sp, #0]
 800ff9a:	0013      	movs	r3, r2
 800ff9c:	0032      	movs	r2, r6
 800ff9e:	47a0      	blx	r4
 800ffa0:	e024      	b.n	800ffec <RegionAS923TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 800ffa2:	201f      	movs	r0, #31
 800ffa4:	183b      	adds	r3, r7, r0
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 800ffaa:	4b23      	ldr	r3, [pc, #140]	; (8010038 <RegionAS923TxConfig+0x1a4>)
 800ffac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ffae:	231e      	movs	r3, #30
 800ffb0:	18fb      	adds	r3, r7, r3
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	b25b      	sxtb	r3, r3
 800ffb6:	69bd      	ldr	r5, [r7, #24]
 800ffb8:	2217      	movs	r2, #23
 800ffba:	18ba      	adds	r2, r7, r2
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	5651      	ldrsb	r1, [r2, r1]
 800ffc0:	183a      	adds	r2, r7, r0
 800ffc2:	7810      	ldrb	r0, [r2, #0]
 800ffc4:	4a1e      	ldr	r2, [pc, #120]	; (8010040 <RegionAS923TxConfig+0x1ac>)
 800ffc6:	9208      	str	r2, [sp, #32]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	9207      	str	r2, [sp, #28]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	9206      	str	r2, [sp, #24]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	9205      	str	r2, [sp, #20]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	9204      	str	r2, [sp, #16]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	9203      	str	r2, [sp, #12]
 800ffdc:	2208      	movs	r2, #8
 800ffde:	9202      	str	r2, [sp, #8]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	9201      	str	r2, [sp, #4]
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	002b      	movs	r3, r5
 800ffe8:	2200      	movs	r2, #0
 800ffea:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ffec:	4b12      	ldr	r3, [pc, #72]	; (8010038 <RegionAS923TxConfig+0x1a4>)
 800ffee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	8992      	ldrh	r2, [r2, #12]
 800fff4:	b2d1      	uxtb	r1, r2
 800fff6:	241f      	movs	r4, #31
 800fff8:	193a      	adds	r2, r7, r4
 800fffa:	7812      	ldrb	r2, [r2, #0]
 800fffc:	0010      	movs	r0, r2
 800fffe:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8010000:	4b0d      	ldr	r3, [pc, #52]	; (8010038 <RegionAS923TxConfig+0x1a4>)
 8010002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010004:	68fa      	ldr	r2, [r7, #12]
 8010006:	8992      	ldrh	r2, [r2, #12]
 8010008:	b2d1      	uxtb	r1, r2
 801000a:	193a      	adds	r2, r7, r4
 801000c:	7812      	ldrb	r2, [r2, #0]
 801000e:	0010      	movs	r0, r2
 8010010:	4798      	blx	r3
 8010012:	0002      	movs	r2, r0
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	221d      	movs	r2, #29
 801001c:	18ba      	adds	r2, r7, r2
 801001e:	7812      	ldrb	r2, [r2, #0]
 8010020:	701a      	strb	r2, [r3, #0]
    return true;
 8010022:	2301      	movs	r3, #1
}
 8010024:	0018      	movs	r0, r3
 8010026:	46bd      	mov	sp, r7
 8010028:	b009      	add	sp, #36	; 0x24
 801002a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801002c:	08027e20 	.word	0x08027e20
 8010030:	20000a54 	.word	0x20000a54
 8010034:	20000b24 	.word	0x20000b24
 8010038:	08028964 	.word	0x08028964
 801003c:	000061a8 	.word	0x000061a8
 8010040:	00000bb8 	.word	0x00000bb8

08010044 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010046:	b093      	sub	sp, #76	; 0x4c
 8010048:	af00      	add	r7, sp, #0
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	60b9      	str	r1, [r7, #8]
 801004e:	607a      	str	r2, [r7, #4]
 8010050:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8010052:	2347      	movs	r3, #71	; 0x47
 8010054:	18fb      	adds	r3, r7, r3
 8010056:	2207      	movs	r2, #7
 8010058:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801005a:	2344      	movs	r3, #68	; 0x44
 801005c:	18fb      	adds	r3, r7, r3
 801005e:	2200      	movs	r2, #0
 8010060:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8010062:	2346      	movs	r3, #70	; 0x46
 8010064:	18fb      	adds	r3, r7, r3
 8010066:	2200      	movs	r2, #0
 8010068:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 801006a:	233a      	movs	r3, #58	; 0x3a
 801006c:	18fb      	adds	r3, r7, r3
 801006e:	2200      	movs	r2, #0
 8010070:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010072:	e09e      	b.n	80101b2 <RegionAS923LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	685a      	ldr	r2, [r3, #4]
 8010078:	2346      	movs	r3, #70	; 0x46
 801007a:	18fb      	adds	r3, r7, r3
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	18d3      	adds	r3, r2, r3
 8010080:	2544      	movs	r5, #68	; 0x44
 8010082:	197c      	adds	r4, r7, r5
 8010084:	223c      	movs	r2, #60	; 0x3c
 8010086:	18ba      	adds	r2, r7, r2
 8010088:	0011      	movs	r1, r2
 801008a:	0018      	movs	r0, r3
 801008c:	f004 fb60 	bl	8014750 <RegionCommonParseLinkAdrReq>
 8010090:	0003      	movs	r3, r0
 8010092:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8010094:	197b      	adds	r3, r7, r5
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d100      	bne.n	801009e <RegionAS923LinkAdrReq+0x5a>
 801009c:	e092      	b.n	80101c4 <RegionAS923LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801009e:	2246      	movs	r2, #70	; 0x46
 80100a0:	18bb      	adds	r3, r7, r2
 80100a2:	18b9      	adds	r1, r7, r2
 80100a4:	2244      	movs	r2, #68	; 0x44
 80100a6:	18ba      	adds	r2, r7, r2
 80100a8:	7809      	ldrb	r1, [r1, #0]
 80100aa:	7812      	ldrb	r2, [r2, #0]
 80100ac:	188a      	adds	r2, r1, r2
 80100ae:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80100b0:	2347      	movs	r3, #71	; 0x47
 80100b2:	18fb      	adds	r3, r7, r3
 80100b4:	2207      	movs	r2, #7
 80100b6:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80100b8:	213c      	movs	r1, #60	; 0x3c
 80100ba:	187b      	adds	r3, r7, r1
 80100bc:	889a      	ldrh	r2, [r3, #4]
 80100be:	233a      	movs	r3, #58	; 0x3a
 80100c0:	18fb      	adds	r3, r7, r3
 80100c2:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80100c4:	187b      	adds	r3, r7, r1
 80100c6:	78db      	ldrb	r3, [r3, #3]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d10c      	bne.n	80100e6 <RegionAS923LinkAdrReq+0xa2>
 80100cc:	233a      	movs	r3, #58	; 0x3a
 80100ce:	18fb      	adds	r3, r7, r3
 80100d0:	881b      	ldrh	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d107      	bne.n	80100e6 <RegionAS923LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 80100d6:	2247      	movs	r2, #71	; 0x47
 80100d8:	18bb      	adds	r3, r7, r2
 80100da:	18ba      	adds	r2, r7, r2
 80100dc:	7812      	ldrb	r2, [r2, #0]
 80100de:	2101      	movs	r1, #1
 80100e0:	438a      	bics	r2, r1
 80100e2:	701a      	strb	r2, [r3, #0]
 80100e4:	e065      	b.n	80101b2 <RegionAS923LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80100e6:	233c      	movs	r3, #60	; 0x3c
 80100e8:	18fb      	adds	r3, r7, r3
 80100ea:	78db      	ldrb	r3, [r3, #3]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d004      	beq.n	80100fa <RegionAS923LinkAdrReq+0xb6>
 80100f0:	233c      	movs	r3, #60	; 0x3c
 80100f2:	18fb      	adds	r3, r7, r3
 80100f4:	78db      	ldrb	r3, [r3, #3]
 80100f6:	2b05      	cmp	r3, #5
 80100f8:	d904      	bls.n	8010104 <RegionAS923LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80100fa:	233c      	movs	r3, #60	; 0x3c
 80100fc:	18fb      	adds	r3, r7, r3
 80100fe:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8010100:	2b06      	cmp	r3, #6
 8010102:	d907      	bls.n	8010114 <RegionAS923LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8010104:	2247      	movs	r2, #71	; 0x47
 8010106:	18bb      	adds	r3, r7, r2
 8010108:	18ba      	adds	r2, r7, r2
 801010a:	7812      	ldrb	r2, [r2, #0]
 801010c:	2101      	movs	r1, #1
 801010e:	438a      	bics	r2, r1
 8010110:	701a      	strb	r2, [r3, #0]
 8010112:	e04e      	b.n	80101b2 <RegionAS923LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8010114:	2345      	movs	r3, #69	; 0x45
 8010116:	18fb      	adds	r3, r7, r3
 8010118:	2200      	movs	r2, #0
 801011a:	701a      	strb	r2, [r3, #0]
 801011c:	e044      	b.n	80101a8 <RegionAS923LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801011e:	233c      	movs	r3, #60	; 0x3c
 8010120:	18fb      	adds	r3, r7, r3
 8010122:	78db      	ldrb	r3, [r3, #3]
 8010124:	2b06      	cmp	r3, #6
 8010126:	d11b      	bne.n	8010160 <RegionAS923LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8010128:	2345      	movs	r3, #69	; 0x45
 801012a:	18fb      	adds	r3, r7, r3
 801012c:	781a      	ldrb	r2, [r3, #0]
 801012e:	496e      	ldr	r1, [pc, #440]	; (80102e8 <RegionAS923LinkAdrReq+0x2a4>)
 8010130:	0013      	movs	r3, r2
 8010132:	005b      	lsls	r3, r3, #1
 8010134:	189b      	adds	r3, r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	585b      	ldr	r3, [r3, r1]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d02e      	beq.n	801019c <RegionAS923LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 801013e:	2345      	movs	r3, #69	; 0x45
 8010140:	18fb      	adds	r3, r7, r3
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2201      	movs	r2, #1
 8010146:	409a      	lsls	r2, r3
 8010148:	0013      	movs	r3, r2
 801014a:	b21a      	sxth	r2, r3
 801014c:	213a      	movs	r1, #58	; 0x3a
 801014e:	187b      	adds	r3, r7, r1
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	b21b      	sxth	r3, r3
 8010154:	4313      	orrs	r3, r2
 8010156:	b21b      	sxth	r3, r3
 8010158:	b29a      	uxth	r2, r3
 801015a:	187b      	adds	r3, r7, r1
 801015c:	801a      	strh	r2, [r3, #0]
 801015e:	e01d      	b.n	801019c <RegionAS923LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010160:	233a      	movs	r3, #58	; 0x3a
 8010162:	18fb      	adds	r3, r7, r3
 8010164:	881b      	ldrh	r3, [r3, #0]
 8010166:	001a      	movs	r2, r3
 8010168:	2345      	movs	r3, #69	; 0x45
 801016a:	18fb      	adds	r3, r7, r3
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	411a      	asrs	r2, r3
 8010170:	0013      	movs	r3, r2
 8010172:	2201      	movs	r2, #1
 8010174:	4013      	ands	r3, r2
 8010176:	d011      	beq.n	801019c <RegionAS923LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8010178:	2345      	movs	r3, #69	; 0x45
 801017a:	18fb      	adds	r3, r7, r3
 801017c:	781a      	ldrb	r2, [r3, #0]
 801017e:	495a      	ldr	r1, [pc, #360]	; (80102e8 <RegionAS923LinkAdrReq+0x2a4>)
 8010180:	0013      	movs	r3, r2
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	189b      	adds	r3, r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801018a:	2b00      	cmp	r3, #0
 801018c:	d106      	bne.n	801019c <RegionAS923LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801018e:	2247      	movs	r2, #71	; 0x47
 8010190:	18bb      	adds	r3, r7, r2
 8010192:	18ba      	adds	r2, r7, r2
 8010194:	7812      	ldrb	r2, [r2, #0]
 8010196:	2101      	movs	r1, #1
 8010198:	438a      	bics	r2, r1
 801019a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 801019c:	2145      	movs	r1, #69	; 0x45
 801019e:	187b      	adds	r3, r7, r1
 80101a0:	781a      	ldrb	r2, [r3, #0]
 80101a2:	187b      	adds	r3, r7, r1
 80101a4:	3201      	adds	r2, #1
 80101a6:	701a      	strb	r2, [r3, #0]
 80101a8:	2345      	movs	r3, #69	; 0x45
 80101aa:	18fb      	adds	r3, r7, r3
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	2b0f      	cmp	r3, #15
 80101b0:	d9b5      	bls.n	801011e <RegionAS923LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	7a1b      	ldrb	r3, [r3, #8]
 80101b6:	2246      	movs	r2, #70	; 0x46
 80101b8:	18ba      	adds	r2, r7, r2
 80101ba:	7812      	ldrb	r2, [r2, #0]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d200      	bcs.n	80101c2 <RegionAS923LinkAdrReq+0x17e>
 80101c0:	e758      	b.n	8010074 <RegionAS923LinkAdrReq+0x30>
 80101c2:	e000      	b.n	80101c6 <RegionAS923LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 80101c4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80101c6:	2134      	movs	r1, #52	; 0x34
 80101c8:	187b      	adds	r3, r7, r1
 80101ca:	2201      	movs	r2, #1
 80101cc:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	7a5a      	ldrb	r2, [r3, #9]
 80101d2:	187b      	adds	r3, r7, r1
 80101d4:	709a      	strb	r2, [r3, #2]
    phyParam = RegionAS923GetPhyParam( &getPhy );
 80101d6:	187b      	adds	r3, r7, r1
 80101d8:	0018      	movs	r0, r3
 80101da:	f7ff faa3 	bl	800f724 <RegionAS923GetPhyParam>
 80101de:	0003      	movs	r3, r0
 80101e0:	001a      	movs	r2, r3
 80101e2:	2030      	movs	r0, #48	; 0x30
 80101e4:	183b      	adds	r3, r7, r0
 80101e6:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80101e8:	2110      	movs	r1, #16
 80101ea:	187b      	adds	r3, r7, r1
 80101ec:	2447      	movs	r4, #71	; 0x47
 80101ee:	193a      	adds	r2, r7, r4
 80101f0:	7812      	ldrb	r2, [r2, #0]
 80101f2:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	7a9a      	ldrb	r2, [r3, #10]
 80101f8:	187b      	adds	r3, r7, r1
 80101fa:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80101fc:	253c      	movs	r5, #60	; 0x3c
 80101fe:	197b      	adds	r3, r7, r5
 8010200:	2201      	movs	r2, #1
 8010202:	569a      	ldrsb	r2, [r3, r2]
 8010204:	187b      	adds	r3, r7, r1
 8010206:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8010208:	197b      	adds	r3, r7, r5
 801020a:	2202      	movs	r2, #2
 801020c:	569a      	ldrsb	r2, [r3, r2]
 801020e:	187b      	adds	r3, r7, r1
 8010210:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010212:	197b      	adds	r3, r7, r5
 8010214:	781a      	ldrb	r2, [r3, #0]
 8010216:	187b      	adds	r3, r7, r1
 8010218:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	220b      	movs	r2, #11
 801021e:	569a      	ldrsb	r2, [r3, r2]
 8010220:	187b      	adds	r3, r7, r1
 8010222:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	220c      	movs	r2, #12
 8010228:	569a      	ldrsb	r2, [r3, r2]
 801022a:	187b      	adds	r3, r7, r1
 801022c:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	7b5b      	ldrb	r3, [r3, #13]
 8010232:	b25a      	sxtb	r2, r3
 8010234:	187b      	adds	r3, r7, r1
 8010236:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8010238:	187b      	adds	r3, r7, r1
 801023a:	2210      	movs	r2, #16
 801023c:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801023e:	187b      	adds	r3, r7, r1
 8010240:	223a      	movs	r2, #58	; 0x3a
 8010242:	18ba      	adds	r2, r7, r2
 8010244:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8010246:	183b      	adds	r3, r7, r0
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	b25a      	sxtb	r2, r3
 801024c:	0008      	movs	r0, r1
 801024e:	183b      	adds	r3, r7, r0
 8010250:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8010252:	183b      	adds	r3, r7, r0
 8010254:	2207      	movs	r2, #7
 8010256:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8010258:	183b      	adds	r3, r7, r0
 801025a:	4a23      	ldr	r2, [pc, #140]	; (80102e8 <RegionAS923LinkAdrReq+0x2a4>)
 801025c:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 801025e:	183b      	adds	r3, r7, r0
 8010260:	2207      	movs	r2, #7
 8010262:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8010264:	183b      	adds	r3, r7, r0
 8010266:	2200      	movs	r2, #0
 8010268:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801026a:	183b      	adds	r3, r7, r0
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	6812      	ldr	r2, [r2, #0]
 8010270:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8010272:	0026      	movs	r6, r4
 8010274:	193c      	adds	r4, r7, r4
 8010276:	0029      	movs	r1, r5
 8010278:	187d      	adds	r5, r7, r1
 801027a:	187b      	adds	r3, r7, r1
 801027c:	1c9a      	adds	r2, r3, #2
 801027e:	187b      	adds	r3, r7, r1
 8010280:	1c59      	adds	r1, r3, #1
 8010282:	1838      	adds	r0, r7, r0
 8010284:	002b      	movs	r3, r5
 8010286:	f004 fab9 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 801028a:	0003      	movs	r3, r0
 801028c:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801028e:	0034      	movs	r4, r6
 8010290:	193b      	adds	r3, r7, r4
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	2b07      	cmp	r3, #7
 8010296:	d10b      	bne.n	80102b0 <RegionAS923LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8010298:	4b14      	ldr	r3, [pc, #80]	; (80102ec <RegionAS923LinkAdrReq+0x2a8>)
 801029a:	2202      	movs	r2, #2
 801029c:	2100      	movs	r1, #0
 801029e:	0018      	movs	r0, r3
 80102a0:	f00c fd58 	bl	801cd54 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80102a4:	233a      	movs	r3, #58	; 0x3a
 80102a6:	18fb      	adds	r3, r7, r3
 80102a8:	8819      	ldrh	r1, [r3, #0]
 80102aa:	4b0f      	ldr	r3, [pc, #60]	; (80102e8 <RegionAS923LinkAdrReq+0x2a4>)
 80102ac:	22d0      	movs	r2, #208	; 0xd0
 80102ae:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80102b0:	213c      	movs	r1, #60	; 0x3c
 80102b2:	187b      	adds	r3, r7, r1
 80102b4:	2201      	movs	r2, #1
 80102b6:	569a      	ldrsb	r2, [r3, r2]
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80102bc:	187b      	adds	r3, r7, r1
 80102be:	2202      	movs	r2, #2
 80102c0:	569a      	ldrsb	r2, [r3, r2]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80102c6:	187b      	adds	r3, r7, r1
 80102c8:	781a      	ldrb	r2, [r3, #0]
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80102ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102d0:	2246      	movs	r2, #70	; 0x46
 80102d2:	18ba      	adds	r2, r7, r2
 80102d4:	7812      	ldrb	r2, [r2, #0]
 80102d6:	701a      	strb	r2, [r3, #0]

    return status;
 80102d8:	2347      	movs	r3, #71	; 0x47
 80102da:	18fb      	adds	r3, r7, r3
 80102dc:	781b      	ldrb	r3, [r3, #0]
}
 80102de:	0018      	movs	r0, r3
 80102e0:	46bd      	mov	sp, r7
 80102e2:	b013      	add	sp, #76	; 0x4c
 80102e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102e6:	46c0      	nop			; (mov r8, r8)
 80102e8:	20000a54 	.word	0x20000a54
 80102ec:	20000b24 	.word	0x20000b24

080102f0 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80102f8:	230f      	movs	r3, #15
 80102fa:	18fb      	adds	r3, r7, r3
 80102fc:	2207      	movs	r2, #7
 80102fe:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	0018      	movs	r0, r3
 8010306:	f7ff f8ff 	bl	800f508 <VerifyRfFreq>
 801030a:	0003      	movs	r3, r0
 801030c:	001a      	movs	r2, r3
 801030e:	2301      	movs	r3, #1
 8010310:	4053      	eors	r3, r2
 8010312:	b2db      	uxtb	r3, r3
 8010314:	2b00      	cmp	r3, #0
 8010316:	d006      	beq.n	8010326 <RegionAS923RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8010318:	220f      	movs	r2, #15
 801031a:	18bb      	adds	r3, r7, r2
 801031c:	18ba      	adds	r2, r7, r2
 801031e:	7812      	ldrb	r2, [r2, #0]
 8010320:	2101      	movs	r1, #1
 8010322:	438a      	bics	r2, r1
 8010324:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	b25b      	sxtb	r3, r3
 801032c:	2207      	movs	r2, #7
 801032e:	2100      	movs	r1, #0
 8010330:	0018      	movs	r0, r3
 8010332:	f004 f825 	bl	8014380 <RegionCommonValueInRange>
 8010336:	1e03      	subs	r3, r0, #0
 8010338:	d106      	bne.n	8010348 <RegionAS923RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801033a:	220f      	movs	r2, #15
 801033c:	18bb      	adds	r3, r7, r2
 801033e:	18ba      	adds	r2, r7, r2
 8010340:	7812      	ldrb	r2, [r2, #0]
 8010342:	2102      	movs	r1, #2
 8010344:	438a      	bics	r2, r1
 8010346:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	785b      	ldrb	r3, [r3, #1]
 801034c:	b25b      	sxtb	r3, r3
 801034e:	2207      	movs	r2, #7
 8010350:	2100      	movs	r1, #0
 8010352:	0018      	movs	r0, r3
 8010354:	f004 f814 	bl	8014380 <RegionCommonValueInRange>
 8010358:	1e03      	subs	r3, r0, #0
 801035a:	d106      	bne.n	801036a <RegionAS923RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801035c:	220f      	movs	r2, #15
 801035e:	18bb      	adds	r3, r7, r2
 8010360:	18ba      	adds	r2, r7, r2
 8010362:	7812      	ldrb	r2, [r2, #0]
 8010364:	2104      	movs	r1, #4
 8010366:	438a      	bics	r2, r1
 8010368:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801036a:	230f      	movs	r3, #15
 801036c:	18fb      	adds	r3, r7, r3
 801036e:	781b      	ldrb	r3, [r3, #0]
}
 8010370:	0018      	movs	r0, r3
 8010372:	46bd      	mov	sp, r7
 8010374:	b004      	add	sp, #16
 8010376:	bd80      	pop	{r7, pc}

08010378 <RegionAS923NewChannelReq>:

uint8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b086      	sub	sp, #24
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8010380:	2317      	movs	r3, #23
 8010382:	18fb      	adds	r3, r7, r3
 8010384:	2203      	movs	r2, #3
 8010386:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d119      	bne.n	80103c6 <RegionAS923NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	791b      	ldrb	r3, [r3, #4]
 8010396:	b25b      	sxtb	r3, r3
 8010398:	b2da      	uxtb	r2, r3
 801039a:	2108      	movs	r1, #8
 801039c:	187b      	adds	r3, r7, r1
 801039e:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 80103a0:	187b      	adds	r3, r7, r1
 80103a2:	0018      	movs	r0, r3
 80103a4:	f000 fa74 	bl	8010890 <RegionAS923ChannelsRemove>
 80103a8:	0003      	movs	r3, r0
 80103aa:	001a      	movs	r2, r3
 80103ac:	2301      	movs	r3, #1
 80103ae:	4053      	eors	r3, r2
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d043      	beq.n	801043e <RegionAS923NewChannelReq+0xc6>
        {
            status &= 0xFC;
 80103b6:	2217      	movs	r2, #23
 80103b8:	18bb      	adds	r3, r7, r2
 80103ba:	18ba      	adds	r2, r7, r2
 80103bc:	7812      	ldrb	r2, [r2, #0]
 80103be:	2103      	movs	r1, #3
 80103c0:	438a      	bics	r2, r1
 80103c2:	701a      	strb	r2, [r3, #0]
 80103c4:	e03b      	b.n	801043e <RegionAS923NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	210c      	movs	r1, #12
 80103cc:	187b      	adds	r3, r7, r1
 80103ce:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	791b      	ldrb	r3, [r3, #4]
 80103d4:	b25b      	sxtb	r3, r3
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	187b      	adds	r3, r7, r1
 80103da:	711a      	strb	r2, [r3, #4]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 80103dc:	187b      	adds	r3, r7, r1
 80103de:	0018      	movs	r0, r3
 80103e0:	f000 f99c 	bl	801071c <RegionAS923ChannelAdd>
 80103e4:	0003      	movs	r3, r0
 80103e6:	2b04      	cmp	r3, #4
 80103e8:	d008      	beq.n	80103fc <RegionAS923NewChannelReq+0x84>
 80103ea:	dc02      	bgt.n	80103f2 <RegionAS923NewChannelReq+0x7a>
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d025      	beq.n	801043c <RegionAS923NewChannelReq+0xc4>
 80103f0:	e01c      	b.n	801042c <RegionAS923NewChannelReq+0xb4>
 80103f2:	2b05      	cmp	r3, #5
 80103f4:	d00a      	beq.n	801040c <RegionAS923NewChannelReq+0x94>
 80103f6:	2b06      	cmp	r3, #6
 80103f8:	d010      	beq.n	801041c <RegionAS923NewChannelReq+0xa4>
 80103fa:	e017      	b.n	801042c <RegionAS923NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80103fc:	2217      	movs	r2, #23
 80103fe:	18bb      	adds	r3, r7, r2
 8010400:	18ba      	adds	r2, r7, r2
 8010402:	7812      	ldrb	r2, [r2, #0]
 8010404:	2101      	movs	r1, #1
 8010406:	438a      	bics	r2, r1
 8010408:	701a      	strb	r2, [r3, #0]
                break;
 801040a:	e018      	b.n	801043e <RegionAS923NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801040c:	2217      	movs	r2, #23
 801040e:	18bb      	adds	r3, r7, r2
 8010410:	18ba      	adds	r2, r7, r2
 8010412:	7812      	ldrb	r2, [r2, #0]
 8010414:	2102      	movs	r1, #2
 8010416:	438a      	bics	r2, r1
 8010418:	701a      	strb	r2, [r3, #0]
                break;
 801041a:	e010      	b.n	801043e <RegionAS923NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801041c:	2217      	movs	r2, #23
 801041e:	18bb      	adds	r3, r7, r2
 8010420:	18ba      	adds	r2, r7, r2
 8010422:	7812      	ldrb	r2, [r2, #0]
 8010424:	2103      	movs	r1, #3
 8010426:	438a      	bics	r2, r1
 8010428:	701a      	strb	r2, [r3, #0]
                break;
 801042a:	e008      	b.n	801043e <RegionAS923NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 801042c:	2217      	movs	r2, #23
 801042e:	18bb      	adds	r3, r7, r2
 8010430:	18ba      	adds	r2, r7, r2
 8010432:	7812      	ldrb	r2, [r2, #0]
 8010434:	2103      	movs	r1, #3
 8010436:	438a      	bics	r2, r1
 8010438:	701a      	strb	r2, [r3, #0]
                break;
 801043a:	e000      	b.n	801043e <RegionAS923NewChannelReq+0xc6>
                break;
 801043c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801043e:	2317      	movs	r3, #23
 8010440:	18fb      	adds	r3, r7, r3
 8010442:	781b      	ldrb	r3, [r3, #0]
}
 8010444:	0018      	movs	r0, r3
 8010446:	46bd      	mov	sp, r7
 8010448:	b006      	add	sp, #24
 801044a:	bd80      	pop	{r7, pc}

0801044c <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8010454:	2300      	movs	r3, #0
}
 8010456:	0018      	movs	r0, r3
 8010458:	46bd      	mov	sp, r7
 801045a:	b002      	add	sp, #8
 801045c:	bd80      	pop	{r7, pc}
	...

08010460 <RegionAS923DlChannelReq>:

uint8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8010468:	230f      	movs	r3, #15
 801046a:	18fb      	adds	r3, r7, r3
 801046c:	2203      	movs	r2, #3
 801046e:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	0018      	movs	r0, r3
 8010476:	f7ff f847 	bl	800f508 <VerifyRfFreq>
 801047a:	0003      	movs	r3, r0
 801047c:	001a      	movs	r2, r3
 801047e:	2301      	movs	r3, #1
 8010480:	4053      	eors	r3, r2
 8010482:	b2db      	uxtb	r3, r3
 8010484:	2b00      	cmp	r3, #0
 8010486:	d006      	beq.n	8010496 <RegionAS923DlChannelReq+0x36>
    {
        status &= 0xFE;
 8010488:	220f      	movs	r2, #15
 801048a:	18bb      	adds	r3, r7, r2
 801048c:	18ba      	adds	r2, r7, r2
 801048e:	7812      	ldrb	r2, [r2, #0]
 8010490:	2101      	movs	r1, #1
 8010492:	438a      	bics	r2, r1
 8010494:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	0019      	movs	r1, r3
 801049c:	4a13      	ldr	r2, [pc, #76]	; (80104ec <RegionAS923DlChannelReq+0x8c>)
 801049e:	000b      	movs	r3, r1
 80104a0:	005b      	lsls	r3, r3, #1
 80104a2:	185b      	adds	r3, r3, r1
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	589b      	ldr	r3, [r3, r2]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d106      	bne.n	80104ba <RegionAS923DlChannelReq+0x5a>
    {
        status &= 0xFD;
 80104ac:	220f      	movs	r2, #15
 80104ae:	18bb      	adds	r3, r7, r2
 80104b0:	18ba      	adds	r2, r7, r2
 80104b2:	7812      	ldrb	r2, [r2, #0]
 80104b4:	2102      	movs	r1, #2
 80104b6:	438a      	bics	r2, r1
 80104b8:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80104ba:	230f      	movs	r3, #15
 80104bc:	18fb      	adds	r3, r7, r3
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	2b03      	cmp	r3, #3
 80104c2:	d10c      	bne.n	80104de <RegionAS923DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	0018      	movs	r0, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	685a      	ldr	r2, [r3, #4]
 80104ce:	4907      	ldr	r1, [pc, #28]	; (80104ec <RegionAS923DlChannelReq+0x8c>)
 80104d0:	0003      	movs	r3, r0
 80104d2:	005b      	lsls	r3, r3, #1
 80104d4:	181b      	adds	r3, r3, r0
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	18cb      	adds	r3, r1, r3
 80104da:	3304      	adds	r3, #4
 80104dc:	601a      	str	r2, [r3, #0]
    }

    return status;
 80104de:	230f      	movs	r3, #15
 80104e0:	18fb      	adds	r3, r7, r3
 80104e2:	781b      	ldrb	r3, [r3, #0]
}
 80104e4:	0018      	movs	r0, r3
 80104e6:	46bd      	mov	sp, r7
 80104e8:	b004      	add	sp, #16
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	20000a54 	.word	0x20000a54

080104f0 <RegionAS923CalcBackOff>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
}

void RegionAS923CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b088      	sub	sp, #32
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 80104f8:	210c      	movs	r1, #12
 80104fa:	187b      	adds	r3, r7, r1
 80104fc:	4a12      	ldr	r2, [pc, #72]	; (8010548 <RegionAS923CalcBackOff+0x58>)
 80104fe:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8010500:	187b      	adds	r3, r7, r1
 8010502:	4a12      	ldr	r2, [pc, #72]	; (801054c <RegionAS923CalcBackOff+0x5c>)
 8010504:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	785a      	ldrb	r2, [r3, #1]
 801050a:	187b      	adds	r3, r7, r1
 801050c:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	781a      	ldrb	r2, [r3, #0]
 8010512:	187b      	adds	r3, r7, r1
 8010514:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	789a      	ldrb	r2, [r3, #2]
 801051a:	187b      	adds	r3, r7, r1
 801051c:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	78da      	ldrb	r2, [r3, #3]
 8010522:	187b      	adds	r3, r7, r1
 8010524:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	685a      	ldr	r2, [r3, #4]
 801052a:	187b      	adds	r3, r7, r1
 801052c:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	689a      	ldr	r2, [r3, #8]
 8010532:	187b      	adds	r3, r7, r1
 8010534:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8010536:	187b      	adds	r3, r7, r1
 8010538:	0018      	movs	r0, r3
 801053a:	f004 fb09 	bl	8014b50 <RegionCommonCalcBackOff>
}
 801053e:	46c0      	nop			; (mov r8, r8)
 8010540:	46bd      	mov	sp, r7
 8010542:	b008      	add	sp, #32
 8010544:	bd80      	pop	{r7, pc}
 8010546:	46c0      	nop			; (mov r8, r8)
 8010548:	20000a54 	.word	0x20000a54
 801054c:	20000b14 	.word	0x20000b14

08010550 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010550:	b5b0      	push	{r4, r5, r7, lr}
 8010552:	b090      	sub	sp, #64	; 0x40
 8010554:	af04      	add	r7, sp, #16
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
 801055c:	603b      	str	r3, [r7, #0]
    uint8_t channelNext = 0;
 801055e:	2325      	movs	r3, #37	; 0x25
 8010560:	18fb      	adds	r3, r7, r3
 8010562:	2200      	movs	r2, #0
 8010564:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8010566:	232f      	movs	r3, #47	; 0x2f
 8010568:	18fb      	adds	r3, r7, r3
 801056a:	2200      	movs	r2, #0
 801056c:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801056e:	2324      	movs	r3, #36	; 0x24
 8010570:	18fb      	adds	r3, r7, r3
 8010572:	2200      	movs	r2, #0
 8010574:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8010576:	2314      	movs	r3, #20
 8010578:	18fb      	adds	r3, r7, r3
 801057a:	0018      	movs	r0, r3
 801057c:	2310      	movs	r3, #16
 801057e:	001a      	movs	r2, r3
 8010580:	2100      	movs	r1, #0
 8010582:	f015 fcd5 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 8010586:	2300      	movs	r3, #0
 8010588:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801058a:	4b60      	ldr	r3, [pc, #384]	; (801070c <RegionAS923NextChannel+0x1bc>)
 801058c:	2201      	movs	r2, #1
 801058e:	2100      	movs	r1, #0
 8010590:	0018      	movs	r0, r3
 8010592:	f003 ff5d 	bl	8014450 <RegionCommonCountChannels>
 8010596:	1e03      	subs	r3, r0, #0
 8010598:	d108      	bne.n	80105ac <RegionAS923NextChannel+0x5c>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801059a:	4b5d      	ldr	r3, [pc, #372]	; (8010710 <RegionAS923NextChannel+0x1c0>)
 801059c:	22d0      	movs	r2, #208	; 0xd0
 801059e:	5a9b      	ldrh	r3, [r3, r2]
 80105a0:	2203      	movs	r2, #3
 80105a2:	4313      	orrs	r3, r2
 80105a4:	b299      	uxth	r1, r3
 80105a6:	4b5a      	ldr	r3, [pc, #360]	; (8010710 <RegionAS923NextChannel+0x1c0>)
 80105a8:	22d0      	movs	r2, #208	; 0xd0
 80105aa:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681c      	ldr	r4, [r3, #0]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	0018      	movs	r0, r3
 80105b6:	f00c fb52 	bl	801cc5e <TimerGetElapsedTime>
 80105ba:	0003      	movs	r3, r0
 80105bc:	429c      	cmp	r4, r3
 80105be:	d824      	bhi.n	801060a <RegionAS923NextChannel+0xba>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	2200      	movs	r2, #0
 80105c4:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AS923_MAX_NB_BANDS );
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	7a58      	ldrb	r0, [r3, #9]
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	7a99      	ldrb	r1, [r3, #10]
 80105ce:	4a51      	ldr	r2, [pc, #324]	; (8010714 <RegionAS923NextChannel+0x1c4>)
 80105d0:	2301      	movs	r3, #1
 80105d2:	f003 ffc8 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 80105d6:	0003      	movs	r3, r0
 80105d8:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	7a58      	ldrb	r0, [r3, #9]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	7a1b      	ldrb	r3, [r3, #8]
 80105e2:	b25b      	sxtb	r3, r3
 80105e4:	b2d9      	uxtb	r1, r3
 80105e6:	232f      	movs	r3, #47	; 0x2f
 80105e8:	18fc      	adds	r4, r7, r3
 80105ea:	4d49      	ldr	r5, [pc, #292]	; (8010710 <RegionAS923NextChannel+0x1c0>)
 80105ec:	4a47      	ldr	r2, [pc, #284]	; (801070c <RegionAS923NextChannel+0x1bc>)
 80105ee:	2324      	movs	r3, #36	; 0x24
 80105f0:	18fb      	adds	r3, r7, r3
 80105f2:	9302      	str	r3, [sp, #8]
 80105f4:	2314      	movs	r3, #20
 80105f6:	18fb      	adds	r3, r7, r3
 80105f8:	9301      	str	r3, [sp, #4]
 80105fa:	4b46      	ldr	r3, [pc, #280]	; (8010714 <RegionAS923NextChannel+0x1c4>)
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	002b      	movs	r3, r5
 8010600:	f7fe ffaa 	bl	800f558 <CountNbOfEnabledChannels>
 8010604:	0003      	movs	r3, r0
 8010606:	7023      	strb	r3, [r4, #0]
 8010608:	e010      	b.n	801062c <RegionAS923NextChannel+0xdc>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 801060a:	2124      	movs	r1, #36	; 0x24
 801060c:	187b      	adds	r3, r7, r1
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	3301      	adds	r3, #1
 8010612:	b2da      	uxtb	r2, r3
 8010614:	187b      	adds	r3, r7, r1
 8010616:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681c      	ldr	r4, [r3, #0]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	0018      	movs	r0, r3
 8010622:	f00c fb1c 	bl	801cc5e <TimerGetElapsedTime>
 8010626:	0003      	movs	r3, r0
 8010628:	1ae3      	subs	r3, r4, r3
 801062a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 801062c:	232f      	movs	r3, #47	; 0x2f
 801062e:	18fb      	adds	r3, r7, r3
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d04f      	beq.n	80106d6 <RegionAS923NextChannel+0x186>
    {
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 8010636:	2327      	movs	r3, #39	; 0x27
 8010638:	18fb      	adds	r3, r7, r3
 801063a:	2200      	movs	r2, #0
 801063c:	701a      	strb	r2, [r3, #0]
 801063e:	232f      	movs	r3, #47	; 0x2f
 8010640:	18fb      	adds	r3, r7, r3
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	3b01      	subs	r3, #1
 8010646:	0019      	movs	r1, r3
 8010648:	2000      	movs	r0, #0
 801064a:	f00c fb31 	bl	801ccb0 <randr>
 801064e:	0002      	movs	r2, r0
 8010650:	2326      	movs	r3, #38	; 0x26
 8010652:	18fb      	adds	r3, r7, r3
 8010654:	701a      	strb	r2, [r3, #0]
 8010656:	e037      	b.n	80106c8 <RegionAS923NextChannel+0x178>
        {
            channelNext = enabledChannels[j];
 8010658:	2426      	movs	r4, #38	; 0x26
 801065a:	193b      	adds	r3, r7, r4
 801065c:	781a      	ldrb	r2, [r3, #0]
 801065e:	2525      	movs	r5, #37	; 0x25
 8010660:	197b      	adds	r3, r7, r5
 8010662:	2114      	movs	r1, #20
 8010664:	1879      	adds	r1, r7, r1
 8010666:	5c8a      	ldrb	r2, [r1, r2]
 8010668:	701a      	strb	r2, [r3, #0]
            j = ( j + 1 ) % nbEnabledChannels;
 801066a:	193b      	adds	r3, r7, r4
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	1c5a      	adds	r2, r3, #1
 8010670:	232f      	movs	r3, #47	; 0x2f
 8010672:	18fb      	adds	r3, r7, r3
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	0019      	movs	r1, r3
 8010678:	0010      	movs	r0, r2
 801067a:	f7ef febd 	bl	80003f8 <__aeabi_idivmod>
 801067e:	000b      	movs	r3, r1
 8010680:	001a      	movs	r2, r3
 8010682:	193b      	adds	r3, r7, r4
 8010684:	701a      	strb	r2, [r3, #0]

            // Perform carrier sense for AS923_CARRIER_SENSE_TIME
            // If the channel is free, we can stop the LBT mechanism
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 8010686:	4b24      	ldr	r3, [pc, #144]	; (8010718 <RegionAS923NextChannel+0x1c8>)
 8010688:	699c      	ldr	r4, [r3, #24]
 801068a:	197b      	adds	r3, r7, r5
 801068c:	781a      	ldrb	r2, [r3, #0]
 801068e:	4920      	ldr	r1, [pc, #128]	; (8010710 <RegionAS923NextChannel+0x1c0>)
 8010690:	0013      	movs	r3, r2
 8010692:	005b      	lsls	r3, r3, #1
 8010694:	189b      	adds	r3, r3, r2
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	5859      	ldr	r1, [r3, r1]
 801069a:	2355      	movs	r3, #85	; 0x55
 801069c:	425a      	negs	r2, r3
 801069e:	2306      	movs	r3, #6
 80106a0:	2001      	movs	r0, #1
 80106a2:	47a0      	blx	r4
 80106a4:	1e03      	subs	r3, r0, #0
 80106a6:	d009      	beq.n	80106bc <RegionAS923NextChannel+0x16c>
            {
                // Free channel found
                *channel = channelNext;
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	2225      	movs	r2, #37	; 0x25
 80106ac:	18ba      	adds	r2, r7, r2
 80106ae:	7812      	ldrb	r2, [r2, #0]
 80106b0:	701a      	strb	r2, [r3, #0]
                *time = 0;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2200      	movs	r2, #0
 80106b6:	601a      	str	r2, [r3, #0]
                return LORAMAC_STATUS_OK;
 80106b8:	2300      	movs	r3, #0
 80106ba:	e023      	b.n	8010704 <RegionAS923NextChannel+0x1b4>
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 80106bc:	2127      	movs	r1, #39	; 0x27
 80106be:	187b      	adds	r3, r7, r1
 80106c0:	781a      	ldrb	r2, [r3, #0]
 80106c2:	187b      	adds	r3, r7, r1
 80106c4:	3201      	adds	r2, #1
 80106c6:	701a      	strb	r2, [r3, #0]
 80106c8:	2327      	movs	r3, #39	; 0x27
 80106ca:	18fb      	adds	r3, r7, r3
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	2b0f      	cmp	r3, #15
 80106d0:	d9c2      	bls.n	8010658 <RegionAS923NextChannel+0x108>
            }
        }
        return LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 80106d2:	230d      	movs	r3, #13
 80106d4:	e016      	b.n	8010704 <RegionAS923NextChannel+0x1b4>
    }
    else
    {
        if( delayTx > 0 )
 80106d6:	2324      	movs	r3, #36	; 0x24
 80106d8:	18fb      	adds	r3, r7, r3
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d004      	beq.n	80106ea <RegionAS923NextChannel+0x19a>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106e4:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80106e6:	230b      	movs	r3, #11
 80106e8:	e00c      	b.n	8010704 <RegionAS923NextChannel+0x1b4>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 80106ea:	4b09      	ldr	r3, [pc, #36]	; (8010710 <RegionAS923NextChannel+0x1c0>)
 80106ec:	22d0      	movs	r2, #208	; 0xd0
 80106ee:	5a9b      	ldrh	r3, [r3, r2]
 80106f0:	2203      	movs	r2, #3
 80106f2:	4313      	orrs	r3, r2
 80106f4:	b299      	uxth	r1, r3
 80106f6:	4b06      	ldr	r3, [pc, #24]	; (8010710 <RegionAS923NextChannel+0x1c0>)
 80106f8:	22d0      	movs	r2, #208	; 0xd0
 80106fa:	5299      	strh	r1, [r3, r2]
        *time = 0;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8010702:	230c      	movs	r3, #12
    }
}
 8010704:	0018      	movs	r0, r3
 8010706:	46bd      	mov	sp, r7
 8010708:	b00c      	add	sp, #48	; 0x30
 801070a:	bdb0      	pop	{r4, r5, r7, pc}
 801070c:	20000b24 	.word	0x20000b24
 8010710:	20000a54 	.word	0x20000a54
 8010714:	20000b14 	.word	0x20000b14
 8010718:	08028964 	.word	0x08028964

0801071c <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801071c:	b590      	push	{r4, r7, lr}
 801071e:	b085      	sub	sp, #20
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8010724:	230f      	movs	r3, #15
 8010726:	18fb      	adds	r3, r7, r3
 8010728:	2200      	movs	r2, #0
 801072a:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 801072c:	230e      	movs	r3, #14
 801072e:	18fb      	adds	r3, r7, r3
 8010730:	2200      	movs	r2, #0
 8010732:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8010734:	210d      	movs	r1, #13
 8010736:	187b      	adds	r3, r7, r1
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	7912      	ldrb	r2, [r2, #4]
 801073c:	701a      	strb	r2, [r3, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 801073e:	187b      	adds	r3, r7, r1
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	2b01      	cmp	r3, #1
 8010744:	d801      	bhi.n	801074a <RegionAS923ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8010746:	2306      	movs	r3, #6
 8010748:	e09c      	b.n	8010884 <RegionAS923ChannelAdd+0x168>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 801074a:	230d      	movs	r3, #13
 801074c:	18fb      	adds	r3, r7, r3
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	2b0f      	cmp	r3, #15
 8010752:	d901      	bls.n	8010758 <RegionAS923ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010754:	2303      	movs	r3, #3
 8010756:	e095      	b.n	8010884 <RegionAS923ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	7a1b      	ldrb	r3, [r3, #8]
 801075e:	011b      	lsls	r3, r3, #4
 8010760:	b25b      	sxtb	r3, r3
 8010762:	111b      	asrs	r3, r3, #4
 8010764:	b25b      	sxtb	r3, r3
 8010766:	2207      	movs	r2, #7
 8010768:	2100      	movs	r1, #0
 801076a:	0018      	movs	r0, r3
 801076c:	f003 fe08 	bl	8014380 <RegionCommonValueInRange>
 8010770:	1e03      	subs	r3, r0, #0
 8010772:	d103      	bne.n	801077c <RegionAS923ChannelAdd+0x60>
    {
        drInvalid = true;
 8010774:	230f      	movs	r3, #15
 8010776:	18fb      	adds	r3, r7, r3
 8010778:	2201      	movs	r2, #1
 801077a:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	7a1b      	ldrb	r3, [r3, #8]
 8010782:	b25b      	sxtb	r3, r3
 8010784:	111b      	asrs	r3, r3, #4
 8010786:	b25b      	sxtb	r3, r3
 8010788:	2207      	movs	r2, #7
 801078a:	2100      	movs	r1, #0
 801078c:	0018      	movs	r0, r3
 801078e:	f003 fdf7 	bl	8014380 <RegionCommonValueInRange>
 8010792:	1e03      	subs	r3, r0, #0
 8010794:	d103      	bne.n	801079e <RegionAS923ChannelAdd+0x82>
    {
        drInvalid = true;
 8010796:	230f      	movs	r3, #15
 8010798:	18fb      	adds	r3, r7, r3
 801079a:	2201      	movs	r2, #1
 801079c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	7a1b      	ldrb	r3, [r3, #8]
 80107a4:	011b      	lsls	r3, r3, #4
 80107a6:	b25b      	sxtb	r3, r3
 80107a8:	111b      	asrs	r3, r3, #4
 80107aa:	b25a      	sxtb	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	7a1b      	ldrb	r3, [r3, #8]
 80107b2:	b25b      	sxtb	r3, r3
 80107b4:	111b      	asrs	r3, r3, #4
 80107b6:	b25b      	sxtb	r3, r3
 80107b8:	429a      	cmp	r2, r3
 80107ba:	dd03      	ble.n	80107c4 <RegionAS923ChannelAdd+0xa8>
    {
        drInvalid = true;
 80107bc:	230f      	movs	r3, #15
 80107be:	18fb      	adds	r3, r7, r3
 80107c0:	2201      	movs	r2, #1
 80107c2:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 80107c4:	230e      	movs	r3, #14
 80107c6:	18fb      	adds	r3, r7, r3
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	2201      	movs	r2, #1
 80107cc:	4053      	eors	r3, r2
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d010      	beq.n	80107f6 <RegionAS923ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	0018      	movs	r0, r3
 80107dc:	f7fe fe94 	bl	800f508 <VerifyRfFreq>
 80107e0:	0003      	movs	r3, r0
 80107e2:	001a      	movs	r2, r3
 80107e4:	2301      	movs	r3, #1
 80107e6:	4053      	eors	r3, r2
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d003      	beq.n	80107f6 <RegionAS923ChannelAdd+0xda>
        {
            freqInvalid = true;
 80107ee:	230e      	movs	r3, #14
 80107f0:	18fb      	adds	r3, r7, r3
 80107f2:	2201      	movs	r2, #1
 80107f4:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80107f6:	230f      	movs	r3, #15
 80107f8:	18fb      	adds	r3, r7, r3
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d006      	beq.n	801080e <RegionAS923ChannelAdd+0xf2>
 8010800:	230e      	movs	r3, #14
 8010802:	18fb      	adds	r3, r7, r3
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d001      	beq.n	801080e <RegionAS923ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801080a:	2306      	movs	r3, #6
 801080c:	e03a      	b.n	8010884 <RegionAS923ChannelAdd+0x168>
    }
    if( drInvalid == true )
 801080e:	230f      	movs	r3, #15
 8010810:	18fb      	adds	r3, r7, r3
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <RegionAS923ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8010818:	2305      	movs	r3, #5
 801081a:	e033      	b.n	8010884 <RegionAS923ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 801081c:	230e      	movs	r3, #14
 801081e:	18fb      	adds	r3, r7, r3
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d001      	beq.n	801082a <RegionAS923ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8010826:	2304      	movs	r3, #4
 8010828:	e02c      	b.n	8010884 <RegionAS923ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 801082a:	200d      	movs	r0, #13
 801082c:	0004      	movs	r4, r0
 801082e:	183b      	adds	r3, r7, r0
 8010830:	781a      	ldrb	r2, [r3, #0]
 8010832:	0013      	movs	r3, r2
 8010834:	005b      	lsls	r3, r3, #1
 8010836:	189b      	adds	r3, r3, r2
 8010838:	009b      	lsls	r3, r3, #2
 801083a:	4a14      	ldr	r2, [pc, #80]	; (801088c <RegionAS923ChannelAdd+0x170>)
 801083c:	1898      	adds	r0, r3, r2
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	220c      	movs	r2, #12
 8010844:	0019      	movs	r1, r3
 8010846:	f00c fa49 	bl	801ccdc <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 801084a:	0020      	movs	r0, r4
 801084c:	183b      	adds	r3, r7, r0
 801084e:	781a      	ldrb	r2, [r3, #0]
 8010850:	490e      	ldr	r1, [pc, #56]	; (801088c <RegionAS923ChannelAdd+0x170>)
 8010852:	0013      	movs	r3, r2
 8010854:	005b      	lsls	r3, r3, #1
 8010856:	189b      	adds	r3, r3, r2
 8010858:	009b      	lsls	r3, r3, #2
 801085a:	18cb      	adds	r3, r1, r3
 801085c:	3309      	adds	r3, #9
 801085e:	2200      	movs	r2, #0
 8010860:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8010862:	4b0a      	ldr	r3, [pc, #40]	; (801088c <RegionAS923ChannelAdd+0x170>)
 8010864:	22d0      	movs	r2, #208	; 0xd0
 8010866:	5a9b      	ldrh	r3, [r3, r2]
 8010868:	b21a      	sxth	r2, r3
 801086a:	183b      	adds	r3, r7, r0
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	2101      	movs	r1, #1
 8010870:	4099      	lsls	r1, r3
 8010872:	000b      	movs	r3, r1
 8010874:	b21b      	sxth	r3, r3
 8010876:	4313      	orrs	r3, r2
 8010878:	b21b      	sxth	r3, r3
 801087a:	b299      	uxth	r1, r3
 801087c:	4b03      	ldr	r3, [pc, #12]	; (801088c <RegionAS923ChannelAdd+0x170>)
 801087e:	22d0      	movs	r2, #208	; 0xd0
 8010880:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	0018      	movs	r0, r3
 8010886:	46bd      	mov	sp, r7
 8010888:	b005      	add	sp, #20
 801088a:	bd90      	pop	{r4, r7, pc}
 801088c:	20000a54 	.word	0x20000a54

08010890 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8010890:	b590      	push	{r4, r7, lr}
 8010892:	b085      	sub	sp, #20
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8010898:	210f      	movs	r1, #15
 801089a:	187b      	adds	r3, r7, r1
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	7812      	ldrb	r2, [r2, #0]
 80108a0:	701a      	strb	r2, [r3, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80108a2:	187b      	adds	r3, r7, r1
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d801      	bhi.n	80108ae <RegionAS923ChannelsRemove+0x1e>
    {
        return false;
 80108aa:	2300      	movs	r3, #0
 80108ac:	e015      	b.n	80108da <RegionAS923ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80108ae:	240f      	movs	r4, #15
 80108b0:	193b      	adds	r3, r7, r4
 80108b2:	781a      	ldrb	r2, [r3, #0]
 80108b4:	490b      	ldr	r1, [pc, #44]	; (80108e4 <RegionAS923ChannelsRemove+0x54>)
 80108b6:	0013      	movs	r3, r2
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	189b      	adds	r3, r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	18cb      	adds	r3, r1, r3
 80108c0:	220c      	movs	r2, #12
 80108c2:	2100      	movs	r1, #0
 80108c4:	0018      	movs	r0, r3
 80108c6:	f015 fb33 	bl	8025f30 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 80108ca:	193b      	adds	r3, r7, r4
 80108cc:	7819      	ldrb	r1, [r3, #0]
 80108ce:	4b06      	ldr	r3, [pc, #24]	; (80108e8 <RegionAS923ChannelsRemove+0x58>)
 80108d0:	2210      	movs	r2, #16
 80108d2:	0018      	movs	r0, r3
 80108d4:	f003 fd7a 	bl	80143cc <RegionCommonChanDisable>
 80108d8:	0003      	movs	r3, r0
}
 80108da:	0018      	movs	r0, r3
 80108dc:	46bd      	mov	sp, r7
 80108de:	b005      	add	sp, #20
 80108e0:	bd90      	pop	{r4, r7, pc}
 80108e2:	46c0      	nop			; (mov r8, r8)
 80108e4:	20000a54 	.word	0x20000a54
 80108e8:	20000b24 	.word	0x20000b24

080108ec <RegionAS923ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80108ec:	b590      	push	{r4, r7, lr}
 80108ee:	b085      	sub	sp, #20
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	0004      	movs	r4, r0
 80108f4:	0008      	movs	r0, r1
 80108f6:	0011      	movs	r1, r2
 80108f8:	1dfb      	adds	r3, r7, #7
 80108fa:	1c22      	adds	r2, r4, #0
 80108fc:	701a      	strb	r2, [r3, #0]
 80108fe:	1dbb      	adds	r3, r7, #6
 8010900:	1c02      	adds	r2, r0, #0
 8010902:	701a      	strb	r2, [r3, #0]
 8010904:	1d7b      	adds	r3, r7, #5
 8010906:	1c0a      	adds	r2, r1, #0
 8010908:	701a      	strb	r2, [r3, #0]
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 801090a:	230f      	movs	r3, #15
 801090c:	18fb      	adds	r3, r7, r3
 801090e:	2200      	movs	r2, #0
 8010910:	701a      	strb	r2, [r3, #0]

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 8010912:	1dfb      	adds	r3, r7, #7
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	2b01      	cmp	r3, #1
 8010918:	d103      	bne.n	8010922 <RegionAS923ApplyDrOffset+0x36>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 801091a:	230f      	movs	r3, #15
 801091c:	18fb      	adds	r3, r7, r3
 801091e:	2202      	movs	r2, #2
 8010920:	701a      	strb	r2, [r3, #0]
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 8010922:	1dbb      	adds	r3, r7, #6
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	b25b      	sxtb	r3, r3
 8010928:	1d7a      	adds	r2, r7, #5
 801092a:	7812      	ldrb	r2, [r2, #0]
 801092c:	b252      	sxtb	r2, r2
 801092e:	4909      	ldr	r1, [pc, #36]	; (8010954 <RegionAS923ApplyDrOffset+0x68>)
 8010930:	568a      	ldrsb	r2, [r1, r2]
 8010932:	1a9a      	subs	r2, r3, r2
 8010934:	230f      	movs	r3, #15
 8010936:	18fb      	adds	r3, r7, r3
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	b25b      	sxtb	r3, r3
 801093c:	429a      	cmp	r2, r3
 801093e:	da00      	bge.n	8010942 <RegionAS923ApplyDrOffset+0x56>
 8010940:	001a      	movs	r2, r3
 8010942:	0013      	movs	r3, r2
 8010944:	2b05      	cmp	r3, #5
 8010946:	dd00      	ble.n	801094a <RegionAS923ApplyDrOffset+0x5e>
 8010948:	2305      	movs	r3, #5
 801094a:	b2db      	uxtb	r3, r3
}
 801094c:	0018      	movs	r0, r3
 801094e:	46bd      	mov	sp, r7
 8010950:	b005      	add	sp, #20
 8010952:	bd90      	pop	{r4, r7, pc}
 8010954:	08027e60 	.word	0x08027e60

08010958 <GetNextLowerTxDr>:
 */
static RegionAU915NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	0002      	movs	r2, r0
 8010960:	1dfb      	adds	r3, r7, #7
 8010962:	701a      	strb	r2, [r3, #0]
 8010964:	1dbb      	adds	r3, r7, #6
 8010966:	1c0a      	adds	r2, r1, #0
 8010968:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 801096a:	230f      	movs	r3, #15
 801096c:	18fb      	adds	r3, r7, r3
 801096e:	2200      	movs	r2, #0
 8010970:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8010972:	1dfa      	adds	r2, r7, #7
 8010974:	1dbb      	adds	r3, r7, #6
 8010976:	7812      	ldrb	r2, [r2, #0]
 8010978:	b252      	sxtb	r2, r2
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	b25b      	sxtb	r3, r3
 801097e:	429a      	cmp	r2, r3
 8010980:	d105      	bne.n	801098e <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8010982:	230f      	movs	r3, #15
 8010984:	18fb      	adds	r3, r7, r3
 8010986:	1dba      	adds	r2, r7, #6
 8010988:	7812      	ldrb	r2, [r2, #0]
 801098a:	701a      	strb	r2, [r3, #0]
 801098c:	e00f      	b.n	80109ae <GetNextLowerTxDr+0x56>
    }
    else if( dr == DR_8 )
 801098e:	1dfb      	adds	r3, r7, #7
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	b25b      	sxtb	r3, r3
 8010994:	2b08      	cmp	r3, #8
 8010996:	d104      	bne.n	80109a2 <GetNextLowerTxDr+0x4a>
    {   // DR_7 is not allowed
        nextLowerDr = DR_6;
 8010998:	230f      	movs	r3, #15
 801099a:	18fb      	adds	r3, r7, r3
 801099c:	2206      	movs	r2, #6
 801099e:	701a      	strb	r2, [r3, #0]
 80109a0:	e005      	b.n	80109ae <GetNextLowerTxDr+0x56>
    }
    else
    {
        nextLowerDr = dr - 1;
 80109a2:	1dfb      	adds	r3, r7, #7
 80109a4:	781a      	ldrb	r2, [r3, #0]
 80109a6:	230f      	movs	r3, #15
 80109a8:	18fb      	adds	r3, r7, r3
 80109aa:	3a01      	subs	r2, #1
 80109ac:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80109ae:	230f      	movs	r3, #15
 80109b0:	18fb      	adds	r3, r7, r3
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	b25b      	sxtb	r3, r3
}
 80109b6:	0018      	movs	r0, r3
 80109b8:	46bd      	mov	sp, r7
 80109ba:	b004      	add	sp, #16
 80109bc:	bd80      	pop	{r7, pc}
	...

080109c0 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
    switch( BandwidthsAU915[drIndex] )
 80109c8:	4b09      	ldr	r3, [pc, #36]	; (80109f0 <GetBandwidth+0x30>)
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	0092      	lsls	r2, r2, #2
 80109ce:	58d3      	ldr	r3, [r2, r3]
 80109d0:	4a08      	ldr	r2, [pc, #32]	; (80109f4 <GetBandwidth+0x34>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d004      	beq.n	80109e0 <GetBandwidth+0x20>
 80109d6:	4a08      	ldr	r2, [pc, #32]	; (80109f8 <GetBandwidth+0x38>)
 80109d8:	4293      	cmp	r3, r2
 80109da:	d003      	beq.n	80109e4 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80109dc:	2300      	movs	r3, #0
 80109de:	e002      	b.n	80109e6 <GetBandwidth+0x26>
        case 250000:
            return 1;
 80109e0:	2301      	movs	r3, #1
 80109e2:	e000      	b.n	80109e6 <GetBandwidth+0x26>
        case 500000:
            return 2;
 80109e4:	2302      	movs	r3, #2
    }
}
 80109e6:	0018      	movs	r0, r3
 80109e8:	46bd      	mov	sp, r7
 80109ea:	b002      	add	sp, #8
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	46c0      	nop			; (mov r8, r8)
 80109f0:	08027f4c 	.word	0x08027f4c
 80109f4:	0003d090 	.word	0x0003d090
 80109f8:	0007a120 	.word	0x0007a120

080109fc <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80109fc:	b590      	push	{r4, r7, lr}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	0004      	movs	r4, r0
 8010a04:	0008      	movs	r0, r1
 8010a06:	0011      	movs	r1, r2
 8010a08:	603b      	str	r3, [r7, #0]
 8010a0a:	1dfb      	adds	r3, r7, #7
 8010a0c:	1c22      	adds	r2, r4, #0
 8010a0e:	701a      	strb	r2, [r3, #0]
 8010a10:	1dbb      	adds	r3, r7, #6
 8010a12:	1c02      	adds	r2, r0, #0
 8010a14:	701a      	strb	r2, [r3, #0]
 8010a16:	1d7b      	adds	r3, r7, #5
 8010a18:	1c0a      	adds	r2, r1, #0
 8010a1a:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8010a1c:	210f      	movs	r1, #15
 8010a1e:	187b      	adds	r3, r7, r1
 8010a20:	1dfa      	adds	r2, r7, #7
 8010a22:	7812      	ldrb	r2, [r2, #0]
 8010a24:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8010a26:	187a      	adds	r2, r7, r1
 8010a28:	1dbb      	adds	r3, r7, #6
 8010a2a:	1df9      	adds	r1, r7, #7
 8010a2c:	780c      	ldrb	r4, [r1, #0]
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	b258      	sxtb	r0, r3
 8010a32:	b261      	sxtb	r1, r4
 8010a34:	4288      	cmp	r0, r1
 8010a36:	da00      	bge.n	8010a3a <LimitTxPower+0x3e>
 8010a38:	1c23      	adds	r3, r4, #0
 8010a3a:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8010a3c:	230f      	movs	r3, #15
 8010a3e:	18fb      	adds	r3, r7, r3
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	b25b      	sxtb	r3, r3
}
 8010a44:	0018      	movs	r0, r3
 8010a46:	46bd      	mov	sp, r7
 8010a48:	b005      	add	sp, #20
 8010a4a:	bd90      	pop	{r4, r7, pc}

08010a4c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8010a54:	4b18      	ldr	r3, [pc, #96]	; (8010ab8 <VerifyRfFreq+0x6c>)
 8010a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	0010      	movs	r0, r2
 8010a5c:	4798      	blx	r3
 8010a5e:	0003      	movs	r3, r0
 8010a60:	001a      	movs	r2, r3
 8010a62:	2301      	movs	r3, #1
 8010a64:	4053      	eors	r3, r2
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d001      	beq.n	8010a70 <VerifyRfFreq+0x24>
    {
        return false;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	e01e      	b.n	8010aae <VerifyRfFreq+0x62>
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4a12      	ldr	r2, [pc, #72]	; (8010abc <VerifyRfFreq+0x70>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d90d      	bls.n	8010a94 <VerifyRfFreq+0x48>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	4a11      	ldr	r2, [pc, #68]	; (8010ac0 <VerifyRfFreq+0x74>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d809      	bhi.n	8010a94 <VerifyRfFreq+0x48>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	4a10      	ldr	r2, [pc, #64]	; (8010ac4 <VerifyRfFreq+0x78>)
 8010a84:	4694      	mov	ip, r2
 8010a86:	4463      	add	r3, ip
 8010a88:	490f      	ldr	r1, [pc, #60]	; (8010ac8 <VerifyRfFreq+0x7c>)
 8010a8a:	0018      	movs	r0, r3
 8010a8c:	f7ef fbca 	bl	8000224 <__aeabi_uidivmod>
 8010a90:	1e0b      	subs	r3, r1, #0
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 8010a92:	d001      	beq.n	8010a98 <VerifyRfFreq+0x4c>
    {
        return false;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e00a      	b.n	8010aae <VerifyRfFreq+0x62>
    }

    // Tx frequencies for 125kHz
    // Also includes the range for 500kHz channels
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	4a0c      	ldr	r2, [pc, #48]	; (8010acc <VerifyRfFreq+0x80>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d903      	bls.n	8010aa8 <VerifyRfFreq+0x5c>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4a0b      	ldr	r2, [pc, #44]	; (8010ad0 <VerifyRfFreq+0x84>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d901      	bls.n	8010aac <VerifyRfFreq+0x60>
    {
        return false;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	e000      	b.n	8010aae <VerifyRfFreq+0x62>
    }
    return true;
 8010aac:	2301      	movs	r3, #1
}
 8010aae:	0018      	movs	r0, r3
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	b002      	add	sp, #8
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	46c0      	nop			; (mov r8, r8)
 8010ab8:	08028964 	.word	0x08028964
 8010abc:	3708709f 	.word	0x3708709f
 8010ac0:	374886e0 	.word	0x374886e0
 8010ac4:	c8f78f60 	.word	0xc8f78f60
 8010ac8:	000927c0 	.word	0x000927c0
 8010acc:	368cd7ff 	.word	0x368cd7ff
 8010ad0:	374d1ac0 	.word	0x374d1ac0

08010ad4 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8010ad4:	b5b0      	push	{r4, r5, r7, lr}
 8010ad6:	b086      	sub	sp, #24
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60b9      	str	r1, [r7, #8]
 8010adc:	607a      	str	r2, [r7, #4]
 8010ade:	603b      	str	r3, [r7, #0]
 8010ae0:	230f      	movs	r3, #15
 8010ae2:	18fb      	adds	r3, r7, r3
 8010ae4:	1c02      	adds	r2, r0, #0
 8010ae6:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8010ae8:	2317      	movs	r3, #23
 8010aea:	18fb      	adds	r3, r7, r3
 8010aec:	2200      	movs	r2, #0
 8010aee:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8010af0:	2316      	movs	r3, #22
 8010af2:	18fb      	adds	r3, r7, r3
 8010af4:	2200      	movs	r2, #0
 8010af6:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 8010af8:	2315      	movs	r3, #21
 8010afa:	18fb      	adds	r3, r7, r3
 8010afc:	2200      	movs	r2, #0
 8010afe:	701a      	strb	r2, [r3, #0]
 8010b00:	2314      	movs	r3, #20
 8010b02:	18fb      	adds	r3, r7, r3
 8010b04:	2200      	movs	r2, #0
 8010b06:	701a      	strb	r2, [r3, #0]
 8010b08:	e0a0      	b.n	8010c4c <CountNbOfEnabledChannels+0x178>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8010b0a:	2313      	movs	r3, #19
 8010b0c:	18fb      	adds	r3, r7, r3
 8010b0e:	2200      	movs	r2, #0
 8010b10:	701a      	strb	r2, [r3, #0]
 8010b12:	e089      	b.n	8010c28 <CountNbOfEnabledChannels+0x154>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8010b14:	2314      	movs	r3, #20
 8010b16:	18fb      	adds	r3, r7, r3
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	005b      	lsls	r3, r3, #1
 8010b1c:	68ba      	ldr	r2, [r7, #8]
 8010b1e:	18d3      	adds	r3, r2, r3
 8010b20:	881b      	ldrh	r3, [r3, #0]
 8010b22:	001a      	movs	r2, r3
 8010b24:	2313      	movs	r3, #19
 8010b26:	18fb      	adds	r3, r7, r3
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	411a      	asrs	r2, r3
 8010b2c:	0013      	movs	r3, r2
 8010b2e:	2201      	movs	r2, #1
 8010b30:	4013      	ands	r3, r2
 8010b32:	d073      	beq.n	8010c1c <CountNbOfEnabledChannels+0x148>
            {
                if( channels[i + j].Frequency == 0 )
 8010b34:	2315      	movs	r3, #21
 8010b36:	18fb      	adds	r3, r7, r3
 8010b38:	781a      	ldrb	r2, [r3, #0]
 8010b3a:	2313      	movs	r3, #19
 8010b3c:	18fb      	adds	r3, r7, r3
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	18d3      	adds	r3, r2, r3
 8010b42:	001a      	movs	r2, r3
 8010b44:	0013      	movs	r3, r2
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	189b      	adds	r3, r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	001a      	movs	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	189b      	adds	r3, r3, r2
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d05e      	beq.n	8010c16 <CountNbOfEnabledChannels+0x142>
                { // Check if the channel is enabled
                    continue;
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8010b58:	230f      	movs	r3, #15
 8010b5a:	18fb      	adds	r3, r7, r3
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	5618      	ldrsb	r0, [r3, r0]
 8010b60:	2415      	movs	r4, #21
 8010b62:	193b      	adds	r3, r7, r4
 8010b64:	781a      	ldrb	r2, [r3, #0]
 8010b66:	2513      	movs	r5, #19
 8010b68:	197b      	adds	r3, r7, r5
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	18d3      	adds	r3, r2, r3
 8010b6e:	001a      	movs	r2, r3
 8010b70:	0013      	movs	r3, r2
 8010b72:	005b      	lsls	r3, r3, #1
 8010b74:	189b      	adds	r3, r3, r2
 8010b76:	009b      	lsls	r3, r3, #2
 8010b78:	001a      	movs	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	189b      	adds	r3, r3, r2
 8010b7e:	7a1b      	ldrb	r3, [r3, #8]
 8010b80:	011b      	lsls	r3, r3, #4
 8010b82:	b25b      	sxtb	r3, r3
 8010b84:	111b      	asrs	r3, r3, #4
 8010b86:	b25b      	sxtb	r3, r3
 8010b88:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8010b8a:	193b      	adds	r3, r7, r4
 8010b8c:	781a      	ldrb	r2, [r3, #0]
 8010b8e:	197b      	adds	r3, r7, r5
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	18d3      	adds	r3, r2, r3
 8010b94:	001a      	movs	r2, r3
 8010b96:	0013      	movs	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	189b      	adds	r3, r3, r2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	001a      	movs	r2, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	189b      	adds	r3, r3, r2
 8010ba4:	7a1b      	ldrb	r3, [r3, #8]
 8010ba6:	b25b      	sxtb	r3, r3
 8010ba8:	111b      	asrs	r3, r3, #4
 8010baa:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8010bac:	001a      	movs	r2, r3
 8010bae:	f003 fbe7 	bl	8014380 <RegionCommonValueInRange>
 8010bb2:	1e03      	subs	r3, r0, #0
 8010bb4:	d031      	beq.n	8010c1a <CountNbOfEnabledChannels+0x146>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8010bb6:	2315      	movs	r3, #21
 8010bb8:	18fb      	adds	r3, r7, r3
 8010bba:	781a      	ldrb	r2, [r3, #0]
 8010bbc:	2313      	movs	r3, #19
 8010bbe:	18fb      	adds	r3, r7, r3
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	18d3      	adds	r3, r2, r3
 8010bc4:	001a      	movs	r2, r3
 8010bc6:	0013      	movs	r3, r2
 8010bc8:	005b      	lsls	r3, r3, #1
 8010bca:	189b      	adds	r3, r3, r2
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	001a      	movs	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	189b      	adds	r3, r3, r2
 8010bd4:	7a5b      	ldrb	r3, [r3, #9]
 8010bd6:	011b      	lsls	r3, r3, #4
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	18d3      	adds	r3, r2, r3
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d006      	beq.n	8010bf0 <CountNbOfEnabledChannels+0x11c>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8010be2:	2116      	movs	r1, #22
 8010be4:	187b      	adds	r3, r7, r1
 8010be6:	781a      	ldrb	r2, [r3, #0]
 8010be8:	187b      	adds	r3, r7, r1
 8010bea:	3201      	adds	r2, #1
 8010bec:	701a      	strb	r2, [r3, #0]
                    continue;
 8010bee:	e015      	b.n	8010c1c <CountNbOfEnabledChannels+0x148>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8010bf0:	2217      	movs	r2, #23
 8010bf2:	18bb      	adds	r3, r7, r2
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	18ba      	adds	r2, r7, r2
 8010bf8:	1c59      	adds	r1, r3, #1
 8010bfa:	7011      	strb	r1, [r2, #0]
 8010bfc:	001a      	movs	r2, r3
 8010bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c00:	189b      	adds	r3, r3, r2
 8010c02:	2215      	movs	r2, #21
 8010c04:	18b9      	adds	r1, r7, r2
 8010c06:	2213      	movs	r2, #19
 8010c08:	18ba      	adds	r2, r7, r2
 8010c0a:	7809      	ldrb	r1, [r1, #0]
 8010c0c:	7812      	ldrb	r2, [r2, #0]
 8010c0e:	188a      	adds	r2, r1, r2
 8010c10:	b2d2      	uxtb	r2, r2
 8010c12:	701a      	strb	r2, [r3, #0]
 8010c14:	e002      	b.n	8010c1c <CountNbOfEnabledChannels+0x148>
                    continue;
 8010c16:	46c0      	nop			; (mov r8, r8)
 8010c18:	e000      	b.n	8010c1c <CountNbOfEnabledChannels+0x148>
                    continue;
 8010c1a:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8010c1c:	2113      	movs	r1, #19
 8010c1e:	187b      	adds	r3, r7, r1
 8010c20:	781a      	ldrb	r2, [r3, #0]
 8010c22:	187b      	adds	r3, r7, r1
 8010c24:	3201      	adds	r2, #1
 8010c26:	701a      	strb	r2, [r3, #0]
 8010c28:	2313      	movs	r3, #19
 8010c2a:	18fb      	adds	r3, r7, r3
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	2b0f      	cmp	r3, #15
 8010c30:	d800      	bhi.n	8010c34 <CountNbOfEnabledChannels+0x160>
 8010c32:	e76f      	b.n	8010b14 <CountNbOfEnabledChannels+0x40>
    for( uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++ )
 8010c34:	2215      	movs	r2, #21
 8010c36:	18bb      	adds	r3, r7, r2
 8010c38:	18ba      	adds	r2, r7, r2
 8010c3a:	7812      	ldrb	r2, [r2, #0]
 8010c3c:	3210      	adds	r2, #16
 8010c3e:	701a      	strb	r2, [r3, #0]
 8010c40:	2114      	movs	r1, #20
 8010c42:	187b      	adds	r3, r7, r1
 8010c44:	781a      	ldrb	r2, [r3, #0]
 8010c46:	187b      	adds	r3, r7, r1
 8010c48:	3201      	adds	r2, #1
 8010c4a:	701a      	strb	r2, [r3, #0]
 8010c4c:	2315      	movs	r3, #21
 8010c4e:	18fb      	adds	r3, r7, r3
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	2b47      	cmp	r3, #71	; 0x47
 8010c54:	d800      	bhi.n	8010c58 <CountNbOfEnabledChannels+0x184>
 8010c56:	e758      	b.n	8010b0a <CountNbOfEnabledChannels+0x36>
            }
        }
    }

    *delayTx = delayTransmission;
 8010c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5a:	2216      	movs	r2, #22
 8010c5c:	18ba      	adds	r2, r7, r2
 8010c5e:	7812      	ldrb	r2, [r2, #0]
 8010c60:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8010c62:	2317      	movs	r3, #23
 8010c64:	18fb      	adds	r3, r7, r3
 8010c66:	781b      	ldrb	r3, [r3, #0]
}
 8010c68:	0018      	movs	r0, r3
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	b006      	add	sp, #24
 8010c6e:	bdb0      	pop	{r4, r5, r7, pc}

08010c70 <RegionAU915GetPhyParam>:

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8010c78:	2308      	movs	r3, #8
 8010c7a:	18fb      	adds	r3, r7, r3
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	2b34      	cmp	r3, #52	; 0x34
 8010c86:	d900      	bls.n	8010c8a <RegionAU915GetPhyParam+0x1a>
 8010c88:	e118      	b.n	8010ebc <RegionAU915GetPhyParam+0x24c>
 8010c8a:	009a      	lsls	r2, r3, #2
 8010c8c:	4b93      	ldr	r3, [pc, #588]	; (8010edc <RegionAU915GetPhyParam+0x26c>)
 8010c8e:	18d3      	adds	r3, r2, r3
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	78db      	ldrb	r3, [r3, #3]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d104      	bne.n	8010ca6 <RegionAU915GetPhyParam+0x36>
            {
                phyParam.Value = AU915_RX_MIN_DATARATE;
 8010c9c:	2308      	movs	r3, #8
 8010c9e:	18fb      	adds	r3, r7, r3
 8010ca0:	2208      	movs	r2, #8
 8010ca2:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
            }
            break;
 8010ca4:	e10b      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 8010ca6:	2308      	movs	r3, #8
 8010ca8:	18fb      	adds	r3, r7, r3
 8010caa:	2202      	movs	r2, #2
 8010cac:	601a      	str	r2, [r3, #0]
            break;
 8010cae:	e106      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	789b      	ldrb	r3, [r3, #2]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d104      	bne.n	8010cc2 <RegionAU915GetPhyParam+0x52>
            {
                phyParam.Value = AU915_TX_MIN_DATARATE;
 8010cb8:	2308      	movs	r3, #8
 8010cba:	18fb      	adds	r3, r7, r3
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
            }
            break;
 8010cc0:	e0fd      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 8010cc2:	2308      	movs	r3, #8
 8010cc4:	18fb      	adds	r3, r7, r3
 8010cc6:	2202      	movs	r2, #2
 8010cc8:	601a      	str	r2, [r3, #0]
            break;
 8010cca:	e0f8      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AU915_DEFAULT_DATARATE;
 8010ccc:	2308      	movs	r3, #8
 8010cce:	18fb      	adds	r3, r7, r3
 8010cd0:	2202      	movs	r2, #2
 8010cd2:	601a      	str	r2, [r3, #0]
            break;
 8010cd4:	e0f3      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	789b      	ldrb	r3, [r3, #2]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d10c      	bne.n	8010cf8 <RegionAU915GetPhyParam+0x88>
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	785b      	ldrb	r3, [r3, #1]
 8010ce2:	b25b      	sxtb	r3, r3
 8010ce4:	2100      	movs	r1, #0
 8010ce6:	0018      	movs	r0, r3
 8010ce8:	f7ff fe36 	bl	8010958 <GetNextLowerTxDr>
 8010cec:	0003      	movs	r3, r0
 8010cee:	001a      	movs	r2, r3
 8010cf0:	2308      	movs	r3, #8
 8010cf2:	18fb      	adds	r3, r7, r3
 8010cf4:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
            }
            break;
 8010cf6:	e0e2      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	785b      	ldrb	r3, [r3, #1]
 8010cfc:	b25b      	sxtb	r3, r3
 8010cfe:	2102      	movs	r1, #2
 8010d00:	0018      	movs	r0, r3
 8010d02:	f7ff fe29 	bl	8010958 <GetNextLowerTxDr>
 8010d06:	0003      	movs	r3, r0
 8010d08:	001a      	movs	r2, r3
 8010d0a:	2308      	movs	r3, #8
 8010d0c:	18fb      	adds	r3, r7, r3
 8010d0e:	601a      	str	r2, [r3, #0]
            break;
 8010d10:	e0d5      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AU915_MAX_TX_POWER;
 8010d12:	2308      	movs	r3, #8
 8010d14:	18fb      	adds	r3, r7, r3
 8010d16:	2200      	movs	r2, #0
 8010d18:	601a      	str	r2, [r3, #0]
            break;
 8010d1a:	e0d0      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AU915_DEFAULT_TX_POWER;
 8010d1c:	2308      	movs	r3, #8
 8010d1e:	18fb      	adds	r3, r7, r3
 8010d20:	2200      	movs	r2, #0
 8010d22:	601a      	str	r2, [r3, #0]
            break;
 8010d24:	e0cb      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 8010d26:	2308      	movs	r3, #8
 8010d28:	18fb      	adds	r3, r7, r3
 8010d2a:	2240      	movs	r2, #64	; 0x40
 8010d2c:	601a      	str	r2, [r3, #0]
            break;
 8010d2e:	e0c6      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = AU915_ADR_ACK_DELAY;
 8010d30:	2308      	movs	r3, #8
 8010d32:	18fb      	adds	r3, r7, r3
 8010d34:	2220      	movs	r2, #32
 8010d36:	601a      	str	r2, [r3, #0]
            break;
 8010d38:	e0c1      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	789b      	ldrb	r3, [r3, #2]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d10a      	bne.n	8010d58 <RegionAU915GetPhyParam+0xe8>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	785b      	ldrb	r3, [r3, #1]
 8010d46:	b25b      	sxtb	r3, r3
 8010d48:	001a      	movs	r2, r3
 8010d4a:	4b65      	ldr	r3, [pc, #404]	; (8010ee0 <RegionAU915GetPhyParam+0x270>)
 8010d4c:	5c9b      	ldrb	r3, [r3, r2]
 8010d4e:	001a      	movs	r2, r3
 8010d50:	2308      	movs	r3, #8
 8010d52:	18fb      	adds	r3, r7, r3
 8010d54:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
            }
            break;
 8010d56:	e0b2      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	785b      	ldrb	r3, [r3, #1]
 8010d5c:	b25b      	sxtb	r3, r3
 8010d5e:	001a      	movs	r2, r3
 8010d60:	4b60      	ldr	r3, [pc, #384]	; (8010ee4 <RegionAU915GetPhyParam+0x274>)
 8010d62:	5c9b      	ldrb	r3, [r3, r2]
 8010d64:	001a      	movs	r2, r3
 8010d66:	2308      	movs	r3, #8
 8010d68:	18fb      	adds	r3, r7, r3
 8010d6a:	601a      	str	r2, [r3, #0]
            break;
 8010d6c:	e0a7      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	789b      	ldrb	r3, [r3, #2]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d10a      	bne.n	8010d8c <RegionAU915GetPhyParam+0x11c>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	785b      	ldrb	r3, [r3, #1]
 8010d7a:	b25b      	sxtb	r3, r3
 8010d7c:	001a      	movs	r2, r3
 8010d7e:	4b5a      	ldr	r3, [pc, #360]	; (8010ee8 <RegionAU915GetPhyParam+0x278>)
 8010d80:	5c9b      	ldrb	r3, [r3, r2]
 8010d82:	001a      	movs	r2, r3
 8010d84:	2308      	movs	r3, #8
 8010d86:	18fb      	adds	r3, r7, r3
 8010d88:	601a      	str	r2, [r3, #0]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
            }
            break;
 8010d8a:	e098      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	785b      	ldrb	r3, [r3, #1]
 8010d90:	b25b      	sxtb	r3, r3
 8010d92:	001a      	movs	r2, r3
 8010d94:	4b55      	ldr	r3, [pc, #340]	; (8010eec <RegionAU915GetPhyParam+0x27c>)
 8010d96:	5c9b      	ldrb	r3, [r3, r2]
 8010d98:	001a      	movs	r2, r3
 8010d9a:	2308      	movs	r3, #8
 8010d9c:	18fb      	adds	r3, r7, r3
 8010d9e:	601a      	str	r2, [r3, #0]
            break;
 8010da0:	e08d      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AU915_DUTY_CYCLE_ENABLED;
 8010da2:	2308      	movs	r3, #8
 8010da4:	18fb      	adds	r3, r7, r3
 8010da6:	2200      	movs	r2, #0
 8010da8:	601a      	str	r2, [r3, #0]
            break;
 8010daa:	e088      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AU915_MAX_RX_WINDOW;
 8010dac:	2308      	movs	r3, #8
 8010dae:	18fb      	adds	r3, r7, r3
 8010db0:	4a4f      	ldr	r2, [pc, #316]	; (8010ef0 <RegionAU915GetPhyParam+0x280>)
 8010db2:	601a      	str	r2, [r3, #0]
            break;
 8010db4:	e083      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = AU915_RECEIVE_DELAY1;
 8010db6:	2308      	movs	r3, #8
 8010db8:	18fb      	adds	r3, r7, r3
 8010dba:	22fa      	movs	r2, #250	; 0xfa
 8010dbc:	0092      	lsls	r2, r2, #2
 8010dbe:	601a      	str	r2, [r3, #0]
            break;
 8010dc0:	e07d      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = AU915_RECEIVE_DELAY2;
 8010dc2:	2308      	movs	r3, #8
 8010dc4:	18fb      	adds	r3, r7, r3
 8010dc6:	22fa      	movs	r2, #250	; 0xfa
 8010dc8:	00d2      	lsls	r2, r2, #3
 8010dca:	601a      	str	r2, [r3, #0]
            break;
 8010dcc:	e077      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY1;
 8010dce:	2308      	movs	r3, #8
 8010dd0:	18fb      	adds	r3, r7, r3
 8010dd2:	4a48      	ldr	r2, [pc, #288]	; (8010ef4 <RegionAU915GetPhyParam+0x284>)
 8010dd4:	601a      	str	r2, [r3, #0]
            break;
 8010dd6:	e072      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = AU915_JOIN_ACCEPT_DELAY2;
 8010dd8:	2308      	movs	r3, #8
 8010dda:	18fb      	adds	r3, r7, r3
 8010ddc:	4a46      	ldr	r2, [pc, #280]	; (8010ef8 <RegionAU915GetPhyParam+0x288>)
 8010dde:	601a      	str	r2, [r3, #0]
            break;
 8010de0:	e06d      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = AU915_MAX_FCNT_GAP;
 8010de2:	2308      	movs	r3, #8
 8010de4:	18fb      	adds	r3, r7, r3
 8010de6:	2280      	movs	r2, #128	; 0x80
 8010de8:	01d2      	lsls	r2, r2, #7
 8010dea:	601a      	str	r2, [r3, #0]
            break;
 8010dec:	e067      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 8010dee:	23fa      	movs	r3, #250	; 0xfa
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	4a42      	ldr	r2, [pc, #264]	; (8010efc <RegionAU915GetPhyParam+0x28c>)
 8010df4:	0019      	movs	r1, r3
 8010df6:	0010      	movs	r0, r2
 8010df8:	f00b ff5a 	bl	801ccb0 <randr>
 8010dfc:	0003      	movs	r3, r0
 8010dfe:	22fa      	movs	r2, #250	; 0xfa
 8010e00:	00d2      	lsls	r2, r2, #3
 8010e02:	4694      	mov	ip, r2
 8010e04:	4463      	add	r3, ip
 8010e06:	001a      	movs	r2, r3
 8010e08:	2308      	movs	r3, #8
 8010e0a:	18fb      	adds	r3, r7, r3
 8010e0c:	601a      	str	r2, [r3, #0]
            break;
 8010e0e:	e056      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = AU915_DEFAULT_RX1_DR_OFFSET;
 8010e10:	2308      	movs	r3, #8
 8010e12:	18fb      	adds	r3, r7, r3
 8010e14:	2200      	movs	r2, #0
 8010e16:	601a      	str	r2, [r3, #0]
            break;
 8010e18:	e051      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AU915_RX_WND_2_FREQ;
 8010e1a:	2308      	movs	r3, #8
 8010e1c:	18fb      	adds	r3, r7, r3
 8010e1e:	4a38      	ldr	r2, [pc, #224]	; (8010f00 <RegionAU915GetPhyParam+0x290>)
 8010e20:	601a      	str	r2, [r3, #0]
            break;
 8010e22:	e04c      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 8010e24:	2308      	movs	r3, #8
 8010e26:	18fb      	adds	r3, r7, r3
 8010e28:	2208      	movs	r2, #8
 8010e2a:	601a      	str	r2, [r3, #0]
            break;
 8010e2c:	e047      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8010e2e:	2308      	movs	r3, #8
 8010e30:	18fb      	adds	r3, r7, r3
 8010e32:	4a34      	ldr	r2, [pc, #208]	; (8010f04 <RegionAU915GetPhyParam+0x294>)
 8010e34:	601a      	str	r2, [r3, #0]
            break;
 8010e36:	e042      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8010e38:	2308      	movs	r3, #8
 8010e3a:	18fb      	adds	r3, r7, r3
 8010e3c:	4a32      	ldr	r2, [pc, #200]	; (8010f08 <RegionAU915GetPhyParam+0x298>)
 8010e3e:	601a      	str	r2, [r3, #0]
            break;
 8010e40:	e03d      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 8010e42:	2308      	movs	r3, #8
 8010e44:	18fb      	adds	r3, r7, r3
 8010e46:	2248      	movs	r2, #72	; 0x48
 8010e48:	601a      	str	r2, [r3, #0]
            break;
 8010e4a:	e038      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8010e4c:	2308      	movs	r3, #8
 8010e4e:	18fb      	adds	r3, r7, r3
 8010e50:	4a2e      	ldr	r2, [pc, #184]	; (8010f0c <RegionAU915GetPhyParam+0x29c>)
 8010e52:	601a      	str	r2, [r3, #0]
            break;
 8010e54:	e033      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 8010e56:	2308      	movs	r3, #8
 8010e58:	18fb      	adds	r3, r7, r3
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	601a      	str	r2, [r3, #0]
            break;
 8010e5e:	e02e      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AU915_DEFAULT_DOWNLINK_DWELL_TIME;
 8010e60:	2308      	movs	r3, #8
 8010e62:	18fb      	adds	r3, r7, r3
 8010e64:	2200      	movs	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]
            break;
 8010e68:	e029      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 8010e6a:	2308      	movs	r3, #8
 8010e6c:	18fb      	adds	r3, r7, r3
 8010e6e:	4a28      	ldr	r2, [pc, #160]	; (8010f10 <RegionAU915GetPhyParam+0x2a0>)
 8010e70:	601a      	str	r2, [r3, #0]
            break;
 8010e72:	e024      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 8010e74:	2308      	movs	r3, #8
 8010e76:	18fb      	adds	r3, r7, r3
 8010e78:	4a26      	ldr	r2, [pc, #152]	; (8010f14 <RegionAU915GetPhyParam+0x2a4>)
 8010e7a:	601a      	str	r2, [r3, #0]
            break;
 8010e7c:	e01f      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 8010e7e:	2108      	movs	r1, #8
 8010e80:	187b      	adds	r3, r7, r1
 8010e82:	2213      	movs	r2, #19
 8010e84:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 8010e86:	187b      	adds	r3, r7, r1
 8010e88:	2203      	movs	r2, #3
 8010e8a:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 8010e8c:	187b      	adds	r3, r7, r1
 8010e8e:	2201      	movs	r2, #1
 8010e90:	709a      	strb	r2, [r3, #2]
            break;
 8010e92:	e014      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
 8010e94:	2308      	movs	r3, #8
 8010e96:	18fb      	adds	r3, r7, r3
 8010e98:	220a      	movs	r2, #10
 8010e9a:	601a      	str	r2, [r3, #0]
            break;
 8010e9c:	e00f      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 8010e9e:	2308      	movs	r3, #8
 8010ea0:	18fb      	adds	r3, r7, r3
 8010ea2:	4a1d      	ldr	r2, [pc, #116]	; (8010f18 <RegionAU915GetPhyParam+0x2a8>)
 8010ea4:	601a      	str	r2, [r3, #0]
            break;
 8010ea6:	e00a      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 8010ea8:	2308      	movs	r3, #8
 8010eaa:	18fb      	adds	r3, r7, r3
 8010eac:	2208      	movs	r2, #8
 8010eae:	601a      	str	r2, [r3, #0]
            break;
 8010eb0:	e005      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AU915_PING_SLOT_CHANNEL_DR;
 8010eb2:	2308      	movs	r3, #8
 8010eb4:	18fb      	adds	r3, r7, r3
 8010eb6:	220a      	movs	r2, #10
 8010eb8:	601a      	str	r2, [r3, #0]
            break;
 8010eba:	e000      	b.n	8010ebe <RegionAU915GetPhyParam+0x24e>
        }
        default:
        {
            break;
 8010ebc:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8010ebe:	210c      	movs	r1, #12
 8010ec0:	187b      	adds	r3, r7, r1
 8010ec2:	2208      	movs	r2, #8
 8010ec4:	18ba      	adds	r2, r7, r2
 8010ec6:	6812      	ldr	r2, [r2, #0]
 8010ec8:	601a      	str	r2, [r3, #0]
 8010eca:	187b      	adds	r3, r7, r1
 8010ecc:	2200      	movs	r2, #0
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	0013      	movs	r3, r2
}
 8010ed2:	0018      	movs	r0, r3
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	b004      	add	sp, #16
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	46c0      	nop			; (mov r8, r8)
 8010edc:	08027ff8 	.word	0x08027ff8
 8010ee0:	08027fb8 	.word	0x08027fb8
 8010ee4:	08027fd8 	.word	0x08027fd8
 8010ee8:	08027fc8 	.word	0x08027fc8
 8010eec:	08027fe8 	.word	0x08027fe8
 8010ef0:	00000bb8 	.word	0x00000bb8
 8010ef4:	00001388 	.word	0x00001388
 8010ef8:	00001770 	.word	0x00001770
 8010efc:	fffffc18 	.word	0xfffffc18
 8010f00:	370870a0 	.word	0x370870a0
 8010f04:	20000e98 	.word	0x20000e98
 8010f08:	20000eb0 	.word	0x20000eb0
 8010f0c:	20000b28 	.word	0x20000b28
 8010f10:	41f00000 	.word	0x41f00000
 8010f14:	4009999a 	.word	0x4009999a
 8010f18:	000927c0 	.word	0x000927c0

08010f1c <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	7858      	ldrb	r0, [r3, #1]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	0019      	movs	r1, r3
 8010f2e:	4a0a      	ldr	r2, [pc, #40]	; (8010f58 <RegionAU915SetBandTxDone+0x3c>)
 8010f30:	000b      	movs	r3, r1
 8010f32:	005b      	lsls	r3, r3, #1
 8010f34:	185b      	adds	r3, r3, r1
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	18d3      	adds	r3, r2, r3
 8010f3a:	3309      	adds	r3, #9
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	3336      	adds	r3, #54	; 0x36
 8010f40:	011a      	lsls	r2, r3, #4
 8010f42:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <RegionAU915SetBandTxDone+0x3c>)
 8010f44:	18d1      	adds	r1, r2, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	001a      	movs	r2, r3
 8010f4c:	f003 faf0 	bl	8014530 <RegionCommonSetBandTxDone>
}
 8010f50:	46c0      	nop			; (mov r8, r8)
 8010f52:	46bd      	mov	sp, r7
 8010f54:	b002      	add	sp, #8
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	20000b28 	.word	0x20000b28

08010f5c <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 8010f5c:	b590      	push	{r4, r7, lr}
 8010f5e:	b089      	sub	sp, #36	; 0x24
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
    Band_t bands[AU915_MAX_NB_BANDS] =
 8010f64:	210c      	movs	r1, #12
 8010f66:	187b      	adds	r3, r7, r1
 8010f68:	2201      	movs	r2, #1
 8010f6a:	801a      	strh	r2, [r3, #0]
 8010f6c:	187b      	adds	r3, r7, r1
 8010f6e:	2200      	movs	r2, #0
 8010f70:	709a      	strb	r2, [r3, #2]
 8010f72:	187b      	adds	r3, r7, r1
 8010f74:	2200      	movs	r2, #0
 8010f76:	605a      	str	r2, [r3, #4]
 8010f78:	187b      	adds	r3, r7, r1
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	609a      	str	r2, [r3, #8]
 8010f7e:	187b      	adds	r3, r7, r1
 8010f80:	2200      	movs	r2, #0
 8010f82:	60da      	str	r2, [r3, #12]
    {
        AU915_BAND0
    };

    switch( params->Type )
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	791b      	ldrb	r3, [r3, #4]
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d100      	bne.n	8010f8e <RegionAU915InitDefaults+0x32>
 8010f8c:	e0b4      	b.n	80110f8 <RegionAU915InitDefaults+0x19c>
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	d100      	bne.n	8010f94 <RegionAU915InitDefaults+0x38>
 8010f92:	e0a4      	b.n	80110de <RegionAU915InitDefaults+0x182>
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d000      	beq.n	8010f9a <RegionAU915InitDefaults+0x3e>
            }
            break;
        }
        default:
        {
            break;
 8010f98:	e0e2      	b.n	8011160 <RegionAU915InitDefaults+0x204>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 8010f9a:	230c      	movs	r3, #12
 8010f9c:	18f9      	adds	r1, r7, r3
 8010f9e:	4b72      	ldr	r3, [pc, #456]	; (8011168 <RegionAU915InitDefaults+0x20c>)
 8010fa0:	2210      	movs	r2, #16
 8010fa2:	0018      	movs	r0, r3
 8010fa4:	f00b fe9a 	bl	801ccdc <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8010fa8:	231f      	movs	r3, #31
 8010faa:	18fb      	adds	r3, r7, r3
 8010fac:	2200      	movs	r2, #0
 8010fae:	701a      	strb	r2, [r3, #0]
 8010fb0:	e02c      	b.n	801100c <RegionAU915InitDefaults+0xb0>
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 8010fb2:	201f      	movs	r0, #31
 8010fb4:	183b      	adds	r3, r7, r0
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	4a6c      	ldr	r2, [pc, #432]	; (801116c <RegionAU915InitDefaults+0x210>)
 8010fba:	4353      	muls	r3, r2
 8010fbc:	4a6c      	ldr	r2, [pc, #432]	; (8011170 <RegionAU915InitDefaults+0x214>)
 8010fbe:	1899      	adds	r1, r3, r2
 8010fc0:	0004      	movs	r4, r0
 8010fc2:	183b      	adds	r3, r7, r0
 8010fc4:	781a      	ldrb	r2, [r3, #0]
 8010fc6:	0008      	movs	r0, r1
 8010fc8:	496a      	ldr	r1, [pc, #424]	; (8011174 <RegionAU915InitDefaults+0x218>)
 8010fca:	0013      	movs	r3, r2
 8010fcc:	005b      	lsls	r3, r3, #1
 8010fce:	189b      	adds	r3, r3, r2
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8010fd4:	0020      	movs	r0, r4
 8010fd6:	183b      	adds	r3, r7, r0
 8010fd8:	781a      	ldrb	r2, [r3, #0]
 8010fda:	4966      	ldr	r1, [pc, #408]	; (8011174 <RegionAU915InitDefaults+0x218>)
 8010fdc:	0013      	movs	r3, r2
 8010fde:	005b      	lsls	r3, r3, #1
 8010fe0:	189b      	adds	r3, r3, r2
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	18cb      	adds	r3, r1, r3
 8010fe6:	3308      	adds	r3, #8
 8010fe8:	2250      	movs	r2, #80	; 0x50
 8010fea:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 8010fec:	183b      	adds	r3, r7, r0
 8010fee:	781a      	ldrb	r2, [r3, #0]
 8010ff0:	4960      	ldr	r1, [pc, #384]	; (8011174 <RegionAU915InitDefaults+0x218>)
 8010ff2:	0013      	movs	r3, r2
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	189b      	adds	r3, r3, r2
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	18cb      	adds	r3, r1, r3
 8010ffc:	3309      	adds	r3, #9
 8010ffe:	2200      	movs	r2, #0
 8011000:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8011002:	183b      	adds	r3, r7, r0
 8011004:	781a      	ldrb	r2, [r3, #0]
 8011006:	183b      	adds	r3, r7, r0
 8011008:	3201      	adds	r2, #1
 801100a:	701a      	strb	r2, [r3, #0]
 801100c:	231f      	movs	r3, #31
 801100e:	18fb      	adds	r3, r7, r3
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	2b3f      	cmp	r3, #63	; 0x3f
 8011014:	d9cd      	bls.n	8010fb2 <RegionAU915InitDefaults+0x56>
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8011016:	231e      	movs	r3, #30
 8011018:	18fb      	adds	r3, r7, r3
 801101a:	2240      	movs	r2, #64	; 0x40
 801101c:	701a      	strb	r2, [r3, #0]
 801101e:	e02d      	b.n	801107c <RegionAU915InitDefaults+0x120>
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8011020:	201e      	movs	r0, #30
 8011022:	183b      	adds	r3, r7, r0
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	3b40      	subs	r3, #64	; 0x40
 8011028:	4a53      	ldr	r2, [pc, #332]	; (8011178 <RegionAU915InitDefaults+0x21c>)
 801102a:	4353      	muls	r3, r2
 801102c:	4a53      	ldr	r2, [pc, #332]	; (801117c <RegionAU915InitDefaults+0x220>)
 801102e:	1899      	adds	r1, r3, r2
 8011030:	0004      	movs	r4, r0
 8011032:	183b      	adds	r3, r7, r0
 8011034:	781a      	ldrb	r2, [r3, #0]
 8011036:	0008      	movs	r0, r1
 8011038:	494e      	ldr	r1, [pc, #312]	; (8011174 <RegionAU915InitDefaults+0x218>)
 801103a:	0013      	movs	r3, r2
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	189b      	adds	r3, r3, r2
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 8011044:	0020      	movs	r0, r4
 8011046:	183b      	adds	r3, r7, r0
 8011048:	781a      	ldrb	r2, [r3, #0]
 801104a:	494a      	ldr	r1, [pc, #296]	; (8011174 <RegionAU915InitDefaults+0x218>)
 801104c:	0013      	movs	r3, r2
 801104e:	005b      	lsls	r3, r3, #1
 8011050:	189b      	adds	r3, r3, r2
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	18cb      	adds	r3, r1, r3
 8011056:	3308      	adds	r3, #8
 8011058:	2266      	movs	r2, #102	; 0x66
 801105a:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 801105c:	183b      	adds	r3, r7, r0
 801105e:	781a      	ldrb	r2, [r3, #0]
 8011060:	4944      	ldr	r1, [pc, #272]	; (8011174 <RegionAU915InitDefaults+0x218>)
 8011062:	0013      	movs	r3, r2
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	189b      	adds	r3, r3, r2
 8011068:	009b      	lsls	r3, r3, #2
 801106a:	18cb      	adds	r3, r1, r3
 801106c:	3309      	adds	r3, #9
 801106e:	2200      	movs	r2, #0
 8011070:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8011072:	183b      	adds	r3, r7, r0
 8011074:	781a      	ldrb	r2, [r3, #0]
 8011076:	183b      	adds	r3, r7, r0
 8011078:	3201      	adds	r2, #1
 801107a:	701a      	strb	r2, [r3, #0]
 801107c:	231e      	movs	r3, #30
 801107e:	18fb      	adds	r3, r7, r3
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	2b47      	cmp	r3, #71	; 0x47
 8011084:	d9cc      	bls.n	8011020 <RegionAU915InitDefaults+0xc4>
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 8011086:	4a3b      	ldr	r2, [pc, #236]	; (8011174 <RegionAU915InitDefaults+0x218>)
 8011088:	23e2      	movs	r3, #226	; 0xe2
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	2101      	movs	r1, #1
 801108e:	4249      	negs	r1, r1
 8011090:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[1] = 0xFFFF;
 8011092:	4b38      	ldr	r3, [pc, #224]	; (8011174 <RegionAU915InitDefaults+0x218>)
 8011094:	4a3a      	ldr	r2, [pc, #232]	; (8011180 <RegionAU915InitDefaults+0x224>)
 8011096:	2101      	movs	r1, #1
 8011098:	4249      	negs	r1, r1
 801109a:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[2] = 0xFFFF;
 801109c:	4a35      	ldr	r2, [pc, #212]	; (8011174 <RegionAU915InitDefaults+0x218>)
 801109e:	23e3      	movs	r3, #227	; 0xe3
 80110a0:	009b      	lsls	r3, r3, #2
 80110a2:	2101      	movs	r1, #1
 80110a4:	4249      	negs	r1, r1
 80110a6:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[3] = 0xFFFF;
 80110a8:	4b32      	ldr	r3, [pc, #200]	; (8011174 <RegionAU915InitDefaults+0x218>)
 80110aa:	4a36      	ldr	r2, [pc, #216]	; (8011184 <RegionAU915InitDefaults+0x228>)
 80110ac:	2101      	movs	r1, #1
 80110ae:	4249      	negs	r1, r1
 80110b0:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[4] = 0x00FF;
 80110b2:	4a30      	ldr	r2, [pc, #192]	; (8011174 <RegionAU915InitDefaults+0x218>)
 80110b4:	23e4      	movs	r3, #228	; 0xe4
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	21ff      	movs	r1, #255	; 0xff
 80110ba:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 80110bc:	4b2d      	ldr	r3, [pc, #180]	; (8011174 <RegionAU915InitDefaults+0x218>)
 80110be:	4a32      	ldr	r2, [pc, #200]	; (8011188 <RegionAU915InitDefaults+0x22c>)
 80110c0:	2100      	movs	r1, #0
 80110c2:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 80110c4:	4931      	ldr	r1, [pc, #196]	; (801118c <RegionAU915InitDefaults+0x230>)
 80110c6:	4b32      	ldr	r3, [pc, #200]	; (8011190 <RegionAU915InitDefaults+0x234>)
 80110c8:	2206      	movs	r2, #6
 80110ca:	0018      	movs	r0, r3
 80110cc:	f003 fa01 	bl	80144d2 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 80110d0:	492f      	ldr	r1, [pc, #188]	; (8011190 <RegionAU915InitDefaults+0x234>)
 80110d2:	4b30      	ldr	r3, [pc, #192]	; (8011194 <RegionAU915InitDefaults+0x238>)
 80110d4:	2206      	movs	r2, #6
 80110d6:	0018      	movs	r0, r3
 80110d8:	f003 f9fb 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 80110dc:	e040      	b.n	8011160 <RegionAU915InitDefaults+0x204>
            if( params->NvmCtx != 0 )
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d03b      	beq.n	801115e <RegionAU915InitDefaults+0x202>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6819      	ldr	r1, [r3, #0]
 80110ea:	23e5      	movs	r3, #229	; 0xe5
 80110ec:	009a      	lsls	r2, r3, #2
 80110ee:	4b21      	ldr	r3, [pc, #132]	; (8011174 <RegionAU915InitDefaults+0x218>)
 80110f0:	0018      	movs	r0, r3
 80110f2:	f00b fdf3 	bl	801ccdc <memcpy1>
            break;
 80110f6:	e032      	b.n	801115e <RegionAU915InitDefaults+0x202>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 80110f8:	4924      	ldr	r1, [pc, #144]	; (801118c <RegionAU915InitDefaults+0x230>)
 80110fa:	4b25      	ldr	r3, [pc, #148]	; (8011190 <RegionAU915InitDefaults+0x234>)
 80110fc:	2206      	movs	r2, #6
 80110fe:	0018      	movs	r0, r3
 8011100:	f003 f9e7 	bl	80144d2 <RegionCommonChanMaskCopy>
            for( uint8_t i = 0; i < 6; i++ )
 8011104:	231d      	movs	r3, #29
 8011106:	18fb      	adds	r3, r7, r3
 8011108:	2200      	movs	r2, #0
 801110a:	701a      	strb	r2, [r3, #0]
 801110c:	e021      	b.n	8011152 <RegionAU915InitDefaults+0x1f6>
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 801110e:	201d      	movs	r0, #29
 8011110:	183b      	adds	r3, r7, r0
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	4a17      	ldr	r2, [pc, #92]	; (8011174 <RegionAU915InitDefaults+0x218>)
 8011116:	33bd      	adds	r3, #189	; 0xbd
 8011118:	33ff      	adds	r3, #255	; 0xff
 801111a:	005b      	lsls	r3, r3, #1
 801111c:	18d3      	adds	r3, r2, r3
 801111e:	3304      	adds	r3, #4
 8011120:	881a      	ldrh	r2, [r3, #0]
 8011122:	183b      	adds	r3, r7, r0
 8011124:	7819      	ldrb	r1, [r3, #0]
 8011126:	4b13      	ldr	r3, [pc, #76]	; (8011174 <RegionAU915InitDefaults+0x218>)
 8011128:	31b9      	adds	r1, #185	; 0xb9
 801112a:	31ff      	adds	r1, #255	; 0xff
 801112c:	0049      	lsls	r1, r1, #1
 801112e:	5ac9      	ldrh	r1, [r1, r3]
 8011130:	183b      	adds	r3, r7, r0
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	400a      	ands	r2, r1
 8011136:	b291      	uxth	r1, r2
 8011138:	4a0e      	ldr	r2, [pc, #56]	; (8011174 <RegionAU915InitDefaults+0x218>)
 801113a:	33bd      	adds	r3, #189	; 0xbd
 801113c:	33ff      	adds	r3, #255	; 0xff
 801113e:	005b      	lsls	r3, r3, #1
 8011140:	18d3      	adds	r3, r2, r3
 8011142:	3304      	adds	r3, #4
 8011144:	1c0a      	adds	r2, r1, #0
 8011146:	801a      	strh	r2, [r3, #0]
            for( uint8_t i = 0; i < 6; i++ )
 8011148:	183b      	adds	r3, r7, r0
 801114a:	781a      	ldrb	r2, [r3, #0]
 801114c:	183b      	adds	r3, r7, r0
 801114e:	3201      	adds	r2, #1
 8011150:	701a      	strb	r2, [r3, #0]
 8011152:	231d      	movs	r3, #29
 8011154:	18fb      	adds	r3, r7, r3
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	2b05      	cmp	r3, #5
 801115a:	d9d8      	bls.n	801110e <RegionAU915InitDefaults+0x1b2>
            break;
 801115c:	e000      	b.n	8011160 <RegionAU915InitDefaults+0x204>
            break;
 801115e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011160:	46c0      	nop			; (mov r8, r8)
 8011162:	46bd      	mov	sp, r7
 8011164:	b009      	add	sp, #36	; 0x24
 8011166:	bd90      	pop	{r4, r7, pc}
 8011168:	20000e88 	.word	0x20000e88
 801116c:	00030d40 	.word	0x00030d40
 8011170:	368cd800 	.word	0x368cd800
 8011174:	20000b28 	.word	0x20000b28
 8011178:	00186a00 	.word	0x00186a00
 801117c:	36978660 	.word	0x36978660
 8011180:	0000038a 	.word	0x0000038a
 8011184:	0000038e 	.word	0x0000038e
 8011188:	00000392 	.word	0x00000392
 801118c:	20000eb0 	.word	0x20000eb0
 8011190:	20000e98 	.word	0x20000e98
 8011194:	20000ea4 	.word	0x20000ea4

08011198 <RegionAU915ApplyCFList>:
            return false;
    }
}

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8011198:	b590      	push	{r4, r7, lr}
 801119a:	b085      	sub	sp, #20
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	791b      	ldrb	r3, [r3, #4]
 80111a4:	2b10      	cmp	r3, #16
 80111a6:	d000      	beq.n	80111aa <RegionAU915ApplyCFList+0x12>
 80111a8:	e07d      	b.n	80112a6 <RegionAU915ApplyCFList+0x10e>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	330f      	adds	r3, #15
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	d000      	beq.n	80111b8 <RegionAU915ApplyCFList+0x20>
 80111b6:	e078      	b.n	80112aa <RegionAU915ApplyCFList+0x112>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80111b8:	230f      	movs	r3, #15
 80111ba:	18fb      	adds	r3, r7, r3
 80111bc:	2200      	movs	r2, #0
 80111be:	701a      	strb	r2, [r3, #0]
 80111c0:	230e      	movs	r3, #14
 80111c2:	18fb      	adds	r3, r7, r3
 80111c4:	2200      	movs	r2, #0
 80111c6:	701a      	strb	r2, [r3, #0]
 80111c8:	e067      	b.n	801129a <RegionAU915ApplyCFList+0x102>
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681a      	ldr	r2, [r3, #0]
 80111ce:	240e      	movs	r4, #14
 80111d0:	193b      	adds	r3, r7, r4
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	18d3      	adds	r3, r2, r3
 80111d6:	7819      	ldrb	r1, [r3, #0]
 80111d8:	200f      	movs	r0, #15
 80111da:	183b      	adds	r3, r7, r0
 80111dc:	781a      	ldrb	r2, [r3, #0]
 80111de:	b289      	uxth	r1, r1
 80111e0:	4b34      	ldr	r3, [pc, #208]	; (80112b4 <RegionAU915ApplyCFList+0x11c>)
 80111e2:	32b9      	adds	r2, #185	; 0xb9
 80111e4:	32ff      	adds	r2, #255	; 0xff
 80111e6:	0052      	lsls	r2, r2, #1
 80111e8:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80111ea:	183b      	adds	r3, r7, r0
 80111ec:	781a      	ldrb	r2, [r3, #0]
 80111ee:	4b31      	ldr	r3, [pc, #196]	; (80112b4 <RegionAU915ApplyCFList+0x11c>)
 80111f0:	32b9      	adds	r2, #185	; 0xb9
 80111f2:	32ff      	adds	r2, #255	; 0xff
 80111f4:	0052      	lsls	r2, r2, #1
 80111f6:	5ad1      	ldrh	r1, [r2, r3]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	193b      	adds	r3, r7, r4
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	3301      	adds	r3, #1
 8011202:	18d3      	adds	r3, r2, r3
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	b29b      	uxth	r3, r3
 8011208:	021b      	lsls	r3, r3, #8
 801120a:	b29b      	uxth	r3, r3
 801120c:	183a      	adds	r2, r7, r0
 801120e:	7812      	ldrb	r2, [r2, #0]
 8011210:	430b      	orrs	r3, r1
 8011212:	b299      	uxth	r1, r3
 8011214:	4b27      	ldr	r3, [pc, #156]	; (80112b4 <RegionAU915ApplyCFList+0x11c>)
 8011216:	32b9      	adds	r2, #185	; 0xb9
 8011218:	32ff      	adds	r2, #255	; 0xff
 801121a:	0052      	lsls	r2, r2, #1
 801121c:	52d1      	strh	r1, [r2, r3]
        if( chMaskItr == 4 )
 801121e:	183b      	adds	r3, r7, r0
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	2b04      	cmp	r3, #4
 8011224:	d111      	bne.n	801124a <RegionAU915ApplyCFList+0xb2>
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8011226:	210f      	movs	r1, #15
 8011228:	187b      	adds	r3, r7, r1
 801122a:	781a      	ldrb	r2, [r3, #0]
 801122c:	4b21      	ldr	r3, [pc, #132]	; (80112b4 <RegionAU915ApplyCFList+0x11c>)
 801122e:	32b9      	adds	r2, #185	; 0xb9
 8011230:	32ff      	adds	r2, #255	; 0xff
 8011232:	0052      	lsls	r2, r2, #1
 8011234:	5ad3      	ldrh	r3, [r2, r3]
 8011236:	187a      	adds	r2, r7, r1
 8011238:	7812      	ldrb	r2, [r2, #0]
 801123a:	21ff      	movs	r1, #255	; 0xff
 801123c:	400b      	ands	r3, r1
 801123e:	b299      	uxth	r1, r3
 8011240:	4b1c      	ldr	r3, [pc, #112]	; (80112b4 <RegionAU915ApplyCFList+0x11c>)
 8011242:	32b9      	adds	r2, #185	; 0xb9
 8011244:	32ff      	adds	r2, #255	; 0xff
 8011246:	0052      	lsls	r2, r2, #1
 8011248:	52d1      	strh	r1, [r2, r3]
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 801124a:	200f      	movs	r0, #15
 801124c:	183b      	adds	r3, r7, r0
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	4a18      	ldr	r2, [pc, #96]	; (80112b4 <RegionAU915ApplyCFList+0x11c>)
 8011252:	33bd      	adds	r3, #189	; 0xbd
 8011254:	33ff      	adds	r3, #255	; 0xff
 8011256:	005b      	lsls	r3, r3, #1
 8011258:	18d3      	adds	r3, r2, r3
 801125a:	3304      	adds	r3, #4
 801125c:	881a      	ldrh	r2, [r3, #0]
 801125e:	183b      	adds	r3, r7, r0
 8011260:	7819      	ldrb	r1, [r3, #0]
 8011262:	4b14      	ldr	r3, [pc, #80]	; (80112b4 <RegionAU915ApplyCFList+0x11c>)
 8011264:	31b9      	adds	r1, #185	; 0xb9
 8011266:	31ff      	adds	r1, #255	; 0xff
 8011268:	0049      	lsls	r1, r1, #1
 801126a:	5ac9      	ldrh	r1, [r1, r3]
 801126c:	183b      	adds	r3, r7, r0
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	400a      	ands	r2, r1
 8011272:	b291      	uxth	r1, r2
 8011274:	4a0f      	ldr	r2, [pc, #60]	; (80112b4 <RegionAU915ApplyCFList+0x11c>)
 8011276:	33bd      	adds	r3, #189	; 0xbd
 8011278:	33ff      	adds	r3, #255	; 0xff
 801127a:	005b      	lsls	r3, r3, #1
 801127c:	18d3      	adds	r3, r2, r3
 801127e:	3304      	adds	r3, #4
 8011280:	1c0a      	adds	r2, r1, #0
 8011282:	801a      	strh	r2, [r3, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8011284:	183b      	adds	r3, r7, r0
 8011286:	781a      	ldrb	r2, [r3, #0]
 8011288:	183b      	adds	r3, r7, r0
 801128a:	3201      	adds	r2, #1
 801128c:	701a      	strb	r2, [r3, #0]
 801128e:	220e      	movs	r2, #14
 8011290:	18bb      	adds	r3, r7, r2
 8011292:	18ba      	adds	r2, r7, r2
 8011294:	7812      	ldrb	r2, [r2, #0]
 8011296:	3202      	adds	r2, #2
 8011298:	701a      	strb	r2, [r3, #0]
 801129a:	230f      	movs	r3, #15
 801129c:	18fb      	adds	r3, r7, r3
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	2b04      	cmp	r3, #4
 80112a2:	d992      	bls.n	80111ca <RegionAU915ApplyCFList+0x32>
 80112a4:	e002      	b.n	80112ac <RegionAU915ApplyCFList+0x114>
        return;
 80112a6:	46c0      	nop			; (mov r8, r8)
 80112a8:	e000      	b.n	80112ac <RegionAU915ApplyCFList+0x114>
        return;
 80112aa:	46c0      	nop			; (mov r8, r8)
    }
}
 80112ac:	46bd      	mov	sp, r7
 80112ae:	b005      	add	sp, #20
 80112b0:	bd90      	pop	{r4, r7, pc}
 80112b2:	46c0      	nop			; (mov r8, r8)
 80112b4:	20000b28 	.word	0x20000b28

080112b8 <RegionAU915ComputeRxWindowParameters>:
    }
    return true;
}

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80112b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112ba:	b08b      	sub	sp, #44	; 0x2c
 80112bc:	af04      	add	r7, sp, #16
 80112be:	60ba      	str	r2, [r7, #8]
 80112c0:	607b      	str	r3, [r7, #4]
 80112c2:	250f      	movs	r5, #15
 80112c4:	197b      	adds	r3, r7, r5
 80112c6:	1c02      	adds	r2, r0, #0
 80112c8:	701a      	strb	r2, [r3, #0]
 80112ca:	230e      	movs	r3, #14
 80112cc:	18fb      	adds	r3, r7, r3
 80112ce:	1c0a      	adds	r2, r1, #0
 80112d0:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 80112d2:	2300      	movs	r3, #0
 80112d4:	2400      	movs	r4, #0
 80112d6:	613b      	str	r3, [r7, #16]
 80112d8:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 80112da:	197b      	adds	r3, r7, r5
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	b25a      	sxtb	r2, r3
 80112e0:	2a0d      	cmp	r2, #13
 80112e2:	dd00      	ble.n	80112e6 <RegionAU915ComputeRxWindowParameters+0x2e>
 80112e4:	230d      	movs	r3, #13
 80112e6:	b25a      	sxtb	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	785b      	ldrb	r3, [r3, #1]
 80112f0:	b25b      	sxtb	r3, r3
 80112f2:	0018      	movs	r0, r3
 80112f4:	f7ff fb64 	bl	80109c0 <GetBandwidth>
 80112f8:	0003      	movs	r3, r0
 80112fa:	b2da      	uxtb	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	709a      	strb	r2, [r3, #2]

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	785b      	ldrb	r3, [r3, #1]
 8011304:	b25b      	sxtb	r3, r3
 8011306:	001a      	movs	r2, r3
 8011308:	4b14      	ldr	r3, [pc, #80]	; (801135c <RegionAU915ComputeRxWindowParameters+0xa4>)
 801130a:	5c98      	ldrb	r0, [r3, r2]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	785b      	ldrb	r3, [r3, #1]
 8011310:	b25b      	sxtb	r3, r3
 8011312:	001a      	movs	r2, r3
 8011314:	4b12      	ldr	r3, [pc, #72]	; (8011360 <RegionAU915ComputeRxWindowParameters+0xa8>)
 8011316:	0092      	lsls	r2, r2, #2
 8011318:	58d3      	ldr	r3, [r2, r3]
 801131a:	0019      	movs	r1, r3
 801131c:	f003 fb14 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 8011320:	0003      	movs	r3, r0
 8011322:	000c      	movs	r4, r1
 8011324:	613b      	str	r3, [r7, #16]
 8011326:	617c      	str	r4, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8011328:	4b0e      	ldr	r3, [pc, #56]	; (8011364 <RegionAU915ComputeRxWindowParameters+0xac>)
 801132a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801132c:	4798      	blx	r3
 801132e:	0006      	movs	r6, r0
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	3308      	adds	r3, #8
 8011334:	687a      	ldr	r2, [r7, #4]
 8011336:	320c      	adds	r2, #12
 8011338:	68bd      	ldr	r5, [r7, #8]
 801133a:	210e      	movs	r1, #14
 801133c:	1879      	adds	r1, r7, r1
 801133e:	780c      	ldrb	r4, [r1, #0]
 8011340:	6938      	ldr	r0, [r7, #16]
 8011342:	6979      	ldr	r1, [r7, #20]
 8011344:	9202      	str	r2, [sp, #8]
 8011346:	9301      	str	r3, [sp, #4]
 8011348:	9600      	str	r6, [sp, #0]
 801134a:	002b      	movs	r3, r5
 801134c:	0022      	movs	r2, r4
 801134e:	f003 fb43 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 8011352:	46c0      	nop			; (mov r8, r8)
 8011354:	46bd      	mov	sp, r7
 8011356:	b007      	add	sp, #28
 8011358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135a:	46c0      	nop			; (mov r8, r8)
 801135c:	08027f3c 	.word	0x08027f3c
 8011360:	08027f4c 	.word	0x08027f4c
 8011364:	08028964 	.word	0x08028964

08011368 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011368:	b5b0      	push	{r4, r5, r7, lr}
 801136a:	b090      	sub	sp, #64	; 0x40
 801136c:	af0a      	add	r7, sp, #40	; 0x28
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
    int8_t dr = rxConfig->Datarate;
 8011372:	230f      	movs	r3, #15
 8011374:	18fb      	adds	r3, r7, r3
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	7852      	ldrb	r2, [r2, #1]
 801137a:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801137c:	2317      	movs	r3, #23
 801137e:	18fb      	adds	r3, r7, r3
 8011380:	2200      	movs	r2, #0
 8011382:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8011384:	230e      	movs	r3, #14
 8011386:	18fb      	adds	r3, r7, r3
 8011388:	2200      	movs	r2, #0
 801138a:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011392:	4b39      	ldr	r3, [pc, #228]	; (8011478 <RegionAU915RxConfig+0x110>)
 8011394:	68db      	ldr	r3, [r3, #12]
 8011396:	4798      	blx	r3
 8011398:	1e03      	subs	r3, r0, #0
 801139a:	d001      	beq.n	80113a0 <RegionAU915RxConfig+0x38>
    {
        return false;
 801139c:	2300      	movs	r3, #0
 801139e:	e067      	b.n	8011470 <RegionAU915RxConfig+0x108>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	7cdb      	ldrb	r3, [r3, #19]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d10a      	bne.n	80113be <RegionAU915RxConfig+0x56>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	001a      	movs	r2, r3
 80113ae:	2307      	movs	r3, #7
 80113b0:	4013      	ands	r3, r2
 80113b2:	4a32      	ldr	r2, [pc, #200]	; (801147c <RegionAU915RxConfig+0x114>)
 80113b4:	4353      	muls	r3, r2
 80113b6:	4a32      	ldr	r2, [pc, #200]	; (8011480 <RegionAU915RxConfig+0x118>)
 80113b8:	4694      	mov	ip, r2
 80113ba:	4463      	add	r3, ip
 80113bc:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 80113be:	230f      	movs	r3, #15
 80113c0:	18fb      	adds	r3, r7, r3
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	b25b      	sxtb	r3, r3
 80113c6:	4a2f      	ldr	r2, [pc, #188]	; (8011484 <RegionAU915RxConfig+0x11c>)
 80113c8:	5cd2      	ldrb	r2, [r2, r3]
 80113ca:	250e      	movs	r5, #14
 80113cc:	197b      	adds	r3, r7, r5
 80113ce:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 80113d0:	4b29      	ldr	r3, [pc, #164]	; (8011478 <RegionAU915RxConfig+0x110>)
 80113d2:	695b      	ldr	r3, [r3, #20]
 80113d4:	693a      	ldr	r2, [r7, #16]
 80113d6:	0010      	movs	r0, r2
 80113d8:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80113da:	4b27      	ldr	r3, [pc, #156]	; (8011478 <RegionAU915RxConfig+0x110>)
 80113dc:	6a1c      	ldr	r4, [r3, #32]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	789b      	ldrb	r3, [r3, #2]
 80113e2:	0018      	movs	r0, r3
 80113e4:	197b      	adds	r3, r7, r5
 80113e6:	2100      	movs	r1, #0
 80113e8:	5659      	ldrsb	r1, [r3, r1]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	687a      	ldr	r2, [r7, #4]
 80113f2:	7c92      	ldrb	r2, [r2, #18]
 80113f4:	9209      	str	r2, [sp, #36]	; 0x24
 80113f6:	2201      	movs	r2, #1
 80113f8:	9208      	str	r2, [sp, #32]
 80113fa:	2200      	movs	r2, #0
 80113fc:	9207      	str	r2, [sp, #28]
 80113fe:	2200      	movs	r2, #0
 8011400:	9206      	str	r2, [sp, #24]
 8011402:	2200      	movs	r2, #0
 8011404:	9205      	str	r2, [sp, #20]
 8011406:	2200      	movs	r2, #0
 8011408:	9204      	str	r2, [sp, #16]
 801140a:	2200      	movs	r2, #0
 801140c:	9203      	str	r2, [sp, #12]
 801140e:	9302      	str	r3, [sp, #8]
 8011410:	2308      	movs	r3, #8
 8011412:	9301      	str	r3, [sp, #4]
 8011414:	2300      	movs	r3, #0
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	2301      	movs	r3, #1
 801141a:	000a      	movs	r2, r1
 801141c:	0001      	movs	r1, r0
 801141e:	2001      	movs	r0, #1
 8011420:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	7c5b      	ldrb	r3, [r3, #17]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d009      	beq.n	801143e <RegionAU915RxConfig+0xd6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 801142a:	230f      	movs	r3, #15
 801142c:	18fb      	adds	r3, r7, r3
 801142e:	2200      	movs	r2, #0
 8011430:	569a      	ldrsb	r2, [r3, r2]
 8011432:	2317      	movs	r3, #23
 8011434:	18fb      	adds	r3, r7, r3
 8011436:	4914      	ldr	r1, [pc, #80]	; (8011488 <RegionAU915RxConfig+0x120>)
 8011438:	5c8a      	ldrb	r2, [r1, r2]
 801143a:	701a      	strb	r2, [r3, #0]
 801143c:	e008      	b.n	8011450 <RegionAU915RxConfig+0xe8>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 801143e:	230f      	movs	r3, #15
 8011440:	18fb      	adds	r3, r7, r3
 8011442:	2200      	movs	r2, #0
 8011444:	569a      	ldrsb	r2, [r3, r2]
 8011446:	2317      	movs	r3, #23
 8011448:	18fb      	adds	r3, r7, r3
 801144a:	4910      	ldr	r1, [pc, #64]	; (801148c <RegionAU915RxConfig+0x124>)
 801144c:	5c8a      	ldrb	r2, [r1, r2]
 801144e:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8011450:	4b09      	ldr	r3, [pc, #36]	; (8011478 <RegionAU915RxConfig+0x110>)
 8011452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011454:	2217      	movs	r2, #23
 8011456:	18ba      	adds	r2, r7, r2
 8011458:	7812      	ldrb	r2, [r2, #0]
 801145a:	320d      	adds	r2, #13
 801145c:	b2d2      	uxtb	r2, r2
 801145e:	0011      	movs	r1, r2
 8011460:	2001      	movs	r0, #1
 8011462:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	220f      	movs	r2, #15
 8011468:	18ba      	adds	r2, r7, r2
 801146a:	7812      	ldrb	r2, [r2, #0]
 801146c:	701a      	strb	r2, [r3, #0]
    return true;
 801146e:	2301      	movs	r3, #1
}
 8011470:	0018      	movs	r0, r3
 8011472:	46bd      	mov	sp, r7
 8011474:	b006      	add	sp, #24
 8011476:	bdb0      	pop	{r4, r5, r7, pc}
 8011478:	08028964 	.word	0x08028964
 801147c:	000927c0 	.word	0x000927c0
 8011480:	370870a0 	.word	0x370870a0
 8011484:	08027f3c 	.word	0x08027f3c
 8011488:	08027fc8 	.word	0x08027fc8
 801148c:	08027fb8 	.word	0x08027fb8

08011490 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011492:	b093      	sub	sp, #76	; 0x4c
 8011494:	af0a      	add	r7, sp, #40	; 0x28
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	785b      	ldrb	r3, [r3, #1]
 80114a0:	b25b      	sxtb	r3, r3
 80114a2:	001a      	movs	r2, r3
 80114a4:	4b42      	ldr	r3, [pc, #264]	; (80115b0 <RegionAU915TxConfig+0x120>)
 80114a6:	5c9a      	ldrb	r2, [r3, r2]
 80114a8:	231f      	movs	r3, #31
 80114aa:	18fb      	adds	r3, r7, r3
 80114ac:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2002      	movs	r0, #2
 80114b2:	5618      	ldrsb	r0, [r3, r0]
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	0019      	movs	r1, r3
 80114ba:	4a3e      	ldr	r2, [pc, #248]	; (80115b4 <RegionAU915TxConfig+0x124>)
 80114bc:	000b      	movs	r3, r1
 80114be:	005b      	lsls	r3, r3, #1
 80114c0:	185b      	adds	r3, r3, r1
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	18d3      	adds	r3, r2, r3
 80114c6:	3309      	adds	r3, #9
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	4a3a      	ldr	r2, [pc, #232]	; (80115b4 <RegionAU915TxConfig+0x124>)
 80114cc:	3336      	adds	r3, #54	; 0x36
 80114ce:	011b      	lsls	r3, r3, #4
 80114d0:	18d3      	adds	r3, r2, r3
 80114d2:	3302      	adds	r3, #2
 80114d4:	2100      	movs	r1, #0
 80114d6:	5659      	ldrsb	r1, [r3, r1]
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2201      	movs	r2, #1
 80114dc:	569a      	ldrsb	r2, [r3, r2]
 80114de:	251e      	movs	r5, #30
 80114e0:	197c      	adds	r4, r7, r5
 80114e2:	4b35      	ldr	r3, [pc, #212]	; (80115b8 <RegionAU915TxConfig+0x128>)
 80114e4:	f7ff fa8a 	bl	80109fc <LimitTxPower>
 80114e8:	0003      	movs	r3, r0
 80114ea:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	785b      	ldrb	r3, [r3, #1]
 80114f0:	b25b      	sxtb	r3, r3
 80114f2:	0018      	movs	r0, r3
 80114f4:	f7ff fa64 	bl	80109c0 <GetBandwidth>
 80114f8:	0003      	movs	r3, r0
 80114fa:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80114fc:	2617      	movs	r6, #23
 80114fe:	19bb      	adds	r3, r7, r6
 8011500:	2200      	movs	r2, #0
 8011502:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6859      	ldr	r1, [r3, #4]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	689a      	ldr	r2, [r3, #8]
 801150c:	19bc      	adds	r4, r7, r6
 801150e:	197b      	adds	r3, r7, r5
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	b25b      	sxtb	r3, r3
 8011514:	0018      	movs	r0, r3
 8011516:	f003 fae3 	bl	8014ae0 <RegionCommonComputeTxPower>
 801151a:	0003      	movs	r3, r0
 801151c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801151e:	4b27      	ldr	r3, [pc, #156]	; (80115bc <RegionAU915TxConfig+0x12c>)
 8011520:	695a      	ldr	r2, [r3, #20]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	0018      	movs	r0, r3
 8011528:	4922      	ldr	r1, [pc, #136]	; (80115b4 <RegionAU915TxConfig+0x124>)
 801152a:	0003      	movs	r3, r0
 801152c:	005b      	lsls	r3, r3, #1
 801152e:	181b      	adds	r3, r3, r0
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	585b      	ldr	r3, [r3, r1]
 8011534:	0018      	movs	r0, r3
 8011536:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8011538:	4b20      	ldr	r3, [pc, #128]	; (80115bc <RegionAU915TxConfig+0x12c>)
 801153a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801153c:	231f      	movs	r3, #31
 801153e:	18fb      	adds	r3, r7, r3
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	b25b      	sxtb	r3, r3
 8011544:	69b8      	ldr	r0, [r7, #24]
 8011546:	19ba      	adds	r2, r7, r6
 8011548:	2100      	movs	r1, #0
 801154a:	5651      	ldrsb	r1, [r2, r1]
 801154c:	4a1c      	ldr	r2, [pc, #112]	; (80115c0 <RegionAU915TxConfig+0x130>)
 801154e:	9208      	str	r2, [sp, #32]
 8011550:	2200      	movs	r2, #0
 8011552:	9207      	str	r2, [sp, #28]
 8011554:	2200      	movs	r2, #0
 8011556:	9206      	str	r2, [sp, #24]
 8011558:	2200      	movs	r2, #0
 801155a:	9205      	str	r2, [sp, #20]
 801155c:	2201      	movs	r2, #1
 801155e:	9204      	str	r2, [sp, #16]
 8011560:	2200      	movs	r2, #0
 8011562:	9203      	str	r2, [sp, #12]
 8011564:	2208      	movs	r2, #8
 8011566:	9202      	str	r2, [sp, #8]
 8011568:	2201      	movs	r2, #1
 801156a:	9201      	str	r2, [sp, #4]
 801156c:	9300      	str	r3, [sp, #0]
 801156e:	0003      	movs	r3, r0
 8011570:	2200      	movs	r2, #0
 8011572:	2001      	movs	r0, #1
 8011574:	47a0      	blx	r4
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8011576:	4b11      	ldr	r3, [pc, #68]	; (80115bc <RegionAU915TxConfig+0x12c>)
 8011578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	8992      	ldrh	r2, [r2, #12]
 801157e:	b2d2      	uxtb	r2, r2
 8011580:	0011      	movs	r1, r2
 8011582:	2001      	movs	r0, #1
 8011584:	4798      	blx	r3

    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 8011586:	4b0d      	ldr	r3, [pc, #52]	; (80115bc <RegionAU915TxConfig+0x12c>)
 8011588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801158a:	68fa      	ldr	r2, [r7, #12]
 801158c:	8992      	ldrh	r2, [r2, #12]
 801158e:	b2d2      	uxtb	r2, r2
 8011590:	0011      	movs	r1, r2
 8011592:	2001      	movs	r0, #1
 8011594:	4798      	blx	r3
 8011596:	0002      	movs	r2, r0
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	601a      	str	r2, [r3, #0]
    *txPower = txPowerLimited;
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	197a      	adds	r2, r7, r5
 80115a0:	7812      	ldrb	r2, [r2, #0]
 80115a2:	701a      	strb	r2, [r3, #0]

    return true;
 80115a4:	2301      	movs	r3, #1
}
 80115a6:	0018      	movs	r0, r3
 80115a8:	46bd      	mov	sp, r7
 80115aa:	b009      	add	sp, #36	; 0x24
 80115ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115ae:	46c0      	nop			; (mov r8, r8)
 80115b0:	08027f3c 	.word	0x08027f3c
 80115b4:	20000b28 	.word	0x20000b28
 80115b8:	20000e98 	.word	0x20000e98
 80115bc:	08028964 	.word	0x08028964
 80115c0:	00000bb8 	.word	0x00000bb8

080115c4 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80115c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115c6:	b095      	sub	sp, #84	; 0x54
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
 80115d0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80115d2:	234f      	movs	r3, #79	; 0x4f
 80115d4:	18fb      	adds	r3, r7, r3
 80115d6:	2207      	movs	r2, #7
 80115d8:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 80115da:	234b      	movs	r3, #75	; 0x4b
 80115dc:	18fb      	adds	r3, r7, r3
 80115de:	2200      	movs	r2, #0
 80115e0:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 80115e2:	234e      	movs	r3, #78	; 0x4e
 80115e4:	18fb      	adds	r3, r7, r3
 80115e6:	2200      	movs	r2, #0
 80115e8:	701a      	strb	r2, [r3, #0]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80115ea:	2438      	movs	r4, #56	; 0x38
 80115ec:	193b      	adds	r3, r7, r4
 80115ee:	0018      	movs	r0, r3
 80115f0:	230c      	movs	r3, #12
 80115f2:	001a      	movs	r2, r3
 80115f4:	2100      	movs	r1, #0
 80115f6:	f014 fc9b 	bl	8025f30 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 80115fa:	49a3      	ldr	r1, [pc, #652]	; (8011888 <RegionAU915LinkAdrReq+0x2c4>)
 80115fc:	193b      	adds	r3, r7, r4
 80115fe:	2206      	movs	r2, #6
 8011600:	0018      	movs	r0, r3
 8011602:	f002 ff66 	bl	80144d2 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011606:	e136      	b.n	8011876 <RegionAU915LinkAdrReq+0x2b2>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	234e      	movs	r3, #78	; 0x4e
 801160e:	18fb      	adds	r3, r7, r3
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	18d3      	adds	r3, r2, r3
 8011614:	254b      	movs	r5, #75	; 0x4b
 8011616:	197c      	adds	r4, r7, r5
 8011618:	2244      	movs	r2, #68	; 0x44
 801161a:	18ba      	adds	r2, r7, r2
 801161c:	0011      	movs	r1, r2
 801161e:	0018      	movs	r0, r3
 8011620:	f003 f896 	bl	8014750 <RegionCommonParseLinkAdrReq>
 8011624:	0003      	movs	r3, r0
 8011626:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8011628:	197b      	adds	r3, r7, r5
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d100      	bne.n	8011632 <RegionAU915LinkAdrReq+0x6e>
 8011630:	e12e      	b.n	8011890 <RegionAU915LinkAdrReq+0x2cc>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8011632:	224e      	movs	r2, #78	; 0x4e
 8011634:	18bb      	adds	r3, r7, r2
 8011636:	18b9      	adds	r1, r7, r2
 8011638:	224b      	movs	r2, #75	; 0x4b
 801163a:	18ba      	adds	r2, r7, r2
 801163c:	7809      	ldrb	r1, [r1, #0]
 801163e:	7812      	ldrb	r2, [r2, #0]
 8011640:	188a      	adds	r2, r1, r2
 8011642:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8011644:	234f      	movs	r3, #79	; 0x4f
 8011646:	18fb      	adds	r3, r7, r3
 8011648:	2207      	movs	r2, #7
 801164a:	701a      	strb	r2, [r3, #0]

        if( linkAdrParams.ChMaskCtrl == 6 )
 801164c:	2344      	movs	r3, #68	; 0x44
 801164e:	18fb      	adds	r3, r7, r3
 8011650:	78db      	ldrb	r3, [r3, #3]
 8011652:	2b06      	cmp	r3, #6
 8011654:	d119      	bne.n	801168a <RegionAU915LinkAdrReq+0xc6>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8011656:	2138      	movs	r1, #56	; 0x38
 8011658:	187b      	adds	r3, r7, r1
 801165a:	2201      	movs	r2, #1
 801165c:	4252      	negs	r2, r2
 801165e:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0xFFFF;
 8011660:	187b      	adds	r3, r7, r1
 8011662:	2201      	movs	r2, #1
 8011664:	4252      	negs	r2, r2
 8011666:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0xFFFF;
 8011668:	187b      	adds	r3, r7, r1
 801166a:	2201      	movs	r2, #1
 801166c:	4252      	negs	r2, r2
 801166e:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0xFFFF;
 8011670:	187b      	adds	r3, r7, r1
 8011672:	2201      	movs	r2, #1
 8011674:	4252      	negs	r2, r2
 8011676:	80da      	strh	r2, [r3, #6]
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011678:	2344      	movs	r3, #68	; 0x44
 801167a:	18fb      	adds	r3, r7, r3
 801167c:	889b      	ldrh	r3, [r3, #4]
 801167e:	22ff      	movs	r2, #255	; 0xff
 8011680:	4013      	ands	r3, r2
 8011682:	b29a      	uxth	r2, r3
 8011684:	187b      	adds	r3, r7, r1
 8011686:	811a      	strh	r2, [r3, #8]
 8011688:	e0f5      	b.n	8011876 <RegionAU915LinkAdrReq+0x2b2>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801168a:	2344      	movs	r3, #68	; 0x44
 801168c:	18fb      	adds	r3, r7, r3
 801168e:	78db      	ldrb	r3, [r3, #3]
 8011690:	2b07      	cmp	r3, #7
 8011692:	d115      	bne.n	80116c0 <RegionAU915LinkAdrReq+0xfc>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8011694:	2138      	movs	r1, #56	; 0x38
 8011696:	187b      	adds	r3, r7, r1
 8011698:	2200      	movs	r2, #0
 801169a:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0x0000;
 801169c:	187b      	adds	r3, r7, r1
 801169e:	2200      	movs	r2, #0
 80116a0:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0x0000;
 80116a2:	187b      	adds	r3, r7, r1
 80116a4:	2200      	movs	r2, #0
 80116a6:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0x0000;
 80116a8:	187b      	adds	r3, r7, r1
 80116aa:	2200      	movs	r2, #0
 80116ac:	80da      	strh	r2, [r3, #6]
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80116ae:	2344      	movs	r3, #68	; 0x44
 80116b0:	18fb      	adds	r3, r7, r3
 80116b2:	889b      	ldrh	r3, [r3, #4]
 80116b4:	22ff      	movs	r2, #255	; 0xff
 80116b6:	4013      	ands	r3, r2
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	187b      	adds	r3, r7, r1
 80116bc:	811a      	strh	r2, [r3, #8]
 80116be:	e0da      	b.n	8011876 <RegionAU915LinkAdrReq+0x2b2>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80116c0:	2344      	movs	r3, #68	; 0x44
 80116c2:	18fb      	adds	r3, r7, r3
 80116c4:	78db      	ldrb	r3, [r3, #3]
 80116c6:	2b05      	cmp	r3, #5
 80116c8:	d000      	beq.n	80116cc <RegionAU915LinkAdrReq+0x108>
 80116ca:	e0ca      	b.n	8011862 <RegionAU915LinkAdrReq+0x29e>
        {
            // Start value for comparision
            uint8_t bitMask = 1;
 80116cc:	234a      	movs	r3, #74	; 0x4a
 80116ce:	18fb      	adds	r3, r7, r3
 80116d0:	2201      	movs	r2, #1
 80116d2:	701a      	strb	r2, [r3, #0]

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80116d4:	234d      	movs	r3, #77	; 0x4d
 80116d6:	18fb      	adds	r3, r7, r3
 80116d8:	2200      	movs	r2, #0
 80116da:	701a      	strb	r2, [r3, #0]

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80116dc:	234c      	movs	r3, #76	; 0x4c
 80116de:	18fb      	adds	r3, r7, r3
 80116e0:	2200      	movs	r2, #0
 80116e2:	701a      	strb	r2, [r3, #0]
 80116e4:	e0b6      	b.n	8011854 <RegionAU915LinkAdrReq+0x290>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80116e6:	2344      	movs	r3, #68	; 0x44
 80116e8:	18fb      	adds	r3, r7, r3
 80116ea:	889b      	ldrh	r3, [r3, #4]
 80116ec:	001a      	movs	r2, r3
 80116ee:	23ff      	movs	r3, #255	; 0xff
 80116f0:	4013      	ands	r3, r2
 80116f2:	224a      	movs	r2, #74	; 0x4a
 80116f4:	18ba      	adds	r2, r7, r2
 80116f6:	7811      	ldrb	r1, [r2, #0]
 80116f8:	224c      	movs	r2, #76	; 0x4c
 80116fa:	18ba      	adds	r2, r7, r2
 80116fc:	7812      	ldrb	r2, [r2, #0]
 80116fe:	4091      	lsls	r1, r2
 8011700:	000a      	movs	r2, r1
 8011702:	4013      	ands	r3, r2
 8011704:	d04e      	beq.n	80117a4 <RegionAU915LinkAdrReq+0x1e0>
                {
                    if( ( i % 2 ) == 0 )
 8011706:	234c      	movs	r3, #76	; 0x4c
 8011708:	18fb      	adds	r3, r7, r3
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2201      	movs	r2, #1
 801170e:	4013      	ands	r3, r2
 8011710:	b2db      	uxtb	r3, r3
 8011712:	2b00      	cmp	r3, #0
 8011714:	d120      	bne.n	8011758 <RegionAU915LinkAdrReq+0x194>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8011716:	214d      	movs	r1, #77	; 0x4d
 8011718:	187b      	adds	r3, r7, r1
 801171a:	781a      	ldrb	r2, [r3, #0]
 801171c:	2038      	movs	r0, #56	; 0x38
 801171e:	183b      	adds	r3, r7, r0
 8011720:	0052      	lsls	r2, r2, #1
 8011722:	5ad3      	ldrh	r3, [r2, r3]
 8011724:	187a      	adds	r2, r7, r1
 8011726:	7812      	ldrb	r2, [r2, #0]
 8011728:	21ff      	movs	r1, #255	; 0xff
 801172a:	430b      	orrs	r3, r1
 801172c:	b299      	uxth	r1, r3
 801172e:	183b      	adds	r3, r7, r0
 8011730:	0052      	lsls	r2, r2, #1
 8011732:	52d1      	strh	r1, [r2, r3]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8011734:	183b      	adds	r3, r7, r0
 8011736:	891b      	ldrh	r3, [r3, #8]
 8011738:	b21a      	sxth	r2, r3
 801173a:	234a      	movs	r3, #74	; 0x4a
 801173c:	18fb      	adds	r3, r7, r3
 801173e:	7819      	ldrb	r1, [r3, #0]
 8011740:	234c      	movs	r3, #76	; 0x4c
 8011742:	18fb      	adds	r3, r7, r3
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	4099      	lsls	r1, r3
 8011748:	000b      	movs	r3, r1
 801174a:	b21b      	sxth	r3, r3
 801174c:	4313      	orrs	r3, r2
 801174e:	b21b      	sxth	r3, r3
 8011750:	b29a      	uxth	r2, r3
 8011752:	183b      	adds	r3, r7, r0
 8011754:	811a      	strh	r2, [r3, #8]
 8011756:	e077      	b.n	8011848 <RegionAU915LinkAdrReq+0x284>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8011758:	204d      	movs	r0, #77	; 0x4d
 801175a:	183b      	adds	r3, r7, r0
 801175c:	781a      	ldrb	r2, [r3, #0]
 801175e:	2438      	movs	r4, #56	; 0x38
 8011760:	193b      	adds	r3, r7, r4
 8011762:	0052      	lsls	r2, r2, #1
 8011764:	5ad3      	ldrh	r3, [r2, r3]
 8011766:	183a      	adds	r2, r7, r0
 8011768:	7812      	ldrb	r2, [r2, #0]
 801176a:	4948      	ldr	r1, [pc, #288]	; (801188c <RegionAU915LinkAdrReq+0x2c8>)
 801176c:	430b      	orrs	r3, r1
 801176e:	b299      	uxth	r1, r3
 8011770:	193b      	adds	r3, r7, r4
 8011772:	0052      	lsls	r2, r2, #1
 8011774:	52d1      	strh	r1, [r2, r3]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8011776:	193b      	adds	r3, r7, r4
 8011778:	891b      	ldrh	r3, [r3, #8]
 801177a:	b21a      	sxth	r2, r3
 801177c:	234a      	movs	r3, #74	; 0x4a
 801177e:	18fb      	adds	r3, r7, r3
 8011780:	7819      	ldrb	r1, [r3, #0]
 8011782:	234c      	movs	r3, #76	; 0x4c
 8011784:	18fb      	adds	r3, r7, r3
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	4099      	lsls	r1, r3
 801178a:	000b      	movs	r3, r1
 801178c:	b21b      	sxth	r3, r3
 801178e:	4313      	orrs	r3, r2
 8011790:	b21b      	sxth	r3, r3
 8011792:	b29a      	uxth	r2, r3
 8011794:	193b      	adds	r3, r7, r4
 8011796:	811a      	strh	r2, [r3, #8]
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8011798:	183b      	adds	r3, r7, r0
 801179a:	781a      	ldrb	r2, [r3, #0]
 801179c:	183b      	adds	r3, r7, r0
 801179e:	3201      	adds	r2, #1
 80117a0:	701a      	strb	r2, [r3, #0]
 80117a2:	e051      	b.n	8011848 <RegionAU915LinkAdrReq+0x284>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80117a4:	234c      	movs	r3, #76	; 0x4c
 80117a6:	18fb      	adds	r3, r7, r3
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2201      	movs	r2, #1
 80117ac:	4013      	ands	r3, r2
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d122      	bne.n	80117fa <RegionAU915LinkAdrReq+0x236>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80117b4:	214d      	movs	r1, #77	; 0x4d
 80117b6:	187b      	adds	r3, r7, r1
 80117b8:	781a      	ldrb	r2, [r3, #0]
 80117ba:	2038      	movs	r0, #56	; 0x38
 80117bc:	183b      	adds	r3, r7, r0
 80117be:	0052      	lsls	r2, r2, #1
 80117c0:	5ad3      	ldrh	r3, [r2, r3]
 80117c2:	187a      	adds	r2, r7, r1
 80117c4:	7812      	ldrb	r2, [r2, #0]
 80117c6:	21ff      	movs	r1, #255	; 0xff
 80117c8:	438b      	bics	r3, r1
 80117ca:	b299      	uxth	r1, r3
 80117cc:	183b      	adds	r3, r7, r0
 80117ce:	0052      	lsls	r2, r2, #1
 80117d0:	52d1      	strh	r1, [r2, r3]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80117d2:	183b      	adds	r3, r7, r0
 80117d4:	891b      	ldrh	r3, [r3, #8]
 80117d6:	b21b      	sxth	r3, r3
 80117d8:	224a      	movs	r2, #74	; 0x4a
 80117da:	18ba      	adds	r2, r7, r2
 80117dc:	7811      	ldrb	r1, [r2, #0]
 80117de:	224c      	movs	r2, #76	; 0x4c
 80117e0:	18ba      	adds	r2, r7, r2
 80117e2:	7812      	ldrb	r2, [r2, #0]
 80117e4:	4091      	lsls	r1, r2
 80117e6:	000a      	movs	r2, r1
 80117e8:	b212      	sxth	r2, r2
 80117ea:	43d2      	mvns	r2, r2
 80117ec:	b212      	sxth	r2, r2
 80117ee:	4013      	ands	r3, r2
 80117f0:	b21b      	sxth	r3, r3
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	183b      	adds	r3, r7, r0
 80117f6:	811a      	strh	r2, [r3, #8]
 80117f8:	e026      	b.n	8011848 <RegionAU915LinkAdrReq+0x284>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 80117fa:	204d      	movs	r0, #77	; 0x4d
 80117fc:	183b      	adds	r3, r7, r0
 80117fe:	781a      	ldrb	r2, [r3, #0]
 8011800:	2438      	movs	r4, #56	; 0x38
 8011802:	193b      	adds	r3, r7, r4
 8011804:	0052      	lsls	r2, r2, #1
 8011806:	5ad3      	ldrh	r3, [r2, r3]
 8011808:	183a      	adds	r2, r7, r0
 801180a:	7812      	ldrb	r2, [r2, #0]
 801180c:	21ff      	movs	r1, #255	; 0xff
 801180e:	400b      	ands	r3, r1
 8011810:	b299      	uxth	r1, r3
 8011812:	193b      	adds	r3, r7, r4
 8011814:	0052      	lsls	r2, r2, #1
 8011816:	52d1      	strh	r1, [r2, r3]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8011818:	193b      	adds	r3, r7, r4
 801181a:	891b      	ldrh	r3, [r3, #8]
 801181c:	b21b      	sxth	r3, r3
 801181e:	224a      	movs	r2, #74	; 0x4a
 8011820:	18ba      	adds	r2, r7, r2
 8011822:	7811      	ldrb	r1, [r2, #0]
 8011824:	224c      	movs	r2, #76	; 0x4c
 8011826:	18ba      	adds	r2, r7, r2
 8011828:	7812      	ldrb	r2, [r2, #0]
 801182a:	4091      	lsls	r1, r2
 801182c:	000a      	movs	r2, r1
 801182e:	b212      	sxth	r2, r2
 8011830:	43d2      	mvns	r2, r2
 8011832:	b212      	sxth	r2, r2
 8011834:	4013      	ands	r3, r2
 8011836:	b21b      	sxth	r3, r3
 8011838:	b29a      	uxth	r2, r3
 801183a:	193b      	adds	r3, r7, r4
 801183c:	811a      	strh	r2, [r3, #8]
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801183e:	183b      	adds	r3, r7, r0
 8011840:	781a      	ldrb	r2, [r3, #0]
 8011842:	183b      	adds	r3, r7, r0
 8011844:	3201      	adds	r2, #1
 8011846:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i <= 7; i++ )
 8011848:	214c      	movs	r1, #76	; 0x4c
 801184a:	187b      	adds	r3, r7, r1
 801184c:	781a      	ldrb	r2, [r3, #0]
 801184e:	187b      	adds	r3, r7, r1
 8011850:	3201      	adds	r2, #1
 8011852:	701a      	strb	r2, [r3, #0]
 8011854:	234c      	movs	r3, #76	; 0x4c
 8011856:	18fb      	adds	r3, r7, r3
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	2b07      	cmp	r3, #7
 801185c:	d800      	bhi.n	8011860 <RegionAU915LinkAdrReq+0x29c>
 801185e:	e742      	b.n	80116e6 <RegionAU915LinkAdrReq+0x122>
 8011860:	e009      	b.n	8011876 <RegionAU915LinkAdrReq+0x2b2>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8011862:	2144      	movs	r1, #68	; 0x44
 8011864:	187b      	adds	r3, r7, r1
 8011866:	78db      	ldrb	r3, [r3, #3]
 8011868:	001a      	movs	r2, r3
 801186a:	187b      	adds	r3, r7, r1
 801186c:	8899      	ldrh	r1, [r3, #4]
 801186e:	2338      	movs	r3, #56	; 0x38
 8011870:	18fb      	adds	r3, r7, r3
 8011872:	0052      	lsls	r2, r2, #1
 8011874:	52d1      	strh	r1, [r2, r3]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	7a1b      	ldrb	r3, [r3, #8]
 801187a:	224e      	movs	r2, #78	; 0x4e
 801187c:	18ba      	adds	r2, r7, r2
 801187e:	7812      	ldrb	r2, [r2, #0]
 8011880:	429a      	cmp	r2, r3
 8011882:	d200      	bcs.n	8011886 <RegionAU915LinkAdrReq+0x2c2>
 8011884:	e6c0      	b.n	8011608 <RegionAU915LinkAdrReq+0x44>
 8011886:	e004      	b.n	8011892 <RegionAU915LinkAdrReq+0x2ce>
 8011888:	20000e98 	.word	0x20000e98
 801188c:	ffffff00 	.word	0xffffff00
            break; // break loop, since no more request has been found
 8011890:	46c0      	nop			; (mov r8, r8)
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011892:	2344      	movs	r3, #68	; 0x44
 8011894:	18fb      	adds	r3, r7, r3
 8011896:	785b      	ldrb	r3, [r3, #1]
 8011898:	b25b      	sxtb	r3, r3
 801189a:	2b05      	cmp	r3, #5
 801189c:	dc10      	bgt.n	80118c0 <RegionAU915LinkAdrReq+0x2fc>
 801189e:	2338      	movs	r3, #56	; 0x38
 80118a0:	18fb      	adds	r3, r7, r3
 80118a2:	2204      	movs	r2, #4
 80118a4:	2100      	movs	r1, #0
 80118a6:	0018      	movs	r0, r3
 80118a8:	f002 fdd2 	bl	8014450 <RegionCommonCountChannels>
 80118ac:	0003      	movs	r3, r0
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d806      	bhi.n	80118c0 <RegionAU915LinkAdrReq+0x2fc>
    {
        status &= 0xFE; // Channel mask KO
 80118b2:	224f      	movs	r2, #79	; 0x4f
 80118b4:	18bb      	adds	r3, r7, r2
 80118b6:	18ba      	adds	r2, r7, r2
 80118b8:	7812      	ldrb	r2, [r2, #0]
 80118ba:	2101      	movs	r1, #1
 80118bc:	438a      	bics	r2, r1
 80118be:	701a      	strb	r2, [r3, #0]
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80118c0:	2134      	movs	r1, #52	; 0x34
 80118c2:	187b      	adds	r3, r7, r1
 80118c4:	2201      	movs	r2, #1
 80118c6:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	7a5a      	ldrb	r2, [r3, #9]
 80118cc:	187b      	adds	r3, r7, r1
 80118ce:	709a      	strb	r2, [r3, #2]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 80118d0:	187b      	adds	r3, r7, r1
 80118d2:	0018      	movs	r0, r3
 80118d4:	f7ff f9cc 	bl	8010c70 <RegionAU915GetPhyParam>
 80118d8:	0003      	movs	r3, r0
 80118da:	001a      	movs	r2, r3
 80118dc:	2030      	movs	r0, #48	; 0x30
 80118de:	183b      	adds	r3, r7, r0
 80118e0:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80118e2:	2110      	movs	r1, #16
 80118e4:	187b      	adds	r3, r7, r1
 80118e6:	244f      	movs	r4, #79	; 0x4f
 80118e8:	193a      	adds	r2, r7, r4
 80118ea:	7812      	ldrb	r2, [r2, #0]
 80118ec:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	7a9a      	ldrb	r2, [r3, #10]
 80118f2:	187b      	adds	r3, r7, r1
 80118f4:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80118f6:	2544      	movs	r5, #68	; 0x44
 80118f8:	197b      	adds	r3, r7, r5
 80118fa:	2201      	movs	r2, #1
 80118fc:	569a      	ldrsb	r2, [r3, r2]
 80118fe:	187b      	adds	r3, r7, r1
 8011900:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011902:	197b      	adds	r3, r7, r5
 8011904:	2202      	movs	r2, #2
 8011906:	569a      	ldrsb	r2, [r3, r2]
 8011908:	187b      	adds	r3, r7, r1
 801190a:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801190c:	197b      	adds	r3, r7, r5
 801190e:	781a      	ldrb	r2, [r3, #0]
 8011910:	187b      	adds	r3, r7, r1
 8011912:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	220b      	movs	r2, #11
 8011918:	569a      	ldrsb	r2, [r3, r2]
 801191a:	187b      	adds	r3, r7, r1
 801191c:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	220c      	movs	r2, #12
 8011922:	569a      	ldrsb	r2, [r3, r2]
 8011924:	187b      	adds	r3, r7, r1
 8011926:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	7b5b      	ldrb	r3, [r3, #13]
 801192c:	b25a      	sxtb	r2, r3
 801192e:	187b      	adds	r3, r7, r1
 8011930:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 8011932:	187b      	adds	r3, r7, r1
 8011934:	2248      	movs	r2, #72	; 0x48
 8011936:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8011938:	187b      	adds	r3, r7, r1
 801193a:	2238      	movs	r2, #56	; 0x38
 801193c:	18ba      	adds	r2, r7, r2
 801193e:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011940:	183b      	adds	r3, r7, r0
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	b25a      	sxtb	r2, r3
 8011946:	0008      	movs	r0, r1
 8011948:	183b      	adds	r3, r7, r0
 801194a:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 801194c:	183b      	adds	r3, r7, r0
 801194e:	220d      	movs	r2, #13
 8011950:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8011952:	183b      	adds	r3, r7, r0
 8011954:	4a40      	ldr	r2, [pc, #256]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 8011956:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 8011958:	183b      	adds	r3, r7, r0
 801195a:	220a      	movs	r2, #10
 801195c:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
 801195e:	183b      	adds	r3, r7, r0
 8011960:	2200      	movs	r2, #0
 8011962:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011964:	183b      	adds	r3, r7, r0
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	6812      	ldr	r2, [r2, #0]
 801196a:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801196c:	0026      	movs	r6, r4
 801196e:	193c      	adds	r4, r7, r4
 8011970:	0029      	movs	r1, r5
 8011972:	187d      	adds	r5, r7, r1
 8011974:	187b      	adds	r3, r7, r1
 8011976:	1c9a      	adds	r2, r3, #2
 8011978:	187b      	adds	r3, r7, r1
 801197a:	1c59      	adds	r1, r3, #1
 801197c:	1838      	adds	r0, r7, r0
 801197e:	002b      	movs	r3, r5
 8011980:	f002 ff3c 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 8011984:	0003      	movs	r3, r0
 8011986:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011988:	0034      	movs	r4, r6
 801198a:	193b      	adds	r3, r7, r4
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	2b07      	cmp	r3, #7
 8011990:	d146      	bne.n	8011a20 <RegionAU915LinkAdrReq+0x45c>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 8011992:	2338      	movs	r3, #56	; 0x38
 8011994:	18f9      	adds	r1, r7, r3
 8011996:	4b31      	ldr	r3, [pc, #196]	; (8011a5c <RegionAU915LinkAdrReq+0x498>)
 8011998:	2206      	movs	r2, #6
 801199a:	0018      	movs	r0, r3
 801199c:	f002 fd99 	bl	80144d2 <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 80119a0:	4a2d      	ldr	r2, [pc, #180]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119a2:	23df      	movs	r3, #223	; 0xdf
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	5ad3      	ldrh	r3, [r2, r3]
 80119a8:	492b      	ldr	r1, [pc, #172]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119aa:	22dc      	movs	r2, #220	; 0xdc
 80119ac:	0092      	lsls	r2, r2, #2
 80119ae:	5a8a      	ldrh	r2, [r1, r2]
 80119b0:	4013      	ands	r3, r2
 80119b2:	b299      	uxth	r1, r3
 80119b4:	4a28      	ldr	r2, [pc, #160]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119b6:	23df      	movs	r3, #223	; 0xdf
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 80119bc:	4b26      	ldr	r3, [pc, #152]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119be:	4a28      	ldr	r2, [pc, #160]	; (8011a60 <RegionAU915LinkAdrReq+0x49c>)
 80119c0:	5a9b      	ldrh	r3, [r3, r2]
 80119c2:	4a25      	ldr	r2, [pc, #148]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119c4:	4927      	ldr	r1, [pc, #156]	; (8011a64 <RegionAU915LinkAdrReq+0x4a0>)
 80119c6:	5a52      	ldrh	r2, [r2, r1]
 80119c8:	4013      	ands	r3, r2
 80119ca:	b299      	uxth	r1, r3
 80119cc:	4b22      	ldr	r3, [pc, #136]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119ce:	4a24      	ldr	r2, [pc, #144]	; (8011a60 <RegionAU915LinkAdrReq+0x49c>)
 80119d0:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 80119d2:	4a21      	ldr	r2, [pc, #132]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119d4:	23e0      	movs	r3, #224	; 0xe0
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	5ad3      	ldrh	r3, [r2, r3]
 80119da:	491f      	ldr	r1, [pc, #124]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119dc:	22dd      	movs	r2, #221	; 0xdd
 80119de:	0092      	lsls	r2, r2, #2
 80119e0:	5a8a      	ldrh	r2, [r1, r2]
 80119e2:	4013      	ands	r3, r2
 80119e4:	b299      	uxth	r1, r3
 80119e6:	4a1c      	ldr	r2, [pc, #112]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119e8:	23e0      	movs	r3, #224	; 0xe0
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 80119ee:	4b1a      	ldr	r3, [pc, #104]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119f0:	4a1d      	ldr	r2, [pc, #116]	; (8011a68 <RegionAU915LinkAdrReq+0x4a4>)
 80119f2:	5a9b      	ldrh	r3, [r3, r2]
 80119f4:	4a18      	ldr	r2, [pc, #96]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 80119f6:	491d      	ldr	r1, [pc, #116]	; (8011a6c <RegionAU915LinkAdrReq+0x4a8>)
 80119f8:	5a52      	ldrh	r2, [r2, r1]
 80119fa:	4013      	ands	r3, r2
 80119fc:	b299      	uxth	r1, r3
 80119fe:	4b16      	ldr	r3, [pc, #88]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 8011a00:	4a19      	ldr	r2, [pc, #100]	; (8011a68 <RegionAU915LinkAdrReq+0x4a4>)
 8011a02:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 8011a04:	4a14      	ldr	r2, [pc, #80]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 8011a06:	23de      	movs	r3, #222	; 0xde
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	5ad1      	ldrh	r1, [r2, r3]
 8011a0c:	4a12      	ldr	r2, [pc, #72]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 8011a0e:	23e1      	movs	r3, #225	; 0xe1
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 8011a14:	4b10      	ldr	r3, [pc, #64]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 8011a16:	4a16      	ldr	r2, [pc, #88]	; (8011a70 <RegionAU915LinkAdrReq+0x4ac>)
 8011a18:	5a99      	ldrh	r1, [r3, r2]
 8011a1a:	4b0f      	ldr	r3, [pc, #60]	; (8011a58 <RegionAU915LinkAdrReq+0x494>)
 8011a1c:	4a15      	ldr	r2, [pc, #84]	; (8011a74 <RegionAU915LinkAdrReq+0x4b0>)
 8011a1e:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011a20:	2144      	movs	r1, #68	; 0x44
 8011a22:	187b      	adds	r3, r7, r1
 8011a24:	2201      	movs	r2, #1
 8011a26:	569a      	ldrsb	r2, [r3, r2]
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8011a2c:	187b      	adds	r3, r7, r1
 8011a2e:	2202      	movs	r2, #2
 8011a30:	569a      	ldrsb	r2, [r3, r2]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8011a36:	187b      	adds	r3, r7, r1
 8011a38:	781a      	ldrb	r2, [r3, #0]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8011a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a40:	224e      	movs	r2, #78	; 0x4e
 8011a42:	18ba      	adds	r2, r7, r2
 8011a44:	7812      	ldrb	r2, [r2, #0]
 8011a46:	701a      	strb	r2, [r3, #0]

    return status;
 8011a48:	234f      	movs	r3, #79	; 0x4f
 8011a4a:	18fb      	adds	r3, r7, r3
 8011a4c:	781b      	ldrb	r3, [r3, #0]
}
 8011a4e:	0018      	movs	r0, r3
 8011a50:	46bd      	mov	sp, r7
 8011a52:	b015      	add	sp, #84	; 0x54
 8011a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a56:	46c0      	nop			; (mov r8, r8)
 8011a58:	20000b28 	.word	0x20000b28
 8011a5c:	20000e98 	.word	0x20000e98
 8011a60:	0000037e 	.word	0x0000037e
 8011a64:	00000372 	.word	0x00000372
 8011a68:	00000382 	.word	0x00000382
 8011a6c:	00000376 	.word	0x00000376
 8011a70:	0000037a 	.word	0x0000037a
 8011a74:	00000386 	.word	0x00000386

08011a78 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8011a80:	230f      	movs	r3, #15
 8011a82:	18fb      	adds	r3, r7, r3
 8011a84:	2207      	movs	r2, #7
 8011a86:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	0018      	movs	r0, r3
 8011a8e:	f7fe ffdd 	bl	8010a4c <VerifyRfFreq>
 8011a92:	0003      	movs	r3, r0
 8011a94:	001a      	movs	r2, r3
 8011a96:	2301      	movs	r3, #1
 8011a98:	4053      	eors	r3, r2
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d006      	beq.n	8011aae <RegionAU915RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8011aa0:	220f      	movs	r2, #15
 8011aa2:	18bb      	adds	r3, r7, r2
 8011aa4:	18ba      	adds	r2, r7, r2
 8011aa6:	7812      	ldrb	r2, [r2, #0]
 8011aa8:	2101      	movs	r1, #1
 8011aaa:	438a      	bics	r2, r1
 8011aac:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	781b      	ldrb	r3, [r3, #0]
 8011ab2:	b25b      	sxtb	r3, r3
 8011ab4:	220d      	movs	r2, #13
 8011ab6:	2108      	movs	r1, #8
 8011ab8:	0018      	movs	r0, r3
 8011aba:	f002 fc61 	bl	8014380 <RegionCommonValueInRange>
 8011abe:	1e03      	subs	r3, r0, #0
 8011ac0:	d106      	bne.n	8011ad0 <RegionAU915RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8011ac2:	220f      	movs	r2, #15
 8011ac4:	18bb      	adds	r3, r7, r2
 8011ac6:	18ba      	adds	r2, r7, r2
 8011ac8:	7812      	ldrb	r2, [r2, #0]
 8011aca:	2102      	movs	r1, #2
 8011acc:	438a      	bics	r2, r1
 8011ace:	701a      	strb	r2, [r3, #0]
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	b25b      	sxtb	r3, r3
 8011ad6:	2b07      	cmp	r3, #7
 8011ad8:	d004      	beq.n	8011ae4 <RegionAU915RxParamSetupReq+0x6c>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	b25b      	sxtb	r3, r3
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 8011ae0:	2b0d      	cmp	r3, #13
 8011ae2:	dd06      	ble.n	8011af2 <RegionAU915RxParamSetupReq+0x7a>
    {
        status &= 0xFD; // Datarate KO
 8011ae4:	220f      	movs	r2, #15
 8011ae6:	18bb      	adds	r3, r7, r2
 8011ae8:	18ba      	adds	r2, r7, r2
 8011aea:	7812      	ldrb	r2, [r2, #0]
 8011aec:	2102      	movs	r1, #2
 8011aee:	438a      	bics	r2, r1
 8011af0:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	785b      	ldrb	r3, [r3, #1]
 8011af6:	b25b      	sxtb	r3, r3
 8011af8:	2206      	movs	r2, #6
 8011afa:	2100      	movs	r1, #0
 8011afc:	0018      	movs	r0, r3
 8011afe:	f002 fc3f 	bl	8014380 <RegionCommonValueInRange>
 8011b02:	1e03      	subs	r3, r0, #0
 8011b04:	d106      	bne.n	8011b14 <RegionAU915RxParamSetupReq+0x9c>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011b06:	220f      	movs	r2, #15
 8011b08:	18bb      	adds	r3, r7, r2
 8011b0a:	18ba      	adds	r2, r7, r2
 8011b0c:	7812      	ldrb	r2, [r2, #0]
 8011b0e:	2104      	movs	r1, #4
 8011b10:	438a      	bics	r2, r1
 8011b12:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8011b14:	230f      	movs	r3, #15
 8011b16:	18fb      	adds	r3, r7, r3
 8011b18:	781b      	ldrb	r3, [r3, #0]
}
 8011b1a:	0018      	movs	r0, r3
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	b004      	add	sp, #16
 8011b20:	bd80      	pop	{r7, pc}

08011b22 <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8011b22:	b580      	push	{r7, lr}
 8011b24:	b082      	sub	sp, #8
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
    // Datarate and frequency KO
    return 0;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	0018      	movs	r0, r3
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	b002      	add	sp, #8
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	0018      	movs	r0, r3
 8011b40:	46bd      	mov	sp, r7
 8011b42:	b002      	add	sp, #8
 8011b44:	bd80      	pop	{r7, pc}

08011b46 <RegionAU915DlChannelReq>:

uint8_t RegionAU915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b082      	sub	sp, #8
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
    return 0;
 8011b4e:	2300      	movs	r3, #0
}
 8011b50:	0018      	movs	r0, r3
 8011b52:	46bd      	mov	sp, r7
 8011b54:	b002      	add	sp, #8
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <RegionAU915CalcBackOff>:
    trialsCount++;
    return currentDr;
}

void RegionAU915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b088      	sub	sp, #32
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8011b60:	210c      	movs	r1, #12
 8011b62:	187b      	adds	r3, r7, r1
 8011b64:	4a12      	ldr	r2, [pc, #72]	; (8011bb0 <RegionAU915CalcBackOff+0x58>)
 8011b66:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8011b68:	187b      	adds	r3, r7, r1
 8011b6a:	4a12      	ldr	r2, [pc, #72]	; (8011bb4 <RegionAU915CalcBackOff+0x5c>)
 8011b6c:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	785a      	ldrb	r2, [r3, #1]
 8011b72:	187b      	adds	r3, r7, r1
 8011b74:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	781a      	ldrb	r2, [r3, #0]
 8011b7a:	187b      	adds	r3, r7, r1
 8011b7c:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	789a      	ldrb	r2, [r3, #2]
 8011b82:	187b      	adds	r3, r7, r1
 8011b84:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	78da      	ldrb	r2, [r3, #3]
 8011b8a:	187b      	adds	r3, r7, r1
 8011b8c:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	685a      	ldr	r2, [r3, #4]
 8011b92:	187b      	adds	r3, r7, r1
 8011b94:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	689a      	ldr	r2, [r3, #8]
 8011b9a:	187b      	adds	r3, r7, r1
 8011b9c:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8011b9e:	187b      	adds	r3, r7, r1
 8011ba0:	0018      	movs	r0, r3
 8011ba2:	f002 ffd5 	bl	8014b50 <RegionCommonCalcBackOff>
}
 8011ba6:	46c0      	nop			; (mov r8, r8)
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	b008      	add	sp, #32
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	46c0      	nop			; (mov r8, r8)
 8011bb0:	20000b28 	.word	0x20000b28
 8011bb4:	20000e88 	.word	0x20000e88

08011bb8 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011bb8:	b5b0      	push	{r4, r5, r7, lr}
 8011bba:	b09c      	sub	sp, #112	; 0x70
 8011bbc:	af02      	add	r7, sp, #8
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	60b9      	str	r1, [r7, #8]
 8011bc2:	607a      	str	r2, [r7, #4]
 8011bc4:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8011bc6:	2367      	movs	r3, #103	; 0x67
 8011bc8:	18fb      	adds	r3, r7, r3
 8011bca:	2200      	movs	r2, #0
 8011bcc:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8011bce:	235f      	movs	r3, #95	; 0x5f
 8011bd0:	18fb      	adds	r3, r7, r3
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 8011bd6:	2314      	movs	r3, #20
 8011bd8:	18fb      	adds	r3, r7, r3
 8011bda:	0018      	movs	r0, r3
 8011bdc:	2348      	movs	r3, #72	; 0x48
 8011bde:	001a      	movs	r2, r3
 8011be0:	2100      	movs	r1, #0
 8011be2:	f014 f9a5 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 8011be6:	2300      	movs	r3, #0
 8011be8:	663b      	str	r3, [r7, #96]	; 0x60

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 8011bea:	4b48      	ldr	r3, [pc, #288]	; (8011d0c <RegionAU915NextChannel+0x154>)
 8011bec:	2204      	movs	r2, #4
 8011bee:	2100      	movs	r1, #0
 8011bf0:	0018      	movs	r0, r3
 8011bf2:	f002 fc2d 	bl	8014450 <RegionCommonCountChannels>
 8011bf6:	1e03      	subs	r3, r0, #0
 8011bf8:	d105      	bne.n	8011c06 <RegionAU915NextChannel+0x4e>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 8011bfa:	4945      	ldr	r1, [pc, #276]	; (8011d10 <RegionAU915NextChannel+0x158>)
 8011bfc:	4b43      	ldr	r3, [pc, #268]	; (8011d0c <RegionAU915NextChannel+0x154>)
 8011bfe:	2204      	movs	r2, #4
 8011c00:	0018      	movs	r0, r3
 8011c02:	f002 fc66 	bl	80144d2 <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	7a1b      	ldrb	r3, [r3, #8]
 8011c0a:	b25b      	sxtb	r3, r3
 8011c0c:	2b05      	cmp	r3, #5
 8011c0e:	dd0f      	ble.n	8011c30 <RegionAU915NextChannel+0x78>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8011c10:	4a40      	ldr	r2, [pc, #256]	; (8011d14 <RegionAU915NextChannel+0x15c>)
 8011c12:	23e1      	movs	r3, #225	; 0xe1
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	5ad3      	ldrh	r3, [r2, r3]
 8011c18:	001a      	movs	r2, r3
 8011c1a:	23ff      	movs	r3, #255	; 0xff
 8011c1c:	4013      	ands	r3, r2
 8011c1e:	d107      	bne.n	8011c30 <RegionAU915NextChannel+0x78>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 8011c20:	4a3c      	ldr	r2, [pc, #240]	; (8011d14 <RegionAU915NextChannel+0x15c>)
 8011c22:	23de      	movs	r3, #222	; 0xde
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	5ad1      	ldrh	r1, [r2, r3]
 8011c28:	4a3a      	ldr	r2, [pc, #232]	; (8011d14 <RegionAU915NextChannel+0x15c>)
 8011c2a:	23e1      	movs	r3, #225	; 0xe1
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	52d1      	strh	r1, [r2, r3]
        }
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681c      	ldr	r4, [r3, #0]
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	0018      	movs	r0, r3
 8011c3a:	f00b f810 	bl	801cc5e <TimerGetElapsedTime>
 8011c3e:	0003      	movs	r3, r0
 8011c40:	429c      	cmp	r4, r3
 8011c42:	d821      	bhi.n	8011c88 <RegionAU915NextChannel+0xd0>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	2200      	movs	r2, #0
 8011c48:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AU915_MAX_NB_BANDS );
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	7a58      	ldrb	r0, [r3, #9]
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	7a99      	ldrb	r1, [r3, #10]
 8011c52:	4a31      	ldr	r2, [pc, #196]	; (8011d18 <RegionAU915NextChannel+0x160>)
 8011c54:	2301      	movs	r3, #1
 8011c56:	f002 fc86 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 8011c5a:	0003      	movs	r3, r0
 8011c5c:	663b      	str	r3, [r7, #96]	; 0x60

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	7a1b      	ldrb	r3, [r3, #8]
 8011c62:	b25b      	sxtb	r3, r3
 8011c64:	b2d8      	uxtb	r0, r3
 8011c66:	2367      	movs	r3, #103	; 0x67
 8011c68:	18fc      	adds	r4, r7, r3
 8011c6a:	4d2b      	ldr	r5, [pc, #172]	; (8011d18 <RegionAU915NextChannel+0x160>)
 8011c6c:	4a29      	ldr	r2, [pc, #164]	; (8011d14 <RegionAU915NextChannel+0x15c>)
 8011c6e:	4927      	ldr	r1, [pc, #156]	; (8011d0c <RegionAU915NextChannel+0x154>)
 8011c70:	235f      	movs	r3, #95	; 0x5f
 8011c72:	18fb      	adds	r3, r7, r3
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	2314      	movs	r3, #20
 8011c78:	18fb      	adds	r3, r7, r3
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	002b      	movs	r3, r5
 8011c7e:	f7fe ff29 	bl	8010ad4 <CountNbOfEnabledChannels>
 8011c82:	0003      	movs	r3, r0
 8011c84:	7023      	strb	r3, [r4, #0]
 8011c86:	e010      	b.n	8011caa <RegionAU915NextChannel+0xf2>
                                                      NvmCtx.ChannelsMaskRemaining, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8011c88:	215f      	movs	r1, #95	; 0x5f
 8011c8a:	187b      	adds	r3, r7, r1
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	b2da      	uxtb	r2, r3
 8011c92:	187b      	adds	r3, r7, r1
 8011c94:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681c      	ldr	r4, [r3, #0]
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	0018      	movs	r0, r3
 8011ca0:	f00a ffdd 	bl	801cc5e <TimerGetElapsedTime>
 8011ca4:	0003      	movs	r3, r0
 8011ca6:	1ae3      	subs	r3, r4, r3
 8011ca8:	663b      	str	r3, [r7, #96]	; 0x60
    }

    if( nbEnabledChannels > 0 )
 8011caa:	2367      	movs	r3, #103	; 0x67
 8011cac:	18fb      	adds	r3, r7, r3
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d019      	beq.n	8011ce8 <RegionAU915NextChannel+0x130>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011cb4:	2367      	movs	r3, #103	; 0x67
 8011cb6:	18fb      	adds	r3, r7, r3
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	0019      	movs	r1, r3
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	f00a fff6 	bl	801ccb0 <randr>
 8011cc4:	0002      	movs	r2, r0
 8011cc6:	2314      	movs	r3, #20
 8011cc8:	18fb      	adds	r3, r7, r3
 8011cca:	5c9a      	ldrb	r2, [r3, r2]
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	701a      	strb	r2, [r3, #0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	7819      	ldrb	r1, [r3, #0]
 8011cd4:	4b0d      	ldr	r3, [pc, #52]	; (8011d0c <RegionAU915NextChannel+0x154>)
 8011cd6:	2240      	movs	r2, #64	; 0x40
 8011cd8:	0018      	movs	r0, r3
 8011cda:	f002 fb77 	bl	80143cc <RegionCommonChanDisable>

        *time = 0;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	e00d      	b.n	8011d04 <RegionAU915NextChannel+0x14c>
    }
    else
    {
        if( delayTx > 0 )
 8011ce8:	235f      	movs	r3, #95	; 0x5f
 8011cea:	18fb      	adds	r3, r7, r3
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d004      	beq.n	8011cfc <RegionAU915NextChannel+0x144>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011cf6:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8011cf8:	230b      	movs	r3, #11
 8011cfa:	e003      	b.n	8011d04 <RegionAU915NextChannel+0x14c>
        }
        // Datarate not supported by any channel
        *time = 0;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8011d02:	230c      	movs	r3, #12
    }
}
 8011d04:	0018      	movs	r0, r3
 8011d06:	46bd      	mov	sp, r7
 8011d08:	b01a      	add	sp, #104	; 0x68
 8011d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8011d0c:	20000ea4 	.word	0x20000ea4
 8011d10:	20000e98 	.word	0x20000e98
 8011d14:	20000b28 	.word	0x20000b28
 8011d18:	20000e88 	.word	0x20000e88

08011d1c <RegionAU915ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8011d1c:	b5b0      	push	{r4, r5, r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	0004      	movs	r4, r0
 8011d24:	0008      	movs	r0, r1
 8011d26:	0011      	movs	r1, r2
 8011d28:	1dfb      	adds	r3, r7, #7
 8011d2a:	1c22      	adds	r2, r4, #0
 8011d2c:	701a      	strb	r2, [r3, #0]
 8011d2e:	1dbb      	adds	r3, r7, #6
 8011d30:	1c02      	adds	r2, r0, #0
 8011d32:	701a      	strb	r2, [r3, #0]
 8011d34:	1d7b      	adds	r3, r7, #5
 8011d36:	1c0a      	adds	r2, r1, #0
 8011d38:	701a      	strb	r2, [r3, #0]
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 8011d3a:	1dbb      	adds	r3, r7, #6
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	569a      	ldrsb	r2, [r3, r2]
 8011d40:	1d7b      	adds	r3, r7, #5
 8011d42:	2000      	movs	r0, #0
 8011d44:	5618      	ldrsb	r0, [r3, r0]
 8011d46:	250f      	movs	r5, #15
 8011d48:	1979      	adds	r1, r7, r5
 8011d4a:	4c10      	ldr	r4, [pc, #64]	; (8011d8c <RegionAU915ApplyDrOffset+0x70>)
 8011d4c:	0013      	movs	r3, r2
 8011d4e:	005b      	lsls	r3, r3, #1
 8011d50:	189b      	adds	r3, r3, r2
 8011d52:	005b      	lsls	r3, r3, #1
 8011d54:	18e3      	adds	r3, r4, r3
 8011d56:	5c1b      	ldrb	r3, [r3, r0]
 8011d58:	700b      	strb	r3, [r1, #0]

    if( datarate < 0 )
 8011d5a:	197b      	adds	r3, r7, r5
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8011d60:	d90c      	bls.n	8011d7c <RegionAU915ApplyDrOffset+0x60>
    {
        if( downlinkDwellTime == 0 )
 8011d62:	1dfb      	adds	r3, r7, #7
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d104      	bne.n	8011d74 <RegionAU915ApplyDrOffset+0x58>
        {
            datarate = AU915_TX_MIN_DATARATE;
 8011d6a:	230f      	movs	r3, #15
 8011d6c:	18fb      	adds	r3, r7, r3
 8011d6e:	2200      	movs	r2, #0
 8011d70:	701a      	strb	r2, [r3, #0]
 8011d72:	e003      	b.n	8011d7c <RegionAU915ApplyDrOffset+0x60>
        }
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
 8011d74:	230f      	movs	r3, #15
 8011d76:	18fb      	adds	r3, r7, r3
 8011d78:	2202      	movs	r2, #2
 8011d7a:	701a      	strb	r2, [r3, #0]
        }
    }
    return datarate;
 8011d7c:	230f      	movs	r3, #15
 8011d7e:	18fb      	adds	r3, r7, r3
 8011d80:	781b      	ldrb	r3, [r3, #0]
}
 8011d82:	0018      	movs	r0, r3
 8011d84:	46bd      	mov	sp, r7
 8011d86:	b004      	add	sp, #16
 8011d88:	bdb0      	pop	{r4, r5, r7, pc}
 8011d8a:	46c0      	nop			; (mov r8, r8)
 8011d8c:	08027f8c 	.word	0x08027f8c

08011d90 <GetNextLowerTxDr>:
 */
static RegionCN470NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	0002      	movs	r2, r0
 8011d98:	1dfb      	adds	r3, r7, #7
 8011d9a:	701a      	strb	r2, [r3, #0]
 8011d9c:	1dbb      	adds	r3, r7, #6
 8011d9e:	1c0a      	adds	r2, r1, #0
 8011da0:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8011da2:	230f      	movs	r3, #15
 8011da4:	18fb      	adds	r3, r7, r3
 8011da6:	2200      	movs	r2, #0
 8011da8:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8011daa:	1dfa      	adds	r2, r7, #7
 8011dac:	1dbb      	adds	r3, r7, #6
 8011dae:	7812      	ldrb	r2, [r2, #0]
 8011db0:	b252      	sxtb	r2, r2
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	b25b      	sxtb	r3, r3
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d105      	bne.n	8011dc6 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8011dba:	230f      	movs	r3, #15
 8011dbc:	18fb      	adds	r3, r7, r3
 8011dbe:	1dba      	adds	r2, r7, #6
 8011dc0:	7812      	ldrb	r2, [r2, #0]
 8011dc2:	701a      	strb	r2, [r3, #0]
 8011dc4:	e005      	b.n	8011dd2 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8011dc6:	1dfb      	adds	r3, r7, #7
 8011dc8:	781a      	ldrb	r2, [r3, #0]
 8011dca:	230f      	movs	r3, #15
 8011dcc:	18fb      	adds	r3, r7, r3
 8011dce:	3a01      	subs	r2, #1
 8011dd0:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8011dd2:	230f      	movs	r3, #15
 8011dd4:	18fb      	adds	r3, r7, r3
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	b25b      	sxtb	r3, r3
}
 8011dda:	0018      	movs	r0, r3
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	b004      	add	sp, #16
 8011de0:	bd80      	pop	{r7, pc}
	...

08011de4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
    switch( BandwidthsCN470[drIndex] )
 8011dec:	4b09      	ldr	r3, [pc, #36]	; (8011e14 <GetBandwidth+0x30>)
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	0092      	lsls	r2, r2, #2
 8011df2:	58d3      	ldr	r3, [r2, r3]
 8011df4:	4a08      	ldr	r2, [pc, #32]	; (8011e18 <GetBandwidth+0x34>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d004      	beq.n	8011e04 <GetBandwidth+0x20>
 8011dfa:	4a08      	ldr	r2, [pc, #32]	; (8011e1c <GetBandwidth+0x38>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d003      	beq.n	8011e08 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8011e00:	2300      	movs	r3, #0
 8011e02:	e002      	b.n	8011e0a <GetBandwidth+0x26>
        case 250000:
            return 1;
 8011e04:	2301      	movs	r3, #1
 8011e06:	e000      	b.n	8011e0a <GetBandwidth+0x26>
        case 500000:
            return 2;
 8011e08:	2302      	movs	r3, #2
    }
}
 8011e0a:	0018      	movs	r0, r3
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	b002      	add	sp, #8
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	46c0      	nop			; (mov r8, r8)
 8011e14:	080280d4 	.word	0x080280d4
 8011e18:	0003d090 	.word	0x0003d090
 8011e1c:	0007a120 	.word	0x0007a120

08011e20 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8011e20:	b590      	push	{r4, r7, lr}
 8011e22:	b085      	sub	sp, #20
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	0004      	movs	r4, r0
 8011e28:	0008      	movs	r0, r1
 8011e2a:	0011      	movs	r1, r2
 8011e2c:	603b      	str	r3, [r7, #0]
 8011e2e:	1dfb      	adds	r3, r7, #7
 8011e30:	1c22      	adds	r2, r4, #0
 8011e32:	701a      	strb	r2, [r3, #0]
 8011e34:	1dbb      	adds	r3, r7, #6
 8011e36:	1c02      	adds	r2, r0, #0
 8011e38:	701a      	strb	r2, [r3, #0]
 8011e3a:	1d7b      	adds	r3, r7, #5
 8011e3c:	1c0a      	adds	r2, r1, #0
 8011e3e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8011e40:	210f      	movs	r1, #15
 8011e42:	187b      	adds	r3, r7, r1
 8011e44:	1dfa      	adds	r2, r7, #7
 8011e46:	7812      	ldrb	r2, [r2, #0]
 8011e48:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8011e4a:	187a      	adds	r2, r7, r1
 8011e4c:	1dbb      	adds	r3, r7, #6
 8011e4e:	1df9      	adds	r1, r7, #7
 8011e50:	780c      	ldrb	r4, [r1, #0]
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	b258      	sxtb	r0, r3
 8011e56:	b261      	sxtb	r1, r4
 8011e58:	4288      	cmp	r0, r1
 8011e5a:	da00      	bge.n	8011e5e <LimitTxPower+0x3e>
 8011e5c:	1c23      	adds	r3, r4, #0
 8011e5e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8011e60:	230f      	movs	r3, #15
 8011e62:	18fb      	adds	r3, r7, r3
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	b25b      	sxtb	r3, r3
}
 8011e68:	0018      	movs	r0, r3
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	b005      	add	sp, #20
 8011e6e:	bd90      	pop	{r4, r7, pc}

08011e70 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011e78:	4b18      	ldr	r3, [pc, #96]	; (8011edc <VerifyRfFreq+0x6c>)
 8011e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	0010      	movs	r0, r2
 8011e80:	4798      	blx	r3
 8011e82:	0003      	movs	r3, r0
 8011e84:	001a      	movs	r2, r3
 8011e86:	2301      	movs	r3, #1
 8011e88:	4053      	eors	r3, r2
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d001      	beq.n	8011e94 <VerifyRfFreq+0x24>
    {
        return false;
 8011e90:	2300      	movs	r3, #0
 8011e92:	e01e      	b.n	8011ed2 <VerifyRfFreq+0x62>
    }

    // Rx frequencies
    if( ( freq < CN470_FIRST_RX1_CHANNEL ) ||
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	4a12      	ldr	r2, [pc, #72]	; (8011ee0 <VerifyRfFreq+0x70>)
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d90d      	bls.n	8011eb8 <VerifyRfFreq+0x48>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	4a11      	ldr	r2, [pc, #68]	; (8011ee4 <VerifyRfFreq+0x74>)
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	d809      	bhi.n	8011eb8 <VerifyRfFreq+0x48>
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) CN470_FIRST_RX1_CHANNEL ) % ( uint32_t ) CN470_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	4a10      	ldr	r2, [pc, #64]	; (8011ee8 <VerifyRfFreq+0x78>)
 8011ea8:	4694      	mov	ip, r2
 8011eaa:	4463      	add	r3, ip
 8011eac:	490f      	ldr	r1, [pc, #60]	; (8011eec <VerifyRfFreq+0x7c>)
 8011eae:	0018      	movs	r0, r3
 8011eb0:	f7ee f9b8 	bl	8000224 <__aeabi_uidivmod>
 8011eb4:	1e0b      	subs	r3, r1, #0
        ( freq > CN470_LAST_RX1_CHANNEL ) ||
 8011eb6:	d001      	beq.n	8011ebc <VerifyRfFreq+0x4c>
    {
        return false;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	e00a      	b.n	8011ed2 <VerifyRfFreq+0x62>
    }

    // Test for frequency range - take RX and TX freqencies into account
    if( ( freq < 470300000 ) ||  ( freq > 509700000 ) )
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	4a0c      	ldr	r2, [pc, #48]	; (8011ef0 <VerifyRfFreq+0x80>)
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	d903      	bls.n	8011ecc <VerifyRfFreq+0x5c>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	4a07      	ldr	r2, [pc, #28]	; (8011ee4 <VerifyRfFreq+0x74>)
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d901      	bls.n	8011ed0 <VerifyRfFreq+0x60>
    {
        return false;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	e000      	b.n	8011ed2 <VerifyRfFreq+0x62>
    }
    return true;
 8011ed0:	2301      	movs	r3, #1
}
 8011ed2:	0018      	movs	r0, r3
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	b002      	add	sp, #8
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	46c0      	nop			; (mov r8, r8)
 8011edc:	08028964 	.word	0x08028964
 8011ee0:	1dd1f8df 	.word	0x1dd1f8df
 8011ee4:	1e6167a0 	.word	0x1e6167a0
 8011ee8:	e22e0720 	.word	0xe22e0720
 8011eec:	00030d40 	.word	0x00030d40
 8011ef0:	1c08355f 	.word	0x1c08355f

08011ef4 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8011ef4:	b5b0      	push	{r4, r5, r7, lr}
 8011ef6:	b086      	sub	sp, #24
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	60b9      	str	r1, [r7, #8]
 8011efc:	607a      	str	r2, [r7, #4]
 8011efe:	603b      	str	r3, [r7, #0]
 8011f00:	230f      	movs	r3, #15
 8011f02:	18fb      	adds	r3, r7, r3
 8011f04:	1c02      	adds	r2, r0, #0
 8011f06:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8011f08:	2317      	movs	r3, #23
 8011f0a:	18fb      	adds	r3, r7, r3
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8011f10:	2316      	movs	r3, #22
 8011f12:	18fb      	adds	r3, r7, r3
 8011f14:	2200      	movs	r2, #0
 8011f16:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < CN470_MAX_NB_CHANNELS; i += 16, k++ )
 8011f18:	2315      	movs	r3, #21
 8011f1a:	18fb      	adds	r3, r7, r3
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	701a      	strb	r2, [r3, #0]
 8011f20:	2314      	movs	r3, #20
 8011f22:	18fb      	adds	r3, r7, r3
 8011f24:	2200      	movs	r2, #0
 8011f26:	701a      	strb	r2, [r3, #0]
 8011f28:	e0a0      	b.n	801206c <CountNbOfEnabledChannels+0x178>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8011f2a:	2313      	movs	r3, #19
 8011f2c:	18fb      	adds	r3, r7, r3
 8011f2e:	2200      	movs	r2, #0
 8011f30:	701a      	strb	r2, [r3, #0]
 8011f32:	e089      	b.n	8012048 <CountNbOfEnabledChannels+0x154>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8011f34:	2314      	movs	r3, #20
 8011f36:	18fb      	adds	r3, r7, r3
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	005b      	lsls	r3, r3, #1
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	18d3      	adds	r3, r2, r3
 8011f40:	881b      	ldrh	r3, [r3, #0]
 8011f42:	001a      	movs	r2, r3
 8011f44:	2313      	movs	r3, #19
 8011f46:	18fb      	adds	r3, r7, r3
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	411a      	asrs	r2, r3
 8011f4c:	0013      	movs	r3, r2
 8011f4e:	2201      	movs	r2, #1
 8011f50:	4013      	ands	r3, r2
 8011f52:	d073      	beq.n	801203c <CountNbOfEnabledChannels+0x148>
            {
                if( channels[i + j].Frequency == 0 )
 8011f54:	2315      	movs	r3, #21
 8011f56:	18fb      	adds	r3, r7, r3
 8011f58:	781a      	ldrb	r2, [r3, #0]
 8011f5a:	2313      	movs	r3, #19
 8011f5c:	18fb      	adds	r3, r7, r3
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	18d3      	adds	r3, r2, r3
 8011f62:	001a      	movs	r2, r3
 8011f64:	0013      	movs	r3, r2
 8011f66:	005b      	lsls	r3, r3, #1
 8011f68:	189b      	adds	r3, r3, r2
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	001a      	movs	r2, r3
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	189b      	adds	r3, r3, r2
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d05e      	beq.n	8012036 <CountNbOfEnabledChannels+0x142>
                { // Check if the channel is enabled
                    continue;
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8011f78:	230f      	movs	r3, #15
 8011f7a:	18fb      	adds	r3, r7, r3
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	5618      	ldrsb	r0, [r3, r0]
 8011f80:	2415      	movs	r4, #21
 8011f82:	193b      	adds	r3, r7, r4
 8011f84:	781a      	ldrb	r2, [r3, #0]
 8011f86:	2513      	movs	r5, #19
 8011f88:	197b      	adds	r3, r7, r5
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	18d3      	adds	r3, r2, r3
 8011f8e:	001a      	movs	r2, r3
 8011f90:	0013      	movs	r3, r2
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	189b      	adds	r3, r3, r2
 8011f96:	009b      	lsls	r3, r3, #2
 8011f98:	001a      	movs	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	189b      	adds	r3, r3, r2
 8011f9e:	7a1b      	ldrb	r3, [r3, #8]
 8011fa0:	011b      	lsls	r3, r3, #4
 8011fa2:	b25b      	sxtb	r3, r3
 8011fa4:	111b      	asrs	r3, r3, #4
 8011fa6:	b25b      	sxtb	r3, r3
 8011fa8:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8011faa:	193b      	adds	r3, r7, r4
 8011fac:	781a      	ldrb	r2, [r3, #0]
 8011fae:	197b      	adds	r3, r7, r5
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	18d3      	adds	r3, r2, r3
 8011fb4:	001a      	movs	r2, r3
 8011fb6:	0013      	movs	r3, r2
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	189b      	adds	r3, r3, r2
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	001a      	movs	r2, r3
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	189b      	adds	r3, r3, r2
 8011fc4:	7a1b      	ldrb	r3, [r3, #8]
 8011fc6:	b25b      	sxtb	r3, r3
 8011fc8:	111b      	asrs	r3, r3, #4
 8011fca:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8011fcc:	001a      	movs	r2, r3
 8011fce:	f002 f9d7 	bl	8014380 <RegionCommonValueInRange>
 8011fd2:	1e03      	subs	r3, r0, #0
 8011fd4:	d031      	beq.n	801203a <CountNbOfEnabledChannels+0x146>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8011fd6:	2315      	movs	r3, #21
 8011fd8:	18fb      	adds	r3, r7, r3
 8011fda:	781a      	ldrb	r2, [r3, #0]
 8011fdc:	2313      	movs	r3, #19
 8011fde:	18fb      	adds	r3, r7, r3
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	18d3      	adds	r3, r2, r3
 8011fe4:	001a      	movs	r2, r3
 8011fe6:	0013      	movs	r3, r2
 8011fe8:	005b      	lsls	r3, r3, #1
 8011fea:	189b      	adds	r3, r3, r2
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	001a      	movs	r2, r3
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	189b      	adds	r3, r3, r2
 8011ff4:	7a5b      	ldrb	r3, [r3, #9]
 8011ff6:	011b      	lsls	r3, r3, #4
 8011ff8:	683a      	ldr	r2, [r7, #0]
 8011ffa:	18d3      	adds	r3, r2, r3
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d006      	beq.n	8012010 <CountNbOfEnabledChannels+0x11c>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8012002:	2116      	movs	r1, #22
 8012004:	187b      	adds	r3, r7, r1
 8012006:	781a      	ldrb	r2, [r3, #0]
 8012008:	187b      	adds	r3, r7, r1
 801200a:	3201      	adds	r2, #1
 801200c:	701a      	strb	r2, [r3, #0]
                    continue;
 801200e:	e015      	b.n	801203c <CountNbOfEnabledChannels+0x148>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8012010:	2217      	movs	r2, #23
 8012012:	18bb      	adds	r3, r7, r2
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	18ba      	adds	r2, r7, r2
 8012018:	1c59      	adds	r1, r3, #1
 801201a:	7011      	strb	r1, [r2, #0]
 801201c:	001a      	movs	r2, r3
 801201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012020:	189b      	adds	r3, r3, r2
 8012022:	2215      	movs	r2, #21
 8012024:	18b9      	adds	r1, r7, r2
 8012026:	2213      	movs	r2, #19
 8012028:	18ba      	adds	r2, r7, r2
 801202a:	7809      	ldrb	r1, [r1, #0]
 801202c:	7812      	ldrb	r2, [r2, #0]
 801202e:	188a      	adds	r2, r1, r2
 8012030:	b2d2      	uxtb	r2, r2
 8012032:	701a      	strb	r2, [r3, #0]
 8012034:	e002      	b.n	801203c <CountNbOfEnabledChannels+0x148>
                    continue;
 8012036:	46c0      	nop			; (mov r8, r8)
 8012038:	e000      	b.n	801203c <CountNbOfEnabledChannels+0x148>
                    continue;
 801203a:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801203c:	2113      	movs	r1, #19
 801203e:	187b      	adds	r3, r7, r1
 8012040:	781a      	ldrb	r2, [r3, #0]
 8012042:	187b      	adds	r3, r7, r1
 8012044:	3201      	adds	r2, #1
 8012046:	701a      	strb	r2, [r3, #0]
 8012048:	2313      	movs	r3, #19
 801204a:	18fb      	adds	r3, r7, r3
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b0f      	cmp	r3, #15
 8012050:	d800      	bhi.n	8012054 <CountNbOfEnabledChannels+0x160>
 8012052:	e76f      	b.n	8011f34 <CountNbOfEnabledChannels+0x40>
    for( uint8_t i = 0, k = 0; i < CN470_MAX_NB_CHANNELS; i += 16, k++ )
 8012054:	2215      	movs	r2, #21
 8012056:	18bb      	adds	r3, r7, r2
 8012058:	18ba      	adds	r2, r7, r2
 801205a:	7812      	ldrb	r2, [r2, #0]
 801205c:	3210      	adds	r2, #16
 801205e:	701a      	strb	r2, [r3, #0]
 8012060:	2114      	movs	r1, #20
 8012062:	187b      	adds	r3, r7, r1
 8012064:	781a      	ldrb	r2, [r3, #0]
 8012066:	187b      	adds	r3, r7, r1
 8012068:	3201      	adds	r2, #1
 801206a:	701a      	strb	r2, [r3, #0]
 801206c:	2315      	movs	r3, #21
 801206e:	18fb      	adds	r3, r7, r3
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	2b5f      	cmp	r3, #95	; 0x5f
 8012074:	d800      	bhi.n	8012078 <CountNbOfEnabledChannels+0x184>
 8012076:	e758      	b.n	8011f2a <CountNbOfEnabledChannels+0x36>
            }
        }
    }

    *delayTx = delayTransmission;
 8012078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207a:	2216      	movs	r2, #22
 801207c:	18ba      	adds	r2, r7, r2
 801207e:	7812      	ldrb	r2, [r2, #0]
 8012080:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8012082:	2317      	movs	r3, #23
 8012084:	18fb      	adds	r3, r7, r3
 8012086:	781b      	ldrb	r3, [r3, #0]
}
 8012088:	0018      	movs	r0, r3
 801208a:	46bd      	mov	sp, r7
 801208c:	b006      	add	sp, #24
 801208e:	bdb0      	pop	{r4, r5, r7, pc}

08012090 <RegionCN470GetPhyParam>:

PhyParam_t RegionCN470GetPhyParam( GetPhyParams_t* getPhy )
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8012098:	2308      	movs	r3, #8
 801209a:	18fb      	adds	r3, r7, r3
 801209c:	2200      	movs	r2, #0
 801209e:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	2b34      	cmp	r3, #52	; 0x34
 80120a6:	d900      	bls.n	80120aa <RegionCN470GetPhyParam+0x1a>
 80120a8:	e0d2      	b.n	8012250 <RegionCN470GetPhyParam+0x1c0>
 80120aa:	009a      	lsls	r2, r3, #2
 80120ac:	4b70      	ldr	r3, [pc, #448]	; (8012270 <RegionCN470GetPhyParam+0x1e0>)
 80120ae:	18d3      	adds	r3, r2, r3
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = CN470_RX_MIN_DATARATE;
 80120b4:	2308      	movs	r3, #8
 80120b6:	18fb      	adds	r3, r7, r3
 80120b8:	2200      	movs	r2, #0
 80120ba:	601a      	str	r2, [r3, #0]
            break;
 80120bc:	e0c9      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = CN470_TX_MIN_DATARATE;
 80120be:	2308      	movs	r3, #8
 80120c0:	18fb      	adds	r3, r7, r3
 80120c2:	2200      	movs	r2, #0
 80120c4:	601a      	str	r2, [r3, #0]
            break;
 80120c6:	e0c4      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = CN470_DEFAULT_DATARATE;
 80120c8:	2308      	movs	r3, #8
 80120ca:	18fb      	adds	r3, r7, r3
 80120cc:	2200      	movs	r2, #0
 80120ce:	601a      	str	r2, [r3, #0]
            break;
 80120d0:	e0bf      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, CN470_TX_MIN_DATARATE );
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	785b      	ldrb	r3, [r3, #1]
 80120d6:	b25b      	sxtb	r3, r3
 80120d8:	2100      	movs	r1, #0
 80120da:	0018      	movs	r0, r3
 80120dc:	f7ff fe58 	bl	8011d90 <GetNextLowerTxDr>
 80120e0:	0003      	movs	r3, r0
 80120e2:	001a      	movs	r2, r3
 80120e4:	2308      	movs	r3, #8
 80120e6:	18fb      	adds	r3, r7, r3
 80120e8:	601a      	str	r2, [r3, #0]
            break;
 80120ea:	e0b2      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = CN470_MAX_TX_POWER;
 80120ec:	2308      	movs	r3, #8
 80120ee:	18fb      	adds	r3, r7, r3
 80120f0:	2200      	movs	r2, #0
 80120f2:	601a      	str	r2, [r3, #0]
            break;
 80120f4:	e0ad      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = CN470_DEFAULT_TX_POWER;
 80120f6:	2308      	movs	r3, #8
 80120f8:	18fb      	adds	r3, r7, r3
 80120fa:	2200      	movs	r2, #0
 80120fc:	601a      	str	r2, [r3, #0]
            break;
 80120fe:	e0a8      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = CN470_ADR_ACK_LIMIT;
 8012100:	2308      	movs	r3, #8
 8012102:	18fb      	adds	r3, r7, r3
 8012104:	2240      	movs	r2, #64	; 0x40
 8012106:	601a      	str	r2, [r3, #0]
            break;
 8012108:	e0a3      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = CN470_ADR_ACK_DELAY;
 801210a:	2308      	movs	r3, #8
 801210c:	18fb      	adds	r3, r7, r3
 801210e:	2220      	movs	r2, #32
 8012110:	601a      	str	r2, [r3, #0]
            break;
 8012112:	e09e      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateCN470[getPhy->Datarate];
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	785b      	ldrb	r3, [r3, #1]
 8012118:	b25b      	sxtb	r3, r3
 801211a:	001a      	movs	r2, r3
 801211c:	4b55      	ldr	r3, [pc, #340]	; (8012274 <RegionCN470GetPhyParam+0x1e4>)
 801211e:	5c9b      	ldrb	r3, [r3, r2]
 8012120:	001a      	movs	r2, r3
 8012122:	2308      	movs	r3, #8
 8012124:	18fb      	adds	r3, r7, r3
 8012126:	601a      	str	r2, [r3, #0]
            break;
 8012128:	e093      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN470[getPhy->Datarate];
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	785b      	ldrb	r3, [r3, #1]
 801212e:	b25b      	sxtb	r3, r3
 8012130:	001a      	movs	r2, r3
 8012132:	4b51      	ldr	r3, [pc, #324]	; (8012278 <RegionCN470GetPhyParam+0x1e8>)
 8012134:	5c9b      	ldrb	r3, [r3, r2]
 8012136:	001a      	movs	r2, r3
 8012138:	2308      	movs	r3, #8
 801213a:	18fb      	adds	r3, r7, r3
 801213c:	601a      	str	r2, [r3, #0]
            break;
 801213e:	e088      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = CN470_DUTY_CYCLE_ENABLED;
 8012140:	2308      	movs	r3, #8
 8012142:	18fb      	adds	r3, r7, r3
 8012144:	2200      	movs	r2, #0
 8012146:	601a      	str	r2, [r3, #0]
            break;
 8012148:	e083      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = CN470_MAX_RX_WINDOW;
 801214a:	2308      	movs	r3, #8
 801214c:	18fb      	adds	r3, r7, r3
 801214e:	4a4b      	ldr	r2, [pc, #300]	; (801227c <RegionCN470GetPhyParam+0x1ec>)
 8012150:	601a      	str	r2, [r3, #0]
            break;
 8012152:	e07e      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = CN470_RECEIVE_DELAY1;
 8012154:	2308      	movs	r3, #8
 8012156:	18fb      	adds	r3, r7, r3
 8012158:	22fa      	movs	r2, #250	; 0xfa
 801215a:	0092      	lsls	r2, r2, #2
 801215c:	601a      	str	r2, [r3, #0]
            break;
 801215e:	e078      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = CN470_RECEIVE_DELAY2;
 8012160:	2308      	movs	r3, #8
 8012162:	18fb      	adds	r3, r7, r3
 8012164:	22fa      	movs	r2, #250	; 0xfa
 8012166:	00d2      	lsls	r2, r2, #3
 8012168:	601a      	str	r2, [r3, #0]
            break;
 801216a:	e072      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = CN470_JOIN_ACCEPT_DELAY1;
 801216c:	2308      	movs	r3, #8
 801216e:	18fb      	adds	r3, r7, r3
 8012170:	4a43      	ldr	r2, [pc, #268]	; (8012280 <RegionCN470GetPhyParam+0x1f0>)
 8012172:	601a      	str	r2, [r3, #0]
            break;
 8012174:	e06d      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = CN470_JOIN_ACCEPT_DELAY2;
 8012176:	2308      	movs	r3, #8
 8012178:	18fb      	adds	r3, r7, r3
 801217a:	4a42      	ldr	r2, [pc, #264]	; (8012284 <RegionCN470GetPhyParam+0x1f4>)
 801217c:	601a      	str	r2, [r3, #0]
            break;
 801217e:	e068      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = CN470_MAX_FCNT_GAP;
 8012180:	2308      	movs	r3, #8
 8012182:	18fb      	adds	r3, r7, r3
 8012184:	2280      	movs	r2, #128	; 0x80
 8012186:	01d2      	lsls	r2, r2, #7
 8012188:	601a      	str	r2, [r3, #0]
            break;
 801218a:	e062      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( CN470_ACKTIMEOUT + randr( -CN470_ACK_TIMEOUT_RND, CN470_ACK_TIMEOUT_RND ) );
 801218c:	23fa      	movs	r3, #250	; 0xfa
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	4a3d      	ldr	r2, [pc, #244]	; (8012288 <RegionCN470GetPhyParam+0x1f8>)
 8012192:	0019      	movs	r1, r3
 8012194:	0010      	movs	r0, r2
 8012196:	f00a fd8b 	bl	801ccb0 <randr>
 801219a:	0003      	movs	r3, r0
 801219c:	22fa      	movs	r2, #250	; 0xfa
 801219e:	00d2      	lsls	r2, r2, #3
 80121a0:	4694      	mov	ip, r2
 80121a2:	4463      	add	r3, ip
 80121a4:	001a      	movs	r2, r3
 80121a6:	2308      	movs	r3, #8
 80121a8:	18fb      	adds	r3, r7, r3
 80121aa:	601a      	str	r2, [r3, #0]
            break;
 80121ac:	e051      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = CN470_DEFAULT_RX1_DR_OFFSET;
 80121ae:	2308      	movs	r3, #8
 80121b0:	18fb      	adds	r3, r7, r3
 80121b2:	2200      	movs	r2, #0
 80121b4:	601a      	str	r2, [r3, #0]
            break;
 80121b6:	e04c      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = CN470_RX_WND_2_FREQ;
 80121b8:	2308      	movs	r3, #8
 80121ba:	18fb      	adds	r3, r7, r3
 80121bc:	4a33      	ldr	r2, [pc, #204]	; (801228c <RegionCN470GetPhyParam+0x1fc>)
 80121be:	601a      	str	r2, [r3, #0]
            break;
 80121c0:	e047      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = CN470_RX_WND_2_DR;
 80121c2:	2308      	movs	r3, #8
 80121c4:	18fb      	adds	r3, r7, r3
 80121c6:	2200      	movs	r2, #0
 80121c8:	601a      	str	r2, [r3, #0]
            break;
 80121ca:	e042      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80121cc:	2308      	movs	r3, #8
 80121ce:	18fb      	adds	r3, r7, r3
 80121d0:	4a2f      	ldr	r2, [pc, #188]	; (8012290 <RegionCN470GetPhyParam+0x200>)
 80121d2:	601a      	str	r2, [r3, #0]
            break;
 80121d4:	e03d      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80121d6:	2308      	movs	r3, #8
 80121d8:	18fb      	adds	r3, r7, r3
 80121da:	4a2e      	ldr	r2, [pc, #184]	; (8012294 <RegionCN470GetPhyParam+0x204>)
 80121dc:	601a      	str	r2, [r3, #0]
            break;
 80121de:	e038      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = CN470_MAX_NB_CHANNELS;
 80121e0:	2308      	movs	r3, #8
 80121e2:	18fb      	adds	r3, r7, r3
 80121e4:	2260      	movs	r2, #96	; 0x60
 80121e6:	601a      	str	r2, [r3, #0]
            break;
 80121e8:	e033      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80121ea:	2308      	movs	r3, #8
 80121ec:	18fb      	adds	r3, r7, r3
 80121ee:	4a2a      	ldr	r2, [pc, #168]	; (8012298 <RegionCN470GetPhyParam+0x208>)
 80121f0:	601a      	str	r2, [r3, #0]
            break;
 80121f2:	e02e      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80121f4:	2308      	movs	r3, #8
 80121f6:	18fb      	adds	r3, r7, r3
 80121f8:	2200      	movs	r2, #0
 80121fa:	601a      	str	r2, [r3, #0]
            break;
 80121fc:	e029      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = CN470_DEFAULT_MAX_EIRP;
 80121fe:	2308      	movs	r3, #8
 8012200:	18fb      	adds	r3, r7, r3
 8012202:	4a26      	ldr	r2, [pc, #152]	; (801229c <RegionCN470GetPhyParam+0x20c>)
 8012204:	601a      	str	r2, [r3, #0]
            break;
 8012206:	e024      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = CN470_DEFAULT_ANTENNA_GAIN;
 8012208:	2308      	movs	r3, #8
 801220a:	18fb      	adds	r3, r7, r3
 801220c:	4a24      	ldr	r2, [pc, #144]	; (80122a0 <RegionCN470GetPhyParam+0x210>)
 801220e:	601a      	str	r2, [r3, #0]
            break;
 8012210:	e01f      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = CN470_BEACON_SIZE;
 8012212:	2108      	movs	r1, #8
 8012214:	187b      	adds	r3, r7, r1
 8012216:	2213      	movs	r2, #19
 8012218:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = CN470_RFU1_SIZE;
 801221a:	187b      	adds	r3, r7, r1
 801221c:	2203      	movs	r2, #3
 801221e:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = CN470_RFU2_SIZE;
 8012220:	187b      	adds	r3, r7, r1
 8012222:	2201      	movs	r2, #1
 8012224:	709a      	strb	r2, [r3, #2]
            break;
 8012226:	e014      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = CN470_BEACON_CHANNEL_DR;
 8012228:	2308      	movs	r3, #8
 801222a:	18fb      	adds	r3, r7, r3
 801222c:	2202      	movs	r2, #2
 801222e:	601a      	str	r2, [r3, #0]
            break;
 8012230:	e00f      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = CN470_BEACON_CHANNEL_STEPWIDTH;
 8012232:	2308      	movs	r3, #8
 8012234:	18fb      	adds	r3, r7, r3
 8012236:	4a1b      	ldr	r2, [pc, #108]	; (80122a4 <RegionCN470GetPhyParam+0x214>)
 8012238:	601a      	str	r2, [r3, #0]
            break;
 801223a:	e00a      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = CN470_BEACON_NB_CHANNELS;
 801223c:	2308      	movs	r3, #8
 801223e:	18fb      	adds	r3, r7, r3
 8012240:	2208      	movs	r2, #8
 8012242:	601a      	str	r2, [r3, #0]
            break;
 8012244:	e005      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = CN470_PING_SLOT_CHANNEL_DR;
 8012246:	2308      	movs	r3, #8
 8012248:	18fb      	adds	r3, r7, r3
 801224a:	2202      	movs	r2, #2
 801224c:	601a      	str	r2, [r3, #0]
            break;
 801224e:	e000      	b.n	8012252 <RegionCN470GetPhyParam+0x1c2>
        }
        default:
        {
            break;
 8012250:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8012252:	210c      	movs	r1, #12
 8012254:	187b      	adds	r3, r7, r1
 8012256:	2208      	movs	r2, #8
 8012258:	18ba      	adds	r2, r7, r2
 801225a:	6812      	ldr	r2, [r2, #0]
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	187b      	adds	r3, r7, r1
 8012260:	2200      	movs	r2, #0
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	0013      	movs	r3, r2
}
 8012266:	0018      	movs	r0, r3
 8012268:	46bd      	mov	sp, r7
 801226a:	b004      	add	sp, #16
 801226c:	bd80      	pop	{r7, pc}
 801226e:	46c0      	nop			; (mov r8, r8)
 8012270:	080280fc 	.word	0x080280fc
 8012274:	080280ec 	.word	0x080280ec
 8012278:	080280f4 	.word	0x080280f4
 801227c:	00000bb8 	.word	0x00000bb8
 8012280:	00001388 	.word	0x00001388
 8012284:	00001770 	.word	0x00001770
 8012288:	fffffc18 	.word	0xfffffc18
 801228c:	1e1e4420 	.word	0x1e1e4420
 8012290:	2000134c 	.word	0x2000134c
 8012294:	20001358 	.word	0x20001358
 8012298:	20000ebc 	.word	0x20000ebc
 801229c:	41993333 	.word	0x41993333
 80122a0:	4009999a 	.word	0x4009999a
 80122a4:	00030d40 	.word	0x00030d40

080122a8 <RegionCN470SetBandTxDone>:

void RegionCN470SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	7858      	ldrb	r0, [r3, #1]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	0019      	movs	r1, r3
 80122ba:	4a0a      	ldr	r2, [pc, #40]	; (80122e4 <RegionCN470SetBandTxDone+0x3c>)
 80122bc:	000b      	movs	r3, r1
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	185b      	adds	r3, r3, r1
 80122c2:	009b      	lsls	r3, r3, #2
 80122c4:	18d3      	adds	r3, r2, r3
 80122c6:	3309      	adds	r3, #9
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	3348      	adds	r3, #72	; 0x48
 80122cc:	011a      	lsls	r2, r3, #4
 80122ce:	4b05      	ldr	r3, [pc, #20]	; (80122e4 <RegionCN470SetBandTxDone+0x3c>)
 80122d0:	18d1      	adds	r1, r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	001a      	movs	r2, r3
 80122d8:	f002 f92a 	bl	8014530 <RegionCommonSetBandTxDone>
}
 80122dc:	46c0      	nop			; (mov r8, r8)
 80122de:	46bd      	mov	sp, r7
 80122e0:	b002      	add	sp, #8
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	20000ebc 	.word	0x20000ebc

080122e8 <RegionCN470InitDefaults>:

void RegionCN470InitDefaults( InitDefaultsParams_t* params )
{
 80122e8:	b590      	push	{r4, r7, lr}
 80122ea:	b089      	sub	sp, #36	; 0x24
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
    Band_t bands[CN470_MAX_NB_BANDS] =
 80122f0:	210c      	movs	r1, #12
 80122f2:	187b      	adds	r3, r7, r1
 80122f4:	2201      	movs	r2, #1
 80122f6:	801a      	strh	r2, [r3, #0]
 80122f8:	187b      	adds	r3, r7, r1
 80122fa:	2200      	movs	r2, #0
 80122fc:	709a      	strb	r2, [r3, #2]
 80122fe:	187b      	adds	r3, r7, r1
 8012300:	2200      	movs	r2, #0
 8012302:	605a      	str	r2, [r3, #4]
 8012304:	187b      	adds	r3, r7, r1
 8012306:	2200      	movs	r2, #0
 8012308:	609a      	str	r2, [r3, #8]
 801230a:	187b      	adds	r3, r7, r1
 801230c:	2200      	movs	r2, #0
 801230e:	60da      	str	r2, [r3, #12]
    {
        CN470_BAND0
    };

    switch( params->Type )
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	791b      	ldrb	r3, [r3, #4]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d100      	bne.n	801231a <RegionCN470InitDefaults+0x32>
 8012318:	e075      	b.n	8012406 <RegionCN470InitDefaults+0x11e>
 801231a:	2b02      	cmp	r3, #2
 801231c:	d066      	beq.n	80123ec <RegionCN470InitDefaults+0x104>
 801231e:	2b00      	cmp	r3, #0
 8012320:	d000      	beq.n	8012324 <RegionCN470InitDefaults+0x3c>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
            break;
        }
        default:
        {
            break;
 8012322:	e078      	b.n	8012416 <RegionCN470InitDefaults+0x12e>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN470_MAX_NB_BANDS );
 8012324:	230c      	movs	r3, #12
 8012326:	18f9      	adds	r1, r7, r3
 8012328:	4b3d      	ldr	r3, [pc, #244]	; (8012420 <RegionCN470InitDefaults+0x138>)
 801232a:	2210      	movs	r2, #16
 801232c:	0018      	movs	r0, r3
 801232e:	f00a fcd5 	bl	801ccdc <memcpy1>
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 8012332:	231f      	movs	r3, #31
 8012334:	18fb      	adds	r3, r7, r3
 8012336:	2200      	movs	r2, #0
 8012338:	701a      	strb	r2, [r3, #0]
 801233a:	e02c      	b.n	8012396 <RegionCN470InitDefaults+0xae>
                NvmCtx.Channels[i].Frequency = 470300000 + i * 200000;
 801233c:	201f      	movs	r0, #31
 801233e:	183b      	adds	r3, r7, r0
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	4a38      	ldr	r2, [pc, #224]	; (8012424 <RegionCN470InitDefaults+0x13c>)
 8012344:	4353      	muls	r3, r2
 8012346:	4a38      	ldr	r2, [pc, #224]	; (8012428 <RegionCN470InitDefaults+0x140>)
 8012348:	1899      	adds	r1, r3, r2
 801234a:	0004      	movs	r4, r0
 801234c:	183b      	adds	r3, r7, r0
 801234e:	781a      	ldrb	r2, [r3, #0]
 8012350:	0008      	movs	r0, r1
 8012352:	4936      	ldr	r1, [pc, #216]	; (801242c <RegionCN470InitDefaults+0x144>)
 8012354:	0013      	movs	r3, r2
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	189b      	adds	r3, r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801235e:	0020      	movs	r0, r4
 8012360:	183b      	adds	r3, r7, r0
 8012362:	781a      	ldrb	r2, [r3, #0]
 8012364:	4931      	ldr	r1, [pc, #196]	; (801242c <RegionCN470InitDefaults+0x144>)
 8012366:	0013      	movs	r3, r2
 8012368:	005b      	lsls	r3, r3, #1
 801236a:	189b      	adds	r3, r3, r2
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	18cb      	adds	r3, r1, r3
 8012370:	3308      	adds	r3, #8
 8012372:	2250      	movs	r2, #80	; 0x50
 8012374:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 8012376:	183b      	adds	r3, r7, r0
 8012378:	781a      	ldrb	r2, [r3, #0]
 801237a:	492c      	ldr	r1, [pc, #176]	; (801242c <RegionCN470InitDefaults+0x144>)
 801237c:	0013      	movs	r3, r2
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	189b      	adds	r3, r3, r2
 8012382:	009b      	lsls	r3, r3, #2
 8012384:	18cb      	adds	r3, r1, r3
 8012386:	3309      	adds	r3, #9
 8012388:	2200      	movs	r2, #0
 801238a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++ )
 801238c:	183b      	adds	r3, r7, r0
 801238e:	781a      	ldrb	r2, [r3, #0]
 8012390:	183b      	adds	r3, r7, r0
 8012392:	3201      	adds	r2, #1
 8012394:	701a      	strb	r2, [r3, #0]
 8012396:	231f      	movs	r3, #31
 8012398:	18fb      	adds	r3, r7, r3
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	2b5f      	cmp	r3, #95	; 0x5f
 801239e:	d9cd      	bls.n	801233c <RegionCN470InitDefaults+0x54>
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 80123a0:	4b22      	ldr	r3, [pc, #136]	; (801242c <RegionCN470InitDefaults+0x144>)
 80123a2:	4a23      	ldr	r2, [pc, #140]	; (8012430 <RegionCN470InitDefaults+0x148>)
 80123a4:	2101      	movs	r1, #1
 80123a6:	4249      	negs	r1, r1
 80123a8:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[1] = 0xFFFF;
 80123aa:	4b20      	ldr	r3, [pc, #128]	; (801242c <RegionCN470InitDefaults+0x144>)
 80123ac:	4a21      	ldr	r2, [pc, #132]	; (8012434 <RegionCN470InitDefaults+0x14c>)
 80123ae:	2101      	movs	r1, #1
 80123b0:	4249      	negs	r1, r1
 80123b2:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[2] = 0xFFFF;
 80123b4:	4a1d      	ldr	r2, [pc, #116]	; (801242c <RegionCN470InitDefaults+0x144>)
 80123b6:	2394      	movs	r3, #148	; 0x94
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	2101      	movs	r1, #1
 80123bc:	4249      	negs	r1, r1
 80123be:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[3] = 0xFFFF;
 80123c0:	4b1a      	ldr	r3, [pc, #104]	; (801242c <RegionCN470InitDefaults+0x144>)
 80123c2:	4a1d      	ldr	r2, [pc, #116]	; (8012438 <RegionCN470InitDefaults+0x150>)
 80123c4:	2101      	movs	r1, #1
 80123c6:	4249      	negs	r1, r1
 80123c8:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[4] = 0xFFFF;
 80123ca:	4b18      	ldr	r3, [pc, #96]	; (801242c <RegionCN470InitDefaults+0x144>)
 80123cc:	4a1b      	ldr	r2, [pc, #108]	; (801243c <RegionCN470InitDefaults+0x154>)
 80123ce:	2101      	movs	r1, #1
 80123d0:	4249      	negs	r1, r1
 80123d2:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[5] = 0xFFFF;
 80123d4:	4b15      	ldr	r3, [pc, #84]	; (801242c <RegionCN470InitDefaults+0x144>)
 80123d6:	4a1a      	ldr	r2, [pc, #104]	; (8012440 <RegionCN470InitDefaults+0x158>)
 80123d8:	2101      	movs	r1, #1
 80123da:	4249      	negs	r1, r1
 80123dc:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 80123de:	4919      	ldr	r1, [pc, #100]	; (8012444 <RegionCN470InitDefaults+0x15c>)
 80123e0:	4b19      	ldr	r3, [pc, #100]	; (8012448 <RegionCN470InitDefaults+0x160>)
 80123e2:	2206      	movs	r2, #6
 80123e4:	0018      	movs	r0, r3
 80123e6:	f002 f874 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 80123ea:	e014      	b.n	8012416 <RegionCN470InitDefaults+0x12e>
            if( params->NvmCtx != 0 )
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00f      	beq.n	8012414 <RegionCN470InitDefaults+0x12c>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6819      	ldr	r1, [r3, #0]
 80123f8:	2395      	movs	r3, #149	; 0x95
 80123fa:	00da      	lsls	r2, r3, #3
 80123fc:	4b0b      	ldr	r3, [pc, #44]	; (801242c <RegionCN470InitDefaults+0x144>)
 80123fe:	0018      	movs	r0, r3
 8012400:	f00a fc6c 	bl	801ccdc <memcpy1>
            break;
 8012404:	e006      	b.n	8012414 <RegionCN470InitDefaults+0x12c>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 8012406:	490f      	ldr	r1, [pc, #60]	; (8012444 <RegionCN470InitDefaults+0x15c>)
 8012408:	4b0f      	ldr	r3, [pc, #60]	; (8012448 <RegionCN470InitDefaults+0x160>)
 801240a:	2206      	movs	r2, #6
 801240c:	0018      	movs	r0, r3
 801240e:	f002 f860 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 8012412:	e000      	b.n	8012416 <RegionCN470InitDefaults+0x12e>
            break;
 8012414:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8012416:	46c0      	nop			; (mov r8, r8)
 8012418:	46bd      	mov	sp, r7
 801241a:	b009      	add	sp, #36	; 0x24
 801241c:	bd90      	pop	{r4, r7, pc}
 801241e:	46c0      	nop			; (mov r8, r8)
 8012420:	2000133c 	.word	0x2000133c
 8012424:	00030d40 	.word	0x00030d40
 8012428:	1c083560 	.word	0x1c083560
 801242c:	20000ebc 	.word	0x20000ebc
 8012430:	0000049c 	.word	0x0000049c
 8012434:	0000049e 	.word	0x0000049e
 8012438:	000004a2 	.word	0x000004a2
 801243c:	000004a4 	.word	0x000004a4
 8012440:	000004a6 	.word	0x000004a6
 8012444:	20001358 	.word	0x20001358
 8012448:	2000134c 	.word	0x2000134c

0801244c <RegionCN470ApplyCFList>:
            return false;
    }
}

void RegionCN470ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801244c:	b5b0      	push	{r4, r5, r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	791b      	ldrb	r3, [r3, #4]
 8012458:	2b10      	cmp	r3, #16
 801245a:	d14e      	bne.n	80124fa <RegionCN470ApplyCFList+0xae>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	330f      	adds	r3, #15
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d14a      	bne.n	80124fe <RegionCN470ApplyCFList+0xb2>
    {
        return;
    }

    // ChMask0 - ChMask5 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 8012468:	230f      	movs	r3, #15
 801246a:	18fb      	adds	r3, r7, r3
 801246c:	2200      	movs	r2, #0
 801246e:	701a      	strb	r2, [r3, #0]
 8012470:	230e      	movs	r3, #14
 8012472:	18fb      	adds	r3, r7, r3
 8012474:	2200      	movs	r2, #0
 8012476:	701a      	strb	r2, [r3, #0]
 8012478:	e039      	b.n	80124ee <RegionCN470ApplyCFList+0xa2>
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	240e      	movs	r4, #14
 8012480:	193b      	adds	r3, r7, r4
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	18d3      	adds	r3, r2, r3
 8012486:	7819      	ldrb	r1, [r3, #0]
 8012488:	200f      	movs	r0, #15
 801248a:	183b      	adds	r3, r7, r0
 801248c:	781a      	ldrb	r2, [r3, #0]
 801248e:	b289      	uxth	r1, r1
 8012490:	4b1d      	ldr	r3, [pc, #116]	; (8012508 <RegionCN470ApplyCFList+0xbc>)
 8012492:	2592      	movs	r5, #146	; 0x92
 8012494:	00ad      	lsls	r5, r5, #2
 8012496:	46ac      	mov	ip, r5
 8012498:	4462      	add	r2, ip
 801249a:	0052      	lsls	r2, r2, #1
 801249c:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801249e:	183b      	adds	r3, r7, r0
 80124a0:	781a      	ldrb	r2, [r3, #0]
 80124a2:	4b19      	ldr	r3, [pc, #100]	; (8012508 <RegionCN470ApplyCFList+0xbc>)
 80124a4:	2192      	movs	r1, #146	; 0x92
 80124a6:	0089      	lsls	r1, r1, #2
 80124a8:	468c      	mov	ip, r1
 80124aa:	4462      	add	r2, ip
 80124ac:	0052      	lsls	r2, r2, #1
 80124ae:	5ad1      	ldrh	r1, [r2, r3]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681a      	ldr	r2, [r3, #0]
 80124b4:	193b      	adds	r3, r7, r4
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	3301      	adds	r3, #1
 80124ba:	18d3      	adds	r3, r2, r3
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	b29b      	uxth	r3, r3
 80124c0:	021b      	lsls	r3, r3, #8
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	183a      	adds	r2, r7, r0
 80124c6:	7812      	ldrb	r2, [r2, #0]
 80124c8:	430b      	orrs	r3, r1
 80124ca:	b299      	uxth	r1, r3
 80124cc:	4b0e      	ldr	r3, [pc, #56]	; (8012508 <RegionCN470ApplyCFList+0xbc>)
 80124ce:	2592      	movs	r5, #146	; 0x92
 80124d0:	00ad      	lsls	r5, r5, #2
 80124d2:	46ac      	mov	ip, r5
 80124d4:	4462      	add	r2, ip
 80124d6:	0052      	lsls	r2, r2, #1
 80124d8:	52d1      	strh	r1, [r2, r3]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 5; chMaskItr++, cntPayload+=2 )
 80124da:	183b      	adds	r3, r7, r0
 80124dc:	781a      	ldrb	r2, [r3, #0]
 80124de:	183b      	adds	r3, r7, r0
 80124e0:	3201      	adds	r2, #1
 80124e2:	701a      	strb	r2, [r3, #0]
 80124e4:	193b      	adds	r3, r7, r4
 80124e6:	193a      	adds	r2, r7, r4
 80124e8:	7812      	ldrb	r2, [r2, #0]
 80124ea:	3202      	adds	r2, #2
 80124ec:	701a      	strb	r2, [r3, #0]
 80124ee:	230f      	movs	r3, #15
 80124f0:	18fb      	adds	r3, r7, r3
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	2b05      	cmp	r3, #5
 80124f6:	d9c0      	bls.n	801247a <RegionCN470ApplyCFList+0x2e>
 80124f8:	e002      	b.n	8012500 <RegionCN470ApplyCFList+0xb4>
        return;
 80124fa:	46c0      	nop			; (mov r8, r8)
 80124fc:	e000      	b.n	8012500 <RegionCN470ApplyCFList+0xb4>
        return;
 80124fe:	46c0      	nop			; (mov r8, r8)
    }
}
 8012500:	46bd      	mov	sp, r7
 8012502:	b004      	add	sp, #16
 8012504:	bdb0      	pop	{r4, r5, r7, pc}
 8012506:	46c0      	nop			; (mov r8, r8)
 8012508:	20000ebc 	.word	0x20000ebc

0801250c <RegionCN470ComputeRxWindowParameters>:
    }
    return true;
}

void RegionCN470ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801250c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801250e:	b08b      	sub	sp, #44	; 0x2c
 8012510:	af04      	add	r7, sp, #16
 8012512:	60ba      	str	r2, [r7, #8]
 8012514:	607b      	str	r3, [r7, #4]
 8012516:	250f      	movs	r5, #15
 8012518:	197b      	adds	r3, r7, r5
 801251a:	1c02      	adds	r2, r0, #0
 801251c:	701a      	strb	r2, [r3, #0]
 801251e:	230e      	movs	r3, #14
 8012520:	18fb      	adds	r3, r7, r3
 8012522:	1c0a      	adds	r2, r1, #0
 8012524:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8012526:	2300      	movs	r3, #0
 8012528:	2400      	movs	r4, #0
 801252a:	613b      	str	r3, [r7, #16]
 801252c:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN470_RX_MAX_DATARATE );
 801252e:	197b      	adds	r3, r7, r5
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	b25a      	sxtb	r2, r3
 8012534:	2a05      	cmp	r2, #5
 8012536:	dd00      	ble.n	801253a <RegionCN470ComputeRxWindowParameters+0x2e>
 8012538:	2305      	movs	r3, #5
 801253a:	b25a      	sxtb	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	785b      	ldrb	r3, [r3, #1]
 8012544:	b25b      	sxtb	r3, r3
 8012546:	0018      	movs	r0, r3
 8012548:	f7ff fc4c 	bl	8011de4 <GetBandwidth>
 801254c:	0003      	movs	r3, r0
 801254e:	b2da      	uxtb	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	709a      	strb	r2, [r3, #2]

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesCN470[rxConfigParams->Datarate], BandwidthsCN470[rxConfigParams->Datarate] );
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	785b      	ldrb	r3, [r3, #1]
 8012558:	b25b      	sxtb	r3, r3
 801255a:	001a      	movs	r2, r3
 801255c:	4b14      	ldr	r3, [pc, #80]	; (80125b0 <RegionCN470ComputeRxWindowParameters+0xa4>)
 801255e:	5c98      	ldrb	r0, [r3, r2]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	785b      	ldrb	r3, [r3, #1]
 8012564:	b25b      	sxtb	r3, r3
 8012566:	001a      	movs	r2, r3
 8012568:	4b12      	ldr	r3, [pc, #72]	; (80125b4 <RegionCN470ComputeRxWindowParameters+0xa8>)
 801256a:	0092      	lsls	r2, r2, #2
 801256c:	58d3      	ldr	r3, [r2, r3]
 801256e:	0019      	movs	r1, r3
 8012570:	f002 f9ea 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 8012574:	0003      	movs	r3, r0
 8012576:	000c      	movs	r4, r1
 8012578:	613b      	str	r3, [r7, #16]
 801257a:	617c      	str	r4, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801257c:	4b0e      	ldr	r3, [pc, #56]	; (80125b8 <RegionCN470ComputeRxWindowParameters+0xac>)
 801257e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012580:	4798      	blx	r3
 8012582:	0006      	movs	r6, r0
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	3308      	adds	r3, #8
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	320c      	adds	r2, #12
 801258c:	68bd      	ldr	r5, [r7, #8]
 801258e:	210e      	movs	r1, #14
 8012590:	1879      	adds	r1, r7, r1
 8012592:	780c      	ldrb	r4, [r1, #0]
 8012594:	6938      	ldr	r0, [r7, #16]
 8012596:	6979      	ldr	r1, [r7, #20]
 8012598:	9202      	str	r2, [sp, #8]
 801259a:	9301      	str	r3, [sp, #4]
 801259c:	9600      	str	r6, [sp, #0]
 801259e:	002b      	movs	r3, r5
 80125a0:	0022      	movs	r2, r4
 80125a2:	f002 fa19 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 80125a6:	46c0      	nop			; (mov r8, r8)
 80125a8:	46bd      	mov	sp, r7
 80125aa:	b007      	add	sp, #28
 80125ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125ae:	46c0      	nop			; (mov r8, r8)
 80125b0:	080280cc 	.word	0x080280cc
 80125b4:	080280d4 	.word	0x080280d4
 80125b8:	08028964 	.word	0x08028964

080125bc <RegionCN470RxConfig>:

bool RegionCN470RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80125bc:	b5b0      	push	{r4, r5, r7, lr}
 80125be:	b090      	sub	sp, #64	; 0x40
 80125c0:	af0a      	add	r7, sp, #40	; 0x28
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
    int8_t dr = rxConfig->Datarate;
 80125c6:	230f      	movs	r3, #15
 80125c8:	18fb      	adds	r3, r7, r3
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	7852      	ldrb	r2, [r2, #1]
 80125ce:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80125d0:	2317      	movs	r3, #23
 80125d2:	18fb      	adds	r3, r7, r3
 80125d4:	2200      	movs	r2, #0
 80125d6:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80125d8:	230e      	movs	r3, #14
 80125da:	18fb      	adds	r3, r7, r3
 80125dc:	2200      	movs	r2, #0
 80125de:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80125e6:	4b3b      	ldr	r3, [pc, #236]	; (80126d4 <RegionCN470RxConfig+0x118>)
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	4798      	blx	r3
 80125ec:	1e03      	subs	r3, r0, #0
 80125ee:	d001      	beq.n	80125f4 <RegionCN470RxConfig+0x38>
    {
        return false;
 80125f0:	2300      	movs	r3, #0
 80125f2:	e06b      	b.n	80126cc <RegionCN470RxConfig+0x110>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	7cdb      	ldrb	r3, [r3, #19]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d10e      	bne.n	801261a <RegionCN470RxConfig+0x5e>
    {
        // Apply window 1 frequency
        frequency = CN470_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 48 ) * CN470_STEPWIDTH_RX1_CHANNEL;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	781b      	ldrb	r3, [r3, #0]
 8012600:	2130      	movs	r1, #48	; 0x30
 8012602:	0018      	movs	r0, r3
 8012604:	f7ed fe0e 	bl	8000224 <__aeabi_uidivmod>
 8012608:	000b      	movs	r3, r1
 801260a:	b2db      	uxtb	r3, r3
 801260c:	001a      	movs	r2, r3
 801260e:	4b32      	ldr	r3, [pc, #200]	; (80126d8 <RegionCN470RxConfig+0x11c>)
 8012610:	4353      	muls	r3, r2
 8012612:	4a32      	ldr	r2, [pc, #200]	; (80126dc <RegionCN470RxConfig+0x120>)
 8012614:	4694      	mov	ip, r2
 8012616:	4463      	add	r3, ip
 8012618:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN470[dr];
 801261a:	230f      	movs	r3, #15
 801261c:	18fb      	adds	r3, r7, r3
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	b25b      	sxtb	r3, r3
 8012622:	4a2f      	ldr	r2, [pc, #188]	; (80126e0 <RegionCN470RxConfig+0x124>)
 8012624:	5cd2      	ldrb	r2, [r2, r3]
 8012626:	250e      	movs	r5, #14
 8012628:	197b      	adds	r3, r7, r5
 801262a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801262c:	4b29      	ldr	r3, [pc, #164]	; (80126d4 <RegionCN470RxConfig+0x118>)
 801262e:	695b      	ldr	r3, [r3, #20]
 8012630:	693a      	ldr	r2, [r7, #16]
 8012632:	0010      	movs	r0, r2
 8012634:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8012636:	4b27      	ldr	r3, [pc, #156]	; (80126d4 <RegionCN470RxConfig+0x118>)
 8012638:	6a1c      	ldr	r4, [r3, #32]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	789b      	ldrb	r3, [r3, #2]
 801263e:	0018      	movs	r0, r3
 8012640:	197b      	adds	r3, r7, r5
 8012642:	2100      	movs	r1, #0
 8012644:	5659      	ldrsb	r1, [r3, r1]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	b29b      	uxth	r3, r3
 801264c:	687a      	ldr	r2, [r7, #4]
 801264e:	7c92      	ldrb	r2, [r2, #18]
 8012650:	9209      	str	r2, [sp, #36]	; 0x24
 8012652:	2201      	movs	r2, #1
 8012654:	9208      	str	r2, [sp, #32]
 8012656:	2200      	movs	r2, #0
 8012658:	9207      	str	r2, [sp, #28]
 801265a:	2200      	movs	r2, #0
 801265c:	9206      	str	r2, [sp, #24]
 801265e:	2200      	movs	r2, #0
 8012660:	9205      	str	r2, [sp, #20]
 8012662:	2200      	movs	r2, #0
 8012664:	9204      	str	r2, [sp, #16]
 8012666:	2200      	movs	r2, #0
 8012668:	9203      	str	r2, [sp, #12]
 801266a:	9302      	str	r3, [sp, #8]
 801266c:	2308      	movs	r3, #8
 801266e:	9301      	str	r3, [sp, #4]
 8012670:	2300      	movs	r3, #0
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	2301      	movs	r3, #1
 8012676:	000a      	movs	r2, r1
 8012678:	0001      	movs	r1, r0
 801267a:	2001      	movs	r0, #1
 801267c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	7c5b      	ldrb	r3, [r3, #17]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d009      	beq.n	801269a <RegionCN470RxConfig+0xde>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN470[dr];
 8012686:	230f      	movs	r3, #15
 8012688:	18fb      	adds	r3, r7, r3
 801268a:	2200      	movs	r2, #0
 801268c:	569a      	ldrsb	r2, [r3, r2]
 801268e:	2317      	movs	r3, #23
 8012690:	18fb      	adds	r3, r7, r3
 8012692:	4914      	ldr	r1, [pc, #80]	; (80126e4 <RegionCN470RxConfig+0x128>)
 8012694:	5c8a      	ldrb	r2, [r1, r2]
 8012696:	701a      	strb	r2, [r3, #0]
 8012698:	e008      	b.n	80126ac <RegionCN470RxConfig+0xf0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN470[dr];
 801269a:	230f      	movs	r3, #15
 801269c:	18fb      	adds	r3, r7, r3
 801269e:	2200      	movs	r2, #0
 80126a0:	569a      	ldrsb	r2, [r3, r2]
 80126a2:	2317      	movs	r3, #23
 80126a4:	18fb      	adds	r3, r7, r3
 80126a6:	4910      	ldr	r1, [pc, #64]	; (80126e8 <RegionCN470RxConfig+0x12c>)
 80126a8:	5c8a      	ldrb	r2, [r1, r2]
 80126aa:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 80126ac:	4b09      	ldr	r3, [pc, #36]	; (80126d4 <RegionCN470RxConfig+0x118>)
 80126ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126b0:	2217      	movs	r2, #23
 80126b2:	18ba      	adds	r2, r7, r2
 80126b4:	7812      	ldrb	r2, [r2, #0]
 80126b6:	320d      	adds	r2, #13
 80126b8:	b2d2      	uxtb	r2, r2
 80126ba:	0011      	movs	r1, r2
 80126bc:	2001      	movs	r0, #1
 80126be:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	220f      	movs	r2, #15
 80126c4:	18ba      	adds	r2, r7, r2
 80126c6:	7812      	ldrb	r2, [r2, #0]
 80126c8:	701a      	strb	r2, [r3, #0]
    return true;
 80126ca:	2301      	movs	r3, #1
}
 80126cc:	0018      	movs	r0, r3
 80126ce:	46bd      	mov	sp, r7
 80126d0:	b006      	add	sp, #24
 80126d2:	bdb0      	pop	{r4, r5, r7, pc}
 80126d4:	08028964 	.word	0x08028964
 80126d8:	00030d40 	.word	0x00030d40
 80126dc:	1dd1f8e0 	.word	0x1dd1f8e0
 80126e0:	080280cc 	.word	0x080280cc
 80126e4:	080280f4 	.word	0x080280f4
 80126e8:	080280ec 	.word	0x080280ec

080126ec <RegionCN470TxConfig>:

bool RegionCN470TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80126ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126ee:	b091      	sub	sp, #68	; 0x44
 80126f0:	af0a      	add	r7, sp, #40	; 0x28
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	607a      	str	r2, [r7, #4]
    int8_t phyDr = DataratesCN470[txConfig->Datarate];
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	785b      	ldrb	r3, [r3, #1]
 80126fc:	b25b      	sxtb	r3, r3
 80126fe:	001a      	movs	r2, r3
 8012700:	4b3d      	ldr	r3, [pc, #244]	; (80127f8 <RegionCN470TxConfig+0x10c>)
 8012702:	5c9a      	ldrb	r2, [r3, r2]
 8012704:	2317      	movs	r3, #23
 8012706:	18fb      	adds	r3, r7, r3
 8012708:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2002      	movs	r0, #2
 801270e:	5618      	ldrsb	r0, [r3, r0]
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	0019      	movs	r1, r3
 8012716:	4a39      	ldr	r2, [pc, #228]	; (80127fc <RegionCN470TxConfig+0x110>)
 8012718:	000b      	movs	r3, r1
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	185b      	adds	r3, r3, r1
 801271e:	009b      	lsls	r3, r3, #2
 8012720:	18d3      	adds	r3, r2, r3
 8012722:	3309      	adds	r3, #9
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	4a35      	ldr	r2, [pc, #212]	; (80127fc <RegionCN470TxConfig+0x110>)
 8012728:	3348      	adds	r3, #72	; 0x48
 801272a:	011b      	lsls	r3, r3, #4
 801272c:	18d3      	adds	r3, r2, r3
 801272e:	3302      	adds	r3, #2
 8012730:	2100      	movs	r1, #0
 8012732:	5659      	ldrsb	r1, [r3, r1]
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	2201      	movs	r2, #1
 8012738:	569a      	ldrsb	r2, [r3, r2]
 801273a:	2516      	movs	r5, #22
 801273c:	197c      	adds	r4, r7, r5
 801273e:	4b30      	ldr	r3, [pc, #192]	; (8012800 <RegionCN470TxConfig+0x114>)
 8012740:	f7ff fb6e 	bl	8011e20 <LimitTxPower>
 8012744:	0003      	movs	r3, r0
 8012746:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8012748:	2615      	movs	r6, #21
 801274a:	19bb      	adds	r3, r7, r6
 801274c:	2200      	movs	r2, #0
 801274e:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	6859      	ldr	r1, [r3, #4]
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	689a      	ldr	r2, [r3, #8]
 8012758:	19bc      	adds	r4, r7, r6
 801275a:	197b      	adds	r3, r7, r5
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	b25b      	sxtb	r3, r3
 8012760:	0018      	movs	r0, r3
 8012762:	f002 f9bd 	bl	8014ae0 <RegionCommonComputeTxPower>
 8012766:	0003      	movs	r3, r0
 8012768:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801276a:	4b26      	ldr	r3, [pc, #152]	; (8012804 <RegionCN470TxConfig+0x118>)
 801276c:	695a      	ldr	r2, [r3, #20]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	0018      	movs	r0, r3
 8012774:	4921      	ldr	r1, [pc, #132]	; (80127fc <RegionCN470TxConfig+0x110>)
 8012776:	0003      	movs	r3, r0
 8012778:	005b      	lsls	r3, r3, #1
 801277a:	181b      	adds	r3, r3, r0
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	585b      	ldr	r3, [r3, r1]
 8012780:	0018      	movs	r0, r3
 8012782:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, 0, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8012784:	4b1f      	ldr	r3, [pc, #124]	; (8012804 <RegionCN470TxConfig+0x118>)
 8012786:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012788:	2317      	movs	r3, #23
 801278a:	18fb      	adds	r3, r7, r3
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	b25b      	sxtb	r3, r3
 8012790:	19ba      	adds	r2, r7, r6
 8012792:	2100      	movs	r1, #0
 8012794:	5651      	ldrsb	r1, [r2, r1]
 8012796:	4a1c      	ldr	r2, [pc, #112]	; (8012808 <RegionCN470TxConfig+0x11c>)
 8012798:	9208      	str	r2, [sp, #32]
 801279a:	2200      	movs	r2, #0
 801279c:	9207      	str	r2, [sp, #28]
 801279e:	2200      	movs	r2, #0
 80127a0:	9206      	str	r2, [sp, #24]
 80127a2:	2200      	movs	r2, #0
 80127a4:	9205      	str	r2, [sp, #20]
 80127a6:	2201      	movs	r2, #1
 80127a8:	9204      	str	r2, [sp, #16]
 80127aa:	2200      	movs	r2, #0
 80127ac:	9203      	str	r2, [sp, #12]
 80127ae:	2208      	movs	r2, #8
 80127b0:	9202      	str	r2, [sp, #8]
 80127b2:	2201      	movs	r2, #1
 80127b4:	9201      	str	r2, [sp, #4]
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	2300      	movs	r3, #0
 80127ba:	2200      	movs	r2, #0
 80127bc:	2001      	movs	r0, #1
 80127be:	47a0      	blx	r4
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80127c0:	4b10      	ldr	r3, [pc, #64]	; (8012804 <RegionCN470TxConfig+0x118>)
 80127c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	8992      	ldrh	r2, [r2, #12]
 80127c8:	b2d2      	uxtb	r2, r2
 80127ca:	0011      	movs	r1, r2
 80127cc:	2001      	movs	r0, #1
 80127ce:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 80127d0:	4b0c      	ldr	r3, [pc, #48]	; (8012804 <RegionCN470TxConfig+0x118>)
 80127d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127d4:	68fa      	ldr	r2, [r7, #12]
 80127d6:	8992      	ldrh	r2, [r2, #12]
 80127d8:	b2d2      	uxtb	r2, r2
 80127da:	0011      	movs	r1, r2
 80127dc:	2001      	movs	r0, #1
 80127de:	4798      	blx	r3
 80127e0:	0002      	movs	r2, r0
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	601a      	str	r2, [r3, #0]
    *txPower = txPowerLimited;
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	197a      	adds	r2, r7, r5
 80127ea:	7812      	ldrb	r2, [r2, #0]
 80127ec:	701a      	strb	r2, [r3, #0]

    return true;
 80127ee:	2301      	movs	r3, #1
}
 80127f0:	0018      	movs	r0, r3
 80127f2:	46bd      	mov	sp, r7
 80127f4:	b007      	add	sp, #28
 80127f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127f8:	080280cc 	.word	0x080280cc
 80127fc:	20000ebc 	.word	0x20000ebc
 8012800:	2000134c 	.word	0x2000134c
 8012804:	08028964 	.word	0x08028964
 8012808:	00000bb8 	.word	0x00000bb8

0801280c <RegionCN470LinkAdrReq>:

uint8_t RegionCN470LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801280e:	b095      	sub	sp, #84	; 0x54
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	607a      	str	r2, [r7, #4]
 8012818:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801281a:	234f      	movs	r3, #79	; 0x4f
 801281c:	18fb      	adds	r3, r7, r3
 801281e:	2207      	movs	r2, #7
 8012820:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8012822:	234c      	movs	r3, #76	; 0x4c
 8012824:	18fb      	adds	r3, r7, r3
 8012826:	2200      	movs	r2, #0
 8012828:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801282a:	234e      	movs	r3, #78	; 0x4e
 801282c:	18fb      	adds	r3, r7, r3
 801282e:	2200      	movs	r2, #0
 8012830:	701a      	strb	r2, [r3, #0]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8012832:	2438      	movs	r4, #56	; 0x38
 8012834:	193b      	adds	r3, r7, r4
 8012836:	0018      	movs	r0, r3
 8012838:	230c      	movs	r3, #12
 801283a:	001a      	movs	r2, r3
 801283c:	2100      	movs	r1, #0
 801283e:	f013 fb77 	bl	8025f30 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 8012842:	4993      	ldr	r1, [pc, #588]	; (8012a90 <RegionCN470LinkAdrReq+0x284>)
 8012844:	193b      	adds	r3, r7, r4
 8012846:	2206      	movs	r2, #6
 8012848:	0018      	movs	r0, r3
 801284a:	f001 fe42 	bl	80144d2 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801284e:	e08a      	b.n	8012966 <RegionCN470LinkAdrReq+0x15a>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	685a      	ldr	r2, [r3, #4]
 8012854:	234e      	movs	r3, #78	; 0x4e
 8012856:	18fb      	adds	r3, r7, r3
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	18d3      	adds	r3, r2, r3
 801285c:	254c      	movs	r5, #76	; 0x4c
 801285e:	197c      	adds	r4, r7, r5
 8012860:	2244      	movs	r2, #68	; 0x44
 8012862:	18ba      	adds	r2, r7, r2
 8012864:	0011      	movs	r1, r2
 8012866:	0018      	movs	r0, r3
 8012868:	f001 ff72 	bl	8014750 <RegionCommonParseLinkAdrReq>
 801286c:	0003      	movs	r3, r0
 801286e:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8012870:	197b      	adds	r3, r7, r5
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d100      	bne.n	801287a <RegionCN470LinkAdrReq+0x6e>
 8012878:	e07e      	b.n	8012978 <RegionCN470LinkAdrReq+0x16c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801287a:	224e      	movs	r2, #78	; 0x4e
 801287c:	18bb      	adds	r3, r7, r2
 801287e:	18b9      	adds	r1, r7, r2
 8012880:	224c      	movs	r2, #76	; 0x4c
 8012882:	18ba      	adds	r2, r7, r2
 8012884:	7809      	ldrb	r1, [r1, #0]
 8012886:	7812      	ldrb	r2, [r2, #0]
 8012888:	188a      	adds	r2, r1, r2
 801288a:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801288c:	234f      	movs	r3, #79	; 0x4f
 801288e:	18fb      	adds	r3, r7, r3
 8012890:	2207      	movs	r2, #7
 8012892:	701a      	strb	r2, [r3, #0]

        if( linkAdrParams.ChMaskCtrl == 6 )
 8012894:	2344      	movs	r3, #68	; 0x44
 8012896:	18fb      	adds	r3, r7, r3
 8012898:	78db      	ldrb	r3, [r3, #3]
 801289a:	2b06      	cmp	r3, #6
 801289c:	d119      	bne.n	80128d2 <RegionCN470LinkAdrReq+0xc6>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801289e:	2138      	movs	r1, #56	; 0x38
 80128a0:	187b      	adds	r3, r7, r1
 80128a2:	2201      	movs	r2, #1
 80128a4:	4252      	negs	r2, r2
 80128a6:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0xFFFF;
 80128a8:	187b      	adds	r3, r7, r1
 80128aa:	2201      	movs	r2, #1
 80128ac:	4252      	negs	r2, r2
 80128ae:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0xFFFF;
 80128b0:	187b      	adds	r3, r7, r1
 80128b2:	2201      	movs	r2, #1
 80128b4:	4252      	negs	r2, r2
 80128b6:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0xFFFF;
 80128b8:	187b      	adds	r3, r7, r1
 80128ba:	2201      	movs	r2, #1
 80128bc:	4252      	negs	r2, r2
 80128be:	80da      	strh	r2, [r3, #6]
            channelsMask[4] = 0xFFFF;
 80128c0:	187b      	adds	r3, r7, r1
 80128c2:	2201      	movs	r2, #1
 80128c4:	4252      	negs	r2, r2
 80128c6:	811a      	strh	r2, [r3, #8]
            channelsMask[5] = 0xFFFF;
 80128c8:	187b      	adds	r3, r7, r1
 80128ca:	2201      	movs	r2, #1
 80128cc:	4252      	negs	r2, r2
 80128ce:	815a      	strh	r2, [r3, #10]
 80128d0:	e049      	b.n	8012966 <RegionCN470LinkAdrReq+0x15a>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80128d2:	2344      	movs	r3, #68	; 0x44
 80128d4:	18fb      	adds	r3, r7, r3
 80128d6:	78db      	ldrb	r3, [r3, #3]
 80128d8:	2b07      	cmp	r3, #7
 80128da:	d107      	bne.n	80128ec <RegionCN470LinkAdrReq+0xe0>
        {
            status &= 0xFE; // Channel mask KO
 80128dc:	224f      	movs	r2, #79	; 0x4f
 80128de:	18bb      	adds	r3, r7, r2
 80128e0:	18ba      	adds	r2, r7, r2
 80128e2:	7812      	ldrb	r2, [r2, #0]
 80128e4:	2101      	movs	r1, #1
 80128e6:	438a      	bics	r2, r1
 80128e8:	701a      	strb	r2, [r3, #0]
 80128ea:	e03c      	b.n	8012966 <RegionCN470LinkAdrReq+0x15a>
        }
        else
        {
            for( uint8_t i = 0; i < 16; i++ )
 80128ec:	234d      	movs	r3, #77	; 0x4d
 80128ee:	18fb      	adds	r3, r7, r3
 80128f0:	2200      	movs	r2, #0
 80128f2:	701a      	strb	r2, [r3, #0]
 80128f4:	e028      	b.n	8012948 <RegionCN470LinkAdrReq+0x13c>
            {
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 80128f6:	2344      	movs	r3, #68	; 0x44
 80128f8:	18fb      	adds	r3, r7, r3
 80128fa:	889b      	ldrh	r3, [r3, #4]
 80128fc:	001a      	movs	r2, r3
 80128fe:	234d      	movs	r3, #77	; 0x4d
 8012900:	18fb      	adds	r3, r7, r3
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	411a      	asrs	r2, r3
 8012906:	0013      	movs	r3, r2
 8012908:	2201      	movs	r2, #1
 801290a:	4013      	ands	r3, r2
 801290c:	d016      	beq.n	801293c <RegionCN470LinkAdrReq+0x130>
                    ( NvmCtx.Channels[linkAdrParams.ChMaskCtrl * 16 + i].Frequency == 0 ) )
 801290e:	2344      	movs	r3, #68	; 0x44
 8012910:	18fb      	adds	r3, r7, r3
 8012912:	78db      	ldrb	r3, [r3, #3]
 8012914:	011a      	lsls	r2, r3, #4
 8012916:	234d      	movs	r3, #77	; 0x4d
 8012918:	18fb      	adds	r3, r7, r3
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	18d2      	adds	r2, r2, r3
 801291e:	495d      	ldr	r1, [pc, #372]	; (8012a94 <RegionCN470LinkAdrReq+0x288>)
 8012920:	0013      	movs	r3, r2
 8012922:	005b      	lsls	r3, r3, #1
 8012924:	189b      	adds	r3, r3, r2
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	585b      	ldr	r3, [r3, r1]
                if( ( ( linkAdrParams.ChMask & ( 1 << i ) ) != 0 ) &&
 801292a:	2b00      	cmp	r3, #0
 801292c:	d106      	bne.n	801293c <RegionCN470LinkAdrReq+0x130>
                {// Trying to enable an undefined channel
                    status &= 0xFE; // Channel mask KO
 801292e:	224f      	movs	r2, #79	; 0x4f
 8012930:	18bb      	adds	r3, r7, r2
 8012932:	18ba      	adds	r2, r7, r2
 8012934:	7812      	ldrb	r2, [r2, #0]
 8012936:	2101      	movs	r1, #1
 8012938:	438a      	bics	r2, r1
 801293a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < 16; i++ )
 801293c:	214d      	movs	r1, #77	; 0x4d
 801293e:	187b      	adds	r3, r7, r1
 8012940:	781a      	ldrb	r2, [r3, #0]
 8012942:	187b      	adds	r3, r7, r1
 8012944:	3201      	adds	r2, #1
 8012946:	701a      	strb	r2, [r3, #0]
 8012948:	234d      	movs	r3, #77	; 0x4d
 801294a:	18fb      	adds	r3, r7, r3
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	2b0f      	cmp	r3, #15
 8012950:	d9d1      	bls.n	80128f6 <RegionCN470LinkAdrReq+0xea>
                }
            }
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8012952:	2144      	movs	r1, #68	; 0x44
 8012954:	187b      	adds	r3, r7, r1
 8012956:	78db      	ldrb	r3, [r3, #3]
 8012958:	001a      	movs	r2, r3
 801295a:	187b      	adds	r3, r7, r1
 801295c:	8899      	ldrh	r1, [r3, #4]
 801295e:	2338      	movs	r3, #56	; 0x38
 8012960:	18fb      	adds	r3, r7, r3
 8012962:	0052      	lsls	r2, r2, #1
 8012964:	52d1      	strh	r1, [r2, r3]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	7a1b      	ldrb	r3, [r3, #8]
 801296a:	224e      	movs	r2, #78	; 0x4e
 801296c:	18ba      	adds	r2, r7, r2
 801296e:	7812      	ldrb	r2, [r2, #0]
 8012970:	429a      	cmp	r2, r3
 8012972:	d200      	bcs.n	8012976 <RegionCN470LinkAdrReq+0x16a>
 8012974:	e76c      	b.n	8012850 <RegionCN470LinkAdrReq+0x44>
 8012976:	e000      	b.n	801297a <RegionCN470LinkAdrReq+0x16e>
            break; // break loop, since no more request has been found
 8012978:	46c0      	nop			; (mov r8, r8)
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801297a:	2134      	movs	r1, #52	; 0x34
 801297c:	187b      	adds	r3, r7, r1
 801297e:	2201      	movs	r2, #1
 8012980:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	7a5a      	ldrb	r2, [r3, #9]
 8012986:	187b      	adds	r3, r7, r1
 8012988:	709a      	strb	r2, [r3, #2]
    phyParam = RegionCN470GetPhyParam( &getPhy );
 801298a:	187b      	adds	r3, r7, r1
 801298c:	0018      	movs	r0, r3
 801298e:	f7ff fb7f 	bl	8012090 <RegionCN470GetPhyParam>
 8012992:	0003      	movs	r3, r0
 8012994:	001a      	movs	r2, r3
 8012996:	2030      	movs	r0, #48	; 0x30
 8012998:	183b      	adds	r3, r7, r0
 801299a:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 801299c:	2110      	movs	r1, #16
 801299e:	187b      	adds	r3, r7, r1
 80129a0:	244f      	movs	r4, #79	; 0x4f
 80129a2:	193a      	adds	r2, r7, r4
 80129a4:	7812      	ldrb	r2, [r2, #0]
 80129a6:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	7a9a      	ldrb	r2, [r3, #10]
 80129ac:	187b      	adds	r3, r7, r1
 80129ae:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80129b0:	2544      	movs	r5, #68	; 0x44
 80129b2:	197b      	adds	r3, r7, r5
 80129b4:	2201      	movs	r2, #1
 80129b6:	569a      	ldrsb	r2, [r3, r2]
 80129b8:	187b      	adds	r3, r7, r1
 80129ba:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80129bc:	197b      	adds	r3, r7, r5
 80129be:	2202      	movs	r2, #2
 80129c0:	569a      	ldrsb	r2, [r3, r2]
 80129c2:	187b      	adds	r3, r7, r1
 80129c4:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80129c6:	197b      	adds	r3, r7, r5
 80129c8:	781a      	ldrb	r2, [r3, #0]
 80129ca:	187b      	adds	r3, r7, r1
 80129cc:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	220b      	movs	r2, #11
 80129d2:	569a      	ldrsb	r2, [r3, r2]
 80129d4:	187b      	adds	r3, r7, r1
 80129d6:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	220c      	movs	r2, #12
 80129dc:	569a      	ldrsb	r2, [r3, r2]
 80129de:	187b      	adds	r3, r7, r1
 80129e0:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	7b5b      	ldrb	r3, [r3, #13]
 80129e6:	b25a      	sxtb	r2, r3
 80129e8:	187b      	adds	r3, r7, r1
 80129ea:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = CN470_MAX_NB_CHANNELS;
 80129ec:	187b      	adds	r3, r7, r1
 80129ee:	2260      	movs	r2, #96	; 0x60
 80129f0:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80129f2:	187b      	adds	r3, r7, r1
 80129f4:	2238      	movs	r2, #56	; 0x38
 80129f6:	18ba      	adds	r2, r7, r2
 80129f8:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80129fa:	183b      	adds	r3, r7, r0
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	b25a      	sxtb	r2, r3
 8012a00:	0008      	movs	r0, r1
 8012a02:	183b      	adds	r3, r7, r0
 8012a04:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = CN470_TX_MAX_DATARATE;
 8012a06:	183b      	adds	r3, r7, r0
 8012a08:	2205      	movs	r2, #5
 8012a0a:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8012a0c:	183b      	adds	r3, r7, r0
 8012a0e:	4a21      	ldr	r2, [pc, #132]	; (8012a94 <RegionCN470LinkAdrReq+0x288>)
 8012a10:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = CN470_MIN_TX_POWER;
 8012a12:	183b      	adds	r3, r7, r0
 8012a14:	2207      	movs	r2, #7
 8012a16:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = CN470_MAX_TX_POWER;
 8012a18:	183b      	adds	r3, r7, r0
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8012a1e:	183b      	adds	r3, r7, r0
 8012a20:	68fa      	ldr	r2, [r7, #12]
 8012a22:	6812      	ldr	r2, [r2, #0]
 8012a24:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8012a26:	0026      	movs	r6, r4
 8012a28:	193c      	adds	r4, r7, r4
 8012a2a:	0029      	movs	r1, r5
 8012a2c:	187d      	adds	r5, r7, r1
 8012a2e:	187b      	adds	r3, r7, r1
 8012a30:	1c9a      	adds	r2, r3, #2
 8012a32:	187b      	adds	r3, r7, r1
 8012a34:	1c59      	adds	r1, r3, #1
 8012a36:	1838      	adds	r0, r7, r0
 8012a38:	002b      	movs	r3, r5
 8012a3a:	f001 fedf 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 8012a3e:	0003      	movs	r3, r0
 8012a40:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8012a42:	0034      	movs	r4, r6
 8012a44:	193b      	adds	r3, r7, r4
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	2b07      	cmp	r3, #7
 8012a4a:	d106      	bne.n	8012a5a <RegionCN470LinkAdrReq+0x24e>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 8012a4c:	2338      	movs	r3, #56	; 0x38
 8012a4e:	18f9      	adds	r1, r7, r3
 8012a50:	4b0f      	ldr	r3, [pc, #60]	; (8012a90 <RegionCN470LinkAdrReq+0x284>)
 8012a52:	2206      	movs	r2, #6
 8012a54:	0018      	movs	r0, r3
 8012a56:	f001 fd3c 	bl	80144d2 <RegionCommonChanMaskCopy>
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8012a5a:	2144      	movs	r1, #68	; 0x44
 8012a5c:	187b      	adds	r3, r7, r1
 8012a5e:	2201      	movs	r2, #1
 8012a60:	569a      	ldrsb	r2, [r3, r2]
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8012a66:	187b      	adds	r3, r7, r1
 8012a68:	2202      	movs	r2, #2
 8012a6a:	569a      	ldrsb	r2, [r3, r2]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8012a70:	187b      	adds	r3, r7, r1
 8012a72:	781a      	ldrb	r2, [r3, #0]
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8012a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a7a:	224e      	movs	r2, #78	; 0x4e
 8012a7c:	18ba      	adds	r2, r7, r2
 8012a7e:	7812      	ldrb	r2, [r2, #0]
 8012a80:	701a      	strb	r2, [r3, #0]

    return status;
 8012a82:	234f      	movs	r3, #79	; 0x4f
 8012a84:	18fb      	adds	r3, r7, r3
 8012a86:	781b      	ldrb	r3, [r3, #0]
}
 8012a88:	0018      	movs	r0, r3
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	b015      	add	sp, #84	; 0x54
 8012a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a90:	2000134c 	.word	0x2000134c
 8012a94:	20000ebc 	.word	0x20000ebc

08012a98 <RegionCN470RxParamSetupReq>:

uint8_t RegionCN470RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8012aa0:	230f      	movs	r3, #15
 8012aa2:	18fb      	adds	r3, r7, r3
 8012aa4:	2207      	movs	r2, #7
 8012aa6:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	0018      	movs	r0, r3
 8012aae:	f7ff f9df 	bl	8011e70 <VerifyRfFreq>
 8012ab2:	0003      	movs	r3, r0
 8012ab4:	001a      	movs	r2, r3
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	4053      	eors	r3, r2
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d006      	beq.n	8012ace <RegionCN470RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8012ac0:	220f      	movs	r2, #15
 8012ac2:	18bb      	adds	r3, r7, r2
 8012ac4:	18ba      	adds	r2, r7, r2
 8012ac6:	7812      	ldrb	r2, [r2, #0]
 8012ac8:	2101      	movs	r1, #1
 8012aca:	438a      	bics	r2, r1
 8012acc:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE ) == false )
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	b25b      	sxtb	r3, r3
 8012ad4:	2205      	movs	r2, #5
 8012ad6:	2100      	movs	r1, #0
 8012ad8:	0018      	movs	r0, r3
 8012ada:	f001 fc51 	bl	8014380 <RegionCommonValueInRange>
 8012ade:	1e03      	subs	r3, r0, #0
 8012ae0:	d106      	bne.n	8012af0 <RegionCN470RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8012ae2:	220f      	movs	r2, #15
 8012ae4:	18bb      	adds	r3, r7, r2
 8012ae6:	18ba      	adds	r2, r7, r2
 8012ae8:	7812      	ldrb	r2, [r2, #0]
 8012aea:	2102      	movs	r1, #2
 8012aec:	438a      	bics	r2, r1
 8012aee:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN470_MIN_RX1_DR_OFFSET, CN470_MAX_RX1_DR_OFFSET ) == false )
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	785b      	ldrb	r3, [r3, #1]
 8012af4:	b25b      	sxtb	r3, r3
 8012af6:	2203      	movs	r2, #3
 8012af8:	2100      	movs	r1, #0
 8012afa:	0018      	movs	r0, r3
 8012afc:	f001 fc40 	bl	8014380 <RegionCommonValueInRange>
 8012b00:	1e03      	subs	r3, r0, #0
 8012b02:	d106      	bne.n	8012b12 <RegionCN470RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8012b04:	220f      	movs	r2, #15
 8012b06:	18bb      	adds	r3, r7, r2
 8012b08:	18ba      	adds	r2, r7, r2
 8012b0a:	7812      	ldrb	r2, [r2, #0]
 8012b0c:	2104      	movs	r1, #4
 8012b0e:	438a      	bics	r2, r1
 8012b10:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8012b12:	230f      	movs	r3, #15
 8012b14:	18fb      	adds	r3, r7, r3
 8012b16:	781b      	ldrb	r3, [r3, #0]
}
 8012b18:	0018      	movs	r0, r3
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	b004      	add	sp, #16
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <RegionCN470NewChannelReq>:

uint8_t RegionCN470NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
    // Datarate and frequency KO
    return 0;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	0018      	movs	r0, r3
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	b002      	add	sp, #8
 8012b30:	bd80      	pop	{r7, pc}

08012b32 <RegionCN470TxParamSetupReq>:

int8_t RegionCN470TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8012b32:	b580      	push	{r7, lr}
 8012b34:	b082      	sub	sp, #8
 8012b36:	af00      	add	r7, sp, #0
 8012b38:	6078      	str	r0, [r7, #4]
    return -1;
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	425b      	negs	r3, r3
}
 8012b3e:	0018      	movs	r0, r3
 8012b40:	46bd      	mov	sp, r7
 8012b42:	b002      	add	sp, #8
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <RegionCN470DlChannelReq>:

uint8_t RegionCN470DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8012b46:	b580      	push	{r7, lr}
 8012b48:	b082      	sub	sp, #8
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
    return 0;
 8012b4e:	2300      	movs	r3, #0
}
 8012b50:	0018      	movs	r0, r3
 8012b52:	46bd      	mov	sp, r7
 8012b54:	b002      	add	sp, #8
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <RegionCN470CalcBackOff>:
{
    return currentDr;
}

void RegionCN470CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b088      	sub	sp, #32
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8012b60:	210c      	movs	r1, #12
 8012b62:	187b      	adds	r3, r7, r1
 8012b64:	4a12      	ldr	r2, [pc, #72]	; (8012bb0 <RegionCN470CalcBackOff+0x58>)
 8012b66:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8012b68:	187b      	adds	r3, r7, r1
 8012b6a:	4a12      	ldr	r2, [pc, #72]	; (8012bb4 <RegionCN470CalcBackOff+0x5c>)
 8012b6c:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	785a      	ldrb	r2, [r3, #1]
 8012b72:	187b      	adds	r3, r7, r1
 8012b74:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	781a      	ldrb	r2, [r3, #0]
 8012b7a:	187b      	adds	r3, r7, r1
 8012b7c:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	789a      	ldrb	r2, [r3, #2]
 8012b82:	187b      	adds	r3, r7, r1
 8012b84:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	78da      	ldrb	r2, [r3, #3]
 8012b8a:	187b      	adds	r3, r7, r1
 8012b8c:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	685a      	ldr	r2, [r3, #4]
 8012b92:	187b      	adds	r3, r7, r1
 8012b94:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	689a      	ldr	r2, [r3, #8]
 8012b9a:	187b      	adds	r3, r7, r1
 8012b9c:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8012b9e:	187b      	adds	r3, r7, r1
 8012ba0:	0018      	movs	r0, r3
 8012ba2:	f001 ffd5 	bl	8014b50 <RegionCommonCalcBackOff>
}
 8012ba6:	46c0      	nop			; (mov r8, r8)
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	b008      	add	sp, #32
 8012bac:	bd80      	pop	{r7, pc}
 8012bae:	46c0      	nop			; (mov r8, r8)
 8012bb0:	20000ebc 	.word	0x20000ebc
 8012bb4:	2000133c 	.word	0x2000133c

08012bb8 <RegionCN470NextChannel>:

LoRaMacStatus_t RegionCN470NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012bb8:	b5b0      	push	{r4, r5, r7, lr}
 8012bba:	b0a2      	sub	sp, #136	; 0x88
 8012bbc:	af02      	add	r7, sp, #8
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
 8012bc4:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8012bc6:	237f      	movs	r3, #127	; 0x7f
 8012bc8:	18fb      	adds	r3, r7, r3
 8012bca:	2200      	movs	r2, #0
 8012bcc:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8012bce:	2377      	movs	r3, #119	; 0x77
 8012bd0:	18fb      	adds	r3, r7, r3
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[CN470_MAX_NB_CHANNELS] = { 0 };
 8012bd6:	2314      	movs	r3, #20
 8012bd8:	18fb      	adds	r3, r7, r3
 8012bda:	0018      	movs	r0, r3
 8012bdc:	2360      	movs	r3, #96	; 0x60
 8012bde:	001a      	movs	r2, r3
 8012be0:	2100      	movs	r1, #0
 8012be2:	f013 f9a5 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 8012be6:	2300      	movs	r3, #0
 8012be8:	67bb      	str	r3, [r7, #120]	; 0x78

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 6 ) == 0 )
 8012bea:	4b47      	ldr	r3, [pc, #284]	; (8012d08 <RegionCN470NextChannel+0x150>)
 8012bec:	2206      	movs	r2, #6
 8012bee:	2100      	movs	r1, #0
 8012bf0:	0018      	movs	r0, r3
 8012bf2:	f001 fc2d 	bl	8014450 <RegionCommonCountChannels>
 8012bf6:	1e03      	subs	r3, r0, #0
 8012bf8:	d11f      	bne.n	8012c3a <RegionCN470NextChannel+0x82>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] = 0xFFFF;
 8012bfa:	4a44      	ldr	r2, [pc, #272]	; (8012d0c <RegionCN470NextChannel+0x154>)
 8012bfc:	2392      	movs	r3, #146	; 0x92
 8012bfe:	00db      	lsls	r3, r3, #3
 8012c00:	2101      	movs	r1, #1
 8012c02:	4249      	negs	r1, r1
 8012c04:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[1] = 0xFFFF;
 8012c06:	4b41      	ldr	r3, [pc, #260]	; (8012d0c <RegionCN470NextChannel+0x154>)
 8012c08:	4a41      	ldr	r2, [pc, #260]	; (8012d10 <RegionCN470NextChannel+0x158>)
 8012c0a:	2101      	movs	r1, #1
 8012c0c:	4249      	negs	r1, r1
 8012c0e:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMask[2] = 0xFFFF;
 8012c10:	4b3e      	ldr	r3, [pc, #248]	; (8012d0c <RegionCN470NextChannel+0x154>)
 8012c12:	4a40      	ldr	r2, [pc, #256]	; (8012d14 <RegionCN470NextChannel+0x15c>)
 8012c14:	2101      	movs	r1, #1
 8012c16:	4249      	negs	r1, r1
 8012c18:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMask[3] = 0xFFFF;
 8012c1a:	4b3c      	ldr	r3, [pc, #240]	; (8012d0c <RegionCN470NextChannel+0x154>)
 8012c1c:	4a3e      	ldr	r2, [pc, #248]	; (8012d18 <RegionCN470NextChannel+0x160>)
 8012c1e:	2101      	movs	r1, #1
 8012c20:	4249      	negs	r1, r1
 8012c22:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMask[4] = 0xFFFF;
 8012c24:	4a39      	ldr	r2, [pc, #228]	; (8012d0c <RegionCN470NextChannel+0x154>)
 8012c26:	2393      	movs	r3, #147	; 0x93
 8012c28:	00db      	lsls	r3, r3, #3
 8012c2a:	2101      	movs	r1, #1
 8012c2c:	4249      	negs	r1, r1
 8012c2e:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[5] = 0xFFFF;
 8012c30:	4b36      	ldr	r3, [pc, #216]	; (8012d0c <RegionCN470NextChannel+0x154>)
 8012c32:	4a3a      	ldr	r2, [pc, #232]	; (8012d1c <RegionCN470NextChannel+0x164>)
 8012c34:	2101      	movs	r1, #1
 8012c36:	4249      	negs	r1, r1
 8012c38:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681c      	ldr	r4, [r3, #0]
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	0018      	movs	r0, r3
 8012c44:	f00a f80b 	bl	801cc5e <TimerGetElapsedTime>
 8012c48:	0003      	movs	r3, r0
 8012c4a:	429c      	cmp	r4, r3
 8012c4c:	d821      	bhi.n	8012c92 <RegionCN470NextChannel+0xda>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	2200      	movs	r2, #0
 8012c52:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, CN470_MAX_NB_BANDS );
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	7a58      	ldrb	r0, [r3, #9]
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	7a99      	ldrb	r1, [r3, #10]
 8012c5c:	4a30      	ldr	r2, [pc, #192]	; (8012d20 <RegionCN470NextChannel+0x168>)
 8012c5e:	2301      	movs	r3, #1
 8012c60:	f001 fc81 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 8012c64:	0003      	movs	r3, r0
 8012c66:	67bb      	str	r3, [r7, #120]	; 0x78

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	7a1b      	ldrb	r3, [r3, #8]
 8012c6c:	b25b      	sxtb	r3, r3
 8012c6e:	b2d8      	uxtb	r0, r3
 8012c70:	237f      	movs	r3, #127	; 0x7f
 8012c72:	18fc      	adds	r4, r7, r3
 8012c74:	4d2a      	ldr	r5, [pc, #168]	; (8012d20 <RegionCN470NextChannel+0x168>)
 8012c76:	4a25      	ldr	r2, [pc, #148]	; (8012d0c <RegionCN470NextChannel+0x154>)
 8012c78:	4923      	ldr	r1, [pc, #140]	; (8012d08 <RegionCN470NextChannel+0x150>)
 8012c7a:	2377      	movs	r3, #119	; 0x77
 8012c7c:	18fb      	adds	r3, r7, r3
 8012c7e:	9301      	str	r3, [sp, #4]
 8012c80:	2314      	movs	r3, #20
 8012c82:	18fb      	adds	r3, r7, r3
 8012c84:	9300      	str	r3, [sp, #0]
 8012c86:	002b      	movs	r3, r5
 8012c88:	f7ff f934 	bl	8011ef4 <CountNbOfEnabledChannels>
 8012c8c:	0003      	movs	r3, r0
 8012c8e:	7023      	strb	r3, [r4, #0]
 8012c90:	e010      	b.n	8012cb4 <RegionCN470NextChannel+0xfc>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8012c92:	2177      	movs	r1, #119	; 0x77
 8012c94:	187b      	adds	r3, r7, r1
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	3301      	adds	r3, #1
 8012c9a:	b2da      	uxtb	r2, r3
 8012c9c:	187b      	adds	r3, r7, r1
 8012c9e:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	681c      	ldr	r4, [r3, #0]
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	685b      	ldr	r3, [r3, #4]
 8012ca8:	0018      	movs	r0, r3
 8012caa:	f009 ffd8 	bl	801cc5e <TimerGetElapsedTime>
 8012cae:	0003      	movs	r3, r0
 8012cb0:	1ae3      	subs	r3, r4, r3
 8012cb2:	67bb      	str	r3, [r7, #120]	; 0x78
    }

    if( nbEnabledChannels > 0 )
 8012cb4:	237f      	movs	r3, #127	; 0x7f
 8012cb6:	18fb      	adds	r3, r7, r3
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d012      	beq.n	8012ce4 <RegionCN470NextChannel+0x12c>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8012cbe:	237f      	movs	r3, #127	; 0x7f
 8012cc0:	18fb      	adds	r3, r7, r3
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	3b01      	subs	r3, #1
 8012cc6:	0019      	movs	r1, r3
 8012cc8:	2000      	movs	r0, #0
 8012cca:	f009 fff1 	bl	801ccb0 <randr>
 8012cce:	0002      	movs	r2, r0
 8012cd0:	2314      	movs	r3, #20
 8012cd2:	18fb      	adds	r3, r7, r3
 8012cd4:	5c9a      	ldrb	r2, [r3, r2]
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	e00d      	b.n	8012d00 <RegionCN470NextChannel+0x148>
    }
    else
    {
        if( delayTx > 0 )
 8012ce4:	2377      	movs	r3, #119	; 0x77
 8012ce6:	18fb      	adds	r3, r7, r3
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d004      	beq.n	8012cf8 <RegionCN470NextChannel+0x140>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012cf2:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8012cf4:	230b      	movs	r3, #11
 8012cf6:	e003      	b.n	8012d00 <RegionCN470NextChannel+0x148>
        }
        // Datarate not supported by any channel
        *time = 0;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8012cfe:	230c      	movs	r3, #12
    }
}
 8012d00:	0018      	movs	r0, r3
 8012d02:	46bd      	mov	sp, r7
 8012d04:	b020      	add	sp, #128	; 0x80
 8012d06:	bdb0      	pop	{r4, r5, r7, pc}
 8012d08:	2000134c 	.word	0x2000134c
 8012d0c:	20000ebc 	.word	0x20000ebc
 8012d10:	00000492 	.word	0x00000492
 8012d14:	00000494 	.word	0x00000494
 8012d18:	00000496 	.word	0x00000496
 8012d1c:	0000049a 	.word	0x0000049a
 8012d20:	2000133c 	.word	0x2000133c

08012d24 <RegionCN470ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionCN470ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8012d24:	b590      	push	{r4, r7, lr}
 8012d26:	b085      	sub	sp, #20
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	0004      	movs	r4, r0
 8012d2c:	0008      	movs	r0, r1
 8012d2e:	0011      	movs	r1, r2
 8012d30:	1dfb      	adds	r3, r7, #7
 8012d32:	1c22      	adds	r2, r4, #0
 8012d34:	701a      	strb	r2, [r3, #0]
 8012d36:	1dbb      	adds	r3, r7, #6
 8012d38:	1c02      	adds	r2, r0, #0
 8012d3a:	701a      	strb	r2, [r3, #0]
 8012d3c:	1d7b      	adds	r3, r7, #5
 8012d3e:	1c0a      	adds	r2, r1, #0
 8012d40:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8012d42:	1dbb      	adds	r3, r7, #6
 8012d44:	781a      	ldrb	r2, [r3, #0]
 8012d46:	1d7b      	adds	r3, r7, #5
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	b2da      	uxtb	r2, r3
 8012d4e:	210f      	movs	r1, #15
 8012d50:	187b      	adds	r3, r7, r1
 8012d52:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8012d54:	187b      	adds	r3, r7, r1
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	2b7f      	cmp	r3, #127	; 0x7f
 8012d5a:	d903      	bls.n	8012d64 <RegionCN470ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8012d5c:	230f      	movs	r3, #15
 8012d5e:	18fb      	adds	r3, r7, r3
 8012d60:	2200      	movs	r2, #0
 8012d62:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8012d64:	230f      	movs	r3, #15
 8012d66:	18fb      	adds	r3, r7, r3
 8012d68:	781b      	ldrb	r3, [r3, #0]
}
 8012d6a:	0018      	movs	r0, r3
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	b005      	add	sp, #20
 8012d70:	bd90      	pop	{r4, r7, pc}

08012d72 <GetNextLowerTxDr>:
 */
static RegionCN779NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b084      	sub	sp, #16
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	0002      	movs	r2, r0
 8012d7a:	1dfb      	adds	r3, r7, #7
 8012d7c:	701a      	strb	r2, [r3, #0]
 8012d7e:	1dbb      	adds	r3, r7, #6
 8012d80:	1c0a      	adds	r2, r1, #0
 8012d82:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8012d84:	230f      	movs	r3, #15
 8012d86:	18fb      	adds	r3, r7, r3
 8012d88:	2200      	movs	r2, #0
 8012d8a:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8012d8c:	1dfa      	adds	r2, r7, #7
 8012d8e:	1dbb      	adds	r3, r7, #6
 8012d90:	7812      	ldrb	r2, [r2, #0]
 8012d92:	b252      	sxtb	r2, r2
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	b25b      	sxtb	r3, r3
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d105      	bne.n	8012da8 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8012d9c:	230f      	movs	r3, #15
 8012d9e:	18fb      	adds	r3, r7, r3
 8012da0:	1dba      	adds	r2, r7, #6
 8012da2:	7812      	ldrb	r2, [r2, #0]
 8012da4:	701a      	strb	r2, [r3, #0]
 8012da6:	e005      	b.n	8012db4 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8012da8:	1dfb      	adds	r3, r7, #7
 8012daa:	781a      	ldrb	r2, [r3, #0]
 8012dac:	230f      	movs	r3, #15
 8012dae:	18fb      	adds	r3, r7, r3
 8012db0:	3a01      	subs	r2, #1
 8012db2:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8012db4:	230f      	movs	r3, #15
 8012db6:	18fb      	adds	r3, r7, r3
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	b25b      	sxtb	r3, r3
}
 8012dbc:	0018      	movs	r0, r3
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	b004      	add	sp, #16
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
    switch( BandwidthsCN779[drIndex] )
 8012dcc:	4b09      	ldr	r3, [pc, #36]	; (8012df4 <GetBandwidth+0x30>)
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	0092      	lsls	r2, r2, #2
 8012dd2:	58d3      	ldr	r3, [r2, r3]
 8012dd4:	4a08      	ldr	r2, [pc, #32]	; (8012df8 <GetBandwidth+0x34>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d004      	beq.n	8012de4 <GetBandwidth+0x20>
 8012dda:	4a08      	ldr	r2, [pc, #32]	; (8012dfc <GetBandwidth+0x38>)
 8012ddc:	4293      	cmp	r3, r2
 8012dde:	d003      	beq.n	8012de8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8012de0:	2300      	movs	r3, #0
 8012de2:	e002      	b.n	8012dea <GetBandwidth+0x26>
        case 250000:
            return 1;
 8012de4:	2301      	movs	r3, #1
 8012de6:	e000      	b.n	8012dea <GetBandwidth+0x26>
        case 500000:
            return 2;
 8012de8:	2302      	movs	r3, #2
    }
}
 8012dea:	0018      	movs	r0, r3
 8012dec:	46bd      	mov	sp, r7
 8012dee:	b002      	add	sp, #8
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	46c0      	nop			; (mov r8, r8)
 8012df4:	080281d8 	.word	0x080281d8
 8012df8:	0003d090 	.word	0x0003d090
 8012dfc:	0007a120 	.word	0x0007a120

08012e00 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8012e00:	b590      	push	{r4, r7, lr}
 8012e02:	b085      	sub	sp, #20
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	0004      	movs	r4, r0
 8012e08:	0008      	movs	r0, r1
 8012e0a:	0011      	movs	r1, r2
 8012e0c:	603b      	str	r3, [r7, #0]
 8012e0e:	1dfb      	adds	r3, r7, #7
 8012e10:	1c22      	adds	r2, r4, #0
 8012e12:	701a      	strb	r2, [r3, #0]
 8012e14:	1dbb      	adds	r3, r7, #6
 8012e16:	1c02      	adds	r2, r0, #0
 8012e18:	701a      	strb	r2, [r3, #0]
 8012e1a:	1d7b      	adds	r3, r7, #5
 8012e1c:	1c0a      	adds	r2, r1, #0
 8012e1e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8012e20:	210f      	movs	r1, #15
 8012e22:	187b      	adds	r3, r7, r1
 8012e24:	1dfa      	adds	r2, r7, #7
 8012e26:	7812      	ldrb	r2, [r2, #0]
 8012e28:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8012e2a:	187a      	adds	r2, r7, r1
 8012e2c:	1dbb      	adds	r3, r7, #6
 8012e2e:	1df9      	adds	r1, r7, #7
 8012e30:	780c      	ldrb	r4, [r1, #0]
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	b258      	sxtb	r0, r3
 8012e36:	b261      	sxtb	r1, r4
 8012e38:	4288      	cmp	r0, r1
 8012e3a:	da00      	bge.n	8012e3e <LimitTxPower+0x3e>
 8012e3c:	1c23      	adds	r3, r4, #0
 8012e3e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8012e40:	230f      	movs	r3, #15
 8012e42:	18fb      	adds	r3, r7, r3
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	b25b      	sxtb	r3, r3
}
 8012e48:	0018      	movs	r0, r3
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	b005      	add	sp, #20
 8012e4e:	bd90      	pop	{r4, r7, pc}

08012e50 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012e58:	4b0e      	ldr	r3, [pc, #56]	; (8012e94 <VerifyRfFreq+0x44>)
 8012e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e5c:	687a      	ldr	r2, [r7, #4]
 8012e5e:	0010      	movs	r0, r2
 8012e60:	4798      	blx	r3
 8012e62:	0003      	movs	r3, r0
 8012e64:	001a      	movs	r2, r3
 8012e66:	2301      	movs	r3, #1
 8012e68:	4053      	eors	r3, r2
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d001      	beq.n	8012e74 <VerifyRfFreq+0x24>
    {
        return false;
 8012e70:	2300      	movs	r3, #0
 8012e72:	e00a      	b.n	8012e8a <VerifyRfFreq+0x3a>
    }

    if( ( freq < 779500000 ) || ( freq > 786500000 ) )
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	4a08      	ldr	r2, [pc, #32]	; (8012e98 <VerifyRfFreq+0x48>)
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d903      	bls.n	8012e84 <VerifyRfFreq+0x34>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	4a07      	ldr	r2, [pc, #28]	; (8012e9c <VerifyRfFreq+0x4c>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d901      	bls.n	8012e88 <VerifyRfFreq+0x38>
    {
        return false;
 8012e84:	2300      	movs	r3, #0
 8012e86:	e000      	b.n	8012e8a <VerifyRfFreq+0x3a>
    }
    return true;
 8012e88:	2301      	movs	r3, #1
}
 8012e8a:	0018      	movs	r0, r3
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	b002      	add	sp, #8
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	46c0      	nop			; (mov r8, r8)
 8012e94:	08028964 	.word	0x08028964
 8012e98:	2e7639df 	.word	0x2e7639df
 8012e9c:	2ee109a0 	.word	0x2ee109a0

08012ea0 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8012ea0:	b5b0      	push	{r4, r5, r7, lr}
 8012ea2:	b086      	sub	sp, #24
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	60ba      	str	r2, [r7, #8]
 8012ea8:	607b      	str	r3, [r7, #4]
 8012eaa:	230f      	movs	r3, #15
 8012eac:	18fb      	adds	r3, r7, r3
 8012eae:	1c02      	adds	r2, r0, #0
 8012eb0:	701a      	strb	r2, [r3, #0]
 8012eb2:	230e      	movs	r3, #14
 8012eb4:	18fb      	adds	r3, r7, r3
 8012eb6:	1c0a      	adds	r2, r1, #0
 8012eb8:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8012eba:	2317      	movs	r3, #23
 8012ebc:	18fb      	adds	r3, r7, r3
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8012ec2:	2316      	movs	r3, #22
 8012ec4:	18fb      	adds	r3, r7, r3
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < CN779_MAX_NB_CHANNELS; i += 16, k++ )
 8012eca:	2315      	movs	r3, #21
 8012ecc:	18fb      	adds	r3, r7, r3
 8012ece:	2200      	movs	r2, #0
 8012ed0:	701a      	strb	r2, [r3, #0]
 8012ed2:	2314      	movs	r3, #20
 8012ed4:	18fb      	adds	r3, r7, r3
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	701a      	strb	r2, [r3, #0]
 8012eda:	e0b4      	b.n	8013046 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012edc:	2313      	movs	r3, #19
 8012ede:	18fb      	adds	r3, r7, r3
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	701a      	strb	r2, [r3, #0]
 8012ee4:	e09d      	b.n	8013022 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8012ee6:	2314      	movs	r3, #20
 8012ee8:	18fb      	adds	r3, r7, r3
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	005b      	lsls	r3, r3, #1
 8012eee:	68ba      	ldr	r2, [r7, #8]
 8012ef0:	18d3      	adds	r3, r2, r3
 8012ef2:	881b      	ldrh	r3, [r3, #0]
 8012ef4:	001a      	movs	r2, r3
 8012ef6:	2313      	movs	r3, #19
 8012ef8:	18fb      	adds	r3, r7, r3
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	411a      	asrs	r2, r3
 8012efe:	0013      	movs	r3, r2
 8012f00:	2201      	movs	r2, #1
 8012f02:	4013      	ands	r3, r2
 8012f04:	d100      	bne.n	8012f08 <CountNbOfEnabledChannels+0x68>
 8012f06:	e086      	b.n	8013016 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8012f08:	2315      	movs	r3, #21
 8012f0a:	18fb      	adds	r3, r7, r3
 8012f0c:	781a      	ldrb	r2, [r3, #0]
 8012f0e:	2313      	movs	r3, #19
 8012f10:	18fb      	adds	r3, r7, r3
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	18d3      	adds	r3, r2, r3
 8012f16:	001a      	movs	r2, r3
 8012f18:	0013      	movs	r3, r2
 8012f1a:	005b      	lsls	r3, r3, #1
 8012f1c:	189b      	adds	r3, r3, r2
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	001a      	movs	r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	189b      	adds	r3, r3, r2
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d06f      	beq.n	801300c <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8012f2c:	230f      	movs	r3, #15
 8012f2e:	18fb      	adds	r3, r7, r3
 8012f30:	781b      	ldrb	r3, [r3, #0]
 8012f32:	2201      	movs	r2, #1
 8012f34:	4053      	eors	r3, r2
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d008      	beq.n	8012f4e <CountNbOfEnabledChannels+0xae>
                {
                    if( ( CN779_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8012f3c:	2313      	movs	r3, #19
 8012f3e:	18fb      	adds	r3, r7, r3
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	2207      	movs	r2, #7
 8012f44:	411a      	asrs	r2, r3
 8012f46:	0013      	movs	r3, r2
 8012f48:	2201      	movs	r2, #1
 8012f4a:	4013      	ands	r3, r2
 8012f4c:	d060      	beq.n	8013010 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8012f4e:	230e      	movs	r3, #14
 8012f50:	18fb      	adds	r3, r7, r3
 8012f52:	2000      	movs	r0, #0
 8012f54:	5618      	ldrsb	r0, [r3, r0]
 8012f56:	2415      	movs	r4, #21
 8012f58:	193b      	adds	r3, r7, r4
 8012f5a:	781a      	ldrb	r2, [r3, #0]
 8012f5c:	2513      	movs	r5, #19
 8012f5e:	197b      	adds	r3, r7, r5
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	18d3      	adds	r3, r2, r3
 8012f64:	001a      	movs	r2, r3
 8012f66:	0013      	movs	r3, r2
 8012f68:	005b      	lsls	r3, r3, #1
 8012f6a:	189b      	adds	r3, r3, r2
 8012f6c:	009b      	lsls	r3, r3, #2
 8012f6e:	001a      	movs	r2, r3
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	189b      	adds	r3, r3, r2
 8012f74:	7a1b      	ldrb	r3, [r3, #8]
 8012f76:	011b      	lsls	r3, r3, #4
 8012f78:	b25b      	sxtb	r3, r3
 8012f7a:	111b      	asrs	r3, r3, #4
 8012f7c:	b25b      	sxtb	r3, r3
 8012f7e:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8012f80:	193b      	adds	r3, r7, r4
 8012f82:	781a      	ldrb	r2, [r3, #0]
 8012f84:	197b      	adds	r3, r7, r5
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	18d3      	adds	r3, r2, r3
 8012f8a:	001a      	movs	r2, r3
 8012f8c:	0013      	movs	r3, r2
 8012f8e:	005b      	lsls	r3, r3, #1
 8012f90:	189b      	adds	r3, r3, r2
 8012f92:	009b      	lsls	r3, r3, #2
 8012f94:	001a      	movs	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	189b      	adds	r3, r3, r2
 8012f9a:	7a1b      	ldrb	r3, [r3, #8]
 8012f9c:	b25b      	sxtb	r3, r3
 8012f9e:	111b      	asrs	r3, r3, #4
 8012fa0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8012fa2:	001a      	movs	r2, r3
 8012fa4:	f001 f9ec 	bl	8014380 <RegionCommonValueInRange>
 8012fa8:	1e03      	subs	r3, r0, #0
 8012faa:	d033      	beq.n	8013014 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8012fac:	2315      	movs	r3, #21
 8012fae:	18fb      	adds	r3, r7, r3
 8012fb0:	781a      	ldrb	r2, [r3, #0]
 8012fb2:	2313      	movs	r3, #19
 8012fb4:	18fb      	adds	r3, r7, r3
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	18d3      	adds	r3, r2, r3
 8012fba:	001a      	movs	r2, r3
 8012fbc:	0013      	movs	r3, r2
 8012fbe:	005b      	lsls	r3, r3, #1
 8012fc0:	189b      	adds	r3, r3, r2
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	001a      	movs	r2, r3
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	189b      	adds	r3, r3, r2
 8012fca:	7a5b      	ldrb	r3, [r3, #9]
 8012fcc:	011b      	lsls	r3, r3, #4
 8012fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fd0:	18d3      	adds	r3, r2, r3
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d006      	beq.n	8012fe6 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8012fd8:	2116      	movs	r1, #22
 8012fda:	187b      	adds	r3, r7, r1
 8012fdc:	781a      	ldrb	r2, [r3, #0]
 8012fde:	187b      	adds	r3, r7, r1
 8012fe0:	3201      	adds	r2, #1
 8012fe2:	701a      	strb	r2, [r3, #0]
                    continue;
 8012fe4:	e017      	b.n	8013016 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8012fe6:	2217      	movs	r2, #23
 8012fe8:	18bb      	adds	r3, r7, r2
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	18ba      	adds	r2, r7, r2
 8012fee:	1c59      	adds	r1, r3, #1
 8012ff0:	7011      	strb	r1, [r2, #0]
 8012ff2:	001a      	movs	r2, r3
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	189b      	adds	r3, r3, r2
 8012ff8:	2215      	movs	r2, #21
 8012ffa:	18b9      	adds	r1, r7, r2
 8012ffc:	2213      	movs	r2, #19
 8012ffe:	18ba      	adds	r2, r7, r2
 8013000:	7809      	ldrb	r1, [r1, #0]
 8013002:	7812      	ldrb	r2, [r2, #0]
 8013004:	188a      	adds	r2, r1, r2
 8013006:	b2d2      	uxtb	r2, r2
 8013008:	701a      	strb	r2, [r3, #0]
 801300a:	e004      	b.n	8013016 <CountNbOfEnabledChannels+0x176>
                    continue;
 801300c:	46c0      	nop			; (mov r8, r8)
 801300e:	e002      	b.n	8013016 <CountNbOfEnabledChannels+0x176>
                        continue;
 8013010:	46c0      	nop			; (mov r8, r8)
 8013012:	e000      	b.n	8013016 <CountNbOfEnabledChannels+0x176>
                    continue;
 8013014:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8013016:	2113      	movs	r1, #19
 8013018:	187b      	adds	r3, r7, r1
 801301a:	781a      	ldrb	r2, [r3, #0]
 801301c:	187b      	adds	r3, r7, r1
 801301e:	3201      	adds	r2, #1
 8013020:	701a      	strb	r2, [r3, #0]
 8013022:	2313      	movs	r3, #19
 8013024:	18fb      	adds	r3, r7, r3
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	2b0f      	cmp	r3, #15
 801302a:	d800      	bhi.n	801302e <CountNbOfEnabledChannels+0x18e>
 801302c:	e75b      	b.n	8012ee6 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < CN779_MAX_NB_CHANNELS; i += 16, k++ )
 801302e:	2215      	movs	r2, #21
 8013030:	18bb      	adds	r3, r7, r2
 8013032:	18ba      	adds	r2, r7, r2
 8013034:	7812      	ldrb	r2, [r2, #0]
 8013036:	3210      	adds	r2, #16
 8013038:	701a      	strb	r2, [r3, #0]
 801303a:	2114      	movs	r1, #20
 801303c:	187b      	adds	r3, r7, r1
 801303e:	781a      	ldrb	r2, [r3, #0]
 8013040:	187b      	adds	r3, r7, r1
 8013042:	3201      	adds	r2, #1
 8013044:	701a      	strb	r2, [r3, #0]
 8013046:	2315      	movs	r3, #21
 8013048:	18fb      	adds	r3, r7, r3
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	2b0f      	cmp	r3, #15
 801304e:	d800      	bhi.n	8013052 <CountNbOfEnabledChannels+0x1b2>
 8013050:	e744      	b.n	8012edc <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8013052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013054:	2216      	movs	r2, #22
 8013056:	18ba      	adds	r2, r7, r2
 8013058:	7812      	ldrb	r2, [r2, #0]
 801305a:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801305c:	2317      	movs	r3, #23
 801305e:	18fb      	adds	r3, r7, r3
 8013060:	781b      	ldrb	r3, [r3, #0]
}
 8013062:	0018      	movs	r0, r3
 8013064:	46bd      	mov	sp, r7
 8013066:	b006      	add	sp, #24
 8013068:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801306c <RegionCN779GetPhyParam>:

PhyParam_t RegionCN779GetPhyParam( GetPhyParams_t* getPhy )
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b084      	sub	sp, #16
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8013074:	2308      	movs	r3, #8
 8013076:	18fb      	adds	r3, r7, r3
 8013078:	2200      	movs	r2, #0
 801307a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	781b      	ldrb	r3, [r3, #0]
 8013080:	2b34      	cmp	r3, #52	; 0x34
 8013082:	d900      	bls.n	8013086 <RegionCN779GetPhyParam+0x1a>
 8013084:	e0cd      	b.n	8013222 <RegionCN779GetPhyParam+0x1b6>
 8013086:	009a      	lsls	r2, r3, #2
 8013088:	4b6d      	ldr	r3, [pc, #436]	; (8013240 <RegionCN779GetPhyParam+0x1d4>)
 801308a:	18d3      	adds	r3, r2, r3
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = CN779_RX_MIN_DATARATE;
 8013090:	2308      	movs	r3, #8
 8013092:	18fb      	adds	r3, r7, r3
 8013094:	2200      	movs	r2, #0
 8013096:	601a      	str	r2, [r3, #0]
            break;
 8013098:	e0c4      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = CN779_TX_MIN_DATARATE;
 801309a:	2308      	movs	r3, #8
 801309c:	18fb      	adds	r3, r7, r3
 801309e:	2200      	movs	r2, #0
 80130a0:	601a      	str	r2, [r3, #0]
            break;
 80130a2:	e0bf      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = CN779_DEFAULT_DATARATE;
 80130a4:	2308      	movs	r3, #8
 80130a6:	18fb      	adds	r3, r7, r3
 80130a8:	2200      	movs	r2, #0
 80130aa:	601a      	str	r2, [r3, #0]
            break;
 80130ac:	e0ba      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, CN779_TX_MIN_DATARATE );
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	785b      	ldrb	r3, [r3, #1]
 80130b2:	b25b      	sxtb	r3, r3
 80130b4:	2100      	movs	r1, #0
 80130b6:	0018      	movs	r0, r3
 80130b8:	f7ff fe5b 	bl	8012d72 <GetNextLowerTxDr>
 80130bc:	0003      	movs	r3, r0
 80130be:	001a      	movs	r2, r3
 80130c0:	2308      	movs	r3, #8
 80130c2:	18fb      	adds	r3, r7, r3
 80130c4:	601a      	str	r2, [r3, #0]
            break;
 80130c6:	e0ad      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = CN779_MAX_TX_POWER;
 80130c8:	2308      	movs	r3, #8
 80130ca:	18fb      	adds	r3, r7, r3
 80130cc:	2200      	movs	r2, #0
 80130ce:	601a      	str	r2, [r3, #0]
            break;
 80130d0:	e0a8      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = CN779_DEFAULT_TX_POWER;
 80130d2:	2308      	movs	r3, #8
 80130d4:	18fb      	adds	r3, r7, r3
 80130d6:	2200      	movs	r2, #0
 80130d8:	601a      	str	r2, [r3, #0]
            break;
 80130da:	e0a3      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = CN779_ADR_ACK_LIMIT;
 80130dc:	2308      	movs	r3, #8
 80130de:	18fb      	adds	r3, r7, r3
 80130e0:	2240      	movs	r2, #64	; 0x40
 80130e2:	601a      	str	r2, [r3, #0]
            break;
 80130e4:	e09e      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = CN779_ADR_ACK_DELAY;
 80130e6:	2308      	movs	r3, #8
 80130e8:	18fb      	adds	r3, r7, r3
 80130ea:	2220      	movs	r2, #32
 80130ec:	601a      	str	r2, [r3, #0]
            break;
 80130ee:	e099      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateCN779[getPhy->Datarate];
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	785b      	ldrb	r3, [r3, #1]
 80130f4:	b25b      	sxtb	r3, r3
 80130f6:	001a      	movs	r2, r3
 80130f8:	4b52      	ldr	r3, [pc, #328]	; (8013244 <RegionCN779GetPhyParam+0x1d8>)
 80130fa:	5c9b      	ldrb	r3, [r3, r2]
 80130fc:	001a      	movs	r2, r3
 80130fe:	2308      	movs	r3, #8
 8013100:	18fb      	adds	r3, r7, r3
 8013102:	601a      	str	r2, [r3, #0]
            break;
 8013104:	e08e      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterCN779[getPhy->Datarate];
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	785b      	ldrb	r3, [r3, #1]
 801310a:	b25b      	sxtb	r3, r3
 801310c:	001a      	movs	r2, r3
 801310e:	4b4e      	ldr	r3, [pc, #312]	; (8013248 <RegionCN779GetPhyParam+0x1dc>)
 8013110:	5c9b      	ldrb	r3, [r3, r2]
 8013112:	001a      	movs	r2, r3
 8013114:	2308      	movs	r3, #8
 8013116:	18fb      	adds	r3, r7, r3
 8013118:	601a      	str	r2, [r3, #0]
            break;
 801311a:	e083      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = CN779_DUTY_CYCLE_ENABLED;
 801311c:	2308      	movs	r3, #8
 801311e:	18fb      	adds	r3, r7, r3
 8013120:	2201      	movs	r2, #1
 8013122:	601a      	str	r2, [r3, #0]
            break;
 8013124:	e07e      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = CN779_MAX_RX_WINDOW;
 8013126:	2308      	movs	r3, #8
 8013128:	18fb      	adds	r3, r7, r3
 801312a:	4a48      	ldr	r2, [pc, #288]	; (801324c <RegionCN779GetPhyParam+0x1e0>)
 801312c:	601a      	str	r2, [r3, #0]
            break;
 801312e:	e079      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = CN779_RECEIVE_DELAY1;
 8013130:	2308      	movs	r3, #8
 8013132:	18fb      	adds	r3, r7, r3
 8013134:	22fa      	movs	r2, #250	; 0xfa
 8013136:	0092      	lsls	r2, r2, #2
 8013138:	601a      	str	r2, [r3, #0]
            break;
 801313a:	e073      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = CN779_RECEIVE_DELAY2;
 801313c:	2308      	movs	r3, #8
 801313e:	18fb      	adds	r3, r7, r3
 8013140:	22fa      	movs	r2, #250	; 0xfa
 8013142:	00d2      	lsls	r2, r2, #3
 8013144:	601a      	str	r2, [r3, #0]
            break;
 8013146:	e06d      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = CN779_JOIN_ACCEPT_DELAY1;
 8013148:	2308      	movs	r3, #8
 801314a:	18fb      	adds	r3, r7, r3
 801314c:	4a40      	ldr	r2, [pc, #256]	; (8013250 <RegionCN779GetPhyParam+0x1e4>)
 801314e:	601a      	str	r2, [r3, #0]
            break;
 8013150:	e068      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = CN779_JOIN_ACCEPT_DELAY2;
 8013152:	2308      	movs	r3, #8
 8013154:	18fb      	adds	r3, r7, r3
 8013156:	4a3f      	ldr	r2, [pc, #252]	; (8013254 <RegionCN779GetPhyParam+0x1e8>)
 8013158:	601a      	str	r2, [r3, #0]
            break;
 801315a:	e063      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = CN779_MAX_FCNT_GAP;
 801315c:	2308      	movs	r3, #8
 801315e:	18fb      	adds	r3, r7, r3
 8013160:	2280      	movs	r2, #128	; 0x80
 8013162:	01d2      	lsls	r2, r2, #7
 8013164:	601a      	str	r2, [r3, #0]
            break;
 8013166:	e05d      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( CN779_ACKTIMEOUT + randr( -CN779_ACK_TIMEOUT_RND, CN779_ACK_TIMEOUT_RND ) );
 8013168:	23fa      	movs	r3, #250	; 0xfa
 801316a:	009b      	lsls	r3, r3, #2
 801316c:	4a3a      	ldr	r2, [pc, #232]	; (8013258 <RegionCN779GetPhyParam+0x1ec>)
 801316e:	0019      	movs	r1, r3
 8013170:	0010      	movs	r0, r2
 8013172:	f009 fd9d 	bl	801ccb0 <randr>
 8013176:	0003      	movs	r3, r0
 8013178:	22fa      	movs	r2, #250	; 0xfa
 801317a:	00d2      	lsls	r2, r2, #3
 801317c:	4694      	mov	ip, r2
 801317e:	4463      	add	r3, ip
 8013180:	001a      	movs	r2, r3
 8013182:	2308      	movs	r3, #8
 8013184:	18fb      	adds	r3, r7, r3
 8013186:	601a      	str	r2, [r3, #0]
            break;
 8013188:	e04c      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = CN779_DEFAULT_RX1_DR_OFFSET;
 801318a:	2308      	movs	r3, #8
 801318c:	18fb      	adds	r3, r7, r3
 801318e:	2200      	movs	r2, #0
 8013190:	601a      	str	r2, [r3, #0]
            break;
 8013192:	e047      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = CN779_RX_WND_2_FREQ;
 8013194:	2308      	movs	r3, #8
 8013196:	18fb      	adds	r3, r7, r3
 8013198:	4a30      	ldr	r2, [pc, #192]	; (801325c <RegionCN779GetPhyParam+0x1f0>)
 801319a:	601a      	str	r2, [r3, #0]
            break;
 801319c:	e042      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = CN779_RX_WND_2_DR;
 801319e:	2308      	movs	r3, #8
 80131a0:	18fb      	adds	r3, r7, r3
 80131a2:	2200      	movs	r2, #0
 80131a4:	601a      	str	r2, [r3, #0]
            break;
 80131a6:	e03d      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80131a8:	2308      	movs	r3, #8
 80131aa:	18fb      	adds	r3, r7, r3
 80131ac:	4a2c      	ldr	r2, [pc, #176]	; (8013260 <RegionCN779GetPhyParam+0x1f4>)
 80131ae:	601a      	str	r2, [r3, #0]
            break;
 80131b0:	e038      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80131b2:	2308      	movs	r3, #8
 80131b4:	18fb      	adds	r3, r7, r3
 80131b6:	4a2b      	ldr	r2, [pc, #172]	; (8013264 <RegionCN779GetPhyParam+0x1f8>)
 80131b8:	601a      	str	r2, [r3, #0]
            break;
 80131ba:	e033      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = CN779_MAX_NB_CHANNELS;
 80131bc:	2308      	movs	r3, #8
 80131be:	18fb      	adds	r3, r7, r3
 80131c0:	2210      	movs	r2, #16
 80131c2:	601a      	str	r2, [r3, #0]
            break;
 80131c4:	e02e      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80131c6:	2308      	movs	r3, #8
 80131c8:	18fb      	adds	r3, r7, r3
 80131ca:	4a27      	ldr	r2, [pc, #156]	; (8013268 <RegionCN779GetPhyParam+0x1fc>)
 80131cc:	601a      	str	r2, [r3, #0]
            break;
 80131ce:	e029      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80131d0:	2308      	movs	r3, #8
 80131d2:	18fb      	adds	r3, r7, r3
 80131d4:	2200      	movs	r2, #0
 80131d6:	601a      	str	r2, [r3, #0]
            break;
 80131d8:	e024      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = CN779_DEFAULT_MAX_EIRP;
 80131da:	2308      	movs	r3, #8
 80131dc:	18fb      	adds	r3, r7, r3
 80131de:	4a23      	ldr	r2, [pc, #140]	; (801326c <RegionCN779GetPhyParam+0x200>)
 80131e0:	601a      	str	r2, [r3, #0]
            break;
 80131e2:	e01f      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = CN779_DEFAULT_ANTENNA_GAIN;
 80131e4:	2308      	movs	r3, #8
 80131e6:	18fb      	adds	r3, r7, r3
 80131e8:	4a21      	ldr	r2, [pc, #132]	; (8013270 <RegionCN779GetPhyParam+0x204>)
 80131ea:	601a      	str	r2, [r3, #0]
            break;
 80131ec:	e01a      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = CN779_BEACON_CHANNEL_FREQ;
 80131ee:	2308      	movs	r3, #8
 80131f0:	18fb      	adds	r3, r7, r3
 80131f2:	4a20      	ldr	r2, [pc, #128]	; (8013274 <RegionCN779GetPhyParam+0x208>)
 80131f4:	601a      	str	r2, [r3, #0]
            break;
 80131f6:	e015      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = CN779_BEACON_SIZE;
 80131f8:	2108      	movs	r1, #8
 80131fa:	187b      	adds	r3, r7, r1
 80131fc:	2211      	movs	r2, #17
 80131fe:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = CN779_RFU1_SIZE;
 8013200:	187b      	adds	r3, r7, r1
 8013202:	2202      	movs	r2, #2
 8013204:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = CN779_RFU2_SIZE;
 8013206:	187b      	adds	r3, r7, r1
 8013208:	2200      	movs	r2, #0
 801320a:	709a      	strb	r2, [r3, #2]
            break;
 801320c:	e00a      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = CN779_BEACON_CHANNEL_DR;
 801320e:	2308      	movs	r3, #8
 8013210:	18fb      	adds	r3, r7, r3
 8013212:	2203      	movs	r2, #3
 8013214:	601a      	str	r2, [r3, #0]
            break;
 8013216:	e005      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = CN779_PING_SLOT_CHANNEL_DR;
 8013218:	2308      	movs	r3, #8
 801321a:	18fb      	adds	r3, r7, r3
 801321c:	2203      	movs	r2, #3
 801321e:	601a      	str	r2, [r3, #0]
            break;
 8013220:	e000      	b.n	8013224 <RegionCN779GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 8013222:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8013224:	210c      	movs	r1, #12
 8013226:	187b      	adds	r3, r7, r1
 8013228:	2208      	movs	r2, #8
 801322a:	18ba      	adds	r2, r7, r2
 801322c:	6812      	ldr	r2, [r2, #0]
 801322e:	601a      	str	r2, [r3, #0]
 8013230:	187b      	adds	r3, r7, r1
 8013232:	2200      	movs	r2, #0
 8013234:	681a      	ldr	r2, [r3, #0]
 8013236:	0013      	movs	r3, r2
}
 8013238:	0018      	movs	r0, r3
 801323a:	46bd      	mov	sp, r7
 801323c:	b004      	add	sp, #16
 801323e:	bd80      	pop	{r7, pc}
 8013240:	08028208 	.word	0x08028208
 8013244:	080281f8 	.word	0x080281f8
 8013248:	08028200 	.word	0x08028200
 801324c:	00000bb8 	.word	0x00000bb8
 8013250:	00001388 	.word	0x00001388
 8013254:	00001770 	.word	0x00001770
 8013258:	fffffc18 	.word	0xfffffc18
 801325c:	2ed96880 	.word	0x2ed96880
 8013260:	20001434 	.word	0x20001434
 8013264:	20001436 	.word	0x20001436
 8013268:	20001364 	.word	0x20001364
 801326c:	41426666 	.word	0x41426666
 8013270:	4009999a 	.word	0x4009999a
 8013274:	2eca2640 	.word	0x2eca2640

08013278 <RegionCN779SetBandTxDone>:

void RegionCN779SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	7858      	ldrb	r0, [r3, #1]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	0019      	movs	r1, r3
 801328a:	4a0a      	ldr	r2, [pc, #40]	; (80132b4 <RegionCN779SetBandTxDone+0x3c>)
 801328c:	000b      	movs	r3, r1
 801328e:	005b      	lsls	r3, r3, #1
 8013290:	185b      	adds	r3, r3, r1
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	18d3      	adds	r3, r2, r3
 8013296:	3309      	adds	r3, #9
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	330c      	adds	r3, #12
 801329c:	011a      	lsls	r2, r3, #4
 801329e:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <RegionCN779SetBandTxDone+0x3c>)
 80132a0:	18d1      	adds	r1, r2, r3
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	685b      	ldr	r3, [r3, #4]
 80132a6:	001a      	movs	r2, r3
 80132a8:	f001 f942 	bl	8014530 <RegionCommonSetBandTxDone>
}
 80132ac:	46c0      	nop			; (mov r8, r8)
 80132ae:	46bd      	mov	sp, r7
 80132b0:	b002      	add	sp, #8
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	20001364 	.word	0x20001364

080132b8 <RegionCN779InitDefaults>:

void RegionCN779InitDefaults( InitDefaultsParams_t* params )
{
 80132b8:	b590      	push	{r4, r7, lr}
 80132ba:	b087      	sub	sp, #28
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
    Band_t bands[CN779_MAX_NB_BANDS] =
 80132c0:	2108      	movs	r1, #8
 80132c2:	187b      	adds	r3, r7, r1
 80132c4:	2264      	movs	r2, #100	; 0x64
 80132c6:	801a      	strh	r2, [r3, #0]
 80132c8:	187b      	adds	r3, r7, r1
 80132ca:	2200      	movs	r2, #0
 80132cc:	709a      	strb	r2, [r3, #2]
 80132ce:	187b      	adds	r3, r7, r1
 80132d0:	2200      	movs	r2, #0
 80132d2:	605a      	str	r2, [r3, #4]
 80132d4:	187b      	adds	r3, r7, r1
 80132d6:	2200      	movs	r2, #0
 80132d8:	609a      	str	r2, [r3, #8]
 80132da:	187b      	adds	r3, r7, r1
 80132dc:	2200      	movs	r2, #0
 80132de:	60da      	str	r2, [r3, #12]
    {
        CN779_BAND0
    };

    switch( params->Type )
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	791b      	ldrb	r3, [r3, #4]
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d030      	beq.n	801334a <RegionCN779InitDefaults+0x92>
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d022      	beq.n	8013332 <RegionCN779InitDefaults+0x7a>
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d000      	beq.n	80132f2 <RegionCN779InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80132f0:	e038      	b.n	8013364 <RegionCN779InitDefaults+0xac>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * CN779_MAX_NB_BANDS );
 80132f2:	2308      	movs	r3, #8
 80132f4:	18f9      	adds	r1, r7, r3
 80132f6:	4b1d      	ldr	r3, [pc, #116]	; (801336c <RegionCN779InitDefaults+0xb4>)
 80132f8:	2210      	movs	r2, #16
 80132fa:	0018      	movs	r0, r3
 80132fc:	f009 fcee 	bl	801ccdc <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) CN779_LC1;
 8013300:	4b1b      	ldr	r3, [pc, #108]	; (8013370 <RegionCN779InitDefaults+0xb8>)
 8013302:	4a1c      	ldr	r2, [pc, #112]	; (8013374 <RegionCN779InitDefaults+0xbc>)
 8013304:	ca13      	ldmia	r2!, {r0, r1, r4}
 8013306:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) CN779_LC2;
 8013308:	4b19      	ldr	r3, [pc, #100]	; (8013370 <RegionCN779InitDefaults+0xb8>)
 801330a:	4a1b      	ldr	r2, [pc, #108]	; (8013378 <RegionCN779InitDefaults+0xc0>)
 801330c:	330c      	adds	r3, #12
 801330e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8013310:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) CN779_LC3;
 8013312:	4b17      	ldr	r3, [pc, #92]	; (8013370 <RegionCN779InitDefaults+0xb8>)
 8013314:	4a19      	ldr	r2, [pc, #100]	; (801337c <RegionCN779InitDefaults+0xc4>)
 8013316:	3318      	adds	r3, #24
 8013318:	ca13      	ldmia	r2!, {r0, r1, r4}
 801331a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801331c:	4b14      	ldr	r3, [pc, #80]	; (8013370 <RegionCN779InitDefaults+0xb8>)
 801331e:	22d2      	movs	r2, #210	; 0xd2
 8013320:	2107      	movs	r1, #7
 8013322:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8013324:	4916      	ldr	r1, [pc, #88]	; (8013380 <RegionCN779InitDefaults+0xc8>)
 8013326:	4b17      	ldr	r3, [pc, #92]	; (8013384 <RegionCN779InitDefaults+0xcc>)
 8013328:	2201      	movs	r2, #1
 801332a:	0018      	movs	r0, r3
 801332c:	f001 f8d1 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 8013330:	e018      	b.n	8013364 <RegionCN779InitDefaults+0xac>
            if( params->NvmCtx != 0 )
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d013      	beq.n	8013362 <RegionCN779InitDefaults+0xaa>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6819      	ldr	r1, [r3, #0]
 801333e:	4b0c      	ldr	r3, [pc, #48]	; (8013370 <RegionCN779InitDefaults+0xb8>)
 8013340:	22d4      	movs	r2, #212	; 0xd4
 8013342:	0018      	movs	r0, r3
 8013344:	f009 fcca 	bl	801ccdc <memcpy1>
            break;
 8013348:	e00b      	b.n	8013362 <RegionCN779InitDefaults+0xaa>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 801334a:	4b09      	ldr	r3, [pc, #36]	; (8013370 <RegionCN779InitDefaults+0xb8>)
 801334c:	22d0      	movs	r2, #208	; 0xd0
 801334e:	5a9a      	ldrh	r2, [r3, r2]
 8013350:	4b07      	ldr	r3, [pc, #28]	; (8013370 <RegionCN779InitDefaults+0xb8>)
 8013352:	21d2      	movs	r1, #210	; 0xd2
 8013354:	5a5b      	ldrh	r3, [r3, r1]
 8013356:	4313      	orrs	r3, r2
 8013358:	b299      	uxth	r1, r3
 801335a:	4b05      	ldr	r3, [pc, #20]	; (8013370 <RegionCN779InitDefaults+0xb8>)
 801335c:	22d0      	movs	r2, #208	; 0xd0
 801335e:	5299      	strh	r1, [r3, r2]
            break;
 8013360:	e000      	b.n	8013364 <RegionCN779InitDefaults+0xac>
            break;
 8013362:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8013364:	46c0      	nop			; (mov r8, r8)
 8013366:	46bd      	mov	sp, r7
 8013368:	b007      	add	sp, #28
 801336a:	bd90      	pop	{r4, r7, pc}
 801336c:	20001424 	.word	0x20001424
 8013370:	20001364 	.word	0x20001364
 8013374:	08026b24 	.word	0x08026b24
 8013378:	08026b30 	.word	0x08026b30
 801337c:	08026b3c 	.word	0x08026b3c
 8013380:	20001436 	.word	0x20001436
 8013384:	20001434 	.word	0x20001434

08013388 <RegionCN779ApplyCFList>:
            return false;
    }
}

void RegionCN779ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8013388:	b590      	push	{r4, r7, lr}
 801338a:	b08b      	sub	sp, #44	; 0x2c
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8013390:	2318      	movs	r3, #24
 8013392:	18fb      	adds	r3, r7, r3
 8013394:	2250      	movs	r2, #80	; 0x50
 8013396:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	791b      	ldrb	r3, [r3, #4]
 801339c:	2b10      	cmp	r3, #16
 801339e:	d000      	beq.n	80133a2 <RegionCN779ApplyCFList+0x1a>
 80133a0:	e07d      	b.n	801349e <RegionCN779ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	330f      	adds	r3, #15
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d000      	beq.n	80133b0 <RegionCN779ApplyCFList+0x28>
 80133ae:	e078      	b.n	80134a2 <RegionCN779ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80133b0:	2327      	movs	r3, #39	; 0x27
 80133b2:	18fb      	adds	r3, r7, r3
 80133b4:	2200      	movs	r2, #0
 80133b6:	701a      	strb	r2, [r3, #0]
 80133b8:	2326      	movs	r3, #38	; 0x26
 80133ba:	18fb      	adds	r3, r7, r3
 80133bc:	2203      	movs	r2, #3
 80133be:	701a      	strb	r2, [r3, #0]
 80133c0:	e067      	b.n	8013492 <RegionCN779ApplyCFList+0x10a>
    {
        if( chanIdx < ( CN779_NUMB_CHANNELS_CF_LIST + CN779_NUMB_DEFAULT_CHANNELS ) )
 80133c2:	2326      	movs	r3, #38	; 0x26
 80133c4:	18fb      	adds	r3, r7, r3
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	2b07      	cmp	r3, #7
 80133ca:	d82e      	bhi.n	801342a <RegionCN779ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	2427      	movs	r4, #39	; 0x27
 80133d2:	193b      	adds	r3, r7, r4
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	18d3      	adds	r3, r2, r3
 80133d8:	781b      	ldrb	r3, [r3, #0]
 80133da:	001a      	movs	r2, r3
 80133dc:	2018      	movs	r0, #24
 80133de:	183b      	adds	r3, r7, r0
 80133e0:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80133e2:	183b      	adds	r3, r7, r0
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6819      	ldr	r1, [r3, #0]
 80133ea:	193b      	adds	r3, r7, r4
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	3301      	adds	r3, #1
 80133f0:	18cb      	adds	r3, r1, r3
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	021b      	lsls	r3, r3, #8
 80133f6:	431a      	orrs	r2, r3
 80133f8:	183b      	adds	r3, r7, r0
 80133fa:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80133fc:	183b      	adds	r3, r7, r0
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6819      	ldr	r1, [r3, #0]
 8013404:	193b      	adds	r3, r7, r4
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	3302      	adds	r3, #2
 801340a:	18cb      	adds	r3, r1, r3
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	041b      	lsls	r3, r3, #16
 8013410:	431a      	orrs	r2, r3
 8013412:	183b      	adds	r3, r7, r0
 8013414:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8013416:	183b      	adds	r3, r7, r0
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2264      	movs	r2, #100	; 0x64
 801341c:	435a      	muls	r2, r3
 801341e:	183b      	adds	r3, r7, r0
 8013420:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8013422:	183b      	adds	r3, r7, r0
 8013424:	2200      	movs	r2, #0
 8013426:	605a      	str	r2, [r3, #4]
 8013428:	e009      	b.n	801343e <RegionCN779ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 801342a:	2118      	movs	r1, #24
 801342c:	187b      	adds	r3, r7, r1
 801342e:	2200      	movs	r2, #0
 8013430:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8013432:	187b      	adds	r3, r7, r1
 8013434:	2200      	movs	r2, #0
 8013436:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8013438:	187b      	adds	r3, r7, r1
 801343a:	2200      	movs	r2, #0
 801343c:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 801343e:	2318      	movs	r3, #24
 8013440:	18fb      	adds	r3, r7, r3
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d00e      	beq.n	8013466 <RegionCN779ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8013448:	2110      	movs	r1, #16
 801344a:	187b      	adds	r3, r7, r1
 801344c:	2218      	movs	r2, #24
 801344e:	18ba      	adds	r2, r7, r2
 8013450:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8013452:	187b      	adds	r3, r7, r1
 8013454:	2226      	movs	r2, #38	; 0x26
 8013456:	18ba      	adds	r2, r7, r2
 8013458:	7812      	ldrb	r2, [r2, #0]
 801345a:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionCN779ChannelAdd( &channelAdd );
 801345c:	187b      	adds	r3, r7, r1
 801345e:	0018      	movs	r0, r3
 8013460:	f000 fd7c 	bl	8013f5c <RegionCN779ChannelAdd>
 8013464:	e009      	b.n	801347a <RegionCN779ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8013466:	210c      	movs	r1, #12
 8013468:	187b      	adds	r3, r7, r1
 801346a:	2226      	movs	r2, #38	; 0x26
 801346c:	18ba      	adds	r2, r7, r2
 801346e:	7812      	ldrb	r2, [r2, #0]
 8013470:	701a      	strb	r2, [r3, #0]

            RegionCN779ChannelsRemove( &channelRemove );
 8013472:	187b      	adds	r3, r7, r1
 8013474:	0018      	movs	r0, r3
 8013476:	f000 fe2b 	bl	80140d0 <RegionCN779ChannelsRemove>
    for( uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801347a:	2227      	movs	r2, #39	; 0x27
 801347c:	18bb      	adds	r3, r7, r2
 801347e:	18ba      	adds	r2, r7, r2
 8013480:	7812      	ldrb	r2, [r2, #0]
 8013482:	3203      	adds	r2, #3
 8013484:	701a      	strb	r2, [r3, #0]
 8013486:	2126      	movs	r1, #38	; 0x26
 8013488:	187b      	adds	r3, r7, r1
 801348a:	781a      	ldrb	r2, [r3, #0]
 801348c:	187b      	adds	r3, r7, r1
 801348e:	3201      	adds	r2, #1
 8013490:	701a      	strb	r2, [r3, #0]
 8013492:	2326      	movs	r3, #38	; 0x26
 8013494:	18fb      	adds	r3, r7, r3
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	2b0f      	cmp	r3, #15
 801349a:	d992      	bls.n	80133c2 <RegionCN779ApplyCFList+0x3a>
 801349c:	e002      	b.n	80134a4 <RegionCN779ApplyCFList+0x11c>
        return;
 801349e:	46c0      	nop			; (mov r8, r8)
 80134a0:	e000      	b.n	80134a4 <RegionCN779ApplyCFList+0x11c>
        return;
 80134a2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80134a4:	46bd      	mov	sp, r7
 80134a6:	b00b      	add	sp, #44	; 0x2c
 80134a8:	bd90      	pop	{r4, r7, pc}
	...

080134ac <RegionCN779ComputeRxWindowParameters>:
    }
    return true;
}

void RegionCN779ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80134ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134ae:	b08b      	sub	sp, #44	; 0x2c
 80134b0:	af04      	add	r7, sp, #16
 80134b2:	60ba      	str	r2, [r7, #8]
 80134b4:	607b      	str	r3, [r7, #4]
 80134b6:	250f      	movs	r5, #15
 80134b8:	197b      	adds	r3, r7, r5
 80134ba:	1c02      	adds	r2, r0, #0
 80134bc:	701a      	strb	r2, [r3, #0]
 80134be:	230e      	movs	r3, #14
 80134c0:	18fb      	adds	r3, r7, r3
 80134c2:	1c0a      	adds	r2, r1, #0
 80134c4:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 80134c6:	2300      	movs	r3, #0
 80134c8:	2400      	movs	r4, #0
 80134ca:	613b      	str	r3, [r7, #16]
 80134cc:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, CN779_RX_MAX_DATARATE );
 80134ce:	197b      	adds	r3, r7, r5
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	b25a      	sxtb	r2, r3
 80134d4:	2a07      	cmp	r2, #7
 80134d6:	dd00      	ble.n	80134da <RegionCN779ComputeRxWindowParameters+0x2e>
 80134d8:	2307      	movs	r3, #7
 80134da:	b25a      	sxtb	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	785b      	ldrb	r3, [r3, #1]
 80134e4:	b25b      	sxtb	r3, r3
 80134e6:	0018      	movs	r0, r3
 80134e8:	f7ff fc6c 	bl	8012dc4 <GetBandwidth>
 80134ec:	0003      	movs	r3, r0
 80134ee:	b2da      	uxtb	r2, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	785b      	ldrb	r3, [r3, #1]
 80134f8:	b25b      	sxtb	r3, r3
 80134fa:	2b07      	cmp	r3, #7
 80134fc:	d10d      	bne.n	801351a <RegionCN779ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesCN779[rxConfigParams->Datarate] );
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	785b      	ldrb	r3, [r3, #1]
 8013502:	b25b      	sxtb	r3, r3
 8013504:	001a      	movs	r2, r3
 8013506:	4b1b      	ldr	r3, [pc, #108]	; (8013574 <RegionCN779ComputeRxWindowParameters+0xc8>)
 8013508:	5c9b      	ldrb	r3, [r3, r2]
 801350a:	0018      	movs	r0, r3
 801350c:	f001 fa48 	bl	80149a0 <RegionCommonComputeSymbolTimeFsk>
 8013510:	0003      	movs	r3, r0
 8013512:	000c      	movs	r4, r1
 8013514:	613b      	str	r3, [r7, #16]
 8013516:	617c      	str	r4, [r7, #20]
 8013518:	e013      	b.n	8013542 <RegionCN779ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesCN779[rxConfigParams->Datarate], BandwidthsCN779[rxConfigParams->Datarate] );
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	785b      	ldrb	r3, [r3, #1]
 801351e:	b25b      	sxtb	r3, r3
 8013520:	001a      	movs	r2, r3
 8013522:	4b14      	ldr	r3, [pc, #80]	; (8013574 <RegionCN779ComputeRxWindowParameters+0xc8>)
 8013524:	5c98      	ldrb	r0, [r3, r2]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	785b      	ldrb	r3, [r3, #1]
 801352a:	b25b      	sxtb	r3, r3
 801352c:	001a      	movs	r2, r3
 801352e:	4b12      	ldr	r3, [pc, #72]	; (8013578 <RegionCN779ComputeRxWindowParameters+0xcc>)
 8013530:	0092      	lsls	r2, r2, #2
 8013532:	58d3      	ldr	r3, [r2, r3]
 8013534:	0019      	movs	r1, r3
 8013536:	f001 fa07 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 801353a:	0003      	movs	r3, r0
 801353c:	000c      	movs	r4, r1
 801353e:	613b      	str	r3, [r7, #16]
 8013540:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8013542:	4b0e      	ldr	r3, [pc, #56]	; (801357c <RegionCN779ComputeRxWindowParameters+0xd0>)
 8013544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013546:	4798      	blx	r3
 8013548:	0006      	movs	r6, r0
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	3308      	adds	r3, #8
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	320c      	adds	r2, #12
 8013552:	68bd      	ldr	r5, [r7, #8]
 8013554:	210e      	movs	r1, #14
 8013556:	1879      	adds	r1, r7, r1
 8013558:	780c      	ldrb	r4, [r1, #0]
 801355a:	6938      	ldr	r0, [r7, #16]
 801355c:	6979      	ldr	r1, [r7, #20]
 801355e:	9202      	str	r2, [sp, #8]
 8013560:	9301      	str	r3, [sp, #4]
 8013562:	9600      	str	r6, [sp, #0]
 8013564:	002b      	movs	r3, r5
 8013566:	0022      	movs	r2, r4
 8013568:	f001 fa36 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 801356c:	46c0      	nop			; (mov r8, r8)
 801356e:	46bd      	mov	sp, r7
 8013570:	b007      	add	sp, #28
 8013572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013574:	080281d0 	.word	0x080281d0
 8013578:	080281d8 	.word	0x080281d8
 801357c:	08028964 	.word	0x08028964

08013580 <RegionCN779RxConfig>:

bool RegionCN779RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013582:	b091      	sub	sp, #68	; 0x44
 8013584:	af0a      	add	r7, sp, #40	; 0x28
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801358a:	230f      	movs	r3, #15
 801358c:	18fb      	adds	r3, r7, r3
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	7852      	ldrb	r2, [r2, #1]
 8013592:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8013594:	2316      	movs	r3, #22
 8013596:	18fb      	adds	r3, r7, r3
 8013598:	2200      	movs	r2, #0
 801359a:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 801359c:	230e      	movs	r3, #14
 801359e:	18fb      	adds	r3, r7, r3
 80135a0:	2200      	movs	r2, #0
 80135a2:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	685b      	ldr	r3, [r3, #4]
 80135a8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80135aa:	4b64      	ldr	r3, [pc, #400]	; (801373c <RegionCN779RxConfig+0x1bc>)
 80135ac:	68db      	ldr	r3, [r3, #12]
 80135ae:	4798      	blx	r3
 80135b0:	1e03      	subs	r3, r0, #0
 80135b2:	d001      	beq.n	80135b8 <RegionCN779RxConfig+0x38>
    {
        return false;
 80135b4:	2300      	movs	r3, #0
 80135b6:	e0bc      	b.n	8013732 <RegionCN779RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	7cdb      	ldrb	r3, [r3, #19]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d122      	bne.n	8013606 <RegionCN779RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	0019      	movs	r1, r3
 80135c6:	4a5e      	ldr	r2, [pc, #376]	; (8013740 <RegionCN779RxConfig+0x1c0>)
 80135c8:	000b      	movs	r3, r1
 80135ca:	005b      	lsls	r3, r3, #1
 80135cc:	185b      	adds	r3, r3, r1
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	589b      	ldr	r3, [r3, r2]
 80135d2:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	0019      	movs	r1, r3
 80135da:	4a59      	ldr	r2, [pc, #356]	; (8013740 <RegionCN779RxConfig+0x1c0>)
 80135dc:	000b      	movs	r3, r1
 80135de:	005b      	lsls	r3, r3, #1
 80135e0:	185b      	adds	r3, r3, r1
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	18d3      	adds	r3, r2, r3
 80135e6:	3304      	adds	r3, #4
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d00b      	beq.n	8013606 <RegionCN779RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	0019      	movs	r1, r3
 80135f4:	4a52      	ldr	r2, [pc, #328]	; (8013740 <RegionCN779RxConfig+0x1c0>)
 80135f6:	000b      	movs	r3, r1
 80135f8:	005b      	lsls	r3, r3, #1
 80135fa:	185b      	adds	r3, r3, r1
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	18d3      	adds	r3, r2, r3
 8013600:	3304      	adds	r3, #4
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesCN779[dr];
 8013606:	240f      	movs	r4, #15
 8013608:	193b      	adds	r3, r7, r4
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	b25b      	sxtb	r3, r3
 801360e:	4a4d      	ldr	r2, [pc, #308]	; (8013744 <RegionCN779RxConfig+0x1c4>)
 8013610:	5cd2      	ldrb	r2, [r2, r3]
 8013612:	230e      	movs	r3, #14
 8013614:	18fb      	adds	r3, r7, r3
 8013616:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8013618:	4b48      	ldr	r3, [pc, #288]	; (801373c <RegionCN779RxConfig+0x1bc>)
 801361a:	695b      	ldr	r3, [r3, #20]
 801361c:	693a      	ldr	r2, [r7, #16]
 801361e:	0010      	movs	r0, r2
 8013620:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8013622:	193b      	adds	r3, r7, r4
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	b25b      	sxtb	r3, r3
 8013628:	2b07      	cmp	r3, #7
 801362a:	d12f      	bne.n	801368c <RegionCN779RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 801362c:	2117      	movs	r1, #23
 801362e:	187b      	adds	r3, r7, r1
 8013630:	2200      	movs	r2, #0
 8013632:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8013634:	4b41      	ldr	r3, [pc, #260]	; (801373c <RegionCN779RxConfig+0x1bc>)
 8013636:	6a1c      	ldr	r4, [r3, #32]
 8013638:	230e      	movs	r3, #14
 801363a:	18fb      	adds	r3, r7, r3
 801363c:	2200      	movs	r2, #0
 801363e:	569a      	ldrsb	r2, [r3, r2]
 8013640:	0013      	movs	r3, r2
 8013642:	015b      	lsls	r3, r3, #5
 8013644:	1a9b      	subs	r3, r3, r2
 8013646:	009b      	lsls	r3, r3, #2
 8013648:	189b      	adds	r3, r3, r2
 801364a:	00db      	lsls	r3, r3, #3
 801364c:	001e      	movs	r6, r3
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	b29b      	uxth	r3, r3
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	7c92      	ldrb	r2, [r2, #18]
 8013658:	4d3b      	ldr	r5, [pc, #236]	; (8013748 <RegionCN779RxConfig+0x1c8>)
 801365a:	1879      	adds	r1, r7, r1
 801365c:	7808      	ldrb	r0, [r1, #0]
 801365e:	9209      	str	r2, [sp, #36]	; 0x24
 8013660:	2200      	movs	r2, #0
 8013662:	9208      	str	r2, [sp, #32]
 8013664:	2200      	movs	r2, #0
 8013666:	9207      	str	r2, [sp, #28]
 8013668:	2200      	movs	r2, #0
 801366a:	9206      	str	r2, [sp, #24]
 801366c:	2201      	movs	r2, #1
 801366e:	9205      	str	r2, [sp, #20]
 8013670:	2200      	movs	r2, #0
 8013672:	9204      	str	r2, [sp, #16]
 8013674:	2200      	movs	r2, #0
 8013676:	9203      	str	r2, [sp, #12]
 8013678:	9302      	str	r3, [sp, #8]
 801367a:	2305      	movs	r3, #5
 801367c:	9301      	str	r3, [sp, #4]
 801367e:	4b33      	ldr	r3, [pc, #204]	; (801374c <RegionCN779RxConfig+0x1cc>)
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	2300      	movs	r3, #0
 8013684:	0032      	movs	r2, r6
 8013686:	0029      	movs	r1, r5
 8013688:	47a0      	blx	r4
 801368a:	e029      	b.n	80136e0 <RegionCN779RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 801368c:	2117      	movs	r1, #23
 801368e:	187b      	adds	r3, r7, r1
 8013690:	2201      	movs	r2, #1
 8013692:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8013694:	4b29      	ldr	r3, [pc, #164]	; (801373c <RegionCN779RxConfig+0x1bc>)
 8013696:	6a1c      	ldr	r4, [r3, #32]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	789b      	ldrb	r3, [r3, #2]
 801369c:	001e      	movs	r6, r3
 801369e:	230e      	movs	r3, #14
 80136a0:	18fb      	adds	r3, r7, r3
 80136a2:	2500      	movs	r5, #0
 80136a4:	575d      	ldrsb	r5, [r3, r5]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	689b      	ldr	r3, [r3, #8]
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	7c92      	ldrb	r2, [r2, #18]
 80136b0:	1879      	adds	r1, r7, r1
 80136b2:	7808      	ldrb	r0, [r1, #0]
 80136b4:	9209      	str	r2, [sp, #36]	; 0x24
 80136b6:	2201      	movs	r2, #1
 80136b8:	9208      	str	r2, [sp, #32]
 80136ba:	2200      	movs	r2, #0
 80136bc:	9207      	str	r2, [sp, #28]
 80136be:	2200      	movs	r2, #0
 80136c0:	9206      	str	r2, [sp, #24]
 80136c2:	2200      	movs	r2, #0
 80136c4:	9205      	str	r2, [sp, #20]
 80136c6:	2200      	movs	r2, #0
 80136c8:	9204      	str	r2, [sp, #16]
 80136ca:	2200      	movs	r2, #0
 80136cc:	9203      	str	r2, [sp, #12]
 80136ce:	9302      	str	r3, [sp, #8]
 80136d0:	2308      	movs	r3, #8
 80136d2:	9301      	str	r3, [sp, #4]
 80136d4:	2300      	movs	r3, #0
 80136d6:	9300      	str	r3, [sp, #0]
 80136d8:	2301      	movs	r3, #1
 80136da:	002a      	movs	r2, r5
 80136dc:	0031      	movs	r1, r6
 80136de:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	7c5b      	ldrb	r3, [r3, #17]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d009      	beq.n	80136fc <RegionCN779RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterCN779[dr];
 80136e8:	230f      	movs	r3, #15
 80136ea:	18fb      	adds	r3, r7, r3
 80136ec:	2200      	movs	r2, #0
 80136ee:	569a      	ldrsb	r2, [r3, r2]
 80136f0:	2316      	movs	r3, #22
 80136f2:	18fb      	adds	r3, r7, r3
 80136f4:	4916      	ldr	r1, [pc, #88]	; (8013750 <RegionCN779RxConfig+0x1d0>)
 80136f6:	5c8a      	ldrb	r2, [r1, r2]
 80136f8:	701a      	strb	r2, [r3, #0]
 80136fa:	e008      	b.n	801370e <RegionCN779RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateCN779[dr];
 80136fc:	230f      	movs	r3, #15
 80136fe:	18fb      	adds	r3, r7, r3
 8013700:	2200      	movs	r2, #0
 8013702:	569a      	ldrsb	r2, [r3, r2]
 8013704:	2316      	movs	r3, #22
 8013706:	18fb      	adds	r3, r7, r3
 8013708:	4912      	ldr	r1, [pc, #72]	; (8013754 <RegionCN779RxConfig+0x1d4>)
 801370a:	5c8a      	ldrb	r2, [r1, r2]
 801370c:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801370e:	4b0b      	ldr	r3, [pc, #44]	; (801373c <RegionCN779RxConfig+0x1bc>)
 8013710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013712:	2216      	movs	r2, #22
 8013714:	18ba      	adds	r2, r7, r2
 8013716:	7812      	ldrb	r2, [r2, #0]
 8013718:	320d      	adds	r2, #13
 801371a:	b2d1      	uxtb	r1, r2
 801371c:	2217      	movs	r2, #23
 801371e:	18ba      	adds	r2, r7, r2
 8013720:	7812      	ldrb	r2, [r2, #0]
 8013722:	0010      	movs	r0, r2
 8013724:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	220f      	movs	r2, #15
 801372a:	18ba      	adds	r2, r7, r2
 801372c:	7812      	ldrb	r2, [r2, #0]
 801372e:	701a      	strb	r2, [r3, #0]
    return true;
 8013730:	2301      	movs	r3, #1
}
 8013732:	0018      	movs	r0, r3
 8013734:	46bd      	mov	sp, r7
 8013736:	b007      	add	sp, #28
 8013738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801373a:	46c0      	nop			; (mov r8, r8)
 801373c:	08028964 	.word	0x08028964
 8013740:	20001364 	.word	0x20001364
 8013744:	080281d0 	.word	0x080281d0
 8013748:	0000c350 	.word	0x0000c350
 801374c:	00014585 	.word	0x00014585
 8013750:	08028200 	.word	0x08028200
 8013754:	080281f8 	.word	0x080281f8

08013758 <RegionCN779TxConfig>:

bool RegionCN779TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801375a:	b093      	sub	sp, #76	; 0x4c
 801375c:	af0a      	add	r7, sp, #40	; 0x28
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	60b9      	str	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesCN779[txConfig->Datarate];
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	785b      	ldrb	r3, [r3, #1]
 8013768:	b25b      	sxtb	r3, r3
 801376a:	001a      	movs	r2, r3
 801376c:	4b60      	ldr	r3, [pc, #384]	; (80138f0 <RegionCN779TxConfig+0x198>)
 801376e:	5c9a      	ldrb	r2, [r3, r2]
 8013770:	231e      	movs	r3, #30
 8013772:	18fb      	adds	r3, r7, r3
 8013774:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	2002      	movs	r0, #2
 801377a:	5618      	ldrsb	r0, [r3, r0]
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	0019      	movs	r1, r3
 8013782:	4a5c      	ldr	r2, [pc, #368]	; (80138f4 <RegionCN779TxConfig+0x19c>)
 8013784:	000b      	movs	r3, r1
 8013786:	005b      	lsls	r3, r3, #1
 8013788:	185b      	adds	r3, r3, r1
 801378a:	009b      	lsls	r3, r3, #2
 801378c:	18d3      	adds	r3, r2, r3
 801378e:	3309      	adds	r3, #9
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	4a58      	ldr	r2, [pc, #352]	; (80138f4 <RegionCN779TxConfig+0x19c>)
 8013794:	330c      	adds	r3, #12
 8013796:	011b      	lsls	r3, r3, #4
 8013798:	18d3      	adds	r3, r2, r3
 801379a:	3302      	adds	r3, #2
 801379c:	2100      	movs	r1, #0
 801379e:	5659      	ldrsb	r1, [r3, r1]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2201      	movs	r2, #1
 80137a4:	569a      	ldrsb	r2, [r3, r2]
 80137a6:	251d      	movs	r5, #29
 80137a8:	197c      	adds	r4, r7, r5
 80137aa:	4b53      	ldr	r3, [pc, #332]	; (80138f8 <RegionCN779TxConfig+0x1a0>)
 80137ac:	f7ff fb28 	bl	8012e00 <LimitTxPower>
 80137b0:	0003      	movs	r3, r0
 80137b2:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	785b      	ldrb	r3, [r3, #1]
 80137b8:	b25b      	sxtb	r3, r3
 80137ba:	0018      	movs	r0, r3
 80137bc:	f7ff fb02 	bl	8012dc4 <GetBandwidth>
 80137c0:	0003      	movs	r3, r0
 80137c2:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80137c4:	2017      	movs	r0, #23
 80137c6:	183b      	adds	r3, r7, r0
 80137c8:	2200      	movs	r2, #0
 80137ca:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	6859      	ldr	r1, [r3, #4]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	689a      	ldr	r2, [r3, #8]
 80137d4:	183c      	adds	r4, r7, r0
 80137d6:	197b      	adds	r3, r7, r5
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	b25b      	sxtb	r3, r3
 80137dc:	0018      	movs	r0, r3
 80137de:	f001 f97f 	bl	8014ae0 <RegionCommonComputeTxPower>
 80137e2:	0003      	movs	r3, r0
 80137e4:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80137e6:	4b45      	ldr	r3, [pc, #276]	; (80138fc <RegionCN779TxConfig+0x1a4>)
 80137e8:	695a      	ldr	r2, [r3, #20]
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	0018      	movs	r0, r3
 80137f0:	4940      	ldr	r1, [pc, #256]	; (80138f4 <RegionCN779TxConfig+0x19c>)
 80137f2:	0003      	movs	r3, r0
 80137f4:	005b      	lsls	r3, r3, #1
 80137f6:	181b      	adds	r3, r3, r0
 80137f8:	009b      	lsls	r3, r3, #2
 80137fa:	585b      	ldr	r3, [r3, r1]
 80137fc:	0018      	movs	r0, r3
 80137fe:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	785b      	ldrb	r3, [r3, #1]
 8013804:	b25b      	sxtb	r3, r3
 8013806:	2b07      	cmp	r3, #7
 8013808:	d12d      	bne.n	8013866 <RegionCN779TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801380a:	201f      	movs	r0, #31
 801380c:	183b      	adds	r3, r7, r0
 801380e:	2200      	movs	r2, #0
 8013810:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8013812:	4b3a      	ldr	r3, [pc, #232]	; (80138fc <RegionCN779TxConfig+0x1a4>)
 8013814:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013816:	231e      	movs	r3, #30
 8013818:	18fb      	adds	r3, r7, r3
 801381a:	2200      	movs	r2, #0
 801381c:	569a      	ldrsb	r2, [r3, r2]
 801381e:	0013      	movs	r3, r2
 8013820:	015b      	lsls	r3, r3, #5
 8013822:	1a9b      	subs	r3, r3, r2
 8013824:	009b      	lsls	r3, r3, #2
 8013826:	189b      	adds	r3, r3, r2
 8013828:	00db      	lsls	r3, r3, #3
 801382a:	001d      	movs	r5, r3
 801382c:	69ba      	ldr	r2, [r7, #24]
 801382e:	4e34      	ldr	r6, [pc, #208]	; (8013900 <RegionCN779TxConfig+0x1a8>)
 8013830:	2317      	movs	r3, #23
 8013832:	18fb      	adds	r3, r7, r3
 8013834:	2100      	movs	r1, #0
 8013836:	5659      	ldrsb	r1, [r3, r1]
 8013838:	183b      	adds	r3, r7, r0
 801383a:	7818      	ldrb	r0, [r3, #0]
 801383c:	4b31      	ldr	r3, [pc, #196]	; (8013904 <RegionCN779TxConfig+0x1ac>)
 801383e:	9308      	str	r3, [sp, #32]
 8013840:	2300      	movs	r3, #0
 8013842:	9307      	str	r3, [sp, #28]
 8013844:	2300      	movs	r3, #0
 8013846:	9306      	str	r3, [sp, #24]
 8013848:	2300      	movs	r3, #0
 801384a:	9305      	str	r3, [sp, #20]
 801384c:	2301      	movs	r3, #1
 801384e:	9304      	str	r3, [sp, #16]
 8013850:	2300      	movs	r3, #0
 8013852:	9303      	str	r3, [sp, #12]
 8013854:	2305      	movs	r3, #5
 8013856:	9302      	str	r3, [sp, #8]
 8013858:	2300      	movs	r3, #0
 801385a:	9301      	str	r3, [sp, #4]
 801385c:	9500      	str	r5, [sp, #0]
 801385e:	0013      	movs	r3, r2
 8013860:	0032      	movs	r2, r6
 8013862:	47a0      	blx	r4
 8013864:	e024      	b.n	80138b0 <RegionCN779TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 8013866:	201f      	movs	r0, #31
 8013868:	183b      	adds	r3, r7, r0
 801386a:	2201      	movs	r2, #1
 801386c:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 801386e:	4b23      	ldr	r3, [pc, #140]	; (80138fc <RegionCN779TxConfig+0x1a4>)
 8013870:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013872:	231e      	movs	r3, #30
 8013874:	18fb      	adds	r3, r7, r3
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	b25b      	sxtb	r3, r3
 801387a:	69bd      	ldr	r5, [r7, #24]
 801387c:	2217      	movs	r2, #23
 801387e:	18ba      	adds	r2, r7, r2
 8013880:	2100      	movs	r1, #0
 8013882:	5651      	ldrsb	r1, [r2, r1]
 8013884:	183a      	adds	r2, r7, r0
 8013886:	7810      	ldrb	r0, [r2, #0]
 8013888:	4a1e      	ldr	r2, [pc, #120]	; (8013904 <RegionCN779TxConfig+0x1ac>)
 801388a:	9208      	str	r2, [sp, #32]
 801388c:	2200      	movs	r2, #0
 801388e:	9207      	str	r2, [sp, #28]
 8013890:	2200      	movs	r2, #0
 8013892:	9206      	str	r2, [sp, #24]
 8013894:	2200      	movs	r2, #0
 8013896:	9205      	str	r2, [sp, #20]
 8013898:	2201      	movs	r2, #1
 801389a:	9204      	str	r2, [sp, #16]
 801389c:	2200      	movs	r2, #0
 801389e:	9203      	str	r2, [sp, #12]
 80138a0:	2208      	movs	r2, #8
 80138a2:	9202      	str	r2, [sp, #8]
 80138a4:	2201      	movs	r2, #1
 80138a6:	9201      	str	r2, [sp, #4]
 80138a8:	9300      	str	r3, [sp, #0]
 80138aa:	002b      	movs	r3, r5
 80138ac:	2200      	movs	r2, #0
 80138ae:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80138b0:	4b12      	ldr	r3, [pc, #72]	; (80138fc <RegionCN779TxConfig+0x1a4>)
 80138b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80138b4:	68fa      	ldr	r2, [r7, #12]
 80138b6:	8992      	ldrh	r2, [r2, #12]
 80138b8:	b2d1      	uxtb	r1, r2
 80138ba:	241f      	movs	r4, #31
 80138bc:	193a      	adds	r2, r7, r4
 80138be:	7812      	ldrb	r2, [r2, #0]
 80138c0:	0010      	movs	r0, r2
 80138c2:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 80138c4:	4b0d      	ldr	r3, [pc, #52]	; (80138fc <RegionCN779TxConfig+0x1a4>)
 80138c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c8:	68fa      	ldr	r2, [r7, #12]
 80138ca:	8992      	ldrh	r2, [r2, #12]
 80138cc:	b2d1      	uxtb	r1, r2
 80138ce:	193a      	adds	r2, r7, r4
 80138d0:	7812      	ldrb	r2, [r2, #0]
 80138d2:	0010      	movs	r0, r2
 80138d4:	4798      	blx	r3
 80138d6:	0002      	movs	r2, r0
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	221d      	movs	r2, #29
 80138e0:	18ba      	adds	r2, r7, r2
 80138e2:	7812      	ldrb	r2, [r2, #0]
 80138e4:	701a      	strb	r2, [r3, #0]
    return true;
 80138e6:	2301      	movs	r3, #1
}
 80138e8:	0018      	movs	r0, r3
 80138ea:	46bd      	mov	sp, r7
 80138ec:	b009      	add	sp, #36	; 0x24
 80138ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138f0:	080281d0 	.word	0x080281d0
 80138f4:	20001364 	.word	0x20001364
 80138f8:	20001434 	.word	0x20001434
 80138fc:	08028964 	.word	0x08028964
 8013900:	000061a8 	.word	0x000061a8
 8013904:	00000bb8 	.word	0x00000bb8

08013908 <RegionCN779LinkAdrReq>:

uint8_t RegionCN779LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801390a:	b093      	sub	sp, #76	; 0x4c
 801390c:	af00      	add	r7, sp, #0
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	60b9      	str	r1, [r7, #8]
 8013912:	607a      	str	r2, [r7, #4]
 8013914:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8013916:	2347      	movs	r3, #71	; 0x47
 8013918:	18fb      	adds	r3, r7, r3
 801391a:	2207      	movs	r2, #7
 801391c:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801391e:	2344      	movs	r3, #68	; 0x44
 8013920:	18fb      	adds	r3, r7, r3
 8013922:	2200      	movs	r2, #0
 8013924:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8013926:	2346      	movs	r3, #70	; 0x46
 8013928:	18fb      	adds	r3, r7, r3
 801392a:	2200      	movs	r2, #0
 801392c:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 801392e:	233a      	movs	r3, #58	; 0x3a
 8013930:	18fb      	adds	r3, r7, r3
 8013932:	2200      	movs	r2, #0
 8013934:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013936:	e09e      	b.n	8013a76 <RegionCN779LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	685a      	ldr	r2, [r3, #4]
 801393c:	2346      	movs	r3, #70	; 0x46
 801393e:	18fb      	adds	r3, r7, r3
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	18d3      	adds	r3, r2, r3
 8013944:	2544      	movs	r5, #68	; 0x44
 8013946:	197c      	adds	r4, r7, r5
 8013948:	223c      	movs	r2, #60	; 0x3c
 801394a:	18ba      	adds	r2, r7, r2
 801394c:	0011      	movs	r1, r2
 801394e:	0018      	movs	r0, r3
 8013950:	f000 fefe 	bl	8014750 <RegionCommonParseLinkAdrReq>
 8013954:	0003      	movs	r3, r0
 8013956:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8013958:	197b      	adds	r3, r7, r5
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d100      	bne.n	8013962 <RegionCN779LinkAdrReq+0x5a>
 8013960:	e092      	b.n	8013a88 <RegionCN779LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8013962:	2246      	movs	r2, #70	; 0x46
 8013964:	18bb      	adds	r3, r7, r2
 8013966:	18b9      	adds	r1, r7, r2
 8013968:	2244      	movs	r2, #68	; 0x44
 801396a:	18ba      	adds	r2, r7, r2
 801396c:	7809      	ldrb	r1, [r1, #0]
 801396e:	7812      	ldrb	r2, [r2, #0]
 8013970:	188a      	adds	r2, r1, r2
 8013972:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8013974:	2347      	movs	r3, #71	; 0x47
 8013976:	18fb      	adds	r3, r7, r3
 8013978:	2207      	movs	r2, #7
 801397a:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801397c:	213c      	movs	r1, #60	; 0x3c
 801397e:	187b      	adds	r3, r7, r1
 8013980:	889a      	ldrh	r2, [r3, #4]
 8013982:	233a      	movs	r3, #58	; 0x3a
 8013984:	18fb      	adds	r3, r7, r3
 8013986:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8013988:	187b      	adds	r3, r7, r1
 801398a:	78db      	ldrb	r3, [r3, #3]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d10c      	bne.n	80139aa <RegionCN779LinkAdrReq+0xa2>
 8013990:	233a      	movs	r3, #58	; 0x3a
 8013992:	18fb      	adds	r3, r7, r3
 8013994:	881b      	ldrh	r3, [r3, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d107      	bne.n	80139aa <RegionCN779LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 801399a:	2247      	movs	r2, #71	; 0x47
 801399c:	18bb      	adds	r3, r7, r2
 801399e:	18ba      	adds	r2, r7, r2
 80139a0:	7812      	ldrb	r2, [r2, #0]
 80139a2:	2101      	movs	r1, #1
 80139a4:	438a      	bics	r2, r1
 80139a6:	701a      	strb	r2, [r3, #0]
 80139a8:	e065      	b.n	8013a76 <RegionCN779LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80139aa:	233c      	movs	r3, #60	; 0x3c
 80139ac:	18fb      	adds	r3, r7, r3
 80139ae:	78db      	ldrb	r3, [r3, #3]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d004      	beq.n	80139be <RegionCN779LinkAdrReq+0xb6>
 80139b4:	233c      	movs	r3, #60	; 0x3c
 80139b6:	18fb      	adds	r3, r7, r3
 80139b8:	78db      	ldrb	r3, [r3, #3]
 80139ba:	2b05      	cmp	r3, #5
 80139bc:	d904      	bls.n	80139c8 <RegionCN779LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80139be:	233c      	movs	r3, #60	; 0x3c
 80139c0:	18fb      	adds	r3, r7, r3
 80139c2:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80139c4:	2b06      	cmp	r3, #6
 80139c6:	d907      	bls.n	80139d8 <RegionCN779LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80139c8:	2247      	movs	r2, #71	; 0x47
 80139ca:	18bb      	adds	r3, r7, r2
 80139cc:	18ba      	adds	r2, r7, r2
 80139ce:	7812      	ldrb	r2, [r2, #0]
 80139d0:	2101      	movs	r1, #1
 80139d2:	438a      	bics	r2, r1
 80139d4:	701a      	strb	r2, [r3, #0]
 80139d6:	e04e      	b.n	8013a76 <RegionCN779LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 80139d8:	2345      	movs	r3, #69	; 0x45
 80139da:	18fb      	adds	r3, r7, r3
 80139dc:	2200      	movs	r2, #0
 80139de:	701a      	strb	r2, [r3, #0]
 80139e0:	e044      	b.n	8013a6c <RegionCN779LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80139e2:	233c      	movs	r3, #60	; 0x3c
 80139e4:	18fb      	adds	r3, r7, r3
 80139e6:	78db      	ldrb	r3, [r3, #3]
 80139e8:	2b06      	cmp	r3, #6
 80139ea:	d11b      	bne.n	8013a24 <RegionCN779LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80139ec:	2345      	movs	r3, #69	; 0x45
 80139ee:	18fb      	adds	r3, r7, r3
 80139f0:	781a      	ldrb	r2, [r3, #0]
 80139f2:	496e      	ldr	r1, [pc, #440]	; (8013bac <RegionCN779LinkAdrReq+0x2a4>)
 80139f4:	0013      	movs	r3, r2
 80139f6:	005b      	lsls	r3, r3, #1
 80139f8:	189b      	adds	r3, r3, r2
 80139fa:	009b      	lsls	r3, r3, #2
 80139fc:	585b      	ldr	r3, [r3, r1]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d02e      	beq.n	8013a60 <RegionCN779LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 8013a02:	2345      	movs	r3, #69	; 0x45
 8013a04:	18fb      	adds	r3, r7, r3
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	2201      	movs	r2, #1
 8013a0a:	409a      	lsls	r2, r3
 8013a0c:	0013      	movs	r3, r2
 8013a0e:	b21a      	sxth	r2, r3
 8013a10:	213a      	movs	r1, #58	; 0x3a
 8013a12:	187b      	adds	r3, r7, r1
 8013a14:	881b      	ldrh	r3, [r3, #0]
 8013a16:	b21b      	sxth	r3, r3
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	b21b      	sxth	r3, r3
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	187b      	adds	r3, r7, r1
 8013a20:	801a      	strh	r2, [r3, #0]
 8013a22:	e01d      	b.n	8013a60 <RegionCN779LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8013a24:	233a      	movs	r3, #58	; 0x3a
 8013a26:	18fb      	adds	r3, r7, r3
 8013a28:	881b      	ldrh	r3, [r3, #0]
 8013a2a:	001a      	movs	r2, r3
 8013a2c:	2345      	movs	r3, #69	; 0x45
 8013a2e:	18fb      	adds	r3, r7, r3
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	411a      	asrs	r2, r3
 8013a34:	0013      	movs	r3, r2
 8013a36:	2201      	movs	r2, #1
 8013a38:	4013      	ands	r3, r2
 8013a3a:	d011      	beq.n	8013a60 <RegionCN779LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8013a3c:	2345      	movs	r3, #69	; 0x45
 8013a3e:	18fb      	adds	r3, r7, r3
 8013a40:	781a      	ldrb	r2, [r3, #0]
 8013a42:	495a      	ldr	r1, [pc, #360]	; (8013bac <RegionCN779LinkAdrReq+0x2a4>)
 8013a44:	0013      	movs	r3, r2
 8013a46:	005b      	lsls	r3, r3, #1
 8013a48:	189b      	adds	r3, r3, r2
 8013a4a:	009b      	lsls	r3, r3, #2
 8013a4c:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d106      	bne.n	8013a60 <RegionCN779LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8013a52:	2247      	movs	r2, #71	; 0x47
 8013a54:	18bb      	adds	r3, r7, r2
 8013a56:	18ba      	adds	r2, r7, r2
 8013a58:	7812      	ldrb	r2, [r2, #0]
 8013a5a:	2101      	movs	r1, #1
 8013a5c:	438a      	bics	r2, r1
 8013a5e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++ )
 8013a60:	2145      	movs	r1, #69	; 0x45
 8013a62:	187b      	adds	r3, r7, r1
 8013a64:	781a      	ldrb	r2, [r3, #0]
 8013a66:	187b      	adds	r3, r7, r1
 8013a68:	3201      	adds	r2, #1
 8013a6a:	701a      	strb	r2, [r3, #0]
 8013a6c:	2345      	movs	r3, #69	; 0x45
 8013a6e:	18fb      	adds	r3, r7, r3
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	2b0f      	cmp	r3, #15
 8013a74:	d9b5      	bls.n	80139e2 <RegionCN779LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	7a1b      	ldrb	r3, [r3, #8]
 8013a7a:	2246      	movs	r2, #70	; 0x46
 8013a7c:	18ba      	adds	r2, r7, r2
 8013a7e:	7812      	ldrb	r2, [r2, #0]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d200      	bcs.n	8013a86 <RegionCN779LinkAdrReq+0x17e>
 8013a84:	e758      	b.n	8013938 <RegionCN779LinkAdrReq+0x30>
 8013a86:	e000      	b.n	8013a8a <RegionCN779LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8013a88:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013a8a:	2134      	movs	r1, #52	; 0x34
 8013a8c:	187b      	adds	r3, r7, r1
 8013a8e:	2201      	movs	r2, #1
 8013a90:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	7a5a      	ldrb	r2, [r3, #9]
 8013a96:	187b      	adds	r3, r7, r1
 8013a98:	709a      	strb	r2, [r3, #2]
    phyParam = RegionCN779GetPhyParam( &getPhy );
 8013a9a:	187b      	adds	r3, r7, r1
 8013a9c:	0018      	movs	r0, r3
 8013a9e:	f7ff fae5 	bl	801306c <RegionCN779GetPhyParam>
 8013aa2:	0003      	movs	r3, r0
 8013aa4:	001a      	movs	r2, r3
 8013aa6:	2030      	movs	r0, #48	; 0x30
 8013aa8:	183b      	adds	r3, r7, r0
 8013aaa:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8013aac:	2110      	movs	r1, #16
 8013aae:	187b      	adds	r3, r7, r1
 8013ab0:	2447      	movs	r4, #71	; 0x47
 8013ab2:	193a      	adds	r2, r7, r4
 8013ab4:	7812      	ldrb	r2, [r2, #0]
 8013ab6:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	7a9a      	ldrb	r2, [r3, #10]
 8013abc:	187b      	adds	r3, r7, r1
 8013abe:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013ac0:	253c      	movs	r5, #60	; 0x3c
 8013ac2:	197b      	adds	r3, r7, r5
 8013ac4:	2201      	movs	r2, #1
 8013ac6:	569a      	ldrsb	r2, [r3, r2]
 8013ac8:	187b      	adds	r3, r7, r1
 8013aca:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8013acc:	197b      	adds	r3, r7, r5
 8013ace:	2202      	movs	r2, #2
 8013ad0:	569a      	ldrsb	r2, [r3, r2]
 8013ad2:	187b      	adds	r3, r7, r1
 8013ad4:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013ad6:	197b      	adds	r3, r7, r5
 8013ad8:	781a      	ldrb	r2, [r3, #0]
 8013ada:	187b      	adds	r3, r7, r1
 8013adc:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	220b      	movs	r2, #11
 8013ae2:	569a      	ldrsb	r2, [r3, r2]
 8013ae4:	187b      	adds	r3, r7, r1
 8013ae6:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	220c      	movs	r2, #12
 8013aec:	569a      	ldrsb	r2, [r3, r2]
 8013aee:	187b      	adds	r3, r7, r1
 8013af0:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	7b5b      	ldrb	r3, [r3, #13]
 8013af6:	b25a      	sxtb	r2, r3
 8013af8:	187b      	adds	r3, r7, r1
 8013afa:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = CN779_MAX_NB_CHANNELS;
 8013afc:	187b      	adds	r3, r7, r1
 8013afe:	2210      	movs	r2, #16
 8013b00:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8013b02:	187b      	adds	r3, r7, r1
 8013b04:	223a      	movs	r2, #58	; 0x3a
 8013b06:	18ba      	adds	r2, r7, r2
 8013b08:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8013b0a:	183b      	adds	r3, r7, r0
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	b25a      	sxtb	r2, r3
 8013b10:	0008      	movs	r0, r1
 8013b12:	183b      	adds	r3, r7, r0
 8013b14:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = CN779_TX_MAX_DATARATE;
 8013b16:	183b      	adds	r3, r7, r0
 8013b18:	2207      	movs	r2, #7
 8013b1a:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8013b1c:	183b      	adds	r3, r7, r0
 8013b1e:	4a23      	ldr	r2, [pc, #140]	; (8013bac <RegionCN779LinkAdrReq+0x2a4>)
 8013b20:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = CN779_MIN_TX_POWER;
 8013b22:	183b      	adds	r3, r7, r0
 8013b24:	2205      	movs	r2, #5
 8013b26:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = CN779_MAX_TX_POWER;
 8013b28:	183b      	adds	r3, r7, r0
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8013b2e:	183b      	adds	r3, r7, r0
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	6812      	ldr	r2, [r2, #0]
 8013b34:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8013b36:	0026      	movs	r6, r4
 8013b38:	193c      	adds	r4, r7, r4
 8013b3a:	0029      	movs	r1, r5
 8013b3c:	187d      	adds	r5, r7, r1
 8013b3e:	187b      	adds	r3, r7, r1
 8013b40:	1c9a      	adds	r2, r3, #2
 8013b42:	187b      	adds	r3, r7, r1
 8013b44:	1c59      	adds	r1, r3, #1
 8013b46:	1838      	adds	r0, r7, r0
 8013b48:	002b      	movs	r3, r5
 8013b4a:	f000 fe57 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 8013b4e:	0003      	movs	r3, r0
 8013b50:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8013b52:	0034      	movs	r4, r6
 8013b54:	193b      	adds	r3, r7, r4
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	2b07      	cmp	r3, #7
 8013b5a:	d10b      	bne.n	8013b74 <RegionCN779LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8013b5c:	4b14      	ldr	r3, [pc, #80]	; (8013bb0 <RegionCN779LinkAdrReq+0x2a8>)
 8013b5e:	2202      	movs	r2, #2
 8013b60:	2100      	movs	r1, #0
 8013b62:	0018      	movs	r0, r3
 8013b64:	f009 f8f6 	bl	801cd54 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8013b68:	233a      	movs	r3, #58	; 0x3a
 8013b6a:	18fb      	adds	r3, r7, r3
 8013b6c:	8819      	ldrh	r1, [r3, #0]
 8013b6e:	4b0f      	ldr	r3, [pc, #60]	; (8013bac <RegionCN779LinkAdrReq+0x2a4>)
 8013b70:	22d0      	movs	r2, #208	; 0xd0
 8013b72:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8013b74:	213c      	movs	r1, #60	; 0x3c
 8013b76:	187b      	adds	r3, r7, r1
 8013b78:	2201      	movs	r2, #1
 8013b7a:	569a      	ldrsb	r2, [r3, r2]
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8013b80:	187b      	adds	r3, r7, r1
 8013b82:	2202      	movs	r2, #2
 8013b84:	569a      	ldrsb	r2, [r3, r2]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8013b8a:	187b      	adds	r3, r7, r1
 8013b8c:	781a      	ldrb	r2, [r3, #0]
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8013b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013b94:	2246      	movs	r2, #70	; 0x46
 8013b96:	18ba      	adds	r2, r7, r2
 8013b98:	7812      	ldrb	r2, [r2, #0]
 8013b9a:	701a      	strb	r2, [r3, #0]

    return status;
 8013b9c:	2347      	movs	r3, #71	; 0x47
 8013b9e:	18fb      	adds	r3, r7, r3
 8013ba0:	781b      	ldrb	r3, [r3, #0]
}
 8013ba2:	0018      	movs	r0, r3
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	b013      	add	sp, #76	; 0x4c
 8013ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013baa:	46c0      	nop			; (mov r8, r8)
 8013bac:	20001364 	.word	0x20001364
 8013bb0:	20001434 	.word	0x20001434

08013bb4 <RegionCN779RxParamSetupReq>:

uint8_t RegionCN779RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b084      	sub	sp, #16
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8013bbc:	230f      	movs	r3, #15
 8013bbe:	18fb      	adds	r3, r7, r3
 8013bc0:	2207      	movs	r2, #7
 8013bc2:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	0018      	movs	r0, r3
 8013bca:	f7ff f941 	bl	8012e50 <VerifyRfFreq>
 8013bce:	0003      	movs	r3, r0
 8013bd0:	001a      	movs	r2, r3
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	4053      	eors	r3, r2
 8013bd6:	b2db      	uxtb	r3, r3
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d006      	beq.n	8013bea <RegionCN779RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8013bdc:	220f      	movs	r2, #15
 8013bde:	18bb      	adds	r3, r7, r2
 8013be0:	18ba      	adds	r2, r7, r2
 8013be2:	7812      	ldrb	r2, [r2, #0]
 8013be4:	2101      	movs	r1, #1
 8013be6:	438a      	bics	r2, r1
 8013be8:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE ) == false )
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	b25b      	sxtb	r3, r3
 8013bf0:	2207      	movs	r2, #7
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	0018      	movs	r0, r3
 8013bf6:	f000 fbc3 	bl	8014380 <RegionCommonValueInRange>
 8013bfa:	1e03      	subs	r3, r0, #0
 8013bfc:	d106      	bne.n	8013c0c <RegionCN779RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8013bfe:	220f      	movs	r2, #15
 8013c00:	18bb      	adds	r3, r7, r2
 8013c02:	18ba      	adds	r2, r7, r2
 8013c04:	7812      	ldrb	r2, [r2, #0]
 8013c06:	2102      	movs	r1, #2
 8013c08:	438a      	bics	r2, r1
 8013c0a:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, CN779_MIN_RX1_DR_OFFSET, CN779_MAX_RX1_DR_OFFSET ) == false )
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	785b      	ldrb	r3, [r3, #1]
 8013c10:	b25b      	sxtb	r3, r3
 8013c12:	2205      	movs	r2, #5
 8013c14:	2100      	movs	r1, #0
 8013c16:	0018      	movs	r0, r3
 8013c18:	f000 fbb2 	bl	8014380 <RegionCommonValueInRange>
 8013c1c:	1e03      	subs	r3, r0, #0
 8013c1e:	d106      	bne.n	8013c2e <RegionCN779RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8013c20:	220f      	movs	r2, #15
 8013c22:	18bb      	adds	r3, r7, r2
 8013c24:	18ba      	adds	r2, r7, r2
 8013c26:	7812      	ldrb	r2, [r2, #0]
 8013c28:	2104      	movs	r1, #4
 8013c2a:	438a      	bics	r2, r1
 8013c2c:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8013c2e:	230f      	movs	r3, #15
 8013c30:	18fb      	adds	r3, r7, r3
 8013c32:	781b      	ldrb	r3, [r3, #0]
}
 8013c34:	0018      	movs	r0, r3
 8013c36:	46bd      	mov	sp, r7
 8013c38:	b004      	add	sp, #16
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <RegionCN779NewChannelReq>:

uint8_t RegionCN779NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b086      	sub	sp, #24
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8013c44:	2317      	movs	r3, #23
 8013c46:	18fb      	adds	r3, r7, r3
 8013c48:	2203      	movs	r2, #3
 8013c4a:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d119      	bne.n	8013c8a <RegionCN779NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	791b      	ldrb	r3, [r3, #4]
 8013c5a:	b25b      	sxtb	r3, r3
 8013c5c:	b2da      	uxtb	r2, r3
 8013c5e:	2108      	movs	r1, #8
 8013c60:	187b      	adds	r3, r7, r1
 8013c62:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionCN779ChannelsRemove( &channelRemove ) == false )
 8013c64:	187b      	adds	r3, r7, r1
 8013c66:	0018      	movs	r0, r3
 8013c68:	f000 fa32 	bl	80140d0 <RegionCN779ChannelsRemove>
 8013c6c:	0003      	movs	r3, r0
 8013c6e:	001a      	movs	r2, r3
 8013c70:	2301      	movs	r3, #1
 8013c72:	4053      	eors	r3, r2
 8013c74:	b2db      	uxtb	r3, r3
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d043      	beq.n	8013d02 <RegionCN779NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8013c7a:	2217      	movs	r2, #23
 8013c7c:	18bb      	adds	r3, r7, r2
 8013c7e:	18ba      	adds	r2, r7, r2
 8013c80:	7812      	ldrb	r2, [r2, #0]
 8013c82:	2103      	movs	r1, #3
 8013c84:	438a      	bics	r2, r1
 8013c86:	701a      	strb	r2, [r3, #0]
 8013c88:	e03b      	b.n	8013d02 <RegionCN779NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	210c      	movs	r1, #12
 8013c90:	187b      	adds	r3, r7, r1
 8013c92:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	791b      	ldrb	r3, [r3, #4]
 8013c98:	b25b      	sxtb	r3, r3
 8013c9a:	b2da      	uxtb	r2, r3
 8013c9c:	187b      	adds	r3, r7, r1
 8013c9e:	711a      	strb	r2, [r3, #4]

        switch( RegionCN779ChannelAdd( &channelAdd ) )
 8013ca0:	187b      	adds	r3, r7, r1
 8013ca2:	0018      	movs	r0, r3
 8013ca4:	f000 f95a 	bl	8013f5c <RegionCN779ChannelAdd>
 8013ca8:	0003      	movs	r3, r0
 8013caa:	2b04      	cmp	r3, #4
 8013cac:	d008      	beq.n	8013cc0 <RegionCN779NewChannelReq+0x84>
 8013cae:	dc02      	bgt.n	8013cb6 <RegionCN779NewChannelReq+0x7a>
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d025      	beq.n	8013d00 <RegionCN779NewChannelReq+0xc4>
 8013cb4:	e01c      	b.n	8013cf0 <RegionCN779NewChannelReq+0xb4>
 8013cb6:	2b05      	cmp	r3, #5
 8013cb8:	d00a      	beq.n	8013cd0 <RegionCN779NewChannelReq+0x94>
 8013cba:	2b06      	cmp	r3, #6
 8013cbc:	d010      	beq.n	8013ce0 <RegionCN779NewChannelReq+0xa4>
 8013cbe:	e017      	b.n	8013cf0 <RegionCN779NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8013cc0:	2217      	movs	r2, #23
 8013cc2:	18bb      	adds	r3, r7, r2
 8013cc4:	18ba      	adds	r2, r7, r2
 8013cc6:	7812      	ldrb	r2, [r2, #0]
 8013cc8:	2101      	movs	r1, #1
 8013cca:	438a      	bics	r2, r1
 8013ccc:	701a      	strb	r2, [r3, #0]
                break;
 8013cce:	e018      	b.n	8013d02 <RegionCN779NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8013cd0:	2217      	movs	r2, #23
 8013cd2:	18bb      	adds	r3, r7, r2
 8013cd4:	18ba      	adds	r2, r7, r2
 8013cd6:	7812      	ldrb	r2, [r2, #0]
 8013cd8:	2102      	movs	r1, #2
 8013cda:	438a      	bics	r2, r1
 8013cdc:	701a      	strb	r2, [r3, #0]
                break;
 8013cde:	e010      	b.n	8013d02 <RegionCN779NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8013ce0:	2217      	movs	r2, #23
 8013ce2:	18bb      	adds	r3, r7, r2
 8013ce4:	18ba      	adds	r2, r7, r2
 8013ce6:	7812      	ldrb	r2, [r2, #0]
 8013ce8:	2103      	movs	r1, #3
 8013cea:	438a      	bics	r2, r1
 8013cec:	701a      	strb	r2, [r3, #0]
                break;
 8013cee:	e008      	b.n	8013d02 <RegionCN779NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8013cf0:	2217      	movs	r2, #23
 8013cf2:	18bb      	adds	r3, r7, r2
 8013cf4:	18ba      	adds	r2, r7, r2
 8013cf6:	7812      	ldrb	r2, [r2, #0]
 8013cf8:	2103      	movs	r1, #3
 8013cfa:	438a      	bics	r2, r1
 8013cfc:	701a      	strb	r2, [r3, #0]
                break;
 8013cfe:	e000      	b.n	8013d02 <RegionCN779NewChannelReq+0xc6>
                break;
 8013d00:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8013d02:	2317      	movs	r3, #23
 8013d04:	18fb      	adds	r3, r7, r3
 8013d06:	781b      	ldrb	r3, [r3, #0]
}
 8013d08:	0018      	movs	r0, r3
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	b006      	add	sp, #24
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <RegionCN779TxParamSetupReq>:

int8_t RegionCN779TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
    return -1;
 8013d18:	2301      	movs	r3, #1
 8013d1a:	425b      	negs	r3, r3
}
 8013d1c:	0018      	movs	r0, r3
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	b002      	add	sp, #8
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <RegionCN779DlChannelReq>:

uint8_t RegionCN779DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8013d2c:	230f      	movs	r3, #15
 8013d2e:	18fb      	adds	r3, r7, r3
 8013d30:	2203      	movs	r2, #3
 8013d32:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	685b      	ldr	r3, [r3, #4]
 8013d38:	0018      	movs	r0, r3
 8013d3a:	f7ff f889 	bl	8012e50 <VerifyRfFreq>
 8013d3e:	0003      	movs	r3, r0
 8013d40:	001a      	movs	r2, r3
 8013d42:	2301      	movs	r3, #1
 8013d44:	4053      	eors	r3, r2
 8013d46:	b2db      	uxtb	r3, r3
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d006      	beq.n	8013d5a <RegionCN779DlChannelReq+0x36>
    {
        status &= 0xFE;
 8013d4c:	220f      	movs	r2, #15
 8013d4e:	18bb      	adds	r3, r7, r2
 8013d50:	18ba      	adds	r2, r7, r2
 8013d52:	7812      	ldrb	r2, [r2, #0]
 8013d54:	2101      	movs	r1, #1
 8013d56:	438a      	bics	r2, r1
 8013d58:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	0019      	movs	r1, r3
 8013d60:	4a13      	ldr	r2, [pc, #76]	; (8013db0 <RegionCN779DlChannelReq+0x8c>)
 8013d62:	000b      	movs	r3, r1
 8013d64:	005b      	lsls	r3, r3, #1
 8013d66:	185b      	adds	r3, r3, r1
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	589b      	ldr	r3, [r3, r2]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d106      	bne.n	8013d7e <RegionCN779DlChannelReq+0x5a>
    {
        status &= 0xFD;
 8013d70:	220f      	movs	r2, #15
 8013d72:	18bb      	adds	r3, r7, r2
 8013d74:	18ba      	adds	r2, r7, r2
 8013d76:	7812      	ldrb	r2, [r2, #0]
 8013d78:	2102      	movs	r1, #2
 8013d7a:	438a      	bics	r2, r1
 8013d7c:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8013d7e:	230f      	movs	r3, #15
 8013d80:	18fb      	adds	r3, r7, r3
 8013d82:	781b      	ldrb	r3, [r3, #0]
 8013d84:	2b03      	cmp	r3, #3
 8013d86:	d10c      	bne.n	8013da2 <RegionCN779DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	0018      	movs	r0, r3
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	685a      	ldr	r2, [r3, #4]
 8013d92:	4907      	ldr	r1, [pc, #28]	; (8013db0 <RegionCN779DlChannelReq+0x8c>)
 8013d94:	0003      	movs	r3, r0
 8013d96:	005b      	lsls	r3, r3, #1
 8013d98:	181b      	adds	r3, r3, r0
 8013d9a:	009b      	lsls	r3, r3, #2
 8013d9c:	18cb      	adds	r3, r1, r3
 8013d9e:	3304      	adds	r3, #4
 8013da0:	601a      	str	r2, [r3, #0]
    }

    return status;
 8013da2:	230f      	movs	r3, #15
 8013da4:	18fb      	adds	r3, r7, r3
 8013da6:	781b      	ldrb	r3, [r3, #0]
}
 8013da8:	0018      	movs	r0, r3
 8013daa:	46bd      	mov	sp, r7
 8013dac:	b004      	add	sp, #16
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	20001364 	.word	0x20001364

08013db4 <RegionCN779CalcBackOff>:
{
    return currentDr;
}

void RegionCN779CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b088      	sub	sp, #32
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8013dbc:	210c      	movs	r1, #12
 8013dbe:	187b      	adds	r3, r7, r1
 8013dc0:	4a12      	ldr	r2, [pc, #72]	; (8013e0c <RegionCN779CalcBackOff+0x58>)
 8013dc2:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8013dc4:	187b      	adds	r3, r7, r1
 8013dc6:	4a12      	ldr	r2, [pc, #72]	; (8013e10 <RegionCN779CalcBackOff+0x5c>)
 8013dc8:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	785a      	ldrb	r2, [r3, #1]
 8013dce:	187b      	adds	r3, r7, r1
 8013dd0:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	781a      	ldrb	r2, [r3, #0]
 8013dd6:	187b      	adds	r3, r7, r1
 8013dd8:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	789a      	ldrb	r2, [r3, #2]
 8013dde:	187b      	adds	r3, r7, r1
 8013de0:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	78da      	ldrb	r2, [r3, #3]
 8013de6:	187b      	adds	r3, r7, r1
 8013de8:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	685a      	ldr	r2, [r3, #4]
 8013dee:	187b      	adds	r3, r7, r1
 8013df0:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	689a      	ldr	r2, [r3, #8]
 8013df6:	187b      	adds	r3, r7, r1
 8013df8:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8013dfa:	187b      	adds	r3, r7, r1
 8013dfc:	0018      	movs	r0, r3
 8013dfe:	f000 fea7 	bl	8014b50 <RegionCommonCalcBackOff>
}
 8013e02:	46c0      	nop			; (mov r8, r8)
 8013e04:	46bd      	mov	sp, r7
 8013e06:	b008      	add	sp, #32
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	46c0      	nop			; (mov r8, r8)
 8013e0c:	20001364 	.word	0x20001364
 8013e10:	20001424 	.word	0x20001424

08013e14 <RegionCN779NextChannel>:

LoRaMacStatus_t RegionCN779NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013e14:	b5b0      	push	{r4, r5, r7, lr}
 8013e16:	b090      	sub	sp, #64	; 0x40
 8013e18:	af04      	add	r7, sp, #16
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	607a      	str	r2, [r7, #4]
 8013e20:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8013e22:	232f      	movs	r3, #47	; 0x2f
 8013e24:	18fb      	adds	r3, r7, r3
 8013e26:	2200      	movs	r2, #0
 8013e28:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8013e2a:	2327      	movs	r3, #39	; 0x27
 8013e2c:	18fb      	adds	r3, r7, r3
 8013e2e:	2200      	movs	r2, #0
 8013e30:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[CN779_MAX_NB_CHANNELS] = { 0 };
 8013e32:	2314      	movs	r3, #20
 8013e34:	18fb      	adds	r3, r7, r3
 8013e36:	0018      	movs	r0, r3
 8013e38:	2310      	movs	r3, #16
 8013e3a:	001a      	movs	r2, r3
 8013e3c:	2100      	movs	r1, #0
 8013e3e:	f012 f877 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 8013e42:	2300      	movs	r3, #0
 8013e44:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8013e46:	4b42      	ldr	r3, [pc, #264]	; (8013f50 <RegionCN779NextChannel+0x13c>)
 8013e48:	2201      	movs	r2, #1
 8013e4a:	2100      	movs	r1, #0
 8013e4c:	0018      	movs	r0, r3
 8013e4e:	f000 faff 	bl	8014450 <RegionCommonCountChannels>
 8013e52:	1e03      	subs	r3, r0, #0
 8013e54:	d108      	bne.n	8013e68 <RegionCN779NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013e56:	4b3f      	ldr	r3, [pc, #252]	; (8013f54 <RegionCN779NextChannel+0x140>)
 8013e58:	22d0      	movs	r2, #208	; 0xd0
 8013e5a:	5a9b      	ldrh	r3, [r3, r2]
 8013e5c:	2207      	movs	r2, #7
 8013e5e:	4313      	orrs	r3, r2
 8013e60:	b299      	uxth	r1, r3
 8013e62:	4b3c      	ldr	r3, [pc, #240]	; (8013f54 <RegionCN779NextChannel+0x140>)
 8013e64:	22d0      	movs	r2, #208	; 0xd0
 8013e66:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	681c      	ldr	r4, [r3, #0]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	685b      	ldr	r3, [r3, #4]
 8013e70:	0018      	movs	r0, r3
 8013e72:	f008 fef4 	bl	801cc5e <TimerGetElapsedTime>
 8013e76:	0003      	movs	r3, r0
 8013e78:	429c      	cmp	r4, r3
 8013e7a:	d824      	bhi.n	8013ec6 <RegionCN779NextChannel+0xb2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, CN779_MAX_NB_BANDS );
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	7a58      	ldrb	r0, [r3, #9]
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	7a99      	ldrb	r1, [r3, #10]
 8013e8a:	4a33      	ldr	r2, [pc, #204]	; (8013f58 <RegionCN779NextChannel+0x144>)
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	f000 fb6a 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 8013e92:	0003      	movs	r3, r0
 8013e94:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	7a58      	ldrb	r0, [r3, #9]
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	7a1b      	ldrb	r3, [r3, #8]
 8013e9e:	b25b      	sxtb	r3, r3
 8013ea0:	b2d9      	uxtb	r1, r3
 8013ea2:	232f      	movs	r3, #47	; 0x2f
 8013ea4:	18fc      	adds	r4, r7, r3
 8013ea6:	4d2b      	ldr	r5, [pc, #172]	; (8013f54 <RegionCN779NextChannel+0x140>)
 8013ea8:	4a29      	ldr	r2, [pc, #164]	; (8013f50 <RegionCN779NextChannel+0x13c>)
 8013eaa:	2327      	movs	r3, #39	; 0x27
 8013eac:	18fb      	adds	r3, r7, r3
 8013eae:	9302      	str	r3, [sp, #8]
 8013eb0:	2314      	movs	r3, #20
 8013eb2:	18fb      	adds	r3, r7, r3
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	4b28      	ldr	r3, [pc, #160]	; (8013f58 <RegionCN779NextChannel+0x144>)
 8013eb8:	9300      	str	r3, [sp, #0]
 8013eba:	002b      	movs	r3, r5
 8013ebc:	f7fe fff0 	bl	8012ea0 <CountNbOfEnabledChannels>
 8013ec0:	0003      	movs	r3, r0
 8013ec2:	7023      	strb	r3, [r4, #0]
 8013ec4:	e010      	b.n	8013ee8 <RegionCN779NextChannel+0xd4>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8013ec6:	2127      	movs	r1, #39	; 0x27
 8013ec8:	187b      	adds	r3, r7, r1
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	3301      	adds	r3, #1
 8013ece:	b2da      	uxtb	r2, r3
 8013ed0:	187b      	adds	r3, r7, r1
 8013ed2:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	681c      	ldr	r4, [r3, #0]
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	0018      	movs	r0, r3
 8013ede:	f008 febe 	bl	801cc5e <TimerGetElapsedTime>
 8013ee2:	0003      	movs	r3, r0
 8013ee4:	1ae3      	subs	r3, r4, r3
 8013ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8013ee8:	232f      	movs	r3, #47	; 0x2f
 8013eea:	18fb      	adds	r3, r7, r3
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d012      	beq.n	8013f18 <RegionCN779NextChannel+0x104>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013ef2:	232f      	movs	r3, #47	; 0x2f
 8013ef4:	18fb      	adds	r3, r7, r3
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	3b01      	subs	r3, #1
 8013efa:	0019      	movs	r1, r3
 8013efc:	2000      	movs	r0, #0
 8013efe:	f008 fed7 	bl	801ccb0 <randr>
 8013f02:	0002      	movs	r2, r0
 8013f04:	2314      	movs	r3, #20
 8013f06:	18fb      	adds	r3, r7, r3
 8013f08:	5c9a      	ldrb	r2, [r3, r2]
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2200      	movs	r2, #0
 8013f12:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8013f14:	2300      	movs	r3, #0
 8013f16:	e016      	b.n	8013f46 <RegionCN779NextChannel+0x132>
    }
    else
    {
        if( delayTx > 0 )
 8013f18:	2327      	movs	r3, #39	; 0x27
 8013f1a:	18fb      	adds	r3, r7, r3
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d004      	beq.n	8013f2c <RegionCN779NextChannel+0x118>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f26:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8013f28:	230b      	movs	r3, #11
 8013f2a:	e00c      	b.n	8013f46 <RegionCN779NextChannel+0x132>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013f2c:	4b09      	ldr	r3, [pc, #36]	; (8013f54 <RegionCN779NextChannel+0x140>)
 8013f2e:	22d0      	movs	r2, #208	; 0xd0
 8013f30:	5a9b      	ldrh	r3, [r3, r2]
 8013f32:	2207      	movs	r2, #7
 8013f34:	4313      	orrs	r3, r2
 8013f36:	b299      	uxth	r1, r3
 8013f38:	4b06      	ldr	r3, [pc, #24]	; (8013f54 <RegionCN779NextChannel+0x140>)
 8013f3a:	22d0      	movs	r2, #208	; 0xd0
 8013f3c:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2200      	movs	r2, #0
 8013f42:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013f44:	230c      	movs	r3, #12
    }
}
 8013f46:	0018      	movs	r0, r3
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	b00c      	add	sp, #48	; 0x30
 8013f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f4e:	46c0      	nop			; (mov r8, r8)
 8013f50:	20001434 	.word	0x20001434
 8013f54:	20001364 	.word	0x20001364
 8013f58:	20001424 	.word	0x20001424

08013f5c <RegionCN779ChannelAdd>:

LoRaMacStatus_t RegionCN779ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8013f5c:	b590      	push	{r4, r7, lr}
 8013f5e:	b085      	sub	sp, #20
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8013f64:	230f      	movs	r3, #15
 8013f66:	18fb      	adds	r3, r7, r3
 8013f68:	2200      	movs	r2, #0
 8013f6a:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8013f6c:	230e      	movs	r3, #14
 8013f6e:	18fb      	adds	r3, r7, r3
 8013f70:	2200      	movs	r2, #0
 8013f72:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8013f74:	210d      	movs	r1, #13
 8013f76:	187b      	adds	r3, r7, r1
 8013f78:	687a      	ldr	r2, [r7, #4]
 8013f7a:	7912      	ldrb	r2, [r2, #4]
 8013f7c:	701a      	strb	r2, [r3, #0]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 8013f7e:	187b      	adds	r3, r7, r1
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	2b02      	cmp	r3, #2
 8013f84:	d801      	bhi.n	8013f8a <RegionCN779ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013f86:	2306      	movs	r3, #6
 8013f88:	e09c      	b.n	80140c4 <RegionCN779ChannelAdd+0x168>
    }

    if( id >= CN779_MAX_NB_CHANNELS )
 8013f8a:	230d      	movs	r3, #13
 8013f8c:	18fb      	adds	r3, r7, r3
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	2b0f      	cmp	r3, #15
 8013f92:	d901      	bls.n	8013f98 <RegionCN779ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f94:	2303      	movs	r3, #3
 8013f96:	e095      	b.n	80140c4 <RegionCN779ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	7a1b      	ldrb	r3, [r3, #8]
 8013f9e:	011b      	lsls	r3, r3, #4
 8013fa0:	b25b      	sxtb	r3, r3
 8013fa2:	111b      	asrs	r3, r3, #4
 8013fa4:	b25b      	sxtb	r3, r3
 8013fa6:	2207      	movs	r2, #7
 8013fa8:	2100      	movs	r1, #0
 8013faa:	0018      	movs	r0, r3
 8013fac:	f000 f9e8 	bl	8014380 <RegionCommonValueInRange>
 8013fb0:	1e03      	subs	r3, r0, #0
 8013fb2:	d103      	bne.n	8013fbc <RegionCN779ChannelAdd+0x60>
    {
        drInvalid = true;
 8013fb4:	230f      	movs	r3, #15
 8013fb6:	18fb      	adds	r3, r7, r3
 8013fb8:	2201      	movs	r2, #1
 8013fba:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE ) == false )
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	7a1b      	ldrb	r3, [r3, #8]
 8013fc2:	b25b      	sxtb	r3, r3
 8013fc4:	111b      	asrs	r3, r3, #4
 8013fc6:	b25b      	sxtb	r3, r3
 8013fc8:	2207      	movs	r2, #7
 8013fca:	2100      	movs	r1, #0
 8013fcc:	0018      	movs	r0, r3
 8013fce:	f000 f9d7 	bl	8014380 <RegionCommonValueInRange>
 8013fd2:	1e03      	subs	r3, r0, #0
 8013fd4:	d103      	bne.n	8013fde <RegionCN779ChannelAdd+0x82>
    {
        drInvalid = true;
 8013fd6:	230f      	movs	r3, #15
 8013fd8:	18fb      	adds	r3, r7, r3
 8013fda:	2201      	movs	r2, #1
 8013fdc:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	7a1b      	ldrb	r3, [r3, #8]
 8013fe4:	011b      	lsls	r3, r3, #4
 8013fe6:	b25b      	sxtb	r3, r3
 8013fe8:	111b      	asrs	r3, r3, #4
 8013fea:	b25a      	sxtb	r2, r3
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	7a1b      	ldrb	r3, [r3, #8]
 8013ff2:	b25b      	sxtb	r3, r3
 8013ff4:	111b      	asrs	r3, r3, #4
 8013ff6:	b25b      	sxtb	r3, r3
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	dd03      	ble.n	8014004 <RegionCN779ChannelAdd+0xa8>
    {
        drInvalid = true;
 8013ffc:	230f      	movs	r3, #15
 8013ffe:	18fb      	adds	r3, r7, r3
 8014000:	2201      	movs	r2, #1
 8014002:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8014004:	230e      	movs	r3, #14
 8014006:	18fb      	adds	r3, r7, r3
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	2201      	movs	r2, #1
 801400c:	4053      	eors	r3, r2
 801400e:	b2db      	uxtb	r3, r3
 8014010:	2b00      	cmp	r3, #0
 8014012:	d010      	beq.n	8014036 <RegionCN779ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	0018      	movs	r0, r3
 801401c:	f7fe ff18 	bl	8012e50 <VerifyRfFreq>
 8014020:	0003      	movs	r3, r0
 8014022:	001a      	movs	r2, r3
 8014024:	2301      	movs	r3, #1
 8014026:	4053      	eors	r3, r2
 8014028:	b2db      	uxtb	r3, r3
 801402a:	2b00      	cmp	r3, #0
 801402c:	d003      	beq.n	8014036 <RegionCN779ChannelAdd+0xda>
        {
            freqInvalid = true;
 801402e:	230e      	movs	r3, #14
 8014030:	18fb      	adds	r3, r7, r3
 8014032:	2201      	movs	r2, #1
 8014034:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8014036:	230f      	movs	r3, #15
 8014038:	18fb      	adds	r3, r7, r3
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d006      	beq.n	801404e <RegionCN779ChannelAdd+0xf2>
 8014040:	230e      	movs	r3, #14
 8014042:	18fb      	adds	r3, r7, r3
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d001      	beq.n	801404e <RegionCN779ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801404a:	2306      	movs	r3, #6
 801404c:	e03a      	b.n	80140c4 <RegionCN779ChannelAdd+0x168>
    }
    if( drInvalid == true )
 801404e:	230f      	movs	r3, #15
 8014050:	18fb      	adds	r3, r7, r3
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d001      	beq.n	801405c <RegionCN779ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8014058:	2305      	movs	r3, #5
 801405a:	e033      	b.n	80140c4 <RegionCN779ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 801405c:	230e      	movs	r3, #14
 801405e:	18fb      	adds	r3, r7, r3
 8014060:	781b      	ldrb	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d001      	beq.n	801406a <RegionCN779ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8014066:	2304      	movs	r3, #4
 8014068:	e02c      	b.n	80140c4 <RegionCN779ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 801406a:	200d      	movs	r0, #13
 801406c:	0004      	movs	r4, r0
 801406e:	183b      	adds	r3, r7, r0
 8014070:	781a      	ldrb	r2, [r3, #0]
 8014072:	0013      	movs	r3, r2
 8014074:	005b      	lsls	r3, r3, #1
 8014076:	189b      	adds	r3, r3, r2
 8014078:	009b      	lsls	r3, r3, #2
 801407a:	4a14      	ldr	r2, [pc, #80]	; (80140cc <RegionCN779ChannelAdd+0x170>)
 801407c:	1898      	adds	r0, r3, r2
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	220c      	movs	r2, #12
 8014084:	0019      	movs	r1, r3
 8014086:	f008 fe29 	bl	801ccdc <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 801408a:	0020      	movs	r0, r4
 801408c:	183b      	adds	r3, r7, r0
 801408e:	781a      	ldrb	r2, [r3, #0]
 8014090:	490e      	ldr	r1, [pc, #56]	; (80140cc <RegionCN779ChannelAdd+0x170>)
 8014092:	0013      	movs	r3, r2
 8014094:	005b      	lsls	r3, r3, #1
 8014096:	189b      	adds	r3, r3, r2
 8014098:	009b      	lsls	r3, r3, #2
 801409a:	18cb      	adds	r3, r1, r3
 801409c:	3309      	adds	r3, #9
 801409e:	2200      	movs	r2, #0
 80140a0:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 80140a2:	4b0a      	ldr	r3, [pc, #40]	; (80140cc <RegionCN779ChannelAdd+0x170>)
 80140a4:	22d0      	movs	r2, #208	; 0xd0
 80140a6:	5a9b      	ldrh	r3, [r3, r2]
 80140a8:	b21a      	sxth	r2, r3
 80140aa:	183b      	adds	r3, r7, r0
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	2101      	movs	r1, #1
 80140b0:	4099      	lsls	r1, r3
 80140b2:	000b      	movs	r3, r1
 80140b4:	b21b      	sxth	r3, r3
 80140b6:	4313      	orrs	r3, r2
 80140b8:	b21b      	sxth	r3, r3
 80140ba:	b299      	uxth	r1, r3
 80140bc:	4b03      	ldr	r3, [pc, #12]	; (80140cc <RegionCN779ChannelAdd+0x170>)
 80140be:	22d0      	movs	r2, #208	; 0xd0
 80140c0:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 80140c2:	2300      	movs	r3, #0
}
 80140c4:	0018      	movs	r0, r3
 80140c6:	46bd      	mov	sp, r7
 80140c8:	b005      	add	sp, #20
 80140ca:	bd90      	pop	{r4, r7, pc}
 80140cc:	20001364 	.word	0x20001364

080140d0 <RegionCN779ChannelsRemove>:

bool RegionCN779ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80140d0:	b590      	push	{r4, r7, lr}
 80140d2:	b085      	sub	sp, #20
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80140d8:	210f      	movs	r1, #15
 80140da:	187b      	adds	r3, r7, r1
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	7812      	ldrb	r2, [r2, #0]
 80140e0:	701a      	strb	r2, [r3, #0]

    if( id < CN779_NUMB_DEFAULT_CHANNELS )
 80140e2:	187b      	adds	r3, r7, r1
 80140e4:	781b      	ldrb	r3, [r3, #0]
 80140e6:	2b02      	cmp	r3, #2
 80140e8:	d801      	bhi.n	80140ee <RegionCN779ChannelsRemove+0x1e>
    {
        return false;
 80140ea:	2300      	movs	r3, #0
 80140ec:	e015      	b.n	801411a <RegionCN779ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80140ee:	240f      	movs	r4, #15
 80140f0:	193b      	adds	r3, r7, r4
 80140f2:	781a      	ldrb	r2, [r3, #0]
 80140f4:	490b      	ldr	r1, [pc, #44]	; (8014124 <RegionCN779ChannelsRemove+0x54>)
 80140f6:	0013      	movs	r3, r2
 80140f8:	005b      	lsls	r3, r3, #1
 80140fa:	189b      	adds	r3, r3, r2
 80140fc:	009b      	lsls	r3, r3, #2
 80140fe:	18cb      	adds	r3, r1, r3
 8014100:	220c      	movs	r2, #12
 8014102:	2100      	movs	r1, #0
 8014104:	0018      	movs	r0, r3
 8014106:	f011 ff13 	bl	8025f30 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, CN779_MAX_NB_CHANNELS );
 801410a:	193b      	adds	r3, r7, r4
 801410c:	7819      	ldrb	r1, [r3, #0]
 801410e:	4b06      	ldr	r3, [pc, #24]	; (8014128 <RegionCN779ChannelsRemove+0x58>)
 8014110:	2210      	movs	r2, #16
 8014112:	0018      	movs	r0, r3
 8014114:	f000 f95a 	bl	80143cc <RegionCommonChanDisable>
 8014118:	0003      	movs	r3, r0
}
 801411a:	0018      	movs	r0, r3
 801411c:	46bd      	mov	sp, r7
 801411e:	b005      	add	sp, #20
 8014120:	bd90      	pop	{r4, r7, pc}
 8014122:	46c0      	nop			; (mov r8, r8)
 8014124:	20001364 	.word	0x20001364
 8014128:	20001434 	.word	0x20001434

0801412c <RegionCN779ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionCN779ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801412c:	b590      	push	{r4, r7, lr}
 801412e:	b085      	sub	sp, #20
 8014130:	af00      	add	r7, sp, #0
 8014132:	0004      	movs	r4, r0
 8014134:	0008      	movs	r0, r1
 8014136:	0011      	movs	r1, r2
 8014138:	1dfb      	adds	r3, r7, #7
 801413a:	1c22      	adds	r2, r4, #0
 801413c:	701a      	strb	r2, [r3, #0]
 801413e:	1dbb      	adds	r3, r7, #6
 8014140:	1c02      	adds	r2, r0, #0
 8014142:	701a      	strb	r2, [r3, #0]
 8014144:	1d7b      	adds	r3, r7, #5
 8014146:	1c0a      	adds	r2, r1, #0
 8014148:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801414a:	1dbb      	adds	r3, r7, #6
 801414c:	781a      	ldrb	r2, [r3, #0]
 801414e:	1d7b      	adds	r3, r7, #5
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	1ad3      	subs	r3, r2, r3
 8014154:	b2da      	uxtb	r2, r3
 8014156:	210f      	movs	r1, #15
 8014158:	187b      	adds	r3, r7, r1
 801415a:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 801415c:	187b      	adds	r3, r7, r1
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	2b7f      	cmp	r3, #127	; 0x7f
 8014162:	d903      	bls.n	801416c <RegionCN779ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8014164:	230f      	movs	r3, #15
 8014166:	18fb      	adds	r3, r7, r3
 8014168:	2200      	movs	r2, #0
 801416a:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 801416c:	230f      	movs	r3, #15
 801416e:	18fb      	adds	r3, r7, r3
 8014170:	781b      	ldrb	r3, [r3, #0]
}
 8014172:	0018      	movs	r0, r3
 8014174:	46bd      	mov	sp, r7
 8014176:	b005      	add	sp, #20
 8014178:	bd90      	pop	{r4, r7, pc}

0801417a <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801417a:	b580      	push	{r7, lr}
 801417c:	b084      	sub	sp, #16
 801417e:	af00      	add	r7, sp, #0
 8014180:	0002      	movs	r2, r0
 8014182:	1dbb      	adds	r3, r7, #6
 8014184:	801a      	strh	r2, [r3, #0]
 8014186:	1d7b      	adds	r3, r7, #5
 8014188:	1c0a      	adds	r2, r1, #0
 801418a:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 801418c:	230f      	movs	r3, #15
 801418e:	18fb      	adds	r3, r7, r3
 8014190:	2200      	movs	r2, #0
 8014192:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014194:	230e      	movs	r3, #14
 8014196:	18fb      	adds	r3, r7, r3
 8014198:	2200      	movs	r2, #0
 801419a:	701a      	strb	r2, [r3, #0]
 801419c:	e01b      	b.n	80141d6 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801419e:	1dbb      	adds	r3, r7, #6
 80141a0:	881b      	ldrh	r3, [r3, #0]
 80141a2:	200e      	movs	r0, #14
 80141a4:	183a      	adds	r2, r7, r0
 80141a6:	7812      	ldrb	r2, [r2, #0]
 80141a8:	2101      	movs	r1, #1
 80141aa:	4091      	lsls	r1, r2
 80141ac:	000a      	movs	r2, r1
 80141ae:	401a      	ands	r2, r3
 80141b0:	183b      	adds	r3, r7, r0
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	2101      	movs	r1, #1
 80141b6:	4099      	lsls	r1, r3
 80141b8:	000b      	movs	r3, r1
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d105      	bne.n	80141ca <CountChannels+0x50>
        {
            nbActiveBits++;
 80141be:	210f      	movs	r1, #15
 80141c0:	187b      	adds	r3, r7, r1
 80141c2:	781a      	ldrb	r2, [r3, #0]
 80141c4:	187b      	adds	r3, r7, r1
 80141c6:	3201      	adds	r2, #1
 80141c8:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 80141ca:	210e      	movs	r1, #14
 80141cc:	187b      	adds	r3, r7, r1
 80141ce:	781a      	ldrb	r2, [r3, #0]
 80141d0:	187b      	adds	r3, r7, r1
 80141d2:	3201      	adds	r2, #1
 80141d4:	701a      	strb	r2, [r3, #0]
 80141d6:	230e      	movs	r3, #14
 80141d8:	18fa      	adds	r2, r7, r3
 80141da:	1d7b      	adds	r3, r7, #5
 80141dc:	7812      	ldrb	r2, [r2, #0]
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d3dc      	bcc.n	801419e <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 80141e4:	230f      	movs	r3, #15
 80141e6:	18fb      	adds	r3, r7, r3
 80141e8:	781b      	ldrb	r3, [r3, #0]
}
 80141ea:	0018      	movs	r0, r3
 80141ec:	46bd      	mov	sp, r7
 80141ee:	b004      	add	sp, #16
 80141f0:	bd80      	pop	{r7, pc}
	...

080141f4 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 80141fc:	230e      	movs	r3, #14
 80141fe:	18fb      	adds	r3, r7, r3
 8014200:	2200      	movs	r2, #0
 8014202:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	4a0e      	ldr	r2, [pc, #56]	; (8014240 <RegionCommonGetJoinDc+0x4c>)
 8014208:	4293      	cmp	r3, r2
 801420a:	d804      	bhi.n	8014216 <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 801420c:	230e      	movs	r3, #14
 801420e:	18fb      	adds	r3, r7, r3
 8014210:	2264      	movs	r2, #100	; 0x64
 8014212:	801a      	strh	r2, [r3, #0]
 8014214:	e00d      	b.n	8014232 <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	4a0a      	ldr	r2, [pc, #40]	; (8014244 <RegionCommonGetJoinDc+0x50>)
 801421a:	4293      	cmp	r3, r2
 801421c:	d805      	bhi.n	801422a <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 801421e:	230e      	movs	r3, #14
 8014220:	18fb      	adds	r3, r7, r3
 8014222:	22fa      	movs	r2, #250	; 0xfa
 8014224:	0092      	lsls	r2, r2, #2
 8014226:	801a      	strh	r2, [r3, #0]
 8014228:	e003      	b.n	8014232 <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 801422a:	230e      	movs	r3, #14
 801422c:	18fb      	adds	r3, r7, r3
 801422e:	4a06      	ldr	r2, [pc, #24]	; (8014248 <RegionCommonGetJoinDc+0x54>)
 8014230:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8014232:	230e      	movs	r3, #14
 8014234:	18fb      	adds	r3, r7, r3
 8014236:	881b      	ldrh	r3, [r3, #0]
}
 8014238:	0018      	movs	r0, r3
 801423a:	46bd      	mov	sp, r7
 801423c:	b004      	add	sp, #16
 801423e:	bd80      	pop	{r7, pc}
 8014240:	0036ee7f 	.word	0x0036ee7f
 8014244:	025c3f7f 	.word	0x025c3f7f
 8014248:	00002710 	.word	0x00002710

0801424c <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801424c:	b590      	push	{r4, r7, lr}
 801424e:	b085      	sub	sp, #20
 8014250:	af00      	add	r7, sp, #0
 8014252:	0004      	movs	r4, r0
 8014254:	6039      	str	r1, [r7, #0]
 8014256:	0010      	movs	r0, r2
 8014258:	0019      	movs	r1, r3
 801425a:	1dfb      	adds	r3, r7, #7
 801425c:	1c22      	adds	r2, r4, #0
 801425e:	701a      	strb	r2, [r3, #0]
 8014260:	1dbb      	adds	r3, r7, #6
 8014262:	1c02      	adds	r2, r0, #0
 8014264:	701a      	strb	r2, [r3, #0]
 8014266:	1d7b      	adds	r3, r7, #5
 8014268:	1c0a      	adds	r2, r1, #0
 801426a:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801426c:	2320      	movs	r3, #32
 801426e:	18fb      	adds	r3, r7, r3
 8014270:	2200      	movs	r2, #0
 8014272:	569a      	ldrsb	r2, [r3, r2]
 8014274:	1d7b      	adds	r3, r7, #5
 8014276:	2100      	movs	r1, #0
 8014278:	5659      	ldrsb	r1, [r3, r1]
 801427a:	1dbb      	adds	r3, r7, #6
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	b25b      	sxtb	r3, r3
 8014280:	0018      	movs	r0, r3
 8014282:	f000 f87d 	bl	8014380 <RegionCommonValueInRange>
 8014286:	1e03      	subs	r3, r0, #0
 8014288:	d101      	bne.n	801428e <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 801428a:	2300      	movs	r3, #0
 801428c:	e074      	b.n	8014378 <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801428e:	230f      	movs	r3, #15
 8014290:	18fb      	adds	r3, r7, r3
 8014292:	2200      	movs	r2, #0
 8014294:	701a      	strb	r2, [r3, #0]
 8014296:	230e      	movs	r3, #14
 8014298:	18fb      	adds	r3, r7, r3
 801429a:	2200      	movs	r2, #0
 801429c:	701a      	strb	r2, [r3, #0]
 801429e:	e063      	b.n	8014368 <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80142a0:	230d      	movs	r3, #13
 80142a2:	18fb      	adds	r3, r7, r3
 80142a4:	2200      	movs	r2, #0
 80142a6:	701a      	strb	r2, [r3, #0]
 80142a8:	e04d      	b.n	8014346 <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80142aa:	230e      	movs	r3, #14
 80142ac:	18fb      	adds	r3, r7, r3
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	005b      	lsls	r3, r3, #1
 80142b2:	683a      	ldr	r2, [r7, #0]
 80142b4:	18d3      	adds	r3, r2, r3
 80142b6:	881b      	ldrh	r3, [r3, #0]
 80142b8:	001a      	movs	r2, r3
 80142ba:	230d      	movs	r3, #13
 80142bc:	18fb      	adds	r3, r7, r3
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	411a      	asrs	r2, r3
 80142c2:	0013      	movs	r3, r2
 80142c4:	2201      	movs	r2, #1
 80142c6:	4013      	ands	r3, r2
 80142c8:	d037      	beq.n	801433a <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80142ca:	200f      	movs	r0, #15
 80142cc:	183b      	adds	r3, r7, r0
 80142ce:	781a      	ldrb	r2, [r3, #0]
 80142d0:	240d      	movs	r4, #13
 80142d2:	193b      	adds	r3, r7, r4
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	18d3      	adds	r3, r2, r3
 80142d8:	001a      	movs	r2, r3
 80142da:	0013      	movs	r3, r2
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	189b      	adds	r3, r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	001a      	movs	r2, r3
 80142e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e6:	189b      	adds	r3, r3, r2
 80142e8:	7a1b      	ldrb	r3, [r3, #8]
 80142ea:	011b      	lsls	r3, r3, #4
 80142ec:	b25b      	sxtb	r3, r3
 80142ee:	111b      	asrs	r3, r3, #4
 80142f0:	b25b      	sxtb	r3, r3
 80142f2:	001a      	movs	r2, r3
 80142f4:	230f      	movs	r3, #15
 80142f6:	4013      	ands	r3, r2
 80142f8:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80142fa:	183b      	adds	r3, r7, r0
 80142fc:	781a      	ldrb	r2, [r3, #0]
 80142fe:	193b      	adds	r3, r7, r4
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	18d3      	adds	r3, r2, r3
 8014304:	001a      	movs	r2, r3
 8014306:	0013      	movs	r3, r2
 8014308:	005b      	lsls	r3, r3, #1
 801430a:	189b      	adds	r3, r3, r2
 801430c:	009b      	lsls	r3, r3, #2
 801430e:	001a      	movs	r2, r3
 8014310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014312:	189b      	adds	r3, r3, r2
 8014314:	7a1b      	ldrb	r3, [r3, #8]
 8014316:	b25b      	sxtb	r3, r3
 8014318:	111b      	asrs	r3, r3, #4
 801431a:	b25b      	sxtb	r3, r3
 801431c:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801431e:	230f      	movs	r3, #15
 8014320:	4013      	ands	r3, r2
 8014322:	b25a      	sxtb	r2, r3
 8014324:	1dbb      	adds	r3, r7, #6
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	b25b      	sxtb	r3, r3
 801432a:	0018      	movs	r0, r3
 801432c:	f000 f828 	bl	8014380 <RegionCommonValueInRange>
 8014330:	0003      	movs	r3, r0
 8014332:	2b01      	cmp	r3, #1
 8014334:	d101      	bne.n	801433a <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014336:	2301      	movs	r3, #1
 8014338:	e01e      	b.n	8014378 <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 801433a:	210d      	movs	r1, #13
 801433c:	187b      	adds	r3, r7, r1
 801433e:	781a      	ldrb	r2, [r3, #0]
 8014340:	187b      	adds	r3, r7, r1
 8014342:	3201      	adds	r2, #1
 8014344:	701a      	strb	r2, [r3, #0]
 8014346:	230d      	movs	r3, #13
 8014348:	18fb      	adds	r3, r7, r3
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	2b0f      	cmp	r3, #15
 801434e:	d9ac      	bls.n	80142aa <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014350:	220f      	movs	r2, #15
 8014352:	18bb      	adds	r3, r7, r2
 8014354:	18ba      	adds	r2, r7, r2
 8014356:	7812      	ldrb	r2, [r2, #0]
 8014358:	3210      	adds	r2, #16
 801435a:	701a      	strb	r2, [r3, #0]
 801435c:	210e      	movs	r1, #14
 801435e:	187b      	adds	r3, r7, r1
 8014360:	781a      	ldrb	r2, [r3, #0]
 8014362:	187b      	adds	r3, r7, r1
 8014364:	3201      	adds	r2, #1
 8014366:	701a      	strb	r2, [r3, #0]
 8014368:	230f      	movs	r3, #15
 801436a:	18fa      	adds	r2, r7, r3
 801436c:	1dfb      	adds	r3, r7, #7
 801436e:	7812      	ldrb	r2, [r2, #0]
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	429a      	cmp	r2, r3
 8014374:	d394      	bcc.n	80142a0 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8014376:	2300      	movs	r3, #0
}
 8014378:	0018      	movs	r0, r3
 801437a:	46bd      	mov	sp, r7
 801437c:	b005      	add	sp, #20
 801437e:	bd90      	pop	{r4, r7, pc}

08014380 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014380:	b590      	push	{r4, r7, lr}
 8014382:	b083      	sub	sp, #12
 8014384:	af00      	add	r7, sp, #0
 8014386:	0004      	movs	r4, r0
 8014388:	0008      	movs	r0, r1
 801438a:	0011      	movs	r1, r2
 801438c:	1dfb      	adds	r3, r7, #7
 801438e:	1c22      	adds	r2, r4, #0
 8014390:	701a      	strb	r2, [r3, #0]
 8014392:	1dbb      	adds	r3, r7, #6
 8014394:	1c02      	adds	r2, r0, #0
 8014396:	701a      	strb	r2, [r3, #0]
 8014398:	1d7b      	adds	r3, r7, #5
 801439a:	1c0a      	adds	r2, r1, #0
 801439c:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 801439e:	1dfa      	adds	r2, r7, #7
 80143a0:	1dbb      	adds	r3, r7, #6
 80143a2:	7812      	ldrb	r2, [r2, #0]
 80143a4:	b252      	sxtb	r2, r2
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	b25b      	sxtb	r3, r3
 80143aa:	429a      	cmp	r2, r3
 80143ac:	db09      	blt.n	80143c2 <RegionCommonValueInRange+0x42>
 80143ae:	1dfa      	adds	r2, r7, #7
 80143b0:	1d7b      	adds	r3, r7, #5
 80143b2:	7812      	ldrb	r2, [r2, #0]
 80143b4:	b252      	sxtb	r2, r2
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	b25b      	sxtb	r3, r3
 80143ba:	429a      	cmp	r2, r3
 80143bc:	dc01      	bgt.n	80143c2 <RegionCommonValueInRange+0x42>
    {
        return 1;
 80143be:	2301      	movs	r3, #1
 80143c0:	e000      	b.n	80143c4 <RegionCommonValueInRange+0x44>
    }
    return 0;
 80143c2:	2300      	movs	r3, #0
}
 80143c4:	0018      	movs	r0, r3
 80143c6:	46bd      	mov	sp, r7
 80143c8:	b003      	add	sp, #12
 80143ca:	bd90      	pop	{r4, r7, pc}

080143cc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	0008      	movs	r0, r1
 80143d6:	0011      	movs	r1, r2
 80143d8:	1cfb      	adds	r3, r7, #3
 80143da:	1c02      	adds	r2, r0, #0
 80143dc:	701a      	strb	r2, [r3, #0]
 80143de:	1cbb      	adds	r3, r7, #2
 80143e0:	1c0a      	adds	r2, r1, #0
 80143e2:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 80143e4:	210f      	movs	r1, #15
 80143e6:	187b      	adds	r3, r7, r1
 80143e8:	1cfa      	adds	r2, r7, #3
 80143ea:	7812      	ldrb	r2, [r2, #0]
 80143ec:	0912      	lsrs	r2, r2, #4
 80143ee:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80143f0:	1cbb      	adds	r3, r7, #2
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	091b      	lsrs	r3, r3, #4
 80143f6:	b2db      	uxtb	r3, r3
 80143f8:	187a      	adds	r2, r7, r1
 80143fa:	7812      	ldrb	r2, [r2, #0]
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d805      	bhi.n	801440c <RegionCommonChanDisable+0x40>
 8014400:	1cfa      	adds	r2, r7, #3
 8014402:	1cbb      	adds	r3, r7, #2
 8014404:	7812      	ldrb	r2, [r2, #0]
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	429a      	cmp	r2, r3
 801440a:	d301      	bcc.n	8014410 <RegionCommonChanDisable+0x44>
    {
        return false;
 801440c:	2300      	movs	r3, #0
 801440e:	e01b      	b.n	8014448 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014410:	200f      	movs	r0, #15
 8014412:	183b      	adds	r3, r7, r0
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	005b      	lsls	r3, r3, #1
 8014418:	687a      	ldr	r2, [r7, #4]
 801441a:	18d3      	adds	r3, r2, r3
 801441c:	881b      	ldrh	r3, [r3, #0]
 801441e:	b21b      	sxth	r3, r3
 8014420:	1cfa      	adds	r2, r7, #3
 8014422:	7812      	ldrb	r2, [r2, #0]
 8014424:	210f      	movs	r1, #15
 8014426:	400a      	ands	r2, r1
 8014428:	2101      	movs	r1, #1
 801442a:	4091      	lsls	r1, r2
 801442c:	000a      	movs	r2, r1
 801442e:	b212      	sxth	r2, r2
 8014430:	43d2      	mvns	r2, r2
 8014432:	b212      	sxth	r2, r2
 8014434:	4013      	ands	r3, r2
 8014436:	b219      	sxth	r1, r3
 8014438:	183b      	adds	r3, r7, r0
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	005b      	lsls	r3, r3, #1
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	18d3      	adds	r3, r2, r3
 8014442:	b28a      	uxth	r2, r1
 8014444:	801a      	strh	r2, [r3, #0]

    return true;
 8014446:	2301      	movs	r3, #1
}
 8014448:	0018      	movs	r0, r3
 801444a:	46bd      	mov	sp, r7
 801444c:	b004      	add	sp, #16
 801444e:	bd80      	pop	{r7, pc}

08014450 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014450:	b590      	push	{r4, r7, lr}
 8014452:	b085      	sub	sp, #20
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	0008      	movs	r0, r1
 801445a:	0011      	movs	r1, r2
 801445c:	1cfb      	adds	r3, r7, #3
 801445e:	1c02      	adds	r2, r0, #0
 8014460:	701a      	strb	r2, [r3, #0]
 8014462:	1cbb      	adds	r3, r7, #2
 8014464:	1c0a      	adds	r2, r1, #0
 8014466:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8014468:	230f      	movs	r3, #15
 801446a:	18fb      	adds	r3, r7, r3
 801446c:	2200      	movs	r2, #0
 801446e:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d101      	bne.n	801447a <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8014476:	2300      	movs	r3, #0
 8014478:	e027      	b.n	80144ca <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801447a:	230e      	movs	r3, #14
 801447c:	18fb      	adds	r3, r7, r3
 801447e:	1cfa      	adds	r2, r7, #3
 8014480:	7812      	ldrb	r2, [r2, #0]
 8014482:	701a      	strb	r2, [r3, #0]
 8014484:	e017      	b.n	80144b6 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014486:	240e      	movs	r4, #14
 8014488:	193b      	adds	r3, r7, r4
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	005b      	lsls	r3, r3, #1
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	18d3      	adds	r3, r2, r3
 8014492:	881b      	ldrh	r3, [r3, #0]
 8014494:	2110      	movs	r1, #16
 8014496:	0018      	movs	r0, r3
 8014498:	f7ff fe6f 	bl	801417a <CountChannels>
 801449c:	0003      	movs	r3, r0
 801449e:	0019      	movs	r1, r3
 80144a0:	220f      	movs	r2, #15
 80144a2:	18bb      	adds	r3, r7, r2
 80144a4:	18ba      	adds	r2, r7, r2
 80144a6:	7812      	ldrb	r2, [r2, #0]
 80144a8:	188a      	adds	r2, r1, r2
 80144aa:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80144ac:	193b      	adds	r3, r7, r4
 80144ae:	781a      	ldrb	r2, [r3, #0]
 80144b0:	193b      	adds	r3, r7, r4
 80144b2:	3201      	adds	r2, #1
 80144b4:	701a      	strb	r2, [r3, #0]
 80144b6:	230e      	movs	r3, #14
 80144b8:	18fa      	adds	r2, r7, r3
 80144ba:	1cbb      	adds	r3, r7, #2
 80144bc:	7812      	ldrb	r2, [r2, #0]
 80144be:	781b      	ldrb	r3, [r3, #0]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d3e0      	bcc.n	8014486 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 80144c4:	230f      	movs	r3, #15
 80144c6:	18fb      	adds	r3, r7, r3
 80144c8:	781b      	ldrb	r3, [r3, #0]
}
 80144ca:	0018      	movs	r0, r3
 80144cc:	46bd      	mov	sp, r7
 80144ce:	b005      	add	sp, #20
 80144d0:	bd90      	pop	{r4, r7, pc}

080144d2 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b086      	sub	sp, #24
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	60f8      	str	r0, [r7, #12]
 80144da:	60b9      	str	r1, [r7, #8]
 80144dc:	1dfb      	adds	r3, r7, #7
 80144de:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d020      	beq.n	8014528 <RegionCommonChanMaskCopy+0x56>
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d01d      	beq.n	8014528 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 80144ec:	2317      	movs	r3, #23
 80144ee:	18fb      	adds	r3, r7, r3
 80144f0:	2200      	movs	r2, #0
 80144f2:	701a      	strb	r2, [r3, #0]
 80144f4:	e011      	b.n	801451a <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80144f6:	2017      	movs	r0, #23
 80144f8:	183b      	adds	r3, r7, r0
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	005b      	lsls	r3, r3, #1
 80144fe:	68ba      	ldr	r2, [r7, #8]
 8014500:	18d2      	adds	r2, r2, r3
 8014502:	183b      	adds	r3, r7, r0
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	005b      	lsls	r3, r3, #1
 8014508:	68f9      	ldr	r1, [r7, #12]
 801450a:	18cb      	adds	r3, r1, r3
 801450c:	8812      	ldrh	r2, [r2, #0]
 801450e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014510:	183b      	adds	r3, r7, r0
 8014512:	781a      	ldrb	r2, [r3, #0]
 8014514:	183b      	adds	r3, r7, r0
 8014516:	3201      	adds	r2, #1
 8014518:	701a      	strb	r2, [r3, #0]
 801451a:	2317      	movs	r3, #23
 801451c:	18fa      	adds	r2, r7, r3
 801451e:	1dfb      	adds	r3, r7, #7
 8014520:	7812      	ldrb	r2, [r2, #0]
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	429a      	cmp	r2, r3
 8014526:	d3e6      	bcc.n	80144f6 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8014528:	46c0      	nop			; (mov r8, r8)
 801452a:	46bd      	mov	sp, r7
 801452c:	b006      	add	sp, #24
 801452e:	bd80      	pop	{r7, pc}

08014530 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	60b9      	str	r1, [r7, #8]
 8014538:	607a      	str	r2, [r7, #4]
 801453a:	210f      	movs	r1, #15
 801453c:	187b      	adds	r3, r7, r1
 801453e:	1c02      	adds	r2, r0, #0
 8014540:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 8014542:	187b      	adds	r3, r7, r1
 8014544:	781b      	ldrb	r3, [r3, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d003      	beq.n	8014552 <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8014550:	e005      	b.n	801455e <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	605a      	str	r2, [r3, #4]
}
 801455e:	46c0      	nop			; (mov r8, r8)
 8014560:	46bd      	mov	sp, r7
 8014562:	b004      	add	sp, #16
 8014564:	bd80      	pop	{r7, pc}

08014566 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 8014566:	b590      	push	{r4, r7, lr}
 8014568:	b087      	sub	sp, #28
 801456a:	af00      	add	r7, sp, #0
 801456c:	0004      	movs	r4, r0
 801456e:	0008      	movs	r0, r1
 8014570:	603a      	str	r2, [r7, #0]
 8014572:	0019      	movs	r1, r3
 8014574:	1dfb      	adds	r3, r7, #7
 8014576:	1c22      	adds	r2, r4, #0
 8014578:	701a      	strb	r2, [r3, #0]
 801457a:	1dbb      	adds	r3, r7, #6
 801457c:	1c02      	adds	r2, r0, #0
 801457e:	701a      	strb	r2, [r3, #0]
 8014580:	1d7b      	adds	r3, r7, #5
 8014582:	1c0a      	adds	r2, r1, #0
 8014584:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 8014586:	2301      	movs	r3, #1
 8014588:	425b      	negs	r3, r3
 801458a:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 801458c:	2313      	movs	r3, #19
 801458e:	18fb      	adds	r3, r7, r3
 8014590:	2200      	movs	r2, #0
 8014592:	701a      	strb	r2, [r3, #0]
 8014594:	e0cf      	b.n	8014736 <RegionCommonUpdateBandTimeOff+0x1d0>
    {
        if( joined == false )
 8014596:	1dfb      	adds	r3, r7, #7
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	2201      	movs	r2, #1
 801459c:	4053      	eors	r3, r2
 801459e:	b2db      	uxtb	r3, r3
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d065      	beq.n	8014670 <RegionCommonUpdateBandTimeOff+0x10a>
        {
            TimerTime_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 80145a4:	2313      	movs	r3, #19
 80145a6:	18fb      	adds	r3, r7, r3
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	011b      	lsls	r3, r3, #4
 80145ac:	683a      	ldr	r2, [r7, #0]
 80145ae:	18d3      	adds	r3, r2, r3
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	0018      	movs	r0, r3
 80145b4:	f008 fb53 	bl	801cc5e <TimerGetElapsedTime>
 80145b8:	0004      	movs	r4, r0
 80145ba:	1dbb      	adds	r3, r7, #6
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d00b      	beq.n	80145da <RegionCommonUpdateBandTimeOff+0x74>
 80145c2:	2313      	movs	r3, #19
 80145c4:	18fb      	adds	r3, r7, r3
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	011b      	lsls	r3, r3, #4
 80145ca:	683a      	ldr	r2, [r7, #0]
 80145cc:	18d3      	adds	r3, r2, r3
 80145ce:	689b      	ldr	r3, [r3, #8]
 80145d0:	0018      	movs	r0, r3
 80145d2:	f008 fb44 	bl	801cc5e <TimerGetElapsedTime>
 80145d6:	0003      	movs	r3, r0
 80145d8:	e000      	b.n	80145dc <RegionCommonUpdateBandTimeOff+0x76>
 80145da:	2300      	movs	r3, #0
 80145dc:	42a3      	cmp	r3, r4
 80145de:	d20b      	bcs.n	80145f8 <RegionCommonUpdateBandTimeOff+0x92>
 80145e0:	2313      	movs	r3, #19
 80145e2:	18fb      	adds	r3, r7, r3
 80145e4:	781b      	ldrb	r3, [r3, #0]
 80145e6:	011b      	lsls	r3, r3, #4
 80145e8:	683a      	ldr	r2, [r7, #0]
 80145ea:	18d3      	adds	r3, r2, r3
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	0018      	movs	r0, r3
 80145f0:	f008 fb35 	bl	801cc5e <TimerGetElapsedTime>
 80145f4:	0003      	movs	r3, r0
 80145f6:	e010      	b.n	801461a <RegionCommonUpdateBandTimeOff+0xb4>
 80145f8:	1dbb      	adds	r3, r7, #6
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d00b      	beq.n	8014618 <RegionCommonUpdateBandTimeOff+0xb2>
 8014600:	2313      	movs	r3, #19
 8014602:	18fb      	adds	r3, r7, r3
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	011b      	lsls	r3, r3, #4
 8014608:	683a      	ldr	r2, [r7, #0]
 801460a:	18d3      	adds	r3, r2, r3
 801460c:	689b      	ldr	r3, [r3, #8]
 801460e:	0018      	movs	r0, r3
 8014610:	f008 fb25 	bl	801cc5e <TimerGetElapsedTime>
 8014614:	0003      	movs	r3, r0
 8014616:	e000      	b.n	801461a <RegionCommonUpdateBandTimeOff+0xb4>
 8014618:	2300      	movs	r3, #0
 801461a:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 801461c:	2313      	movs	r3, #19
 801461e:	18fb      	adds	r3, r7, r3
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	011b      	lsls	r3, r3, #4
 8014624:	683a      	ldr	r2, [r7, #0]
 8014626:	18d3      	adds	r3, r2, r3
 8014628:	68db      	ldr	r3, [r3, #12]
 801462a:	68fa      	ldr	r2, [r7, #12]
 801462c:	429a      	cmp	r2, r3
 801462e:	d307      	bcc.n	8014640 <RegionCommonUpdateBandTimeOff+0xda>
            {
                bands[i].TimeOff = 0;
 8014630:	2313      	movs	r3, #19
 8014632:	18fb      	adds	r3, r7, r3
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	011b      	lsls	r3, r3, #4
 8014638:	683a      	ldr	r2, [r7, #0]
 801463a:	18d3      	adds	r3, r2, r3
 801463c:	2200      	movs	r2, #0
 801463e:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8014640:	2313      	movs	r3, #19
 8014642:	18fb      	adds	r3, r7, r3
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	011b      	lsls	r3, r3, #4
 8014648:	683a      	ldr	r2, [r7, #0]
 801464a:	18d3      	adds	r3, r2, r3
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d06b      	beq.n	801472a <RegionCommonUpdateBandTimeOff+0x1c4>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 8014652:	2313      	movs	r3, #19
 8014654:	18fb      	adds	r3, r7, r3
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	011b      	lsls	r3, r3, #4
 801465a:	683a      	ldr	r2, [r7, #0]
 801465c:	18d3      	adds	r3, r2, r3
 801465e:	68da      	ldr	r2, [r3, #12]
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	1ad2      	subs	r2, r2, r3
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	4293      	cmp	r3, r2
 8014668:	d900      	bls.n	801466c <RegionCommonUpdateBandTimeOff+0x106>
 801466a:	0013      	movs	r3, r2
 801466c:	617b      	str	r3, [r7, #20]
 801466e:	e05c      	b.n	801472a <RegionCommonUpdateBandTimeOff+0x1c4>
            }
        }
        else
        {
            if( dutyCycle == true )
 8014670:	1dbb      	adds	r3, r7, #6
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d04e      	beq.n	8014716 <RegionCommonUpdateBandTimeOff+0x1b0>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 8014678:	2113      	movs	r1, #19
 801467a:	187b      	adds	r3, r7, r1
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	011b      	lsls	r3, r3, #4
 8014680:	683a      	ldr	r2, [r7, #0]
 8014682:	18d3      	adds	r3, r2, r3
 8014684:	68dc      	ldr	r4, [r3, #12]
 8014686:	187b      	adds	r3, r7, r1
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	011b      	lsls	r3, r3, #4
 801468c:	683a      	ldr	r2, [r7, #0]
 801468e:	18d3      	adds	r3, r2, r3
 8014690:	689b      	ldr	r3, [r3, #8]
 8014692:	0018      	movs	r0, r3
 8014694:	f008 fae3 	bl	801cc5e <TimerGetElapsedTime>
 8014698:	0003      	movs	r3, r0
 801469a:	429c      	cmp	r4, r3
 801469c:	d807      	bhi.n	80146ae <RegionCommonUpdateBandTimeOff+0x148>
                {
                    bands[i].TimeOff = 0;
 801469e:	2313      	movs	r3, #19
 80146a0:	18fb      	adds	r3, r7, r3
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	011b      	lsls	r3, r3, #4
 80146a6:	683a      	ldr	r2, [r7, #0]
 80146a8:	18d3      	adds	r3, r2, r3
 80146aa:	2200      	movs	r2, #0
 80146ac:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 80146ae:	2313      	movs	r3, #19
 80146b0:	18fb      	adds	r3, r7, r3
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	011b      	lsls	r3, r3, #4
 80146b6:	683a      	ldr	r2, [r7, #0]
 80146b8:	18d3      	adds	r3, r2, r3
 80146ba:	68db      	ldr	r3, [r3, #12]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d034      	beq.n	801472a <RegionCommonUpdateBandTimeOff+0x1c4>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 80146c0:	2113      	movs	r1, #19
 80146c2:	187b      	adds	r3, r7, r1
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	011b      	lsls	r3, r3, #4
 80146c8:	683a      	ldr	r2, [r7, #0]
 80146ca:	18d3      	adds	r3, r2, r3
 80146cc:	68dc      	ldr	r4, [r3, #12]
 80146ce:	187b      	adds	r3, r7, r1
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	011b      	lsls	r3, r3, #4
 80146d4:	683a      	ldr	r2, [r7, #0]
 80146d6:	18d3      	adds	r3, r2, r3
 80146d8:	689b      	ldr	r3, [r3, #8]
 80146da:	0018      	movs	r0, r3
 80146dc:	f008 fabf 	bl	801cc5e <TimerGetElapsedTime>
 80146e0:	0003      	movs	r3, r0
 80146e2:	1ae3      	subs	r3, r4, r3
 80146e4:	697a      	ldr	r2, [r7, #20]
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d912      	bls.n	8014710 <RegionCommonUpdateBandTimeOff+0x1aa>
 80146ea:	2113      	movs	r1, #19
 80146ec:	187b      	adds	r3, r7, r1
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	011b      	lsls	r3, r3, #4
 80146f2:	683a      	ldr	r2, [r7, #0]
 80146f4:	18d3      	adds	r3, r2, r3
 80146f6:	68dc      	ldr	r4, [r3, #12]
 80146f8:	187b      	adds	r3, r7, r1
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	011b      	lsls	r3, r3, #4
 80146fe:	683a      	ldr	r2, [r7, #0]
 8014700:	18d3      	adds	r3, r2, r3
 8014702:	689b      	ldr	r3, [r3, #8]
 8014704:	0018      	movs	r0, r3
 8014706:	f008 faaa 	bl	801cc5e <TimerGetElapsedTime>
 801470a:	0003      	movs	r3, r0
 801470c:	1ae3      	subs	r3, r4, r3
 801470e:	e000      	b.n	8014712 <RegionCommonUpdateBandTimeOff+0x1ac>
 8014710:	697b      	ldr	r3, [r7, #20]
 8014712:	617b      	str	r3, [r7, #20]
 8014714:	e009      	b.n	801472a <RegionCommonUpdateBandTimeOff+0x1c4>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 8014716:	2300      	movs	r3, #0
 8014718:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 801471a:	2313      	movs	r3, #19
 801471c:	18fb      	adds	r3, r7, r3
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	011b      	lsls	r3, r3, #4
 8014722:	683a      	ldr	r2, [r7, #0]
 8014724:	18d3      	adds	r3, r2, r3
 8014726:	2200      	movs	r2, #0
 8014728:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 801472a:	2113      	movs	r1, #19
 801472c:	187b      	adds	r3, r7, r1
 801472e:	781a      	ldrb	r2, [r3, #0]
 8014730:	187b      	adds	r3, r7, r1
 8014732:	3201      	adds	r2, #1
 8014734:	701a      	strb	r2, [r3, #0]
 8014736:	2313      	movs	r3, #19
 8014738:	18fa      	adds	r2, r7, r3
 801473a:	1d7b      	adds	r3, r7, #5
 801473c:	7812      	ldrb	r2, [r2, #0]
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	429a      	cmp	r2, r3
 8014742:	d200      	bcs.n	8014746 <RegionCommonUpdateBandTimeOff+0x1e0>
 8014744:	e727      	b.n	8014596 <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }
    return nextTxDelay;
 8014746:	697b      	ldr	r3, [r7, #20]
}
 8014748:	0018      	movs	r0, r3
 801474a:	46bd      	mov	sp, r7
 801474c:	b007      	add	sp, #28
 801474e:	bd90      	pop	{r4, r7, pc}

08014750 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801475a:	230f      	movs	r3, #15
 801475c:	18fb      	adds	r3, r7, r3
 801475e:	2200      	movs	r2, #0
 8014760:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	2b03      	cmp	r3, #3
 8014768:	d141      	bne.n	80147ee <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	3301      	adds	r3, #1
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	b25a      	sxtb	r2, r3
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	785b      	ldrb	r3, [r3, #1]
 801477a:	b25b      	sxtb	r3, r3
 801477c:	220f      	movs	r2, #15
 801477e:	4013      	ands	r3, r2
 8014780:	b25a      	sxtb	r2, r3
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	785b      	ldrb	r3, [r3, #1]
 801478a:	b25b      	sxtb	r3, r3
 801478c:	b2db      	uxtb	r3, r3
 801478e:	091b      	lsrs	r3, r3, #4
 8014790:	b2db      	uxtb	r3, r3
 8014792:	b25a      	sxtb	r2, r3
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	3302      	adds	r3, #2
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	b29a      	uxth	r2, r3
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	889b      	ldrh	r3, [r3, #4]
 80147a8:	b21a      	sxth	r2, r3
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	3303      	adds	r3, #3
 80147ae:	781b      	ldrb	r3, [r3, #0]
 80147b0:	021b      	lsls	r3, r3, #8
 80147b2:	b21b      	sxth	r3, r3
 80147b4:	4313      	orrs	r3, r2
 80147b6:	b21b      	sxth	r3, r3
 80147b8:	b29a      	uxth	r2, r3
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	791a      	ldrb	r2, [r3, #4]
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	091b      	lsrs	r3, r3, #4
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	2207      	movs	r2, #7
 80147d0:	4013      	ands	r3, r2
 80147d2:	b2da      	uxtb	r2, r3
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	220f      	movs	r2, #15
 80147de:	4013      	ands	r3, r2
 80147e0:	b2da      	uxtb	r2, r3
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80147e6:	230f      	movs	r3, #15
 80147e8:	18fb      	adds	r3, r7, r3
 80147ea:	2205      	movs	r2, #5
 80147ec:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 80147ee:	230f      	movs	r3, #15
 80147f0:	18fb      	adds	r3, r7, r3
 80147f2:	781b      	ldrb	r3, [r3, #0]
}
 80147f4:	0018      	movs	r0, r3
 80147f6:	46bd      	mov	sp, r7
 80147f8:	b004      	add	sp, #16
 80147fa:	bd80      	pop	{r7, pc}

080147fc <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80147fc:	b5b0      	push	{r4, r5, r7, lr}
 80147fe:	b088      	sub	sp, #32
 8014800:	af02      	add	r7, sp, #8
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
 8014808:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801480a:	2317      	movs	r3, #23
 801480c:	18fb      	adds	r3, r7, r3
 801480e:	68fa      	ldr	r2, [r7, #12]
 8014810:	7912      	ldrb	r2, [r2, #4]
 8014812:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8014814:	2316      	movs	r3, #22
 8014816:	18fb      	adds	r3, r7, r3
 8014818:	68fa      	ldr	r2, [r7, #12]
 801481a:	7992      	ldrb	r2, [r2, #6]
 801481c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 801481e:	2315      	movs	r3, #21
 8014820:	18fb      	adds	r3, r7, r3
 8014822:	68fa      	ldr	r2, [r7, #12]
 8014824:	79d2      	ldrb	r2, [r2, #7]
 8014826:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	7a1a      	ldrb	r2, [r3, #8]
 801482c:	2314      	movs	r3, #20
 801482e:	18fb      	adds	r3, r7, r3
 8014830:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	795b      	ldrb	r3, [r3, #5]
 8014836:	2201      	movs	r2, #1
 8014838:	4053      	eors	r3, r2
 801483a:	b2db      	uxtb	r3, r3
 801483c:	2b00      	cmp	r3, #0
 801483e:	d00e      	beq.n	801485e <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014840:	2314      	movs	r3, #20
 8014842:	18fb      	adds	r3, r7, r3
 8014844:	68fa      	ldr	r2, [r7, #12]
 8014846:	7ad2      	ldrb	r2, [r2, #11]
 8014848:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 801484a:	2316      	movs	r3, #22
 801484c:	18fb      	adds	r3, r7, r3
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	7a52      	ldrb	r2, [r2, #9]
 8014852:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8014854:	2315      	movs	r3, #21
 8014856:	18fb      	adds	r3, r7, r3
 8014858:	68fa      	ldr	r2, [r7, #12]
 801485a:	7a92      	ldrb	r2, [r2, #10]
 801485c:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 801485e:	2317      	movs	r3, #23
 8014860:	18fb      	adds	r3, r7, r3
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d049      	beq.n	80148fc <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	7b18      	ldrb	r0, [r3, #12]
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	691c      	ldr	r4, [r3, #16]
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2514      	movs	r5, #20
 8014874:	575d      	ldrsb	r5, [r3, r5]
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2215      	movs	r2, #21
 801487a:	569a      	ldrsb	r2, [r3, r2]
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	699b      	ldr	r3, [r3, #24]
 8014880:	2116      	movs	r1, #22
 8014882:	1879      	adds	r1, r7, r1
 8014884:	7809      	ldrb	r1, [r1, #0]
 8014886:	b249      	sxtb	r1, r1
 8014888:	9301      	str	r3, [sp, #4]
 801488a:	9200      	str	r2, [sp, #0]
 801488c:	002b      	movs	r3, r5
 801488e:	000a      	movs	r2, r1
 8014890:	0021      	movs	r1, r4
 8014892:	f7ff fcdb 	bl	801424c <RegionCommonChanVerifyDr>
 8014896:	0003      	movs	r3, r0
 8014898:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801489a:	2301      	movs	r3, #1
 801489c:	4053      	eors	r3, r2
 801489e:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d006      	beq.n	80148b2 <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 80148a4:	2217      	movs	r2, #23
 80148a6:	18bb      	adds	r3, r7, r2
 80148a8:	18ba      	adds	r2, r7, r2
 80148aa:	7812      	ldrb	r2, [r2, #0]
 80148ac:	2102      	movs	r1, #2
 80148ae:	438a      	bics	r2, r1
 80148b0:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	211d      	movs	r1, #29
 80148b6:	5659      	ldrsb	r1, [r3, r1]
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	221c      	movs	r2, #28
 80148bc:	569a      	ldrsb	r2, [r3, r2]
 80148be:	2315      	movs	r3, #21
 80148c0:	18fb      	adds	r3, r7, r3
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	b25b      	sxtb	r3, r3
 80148c6:	0018      	movs	r0, r3
 80148c8:	f7ff fd5a 	bl	8014380 <RegionCommonValueInRange>
 80148cc:	1e03      	subs	r3, r0, #0
 80148ce:	d115      	bne.n	80148fc <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	7f5b      	ldrb	r3, [r3, #29]
 80148d4:	b25b      	sxtb	r3, r3
 80148d6:	2215      	movs	r2, #21
 80148d8:	18ba      	adds	r2, r7, r2
 80148da:	7812      	ldrb	r2, [r2, #0]
 80148dc:	b252      	sxtb	r2, r2
 80148de:	429a      	cmp	r2, r3
 80148e0:	da05      	bge.n	80148ee <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80148e2:	2315      	movs	r3, #21
 80148e4:	18fb      	adds	r3, r7, r3
 80148e6:	68fa      	ldr	r2, [r7, #12]
 80148e8:	7f52      	ldrb	r2, [r2, #29]
 80148ea:	701a      	strb	r2, [r3, #0]
 80148ec:	e006      	b.n	80148fc <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80148ee:	2217      	movs	r2, #23
 80148f0:	18bb      	adds	r3, r7, r2
 80148f2:	18ba      	adds	r2, r7, r2
 80148f4:	7812      	ldrb	r2, [r2, #0]
 80148f6:	2104      	movs	r1, #4
 80148f8:	438a      	bics	r2, r1
 80148fa:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80148fc:	2317      	movs	r3, #23
 80148fe:	18fb      	adds	r3, r7, r3
 8014900:	781b      	ldrb	r3, [r3, #0]
 8014902:	2b07      	cmp	r3, #7
 8014904:	d109      	bne.n	801491a <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 8014906:	2314      	movs	r3, #20
 8014908:	18fb      	adds	r3, r7, r3
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	b25b      	sxtb	r3, r3
 801490e:	2b00      	cmp	r3, #0
 8014910:	d103      	bne.n	801491a <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014912:	2314      	movs	r3, #20
 8014914:	18fb      	adds	r3, r7, r3
 8014916:	2201      	movs	r2, #1
 8014918:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	2216      	movs	r2, #22
 801491e:	18ba      	adds	r2, r7, r2
 8014920:	7812      	ldrb	r2, [r2, #0]
 8014922:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2215      	movs	r2, #21
 8014928:	18ba      	adds	r2, r7, r2
 801492a:	7812      	ldrb	r2, [r2, #0]
 801492c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801492e:	2314      	movs	r3, #20
 8014930:	18fb      	adds	r3, r7, r3
 8014932:	781a      	ldrb	r2, [r3, #0]
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	701a      	strb	r2, [r3, #0]

    return status;
 8014938:	2317      	movs	r3, #23
 801493a:	18fb      	adds	r3, r7, r3
 801493c:	781b      	ldrb	r3, [r3, #0]
}
 801493e:	0018      	movs	r0, r3
 8014940:	46bd      	mov	sp, r7
 8014942:	b006      	add	sp, #24
 8014944:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014948 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8014948:	b5b0      	push	{r4, r5, r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	0002      	movs	r2, r0
 8014950:	6039      	str	r1, [r7, #0]
 8014952:	1dfb      	adds	r3, r7, #7
 8014954:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 8014956:	1dfb      	adds	r3, r7, #7
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	2201      	movs	r2, #1
 801495c:	409a      	lsls	r2, r3
 801495e:	0013      	movs	r3, r2
 8014960:	0018      	movs	r0, r3
 8014962:	f7ed ff5b 	bl	800281c <__aeabi_i2d>
 8014966:	0004      	movs	r4, r0
 8014968:	000d      	movs	r5, r1
 801496a:	6838      	ldr	r0, [r7, #0]
 801496c:	f7ed ff90 	bl	8002890 <__aeabi_ui2d>
 8014970:	0002      	movs	r2, r0
 8014972:	000b      	movs	r3, r1
 8014974:	0020      	movs	r0, r4
 8014976:	0029      	movs	r1, r5
 8014978:	f7ec fd56 	bl	8001428 <__aeabi_ddiv>
 801497c:	0003      	movs	r3, r0
 801497e:	000c      	movs	r4, r1
 8014980:	0018      	movs	r0, r3
 8014982:	0021      	movs	r1, r4
 8014984:	2200      	movs	r2, #0
 8014986:	4b05      	ldr	r3, [pc, #20]	; (801499c <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8014988:	f7ed f958 	bl	8001c3c <__aeabi_dmul>
 801498c:	0003      	movs	r3, r0
 801498e:	000c      	movs	r4, r1
}
 8014990:	0018      	movs	r0, r3
 8014992:	0021      	movs	r1, r4
 8014994:	46bd      	mov	sp, r7
 8014996:	b002      	add	sp, #8
 8014998:	bdb0      	pop	{r4, r5, r7, pc}
 801499a:	46c0      	nop			; (mov r8, r8)
 801499c:	408f4000 	.word	0x408f4000

080149a0 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 80149a0:	b590      	push	{r4, r7, lr}
 80149a2:	b083      	sub	sp, #12
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	0002      	movs	r2, r0
 80149a8:	1dfb      	adds	r3, r7, #7
 80149aa:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 80149ac:	1dfb      	adds	r3, r7, #7
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	0018      	movs	r0, r3
 80149b2:	f7ed ff6d 	bl	8002890 <__aeabi_ui2d>
 80149b6:	0003      	movs	r3, r0
 80149b8:	000c      	movs	r4, r1
 80149ba:	001a      	movs	r2, r3
 80149bc:	0023      	movs	r3, r4
 80149be:	2000      	movs	r0, #0
 80149c0:	4904      	ldr	r1, [pc, #16]	; (80149d4 <RegionCommonComputeSymbolTimeFsk+0x34>)
 80149c2:	f7ec fd31 	bl	8001428 <__aeabi_ddiv>
 80149c6:	0003      	movs	r3, r0
 80149c8:	000c      	movs	r4, r1
}
 80149ca:	0018      	movs	r0, r3
 80149cc:	0021      	movs	r1, r4
 80149ce:	46bd      	mov	sp, r7
 80149d0:	b003      	add	sp, #12
 80149d2:	bd90      	pop	{r4, r7, pc}
 80149d4:	40200000 	.word	0x40200000

080149d8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 80149d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149da:	b085      	sub	sp, #20
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60b8      	str	r0, [r7, #8]
 80149e0:	60f9      	str	r1, [r7, #12]
 80149e2:	603b      	str	r3, [r7, #0]
 80149e4:	1dfb      	adds	r3, r7, #7
 80149e6:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 80149e8:	1dfb      	adds	r3, r7, #7
 80149ea:	781c      	ldrb	r4, [r3, #0]
 80149ec:	1dfb      	adds	r3, r7, #7
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	3b04      	subs	r3, #4
 80149f2:	005b      	lsls	r3, r3, #1
 80149f4:	0018      	movs	r0, r3
 80149f6:	f7ed ff11 	bl	800281c <__aeabi_i2d>
 80149fa:	68ba      	ldr	r2, [r7, #8]
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	f7ed f91d 	bl	8001c3c <__aeabi_dmul>
 8014a02:	0002      	movs	r2, r0
 8014a04:	000b      	movs	r3, r1
 8014a06:	0015      	movs	r5, r2
 8014a08:	001e      	movs	r6, r3
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	005b      	lsls	r3, r3, #1
 8014a0e:	0018      	movs	r0, r3
 8014a10:	f7ed ff3e 	bl	8002890 <__aeabi_ui2d>
 8014a14:	0002      	movs	r2, r0
 8014a16:	000b      	movs	r3, r1
 8014a18:	0028      	movs	r0, r5
 8014a1a:	0031      	movs	r1, r6
 8014a1c:	f7ec f9e8 	bl	8000df0 <__aeabi_dadd>
 8014a20:	0002      	movs	r2, r0
 8014a22:	000b      	movs	r3, r1
 8014a24:	0010      	movs	r0, r2
 8014a26:	0019      	movs	r1, r3
 8014a28:	68ba      	ldr	r2, [r7, #8]
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	f7ec fcfc 	bl	8001428 <__aeabi_ddiv>
 8014a30:	0002      	movs	r2, r0
 8014a32:	000b      	movs	r3, r1
 8014a34:	0010      	movs	r0, r2
 8014a36:	0019      	movs	r1, r3
 8014a38:	f011 fe86 	bl	8026748 <ceil>
 8014a3c:	0002      	movs	r2, r0
 8014a3e:	000b      	movs	r3, r1
 8014a40:	0010      	movs	r0, r2
 8014a42:	0019      	movs	r1, r3
 8014a44:	f7eb fdc4 	bl	80005d0 <__aeabi_d2uiz>
 8014a48:	0002      	movs	r2, r0
 8014a4a:	0023      	movs	r3, r4
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d200      	bcs.n	8014a52 <RegionCommonComputeRxWindowParameters+0x7a>
 8014a50:	0013      	movs	r3, r2
 8014a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a54:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 8014a56:	2200      	movs	r2, #0
 8014a58:	4b20      	ldr	r3, [pc, #128]	; (8014adc <RegionCommonComputeRxWindowParameters+0x104>)
 8014a5a:	68b8      	ldr	r0, [r7, #8]
 8014a5c:	68f9      	ldr	r1, [r7, #12]
 8014a5e:	f7ed f8ed 	bl	8001c3c <__aeabi_dmul>
 8014a62:	0003      	movs	r3, r0
 8014a64:	000c      	movs	r4, r1
 8014a66:	0025      	movs	r5, r4
 8014a68:	001c      	movs	r4, r3
 8014a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	0018      	movs	r0, r3
 8014a70:	f7ed ff0e 	bl	8002890 <__aeabi_ui2d>
 8014a74:	68ba      	ldr	r2, [r7, #8]
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f7ed f8e0 	bl	8001c3c <__aeabi_dmul>
 8014a7c:	0002      	movs	r2, r0
 8014a7e:	000b      	movs	r3, r1
 8014a80:	0010      	movs	r0, r2
 8014a82:	0019      	movs	r1, r3
 8014a84:	2200      	movs	r2, #0
 8014a86:	2380      	movs	r3, #128	; 0x80
 8014a88:	05db      	lsls	r3, r3, #23
 8014a8a:	f7ec fccd 	bl	8001428 <__aeabi_ddiv>
 8014a8e:	0002      	movs	r2, r0
 8014a90:	000b      	movs	r3, r1
 8014a92:	0020      	movs	r0, r4
 8014a94:	0029      	movs	r1, r5
 8014a96:	f7ed fb43 	bl	8002120 <__aeabi_dsub>
 8014a9a:	0003      	movs	r3, r0
 8014a9c:	000c      	movs	r4, r1
 8014a9e:	0025      	movs	r5, r4
 8014aa0:	001c      	movs	r4, r3
 8014aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014aa4:	f7ed fef4 	bl	8002890 <__aeabi_ui2d>
 8014aa8:	0002      	movs	r2, r0
 8014aaa:	000b      	movs	r3, r1
 8014aac:	0020      	movs	r0, r4
 8014aae:	0029      	movs	r1, r5
 8014ab0:	f7ed fb36 	bl	8002120 <__aeabi_dsub>
 8014ab4:	0003      	movs	r3, r0
 8014ab6:	000c      	movs	r4, r1
 8014ab8:	0018      	movs	r0, r3
 8014aba:	0021      	movs	r1, r4
 8014abc:	f011 fe44 	bl	8026748 <ceil>
 8014ac0:	0003      	movs	r3, r0
 8014ac2:	000c      	movs	r4, r1
 8014ac4:	0018      	movs	r0, r3
 8014ac6:	0021      	movs	r1, r4
 8014ac8:	f7ed fe72 	bl	80027b0 <__aeabi_d2iz>
 8014acc:	0002      	movs	r2, r0
 8014ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ad0:	601a      	str	r2, [r3, #0]
}
 8014ad2:	46c0      	nop			; (mov r8, r8)
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	b005      	add	sp, #20
 8014ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ada:	46c0      	nop			; (mov r8, r8)
 8014adc:	40100000 	.word	0x40100000

08014ae0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014ae0:	b5b0      	push	{r4, r5, r7, lr}
 8014ae2:	b086      	sub	sp, #24
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	60b9      	str	r1, [r7, #8]
 8014ae8:	607a      	str	r2, [r7, #4]
 8014aea:	210f      	movs	r1, #15
 8014aec:	187b      	adds	r3, r7, r1
 8014aee:	1c02      	adds	r2, r0, #0
 8014af0:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 8014af2:	2517      	movs	r5, #23
 8014af4:	197b      	adds	r3, r7, r5
 8014af6:	2200      	movs	r2, #0
 8014af8:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014afa:	187b      	adds	r3, r7, r1
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	b25b      	sxtb	r3, r3
 8014b00:	005b      	lsls	r3, r3, #1
 8014b02:	0018      	movs	r0, r3
 8014b04:	f7ec f934 	bl	8000d70 <__aeabi_ui2f>
 8014b08:	1c03      	adds	r3, r0, #0
 8014b0a:	1c19      	adds	r1, r3, #0
 8014b0c:	68b8      	ldr	r0, [r7, #8]
 8014b0e:	f7eb ff21 	bl	8000954 <__aeabi_fsub>
 8014b12:	1c03      	adds	r3, r0, #0
 8014b14:	6879      	ldr	r1, [r7, #4]
 8014b16:	1c18      	adds	r0, r3, #0
 8014b18:	f7eb ff1c 	bl	8000954 <__aeabi_fsub>
 8014b1c:	1c03      	adds	r3, r0, #0
 8014b1e:	1c18      	adds	r0, r3, #0
 8014b20:	f7ed fee8 	bl	80028f4 <__aeabi_f2d>
 8014b24:	0003      	movs	r3, r0
 8014b26:	000c      	movs	r4, r1
 8014b28:	0018      	movs	r0, r3
 8014b2a:	0021      	movs	r1, r4
 8014b2c:	f011 fe8e 	bl	802684c <floor>
 8014b30:	0002      	movs	r2, r0
 8014b32:	000b      	movs	r3, r1
 8014b34:	197c      	adds	r4, r7, r5
 8014b36:	0010      	movs	r0, r2
 8014b38:	0019      	movs	r1, r3
 8014b3a:	f7ed fe39 	bl	80027b0 <__aeabi_d2iz>
 8014b3e:	0003      	movs	r3, r0
 8014b40:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8014b42:	197b      	adds	r3, r7, r5
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	b25b      	sxtb	r3, r3
}
 8014b48:	0018      	movs	r0, r3
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	b006      	add	sp, #24
 8014b4e:	bdb0      	pop	{r4, r5, r7, pc}

08014b50 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8014b50:	b5b0      	push	{r4, r5, r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	7adb      	ldrb	r3, [r3, #11]
 8014b60:	0019      	movs	r1, r3
 8014b62:	000b      	movs	r3, r1
 8014b64:	005b      	lsls	r3, r3, #1
 8014b66:	185b      	adds	r3, r3, r1
 8014b68:	009b      	lsls	r3, r3, #2
 8014b6a:	18d2      	adds	r2, r2, r3
 8014b6c:	210f      	movs	r1, #15
 8014b6e:	187b      	adds	r3, r7, r1
 8014b70:	7a52      	ldrb	r2, [r2, #9]
 8014b72:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	685a      	ldr	r2, [r3, #4]
 8014b78:	187b      	adds	r3, r7, r1
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	011b      	lsls	r3, r3, #4
 8014b7e:	18d2      	adds	r2, r2, r3
 8014b80:	230c      	movs	r3, #12
 8014b82:	18fb      	adds	r3, r7, r3
 8014b84:	8812      	ldrh	r2, [r2, #0]
 8014b86:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8014b88:	230a      	movs	r3, #10
 8014b8a:	18fb      	adds	r3, r7, r3
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	685a      	ldr	r2, [r3, #4]
 8014b94:	187b      	adds	r3, r7, r1
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	011b      	lsls	r3, r3, #4
 8014b9a:	18d3      	adds	r3, r2, r3
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	7a5b      	ldrb	r3, [r3, #9]
 8014ba4:	2201      	movs	r2, #1
 8014ba6:	4053      	eors	r3, r2
 8014ba8:	b2db      	uxtb	r3, r3
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d03c      	beq.n	8014c28 <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	68db      	ldr	r3, [r3, #12]
 8014bb2:	250a      	movs	r5, #10
 8014bb4:	197c      	adds	r4, r7, r5
 8014bb6:	0018      	movs	r0, r3
 8014bb8:	f7ff fb1c 	bl	80141f4 <RegionCommonGetJoinDc>
 8014bbc:	0003      	movs	r3, r0
 8014bbe:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014bc0:	210c      	movs	r1, #12
 8014bc2:	187a      	adds	r2, r7, r1
 8014bc4:	197b      	adds	r3, r7, r5
 8014bc6:	1879      	adds	r1, r7, r1
 8014bc8:	880c      	ldrh	r4, [r1, #0]
 8014bca:	881b      	ldrh	r3, [r3, #0]
 8014bcc:	b298      	uxth	r0, r3
 8014bce:	b2a1      	uxth	r1, r4
 8014bd0:	4288      	cmp	r0, r1
 8014bd2:	d200      	bcs.n	8014bd6 <RegionCommonCalcBackOff+0x86>
 8014bd4:	1c23      	adds	r3, r4, #0
 8014bd6:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	7a9b      	ldrb	r3, [r3, #10]
 8014bdc:	2201      	movs	r2, #1
 8014bde:	4053      	eors	r3, r2
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d010      	beq.n	8014c08 <RegionCommonCalcBackOff+0xb8>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	7a1b      	ldrb	r3, [r3, #8]
 8014bea:	2201      	movs	r2, #1
 8014bec:	4053      	eors	r3, r2
 8014bee:	b2db      	uxtb	r3, r3
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d009      	beq.n	8014c08 <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	685a      	ldr	r2, [r3, #4]
 8014bf8:	230f      	movs	r3, #15
 8014bfa:	18fb      	adds	r3, r7, r3
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	011b      	lsls	r3, r3, #4
 8014c00:	18d3      	adds	r3, r2, r3
 8014c02:	2200      	movs	r2, #0
 8014c04:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 8014c06:	e02c      	b.n	8014c62 <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8014c08:	230c      	movs	r3, #12
 8014c0a:	18fb      	adds	r3, r7, r3
 8014c0c:	881b      	ldrh	r3, [r3, #0]
 8014c0e:	1e5a      	subs	r2, r3, #1
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6919      	ldr	r1, [r3, #16]
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6858      	ldr	r0, [r3, #4]
 8014c18:	230f      	movs	r3, #15
 8014c1a:	18fb      	adds	r3, r7, r3
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	011b      	lsls	r3, r3, #4
 8014c20:	18c3      	adds	r3, r0, r3
 8014c22:	434a      	muls	r2, r1
 8014c24:	60da      	str	r2, [r3, #12]
}
 8014c26:	e01c      	b.n	8014c62 <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	7a9b      	ldrb	r3, [r3, #10]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d00f      	beq.n	8014c50 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8014c30:	230c      	movs	r3, #12
 8014c32:	18fb      	adds	r3, r7, r3
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	1e5a      	subs	r2, r3, #1
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6919      	ldr	r1, [r3, #16]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	6858      	ldr	r0, [r3, #4]
 8014c40:	230f      	movs	r3, #15
 8014c42:	18fb      	adds	r3, r7, r3
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	011b      	lsls	r3, r3, #4
 8014c48:	18c3      	adds	r3, r0, r3
 8014c4a:	434a      	muls	r2, r1
 8014c4c:	60da      	str	r2, [r3, #12]
}
 8014c4e:	e008      	b.n	8014c62 <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	685a      	ldr	r2, [r3, #4]
 8014c54:	230f      	movs	r3, #15
 8014c56:	18fb      	adds	r3, r7, r3
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	011b      	lsls	r3, r3, #4
 8014c5c:	18d3      	adds	r3, r2, r3
 8014c5e:	2200      	movs	r2, #0
 8014c60:	60da      	str	r2, [r3, #12]
}
 8014c62:	46c0      	nop			; (mov r8, r8)
 8014c64:	46bd      	mov	sp, r7
 8014c66:	b004      	add	sp, #16
 8014c68:	bdb0      	pop	{r4, r5, r7, pc}

08014c6a <GetNextLowerTxDr>:
 */
static RegionEU433NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8014c6a:	b580      	push	{r7, lr}
 8014c6c:	b084      	sub	sp, #16
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	0002      	movs	r2, r0
 8014c72:	1dfb      	adds	r3, r7, #7
 8014c74:	701a      	strb	r2, [r3, #0]
 8014c76:	1dbb      	adds	r3, r7, #6
 8014c78:	1c0a      	adds	r2, r1, #0
 8014c7a:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8014c7c:	230f      	movs	r3, #15
 8014c7e:	18fb      	adds	r3, r7, r3
 8014c80:	2200      	movs	r2, #0
 8014c82:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8014c84:	1dfa      	adds	r2, r7, #7
 8014c86:	1dbb      	adds	r3, r7, #6
 8014c88:	7812      	ldrb	r2, [r2, #0]
 8014c8a:	b252      	sxtb	r2, r2
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	b25b      	sxtb	r3, r3
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d105      	bne.n	8014ca0 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8014c94:	230f      	movs	r3, #15
 8014c96:	18fb      	adds	r3, r7, r3
 8014c98:	1dba      	adds	r2, r7, #6
 8014c9a:	7812      	ldrb	r2, [r2, #0]
 8014c9c:	701a      	strb	r2, [r3, #0]
 8014c9e:	e005      	b.n	8014cac <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8014ca0:	1dfb      	adds	r3, r7, #7
 8014ca2:	781a      	ldrb	r2, [r3, #0]
 8014ca4:	230f      	movs	r3, #15
 8014ca6:	18fb      	adds	r3, r7, r3
 8014ca8:	3a01      	subs	r2, #1
 8014caa:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8014cac:	230f      	movs	r3, #15
 8014cae:	18fb      	adds	r3, r7, r3
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	b25b      	sxtb	r3, r3
}
 8014cb4:	0018      	movs	r0, r3
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	b004      	add	sp, #16
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU433[drIndex] )
 8014cc4:	4b09      	ldr	r3, [pc, #36]	; (8014cec <GetBandwidth+0x30>)
 8014cc6:	687a      	ldr	r2, [r7, #4]
 8014cc8:	0092      	lsls	r2, r2, #2
 8014cca:	58d3      	ldr	r3, [r2, r3]
 8014ccc:	4a08      	ldr	r2, [pc, #32]	; (8014cf0 <GetBandwidth+0x34>)
 8014cce:	4293      	cmp	r3, r2
 8014cd0:	d004      	beq.n	8014cdc <GetBandwidth+0x20>
 8014cd2:	4a08      	ldr	r2, [pc, #32]	; (8014cf4 <GetBandwidth+0x38>)
 8014cd4:	4293      	cmp	r3, r2
 8014cd6:	d003      	beq.n	8014ce0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	e002      	b.n	8014ce2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	e000      	b.n	8014ce2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8014ce0:	2302      	movs	r3, #2
    }
}
 8014ce2:	0018      	movs	r0, r3
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	b002      	add	sp, #8
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	46c0      	nop			; (mov r8, r8)
 8014cec:	080282e4 	.word	0x080282e4
 8014cf0:	0003d090 	.word	0x0003d090
 8014cf4:	0007a120 	.word	0x0007a120

08014cf8 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8014cf8:	b590      	push	{r4, r7, lr}
 8014cfa:	b085      	sub	sp, #20
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	0004      	movs	r4, r0
 8014d00:	0008      	movs	r0, r1
 8014d02:	0011      	movs	r1, r2
 8014d04:	603b      	str	r3, [r7, #0]
 8014d06:	1dfb      	adds	r3, r7, #7
 8014d08:	1c22      	adds	r2, r4, #0
 8014d0a:	701a      	strb	r2, [r3, #0]
 8014d0c:	1dbb      	adds	r3, r7, #6
 8014d0e:	1c02      	adds	r2, r0, #0
 8014d10:	701a      	strb	r2, [r3, #0]
 8014d12:	1d7b      	adds	r3, r7, #5
 8014d14:	1c0a      	adds	r2, r1, #0
 8014d16:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8014d18:	210f      	movs	r1, #15
 8014d1a:	187b      	adds	r3, r7, r1
 8014d1c:	1dfa      	adds	r2, r7, #7
 8014d1e:	7812      	ldrb	r2, [r2, #0]
 8014d20:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8014d22:	187a      	adds	r2, r7, r1
 8014d24:	1dbb      	adds	r3, r7, #6
 8014d26:	1df9      	adds	r1, r7, #7
 8014d28:	780c      	ldrb	r4, [r1, #0]
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	b258      	sxtb	r0, r3
 8014d2e:	b261      	sxtb	r1, r4
 8014d30:	4288      	cmp	r0, r1
 8014d32:	da00      	bge.n	8014d36 <LimitTxPower+0x3e>
 8014d34:	1c23      	adds	r3, r4, #0
 8014d36:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8014d38:	230f      	movs	r3, #15
 8014d3a:	18fb      	adds	r3, r7, r3
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	b25b      	sxtb	r3, r3
}
 8014d40:	0018      	movs	r0, r3
 8014d42:	46bd      	mov	sp, r7
 8014d44:	b005      	add	sp, #20
 8014d46:	bd90      	pop	{r4, r7, pc}

08014d48 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b082      	sub	sp, #8
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014d50:	4b0e      	ldr	r3, [pc, #56]	; (8014d8c <VerifyRfFreq+0x44>)
 8014d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	0010      	movs	r0, r2
 8014d58:	4798      	blx	r3
 8014d5a:	0003      	movs	r3, r0
 8014d5c:	001a      	movs	r2, r3
 8014d5e:	2301      	movs	r3, #1
 8014d60:	4053      	eors	r3, r2
 8014d62:	b2db      	uxtb	r3, r3
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d001      	beq.n	8014d6c <VerifyRfFreq+0x24>
    {
        return false;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	e00a      	b.n	8014d82 <VerifyRfFreq+0x3a>
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	4a08      	ldr	r2, [pc, #32]	; (8014d90 <VerifyRfFreq+0x48>)
 8014d70:	4293      	cmp	r3, r2
 8014d72:	d903      	bls.n	8014d7c <VerifyRfFreq+0x34>
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	4a07      	ldr	r2, [pc, #28]	; (8014d94 <VerifyRfFreq+0x4c>)
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	d901      	bls.n	8014d80 <VerifyRfFreq+0x38>
    {
        return false;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	e000      	b.n	8014d82 <VerifyRfFreq+0x3a>
    }
    return true;
 8014d80:	2301      	movs	r3, #1
}
 8014d82:	0018      	movs	r0, r3
 8014d84:	46bd      	mov	sp, r7
 8014d86:	b002      	add	sp, #8
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	46c0      	nop			; (mov r8, r8)
 8014d8c:	08028964 	.word	0x08028964
 8014d90:	19d1b9d7 	.word	0x19d1b9d7
 8014d94:	19e87628 	.word	0x19e87628

08014d98 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8014d98:	b5b0      	push	{r4, r5, r7, lr}
 8014d9a:	b086      	sub	sp, #24
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60ba      	str	r2, [r7, #8]
 8014da0:	607b      	str	r3, [r7, #4]
 8014da2:	230f      	movs	r3, #15
 8014da4:	18fb      	adds	r3, r7, r3
 8014da6:	1c02      	adds	r2, r0, #0
 8014da8:	701a      	strb	r2, [r3, #0]
 8014daa:	230e      	movs	r3, #14
 8014dac:	18fb      	adds	r3, r7, r3
 8014dae:	1c0a      	adds	r2, r1, #0
 8014db0:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8014db2:	2317      	movs	r3, #23
 8014db4:	18fb      	adds	r3, r7, r3
 8014db6:	2200      	movs	r2, #0
 8014db8:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8014dba:	2316      	movs	r3, #22
 8014dbc:	18fb      	adds	r3, r7, r3
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU433_MAX_NB_CHANNELS; i += 16, k++ )
 8014dc2:	2315      	movs	r3, #21
 8014dc4:	18fb      	adds	r3, r7, r3
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	701a      	strb	r2, [r3, #0]
 8014dca:	2314      	movs	r3, #20
 8014dcc:	18fb      	adds	r3, r7, r3
 8014dce:	2200      	movs	r2, #0
 8014dd0:	701a      	strb	r2, [r3, #0]
 8014dd2:	e0b4      	b.n	8014f3e <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014dd4:	2313      	movs	r3, #19
 8014dd6:	18fb      	adds	r3, r7, r3
 8014dd8:	2200      	movs	r2, #0
 8014dda:	701a      	strb	r2, [r3, #0]
 8014ddc:	e09d      	b.n	8014f1a <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8014dde:	2314      	movs	r3, #20
 8014de0:	18fb      	adds	r3, r7, r3
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	005b      	lsls	r3, r3, #1
 8014de6:	68ba      	ldr	r2, [r7, #8]
 8014de8:	18d3      	adds	r3, r2, r3
 8014dea:	881b      	ldrh	r3, [r3, #0]
 8014dec:	001a      	movs	r2, r3
 8014dee:	2313      	movs	r3, #19
 8014df0:	18fb      	adds	r3, r7, r3
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	411a      	asrs	r2, r3
 8014df6:	0013      	movs	r3, r2
 8014df8:	2201      	movs	r2, #1
 8014dfa:	4013      	ands	r3, r2
 8014dfc:	d100      	bne.n	8014e00 <CountNbOfEnabledChannels+0x68>
 8014dfe:	e086      	b.n	8014f0e <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8014e00:	2315      	movs	r3, #21
 8014e02:	18fb      	adds	r3, r7, r3
 8014e04:	781a      	ldrb	r2, [r3, #0]
 8014e06:	2313      	movs	r3, #19
 8014e08:	18fb      	adds	r3, r7, r3
 8014e0a:	781b      	ldrb	r3, [r3, #0]
 8014e0c:	18d3      	adds	r3, r2, r3
 8014e0e:	001a      	movs	r2, r3
 8014e10:	0013      	movs	r3, r2
 8014e12:	005b      	lsls	r3, r3, #1
 8014e14:	189b      	adds	r3, r3, r2
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	001a      	movs	r2, r3
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	189b      	adds	r3, r3, r2
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d06f      	beq.n	8014f04 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8014e24:	230f      	movs	r3, #15
 8014e26:	18fb      	adds	r3, r7, r3
 8014e28:	781b      	ldrb	r3, [r3, #0]
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	4053      	eors	r3, r2
 8014e2e:	b2db      	uxtb	r3, r3
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d008      	beq.n	8014e46 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU433_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8014e34:	2313      	movs	r3, #19
 8014e36:	18fb      	adds	r3, r7, r3
 8014e38:	781b      	ldrb	r3, [r3, #0]
 8014e3a:	2207      	movs	r2, #7
 8014e3c:	411a      	asrs	r2, r3
 8014e3e:	0013      	movs	r3, r2
 8014e40:	2201      	movs	r2, #1
 8014e42:	4013      	ands	r3, r2
 8014e44:	d060      	beq.n	8014f08 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8014e46:	230e      	movs	r3, #14
 8014e48:	18fb      	adds	r3, r7, r3
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	5618      	ldrsb	r0, [r3, r0]
 8014e4e:	2415      	movs	r4, #21
 8014e50:	193b      	adds	r3, r7, r4
 8014e52:	781a      	ldrb	r2, [r3, #0]
 8014e54:	2513      	movs	r5, #19
 8014e56:	197b      	adds	r3, r7, r5
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	18d3      	adds	r3, r2, r3
 8014e5c:	001a      	movs	r2, r3
 8014e5e:	0013      	movs	r3, r2
 8014e60:	005b      	lsls	r3, r3, #1
 8014e62:	189b      	adds	r3, r3, r2
 8014e64:	009b      	lsls	r3, r3, #2
 8014e66:	001a      	movs	r2, r3
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	189b      	adds	r3, r3, r2
 8014e6c:	7a1b      	ldrb	r3, [r3, #8]
 8014e6e:	011b      	lsls	r3, r3, #4
 8014e70:	b25b      	sxtb	r3, r3
 8014e72:	111b      	asrs	r3, r3, #4
 8014e74:	b25b      	sxtb	r3, r3
 8014e76:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8014e78:	193b      	adds	r3, r7, r4
 8014e7a:	781a      	ldrb	r2, [r3, #0]
 8014e7c:	197b      	adds	r3, r7, r5
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	18d3      	adds	r3, r2, r3
 8014e82:	001a      	movs	r2, r3
 8014e84:	0013      	movs	r3, r2
 8014e86:	005b      	lsls	r3, r3, #1
 8014e88:	189b      	adds	r3, r3, r2
 8014e8a:	009b      	lsls	r3, r3, #2
 8014e8c:	001a      	movs	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	189b      	adds	r3, r3, r2
 8014e92:	7a1b      	ldrb	r3, [r3, #8]
 8014e94:	b25b      	sxtb	r3, r3
 8014e96:	111b      	asrs	r3, r3, #4
 8014e98:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8014e9a:	001a      	movs	r2, r3
 8014e9c:	f7ff fa70 	bl	8014380 <RegionCommonValueInRange>
 8014ea0:	1e03      	subs	r3, r0, #0
 8014ea2:	d033      	beq.n	8014f0c <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8014ea4:	2315      	movs	r3, #21
 8014ea6:	18fb      	adds	r3, r7, r3
 8014ea8:	781a      	ldrb	r2, [r3, #0]
 8014eaa:	2313      	movs	r3, #19
 8014eac:	18fb      	adds	r3, r7, r3
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	18d3      	adds	r3, r2, r3
 8014eb2:	001a      	movs	r2, r3
 8014eb4:	0013      	movs	r3, r2
 8014eb6:	005b      	lsls	r3, r3, #1
 8014eb8:	189b      	adds	r3, r3, r2
 8014eba:	009b      	lsls	r3, r3, #2
 8014ebc:	001a      	movs	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	189b      	adds	r3, r3, r2
 8014ec2:	7a5b      	ldrb	r3, [r3, #9]
 8014ec4:	011b      	lsls	r3, r3, #4
 8014ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ec8:	18d3      	adds	r3, r2, r3
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d006      	beq.n	8014ede <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8014ed0:	2116      	movs	r1, #22
 8014ed2:	187b      	adds	r3, r7, r1
 8014ed4:	781a      	ldrb	r2, [r3, #0]
 8014ed6:	187b      	adds	r3, r7, r1
 8014ed8:	3201      	adds	r2, #1
 8014eda:	701a      	strb	r2, [r3, #0]
                    continue;
 8014edc:	e017      	b.n	8014f0e <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8014ede:	2217      	movs	r2, #23
 8014ee0:	18bb      	adds	r3, r7, r2
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	18ba      	adds	r2, r7, r2
 8014ee6:	1c59      	adds	r1, r3, #1
 8014ee8:	7011      	strb	r1, [r2, #0]
 8014eea:	001a      	movs	r2, r3
 8014eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eee:	189b      	adds	r3, r3, r2
 8014ef0:	2215      	movs	r2, #21
 8014ef2:	18b9      	adds	r1, r7, r2
 8014ef4:	2213      	movs	r2, #19
 8014ef6:	18ba      	adds	r2, r7, r2
 8014ef8:	7809      	ldrb	r1, [r1, #0]
 8014efa:	7812      	ldrb	r2, [r2, #0]
 8014efc:	188a      	adds	r2, r1, r2
 8014efe:	b2d2      	uxtb	r2, r2
 8014f00:	701a      	strb	r2, [r3, #0]
 8014f02:	e004      	b.n	8014f0e <CountNbOfEnabledChannels+0x176>
                    continue;
 8014f04:	46c0      	nop			; (mov r8, r8)
 8014f06:	e002      	b.n	8014f0e <CountNbOfEnabledChannels+0x176>
                        continue;
 8014f08:	46c0      	nop			; (mov r8, r8)
 8014f0a:	e000      	b.n	8014f0e <CountNbOfEnabledChannels+0x176>
                    continue;
 8014f0c:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8014f0e:	2113      	movs	r1, #19
 8014f10:	187b      	adds	r3, r7, r1
 8014f12:	781a      	ldrb	r2, [r3, #0]
 8014f14:	187b      	adds	r3, r7, r1
 8014f16:	3201      	adds	r2, #1
 8014f18:	701a      	strb	r2, [r3, #0]
 8014f1a:	2313      	movs	r3, #19
 8014f1c:	18fb      	adds	r3, r7, r3
 8014f1e:	781b      	ldrb	r3, [r3, #0]
 8014f20:	2b0f      	cmp	r3, #15
 8014f22:	d800      	bhi.n	8014f26 <CountNbOfEnabledChannels+0x18e>
 8014f24:	e75b      	b.n	8014dde <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU433_MAX_NB_CHANNELS; i += 16, k++ )
 8014f26:	2215      	movs	r2, #21
 8014f28:	18bb      	adds	r3, r7, r2
 8014f2a:	18ba      	adds	r2, r7, r2
 8014f2c:	7812      	ldrb	r2, [r2, #0]
 8014f2e:	3210      	adds	r2, #16
 8014f30:	701a      	strb	r2, [r3, #0]
 8014f32:	2114      	movs	r1, #20
 8014f34:	187b      	adds	r3, r7, r1
 8014f36:	781a      	ldrb	r2, [r3, #0]
 8014f38:	187b      	adds	r3, r7, r1
 8014f3a:	3201      	adds	r2, #1
 8014f3c:	701a      	strb	r2, [r3, #0]
 8014f3e:	2315      	movs	r3, #21
 8014f40:	18fb      	adds	r3, r7, r3
 8014f42:	781b      	ldrb	r3, [r3, #0]
 8014f44:	2b0f      	cmp	r3, #15
 8014f46:	d800      	bhi.n	8014f4a <CountNbOfEnabledChannels+0x1b2>
 8014f48:	e744      	b.n	8014dd4 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8014f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f4c:	2216      	movs	r2, #22
 8014f4e:	18ba      	adds	r2, r7, r2
 8014f50:	7812      	ldrb	r2, [r2, #0]
 8014f52:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8014f54:	2317      	movs	r3, #23
 8014f56:	18fb      	adds	r3, r7, r3
 8014f58:	781b      	ldrb	r3, [r3, #0]
}
 8014f5a:	0018      	movs	r0, r3
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	b006      	add	sp, #24
 8014f60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014f64 <RegionEU433GetPhyParam>:

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014f6c:	2308      	movs	r3, #8
 8014f6e:	18fb      	adds	r3, r7, r3
 8014f70:	2200      	movs	r2, #0
 8014f72:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	2b34      	cmp	r3, #52	; 0x34
 8014f7a:	d900      	bls.n	8014f7e <RegionEU433GetPhyParam+0x1a>
 8014f7c:	e0cd      	b.n	801511a <RegionEU433GetPhyParam+0x1b6>
 8014f7e:	009a      	lsls	r2, r3, #2
 8014f80:	4b6d      	ldr	r3, [pc, #436]	; (8015138 <RegionEU433GetPhyParam+0x1d4>)
 8014f82:	18d3      	adds	r3, r2, r3
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU433_RX_MIN_DATARATE;
 8014f88:	2308      	movs	r3, #8
 8014f8a:	18fb      	adds	r3, r7, r3
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	601a      	str	r2, [r3, #0]
            break;
 8014f90:	e0c4      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU433_TX_MIN_DATARATE;
 8014f92:	2308      	movs	r3, #8
 8014f94:	18fb      	adds	r3, r7, r3
 8014f96:	2200      	movs	r2, #0
 8014f98:	601a      	str	r2, [r3, #0]
            break;
 8014f9a:	e0bf      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU433_DEFAULT_DATARATE;
 8014f9c:	2308      	movs	r3, #8
 8014f9e:	18fb      	adds	r3, r7, r3
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	601a      	str	r2, [r3, #0]
            break;
 8014fa4:	e0ba      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU433_TX_MIN_DATARATE );
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	785b      	ldrb	r3, [r3, #1]
 8014faa:	b25b      	sxtb	r3, r3
 8014fac:	2100      	movs	r1, #0
 8014fae:	0018      	movs	r0, r3
 8014fb0:	f7ff fe5b 	bl	8014c6a <GetNextLowerTxDr>
 8014fb4:	0003      	movs	r3, r0
 8014fb6:	001a      	movs	r2, r3
 8014fb8:	2308      	movs	r3, #8
 8014fba:	18fb      	adds	r3, r7, r3
 8014fbc:	601a      	str	r2, [r3, #0]
            break;
 8014fbe:	e0ad      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU433_MAX_TX_POWER;
 8014fc0:	2308      	movs	r3, #8
 8014fc2:	18fb      	adds	r3, r7, r3
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	601a      	str	r2, [r3, #0]
            break;
 8014fc8:	e0a8      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU433_DEFAULT_TX_POWER;
 8014fca:	2308      	movs	r3, #8
 8014fcc:	18fb      	adds	r3, r7, r3
 8014fce:	2200      	movs	r2, #0
 8014fd0:	601a      	str	r2, [r3, #0]
            break;
 8014fd2:	e0a3      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU433_ADR_ACK_LIMIT;
 8014fd4:	2308      	movs	r3, #8
 8014fd6:	18fb      	adds	r3, r7, r3
 8014fd8:	2240      	movs	r2, #64	; 0x40
 8014fda:	601a      	str	r2, [r3, #0]
            break;
 8014fdc:	e09e      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU433_ADR_ACK_DELAY;
 8014fde:	2308      	movs	r3, #8
 8014fe0:	18fb      	adds	r3, r7, r3
 8014fe2:	2220      	movs	r2, #32
 8014fe4:	601a      	str	r2, [r3, #0]
            break;
 8014fe6:	e099      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	785b      	ldrb	r3, [r3, #1]
 8014fec:	b25b      	sxtb	r3, r3
 8014fee:	001a      	movs	r2, r3
 8014ff0:	4b52      	ldr	r3, [pc, #328]	; (801513c <RegionEU433GetPhyParam+0x1d8>)
 8014ff2:	5c9b      	ldrb	r3, [r3, r2]
 8014ff4:	001a      	movs	r2, r3
 8014ff6:	2308      	movs	r3, #8
 8014ff8:	18fb      	adds	r3, r7, r3
 8014ffa:	601a      	str	r2, [r3, #0]
            break;
 8014ffc:	e08e      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	785b      	ldrb	r3, [r3, #1]
 8015002:	b25b      	sxtb	r3, r3
 8015004:	001a      	movs	r2, r3
 8015006:	4b4e      	ldr	r3, [pc, #312]	; (8015140 <RegionEU433GetPhyParam+0x1dc>)
 8015008:	5c9b      	ldrb	r3, [r3, r2]
 801500a:	001a      	movs	r2, r3
 801500c:	2308      	movs	r3, #8
 801500e:	18fb      	adds	r3, r7, r3
 8015010:	601a      	str	r2, [r3, #0]
            break;
 8015012:	e083      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 8015014:	2308      	movs	r3, #8
 8015016:	18fb      	adds	r3, r7, r3
 8015018:	2201      	movs	r2, #1
 801501a:	601a      	str	r2, [r3, #0]
            break;
 801501c:	e07e      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU433_MAX_RX_WINDOW;
 801501e:	2308      	movs	r3, #8
 8015020:	18fb      	adds	r3, r7, r3
 8015022:	4a48      	ldr	r2, [pc, #288]	; (8015144 <RegionEU433GetPhyParam+0x1e0>)
 8015024:	601a      	str	r2, [r3, #0]
            break;
 8015026:	e079      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU433_RECEIVE_DELAY1;
 8015028:	2308      	movs	r3, #8
 801502a:	18fb      	adds	r3, r7, r3
 801502c:	22fa      	movs	r2, #250	; 0xfa
 801502e:	0092      	lsls	r2, r2, #2
 8015030:	601a      	str	r2, [r3, #0]
            break;
 8015032:	e073      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU433_RECEIVE_DELAY2;
 8015034:	2308      	movs	r3, #8
 8015036:	18fb      	adds	r3, r7, r3
 8015038:	22fa      	movs	r2, #250	; 0xfa
 801503a:	00d2      	lsls	r2, r2, #3
 801503c:	601a      	str	r2, [r3, #0]
            break;
 801503e:	e06d      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU433_JOIN_ACCEPT_DELAY1;
 8015040:	2308      	movs	r3, #8
 8015042:	18fb      	adds	r3, r7, r3
 8015044:	4a40      	ldr	r2, [pc, #256]	; (8015148 <RegionEU433GetPhyParam+0x1e4>)
 8015046:	601a      	str	r2, [r3, #0]
            break;
 8015048:	e068      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU433_JOIN_ACCEPT_DELAY2;
 801504a:	2308      	movs	r3, #8
 801504c:	18fb      	adds	r3, r7, r3
 801504e:	4a3f      	ldr	r2, [pc, #252]	; (801514c <RegionEU433GetPhyParam+0x1e8>)
 8015050:	601a      	str	r2, [r3, #0]
            break;
 8015052:	e063      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU433_MAX_FCNT_GAP;
 8015054:	2308      	movs	r3, #8
 8015056:	18fb      	adds	r3, r7, r3
 8015058:	2280      	movs	r2, #128	; 0x80
 801505a:	01d2      	lsls	r2, r2, #7
 801505c:	601a      	str	r2, [r3, #0]
            break;
 801505e:	e05d      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU433_ACKTIMEOUT + randr( -EU433_ACK_TIMEOUT_RND, EU433_ACK_TIMEOUT_RND ) );
 8015060:	23fa      	movs	r3, #250	; 0xfa
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	4a3a      	ldr	r2, [pc, #232]	; (8015150 <RegionEU433GetPhyParam+0x1ec>)
 8015066:	0019      	movs	r1, r3
 8015068:	0010      	movs	r0, r2
 801506a:	f007 fe21 	bl	801ccb0 <randr>
 801506e:	0003      	movs	r3, r0
 8015070:	22fa      	movs	r2, #250	; 0xfa
 8015072:	00d2      	lsls	r2, r2, #3
 8015074:	4694      	mov	ip, r2
 8015076:	4463      	add	r3, ip
 8015078:	001a      	movs	r2, r3
 801507a:	2308      	movs	r3, #8
 801507c:	18fb      	adds	r3, r7, r3
 801507e:	601a      	str	r2, [r3, #0]
            break;
 8015080:	e04c      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU433_DEFAULT_RX1_DR_OFFSET;
 8015082:	2308      	movs	r3, #8
 8015084:	18fb      	adds	r3, r7, r3
 8015086:	2200      	movs	r2, #0
 8015088:	601a      	str	r2, [r3, #0]
            break;
 801508a:	e047      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU433_RX_WND_2_FREQ;
 801508c:	2308      	movs	r3, #8
 801508e:	18fb      	adds	r3, r7, r3
 8015090:	4a30      	ldr	r2, [pc, #192]	; (8015154 <RegionEU433GetPhyParam+0x1f0>)
 8015092:	601a      	str	r2, [r3, #0]
            break;
 8015094:	e042      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU433_RX_WND_2_DR;
 8015096:	2308      	movs	r3, #8
 8015098:	18fb      	adds	r3, r7, r3
 801509a:	2200      	movs	r2, #0
 801509c:	601a      	str	r2, [r3, #0]
            break;
 801509e:	e03d      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80150a0:	2308      	movs	r3, #8
 80150a2:	18fb      	adds	r3, r7, r3
 80150a4:	4a2c      	ldr	r2, [pc, #176]	; (8015158 <RegionEU433GetPhyParam+0x1f4>)
 80150a6:	601a      	str	r2, [r3, #0]
            break;
 80150a8:	e038      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80150aa:	2308      	movs	r3, #8
 80150ac:	18fb      	adds	r3, r7, r3
 80150ae:	4a2b      	ldr	r2, [pc, #172]	; (801515c <RegionEU433GetPhyParam+0x1f8>)
 80150b0:	601a      	str	r2, [r3, #0]
            break;
 80150b2:	e033      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 80150b4:	2308      	movs	r3, #8
 80150b6:	18fb      	adds	r3, r7, r3
 80150b8:	2210      	movs	r2, #16
 80150ba:	601a      	str	r2, [r3, #0]
            break;
 80150bc:	e02e      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80150be:	2308      	movs	r3, #8
 80150c0:	18fb      	adds	r3, r7, r3
 80150c2:	4a27      	ldr	r2, [pc, #156]	; (8015160 <RegionEU433GetPhyParam+0x1fc>)
 80150c4:	601a      	str	r2, [r3, #0]
            break;
 80150c6:	e029      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80150c8:	2308      	movs	r3, #8
 80150ca:	18fb      	adds	r3, r7, r3
 80150cc:	2200      	movs	r2, #0
 80150ce:	601a      	str	r2, [r3, #0]
            break;
 80150d0:	e024      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 80150d2:	2308      	movs	r3, #8
 80150d4:	18fb      	adds	r3, r7, r3
 80150d6:	4a23      	ldr	r2, [pc, #140]	; (8015164 <RegionEU433GetPhyParam+0x200>)
 80150d8:	601a      	str	r2, [r3, #0]
            break;
 80150da:	e01f      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 80150dc:	2308      	movs	r3, #8
 80150de:	18fb      	adds	r3, r7, r3
 80150e0:	4a21      	ldr	r2, [pc, #132]	; (8015168 <RegionEU433GetPhyParam+0x204>)
 80150e2:	601a      	str	r2, [r3, #0]
            break;
 80150e4:	e01a      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 80150e6:	2308      	movs	r3, #8
 80150e8:	18fb      	adds	r3, r7, r3
 80150ea:	4a1a      	ldr	r2, [pc, #104]	; (8015154 <RegionEU433GetPhyParam+0x1f0>)
 80150ec:	601a      	str	r2, [r3, #0]
            break;
 80150ee:	e015      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 80150f0:	2108      	movs	r1, #8
 80150f2:	187b      	adds	r3, r7, r1
 80150f4:	2211      	movs	r2, #17
 80150f6:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 80150f8:	187b      	adds	r3, r7, r1
 80150fa:	2202      	movs	r2, #2
 80150fc:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU433_RFU2_SIZE;
 80150fe:	187b      	adds	r3, r7, r1
 8015100:	2200      	movs	r2, #0
 8015102:	709a      	strb	r2, [r3, #2]
            break;
 8015104:	e00a      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 8015106:	2308      	movs	r3, #8
 8015108:	18fb      	adds	r3, r7, r3
 801510a:	2203      	movs	r2, #3
 801510c:	601a      	str	r2, [r3, #0]
            break;
 801510e:	e005      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 8015110:	2308      	movs	r3, #8
 8015112:	18fb      	adds	r3, r7, r3
 8015114:	2203      	movs	r2, #3
 8015116:	601a      	str	r2, [r3, #0]
            break;
 8015118:	e000      	b.n	801511c <RegionEU433GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 801511a:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 801511c:	210c      	movs	r1, #12
 801511e:	187b      	adds	r3, r7, r1
 8015120:	2208      	movs	r2, #8
 8015122:	18ba      	adds	r2, r7, r2
 8015124:	6812      	ldr	r2, [r2, #0]
 8015126:	601a      	str	r2, [r3, #0]
 8015128:	187b      	adds	r3, r7, r1
 801512a:	2200      	movs	r2, #0
 801512c:	681a      	ldr	r2, [r3, #0]
 801512e:	0013      	movs	r3, r2
}
 8015130:	0018      	movs	r0, r3
 8015132:	46bd      	mov	sp, r7
 8015134:	b004      	add	sp, #16
 8015136:	bd80      	pop	{r7, pc}
 8015138:	08028314 	.word	0x08028314
 801513c:	08028304 	.word	0x08028304
 8015140:	0802830c 	.word	0x0802830c
 8015144:	00000bb8 	.word	0x00000bb8
 8015148:	00001388 	.word	0x00001388
 801514c:	00001770 	.word	0x00001770
 8015150:	fffffc18 	.word	0xfffffc18
 8015154:	19e87628 	.word	0x19e87628
 8015158:	20001508 	.word	0x20001508
 801515c:	2000150a 	.word	0x2000150a
 8015160:	20001438 	.word	0x20001438
 8015164:	41426666 	.word	0x41426666
 8015168:	4009999a 	.word	0x4009999a

0801516c <RegionEU433SetBandTxDone>:

void RegionEU433SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	7858      	ldrb	r0, [r3, #1]
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	0019      	movs	r1, r3
 801517e:	4a0a      	ldr	r2, [pc, #40]	; (80151a8 <RegionEU433SetBandTxDone+0x3c>)
 8015180:	000b      	movs	r3, r1
 8015182:	005b      	lsls	r3, r3, #1
 8015184:	185b      	adds	r3, r3, r1
 8015186:	009b      	lsls	r3, r3, #2
 8015188:	18d3      	adds	r3, r2, r3
 801518a:	3309      	adds	r3, #9
 801518c:	781b      	ldrb	r3, [r3, #0]
 801518e:	330c      	adds	r3, #12
 8015190:	011a      	lsls	r2, r3, #4
 8015192:	4b05      	ldr	r3, [pc, #20]	; (80151a8 <RegionEU433SetBandTxDone+0x3c>)
 8015194:	18d1      	adds	r1, r2, r3
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	685b      	ldr	r3, [r3, #4]
 801519a:	001a      	movs	r2, r3
 801519c:	f7ff f9c8 	bl	8014530 <RegionCommonSetBandTxDone>
}
 80151a0:	46c0      	nop			; (mov r8, r8)
 80151a2:	46bd      	mov	sp, r7
 80151a4:	b002      	add	sp, #8
 80151a6:	bd80      	pop	{r7, pc}
 80151a8:	20001438 	.word	0x20001438

080151ac <RegionEU433InitDefaults>:

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 80151ac:	b590      	push	{r4, r7, lr}
 80151ae:	b087      	sub	sp, #28
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
    Band_t bands[EU433_MAX_NB_BANDS] =
 80151b4:	2108      	movs	r1, #8
 80151b6:	187b      	adds	r3, r7, r1
 80151b8:	2264      	movs	r2, #100	; 0x64
 80151ba:	801a      	strh	r2, [r3, #0]
 80151bc:	187b      	adds	r3, r7, r1
 80151be:	2200      	movs	r2, #0
 80151c0:	709a      	strb	r2, [r3, #2]
 80151c2:	187b      	adds	r3, r7, r1
 80151c4:	2200      	movs	r2, #0
 80151c6:	605a      	str	r2, [r3, #4]
 80151c8:	187b      	adds	r3, r7, r1
 80151ca:	2200      	movs	r2, #0
 80151cc:	609a      	str	r2, [r3, #8]
 80151ce:	187b      	adds	r3, r7, r1
 80151d0:	2200      	movs	r2, #0
 80151d2:	60da      	str	r2, [r3, #12]
    {
        EU433_BAND0
    };

    switch( params->Type )
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	791b      	ldrb	r3, [r3, #4]
 80151d8:	2b01      	cmp	r3, #1
 80151da:	d030      	beq.n	801523e <RegionEU433InitDefaults+0x92>
 80151dc:	2b02      	cmp	r3, #2
 80151de:	d022      	beq.n	8015226 <RegionEU433InitDefaults+0x7a>
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d000      	beq.n	80151e6 <RegionEU433InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80151e4:	e038      	b.n	8015258 <RegionEU433InitDefaults+0xac>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 80151e6:	2308      	movs	r3, #8
 80151e8:	18f9      	adds	r1, r7, r3
 80151ea:	4b1d      	ldr	r3, [pc, #116]	; (8015260 <RegionEU433InitDefaults+0xb4>)
 80151ec:	2210      	movs	r2, #16
 80151ee:	0018      	movs	r0, r3
 80151f0:	f007 fd74 	bl	801ccdc <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU433_LC1;
 80151f4:	4b1b      	ldr	r3, [pc, #108]	; (8015264 <RegionEU433InitDefaults+0xb8>)
 80151f6:	4a1c      	ldr	r2, [pc, #112]	; (8015268 <RegionEU433InitDefaults+0xbc>)
 80151f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80151fa:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU433_LC2;
 80151fc:	4b19      	ldr	r3, [pc, #100]	; (8015264 <RegionEU433InitDefaults+0xb8>)
 80151fe:	4a1b      	ldr	r2, [pc, #108]	; (801526c <RegionEU433InitDefaults+0xc0>)
 8015200:	330c      	adds	r3, #12
 8015202:	ca13      	ldmia	r2!, {r0, r1, r4}
 8015204:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU433_LC3;
 8015206:	4b17      	ldr	r3, [pc, #92]	; (8015264 <RegionEU433InitDefaults+0xb8>)
 8015208:	4a19      	ldr	r2, [pc, #100]	; (8015270 <RegionEU433InitDefaults+0xc4>)
 801520a:	3318      	adds	r3, #24
 801520c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801520e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015210:	4b14      	ldr	r3, [pc, #80]	; (8015264 <RegionEU433InitDefaults+0xb8>)
 8015212:	22d2      	movs	r2, #210	; 0xd2
 8015214:	2107      	movs	r1, #7
 8015216:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8015218:	4916      	ldr	r1, [pc, #88]	; (8015274 <RegionEU433InitDefaults+0xc8>)
 801521a:	4b17      	ldr	r3, [pc, #92]	; (8015278 <RegionEU433InitDefaults+0xcc>)
 801521c:	2201      	movs	r2, #1
 801521e:	0018      	movs	r0, r3
 8015220:	f7ff f957 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 8015224:	e018      	b.n	8015258 <RegionEU433InitDefaults+0xac>
            if( params->NvmCtx != 0 )
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d013      	beq.n	8015256 <RegionEU433InitDefaults+0xaa>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6819      	ldr	r1, [r3, #0]
 8015232:	4b0c      	ldr	r3, [pc, #48]	; (8015264 <RegionEU433InitDefaults+0xb8>)
 8015234:	22d4      	movs	r2, #212	; 0xd4
 8015236:	0018      	movs	r0, r3
 8015238:	f007 fd50 	bl	801ccdc <memcpy1>
            break;
 801523c:	e00b      	b.n	8015256 <RegionEU433InitDefaults+0xaa>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 801523e:	4b09      	ldr	r3, [pc, #36]	; (8015264 <RegionEU433InitDefaults+0xb8>)
 8015240:	22d0      	movs	r2, #208	; 0xd0
 8015242:	5a9a      	ldrh	r2, [r3, r2]
 8015244:	4b07      	ldr	r3, [pc, #28]	; (8015264 <RegionEU433InitDefaults+0xb8>)
 8015246:	21d2      	movs	r1, #210	; 0xd2
 8015248:	5a5b      	ldrh	r3, [r3, r1]
 801524a:	4313      	orrs	r3, r2
 801524c:	b299      	uxth	r1, r3
 801524e:	4b05      	ldr	r3, [pc, #20]	; (8015264 <RegionEU433InitDefaults+0xb8>)
 8015250:	22d0      	movs	r2, #208	; 0xd0
 8015252:	5299      	strh	r1, [r3, r2]
            break;
 8015254:	e000      	b.n	8015258 <RegionEU433InitDefaults+0xac>
            break;
 8015256:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8015258:	46c0      	nop			; (mov r8, r8)
 801525a:	46bd      	mov	sp, r7
 801525c:	b007      	add	sp, #28
 801525e:	bd90      	pop	{r4, r7, pc}
 8015260:	200014f8 	.word	0x200014f8
 8015264:	20001438 	.word	0x20001438
 8015268:	08026b48 	.word	0x08026b48
 801526c:	08026b54 	.word	0x08026b54
 8015270:	08026b60 	.word	0x08026b60
 8015274:	2000150a 	.word	0x2000150a
 8015278:	20001508 	.word	0x20001508

0801527c <RegionEU433ApplyCFList>:
            return false;
    }
}

void RegionEU433ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801527c:	b590      	push	{r4, r7, lr}
 801527e:	b08b      	sub	sp, #44	; 0x2c
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015284:	2318      	movs	r3, #24
 8015286:	18fb      	adds	r3, r7, r3
 8015288:	2250      	movs	r2, #80	; 0x50
 801528a:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	791b      	ldrb	r3, [r3, #4]
 8015290:	2b10      	cmp	r3, #16
 8015292:	d000      	beq.n	8015296 <RegionEU433ApplyCFList+0x1a>
 8015294:	e07d      	b.n	8015392 <RegionEU433ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	330f      	adds	r3, #15
 801529c:	781b      	ldrb	r3, [r3, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d000      	beq.n	80152a4 <RegionEU433ApplyCFList+0x28>
 80152a2:	e078      	b.n	8015396 <RegionEU433ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80152a4:	2327      	movs	r3, #39	; 0x27
 80152a6:	18fb      	adds	r3, r7, r3
 80152a8:	2200      	movs	r2, #0
 80152aa:	701a      	strb	r2, [r3, #0]
 80152ac:	2326      	movs	r3, #38	; 0x26
 80152ae:	18fb      	adds	r3, r7, r3
 80152b0:	2203      	movs	r2, #3
 80152b2:	701a      	strb	r2, [r3, #0]
 80152b4:	e067      	b.n	8015386 <RegionEU433ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU433_NUMB_CHANNELS_CF_LIST + EU433_NUMB_DEFAULT_CHANNELS ) )
 80152b6:	2326      	movs	r3, #38	; 0x26
 80152b8:	18fb      	adds	r3, r7, r3
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	2b07      	cmp	r3, #7
 80152be:	d82e      	bhi.n	801531e <RegionEU433ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	681a      	ldr	r2, [r3, #0]
 80152c4:	2427      	movs	r4, #39	; 0x27
 80152c6:	193b      	adds	r3, r7, r4
 80152c8:	781b      	ldrb	r3, [r3, #0]
 80152ca:	18d3      	adds	r3, r2, r3
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	001a      	movs	r2, r3
 80152d0:	2018      	movs	r0, #24
 80152d2:	183b      	adds	r3, r7, r0
 80152d4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80152d6:	183b      	adds	r3, r7, r0
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6819      	ldr	r1, [r3, #0]
 80152de:	193b      	adds	r3, r7, r4
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	3301      	adds	r3, #1
 80152e4:	18cb      	adds	r3, r1, r3
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	021b      	lsls	r3, r3, #8
 80152ea:	431a      	orrs	r2, r3
 80152ec:	183b      	adds	r3, r7, r0
 80152ee:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80152f0:	183b      	adds	r3, r7, r0
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	6819      	ldr	r1, [r3, #0]
 80152f8:	193b      	adds	r3, r7, r4
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	3302      	adds	r3, #2
 80152fe:	18cb      	adds	r3, r1, r3
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	041b      	lsls	r3, r3, #16
 8015304:	431a      	orrs	r2, r3
 8015306:	183b      	adds	r3, r7, r0
 8015308:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 801530a:	183b      	adds	r3, r7, r0
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2264      	movs	r2, #100	; 0x64
 8015310:	435a      	muls	r2, r3
 8015312:	183b      	adds	r3, r7, r0
 8015314:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015316:	183b      	adds	r3, r7, r0
 8015318:	2200      	movs	r2, #0
 801531a:	605a      	str	r2, [r3, #4]
 801531c:	e009      	b.n	8015332 <RegionEU433ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 801531e:	2118      	movs	r1, #24
 8015320:	187b      	adds	r3, r7, r1
 8015322:	2200      	movs	r2, #0
 8015324:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8015326:	187b      	adds	r3, r7, r1
 8015328:	2200      	movs	r2, #0
 801532a:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 801532c:	187b      	adds	r3, r7, r1
 801532e:	2200      	movs	r2, #0
 8015330:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8015332:	2318      	movs	r3, #24
 8015334:	18fb      	adds	r3, r7, r3
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d00e      	beq.n	801535a <RegionEU433ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 801533c:	2110      	movs	r1, #16
 801533e:	187b      	adds	r3, r7, r1
 8015340:	2218      	movs	r2, #24
 8015342:	18ba      	adds	r2, r7, r2
 8015344:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8015346:	187b      	adds	r3, r7, r1
 8015348:	2226      	movs	r2, #38	; 0x26
 801534a:	18ba      	adds	r2, r7, r2
 801534c:	7812      	ldrb	r2, [r2, #0]
 801534e:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU433ChannelAdd( &channelAdd );
 8015350:	187b      	adds	r3, r7, r1
 8015352:	0018      	movs	r0, r3
 8015354:	f000 fd7c 	bl	8015e50 <RegionEU433ChannelAdd>
 8015358:	e009      	b.n	801536e <RegionEU433ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801535a:	210c      	movs	r1, #12
 801535c:	187b      	adds	r3, r7, r1
 801535e:	2226      	movs	r2, #38	; 0x26
 8015360:	18ba      	adds	r2, r7, r2
 8015362:	7812      	ldrb	r2, [r2, #0]
 8015364:	701a      	strb	r2, [r3, #0]

            RegionEU433ChannelsRemove( &channelRemove );
 8015366:	187b      	adds	r3, r7, r1
 8015368:	0018      	movs	r0, r3
 801536a:	f000 fe2b 	bl	8015fc4 <RegionEU433ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801536e:	2227      	movs	r2, #39	; 0x27
 8015370:	18bb      	adds	r3, r7, r2
 8015372:	18ba      	adds	r2, r7, r2
 8015374:	7812      	ldrb	r2, [r2, #0]
 8015376:	3203      	adds	r2, #3
 8015378:	701a      	strb	r2, [r3, #0]
 801537a:	2126      	movs	r1, #38	; 0x26
 801537c:	187b      	adds	r3, r7, r1
 801537e:	781a      	ldrb	r2, [r3, #0]
 8015380:	187b      	adds	r3, r7, r1
 8015382:	3201      	adds	r2, #1
 8015384:	701a      	strb	r2, [r3, #0]
 8015386:	2326      	movs	r3, #38	; 0x26
 8015388:	18fb      	adds	r3, r7, r3
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	2b0f      	cmp	r3, #15
 801538e:	d992      	bls.n	80152b6 <RegionEU433ApplyCFList+0x3a>
 8015390:	e002      	b.n	8015398 <RegionEU433ApplyCFList+0x11c>
        return;
 8015392:	46c0      	nop			; (mov r8, r8)
 8015394:	e000      	b.n	8015398 <RegionEU433ApplyCFList+0x11c>
        return;
 8015396:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8015398:	46bd      	mov	sp, r7
 801539a:	b00b      	add	sp, #44	; 0x2c
 801539c:	bd90      	pop	{r4, r7, pc}
	...

080153a0 <RegionEU433ComputeRxWindowParameters>:
    }
    return true;
}

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80153a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153a2:	b08b      	sub	sp, #44	; 0x2c
 80153a4:	af04      	add	r7, sp, #16
 80153a6:	60ba      	str	r2, [r7, #8]
 80153a8:	607b      	str	r3, [r7, #4]
 80153aa:	250f      	movs	r5, #15
 80153ac:	197b      	adds	r3, r7, r5
 80153ae:	1c02      	adds	r2, r0, #0
 80153b0:	701a      	strb	r2, [r3, #0]
 80153b2:	230e      	movs	r3, #14
 80153b4:	18fb      	adds	r3, r7, r3
 80153b6:	1c0a      	adds	r2, r1, #0
 80153b8:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 80153ba:	2300      	movs	r3, #0
 80153bc:	2400      	movs	r4, #0
 80153be:	613b      	str	r3, [r7, #16]
 80153c0:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 80153c2:	197b      	adds	r3, r7, r5
 80153c4:	781b      	ldrb	r3, [r3, #0]
 80153c6:	b25a      	sxtb	r2, r3
 80153c8:	2a07      	cmp	r2, #7
 80153ca:	dd00      	ble.n	80153ce <RegionEU433ComputeRxWindowParameters+0x2e>
 80153cc:	2307      	movs	r3, #7
 80153ce:	b25a      	sxtb	r2, r3
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	785b      	ldrb	r3, [r3, #1]
 80153d8:	b25b      	sxtb	r3, r3
 80153da:	0018      	movs	r0, r3
 80153dc:	f7ff fc6e 	bl	8014cbc <GetBandwidth>
 80153e0:	0003      	movs	r3, r0
 80153e2:	b2da      	uxtb	r2, r3
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	785b      	ldrb	r3, [r3, #1]
 80153ec:	b25b      	sxtb	r3, r3
 80153ee:	2b07      	cmp	r3, #7
 80153f0:	d10d      	bne.n	801540e <RegionEU433ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	785b      	ldrb	r3, [r3, #1]
 80153f6:	b25b      	sxtb	r3, r3
 80153f8:	001a      	movs	r2, r3
 80153fa:	4b1b      	ldr	r3, [pc, #108]	; (8015468 <RegionEU433ComputeRxWindowParameters+0xc8>)
 80153fc:	5c9b      	ldrb	r3, [r3, r2]
 80153fe:	0018      	movs	r0, r3
 8015400:	f7ff face 	bl	80149a0 <RegionCommonComputeSymbolTimeFsk>
 8015404:	0003      	movs	r3, r0
 8015406:	000c      	movs	r4, r1
 8015408:	613b      	str	r3, [r7, #16]
 801540a:	617c      	str	r4, [r7, #20]
 801540c:	e013      	b.n	8015436 <RegionEU433ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	785b      	ldrb	r3, [r3, #1]
 8015412:	b25b      	sxtb	r3, r3
 8015414:	001a      	movs	r2, r3
 8015416:	4b14      	ldr	r3, [pc, #80]	; (8015468 <RegionEU433ComputeRxWindowParameters+0xc8>)
 8015418:	5c98      	ldrb	r0, [r3, r2]
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	785b      	ldrb	r3, [r3, #1]
 801541e:	b25b      	sxtb	r3, r3
 8015420:	001a      	movs	r2, r3
 8015422:	4b12      	ldr	r3, [pc, #72]	; (801546c <RegionEU433ComputeRxWindowParameters+0xcc>)
 8015424:	0092      	lsls	r2, r2, #2
 8015426:	58d3      	ldr	r3, [r2, r3]
 8015428:	0019      	movs	r1, r3
 801542a:	f7ff fa8d 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 801542e:	0003      	movs	r3, r0
 8015430:	000c      	movs	r4, r1
 8015432:	613b      	str	r3, [r7, #16]
 8015434:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015436:	4b0e      	ldr	r3, [pc, #56]	; (8015470 <RegionEU433ComputeRxWindowParameters+0xd0>)
 8015438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801543a:	4798      	blx	r3
 801543c:	0006      	movs	r6, r0
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	3308      	adds	r3, #8
 8015442:	687a      	ldr	r2, [r7, #4]
 8015444:	320c      	adds	r2, #12
 8015446:	68bd      	ldr	r5, [r7, #8]
 8015448:	210e      	movs	r1, #14
 801544a:	1879      	adds	r1, r7, r1
 801544c:	780c      	ldrb	r4, [r1, #0]
 801544e:	6938      	ldr	r0, [r7, #16]
 8015450:	6979      	ldr	r1, [r7, #20]
 8015452:	9202      	str	r2, [sp, #8]
 8015454:	9301      	str	r3, [sp, #4]
 8015456:	9600      	str	r6, [sp, #0]
 8015458:	002b      	movs	r3, r5
 801545a:	0022      	movs	r2, r4
 801545c:	f7ff fabc 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 8015460:	46c0      	nop			; (mov r8, r8)
 8015462:	46bd      	mov	sp, r7
 8015464:	b007      	add	sp, #28
 8015466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015468:	080282dc 	.word	0x080282dc
 801546c:	080282e4 	.word	0x080282e4
 8015470:	08028964 	.word	0x08028964

08015474 <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015476:	b091      	sub	sp, #68	; 0x44
 8015478:	af0a      	add	r7, sp, #40	; 0x28
 801547a:	6078      	str	r0, [r7, #4]
 801547c:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801547e:	230f      	movs	r3, #15
 8015480:	18fb      	adds	r3, r7, r3
 8015482:	687a      	ldr	r2, [r7, #4]
 8015484:	7852      	ldrb	r2, [r2, #1]
 8015486:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8015488:	2316      	movs	r3, #22
 801548a:	18fb      	adds	r3, r7, r3
 801548c:	2200      	movs	r2, #0
 801548e:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8015490:	230e      	movs	r3, #14
 8015492:	18fb      	adds	r3, r7, r3
 8015494:	2200      	movs	r2, #0
 8015496:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	685b      	ldr	r3, [r3, #4]
 801549c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801549e:	4b64      	ldr	r3, [pc, #400]	; (8015630 <RegionEU433RxConfig+0x1bc>)
 80154a0:	68db      	ldr	r3, [r3, #12]
 80154a2:	4798      	blx	r3
 80154a4:	1e03      	subs	r3, r0, #0
 80154a6:	d001      	beq.n	80154ac <RegionEU433RxConfig+0x38>
    {
        return false;
 80154a8:	2300      	movs	r3, #0
 80154aa:	e0bc      	b.n	8015626 <RegionEU433RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	7cdb      	ldrb	r3, [r3, #19]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d122      	bne.n	80154fa <RegionEU433RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	0019      	movs	r1, r3
 80154ba:	4a5e      	ldr	r2, [pc, #376]	; (8015634 <RegionEU433RxConfig+0x1c0>)
 80154bc:	000b      	movs	r3, r1
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	185b      	adds	r3, r3, r1
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	589b      	ldr	r3, [r3, r2]
 80154c6:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	0019      	movs	r1, r3
 80154ce:	4a59      	ldr	r2, [pc, #356]	; (8015634 <RegionEU433RxConfig+0x1c0>)
 80154d0:	000b      	movs	r3, r1
 80154d2:	005b      	lsls	r3, r3, #1
 80154d4:	185b      	adds	r3, r3, r1
 80154d6:	009b      	lsls	r3, r3, #2
 80154d8:	18d3      	adds	r3, r2, r3
 80154da:	3304      	adds	r3, #4
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d00b      	beq.n	80154fa <RegionEU433RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	0019      	movs	r1, r3
 80154e8:	4a52      	ldr	r2, [pc, #328]	; (8015634 <RegionEU433RxConfig+0x1c0>)
 80154ea:	000b      	movs	r3, r1
 80154ec:	005b      	lsls	r3, r3, #1
 80154ee:	185b      	adds	r3, r3, r1
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	18d3      	adds	r3, r2, r3
 80154f4:	3304      	adds	r3, #4
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 80154fa:	240f      	movs	r4, #15
 80154fc:	193b      	adds	r3, r7, r4
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	b25b      	sxtb	r3, r3
 8015502:	4a4d      	ldr	r2, [pc, #308]	; (8015638 <RegionEU433RxConfig+0x1c4>)
 8015504:	5cd2      	ldrb	r2, [r2, r3]
 8015506:	230e      	movs	r3, #14
 8015508:	18fb      	adds	r3, r7, r3
 801550a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801550c:	4b48      	ldr	r3, [pc, #288]	; (8015630 <RegionEU433RxConfig+0x1bc>)
 801550e:	695b      	ldr	r3, [r3, #20]
 8015510:	693a      	ldr	r2, [r7, #16]
 8015512:	0010      	movs	r0, r2
 8015514:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015516:	193b      	adds	r3, r7, r4
 8015518:	781b      	ldrb	r3, [r3, #0]
 801551a:	b25b      	sxtb	r3, r3
 801551c:	2b07      	cmp	r3, #7
 801551e:	d12f      	bne.n	8015580 <RegionEU433RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8015520:	2117      	movs	r1, #23
 8015522:	187b      	adds	r3, r7, r1
 8015524:	2200      	movs	r2, #0
 8015526:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015528:	4b41      	ldr	r3, [pc, #260]	; (8015630 <RegionEU433RxConfig+0x1bc>)
 801552a:	6a1c      	ldr	r4, [r3, #32]
 801552c:	230e      	movs	r3, #14
 801552e:	18fb      	adds	r3, r7, r3
 8015530:	2200      	movs	r2, #0
 8015532:	569a      	ldrsb	r2, [r3, r2]
 8015534:	0013      	movs	r3, r2
 8015536:	015b      	lsls	r3, r3, #5
 8015538:	1a9b      	subs	r3, r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	189b      	adds	r3, r3, r2
 801553e:	00db      	lsls	r3, r3, #3
 8015540:	001e      	movs	r6, r3
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	689b      	ldr	r3, [r3, #8]
 8015546:	b29b      	uxth	r3, r3
 8015548:	687a      	ldr	r2, [r7, #4]
 801554a:	7c92      	ldrb	r2, [r2, #18]
 801554c:	4d3b      	ldr	r5, [pc, #236]	; (801563c <RegionEU433RxConfig+0x1c8>)
 801554e:	1879      	adds	r1, r7, r1
 8015550:	7808      	ldrb	r0, [r1, #0]
 8015552:	9209      	str	r2, [sp, #36]	; 0x24
 8015554:	2200      	movs	r2, #0
 8015556:	9208      	str	r2, [sp, #32]
 8015558:	2200      	movs	r2, #0
 801555a:	9207      	str	r2, [sp, #28]
 801555c:	2200      	movs	r2, #0
 801555e:	9206      	str	r2, [sp, #24]
 8015560:	2201      	movs	r2, #1
 8015562:	9205      	str	r2, [sp, #20]
 8015564:	2200      	movs	r2, #0
 8015566:	9204      	str	r2, [sp, #16]
 8015568:	2200      	movs	r2, #0
 801556a:	9203      	str	r2, [sp, #12]
 801556c:	9302      	str	r3, [sp, #8]
 801556e:	2305      	movs	r3, #5
 8015570:	9301      	str	r3, [sp, #4]
 8015572:	4b33      	ldr	r3, [pc, #204]	; (8015640 <RegionEU433RxConfig+0x1cc>)
 8015574:	9300      	str	r3, [sp, #0]
 8015576:	2300      	movs	r3, #0
 8015578:	0032      	movs	r2, r6
 801557a:	0029      	movs	r1, r5
 801557c:	47a0      	blx	r4
 801557e:	e029      	b.n	80155d4 <RegionEU433RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8015580:	2117      	movs	r1, #23
 8015582:	187b      	adds	r3, r7, r1
 8015584:	2201      	movs	r2, #1
 8015586:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015588:	4b29      	ldr	r3, [pc, #164]	; (8015630 <RegionEU433RxConfig+0x1bc>)
 801558a:	6a1c      	ldr	r4, [r3, #32]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	789b      	ldrb	r3, [r3, #2]
 8015590:	001e      	movs	r6, r3
 8015592:	230e      	movs	r3, #14
 8015594:	18fb      	adds	r3, r7, r3
 8015596:	2500      	movs	r5, #0
 8015598:	575d      	ldrsb	r5, [r3, r5]
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	689b      	ldr	r3, [r3, #8]
 801559e:	b29b      	uxth	r3, r3
 80155a0:	687a      	ldr	r2, [r7, #4]
 80155a2:	7c92      	ldrb	r2, [r2, #18]
 80155a4:	1879      	adds	r1, r7, r1
 80155a6:	7808      	ldrb	r0, [r1, #0]
 80155a8:	9209      	str	r2, [sp, #36]	; 0x24
 80155aa:	2201      	movs	r2, #1
 80155ac:	9208      	str	r2, [sp, #32]
 80155ae:	2200      	movs	r2, #0
 80155b0:	9207      	str	r2, [sp, #28]
 80155b2:	2200      	movs	r2, #0
 80155b4:	9206      	str	r2, [sp, #24]
 80155b6:	2200      	movs	r2, #0
 80155b8:	9205      	str	r2, [sp, #20]
 80155ba:	2200      	movs	r2, #0
 80155bc:	9204      	str	r2, [sp, #16]
 80155be:	2200      	movs	r2, #0
 80155c0:	9203      	str	r2, [sp, #12]
 80155c2:	9302      	str	r3, [sp, #8]
 80155c4:	2308      	movs	r3, #8
 80155c6:	9301      	str	r3, [sp, #4]
 80155c8:	2300      	movs	r3, #0
 80155ca:	9300      	str	r3, [sp, #0]
 80155cc:	2301      	movs	r3, #1
 80155ce:	002a      	movs	r2, r5
 80155d0:	0031      	movs	r1, r6
 80155d2:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	7c5b      	ldrb	r3, [r3, #17]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d009      	beq.n	80155f0 <RegionEU433RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 80155dc:	230f      	movs	r3, #15
 80155de:	18fb      	adds	r3, r7, r3
 80155e0:	2200      	movs	r2, #0
 80155e2:	569a      	ldrsb	r2, [r3, r2]
 80155e4:	2316      	movs	r3, #22
 80155e6:	18fb      	adds	r3, r7, r3
 80155e8:	4916      	ldr	r1, [pc, #88]	; (8015644 <RegionEU433RxConfig+0x1d0>)
 80155ea:	5c8a      	ldrb	r2, [r1, r2]
 80155ec:	701a      	strb	r2, [r3, #0]
 80155ee:	e008      	b.n	8015602 <RegionEU433RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 80155f0:	230f      	movs	r3, #15
 80155f2:	18fb      	adds	r3, r7, r3
 80155f4:	2200      	movs	r2, #0
 80155f6:	569a      	ldrsb	r2, [r3, r2]
 80155f8:	2316      	movs	r3, #22
 80155fa:	18fb      	adds	r3, r7, r3
 80155fc:	4912      	ldr	r1, [pc, #72]	; (8015648 <RegionEU433RxConfig+0x1d4>)
 80155fe:	5c8a      	ldrb	r2, [r1, r2]
 8015600:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8015602:	4b0b      	ldr	r3, [pc, #44]	; (8015630 <RegionEU433RxConfig+0x1bc>)
 8015604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015606:	2216      	movs	r2, #22
 8015608:	18ba      	adds	r2, r7, r2
 801560a:	7812      	ldrb	r2, [r2, #0]
 801560c:	320d      	adds	r2, #13
 801560e:	b2d1      	uxtb	r1, r2
 8015610:	2217      	movs	r2, #23
 8015612:	18ba      	adds	r2, r7, r2
 8015614:	7812      	ldrb	r2, [r2, #0]
 8015616:	0010      	movs	r0, r2
 8015618:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	220f      	movs	r2, #15
 801561e:	18ba      	adds	r2, r7, r2
 8015620:	7812      	ldrb	r2, [r2, #0]
 8015622:	701a      	strb	r2, [r3, #0]
    return true;
 8015624:	2301      	movs	r3, #1
}
 8015626:	0018      	movs	r0, r3
 8015628:	46bd      	mov	sp, r7
 801562a:	b007      	add	sp, #28
 801562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801562e:	46c0      	nop			; (mov r8, r8)
 8015630:	08028964 	.word	0x08028964
 8015634:	20001438 	.word	0x20001438
 8015638:	080282dc 	.word	0x080282dc
 801563c:	0000c350 	.word	0x0000c350
 8015640:	00014585 	.word	0x00014585
 8015644:	0802830c 	.word	0x0802830c
 8015648:	08028304 	.word	0x08028304

0801564c <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801564c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801564e:	b093      	sub	sp, #76	; 0x4c
 8015650:	af0a      	add	r7, sp, #40	; 0x28
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	785b      	ldrb	r3, [r3, #1]
 801565c:	b25b      	sxtb	r3, r3
 801565e:	001a      	movs	r2, r3
 8015660:	4b60      	ldr	r3, [pc, #384]	; (80157e4 <RegionEU433TxConfig+0x198>)
 8015662:	5c9a      	ldrb	r2, [r3, r2]
 8015664:	231e      	movs	r3, #30
 8015666:	18fb      	adds	r3, r7, r3
 8015668:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2002      	movs	r0, #2
 801566e:	5618      	ldrsb	r0, [r3, r0]
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	781b      	ldrb	r3, [r3, #0]
 8015674:	0019      	movs	r1, r3
 8015676:	4a5c      	ldr	r2, [pc, #368]	; (80157e8 <RegionEU433TxConfig+0x19c>)
 8015678:	000b      	movs	r3, r1
 801567a:	005b      	lsls	r3, r3, #1
 801567c:	185b      	adds	r3, r3, r1
 801567e:	009b      	lsls	r3, r3, #2
 8015680:	18d3      	adds	r3, r2, r3
 8015682:	3309      	adds	r3, #9
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	4a58      	ldr	r2, [pc, #352]	; (80157e8 <RegionEU433TxConfig+0x19c>)
 8015688:	330c      	adds	r3, #12
 801568a:	011b      	lsls	r3, r3, #4
 801568c:	18d3      	adds	r3, r2, r3
 801568e:	3302      	adds	r3, #2
 8015690:	2100      	movs	r1, #0
 8015692:	5659      	ldrsb	r1, [r3, r1]
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	2201      	movs	r2, #1
 8015698:	569a      	ldrsb	r2, [r3, r2]
 801569a:	251d      	movs	r5, #29
 801569c:	197c      	adds	r4, r7, r5
 801569e:	4b53      	ldr	r3, [pc, #332]	; (80157ec <RegionEU433TxConfig+0x1a0>)
 80156a0:	f7ff fb2a 	bl	8014cf8 <LimitTxPower>
 80156a4:	0003      	movs	r3, r0
 80156a6:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	785b      	ldrb	r3, [r3, #1]
 80156ac:	b25b      	sxtb	r3, r3
 80156ae:	0018      	movs	r0, r3
 80156b0:	f7ff fb04 	bl	8014cbc <GetBandwidth>
 80156b4:	0003      	movs	r3, r0
 80156b6:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80156b8:	2017      	movs	r0, #23
 80156ba:	183b      	adds	r3, r7, r0
 80156bc:	2200      	movs	r2, #0
 80156be:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	6859      	ldr	r1, [r3, #4]
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	689a      	ldr	r2, [r3, #8]
 80156c8:	183c      	adds	r4, r7, r0
 80156ca:	197b      	adds	r3, r7, r5
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	b25b      	sxtb	r3, r3
 80156d0:	0018      	movs	r0, r3
 80156d2:	f7ff fa05 	bl	8014ae0 <RegionCommonComputeTxPower>
 80156d6:	0003      	movs	r3, r0
 80156d8:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80156da:	4b45      	ldr	r3, [pc, #276]	; (80157f0 <RegionEU433TxConfig+0x1a4>)
 80156dc:	695a      	ldr	r2, [r3, #20]
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	0018      	movs	r0, r3
 80156e4:	4940      	ldr	r1, [pc, #256]	; (80157e8 <RegionEU433TxConfig+0x19c>)
 80156e6:	0003      	movs	r3, r0
 80156e8:	005b      	lsls	r3, r3, #1
 80156ea:	181b      	adds	r3, r3, r0
 80156ec:	009b      	lsls	r3, r3, #2
 80156ee:	585b      	ldr	r3, [r3, r1]
 80156f0:	0018      	movs	r0, r3
 80156f2:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	785b      	ldrb	r3, [r3, #1]
 80156f8:	b25b      	sxtb	r3, r3
 80156fa:	2b07      	cmp	r3, #7
 80156fc:	d12d      	bne.n	801575a <RegionEU433TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80156fe:	201f      	movs	r0, #31
 8015700:	183b      	adds	r3, r7, r0
 8015702:	2200      	movs	r2, #0
 8015704:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8015706:	4b3a      	ldr	r3, [pc, #232]	; (80157f0 <RegionEU433TxConfig+0x1a4>)
 8015708:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801570a:	231e      	movs	r3, #30
 801570c:	18fb      	adds	r3, r7, r3
 801570e:	2200      	movs	r2, #0
 8015710:	569a      	ldrsb	r2, [r3, r2]
 8015712:	0013      	movs	r3, r2
 8015714:	015b      	lsls	r3, r3, #5
 8015716:	1a9b      	subs	r3, r3, r2
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	189b      	adds	r3, r3, r2
 801571c:	00db      	lsls	r3, r3, #3
 801571e:	001d      	movs	r5, r3
 8015720:	69ba      	ldr	r2, [r7, #24]
 8015722:	4e34      	ldr	r6, [pc, #208]	; (80157f4 <RegionEU433TxConfig+0x1a8>)
 8015724:	2317      	movs	r3, #23
 8015726:	18fb      	adds	r3, r7, r3
 8015728:	2100      	movs	r1, #0
 801572a:	5659      	ldrsb	r1, [r3, r1]
 801572c:	183b      	adds	r3, r7, r0
 801572e:	7818      	ldrb	r0, [r3, #0]
 8015730:	4b31      	ldr	r3, [pc, #196]	; (80157f8 <RegionEU433TxConfig+0x1ac>)
 8015732:	9308      	str	r3, [sp, #32]
 8015734:	2300      	movs	r3, #0
 8015736:	9307      	str	r3, [sp, #28]
 8015738:	2300      	movs	r3, #0
 801573a:	9306      	str	r3, [sp, #24]
 801573c:	2300      	movs	r3, #0
 801573e:	9305      	str	r3, [sp, #20]
 8015740:	2301      	movs	r3, #1
 8015742:	9304      	str	r3, [sp, #16]
 8015744:	2300      	movs	r3, #0
 8015746:	9303      	str	r3, [sp, #12]
 8015748:	2305      	movs	r3, #5
 801574a:	9302      	str	r3, [sp, #8]
 801574c:	2300      	movs	r3, #0
 801574e:	9301      	str	r3, [sp, #4]
 8015750:	9500      	str	r5, [sp, #0]
 8015752:	0013      	movs	r3, r2
 8015754:	0032      	movs	r2, r6
 8015756:	47a0      	blx	r4
 8015758:	e024      	b.n	80157a4 <RegionEU433TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 801575a:	201f      	movs	r0, #31
 801575c:	183b      	adds	r3, r7, r0
 801575e:	2201      	movs	r2, #1
 8015760:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8015762:	4b23      	ldr	r3, [pc, #140]	; (80157f0 <RegionEU433TxConfig+0x1a4>)
 8015764:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015766:	231e      	movs	r3, #30
 8015768:	18fb      	adds	r3, r7, r3
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	b25b      	sxtb	r3, r3
 801576e:	69bd      	ldr	r5, [r7, #24]
 8015770:	2217      	movs	r2, #23
 8015772:	18ba      	adds	r2, r7, r2
 8015774:	2100      	movs	r1, #0
 8015776:	5651      	ldrsb	r1, [r2, r1]
 8015778:	183a      	adds	r2, r7, r0
 801577a:	7810      	ldrb	r0, [r2, #0]
 801577c:	4a1e      	ldr	r2, [pc, #120]	; (80157f8 <RegionEU433TxConfig+0x1ac>)
 801577e:	9208      	str	r2, [sp, #32]
 8015780:	2200      	movs	r2, #0
 8015782:	9207      	str	r2, [sp, #28]
 8015784:	2200      	movs	r2, #0
 8015786:	9206      	str	r2, [sp, #24]
 8015788:	2200      	movs	r2, #0
 801578a:	9205      	str	r2, [sp, #20]
 801578c:	2201      	movs	r2, #1
 801578e:	9204      	str	r2, [sp, #16]
 8015790:	2200      	movs	r2, #0
 8015792:	9203      	str	r2, [sp, #12]
 8015794:	2208      	movs	r2, #8
 8015796:	9202      	str	r2, [sp, #8]
 8015798:	2201      	movs	r2, #1
 801579a:	9201      	str	r2, [sp, #4]
 801579c:	9300      	str	r3, [sp, #0]
 801579e:	002b      	movs	r3, r5
 80157a0:	2200      	movs	r2, #0
 80157a2:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80157a4:	4b12      	ldr	r3, [pc, #72]	; (80157f0 <RegionEU433TxConfig+0x1a4>)
 80157a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157a8:	68fa      	ldr	r2, [r7, #12]
 80157aa:	8992      	ldrh	r2, [r2, #12]
 80157ac:	b2d1      	uxtb	r1, r2
 80157ae:	241f      	movs	r4, #31
 80157b0:	193a      	adds	r2, r7, r4
 80157b2:	7812      	ldrb	r2, [r2, #0]
 80157b4:	0010      	movs	r0, r2
 80157b6:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 80157b8:	4b0d      	ldr	r3, [pc, #52]	; (80157f0 <RegionEU433TxConfig+0x1a4>)
 80157ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157bc:	68fa      	ldr	r2, [r7, #12]
 80157be:	8992      	ldrh	r2, [r2, #12]
 80157c0:	b2d1      	uxtb	r1, r2
 80157c2:	193a      	adds	r2, r7, r4
 80157c4:	7812      	ldrb	r2, [r2, #0]
 80157c6:	0010      	movs	r0, r2
 80157c8:	4798      	blx	r3
 80157ca:	0002      	movs	r2, r0
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	221d      	movs	r2, #29
 80157d4:	18ba      	adds	r2, r7, r2
 80157d6:	7812      	ldrb	r2, [r2, #0]
 80157d8:	701a      	strb	r2, [r3, #0]
    return true;
 80157da:	2301      	movs	r3, #1
}
 80157dc:	0018      	movs	r0, r3
 80157de:	46bd      	mov	sp, r7
 80157e0:	b009      	add	sp, #36	; 0x24
 80157e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157e4:	080282dc 	.word	0x080282dc
 80157e8:	20001438 	.word	0x20001438
 80157ec:	20001508 	.word	0x20001508
 80157f0:	08028964 	.word	0x08028964
 80157f4:	000061a8 	.word	0x000061a8
 80157f8:	00000bb8 	.word	0x00000bb8

080157fc <RegionEU433LinkAdrReq>:

uint8_t RegionEU433LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80157fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157fe:	b093      	sub	sp, #76	; 0x4c
 8015800:	af00      	add	r7, sp, #0
 8015802:	60f8      	str	r0, [r7, #12]
 8015804:	60b9      	str	r1, [r7, #8]
 8015806:	607a      	str	r2, [r7, #4]
 8015808:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801580a:	2347      	movs	r3, #71	; 0x47
 801580c:	18fb      	adds	r3, r7, r3
 801580e:	2207      	movs	r2, #7
 8015810:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8015812:	2344      	movs	r3, #68	; 0x44
 8015814:	18fb      	adds	r3, r7, r3
 8015816:	2200      	movs	r2, #0
 8015818:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801581a:	2346      	movs	r3, #70	; 0x46
 801581c:	18fb      	adds	r3, r7, r3
 801581e:	2200      	movs	r2, #0
 8015820:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8015822:	233a      	movs	r3, #58	; 0x3a
 8015824:	18fb      	adds	r3, r7, r3
 8015826:	2200      	movs	r2, #0
 8015828:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801582a:	e09e      	b.n	801596a <RegionEU433LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	685a      	ldr	r2, [r3, #4]
 8015830:	2346      	movs	r3, #70	; 0x46
 8015832:	18fb      	adds	r3, r7, r3
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	18d3      	adds	r3, r2, r3
 8015838:	2544      	movs	r5, #68	; 0x44
 801583a:	197c      	adds	r4, r7, r5
 801583c:	223c      	movs	r2, #60	; 0x3c
 801583e:	18ba      	adds	r2, r7, r2
 8015840:	0011      	movs	r1, r2
 8015842:	0018      	movs	r0, r3
 8015844:	f7fe ff84 	bl	8014750 <RegionCommonParseLinkAdrReq>
 8015848:	0003      	movs	r3, r0
 801584a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801584c:	197b      	adds	r3, r7, r5
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d100      	bne.n	8015856 <RegionEU433LinkAdrReq+0x5a>
 8015854:	e092      	b.n	801597c <RegionEU433LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015856:	2246      	movs	r2, #70	; 0x46
 8015858:	18bb      	adds	r3, r7, r2
 801585a:	18b9      	adds	r1, r7, r2
 801585c:	2244      	movs	r2, #68	; 0x44
 801585e:	18ba      	adds	r2, r7, r2
 8015860:	7809      	ldrb	r1, [r1, #0]
 8015862:	7812      	ldrb	r2, [r2, #0]
 8015864:	188a      	adds	r2, r1, r2
 8015866:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015868:	2347      	movs	r3, #71	; 0x47
 801586a:	18fb      	adds	r3, r7, r3
 801586c:	2207      	movs	r2, #7
 801586e:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015870:	213c      	movs	r1, #60	; 0x3c
 8015872:	187b      	adds	r3, r7, r1
 8015874:	889a      	ldrh	r2, [r3, #4]
 8015876:	233a      	movs	r3, #58	; 0x3a
 8015878:	18fb      	adds	r3, r7, r3
 801587a:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801587c:	187b      	adds	r3, r7, r1
 801587e:	78db      	ldrb	r3, [r3, #3]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d10c      	bne.n	801589e <RegionEU433LinkAdrReq+0xa2>
 8015884:	233a      	movs	r3, #58	; 0x3a
 8015886:	18fb      	adds	r3, r7, r3
 8015888:	881b      	ldrh	r3, [r3, #0]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d107      	bne.n	801589e <RegionEU433LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 801588e:	2247      	movs	r2, #71	; 0x47
 8015890:	18bb      	adds	r3, r7, r2
 8015892:	18ba      	adds	r2, r7, r2
 8015894:	7812      	ldrb	r2, [r2, #0]
 8015896:	2101      	movs	r1, #1
 8015898:	438a      	bics	r2, r1
 801589a:	701a      	strb	r2, [r3, #0]
 801589c:	e065      	b.n	801596a <RegionEU433LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801589e:	233c      	movs	r3, #60	; 0x3c
 80158a0:	18fb      	adds	r3, r7, r3
 80158a2:	78db      	ldrb	r3, [r3, #3]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d004      	beq.n	80158b2 <RegionEU433LinkAdrReq+0xb6>
 80158a8:	233c      	movs	r3, #60	; 0x3c
 80158aa:	18fb      	adds	r3, r7, r3
 80158ac:	78db      	ldrb	r3, [r3, #3]
 80158ae:	2b05      	cmp	r3, #5
 80158b0:	d904      	bls.n	80158bc <RegionEU433LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80158b2:	233c      	movs	r3, #60	; 0x3c
 80158b4:	18fb      	adds	r3, r7, r3
 80158b6:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80158b8:	2b06      	cmp	r3, #6
 80158ba:	d907      	bls.n	80158cc <RegionEU433LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80158bc:	2247      	movs	r2, #71	; 0x47
 80158be:	18bb      	adds	r3, r7, r2
 80158c0:	18ba      	adds	r2, r7, r2
 80158c2:	7812      	ldrb	r2, [r2, #0]
 80158c4:	2101      	movs	r1, #1
 80158c6:	438a      	bics	r2, r1
 80158c8:	701a      	strb	r2, [r3, #0]
 80158ca:	e04e      	b.n	801596a <RegionEU433LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 80158cc:	2345      	movs	r3, #69	; 0x45
 80158ce:	18fb      	adds	r3, r7, r3
 80158d0:	2200      	movs	r2, #0
 80158d2:	701a      	strb	r2, [r3, #0]
 80158d4:	e044      	b.n	8015960 <RegionEU433LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80158d6:	233c      	movs	r3, #60	; 0x3c
 80158d8:	18fb      	adds	r3, r7, r3
 80158da:	78db      	ldrb	r3, [r3, #3]
 80158dc:	2b06      	cmp	r3, #6
 80158de:	d11b      	bne.n	8015918 <RegionEU433LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80158e0:	2345      	movs	r3, #69	; 0x45
 80158e2:	18fb      	adds	r3, r7, r3
 80158e4:	781a      	ldrb	r2, [r3, #0]
 80158e6:	496e      	ldr	r1, [pc, #440]	; (8015aa0 <RegionEU433LinkAdrReq+0x2a4>)
 80158e8:	0013      	movs	r3, r2
 80158ea:	005b      	lsls	r3, r3, #1
 80158ec:	189b      	adds	r3, r3, r2
 80158ee:	009b      	lsls	r3, r3, #2
 80158f0:	585b      	ldr	r3, [r3, r1]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d02e      	beq.n	8015954 <RegionEU433LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 80158f6:	2345      	movs	r3, #69	; 0x45
 80158f8:	18fb      	adds	r3, r7, r3
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	2201      	movs	r2, #1
 80158fe:	409a      	lsls	r2, r3
 8015900:	0013      	movs	r3, r2
 8015902:	b21a      	sxth	r2, r3
 8015904:	213a      	movs	r1, #58	; 0x3a
 8015906:	187b      	adds	r3, r7, r1
 8015908:	881b      	ldrh	r3, [r3, #0]
 801590a:	b21b      	sxth	r3, r3
 801590c:	4313      	orrs	r3, r2
 801590e:	b21b      	sxth	r3, r3
 8015910:	b29a      	uxth	r2, r3
 8015912:	187b      	adds	r3, r7, r1
 8015914:	801a      	strh	r2, [r3, #0]
 8015916:	e01d      	b.n	8015954 <RegionEU433LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015918:	233a      	movs	r3, #58	; 0x3a
 801591a:	18fb      	adds	r3, r7, r3
 801591c:	881b      	ldrh	r3, [r3, #0]
 801591e:	001a      	movs	r2, r3
 8015920:	2345      	movs	r3, #69	; 0x45
 8015922:	18fb      	adds	r3, r7, r3
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	411a      	asrs	r2, r3
 8015928:	0013      	movs	r3, r2
 801592a:	2201      	movs	r2, #1
 801592c:	4013      	ands	r3, r2
 801592e:	d011      	beq.n	8015954 <RegionEU433LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8015930:	2345      	movs	r3, #69	; 0x45
 8015932:	18fb      	adds	r3, r7, r3
 8015934:	781a      	ldrb	r2, [r3, #0]
 8015936:	495a      	ldr	r1, [pc, #360]	; (8015aa0 <RegionEU433LinkAdrReq+0x2a4>)
 8015938:	0013      	movs	r3, r2
 801593a:	005b      	lsls	r3, r3, #1
 801593c:	189b      	adds	r3, r3, r2
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015942:	2b00      	cmp	r3, #0
 8015944:	d106      	bne.n	8015954 <RegionEU433LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015946:	2247      	movs	r2, #71	; 0x47
 8015948:	18bb      	adds	r3, r7, r2
 801594a:	18ba      	adds	r2, r7, r2
 801594c:	7812      	ldrb	r2, [r2, #0]
 801594e:	2101      	movs	r1, #1
 8015950:	438a      	bics	r2, r1
 8015952:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 8015954:	2145      	movs	r1, #69	; 0x45
 8015956:	187b      	adds	r3, r7, r1
 8015958:	781a      	ldrb	r2, [r3, #0]
 801595a:	187b      	adds	r3, r7, r1
 801595c:	3201      	adds	r2, #1
 801595e:	701a      	strb	r2, [r3, #0]
 8015960:	2345      	movs	r3, #69	; 0x45
 8015962:	18fb      	adds	r3, r7, r3
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	2b0f      	cmp	r3, #15
 8015968:	d9b5      	bls.n	80158d6 <RegionEU433LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	7a1b      	ldrb	r3, [r3, #8]
 801596e:	2246      	movs	r2, #70	; 0x46
 8015970:	18ba      	adds	r2, r7, r2
 8015972:	7812      	ldrb	r2, [r2, #0]
 8015974:	429a      	cmp	r2, r3
 8015976:	d200      	bcs.n	801597a <RegionEU433LinkAdrReq+0x17e>
 8015978:	e758      	b.n	801582c <RegionEU433LinkAdrReq+0x30>
 801597a:	e000      	b.n	801597e <RegionEU433LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 801597c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

        // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801597e:	2134      	movs	r1, #52	; 0x34
 8015980:	187b      	adds	r3, r7, r1
 8015982:	2201      	movs	r2, #1
 8015984:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	7a5a      	ldrb	r2, [r3, #9]
 801598a:	187b      	adds	r3, r7, r1
 801598c:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU433GetPhyParam( &getPhy );
 801598e:	187b      	adds	r3, r7, r1
 8015990:	0018      	movs	r0, r3
 8015992:	f7ff fae7 	bl	8014f64 <RegionEU433GetPhyParam>
 8015996:	0003      	movs	r3, r0
 8015998:	001a      	movs	r2, r3
 801599a:	2030      	movs	r0, #48	; 0x30
 801599c:	183b      	adds	r3, r7, r0
 801599e:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 80159a0:	2110      	movs	r1, #16
 80159a2:	187b      	adds	r3, r7, r1
 80159a4:	2447      	movs	r4, #71	; 0x47
 80159a6:	193a      	adds	r2, r7, r4
 80159a8:	7812      	ldrb	r2, [r2, #0]
 80159aa:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	7a9a      	ldrb	r2, [r3, #10]
 80159b0:	187b      	adds	r3, r7, r1
 80159b2:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80159b4:	253c      	movs	r5, #60	; 0x3c
 80159b6:	197b      	adds	r3, r7, r5
 80159b8:	2201      	movs	r2, #1
 80159ba:	569a      	ldrsb	r2, [r3, r2]
 80159bc:	187b      	adds	r3, r7, r1
 80159be:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80159c0:	197b      	adds	r3, r7, r5
 80159c2:	2202      	movs	r2, #2
 80159c4:	569a      	ldrsb	r2, [r3, r2]
 80159c6:	187b      	adds	r3, r7, r1
 80159c8:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80159ca:	197b      	adds	r3, r7, r5
 80159cc:	781a      	ldrb	r2, [r3, #0]
 80159ce:	187b      	adds	r3, r7, r1
 80159d0:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	220b      	movs	r2, #11
 80159d6:	569a      	ldrsb	r2, [r3, r2]
 80159d8:	187b      	adds	r3, r7, r1
 80159da:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	220c      	movs	r2, #12
 80159e0:	569a      	ldrsb	r2, [r3, r2]
 80159e2:	187b      	adds	r3, r7, r1
 80159e4:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	7b5b      	ldrb	r3, [r3, #13]
 80159ea:	b25a      	sxtb	r2, r3
 80159ec:	187b      	adds	r3, r7, r1
 80159ee:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU433_MAX_NB_CHANNELS;
 80159f0:	187b      	adds	r3, r7, r1
 80159f2:	2210      	movs	r2, #16
 80159f4:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80159f6:	187b      	adds	r3, r7, r1
 80159f8:	223a      	movs	r2, #58	; 0x3a
 80159fa:	18ba      	adds	r2, r7, r2
 80159fc:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80159fe:	183b      	adds	r3, r7, r0
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	b25a      	sxtb	r2, r3
 8015a04:	0008      	movs	r0, r1
 8015a06:	183b      	adds	r3, r7, r0
 8015a08:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU433_TX_MAX_DATARATE;
 8015a0a:	183b      	adds	r3, r7, r0
 8015a0c:	2207      	movs	r2, #7
 8015a0e:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8015a10:	183b      	adds	r3, r7, r0
 8015a12:	4a23      	ldr	r2, [pc, #140]	; (8015aa0 <RegionEU433LinkAdrReq+0x2a4>)
 8015a14:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU433_MIN_TX_POWER;
 8015a16:	183b      	adds	r3, r7, r0
 8015a18:	2205      	movs	r2, #5
 8015a1a:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU433_MAX_TX_POWER;
 8015a1c:	183b      	adds	r3, r7, r0
 8015a1e:	2200      	movs	r2, #0
 8015a20:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015a22:	183b      	adds	r3, r7, r0
 8015a24:	68fa      	ldr	r2, [r7, #12]
 8015a26:	6812      	ldr	r2, [r2, #0]
 8015a28:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015a2a:	0026      	movs	r6, r4
 8015a2c:	193c      	adds	r4, r7, r4
 8015a2e:	0029      	movs	r1, r5
 8015a30:	187d      	adds	r5, r7, r1
 8015a32:	187b      	adds	r3, r7, r1
 8015a34:	1c9a      	adds	r2, r3, #2
 8015a36:	187b      	adds	r3, r7, r1
 8015a38:	1c59      	adds	r1, r3, #1
 8015a3a:	1838      	adds	r0, r7, r0
 8015a3c:	002b      	movs	r3, r5
 8015a3e:	f7fe fedd 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 8015a42:	0003      	movs	r3, r0
 8015a44:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015a46:	0034      	movs	r4, r6
 8015a48:	193b      	adds	r3, r7, r4
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	2b07      	cmp	r3, #7
 8015a4e:	d10b      	bne.n	8015a68 <RegionEU433LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8015a50:	4b14      	ldr	r3, [pc, #80]	; (8015aa4 <RegionEU433LinkAdrReq+0x2a8>)
 8015a52:	2202      	movs	r2, #2
 8015a54:	2100      	movs	r1, #0
 8015a56:	0018      	movs	r0, r3
 8015a58:	f007 f97c 	bl	801cd54 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8015a5c:	233a      	movs	r3, #58	; 0x3a
 8015a5e:	18fb      	adds	r3, r7, r3
 8015a60:	8819      	ldrh	r1, [r3, #0]
 8015a62:	4b0f      	ldr	r3, [pc, #60]	; (8015aa0 <RegionEU433LinkAdrReq+0x2a4>)
 8015a64:	22d0      	movs	r2, #208	; 0xd0
 8015a66:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015a68:	213c      	movs	r1, #60	; 0x3c
 8015a6a:	187b      	adds	r3, r7, r1
 8015a6c:	2201      	movs	r2, #1
 8015a6e:	569a      	ldrsb	r2, [r3, r2]
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015a74:	187b      	adds	r3, r7, r1
 8015a76:	2202      	movs	r2, #2
 8015a78:	569a      	ldrsb	r2, [r3, r2]
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015a7e:	187b      	adds	r3, r7, r1
 8015a80:	781a      	ldrb	r2, [r3, #0]
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a88:	2246      	movs	r2, #70	; 0x46
 8015a8a:	18ba      	adds	r2, r7, r2
 8015a8c:	7812      	ldrb	r2, [r2, #0]
 8015a8e:	701a      	strb	r2, [r3, #0]

    return status;
 8015a90:	2347      	movs	r3, #71	; 0x47
 8015a92:	18fb      	adds	r3, r7, r3
 8015a94:	781b      	ldrb	r3, [r3, #0]
}
 8015a96:	0018      	movs	r0, r3
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	b013      	add	sp, #76	; 0x4c
 8015a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a9e:	46c0      	nop			; (mov r8, r8)
 8015aa0:	20001438 	.word	0x20001438
 8015aa4:	20001508 	.word	0x20001508

08015aa8 <RegionEU433RxParamSetupReq>:

uint8_t RegionEU433RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b084      	sub	sp, #16
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015ab0:	230f      	movs	r3, #15
 8015ab2:	18fb      	adds	r3, r7, r3
 8015ab4:	2207      	movs	r2, #7
 8015ab6:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	685b      	ldr	r3, [r3, #4]
 8015abc:	0018      	movs	r0, r3
 8015abe:	f7ff f943 	bl	8014d48 <VerifyRfFreq>
 8015ac2:	0003      	movs	r3, r0
 8015ac4:	001a      	movs	r2, r3
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	4053      	eors	r3, r2
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d006      	beq.n	8015ade <RegionEU433RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8015ad0:	220f      	movs	r2, #15
 8015ad2:	18bb      	adds	r3, r7, r2
 8015ad4:	18ba      	adds	r2, r7, r2
 8015ad6:	7812      	ldrb	r2, [r2, #0]
 8015ad8:	2101      	movs	r1, #1
 8015ada:	438a      	bics	r2, r1
 8015adc:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE ) == false )
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	781b      	ldrb	r3, [r3, #0]
 8015ae2:	b25b      	sxtb	r3, r3
 8015ae4:	2207      	movs	r2, #7
 8015ae6:	2100      	movs	r1, #0
 8015ae8:	0018      	movs	r0, r3
 8015aea:	f7fe fc49 	bl	8014380 <RegionCommonValueInRange>
 8015aee:	1e03      	subs	r3, r0, #0
 8015af0:	d106      	bne.n	8015b00 <RegionEU433RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8015af2:	220f      	movs	r2, #15
 8015af4:	18bb      	adds	r3, r7, r2
 8015af6:	18ba      	adds	r2, r7, r2
 8015af8:	7812      	ldrb	r2, [r2, #0]
 8015afa:	2102      	movs	r1, #2
 8015afc:	438a      	bics	r2, r1
 8015afe:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU433_MIN_RX1_DR_OFFSET, EU433_MAX_RX1_DR_OFFSET ) == false )
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	785b      	ldrb	r3, [r3, #1]
 8015b04:	b25b      	sxtb	r3, r3
 8015b06:	2205      	movs	r2, #5
 8015b08:	2100      	movs	r1, #0
 8015b0a:	0018      	movs	r0, r3
 8015b0c:	f7fe fc38 	bl	8014380 <RegionCommonValueInRange>
 8015b10:	1e03      	subs	r3, r0, #0
 8015b12:	d106      	bne.n	8015b22 <RegionEU433RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015b14:	220f      	movs	r2, #15
 8015b16:	18bb      	adds	r3, r7, r2
 8015b18:	18ba      	adds	r2, r7, r2
 8015b1a:	7812      	ldrb	r2, [r2, #0]
 8015b1c:	2104      	movs	r1, #4
 8015b1e:	438a      	bics	r2, r1
 8015b20:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8015b22:	230f      	movs	r3, #15
 8015b24:	18fb      	adds	r3, r7, r3
 8015b26:	781b      	ldrb	r3, [r3, #0]
}
 8015b28:	0018      	movs	r0, r3
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	b004      	add	sp, #16
 8015b2e:	bd80      	pop	{r7, pc}

08015b30 <RegionEU433NewChannelReq>:

uint8_t RegionEU433NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b086      	sub	sp, #24
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015b38:	2317      	movs	r3, #23
 8015b3a:	18fb      	adds	r3, r7, r3
 8015b3c:	2203      	movs	r2, #3
 8015b3e:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d119      	bne.n	8015b7e <RegionEU433NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	791b      	ldrb	r3, [r3, #4]
 8015b4e:	b25b      	sxtb	r3, r3
 8015b50:	b2da      	uxtb	r2, r3
 8015b52:	2108      	movs	r1, #8
 8015b54:	187b      	adds	r3, r7, r1
 8015b56:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU433ChannelsRemove( &channelRemove ) == false )
 8015b58:	187b      	adds	r3, r7, r1
 8015b5a:	0018      	movs	r0, r3
 8015b5c:	f000 fa32 	bl	8015fc4 <RegionEU433ChannelsRemove>
 8015b60:	0003      	movs	r3, r0
 8015b62:	001a      	movs	r2, r3
 8015b64:	2301      	movs	r3, #1
 8015b66:	4053      	eors	r3, r2
 8015b68:	b2db      	uxtb	r3, r3
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d043      	beq.n	8015bf6 <RegionEU433NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8015b6e:	2217      	movs	r2, #23
 8015b70:	18bb      	adds	r3, r7, r2
 8015b72:	18ba      	adds	r2, r7, r2
 8015b74:	7812      	ldrb	r2, [r2, #0]
 8015b76:	2103      	movs	r1, #3
 8015b78:	438a      	bics	r2, r1
 8015b7a:	701a      	strb	r2, [r3, #0]
 8015b7c:	e03b      	b.n	8015bf6 <RegionEU433NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681a      	ldr	r2, [r3, #0]
 8015b82:	210c      	movs	r1, #12
 8015b84:	187b      	adds	r3, r7, r1
 8015b86:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	791b      	ldrb	r3, [r3, #4]
 8015b8c:	b25b      	sxtb	r3, r3
 8015b8e:	b2da      	uxtb	r2, r3
 8015b90:	187b      	adds	r3, r7, r1
 8015b92:	711a      	strb	r2, [r3, #4]

        switch( RegionEU433ChannelAdd( &channelAdd ) )
 8015b94:	187b      	adds	r3, r7, r1
 8015b96:	0018      	movs	r0, r3
 8015b98:	f000 f95a 	bl	8015e50 <RegionEU433ChannelAdd>
 8015b9c:	0003      	movs	r3, r0
 8015b9e:	2b04      	cmp	r3, #4
 8015ba0:	d008      	beq.n	8015bb4 <RegionEU433NewChannelReq+0x84>
 8015ba2:	dc02      	bgt.n	8015baa <RegionEU433NewChannelReq+0x7a>
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d025      	beq.n	8015bf4 <RegionEU433NewChannelReq+0xc4>
 8015ba8:	e01c      	b.n	8015be4 <RegionEU433NewChannelReq+0xb4>
 8015baa:	2b05      	cmp	r3, #5
 8015bac:	d00a      	beq.n	8015bc4 <RegionEU433NewChannelReq+0x94>
 8015bae:	2b06      	cmp	r3, #6
 8015bb0:	d010      	beq.n	8015bd4 <RegionEU433NewChannelReq+0xa4>
 8015bb2:	e017      	b.n	8015be4 <RegionEU433NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015bb4:	2217      	movs	r2, #23
 8015bb6:	18bb      	adds	r3, r7, r2
 8015bb8:	18ba      	adds	r2, r7, r2
 8015bba:	7812      	ldrb	r2, [r2, #0]
 8015bbc:	2101      	movs	r1, #1
 8015bbe:	438a      	bics	r2, r1
 8015bc0:	701a      	strb	r2, [r3, #0]
                break;
 8015bc2:	e018      	b.n	8015bf6 <RegionEU433NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015bc4:	2217      	movs	r2, #23
 8015bc6:	18bb      	adds	r3, r7, r2
 8015bc8:	18ba      	adds	r2, r7, r2
 8015bca:	7812      	ldrb	r2, [r2, #0]
 8015bcc:	2102      	movs	r1, #2
 8015bce:	438a      	bics	r2, r1
 8015bd0:	701a      	strb	r2, [r3, #0]
                break;
 8015bd2:	e010      	b.n	8015bf6 <RegionEU433NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015bd4:	2217      	movs	r2, #23
 8015bd6:	18bb      	adds	r3, r7, r2
 8015bd8:	18ba      	adds	r2, r7, r2
 8015bda:	7812      	ldrb	r2, [r2, #0]
 8015bdc:	2103      	movs	r1, #3
 8015bde:	438a      	bics	r2, r1
 8015be0:	701a      	strb	r2, [r3, #0]
                break;
 8015be2:	e008      	b.n	8015bf6 <RegionEU433NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8015be4:	2217      	movs	r2, #23
 8015be6:	18bb      	adds	r3, r7, r2
 8015be8:	18ba      	adds	r2, r7, r2
 8015bea:	7812      	ldrb	r2, [r2, #0]
 8015bec:	2103      	movs	r1, #3
 8015bee:	438a      	bics	r2, r1
 8015bf0:	701a      	strb	r2, [r3, #0]
                break;
 8015bf2:	e000      	b.n	8015bf6 <RegionEU433NewChannelReq+0xc6>
                break;
 8015bf4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8015bf6:	2317      	movs	r3, #23
 8015bf8:	18fb      	adds	r3, r7, r3
 8015bfa:	781b      	ldrb	r3, [r3, #0]
}
 8015bfc:	0018      	movs	r0, r3
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	b006      	add	sp, #24
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <RegionEU433TxParamSetupReq>:

int8_t RegionEU433TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
    return -1;
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	425b      	negs	r3, r3
}
 8015c10:	0018      	movs	r0, r3
 8015c12:	46bd      	mov	sp, r7
 8015c14:	b002      	add	sp, #8
 8015c16:	bd80      	pop	{r7, pc}

08015c18 <RegionEU433DlChannelReq>:

uint8_t RegionEU433DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b084      	sub	sp, #16
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015c20:	230f      	movs	r3, #15
 8015c22:	18fb      	adds	r3, r7, r3
 8015c24:	2203      	movs	r2, #3
 8015c26:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	0018      	movs	r0, r3
 8015c2e:	f7ff f88b 	bl	8014d48 <VerifyRfFreq>
 8015c32:	0003      	movs	r3, r0
 8015c34:	001a      	movs	r2, r3
 8015c36:	2301      	movs	r3, #1
 8015c38:	4053      	eors	r3, r2
 8015c3a:	b2db      	uxtb	r3, r3
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d006      	beq.n	8015c4e <RegionEU433DlChannelReq+0x36>
    {
        status &= 0xFE;
 8015c40:	220f      	movs	r2, #15
 8015c42:	18bb      	adds	r3, r7, r2
 8015c44:	18ba      	adds	r2, r7, r2
 8015c46:	7812      	ldrb	r2, [r2, #0]
 8015c48:	2101      	movs	r1, #1
 8015c4a:	438a      	bics	r2, r1
 8015c4c:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	0019      	movs	r1, r3
 8015c54:	4a13      	ldr	r2, [pc, #76]	; (8015ca4 <RegionEU433DlChannelReq+0x8c>)
 8015c56:	000b      	movs	r3, r1
 8015c58:	005b      	lsls	r3, r3, #1
 8015c5a:	185b      	adds	r3, r3, r1
 8015c5c:	009b      	lsls	r3, r3, #2
 8015c5e:	589b      	ldr	r3, [r3, r2]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d106      	bne.n	8015c72 <RegionEU433DlChannelReq+0x5a>
    {
        status &= 0xFD;
 8015c64:	220f      	movs	r2, #15
 8015c66:	18bb      	adds	r3, r7, r2
 8015c68:	18ba      	adds	r2, r7, r2
 8015c6a:	7812      	ldrb	r2, [r2, #0]
 8015c6c:	2102      	movs	r1, #2
 8015c6e:	438a      	bics	r2, r1
 8015c70:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015c72:	230f      	movs	r3, #15
 8015c74:	18fb      	adds	r3, r7, r3
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	2b03      	cmp	r3, #3
 8015c7a:	d10c      	bne.n	8015c96 <RegionEU433DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	781b      	ldrb	r3, [r3, #0]
 8015c80:	0018      	movs	r0, r3
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	685a      	ldr	r2, [r3, #4]
 8015c86:	4907      	ldr	r1, [pc, #28]	; (8015ca4 <RegionEU433DlChannelReq+0x8c>)
 8015c88:	0003      	movs	r3, r0
 8015c8a:	005b      	lsls	r3, r3, #1
 8015c8c:	181b      	adds	r3, r3, r0
 8015c8e:	009b      	lsls	r3, r3, #2
 8015c90:	18cb      	adds	r3, r1, r3
 8015c92:	3304      	adds	r3, #4
 8015c94:	601a      	str	r2, [r3, #0]
    }

    return status;
 8015c96:	230f      	movs	r3, #15
 8015c98:	18fb      	adds	r3, r7, r3
 8015c9a:	781b      	ldrb	r3, [r3, #0]
}
 8015c9c:	0018      	movs	r0, r3
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	b004      	add	sp, #16
 8015ca2:	bd80      	pop	{r7, pc}
 8015ca4:	20001438 	.word	0x20001438

08015ca8 <RegionEU433CalcBackOff>:
{
    return currentDr;
}

void RegionEU433CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b088      	sub	sp, #32
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8015cb0:	210c      	movs	r1, #12
 8015cb2:	187b      	adds	r3, r7, r1
 8015cb4:	4a12      	ldr	r2, [pc, #72]	; (8015d00 <RegionEU433CalcBackOff+0x58>)
 8015cb6:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8015cb8:	187b      	adds	r3, r7, r1
 8015cba:	4a12      	ldr	r2, [pc, #72]	; (8015d04 <RegionEU433CalcBackOff+0x5c>)
 8015cbc:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	785a      	ldrb	r2, [r3, #1]
 8015cc2:	187b      	adds	r3, r7, r1
 8015cc4:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	781a      	ldrb	r2, [r3, #0]
 8015cca:	187b      	adds	r3, r7, r1
 8015ccc:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	789a      	ldrb	r2, [r3, #2]
 8015cd2:	187b      	adds	r3, r7, r1
 8015cd4:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	78da      	ldrb	r2, [r3, #3]
 8015cda:	187b      	adds	r3, r7, r1
 8015cdc:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	685a      	ldr	r2, [r3, #4]
 8015ce2:	187b      	adds	r3, r7, r1
 8015ce4:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	689a      	ldr	r2, [r3, #8]
 8015cea:	187b      	adds	r3, r7, r1
 8015cec:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8015cee:	187b      	adds	r3, r7, r1
 8015cf0:	0018      	movs	r0, r3
 8015cf2:	f7fe ff2d 	bl	8014b50 <RegionCommonCalcBackOff>
}
 8015cf6:	46c0      	nop			; (mov r8, r8)
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	b008      	add	sp, #32
 8015cfc:	bd80      	pop	{r7, pc}
 8015cfe:	46c0      	nop			; (mov r8, r8)
 8015d00:	20001438 	.word	0x20001438
 8015d04:	200014f8 	.word	0x200014f8

08015d08 <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015d08:	b5b0      	push	{r4, r5, r7, lr}
 8015d0a:	b090      	sub	sp, #64	; 0x40
 8015d0c:	af04      	add	r7, sp, #16
 8015d0e:	60f8      	str	r0, [r7, #12]
 8015d10:	60b9      	str	r1, [r7, #8]
 8015d12:	607a      	str	r2, [r7, #4]
 8015d14:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8015d16:	232f      	movs	r3, #47	; 0x2f
 8015d18:	18fb      	adds	r3, r7, r3
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8015d1e:	2327      	movs	r3, #39	; 0x27
 8015d20:	18fb      	adds	r3, r7, r3
 8015d22:	2200      	movs	r2, #0
 8015d24:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 8015d26:	2314      	movs	r3, #20
 8015d28:	18fb      	adds	r3, r7, r3
 8015d2a:	0018      	movs	r0, r3
 8015d2c:	2310      	movs	r3, #16
 8015d2e:	001a      	movs	r2, r3
 8015d30:	2100      	movs	r1, #0
 8015d32:	f010 f8fd 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8015d3a:	4b42      	ldr	r3, [pc, #264]	; (8015e44 <RegionEU433NextChannel+0x13c>)
 8015d3c:	2201      	movs	r2, #1
 8015d3e:	2100      	movs	r1, #0
 8015d40:	0018      	movs	r0, r3
 8015d42:	f7fe fb85 	bl	8014450 <RegionCommonCountChannels>
 8015d46:	1e03      	subs	r3, r0, #0
 8015d48:	d108      	bne.n	8015d5c <RegionEU433NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015d4a:	4b3f      	ldr	r3, [pc, #252]	; (8015e48 <RegionEU433NextChannel+0x140>)
 8015d4c:	22d0      	movs	r2, #208	; 0xd0
 8015d4e:	5a9b      	ldrh	r3, [r3, r2]
 8015d50:	2207      	movs	r2, #7
 8015d52:	4313      	orrs	r3, r2
 8015d54:	b299      	uxth	r1, r3
 8015d56:	4b3c      	ldr	r3, [pc, #240]	; (8015e48 <RegionEU433NextChannel+0x140>)
 8015d58:	22d0      	movs	r2, #208	; 0xd0
 8015d5a:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	681c      	ldr	r4, [r3, #0]
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	0018      	movs	r0, r3
 8015d66:	f006 ff7a 	bl	801cc5e <TimerGetElapsedTime>
 8015d6a:	0003      	movs	r3, r0
 8015d6c:	429c      	cmp	r4, r3
 8015d6e:	d824      	bhi.n	8015dba <RegionEU433NextChannel+0xb2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	2200      	movs	r2, #0
 8015d74:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU433_MAX_NB_BANDS );
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	7a58      	ldrb	r0, [r3, #9]
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	7a99      	ldrb	r1, [r3, #10]
 8015d7e:	4a33      	ldr	r2, [pc, #204]	; (8015e4c <RegionEU433NextChannel+0x144>)
 8015d80:	2301      	movs	r3, #1
 8015d82:	f7fe fbf0 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 8015d86:	0003      	movs	r3, r0
 8015d88:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	7a58      	ldrb	r0, [r3, #9]
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	7a1b      	ldrb	r3, [r3, #8]
 8015d92:	b25b      	sxtb	r3, r3
 8015d94:	b2d9      	uxtb	r1, r3
 8015d96:	232f      	movs	r3, #47	; 0x2f
 8015d98:	18fc      	adds	r4, r7, r3
 8015d9a:	4d2b      	ldr	r5, [pc, #172]	; (8015e48 <RegionEU433NextChannel+0x140>)
 8015d9c:	4a29      	ldr	r2, [pc, #164]	; (8015e44 <RegionEU433NextChannel+0x13c>)
 8015d9e:	2327      	movs	r3, #39	; 0x27
 8015da0:	18fb      	adds	r3, r7, r3
 8015da2:	9302      	str	r3, [sp, #8]
 8015da4:	2314      	movs	r3, #20
 8015da6:	18fb      	adds	r3, r7, r3
 8015da8:	9301      	str	r3, [sp, #4]
 8015daa:	4b28      	ldr	r3, [pc, #160]	; (8015e4c <RegionEU433NextChannel+0x144>)
 8015dac:	9300      	str	r3, [sp, #0]
 8015dae:	002b      	movs	r3, r5
 8015db0:	f7fe fff2 	bl	8014d98 <CountNbOfEnabledChannels>
 8015db4:	0003      	movs	r3, r0
 8015db6:	7023      	strb	r3, [r4, #0]
 8015db8:	e010      	b.n	8015ddc <RegionEU433NextChannel+0xd4>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8015dba:	2127      	movs	r1, #39	; 0x27
 8015dbc:	187b      	adds	r3, r7, r1
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	3301      	adds	r3, #1
 8015dc2:	b2da      	uxtb	r2, r3
 8015dc4:	187b      	adds	r3, r7, r1
 8015dc6:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	681c      	ldr	r4, [r3, #0]
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	0018      	movs	r0, r3
 8015dd2:	f006 ff44 	bl	801cc5e <TimerGetElapsedTime>
 8015dd6:	0003      	movs	r3, r0
 8015dd8:	1ae3      	subs	r3, r4, r3
 8015dda:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8015ddc:	232f      	movs	r3, #47	; 0x2f
 8015dde:	18fb      	adds	r3, r7, r3
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d012      	beq.n	8015e0c <RegionEU433NextChannel+0x104>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015de6:	232f      	movs	r3, #47	; 0x2f
 8015de8:	18fb      	adds	r3, r7, r3
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	3b01      	subs	r3, #1
 8015dee:	0019      	movs	r1, r3
 8015df0:	2000      	movs	r0, #0
 8015df2:	f006 ff5d 	bl	801ccb0 <randr>
 8015df6:	0002      	movs	r2, r0
 8015df8:	2314      	movs	r3, #20
 8015dfa:	18fb      	adds	r3, r7, r3
 8015dfc:	5c9a      	ldrb	r2, [r3, r2]
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2200      	movs	r2, #0
 8015e06:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	e016      	b.n	8015e3a <RegionEU433NextChannel+0x132>
    }
    else
    {
        if( delayTx > 0 )
 8015e0c:	2327      	movs	r3, #39	; 0x27
 8015e0e:	18fb      	adds	r3, r7, r3
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d004      	beq.n	8015e20 <RegionEU433NextChannel+0x118>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e1a:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015e1c:	230b      	movs	r3, #11
 8015e1e:	e00c      	b.n	8015e3a <RegionEU433NextChannel+0x132>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015e20:	4b09      	ldr	r3, [pc, #36]	; (8015e48 <RegionEU433NextChannel+0x140>)
 8015e22:	22d0      	movs	r2, #208	; 0xd0
 8015e24:	5a9b      	ldrh	r3, [r3, r2]
 8015e26:	2207      	movs	r2, #7
 8015e28:	4313      	orrs	r3, r2
 8015e2a:	b299      	uxth	r1, r3
 8015e2c:	4b06      	ldr	r3, [pc, #24]	; (8015e48 <RegionEU433NextChannel+0x140>)
 8015e2e:	22d0      	movs	r2, #208	; 0xd0
 8015e30:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2200      	movs	r2, #0
 8015e36:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015e38:	230c      	movs	r3, #12
    }
}
 8015e3a:	0018      	movs	r0, r3
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	b00c      	add	sp, #48	; 0x30
 8015e40:	bdb0      	pop	{r4, r5, r7, pc}
 8015e42:	46c0      	nop			; (mov r8, r8)
 8015e44:	20001508 	.word	0x20001508
 8015e48:	20001438 	.word	0x20001438
 8015e4c:	200014f8 	.word	0x200014f8

08015e50 <RegionEU433ChannelAdd>:

LoRaMacStatus_t RegionEU433ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015e50:	b590      	push	{r4, r7, lr}
 8015e52:	b085      	sub	sp, #20
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8015e58:	230f      	movs	r3, #15
 8015e5a:	18fb      	adds	r3, r7, r3
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8015e60:	230e      	movs	r3, #14
 8015e62:	18fb      	adds	r3, r7, r3
 8015e64:	2200      	movs	r2, #0
 8015e66:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8015e68:	210d      	movs	r1, #13
 8015e6a:	187b      	adds	r3, r7, r1
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	7912      	ldrb	r2, [r2, #4]
 8015e70:	701a      	strb	r2, [r3, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 8015e72:	187b      	adds	r3, r7, r1
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	2b02      	cmp	r3, #2
 8015e78:	d801      	bhi.n	8015e7e <RegionEU433ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015e7a:	2306      	movs	r3, #6
 8015e7c:	e09c      	b.n	8015fb8 <RegionEU433ChannelAdd+0x168>
    }

    if( id >= EU433_MAX_NB_CHANNELS )
 8015e7e:	230d      	movs	r3, #13
 8015e80:	18fb      	adds	r3, r7, r3
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	2b0f      	cmp	r3, #15
 8015e86:	d901      	bls.n	8015e8c <RegionEU433ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e88:	2303      	movs	r3, #3
 8015e8a:	e095      	b.n	8015fb8 <RegionEU433ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	7a1b      	ldrb	r3, [r3, #8]
 8015e92:	011b      	lsls	r3, r3, #4
 8015e94:	b25b      	sxtb	r3, r3
 8015e96:	111b      	asrs	r3, r3, #4
 8015e98:	b25b      	sxtb	r3, r3
 8015e9a:	2207      	movs	r2, #7
 8015e9c:	2100      	movs	r1, #0
 8015e9e:	0018      	movs	r0, r3
 8015ea0:	f7fe fa6e 	bl	8014380 <RegionCommonValueInRange>
 8015ea4:	1e03      	subs	r3, r0, #0
 8015ea6:	d103      	bne.n	8015eb0 <RegionEU433ChannelAdd+0x60>
    {
        drInvalid = true;
 8015ea8:	230f      	movs	r3, #15
 8015eaa:	18fb      	adds	r3, r7, r3
 8015eac:	2201      	movs	r2, #1
 8015eae:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	7a1b      	ldrb	r3, [r3, #8]
 8015eb6:	b25b      	sxtb	r3, r3
 8015eb8:	111b      	asrs	r3, r3, #4
 8015eba:	b25b      	sxtb	r3, r3
 8015ebc:	2207      	movs	r2, #7
 8015ebe:	2100      	movs	r1, #0
 8015ec0:	0018      	movs	r0, r3
 8015ec2:	f7fe fa5d 	bl	8014380 <RegionCommonValueInRange>
 8015ec6:	1e03      	subs	r3, r0, #0
 8015ec8:	d103      	bne.n	8015ed2 <RegionEU433ChannelAdd+0x82>
    {
        drInvalid = true;
 8015eca:	230f      	movs	r3, #15
 8015ecc:	18fb      	adds	r3, r7, r3
 8015ece:	2201      	movs	r2, #1
 8015ed0:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	7a1b      	ldrb	r3, [r3, #8]
 8015ed8:	011b      	lsls	r3, r3, #4
 8015eda:	b25b      	sxtb	r3, r3
 8015edc:	111b      	asrs	r3, r3, #4
 8015ede:	b25a      	sxtb	r2, r3
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	7a1b      	ldrb	r3, [r3, #8]
 8015ee6:	b25b      	sxtb	r3, r3
 8015ee8:	111b      	asrs	r3, r3, #4
 8015eea:	b25b      	sxtb	r3, r3
 8015eec:	429a      	cmp	r2, r3
 8015eee:	dd03      	ble.n	8015ef8 <RegionEU433ChannelAdd+0xa8>
    {
        drInvalid = true;
 8015ef0:	230f      	movs	r3, #15
 8015ef2:	18fb      	adds	r3, r7, r3
 8015ef4:	2201      	movs	r2, #1
 8015ef6:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8015ef8:	230e      	movs	r3, #14
 8015efa:	18fb      	adds	r3, r7, r3
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	2201      	movs	r2, #1
 8015f00:	4053      	eors	r3, r2
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d010      	beq.n	8015f2a <RegionEU433ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	0018      	movs	r0, r3
 8015f10:	f7fe ff1a 	bl	8014d48 <VerifyRfFreq>
 8015f14:	0003      	movs	r3, r0
 8015f16:	001a      	movs	r2, r3
 8015f18:	2301      	movs	r3, #1
 8015f1a:	4053      	eors	r3, r2
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d003      	beq.n	8015f2a <RegionEU433ChannelAdd+0xda>
        {
            freqInvalid = true;
 8015f22:	230e      	movs	r3, #14
 8015f24:	18fb      	adds	r3, r7, r3
 8015f26:	2201      	movs	r2, #1
 8015f28:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015f2a:	230f      	movs	r3, #15
 8015f2c:	18fb      	adds	r3, r7, r3
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d006      	beq.n	8015f42 <RegionEU433ChannelAdd+0xf2>
 8015f34:	230e      	movs	r3, #14
 8015f36:	18fb      	adds	r3, r7, r3
 8015f38:	781b      	ldrb	r3, [r3, #0]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d001      	beq.n	8015f42 <RegionEU433ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015f3e:	2306      	movs	r3, #6
 8015f40:	e03a      	b.n	8015fb8 <RegionEU433ChannelAdd+0x168>
    }
    if( drInvalid == true )
 8015f42:	230f      	movs	r3, #15
 8015f44:	18fb      	adds	r3, r7, r3
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d001      	beq.n	8015f50 <RegionEU433ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015f4c:	2305      	movs	r3, #5
 8015f4e:	e033      	b.n	8015fb8 <RegionEU433ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8015f50:	230e      	movs	r3, #14
 8015f52:	18fb      	adds	r3, r7, r3
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d001      	beq.n	8015f5e <RegionEU433ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015f5a:	2304      	movs	r3, #4
 8015f5c:	e02c      	b.n	8015fb8 <RegionEU433ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8015f5e:	200d      	movs	r0, #13
 8015f60:	0004      	movs	r4, r0
 8015f62:	183b      	adds	r3, r7, r0
 8015f64:	781a      	ldrb	r2, [r3, #0]
 8015f66:	0013      	movs	r3, r2
 8015f68:	005b      	lsls	r3, r3, #1
 8015f6a:	189b      	adds	r3, r3, r2
 8015f6c:	009b      	lsls	r3, r3, #2
 8015f6e:	4a14      	ldr	r2, [pc, #80]	; (8015fc0 <RegionEU433ChannelAdd+0x170>)
 8015f70:	1898      	adds	r0, r3, r2
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	220c      	movs	r2, #12
 8015f78:	0019      	movs	r1, r3
 8015f7a:	f006 feaf 	bl	801ccdc <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8015f7e:	0020      	movs	r0, r4
 8015f80:	183b      	adds	r3, r7, r0
 8015f82:	781a      	ldrb	r2, [r3, #0]
 8015f84:	490e      	ldr	r1, [pc, #56]	; (8015fc0 <RegionEU433ChannelAdd+0x170>)
 8015f86:	0013      	movs	r3, r2
 8015f88:	005b      	lsls	r3, r3, #1
 8015f8a:	189b      	adds	r3, r3, r2
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	18cb      	adds	r3, r1, r3
 8015f90:	3309      	adds	r3, #9
 8015f92:	2200      	movs	r2, #0
 8015f94:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8015f96:	4b0a      	ldr	r3, [pc, #40]	; (8015fc0 <RegionEU433ChannelAdd+0x170>)
 8015f98:	22d0      	movs	r2, #208	; 0xd0
 8015f9a:	5a9b      	ldrh	r3, [r3, r2]
 8015f9c:	b21a      	sxth	r2, r3
 8015f9e:	183b      	adds	r3, r7, r0
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2101      	movs	r1, #1
 8015fa4:	4099      	lsls	r1, r3
 8015fa6:	000b      	movs	r3, r1
 8015fa8:	b21b      	sxth	r3, r3
 8015faa:	4313      	orrs	r3, r2
 8015fac:	b21b      	sxth	r3, r3
 8015fae:	b299      	uxth	r1, r3
 8015fb0:	4b03      	ldr	r3, [pc, #12]	; (8015fc0 <RegionEU433ChannelAdd+0x170>)
 8015fb2:	22d0      	movs	r2, #208	; 0xd0
 8015fb4:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 8015fb6:	2300      	movs	r3, #0
}
 8015fb8:	0018      	movs	r0, r3
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	b005      	add	sp, #20
 8015fbe:	bd90      	pop	{r4, r7, pc}
 8015fc0:	20001438 	.word	0x20001438

08015fc4 <RegionEU433ChannelsRemove>:

bool RegionEU433ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015fc4:	b590      	push	{r4, r7, lr}
 8015fc6:	b085      	sub	sp, #20
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8015fcc:	210f      	movs	r1, #15
 8015fce:	187b      	adds	r3, r7, r1
 8015fd0:	687a      	ldr	r2, [r7, #4]
 8015fd2:	7812      	ldrb	r2, [r2, #0]
 8015fd4:	701a      	strb	r2, [r3, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 8015fd6:	187b      	adds	r3, r7, r1
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	2b02      	cmp	r3, #2
 8015fdc:	d801      	bhi.n	8015fe2 <RegionEU433ChannelsRemove+0x1e>
    {
        return false;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	e015      	b.n	801600e <RegionEU433ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015fe2:	240f      	movs	r4, #15
 8015fe4:	193b      	adds	r3, r7, r4
 8015fe6:	781a      	ldrb	r2, [r3, #0]
 8015fe8:	490b      	ldr	r1, [pc, #44]	; (8016018 <RegionEU433ChannelsRemove+0x54>)
 8015fea:	0013      	movs	r3, r2
 8015fec:	005b      	lsls	r3, r3, #1
 8015fee:	189b      	adds	r3, r3, r2
 8015ff0:	009b      	lsls	r3, r3, #2
 8015ff2:	18cb      	adds	r3, r1, r3
 8015ff4:	220c      	movs	r2, #12
 8015ff6:	2100      	movs	r1, #0
 8015ff8:	0018      	movs	r0, r3
 8015ffa:	f00f ff99 	bl	8025f30 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU433_MAX_NB_CHANNELS );
 8015ffe:	193b      	adds	r3, r7, r4
 8016000:	7819      	ldrb	r1, [r3, #0]
 8016002:	4b06      	ldr	r3, [pc, #24]	; (801601c <RegionEU433ChannelsRemove+0x58>)
 8016004:	2210      	movs	r2, #16
 8016006:	0018      	movs	r0, r3
 8016008:	f7fe f9e0 	bl	80143cc <RegionCommonChanDisable>
 801600c:	0003      	movs	r3, r0
}
 801600e:	0018      	movs	r0, r3
 8016010:	46bd      	mov	sp, r7
 8016012:	b005      	add	sp, #20
 8016014:	bd90      	pop	{r4, r7, pc}
 8016016:	46c0      	nop			; (mov r8, r8)
 8016018:	20001438 	.word	0x20001438
 801601c:	20001508 	.word	0x20001508

08016020 <RegionEU433ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016020:	b590      	push	{r4, r7, lr}
 8016022:	b085      	sub	sp, #20
 8016024:	af00      	add	r7, sp, #0
 8016026:	0004      	movs	r4, r0
 8016028:	0008      	movs	r0, r1
 801602a:	0011      	movs	r1, r2
 801602c:	1dfb      	adds	r3, r7, #7
 801602e:	1c22      	adds	r2, r4, #0
 8016030:	701a      	strb	r2, [r3, #0]
 8016032:	1dbb      	adds	r3, r7, #6
 8016034:	1c02      	adds	r2, r0, #0
 8016036:	701a      	strb	r2, [r3, #0]
 8016038:	1d7b      	adds	r3, r7, #5
 801603a:	1c0a      	adds	r2, r1, #0
 801603c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801603e:	1dbb      	adds	r3, r7, #6
 8016040:	781a      	ldrb	r2, [r3, #0]
 8016042:	1d7b      	adds	r3, r7, #5
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	1ad3      	subs	r3, r2, r3
 8016048:	b2da      	uxtb	r2, r3
 801604a:	210f      	movs	r1, #15
 801604c:	187b      	adds	r3, r7, r1
 801604e:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8016050:	187b      	adds	r3, r7, r1
 8016052:	781b      	ldrb	r3, [r3, #0]
 8016054:	2b7f      	cmp	r3, #127	; 0x7f
 8016056:	d903      	bls.n	8016060 <RegionEU433ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8016058:	230f      	movs	r3, #15
 801605a:	18fb      	adds	r3, r7, r3
 801605c:	2200      	movs	r2, #0
 801605e:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8016060:	230f      	movs	r3, #15
 8016062:	18fb      	adds	r3, r7, r3
 8016064:	781b      	ldrb	r3, [r3, #0]
}
 8016066:	0018      	movs	r0, r3
 8016068:	46bd      	mov	sp, r7
 801606a:	b005      	add	sp, #20
 801606c:	bd90      	pop	{r4, r7, pc}

0801606e <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801606e:	b580      	push	{r7, lr}
 8016070:	b084      	sub	sp, #16
 8016072:	af00      	add	r7, sp, #0
 8016074:	0002      	movs	r2, r0
 8016076:	1dfb      	adds	r3, r7, #7
 8016078:	701a      	strb	r2, [r3, #0]
 801607a:	1dbb      	adds	r3, r7, #6
 801607c:	1c0a      	adds	r2, r1, #0
 801607e:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8016080:	230f      	movs	r3, #15
 8016082:	18fb      	adds	r3, r7, r3
 8016084:	2200      	movs	r2, #0
 8016086:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8016088:	1dfa      	adds	r2, r7, #7
 801608a:	1dbb      	adds	r3, r7, #6
 801608c:	7812      	ldrb	r2, [r2, #0]
 801608e:	b252      	sxtb	r2, r2
 8016090:	781b      	ldrb	r3, [r3, #0]
 8016092:	b25b      	sxtb	r3, r3
 8016094:	429a      	cmp	r2, r3
 8016096:	d105      	bne.n	80160a4 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8016098:	230f      	movs	r3, #15
 801609a:	18fb      	adds	r3, r7, r3
 801609c:	1dba      	adds	r2, r7, #6
 801609e:	7812      	ldrb	r2, [r2, #0]
 80160a0:	701a      	strb	r2, [r3, #0]
 80160a2:	e005      	b.n	80160b0 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 80160a4:	1dfb      	adds	r3, r7, #7
 80160a6:	781a      	ldrb	r2, [r3, #0]
 80160a8:	230f      	movs	r3, #15
 80160aa:	18fb      	adds	r3, r7, r3
 80160ac:	3a01      	subs	r2, #1
 80160ae:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80160b0:	230f      	movs	r3, #15
 80160b2:	18fb      	adds	r3, r7, r3
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	b25b      	sxtb	r3, r3
}
 80160b8:	0018      	movs	r0, r3
 80160ba:	46bd      	mov	sp, r7
 80160bc:	b004      	add	sp, #16
 80160be:	bd80      	pop	{r7, pc}

080160c0 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 80160c8:	4b09      	ldr	r3, [pc, #36]	; (80160f0 <GetBandwidth+0x30>)
 80160ca:	687a      	ldr	r2, [r7, #4]
 80160cc:	0092      	lsls	r2, r2, #2
 80160ce:	58d3      	ldr	r3, [r2, r3]
 80160d0:	4a08      	ldr	r2, [pc, #32]	; (80160f4 <GetBandwidth+0x34>)
 80160d2:	4293      	cmp	r3, r2
 80160d4:	d004      	beq.n	80160e0 <GetBandwidth+0x20>
 80160d6:	4a08      	ldr	r2, [pc, #32]	; (80160f8 <GetBandwidth+0x38>)
 80160d8:	4293      	cmp	r3, r2
 80160da:	d003      	beq.n	80160e4 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80160dc:	2300      	movs	r3, #0
 80160de:	e002      	b.n	80160e6 <GetBandwidth+0x26>
        case 250000:
            return 1;
 80160e0:	2301      	movs	r3, #1
 80160e2:	e000      	b.n	80160e6 <GetBandwidth+0x26>
        case 500000:
            return 2;
 80160e4:	2302      	movs	r3, #2
    }
}
 80160e6:	0018      	movs	r0, r3
 80160e8:	46bd      	mov	sp, r7
 80160ea:	b002      	add	sp, #8
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	46c0      	nop			; (mov r8, r8)
 80160f0:	080283f0 	.word	0x080283f0
 80160f4:	0003d090 	.word	0x0003d090
 80160f8:	0007a120 	.word	0x0007a120

080160fc <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80160fc:	b590      	push	{r4, r7, lr}
 80160fe:	b085      	sub	sp, #20
 8016100:	af00      	add	r7, sp, #0
 8016102:	0004      	movs	r4, r0
 8016104:	0008      	movs	r0, r1
 8016106:	0011      	movs	r1, r2
 8016108:	603b      	str	r3, [r7, #0]
 801610a:	1dfb      	adds	r3, r7, #7
 801610c:	1c22      	adds	r2, r4, #0
 801610e:	701a      	strb	r2, [r3, #0]
 8016110:	1dbb      	adds	r3, r7, #6
 8016112:	1c02      	adds	r2, r0, #0
 8016114:	701a      	strb	r2, [r3, #0]
 8016116:	1d7b      	adds	r3, r7, #5
 8016118:	1c0a      	adds	r2, r1, #0
 801611a:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 801611c:	210f      	movs	r1, #15
 801611e:	187b      	adds	r3, r7, r1
 8016120:	1dfa      	adds	r2, r7, #7
 8016122:	7812      	ldrb	r2, [r2, #0]
 8016124:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8016126:	187a      	adds	r2, r7, r1
 8016128:	1dbb      	adds	r3, r7, #6
 801612a:	1df9      	adds	r1, r7, #7
 801612c:	780c      	ldrb	r4, [r1, #0]
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	b258      	sxtb	r0, r3
 8016132:	b261      	sxtb	r1, r4
 8016134:	4288      	cmp	r0, r1
 8016136:	da00      	bge.n	801613a <LimitTxPower+0x3e>
 8016138:	1c23      	adds	r3, r4, #0
 801613a:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 801613c:	230f      	movs	r3, #15
 801613e:	18fb      	adds	r3, r7, r3
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	b25b      	sxtb	r3, r3
}
 8016144:	0018      	movs	r0, r3
 8016146:	46bd      	mov	sp, r7
 8016148:	b005      	add	sp, #20
 801614a:	bd90      	pop	{r4, r7, pc}

0801614c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b082      	sub	sp, #8
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
 8016154:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016156:	4b2e      	ldr	r3, [pc, #184]	; (8016210 <VerifyRfFreq+0xc4>)
 8016158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801615a:	687a      	ldr	r2, [r7, #4]
 801615c:	0010      	movs	r0, r2
 801615e:	4798      	blx	r3
 8016160:	0003      	movs	r3, r0
 8016162:	001a      	movs	r2, r3
 8016164:	2301      	movs	r3, #1
 8016166:	4053      	eors	r3, r2
 8016168:	b2db      	uxtb	r3, r3
 801616a:	2b00      	cmp	r3, #0
 801616c:	d001      	beq.n	8016172 <VerifyRfFreq+0x26>
    {
        return false;
 801616e:	2300      	movs	r3, #0
 8016170:	e04a      	b.n	8016208 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	4a27      	ldr	r2, [pc, #156]	; (8016214 <VerifyRfFreq+0xc8>)
 8016176:	4293      	cmp	r3, r2
 8016178:	d907      	bls.n	801618a <VerifyRfFreq+0x3e>
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	4a26      	ldr	r2, [pc, #152]	; (8016218 <VerifyRfFreq+0xcc>)
 801617e:	4293      	cmp	r3, r2
 8016180:	d803      	bhi.n	801618a <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	2202      	movs	r2, #2
 8016186:	701a      	strb	r2, [r3, #0]
 8016188:	e03d      	b.n	8016206 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	4a22      	ldr	r2, [pc, #136]	; (8016218 <VerifyRfFreq+0xcc>)
 801618e:	4293      	cmp	r3, r2
 8016190:	d907      	bls.n	80161a2 <VerifyRfFreq+0x56>
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	4a21      	ldr	r2, [pc, #132]	; (801621c <VerifyRfFreq+0xd0>)
 8016196:	4293      	cmp	r3, r2
 8016198:	d803      	bhi.n	80161a2 <VerifyRfFreq+0x56>
    {
        *band = 0;
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	2200      	movs	r2, #0
 801619e:	701a      	strb	r2, [r3, #0]
 80161a0:	e031      	b.n	8016206 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	4a1d      	ldr	r2, [pc, #116]	; (801621c <VerifyRfFreq+0xd0>)
 80161a6:	4293      	cmp	r3, r2
 80161a8:	d907      	bls.n	80161ba <VerifyRfFreq+0x6e>
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	4a1c      	ldr	r2, [pc, #112]	; (8016220 <VerifyRfFreq+0xd4>)
 80161ae:	4293      	cmp	r3, r2
 80161b0:	d803      	bhi.n	80161ba <VerifyRfFreq+0x6e>
    {
        *band = 1;
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	2201      	movs	r2, #1
 80161b6:	701a      	strb	r2, [r3, #0]
 80161b8:	e025      	b.n	8016206 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	4a19      	ldr	r2, [pc, #100]	; (8016224 <VerifyRfFreq+0xd8>)
 80161be:	4293      	cmp	r3, r2
 80161c0:	d907      	bls.n	80161d2 <VerifyRfFreq+0x86>
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	4a18      	ldr	r2, [pc, #96]	; (8016228 <VerifyRfFreq+0xdc>)
 80161c6:	4293      	cmp	r3, r2
 80161c8:	d803      	bhi.n	80161d2 <VerifyRfFreq+0x86>
    {
        *band = 2;
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	2202      	movs	r2, #2
 80161ce:	701a      	strb	r2, [r3, #0]
 80161d0:	e019      	b.n	8016206 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	4a15      	ldr	r2, [pc, #84]	; (801622c <VerifyRfFreq+0xe0>)
 80161d6:	4293      	cmp	r3, r2
 80161d8:	d907      	bls.n	80161ea <VerifyRfFreq+0x9e>
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	4a14      	ldr	r2, [pc, #80]	; (8016230 <VerifyRfFreq+0xe4>)
 80161de:	4293      	cmp	r3, r2
 80161e0:	d803      	bhi.n	80161ea <VerifyRfFreq+0x9e>
    {
        *band = 3;
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	2203      	movs	r2, #3
 80161e6:	701a      	strb	r2, [r3, #0]
 80161e8:	e00d      	b.n	8016206 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	4a11      	ldr	r2, [pc, #68]	; (8016234 <VerifyRfFreq+0xe8>)
 80161ee:	4293      	cmp	r3, r2
 80161f0:	d907      	bls.n	8016202 <VerifyRfFreq+0xb6>
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	4a10      	ldr	r2, [pc, #64]	; (8016238 <VerifyRfFreq+0xec>)
 80161f6:	4293      	cmp	r3, r2
 80161f8:	d803      	bhi.n	8016202 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 80161fa:	683b      	ldr	r3, [r7, #0]
 80161fc:	2204      	movs	r2, #4
 80161fe:	701a      	strb	r2, [r3, #0]
 8016200:	e001      	b.n	8016206 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8016202:	2300      	movs	r3, #0
 8016204:	e000      	b.n	8016208 <VerifyRfFreq+0xbc>
    }
    return true;
 8016206:	2301      	movs	r3, #1
}
 8016208:	0018      	movs	r0, r3
 801620a:	46bd      	mov	sp, r7
 801620c:	b002      	add	sp, #8
 801620e:	bd80      	pop	{r7, pc}
 8016210:	08028964 	.word	0x08028964
 8016214:	337055bf 	.word	0x337055bf
 8016218:	338eda3f 	.word	0x338eda3f
 801621c:	33bca100 	.word	0x33bca100
 8016220:	33c5c8c0 	.word	0x33c5c8c0
 8016224:	33c74f5f 	.word	0x33c74f5f
 8016228:	33cef080 	.word	0x33cef080
 801622c:	33d1fdbf 	.word	0x33d1fdbf
 8016230:	33d5ce50 	.word	0x33d5ce50
 8016234:	33d6919f 	.word	0x33d6919f
 8016238:	33db2580 	.word	0x33db2580

0801623c <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 801623c:	b5b0      	push	{r4, r5, r7, lr}
 801623e:	b086      	sub	sp, #24
 8016240:	af00      	add	r7, sp, #0
 8016242:	60ba      	str	r2, [r7, #8]
 8016244:	607b      	str	r3, [r7, #4]
 8016246:	230f      	movs	r3, #15
 8016248:	18fb      	adds	r3, r7, r3
 801624a:	1c02      	adds	r2, r0, #0
 801624c:	701a      	strb	r2, [r3, #0]
 801624e:	230e      	movs	r3, #14
 8016250:	18fb      	adds	r3, r7, r3
 8016252:	1c0a      	adds	r2, r1, #0
 8016254:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8016256:	2317      	movs	r3, #23
 8016258:	18fb      	adds	r3, r7, r3
 801625a:	2200      	movs	r2, #0
 801625c:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 801625e:	2316      	movs	r3, #22
 8016260:	18fb      	adds	r3, r7, r3
 8016262:	2200      	movs	r2, #0
 8016264:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8016266:	2315      	movs	r3, #21
 8016268:	18fb      	adds	r3, r7, r3
 801626a:	2200      	movs	r2, #0
 801626c:	701a      	strb	r2, [r3, #0]
 801626e:	2314      	movs	r3, #20
 8016270:	18fb      	adds	r3, r7, r3
 8016272:	2200      	movs	r2, #0
 8016274:	701a      	strb	r2, [r3, #0]
 8016276:	e0b4      	b.n	80163e2 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016278:	2313      	movs	r3, #19
 801627a:	18fb      	adds	r3, r7, r3
 801627c:	2200      	movs	r2, #0
 801627e:	701a      	strb	r2, [r3, #0]
 8016280:	e09d      	b.n	80163be <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8016282:	2314      	movs	r3, #20
 8016284:	18fb      	adds	r3, r7, r3
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	005b      	lsls	r3, r3, #1
 801628a:	68ba      	ldr	r2, [r7, #8]
 801628c:	18d3      	adds	r3, r2, r3
 801628e:	881b      	ldrh	r3, [r3, #0]
 8016290:	001a      	movs	r2, r3
 8016292:	2313      	movs	r3, #19
 8016294:	18fb      	adds	r3, r7, r3
 8016296:	781b      	ldrb	r3, [r3, #0]
 8016298:	411a      	asrs	r2, r3
 801629a:	0013      	movs	r3, r2
 801629c:	2201      	movs	r2, #1
 801629e:	4013      	ands	r3, r2
 80162a0:	d100      	bne.n	80162a4 <CountNbOfEnabledChannels+0x68>
 80162a2:	e086      	b.n	80163b2 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 80162a4:	2315      	movs	r3, #21
 80162a6:	18fb      	adds	r3, r7, r3
 80162a8:	781a      	ldrb	r2, [r3, #0]
 80162aa:	2313      	movs	r3, #19
 80162ac:	18fb      	adds	r3, r7, r3
 80162ae:	781b      	ldrb	r3, [r3, #0]
 80162b0:	18d3      	adds	r3, r2, r3
 80162b2:	001a      	movs	r2, r3
 80162b4:	0013      	movs	r3, r2
 80162b6:	005b      	lsls	r3, r3, #1
 80162b8:	189b      	adds	r3, r3, r2
 80162ba:	009b      	lsls	r3, r3, #2
 80162bc:	001a      	movs	r2, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	189b      	adds	r3, r3, r2
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d06f      	beq.n	80163a8 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 80162c8:	230f      	movs	r3, #15
 80162ca:	18fb      	adds	r3, r7, r3
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	2201      	movs	r2, #1
 80162d0:	4053      	eors	r3, r2
 80162d2:	b2db      	uxtb	r3, r3
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d008      	beq.n	80162ea <CountNbOfEnabledChannels+0xae>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 80162d8:	2313      	movs	r3, #19
 80162da:	18fb      	adds	r3, r7, r3
 80162dc:	781b      	ldrb	r3, [r3, #0]
 80162de:	2207      	movs	r2, #7
 80162e0:	411a      	asrs	r2, r3
 80162e2:	0013      	movs	r3, r2
 80162e4:	2201      	movs	r2, #1
 80162e6:	4013      	ands	r3, r2
 80162e8:	d060      	beq.n	80163ac <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 80162ea:	230e      	movs	r3, #14
 80162ec:	18fb      	adds	r3, r7, r3
 80162ee:	2000      	movs	r0, #0
 80162f0:	5618      	ldrsb	r0, [r3, r0]
 80162f2:	2415      	movs	r4, #21
 80162f4:	193b      	adds	r3, r7, r4
 80162f6:	781a      	ldrb	r2, [r3, #0]
 80162f8:	2513      	movs	r5, #19
 80162fa:	197b      	adds	r3, r7, r5
 80162fc:	781b      	ldrb	r3, [r3, #0]
 80162fe:	18d3      	adds	r3, r2, r3
 8016300:	001a      	movs	r2, r3
 8016302:	0013      	movs	r3, r2
 8016304:	005b      	lsls	r3, r3, #1
 8016306:	189b      	adds	r3, r3, r2
 8016308:	009b      	lsls	r3, r3, #2
 801630a:	001a      	movs	r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	189b      	adds	r3, r3, r2
 8016310:	7a1b      	ldrb	r3, [r3, #8]
 8016312:	011b      	lsls	r3, r3, #4
 8016314:	b25b      	sxtb	r3, r3
 8016316:	111b      	asrs	r3, r3, #4
 8016318:	b25b      	sxtb	r3, r3
 801631a:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 801631c:	193b      	adds	r3, r7, r4
 801631e:	781a      	ldrb	r2, [r3, #0]
 8016320:	197b      	adds	r3, r7, r5
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	18d3      	adds	r3, r2, r3
 8016326:	001a      	movs	r2, r3
 8016328:	0013      	movs	r3, r2
 801632a:	005b      	lsls	r3, r3, #1
 801632c:	189b      	adds	r3, r3, r2
 801632e:	009b      	lsls	r3, r3, #2
 8016330:	001a      	movs	r2, r3
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	189b      	adds	r3, r3, r2
 8016336:	7a1b      	ldrb	r3, [r3, #8]
 8016338:	b25b      	sxtb	r3, r3
 801633a:	111b      	asrs	r3, r3, #4
 801633c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801633e:	001a      	movs	r2, r3
 8016340:	f7fe f81e 	bl	8014380 <RegionCommonValueInRange>
 8016344:	1e03      	subs	r3, r0, #0
 8016346:	d033      	beq.n	80163b0 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8016348:	2315      	movs	r3, #21
 801634a:	18fb      	adds	r3, r7, r3
 801634c:	781a      	ldrb	r2, [r3, #0]
 801634e:	2313      	movs	r3, #19
 8016350:	18fb      	adds	r3, r7, r3
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	18d3      	adds	r3, r2, r3
 8016356:	001a      	movs	r2, r3
 8016358:	0013      	movs	r3, r2
 801635a:	005b      	lsls	r3, r3, #1
 801635c:	189b      	adds	r3, r3, r2
 801635e:	009b      	lsls	r3, r3, #2
 8016360:	001a      	movs	r2, r3
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	189b      	adds	r3, r3, r2
 8016366:	7a5b      	ldrb	r3, [r3, #9]
 8016368:	011b      	lsls	r3, r3, #4
 801636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801636c:	18d3      	adds	r3, r2, r3
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d006      	beq.n	8016382 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8016374:	2116      	movs	r1, #22
 8016376:	187b      	adds	r3, r7, r1
 8016378:	781a      	ldrb	r2, [r3, #0]
 801637a:	187b      	adds	r3, r7, r1
 801637c:	3201      	adds	r2, #1
 801637e:	701a      	strb	r2, [r3, #0]
                    continue;
 8016380:	e017      	b.n	80163b2 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8016382:	2217      	movs	r2, #23
 8016384:	18bb      	adds	r3, r7, r2
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	18ba      	adds	r2, r7, r2
 801638a:	1c59      	adds	r1, r3, #1
 801638c:	7011      	strb	r1, [r2, #0]
 801638e:	001a      	movs	r2, r3
 8016390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016392:	189b      	adds	r3, r3, r2
 8016394:	2215      	movs	r2, #21
 8016396:	18b9      	adds	r1, r7, r2
 8016398:	2213      	movs	r2, #19
 801639a:	18ba      	adds	r2, r7, r2
 801639c:	7809      	ldrb	r1, [r1, #0]
 801639e:	7812      	ldrb	r2, [r2, #0]
 80163a0:	188a      	adds	r2, r1, r2
 80163a2:	b2d2      	uxtb	r2, r2
 80163a4:	701a      	strb	r2, [r3, #0]
 80163a6:	e004      	b.n	80163b2 <CountNbOfEnabledChannels+0x176>
                    continue;
 80163a8:	46c0      	nop			; (mov r8, r8)
 80163aa:	e002      	b.n	80163b2 <CountNbOfEnabledChannels+0x176>
                        continue;
 80163ac:	46c0      	nop			; (mov r8, r8)
 80163ae:	e000      	b.n	80163b2 <CountNbOfEnabledChannels+0x176>
                    continue;
 80163b0:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 80163b2:	2113      	movs	r1, #19
 80163b4:	187b      	adds	r3, r7, r1
 80163b6:	781a      	ldrb	r2, [r3, #0]
 80163b8:	187b      	adds	r3, r7, r1
 80163ba:	3201      	adds	r2, #1
 80163bc:	701a      	strb	r2, [r3, #0]
 80163be:	2313      	movs	r3, #19
 80163c0:	18fb      	adds	r3, r7, r3
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	2b0f      	cmp	r3, #15
 80163c6:	d800      	bhi.n	80163ca <CountNbOfEnabledChannels+0x18e>
 80163c8:	e75b      	b.n	8016282 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 80163ca:	2215      	movs	r2, #21
 80163cc:	18bb      	adds	r3, r7, r2
 80163ce:	18ba      	adds	r2, r7, r2
 80163d0:	7812      	ldrb	r2, [r2, #0]
 80163d2:	3210      	adds	r2, #16
 80163d4:	701a      	strb	r2, [r3, #0]
 80163d6:	2114      	movs	r1, #20
 80163d8:	187b      	adds	r3, r7, r1
 80163da:	781a      	ldrb	r2, [r3, #0]
 80163dc:	187b      	adds	r3, r7, r1
 80163de:	3201      	adds	r2, #1
 80163e0:	701a      	strb	r2, [r3, #0]
 80163e2:	2315      	movs	r3, #21
 80163e4:	18fb      	adds	r3, r7, r3
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	2b0f      	cmp	r3, #15
 80163ea:	d800      	bhi.n	80163ee <CountNbOfEnabledChannels+0x1b2>
 80163ec:	e744      	b.n	8016278 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 80163ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f0:	2216      	movs	r2, #22
 80163f2:	18ba      	adds	r2, r7, r2
 80163f4:	7812      	ldrb	r2, [r2, #0]
 80163f6:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 80163f8:	2317      	movs	r3, #23
 80163fa:	18fb      	adds	r3, r7, r3
 80163fc:	781b      	ldrb	r3, [r3, #0]
}
 80163fe:	0018      	movs	r0, r3
 8016400:	46bd      	mov	sp, r7
 8016402:	b006      	add	sp, #24
 8016404:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016408 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b084      	sub	sp, #16
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016410:	2308      	movs	r3, #8
 8016412:	18fb      	adds	r3, r7, r3
 8016414:	2200      	movs	r2, #0
 8016416:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	2b34      	cmp	r3, #52	; 0x34
 801641e:	d900      	bls.n	8016422 <RegionEU868GetPhyParam+0x1a>
 8016420:	e0ce      	b.n	80165c0 <RegionEU868GetPhyParam+0x1b8>
 8016422:	009a      	lsls	r2, r3, #2
 8016424:	4b6e      	ldr	r3, [pc, #440]	; (80165e0 <RegionEU868GetPhyParam+0x1d8>)
 8016426:	18d3      	adds	r3, r2, r3
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801642c:	2308      	movs	r3, #8
 801642e:	18fb      	adds	r3, r7, r3
 8016430:	2200      	movs	r2, #0
 8016432:	601a      	str	r2, [r3, #0]
            break;
 8016434:	e0c5      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8016436:	2308      	movs	r3, #8
 8016438:	18fb      	adds	r3, r7, r3
 801643a:	2200      	movs	r2, #0
 801643c:	601a      	str	r2, [r3, #0]
            break;
 801643e:	e0c0      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016440:	2308      	movs	r3, #8
 8016442:	18fb      	adds	r3, r7, r3
 8016444:	2200      	movs	r2, #0
 8016446:	601a      	str	r2, [r3, #0]
            break;
 8016448:	e0bb      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	785b      	ldrb	r3, [r3, #1]
 801644e:	b25b      	sxtb	r3, r3
 8016450:	2100      	movs	r1, #0
 8016452:	0018      	movs	r0, r3
 8016454:	f7ff fe0b 	bl	801606e <GetNextLowerTxDr>
 8016458:	0003      	movs	r3, r0
 801645a:	001a      	movs	r2, r3
 801645c:	2308      	movs	r3, #8
 801645e:	18fb      	adds	r3, r7, r3
 8016460:	601a      	str	r2, [r3, #0]
            break;
 8016462:	e0ae      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016464:	2308      	movs	r3, #8
 8016466:	18fb      	adds	r3, r7, r3
 8016468:	2200      	movs	r2, #0
 801646a:	601a      	str	r2, [r3, #0]
            break;
 801646c:	e0a9      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801646e:	2308      	movs	r3, #8
 8016470:	18fb      	adds	r3, r7, r3
 8016472:	2200      	movs	r2, #0
 8016474:	601a      	str	r2, [r3, #0]
            break;
 8016476:	e0a4      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8016478:	2308      	movs	r3, #8
 801647a:	18fb      	adds	r3, r7, r3
 801647c:	2240      	movs	r2, #64	; 0x40
 801647e:	601a      	str	r2, [r3, #0]
            break;
 8016480:	e09f      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8016482:	2308      	movs	r3, #8
 8016484:	18fb      	adds	r3, r7, r3
 8016486:	2220      	movs	r2, #32
 8016488:	601a      	str	r2, [r3, #0]
            break;
 801648a:	e09a      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	785b      	ldrb	r3, [r3, #1]
 8016490:	b25b      	sxtb	r3, r3
 8016492:	001a      	movs	r2, r3
 8016494:	4b53      	ldr	r3, [pc, #332]	; (80165e4 <RegionEU868GetPhyParam+0x1dc>)
 8016496:	5c9b      	ldrb	r3, [r3, r2]
 8016498:	001a      	movs	r2, r3
 801649a:	2308      	movs	r3, #8
 801649c:	18fb      	adds	r3, r7, r3
 801649e:	601a      	str	r2, [r3, #0]
            break;
 80164a0:	e08f      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	785b      	ldrb	r3, [r3, #1]
 80164a6:	b25b      	sxtb	r3, r3
 80164a8:	001a      	movs	r2, r3
 80164aa:	4b4f      	ldr	r3, [pc, #316]	; (80165e8 <RegionEU868GetPhyParam+0x1e0>)
 80164ac:	5c9b      	ldrb	r3, [r3, r2]
 80164ae:	001a      	movs	r2, r3
 80164b0:	2308      	movs	r3, #8
 80164b2:	18fb      	adds	r3, r7, r3
 80164b4:	601a      	str	r2, [r3, #0]
            break;
 80164b6:	e084      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80164b8:	2308      	movs	r3, #8
 80164ba:	18fb      	adds	r3, r7, r3
 80164bc:	2201      	movs	r2, #1
 80164be:	601a      	str	r2, [r3, #0]
            break;
 80164c0:	e07f      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80164c2:	2308      	movs	r3, #8
 80164c4:	18fb      	adds	r3, r7, r3
 80164c6:	4a49      	ldr	r2, [pc, #292]	; (80165ec <RegionEU868GetPhyParam+0x1e4>)
 80164c8:	601a      	str	r2, [r3, #0]
            break;
 80164ca:	e07a      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 80164cc:	2308      	movs	r3, #8
 80164ce:	18fb      	adds	r3, r7, r3
 80164d0:	22fa      	movs	r2, #250	; 0xfa
 80164d2:	0092      	lsls	r2, r2, #2
 80164d4:	601a      	str	r2, [r3, #0]
            break;
 80164d6:	e074      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 80164d8:	2308      	movs	r3, #8
 80164da:	18fb      	adds	r3, r7, r3
 80164dc:	22fa      	movs	r2, #250	; 0xfa
 80164de:	00d2      	lsls	r2, r2, #3
 80164e0:	601a      	str	r2, [r3, #0]
            break;
 80164e2:	e06e      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 80164e4:	2308      	movs	r3, #8
 80164e6:	18fb      	adds	r3, r7, r3
 80164e8:	4a41      	ldr	r2, [pc, #260]	; (80165f0 <RegionEU868GetPhyParam+0x1e8>)
 80164ea:	601a      	str	r2, [r3, #0]
            break;
 80164ec:	e069      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 80164ee:	2308      	movs	r3, #8
 80164f0:	18fb      	adds	r3, r7, r3
 80164f2:	4a40      	ldr	r2, [pc, #256]	; (80165f4 <RegionEU868GetPhyParam+0x1ec>)
 80164f4:	601a      	str	r2, [r3, #0]
            break;
 80164f6:	e064      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 80164f8:	2308      	movs	r3, #8
 80164fa:	18fb      	adds	r3, r7, r3
 80164fc:	2280      	movs	r2, #128	; 0x80
 80164fe:	01d2      	lsls	r2, r2, #7
 8016500:	601a      	str	r2, [r3, #0]
            break;
 8016502:	e05e      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8016504:	23fa      	movs	r3, #250	; 0xfa
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	4a3b      	ldr	r2, [pc, #236]	; (80165f8 <RegionEU868GetPhyParam+0x1f0>)
 801650a:	0019      	movs	r1, r3
 801650c:	0010      	movs	r0, r2
 801650e:	f006 fbcf 	bl	801ccb0 <randr>
 8016512:	0003      	movs	r3, r0
 8016514:	22fa      	movs	r2, #250	; 0xfa
 8016516:	00d2      	lsls	r2, r2, #3
 8016518:	4694      	mov	ip, r2
 801651a:	4463      	add	r3, ip
 801651c:	001a      	movs	r2, r3
 801651e:	2308      	movs	r3, #8
 8016520:	18fb      	adds	r3, r7, r3
 8016522:	601a      	str	r2, [r3, #0]
            break;
 8016524:	e04d      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8016526:	2308      	movs	r3, #8
 8016528:	18fb      	adds	r3, r7, r3
 801652a:	2200      	movs	r2, #0
 801652c:	601a      	str	r2, [r3, #0]
            break;
 801652e:	e048      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016530:	2308      	movs	r3, #8
 8016532:	18fb      	adds	r3, r7, r3
 8016534:	4a31      	ldr	r2, [pc, #196]	; (80165fc <RegionEU868GetPhyParam+0x1f4>)
 8016536:	601a      	str	r2, [r3, #0]
            break;
 8016538:	e043      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801653a:	2308      	movs	r3, #8
 801653c:	18fb      	adds	r3, r7, r3
 801653e:	2200      	movs	r2, #0
 8016540:	601a      	str	r2, [r3, #0]
            break;
 8016542:	e03e      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8016544:	2308      	movs	r3, #8
 8016546:	18fb      	adds	r3, r7, r3
 8016548:	4a2d      	ldr	r2, [pc, #180]	; (8016600 <RegionEU868GetPhyParam+0x1f8>)
 801654a:	601a      	str	r2, [r3, #0]
            break;
 801654c:	e039      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801654e:	2308      	movs	r3, #8
 8016550:	18fb      	adds	r3, r7, r3
 8016552:	4a2c      	ldr	r2, [pc, #176]	; (8016604 <RegionEU868GetPhyParam+0x1fc>)
 8016554:	601a      	str	r2, [r3, #0]
            break;
 8016556:	e034      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016558:	2308      	movs	r3, #8
 801655a:	18fb      	adds	r3, r7, r3
 801655c:	2210      	movs	r2, #16
 801655e:	601a      	str	r2, [r3, #0]
            break;
 8016560:	e02f      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8016562:	2308      	movs	r3, #8
 8016564:	18fb      	adds	r3, r7, r3
 8016566:	4a28      	ldr	r2, [pc, #160]	; (8016608 <RegionEU868GetPhyParam+0x200>)
 8016568:	601a      	str	r2, [r3, #0]
            break;
 801656a:	e02a      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 801656c:	2308      	movs	r3, #8
 801656e:	18fb      	adds	r3, r7, r3
 8016570:	2200      	movs	r2, #0
 8016572:	601a      	str	r2, [r3, #0]
            break;
 8016574:	e025      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016576:	2308      	movs	r3, #8
 8016578:	18fb      	adds	r3, r7, r3
 801657a:	2283      	movs	r2, #131	; 0x83
 801657c:	05d2      	lsls	r2, r2, #23
 801657e:	601a      	str	r2, [r3, #0]
            break;
 8016580:	e01f      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016582:	2308      	movs	r3, #8
 8016584:	18fb      	adds	r3, r7, r3
 8016586:	4a21      	ldr	r2, [pc, #132]	; (801660c <RegionEU868GetPhyParam+0x204>)
 8016588:	601a      	str	r2, [r3, #0]
            break;
 801658a:	e01a      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801658c:	2308      	movs	r3, #8
 801658e:	18fb      	adds	r3, r7, r3
 8016590:	4a1a      	ldr	r2, [pc, #104]	; (80165fc <RegionEU868GetPhyParam+0x1f4>)
 8016592:	601a      	str	r2, [r3, #0]
            break;
 8016594:	e015      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016596:	2108      	movs	r1, #8
 8016598:	187b      	adds	r3, r7, r1
 801659a:	2211      	movs	r2, #17
 801659c:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801659e:	187b      	adds	r3, r7, r1
 80165a0:	2202      	movs	r2, #2
 80165a2:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80165a4:	187b      	adds	r3, r7, r1
 80165a6:	2200      	movs	r2, #0
 80165a8:	709a      	strb	r2, [r3, #2]
            break;
 80165aa:	e00a      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80165ac:	2308      	movs	r3, #8
 80165ae:	18fb      	adds	r3, r7, r3
 80165b0:	2203      	movs	r2, #3
 80165b2:	601a      	str	r2, [r3, #0]
            break;
 80165b4:	e005      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80165b6:	2308      	movs	r3, #8
 80165b8:	18fb      	adds	r3, r7, r3
 80165ba:	2203      	movs	r2, #3
 80165bc:	601a      	str	r2, [r3, #0]
            break;
 80165be:	e000      	b.n	80165c2 <RegionEU868GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 80165c0:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80165c2:	210c      	movs	r1, #12
 80165c4:	187b      	adds	r3, r7, r1
 80165c6:	2208      	movs	r2, #8
 80165c8:	18ba      	adds	r2, r7, r2
 80165ca:	6812      	ldr	r2, [r2, #0]
 80165cc:	601a      	str	r2, [r3, #0]
 80165ce:	187b      	adds	r3, r7, r1
 80165d0:	2200      	movs	r2, #0
 80165d2:	681a      	ldr	r2, [r3, #0]
 80165d4:	0013      	movs	r3, r2
}
 80165d6:	0018      	movs	r0, r3
 80165d8:	46bd      	mov	sp, r7
 80165da:	b004      	add	sp, #16
 80165dc:	bd80      	pop	{r7, pc}
 80165de:	46c0      	nop			; (mov r8, r8)
 80165e0:	08028420 	.word	0x08028420
 80165e4:	08028410 	.word	0x08028410
 80165e8:	08028418 	.word	0x08028418
 80165ec:	00000bb8 	.word	0x00000bb8
 80165f0:	00001388 	.word	0x00001388
 80165f4:	00001770 	.word	0x00001770
 80165f8:	fffffc18 	.word	0xfffffc18
 80165fc:	33d3e608 	.word	0x33d3e608
 8016600:	2000161c 	.word	0x2000161c
 8016604:	2000161e 	.word	0x2000161e
 8016608:	2000150c 	.word	0x2000150c
 801660c:	4009999a 	.word	0x4009999a

08016610 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	7858      	ldrb	r0, [r3, #1]
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	781b      	ldrb	r3, [r3, #0]
 8016620:	0019      	movs	r1, r3
 8016622:	4a0a      	ldr	r2, [pc, #40]	; (801664c <RegionEU868SetBandTxDone+0x3c>)
 8016624:	000b      	movs	r3, r1
 8016626:	005b      	lsls	r3, r3, #1
 8016628:	185b      	adds	r3, r3, r1
 801662a:	009b      	lsls	r3, r3, #2
 801662c:	18d3      	adds	r3, r2, r3
 801662e:	3309      	adds	r3, #9
 8016630:	781b      	ldrb	r3, [r3, #0]
 8016632:	330c      	adds	r3, #12
 8016634:	011a      	lsls	r2, r3, #4
 8016636:	4b05      	ldr	r3, [pc, #20]	; (801664c <RegionEU868SetBandTxDone+0x3c>)
 8016638:	18d1      	adds	r1, r2, r3
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	001a      	movs	r2, r3
 8016640:	f7fd ff76 	bl	8014530 <RegionCommonSetBandTxDone>
}
 8016644:	46c0      	nop			; (mov r8, r8)
 8016646:	46bd      	mov	sp, r7
 8016648:	b002      	add	sp, #8
 801664a:	bd80      	pop	{r7, pc}
 801664c:	2000150c 	.word	0x2000150c

08016650 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016650:	b590      	push	{r4, r7, lr}
 8016652:	b097      	sub	sp, #92	; 0x5c
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016658:	2108      	movs	r1, #8
 801665a:	000c      	movs	r4, r1
 801665c:	187b      	adds	r3, r7, r1
 801665e:	0018      	movs	r0, r3
 8016660:	2350      	movs	r3, #80	; 0x50
 8016662:	001a      	movs	r2, r3
 8016664:	2100      	movs	r1, #0
 8016666:	f00f fc63 	bl	8025f30 <memset>
 801666a:	0021      	movs	r1, r4
 801666c:	187b      	adds	r3, r7, r1
 801666e:	2264      	movs	r2, #100	; 0x64
 8016670:	801a      	strh	r2, [r3, #0]
 8016672:	187b      	adds	r3, r7, r1
 8016674:	2264      	movs	r2, #100	; 0x64
 8016676:	821a      	strh	r2, [r3, #16]
 8016678:	187b      	adds	r3, r7, r1
 801667a:	22fa      	movs	r2, #250	; 0xfa
 801667c:	0092      	lsls	r2, r2, #2
 801667e:	841a      	strh	r2, [r3, #32]
 8016680:	187b      	adds	r3, r7, r1
 8016682:	220a      	movs	r2, #10
 8016684:	861a      	strh	r2, [r3, #48]	; 0x30
 8016686:	187b      	adds	r3, r7, r1
 8016688:	2240      	movs	r2, #64	; 0x40
 801668a:	2164      	movs	r1, #100	; 0x64
 801668c:	5299      	strh	r1, [r3, r2]
        EU868_BAND2,
        EU868_BAND3,
        EU868_BAND4,
    };

    switch( params->Type )
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	791b      	ldrb	r3, [r3, #4]
 8016692:	2b01      	cmp	r3, #1
 8016694:	d032      	beq.n	80166fc <RegionEU868InitDefaults+0xac>
 8016696:	2b02      	cmp	r3, #2
 8016698:	d023      	beq.n	80166e2 <RegionEU868InitDefaults+0x92>
 801669a:	2b00      	cmp	r3, #0
 801669c:	d000      	beq.n	80166a0 <RegionEU868InitDefaults+0x50>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801669e:	e03d      	b.n	801671c <RegionEU868InitDefaults+0xcc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80166a0:	2308      	movs	r3, #8
 80166a2:	18f9      	adds	r1, r7, r3
 80166a4:	4b1f      	ldr	r3, [pc, #124]	; (8016724 <RegionEU868InitDefaults+0xd4>)
 80166a6:	2250      	movs	r2, #80	; 0x50
 80166a8:	0018      	movs	r0, r3
 80166aa:	f006 fb17 	bl	801ccdc <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80166ae:	4b1e      	ldr	r3, [pc, #120]	; (8016728 <RegionEU868InitDefaults+0xd8>)
 80166b0:	4a1e      	ldr	r2, [pc, #120]	; (801672c <RegionEU868InitDefaults+0xdc>)
 80166b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80166b4:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80166b6:	4b1c      	ldr	r3, [pc, #112]	; (8016728 <RegionEU868InitDefaults+0xd8>)
 80166b8:	4a1d      	ldr	r2, [pc, #116]	; (8016730 <RegionEU868InitDefaults+0xe0>)
 80166ba:	330c      	adds	r3, #12
 80166bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80166be:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80166c0:	4b19      	ldr	r3, [pc, #100]	; (8016728 <RegionEU868InitDefaults+0xd8>)
 80166c2:	4a1c      	ldr	r2, [pc, #112]	; (8016734 <RegionEU868InitDefaults+0xe4>)
 80166c4:	3318      	adds	r3, #24
 80166c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80166c8:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80166ca:	4a17      	ldr	r2, [pc, #92]	; (8016728 <RegionEU868InitDefaults+0xd8>)
 80166cc:	2389      	movs	r3, #137	; 0x89
 80166ce:	005b      	lsls	r3, r3, #1
 80166d0:	2107      	movs	r1, #7
 80166d2:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 80166d4:	4918      	ldr	r1, [pc, #96]	; (8016738 <RegionEU868InitDefaults+0xe8>)
 80166d6:	4b19      	ldr	r3, [pc, #100]	; (801673c <RegionEU868InitDefaults+0xec>)
 80166d8:	2201      	movs	r2, #1
 80166da:	0018      	movs	r0, r3
 80166dc:	f7fd fef9 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 80166e0:	e01c      	b.n	801671c <RegionEU868InitDefaults+0xcc>
            if( params->NvmCtx != 0 )
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d017      	beq.n	801671a <RegionEU868InitDefaults+0xca>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6819      	ldr	r1, [r3, #0]
 80166ee:	238a      	movs	r3, #138	; 0x8a
 80166f0:	005a      	lsls	r2, r3, #1
 80166f2:	4b0d      	ldr	r3, [pc, #52]	; (8016728 <RegionEU868InitDefaults+0xd8>)
 80166f4:	0018      	movs	r0, r3
 80166f6:	f006 faf1 	bl	801ccdc <memcpy1>
            break;
 80166fa:	e00e      	b.n	801671a <RegionEU868InitDefaults+0xca>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 80166fc:	4a0a      	ldr	r2, [pc, #40]	; (8016728 <RegionEU868InitDefaults+0xd8>)
 80166fe:	2388      	movs	r3, #136	; 0x88
 8016700:	005b      	lsls	r3, r3, #1
 8016702:	5ad2      	ldrh	r2, [r2, r3]
 8016704:	4908      	ldr	r1, [pc, #32]	; (8016728 <RegionEU868InitDefaults+0xd8>)
 8016706:	2389      	movs	r3, #137	; 0x89
 8016708:	005b      	lsls	r3, r3, #1
 801670a:	5acb      	ldrh	r3, [r1, r3]
 801670c:	4313      	orrs	r3, r2
 801670e:	b299      	uxth	r1, r3
 8016710:	4a05      	ldr	r2, [pc, #20]	; (8016728 <RegionEU868InitDefaults+0xd8>)
 8016712:	2388      	movs	r3, #136	; 0x88
 8016714:	005b      	lsls	r3, r3, #1
 8016716:	52d1      	strh	r1, [r2, r3]
            break;
 8016718:	e000      	b.n	801671c <RegionEU868InitDefaults+0xcc>
            break;
 801671a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801671c:	46c0      	nop			; (mov r8, r8)
 801671e:	46bd      	mov	sp, r7
 8016720:	b017      	add	sp, #92	; 0x5c
 8016722:	bd90      	pop	{r4, r7, pc}
 8016724:	200015cc 	.word	0x200015cc
 8016728:	2000150c 	.word	0x2000150c
 801672c:	08026b6c 	.word	0x08026b6c
 8016730:	08026b78 	.word	0x08026b78
 8016734:	08026b84 	.word	0x08026b84
 8016738:	2000161e 	.word	0x2000161e
 801673c:	2000161c 	.word	0x2000161c

08016740 <RegionEU868ApplyCFList>:
            return false;
    }
}

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016740:	b590      	push	{r4, r7, lr}
 8016742:	b08b      	sub	sp, #44	; 0x2c
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016748:	2318      	movs	r3, #24
 801674a:	18fb      	adds	r3, r7, r3
 801674c:	2250      	movs	r2, #80	; 0x50
 801674e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	791b      	ldrb	r3, [r3, #4]
 8016754:	2b10      	cmp	r3, #16
 8016756:	d000      	beq.n	801675a <RegionEU868ApplyCFList+0x1a>
 8016758:	e07d      	b.n	8016856 <RegionEU868ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	330f      	adds	r3, #15
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d000      	beq.n	8016768 <RegionEU868ApplyCFList+0x28>
 8016766:	e078      	b.n	801685a <RegionEU868ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016768:	2327      	movs	r3, #39	; 0x27
 801676a:	18fb      	adds	r3, r7, r3
 801676c:	2200      	movs	r2, #0
 801676e:	701a      	strb	r2, [r3, #0]
 8016770:	2326      	movs	r3, #38	; 0x26
 8016772:	18fb      	adds	r3, r7, r3
 8016774:	2203      	movs	r2, #3
 8016776:	701a      	strb	r2, [r3, #0]
 8016778:	e067      	b.n	801684a <RegionEU868ApplyCFList+0x10a>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801677a:	2326      	movs	r3, #38	; 0x26
 801677c:	18fb      	adds	r3, r7, r3
 801677e:	781b      	ldrb	r3, [r3, #0]
 8016780:	2b07      	cmp	r3, #7
 8016782:	d82e      	bhi.n	80167e2 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	2427      	movs	r4, #39	; 0x27
 801678a:	193b      	adds	r3, r7, r4
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	18d3      	adds	r3, r2, r3
 8016790:	781b      	ldrb	r3, [r3, #0]
 8016792:	001a      	movs	r2, r3
 8016794:	2018      	movs	r0, #24
 8016796:	183b      	adds	r3, r7, r0
 8016798:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801679a:	183b      	adds	r3, r7, r0
 801679c:	681a      	ldr	r2, [r3, #0]
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	6819      	ldr	r1, [r3, #0]
 80167a2:	193b      	adds	r3, r7, r4
 80167a4:	781b      	ldrb	r3, [r3, #0]
 80167a6:	3301      	adds	r3, #1
 80167a8:	18cb      	adds	r3, r1, r3
 80167aa:	781b      	ldrb	r3, [r3, #0]
 80167ac:	021b      	lsls	r3, r3, #8
 80167ae:	431a      	orrs	r2, r3
 80167b0:	183b      	adds	r3, r7, r0
 80167b2:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80167b4:	183b      	adds	r3, r7, r0
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	6819      	ldr	r1, [r3, #0]
 80167bc:	193b      	adds	r3, r7, r4
 80167be:	781b      	ldrb	r3, [r3, #0]
 80167c0:	3302      	adds	r3, #2
 80167c2:	18cb      	adds	r3, r1, r3
 80167c4:	781b      	ldrb	r3, [r3, #0]
 80167c6:	041b      	lsls	r3, r3, #16
 80167c8:	431a      	orrs	r2, r3
 80167ca:	183b      	adds	r3, r7, r0
 80167cc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80167ce:	183b      	adds	r3, r7, r0
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	2264      	movs	r2, #100	; 0x64
 80167d4:	435a      	muls	r2, r3
 80167d6:	183b      	adds	r3, r7, r0
 80167d8:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80167da:	183b      	adds	r3, r7, r0
 80167dc:	2200      	movs	r2, #0
 80167de:	605a      	str	r2, [r3, #4]
 80167e0:	e009      	b.n	80167f6 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80167e2:	2118      	movs	r1, #24
 80167e4:	187b      	adds	r3, r7, r1
 80167e6:	2200      	movs	r2, #0
 80167e8:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80167ea:	187b      	adds	r3, r7, r1
 80167ec:	2200      	movs	r2, #0
 80167ee:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 80167f0:	187b      	adds	r3, r7, r1
 80167f2:	2200      	movs	r2, #0
 80167f4:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 80167f6:	2318      	movs	r3, #24
 80167f8:	18fb      	adds	r3, r7, r3
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d00e      	beq.n	801681e <RegionEU868ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8016800:	2110      	movs	r1, #16
 8016802:	187b      	adds	r3, r7, r1
 8016804:	2218      	movs	r2, #24
 8016806:	18ba      	adds	r2, r7, r2
 8016808:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 801680a:	187b      	adds	r3, r7, r1
 801680c:	2226      	movs	r2, #38	; 0x26
 801680e:	18ba      	adds	r2, r7, r2
 8016810:	7812      	ldrb	r2, [r2, #0]
 8016812:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016814:	187b      	adds	r3, r7, r1
 8016816:	0018      	movs	r0, r3
 8016818:	f000 fd8c 	bl	8017334 <RegionEU868ChannelAdd>
 801681c:	e009      	b.n	8016832 <RegionEU868ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801681e:	210c      	movs	r1, #12
 8016820:	187b      	adds	r3, r7, r1
 8016822:	2226      	movs	r2, #38	; 0x26
 8016824:	18ba      	adds	r2, r7, r2
 8016826:	7812      	ldrb	r2, [r2, #0]
 8016828:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 801682a:	187b      	adds	r3, r7, r1
 801682c:	0018      	movs	r0, r3
 801682e:	f000 fe45 	bl	80174bc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016832:	2227      	movs	r2, #39	; 0x27
 8016834:	18bb      	adds	r3, r7, r2
 8016836:	18ba      	adds	r2, r7, r2
 8016838:	7812      	ldrb	r2, [r2, #0]
 801683a:	3203      	adds	r2, #3
 801683c:	701a      	strb	r2, [r3, #0]
 801683e:	2126      	movs	r1, #38	; 0x26
 8016840:	187b      	adds	r3, r7, r1
 8016842:	781a      	ldrb	r2, [r3, #0]
 8016844:	187b      	adds	r3, r7, r1
 8016846:	3201      	adds	r2, #1
 8016848:	701a      	strb	r2, [r3, #0]
 801684a:	2326      	movs	r3, #38	; 0x26
 801684c:	18fb      	adds	r3, r7, r3
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	2b0f      	cmp	r3, #15
 8016852:	d992      	bls.n	801677a <RegionEU868ApplyCFList+0x3a>
 8016854:	e002      	b.n	801685c <RegionEU868ApplyCFList+0x11c>
        return;
 8016856:	46c0      	nop			; (mov r8, r8)
 8016858:	e000      	b.n	801685c <RegionEU868ApplyCFList+0x11c>
        return;
 801685a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801685c:	46bd      	mov	sp, r7
 801685e:	b00b      	add	sp, #44	; 0x2c
 8016860:	bd90      	pop	{r4, r7, pc}
	...

08016864 <RegionEU868ComputeRxWindowParameters>:
    }
    return true;
}

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016866:	b08b      	sub	sp, #44	; 0x2c
 8016868:	af04      	add	r7, sp, #16
 801686a:	60ba      	str	r2, [r7, #8]
 801686c:	607b      	str	r3, [r7, #4]
 801686e:	250f      	movs	r5, #15
 8016870:	197b      	adds	r3, r7, r5
 8016872:	1c02      	adds	r2, r0, #0
 8016874:	701a      	strb	r2, [r3, #0]
 8016876:	230e      	movs	r3, #14
 8016878:	18fb      	adds	r3, r7, r3
 801687a:	1c0a      	adds	r2, r1, #0
 801687c:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 801687e:	2300      	movs	r3, #0
 8016880:	2400      	movs	r4, #0
 8016882:	613b      	str	r3, [r7, #16]
 8016884:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016886:	197b      	adds	r3, r7, r5
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	b25a      	sxtb	r2, r3
 801688c:	2a07      	cmp	r2, #7
 801688e:	dd00      	ble.n	8016892 <RegionEU868ComputeRxWindowParameters+0x2e>
 8016890:	2307      	movs	r3, #7
 8016892:	b25a      	sxtb	r2, r3
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	785b      	ldrb	r3, [r3, #1]
 801689c:	b25b      	sxtb	r3, r3
 801689e:	0018      	movs	r0, r3
 80168a0:	f7ff fc0e 	bl	80160c0 <GetBandwidth>
 80168a4:	0003      	movs	r3, r0
 80168a6:	b2da      	uxtb	r2, r3
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	785b      	ldrb	r3, [r3, #1]
 80168b0:	b25b      	sxtb	r3, r3
 80168b2:	2b07      	cmp	r3, #7
 80168b4:	d10d      	bne.n	80168d2 <RegionEU868ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	785b      	ldrb	r3, [r3, #1]
 80168ba:	b25b      	sxtb	r3, r3
 80168bc:	001a      	movs	r2, r3
 80168be:	4b1b      	ldr	r3, [pc, #108]	; (801692c <RegionEU868ComputeRxWindowParameters+0xc8>)
 80168c0:	5c9b      	ldrb	r3, [r3, r2]
 80168c2:	0018      	movs	r0, r3
 80168c4:	f7fe f86c 	bl	80149a0 <RegionCommonComputeSymbolTimeFsk>
 80168c8:	0003      	movs	r3, r0
 80168ca:	000c      	movs	r4, r1
 80168cc:	613b      	str	r3, [r7, #16]
 80168ce:	617c      	str	r4, [r7, #20]
 80168d0:	e013      	b.n	80168fa <RegionEU868ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	785b      	ldrb	r3, [r3, #1]
 80168d6:	b25b      	sxtb	r3, r3
 80168d8:	001a      	movs	r2, r3
 80168da:	4b14      	ldr	r3, [pc, #80]	; (801692c <RegionEU868ComputeRxWindowParameters+0xc8>)
 80168dc:	5c98      	ldrb	r0, [r3, r2]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	785b      	ldrb	r3, [r3, #1]
 80168e2:	b25b      	sxtb	r3, r3
 80168e4:	001a      	movs	r2, r3
 80168e6:	4b12      	ldr	r3, [pc, #72]	; (8016930 <RegionEU868ComputeRxWindowParameters+0xcc>)
 80168e8:	0092      	lsls	r2, r2, #2
 80168ea:	58d3      	ldr	r3, [r2, r3]
 80168ec:	0019      	movs	r1, r3
 80168ee:	f7fe f82b 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 80168f2:	0003      	movs	r3, r0
 80168f4:	000c      	movs	r4, r1
 80168f6:	613b      	str	r3, [r7, #16]
 80168f8:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80168fa:	4b0e      	ldr	r3, [pc, #56]	; (8016934 <RegionEU868ComputeRxWindowParameters+0xd0>)
 80168fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80168fe:	4798      	blx	r3
 8016900:	0006      	movs	r6, r0
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	3308      	adds	r3, #8
 8016906:	687a      	ldr	r2, [r7, #4]
 8016908:	320c      	adds	r2, #12
 801690a:	68bd      	ldr	r5, [r7, #8]
 801690c:	210e      	movs	r1, #14
 801690e:	1879      	adds	r1, r7, r1
 8016910:	780c      	ldrb	r4, [r1, #0]
 8016912:	6938      	ldr	r0, [r7, #16]
 8016914:	6979      	ldr	r1, [r7, #20]
 8016916:	9202      	str	r2, [sp, #8]
 8016918:	9301      	str	r3, [sp, #4]
 801691a:	9600      	str	r6, [sp, #0]
 801691c:	002b      	movs	r3, r5
 801691e:	0022      	movs	r2, r4
 8016920:	f7fe f85a 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 8016924:	46c0      	nop			; (mov r8, r8)
 8016926:	46bd      	mov	sp, r7
 8016928:	b007      	add	sp, #28
 801692a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801692c:	080283e8 	.word	0x080283e8
 8016930:	080283f0 	.word	0x080283f0
 8016934:	08028964 	.word	0x08028964

08016938 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801693a:	b091      	sub	sp, #68	; 0x44
 801693c:	af0a      	add	r7, sp, #40	; 0x28
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016942:	230f      	movs	r3, #15
 8016944:	18fb      	adds	r3, r7, r3
 8016946:	687a      	ldr	r2, [r7, #4]
 8016948:	7852      	ldrb	r2, [r2, #1]
 801694a:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801694c:	2316      	movs	r3, #22
 801694e:	18fb      	adds	r3, r7, r3
 8016950:	2200      	movs	r2, #0
 8016952:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8016954:	230e      	movs	r3, #14
 8016956:	18fb      	adds	r3, r7, r3
 8016958:	2200      	movs	r2, #0
 801695a:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	685b      	ldr	r3, [r3, #4]
 8016960:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016962:	4b64      	ldr	r3, [pc, #400]	; (8016af4 <RegionEU868RxConfig+0x1bc>)
 8016964:	68db      	ldr	r3, [r3, #12]
 8016966:	4798      	blx	r3
 8016968:	1e03      	subs	r3, r0, #0
 801696a:	d001      	beq.n	8016970 <RegionEU868RxConfig+0x38>
    {
        return false;
 801696c:	2300      	movs	r3, #0
 801696e:	e0bc      	b.n	8016aea <RegionEU868RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	7cdb      	ldrb	r3, [r3, #19]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d122      	bne.n	80169be <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	0019      	movs	r1, r3
 801697e:	4a5e      	ldr	r2, [pc, #376]	; (8016af8 <RegionEU868RxConfig+0x1c0>)
 8016980:	000b      	movs	r3, r1
 8016982:	005b      	lsls	r3, r3, #1
 8016984:	185b      	adds	r3, r3, r1
 8016986:	009b      	lsls	r3, r3, #2
 8016988:	589b      	ldr	r3, [r3, r2]
 801698a:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	0019      	movs	r1, r3
 8016992:	4a59      	ldr	r2, [pc, #356]	; (8016af8 <RegionEU868RxConfig+0x1c0>)
 8016994:	000b      	movs	r3, r1
 8016996:	005b      	lsls	r3, r3, #1
 8016998:	185b      	adds	r3, r3, r1
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	18d3      	adds	r3, r2, r3
 801699e:	3304      	adds	r3, #4
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d00b      	beq.n	80169be <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	0019      	movs	r1, r3
 80169ac:	4a52      	ldr	r2, [pc, #328]	; (8016af8 <RegionEU868RxConfig+0x1c0>)
 80169ae:	000b      	movs	r3, r1
 80169b0:	005b      	lsls	r3, r3, #1
 80169b2:	185b      	adds	r3, r3, r1
 80169b4:	009b      	lsls	r3, r3, #2
 80169b6:	18d3      	adds	r3, r2, r3
 80169b8:	3304      	adds	r3, #4
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80169be:	240f      	movs	r4, #15
 80169c0:	193b      	adds	r3, r7, r4
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	b25b      	sxtb	r3, r3
 80169c6:	4a4d      	ldr	r2, [pc, #308]	; (8016afc <RegionEU868RxConfig+0x1c4>)
 80169c8:	5cd2      	ldrb	r2, [r2, r3]
 80169ca:	230e      	movs	r3, #14
 80169cc:	18fb      	adds	r3, r7, r3
 80169ce:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 80169d0:	4b48      	ldr	r3, [pc, #288]	; (8016af4 <RegionEU868RxConfig+0x1bc>)
 80169d2:	695b      	ldr	r3, [r3, #20]
 80169d4:	693a      	ldr	r2, [r7, #16]
 80169d6:	0010      	movs	r0, r2
 80169d8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80169da:	193b      	adds	r3, r7, r4
 80169dc:	781b      	ldrb	r3, [r3, #0]
 80169de:	b25b      	sxtb	r3, r3
 80169e0:	2b07      	cmp	r3, #7
 80169e2:	d12f      	bne.n	8016a44 <RegionEU868RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 80169e4:	2117      	movs	r1, #23
 80169e6:	187b      	adds	r3, r7, r1
 80169e8:	2200      	movs	r2, #0
 80169ea:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80169ec:	4b41      	ldr	r3, [pc, #260]	; (8016af4 <RegionEU868RxConfig+0x1bc>)
 80169ee:	6a1c      	ldr	r4, [r3, #32]
 80169f0:	230e      	movs	r3, #14
 80169f2:	18fb      	adds	r3, r7, r3
 80169f4:	2200      	movs	r2, #0
 80169f6:	569a      	ldrsb	r2, [r3, r2]
 80169f8:	0013      	movs	r3, r2
 80169fa:	015b      	lsls	r3, r3, #5
 80169fc:	1a9b      	subs	r3, r3, r2
 80169fe:	009b      	lsls	r3, r3, #2
 8016a00:	189b      	adds	r3, r3, r2
 8016a02:	00db      	lsls	r3, r3, #3
 8016a04:	001e      	movs	r6, r3
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	689b      	ldr	r3, [r3, #8]
 8016a0a:	b29b      	uxth	r3, r3
 8016a0c:	687a      	ldr	r2, [r7, #4]
 8016a0e:	7c92      	ldrb	r2, [r2, #18]
 8016a10:	4d3b      	ldr	r5, [pc, #236]	; (8016b00 <RegionEU868RxConfig+0x1c8>)
 8016a12:	1879      	adds	r1, r7, r1
 8016a14:	7808      	ldrb	r0, [r1, #0]
 8016a16:	9209      	str	r2, [sp, #36]	; 0x24
 8016a18:	2200      	movs	r2, #0
 8016a1a:	9208      	str	r2, [sp, #32]
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	9207      	str	r2, [sp, #28]
 8016a20:	2200      	movs	r2, #0
 8016a22:	9206      	str	r2, [sp, #24]
 8016a24:	2201      	movs	r2, #1
 8016a26:	9205      	str	r2, [sp, #20]
 8016a28:	2200      	movs	r2, #0
 8016a2a:	9204      	str	r2, [sp, #16]
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	9203      	str	r2, [sp, #12]
 8016a30:	9302      	str	r3, [sp, #8]
 8016a32:	2305      	movs	r3, #5
 8016a34:	9301      	str	r3, [sp, #4]
 8016a36:	4b33      	ldr	r3, [pc, #204]	; (8016b04 <RegionEU868RxConfig+0x1cc>)
 8016a38:	9300      	str	r3, [sp, #0]
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	0032      	movs	r2, r6
 8016a3e:	0029      	movs	r1, r5
 8016a40:	47a0      	blx	r4
 8016a42:	e029      	b.n	8016a98 <RegionEU868RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8016a44:	2117      	movs	r1, #23
 8016a46:	187b      	adds	r3, r7, r1
 8016a48:	2201      	movs	r2, #1
 8016a4a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016a4c:	4b29      	ldr	r3, [pc, #164]	; (8016af4 <RegionEU868RxConfig+0x1bc>)
 8016a4e:	6a1c      	ldr	r4, [r3, #32]
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	789b      	ldrb	r3, [r3, #2]
 8016a54:	001e      	movs	r6, r3
 8016a56:	230e      	movs	r3, #14
 8016a58:	18fb      	adds	r3, r7, r3
 8016a5a:	2500      	movs	r5, #0
 8016a5c:	575d      	ldrsb	r5, [r3, r5]
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	689b      	ldr	r3, [r3, #8]
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	687a      	ldr	r2, [r7, #4]
 8016a66:	7c92      	ldrb	r2, [r2, #18]
 8016a68:	1879      	adds	r1, r7, r1
 8016a6a:	7808      	ldrb	r0, [r1, #0]
 8016a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8016a6e:	2201      	movs	r2, #1
 8016a70:	9208      	str	r2, [sp, #32]
 8016a72:	2200      	movs	r2, #0
 8016a74:	9207      	str	r2, [sp, #28]
 8016a76:	2200      	movs	r2, #0
 8016a78:	9206      	str	r2, [sp, #24]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	9205      	str	r2, [sp, #20]
 8016a7e:	2200      	movs	r2, #0
 8016a80:	9204      	str	r2, [sp, #16]
 8016a82:	2200      	movs	r2, #0
 8016a84:	9203      	str	r2, [sp, #12]
 8016a86:	9302      	str	r3, [sp, #8]
 8016a88:	2308      	movs	r3, #8
 8016a8a:	9301      	str	r3, [sp, #4]
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	9300      	str	r3, [sp, #0]
 8016a90:	2301      	movs	r3, #1
 8016a92:	002a      	movs	r2, r5
 8016a94:	0031      	movs	r1, r6
 8016a96:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	7c5b      	ldrb	r3, [r3, #17]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d009      	beq.n	8016ab4 <RegionEU868RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016aa0:	230f      	movs	r3, #15
 8016aa2:	18fb      	adds	r3, r7, r3
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	569a      	ldrsb	r2, [r3, r2]
 8016aa8:	2316      	movs	r3, #22
 8016aaa:	18fb      	adds	r3, r7, r3
 8016aac:	4916      	ldr	r1, [pc, #88]	; (8016b08 <RegionEU868RxConfig+0x1d0>)
 8016aae:	5c8a      	ldrb	r2, [r1, r2]
 8016ab0:	701a      	strb	r2, [r3, #0]
 8016ab2:	e008      	b.n	8016ac6 <RegionEU868RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016ab4:	230f      	movs	r3, #15
 8016ab6:	18fb      	adds	r3, r7, r3
 8016ab8:	2200      	movs	r2, #0
 8016aba:	569a      	ldrsb	r2, [r3, r2]
 8016abc:	2316      	movs	r3, #22
 8016abe:	18fb      	adds	r3, r7, r3
 8016ac0:	4912      	ldr	r1, [pc, #72]	; (8016b0c <RegionEU868RxConfig+0x1d4>)
 8016ac2:	5c8a      	ldrb	r2, [r1, r2]
 8016ac4:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8016ac6:	4b0b      	ldr	r3, [pc, #44]	; (8016af4 <RegionEU868RxConfig+0x1bc>)
 8016ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016aca:	2216      	movs	r2, #22
 8016acc:	18ba      	adds	r2, r7, r2
 8016ace:	7812      	ldrb	r2, [r2, #0]
 8016ad0:	320d      	adds	r2, #13
 8016ad2:	b2d1      	uxtb	r1, r2
 8016ad4:	2217      	movs	r2, #23
 8016ad6:	18ba      	adds	r2, r7, r2
 8016ad8:	7812      	ldrb	r2, [r2, #0]
 8016ada:	0010      	movs	r0, r2
 8016adc:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8016ade:	683b      	ldr	r3, [r7, #0]
 8016ae0:	220f      	movs	r2, #15
 8016ae2:	18ba      	adds	r2, r7, r2
 8016ae4:	7812      	ldrb	r2, [r2, #0]
 8016ae6:	701a      	strb	r2, [r3, #0]
    return true;
 8016ae8:	2301      	movs	r3, #1
}
 8016aea:	0018      	movs	r0, r3
 8016aec:	46bd      	mov	sp, r7
 8016aee:	b007      	add	sp, #28
 8016af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016af2:	46c0      	nop			; (mov r8, r8)
 8016af4:	08028964 	.word	0x08028964
 8016af8:	2000150c 	.word	0x2000150c
 8016afc:	080283e8 	.word	0x080283e8
 8016b00:	0000c350 	.word	0x0000c350
 8016b04:	00014585 	.word	0x00014585
 8016b08:	08028418 	.word	0x08028418
 8016b0c:	08028410 	.word	0x08028410

08016b10 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b12:	b093      	sub	sp, #76	; 0x4c
 8016b14:	af0a      	add	r7, sp, #40	; 0x28
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	785b      	ldrb	r3, [r3, #1]
 8016b20:	b25b      	sxtb	r3, r3
 8016b22:	001a      	movs	r2, r3
 8016b24:	4b60      	ldr	r3, [pc, #384]	; (8016ca8 <RegionEU868TxConfig+0x198>)
 8016b26:	5c9a      	ldrb	r2, [r3, r2]
 8016b28:	231e      	movs	r3, #30
 8016b2a:	18fb      	adds	r3, r7, r3
 8016b2c:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	2002      	movs	r0, #2
 8016b32:	5618      	ldrsb	r0, [r3, r0]
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	781b      	ldrb	r3, [r3, #0]
 8016b38:	0019      	movs	r1, r3
 8016b3a:	4a5c      	ldr	r2, [pc, #368]	; (8016cac <RegionEU868TxConfig+0x19c>)
 8016b3c:	000b      	movs	r3, r1
 8016b3e:	005b      	lsls	r3, r3, #1
 8016b40:	185b      	adds	r3, r3, r1
 8016b42:	009b      	lsls	r3, r3, #2
 8016b44:	18d3      	adds	r3, r2, r3
 8016b46:	3309      	adds	r3, #9
 8016b48:	781b      	ldrb	r3, [r3, #0]
 8016b4a:	4a58      	ldr	r2, [pc, #352]	; (8016cac <RegionEU868TxConfig+0x19c>)
 8016b4c:	330c      	adds	r3, #12
 8016b4e:	011b      	lsls	r3, r3, #4
 8016b50:	18d3      	adds	r3, r2, r3
 8016b52:	3302      	adds	r3, #2
 8016b54:	2100      	movs	r1, #0
 8016b56:	5659      	ldrsb	r1, [r3, r1]
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	569a      	ldrsb	r2, [r3, r2]
 8016b5e:	251d      	movs	r5, #29
 8016b60:	197c      	adds	r4, r7, r5
 8016b62:	4b53      	ldr	r3, [pc, #332]	; (8016cb0 <RegionEU868TxConfig+0x1a0>)
 8016b64:	f7ff faca 	bl	80160fc <LimitTxPower>
 8016b68:	0003      	movs	r3, r0
 8016b6a:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	785b      	ldrb	r3, [r3, #1]
 8016b70:	b25b      	sxtb	r3, r3
 8016b72:	0018      	movs	r0, r3
 8016b74:	f7ff faa4 	bl	80160c0 <GetBandwidth>
 8016b78:	0003      	movs	r3, r0
 8016b7a:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8016b7c:	2017      	movs	r0, #23
 8016b7e:	183b      	adds	r3, r7, r0
 8016b80:	2200      	movs	r2, #0
 8016b82:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	6859      	ldr	r1, [r3, #4]
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	689a      	ldr	r2, [r3, #8]
 8016b8c:	183c      	adds	r4, r7, r0
 8016b8e:	197b      	adds	r3, r7, r5
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	b25b      	sxtb	r3, r3
 8016b94:	0018      	movs	r0, r3
 8016b96:	f7fd ffa3 	bl	8014ae0 <RegionCommonComputeTxPower>
 8016b9a:	0003      	movs	r3, r0
 8016b9c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8016b9e:	4b45      	ldr	r3, [pc, #276]	; (8016cb4 <RegionEU868TxConfig+0x1a4>)
 8016ba0:	695a      	ldr	r2, [r3, #20]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	0018      	movs	r0, r3
 8016ba8:	4940      	ldr	r1, [pc, #256]	; (8016cac <RegionEU868TxConfig+0x19c>)
 8016baa:	0003      	movs	r3, r0
 8016bac:	005b      	lsls	r3, r3, #1
 8016bae:	181b      	adds	r3, r3, r0
 8016bb0:	009b      	lsls	r3, r3, #2
 8016bb2:	585b      	ldr	r3, [r3, r1]
 8016bb4:	0018      	movs	r0, r3
 8016bb6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	785b      	ldrb	r3, [r3, #1]
 8016bbc:	b25b      	sxtb	r3, r3
 8016bbe:	2b07      	cmp	r3, #7
 8016bc0:	d12d      	bne.n	8016c1e <RegionEU868TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016bc2:	201f      	movs	r0, #31
 8016bc4:	183b      	adds	r3, r7, r0
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8016bca:	4b3a      	ldr	r3, [pc, #232]	; (8016cb4 <RegionEU868TxConfig+0x1a4>)
 8016bcc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016bce:	231e      	movs	r3, #30
 8016bd0:	18fb      	adds	r3, r7, r3
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	569a      	ldrsb	r2, [r3, r2]
 8016bd6:	0013      	movs	r3, r2
 8016bd8:	015b      	lsls	r3, r3, #5
 8016bda:	1a9b      	subs	r3, r3, r2
 8016bdc:	009b      	lsls	r3, r3, #2
 8016bde:	189b      	adds	r3, r3, r2
 8016be0:	00db      	lsls	r3, r3, #3
 8016be2:	001d      	movs	r5, r3
 8016be4:	69ba      	ldr	r2, [r7, #24]
 8016be6:	4e34      	ldr	r6, [pc, #208]	; (8016cb8 <RegionEU868TxConfig+0x1a8>)
 8016be8:	2317      	movs	r3, #23
 8016bea:	18fb      	adds	r3, r7, r3
 8016bec:	2100      	movs	r1, #0
 8016bee:	5659      	ldrsb	r1, [r3, r1]
 8016bf0:	183b      	adds	r3, r7, r0
 8016bf2:	7818      	ldrb	r0, [r3, #0]
 8016bf4:	4b31      	ldr	r3, [pc, #196]	; (8016cbc <RegionEU868TxConfig+0x1ac>)
 8016bf6:	9308      	str	r3, [sp, #32]
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	9307      	str	r3, [sp, #28]
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	9306      	str	r3, [sp, #24]
 8016c00:	2300      	movs	r3, #0
 8016c02:	9305      	str	r3, [sp, #20]
 8016c04:	2301      	movs	r3, #1
 8016c06:	9304      	str	r3, [sp, #16]
 8016c08:	2300      	movs	r3, #0
 8016c0a:	9303      	str	r3, [sp, #12]
 8016c0c:	2305      	movs	r3, #5
 8016c0e:	9302      	str	r3, [sp, #8]
 8016c10:	2300      	movs	r3, #0
 8016c12:	9301      	str	r3, [sp, #4]
 8016c14:	9500      	str	r5, [sp, #0]
 8016c16:	0013      	movs	r3, r2
 8016c18:	0032      	movs	r2, r6
 8016c1a:	47a0      	blx	r4
 8016c1c:	e024      	b.n	8016c68 <RegionEU868TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 8016c1e:	201f      	movs	r0, #31
 8016c20:	183b      	adds	r3, r7, r0
 8016c22:	2201      	movs	r2, #1
 8016c24:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8016c26:	4b23      	ldr	r3, [pc, #140]	; (8016cb4 <RegionEU868TxConfig+0x1a4>)
 8016c28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016c2a:	231e      	movs	r3, #30
 8016c2c:	18fb      	adds	r3, r7, r3
 8016c2e:	781b      	ldrb	r3, [r3, #0]
 8016c30:	b25b      	sxtb	r3, r3
 8016c32:	69bd      	ldr	r5, [r7, #24]
 8016c34:	2217      	movs	r2, #23
 8016c36:	18ba      	adds	r2, r7, r2
 8016c38:	2100      	movs	r1, #0
 8016c3a:	5651      	ldrsb	r1, [r2, r1]
 8016c3c:	183a      	adds	r2, r7, r0
 8016c3e:	7810      	ldrb	r0, [r2, #0]
 8016c40:	4a1e      	ldr	r2, [pc, #120]	; (8016cbc <RegionEU868TxConfig+0x1ac>)
 8016c42:	9208      	str	r2, [sp, #32]
 8016c44:	2200      	movs	r2, #0
 8016c46:	9207      	str	r2, [sp, #28]
 8016c48:	2200      	movs	r2, #0
 8016c4a:	9206      	str	r2, [sp, #24]
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	9205      	str	r2, [sp, #20]
 8016c50:	2201      	movs	r2, #1
 8016c52:	9204      	str	r2, [sp, #16]
 8016c54:	2200      	movs	r2, #0
 8016c56:	9203      	str	r2, [sp, #12]
 8016c58:	2208      	movs	r2, #8
 8016c5a:	9202      	str	r2, [sp, #8]
 8016c5c:	2201      	movs	r2, #1
 8016c5e:	9201      	str	r2, [sp, #4]
 8016c60:	9300      	str	r3, [sp, #0]
 8016c62:	002b      	movs	r3, r5
 8016c64:	2200      	movs	r2, #0
 8016c66:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8016c68:	4b12      	ldr	r3, [pc, #72]	; (8016cb4 <RegionEU868TxConfig+0x1a4>)
 8016c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c6c:	68fa      	ldr	r2, [r7, #12]
 8016c6e:	8992      	ldrh	r2, [r2, #12]
 8016c70:	b2d1      	uxtb	r1, r2
 8016c72:	241f      	movs	r4, #31
 8016c74:	193a      	adds	r2, r7, r4
 8016c76:	7812      	ldrb	r2, [r2, #0]
 8016c78:	0010      	movs	r0, r2
 8016c7a:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8016c7c:	4b0d      	ldr	r3, [pc, #52]	; (8016cb4 <RegionEU868TxConfig+0x1a4>)
 8016c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c80:	68fa      	ldr	r2, [r7, #12]
 8016c82:	8992      	ldrh	r2, [r2, #12]
 8016c84:	b2d1      	uxtb	r1, r2
 8016c86:	193a      	adds	r2, r7, r4
 8016c88:	7812      	ldrb	r2, [r2, #0]
 8016c8a:	0010      	movs	r0, r2
 8016c8c:	4798      	blx	r3
 8016c8e:	0002      	movs	r2, r0
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	221d      	movs	r2, #29
 8016c98:	18ba      	adds	r2, r7, r2
 8016c9a:	7812      	ldrb	r2, [r2, #0]
 8016c9c:	701a      	strb	r2, [r3, #0]
    return true;
 8016c9e:	2301      	movs	r3, #1
}
 8016ca0:	0018      	movs	r0, r3
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	b009      	add	sp, #36	; 0x24
 8016ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ca8:	080283e8 	.word	0x080283e8
 8016cac:	2000150c 	.word	0x2000150c
 8016cb0:	2000161c 	.word	0x2000161c
 8016cb4:	08028964 	.word	0x08028964
 8016cb8:	000061a8 	.word	0x000061a8
 8016cbc:	00000bb8 	.word	0x00000bb8

08016cc0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cc2:	b093      	sub	sp, #76	; 0x4c
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	60f8      	str	r0, [r7, #12]
 8016cc8:	60b9      	str	r1, [r7, #8]
 8016cca:	607a      	str	r2, [r7, #4]
 8016ccc:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016cce:	2347      	movs	r3, #71	; 0x47
 8016cd0:	18fb      	adds	r3, r7, r3
 8016cd2:	2207      	movs	r2, #7
 8016cd4:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8016cd6:	2344      	movs	r3, #68	; 0x44
 8016cd8:	18fb      	adds	r3, r7, r3
 8016cda:	2200      	movs	r2, #0
 8016cdc:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8016cde:	2346      	movs	r3, #70	; 0x46
 8016ce0:	18fb      	adds	r3, r7, r3
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8016ce6:	233a      	movs	r3, #58	; 0x3a
 8016ce8:	18fb      	adds	r3, r7, r3
 8016cea:	2200      	movs	r2, #0
 8016cec:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016cee:	e09e      	b.n	8016e2e <RegionEU868LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	685a      	ldr	r2, [r3, #4]
 8016cf4:	2346      	movs	r3, #70	; 0x46
 8016cf6:	18fb      	adds	r3, r7, r3
 8016cf8:	781b      	ldrb	r3, [r3, #0]
 8016cfa:	18d3      	adds	r3, r2, r3
 8016cfc:	2544      	movs	r5, #68	; 0x44
 8016cfe:	197c      	adds	r4, r7, r5
 8016d00:	223c      	movs	r2, #60	; 0x3c
 8016d02:	18ba      	adds	r2, r7, r2
 8016d04:	0011      	movs	r1, r2
 8016d06:	0018      	movs	r0, r3
 8016d08:	f7fd fd22 	bl	8014750 <RegionCommonParseLinkAdrReq>
 8016d0c:	0003      	movs	r3, r0
 8016d0e:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8016d10:	197b      	adds	r3, r7, r5
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d100      	bne.n	8016d1a <RegionEU868LinkAdrReq+0x5a>
 8016d18:	e092      	b.n	8016e40 <RegionEU868LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016d1a:	2246      	movs	r2, #70	; 0x46
 8016d1c:	18bb      	adds	r3, r7, r2
 8016d1e:	18b9      	adds	r1, r7, r2
 8016d20:	2244      	movs	r2, #68	; 0x44
 8016d22:	18ba      	adds	r2, r7, r2
 8016d24:	7809      	ldrb	r1, [r1, #0]
 8016d26:	7812      	ldrb	r2, [r2, #0]
 8016d28:	188a      	adds	r2, r1, r2
 8016d2a:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016d2c:	2347      	movs	r3, #71	; 0x47
 8016d2e:	18fb      	adds	r3, r7, r3
 8016d30:	2207      	movs	r2, #7
 8016d32:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016d34:	213c      	movs	r1, #60	; 0x3c
 8016d36:	187b      	adds	r3, r7, r1
 8016d38:	889a      	ldrh	r2, [r3, #4]
 8016d3a:	233a      	movs	r3, #58	; 0x3a
 8016d3c:	18fb      	adds	r3, r7, r3
 8016d3e:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8016d40:	187b      	adds	r3, r7, r1
 8016d42:	78db      	ldrb	r3, [r3, #3]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d10c      	bne.n	8016d62 <RegionEU868LinkAdrReq+0xa2>
 8016d48:	233a      	movs	r3, #58	; 0x3a
 8016d4a:	18fb      	adds	r3, r7, r3
 8016d4c:	881b      	ldrh	r3, [r3, #0]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d107      	bne.n	8016d62 <RegionEU868LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8016d52:	2247      	movs	r2, #71	; 0x47
 8016d54:	18bb      	adds	r3, r7, r2
 8016d56:	18ba      	adds	r2, r7, r2
 8016d58:	7812      	ldrb	r2, [r2, #0]
 8016d5a:	2101      	movs	r1, #1
 8016d5c:	438a      	bics	r2, r1
 8016d5e:	701a      	strb	r2, [r3, #0]
 8016d60:	e065      	b.n	8016e2e <RegionEU868LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016d62:	233c      	movs	r3, #60	; 0x3c
 8016d64:	18fb      	adds	r3, r7, r3
 8016d66:	78db      	ldrb	r3, [r3, #3]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d004      	beq.n	8016d76 <RegionEU868LinkAdrReq+0xb6>
 8016d6c:	233c      	movs	r3, #60	; 0x3c
 8016d6e:	18fb      	adds	r3, r7, r3
 8016d70:	78db      	ldrb	r3, [r3, #3]
 8016d72:	2b05      	cmp	r3, #5
 8016d74:	d904      	bls.n	8016d80 <RegionEU868LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8016d76:	233c      	movs	r3, #60	; 0x3c
 8016d78:	18fb      	adds	r3, r7, r3
 8016d7a:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016d7c:	2b06      	cmp	r3, #6
 8016d7e:	d907      	bls.n	8016d90 <RegionEU868LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016d80:	2247      	movs	r2, #71	; 0x47
 8016d82:	18bb      	adds	r3, r7, r2
 8016d84:	18ba      	adds	r2, r7, r2
 8016d86:	7812      	ldrb	r2, [r2, #0]
 8016d88:	2101      	movs	r1, #1
 8016d8a:	438a      	bics	r2, r1
 8016d8c:	701a      	strb	r2, [r3, #0]
 8016d8e:	e04e      	b.n	8016e2e <RegionEU868LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016d90:	2345      	movs	r3, #69	; 0x45
 8016d92:	18fb      	adds	r3, r7, r3
 8016d94:	2200      	movs	r2, #0
 8016d96:	701a      	strb	r2, [r3, #0]
 8016d98:	e044      	b.n	8016e24 <RegionEU868LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016d9a:	233c      	movs	r3, #60	; 0x3c
 8016d9c:	18fb      	adds	r3, r7, r3
 8016d9e:	78db      	ldrb	r3, [r3, #3]
 8016da0:	2b06      	cmp	r3, #6
 8016da2:	d11b      	bne.n	8016ddc <RegionEU868LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8016da4:	2345      	movs	r3, #69	; 0x45
 8016da6:	18fb      	adds	r3, r7, r3
 8016da8:	781a      	ldrb	r2, [r3, #0]
 8016daa:	496e      	ldr	r1, [pc, #440]	; (8016f64 <RegionEU868LinkAdrReq+0x2a4>)
 8016dac:	0013      	movs	r3, r2
 8016dae:	005b      	lsls	r3, r3, #1
 8016db0:	189b      	adds	r3, r3, r2
 8016db2:	009b      	lsls	r3, r3, #2
 8016db4:	585b      	ldr	r3, [r3, r1]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d02e      	beq.n	8016e18 <RegionEU868LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 8016dba:	2345      	movs	r3, #69	; 0x45
 8016dbc:	18fb      	adds	r3, r7, r3
 8016dbe:	781b      	ldrb	r3, [r3, #0]
 8016dc0:	2201      	movs	r2, #1
 8016dc2:	409a      	lsls	r2, r3
 8016dc4:	0013      	movs	r3, r2
 8016dc6:	b21a      	sxth	r2, r3
 8016dc8:	213a      	movs	r1, #58	; 0x3a
 8016dca:	187b      	adds	r3, r7, r1
 8016dcc:	881b      	ldrh	r3, [r3, #0]
 8016dce:	b21b      	sxth	r3, r3
 8016dd0:	4313      	orrs	r3, r2
 8016dd2:	b21b      	sxth	r3, r3
 8016dd4:	b29a      	uxth	r2, r3
 8016dd6:	187b      	adds	r3, r7, r1
 8016dd8:	801a      	strh	r2, [r3, #0]
 8016dda:	e01d      	b.n	8016e18 <RegionEU868LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016ddc:	233a      	movs	r3, #58	; 0x3a
 8016dde:	18fb      	adds	r3, r7, r3
 8016de0:	881b      	ldrh	r3, [r3, #0]
 8016de2:	001a      	movs	r2, r3
 8016de4:	2345      	movs	r3, #69	; 0x45
 8016de6:	18fb      	adds	r3, r7, r3
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	411a      	asrs	r2, r3
 8016dec:	0013      	movs	r3, r2
 8016dee:	2201      	movs	r2, #1
 8016df0:	4013      	ands	r3, r2
 8016df2:	d011      	beq.n	8016e18 <RegionEU868LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8016df4:	2345      	movs	r3, #69	; 0x45
 8016df6:	18fb      	adds	r3, r7, r3
 8016df8:	781a      	ldrb	r2, [r3, #0]
 8016dfa:	495a      	ldr	r1, [pc, #360]	; (8016f64 <RegionEU868LinkAdrReq+0x2a4>)
 8016dfc:	0013      	movs	r3, r2
 8016dfe:	005b      	lsls	r3, r3, #1
 8016e00:	189b      	adds	r3, r3, r2
 8016e02:	009b      	lsls	r3, r3, #2
 8016e04:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d106      	bne.n	8016e18 <RegionEU868LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016e0a:	2247      	movs	r2, #71	; 0x47
 8016e0c:	18bb      	adds	r3, r7, r2
 8016e0e:	18ba      	adds	r2, r7, r2
 8016e10:	7812      	ldrb	r2, [r2, #0]
 8016e12:	2101      	movs	r1, #1
 8016e14:	438a      	bics	r2, r1
 8016e16:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016e18:	2145      	movs	r1, #69	; 0x45
 8016e1a:	187b      	adds	r3, r7, r1
 8016e1c:	781a      	ldrb	r2, [r3, #0]
 8016e1e:	187b      	adds	r3, r7, r1
 8016e20:	3201      	adds	r2, #1
 8016e22:	701a      	strb	r2, [r3, #0]
 8016e24:	2345      	movs	r3, #69	; 0x45
 8016e26:	18fb      	adds	r3, r7, r3
 8016e28:	781b      	ldrb	r3, [r3, #0]
 8016e2a:	2b0f      	cmp	r3, #15
 8016e2c:	d9b5      	bls.n	8016d9a <RegionEU868LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	7a1b      	ldrb	r3, [r3, #8]
 8016e32:	2246      	movs	r2, #70	; 0x46
 8016e34:	18ba      	adds	r2, r7, r2
 8016e36:	7812      	ldrb	r2, [r2, #0]
 8016e38:	429a      	cmp	r2, r3
 8016e3a:	d200      	bcs.n	8016e3e <RegionEU868LinkAdrReq+0x17e>
 8016e3c:	e758      	b.n	8016cf0 <RegionEU868LinkAdrReq+0x30>
 8016e3e:	e000      	b.n	8016e42 <RegionEU868LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8016e40:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016e42:	2134      	movs	r1, #52	; 0x34
 8016e44:	187b      	adds	r3, r7, r1
 8016e46:	2201      	movs	r2, #1
 8016e48:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	7a5a      	ldrb	r2, [r3, #9]
 8016e4e:	187b      	adds	r3, r7, r1
 8016e50:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8016e52:	187b      	adds	r3, r7, r1
 8016e54:	0018      	movs	r0, r3
 8016e56:	f7ff fad7 	bl	8016408 <RegionEU868GetPhyParam>
 8016e5a:	0003      	movs	r3, r0
 8016e5c:	001a      	movs	r2, r3
 8016e5e:	2030      	movs	r0, #48	; 0x30
 8016e60:	183b      	adds	r3, r7, r0
 8016e62:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8016e64:	2110      	movs	r1, #16
 8016e66:	187b      	adds	r3, r7, r1
 8016e68:	2447      	movs	r4, #71	; 0x47
 8016e6a:	193a      	adds	r2, r7, r4
 8016e6c:	7812      	ldrb	r2, [r2, #0]
 8016e6e:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	7a9a      	ldrb	r2, [r3, #10]
 8016e74:	187b      	adds	r3, r7, r1
 8016e76:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016e78:	253c      	movs	r5, #60	; 0x3c
 8016e7a:	197b      	adds	r3, r7, r5
 8016e7c:	2201      	movs	r2, #1
 8016e7e:	569a      	ldrsb	r2, [r3, r2]
 8016e80:	187b      	adds	r3, r7, r1
 8016e82:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016e84:	197b      	adds	r3, r7, r5
 8016e86:	2202      	movs	r2, #2
 8016e88:	569a      	ldrsb	r2, [r3, r2]
 8016e8a:	187b      	adds	r3, r7, r1
 8016e8c:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016e8e:	197b      	adds	r3, r7, r5
 8016e90:	781a      	ldrb	r2, [r3, #0]
 8016e92:	187b      	adds	r3, r7, r1
 8016e94:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	220b      	movs	r2, #11
 8016e9a:	569a      	ldrsb	r2, [r3, r2]
 8016e9c:	187b      	adds	r3, r7, r1
 8016e9e:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	220c      	movs	r2, #12
 8016ea4:	569a      	ldrsb	r2, [r3, r2]
 8016ea6:	187b      	adds	r3, r7, r1
 8016ea8:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	7b5b      	ldrb	r3, [r3, #13]
 8016eae:	b25a      	sxtb	r2, r3
 8016eb0:	187b      	adds	r3, r7, r1
 8016eb2:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016eb4:	187b      	adds	r3, r7, r1
 8016eb6:	2210      	movs	r2, #16
 8016eb8:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016eba:	187b      	adds	r3, r7, r1
 8016ebc:	223a      	movs	r2, #58	; 0x3a
 8016ebe:	18ba      	adds	r2, r7, r2
 8016ec0:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016ec2:	183b      	adds	r3, r7, r0
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	b25a      	sxtb	r2, r3
 8016ec8:	0008      	movs	r0, r1
 8016eca:	183b      	adds	r3, r7, r0
 8016ecc:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016ece:	183b      	adds	r3, r7, r0
 8016ed0:	2207      	movs	r2, #7
 8016ed2:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8016ed4:	183b      	adds	r3, r7, r0
 8016ed6:	4a23      	ldr	r2, [pc, #140]	; (8016f64 <RegionEU868LinkAdrReq+0x2a4>)
 8016ed8:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016eda:	183b      	adds	r3, r7, r0
 8016edc:	2207      	movs	r2, #7
 8016ede:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016ee0:	183b      	adds	r3, r7, r0
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016ee6:	183b      	adds	r3, r7, r0
 8016ee8:	68fa      	ldr	r2, [r7, #12]
 8016eea:	6812      	ldr	r2, [r2, #0]
 8016eec:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016eee:	0026      	movs	r6, r4
 8016ef0:	193c      	adds	r4, r7, r4
 8016ef2:	0029      	movs	r1, r5
 8016ef4:	187d      	adds	r5, r7, r1
 8016ef6:	187b      	adds	r3, r7, r1
 8016ef8:	1c9a      	adds	r2, r3, #2
 8016efa:	187b      	adds	r3, r7, r1
 8016efc:	1c59      	adds	r1, r3, #1
 8016efe:	1838      	adds	r0, r7, r0
 8016f00:	002b      	movs	r3, r5
 8016f02:	f7fd fc7b 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 8016f06:	0003      	movs	r3, r0
 8016f08:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016f0a:	0034      	movs	r4, r6
 8016f0c:	193b      	adds	r3, r7, r4
 8016f0e:	781b      	ldrb	r3, [r3, #0]
 8016f10:	2b07      	cmp	r3, #7
 8016f12:	d10c      	bne.n	8016f2e <RegionEU868LinkAdrReq+0x26e>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8016f14:	4b14      	ldr	r3, [pc, #80]	; (8016f68 <RegionEU868LinkAdrReq+0x2a8>)
 8016f16:	2202      	movs	r2, #2
 8016f18:	2100      	movs	r1, #0
 8016f1a:	0018      	movs	r0, r3
 8016f1c:	f005 ff1a 	bl	801cd54 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8016f20:	233a      	movs	r3, #58	; 0x3a
 8016f22:	18fb      	adds	r3, r7, r3
 8016f24:	8819      	ldrh	r1, [r3, #0]
 8016f26:	4a0f      	ldr	r2, [pc, #60]	; (8016f64 <RegionEU868LinkAdrReq+0x2a4>)
 8016f28:	2388      	movs	r3, #136	; 0x88
 8016f2a:	005b      	lsls	r3, r3, #1
 8016f2c:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016f2e:	213c      	movs	r1, #60	; 0x3c
 8016f30:	187b      	adds	r3, r7, r1
 8016f32:	2201      	movs	r2, #1
 8016f34:	569a      	ldrsb	r2, [r3, r2]
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016f3a:	187b      	adds	r3, r7, r1
 8016f3c:	2202      	movs	r2, #2
 8016f3e:	569a      	ldrsb	r2, [r3, r2]
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016f44:	187b      	adds	r3, r7, r1
 8016f46:	781a      	ldrb	r2, [r3, #0]
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f4e:	2246      	movs	r2, #70	; 0x46
 8016f50:	18ba      	adds	r2, r7, r2
 8016f52:	7812      	ldrb	r2, [r2, #0]
 8016f54:	701a      	strb	r2, [r3, #0]

    return status;
 8016f56:	2347      	movs	r3, #71	; 0x47
 8016f58:	18fb      	adds	r3, r7, r3
 8016f5a:	781b      	ldrb	r3, [r3, #0]
}
 8016f5c:	0018      	movs	r0, r3
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	b013      	add	sp, #76	; 0x4c
 8016f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f64:	2000150c 	.word	0x2000150c
 8016f68:	2000161c 	.word	0x2000161c

08016f6c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b084      	sub	sp, #16
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016f74:	230f      	movs	r3, #15
 8016f76:	18fb      	adds	r3, r7, r3
 8016f78:	2207      	movs	r2, #7
 8016f7a:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8016f7c:	210e      	movs	r1, #14
 8016f7e:	187b      	adds	r3, r7, r1
 8016f80:	2200      	movs	r2, #0
 8016f82:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	187a      	adds	r2, r7, r1
 8016f8a:	0011      	movs	r1, r2
 8016f8c:	0018      	movs	r0, r3
 8016f8e:	f7ff f8dd 	bl	801614c <VerifyRfFreq>
 8016f92:	0003      	movs	r3, r0
 8016f94:	001a      	movs	r2, r3
 8016f96:	2301      	movs	r3, #1
 8016f98:	4053      	eors	r3, r2
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d006      	beq.n	8016fae <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFE; // Channel frequency KO
 8016fa0:	220f      	movs	r2, #15
 8016fa2:	18bb      	adds	r3, r7, r2
 8016fa4:	18ba      	adds	r2, r7, r2
 8016fa6:	7812      	ldrb	r2, [r2, #0]
 8016fa8:	2101      	movs	r1, #1
 8016faa:	438a      	bics	r2, r1
 8016fac:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	b25b      	sxtb	r3, r3
 8016fb4:	2207      	movs	r2, #7
 8016fb6:	2100      	movs	r1, #0
 8016fb8:	0018      	movs	r0, r3
 8016fba:	f7fd f9e1 	bl	8014380 <RegionCommonValueInRange>
 8016fbe:	1e03      	subs	r3, r0, #0
 8016fc0:	d106      	bne.n	8016fd0 <RegionEU868RxParamSetupReq+0x64>
    {
        status &= 0xFD; // Datarate KO
 8016fc2:	220f      	movs	r2, #15
 8016fc4:	18bb      	adds	r3, r7, r2
 8016fc6:	18ba      	adds	r2, r7, r2
 8016fc8:	7812      	ldrb	r2, [r2, #0]
 8016fca:	2102      	movs	r1, #2
 8016fcc:	438a      	bics	r2, r1
 8016fce:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	785b      	ldrb	r3, [r3, #1]
 8016fd4:	b25b      	sxtb	r3, r3
 8016fd6:	2205      	movs	r2, #5
 8016fd8:	2100      	movs	r1, #0
 8016fda:	0018      	movs	r0, r3
 8016fdc:	f7fd f9d0 	bl	8014380 <RegionCommonValueInRange>
 8016fe0:	1e03      	subs	r3, r0, #0
 8016fe2:	d106      	bne.n	8016ff2 <RegionEU868RxParamSetupReq+0x86>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016fe4:	220f      	movs	r2, #15
 8016fe6:	18bb      	adds	r3, r7, r2
 8016fe8:	18ba      	adds	r2, r7, r2
 8016fea:	7812      	ldrb	r2, [r2, #0]
 8016fec:	2104      	movs	r1, #4
 8016fee:	438a      	bics	r2, r1
 8016ff0:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8016ff2:	230f      	movs	r3, #15
 8016ff4:	18fb      	adds	r3, r7, r3
 8016ff6:	781b      	ldrb	r3, [r3, #0]
}
 8016ff8:	0018      	movs	r0, r3
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	b004      	add	sp, #16
 8016ffe:	bd80      	pop	{r7, pc}

08017000 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b086      	sub	sp, #24
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017008:	2317      	movs	r3, #23
 801700a:	18fb      	adds	r3, r7, r3
 801700c:	2203      	movs	r2, #3
 801700e:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d119      	bne.n	801704e <RegionEU868NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	791b      	ldrb	r3, [r3, #4]
 801701e:	b25b      	sxtb	r3, r3
 8017020:	b2da      	uxtb	r2, r3
 8017022:	2108      	movs	r1, #8
 8017024:	187b      	adds	r3, r7, r1
 8017026:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8017028:	187b      	adds	r3, r7, r1
 801702a:	0018      	movs	r0, r3
 801702c:	f000 fa46 	bl	80174bc <RegionEU868ChannelsRemove>
 8017030:	0003      	movs	r3, r0
 8017032:	001a      	movs	r2, r3
 8017034:	2301      	movs	r3, #1
 8017036:	4053      	eors	r3, r2
 8017038:	b2db      	uxtb	r3, r3
 801703a:	2b00      	cmp	r3, #0
 801703c:	d043      	beq.n	80170c6 <RegionEU868NewChannelReq+0xc6>
        {
            status &= 0xFC;
 801703e:	2217      	movs	r2, #23
 8017040:	18bb      	adds	r3, r7, r2
 8017042:	18ba      	adds	r2, r7, r2
 8017044:	7812      	ldrb	r2, [r2, #0]
 8017046:	2103      	movs	r1, #3
 8017048:	438a      	bics	r2, r1
 801704a:	701a      	strb	r2, [r3, #0]
 801704c:	e03b      	b.n	80170c6 <RegionEU868NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681a      	ldr	r2, [r3, #0]
 8017052:	210c      	movs	r1, #12
 8017054:	187b      	adds	r3, r7, r1
 8017056:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	791b      	ldrb	r3, [r3, #4]
 801705c:	b25b      	sxtb	r3, r3
 801705e:	b2da      	uxtb	r2, r3
 8017060:	187b      	adds	r3, r7, r1
 8017062:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8017064:	187b      	adds	r3, r7, r1
 8017066:	0018      	movs	r0, r3
 8017068:	f000 f964 	bl	8017334 <RegionEU868ChannelAdd>
 801706c:	0003      	movs	r3, r0
 801706e:	2b04      	cmp	r3, #4
 8017070:	d008      	beq.n	8017084 <RegionEU868NewChannelReq+0x84>
 8017072:	dc02      	bgt.n	801707a <RegionEU868NewChannelReq+0x7a>
 8017074:	2b00      	cmp	r3, #0
 8017076:	d025      	beq.n	80170c4 <RegionEU868NewChannelReq+0xc4>
 8017078:	e01c      	b.n	80170b4 <RegionEU868NewChannelReq+0xb4>
 801707a:	2b05      	cmp	r3, #5
 801707c:	d00a      	beq.n	8017094 <RegionEU868NewChannelReq+0x94>
 801707e:	2b06      	cmp	r3, #6
 8017080:	d010      	beq.n	80170a4 <RegionEU868NewChannelReq+0xa4>
 8017082:	e017      	b.n	80170b4 <RegionEU868NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017084:	2217      	movs	r2, #23
 8017086:	18bb      	adds	r3, r7, r2
 8017088:	18ba      	adds	r2, r7, r2
 801708a:	7812      	ldrb	r2, [r2, #0]
 801708c:	2101      	movs	r1, #1
 801708e:	438a      	bics	r2, r1
 8017090:	701a      	strb	r2, [r3, #0]
                break;
 8017092:	e018      	b.n	80170c6 <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8017094:	2217      	movs	r2, #23
 8017096:	18bb      	adds	r3, r7, r2
 8017098:	18ba      	adds	r2, r7, r2
 801709a:	7812      	ldrb	r2, [r2, #0]
 801709c:	2102      	movs	r1, #2
 801709e:	438a      	bics	r2, r1
 80170a0:	701a      	strb	r2, [r3, #0]
                break;
 80170a2:	e010      	b.n	80170c6 <RegionEU868NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80170a4:	2217      	movs	r2, #23
 80170a6:	18bb      	adds	r3, r7, r2
 80170a8:	18ba      	adds	r2, r7, r2
 80170aa:	7812      	ldrb	r2, [r2, #0]
 80170ac:	2103      	movs	r1, #3
 80170ae:	438a      	bics	r2, r1
 80170b0:	701a      	strb	r2, [r3, #0]
                break;
 80170b2:	e008      	b.n	80170c6 <RegionEU868NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 80170b4:	2217      	movs	r2, #23
 80170b6:	18bb      	adds	r3, r7, r2
 80170b8:	18ba      	adds	r2, r7, r2
 80170ba:	7812      	ldrb	r2, [r2, #0]
 80170bc:	2103      	movs	r1, #3
 80170be:	438a      	bics	r2, r1
 80170c0:	701a      	strb	r2, [r3, #0]
                break;
 80170c2:	e000      	b.n	80170c6 <RegionEU868NewChannelReq+0xc6>
                break;
 80170c4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 80170c6:	2317      	movs	r3, #23
 80170c8:	18fb      	adds	r3, r7, r3
 80170ca:	781b      	ldrb	r3, [r3, #0]
}
 80170cc:	0018      	movs	r0, r3
 80170ce:	46bd      	mov	sp, r7
 80170d0:	b006      	add	sp, #24
 80170d2:	bd80      	pop	{r7, pc}

080170d4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b082      	sub	sp, #8
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
    return -1;
 80170dc:	2301      	movs	r3, #1
 80170de:	425b      	negs	r3, r3
}
 80170e0:	0018      	movs	r0, r3
 80170e2:	46bd      	mov	sp, r7
 80170e4:	b002      	add	sp, #8
 80170e6:	bd80      	pop	{r7, pc}

080170e8 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b084      	sub	sp, #16
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80170f0:	230f      	movs	r3, #15
 80170f2:	18fb      	adds	r3, r7, r3
 80170f4:	2203      	movs	r2, #3
 80170f6:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 80170f8:	210e      	movs	r1, #14
 80170fa:	187b      	adds	r3, r7, r1
 80170fc:	2200      	movs	r2, #0
 80170fe:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	187a      	adds	r2, r7, r1
 8017106:	0011      	movs	r1, r2
 8017108:	0018      	movs	r0, r3
 801710a:	f7ff f81f 	bl	801614c <VerifyRfFreq>
 801710e:	0003      	movs	r3, r0
 8017110:	001a      	movs	r2, r3
 8017112:	2301      	movs	r3, #1
 8017114:	4053      	eors	r3, r2
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b00      	cmp	r3, #0
 801711a:	d006      	beq.n	801712a <RegionEU868DlChannelReq+0x42>
    {
        status &= 0xFE;
 801711c:	220f      	movs	r2, #15
 801711e:	18bb      	adds	r3, r7, r2
 8017120:	18ba      	adds	r2, r7, r2
 8017122:	7812      	ldrb	r2, [r2, #0]
 8017124:	2101      	movs	r1, #1
 8017126:	438a      	bics	r2, r1
 8017128:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	0019      	movs	r1, r3
 8017130:	4a13      	ldr	r2, [pc, #76]	; (8017180 <RegionEU868DlChannelReq+0x98>)
 8017132:	000b      	movs	r3, r1
 8017134:	005b      	lsls	r3, r3, #1
 8017136:	185b      	adds	r3, r3, r1
 8017138:	009b      	lsls	r3, r3, #2
 801713a:	589b      	ldr	r3, [r3, r2]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d106      	bne.n	801714e <RegionEU868DlChannelReq+0x66>
    {
        status &= 0xFD;
 8017140:	220f      	movs	r2, #15
 8017142:	18bb      	adds	r3, r7, r2
 8017144:	18ba      	adds	r2, r7, r2
 8017146:	7812      	ldrb	r2, [r2, #0]
 8017148:	2102      	movs	r1, #2
 801714a:	438a      	bics	r2, r1
 801714c:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801714e:	230f      	movs	r3, #15
 8017150:	18fb      	adds	r3, r7, r3
 8017152:	781b      	ldrb	r3, [r3, #0]
 8017154:	2b03      	cmp	r3, #3
 8017156:	d10c      	bne.n	8017172 <RegionEU868DlChannelReq+0x8a>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	0018      	movs	r0, r3
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	685a      	ldr	r2, [r3, #4]
 8017162:	4907      	ldr	r1, [pc, #28]	; (8017180 <RegionEU868DlChannelReq+0x98>)
 8017164:	0003      	movs	r3, r0
 8017166:	005b      	lsls	r3, r3, #1
 8017168:	181b      	adds	r3, r3, r0
 801716a:	009b      	lsls	r3, r3, #2
 801716c:	18cb      	adds	r3, r1, r3
 801716e:	3304      	adds	r3, #4
 8017170:	601a      	str	r2, [r3, #0]
    }

    return status;
 8017172:	230f      	movs	r3, #15
 8017174:	18fb      	adds	r3, r7, r3
 8017176:	781b      	ldrb	r3, [r3, #0]
}
 8017178:	0018      	movs	r0, r3
 801717a:	46bd      	mov	sp, r7
 801717c:	b004      	add	sp, #16
 801717e:	bd80      	pop	{r7, pc}
 8017180:	2000150c 	.word	0x2000150c

08017184 <RegionEU868CalcBackOff>:
{
    return currentDr;
}

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b088      	sub	sp, #32
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 801718c:	210c      	movs	r1, #12
 801718e:	187b      	adds	r3, r7, r1
 8017190:	4a12      	ldr	r2, [pc, #72]	; (80171dc <RegionEU868CalcBackOff+0x58>)
 8017192:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8017194:	187b      	adds	r3, r7, r1
 8017196:	4a12      	ldr	r2, [pc, #72]	; (80171e0 <RegionEU868CalcBackOff+0x5c>)
 8017198:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	785a      	ldrb	r2, [r3, #1]
 801719e:	187b      	adds	r3, r7, r1
 80171a0:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	781a      	ldrb	r2, [r3, #0]
 80171a6:	187b      	adds	r3, r7, r1
 80171a8:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	789a      	ldrb	r2, [r3, #2]
 80171ae:	187b      	adds	r3, r7, r1
 80171b0:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	78da      	ldrb	r2, [r3, #3]
 80171b6:	187b      	adds	r3, r7, r1
 80171b8:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	685a      	ldr	r2, [r3, #4]
 80171be:	187b      	adds	r3, r7, r1
 80171c0:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	689a      	ldr	r2, [r3, #8]
 80171c6:	187b      	adds	r3, r7, r1
 80171c8:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 80171ca:	187b      	adds	r3, r7, r1
 80171cc:	0018      	movs	r0, r3
 80171ce:	f7fd fcbf 	bl	8014b50 <RegionCommonCalcBackOff>
}
 80171d2:	46c0      	nop			; (mov r8, r8)
 80171d4:	46bd      	mov	sp, r7
 80171d6:	b008      	add	sp, #32
 80171d8:	bd80      	pop	{r7, pc}
 80171da:	46c0      	nop			; (mov r8, r8)
 80171dc:	2000150c 	.word	0x2000150c
 80171e0:	200015cc 	.word	0x200015cc

080171e4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80171e4:	b5b0      	push	{r4, r5, r7, lr}
 80171e6:	b090      	sub	sp, #64	; 0x40
 80171e8:	af04      	add	r7, sp, #16
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	607a      	str	r2, [r7, #4]
 80171f0:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 80171f2:	232f      	movs	r3, #47	; 0x2f
 80171f4:	18fb      	adds	r3, r7, r3
 80171f6:	2200      	movs	r2, #0
 80171f8:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 80171fa:	2327      	movs	r3, #39	; 0x27
 80171fc:	18fb      	adds	r3, r7, r3
 80171fe:	2200      	movs	r2, #0
 8017200:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8017202:	2314      	movs	r3, #20
 8017204:	18fb      	adds	r3, r7, r3
 8017206:	0018      	movs	r0, r3
 8017208:	2310      	movs	r3, #16
 801720a:	001a      	movs	r2, r3
 801720c:	2100      	movs	r1, #0
 801720e:	f00e fe8f 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 8017212:	2300      	movs	r3, #0
 8017214:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8017216:	4b44      	ldr	r3, [pc, #272]	; (8017328 <RegionEU868NextChannel+0x144>)
 8017218:	2201      	movs	r2, #1
 801721a:	2100      	movs	r1, #0
 801721c:	0018      	movs	r0, r3
 801721e:	f7fd f917 	bl	8014450 <RegionCommonCountChannels>
 8017222:	1e03      	subs	r3, r0, #0
 8017224:	d10a      	bne.n	801723c <RegionEU868NextChannel+0x58>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017226:	4a41      	ldr	r2, [pc, #260]	; (801732c <RegionEU868NextChannel+0x148>)
 8017228:	2388      	movs	r3, #136	; 0x88
 801722a:	005b      	lsls	r3, r3, #1
 801722c:	5ad3      	ldrh	r3, [r2, r3]
 801722e:	2207      	movs	r2, #7
 8017230:	4313      	orrs	r3, r2
 8017232:	b299      	uxth	r1, r3
 8017234:	4a3d      	ldr	r2, [pc, #244]	; (801732c <RegionEU868NextChannel+0x148>)
 8017236:	2388      	movs	r3, #136	; 0x88
 8017238:	005b      	lsls	r3, r3, #1
 801723a:	52d1      	strh	r1, [r2, r3]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	681c      	ldr	r4, [r3, #0]
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	685b      	ldr	r3, [r3, #4]
 8017244:	0018      	movs	r0, r3
 8017246:	f005 fd0a 	bl	801cc5e <TimerGetElapsedTime>
 801724a:	0003      	movs	r3, r0
 801724c:	429c      	cmp	r4, r3
 801724e:	d824      	bhi.n	801729a <RegionEU868NextChannel+0xb6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	2200      	movs	r2, #0
 8017254:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, EU868_MAX_NB_BANDS );
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	7a58      	ldrb	r0, [r3, #9]
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	7a99      	ldrb	r1, [r3, #10]
 801725e:	4a34      	ldr	r2, [pc, #208]	; (8017330 <RegionEU868NextChannel+0x14c>)
 8017260:	2305      	movs	r3, #5
 8017262:	f7fd f980 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 8017266:	0003      	movs	r3, r0
 8017268:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	7a58      	ldrb	r0, [r3, #9]
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	7a1b      	ldrb	r3, [r3, #8]
 8017272:	b25b      	sxtb	r3, r3
 8017274:	b2d9      	uxtb	r1, r3
 8017276:	232f      	movs	r3, #47	; 0x2f
 8017278:	18fc      	adds	r4, r7, r3
 801727a:	4d2c      	ldr	r5, [pc, #176]	; (801732c <RegionEU868NextChannel+0x148>)
 801727c:	4a2a      	ldr	r2, [pc, #168]	; (8017328 <RegionEU868NextChannel+0x144>)
 801727e:	2327      	movs	r3, #39	; 0x27
 8017280:	18fb      	adds	r3, r7, r3
 8017282:	9302      	str	r3, [sp, #8]
 8017284:	2314      	movs	r3, #20
 8017286:	18fb      	adds	r3, r7, r3
 8017288:	9301      	str	r3, [sp, #4]
 801728a:	4b29      	ldr	r3, [pc, #164]	; (8017330 <RegionEU868NextChannel+0x14c>)
 801728c:	9300      	str	r3, [sp, #0]
 801728e:	002b      	movs	r3, r5
 8017290:	f7fe ffd4 	bl	801623c <CountNbOfEnabledChannels>
 8017294:	0003      	movs	r3, r0
 8017296:	7023      	strb	r3, [r4, #0]
 8017298:	e010      	b.n	80172bc <RegionEU868NextChannel+0xd8>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 801729a:	2127      	movs	r1, #39	; 0x27
 801729c:	187b      	adds	r3, r7, r1
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	3301      	adds	r3, #1
 80172a2:	b2da      	uxtb	r2, r3
 80172a4:	187b      	adds	r3, r7, r1
 80172a6:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	681c      	ldr	r4, [r3, #0]
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	0018      	movs	r0, r3
 80172b2:	f005 fcd4 	bl	801cc5e <TimerGetElapsedTime>
 80172b6:	0003      	movs	r3, r0
 80172b8:	1ae3      	subs	r3, r4, r3
 80172ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 80172bc:	232f      	movs	r3, #47	; 0x2f
 80172be:	18fb      	adds	r3, r7, r3
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d012      	beq.n	80172ec <RegionEU868NextChannel+0x108>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80172c6:	232f      	movs	r3, #47	; 0x2f
 80172c8:	18fb      	adds	r3, r7, r3
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	3b01      	subs	r3, #1
 80172ce:	0019      	movs	r1, r3
 80172d0:	2000      	movs	r0, #0
 80172d2:	f005 fced 	bl	801ccb0 <randr>
 80172d6:	0002      	movs	r2, r0
 80172d8:	2314      	movs	r3, #20
 80172da:	18fb      	adds	r3, r7, r3
 80172dc:	5c9a      	ldrb	r2, [r3, r2]
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	701a      	strb	r2, [r3, #0]

        *time = 0;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2200      	movs	r2, #0
 80172e6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80172e8:	2300      	movs	r3, #0
 80172ea:	e018      	b.n	801731e <RegionEU868NextChannel+0x13a>
    }
    else
    {
        if( delayTx > 0 )
 80172ec:	2327      	movs	r3, #39	; 0x27
 80172ee:	18fb      	adds	r3, r7, r3
 80172f0:	781b      	ldrb	r3, [r3, #0]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d004      	beq.n	8017300 <RegionEU868NextChannel+0x11c>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172fa:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80172fc:	230b      	movs	r3, #11
 80172fe:	e00e      	b.n	801731e <RegionEU868NextChannel+0x13a>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017300:	4a0a      	ldr	r2, [pc, #40]	; (801732c <RegionEU868NextChannel+0x148>)
 8017302:	2388      	movs	r3, #136	; 0x88
 8017304:	005b      	lsls	r3, r3, #1
 8017306:	5ad3      	ldrh	r3, [r2, r3]
 8017308:	2207      	movs	r2, #7
 801730a:	4313      	orrs	r3, r2
 801730c:	b299      	uxth	r1, r3
 801730e:	4a07      	ldr	r2, [pc, #28]	; (801732c <RegionEU868NextChannel+0x148>)
 8017310:	2388      	movs	r3, #136	; 0x88
 8017312:	005b      	lsls	r3, r3, #1
 8017314:	52d1      	strh	r1, [r2, r3]
        *time = 0;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2200      	movs	r2, #0
 801731a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801731c:	230c      	movs	r3, #12
    }
}
 801731e:	0018      	movs	r0, r3
 8017320:	46bd      	mov	sp, r7
 8017322:	b00c      	add	sp, #48	; 0x30
 8017324:	bdb0      	pop	{r4, r5, r7, pc}
 8017326:	46c0      	nop			; (mov r8, r8)
 8017328:	2000161c 	.word	0x2000161c
 801732c:	2000150c 	.word	0x2000150c
 8017330:	200015cc 	.word	0x200015cc

08017334 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017334:	b590      	push	{r4, r7, lr}
 8017336:	b085      	sub	sp, #20
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 801733c:	230c      	movs	r3, #12
 801733e:	18fb      	adds	r3, r7, r3
 8017340:	2200      	movs	r2, #0
 8017342:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8017344:	230f      	movs	r3, #15
 8017346:	18fb      	adds	r3, r7, r3
 8017348:	2200      	movs	r2, #0
 801734a:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 801734c:	230e      	movs	r3, #14
 801734e:	18fb      	adds	r3, r7, r3
 8017350:	2200      	movs	r2, #0
 8017352:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8017354:	210d      	movs	r1, #13
 8017356:	187b      	adds	r3, r7, r1
 8017358:	687a      	ldr	r2, [r7, #4]
 801735a:	7912      	ldrb	r2, [r2, #4]
 801735c:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801735e:	187b      	adds	r3, r7, r1
 8017360:	781b      	ldrb	r3, [r3, #0]
 8017362:	2b02      	cmp	r3, #2
 8017364:	d801      	bhi.n	801736a <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017366:	2306      	movs	r3, #6
 8017368:	e0a2      	b.n	80174b0 <RegionEU868ChannelAdd+0x17c>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801736a:	230d      	movs	r3, #13
 801736c:	18fb      	adds	r3, r7, r3
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	2b0f      	cmp	r3, #15
 8017372:	d901      	bls.n	8017378 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017374:	2303      	movs	r3, #3
 8017376:	e09b      	b.n	80174b0 <RegionEU868ChannelAdd+0x17c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	7a1b      	ldrb	r3, [r3, #8]
 801737e:	011b      	lsls	r3, r3, #4
 8017380:	b25b      	sxtb	r3, r3
 8017382:	111b      	asrs	r3, r3, #4
 8017384:	b25b      	sxtb	r3, r3
 8017386:	2207      	movs	r2, #7
 8017388:	2100      	movs	r1, #0
 801738a:	0018      	movs	r0, r3
 801738c:	f7fc fff8 	bl	8014380 <RegionCommonValueInRange>
 8017390:	1e03      	subs	r3, r0, #0
 8017392:	d103      	bne.n	801739c <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8017394:	230f      	movs	r3, #15
 8017396:	18fb      	adds	r3, r7, r3
 8017398:	2201      	movs	r2, #1
 801739a:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	7a1b      	ldrb	r3, [r3, #8]
 80173a2:	b25b      	sxtb	r3, r3
 80173a4:	111b      	asrs	r3, r3, #4
 80173a6:	b25b      	sxtb	r3, r3
 80173a8:	2207      	movs	r2, #7
 80173aa:	2100      	movs	r1, #0
 80173ac:	0018      	movs	r0, r3
 80173ae:	f7fc ffe7 	bl	8014380 <RegionCommonValueInRange>
 80173b2:	1e03      	subs	r3, r0, #0
 80173b4:	d103      	bne.n	80173be <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 80173b6:	230f      	movs	r3, #15
 80173b8:	18fb      	adds	r3, r7, r3
 80173ba:	2201      	movs	r2, #1
 80173bc:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	7a1b      	ldrb	r3, [r3, #8]
 80173c4:	011b      	lsls	r3, r3, #4
 80173c6:	b25b      	sxtb	r3, r3
 80173c8:	111b      	asrs	r3, r3, #4
 80173ca:	b25a      	sxtb	r2, r3
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	7a1b      	ldrb	r3, [r3, #8]
 80173d2:	b25b      	sxtb	r3, r3
 80173d4:	111b      	asrs	r3, r3, #4
 80173d6:	b25b      	sxtb	r3, r3
 80173d8:	429a      	cmp	r2, r3
 80173da:	dd03      	ble.n	80173e4 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 80173dc:	230f      	movs	r3, #15
 80173de:	18fb      	adds	r3, r7, r3
 80173e0:	2201      	movs	r2, #1
 80173e2:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 80173e4:	230e      	movs	r3, #14
 80173e6:	18fb      	adds	r3, r7, r3
 80173e8:	781b      	ldrb	r3, [r3, #0]
 80173ea:	2201      	movs	r2, #1
 80173ec:	4053      	eors	r3, r2
 80173ee:	b2db      	uxtb	r3, r3
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d013      	beq.n	801741c <RegionEU868ChannelAdd+0xe8>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	220c      	movs	r2, #12
 80173fc:	18ba      	adds	r2, r7, r2
 80173fe:	0011      	movs	r1, r2
 8017400:	0018      	movs	r0, r3
 8017402:	f7fe fea3 	bl	801614c <VerifyRfFreq>
 8017406:	0003      	movs	r3, r0
 8017408:	001a      	movs	r2, r3
 801740a:	2301      	movs	r3, #1
 801740c:	4053      	eors	r3, r2
 801740e:	b2db      	uxtb	r3, r3
 8017410:	2b00      	cmp	r3, #0
 8017412:	d003      	beq.n	801741c <RegionEU868ChannelAdd+0xe8>
        {
            freqInvalid = true;
 8017414:	230e      	movs	r3, #14
 8017416:	18fb      	adds	r3, r7, r3
 8017418:	2201      	movs	r2, #1
 801741a:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801741c:	230f      	movs	r3, #15
 801741e:	18fb      	adds	r3, r7, r3
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d006      	beq.n	8017434 <RegionEU868ChannelAdd+0x100>
 8017426:	230e      	movs	r3, #14
 8017428:	18fb      	adds	r3, r7, r3
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d001      	beq.n	8017434 <RegionEU868ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017430:	2306      	movs	r3, #6
 8017432:	e03d      	b.n	80174b0 <RegionEU868ChannelAdd+0x17c>
    }
    if( drInvalid == true )
 8017434:	230f      	movs	r3, #15
 8017436:	18fb      	adds	r3, r7, r3
 8017438:	781b      	ldrb	r3, [r3, #0]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d001      	beq.n	8017442 <RegionEU868ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801743e:	2305      	movs	r3, #5
 8017440:	e036      	b.n	80174b0 <RegionEU868ChannelAdd+0x17c>
    }
    if( freqInvalid == true )
 8017442:	230e      	movs	r3, #14
 8017444:	18fb      	adds	r3, r7, r3
 8017446:	781b      	ldrb	r3, [r3, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d001      	beq.n	8017450 <RegionEU868ChannelAdd+0x11c>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801744c:	2304      	movs	r3, #4
 801744e:	e02f      	b.n	80174b0 <RegionEU868ChannelAdd+0x17c>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8017450:	240d      	movs	r4, #13
 8017452:	193b      	adds	r3, r7, r4
 8017454:	781a      	ldrb	r2, [r3, #0]
 8017456:	0013      	movs	r3, r2
 8017458:	005b      	lsls	r3, r3, #1
 801745a:	189b      	adds	r3, r3, r2
 801745c:	009b      	lsls	r3, r3, #2
 801745e:	4a16      	ldr	r2, [pc, #88]	; (80174b8 <RegionEU868ChannelAdd+0x184>)
 8017460:	1898      	adds	r0, r3, r2
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	220c      	movs	r2, #12
 8017468:	0019      	movs	r1, r3
 801746a:	f005 fc37 	bl	801ccdc <memcpy1>
    NvmCtx.Channels[id].Band = band;
 801746e:	193b      	adds	r3, r7, r4
 8017470:	781a      	ldrb	r2, [r3, #0]
 8017472:	230c      	movs	r3, #12
 8017474:	18fb      	adds	r3, r7, r3
 8017476:	7818      	ldrb	r0, [r3, #0]
 8017478:	490f      	ldr	r1, [pc, #60]	; (80174b8 <RegionEU868ChannelAdd+0x184>)
 801747a:	0013      	movs	r3, r2
 801747c:	005b      	lsls	r3, r3, #1
 801747e:	189b      	adds	r3, r3, r2
 8017480:	009b      	lsls	r3, r3, #2
 8017482:	18cb      	adds	r3, r1, r3
 8017484:	3309      	adds	r3, #9
 8017486:	1c02      	adds	r2, r0, #0
 8017488:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 801748a:	4a0b      	ldr	r2, [pc, #44]	; (80174b8 <RegionEU868ChannelAdd+0x184>)
 801748c:	2388      	movs	r3, #136	; 0x88
 801748e:	005b      	lsls	r3, r3, #1
 8017490:	5ad3      	ldrh	r3, [r2, r3]
 8017492:	b21a      	sxth	r2, r3
 8017494:	193b      	adds	r3, r7, r4
 8017496:	781b      	ldrb	r3, [r3, #0]
 8017498:	2101      	movs	r1, #1
 801749a:	4099      	lsls	r1, r3
 801749c:	000b      	movs	r3, r1
 801749e:	b21b      	sxth	r3, r3
 80174a0:	4313      	orrs	r3, r2
 80174a2:	b21b      	sxth	r3, r3
 80174a4:	b299      	uxth	r1, r3
 80174a6:	4a04      	ldr	r2, [pc, #16]	; (80174b8 <RegionEU868ChannelAdd+0x184>)
 80174a8:	2388      	movs	r3, #136	; 0x88
 80174aa:	005b      	lsls	r3, r3, #1
 80174ac:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 80174ae:	2300      	movs	r3, #0
}
 80174b0:	0018      	movs	r0, r3
 80174b2:	46bd      	mov	sp, r7
 80174b4:	b005      	add	sp, #20
 80174b6:	bd90      	pop	{r4, r7, pc}
 80174b8:	2000150c 	.word	0x2000150c

080174bc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80174bc:	b590      	push	{r4, r7, lr}
 80174be:	b085      	sub	sp, #20
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80174c4:	210f      	movs	r1, #15
 80174c6:	187b      	adds	r3, r7, r1
 80174c8:	687a      	ldr	r2, [r7, #4]
 80174ca:	7812      	ldrb	r2, [r2, #0]
 80174cc:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80174ce:	187b      	adds	r3, r7, r1
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	2b02      	cmp	r3, #2
 80174d4:	d801      	bhi.n	80174da <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 80174d6:	2300      	movs	r3, #0
 80174d8:	e015      	b.n	8017506 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80174da:	240f      	movs	r4, #15
 80174dc:	193b      	adds	r3, r7, r4
 80174de:	781a      	ldrb	r2, [r3, #0]
 80174e0:	490b      	ldr	r1, [pc, #44]	; (8017510 <RegionEU868ChannelsRemove+0x54>)
 80174e2:	0013      	movs	r3, r2
 80174e4:	005b      	lsls	r3, r3, #1
 80174e6:	189b      	adds	r3, r3, r2
 80174e8:	009b      	lsls	r3, r3, #2
 80174ea:	18cb      	adds	r3, r1, r3
 80174ec:	220c      	movs	r2, #12
 80174ee:	2100      	movs	r1, #0
 80174f0:	0018      	movs	r0, r3
 80174f2:	f00e fd1d 	bl	8025f30 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80174f6:	193b      	adds	r3, r7, r4
 80174f8:	7819      	ldrb	r1, [r3, #0]
 80174fa:	4b06      	ldr	r3, [pc, #24]	; (8017514 <RegionEU868ChannelsRemove+0x58>)
 80174fc:	2210      	movs	r2, #16
 80174fe:	0018      	movs	r0, r3
 8017500:	f7fc ff64 	bl	80143cc <RegionCommonChanDisable>
 8017504:	0003      	movs	r3, r0
}
 8017506:	0018      	movs	r0, r3
 8017508:	46bd      	mov	sp, r7
 801750a:	b005      	add	sp, #20
 801750c:	bd90      	pop	{r4, r7, pc}
 801750e:	46c0      	nop			; (mov r8, r8)
 8017510:	2000150c 	.word	0x2000150c
 8017514:	2000161c 	.word	0x2000161c

08017518 <RegionEU868ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017518:	b590      	push	{r4, r7, lr}
 801751a:	b085      	sub	sp, #20
 801751c:	af00      	add	r7, sp, #0
 801751e:	0004      	movs	r4, r0
 8017520:	0008      	movs	r0, r1
 8017522:	0011      	movs	r1, r2
 8017524:	1dfb      	adds	r3, r7, #7
 8017526:	1c22      	adds	r2, r4, #0
 8017528:	701a      	strb	r2, [r3, #0]
 801752a:	1dbb      	adds	r3, r7, #6
 801752c:	1c02      	adds	r2, r0, #0
 801752e:	701a      	strb	r2, [r3, #0]
 8017530:	1d7b      	adds	r3, r7, #5
 8017532:	1c0a      	adds	r2, r1, #0
 8017534:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8017536:	1dbb      	adds	r3, r7, #6
 8017538:	781a      	ldrb	r2, [r3, #0]
 801753a:	1d7b      	adds	r3, r7, #5
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	1ad3      	subs	r3, r2, r3
 8017540:	b2da      	uxtb	r2, r3
 8017542:	210f      	movs	r1, #15
 8017544:	187b      	adds	r3, r7, r1
 8017546:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8017548:	187b      	adds	r3, r7, r1
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	2b7f      	cmp	r3, #127	; 0x7f
 801754e:	d903      	bls.n	8017558 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8017550:	230f      	movs	r3, #15
 8017552:	18fb      	adds	r3, r7, r3
 8017554:	2200      	movs	r2, #0
 8017556:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8017558:	230f      	movs	r3, #15
 801755a:	18fb      	adds	r3, r7, r3
 801755c:	781b      	ldrb	r3, [r3, #0]
}
 801755e:	0018      	movs	r0, r3
 8017560:	46bd      	mov	sp, r7
 8017562:	b005      	add	sp, #20
 8017564:	bd90      	pop	{r4, r7, pc}

08017566 <GetNextLowerTxDr>:
 */
static RegionIN865NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017566:	b580      	push	{r7, lr}
 8017568:	b084      	sub	sp, #16
 801756a:	af00      	add	r7, sp, #0
 801756c:	0002      	movs	r2, r0
 801756e:	1dfb      	adds	r3, r7, #7
 8017570:	701a      	strb	r2, [r3, #0]
 8017572:	1dbb      	adds	r3, r7, #6
 8017574:	1c0a      	adds	r2, r1, #0
 8017576:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017578:	230f      	movs	r3, #15
 801757a:	18fb      	adds	r3, r7, r3
 801757c:	2200      	movs	r2, #0
 801757e:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017580:	1dfa      	adds	r2, r7, #7
 8017582:	1dbb      	adds	r3, r7, #6
 8017584:	7812      	ldrb	r2, [r2, #0]
 8017586:	b252      	sxtb	r2, r2
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	b25b      	sxtb	r3, r3
 801758c:	429a      	cmp	r2, r3
 801758e:	d105      	bne.n	801759c <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8017590:	230f      	movs	r3, #15
 8017592:	18fb      	adds	r3, r7, r3
 8017594:	1dba      	adds	r2, r7, #6
 8017596:	7812      	ldrb	r2, [r2, #0]
 8017598:	701a      	strb	r2, [r3, #0]
 801759a:	e00f      	b.n	80175bc <GetNextLowerTxDr+0x56>
    }
    else if( dr == DR_7 )
 801759c:	1dfb      	adds	r3, r7, #7
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	b25b      	sxtb	r3, r3
 80175a2:	2b07      	cmp	r3, #7
 80175a4:	d104      	bne.n	80175b0 <GetNextLowerTxDr+0x4a>
    {
        nextLowerDr = DR_5;
 80175a6:	230f      	movs	r3, #15
 80175a8:	18fb      	adds	r3, r7, r3
 80175aa:	2205      	movs	r2, #5
 80175ac:	701a      	strb	r2, [r3, #0]
 80175ae:	e005      	b.n	80175bc <GetNextLowerTxDr+0x56>
    }
    else
    {
        nextLowerDr = dr - 1;
 80175b0:	1dfb      	adds	r3, r7, #7
 80175b2:	781a      	ldrb	r2, [r3, #0]
 80175b4:	230f      	movs	r3, #15
 80175b6:	18fb      	adds	r3, r7, r3
 80175b8:	3a01      	subs	r2, #1
 80175ba:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80175bc:	230f      	movs	r3, #15
 80175be:	18fb      	adds	r3, r7, r3
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	b25b      	sxtb	r3, r3
}
 80175c4:	0018      	movs	r0, r3
 80175c6:	46bd      	mov	sp, r7
 80175c8:	b004      	add	sp, #16
 80175ca:	bd80      	pop	{r7, pc}

080175cc <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
    switch( BandwidthsIN865[drIndex] )
 80175d4:	4b09      	ldr	r3, [pc, #36]	; (80175fc <GetBandwidth+0x30>)
 80175d6:	687a      	ldr	r2, [r7, #4]
 80175d8:	0092      	lsls	r2, r2, #2
 80175da:	58d3      	ldr	r3, [r2, r3]
 80175dc:	4a08      	ldr	r2, [pc, #32]	; (8017600 <GetBandwidth+0x34>)
 80175de:	4293      	cmp	r3, r2
 80175e0:	d004      	beq.n	80175ec <GetBandwidth+0x20>
 80175e2:	4a08      	ldr	r2, [pc, #32]	; (8017604 <GetBandwidth+0x38>)
 80175e4:	4293      	cmp	r3, r2
 80175e6:	d003      	beq.n	80175f0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80175e8:	2300      	movs	r3, #0
 80175ea:	e002      	b.n	80175f2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 80175ec:	2301      	movs	r3, #1
 80175ee:	e000      	b.n	80175f2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 80175f0:	2302      	movs	r3, #2
    }
}
 80175f2:	0018      	movs	r0, r3
 80175f4:	46bd      	mov	sp, r7
 80175f6:	b002      	add	sp, #8
 80175f8:	bd80      	pop	{r7, pc}
 80175fa:	46c0      	nop			; (mov r8, r8)
 80175fc:	080284fc 	.word	0x080284fc
 8017600:	0003d090 	.word	0x0003d090
 8017604:	0007a120 	.word	0x0007a120

08017608 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017608:	b590      	push	{r4, r7, lr}
 801760a:	b085      	sub	sp, #20
 801760c:	af00      	add	r7, sp, #0
 801760e:	0004      	movs	r4, r0
 8017610:	0008      	movs	r0, r1
 8017612:	0011      	movs	r1, r2
 8017614:	603b      	str	r3, [r7, #0]
 8017616:	1dfb      	adds	r3, r7, #7
 8017618:	1c22      	adds	r2, r4, #0
 801761a:	701a      	strb	r2, [r3, #0]
 801761c:	1dbb      	adds	r3, r7, #6
 801761e:	1c02      	adds	r2, r0, #0
 8017620:	701a      	strb	r2, [r3, #0]
 8017622:	1d7b      	adds	r3, r7, #5
 8017624:	1c0a      	adds	r2, r1, #0
 8017626:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017628:	210f      	movs	r1, #15
 801762a:	187b      	adds	r3, r7, r1
 801762c:	1dfa      	adds	r2, r7, #7
 801762e:	7812      	ldrb	r2, [r2, #0]
 8017630:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8017632:	187a      	adds	r2, r7, r1
 8017634:	1dbb      	adds	r3, r7, #6
 8017636:	1df9      	adds	r1, r7, #7
 8017638:	780c      	ldrb	r4, [r1, #0]
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	b258      	sxtb	r0, r3
 801763e:	b261      	sxtb	r1, r4
 8017640:	4288      	cmp	r0, r1
 8017642:	da00      	bge.n	8017646 <LimitTxPower+0x3e>
 8017644:	1c23      	adds	r3, r4, #0
 8017646:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017648:	230f      	movs	r3, #15
 801764a:	18fb      	adds	r3, r7, r3
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	b25b      	sxtb	r3, r3
}
 8017650:	0018      	movs	r0, r3
 8017652:	46bd      	mov	sp, r7
 8017654:	b005      	add	sp, #20
 8017656:	bd90      	pop	{r4, r7, pc}

08017658 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b082      	sub	sp, #8
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017660:	4b0e      	ldr	r3, [pc, #56]	; (801769c <VerifyRfFreq+0x44>)
 8017662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	0010      	movs	r0, r2
 8017668:	4798      	blx	r3
 801766a:	0003      	movs	r3, r0
 801766c:	001a      	movs	r2, r3
 801766e:	2301      	movs	r3, #1
 8017670:	4053      	eors	r3, r2
 8017672:	b2db      	uxtb	r3, r3
 8017674:	2b00      	cmp	r3, #0
 8017676:	d001      	beq.n	801767c <VerifyRfFreq+0x24>
    {
        return false;
 8017678:	2300      	movs	r3, #0
 801767a:	e00a      	b.n	8017692 <VerifyRfFreq+0x3a>
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	4a08      	ldr	r2, [pc, #32]	; (80176a0 <VerifyRfFreq+0x48>)
 8017680:	4293      	cmp	r3, r2
 8017682:	d903      	bls.n	801768c <VerifyRfFreq+0x34>
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	4a07      	ldr	r2, [pc, #28]	; (80176a4 <VerifyRfFreq+0x4c>)
 8017688:	4293      	cmp	r3, r2
 801768a:	d901      	bls.n	8017690 <VerifyRfFreq+0x38>
    {
        return false;
 801768c:	2300      	movs	r3, #0
 801768e:	e000      	b.n	8017692 <VerifyRfFreq+0x3a>
    }
    return true;
 8017690:	2301      	movs	r3, #1
}
 8017692:	0018      	movs	r0, r3
 8017694:	46bd      	mov	sp, r7
 8017696:	b002      	add	sp, #8
 8017698:	bd80      	pop	{r7, pc}
 801769a:	46c0      	nop			; (mov r8, r8)
 801769c:	08028964 	.word	0x08028964
 80176a0:	338eda3f 	.word	0x338eda3f
 80176a4:	33ad5ec0 	.word	0x33ad5ec0

080176a8 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 80176a8:	b5b0      	push	{r4, r5, r7, lr}
 80176aa:	b086      	sub	sp, #24
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	60ba      	str	r2, [r7, #8]
 80176b0:	607b      	str	r3, [r7, #4]
 80176b2:	230f      	movs	r3, #15
 80176b4:	18fb      	adds	r3, r7, r3
 80176b6:	1c02      	adds	r2, r0, #0
 80176b8:	701a      	strb	r2, [r3, #0]
 80176ba:	230e      	movs	r3, #14
 80176bc:	18fb      	adds	r3, r7, r3
 80176be:	1c0a      	adds	r2, r1, #0
 80176c0:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 80176c2:	2317      	movs	r3, #23
 80176c4:	18fb      	adds	r3, r7, r3
 80176c6:	2200      	movs	r2, #0
 80176c8:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 80176ca:	2316      	movs	r3, #22
 80176cc:	18fb      	adds	r3, r7, r3
 80176ce:	2200      	movs	r2, #0
 80176d0:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 80176d2:	2315      	movs	r3, #21
 80176d4:	18fb      	adds	r3, r7, r3
 80176d6:	2200      	movs	r2, #0
 80176d8:	701a      	strb	r2, [r3, #0]
 80176da:	2314      	movs	r3, #20
 80176dc:	18fb      	adds	r3, r7, r3
 80176de:	2200      	movs	r2, #0
 80176e0:	701a      	strb	r2, [r3, #0]
 80176e2:	e0b4      	b.n	801784e <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80176e4:	2313      	movs	r3, #19
 80176e6:	18fb      	adds	r3, r7, r3
 80176e8:	2200      	movs	r2, #0
 80176ea:	701a      	strb	r2, [r3, #0]
 80176ec:	e09d      	b.n	801782a <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 80176ee:	2314      	movs	r3, #20
 80176f0:	18fb      	adds	r3, r7, r3
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	005b      	lsls	r3, r3, #1
 80176f6:	68ba      	ldr	r2, [r7, #8]
 80176f8:	18d3      	adds	r3, r2, r3
 80176fa:	881b      	ldrh	r3, [r3, #0]
 80176fc:	001a      	movs	r2, r3
 80176fe:	2313      	movs	r3, #19
 8017700:	18fb      	adds	r3, r7, r3
 8017702:	781b      	ldrb	r3, [r3, #0]
 8017704:	411a      	asrs	r2, r3
 8017706:	0013      	movs	r3, r2
 8017708:	2201      	movs	r2, #1
 801770a:	4013      	ands	r3, r2
 801770c:	d100      	bne.n	8017710 <CountNbOfEnabledChannels+0x68>
 801770e:	e086      	b.n	801781e <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8017710:	2315      	movs	r3, #21
 8017712:	18fb      	adds	r3, r7, r3
 8017714:	781a      	ldrb	r2, [r3, #0]
 8017716:	2313      	movs	r3, #19
 8017718:	18fb      	adds	r3, r7, r3
 801771a:	781b      	ldrb	r3, [r3, #0]
 801771c:	18d3      	adds	r3, r2, r3
 801771e:	001a      	movs	r2, r3
 8017720:	0013      	movs	r3, r2
 8017722:	005b      	lsls	r3, r3, #1
 8017724:	189b      	adds	r3, r3, r2
 8017726:	009b      	lsls	r3, r3, #2
 8017728:	001a      	movs	r2, r3
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	189b      	adds	r3, r3, r2
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d06f      	beq.n	8017814 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8017734:	230f      	movs	r3, #15
 8017736:	18fb      	adds	r3, r7, r3
 8017738:	781b      	ldrb	r3, [r3, #0]
 801773a:	2201      	movs	r2, #1
 801773c:	4053      	eors	r3, r2
 801773e:	b2db      	uxtb	r3, r3
 8017740:	2b00      	cmp	r3, #0
 8017742:	d008      	beq.n	8017756 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( IN865_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8017744:	2313      	movs	r3, #19
 8017746:	18fb      	adds	r3, r7, r3
 8017748:	781b      	ldrb	r3, [r3, #0]
 801774a:	2207      	movs	r2, #7
 801774c:	411a      	asrs	r2, r3
 801774e:	0013      	movs	r3, r2
 8017750:	2201      	movs	r2, #1
 8017752:	4013      	ands	r3, r2
 8017754:	d060      	beq.n	8017818 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8017756:	230e      	movs	r3, #14
 8017758:	18fb      	adds	r3, r7, r3
 801775a:	2000      	movs	r0, #0
 801775c:	5618      	ldrsb	r0, [r3, r0]
 801775e:	2415      	movs	r4, #21
 8017760:	193b      	adds	r3, r7, r4
 8017762:	781a      	ldrb	r2, [r3, #0]
 8017764:	2513      	movs	r5, #19
 8017766:	197b      	adds	r3, r7, r5
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	18d3      	adds	r3, r2, r3
 801776c:	001a      	movs	r2, r3
 801776e:	0013      	movs	r3, r2
 8017770:	005b      	lsls	r3, r3, #1
 8017772:	189b      	adds	r3, r3, r2
 8017774:	009b      	lsls	r3, r3, #2
 8017776:	001a      	movs	r2, r3
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	189b      	adds	r3, r3, r2
 801777c:	7a1b      	ldrb	r3, [r3, #8]
 801777e:	011b      	lsls	r3, r3, #4
 8017780:	b25b      	sxtb	r3, r3
 8017782:	111b      	asrs	r3, r3, #4
 8017784:	b25b      	sxtb	r3, r3
 8017786:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8017788:	193b      	adds	r3, r7, r4
 801778a:	781a      	ldrb	r2, [r3, #0]
 801778c:	197b      	adds	r3, r7, r5
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	18d3      	adds	r3, r2, r3
 8017792:	001a      	movs	r2, r3
 8017794:	0013      	movs	r3, r2
 8017796:	005b      	lsls	r3, r3, #1
 8017798:	189b      	adds	r3, r3, r2
 801779a:	009b      	lsls	r3, r3, #2
 801779c:	001a      	movs	r2, r3
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	189b      	adds	r3, r3, r2
 80177a2:	7a1b      	ldrb	r3, [r3, #8]
 80177a4:	b25b      	sxtb	r3, r3
 80177a6:	111b      	asrs	r3, r3, #4
 80177a8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 80177aa:	001a      	movs	r2, r3
 80177ac:	f7fc fde8 	bl	8014380 <RegionCommonValueInRange>
 80177b0:	1e03      	subs	r3, r0, #0
 80177b2:	d033      	beq.n	801781c <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 80177b4:	2315      	movs	r3, #21
 80177b6:	18fb      	adds	r3, r7, r3
 80177b8:	781a      	ldrb	r2, [r3, #0]
 80177ba:	2313      	movs	r3, #19
 80177bc:	18fb      	adds	r3, r7, r3
 80177be:	781b      	ldrb	r3, [r3, #0]
 80177c0:	18d3      	adds	r3, r2, r3
 80177c2:	001a      	movs	r2, r3
 80177c4:	0013      	movs	r3, r2
 80177c6:	005b      	lsls	r3, r3, #1
 80177c8:	189b      	adds	r3, r3, r2
 80177ca:	009b      	lsls	r3, r3, #2
 80177cc:	001a      	movs	r2, r3
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	189b      	adds	r3, r3, r2
 80177d2:	7a5b      	ldrb	r3, [r3, #9]
 80177d4:	011b      	lsls	r3, r3, #4
 80177d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177d8:	18d3      	adds	r3, r2, r3
 80177da:	68db      	ldr	r3, [r3, #12]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d006      	beq.n	80177ee <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 80177e0:	2116      	movs	r1, #22
 80177e2:	187b      	adds	r3, r7, r1
 80177e4:	781a      	ldrb	r2, [r3, #0]
 80177e6:	187b      	adds	r3, r7, r1
 80177e8:	3201      	adds	r2, #1
 80177ea:	701a      	strb	r2, [r3, #0]
                    continue;
 80177ec:	e017      	b.n	801781e <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 80177ee:	2217      	movs	r2, #23
 80177f0:	18bb      	adds	r3, r7, r2
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	18ba      	adds	r2, r7, r2
 80177f6:	1c59      	adds	r1, r3, #1
 80177f8:	7011      	strb	r1, [r2, #0]
 80177fa:	001a      	movs	r2, r3
 80177fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177fe:	189b      	adds	r3, r3, r2
 8017800:	2215      	movs	r2, #21
 8017802:	18b9      	adds	r1, r7, r2
 8017804:	2213      	movs	r2, #19
 8017806:	18ba      	adds	r2, r7, r2
 8017808:	7809      	ldrb	r1, [r1, #0]
 801780a:	7812      	ldrb	r2, [r2, #0]
 801780c:	188a      	adds	r2, r1, r2
 801780e:	b2d2      	uxtb	r2, r2
 8017810:	701a      	strb	r2, [r3, #0]
 8017812:	e004      	b.n	801781e <CountNbOfEnabledChannels+0x176>
                    continue;
 8017814:	46c0      	nop			; (mov r8, r8)
 8017816:	e002      	b.n	801781e <CountNbOfEnabledChannels+0x176>
                        continue;
 8017818:	46c0      	nop			; (mov r8, r8)
 801781a:	e000      	b.n	801781e <CountNbOfEnabledChannels+0x176>
                    continue;
 801781c:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801781e:	2113      	movs	r1, #19
 8017820:	187b      	adds	r3, r7, r1
 8017822:	781a      	ldrb	r2, [r3, #0]
 8017824:	187b      	adds	r3, r7, r1
 8017826:	3201      	adds	r2, #1
 8017828:	701a      	strb	r2, [r3, #0]
 801782a:	2313      	movs	r3, #19
 801782c:	18fb      	adds	r3, r7, r3
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	2b0f      	cmp	r3, #15
 8017832:	d800      	bhi.n	8017836 <CountNbOfEnabledChannels+0x18e>
 8017834:	e75b      	b.n	80176ee <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 8017836:	2215      	movs	r2, #21
 8017838:	18bb      	adds	r3, r7, r2
 801783a:	18ba      	adds	r2, r7, r2
 801783c:	7812      	ldrb	r2, [r2, #0]
 801783e:	3210      	adds	r2, #16
 8017840:	701a      	strb	r2, [r3, #0]
 8017842:	2114      	movs	r1, #20
 8017844:	187b      	adds	r3, r7, r1
 8017846:	781a      	ldrb	r2, [r3, #0]
 8017848:	187b      	adds	r3, r7, r1
 801784a:	3201      	adds	r2, #1
 801784c:	701a      	strb	r2, [r3, #0]
 801784e:	2315      	movs	r3, #21
 8017850:	18fb      	adds	r3, r7, r3
 8017852:	781b      	ldrb	r3, [r3, #0]
 8017854:	2b0f      	cmp	r3, #15
 8017856:	d800      	bhi.n	801785a <CountNbOfEnabledChannels+0x1b2>
 8017858:	e744      	b.n	80176e4 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 801785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801785c:	2216      	movs	r2, #22
 801785e:	18ba      	adds	r2, r7, r2
 8017860:	7812      	ldrb	r2, [r2, #0]
 8017862:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8017864:	2317      	movs	r3, #23
 8017866:	18fb      	adds	r3, r7, r3
 8017868:	781b      	ldrb	r3, [r3, #0]
}
 801786a:	0018      	movs	r0, r3
 801786c:	46bd      	mov	sp, r7
 801786e:	b006      	add	sp, #24
 8017870:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017874 <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b084      	sub	sp, #16
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801787c:	2308      	movs	r3, #8
 801787e:	18fb      	adds	r3, r7, r3
 8017880:	2200      	movs	r2, #0
 8017882:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	2b34      	cmp	r3, #52	; 0x34
 801788a:	d900      	bls.n	801788e <RegionIN865GetPhyParam+0x1a>
 801788c:	e0cd      	b.n	8017a2a <RegionIN865GetPhyParam+0x1b6>
 801788e:	009a      	lsls	r2, r3, #2
 8017890:	4b6d      	ldr	r3, [pc, #436]	; (8017a48 <RegionIN865GetPhyParam+0x1d4>)
 8017892:	18d3      	adds	r3, r2, r3
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = IN865_RX_MIN_DATARATE;
 8017898:	2308      	movs	r3, #8
 801789a:	18fb      	adds	r3, r7, r3
 801789c:	2200      	movs	r2, #0
 801789e:	601a      	str	r2, [r3, #0]
            break;
 80178a0:	e0c4      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = IN865_TX_MIN_DATARATE;
 80178a2:	2308      	movs	r3, #8
 80178a4:	18fb      	adds	r3, r7, r3
 80178a6:	2200      	movs	r2, #0
 80178a8:	601a      	str	r2, [r3, #0]
            break;
 80178aa:	e0bf      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = IN865_DEFAULT_DATARATE;
 80178ac:	2308      	movs	r3, #8
 80178ae:	18fb      	adds	r3, r7, r3
 80178b0:	2200      	movs	r2, #0
 80178b2:	601a      	str	r2, [r3, #0]
            break;
 80178b4:	e0ba      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, IN865_TX_MIN_DATARATE );
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	785b      	ldrb	r3, [r3, #1]
 80178ba:	b25b      	sxtb	r3, r3
 80178bc:	2100      	movs	r1, #0
 80178be:	0018      	movs	r0, r3
 80178c0:	f7ff fe51 	bl	8017566 <GetNextLowerTxDr>
 80178c4:	0003      	movs	r3, r0
 80178c6:	001a      	movs	r2, r3
 80178c8:	2308      	movs	r3, #8
 80178ca:	18fb      	adds	r3, r7, r3
 80178cc:	601a      	str	r2, [r3, #0]
            break;
 80178ce:	e0ad      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = IN865_MAX_TX_POWER;
 80178d0:	2308      	movs	r3, #8
 80178d2:	18fb      	adds	r3, r7, r3
 80178d4:	2200      	movs	r2, #0
 80178d6:	601a      	str	r2, [r3, #0]
            break;
 80178d8:	e0a8      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = IN865_DEFAULT_TX_POWER;
 80178da:	2308      	movs	r3, #8
 80178dc:	18fb      	adds	r3, r7, r3
 80178de:	2200      	movs	r2, #0
 80178e0:	601a      	str	r2, [r3, #0]
            break;
 80178e2:	e0a3      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = IN865_ADR_ACK_LIMIT;
 80178e4:	2308      	movs	r3, #8
 80178e6:	18fb      	adds	r3, r7, r3
 80178e8:	2240      	movs	r2, #64	; 0x40
 80178ea:	601a      	str	r2, [r3, #0]
            break;
 80178ec:	e09e      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = IN865_ADR_ACK_DELAY;
 80178ee:	2308      	movs	r3, #8
 80178f0:	18fb      	adds	r3, r7, r3
 80178f2:	2220      	movs	r2, #32
 80178f4:	601a      	str	r2, [r3, #0]
            break;
 80178f6:	e099      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	785b      	ldrb	r3, [r3, #1]
 80178fc:	b25b      	sxtb	r3, r3
 80178fe:	001a      	movs	r2, r3
 8017900:	4b52      	ldr	r3, [pc, #328]	; (8017a4c <RegionIN865GetPhyParam+0x1d8>)
 8017902:	5c9b      	ldrb	r3, [r3, r2]
 8017904:	001a      	movs	r2, r3
 8017906:	2308      	movs	r3, #8
 8017908:	18fb      	adds	r3, r7, r3
 801790a:	601a      	str	r2, [r3, #0]
            break;
 801790c:	e08e      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	785b      	ldrb	r3, [r3, #1]
 8017912:	b25b      	sxtb	r3, r3
 8017914:	001a      	movs	r2, r3
 8017916:	4b4e      	ldr	r3, [pc, #312]	; (8017a50 <RegionIN865GetPhyParam+0x1dc>)
 8017918:	5c9b      	ldrb	r3, [r3, r2]
 801791a:	001a      	movs	r2, r3
 801791c:	2308      	movs	r3, #8
 801791e:	18fb      	adds	r3, r7, r3
 8017920:	601a      	str	r2, [r3, #0]
            break;
 8017922:	e083      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 8017924:	2308      	movs	r3, #8
 8017926:	18fb      	adds	r3, r7, r3
 8017928:	2201      	movs	r2, #1
 801792a:	601a      	str	r2, [r3, #0]
            break;
 801792c:	e07e      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = IN865_MAX_RX_WINDOW;
 801792e:	2308      	movs	r3, #8
 8017930:	18fb      	adds	r3, r7, r3
 8017932:	4a48      	ldr	r2, [pc, #288]	; (8017a54 <RegionIN865GetPhyParam+0x1e0>)
 8017934:	601a      	str	r2, [r3, #0]
            break;
 8017936:	e079      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = IN865_RECEIVE_DELAY1;
 8017938:	2308      	movs	r3, #8
 801793a:	18fb      	adds	r3, r7, r3
 801793c:	22fa      	movs	r2, #250	; 0xfa
 801793e:	0092      	lsls	r2, r2, #2
 8017940:	601a      	str	r2, [r3, #0]
            break;
 8017942:	e073      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = IN865_RECEIVE_DELAY2;
 8017944:	2308      	movs	r3, #8
 8017946:	18fb      	adds	r3, r7, r3
 8017948:	22fa      	movs	r2, #250	; 0xfa
 801794a:	00d2      	lsls	r2, r2, #3
 801794c:	601a      	str	r2, [r3, #0]
            break;
 801794e:	e06d      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY1;
 8017950:	2308      	movs	r3, #8
 8017952:	18fb      	adds	r3, r7, r3
 8017954:	4a40      	ldr	r2, [pc, #256]	; (8017a58 <RegionIN865GetPhyParam+0x1e4>)
 8017956:	601a      	str	r2, [r3, #0]
            break;
 8017958:	e068      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY2;
 801795a:	2308      	movs	r3, #8
 801795c:	18fb      	adds	r3, r7, r3
 801795e:	4a3f      	ldr	r2, [pc, #252]	; (8017a5c <RegionIN865GetPhyParam+0x1e8>)
 8017960:	601a      	str	r2, [r3, #0]
            break;
 8017962:	e063      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = IN865_MAX_FCNT_GAP;
 8017964:	2308      	movs	r3, #8
 8017966:	18fb      	adds	r3, r7, r3
 8017968:	2280      	movs	r2, #128	; 0x80
 801796a:	01d2      	lsls	r2, r2, #7
 801796c:	601a      	str	r2, [r3, #0]
            break;
 801796e:	e05d      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( IN865_ACKTIMEOUT + randr( -IN865_ACK_TIMEOUT_RND, IN865_ACK_TIMEOUT_RND ) );
 8017970:	23fa      	movs	r3, #250	; 0xfa
 8017972:	009b      	lsls	r3, r3, #2
 8017974:	4a3a      	ldr	r2, [pc, #232]	; (8017a60 <RegionIN865GetPhyParam+0x1ec>)
 8017976:	0019      	movs	r1, r3
 8017978:	0010      	movs	r0, r2
 801797a:	f005 f999 	bl	801ccb0 <randr>
 801797e:	0003      	movs	r3, r0
 8017980:	22fa      	movs	r2, #250	; 0xfa
 8017982:	00d2      	lsls	r2, r2, #3
 8017984:	4694      	mov	ip, r2
 8017986:	4463      	add	r3, ip
 8017988:	001a      	movs	r2, r3
 801798a:	2308      	movs	r3, #8
 801798c:	18fb      	adds	r3, r7, r3
 801798e:	601a      	str	r2, [r3, #0]
            break;
 8017990:	e04c      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = IN865_DEFAULT_RX1_DR_OFFSET;
 8017992:	2308      	movs	r3, #8
 8017994:	18fb      	adds	r3, r7, r3
 8017996:	2200      	movs	r2, #0
 8017998:	601a      	str	r2, [r3, #0]
            break;
 801799a:	e047      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = IN865_RX_WND_2_FREQ;
 801799c:	2308      	movs	r3, #8
 801799e:	18fb      	adds	r3, r7, r3
 80179a0:	4a30      	ldr	r2, [pc, #192]	; (8017a64 <RegionIN865GetPhyParam+0x1f0>)
 80179a2:	601a      	str	r2, [r3, #0]
            break;
 80179a4:	e042      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = IN865_RX_WND_2_DR;
 80179a6:	2308      	movs	r3, #8
 80179a8:	18fb      	adds	r3, r7, r3
 80179aa:	2202      	movs	r2, #2
 80179ac:	601a      	str	r2, [r3, #0]
            break;
 80179ae:	e03d      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80179b0:	2308      	movs	r3, #8
 80179b2:	18fb      	adds	r3, r7, r3
 80179b4:	4a2c      	ldr	r2, [pc, #176]	; (8017a68 <RegionIN865GetPhyParam+0x1f4>)
 80179b6:	601a      	str	r2, [r3, #0]
            break;
 80179b8:	e038      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 80179ba:	2308      	movs	r3, #8
 80179bc:	18fb      	adds	r3, r7, r3
 80179be:	4a2b      	ldr	r2, [pc, #172]	; (8017a6c <RegionIN865GetPhyParam+0x1f8>)
 80179c0:	601a      	str	r2, [r3, #0]
            break;
 80179c2:	e033      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 80179c4:	2308      	movs	r3, #8
 80179c6:	18fb      	adds	r3, r7, r3
 80179c8:	2210      	movs	r2, #16
 80179ca:	601a      	str	r2, [r3, #0]
            break;
 80179cc:	e02e      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80179ce:	2308      	movs	r3, #8
 80179d0:	18fb      	adds	r3, r7, r3
 80179d2:	4a27      	ldr	r2, [pc, #156]	; (8017a70 <RegionIN865GetPhyParam+0x1fc>)
 80179d4:	601a      	str	r2, [r3, #0]
            break;
 80179d6:	e029      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80179d8:	2308      	movs	r3, #8
 80179da:	18fb      	adds	r3, r7, r3
 80179dc:	2200      	movs	r2, #0
 80179de:	601a      	str	r2, [r3, #0]
            break;
 80179e0:	e024      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 80179e2:	2308      	movs	r3, #8
 80179e4:	18fb      	adds	r3, r7, r3
 80179e6:	4a23      	ldr	r2, [pc, #140]	; (8017a74 <RegionIN865GetPhyParam+0x200>)
 80179e8:	601a      	str	r2, [r3, #0]
            break;
 80179ea:	e01f      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 80179ec:	2308      	movs	r3, #8
 80179ee:	18fb      	adds	r3, r7, r3
 80179f0:	4a21      	ldr	r2, [pc, #132]	; (8017a78 <RegionIN865GetPhyParam+0x204>)
 80179f2:	601a      	str	r2, [r3, #0]
            break;
 80179f4:	e01a      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 80179f6:	2308      	movs	r3, #8
 80179f8:	18fb      	adds	r3, r7, r3
 80179fa:	4a1a      	ldr	r2, [pc, #104]	; (8017a64 <RegionIN865GetPhyParam+0x1f0>)
 80179fc:	601a      	str	r2, [r3, #0]
            break;
 80179fe:	e015      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 8017a00:	2108      	movs	r1, #8
 8017a02:	187b      	adds	r3, r7, r1
 8017a04:	2213      	movs	r2, #19
 8017a06:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 8017a08:	187b      	adds	r3, r7, r1
 8017a0a:	2201      	movs	r2, #1
 8017a0c:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 8017a0e:	187b      	adds	r3, r7, r1
 8017a10:	2203      	movs	r2, #3
 8017a12:	709a      	strb	r2, [r3, #2]
            break;
 8017a14:	e00a      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 8017a16:	2308      	movs	r3, #8
 8017a18:	18fb      	adds	r3, r7, r3
 8017a1a:	2204      	movs	r2, #4
 8017a1c:	601a      	str	r2, [r3, #0]
            break;
 8017a1e:	e005      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 8017a20:	2308      	movs	r3, #8
 8017a22:	18fb      	adds	r3, r7, r3
 8017a24:	2204      	movs	r2, #4
 8017a26:	601a      	str	r2, [r3, #0]
            break;
 8017a28:	e000      	b.n	8017a2c <RegionIN865GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 8017a2a:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8017a2c:	210c      	movs	r1, #12
 8017a2e:	187b      	adds	r3, r7, r1
 8017a30:	2208      	movs	r2, #8
 8017a32:	18ba      	adds	r2, r7, r2
 8017a34:	6812      	ldr	r2, [r2, #0]
 8017a36:	601a      	str	r2, [r3, #0]
 8017a38:	187b      	adds	r3, r7, r1
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	681a      	ldr	r2, [r3, #0]
 8017a3e:	0013      	movs	r3, r2
}
 8017a40:	0018      	movs	r0, r3
 8017a42:	46bd      	mov	sp, r7
 8017a44:	b004      	add	sp, #16
 8017a46:	bd80      	pop	{r7, pc}
 8017a48:	08028534 	.word	0x08028534
 8017a4c:	0802851c 	.word	0x0802851c
 8017a50:	08028524 	.word	0x08028524
 8017a54:	00000bb8 	.word	0x00000bb8
 8017a58:	00001388 	.word	0x00001388
 8017a5c:	00001770 	.word	0x00001770
 8017a60:	fffffc18 	.word	0xfffffc18
 8017a64:	33a680f0 	.word	0x33a680f0
 8017a68:	200016f0 	.word	0x200016f0
 8017a6c:	200016f2 	.word	0x200016f2
 8017a70:	20001620 	.word	0x20001620
 8017a74:	41f00000 	.word	0x41f00000
 8017a78:	4009999a 	.word	0x4009999a

08017a7c <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	7858      	ldrb	r0, [r3, #1]
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	0019      	movs	r1, r3
 8017a8e:	4a0a      	ldr	r2, [pc, #40]	; (8017ab8 <RegionIN865SetBandTxDone+0x3c>)
 8017a90:	000b      	movs	r3, r1
 8017a92:	005b      	lsls	r3, r3, #1
 8017a94:	185b      	adds	r3, r3, r1
 8017a96:	009b      	lsls	r3, r3, #2
 8017a98:	18d3      	adds	r3, r2, r3
 8017a9a:	3309      	adds	r3, #9
 8017a9c:	781b      	ldrb	r3, [r3, #0]
 8017a9e:	330c      	adds	r3, #12
 8017aa0:	011a      	lsls	r2, r3, #4
 8017aa2:	4b05      	ldr	r3, [pc, #20]	; (8017ab8 <RegionIN865SetBandTxDone+0x3c>)
 8017aa4:	18d1      	adds	r1, r2, r3
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	685b      	ldr	r3, [r3, #4]
 8017aaa:	001a      	movs	r2, r3
 8017aac:	f7fc fd40 	bl	8014530 <RegionCommonSetBandTxDone>
}
 8017ab0:	46c0      	nop			; (mov r8, r8)
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	b002      	add	sp, #8
 8017ab6:	bd80      	pop	{r7, pc}
 8017ab8:	20001620 	.word	0x20001620

08017abc <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 8017abc:	b590      	push	{r4, r7, lr}
 8017abe:	b087      	sub	sp, #28
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
    Band_t bands[IN865_MAX_NB_BANDS] =
 8017ac4:	2108      	movs	r1, #8
 8017ac6:	187b      	adds	r3, r7, r1
 8017ac8:	2201      	movs	r2, #1
 8017aca:	801a      	strh	r2, [r3, #0]
 8017acc:	187b      	adds	r3, r7, r1
 8017ace:	2200      	movs	r2, #0
 8017ad0:	709a      	strb	r2, [r3, #2]
 8017ad2:	187b      	adds	r3, r7, r1
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	605a      	str	r2, [r3, #4]
 8017ad8:	187b      	adds	r3, r7, r1
 8017ada:	2200      	movs	r2, #0
 8017adc:	609a      	str	r2, [r3, #8]
 8017ade:	187b      	adds	r3, r7, r1
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	60da      	str	r2, [r3, #12]
    {
        IN865_BAND0
    };

    switch( params->Type )
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	791b      	ldrb	r3, [r3, #4]
 8017ae8:	2b01      	cmp	r3, #1
 8017aea:	d030      	beq.n	8017b4e <RegionIN865InitDefaults+0x92>
 8017aec:	2b02      	cmp	r3, #2
 8017aee:	d022      	beq.n	8017b36 <RegionIN865InitDefaults+0x7a>
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d000      	beq.n	8017af6 <RegionIN865InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017af4:	e038      	b.n	8017b68 <RegionIN865InitDefaults+0xac>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8017af6:	2308      	movs	r3, #8
 8017af8:	18f9      	adds	r1, r7, r3
 8017afa:	4b1d      	ldr	r3, [pc, #116]	; (8017b70 <RegionIN865InitDefaults+0xb4>)
 8017afc:	2210      	movs	r2, #16
 8017afe:	0018      	movs	r0, r3
 8017b00:	f005 f8ec 	bl	801ccdc <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8017b04:	4b1b      	ldr	r3, [pc, #108]	; (8017b74 <RegionIN865InitDefaults+0xb8>)
 8017b06:	4a1c      	ldr	r2, [pc, #112]	; (8017b78 <RegionIN865InitDefaults+0xbc>)
 8017b08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017b0a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8017b0c:	4b19      	ldr	r3, [pc, #100]	; (8017b74 <RegionIN865InitDefaults+0xb8>)
 8017b0e:	4a1b      	ldr	r2, [pc, #108]	; (8017b7c <RegionIN865InitDefaults+0xc0>)
 8017b10:	330c      	adds	r3, #12
 8017b12:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017b14:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8017b16:	4b17      	ldr	r3, [pc, #92]	; (8017b74 <RegionIN865InitDefaults+0xb8>)
 8017b18:	4a19      	ldr	r2, [pc, #100]	; (8017b80 <RegionIN865InitDefaults+0xc4>)
 8017b1a:	3318      	adds	r3, #24
 8017b1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017b1e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017b20:	4b14      	ldr	r3, [pc, #80]	; (8017b74 <RegionIN865InitDefaults+0xb8>)
 8017b22:	22d2      	movs	r2, #210	; 0xd2
 8017b24:	2107      	movs	r1, #7
 8017b26:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8017b28:	4916      	ldr	r1, [pc, #88]	; (8017b84 <RegionIN865InitDefaults+0xc8>)
 8017b2a:	4b17      	ldr	r3, [pc, #92]	; (8017b88 <RegionIN865InitDefaults+0xcc>)
 8017b2c:	2201      	movs	r2, #1
 8017b2e:	0018      	movs	r0, r3
 8017b30:	f7fc fccf 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 8017b34:	e018      	b.n	8017b68 <RegionIN865InitDefaults+0xac>
            if( params->NvmCtx != 0 )
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d013      	beq.n	8017b66 <RegionIN865InitDefaults+0xaa>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	6819      	ldr	r1, [r3, #0]
 8017b42:	4b0c      	ldr	r3, [pc, #48]	; (8017b74 <RegionIN865InitDefaults+0xb8>)
 8017b44:	22d4      	movs	r2, #212	; 0xd4
 8017b46:	0018      	movs	r0, r3
 8017b48:	f005 f8c8 	bl	801ccdc <memcpy1>
            break;
 8017b4c:	e00b      	b.n	8017b66 <RegionIN865InitDefaults+0xaa>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8017b4e:	4b09      	ldr	r3, [pc, #36]	; (8017b74 <RegionIN865InitDefaults+0xb8>)
 8017b50:	22d0      	movs	r2, #208	; 0xd0
 8017b52:	5a9a      	ldrh	r2, [r3, r2]
 8017b54:	4b07      	ldr	r3, [pc, #28]	; (8017b74 <RegionIN865InitDefaults+0xb8>)
 8017b56:	21d2      	movs	r1, #210	; 0xd2
 8017b58:	5a5b      	ldrh	r3, [r3, r1]
 8017b5a:	4313      	orrs	r3, r2
 8017b5c:	b299      	uxth	r1, r3
 8017b5e:	4b05      	ldr	r3, [pc, #20]	; (8017b74 <RegionIN865InitDefaults+0xb8>)
 8017b60:	22d0      	movs	r2, #208	; 0xd0
 8017b62:	5299      	strh	r1, [r3, r2]
            break;
 8017b64:	e000      	b.n	8017b68 <RegionIN865InitDefaults+0xac>
            break;
 8017b66:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017b68:	46c0      	nop			; (mov r8, r8)
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	b007      	add	sp, #28
 8017b6e:	bd90      	pop	{r4, r7, pc}
 8017b70:	200016e0 	.word	0x200016e0
 8017b74:	20001620 	.word	0x20001620
 8017b78:	08026b90 	.word	0x08026b90
 8017b7c:	08026b9c 	.word	0x08026b9c
 8017b80:	08026ba8 	.word	0x08026ba8
 8017b84:	200016f2 	.word	0x200016f2
 8017b88:	200016f0 	.word	0x200016f0

08017b8c <RegionIN865ApplyCFList>:
            return false;
    }
}

void RegionIN865ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017b8c:	b590      	push	{r4, r7, lr}
 8017b8e:	b08b      	sub	sp, #44	; 0x2c
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017b94:	2318      	movs	r3, #24
 8017b96:	18fb      	adds	r3, r7, r3
 8017b98:	2250      	movs	r2, #80	; 0x50
 8017b9a:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	791b      	ldrb	r3, [r3, #4]
 8017ba0:	2b10      	cmp	r3, #16
 8017ba2:	d000      	beq.n	8017ba6 <RegionIN865ApplyCFList+0x1a>
 8017ba4:	e07d      	b.n	8017ca2 <RegionIN865ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	330f      	adds	r3, #15
 8017bac:	781b      	ldrb	r3, [r3, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d000      	beq.n	8017bb4 <RegionIN865ApplyCFList+0x28>
 8017bb2:	e078      	b.n	8017ca6 <RegionIN865ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017bb4:	2327      	movs	r3, #39	; 0x27
 8017bb6:	18fb      	adds	r3, r7, r3
 8017bb8:	2200      	movs	r2, #0
 8017bba:	701a      	strb	r2, [r3, #0]
 8017bbc:	2326      	movs	r3, #38	; 0x26
 8017bbe:	18fb      	adds	r3, r7, r3
 8017bc0:	2203      	movs	r2, #3
 8017bc2:	701a      	strb	r2, [r3, #0]
 8017bc4:	e067      	b.n	8017c96 <RegionIN865ApplyCFList+0x10a>
    {
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8017bc6:	2326      	movs	r3, #38	; 0x26
 8017bc8:	18fb      	adds	r3, r7, r3
 8017bca:	781b      	ldrb	r3, [r3, #0]
 8017bcc:	2b07      	cmp	r3, #7
 8017bce:	d82e      	bhi.n	8017c2e <RegionIN865ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	681a      	ldr	r2, [r3, #0]
 8017bd4:	2427      	movs	r4, #39	; 0x27
 8017bd6:	193b      	adds	r3, r7, r4
 8017bd8:	781b      	ldrb	r3, [r3, #0]
 8017bda:	18d3      	adds	r3, r2, r3
 8017bdc:	781b      	ldrb	r3, [r3, #0]
 8017bde:	001a      	movs	r2, r3
 8017be0:	2018      	movs	r0, #24
 8017be2:	183b      	adds	r3, r7, r0
 8017be4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017be6:	183b      	adds	r3, r7, r0
 8017be8:	681a      	ldr	r2, [r3, #0]
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	6819      	ldr	r1, [r3, #0]
 8017bee:	193b      	adds	r3, r7, r4
 8017bf0:	781b      	ldrb	r3, [r3, #0]
 8017bf2:	3301      	adds	r3, #1
 8017bf4:	18cb      	adds	r3, r1, r3
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	021b      	lsls	r3, r3, #8
 8017bfa:	431a      	orrs	r2, r3
 8017bfc:	183b      	adds	r3, r7, r0
 8017bfe:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017c00:	183b      	adds	r3, r7, r0
 8017c02:	681a      	ldr	r2, [r3, #0]
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	6819      	ldr	r1, [r3, #0]
 8017c08:	193b      	adds	r3, r7, r4
 8017c0a:	781b      	ldrb	r3, [r3, #0]
 8017c0c:	3302      	adds	r3, #2
 8017c0e:	18cb      	adds	r3, r1, r3
 8017c10:	781b      	ldrb	r3, [r3, #0]
 8017c12:	041b      	lsls	r3, r3, #16
 8017c14:	431a      	orrs	r2, r3
 8017c16:	183b      	adds	r3, r7, r0
 8017c18:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8017c1a:	183b      	adds	r3, r7, r0
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	2264      	movs	r2, #100	; 0x64
 8017c20:	435a      	muls	r2, r3
 8017c22:	183b      	adds	r3, r7, r0
 8017c24:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017c26:	183b      	adds	r3, r7, r0
 8017c28:	2200      	movs	r2, #0
 8017c2a:	605a      	str	r2, [r3, #4]
 8017c2c:	e009      	b.n	8017c42 <RegionIN865ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8017c2e:	2118      	movs	r1, #24
 8017c30:	187b      	adds	r3, r7, r1
 8017c32:	2200      	movs	r2, #0
 8017c34:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8017c36:	187b      	adds	r3, r7, r1
 8017c38:	2200      	movs	r2, #0
 8017c3a:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8017c3c:	187b      	adds	r3, r7, r1
 8017c3e:	2200      	movs	r2, #0
 8017c40:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8017c42:	2318      	movs	r3, #24
 8017c44:	18fb      	adds	r3, r7, r3
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d00e      	beq.n	8017c6a <RegionIN865ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8017c4c:	2110      	movs	r1, #16
 8017c4e:	187b      	adds	r3, r7, r1
 8017c50:	2218      	movs	r2, #24
 8017c52:	18ba      	adds	r2, r7, r2
 8017c54:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8017c56:	187b      	adds	r3, r7, r1
 8017c58:	2226      	movs	r2, #38	; 0x26
 8017c5a:	18ba      	adds	r2, r7, r2
 8017c5c:	7812      	ldrb	r2, [r2, #0]
 8017c5e:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionIN865ChannelAdd( &channelAdd );
 8017c60:	187b      	adds	r3, r7, r1
 8017c62:	0018      	movs	r0, r3
 8017c64:	f000 fd88 	bl	8018778 <RegionIN865ChannelAdd>
 8017c68:	e009      	b.n	8017c7e <RegionIN865ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017c6a:	210c      	movs	r1, #12
 8017c6c:	187b      	adds	r3, r7, r1
 8017c6e:	2226      	movs	r2, #38	; 0x26
 8017c70:	18ba      	adds	r2, r7, r2
 8017c72:	7812      	ldrb	r2, [r2, #0]
 8017c74:	701a      	strb	r2, [r3, #0]

            RegionIN865ChannelsRemove( &channelRemove );
 8017c76:	187b      	adds	r3, r7, r1
 8017c78:	0018      	movs	r0, r3
 8017c7a:	f000 fe37 	bl	80188ec <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017c7e:	2227      	movs	r2, #39	; 0x27
 8017c80:	18bb      	adds	r3, r7, r2
 8017c82:	18ba      	adds	r2, r7, r2
 8017c84:	7812      	ldrb	r2, [r2, #0]
 8017c86:	3203      	adds	r2, #3
 8017c88:	701a      	strb	r2, [r3, #0]
 8017c8a:	2126      	movs	r1, #38	; 0x26
 8017c8c:	187b      	adds	r3, r7, r1
 8017c8e:	781a      	ldrb	r2, [r3, #0]
 8017c90:	187b      	adds	r3, r7, r1
 8017c92:	3201      	adds	r2, #1
 8017c94:	701a      	strb	r2, [r3, #0]
 8017c96:	2326      	movs	r3, #38	; 0x26
 8017c98:	18fb      	adds	r3, r7, r3
 8017c9a:	781b      	ldrb	r3, [r3, #0]
 8017c9c:	2b0f      	cmp	r3, #15
 8017c9e:	d992      	bls.n	8017bc6 <RegionIN865ApplyCFList+0x3a>
 8017ca0:	e002      	b.n	8017ca8 <RegionIN865ApplyCFList+0x11c>
        return;
 8017ca2:	46c0      	nop			; (mov r8, r8)
 8017ca4:	e000      	b.n	8017ca8 <RegionIN865ApplyCFList+0x11c>
        return;
 8017ca6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	b00b      	add	sp, #44	; 0x2c
 8017cac:	bd90      	pop	{r4, r7, pc}
	...

08017cb0 <RegionIN865ComputeRxWindowParameters>:
    }
    return true;
}

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cb2:	b08b      	sub	sp, #44	; 0x2c
 8017cb4:	af04      	add	r7, sp, #16
 8017cb6:	60ba      	str	r2, [r7, #8]
 8017cb8:	607b      	str	r3, [r7, #4]
 8017cba:	250f      	movs	r5, #15
 8017cbc:	197b      	adds	r3, r7, r5
 8017cbe:	1c02      	adds	r2, r0, #0
 8017cc0:	701a      	strb	r2, [r3, #0]
 8017cc2:	230e      	movs	r3, #14
 8017cc4:	18fb      	adds	r3, r7, r3
 8017cc6:	1c0a      	adds	r2, r1, #0
 8017cc8:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	2400      	movs	r4, #0
 8017cce:	613b      	str	r3, [r7, #16]
 8017cd0:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8017cd2:	197b      	adds	r3, r7, r5
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	b25a      	sxtb	r2, r3
 8017cd8:	2a07      	cmp	r2, #7
 8017cda:	dd00      	ble.n	8017cde <RegionIN865ComputeRxWindowParameters+0x2e>
 8017cdc:	2307      	movs	r3, #7
 8017cde:	b25a      	sxtb	r2, r3
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	785b      	ldrb	r3, [r3, #1]
 8017ce8:	b25b      	sxtb	r3, r3
 8017cea:	0018      	movs	r0, r3
 8017cec:	f7ff fc6e 	bl	80175cc <GetBandwidth>
 8017cf0:	0003      	movs	r3, r0
 8017cf2:	b2da      	uxtb	r2, r3
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	785b      	ldrb	r3, [r3, #1]
 8017cfc:	b25b      	sxtb	r3, r3
 8017cfe:	2b07      	cmp	r3, #7
 8017d00:	d10d      	bne.n	8017d1e <RegionIN865ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	785b      	ldrb	r3, [r3, #1]
 8017d06:	b25b      	sxtb	r3, r3
 8017d08:	001a      	movs	r2, r3
 8017d0a:	4b1b      	ldr	r3, [pc, #108]	; (8017d78 <RegionIN865ComputeRxWindowParameters+0xc8>)
 8017d0c:	5c9b      	ldrb	r3, [r3, r2]
 8017d0e:	0018      	movs	r0, r3
 8017d10:	f7fc fe46 	bl	80149a0 <RegionCommonComputeSymbolTimeFsk>
 8017d14:	0003      	movs	r3, r0
 8017d16:	000c      	movs	r4, r1
 8017d18:	613b      	str	r3, [r7, #16]
 8017d1a:	617c      	str	r4, [r7, #20]
 8017d1c:	e013      	b.n	8017d46 <RegionIN865ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	785b      	ldrb	r3, [r3, #1]
 8017d22:	b25b      	sxtb	r3, r3
 8017d24:	001a      	movs	r2, r3
 8017d26:	4b14      	ldr	r3, [pc, #80]	; (8017d78 <RegionIN865ComputeRxWindowParameters+0xc8>)
 8017d28:	5c98      	ldrb	r0, [r3, r2]
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	785b      	ldrb	r3, [r3, #1]
 8017d2e:	b25b      	sxtb	r3, r3
 8017d30:	001a      	movs	r2, r3
 8017d32:	4b12      	ldr	r3, [pc, #72]	; (8017d7c <RegionIN865ComputeRxWindowParameters+0xcc>)
 8017d34:	0092      	lsls	r2, r2, #2
 8017d36:	58d3      	ldr	r3, [r2, r3]
 8017d38:	0019      	movs	r1, r3
 8017d3a:	f7fc fe05 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 8017d3e:	0003      	movs	r3, r0
 8017d40:	000c      	movs	r4, r1
 8017d42:	613b      	str	r3, [r7, #16]
 8017d44:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017d46:	4b0e      	ldr	r3, [pc, #56]	; (8017d80 <RegionIN865ComputeRxWindowParameters+0xd0>)
 8017d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017d4a:	4798      	blx	r3
 8017d4c:	0006      	movs	r6, r0
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	3308      	adds	r3, #8
 8017d52:	687a      	ldr	r2, [r7, #4]
 8017d54:	320c      	adds	r2, #12
 8017d56:	68bd      	ldr	r5, [r7, #8]
 8017d58:	210e      	movs	r1, #14
 8017d5a:	1879      	adds	r1, r7, r1
 8017d5c:	780c      	ldrb	r4, [r1, #0]
 8017d5e:	6938      	ldr	r0, [r7, #16]
 8017d60:	6979      	ldr	r1, [r7, #20]
 8017d62:	9202      	str	r2, [sp, #8]
 8017d64:	9301      	str	r3, [sp, #4]
 8017d66:	9600      	str	r6, [sp, #0]
 8017d68:	002b      	movs	r3, r5
 8017d6a:	0022      	movs	r2, r4
 8017d6c:	f7fc fe34 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 8017d70:	46c0      	nop			; (mov r8, r8)
 8017d72:	46bd      	mov	sp, r7
 8017d74:	b007      	add	sp, #28
 8017d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d78:	080284f4 	.word	0x080284f4
 8017d7c:	080284fc 	.word	0x080284fc
 8017d80:	08028964 	.word	0x08028964

08017d84 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d86:	b091      	sub	sp, #68	; 0x44
 8017d88:	af0a      	add	r7, sp, #40	; 0x28
 8017d8a:	6078      	str	r0, [r7, #4]
 8017d8c:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017d8e:	230f      	movs	r3, #15
 8017d90:	18fb      	adds	r3, r7, r3
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	7852      	ldrb	r2, [r2, #1]
 8017d96:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8017d98:	2316      	movs	r3, #22
 8017d9a:	18fb      	adds	r3, r7, r3
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8017da0:	230e      	movs	r3, #14
 8017da2:	18fb      	adds	r3, r7, r3
 8017da4:	2200      	movs	r2, #0
 8017da6:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017dae:	4b64      	ldr	r3, [pc, #400]	; (8017f40 <RegionIN865RxConfig+0x1bc>)
 8017db0:	68db      	ldr	r3, [r3, #12]
 8017db2:	4798      	blx	r3
 8017db4:	1e03      	subs	r3, r0, #0
 8017db6:	d001      	beq.n	8017dbc <RegionIN865RxConfig+0x38>
    {
        return false;
 8017db8:	2300      	movs	r3, #0
 8017dba:	e0bc      	b.n	8017f36 <RegionIN865RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	7cdb      	ldrb	r3, [r3, #19]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d122      	bne.n	8017e0a <RegionIN865RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	0019      	movs	r1, r3
 8017dca:	4a5e      	ldr	r2, [pc, #376]	; (8017f44 <RegionIN865RxConfig+0x1c0>)
 8017dcc:	000b      	movs	r3, r1
 8017dce:	005b      	lsls	r3, r3, #1
 8017dd0:	185b      	adds	r3, r3, r1
 8017dd2:	009b      	lsls	r3, r3, #2
 8017dd4:	589b      	ldr	r3, [r3, r2]
 8017dd6:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	781b      	ldrb	r3, [r3, #0]
 8017ddc:	0019      	movs	r1, r3
 8017dde:	4a59      	ldr	r2, [pc, #356]	; (8017f44 <RegionIN865RxConfig+0x1c0>)
 8017de0:	000b      	movs	r3, r1
 8017de2:	005b      	lsls	r3, r3, #1
 8017de4:	185b      	adds	r3, r3, r1
 8017de6:	009b      	lsls	r3, r3, #2
 8017de8:	18d3      	adds	r3, r2, r3
 8017dea:	3304      	adds	r3, #4
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d00b      	beq.n	8017e0a <RegionIN865RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	0019      	movs	r1, r3
 8017df8:	4a52      	ldr	r2, [pc, #328]	; (8017f44 <RegionIN865RxConfig+0x1c0>)
 8017dfa:	000b      	movs	r3, r1
 8017dfc:	005b      	lsls	r3, r3, #1
 8017dfe:	185b      	adds	r3, r3, r1
 8017e00:	009b      	lsls	r3, r3, #2
 8017e02:	18d3      	adds	r3, r2, r3
 8017e04:	3304      	adds	r3, #4
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 8017e0a:	240f      	movs	r4, #15
 8017e0c:	193b      	adds	r3, r7, r4
 8017e0e:	781b      	ldrb	r3, [r3, #0]
 8017e10:	b25b      	sxtb	r3, r3
 8017e12:	4a4d      	ldr	r2, [pc, #308]	; (8017f48 <RegionIN865RxConfig+0x1c4>)
 8017e14:	5cd2      	ldrb	r2, [r2, r3]
 8017e16:	230e      	movs	r3, #14
 8017e18:	18fb      	adds	r3, r7, r3
 8017e1a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8017e1c:	4b48      	ldr	r3, [pc, #288]	; (8017f40 <RegionIN865RxConfig+0x1bc>)
 8017e1e:	695b      	ldr	r3, [r3, #20]
 8017e20:	693a      	ldr	r2, [r7, #16]
 8017e22:	0010      	movs	r0, r2
 8017e24:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017e26:	193b      	adds	r3, r7, r4
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	b25b      	sxtb	r3, r3
 8017e2c:	2b07      	cmp	r3, #7
 8017e2e:	d12f      	bne.n	8017e90 <RegionIN865RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8017e30:	2117      	movs	r1, #23
 8017e32:	187b      	adds	r3, r7, r1
 8017e34:	2200      	movs	r2, #0
 8017e36:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017e38:	4b41      	ldr	r3, [pc, #260]	; (8017f40 <RegionIN865RxConfig+0x1bc>)
 8017e3a:	6a1c      	ldr	r4, [r3, #32]
 8017e3c:	230e      	movs	r3, #14
 8017e3e:	18fb      	adds	r3, r7, r3
 8017e40:	2200      	movs	r2, #0
 8017e42:	569a      	ldrsb	r2, [r3, r2]
 8017e44:	0013      	movs	r3, r2
 8017e46:	015b      	lsls	r3, r3, #5
 8017e48:	1a9b      	subs	r3, r3, r2
 8017e4a:	009b      	lsls	r3, r3, #2
 8017e4c:	189b      	adds	r3, r3, r2
 8017e4e:	00db      	lsls	r3, r3, #3
 8017e50:	001e      	movs	r6, r3
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	689b      	ldr	r3, [r3, #8]
 8017e56:	b29b      	uxth	r3, r3
 8017e58:	687a      	ldr	r2, [r7, #4]
 8017e5a:	7c92      	ldrb	r2, [r2, #18]
 8017e5c:	4d3b      	ldr	r5, [pc, #236]	; (8017f4c <RegionIN865RxConfig+0x1c8>)
 8017e5e:	1879      	adds	r1, r7, r1
 8017e60:	7808      	ldrb	r0, [r1, #0]
 8017e62:	9209      	str	r2, [sp, #36]	; 0x24
 8017e64:	2200      	movs	r2, #0
 8017e66:	9208      	str	r2, [sp, #32]
 8017e68:	2200      	movs	r2, #0
 8017e6a:	9207      	str	r2, [sp, #28]
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	9206      	str	r2, [sp, #24]
 8017e70:	2201      	movs	r2, #1
 8017e72:	9205      	str	r2, [sp, #20]
 8017e74:	2200      	movs	r2, #0
 8017e76:	9204      	str	r2, [sp, #16]
 8017e78:	2200      	movs	r2, #0
 8017e7a:	9203      	str	r2, [sp, #12]
 8017e7c:	9302      	str	r3, [sp, #8]
 8017e7e:	2305      	movs	r3, #5
 8017e80:	9301      	str	r3, [sp, #4]
 8017e82:	4b33      	ldr	r3, [pc, #204]	; (8017f50 <RegionIN865RxConfig+0x1cc>)
 8017e84:	9300      	str	r3, [sp, #0]
 8017e86:	2300      	movs	r3, #0
 8017e88:	0032      	movs	r2, r6
 8017e8a:	0029      	movs	r1, r5
 8017e8c:	47a0      	blx	r4
 8017e8e:	e029      	b.n	8017ee4 <RegionIN865RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8017e90:	2117      	movs	r1, #23
 8017e92:	187b      	adds	r3, r7, r1
 8017e94:	2201      	movs	r2, #1
 8017e96:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017e98:	4b29      	ldr	r3, [pc, #164]	; (8017f40 <RegionIN865RxConfig+0x1bc>)
 8017e9a:	6a1c      	ldr	r4, [r3, #32]
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	789b      	ldrb	r3, [r3, #2]
 8017ea0:	001e      	movs	r6, r3
 8017ea2:	230e      	movs	r3, #14
 8017ea4:	18fb      	adds	r3, r7, r3
 8017ea6:	2500      	movs	r5, #0
 8017ea8:	575d      	ldrsb	r5, [r3, r5]
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	689b      	ldr	r3, [r3, #8]
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	687a      	ldr	r2, [r7, #4]
 8017eb2:	7c92      	ldrb	r2, [r2, #18]
 8017eb4:	1879      	adds	r1, r7, r1
 8017eb6:	7808      	ldrb	r0, [r1, #0]
 8017eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8017eba:	2201      	movs	r2, #1
 8017ebc:	9208      	str	r2, [sp, #32]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	9207      	str	r2, [sp, #28]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	9206      	str	r2, [sp, #24]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	9205      	str	r2, [sp, #20]
 8017eca:	2200      	movs	r2, #0
 8017ecc:	9204      	str	r2, [sp, #16]
 8017ece:	2200      	movs	r2, #0
 8017ed0:	9203      	str	r2, [sp, #12]
 8017ed2:	9302      	str	r3, [sp, #8]
 8017ed4:	2308      	movs	r3, #8
 8017ed6:	9301      	str	r3, [sp, #4]
 8017ed8:	2300      	movs	r3, #0
 8017eda:	9300      	str	r3, [sp, #0]
 8017edc:	2301      	movs	r3, #1
 8017ede:	002a      	movs	r2, r5
 8017ee0:	0031      	movs	r1, r6
 8017ee2:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	7c5b      	ldrb	r3, [r3, #17]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d009      	beq.n	8017f00 <RegionIN865RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 8017eec:	230f      	movs	r3, #15
 8017eee:	18fb      	adds	r3, r7, r3
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	569a      	ldrsb	r2, [r3, r2]
 8017ef4:	2316      	movs	r3, #22
 8017ef6:	18fb      	adds	r3, r7, r3
 8017ef8:	4916      	ldr	r1, [pc, #88]	; (8017f54 <RegionIN865RxConfig+0x1d0>)
 8017efa:	5c8a      	ldrb	r2, [r1, r2]
 8017efc:	701a      	strb	r2, [r3, #0]
 8017efe:	e008      	b.n	8017f12 <RegionIN865RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8017f00:	230f      	movs	r3, #15
 8017f02:	18fb      	adds	r3, r7, r3
 8017f04:	2200      	movs	r2, #0
 8017f06:	569a      	ldrsb	r2, [r3, r2]
 8017f08:	2316      	movs	r3, #22
 8017f0a:	18fb      	adds	r3, r7, r3
 8017f0c:	4912      	ldr	r1, [pc, #72]	; (8017f58 <RegionIN865RxConfig+0x1d4>)
 8017f0e:	5c8a      	ldrb	r2, [r1, r2]
 8017f10:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8017f12:	4b0b      	ldr	r3, [pc, #44]	; (8017f40 <RegionIN865RxConfig+0x1bc>)
 8017f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f16:	2216      	movs	r2, #22
 8017f18:	18ba      	adds	r2, r7, r2
 8017f1a:	7812      	ldrb	r2, [r2, #0]
 8017f1c:	320d      	adds	r2, #13
 8017f1e:	b2d1      	uxtb	r1, r2
 8017f20:	2217      	movs	r2, #23
 8017f22:	18ba      	adds	r2, r7, r2
 8017f24:	7812      	ldrb	r2, [r2, #0]
 8017f26:	0010      	movs	r0, r2
 8017f28:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	220f      	movs	r2, #15
 8017f2e:	18ba      	adds	r2, r7, r2
 8017f30:	7812      	ldrb	r2, [r2, #0]
 8017f32:	701a      	strb	r2, [r3, #0]
    return true;
 8017f34:	2301      	movs	r3, #1
}
 8017f36:	0018      	movs	r0, r3
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	b007      	add	sp, #28
 8017f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f3e:	46c0      	nop			; (mov r8, r8)
 8017f40:	08028964 	.word	0x08028964
 8017f44:	20001620 	.word	0x20001620
 8017f48:	080284f4 	.word	0x080284f4
 8017f4c:	0000c350 	.word	0x0000c350
 8017f50:	00014585 	.word	0x00014585
 8017f54:	08028524 	.word	0x08028524
 8017f58:	0802851c 	.word	0x0802851c

08017f5c <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f5e:	b093      	sub	sp, #76	; 0x4c
 8017f60:	af0a      	add	r7, sp, #40	; 0x28
 8017f62:	60f8      	str	r0, [r7, #12]
 8017f64:	60b9      	str	r1, [r7, #8]
 8017f66:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	785b      	ldrb	r3, [r3, #1]
 8017f6c:	b25b      	sxtb	r3, r3
 8017f6e:	001a      	movs	r2, r3
 8017f70:	4b60      	ldr	r3, [pc, #384]	; (80180f4 <RegionIN865TxConfig+0x198>)
 8017f72:	5c9a      	ldrb	r2, [r3, r2]
 8017f74:	231e      	movs	r3, #30
 8017f76:	18fb      	adds	r3, r7, r3
 8017f78:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	2002      	movs	r0, #2
 8017f7e:	5618      	ldrsb	r0, [r3, r0]
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	781b      	ldrb	r3, [r3, #0]
 8017f84:	0019      	movs	r1, r3
 8017f86:	4a5c      	ldr	r2, [pc, #368]	; (80180f8 <RegionIN865TxConfig+0x19c>)
 8017f88:	000b      	movs	r3, r1
 8017f8a:	005b      	lsls	r3, r3, #1
 8017f8c:	185b      	adds	r3, r3, r1
 8017f8e:	009b      	lsls	r3, r3, #2
 8017f90:	18d3      	adds	r3, r2, r3
 8017f92:	3309      	adds	r3, #9
 8017f94:	781b      	ldrb	r3, [r3, #0]
 8017f96:	4a58      	ldr	r2, [pc, #352]	; (80180f8 <RegionIN865TxConfig+0x19c>)
 8017f98:	330c      	adds	r3, #12
 8017f9a:	011b      	lsls	r3, r3, #4
 8017f9c:	18d3      	adds	r3, r2, r3
 8017f9e:	3302      	adds	r3, #2
 8017fa0:	2100      	movs	r1, #0
 8017fa2:	5659      	ldrsb	r1, [r3, r1]
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	2201      	movs	r2, #1
 8017fa8:	569a      	ldrsb	r2, [r3, r2]
 8017faa:	251d      	movs	r5, #29
 8017fac:	197c      	adds	r4, r7, r5
 8017fae:	4b53      	ldr	r3, [pc, #332]	; (80180fc <RegionIN865TxConfig+0x1a0>)
 8017fb0:	f7ff fb2a 	bl	8017608 <LimitTxPower>
 8017fb4:	0003      	movs	r3, r0
 8017fb6:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	785b      	ldrb	r3, [r3, #1]
 8017fbc:	b25b      	sxtb	r3, r3
 8017fbe:	0018      	movs	r0, r3
 8017fc0:	f7ff fb04 	bl	80175cc <GetBandwidth>
 8017fc4:	0003      	movs	r3, r0
 8017fc6:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8017fc8:	2017      	movs	r0, #23
 8017fca:	183b      	adds	r3, r7, r0
 8017fcc:	2200      	movs	r2, #0
 8017fce:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	6859      	ldr	r1, [r3, #4]
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	689a      	ldr	r2, [r3, #8]
 8017fd8:	183c      	adds	r4, r7, r0
 8017fda:	197b      	adds	r3, r7, r5
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	b25b      	sxtb	r3, r3
 8017fe0:	0018      	movs	r0, r3
 8017fe2:	f7fc fd7d 	bl	8014ae0 <RegionCommonComputeTxPower>
 8017fe6:	0003      	movs	r3, r0
 8017fe8:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8017fea:	4b45      	ldr	r3, [pc, #276]	; (8018100 <RegionIN865TxConfig+0x1a4>)
 8017fec:	695a      	ldr	r2, [r3, #20]
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	781b      	ldrb	r3, [r3, #0]
 8017ff2:	0018      	movs	r0, r3
 8017ff4:	4940      	ldr	r1, [pc, #256]	; (80180f8 <RegionIN865TxConfig+0x19c>)
 8017ff6:	0003      	movs	r3, r0
 8017ff8:	005b      	lsls	r3, r3, #1
 8017ffa:	181b      	adds	r3, r3, r0
 8017ffc:	009b      	lsls	r3, r3, #2
 8017ffe:	585b      	ldr	r3, [r3, r1]
 8018000:	0018      	movs	r0, r3
 8018002:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	785b      	ldrb	r3, [r3, #1]
 8018008:	b25b      	sxtb	r3, r3
 801800a:	2b07      	cmp	r3, #7
 801800c:	d12d      	bne.n	801806a <RegionIN865TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801800e:	201f      	movs	r0, #31
 8018010:	183b      	adds	r3, r7, r0
 8018012:	2200      	movs	r2, #0
 8018014:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8018016:	4b3a      	ldr	r3, [pc, #232]	; (8018100 <RegionIN865TxConfig+0x1a4>)
 8018018:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801801a:	231e      	movs	r3, #30
 801801c:	18fb      	adds	r3, r7, r3
 801801e:	2200      	movs	r2, #0
 8018020:	569a      	ldrsb	r2, [r3, r2]
 8018022:	0013      	movs	r3, r2
 8018024:	015b      	lsls	r3, r3, #5
 8018026:	1a9b      	subs	r3, r3, r2
 8018028:	009b      	lsls	r3, r3, #2
 801802a:	189b      	adds	r3, r3, r2
 801802c:	00db      	lsls	r3, r3, #3
 801802e:	001d      	movs	r5, r3
 8018030:	69ba      	ldr	r2, [r7, #24]
 8018032:	4e34      	ldr	r6, [pc, #208]	; (8018104 <RegionIN865TxConfig+0x1a8>)
 8018034:	2317      	movs	r3, #23
 8018036:	18fb      	adds	r3, r7, r3
 8018038:	2100      	movs	r1, #0
 801803a:	5659      	ldrsb	r1, [r3, r1]
 801803c:	183b      	adds	r3, r7, r0
 801803e:	7818      	ldrb	r0, [r3, #0]
 8018040:	4b31      	ldr	r3, [pc, #196]	; (8018108 <RegionIN865TxConfig+0x1ac>)
 8018042:	9308      	str	r3, [sp, #32]
 8018044:	2300      	movs	r3, #0
 8018046:	9307      	str	r3, [sp, #28]
 8018048:	2300      	movs	r3, #0
 801804a:	9306      	str	r3, [sp, #24]
 801804c:	2300      	movs	r3, #0
 801804e:	9305      	str	r3, [sp, #20]
 8018050:	2301      	movs	r3, #1
 8018052:	9304      	str	r3, [sp, #16]
 8018054:	2300      	movs	r3, #0
 8018056:	9303      	str	r3, [sp, #12]
 8018058:	2305      	movs	r3, #5
 801805a:	9302      	str	r3, [sp, #8]
 801805c:	2300      	movs	r3, #0
 801805e:	9301      	str	r3, [sp, #4]
 8018060:	9500      	str	r5, [sp, #0]
 8018062:	0013      	movs	r3, r2
 8018064:	0032      	movs	r2, r6
 8018066:	47a0      	blx	r4
 8018068:	e024      	b.n	80180b4 <RegionIN865TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 801806a:	201f      	movs	r0, #31
 801806c:	183b      	adds	r3, r7, r0
 801806e:	2201      	movs	r2, #1
 8018070:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 8018072:	4b23      	ldr	r3, [pc, #140]	; (8018100 <RegionIN865TxConfig+0x1a4>)
 8018074:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018076:	231e      	movs	r3, #30
 8018078:	18fb      	adds	r3, r7, r3
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	b25b      	sxtb	r3, r3
 801807e:	69bd      	ldr	r5, [r7, #24]
 8018080:	2217      	movs	r2, #23
 8018082:	18ba      	adds	r2, r7, r2
 8018084:	2100      	movs	r1, #0
 8018086:	5651      	ldrsb	r1, [r2, r1]
 8018088:	183a      	adds	r2, r7, r0
 801808a:	7810      	ldrb	r0, [r2, #0]
 801808c:	4a1e      	ldr	r2, [pc, #120]	; (8018108 <RegionIN865TxConfig+0x1ac>)
 801808e:	9208      	str	r2, [sp, #32]
 8018090:	2200      	movs	r2, #0
 8018092:	9207      	str	r2, [sp, #28]
 8018094:	2200      	movs	r2, #0
 8018096:	9206      	str	r2, [sp, #24]
 8018098:	2200      	movs	r2, #0
 801809a:	9205      	str	r2, [sp, #20]
 801809c:	2201      	movs	r2, #1
 801809e:	9204      	str	r2, [sp, #16]
 80180a0:	2200      	movs	r2, #0
 80180a2:	9203      	str	r2, [sp, #12]
 80180a4:	2208      	movs	r2, #8
 80180a6:	9202      	str	r2, [sp, #8]
 80180a8:	2201      	movs	r2, #1
 80180aa:	9201      	str	r2, [sp, #4]
 80180ac:	9300      	str	r3, [sp, #0]
 80180ae:	002b      	movs	r3, r5
 80180b0:	2200      	movs	r2, #0
 80180b2:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80180b4:	4b12      	ldr	r3, [pc, #72]	; (8018100 <RegionIN865TxConfig+0x1a4>)
 80180b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80180b8:	68fa      	ldr	r2, [r7, #12]
 80180ba:	8992      	ldrh	r2, [r2, #12]
 80180bc:	b2d1      	uxtb	r1, r2
 80180be:	241f      	movs	r4, #31
 80180c0:	193a      	adds	r2, r7, r4
 80180c2:	7812      	ldrb	r2, [r2, #0]
 80180c4:	0010      	movs	r0, r2
 80180c6:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 80180c8:	4b0d      	ldr	r3, [pc, #52]	; (8018100 <RegionIN865TxConfig+0x1a4>)
 80180ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180cc:	68fa      	ldr	r2, [r7, #12]
 80180ce:	8992      	ldrh	r2, [r2, #12]
 80180d0:	b2d1      	uxtb	r1, r2
 80180d2:	193a      	adds	r2, r7, r4
 80180d4:	7812      	ldrb	r2, [r2, #0]
 80180d6:	0010      	movs	r0, r2
 80180d8:	4798      	blx	r3
 80180da:	0002      	movs	r2, r0
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80180e0:	68bb      	ldr	r3, [r7, #8]
 80180e2:	221d      	movs	r2, #29
 80180e4:	18ba      	adds	r2, r7, r2
 80180e6:	7812      	ldrb	r2, [r2, #0]
 80180e8:	701a      	strb	r2, [r3, #0]
    return true;
 80180ea:	2301      	movs	r3, #1
}
 80180ec:	0018      	movs	r0, r3
 80180ee:	46bd      	mov	sp, r7
 80180f0:	b009      	add	sp, #36	; 0x24
 80180f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180f4:	080284f4 	.word	0x080284f4
 80180f8:	20001620 	.word	0x20001620
 80180fc:	200016f0 	.word	0x200016f0
 8018100:	08028964 	.word	0x08028964
 8018104:	000061a8 	.word	0x000061a8
 8018108:	00000bb8 	.word	0x00000bb8

0801810c <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801810c:	b5b0      	push	{r4, r5, r7, lr}
 801810e:	b092      	sub	sp, #72	; 0x48
 8018110:	af00      	add	r7, sp, #0
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
 8018118:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801811a:	2347      	movs	r3, #71	; 0x47
 801811c:	18fb      	adds	r3, r7, r3
 801811e:	2207      	movs	r2, #7
 8018120:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8018122:	2344      	movs	r3, #68	; 0x44
 8018124:	18fb      	adds	r3, r7, r3
 8018126:	2200      	movs	r2, #0
 8018128:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801812a:	2346      	movs	r3, #70	; 0x46
 801812c:	18fb      	adds	r3, r7, r3
 801812e:	2200      	movs	r2, #0
 8018130:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8018132:	233a      	movs	r3, #58	; 0x3a
 8018134:	18fb      	adds	r3, r7, r3
 8018136:	2200      	movs	r2, #0
 8018138:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801813a:	e09e      	b.n	801827a <RegionIN865LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	685a      	ldr	r2, [r3, #4]
 8018140:	2346      	movs	r3, #70	; 0x46
 8018142:	18fb      	adds	r3, r7, r3
 8018144:	781b      	ldrb	r3, [r3, #0]
 8018146:	18d3      	adds	r3, r2, r3
 8018148:	2544      	movs	r5, #68	; 0x44
 801814a:	197c      	adds	r4, r7, r5
 801814c:	223c      	movs	r2, #60	; 0x3c
 801814e:	18ba      	adds	r2, r7, r2
 8018150:	0011      	movs	r1, r2
 8018152:	0018      	movs	r0, r3
 8018154:	f7fc fafc 	bl	8014750 <RegionCommonParseLinkAdrReq>
 8018158:	0003      	movs	r3, r0
 801815a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801815c:	197b      	adds	r3, r7, r5
 801815e:	781b      	ldrb	r3, [r3, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d100      	bne.n	8018166 <RegionIN865LinkAdrReq+0x5a>
 8018164:	e092      	b.n	801828c <RegionIN865LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018166:	2246      	movs	r2, #70	; 0x46
 8018168:	18bb      	adds	r3, r7, r2
 801816a:	18b9      	adds	r1, r7, r2
 801816c:	2244      	movs	r2, #68	; 0x44
 801816e:	18ba      	adds	r2, r7, r2
 8018170:	7809      	ldrb	r1, [r1, #0]
 8018172:	7812      	ldrb	r2, [r2, #0]
 8018174:	188a      	adds	r2, r1, r2
 8018176:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018178:	2347      	movs	r3, #71	; 0x47
 801817a:	18fb      	adds	r3, r7, r3
 801817c:	2207      	movs	r2, #7
 801817e:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018180:	213c      	movs	r1, #60	; 0x3c
 8018182:	187b      	adds	r3, r7, r1
 8018184:	889a      	ldrh	r2, [r3, #4]
 8018186:	233a      	movs	r3, #58	; 0x3a
 8018188:	18fb      	adds	r3, r7, r3
 801818a:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801818c:	187b      	adds	r3, r7, r1
 801818e:	78db      	ldrb	r3, [r3, #3]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d10c      	bne.n	80181ae <RegionIN865LinkAdrReq+0xa2>
 8018194:	233a      	movs	r3, #58	; 0x3a
 8018196:	18fb      	adds	r3, r7, r3
 8018198:	881b      	ldrh	r3, [r3, #0]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d107      	bne.n	80181ae <RegionIN865LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 801819e:	2247      	movs	r2, #71	; 0x47
 80181a0:	18bb      	adds	r3, r7, r2
 80181a2:	18ba      	adds	r2, r7, r2
 80181a4:	7812      	ldrb	r2, [r2, #0]
 80181a6:	2101      	movs	r1, #1
 80181a8:	438a      	bics	r2, r1
 80181aa:	701a      	strb	r2, [r3, #0]
 80181ac:	e065      	b.n	801827a <RegionIN865LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80181ae:	233c      	movs	r3, #60	; 0x3c
 80181b0:	18fb      	adds	r3, r7, r3
 80181b2:	78db      	ldrb	r3, [r3, #3]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d004      	beq.n	80181c2 <RegionIN865LinkAdrReq+0xb6>
 80181b8:	233c      	movs	r3, #60	; 0x3c
 80181ba:	18fb      	adds	r3, r7, r3
 80181bc:	78db      	ldrb	r3, [r3, #3]
 80181be:	2b05      	cmp	r3, #5
 80181c0:	d904      	bls.n	80181cc <RegionIN865LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80181c2:	233c      	movs	r3, #60	; 0x3c
 80181c4:	18fb      	adds	r3, r7, r3
 80181c6:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80181c8:	2b06      	cmp	r3, #6
 80181ca:	d907      	bls.n	80181dc <RegionIN865LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80181cc:	2247      	movs	r2, #71	; 0x47
 80181ce:	18bb      	adds	r3, r7, r2
 80181d0:	18ba      	adds	r2, r7, r2
 80181d2:	7812      	ldrb	r2, [r2, #0]
 80181d4:	2101      	movs	r1, #1
 80181d6:	438a      	bics	r2, r1
 80181d8:	701a      	strb	r2, [r3, #0]
 80181da:	e04e      	b.n	801827a <RegionIN865LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 80181dc:	2345      	movs	r3, #69	; 0x45
 80181de:	18fb      	adds	r3, r7, r3
 80181e0:	2200      	movs	r2, #0
 80181e2:	701a      	strb	r2, [r3, #0]
 80181e4:	e044      	b.n	8018270 <RegionIN865LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80181e6:	233c      	movs	r3, #60	; 0x3c
 80181e8:	18fb      	adds	r3, r7, r3
 80181ea:	78db      	ldrb	r3, [r3, #3]
 80181ec:	2b06      	cmp	r3, #6
 80181ee:	d11b      	bne.n	8018228 <RegionIN865LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80181f0:	2345      	movs	r3, #69	; 0x45
 80181f2:	18fb      	adds	r3, r7, r3
 80181f4:	781a      	ldrb	r2, [r3, #0]
 80181f6:	4974      	ldr	r1, [pc, #464]	; (80183c8 <RegionIN865LinkAdrReq+0x2bc>)
 80181f8:	0013      	movs	r3, r2
 80181fa:	005b      	lsls	r3, r3, #1
 80181fc:	189b      	adds	r3, r3, r2
 80181fe:	009b      	lsls	r3, r3, #2
 8018200:	585b      	ldr	r3, [r3, r1]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d02e      	beq.n	8018264 <RegionIN865LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 8018206:	2345      	movs	r3, #69	; 0x45
 8018208:	18fb      	adds	r3, r7, r3
 801820a:	781b      	ldrb	r3, [r3, #0]
 801820c:	2201      	movs	r2, #1
 801820e:	409a      	lsls	r2, r3
 8018210:	0013      	movs	r3, r2
 8018212:	b21a      	sxth	r2, r3
 8018214:	213a      	movs	r1, #58	; 0x3a
 8018216:	187b      	adds	r3, r7, r1
 8018218:	881b      	ldrh	r3, [r3, #0]
 801821a:	b21b      	sxth	r3, r3
 801821c:	4313      	orrs	r3, r2
 801821e:	b21b      	sxth	r3, r3
 8018220:	b29a      	uxth	r2, r3
 8018222:	187b      	adds	r3, r7, r1
 8018224:	801a      	strh	r2, [r3, #0]
 8018226:	e01d      	b.n	8018264 <RegionIN865LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018228:	233a      	movs	r3, #58	; 0x3a
 801822a:	18fb      	adds	r3, r7, r3
 801822c:	881b      	ldrh	r3, [r3, #0]
 801822e:	001a      	movs	r2, r3
 8018230:	2345      	movs	r3, #69	; 0x45
 8018232:	18fb      	adds	r3, r7, r3
 8018234:	781b      	ldrb	r3, [r3, #0]
 8018236:	411a      	asrs	r2, r3
 8018238:	0013      	movs	r3, r2
 801823a:	2201      	movs	r2, #1
 801823c:	4013      	ands	r3, r2
 801823e:	d011      	beq.n	8018264 <RegionIN865LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018240:	2345      	movs	r3, #69	; 0x45
 8018242:	18fb      	adds	r3, r7, r3
 8018244:	781a      	ldrb	r2, [r3, #0]
 8018246:	4960      	ldr	r1, [pc, #384]	; (80183c8 <RegionIN865LinkAdrReq+0x2bc>)
 8018248:	0013      	movs	r3, r2
 801824a:	005b      	lsls	r3, r3, #1
 801824c:	189b      	adds	r3, r3, r2
 801824e:	009b      	lsls	r3, r3, #2
 8018250:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018252:	2b00      	cmp	r3, #0
 8018254:	d106      	bne.n	8018264 <RegionIN865LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8018256:	2247      	movs	r2, #71	; 0x47
 8018258:	18bb      	adds	r3, r7, r2
 801825a:	18ba      	adds	r2, r7, r2
 801825c:	7812      	ldrb	r2, [r2, #0]
 801825e:	2101      	movs	r1, #1
 8018260:	438a      	bics	r2, r1
 8018262:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8018264:	2145      	movs	r1, #69	; 0x45
 8018266:	187b      	adds	r3, r7, r1
 8018268:	781a      	ldrb	r2, [r3, #0]
 801826a:	187b      	adds	r3, r7, r1
 801826c:	3201      	adds	r2, #1
 801826e:	701a      	strb	r2, [r3, #0]
 8018270:	2345      	movs	r3, #69	; 0x45
 8018272:	18fb      	adds	r3, r7, r3
 8018274:	781b      	ldrb	r3, [r3, #0]
 8018276:	2b0f      	cmp	r3, #15
 8018278:	d9b5      	bls.n	80181e6 <RegionIN865LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	7a1b      	ldrb	r3, [r3, #8]
 801827e:	2246      	movs	r2, #70	; 0x46
 8018280:	18ba      	adds	r2, r7, r2
 8018282:	7812      	ldrb	r2, [r2, #0]
 8018284:	429a      	cmp	r2, r3
 8018286:	d200      	bcs.n	801828a <RegionIN865LinkAdrReq+0x17e>
 8018288:	e758      	b.n	801813c <RegionIN865LinkAdrReq+0x30>
 801828a:	e000      	b.n	801828e <RegionIN865LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 801828c:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 801828e:	233c      	movs	r3, #60	; 0x3c
 8018290:	18fb      	adds	r3, r7, r3
 8018292:	785b      	ldrb	r3, [r3, #1]
 8018294:	b25b      	sxtb	r3, r3
 8018296:	2b06      	cmp	r3, #6
 8018298:	d063      	beq.n	8018362 <RegionIN865LinkAdrReq+0x256>
    {
        // Get the minimum possible datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801829a:	2134      	movs	r1, #52	; 0x34
 801829c:	187b      	adds	r3, r7, r1
 801829e:	2201      	movs	r2, #1
 80182a0:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	7a5a      	ldrb	r2, [r3, #9]
 80182a6:	187b      	adds	r3, r7, r1
 80182a8:	709a      	strb	r2, [r3, #2]
        phyParam = RegionIN865GetPhyParam( &getPhy );
 80182aa:	187b      	adds	r3, r7, r1
 80182ac:	0018      	movs	r0, r3
 80182ae:	f7ff fae1 	bl	8017874 <RegionIN865GetPhyParam>
 80182b2:	0003      	movs	r3, r0
 80182b4:	001a      	movs	r2, r3
 80182b6:	2030      	movs	r0, #48	; 0x30
 80182b8:	183b      	adds	r3, r7, r0
 80182ba:	601a      	str	r2, [r3, #0]

        linkAdrVerifyParams.Status = status;
 80182bc:	2110      	movs	r1, #16
 80182be:	187b      	adds	r3, r7, r1
 80182c0:	2447      	movs	r4, #71	; 0x47
 80182c2:	193a      	adds	r2, r7, r4
 80182c4:	7812      	ldrb	r2, [r2, #0]
 80182c6:	711a      	strb	r2, [r3, #4]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	7a9a      	ldrb	r2, [r3, #10]
 80182cc:	187b      	adds	r3, r7, r1
 80182ce:	715a      	strb	r2, [r3, #5]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80182d0:	253c      	movs	r5, #60	; 0x3c
 80182d2:	197b      	adds	r3, r7, r5
 80182d4:	2201      	movs	r2, #1
 80182d6:	569a      	ldrsb	r2, [r3, r2]
 80182d8:	187b      	adds	r3, r7, r1
 80182da:	719a      	strb	r2, [r3, #6]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80182dc:	197b      	adds	r3, r7, r5
 80182de:	2202      	movs	r2, #2
 80182e0:	569a      	ldrsb	r2, [r3, r2]
 80182e2:	187b      	adds	r3, r7, r1
 80182e4:	71da      	strb	r2, [r3, #7]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80182e6:	197b      	adds	r3, r7, r5
 80182e8:	781a      	ldrb	r2, [r3, #0]
 80182ea:	187b      	adds	r3, r7, r1
 80182ec:	721a      	strb	r2, [r3, #8]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	220b      	movs	r2, #11
 80182f2:	569a      	ldrsb	r2, [r3, r2]
 80182f4:	187b      	adds	r3, r7, r1
 80182f6:	725a      	strb	r2, [r3, #9]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	220c      	movs	r2, #12
 80182fc:	569a      	ldrsb	r2, [r3, r2]
 80182fe:	187b      	adds	r3, r7, r1
 8018300:	729a      	strb	r2, [r3, #10]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	7b5b      	ldrb	r3, [r3, #13]
 8018306:	b25a      	sxtb	r2, r3
 8018308:	187b      	adds	r3, r7, r1
 801830a:	72da      	strb	r2, [r3, #11]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 801830c:	187b      	adds	r3, r7, r1
 801830e:	2210      	movs	r2, #16
 8018310:	731a      	strb	r2, [r3, #12]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8018312:	187b      	adds	r3, r7, r1
 8018314:	223a      	movs	r2, #58	; 0x3a
 8018316:	18ba      	adds	r2, r7, r2
 8018318:	611a      	str	r2, [r3, #16]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801831a:	183b      	adds	r3, r7, r0
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	b25a      	sxtb	r2, r3
 8018320:	0008      	movs	r0, r1
 8018322:	183b      	adds	r3, r7, r0
 8018324:	751a      	strb	r2, [r3, #20]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 8018326:	183b      	adds	r3, r7, r0
 8018328:	2207      	movs	r2, #7
 801832a:	755a      	strb	r2, [r3, #21]
        linkAdrVerifyParams.Channels = NvmCtx.Channels;
 801832c:	183b      	adds	r3, r7, r0
 801832e:	4a26      	ldr	r2, [pc, #152]	; (80183c8 <RegionIN865LinkAdrReq+0x2bc>)
 8018330:	619a      	str	r2, [r3, #24]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8018332:	183b      	adds	r3, r7, r0
 8018334:	220a      	movs	r2, #10
 8018336:	771a      	strb	r2, [r3, #28]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 8018338:	183b      	adds	r3, r7, r0
 801833a:	2200      	movs	r2, #0
 801833c:	775a      	strb	r2, [r3, #29]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 801833e:	183b      	adds	r3, r7, r0
 8018340:	68fa      	ldr	r2, [r7, #12]
 8018342:	6812      	ldr	r2, [r2, #0]
 8018344:	601a      	str	r2, [r3, #0]

        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018346:	193c      	adds	r4, r7, r4
 8018348:	0029      	movs	r1, r5
 801834a:	187d      	adds	r5, r7, r1
 801834c:	187b      	adds	r3, r7, r1
 801834e:	1c9a      	adds	r2, r3, #2
 8018350:	187b      	adds	r3, r7, r1
 8018352:	1c59      	adds	r1, r3, #1
 8018354:	1838      	adds	r0, r7, r0
 8018356:	002b      	movs	r3, r5
 8018358:	f7fc fa50 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 801835c:	0003      	movs	r3, r0
 801835e:	7023      	strb	r3, [r4, #0]
 8018360:	e006      	b.n	8018370 <RegionIN865LinkAdrReq+0x264>
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 8018362:	2247      	movs	r2, #71	; 0x47
 8018364:	18bb      	adds	r3, r7, r2
 8018366:	18ba      	adds	r2, r7, r2
 8018368:	7812      	ldrb	r2, [r2, #0]
 801836a:	2102      	movs	r1, #2
 801836c:	438a      	bics	r2, r1
 801836e:	701a      	strb	r2, [r3, #0]
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018370:	2347      	movs	r3, #71	; 0x47
 8018372:	18fb      	adds	r3, r7, r3
 8018374:	781b      	ldrb	r3, [r3, #0]
 8018376:	2b07      	cmp	r3, #7
 8018378:	d10b      	bne.n	8018392 <RegionIN865LinkAdrReq+0x286>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 801837a:	4b14      	ldr	r3, [pc, #80]	; (80183cc <RegionIN865LinkAdrReq+0x2c0>)
 801837c:	2202      	movs	r2, #2
 801837e:	2100      	movs	r1, #0
 8018380:	0018      	movs	r0, r3
 8018382:	f004 fce7 	bl	801cd54 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8018386:	233a      	movs	r3, #58	; 0x3a
 8018388:	18fb      	adds	r3, r7, r3
 801838a:	8819      	ldrh	r1, [r3, #0]
 801838c:	4b0e      	ldr	r3, [pc, #56]	; (80183c8 <RegionIN865LinkAdrReq+0x2bc>)
 801838e:	22d0      	movs	r2, #208	; 0xd0
 8018390:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018392:	213c      	movs	r1, #60	; 0x3c
 8018394:	187b      	adds	r3, r7, r1
 8018396:	2201      	movs	r2, #1
 8018398:	569a      	ldrsb	r2, [r3, r2]
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801839e:	187b      	adds	r3, r7, r1
 80183a0:	2202      	movs	r2, #2
 80183a2:	569a      	ldrsb	r2, [r3, r2]
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80183a8:	187b      	adds	r3, r7, r1
 80183aa:	781a      	ldrb	r2, [r3, #0]
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80183b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80183b2:	2246      	movs	r2, #70	; 0x46
 80183b4:	18ba      	adds	r2, r7, r2
 80183b6:	7812      	ldrb	r2, [r2, #0]
 80183b8:	701a      	strb	r2, [r3, #0]

    return status;
 80183ba:	2347      	movs	r3, #71	; 0x47
 80183bc:	18fb      	adds	r3, r7, r3
 80183be:	781b      	ldrb	r3, [r3, #0]
}
 80183c0:	0018      	movs	r0, r3
 80183c2:	46bd      	mov	sp, r7
 80183c4:	b012      	add	sp, #72	; 0x48
 80183c6:	bdb0      	pop	{r4, r5, r7, pc}
 80183c8:	20001620 	.word	0x20001620
 80183cc:	200016f0 	.word	0x200016f0

080183d0 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b084      	sub	sp, #16
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80183d8:	230f      	movs	r3, #15
 80183da:	18fb      	adds	r3, r7, r3
 80183dc:	2207      	movs	r2, #7
 80183de:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	685b      	ldr	r3, [r3, #4]
 80183e4:	0018      	movs	r0, r3
 80183e6:	f7ff f937 	bl	8017658 <VerifyRfFreq>
 80183ea:	0003      	movs	r3, r0
 80183ec:	001a      	movs	r2, r3
 80183ee:	2301      	movs	r3, #1
 80183f0:	4053      	eors	r3, r2
 80183f2:	b2db      	uxtb	r3, r3
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d006      	beq.n	8018406 <RegionIN865RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 80183f8:	220f      	movs	r2, #15
 80183fa:	18bb      	adds	r3, r7, r2
 80183fc:	18ba      	adds	r2, r7, r2
 80183fe:	7812      	ldrb	r2, [r2, #0]
 8018400:	2101      	movs	r1, #1
 8018402:	438a      	bics	r2, r1
 8018404:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false )
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	b25b      	sxtb	r3, r3
 801840c:	2207      	movs	r2, #7
 801840e:	2100      	movs	r1, #0
 8018410:	0018      	movs	r0, r3
 8018412:	f7fb ffb5 	bl	8014380 <RegionCommonValueInRange>
 8018416:	1e03      	subs	r3, r0, #0
 8018418:	d106      	bne.n	8018428 <RegionIN865RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801841a:	220f      	movs	r2, #15
 801841c:	18bb      	adds	r3, r7, r2
 801841e:	18ba      	adds	r2, r7, r2
 8018420:	7812      	ldrb	r2, [r2, #0]
 8018422:	2102      	movs	r1, #2
 8018424:	438a      	bics	r2, r1
 8018426:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	785b      	ldrb	r3, [r3, #1]
 801842c:	b25b      	sxtb	r3, r3
 801842e:	2207      	movs	r2, #7
 8018430:	2100      	movs	r1, #0
 8018432:	0018      	movs	r0, r3
 8018434:	f7fb ffa4 	bl	8014380 <RegionCommonValueInRange>
 8018438:	1e03      	subs	r3, r0, #0
 801843a:	d106      	bne.n	801844a <RegionIN865RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801843c:	220f      	movs	r2, #15
 801843e:	18bb      	adds	r3, r7, r2
 8018440:	18ba      	adds	r2, r7, r2
 8018442:	7812      	ldrb	r2, [r2, #0]
 8018444:	2104      	movs	r1, #4
 8018446:	438a      	bics	r2, r1
 8018448:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801844a:	230f      	movs	r3, #15
 801844c:	18fb      	adds	r3, r7, r3
 801844e:	781b      	ldrb	r3, [r3, #0]
}
 8018450:	0018      	movs	r0, r3
 8018452:	46bd      	mov	sp, r7
 8018454:	b004      	add	sp, #16
 8018456:	bd80      	pop	{r7, pc}

08018458 <RegionIN865NewChannelReq>:

uint8_t RegionIN865NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b086      	sub	sp, #24
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018460:	2317      	movs	r3, #23
 8018462:	18fb      	adds	r3, r7, r3
 8018464:	2203      	movs	r2, #3
 8018466:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d119      	bne.n	80184a6 <RegionIN865NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	791b      	ldrb	r3, [r3, #4]
 8018476:	b25b      	sxtb	r3, r3
 8018478:	b2da      	uxtb	r2, r3
 801847a:	2108      	movs	r1, #8
 801847c:	187b      	adds	r3, r7, r1
 801847e:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 8018480:	187b      	adds	r3, r7, r1
 8018482:	0018      	movs	r0, r3
 8018484:	f000 fa32 	bl	80188ec <RegionIN865ChannelsRemove>
 8018488:	0003      	movs	r3, r0
 801848a:	001a      	movs	r2, r3
 801848c:	2301      	movs	r3, #1
 801848e:	4053      	eors	r3, r2
 8018490:	b2db      	uxtb	r3, r3
 8018492:	2b00      	cmp	r3, #0
 8018494:	d043      	beq.n	801851e <RegionIN865NewChannelReq+0xc6>
        {
            status &= 0xFC;
 8018496:	2217      	movs	r2, #23
 8018498:	18bb      	adds	r3, r7, r2
 801849a:	18ba      	adds	r2, r7, r2
 801849c:	7812      	ldrb	r2, [r2, #0]
 801849e:	2103      	movs	r1, #3
 80184a0:	438a      	bics	r2, r1
 80184a2:	701a      	strb	r2, [r3, #0]
 80184a4:	e03b      	b.n	801851e <RegionIN865NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	681a      	ldr	r2, [r3, #0]
 80184aa:	210c      	movs	r1, #12
 80184ac:	187b      	adds	r3, r7, r1
 80184ae:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	791b      	ldrb	r3, [r3, #4]
 80184b4:	b25b      	sxtb	r3, r3
 80184b6:	b2da      	uxtb	r2, r3
 80184b8:	187b      	adds	r3, r7, r1
 80184ba:	711a      	strb	r2, [r3, #4]

        switch( RegionIN865ChannelAdd( &channelAdd ) )
 80184bc:	187b      	adds	r3, r7, r1
 80184be:	0018      	movs	r0, r3
 80184c0:	f000 f95a 	bl	8018778 <RegionIN865ChannelAdd>
 80184c4:	0003      	movs	r3, r0
 80184c6:	2b04      	cmp	r3, #4
 80184c8:	d008      	beq.n	80184dc <RegionIN865NewChannelReq+0x84>
 80184ca:	dc02      	bgt.n	80184d2 <RegionIN865NewChannelReq+0x7a>
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d025      	beq.n	801851c <RegionIN865NewChannelReq+0xc4>
 80184d0:	e01c      	b.n	801850c <RegionIN865NewChannelReq+0xb4>
 80184d2:	2b05      	cmp	r3, #5
 80184d4:	d00a      	beq.n	80184ec <RegionIN865NewChannelReq+0x94>
 80184d6:	2b06      	cmp	r3, #6
 80184d8:	d010      	beq.n	80184fc <RegionIN865NewChannelReq+0xa4>
 80184da:	e017      	b.n	801850c <RegionIN865NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80184dc:	2217      	movs	r2, #23
 80184de:	18bb      	adds	r3, r7, r2
 80184e0:	18ba      	adds	r2, r7, r2
 80184e2:	7812      	ldrb	r2, [r2, #0]
 80184e4:	2101      	movs	r1, #1
 80184e6:	438a      	bics	r2, r1
 80184e8:	701a      	strb	r2, [r3, #0]
                break;
 80184ea:	e018      	b.n	801851e <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80184ec:	2217      	movs	r2, #23
 80184ee:	18bb      	adds	r3, r7, r2
 80184f0:	18ba      	adds	r2, r7, r2
 80184f2:	7812      	ldrb	r2, [r2, #0]
 80184f4:	2102      	movs	r1, #2
 80184f6:	438a      	bics	r2, r1
 80184f8:	701a      	strb	r2, [r3, #0]
                break;
 80184fa:	e010      	b.n	801851e <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80184fc:	2217      	movs	r2, #23
 80184fe:	18bb      	adds	r3, r7, r2
 8018500:	18ba      	adds	r2, r7, r2
 8018502:	7812      	ldrb	r2, [r2, #0]
 8018504:	2103      	movs	r1, #3
 8018506:	438a      	bics	r2, r1
 8018508:	701a      	strb	r2, [r3, #0]
                break;
 801850a:	e008      	b.n	801851e <RegionIN865NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 801850c:	2217      	movs	r2, #23
 801850e:	18bb      	adds	r3, r7, r2
 8018510:	18ba      	adds	r2, r7, r2
 8018512:	7812      	ldrb	r2, [r2, #0]
 8018514:	2103      	movs	r1, #3
 8018516:	438a      	bics	r2, r1
 8018518:	701a      	strb	r2, [r3, #0]
                break;
 801851a:	e000      	b.n	801851e <RegionIN865NewChannelReq+0xc6>
                break;
 801851c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801851e:	2317      	movs	r3, #23
 8018520:	18fb      	adds	r3, r7, r3
 8018522:	781b      	ldrb	r3, [r3, #0]
}
 8018524:	0018      	movs	r0, r3
 8018526:	46bd      	mov	sp, r7
 8018528:	b006      	add	sp, #24
 801852a:	bd80      	pop	{r7, pc}

0801852c <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b082      	sub	sp, #8
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]
    return -1;
 8018534:	2301      	movs	r3, #1
 8018536:	425b      	negs	r3, r3
}
 8018538:	0018      	movs	r0, r3
 801853a:	46bd      	mov	sp, r7
 801853c:	b002      	add	sp, #8
 801853e:	bd80      	pop	{r7, pc}

08018540 <RegionIN865DlChannelReq>:

uint8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b084      	sub	sp, #16
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018548:	230f      	movs	r3, #15
 801854a:	18fb      	adds	r3, r7, r3
 801854c:	2203      	movs	r2, #3
 801854e:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	685b      	ldr	r3, [r3, #4]
 8018554:	0018      	movs	r0, r3
 8018556:	f7ff f87f 	bl	8017658 <VerifyRfFreq>
 801855a:	0003      	movs	r3, r0
 801855c:	001a      	movs	r2, r3
 801855e:	2301      	movs	r3, #1
 8018560:	4053      	eors	r3, r2
 8018562:	b2db      	uxtb	r3, r3
 8018564:	2b00      	cmp	r3, #0
 8018566:	d006      	beq.n	8018576 <RegionIN865DlChannelReq+0x36>
    {
        status &= 0xFE;
 8018568:	220f      	movs	r2, #15
 801856a:	18bb      	adds	r3, r7, r2
 801856c:	18ba      	adds	r2, r7, r2
 801856e:	7812      	ldrb	r2, [r2, #0]
 8018570:	2101      	movs	r1, #1
 8018572:	438a      	bics	r2, r1
 8018574:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	781b      	ldrb	r3, [r3, #0]
 801857a:	0019      	movs	r1, r3
 801857c:	4a13      	ldr	r2, [pc, #76]	; (80185cc <RegionIN865DlChannelReq+0x8c>)
 801857e:	000b      	movs	r3, r1
 8018580:	005b      	lsls	r3, r3, #1
 8018582:	185b      	adds	r3, r3, r1
 8018584:	009b      	lsls	r3, r3, #2
 8018586:	589b      	ldr	r3, [r3, r2]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d106      	bne.n	801859a <RegionIN865DlChannelReq+0x5a>
    {
        status &= 0xFD;
 801858c:	220f      	movs	r2, #15
 801858e:	18bb      	adds	r3, r7, r2
 8018590:	18ba      	adds	r2, r7, r2
 8018592:	7812      	ldrb	r2, [r2, #0]
 8018594:	2102      	movs	r1, #2
 8018596:	438a      	bics	r2, r1
 8018598:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801859a:	230f      	movs	r3, #15
 801859c:	18fb      	adds	r3, r7, r3
 801859e:	781b      	ldrb	r3, [r3, #0]
 80185a0:	2b03      	cmp	r3, #3
 80185a2:	d10c      	bne.n	80185be <RegionIN865DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	781b      	ldrb	r3, [r3, #0]
 80185a8:	0018      	movs	r0, r3
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	685a      	ldr	r2, [r3, #4]
 80185ae:	4907      	ldr	r1, [pc, #28]	; (80185cc <RegionIN865DlChannelReq+0x8c>)
 80185b0:	0003      	movs	r3, r0
 80185b2:	005b      	lsls	r3, r3, #1
 80185b4:	181b      	adds	r3, r3, r0
 80185b6:	009b      	lsls	r3, r3, #2
 80185b8:	18cb      	adds	r3, r1, r3
 80185ba:	3304      	adds	r3, #4
 80185bc:	601a      	str	r2, [r3, #0]
    }

    return status;
 80185be:	230f      	movs	r3, #15
 80185c0:	18fb      	adds	r3, r7, r3
 80185c2:	781b      	ldrb	r3, [r3, #0]
}
 80185c4:	0018      	movs	r0, r3
 80185c6:	46bd      	mov	sp, r7
 80185c8:	b004      	add	sp, #16
 80185ca:	bd80      	pop	{r7, pc}
 80185cc:	20001620 	.word	0x20001620

080185d0 <RegionIN865CalcBackOff>:
{
    return currentDr;
}

void RegionIN865CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b088      	sub	sp, #32
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 80185d8:	210c      	movs	r1, #12
 80185da:	187b      	adds	r3, r7, r1
 80185dc:	4a12      	ldr	r2, [pc, #72]	; (8018628 <RegionIN865CalcBackOff+0x58>)
 80185de:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 80185e0:	187b      	adds	r3, r7, r1
 80185e2:	4a12      	ldr	r2, [pc, #72]	; (801862c <RegionIN865CalcBackOff+0x5c>)
 80185e4:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	785a      	ldrb	r2, [r3, #1]
 80185ea:	187b      	adds	r3, r7, r1
 80185ec:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	781a      	ldrb	r2, [r3, #0]
 80185f2:	187b      	adds	r3, r7, r1
 80185f4:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	789a      	ldrb	r2, [r3, #2]
 80185fa:	187b      	adds	r3, r7, r1
 80185fc:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	78da      	ldrb	r2, [r3, #3]
 8018602:	187b      	adds	r3, r7, r1
 8018604:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	685a      	ldr	r2, [r3, #4]
 801860a:	187b      	adds	r3, r7, r1
 801860c:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	689a      	ldr	r2, [r3, #8]
 8018612:	187b      	adds	r3, r7, r1
 8018614:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 8018616:	187b      	adds	r3, r7, r1
 8018618:	0018      	movs	r0, r3
 801861a:	f7fc fa99 	bl	8014b50 <RegionCommonCalcBackOff>
}
 801861e:	46c0      	nop			; (mov r8, r8)
 8018620:	46bd      	mov	sp, r7
 8018622:	b008      	add	sp, #32
 8018624:	bd80      	pop	{r7, pc}
 8018626:	46c0      	nop			; (mov r8, r8)
 8018628:	20001620 	.word	0x20001620
 801862c:	200016e0 	.word	0x200016e0

08018630 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018630:	b5b0      	push	{r4, r5, r7, lr}
 8018632:	b090      	sub	sp, #64	; 0x40
 8018634:	af04      	add	r7, sp, #16
 8018636:	60f8      	str	r0, [r7, #12]
 8018638:	60b9      	str	r1, [r7, #8]
 801863a:	607a      	str	r2, [r7, #4]
 801863c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801863e:	232f      	movs	r3, #47	; 0x2f
 8018640:	18fb      	adds	r3, r7, r3
 8018642:	2200      	movs	r2, #0
 8018644:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 8018646:	2327      	movs	r3, #39	; 0x27
 8018648:	18fb      	adds	r3, r7, r3
 801864a:	2200      	movs	r2, #0
 801864c:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 801864e:	2314      	movs	r3, #20
 8018650:	18fb      	adds	r3, r7, r3
 8018652:	0018      	movs	r0, r3
 8018654:	2310      	movs	r3, #16
 8018656:	001a      	movs	r2, r3
 8018658:	2100      	movs	r1, #0
 801865a:	f00d fc69 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 801865e:	2300      	movs	r3, #0
 8018660:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8018662:	4b42      	ldr	r3, [pc, #264]	; (801876c <RegionIN865NextChannel+0x13c>)
 8018664:	2201      	movs	r2, #1
 8018666:	2100      	movs	r1, #0
 8018668:	0018      	movs	r0, r3
 801866a:	f7fb fef1 	bl	8014450 <RegionCommonCountChannels>
 801866e:	1e03      	subs	r3, r0, #0
 8018670:	d108      	bne.n	8018684 <RegionIN865NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018672:	4b3f      	ldr	r3, [pc, #252]	; (8018770 <RegionIN865NextChannel+0x140>)
 8018674:	22d0      	movs	r2, #208	; 0xd0
 8018676:	5a9b      	ldrh	r3, [r3, r2]
 8018678:	2207      	movs	r2, #7
 801867a:	4313      	orrs	r3, r2
 801867c:	b299      	uxth	r1, r3
 801867e:	4b3c      	ldr	r3, [pc, #240]	; (8018770 <RegionIN865NextChannel+0x140>)
 8018680:	22d0      	movs	r2, #208	; 0xd0
 8018682:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	681c      	ldr	r4, [r3, #0]
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	685b      	ldr	r3, [r3, #4]
 801868c:	0018      	movs	r0, r3
 801868e:	f004 fae6 	bl	801cc5e <TimerGetElapsedTime>
 8018692:	0003      	movs	r3, r0
 8018694:	429c      	cmp	r4, r3
 8018696:	d824      	bhi.n	80186e2 <RegionIN865NextChannel+0xb2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018698:	683b      	ldr	r3, [r7, #0]
 801869a:	2200      	movs	r2, #0
 801869c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, IN865_MAX_NB_BANDS );
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	7a58      	ldrb	r0, [r3, #9]
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	7a99      	ldrb	r1, [r3, #10]
 80186a6:	4a33      	ldr	r2, [pc, #204]	; (8018774 <RegionIN865NextChannel+0x144>)
 80186a8:	2301      	movs	r3, #1
 80186aa:	f7fb ff5c 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 80186ae:	0003      	movs	r3, r0
 80186b0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	7a58      	ldrb	r0, [r3, #9]
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	7a1b      	ldrb	r3, [r3, #8]
 80186ba:	b25b      	sxtb	r3, r3
 80186bc:	b2d9      	uxtb	r1, r3
 80186be:	232f      	movs	r3, #47	; 0x2f
 80186c0:	18fc      	adds	r4, r7, r3
 80186c2:	4d2b      	ldr	r5, [pc, #172]	; (8018770 <RegionIN865NextChannel+0x140>)
 80186c4:	4a29      	ldr	r2, [pc, #164]	; (801876c <RegionIN865NextChannel+0x13c>)
 80186c6:	2327      	movs	r3, #39	; 0x27
 80186c8:	18fb      	adds	r3, r7, r3
 80186ca:	9302      	str	r3, [sp, #8]
 80186cc:	2314      	movs	r3, #20
 80186ce:	18fb      	adds	r3, r7, r3
 80186d0:	9301      	str	r3, [sp, #4]
 80186d2:	4b28      	ldr	r3, [pc, #160]	; (8018774 <RegionIN865NextChannel+0x144>)
 80186d4:	9300      	str	r3, [sp, #0]
 80186d6:	002b      	movs	r3, r5
 80186d8:	f7fe ffe6 	bl	80176a8 <CountNbOfEnabledChannels>
 80186dc:	0003      	movs	r3, r0
 80186de:	7023      	strb	r3, [r4, #0]
 80186e0:	e010      	b.n	8018704 <RegionIN865NextChannel+0xd4>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 80186e2:	2127      	movs	r1, #39	; 0x27
 80186e4:	187b      	adds	r3, r7, r1
 80186e6:	781b      	ldrb	r3, [r3, #0]
 80186e8:	3301      	adds	r3, #1
 80186ea:	b2da      	uxtb	r2, r3
 80186ec:	187b      	adds	r3, r7, r1
 80186ee:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	681c      	ldr	r4, [r3, #0]
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	685b      	ldr	r3, [r3, #4]
 80186f8:	0018      	movs	r0, r3
 80186fa:	f004 fab0 	bl	801cc5e <TimerGetElapsedTime>
 80186fe:	0003      	movs	r3, r0
 8018700:	1ae3      	subs	r3, r4, r3
 8018702:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8018704:	232f      	movs	r3, #47	; 0x2f
 8018706:	18fb      	adds	r3, r7, r3
 8018708:	781b      	ldrb	r3, [r3, #0]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d012      	beq.n	8018734 <RegionIN865NextChannel+0x104>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801870e:	232f      	movs	r3, #47	; 0x2f
 8018710:	18fb      	adds	r3, r7, r3
 8018712:	781b      	ldrb	r3, [r3, #0]
 8018714:	3b01      	subs	r3, #1
 8018716:	0019      	movs	r1, r3
 8018718:	2000      	movs	r0, #0
 801871a:	f004 fac9 	bl	801ccb0 <randr>
 801871e:	0002      	movs	r2, r0
 8018720:	2314      	movs	r3, #20
 8018722:	18fb      	adds	r3, r7, r3
 8018724:	5c9a      	ldrb	r2, [r3, r2]
 8018726:	68bb      	ldr	r3, [r7, #8]
 8018728:	701a      	strb	r2, [r3, #0]

        *time = 0;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018730:	2300      	movs	r3, #0
 8018732:	e016      	b.n	8018762 <RegionIN865NextChannel+0x132>
    }
    else
    {
        if( delayTx > 0 )
 8018734:	2327      	movs	r3, #39	; 0x27
 8018736:	18fb      	adds	r3, r7, r3
 8018738:	781b      	ldrb	r3, [r3, #0]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d004      	beq.n	8018748 <RegionIN865NextChannel+0x118>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018742:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018744:	230b      	movs	r3, #11
 8018746:	e00c      	b.n	8018762 <RegionIN865NextChannel+0x132>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018748:	4b09      	ldr	r3, [pc, #36]	; (8018770 <RegionIN865NextChannel+0x140>)
 801874a:	22d0      	movs	r2, #208	; 0xd0
 801874c:	5a9b      	ldrh	r3, [r3, r2]
 801874e:	2207      	movs	r2, #7
 8018750:	4313      	orrs	r3, r2
 8018752:	b299      	uxth	r1, r3
 8018754:	4b06      	ldr	r3, [pc, #24]	; (8018770 <RegionIN865NextChannel+0x140>)
 8018756:	22d0      	movs	r2, #208	; 0xd0
 8018758:	5299      	strh	r1, [r3, r2]
        *time = 0;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	2200      	movs	r2, #0
 801875e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018760:	230c      	movs	r3, #12
    }
}
 8018762:	0018      	movs	r0, r3
 8018764:	46bd      	mov	sp, r7
 8018766:	b00c      	add	sp, #48	; 0x30
 8018768:	bdb0      	pop	{r4, r5, r7, pc}
 801876a:	46c0      	nop			; (mov r8, r8)
 801876c:	200016f0 	.word	0x200016f0
 8018770:	20001620 	.word	0x20001620
 8018774:	200016e0 	.word	0x200016e0

08018778 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018778:	b590      	push	{r4, r7, lr}
 801877a:	b085      	sub	sp, #20
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8018780:	230f      	movs	r3, #15
 8018782:	18fb      	adds	r3, r7, r3
 8018784:	2200      	movs	r2, #0
 8018786:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8018788:	230e      	movs	r3, #14
 801878a:	18fb      	adds	r3, r7, r3
 801878c:	2200      	movs	r2, #0
 801878e:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8018790:	210d      	movs	r1, #13
 8018792:	187b      	adds	r3, r7, r1
 8018794:	687a      	ldr	r2, [r7, #4]
 8018796:	7912      	ldrb	r2, [r2, #4]
 8018798:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 801879a:	187b      	adds	r3, r7, r1
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	2b02      	cmp	r3, #2
 80187a0:	d801      	bhi.n	80187a6 <RegionIN865ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80187a2:	2306      	movs	r3, #6
 80187a4:	e09c      	b.n	80188e0 <RegionIN865ChannelAdd+0x168>
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 80187a6:	230d      	movs	r3, #13
 80187a8:	18fb      	adds	r3, r7, r3
 80187aa:	781b      	ldrb	r3, [r3, #0]
 80187ac:	2b0f      	cmp	r3, #15
 80187ae:	d901      	bls.n	80187b4 <RegionIN865ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80187b0:	2303      	movs	r3, #3
 80187b2:	e095      	b.n	80188e0 <RegionIN865ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	7a1b      	ldrb	r3, [r3, #8]
 80187ba:	011b      	lsls	r3, r3, #4
 80187bc:	b25b      	sxtb	r3, r3
 80187be:	111b      	asrs	r3, r3, #4
 80187c0:	b25b      	sxtb	r3, r3
 80187c2:	2207      	movs	r2, #7
 80187c4:	2100      	movs	r1, #0
 80187c6:	0018      	movs	r0, r3
 80187c8:	f7fb fdda 	bl	8014380 <RegionCommonValueInRange>
 80187cc:	1e03      	subs	r3, r0, #0
 80187ce:	d103      	bne.n	80187d8 <RegionIN865ChannelAdd+0x60>
    {
        drInvalid = true;
 80187d0:	230f      	movs	r3, #15
 80187d2:	18fb      	adds	r3, r7, r3
 80187d4:	2201      	movs	r2, #1
 80187d6:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	7a1b      	ldrb	r3, [r3, #8]
 80187de:	b25b      	sxtb	r3, r3
 80187e0:	111b      	asrs	r3, r3, #4
 80187e2:	b25b      	sxtb	r3, r3
 80187e4:	2207      	movs	r2, #7
 80187e6:	2100      	movs	r1, #0
 80187e8:	0018      	movs	r0, r3
 80187ea:	f7fb fdc9 	bl	8014380 <RegionCommonValueInRange>
 80187ee:	1e03      	subs	r3, r0, #0
 80187f0:	d103      	bne.n	80187fa <RegionIN865ChannelAdd+0x82>
    {
        drInvalid = true;
 80187f2:	230f      	movs	r3, #15
 80187f4:	18fb      	adds	r3, r7, r3
 80187f6:	2201      	movs	r2, #1
 80187f8:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	7a1b      	ldrb	r3, [r3, #8]
 8018800:	011b      	lsls	r3, r3, #4
 8018802:	b25b      	sxtb	r3, r3
 8018804:	111b      	asrs	r3, r3, #4
 8018806:	b25a      	sxtb	r2, r3
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	7a1b      	ldrb	r3, [r3, #8]
 801880e:	b25b      	sxtb	r3, r3
 8018810:	111b      	asrs	r3, r3, #4
 8018812:	b25b      	sxtb	r3, r3
 8018814:	429a      	cmp	r2, r3
 8018816:	dd03      	ble.n	8018820 <RegionIN865ChannelAdd+0xa8>
    {
        drInvalid = true;
 8018818:	230f      	movs	r3, #15
 801881a:	18fb      	adds	r3, r7, r3
 801881c:	2201      	movs	r2, #1
 801881e:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8018820:	230e      	movs	r3, #14
 8018822:	18fb      	adds	r3, r7, r3
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	2201      	movs	r2, #1
 8018828:	4053      	eors	r3, r2
 801882a:	b2db      	uxtb	r3, r3
 801882c:	2b00      	cmp	r3, #0
 801882e:	d010      	beq.n	8018852 <RegionIN865ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	0018      	movs	r0, r3
 8018838:	f7fe ff0e 	bl	8017658 <VerifyRfFreq>
 801883c:	0003      	movs	r3, r0
 801883e:	001a      	movs	r2, r3
 8018840:	2301      	movs	r3, #1
 8018842:	4053      	eors	r3, r2
 8018844:	b2db      	uxtb	r3, r3
 8018846:	2b00      	cmp	r3, #0
 8018848:	d003      	beq.n	8018852 <RegionIN865ChannelAdd+0xda>
        {
            freqInvalid = true;
 801884a:	230e      	movs	r3, #14
 801884c:	18fb      	adds	r3, r7, r3
 801884e:	2201      	movs	r2, #1
 8018850:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018852:	230f      	movs	r3, #15
 8018854:	18fb      	adds	r3, r7, r3
 8018856:	781b      	ldrb	r3, [r3, #0]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d006      	beq.n	801886a <RegionIN865ChannelAdd+0xf2>
 801885c:	230e      	movs	r3, #14
 801885e:	18fb      	adds	r3, r7, r3
 8018860:	781b      	ldrb	r3, [r3, #0]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d001      	beq.n	801886a <RegionIN865ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018866:	2306      	movs	r3, #6
 8018868:	e03a      	b.n	80188e0 <RegionIN865ChannelAdd+0x168>
    }
    if( drInvalid == true )
 801886a:	230f      	movs	r3, #15
 801886c:	18fb      	adds	r3, r7, r3
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d001      	beq.n	8018878 <RegionIN865ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018874:	2305      	movs	r3, #5
 8018876:	e033      	b.n	80188e0 <RegionIN865ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8018878:	230e      	movs	r3, #14
 801887a:	18fb      	adds	r3, r7, r3
 801887c:	781b      	ldrb	r3, [r3, #0]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d001      	beq.n	8018886 <RegionIN865ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018882:	2304      	movs	r3, #4
 8018884:	e02c      	b.n	80188e0 <RegionIN865ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8018886:	200d      	movs	r0, #13
 8018888:	0004      	movs	r4, r0
 801888a:	183b      	adds	r3, r7, r0
 801888c:	781a      	ldrb	r2, [r3, #0]
 801888e:	0013      	movs	r3, r2
 8018890:	005b      	lsls	r3, r3, #1
 8018892:	189b      	adds	r3, r3, r2
 8018894:	009b      	lsls	r3, r3, #2
 8018896:	4a14      	ldr	r2, [pc, #80]	; (80188e8 <RegionIN865ChannelAdd+0x170>)
 8018898:	1898      	adds	r0, r3, r2
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	220c      	movs	r2, #12
 80188a0:	0019      	movs	r1, r3
 80188a2:	f004 fa1b 	bl	801ccdc <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 80188a6:	0020      	movs	r0, r4
 80188a8:	183b      	adds	r3, r7, r0
 80188aa:	781a      	ldrb	r2, [r3, #0]
 80188ac:	490e      	ldr	r1, [pc, #56]	; (80188e8 <RegionIN865ChannelAdd+0x170>)
 80188ae:	0013      	movs	r3, r2
 80188b0:	005b      	lsls	r3, r3, #1
 80188b2:	189b      	adds	r3, r3, r2
 80188b4:	009b      	lsls	r3, r3, #2
 80188b6:	18cb      	adds	r3, r1, r3
 80188b8:	3309      	adds	r3, #9
 80188ba:	2200      	movs	r2, #0
 80188bc:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 80188be:	4b0a      	ldr	r3, [pc, #40]	; (80188e8 <RegionIN865ChannelAdd+0x170>)
 80188c0:	22d0      	movs	r2, #208	; 0xd0
 80188c2:	5a9b      	ldrh	r3, [r3, r2]
 80188c4:	b21a      	sxth	r2, r3
 80188c6:	183b      	adds	r3, r7, r0
 80188c8:	781b      	ldrb	r3, [r3, #0]
 80188ca:	2101      	movs	r1, #1
 80188cc:	4099      	lsls	r1, r3
 80188ce:	000b      	movs	r3, r1
 80188d0:	b21b      	sxth	r3, r3
 80188d2:	4313      	orrs	r3, r2
 80188d4:	b21b      	sxth	r3, r3
 80188d6:	b299      	uxth	r1, r3
 80188d8:	4b03      	ldr	r3, [pc, #12]	; (80188e8 <RegionIN865ChannelAdd+0x170>)
 80188da:	22d0      	movs	r2, #208	; 0xd0
 80188dc:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 80188de:	2300      	movs	r3, #0
}
 80188e0:	0018      	movs	r0, r3
 80188e2:	46bd      	mov	sp, r7
 80188e4:	b005      	add	sp, #20
 80188e6:	bd90      	pop	{r4, r7, pc}
 80188e8:	20001620 	.word	0x20001620

080188ec <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80188ec:	b590      	push	{r4, r7, lr}
 80188ee:	b085      	sub	sp, #20
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80188f4:	210f      	movs	r1, #15
 80188f6:	187b      	adds	r3, r7, r1
 80188f8:	687a      	ldr	r2, [r7, #4]
 80188fa:	7812      	ldrb	r2, [r2, #0]
 80188fc:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 80188fe:	187b      	adds	r3, r7, r1
 8018900:	781b      	ldrb	r3, [r3, #0]
 8018902:	2b02      	cmp	r3, #2
 8018904:	d801      	bhi.n	801890a <RegionIN865ChannelsRemove+0x1e>
    {
        return false;
 8018906:	2300      	movs	r3, #0
 8018908:	e015      	b.n	8018936 <RegionIN865ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801890a:	240f      	movs	r4, #15
 801890c:	193b      	adds	r3, r7, r4
 801890e:	781a      	ldrb	r2, [r3, #0]
 8018910:	490b      	ldr	r1, [pc, #44]	; (8018940 <RegionIN865ChannelsRemove+0x54>)
 8018912:	0013      	movs	r3, r2
 8018914:	005b      	lsls	r3, r3, #1
 8018916:	189b      	adds	r3, r3, r2
 8018918:	009b      	lsls	r3, r3, #2
 801891a:	18cb      	adds	r3, r1, r3
 801891c:	220c      	movs	r2, #12
 801891e:	2100      	movs	r1, #0
 8018920:	0018      	movs	r0, r3
 8018922:	f00d fb05 	bl	8025f30 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 8018926:	193b      	adds	r3, r7, r4
 8018928:	7819      	ldrb	r1, [r3, #0]
 801892a:	4b06      	ldr	r3, [pc, #24]	; (8018944 <RegionIN865ChannelsRemove+0x58>)
 801892c:	2210      	movs	r2, #16
 801892e:	0018      	movs	r0, r3
 8018930:	f7fb fd4c 	bl	80143cc <RegionCommonChanDisable>
 8018934:	0003      	movs	r3, r0
}
 8018936:	0018      	movs	r0, r3
 8018938:	46bd      	mov	sp, r7
 801893a:	b005      	add	sp, #20
 801893c:	bd90      	pop	{r4, r7, pc}
 801893e:	46c0      	nop			; (mov r8, r8)
 8018940:	20001620 	.word	0x20001620
 8018944:	200016f0 	.word	0x200016f0

08018948 <RegionIN865ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018948:	b590      	push	{r4, r7, lr}
 801894a:	b083      	sub	sp, #12
 801894c:	af00      	add	r7, sp, #0
 801894e:	0004      	movs	r4, r0
 8018950:	0008      	movs	r0, r1
 8018952:	0011      	movs	r1, r2
 8018954:	1dfb      	adds	r3, r7, #7
 8018956:	1c22      	adds	r2, r4, #0
 8018958:	701a      	strb	r2, [r3, #0]
 801895a:	1dbb      	adds	r3, r7, #6
 801895c:	1c02      	adds	r2, r0, #0
 801895e:	701a      	strb	r2, [r3, #0]
 8018960:	1d7b      	adds	r3, r7, #5
 8018962:	1c0a      	adds	r2, r1, #0
 8018964:	701a      	strb	r2, [r3, #0]
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 8018966:	1dbb      	adds	r3, r7, #6
 8018968:	781b      	ldrb	r3, [r3, #0]
 801896a:	b25b      	sxtb	r3, r3
 801896c:	1d7a      	adds	r2, r7, #5
 801896e:	7812      	ldrb	r2, [r2, #0]
 8018970:	b252      	sxtb	r2, r2
 8018972:	490b      	ldr	r1, [pc, #44]	; (80189a0 <RegionIN865ApplyDrOffset+0x58>)
 8018974:	568a      	ldrsb	r2, [r1, r2]
 8018976:	1a9b      	subs	r3, r3, r2
 8018978:	2b05      	cmp	r3, #5
 801897a:	dc0c      	bgt.n	8018996 <RegionIN865ApplyDrOffset+0x4e>
 801897c:	1dbb      	adds	r3, r7, #6
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	b25b      	sxtb	r3, r3
 8018982:	1d7a      	adds	r2, r7, #5
 8018984:	7812      	ldrb	r2, [r2, #0]
 8018986:	b252      	sxtb	r2, r2
 8018988:	4905      	ldr	r1, [pc, #20]	; (80189a0 <RegionIN865ApplyDrOffset+0x58>)
 801898a:	568a      	ldrsb	r2, [r1, r2]
 801898c:	1a9b      	subs	r3, r3, r2
 801898e:	d500      	bpl.n	8018992 <RegionIN865ApplyDrOffset+0x4a>
 8018990:	2300      	movs	r3, #0
 8018992:	b2db      	uxtb	r3, r3
 8018994:	e000      	b.n	8018998 <RegionIN865ApplyDrOffset+0x50>
 8018996:	2305      	movs	r3, #5
}
 8018998:	0018      	movs	r0, r3
 801899a:	46bd      	mov	sp, r7
 801899c:	b003      	add	sp, #12
 801899e:	bd90      	pop	{r4, r7, pc}
 80189a0:	0802852c 	.word	0x0802852c

080189a4 <GetNextLowerTxDr>:
 */
static RegionKR920NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	0002      	movs	r2, r0
 80189ac:	1dfb      	adds	r3, r7, #7
 80189ae:	701a      	strb	r2, [r3, #0]
 80189b0:	1dbb      	adds	r3, r7, #6
 80189b2:	1c0a      	adds	r2, r1, #0
 80189b4:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 80189b6:	230f      	movs	r3, #15
 80189b8:	18fb      	adds	r3, r7, r3
 80189ba:	2200      	movs	r2, #0
 80189bc:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 80189be:	1dfa      	adds	r2, r7, #7
 80189c0:	1dbb      	adds	r3, r7, #6
 80189c2:	7812      	ldrb	r2, [r2, #0]
 80189c4:	b252      	sxtb	r2, r2
 80189c6:	781b      	ldrb	r3, [r3, #0]
 80189c8:	b25b      	sxtb	r3, r3
 80189ca:	429a      	cmp	r2, r3
 80189cc:	d105      	bne.n	80189da <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 80189ce:	230f      	movs	r3, #15
 80189d0:	18fb      	adds	r3, r7, r3
 80189d2:	1dba      	adds	r2, r7, #6
 80189d4:	7812      	ldrb	r2, [r2, #0]
 80189d6:	701a      	strb	r2, [r3, #0]
 80189d8:	e005      	b.n	80189e6 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 80189da:	1dfb      	adds	r3, r7, #7
 80189dc:	781a      	ldrb	r2, [r3, #0]
 80189de:	230f      	movs	r3, #15
 80189e0:	18fb      	adds	r3, r7, r3
 80189e2:	3a01      	subs	r2, #1
 80189e4:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80189e6:	230f      	movs	r3, #15
 80189e8:	18fb      	adds	r3, r7, r3
 80189ea:	781b      	ldrb	r3, [r3, #0]
 80189ec:	b25b      	sxtb	r3, r3
}
 80189ee:	0018      	movs	r0, r3
 80189f0:	46bd      	mov	sp, r7
 80189f2:	b004      	add	sp, #16
 80189f4:	bd80      	pop	{r7, pc}
	...

080189f8 <GetMaxEIRP>:

static int8_t GetMaxEIRP( uint32_t freq )
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b082      	sub	sp, #8
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
    if( freq >= 922100000 )
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	4a05      	ldr	r2, [pc, #20]	; (8018a18 <GetMaxEIRP+0x20>)
 8018a04:	4293      	cmp	r3, r2
 8018a06:	d901      	bls.n	8018a0c <GetMaxEIRP+0x14>
    {// Limit to 14dBm
        return KR920_DEFAULT_MAX_EIRP_HIGH;
 8018a08:	230e      	movs	r3, #14
 8018a0a:	e000      	b.n	8018a0e <GetMaxEIRP+0x16>
    }
    // Limit to 10dBm
    return KR920_DEFAULT_MAX_EIRP_LOW;
 8018a0c:	230a      	movs	r3, #10
}
 8018a0e:	0018      	movs	r0, r3
 8018a10:	46bd      	mov	sp, r7
 8018a12:	b002      	add	sp, #8
 8018a14:	bd80      	pop	{r7, pc}
 8018a16:	46c0      	nop			; (mov r8, r8)
 8018a18:	36f6211f 	.word	0x36f6211f

08018a1c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b082      	sub	sp, #8
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
    switch( BandwidthsKR920[drIndex] )
 8018a24:	4b09      	ldr	r3, [pc, #36]	; (8018a4c <GetBandwidth+0x30>)
 8018a26:	687a      	ldr	r2, [r7, #4]
 8018a28:	0092      	lsls	r2, r2, #2
 8018a2a:	58d3      	ldr	r3, [r2, r3]
 8018a2c:	4a08      	ldr	r2, [pc, #32]	; (8018a50 <GetBandwidth+0x34>)
 8018a2e:	4293      	cmp	r3, r2
 8018a30:	d004      	beq.n	8018a3c <GetBandwidth+0x20>
 8018a32:	4a08      	ldr	r2, [pc, #32]	; (8018a54 <GetBandwidth+0x38>)
 8018a34:	4293      	cmp	r3, r2
 8018a36:	d003      	beq.n	8018a40 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8018a38:	2300      	movs	r3, #0
 8018a3a:	e002      	b.n	8018a42 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8018a3c:	2301      	movs	r3, #1
 8018a3e:	e000      	b.n	8018a42 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8018a40:	2302      	movs	r3, #2
    }
}
 8018a42:	0018      	movs	r0, r3
 8018a44:	46bd      	mov	sp, r7
 8018a46:	b002      	add	sp, #8
 8018a48:	bd80      	pop	{r7, pc}
 8018a4a:	46c0      	nop			; (mov r8, r8)
 8018a4c:	08028610 	.word	0x08028610
 8018a50:	0003d090 	.word	0x0003d090
 8018a54:	0007a120 	.word	0x0007a120

08018a58 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8018a58:	b590      	push	{r4, r7, lr}
 8018a5a:	b085      	sub	sp, #20
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	0004      	movs	r4, r0
 8018a60:	0008      	movs	r0, r1
 8018a62:	0011      	movs	r1, r2
 8018a64:	603b      	str	r3, [r7, #0]
 8018a66:	1dfb      	adds	r3, r7, #7
 8018a68:	1c22      	adds	r2, r4, #0
 8018a6a:	701a      	strb	r2, [r3, #0]
 8018a6c:	1dbb      	adds	r3, r7, #6
 8018a6e:	1c02      	adds	r2, r0, #0
 8018a70:	701a      	strb	r2, [r3, #0]
 8018a72:	1d7b      	adds	r3, r7, #5
 8018a74:	1c0a      	adds	r2, r1, #0
 8018a76:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8018a78:	210f      	movs	r1, #15
 8018a7a:	187b      	adds	r3, r7, r1
 8018a7c:	1dfa      	adds	r2, r7, #7
 8018a7e:	7812      	ldrb	r2, [r2, #0]
 8018a80:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8018a82:	187a      	adds	r2, r7, r1
 8018a84:	1dbb      	adds	r3, r7, #6
 8018a86:	1df9      	adds	r1, r7, #7
 8018a88:	780c      	ldrb	r4, [r1, #0]
 8018a8a:	781b      	ldrb	r3, [r3, #0]
 8018a8c:	b258      	sxtb	r0, r3
 8018a8e:	b261      	sxtb	r1, r4
 8018a90:	4288      	cmp	r0, r1
 8018a92:	da00      	bge.n	8018a96 <LimitTxPower+0x3e>
 8018a94:	1c23      	adds	r3, r4, #0
 8018a96:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8018a98:	230f      	movs	r3, #15
 8018a9a:	18fb      	adds	r3, r7, r3
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	b25b      	sxtb	r3, r3
}
 8018aa0:	0018      	movs	r0, r3
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	b005      	add	sp, #20
 8018aa6:	bd90      	pop	{r4, r7, pc}

08018aa8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
    uint32_t tmpFreq = freq;
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	60fb      	str	r3, [r7, #12]

    // Check radio driver support
    if( Radio.CheckRfFrequency( tmpFreq ) == false )
 8018ab4:	4b14      	ldr	r3, [pc, #80]	; (8018b08 <VerifyRfFreq+0x60>)
 8018ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ab8:	68fa      	ldr	r2, [r7, #12]
 8018aba:	0010      	movs	r0, r2
 8018abc:	4798      	blx	r3
 8018abe:	0003      	movs	r3, r0
 8018ac0:	001a      	movs	r2, r3
 8018ac2:	2301      	movs	r3, #1
 8018ac4:	4053      	eors	r3, r2
 8018ac6:	b2db      	uxtb	r3, r3
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d001      	beq.n	8018ad0 <VerifyRfFreq+0x28>
    {
        return false;
 8018acc:	2300      	movs	r3, #0
 8018ace:	e016      	b.n	8018afe <VerifyRfFreq+0x56>
    }

    // Verify if the frequency is valid. The frequency must be in a specified
    // range and can be set to specific values.
    if( ( tmpFreq >= 920900000 ) && ( tmpFreq <=923300000 ) )
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	4a0e      	ldr	r2, [pc, #56]	; (8018b0c <VerifyRfFreq+0x64>)
 8018ad4:	4293      	cmp	r3, r2
 8018ad6:	d911      	bls.n	8018afc <VerifyRfFreq+0x54>
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	4a0d      	ldr	r2, [pc, #52]	; (8018b10 <VerifyRfFreq+0x68>)
 8018adc:	4293      	cmp	r3, r2
 8018ade:	d80d      	bhi.n	8018afc <VerifyRfFreq+0x54>
    {
        // Range ok, check for specific value
        tmpFreq -= 920900000;
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	4a0c      	ldr	r2, [pc, #48]	; (8018b14 <VerifyRfFreq+0x6c>)
 8018ae4:	4694      	mov	ip, r2
 8018ae6:	4463      	add	r3, ip
 8018ae8:	60fb      	str	r3, [r7, #12]
        if( ( tmpFreq % 200000 ) == 0 )
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	490a      	ldr	r1, [pc, #40]	; (8018b18 <VerifyRfFreq+0x70>)
 8018aee:	0018      	movs	r0, r3
 8018af0:	f7e7 fb98 	bl	8000224 <__aeabi_uidivmod>
 8018af4:	1e0b      	subs	r3, r1, #0
 8018af6:	d101      	bne.n	8018afc <VerifyRfFreq+0x54>
        {
            return true;
 8018af8:	2301      	movs	r3, #1
 8018afa:	e000      	b.n	8018afe <VerifyRfFreq+0x56>
        }
    }
    return false;
 8018afc:	2300      	movs	r3, #0
}
 8018afe:	0018      	movs	r0, r3
 8018b00:	46bd      	mov	sp, r7
 8018b02:	b004      	add	sp, #16
 8018b04:	bd80      	pop	{r7, pc}
 8018b06:	46c0      	nop			; (mov r8, r8)
 8018b08:	08028964 	.word	0x08028964
 8018b0c:	36e3d19f 	.word	0x36e3d19f
 8018b10:	370870a0 	.word	0x370870a0
 8018b14:	c91c2e60 	.word	0xc91c2e60
 8018b18:	00030d40 	.word	0x00030d40

08018b1c <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8018b1c:	b5b0      	push	{r4, r5, r7, lr}
 8018b1e:	b086      	sub	sp, #24
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	60ba      	str	r2, [r7, #8]
 8018b24:	607b      	str	r3, [r7, #4]
 8018b26:	230f      	movs	r3, #15
 8018b28:	18fb      	adds	r3, r7, r3
 8018b2a:	1c02      	adds	r2, r0, #0
 8018b2c:	701a      	strb	r2, [r3, #0]
 8018b2e:	230e      	movs	r3, #14
 8018b30:	18fb      	adds	r3, r7, r3
 8018b32:	1c0a      	adds	r2, r1, #0
 8018b34:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8018b36:	2317      	movs	r3, #23
 8018b38:	18fb      	adds	r3, r7, r3
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8018b3e:	2316      	movs	r3, #22
 8018b40:	18fb      	adds	r3, r7, r3
 8018b42:	2200      	movs	r2, #0
 8018b44:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < KR920_MAX_NB_CHANNELS; i += 16, k++ )
 8018b46:	2315      	movs	r3, #21
 8018b48:	18fb      	adds	r3, r7, r3
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	701a      	strb	r2, [r3, #0]
 8018b4e:	2314      	movs	r3, #20
 8018b50:	18fb      	adds	r3, r7, r3
 8018b52:	2200      	movs	r2, #0
 8018b54:	701a      	strb	r2, [r3, #0]
 8018b56:	e0b4      	b.n	8018cc2 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018b58:	2313      	movs	r3, #19
 8018b5a:	18fb      	adds	r3, r7, r3
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	701a      	strb	r2, [r3, #0]
 8018b60:	e09d      	b.n	8018c9e <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8018b62:	2314      	movs	r3, #20
 8018b64:	18fb      	adds	r3, r7, r3
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	005b      	lsls	r3, r3, #1
 8018b6a:	68ba      	ldr	r2, [r7, #8]
 8018b6c:	18d3      	adds	r3, r2, r3
 8018b6e:	881b      	ldrh	r3, [r3, #0]
 8018b70:	001a      	movs	r2, r3
 8018b72:	2313      	movs	r3, #19
 8018b74:	18fb      	adds	r3, r7, r3
 8018b76:	781b      	ldrb	r3, [r3, #0]
 8018b78:	411a      	asrs	r2, r3
 8018b7a:	0013      	movs	r3, r2
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	4013      	ands	r3, r2
 8018b80:	d100      	bne.n	8018b84 <CountNbOfEnabledChannels+0x68>
 8018b82:	e086      	b.n	8018c92 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8018b84:	2315      	movs	r3, #21
 8018b86:	18fb      	adds	r3, r7, r3
 8018b88:	781a      	ldrb	r2, [r3, #0]
 8018b8a:	2313      	movs	r3, #19
 8018b8c:	18fb      	adds	r3, r7, r3
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	18d3      	adds	r3, r2, r3
 8018b92:	001a      	movs	r2, r3
 8018b94:	0013      	movs	r3, r2
 8018b96:	005b      	lsls	r3, r3, #1
 8018b98:	189b      	adds	r3, r3, r2
 8018b9a:	009b      	lsls	r3, r3, #2
 8018b9c:	001a      	movs	r2, r3
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	189b      	adds	r3, r3, r2
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d06f      	beq.n	8018c88 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8018ba8:	230f      	movs	r3, #15
 8018baa:	18fb      	adds	r3, r7, r3
 8018bac:	781b      	ldrb	r3, [r3, #0]
 8018bae:	2201      	movs	r2, #1
 8018bb0:	4053      	eors	r3, r2
 8018bb2:	b2db      	uxtb	r3, r3
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d008      	beq.n	8018bca <CountNbOfEnabledChannels+0xae>
                {
                    if( ( KR920_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8018bb8:	2313      	movs	r3, #19
 8018bba:	18fb      	adds	r3, r7, r3
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	2207      	movs	r2, #7
 8018bc0:	411a      	asrs	r2, r3
 8018bc2:	0013      	movs	r3, r2
 8018bc4:	2201      	movs	r2, #1
 8018bc6:	4013      	ands	r3, r2
 8018bc8:	d060      	beq.n	8018c8c <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8018bca:	230e      	movs	r3, #14
 8018bcc:	18fb      	adds	r3, r7, r3
 8018bce:	2000      	movs	r0, #0
 8018bd0:	5618      	ldrsb	r0, [r3, r0]
 8018bd2:	2415      	movs	r4, #21
 8018bd4:	193b      	adds	r3, r7, r4
 8018bd6:	781a      	ldrb	r2, [r3, #0]
 8018bd8:	2513      	movs	r5, #19
 8018bda:	197b      	adds	r3, r7, r5
 8018bdc:	781b      	ldrb	r3, [r3, #0]
 8018bde:	18d3      	adds	r3, r2, r3
 8018be0:	001a      	movs	r2, r3
 8018be2:	0013      	movs	r3, r2
 8018be4:	005b      	lsls	r3, r3, #1
 8018be6:	189b      	adds	r3, r3, r2
 8018be8:	009b      	lsls	r3, r3, #2
 8018bea:	001a      	movs	r2, r3
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	189b      	adds	r3, r3, r2
 8018bf0:	7a1b      	ldrb	r3, [r3, #8]
 8018bf2:	011b      	lsls	r3, r3, #4
 8018bf4:	b25b      	sxtb	r3, r3
 8018bf6:	111b      	asrs	r3, r3, #4
 8018bf8:	b25b      	sxtb	r3, r3
 8018bfa:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8018bfc:	193b      	adds	r3, r7, r4
 8018bfe:	781a      	ldrb	r2, [r3, #0]
 8018c00:	197b      	adds	r3, r7, r5
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	18d3      	adds	r3, r2, r3
 8018c06:	001a      	movs	r2, r3
 8018c08:	0013      	movs	r3, r2
 8018c0a:	005b      	lsls	r3, r3, #1
 8018c0c:	189b      	adds	r3, r3, r2
 8018c0e:	009b      	lsls	r3, r3, #2
 8018c10:	001a      	movs	r2, r3
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	189b      	adds	r3, r3, r2
 8018c16:	7a1b      	ldrb	r3, [r3, #8]
 8018c18:	b25b      	sxtb	r3, r3
 8018c1a:	111b      	asrs	r3, r3, #4
 8018c1c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8018c1e:	001a      	movs	r2, r3
 8018c20:	f7fb fbae 	bl	8014380 <RegionCommonValueInRange>
 8018c24:	1e03      	subs	r3, r0, #0
 8018c26:	d033      	beq.n	8018c90 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8018c28:	2315      	movs	r3, #21
 8018c2a:	18fb      	adds	r3, r7, r3
 8018c2c:	781a      	ldrb	r2, [r3, #0]
 8018c2e:	2313      	movs	r3, #19
 8018c30:	18fb      	adds	r3, r7, r3
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	18d3      	adds	r3, r2, r3
 8018c36:	001a      	movs	r2, r3
 8018c38:	0013      	movs	r3, r2
 8018c3a:	005b      	lsls	r3, r3, #1
 8018c3c:	189b      	adds	r3, r3, r2
 8018c3e:	009b      	lsls	r3, r3, #2
 8018c40:	001a      	movs	r2, r3
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	189b      	adds	r3, r3, r2
 8018c46:	7a5b      	ldrb	r3, [r3, #9]
 8018c48:	011b      	lsls	r3, r3, #4
 8018c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c4c:	18d3      	adds	r3, r2, r3
 8018c4e:	68db      	ldr	r3, [r3, #12]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d006      	beq.n	8018c62 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8018c54:	2116      	movs	r1, #22
 8018c56:	187b      	adds	r3, r7, r1
 8018c58:	781a      	ldrb	r2, [r3, #0]
 8018c5a:	187b      	adds	r3, r7, r1
 8018c5c:	3201      	adds	r2, #1
 8018c5e:	701a      	strb	r2, [r3, #0]
                    continue;
 8018c60:	e017      	b.n	8018c92 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8018c62:	2217      	movs	r2, #23
 8018c64:	18bb      	adds	r3, r7, r2
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	18ba      	adds	r2, r7, r2
 8018c6a:	1c59      	adds	r1, r3, #1
 8018c6c:	7011      	strb	r1, [r2, #0]
 8018c6e:	001a      	movs	r2, r3
 8018c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c72:	189b      	adds	r3, r3, r2
 8018c74:	2215      	movs	r2, #21
 8018c76:	18b9      	adds	r1, r7, r2
 8018c78:	2213      	movs	r2, #19
 8018c7a:	18ba      	adds	r2, r7, r2
 8018c7c:	7809      	ldrb	r1, [r1, #0]
 8018c7e:	7812      	ldrb	r2, [r2, #0]
 8018c80:	188a      	adds	r2, r1, r2
 8018c82:	b2d2      	uxtb	r2, r2
 8018c84:	701a      	strb	r2, [r3, #0]
 8018c86:	e004      	b.n	8018c92 <CountNbOfEnabledChannels+0x176>
                    continue;
 8018c88:	46c0      	nop			; (mov r8, r8)
 8018c8a:	e002      	b.n	8018c92 <CountNbOfEnabledChannels+0x176>
                        continue;
 8018c8c:	46c0      	nop			; (mov r8, r8)
 8018c8e:	e000      	b.n	8018c92 <CountNbOfEnabledChannels+0x176>
                    continue;
 8018c90:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8018c92:	2113      	movs	r1, #19
 8018c94:	187b      	adds	r3, r7, r1
 8018c96:	781a      	ldrb	r2, [r3, #0]
 8018c98:	187b      	adds	r3, r7, r1
 8018c9a:	3201      	adds	r2, #1
 8018c9c:	701a      	strb	r2, [r3, #0]
 8018c9e:	2313      	movs	r3, #19
 8018ca0:	18fb      	adds	r3, r7, r3
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	2b0f      	cmp	r3, #15
 8018ca6:	d800      	bhi.n	8018caa <CountNbOfEnabledChannels+0x18e>
 8018ca8:	e75b      	b.n	8018b62 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < KR920_MAX_NB_CHANNELS; i += 16, k++ )
 8018caa:	2215      	movs	r2, #21
 8018cac:	18bb      	adds	r3, r7, r2
 8018cae:	18ba      	adds	r2, r7, r2
 8018cb0:	7812      	ldrb	r2, [r2, #0]
 8018cb2:	3210      	adds	r2, #16
 8018cb4:	701a      	strb	r2, [r3, #0]
 8018cb6:	2114      	movs	r1, #20
 8018cb8:	187b      	adds	r3, r7, r1
 8018cba:	781a      	ldrb	r2, [r3, #0]
 8018cbc:	187b      	adds	r3, r7, r1
 8018cbe:	3201      	adds	r2, #1
 8018cc0:	701a      	strb	r2, [r3, #0]
 8018cc2:	2315      	movs	r3, #21
 8018cc4:	18fb      	adds	r3, r7, r3
 8018cc6:	781b      	ldrb	r3, [r3, #0]
 8018cc8:	2b0f      	cmp	r3, #15
 8018cca:	d800      	bhi.n	8018cce <CountNbOfEnabledChannels+0x1b2>
 8018ccc:	e744      	b.n	8018b58 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8018cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd0:	2216      	movs	r2, #22
 8018cd2:	18ba      	adds	r2, r7, r2
 8018cd4:	7812      	ldrb	r2, [r2, #0]
 8018cd6:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8018cd8:	2317      	movs	r3, #23
 8018cda:	18fb      	adds	r3, r7, r3
 8018cdc:	781b      	ldrb	r3, [r3, #0]
}
 8018cde:	0018      	movs	r0, r3
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	b006      	add	sp, #24
 8018ce4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018ce8 <RegionKR920GetPhyParam>:

PhyParam_t RegionKR920GetPhyParam( GetPhyParams_t* getPhy )
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018cf0:	2308      	movs	r3, #8
 8018cf2:	18fb      	adds	r3, r7, r3
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	781b      	ldrb	r3, [r3, #0]
 8018cfc:	2b34      	cmp	r3, #52	; 0x34
 8018cfe:	d900      	bls.n	8018d02 <RegionKR920GetPhyParam+0x1a>
 8018d00:	e0ce      	b.n	8018ea0 <RegionKR920GetPhyParam+0x1b8>
 8018d02:	009a      	lsls	r2, r3, #2
 8018d04:	4b6e      	ldr	r3, [pc, #440]	; (8018ec0 <RegionKR920GetPhyParam+0x1d8>)
 8018d06:	18d3      	adds	r3, r2, r3
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = KR920_RX_MIN_DATARATE;
 8018d0c:	2308      	movs	r3, #8
 8018d0e:	18fb      	adds	r3, r7, r3
 8018d10:	2200      	movs	r2, #0
 8018d12:	601a      	str	r2, [r3, #0]
            break;
 8018d14:	e0c5      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = KR920_TX_MIN_DATARATE;
 8018d16:	2308      	movs	r3, #8
 8018d18:	18fb      	adds	r3, r7, r3
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	601a      	str	r2, [r3, #0]
            break;
 8018d1e:	e0c0      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = KR920_DEFAULT_DATARATE;
 8018d20:	2308      	movs	r3, #8
 8018d22:	18fb      	adds	r3, r7, r3
 8018d24:	2200      	movs	r2, #0
 8018d26:	601a      	str	r2, [r3, #0]
            break;
 8018d28:	e0bb      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, KR920_TX_MIN_DATARATE );
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	785b      	ldrb	r3, [r3, #1]
 8018d2e:	b25b      	sxtb	r3, r3
 8018d30:	2100      	movs	r1, #0
 8018d32:	0018      	movs	r0, r3
 8018d34:	f7ff fe36 	bl	80189a4 <GetNextLowerTxDr>
 8018d38:	0003      	movs	r3, r0
 8018d3a:	001a      	movs	r2, r3
 8018d3c:	2308      	movs	r3, #8
 8018d3e:	18fb      	adds	r3, r7, r3
 8018d40:	601a      	str	r2, [r3, #0]
            break;
 8018d42:	e0ae      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = KR920_MAX_TX_POWER;
 8018d44:	2308      	movs	r3, #8
 8018d46:	18fb      	adds	r3, r7, r3
 8018d48:	2200      	movs	r2, #0
 8018d4a:	601a      	str	r2, [r3, #0]
            break;
 8018d4c:	e0a9      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = KR920_DEFAULT_TX_POWER;
 8018d4e:	2308      	movs	r3, #8
 8018d50:	18fb      	adds	r3, r7, r3
 8018d52:	2200      	movs	r2, #0
 8018d54:	601a      	str	r2, [r3, #0]
            break;
 8018d56:	e0a4      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = KR920_ADR_ACK_LIMIT;
 8018d58:	2308      	movs	r3, #8
 8018d5a:	18fb      	adds	r3, r7, r3
 8018d5c:	2240      	movs	r2, #64	; 0x40
 8018d5e:	601a      	str	r2, [r3, #0]
            break;
 8018d60:	e09f      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = KR920_ADR_ACK_DELAY;
 8018d62:	2308      	movs	r3, #8
 8018d64:	18fb      	adds	r3, r7, r3
 8018d66:	2220      	movs	r2, #32
 8018d68:	601a      	str	r2, [r3, #0]
            break;
 8018d6a:	e09a      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateKR920[getPhy->Datarate];
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	785b      	ldrb	r3, [r3, #1]
 8018d70:	b25b      	sxtb	r3, r3
 8018d72:	001a      	movs	r2, r3
 8018d74:	4b53      	ldr	r3, [pc, #332]	; (8018ec4 <RegionKR920GetPhyParam+0x1dc>)
 8018d76:	5c9b      	ldrb	r3, [r3, r2]
 8018d78:	001a      	movs	r2, r3
 8018d7a:	2308      	movs	r3, #8
 8018d7c:	18fb      	adds	r3, r7, r3
 8018d7e:	601a      	str	r2, [r3, #0]
            break;
 8018d80:	e08f      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterKR920[getPhy->Datarate];
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	785b      	ldrb	r3, [r3, #1]
 8018d86:	b25b      	sxtb	r3, r3
 8018d88:	001a      	movs	r2, r3
 8018d8a:	4b4f      	ldr	r3, [pc, #316]	; (8018ec8 <RegionKR920GetPhyParam+0x1e0>)
 8018d8c:	5c9b      	ldrb	r3, [r3, r2]
 8018d8e:	001a      	movs	r2, r3
 8018d90:	2308      	movs	r3, #8
 8018d92:	18fb      	adds	r3, r7, r3
 8018d94:	601a      	str	r2, [r3, #0]
            break;
 8018d96:	e084      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = KR920_DUTY_CYCLE_ENABLED;
 8018d98:	2308      	movs	r3, #8
 8018d9a:	18fb      	adds	r3, r7, r3
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	601a      	str	r2, [r3, #0]
            break;
 8018da0:	e07f      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = KR920_MAX_RX_WINDOW;
 8018da2:	2308      	movs	r3, #8
 8018da4:	18fb      	adds	r3, r7, r3
 8018da6:	22fa      	movs	r2, #250	; 0xfa
 8018da8:	0112      	lsls	r2, r2, #4
 8018daa:	601a      	str	r2, [r3, #0]
            break;
 8018dac:	e079      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = KR920_RECEIVE_DELAY1;
 8018dae:	2308      	movs	r3, #8
 8018db0:	18fb      	adds	r3, r7, r3
 8018db2:	22fa      	movs	r2, #250	; 0xfa
 8018db4:	0092      	lsls	r2, r2, #2
 8018db6:	601a      	str	r2, [r3, #0]
            break;
 8018db8:	e073      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = KR920_RECEIVE_DELAY2;
 8018dba:	2308      	movs	r3, #8
 8018dbc:	18fb      	adds	r3, r7, r3
 8018dbe:	22fa      	movs	r2, #250	; 0xfa
 8018dc0:	00d2      	lsls	r2, r2, #3
 8018dc2:	601a      	str	r2, [r3, #0]
            break;
 8018dc4:	e06d      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = KR920_JOIN_ACCEPT_DELAY1;
 8018dc6:	2308      	movs	r3, #8
 8018dc8:	18fb      	adds	r3, r7, r3
 8018dca:	4a40      	ldr	r2, [pc, #256]	; (8018ecc <RegionKR920GetPhyParam+0x1e4>)
 8018dcc:	601a      	str	r2, [r3, #0]
            break;
 8018dce:	e068      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = KR920_JOIN_ACCEPT_DELAY2;
 8018dd0:	2308      	movs	r3, #8
 8018dd2:	18fb      	adds	r3, r7, r3
 8018dd4:	4a3e      	ldr	r2, [pc, #248]	; (8018ed0 <RegionKR920GetPhyParam+0x1e8>)
 8018dd6:	601a      	str	r2, [r3, #0]
            break;
 8018dd8:	e063      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = KR920_MAX_FCNT_GAP;
 8018dda:	2308      	movs	r3, #8
 8018ddc:	18fb      	adds	r3, r7, r3
 8018dde:	2280      	movs	r2, #128	; 0x80
 8018de0:	01d2      	lsls	r2, r2, #7
 8018de2:	601a      	str	r2, [r3, #0]
            break;
 8018de4:	e05d      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( KR920_ACKTIMEOUT + randr( -KR920_ACK_TIMEOUT_RND, KR920_ACK_TIMEOUT_RND ) );
 8018de6:	23fa      	movs	r3, #250	; 0xfa
 8018de8:	009b      	lsls	r3, r3, #2
 8018dea:	4a3a      	ldr	r2, [pc, #232]	; (8018ed4 <RegionKR920GetPhyParam+0x1ec>)
 8018dec:	0019      	movs	r1, r3
 8018dee:	0010      	movs	r0, r2
 8018df0:	f003 ff5e 	bl	801ccb0 <randr>
 8018df4:	0003      	movs	r3, r0
 8018df6:	22fa      	movs	r2, #250	; 0xfa
 8018df8:	00d2      	lsls	r2, r2, #3
 8018dfa:	4694      	mov	ip, r2
 8018dfc:	4463      	add	r3, ip
 8018dfe:	001a      	movs	r2, r3
 8018e00:	2308      	movs	r3, #8
 8018e02:	18fb      	adds	r3, r7, r3
 8018e04:	601a      	str	r2, [r3, #0]
            break;
 8018e06:	e04c      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = KR920_DEFAULT_RX1_DR_OFFSET;
 8018e08:	2308      	movs	r3, #8
 8018e0a:	18fb      	adds	r3, r7, r3
 8018e0c:	2200      	movs	r2, #0
 8018e0e:	601a      	str	r2, [r3, #0]
            break;
 8018e10:	e047      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = KR920_RX_WND_2_FREQ;
 8018e12:	2308      	movs	r3, #8
 8018e14:	18fb      	adds	r3, r7, r3
 8018e16:	4a30      	ldr	r2, [pc, #192]	; (8018ed8 <RegionKR920GetPhyParam+0x1f0>)
 8018e18:	601a      	str	r2, [r3, #0]
            break;
 8018e1a:	e042      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = KR920_RX_WND_2_DR;
 8018e1c:	2308      	movs	r3, #8
 8018e1e:	18fb      	adds	r3, r7, r3
 8018e20:	2200      	movs	r2, #0
 8018e22:	601a      	str	r2, [r3, #0]
            break;
 8018e24:	e03d      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8018e26:	2308      	movs	r3, #8
 8018e28:	18fb      	adds	r3, r7, r3
 8018e2a:	4a2c      	ldr	r2, [pc, #176]	; (8018edc <RegionKR920GetPhyParam+0x1f4>)
 8018e2c:	601a      	str	r2, [r3, #0]
            break;
 8018e2e:	e038      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8018e30:	2308      	movs	r3, #8
 8018e32:	18fb      	adds	r3, r7, r3
 8018e34:	4a2a      	ldr	r2, [pc, #168]	; (8018ee0 <RegionKR920GetPhyParam+0x1f8>)
 8018e36:	601a      	str	r2, [r3, #0]
            break;
 8018e38:	e033      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = KR920_MAX_NB_CHANNELS;
 8018e3a:	2308      	movs	r3, #8
 8018e3c:	18fb      	adds	r3, r7, r3
 8018e3e:	2210      	movs	r2, #16
 8018e40:	601a      	str	r2, [r3, #0]
            break;
 8018e42:	e02e      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8018e44:	2308      	movs	r3, #8
 8018e46:	18fb      	adds	r3, r7, r3
 8018e48:	4a26      	ldr	r2, [pc, #152]	; (8018ee4 <RegionKR920GetPhyParam+0x1fc>)
 8018e4a:	601a      	str	r2, [r3, #0]
            break;
 8018e4c:	e029      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8018e4e:	2308      	movs	r3, #8
 8018e50:	18fb      	adds	r3, r7, r3
 8018e52:	2200      	movs	r2, #0
 8018e54:	601a      	str	r2, [r3, #0]
            break;
 8018e56:	e024      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        {
            // We set the higher maximum EIRP as default value.
            // The reason for this is, that the frequency may
            // change during a channel selection for the next uplink.
            // The value has to be recalculated in the TX configuration.
            phyParam.fValue = KR920_DEFAULT_MAX_EIRP_HIGH;
 8018e58:	2308      	movs	r3, #8
 8018e5a:	18fb      	adds	r3, r7, r3
 8018e5c:	4a22      	ldr	r2, [pc, #136]	; (8018ee8 <RegionKR920GetPhyParam+0x200>)
 8018e5e:	601a      	str	r2, [r3, #0]
            break;
 8018e60:	e01f      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = KR920_DEFAULT_ANTENNA_GAIN;
 8018e62:	2308      	movs	r3, #8
 8018e64:	18fb      	adds	r3, r7, r3
 8018e66:	4a21      	ldr	r2, [pc, #132]	; (8018eec <RegionKR920GetPhyParam+0x204>)
 8018e68:	601a      	str	r2, [r3, #0]
            break;
 8018e6a:	e01a      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = KR920_BEACON_CHANNEL_FREQ;
 8018e6c:	2308      	movs	r3, #8
 8018e6e:	18fb      	adds	r3, r7, r3
 8018e70:	4a1f      	ldr	r2, [pc, #124]	; (8018ef0 <RegionKR920GetPhyParam+0x208>)
 8018e72:	601a      	str	r2, [r3, #0]
            break;
 8018e74:	e015      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = KR920_BEACON_SIZE;
 8018e76:	2108      	movs	r1, #8
 8018e78:	187b      	adds	r3, r7, r1
 8018e7a:	2211      	movs	r2, #17
 8018e7c:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = KR920_RFU1_SIZE;
 8018e7e:	187b      	adds	r3, r7, r1
 8018e80:	2202      	movs	r2, #2
 8018e82:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = KR920_RFU2_SIZE;
 8018e84:	187b      	adds	r3, r7, r1
 8018e86:	2200      	movs	r2, #0
 8018e88:	709a      	strb	r2, [r3, #2]
            break;
 8018e8a:	e00a      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = KR920_BEACON_CHANNEL_DR;
 8018e8c:	2308      	movs	r3, #8
 8018e8e:	18fb      	adds	r3, r7, r3
 8018e90:	2203      	movs	r2, #3
 8018e92:	601a      	str	r2, [r3, #0]
            break;
 8018e94:	e005      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = KR920_PING_SLOT_CHANNEL_DR;
 8018e96:	2308      	movs	r3, #8
 8018e98:	18fb      	adds	r3, r7, r3
 8018e9a:	2203      	movs	r2, #3
 8018e9c:	601a      	str	r2, [r3, #0]
            break;
 8018e9e:	e000      	b.n	8018ea2 <RegionKR920GetPhyParam+0x1ba>
        }
        default:
        {
            break;
 8018ea0:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8018ea2:	210c      	movs	r1, #12
 8018ea4:	187b      	adds	r3, r7, r1
 8018ea6:	2208      	movs	r2, #8
 8018ea8:	18ba      	adds	r2, r7, r2
 8018eaa:	6812      	ldr	r2, [r2, #0]
 8018eac:	601a      	str	r2, [r3, #0]
 8018eae:	187b      	adds	r3, r7, r1
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	681a      	ldr	r2, [r3, #0]
 8018eb4:	0013      	movs	r3, r2
}
 8018eb6:	0018      	movs	r0, r3
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	b004      	add	sp, #16
 8018ebc:	bd80      	pop	{r7, pc}
 8018ebe:	46c0      	nop			; (mov r8, r8)
 8018ec0:	08028638 	.word	0x08028638
 8018ec4:	08028628 	.word	0x08028628
 8018ec8:	08028630 	.word	0x08028630
 8018ecc:	00001388 	.word	0x00001388
 8018ed0:	00001770 	.word	0x00001770
 8018ed4:	fffffc18 	.word	0xfffffc18
 8018ed8:	36f313e0 	.word	0x36f313e0
 8018edc:	200017c4 	.word	0x200017c4
 8018ee0:	200017c6 	.word	0x200017c6
 8018ee4:	200016f4 	.word	0x200016f4
 8018ee8:	41600000 	.word	0x41600000
 8018eec:	4009999a 	.word	0x4009999a
 8018ef0:	37056360 	.word	0x37056360

08018ef4 <RegionKR920SetBandTxDone>:

void RegionKR920SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b082      	sub	sp, #8
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	7858      	ldrb	r0, [r3, #1]
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	0019      	movs	r1, r3
 8018f06:	4a0a      	ldr	r2, [pc, #40]	; (8018f30 <RegionKR920SetBandTxDone+0x3c>)
 8018f08:	000b      	movs	r3, r1
 8018f0a:	005b      	lsls	r3, r3, #1
 8018f0c:	185b      	adds	r3, r3, r1
 8018f0e:	009b      	lsls	r3, r3, #2
 8018f10:	18d3      	adds	r3, r2, r3
 8018f12:	3309      	adds	r3, #9
 8018f14:	781b      	ldrb	r3, [r3, #0]
 8018f16:	330c      	adds	r3, #12
 8018f18:	011a      	lsls	r2, r3, #4
 8018f1a:	4b05      	ldr	r3, [pc, #20]	; (8018f30 <RegionKR920SetBandTxDone+0x3c>)
 8018f1c:	18d1      	adds	r1, r2, r3
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	685b      	ldr	r3, [r3, #4]
 8018f22:	001a      	movs	r2, r3
 8018f24:	f7fb fb04 	bl	8014530 <RegionCommonSetBandTxDone>
}
 8018f28:	46c0      	nop			; (mov r8, r8)
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	b002      	add	sp, #8
 8018f2e:	bd80      	pop	{r7, pc}
 8018f30:	200016f4 	.word	0x200016f4

08018f34 <RegionKR920InitDefaults>:

void RegionKR920InitDefaults( InitDefaultsParams_t* params )
{
 8018f34:	b590      	push	{r4, r7, lr}
 8018f36:	b087      	sub	sp, #28
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
    Band_t bands[KR920_MAX_NB_BANDS] =
 8018f3c:	2108      	movs	r1, #8
 8018f3e:	187b      	adds	r3, r7, r1
 8018f40:	2201      	movs	r2, #1
 8018f42:	801a      	strh	r2, [r3, #0]
 8018f44:	187b      	adds	r3, r7, r1
 8018f46:	2200      	movs	r2, #0
 8018f48:	709a      	strb	r2, [r3, #2]
 8018f4a:	187b      	adds	r3, r7, r1
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	605a      	str	r2, [r3, #4]
 8018f50:	187b      	adds	r3, r7, r1
 8018f52:	2200      	movs	r2, #0
 8018f54:	609a      	str	r2, [r3, #8]
 8018f56:	187b      	adds	r3, r7, r1
 8018f58:	2200      	movs	r2, #0
 8018f5a:	60da      	str	r2, [r3, #12]
    {
        KR920_BAND0
    };

    switch( params->Type )
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	791b      	ldrb	r3, [r3, #4]
 8018f60:	2b01      	cmp	r3, #1
 8018f62:	d030      	beq.n	8018fc6 <RegionKR920InitDefaults+0x92>
 8018f64:	2b02      	cmp	r3, #2
 8018f66:	d022      	beq.n	8018fae <RegionKR920InitDefaults+0x7a>
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d000      	beq.n	8018f6e <RegionKR920InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018f6c:	e038      	b.n	8018fe0 <RegionKR920InitDefaults+0xac>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * KR920_MAX_NB_BANDS );
 8018f6e:	2308      	movs	r3, #8
 8018f70:	18f9      	adds	r1, r7, r3
 8018f72:	4b1d      	ldr	r3, [pc, #116]	; (8018fe8 <RegionKR920InitDefaults+0xb4>)
 8018f74:	2210      	movs	r2, #16
 8018f76:	0018      	movs	r0, r3
 8018f78:	f003 feb0 	bl	801ccdc <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) KR920_LC1;
 8018f7c:	4b1b      	ldr	r3, [pc, #108]	; (8018fec <RegionKR920InitDefaults+0xb8>)
 8018f7e:	4a1c      	ldr	r2, [pc, #112]	; (8018ff0 <RegionKR920InitDefaults+0xbc>)
 8018f80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018f82:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) KR920_LC2;
 8018f84:	4b19      	ldr	r3, [pc, #100]	; (8018fec <RegionKR920InitDefaults+0xb8>)
 8018f86:	4a1b      	ldr	r2, [pc, #108]	; (8018ff4 <RegionKR920InitDefaults+0xc0>)
 8018f88:	330c      	adds	r3, #12
 8018f8a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018f8c:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) KR920_LC3;
 8018f8e:	4b17      	ldr	r3, [pc, #92]	; (8018fec <RegionKR920InitDefaults+0xb8>)
 8018f90:	4a19      	ldr	r2, [pc, #100]	; (8018ff8 <RegionKR920InitDefaults+0xc4>)
 8018f92:	3318      	adds	r3, #24
 8018f94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018f96:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018f98:	4b14      	ldr	r3, [pc, #80]	; (8018fec <RegionKR920InitDefaults+0xb8>)
 8018f9a:	22d2      	movs	r2, #210	; 0xd2
 8018f9c:	2107      	movs	r1, #7
 8018f9e:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8018fa0:	4916      	ldr	r1, [pc, #88]	; (8018ffc <RegionKR920InitDefaults+0xc8>)
 8018fa2:	4b17      	ldr	r3, [pc, #92]	; (8019000 <RegionKR920InitDefaults+0xcc>)
 8018fa4:	2201      	movs	r2, #1
 8018fa6:	0018      	movs	r0, r3
 8018fa8:	f7fb fa93 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 8018fac:	e018      	b.n	8018fe0 <RegionKR920InitDefaults+0xac>
            if( params->NvmCtx != 0 )
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d013      	beq.n	8018fde <RegionKR920InitDefaults+0xaa>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	6819      	ldr	r1, [r3, #0]
 8018fba:	4b0c      	ldr	r3, [pc, #48]	; (8018fec <RegionKR920InitDefaults+0xb8>)
 8018fbc:	22d4      	movs	r2, #212	; 0xd4
 8018fbe:	0018      	movs	r0, r3
 8018fc0:	f003 fe8c 	bl	801ccdc <memcpy1>
            break;
 8018fc4:	e00b      	b.n	8018fde <RegionKR920InitDefaults+0xaa>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8018fc6:	4b09      	ldr	r3, [pc, #36]	; (8018fec <RegionKR920InitDefaults+0xb8>)
 8018fc8:	22d0      	movs	r2, #208	; 0xd0
 8018fca:	5a9a      	ldrh	r2, [r3, r2]
 8018fcc:	4b07      	ldr	r3, [pc, #28]	; (8018fec <RegionKR920InitDefaults+0xb8>)
 8018fce:	21d2      	movs	r1, #210	; 0xd2
 8018fd0:	5a5b      	ldrh	r3, [r3, r1]
 8018fd2:	4313      	orrs	r3, r2
 8018fd4:	b299      	uxth	r1, r3
 8018fd6:	4b05      	ldr	r3, [pc, #20]	; (8018fec <RegionKR920InitDefaults+0xb8>)
 8018fd8:	22d0      	movs	r2, #208	; 0xd0
 8018fda:	5299      	strh	r1, [r3, r2]
            break;
 8018fdc:	e000      	b.n	8018fe0 <RegionKR920InitDefaults+0xac>
            break;
 8018fde:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018fe0:	46c0      	nop			; (mov r8, r8)
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	b007      	add	sp, #28
 8018fe6:	bd90      	pop	{r4, r7, pc}
 8018fe8:	200017b4 	.word	0x200017b4
 8018fec:	200016f4 	.word	0x200016f4
 8018ff0:	08026bb4 	.word	0x08026bb4
 8018ff4:	08026bc0 	.word	0x08026bc0
 8018ff8:	08026bcc 	.word	0x08026bcc
 8018ffc:	200017c6 	.word	0x200017c6
 8019000:	200017c4 	.word	0x200017c4

08019004 <RegionKR920ApplyCFList>:
            return false;
    }
}

void RegionKR920ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019004:	b590      	push	{r4, r7, lr}
 8019006:	b08b      	sub	sp, #44	; 0x2c
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801900c:	2318      	movs	r3, #24
 801900e:	18fb      	adds	r3, r7, r3
 8019010:	2250      	movs	r2, #80	; 0x50
 8019012:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	791b      	ldrb	r3, [r3, #4]
 8019018:	2b10      	cmp	r3, #16
 801901a:	d000      	beq.n	801901e <RegionKR920ApplyCFList+0x1a>
 801901c:	e07d      	b.n	801911a <RegionKR920ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	330f      	adds	r3, #15
 8019024:	781b      	ldrb	r3, [r3, #0]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d000      	beq.n	801902c <RegionKR920ApplyCFList+0x28>
 801902a:	e078      	b.n	801911e <RegionKR920ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801902c:	2327      	movs	r3, #39	; 0x27
 801902e:	18fb      	adds	r3, r7, r3
 8019030:	2200      	movs	r2, #0
 8019032:	701a      	strb	r2, [r3, #0]
 8019034:	2326      	movs	r3, #38	; 0x26
 8019036:	18fb      	adds	r3, r7, r3
 8019038:	2203      	movs	r2, #3
 801903a:	701a      	strb	r2, [r3, #0]
 801903c:	e067      	b.n	801910e <RegionKR920ApplyCFList+0x10a>
    {
        if( chanIdx < ( KR920_NUMB_CHANNELS_CF_LIST + KR920_NUMB_DEFAULT_CHANNELS ) )
 801903e:	2326      	movs	r3, #38	; 0x26
 8019040:	18fb      	adds	r3, r7, r3
 8019042:	781b      	ldrb	r3, [r3, #0]
 8019044:	2b07      	cmp	r3, #7
 8019046:	d82e      	bhi.n	80190a6 <RegionKR920ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681a      	ldr	r2, [r3, #0]
 801904c:	2427      	movs	r4, #39	; 0x27
 801904e:	193b      	adds	r3, r7, r4
 8019050:	781b      	ldrb	r3, [r3, #0]
 8019052:	18d3      	adds	r3, r2, r3
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	001a      	movs	r2, r3
 8019058:	2018      	movs	r0, #24
 801905a:	183b      	adds	r3, r7, r0
 801905c:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801905e:	183b      	adds	r3, r7, r0
 8019060:	681a      	ldr	r2, [r3, #0]
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	6819      	ldr	r1, [r3, #0]
 8019066:	193b      	adds	r3, r7, r4
 8019068:	781b      	ldrb	r3, [r3, #0]
 801906a:	3301      	adds	r3, #1
 801906c:	18cb      	adds	r3, r1, r3
 801906e:	781b      	ldrb	r3, [r3, #0]
 8019070:	021b      	lsls	r3, r3, #8
 8019072:	431a      	orrs	r2, r3
 8019074:	183b      	adds	r3, r7, r0
 8019076:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8019078:	183b      	adds	r3, r7, r0
 801907a:	681a      	ldr	r2, [r3, #0]
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6819      	ldr	r1, [r3, #0]
 8019080:	193b      	adds	r3, r7, r4
 8019082:	781b      	ldrb	r3, [r3, #0]
 8019084:	3302      	adds	r3, #2
 8019086:	18cb      	adds	r3, r1, r3
 8019088:	781b      	ldrb	r3, [r3, #0]
 801908a:	041b      	lsls	r3, r3, #16
 801908c:	431a      	orrs	r2, r3
 801908e:	183b      	adds	r3, r7, r0
 8019090:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8019092:	183b      	adds	r3, r7, r0
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	2264      	movs	r2, #100	; 0x64
 8019098:	435a      	muls	r2, r3
 801909a:	183b      	adds	r3, r7, r0
 801909c:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801909e:	183b      	adds	r3, r7, r0
 80190a0:	2200      	movs	r2, #0
 80190a2:	605a      	str	r2, [r3, #4]
 80190a4:	e009      	b.n	80190ba <RegionKR920ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80190a6:	2118      	movs	r1, #24
 80190a8:	187b      	adds	r3, r7, r1
 80190aa:	2200      	movs	r2, #0
 80190ac:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80190ae:	187b      	adds	r3, r7, r1
 80190b0:	2200      	movs	r2, #0
 80190b2:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 80190b4:	187b      	adds	r3, r7, r1
 80190b6:	2200      	movs	r2, #0
 80190b8:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 80190ba:	2318      	movs	r3, #24
 80190bc:	18fb      	adds	r3, r7, r3
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d00e      	beq.n	80190e2 <RegionKR920ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 80190c4:	2110      	movs	r1, #16
 80190c6:	187b      	adds	r3, r7, r1
 80190c8:	2218      	movs	r2, #24
 80190ca:	18ba      	adds	r2, r7, r2
 80190cc:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 80190ce:	187b      	adds	r3, r7, r1
 80190d0:	2226      	movs	r2, #38	; 0x26
 80190d2:	18ba      	adds	r2, r7, r2
 80190d4:	7812      	ldrb	r2, [r2, #0]
 80190d6:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionKR920ChannelAdd( &channelAdd );
 80190d8:	187b      	adds	r3, r7, r1
 80190da:	0018      	movs	r0, r3
 80190dc:	f000 fd3a 	bl	8019b54 <RegionKR920ChannelAdd>
 80190e0:	e009      	b.n	80190f6 <RegionKR920ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80190e2:	210c      	movs	r1, #12
 80190e4:	187b      	adds	r3, r7, r1
 80190e6:	2226      	movs	r2, #38	; 0x26
 80190e8:	18ba      	adds	r2, r7, r2
 80190ea:	7812      	ldrb	r2, [r2, #0]
 80190ec:	701a      	strb	r2, [r3, #0]

            RegionKR920ChannelsRemove( &channelRemove );
 80190ee:	187b      	adds	r3, r7, r1
 80190f0:	0018      	movs	r0, r3
 80190f2:	f000 fde9 	bl	8019cc8 <RegionKR920ChannelsRemove>
    for( uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80190f6:	2227      	movs	r2, #39	; 0x27
 80190f8:	18bb      	adds	r3, r7, r2
 80190fa:	18ba      	adds	r2, r7, r2
 80190fc:	7812      	ldrb	r2, [r2, #0]
 80190fe:	3203      	adds	r2, #3
 8019100:	701a      	strb	r2, [r3, #0]
 8019102:	2126      	movs	r1, #38	; 0x26
 8019104:	187b      	adds	r3, r7, r1
 8019106:	781a      	ldrb	r2, [r3, #0]
 8019108:	187b      	adds	r3, r7, r1
 801910a:	3201      	adds	r2, #1
 801910c:	701a      	strb	r2, [r3, #0]
 801910e:	2326      	movs	r3, #38	; 0x26
 8019110:	18fb      	adds	r3, r7, r3
 8019112:	781b      	ldrb	r3, [r3, #0]
 8019114:	2b0f      	cmp	r3, #15
 8019116:	d992      	bls.n	801903e <RegionKR920ApplyCFList+0x3a>
 8019118:	e002      	b.n	8019120 <RegionKR920ApplyCFList+0x11c>
        return;
 801911a:	46c0      	nop			; (mov r8, r8)
 801911c:	e000      	b.n	8019120 <RegionKR920ApplyCFList+0x11c>
        return;
 801911e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8019120:	46bd      	mov	sp, r7
 8019122:	b00b      	add	sp, #44	; 0x2c
 8019124:	bd90      	pop	{r4, r7, pc}
	...

08019128 <RegionKR920ComputeRxWindowParameters>:
    }
    return true;
}

void RegionKR920ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801912a:	b08b      	sub	sp, #44	; 0x2c
 801912c:	af04      	add	r7, sp, #16
 801912e:	60ba      	str	r2, [r7, #8]
 8019130:	607b      	str	r3, [r7, #4]
 8019132:	250f      	movs	r5, #15
 8019134:	197b      	adds	r3, r7, r5
 8019136:	1c02      	adds	r2, r0, #0
 8019138:	701a      	strb	r2, [r3, #0]
 801913a:	230e      	movs	r3, #14
 801913c:	18fb      	adds	r3, r7, r3
 801913e:	1c0a      	adds	r2, r1, #0
 8019140:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8019142:	2300      	movs	r3, #0
 8019144:	2400      	movs	r4, #0
 8019146:	613b      	str	r3, [r7, #16]
 8019148:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, KR920_RX_MAX_DATARATE );
 801914a:	197b      	adds	r3, r7, r5
 801914c:	781b      	ldrb	r3, [r3, #0]
 801914e:	b25a      	sxtb	r2, r3
 8019150:	2a05      	cmp	r2, #5
 8019152:	dd00      	ble.n	8019156 <RegionKR920ComputeRxWindowParameters+0x2e>
 8019154:	2305      	movs	r3, #5
 8019156:	b25a      	sxtb	r2, r3
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	785b      	ldrb	r3, [r3, #1]
 8019160:	b25b      	sxtb	r3, r3
 8019162:	0018      	movs	r0, r3
 8019164:	f7ff fc5a 	bl	8018a1c <GetBandwidth>
 8019168:	0003      	movs	r3, r0
 801916a:	b2da      	uxtb	r2, r3
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	709a      	strb	r2, [r3, #2]

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesKR920[rxConfigParams->Datarate], BandwidthsKR920[rxConfigParams->Datarate] );
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	785b      	ldrb	r3, [r3, #1]
 8019174:	b25b      	sxtb	r3, r3
 8019176:	001a      	movs	r2, r3
 8019178:	4b14      	ldr	r3, [pc, #80]	; (80191cc <RegionKR920ComputeRxWindowParameters+0xa4>)
 801917a:	5c98      	ldrb	r0, [r3, r2]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	785b      	ldrb	r3, [r3, #1]
 8019180:	b25b      	sxtb	r3, r3
 8019182:	001a      	movs	r2, r3
 8019184:	4b12      	ldr	r3, [pc, #72]	; (80191d0 <RegionKR920ComputeRxWindowParameters+0xa8>)
 8019186:	0092      	lsls	r2, r2, #2
 8019188:	58d3      	ldr	r3, [r2, r3]
 801918a:	0019      	movs	r1, r3
 801918c:	f7fb fbdc 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 8019190:	0003      	movs	r3, r0
 8019192:	000c      	movs	r4, r1
 8019194:	613b      	str	r3, [r7, #16]
 8019196:	617c      	str	r4, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019198:	4b0e      	ldr	r3, [pc, #56]	; (80191d4 <RegionKR920ComputeRxWindowParameters+0xac>)
 801919a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801919c:	4798      	blx	r3
 801919e:	0006      	movs	r6, r0
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	3308      	adds	r3, #8
 80191a4:	687a      	ldr	r2, [r7, #4]
 80191a6:	320c      	adds	r2, #12
 80191a8:	68bd      	ldr	r5, [r7, #8]
 80191aa:	210e      	movs	r1, #14
 80191ac:	1879      	adds	r1, r7, r1
 80191ae:	780c      	ldrb	r4, [r1, #0]
 80191b0:	6938      	ldr	r0, [r7, #16]
 80191b2:	6979      	ldr	r1, [r7, #20]
 80191b4:	9202      	str	r2, [sp, #8]
 80191b6:	9301      	str	r3, [sp, #4]
 80191b8:	9600      	str	r6, [sp, #0]
 80191ba:	002b      	movs	r3, r5
 80191bc:	0022      	movs	r2, r4
 80191be:	f7fb fc0b 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 80191c2:	46c0      	nop			; (mov r8, r8)
 80191c4:	46bd      	mov	sp, r7
 80191c6:	b007      	add	sp, #28
 80191c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191ca:	46c0      	nop			; (mov r8, r8)
 80191cc:	08028608 	.word	0x08028608
 80191d0:	08028610 	.word	0x08028610
 80191d4:	08028964 	.word	0x08028964

080191d8 <RegionKR920RxConfig>:

bool RegionKR920RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80191d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191da:	b08f      	sub	sp, #60	; 0x3c
 80191dc:	af0a      	add	r7, sp, #40	; 0x28
 80191de:	6078      	str	r0, [r7, #4]
 80191e0:	6039      	str	r1, [r7, #0]
    int8_t dr = rxConfig->Datarate;
 80191e2:	230b      	movs	r3, #11
 80191e4:	18fb      	adds	r3, r7, r3
 80191e6:	687a      	ldr	r2, [r7, #4]
 80191e8:	7852      	ldrb	r2, [r2, #1]
 80191ea:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80191ec:	230a      	movs	r3, #10
 80191ee:	18fb      	adds	r3, r7, r3
 80191f0:	2200      	movs	r2, #0
 80191f2:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80191f4:	2309      	movs	r3, #9
 80191f6:	18fb      	adds	r3, r7, r3
 80191f8:	2200      	movs	r2, #0
 80191fa:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	685b      	ldr	r3, [r3, #4]
 8019200:	60fb      	str	r3, [r7, #12]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019202:	4b3d      	ldr	r3, [pc, #244]	; (80192f8 <RegionKR920RxConfig+0x120>)
 8019204:	68db      	ldr	r3, [r3, #12]
 8019206:	4798      	blx	r3
 8019208:	1e03      	subs	r3, r0, #0
 801920a:	d001      	beq.n	8019210 <RegionKR920RxConfig+0x38>
    {
        return false;
 801920c:	2300      	movs	r3, #0
 801920e:	e06e      	b.n	80192ee <RegionKR920RxConfig+0x116>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	7cdb      	ldrb	r3, [r3, #19]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d122      	bne.n	801925e <RegionKR920RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	0019      	movs	r1, r3
 801921e:	4a37      	ldr	r2, [pc, #220]	; (80192fc <RegionKR920RxConfig+0x124>)
 8019220:	000b      	movs	r3, r1
 8019222:	005b      	lsls	r3, r3, #1
 8019224:	185b      	adds	r3, r3, r1
 8019226:	009b      	lsls	r3, r3, #2
 8019228:	589b      	ldr	r3, [r3, r2]
 801922a:	60fb      	str	r3, [r7, #12]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	781b      	ldrb	r3, [r3, #0]
 8019230:	0019      	movs	r1, r3
 8019232:	4a32      	ldr	r2, [pc, #200]	; (80192fc <RegionKR920RxConfig+0x124>)
 8019234:	000b      	movs	r3, r1
 8019236:	005b      	lsls	r3, r3, #1
 8019238:	185b      	adds	r3, r3, r1
 801923a:	009b      	lsls	r3, r3, #2
 801923c:	18d3      	adds	r3, r2, r3
 801923e:	3304      	adds	r3, #4
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d00b      	beq.n	801925e <RegionKR920RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	0019      	movs	r1, r3
 801924c:	4a2b      	ldr	r2, [pc, #172]	; (80192fc <RegionKR920RxConfig+0x124>)
 801924e:	000b      	movs	r3, r1
 8019250:	005b      	lsls	r3, r3, #1
 8019252:	185b      	adds	r3, r3, r1
 8019254:	009b      	lsls	r3, r3, #2
 8019256:	18d3      	adds	r3, r2, r3
 8019258:	3304      	adds	r3, #4
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	60fb      	str	r3, [r7, #12]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesKR920[dr];
 801925e:	250b      	movs	r5, #11
 8019260:	197b      	adds	r3, r7, r5
 8019262:	781b      	ldrb	r3, [r3, #0]
 8019264:	b25b      	sxtb	r3, r3
 8019266:	4a26      	ldr	r2, [pc, #152]	; (8019300 <RegionKR920RxConfig+0x128>)
 8019268:	5cd2      	ldrb	r2, [r2, r3]
 801926a:	2609      	movs	r6, #9
 801926c:	19bb      	adds	r3, r7, r6
 801926e:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8019270:	4b21      	ldr	r3, [pc, #132]	; (80192f8 <RegionKR920RxConfig+0x120>)
 8019272:	695b      	ldr	r3, [r3, #20]
 8019274:	68fa      	ldr	r2, [r7, #12]
 8019276:	0010      	movs	r0, r2
 8019278:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801927a:	4b1f      	ldr	r3, [pc, #124]	; (80192f8 <RegionKR920RxConfig+0x120>)
 801927c:	6a1c      	ldr	r4, [r3, #32]
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	789b      	ldrb	r3, [r3, #2]
 8019282:	0018      	movs	r0, r3
 8019284:	19bb      	adds	r3, r7, r6
 8019286:	2100      	movs	r1, #0
 8019288:	5659      	ldrsb	r1, [r3, r1]
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	689b      	ldr	r3, [r3, #8]
 801928e:	b29b      	uxth	r3, r3
 8019290:	687a      	ldr	r2, [r7, #4]
 8019292:	7c92      	ldrb	r2, [r2, #18]
 8019294:	9209      	str	r2, [sp, #36]	; 0x24
 8019296:	2201      	movs	r2, #1
 8019298:	9208      	str	r2, [sp, #32]
 801929a:	2200      	movs	r2, #0
 801929c:	9207      	str	r2, [sp, #28]
 801929e:	2200      	movs	r2, #0
 80192a0:	9206      	str	r2, [sp, #24]
 80192a2:	2200      	movs	r2, #0
 80192a4:	9205      	str	r2, [sp, #20]
 80192a6:	2200      	movs	r2, #0
 80192a8:	9204      	str	r2, [sp, #16]
 80192aa:	2200      	movs	r2, #0
 80192ac:	9203      	str	r2, [sp, #12]
 80192ae:	9302      	str	r3, [sp, #8]
 80192b0:	2308      	movs	r3, #8
 80192b2:	9301      	str	r3, [sp, #4]
 80192b4:	2300      	movs	r3, #0
 80192b6:	9300      	str	r3, [sp, #0]
 80192b8:	2301      	movs	r3, #1
 80192ba:	000a      	movs	r2, r1
 80192bc:	0001      	movs	r1, r0
 80192be:	2001      	movs	r0, #1
 80192c0:	47a0      	blx	r4
    maxPayload = MaxPayloadOfDatarateKR920[dr];
 80192c2:	197b      	adds	r3, r7, r5
 80192c4:	2200      	movs	r2, #0
 80192c6:	569a      	ldrsb	r2, [r3, r2]
 80192c8:	200a      	movs	r0, #10
 80192ca:	183b      	adds	r3, r7, r0
 80192cc:	490d      	ldr	r1, [pc, #52]	; (8019304 <RegionKR920RxConfig+0x12c>)
 80192ce:	5c8a      	ldrb	r2, [r1, r2]
 80192d0:	701a      	strb	r2, [r3, #0]
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 80192d2:	4b09      	ldr	r3, [pc, #36]	; (80192f8 <RegionKR920RxConfig+0x120>)
 80192d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192d6:	183a      	adds	r2, r7, r0
 80192d8:	7812      	ldrb	r2, [r2, #0]
 80192da:	320d      	adds	r2, #13
 80192dc:	b2d2      	uxtb	r2, r2
 80192de:	0011      	movs	r1, r2
 80192e0:	2001      	movs	r0, #1
 80192e2:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 80192e4:	683b      	ldr	r3, [r7, #0]
 80192e6:	197a      	adds	r2, r7, r5
 80192e8:	7812      	ldrb	r2, [r2, #0]
 80192ea:	701a      	strb	r2, [r3, #0]
    return true;
 80192ec:	2301      	movs	r3, #1
}
 80192ee:	0018      	movs	r0, r3
 80192f0:	46bd      	mov	sp, r7
 80192f2:	b005      	add	sp, #20
 80192f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192f6:	46c0      	nop			; (mov r8, r8)
 80192f8:	08028964 	.word	0x08028964
 80192fc:	200016f4 	.word	0x200016f4
 8019300:	08028608 	.word	0x08028608
 8019304:	08028628 	.word	0x08028628

08019308 <RegionKR920TxConfig>:

bool RegionKR920TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801930a:	b093      	sub	sp, #76	; 0x4c
 801930c:	af0a      	add	r7, sp, #40	; 0x28
 801930e:	60f8      	str	r0, [r7, #12]
 8019310:	60b9      	str	r1, [r7, #8]
 8019312:	607a      	str	r2, [r7, #4]
    int8_t phyDr = DataratesKR920[txConfig->Datarate];
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	785b      	ldrb	r3, [r3, #1]
 8019318:	b25b      	sxtb	r3, r3
 801931a:	001a      	movs	r2, r3
 801931c:	4b52      	ldr	r3, [pc, #328]	; (8019468 <RegionKR920TxConfig+0x160>)
 801931e:	5c9a      	ldrb	r2, [r3, r2]
 8019320:	231f      	movs	r3, #31
 8019322:	18fb      	adds	r3, r7, r3
 8019324:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	2002      	movs	r0, #2
 801932a:	5618      	ldrsb	r0, [r3, r0]
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	781b      	ldrb	r3, [r3, #0]
 8019330:	0019      	movs	r1, r3
 8019332:	4a4e      	ldr	r2, [pc, #312]	; (801946c <RegionKR920TxConfig+0x164>)
 8019334:	000b      	movs	r3, r1
 8019336:	005b      	lsls	r3, r3, #1
 8019338:	185b      	adds	r3, r3, r1
 801933a:	009b      	lsls	r3, r3, #2
 801933c:	18d3      	adds	r3, r2, r3
 801933e:	3309      	adds	r3, #9
 8019340:	781b      	ldrb	r3, [r3, #0]
 8019342:	4a4a      	ldr	r2, [pc, #296]	; (801946c <RegionKR920TxConfig+0x164>)
 8019344:	330c      	adds	r3, #12
 8019346:	011b      	lsls	r3, r3, #4
 8019348:	18d3      	adds	r3, r2, r3
 801934a:	3302      	adds	r3, #2
 801934c:	2100      	movs	r1, #0
 801934e:	5659      	ldrsb	r1, [r3, r1]
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	2201      	movs	r2, #1
 8019354:	569a      	ldrsb	r2, [r3, r2]
 8019356:	231e      	movs	r3, #30
 8019358:	18fc      	adds	r4, r7, r3
 801935a:	4b45      	ldr	r3, [pc, #276]	; (8019470 <RegionKR920TxConfig+0x168>)
 801935c:	f7ff fb7c 	bl	8018a58 <LimitTxPower>
 8019360:	0003      	movs	r3, r0
 8019362:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	785b      	ldrb	r3, [r3, #1]
 8019368:	b25b      	sxtb	r3, r3
 801936a:	0018      	movs	r0, r3
 801936c:	f7ff fb56 	bl	8018a1c <GetBandwidth>
 8019370:	0003      	movs	r3, r0
 8019372:	61bb      	str	r3, [r7, #24]
    float maxEIRP = GetMaxEIRP( NvmCtx.Channels[txConfig->Channel].Frequency );
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	781b      	ldrb	r3, [r3, #0]
 8019378:	0019      	movs	r1, r3
 801937a:	4a3c      	ldr	r2, [pc, #240]	; (801946c <RegionKR920TxConfig+0x164>)
 801937c:	000b      	movs	r3, r1
 801937e:	005b      	lsls	r3, r3, #1
 8019380:	185b      	adds	r3, r3, r1
 8019382:	009b      	lsls	r3, r3, #2
 8019384:	589b      	ldr	r3, [r3, r2]
 8019386:	0018      	movs	r0, r3
 8019388:	f7ff fb36 	bl	80189f8 <GetMaxEIRP>
 801938c:	0003      	movs	r3, r0
 801938e:	0018      	movs	r0, r3
 8019390:	f7e7 fca4 	bl	8000cdc <__aeabi_i2f>
 8019394:	1c03      	adds	r3, r0, #0
 8019396:	617b      	str	r3, [r7, #20]
    int8_t phyTxPower = 0;
 8019398:	2313      	movs	r3, #19
 801939a:	18fb      	adds	r3, r7, r3
 801939c:	2200      	movs	r2, #0
 801939e:	701a      	strb	r2, [r3, #0]

    // Take the minimum between the maxEIRP and txConfig->MaxEirp.
    // The value of txConfig->MaxEirp could have changed during runtime, e.g. due to a MAC command.
    maxEIRP = MIN( txConfig->MaxEirp, maxEIRP );
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	685b      	ldr	r3, [r3, #4]
 80193a4:	1c19      	adds	r1, r3, #0
 80193a6:	6978      	ldr	r0, [r7, #20]
 80193a8:	f7e7 f890 	bl	80004cc <__aeabi_fcmpgt>
 80193ac:	1e03      	subs	r3, r0, #0
 80193ae:	d002      	beq.n	80193b6 <RegionKR920TxConfig+0xae>
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	e000      	b.n	80193b8 <RegionKR920TxConfig+0xb0>
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	617b      	str	r3, [r7, #20]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, maxEIRP, txConfig->AntennaGain );
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	689a      	ldr	r2, [r3, #8]
 80193be:	2513      	movs	r5, #19
 80193c0:	197c      	adds	r4, r7, r5
 80193c2:	6979      	ldr	r1, [r7, #20]
 80193c4:	261e      	movs	r6, #30
 80193c6:	19bb      	adds	r3, r7, r6
 80193c8:	781b      	ldrb	r3, [r3, #0]
 80193ca:	b25b      	sxtb	r3, r3
 80193cc:	0018      	movs	r0, r3
 80193ce:	f7fb fb87 	bl	8014ae0 <RegionCommonComputeTxPower>
 80193d2:	0003      	movs	r3, r0
 80193d4:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80193d6:	4b27      	ldr	r3, [pc, #156]	; (8019474 <RegionKR920TxConfig+0x16c>)
 80193d8:	695a      	ldr	r2, [r3, #20]
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	781b      	ldrb	r3, [r3, #0]
 80193de:	0018      	movs	r0, r3
 80193e0:	4922      	ldr	r1, [pc, #136]	; (801946c <RegionKR920TxConfig+0x164>)
 80193e2:	0003      	movs	r3, r0
 80193e4:	005b      	lsls	r3, r3, #1
 80193e6:	181b      	adds	r3, r3, r0
 80193e8:	009b      	lsls	r3, r3, #2
 80193ea:	585b      	ldr	r3, [r3, r1]
 80193ec:	0018      	movs	r0, r3
 80193ee:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 80193f0:	4b20      	ldr	r3, [pc, #128]	; (8019474 <RegionKR920TxConfig+0x16c>)
 80193f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80193f4:	231f      	movs	r3, #31
 80193f6:	18fb      	adds	r3, r7, r3
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	b25b      	sxtb	r3, r3
 80193fc:	69b8      	ldr	r0, [r7, #24]
 80193fe:	197a      	adds	r2, r7, r5
 8019400:	2100      	movs	r1, #0
 8019402:	5651      	ldrsb	r1, [r2, r1]
 8019404:	4a1c      	ldr	r2, [pc, #112]	; (8019478 <RegionKR920TxConfig+0x170>)
 8019406:	9208      	str	r2, [sp, #32]
 8019408:	2200      	movs	r2, #0
 801940a:	9207      	str	r2, [sp, #28]
 801940c:	2200      	movs	r2, #0
 801940e:	9206      	str	r2, [sp, #24]
 8019410:	2200      	movs	r2, #0
 8019412:	9205      	str	r2, [sp, #20]
 8019414:	2201      	movs	r2, #1
 8019416:	9204      	str	r2, [sp, #16]
 8019418:	2200      	movs	r2, #0
 801941a:	9203      	str	r2, [sp, #12]
 801941c:	2208      	movs	r2, #8
 801941e:	9202      	str	r2, [sp, #8]
 8019420:	2201      	movs	r2, #1
 8019422:	9201      	str	r2, [sp, #4]
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	0003      	movs	r3, r0
 8019428:	2200      	movs	r2, #0
 801942a:	2001      	movs	r0, #1
 801942c:	47a0      	blx	r4
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801942e:	4b11      	ldr	r3, [pc, #68]	; (8019474 <RegionKR920TxConfig+0x16c>)
 8019430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019432:	68fa      	ldr	r2, [r7, #12]
 8019434:	8992      	ldrh	r2, [r2, #12]
 8019436:	b2d2      	uxtb	r2, r2
 8019438:	0011      	movs	r1, r2
 801943a:	2001      	movs	r0, #1
 801943c:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 801943e:	4b0d      	ldr	r3, [pc, #52]	; (8019474 <RegionKR920TxConfig+0x16c>)
 8019440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019442:	68fa      	ldr	r2, [r7, #12]
 8019444:	8992      	ldrh	r2, [r2, #12]
 8019446:	b2d2      	uxtb	r2, r2
 8019448:	0011      	movs	r1, r2
 801944a:	2001      	movs	r0, #1
 801944c:	4798      	blx	r3
 801944e:	0002      	movs	r2, r0
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8019454:	68bb      	ldr	r3, [r7, #8]
 8019456:	19ba      	adds	r2, r7, r6
 8019458:	7812      	ldrb	r2, [r2, #0]
 801945a:	701a      	strb	r2, [r3, #0]
    return true;
 801945c:	2301      	movs	r3, #1
}
 801945e:	0018      	movs	r0, r3
 8019460:	46bd      	mov	sp, r7
 8019462:	b009      	add	sp, #36	; 0x24
 8019464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019466:	46c0      	nop			; (mov r8, r8)
 8019468:	08028608 	.word	0x08028608
 801946c:	200016f4 	.word	0x200016f4
 8019470:	200017c4 	.word	0x200017c4
 8019474:	08028964 	.word	0x08028964
 8019478:	00000bb8 	.word	0x00000bb8

0801947c <RegionKR920LinkAdrReq>:

uint8_t RegionKR920LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801947c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801947e:	b093      	sub	sp, #76	; 0x4c
 8019480:	af00      	add	r7, sp, #0
 8019482:	60f8      	str	r0, [r7, #12]
 8019484:	60b9      	str	r1, [r7, #8]
 8019486:	607a      	str	r2, [r7, #4]
 8019488:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801948a:	2347      	movs	r3, #71	; 0x47
 801948c:	18fb      	adds	r3, r7, r3
 801948e:	2207      	movs	r2, #7
 8019490:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8019492:	2344      	movs	r3, #68	; 0x44
 8019494:	18fb      	adds	r3, r7, r3
 8019496:	2200      	movs	r2, #0
 8019498:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801949a:	2346      	movs	r3, #70	; 0x46
 801949c:	18fb      	adds	r3, r7, r3
 801949e:	2200      	movs	r2, #0
 80194a0:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 80194a2:	233a      	movs	r3, #58	; 0x3a
 80194a4:	18fb      	adds	r3, r7, r3
 80194a6:	2200      	movs	r2, #0
 80194a8:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80194aa:	e09e      	b.n	80195ea <RegionKR920LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	685a      	ldr	r2, [r3, #4]
 80194b0:	2346      	movs	r3, #70	; 0x46
 80194b2:	18fb      	adds	r3, r7, r3
 80194b4:	781b      	ldrb	r3, [r3, #0]
 80194b6:	18d3      	adds	r3, r2, r3
 80194b8:	2544      	movs	r5, #68	; 0x44
 80194ba:	197c      	adds	r4, r7, r5
 80194bc:	223c      	movs	r2, #60	; 0x3c
 80194be:	18ba      	adds	r2, r7, r2
 80194c0:	0011      	movs	r1, r2
 80194c2:	0018      	movs	r0, r3
 80194c4:	f7fb f944 	bl	8014750 <RegionCommonParseLinkAdrReq>
 80194c8:	0003      	movs	r3, r0
 80194ca:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 80194cc:	197b      	adds	r3, r7, r5
 80194ce:	781b      	ldrb	r3, [r3, #0]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d100      	bne.n	80194d6 <RegionKR920LinkAdrReq+0x5a>
 80194d4:	e092      	b.n	80195fc <RegionKR920LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80194d6:	2246      	movs	r2, #70	; 0x46
 80194d8:	18bb      	adds	r3, r7, r2
 80194da:	18b9      	adds	r1, r7, r2
 80194dc:	2244      	movs	r2, #68	; 0x44
 80194de:	18ba      	adds	r2, r7, r2
 80194e0:	7809      	ldrb	r1, [r1, #0]
 80194e2:	7812      	ldrb	r2, [r2, #0]
 80194e4:	188a      	adds	r2, r1, r2
 80194e6:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80194e8:	2347      	movs	r3, #71	; 0x47
 80194ea:	18fb      	adds	r3, r7, r3
 80194ec:	2207      	movs	r2, #7
 80194ee:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80194f0:	213c      	movs	r1, #60	; 0x3c
 80194f2:	187b      	adds	r3, r7, r1
 80194f4:	889a      	ldrh	r2, [r3, #4]
 80194f6:	233a      	movs	r3, #58	; 0x3a
 80194f8:	18fb      	adds	r3, r7, r3
 80194fa:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80194fc:	187b      	adds	r3, r7, r1
 80194fe:	78db      	ldrb	r3, [r3, #3]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d10c      	bne.n	801951e <RegionKR920LinkAdrReq+0xa2>
 8019504:	233a      	movs	r3, #58	; 0x3a
 8019506:	18fb      	adds	r3, r7, r3
 8019508:	881b      	ldrh	r3, [r3, #0]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d107      	bne.n	801951e <RegionKR920LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 801950e:	2247      	movs	r2, #71	; 0x47
 8019510:	18bb      	adds	r3, r7, r2
 8019512:	18ba      	adds	r2, r7, r2
 8019514:	7812      	ldrb	r2, [r2, #0]
 8019516:	2101      	movs	r1, #1
 8019518:	438a      	bics	r2, r1
 801951a:	701a      	strb	r2, [r3, #0]
 801951c:	e065      	b.n	80195ea <RegionKR920LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801951e:	233c      	movs	r3, #60	; 0x3c
 8019520:	18fb      	adds	r3, r7, r3
 8019522:	78db      	ldrb	r3, [r3, #3]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d004      	beq.n	8019532 <RegionKR920LinkAdrReq+0xb6>
 8019528:	233c      	movs	r3, #60	; 0x3c
 801952a:	18fb      	adds	r3, r7, r3
 801952c:	78db      	ldrb	r3, [r3, #3]
 801952e:	2b05      	cmp	r3, #5
 8019530:	d904      	bls.n	801953c <RegionKR920LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019532:	233c      	movs	r3, #60	; 0x3c
 8019534:	18fb      	adds	r3, r7, r3
 8019536:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019538:	2b06      	cmp	r3, #6
 801953a:	d907      	bls.n	801954c <RegionKR920LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801953c:	2247      	movs	r2, #71	; 0x47
 801953e:	18bb      	adds	r3, r7, r2
 8019540:	18ba      	adds	r2, r7, r2
 8019542:	7812      	ldrb	r2, [r2, #0]
 8019544:	2101      	movs	r1, #1
 8019546:	438a      	bics	r2, r1
 8019548:	701a      	strb	r2, [r3, #0]
 801954a:	e04e      	b.n	80195ea <RegionKR920LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 801954c:	2345      	movs	r3, #69	; 0x45
 801954e:	18fb      	adds	r3, r7, r3
 8019550:	2200      	movs	r2, #0
 8019552:	701a      	strb	r2, [r3, #0]
 8019554:	e044      	b.n	80195e0 <RegionKR920LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019556:	233c      	movs	r3, #60	; 0x3c
 8019558:	18fb      	adds	r3, r7, r3
 801955a:	78db      	ldrb	r3, [r3, #3]
 801955c:	2b06      	cmp	r3, #6
 801955e:	d11b      	bne.n	8019598 <RegionKR920LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8019560:	2345      	movs	r3, #69	; 0x45
 8019562:	18fb      	adds	r3, r7, r3
 8019564:	781a      	ldrb	r2, [r3, #0]
 8019566:	496e      	ldr	r1, [pc, #440]	; (8019720 <RegionKR920LinkAdrReq+0x2a4>)
 8019568:	0013      	movs	r3, r2
 801956a:	005b      	lsls	r3, r3, #1
 801956c:	189b      	adds	r3, r3, r2
 801956e:	009b      	lsls	r3, r3, #2
 8019570:	585b      	ldr	r3, [r3, r1]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d02e      	beq.n	80195d4 <RegionKR920LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 8019576:	2345      	movs	r3, #69	; 0x45
 8019578:	18fb      	adds	r3, r7, r3
 801957a:	781b      	ldrb	r3, [r3, #0]
 801957c:	2201      	movs	r2, #1
 801957e:	409a      	lsls	r2, r3
 8019580:	0013      	movs	r3, r2
 8019582:	b21a      	sxth	r2, r3
 8019584:	213a      	movs	r1, #58	; 0x3a
 8019586:	187b      	adds	r3, r7, r1
 8019588:	881b      	ldrh	r3, [r3, #0]
 801958a:	b21b      	sxth	r3, r3
 801958c:	4313      	orrs	r3, r2
 801958e:	b21b      	sxth	r3, r3
 8019590:	b29a      	uxth	r2, r3
 8019592:	187b      	adds	r3, r7, r1
 8019594:	801a      	strh	r2, [r3, #0]
 8019596:	e01d      	b.n	80195d4 <RegionKR920LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019598:	233a      	movs	r3, #58	; 0x3a
 801959a:	18fb      	adds	r3, r7, r3
 801959c:	881b      	ldrh	r3, [r3, #0]
 801959e:	001a      	movs	r2, r3
 80195a0:	2345      	movs	r3, #69	; 0x45
 80195a2:	18fb      	adds	r3, r7, r3
 80195a4:	781b      	ldrb	r3, [r3, #0]
 80195a6:	411a      	asrs	r2, r3
 80195a8:	0013      	movs	r3, r2
 80195aa:	2201      	movs	r2, #1
 80195ac:	4013      	ands	r3, r2
 80195ae:	d011      	beq.n	80195d4 <RegionKR920LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 80195b0:	2345      	movs	r3, #69	; 0x45
 80195b2:	18fb      	adds	r3, r7, r3
 80195b4:	781a      	ldrb	r2, [r3, #0]
 80195b6:	495a      	ldr	r1, [pc, #360]	; (8019720 <RegionKR920LinkAdrReq+0x2a4>)
 80195b8:	0013      	movs	r3, r2
 80195ba:	005b      	lsls	r3, r3, #1
 80195bc:	189b      	adds	r3, r3, r2
 80195be:	009b      	lsls	r3, r3, #2
 80195c0:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d106      	bne.n	80195d4 <RegionKR920LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80195c6:	2247      	movs	r2, #71	; 0x47
 80195c8:	18bb      	adds	r3, r7, r2
 80195ca:	18ba      	adds	r2, r7, r2
 80195cc:	7812      	ldrb	r2, [r2, #0]
 80195ce:	2101      	movs	r1, #1
 80195d0:	438a      	bics	r2, r1
 80195d2:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++ )
 80195d4:	2145      	movs	r1, #69	; 0x45
 80195d6:	187b      	adds	r3, r7, r1
 80195d8:	781a      	ldrb	r2, [r3, #0]
 80195da:	187b      	adds	r3, r7, r1
 80195dc:	3201      	adds	r2, #1
 80195de:	701a      	strb	r2, [r3, #0]
 80195e0:	2345      	movs	r3, #69	; 0x45
 80195e2:	18fb      	adds	r3, r7, r3
 80195e4:	781b      	ldrb	r3, [r3, #0]
 80195e6:	2b0f      	cmp	r3, #15
 80195e8:	d9b5      	bls.n	8019556 <RegionKR920LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	7a1b      	ldrb	r3, [r3, #8]
 80195ee:	2246      	movs	r2, #70	; 0x46
 80195f0:	18ba      	adds	r2, r7, r2
 80195f2:	7812      	ldrb	r2, [r2, #0]
 80195f4:	429a      	cmp	r2, r3
 80195f6:	d200      	bcs.n	80195fa <RegionKR920LinkAdrReq+0x17e>
 80195f8:	e758      	b.n	80194ac <RegionKR920LinkAdrReq+0x30>
 80195fa:	e000      	b.n	80195fe <RegionKR920LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 80195fc:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80195fe:	2134      	movs	r1, #52	; 0x34
 8019600:	187b      	adds	r3, r7, r1
 8019602:	2201      	movs	r2, #1
 8019604:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	7a5a      	ldrb	r2, [r3, #9]
 801960a:	187b      	adds	r3, r7, r1
 801960c:	709a      	strb	r2, [r3, #2]
    phyParam = RegionKR920GetPhyParam( &getPhy );
 801960e:	187b      	adds	r3, r7, r1
 8019610:	0018      	movs	r0, r3
 8019612:	f7ff fb69 	bl	8018ce8 <RegionKR920GetPhyParam>
 8019616:	0003      	movs	r3, r0
 8019618:	001a      	movs	r2, r3
 801961a:	2030      	movs	r0, #48	; 0x30
 801961c:	183b      	adds	r3, r7, r0
 801961e:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8019620:	2110      	movs	r1, #16
 8019622:	187b      	adds	r3, r7, r1
 8019624:	2447      	movs	r4, #71	; 0x47
 8019626:	193a      	adds	r2, r7, r4
 8019628:	7812      	ldrb	r2, [r2, #0]
 801962a:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	7a9a      	ldrb	r2, [r3, #10]
 8019630:	187b      	adds	r3, r7, r1
 8019632:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019634:	253c      	movs	r5, #60	; 0x3c
 8019636:	197b      	adds	r3, r7, r5
 8019638:	2201      	movs	r2, #1
 801963a:	569a      	ldrsb	r2, [r3, r2]
 801963c:	187b      	adds	r3, r7, r1
 801963e:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019640:	197b      	adds	r3, r7, r5
 8019642:	2202      	movs	r2, #2
 8019644:	569a      	ldrsb	r2, [r3, r2]
 8019646:	187b      	adds	r3, r7, r1
 8019648:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801964a:	197b      	adds	r3, r7, r5
 801964c:	781a      	ldrb	r2, [r3, #0]
 801964e:	187b      	adds	r3, r7, r1
 8019650:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	220b      	movs	r2, #11
 8019656:	569a      	ldrsb	r2, [r3, r2]
 8019658:	187b      	adds	r3, r7, r1
 801965a:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	220c      	movs	r2, #12
 8019660:	569a      	ldrsb	r2, [r3, r2]
 8019662:	187b      	adds	r3, r7, r1
 8019664:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	7b5b      	ldrb	r3, [r3, #13]
 801966a:	b25a      	sxtb	r2, r3
 801966c:	187b      	adds	r3, r7, r1
 801966e:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = KR920_MAX_NB_CHANNELS;
 8019670:	187b      	adds	r3, r7, r1
 8019672:	2210      	movs	r2, #16
 8019674:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019676:	187b      	adds	r3, r7, r1
 8019678:	223a      	movs	r2, #58	; 0x3a
 801967a:	18ba      	adds	r2, r7, r2
 801967c:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801967e:	183b      	adds	r3, r7, r0
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	b25a      	sxtb	r2, r3
 8019684:	0008      	movs	r0, r1
 8019686:	183b      	adds	r3, r7, r0
 8019688:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = KR920_TX_MAX_DATARATE;
 801968a:	183b      	adds	r3, r7, r0
 801968c:	2205      	movs	r2, #5
 801968e:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8019690:	183b      	adds	r3, r7, r0
 8019692:	4a23      	ldr	r2, [pc, #140]	; (8019720 <RegionKR920LinkAdrReq+0x2a4>)
 8019694:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = KR920_MIN_TX_POWER;
 8019696:	183b      	adds	r3, r7, r0
 8019698:	2207      	movs	r2, #7
 801969a:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = KR920_MAX_TX_POWER;
 801969c:	183b      	adds	r3, r7, r0
 801969e:	2200      	movs	r2, #0
 80196a0:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80196a2:	183b      	adds	r3, r7, r0
 80196a4:	68fa      	ldr	r2, [r7, #12]
 80196a6:	6812      	ldr	r2, [r2, #0]
 80196a8:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80196aa:	0026      	movs	r6, r4
 80196ac:	193c      	adds	r4, r7, r4
 80196ae:	0029      	movs	r1, r5
 80196b0:	187d      	adds	r5, r7, r1
 80196b2:	187b      	adds	r3, r7, r1
 80196b4:	1c9a      	adds	r2, r3, #2
 80196b6:	187b      	adds	r3, r7, r1
 80196b8:	1c59      	adds	r1, r3, #1
 80196ba:	1838      	adds	r0, r7, r0
 80196bc:	002b      	movs	r3, r5
 80196be:	f7fb f89d 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 80196c2:	0003      	movs	r3, r0
 80196c4:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80196c6:	0034      	movs	r4, r6
 80196c8:	193b      	adds	r3, r7, r4
 80196ca:	781b      	ldrb	r3, [r3, #0]
 80196cc:	2b07      	cmp	r3, #7
 80196ce:	d10b      	bne.n	80196e8 <RegionKR920LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 80196d0:	4b14      	ldr	r3, [pc, #80]	; (8019724 <RegionKR920LinkAdrReq+0x2a8>)
 80196d2:	2202      	movs	r2, #2
 80196d4:	2100      	movs	r1, #0
 80196d6:	0018      	movs	r0, r3
 80196d8:	f003 fb3c 	bl	801cd54 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80196dc:	233a      	movs	r3, #58	; 0x3a
 80196de:	18fb      	adds	r3, r7, r3
 80196e0:	8819      	ldrh	r1, [r3, #0]
 80196e2:	4b0f      	ldr	r3, [pc, #60]	; (8019720 <RegionKR920LinkAdrReq+0x2a4>)
 80196e4:	22d0      	movs	r2, #208	; 0xd0
 80196e6:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80196e8:	213c      	movs	r1, #60	; 0x3c
 80196ea:	187b      	adds	r3, r7, r1
 80196ec:	2201      	movs	r2, #1
 80196ee:	569a      	ldrsb	r2, [r3, r2]
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80196f4:	187b      	adds	r3, r7, r1
 80196f6:	2202      	movs	r2, #2
 80196f8:	569a      	ldrsb	r2, [r3, r2]
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80196fe:	187b      	adds	r3, r7, r1
 8019700:	781a      	ldrb	r2, [r3, #0]
 8019702:	683b      	ldr	r3, [r7, #0]
 8019704:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019708:	2246      	movs	r2, #70	; 0x46
 801970a:	18ba      	adds	r2, r7, r2
 801970c:	7812      	ldrb	r2, [r2, #0]
 801970e:	701a      	strb	r2, [r3, #0]

    return status;
 8019710:	2347      	movs	r3, #71	; 0x47
 8019712:	18fb      	adds	r3, r7, r3
 8019714:	781b      	ldrb	r3, [r3, #0]
}
 8019716:	0018      	movs	r0, r3
 8019718:	46bd      	mov	sp, r7
 801971a:	b013      	add	sp, #76	; 0x4c
 801971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801971e:	46c0      	nop			; (mov r8, r8)
 8019720:	200016f4 	.word	0x200016f4
 8019724:	200017c4 	.word	0x200017c4

08019728 <RegionKR920RxParamSetupReq>:

uint8_t RegionKR920RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b084      	sub	sp, #16
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019730:	230f      	movs	r3, #15
 8019732:	18fb      	adds	r3, r7, r3
 8019734:	2207      	movs	r2, #7
 8019736:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	685b      	ldr	r3, [r3, #4]
 801973c:	0018      	movs	r0, r3
 801973e:	f7ff f9b3 	bl	8018aa8 <VerifyRfFreq>
 8019742:	0003      	movs	r3, r0
 8019744:	001a      	movs	r2, r3
 8019746:	2301      	movs	r3, #1
 8019748:	4053      	eors	r3, r2
 801974a:	b2db      	uxtb	r3, r3
 801974c:	2b00      	cmp	r3, #0
 801974e:	d006      	beq.n	801975e <RegionKR920RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 8019750:	220f      	movs	r2, #15
 8019752:	18bb      	adds	r3, r7, r2
 8019754:	18ba      	adds	r2, r7, r2
 8019756:	7812      	ldrb	r2, [r2, #0]
 8019758:	2101      	movs	r1, #1
 801975a:	438a      	bics	r2, r1
 801975c:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE ) == false )
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	781b      	ldrb	r3, [r3, #0]
 8019762:	b25b      	sxtb	r3, r3
 8019764:	2205      	movs	r2, #5
 8019766:	2100      	movs	r1, #0
 8019768:	0018      	movs	r0, r3
 801976a:	f7fa fe09 	bl	8014380 <RegionCommonValueInRange>
 801976e:	1e03      	subs	r3, r0, #0
 8019770:	d106      	bne.n	8019780 <RegionKR920RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 8019772:	220f      	movs	r2, #15
 8019774:	18bb      	adds	r3, r7, r2
 8019776:	18ba      	adds	r2, r7, r2
 8019778:	7812      	ldrb	r2, [r2, #0]
 801977a:	2102      	movs	r1, #2
 801977c:	438a      	bics	r2, r1
 801977e:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, KR920_MIN_RX1_DR_OFFSET, KR920_MAX_RX1_DR_OFFSET ) == false )
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	785b      	ldrb	r3, [r3, #1]
 8019784:	b25b      	sxtb	r3, r3
 8019786:	2205      	movs	r2, #5
 8019788:	2100      	movs	r1, #0
 801978a:	0018      	movs	r0, r3
 801978c:	f7fa fdf8 	bl	8014380 <RegionCommonValueInRange>
 8019790:	1e03      	subs	r3, r0, #0
 8019792:	d106      	bne.n	80197a2 <RegionKR920RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019794:	220f      	movs	r2, #15
 8019796:	18bb      	adds	r3, r7, r2
 8019798:	18ba      	adds	r2, r7, r2
 801979a:	7812      	ldrb	r2, [r2, #0]
 801979c:	2104      	movs	r1, #4
 801979e:	438a      	bics	r2, r1
 80197a0:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80197a2:	230f      	movs	r3, #15
 80197a4:	18fb      	adds	r3, r7, r3
 80197a6:	781b      	ldrb	r3, [r3, #0]
}
 80197a8:	0018      	movs	r0, r3
 80197aa:	46bd      	mov	sp, r7
 80197ac:	b004      	add	sp, #16
 80197ae:	bd80      	pop	{r7, pc}

080197b0 <RegionKR920NewChannelReq>:

uint8_t RegionKR920NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b086      	sub	sp, #24
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80197b8:	2317      	movs	r3, #23
 80197ba:	18fb      	adds	r3, r7, r3
 80197bc:	2203      	movs	r2, #3
 80197be:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d119      	bne.n	80197fe <RegionKR920NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	791b      	ldrb	r3, [r3, #4]
 80197ce:	b25b      	sxtb	r3, r3
 80197d0:	b2da      	uxtb	r2, r3
 80197d2:	2108      	movs	r1, #8
 80197d4:	187b      	adds	r3, r7, r1
 80197d6:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionKR920ChannelsRemove( &channelRemove ) == false )
 80197d8:	187b      	adds	r3, r7, r1
 80197da:	0018      	movs	r0, r3
 80197dc:	f000 fa74 	bl	8019cc8 <RegionKR920ChannelsRemove>
 80197e0:	0003      	movs	r3, r0
 80197e2:	001a      	movs	r2, r3
 80197e4:	2301      	movs	r3, #1
 80197e6:	4053      	eors	r3, r2
 80197e8:	b2db      	uxtb	r3, r3
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d043      	beq.n	8019876 <RegionKR920NewChannelReq+0xc6>
        {
            status &= 0xFC;
 80197ee:	2217      	movs	r2, #23
 80197f0:	18bb      	adds	r3, r7, r2
 80197f2:	18ba      	adds	r2, r7, r2
 80197f4:	7812      	ldrb	r2, [r2, #0]
 80197f6:	2103      	movs	r1, #3
 80197f8:	438a      	bics	r2, r1
 80197fa:	701a      	strb	r2, [r3, #0]
 80197fc:	e03b      	b.n	8019876 <RegionKR920NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	681a      	ldr	r2, [r3, #0]
 8019802:	210c      	movs	r1, #12
 8019804:	187b      	adds	r3, r7, r1
 8019806:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	791b      	ldrb	r3, [r3, #4]
 801980c:	b25b      	sxtb	r3, r3
 801980e:	b2da      	uxtb	r2, r3
 8019810:	187b      	adds	r3, r7, r1
 8019812:	711a      	strb	r2, [r3, #4]

        switch( RegionKR920ChannelAdd( &channelAdd ) )
 8019814:	187b      	adds	r3, r7, r1
 8019816:	0018      	movs	r0, r3
 8019818:	f000 f99c 	bl	8019b54 <RegionKR920ChannelAdd>
 801981c:	0003      	movs	r3, r0
 801981e:	2b04      	cmp	r3, #4
 8019820:	d008      	beq.n	8019834 <RegionKR920NewChannelReq+0x84>
 8019822:	dc02      	bgt.n	801982a <RegionKR920NewChannelReq+0x7a>
 8019824:	2b00      	cmp	r3, #0
 8019826:	d025      	beq.n	8019874 <RegionKR920NewChannelReq+0xc4>
 8019828:	e01c      	b.n	8019864 <RegionKR920NewChannelReq+0xb4>
 801982a:	2b05      	cmp	r3, #5
 801982c:	d00a      	beq.n	8019844 <RegionKR920NewChannelReq+0x94>
 801982e:	2b06      	cmp	r3, #6
 8019830:	d010      	beq.n	8019854 <RegionKR920NewChannelReq+0xa4>
 8019832:	e017      	b.n	8019864 <RegionKR920NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019834:	2217      	movs	r2, #23
 8019836:	18bb      	adds	r3, r7, r2
 8019838:	18ba      	adds	r2, r7, r2
 801983a:	7812      	ldrb	r2, [r2, #0]
 801983c:	2101      	movs	r1, #1
 801983e:	438a      	bics	r2, r1
 8019840:	701a      	strb	r2, [r3, #0]
                break;
 8019842:	e018      	b.n	8019876 <RegionKR920NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019844:	2217      	movs	r2, #23
 8019846:	18bb      	adds	r3, r7, r2
 8019848:	18ba      	adds	r2, r7, r2
 801984a:	7812      	ldrb	r2, [r2, #0]
 801984c:	2102      	movs	r1, #2
 801984e:	438a      	bics	r2, r1
 8019850:	701a      	strb	r2, [r3, #0]
                break;
 8019852:	e010      	b.n	8019876 <RegionKR920NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019854:	2217      	movs	r2, #23
 8019856:	18bb      	adds	r3, r7, r2
 8019858:	18ba      	adds	r2, r7, r2
 801985a:	7812      	ldrb	r2, [r2, #0]
 801985c:	2103      	movs	r1, #3
 801985e:	438a      	bics	r2, r1
 8019860:	701a      	strb	r2, [r3, #0]
                break;
 8019862:	e008      	b.n	8019876 <RegionKR920NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8019864:	2217      	movs	r2, #23
 8019866:	18bb      	adds	r3, r7, r2
 8019868:	18ba      	adds	r2, r7, r2
 801986a:	7812      	ldrb	r2, [r2, #0]
 801986c:	2103      	movs	r1, #3
 801986e:	438a      	bics	r2, r1
 8019870:	701a      	strb	r2, [r3, #0]
                break;
 8019872:	e000      	b.n	8019876 <RegionKR920NewChannelReq+0xc6>
                break;
 8019874:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8019876:	2317      	movs	r3, #23
 8019878:	18fb      	adds	r3, r7, r3
 801987a:	781b      	ldrb	r3, [r3, #0]
}
 801987c:	0018      	movs	r0, r3
 801987e:	46bd      	mov	sp, r7
 8019880:	b006      	add	sp, #24
 8019882:	bd80      	pop	{r7, pc}

08019884 <RegionKR920TxParamSetupReq>:

int8_t RegionKR920TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b082      	sub	sp, #8
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
    return -1;
 801988c:	2301      	movs	r3, #1
 801988e:	425b      	negs	r3, r3
}
 8019890:	0018      	movs	r0, r3
 8019892:	46bd      	mov	sp, r7
 8019894:	b002      	add	sp, #8
 8019896:	bd80      	pop	{r7, pc}

08019898 <RegionKR920DlChannelReq>:

uint8_t RegionKR920DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b084      	sub	sp, #16
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80198a0:	230f      	movs	r3, #15
 80198a2:	18fb      	adds	r3, r7, r3
 80198a4:	2203      	movs	r2, #3
 80198a6:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	0018      	movs	r0, r3
 80198ae:	f7ff f8fb 	bl	8018aa8 <VerifyRfFreq>
 80198b2:	0003      	movs	r3, r0
 80198b4:	001a      	movs	r2, r3
 80198b6:	2301      	movs	r3, #1
 80198b8:	4053      	eors	r3, r2
 80198ba:	b2db      	uxtb	r3, r3
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d006      	beq.n	80198ce <RegionKR920DlChannelReq+0x36>
    {
        status &= 0xFE;
 80198c0:	220f      	movs	r2, #15
 80198c2:	18bb      	adds	r3, r7, r2
 80198c4:	18ba      	adds	r2, r7, r2
 80198c6:	7812      	ldrb	r2, [r2, #0]
 80198c8:	2101      	movs	r1, #1
 80198ca:	438a      	bics	r2, r1
 80198cc:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	781b      	ldrb	r3, [r3, #0]
 80198d2:	0019      	movs	r1, r3
 80198d4:	4a13      	ldr	r2, [pc, #76]	; (8019924 <RegionKR920DlChannelReq+0x8c>)
 80198d6:	000b      	movs	r3, r1
 80198d8:	005b      	lsls	r3, r3, #1
 80198da:	185b      	adds	r3, r3, r1
 80198dc:	009b      	lsls	r3, r3, #2
 80198de:	589b      	ldr	r3, [r3, r2]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d106      	bne.n	80198f2 <RegionKR920DlChannelReq+0x5a>
    {
        status &= 0xFD;
 80198e4:	220f      	movs	r2, #15
 80198e6:	18bb      	adds	r3, r7, r2
 80198e8:	18ba      	adds	r2, r7, r2
 80198ea:	7812      	ldrb	r2, [r2, #0]
 80198ec:	2102      	movs	r1, #2
 80198ee:	438a      	bics	r2, r1
 80198f0:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80198f2:	230f      	movs	r3, #15
 80198f4:	18fb      	adds	r3, r7, r3
 80198f6:	781b      	ldrb	r3, [r3, #0]
 80198f8:	2b03      	cmp	r3, #3
 80198fa:	d10c      	bne.n	8019916 <RegionKR920DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	0018      	movs	r0, r3
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	685a      	ldr	r2, [r3, #4]
 8019906:	4907      	ldr	r1, [pc, #28]	; (8019924 <RegionKR920DlChannelReq+0x8c>)
 8019908:	0003      	movs	r3, r0
 801990a:	005b      	lsls	r3, r3, #1
 801990c:	181b      	adds	r3, r3, r0
 801990e:	009b      	lsls	r3, r3, #2
 8019910:	18cb      	adds	r3, r1, r3
 8019912:	3304      	adds	r3, #4
 8019914:	601a      	str	r2, [r3, #0]
    }

    return status;
 8019916:	230f      	movs	r3, #15
 8019918:	18fb      	adds	r3, r7, r3
 801991a:	781b      	ldrb	r3, [r3, #0]
}
 801991c:	0018      	movs	r0, r3
 801991e:	46bd      	mov	sp, r7
 8019920:	b004      	add	sp, #16
 8019922:	bd80      	pop	{r7, pc}
 8019924:	200016f4 	.word	0x200016f4

08019928 <RegionKR920CalcBackOff>:
{
    return currentDr;
}

void RegionKR920CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b088      	sub	sp, #32
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 8019930:	210c      	movs	r1, #12
 8019932:	187b      	adds	r3, r7, r1
 8019934:	4a12      	ldr	r2, [pc, #72]	; (8019980 <RegionKR920CalcBackOff+0x58>)
 8019936:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8019938:	187b      	adds	r3, r7, r1
 801993a:	4a12      	ldr	r2, [pc, #72]	; (8019984 <RegionKR920CalcBackOff+0x5c>)
 801993c:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	785a      	ldrb	r2, [r3, #1]
 8019942:	187b      	adds	r3, r7, r1
 8019944:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	781a      	ldrb	r2, [r3, #0]
 801994a:	187b      	adds	r3, r7, r1
 801994c:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	789a      	ldrb	r2, [r3, #2]
 8019952:	187b      	adds	r3, r7, r1
 8019954:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	78da      	ldrb	r2, [r3, #3]
 801995a:	187b      	adds	r3, r7, r1
 801995c:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	685a      	ldr	r2, [r3, #4]
 8019962:	187b      	adds	r3, r7, r1
 8019964:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	689a      	ldr	r2, [r3, #8]
 801996a:	187b      	adds	r3, r7, r1
 801996c:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801996e:	187b      	adds	r3, r7, r1
 8019970:	0018      	movs	r0, r3
 8019972:	f7fb f8ed 	bl	8014b50 <RegionCommonCalcBackOff>
}
 8019976:	46c0      	nop			; (mov r8, r8)
 8019978:	46bd      	mov	sp, r7
 801997a:	b008      	add	sp, #32
 801997c:	bd80      	pop	{r7, pc}
 801997e:	46c0      	nop			; (mov r8, r8)
 8019980:	200016f4 	.word	0x200016f4
 8019984:	200017b4 	.word	0x200017b4

08019988 <RegionKR920NextChannel>:

LoRaMacStatus_t RegionKR920NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019988:	b5b0      	push	{r4, r5, r7, lr}
 801998a:	b090      	sub	sp, #64	; 0x40
 801998c:	af04      	add	r7, sp, #16
 801998e:	60f8      	str	r0, [r7, #12]
 8019990:	60b9      	str	r1, [r7, #8]
 8019992:	607a      	str	r2, [r7, #4]
 8019994:	603b      	str	r3, [r7, #0]
    uint8_t channelNext = 0;
 8019996:	2325      	movs	r3, #37	; 0x25
 8019998:	18fb      	adds	r3, r7, r3
 801999a:	2200      	movs	r2, #0
 801999c:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 801999e:	232f      	movs	r3, #47	; 0x2f
 80199a0:	18fb      	adds	r3, r7, r3
 80199a2:	2200      	movs	r2, #0
 80199a4:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 80199a6:	2324      	movs	r3, #36	; 0x24
 80199a8:	18fb      	adds	r3, r7, r3
 80199aa:	2200      	movs	r2, #0
 80199ac:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[KR920_MAX_NB_CHANNELS] = { 0 };
 80199ae:	2314      	movs	r3, #20
 80199b0:	18fb      	adds	r3, r7, r3
 80199b2:	0018      	movs	r0, r3
 80199b4:	2310      	movs	r3, #16
 80199b6:	001a      	movs	r2, r3
 80199b8:	2100      	movs	r1, #0
 80199ba:	f00c fab9 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 80199be:	2300      	movs	r3, #0
 80199c0:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80199c2:	4b60      	ldr	r3, [pc, #384]	; (8019b44 <RegionKR920NextChannel+0x1bc>)
 80199c4:	2201      	movs	r2, #1
 80199c6:	2100      	movs	r1, #0
 80199c8:	0018      	movs	r0, r3
 80199ca:	f7fa fd41 	bl	8014450 <RegionCommonCountChannels>
 80199ce:	1e03      	subs	r3, r0, #0
 80199d0:	d108      	bne.n	80199e4 <RegionKR920NextChannel+0x5c>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80199d2:	4b5d      	ldr	r3, [pc, #372]	; (8019b48 <RegionKR920NextChannel+0x1c0>)
 80199d4:	22d0      	movs	r2, #208	; 0xd0
 80199d6:	5a9b      	ldrh	r3, [r3, r2]
 80199d8:	2207      	movs	r2, #7
 80199da:	4313      	orrs	r3, r2
 80199dc:	b299      	uxth	r1, r3
 80199de:	4b5a      	ldr	r3, [pc, #360]	; (8019b48 <RegionKR920NextChannel+0x1c0>)
 80199e0:	22d0      	movs	r2, #208	; 0xd0
 80199e2:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	681c      	ldr	r4, [r3, #0]
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	685b      	ldr	r3, [r3, #4]
 80199ec:	0018      	movs	r0, r3
 80199ee:	f003 f936 	bl	801cc5e <TimerGetElapsedTime>
 80199f2:	0003      	movs	r3, r0
 80199f4:	429c      	cmp	r4, r3
 80199f6:	d824      	bhi.n	8019a42 <RegionKR920NextChannel+0xba>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80199f8:	683b      	ldr	r3, [r7, #0]
 80199fa:	2200      	movs	r2, #0
 80199fc:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, KR920_MAX_NB_BANDS );
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	7a58      	ldrb	r0, [r3, #9]
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	7a99      	ldrb	r1, [r3, #10]
 8019a06:	4a51      	ldr	r2, [pc, #324]	; (8019b4c <RegionKR920NextChannel+0x1c4>)
 8019a08:	2301      	movs	r3, #1
 8019a0a:	f7fa fdac 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 8019a0e:	0003      	movs	r3, r0
 8019a10:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	7a58      	ldrb	r0, [r3, #9]
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	7a1b      	ldrb	r3, [r3, #8]
 8019a1a:	b25b      	sxtb	r3, r3
 8019a1c:	b2d9      	uxtb	r1, r3
 8019a1e:	232f      	movs	r3, #47	; 0x2f
 8019a20:	18fc      	adds	r4, r7, r3
 8019a22:	4d49      	ldr	r5, [pc, #292]	; (8019b48 <RegionKR920NextChannel+0x1c0>)
 8019a24:	4a47      	ldr	r2, [pc, #284]	; (8019b44 <RegionKR920NextChannel+0x1bc>)
 8019a26:	2324      	movs	r3, #36	; 0x24
 8019a28:	18fb      	adds	r3, r7, r3
 8019a2a:	9302      	str	r3, [sp, #8]
 8019a2c:	2314      	movs	r3, #20
 8019a2e:	18fb      	adds	r3, r7, r3
 8019a30:	9301      	str	r3, [sp, #4]
 8019a32:	4b46      	ldr	r3, [pc, #280]	; (8019b4c <RegionKR920NextChannel+0x1c4>)
 8019a34:	9300      	str	r3, [sp, #0]
 8019a36:	002b      	movs	r3, r5
 8019a38:	f7ff f870 	bl	8018b1c <CountNbOfEnabledChannels>
 8019a3c:	0003      	movs	r3, r0
 8019a3e:	7023      	strb	r3, [r4, #0]
 8019a40:	e010      	b.n	8019a64 <RegionKR920NextChannel+0xdc>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8019a42:	2124      	movs	r1, #36	; 0x24
 8019a44:	187b      	adds	r3, r7, r1
 8019a46:	781b      	ldrb	r3, [r3, #0]
 8019a48:	3301      	adds	r3, #1
 8019a4a:	b2da      	uxtb	r2, r3
 8019a4c:	187b      	adds	r3, r7, r1
 8019a4e:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	681c      	ldr	r4, [r3, #0]
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	685b      	ldr	r3, [r3, #4]
 8019a58:	0018      	movs	r0, r3
 8019a5a:	f003 f900 	bl	801cc5e <TimerGetElapsedTime>
 8019a5e:	0003      	movs	r3, r0
 8019a60:	1ae3      	subs	r3, r4, r3
 8019a62:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8019a64:	232f      	movs	r3, #47	; 0x2f
 8019a66:	18fb      	adds	r3, r7, r3
 8019a68:	781b      	ldrb	r3, [r3, #0]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d04f      	beq.n	8019b0e <RegionKR920NextChannel+0x186>
    {
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 8019a6e:	2327      	movs	r3, #39	; 0x27
 8019a70:	18fb      	adds	r3, r7, r3
 8019a72:	2200      	movs	r2, #0
 8019a74:	701a      	strb	r2, [r3, #0]
 8019a76:	232f      	movs	r3, #47	; 0x2f
 8019a78:	18fb      	adds	r3, r7, r3
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	3b01      	subs	r3, #1
 8019a7e:	0019      	movs	r1, r3
 8019a80:	2000      	movs	r0, #0
 8019a82:	f003 f915 	bl	801ccb0 <randr>
 8019a86:	0002      	movs	r2, r0
 8019a88:	2326      	movs	r3, #38	; 0x26
 8019a8a:	18fb      	adds	r3, r7, r3
 8019a8c:	701a      	strb	r2, [r3, #0]
 8019a8e:	e037      	b.n	8019b00 <RegionKR920NextChannel+0x178>
        {
            channelNext = enabledChannels[j];
 8019a90:	2426      	movs	r4, #38	; 0x26
 8019a92:	193b      	adds	r3, r7, r4
 8019a94:	781a      	ldrb	r2, [r3, #0]
 8019a96:	2525      	movs	r5, #37	; 0x25
 8019a98:	197b      	adds	r3, r7, r5
 8019a9a:	2114      	movs	r1, #20
 8019a9c:	1879      	adds	r1, r7, r1
 8019a9e:	5c8a      	ldrb	r2, [r1, r2]
 8019aa0:	701a      	strb	r2, [r3, #0]
            j = ( j + 1 ) % nbEnabledChannels;
 8019aa2:	193b      	adds	r3, r7, r4
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	1c5a      	adds	r2, r3, #1
 8019aa8:	232f      	movs	r3, #47	; 0x2f
 8019aaa:	18fb      	adds	r3, r7, r3
 8019aac:	781b      	ldrb	r3, [r3, #0]
 8019aae:	0019      	movs	r1, r3
 8019ab0:	0010      	movs	r0, r2
 8019ab2:	f7e6 fca1 	bl	80003f8 <__aeabi_idivmod>
 8019ab6:	000b      	movs	r3, r1
 8019ab8:	001a      	movs	r2, r3
 8019aba:	193b      	adds	r3, r7, r4
 8019abc:	701a      	strb	r2, [r3, #0]

            // Perform carrier sense for KR920_CARRIER_SENSE_TIME
            // If the channel is free, we can stop the LBT mechanism
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, KR920_RSSI_FREE_TH, KR920_CARRIER_SENSE_TIME ) == true )
 8019abe:	4b24      	ldr	r3, [pc, #144]	; (8019b50 <RegionKR920NextChannel+0x1c8>)
 8019ac0:	699c      	ldr	r4, [r3, #24]
 8019ac2:	197b      	adds	r3, r7, r5
 8019ac4:	781a      	ldrb	r2, [r3, #0]
 8019ac6:	4920      	ldr	r1, [pc, #128]	; (8019b48 <RegionKR920NextChannel+0x1c0>)
 8019ac8:	0013      	movs	r3, r2
 8019aca:	005b      	lsls	r3, r3, #1
 8019acc:	189b      	adds	r3, r3, r2
 8019ace:	009b      	lsls	r3, r3, #2
 8019ad0:	5859      	ldr	r1, [r3, r1]
 8019ad2:	2341      	movs	r3, #65	; 0x41
 8019ad4:	425a      	negs	r2, r3
 8019ad6:	2306      	movs	r3, #6
 8019ad8:	2001      	movs	r0, #1
 8019ada:	47a0      	blx	r4
 8019adc:	1e03      	subs	r3, r0, #0
 8019ade:	d009      	beq.n	8019af4 <RegionKR920NextChannel+0x16c>
            {
                // Free channel found
                *channel = channelNext;
 8019ae0:	68bb      	ldr	r3, [r7, #8]
 8019ae2:	2225      	movs	r2, #37	; 0x25
 8019ae4:	18ba      	adds	r2, r7, r2
 8019ae6:	7812      	ldrb	r2, [r2, #0]
 8019ae8:	701a      	strb	r2, [r3, #0]
                *time = 0;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	2200      	movs	r2, #0
 8019aee:	601a      	str	r2, [r3, #0]
                return LORAMAC_STATUS_OK;
 8019af0:	2300      	movs	r3, #0
 8019af2:	e023      	b.n	8019b3c <RegionKR920NextChannel+0x1b4>
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < KR920_MAX_NB_CHANNELS; i++ )
 8019af4:	2127      	movs	r1, #39	; 0x27
 8019af6:	187b      	adds	r3, r7, r1
 8019af8:	781a      	ldrb	r2, [r3, #0]
 8019afa:	187b      	adds	r3, r7, r1
 8019afc:	3201      	adds	r2, #1
 8019afe:	701a      	strb	r2, [r3, #0]
 8019b00:	2327      	movs	r3, #39	; 0x27
 8019b02:	18fb      	adds	r3, r7, r3
 8019b04:	781b      	ldrb	r3, [r3, #0]
 8019b06:	2b0f      	cmp	r3, #15
 8019b08:	d9c2      	bls.n	8019a90 <RegionKR920NextChannel+0x108>
            }
        }
        return LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 8019b0a:	230d      	movs	r3, #13
 8019b0c:	e016      	b.n	8019b3c <RegionKR920NextChannel+0x1b4>
    }
    else
    {
        if( delayTx > 0 )
 8019b0e:	2324      	movs	r3, #36	; 0x24
 8019b10:	18fb      	adds	r3, r7, r3
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d004      	beq.n	8019b22 <RegionKR920NextChannel+0x19a>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b1c:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8019b1e:	230b      	movs	r3, #11
 8019b20:	e00c      	b.n	8019b3c <RegionKR920NextChannel+0x1b4>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019b22:	4b09      	ldr	r3, [pc, #36]	; (8019b48 <RegionKR920NextChannel+0x1c0>)
 8019b24:	22d0      	movs	r2, #208	; 0xd0
 8019b26:	5a9b      	ldrh	r3, [r3, r2]
 8019b28:	2207      	movs	r2, #7
 8019b2a:	4313      	orrs	r3, r2
 8019b2c:	b299      	uxth	r1, r3
 8019b2e:	4b06      	ldr	r3, [pc, #24]	; (8019b48 <RegionKR920NextChannel+0x1c0>)
 8019b30:	22d0      	movs	r2, #208	; 0xd0
 8019b32:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	2200      	movs	r2, #0
 8019b38:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019b3a:	230c      	movs	r3, #12
    }
}
 8019b3c:	0018      	movs	r0, r3
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	b00c      	add	sp, #48	; 0x30
 8019b42:	bdb0      	pop	{r4, r5, r7, pc}
 8019b44:	200017c4 	.word	0x200017c4
 8019b48:	200016f4 	.word	0x200016f4
 8019b4c:	200017b4 	.word	0x200017b4
 8019b50:	08028964 	.word	0x08028964

08019b54 <RegionKR920ChannelAdd>:

LoRaMacStatus_t RegionKR920ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019b54:	b590      	push	{r4, r7, lr}
 8019b56:	b085      	sub	sp, #20
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8019b5c:	230f      	movs	r3, #15
 8019b5e:	18fb      	adds	r3, r7, r3
 8019b60:	2200      	movs	r2, #0
 8019b62:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8019b64:	230e      	movs	r3, #14
 8019b66:	18fb      	adds	r3, r7, r3
 8019b68:	2200      	movs	r2, #0
 8019b6a:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8019b6c:	210d      	movs	r1, #13
 8019b6e:	187b      	adds	r3, r7, r1
 8019b70:	687a      	ldr	r2, [r7, #4]
 8019b72:	7912      	ldrb	r2, [r2, #4]
 8019b74:	701a      	strb	r2, [r3, #0]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 8019b76:	187b      	adds	r3, r7, r1
 8019b78:	781b      	ldrb	r3, [r3, #0]
 8019b7a:	2b02      	cmp	r3, #2
 8019b7c:	d801      	bhi.n	8019b82 <RegionKR920ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b7e:	2306      	movs	r3, #6
 8019b80:	e09c      	b.n	8019cbc <RegionKR920ChannelAdd+0x168>
    }

    if( id >= KR920_MAX_NB_CHANNELS )
 8019b82:	230d      	movs	r3, #13
 8019b84:	18fb      	adds	r3, r7, r3
 8019b86:	781b      	ldrb	r3, [r3, #0]
 8019b88:	2b0f      	cmp	r3, #15
 8019b8a:	d901      	bls.n	8019b90 <RegionKR920ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019b8c:	2303      	movs	r3, #3
 8019b8e:	e095      	b.n	8019cbc <RegionKR920ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	7a1b      	ldrb	r3, [r3, #8]
 8019b96:	011b      	lsls	r3, r3, #4
 8019b98:	b25b      	sxtb	r3, r3
 8019b9a:	111b      	asrs	r3, r3, #4
 8019b9c:	b25b      	sxtb	r3, r3
 8019b9e:	2205      	movs	r2, #5
 8019ba0:	2100      	movs	r1, #0
 8019ba2:	0018      	movs	r0, r3
 8019ba4:	f7fa fbec 	bl	8014380 <RegionCommonValueInRange>
 8019ba8:	1e03      	subs	r3, r0, #0
 8019baa:	d103      	bne.n	8019bb4 <RegionKR920ChannelAdd+0x60>
    {
        drInvalid = true;
 8019bac:	230f      	movs	r3, #15
 8019bae:	18fb      	adds	r3, r7, r3
 8019bb0:	2201      	movs	r2, #1
 8019bb2:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE ) == false )
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	7a1b      	ldrb	r3, [r3, #8]
 8019bba:	b25b      	sxtb	r3, r3
 8019bbc:	111b      	asrs	r3, r3, #4
 8019bbe:	b25b      	sxtb	r3, r3
 8019bc0:	2205      	movs	r2, #5
 8019bc2:	2100      	movs	r1, #0
 8019bc4:	0018      	movs	r0, r3
 8019bc6:	f7fa fbdb 	bl	8014380 <RegionCommonValueInRange>
 8019bca:	1e03      	subs	r3, r0, #0
 8019bcc:	d103      	bne.n	8019bd6 <RegionKR920ChannelAdd+0x82>
    {
        drInvalid = true;
 8019bce:	230f      	movs	r3, #15
 8019bd0:	18fb      	adds	r3, r7, r3
 8019bd2:	2201      	movs	r2, #1
 8019bd4:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	7a1b      	ldrb	r3, [r3, #8]
 8019bdc:	011b      	lsls	r3, r3, #4
 8019bde:	b25b      	sxtb	r3, r3
 8019be0:	111b      	asrs	r3, r3, #4
 8019be2:	b25a      	sxtb	r2, r3
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	7a1b      	ldrb	r3, [r3, #8]
 8019bea:	b25b      	sxtb	r3, r3
 8019bec:	111b      	asrs	r3, r3, #4
 8019bee:	b25b      	sxtb	r3, r3
 8019bf0:	429a      	cmp	r2, r3
 8019bf2:	dd03      	ble.n	8019bfc <RegionKR920ChannelAdd+0xa8>
    {
        drInvalid = true;
 8019bf4:	230f      	movs	r3, #15
 8019bf6:	18fb      	adds	r3, r7, r3
 8019bf8:	2201      	movs	r2, #1
 8019bfa:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019bfc:	230e      	movs	r3, #14
 8019bfe:	18fb      	adds	r3, r7, r3
 8019c00:	781b      	ldrb	r3, [r3, #0]
 8019c02:	2201      	movs	r2, #1
 8019c04:	4053      	eors	r3, r2
 8019c06:	b2db      	uxtb	r3, r3
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d010      	beq.n	8019c2e <RegionKR920ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	0018      	movs	r0, r3
 8019c14:	f7fe ff48 	bl	8018aa8 <VerifyRfFreq>
 8019c18:	0003      	movs	r3, r0
 8019c1a:	001a      	movs	r2, r3
 8019c1c:	2301      	movs	r3, #1
 8019c1e:	4053      	eors	r3, r2
 8019c20:	b2db      	uxtb	r3, r3
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d003      	beq.n	8019c2e <RegionKR920ChannelAdd+0xda>
        {
            freqInvalid = true;
 8019c26:	230e      	movs	r3, #14
 8019c28:	18fb      	adds	r3, r7, r3
 8019c2a:	2201      	movs	r2, #1
 8019c2c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019c2e:	230f      	movs	r3, #15
 8019c30:	18fb      	adds	r3, r7, r3
 8019c32:	781b      	ldrb	r3, [r3, #0]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d006      	beq.n	8019c46 <RegionKR920ChannelAdd+0xf2>
 8019c38:	230e      	movs	r3, #14
 8019c3a:	18fb      	adds	r3, r7, r3
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d001      	beq.n	8019c46 <RegionKR920ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019c42:	2306      	movs	r3, #6
 8019c44:	e03a      	b.n	8019cbc <RegionKR920ChannelAdd+0x168>
    }
    if( drInvalid == true )
 8019c46:	230f      	movs	r3, #15
 8019c48:	18fb      	adds	r3, r7, r3
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d001      	beq.n	8019c54 <RegionKR920ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019c50:	2305      	movs	r3, #5
 8019c52:	e033      	b.n	8019cbc <RegionKR920ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8019c54:	230e      	movs	r3, #14
 8019c56:	18fb      	adds	r3, r7, r3
 8019c58:	781b      	ldrb	r3, [r3, #0]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d001      	beq.n	8019c62 <RegionKR920ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019c5e:	2304      	movs	r3, #4
 8019c60:	e02c      	b.n	8019cbc <RegionKR920ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8019c62:	200d      	movs	r0, #13
 8019c64:	0004      	movs	r4, r0
 8019c66:	183b      	adds	r3, r7, r0
 8019c68:	781a      	ldrb	r2, [r3, #0]
 8019c6a:	0013      	movs	r3, r2
 8019c6c:	005b      	lsls	r3, r3, #1
 8019c6e:	189b      	adds	r3, r3, r2
 8019c70:	009b      	lsls	r3, r3, #2
 8019c72:	4a14      	ldr	r2, [pc, #80]	; (8019cc4 <RegionKR920ChannelAdd+0x170>)
 8019c74:	1898      	adds	r0, r3, r2
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	220c      	movs	r2, #12
 8019c7c:	0019      	movs	r1, r3
 8019c7e:	f003 f82d 	bl	801ccdc <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8019c82:	0020      	movs	r0, r4
 8019c84:	183b      	adds	r3, r7, r0
 8019c86:	781a      	ldrb	r2, [r3, #0]
 8019c88:	490e      	ldr	r1, [pc, #56]	; (8019cc4 <RegionKR920ChannelAdd+0x170>)
 8019c8a:	0013      	movs	r3, r2
 8019c8c:	005b      	lsls	r3, r3, #1
 8019c8e:	189b      	adds	r3, r3, r2
 8019c90:	009b      	lsls	r3, r3, #2
 8019c92:	18cb      	adds	r3, r1, r3
 8019c94:	3309      	adds	r3, #9
 8019c96:	2200      	movs	r2, #0
 8019c98:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8019c9a:	4b0a      	ldr	r3, [pc, #40]	; (8019cc4 <RegionKR920ChannelAdd+0x170>)
 8019c9c:	22d0      	movs	r2, #208	; 0xd0
 8019c9e:	5a9b      	ldrh	r3, [r3, r2]
 8019ca0:	b21a      	sxth	r2, r3
 8019ca2:	183b      	adds	r3, r7, r0
 8019ca4:	781b      	ldrb	r3, [r3, #0]
 8019ca6:	2101      	movs	r1, #1
 8019ca8:	4099      	lsls	r1, r3
 8019caa:	000b      	movs	r3, r1
 8019cac:	b21b      	sxth	r3, r3
 8019cae:	4313      	orrs	r3, r2
 8019cb0:	b21b      	sxth	r3, r3
 8019cb2:	b299      	uxth	r1, r3
 8019cb4:	4b03      	ldr	r3, [pc, #12]	; (8019cc4 <RegionKR920ChannelAdd+0x170>)
 8019cb6:	22d0      	movs	r2, #208	; 0xd0
 8019cb8:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 8019cba:	2300      	movs	r3, #0
}
 8019cbc:	0018      	movs	r0, r3
 8019cbe:	46bd      	mov	sp, r7
 8019cc0:	b005      	add	sp, #20
 8019cc2:	bd90      	pop	{r4, r7, pc}
 8019cc4:	200016f4 	.word	0x200016f4

08019cc8 <RegionKR920ChannelsRemove>:

bool RegionKR920ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019cc8:	b590      	push	{r4, r7, lr}
 8019cca:	b085      	sub	sp, #20
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019cd0:	210f      	movs	r1, #15
 8019cd2:	187b      	adds	r3, r7, r1
 8019cd4:	687a      	ldr	r2, [r7, #4]
 8019cd6:	7812      	ldrb	r2, [r2, #0]
 8019cd8:	701a      	strb	r2, [r3, #0]

    if( id < KR920_NUMB_DEFAULT_CHANNELS )
 8019cda:	187b      	adds	r3, r7, r1
 8019cdc:	781b      	ldrb	r3, [r3, #0]
 8019cde:	2b02      	cmp	r3, #2
 8019ce0:	d801      	bhi.n	8019ce6 <RegionKR920ChannelsRemove+0x1e>
    {
        return false;
 8019ce2:	2300      	movs	r3, #0
 8019ce4:	e015      	b.n	8019d12 <RegionKR920ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019ce6:	240f      	movs	r4, #15
 8019ce8:	193b      	adds	r3, r7, r4
 8019cea:	781a      	ldrb	r2, [r3, #0]
 8019cec:	490b      	ldr	r1, [pc, #44]	; (8019d1c <RegionKR920ChannelsRemove+0x54>)
 8019cee:	0013      	movs	r3, r2
 8019cf0:	005b      	lsls	r3, r3, #1
 8019cf2:	189b      	adds	r3, r3, r2
 8019cf4:	009b      	lsls	r3, r3, #2
 8019cf6:	18cb      	adds	r3, r1, r3
 8019cf8:	220c      	movs	r2, #12
 8019cfa:	2100      	movs	r1, #0
 8019cfc:	0018      	movs	r0, r3
 8019cfe:	f00c f917 	bl	8025f30 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, KR920_MAX_NB_CHANNELS );
 8019d02:	193b      	adds	r3, r7, r4
 8019d04:	7819      	ldrb	r1, [r3, #0]
 8019d06:	4b06      	ldr	r3, [pc, #24]	; (8019d20 <RegionKR920ChannelsRemove+0x58>)
 8019d08:	2210      	movs	r2, #16
 8019d0a:	0018      	movs	r0, r3
 8019d0c:	f7fa fb5e 	bl	80143cc <RegionCommonChanDisable>
 8019d10:	0003      	movs	r3, r0
}
 8019d12:	0018      	movs	r0, r3
 8019d14:	46bd      	mov	sp, r7
 8019d16:	b005      	add	sp, #20
 8019d18:	bd90      	pop	{r4, r7, pc}
 8019d1a:	46c0      	nop			; (mov r8, r8)
 8019d1c:	200016f4 	.word	0x200016f4
 8019d20:	200017c4 	.word	0x200017c4

08019d24 <RegionKR920ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionKR920ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019d24:	b590      	push	{r4, r7, lr}
 8019d26:	b085      	sub	sp, #20
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	0004      	movs	r4, r0
 8019d2c:	0008      	movs	r0, r1
 8019d2e:	0011      	movs	r1, r2
 8019d30:	1dfb      	adds	r3, r7, #7
 8019d32:	1c22      	adds	r2, r4, #0
 8019d34:	701a      	strb	r2, [r3, #0]
 8019d36:	1dbb      	adds	r3, r7, #6
 8019d38:	1c02      	adds	r2, r0, #0
 8019d3a:	701a      	strb	r2, [r3, #0]
 8019d3c:	1d7b      	adds	r3, r7, #5
 8019d3e:	1c0a      	adds	r2, r1, #0
 8019d40:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8019d42:	1dbb      	adds	r3, r7, #6
 8019d44:	781a      	ldrb	r2, [r3, #0]
 8019d46:	1d7b      	adds	r3, r7, #5
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	1ad3      	subs	r3, r2, r3
 8019d4c:	b2da      	uxtb	r2, r3
 8019d4e:	210f      	movs	r1, #15
 8019d50:	187b      	adds	r3, r7, r1
 8019d52:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8019d54:	187b      	adds	r3, r7, r1
 8019d56:	781b      	ldrb	r3, [r3, #0]
 8019d58:	2b7f      	cmp	r3, #127	; 0x7f
 8019d5a:	d903      	bls.n	8019d64 <RegionKR920ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8019d5c:	230f      	movs	r3, #15
 8019d5e:	18fb      	adds	r3, r7, r3
 8019d60:	2200      	movs	r2, #0
 8019d62:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8019d64:	230f      	movs	r3, #15
 8019d66:	18fb      	adds	r3, r7, r3
 8019d68:	781b      	ldrb	r3, [r3, #0]
}
 8019d6a:	0018      	movs	r0, r3
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	b005      	add	sp, #20
 8019d70:	bd90      	pop	{r4, r7, pc}

08019d72 <GetNextLowerTxDr>:
 */
static RegionRU864NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8019d72:	b580      	push	{r7, lr}
 8019d74:	b084      	sub	sp, #16
 8019d76:	af00      	add	r7, sp, #0
 8019d78:	0002      	movs	r2, r0
 8019d7a:	1dfb      	adds	r3, r7, #7
 8019d7c:	701a      	strb	r2, [r3, #0]
 8019d7e:	1dbb      	adds	r3, r7, #6
 8019d80:	1c0a      	adds	r2, r1, #0
 8019d82:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8019d84:	230f      	movs	r3, #15
 8019d86:	18fb      	adds	r3, r7, r3
 8019d88:	2200      	movs	r2, #0
 8019d8a:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8019d8c:	1dfa      	adds	r2, r7, #7
 8019d8e:	1dbb      	adds	r3, r7, #6
 8019d90:	7812      	ldrb	r2, [r2, #0]
 8019d92:	b252      	sxtb	r2, r2
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	b25b      	sxtb	r3, r3
 8019d98:	429a      	cmp	r2, r3
 8019d9a:	d105      	bne.n	8019da8 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8019d9c:	230f      	movs	r3, #15
 8019d9e:	18fb      	adds	r3, r7, r3
 8019da0:	1dba      	adds	r2, r7, #6
 8019da2:	7812      	ldrb	r2, [r2, #0]
 8019da4:	701a      	strb	r2, [r3, #0]
 8019da6:	e005      	b.n	8019db4 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 8019da8:	1dfb      	adds	r3, r7, #7
 8019daa:	781a      	ldrb	r2, [r3, #0]
 8019dac:	230f      	movs	r3, #15
 8019dae:	18fb      	adds	r3, r7, r3
 8019db0:	3a01      	subs	r2, #1
 8019db2:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8019db4:	230f      	movs	r3, #15
 8019db6:	18fb      	adds	r3, r7, r3
 8019db8:	781b      	ldrb	r3, [r3, #0]
 8019dba:	b25b      	sxtb	r3, r3
}
 8019dbc:	0018      	movs	r0, r3
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	b004      	add	sp, #16
 8019dc2:	bd80      	pop	{r7, pc}

08019dc4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
    switch( BandwidthsRU864[drIndex] )
 8019dcc:	4b09      	ldr	r3, [pc, #36]	; (8019df4 <GetBandwidth+0x30>)
 8019dce:	687a      	ldr	r2, [r7, #4]
 8019dd0:	0092      	lsls	r2, r2, #2
 8019dd2:	58d3      	ldr	r3, [r2, r3]
 8019dd4:	4a08      	ldr	r2, [pc, #32]	; (8019df8 <GetBandwidth+0x34>)
 8019dd6:	4293      	cmp	r3, r2
 8019dd8:	d004      	beq.n	8019de4 <GetBandwidth+0x20>
 8019dda:	4a08      	ldr	r2, [pc, #32]	; (8019dfc <GetBandwidth+0x38>)
 8019ddc:	4293      	cmp	r3, r2
 8019dde:	d003      	beq.n	8019de8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8019de0:	2300      	movs	r3, #0
 8019de2:	e002      	b.n	8019dea <GetBandwidth+0x26>
        case 250000:
            return 1;
 8019de4:	2301      	movs	r3, #1
 8019de6:	e000      	b.n	8019dea <GetBandwidth+0x26>
        case 500000:
            return 2;
 8019de8:	2302      	movs	r3, #2
    }
}
 8019dea:	0018      	movs	r0, r3
 8019dec:	46bd      	mov	sp, r7
 8019dee:	b002      	add	sp, #8
 8019df0:	bd80      	pop	{r7, pc}
 8019df2:	46c0      	nop			; (mov r8, r8)
 8019df4:	08028714 	.word	0x08028714
 8019df8:	0003d090 	.word	0x0003d090
 8019dfc:	0007a120 	.word	0x0007a120

08019e00 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8019e00:	b590      	push	{r4, r7, lr}
 8019e02:	b085      	sub	sp, #20
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	0004      	movs	r4, r0
 8019e08:	0008      	movs	r0, r1
 8019e0a:	0011      	movs	r1, r2
 8019e0c:	603b      	str	r3, [r7, #0]
 8019e0e:	1dfb      	adds	r3, r7, #7
 8019e10:	1c22      	adds	r2, r4, #0
 8019e12:	701a      	strb	r2, [r3, #0]
 8019e14:	1dbb      	adds	r3, r7, #6
 8019e16:	1c02      	adds	r2, r0, #0
 8019e18:	701a      	strb	r2, [r3, #0]
 8019e1a:	1d7b      	adds	r3, r7, #5
 8019e1c:	1c0a      	adds	r2, r1, #0
 8019e1e:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8019e20:	210f      	movs	r1, #15
 8019e22:	187b      	adds	r3, r7, r1
 8019e24:	1dfa      	adds	r2, r7, #7
 8019e26:	7812      	ldrb	r2, [r2, #0]
 8019e28:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8019e2a:	187a      	adds	r2, r7, r1
 8019e2c:	1dbb      	adds	r3, r7, #6
 8019e2e:	1df9      	adds	r1, r7, #7
 8019e30:	780c      	ldrb	r4, [r1, #0]
 8019e32:	781b      	ldrb	r3, [r3, #0]
 8019e34:	b258      	sxtb	r0, r3
 8019e36:	b261      	sxtb	r1, r4
 8019e38:	4288      	cmp	r0, r1
 8019e3a:	da00      	bge.n	8019e3e <LimitTxPower+0x3e>
 8019e3c:	1c23      	adds	r3, r4, #0
 8019e3e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8019e40:	230f      	movs	r3, #15
 8019e42:	18fb      	adds	r3, r7, r3
 8019e44:	781b      	ldrb	r3, [r3, #0]
 8019e46:	b25b      	sxtb	r3, r3
}
 8019e48:	0018      	movs	r0, r3
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	b005      	add	sp, #20
 8019e4e:	bd90      	pop	{r4, r7, pc}

08019e50 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b082      	sub	sp, #8
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8019e58:	4b0e      	ldr	r3, [pc, #56]	; (8019e94 <VerifyRfFreq+0x44>)
 8019e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e5c:	687a      	ldr	r2, [r7, #4]
 8019e5e:	0010      	movs	r0, r2
 8019e60:	4798      	blx	r3
 8019e62:	0003      	movs	r3, r0
 8019e64:	001a      	movs	r2, r3
 8019e66:	2301      	movs	r3, #1
 8019e68:	4053      	eors	r3, r2
 8019e6a:	b2db      	uxtb	r3, r3
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d001      	beq.n	8019e74 <VerifyRfFreq+0x24>
    {
        return false;
 8019e70:	2300      	movs	r3, #0
 8019e72:	e00a      	b.n	8019e8a <VerifyRfFreq+0x3a>
    }

    // Check frequency bands
    if( ( freq < 864000000 ) ||  ( freq > 870000000 ) )
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	4a08      	ldr	r2, [pc, #32]	; (8019e98 <VerifyRfFreq+0x48>)
 8019e78:	4293      	cmp	r3, r2
 8019e7a:	d903      	bls.n	8019e84 <VerifyRfFreq+0x34>
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	4a07      	ldr	r2, [pc, #28]	; (8019e9c <VerifyRfFreq+0x4c>)
 8019e80:	4293      	cmp	r3, r2
 8019e82:	d901      	bls.n	8019e88 <VerifyRfFreq+0x38>
    {
        return false;
 8019e84:	2300      	movs	r3, #0
 8019e86:	e000      	b.n	8019e8a <VerifyRfFreq+0x3a>
    }
    return true;
 8019e88:	2301      	movs	r3, #1
}
 8019e8a:	0018      	movs	r0, r3
 8019e8c:	46bd      	mov	sp, r7
 8019e8e:	b002      	add	sp, #8
 8019e90:	bd80      	pop	{r7, pc}
 8019e92:	46c0      	nop			; (mov r8, r8)
 8019e94:	08028964 	.word	0x08028964
 8019e98:	337f97ff 	.word	0x337f97ff
 8019e9c:	33db2580 	.word	0x33db2580

08019ea0 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8019ea0:	b5b0      	push	{r4, r5, r7, lr}
 8019ea2:	b086      	sub	sp, #24
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	60ba      	str	r2, [r7, #8]
 8019ea8:	607b      	str	r3, [r7, #4]
 8019eaa:	230f      	movs	r3, #15
 8019eac:	18fb      	adds	r3, r7, r3
 8019eae:	1c02      	adds	r2, r0, #0
 8019eb0:	701a      	strb	r2, [r3, #0]
 8019eb2:	230e      	movs	r3, #14
 8019eb4:	18fb      	adds	r3, r7, r3
 8019eb6:	1c0a      	adds	r2, r1, #0
 8019eb8:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8019eba:	2317      	movs	r3, #23
 8019ebc:	18fb      	adds	r3, r7, r3
 8019ebe:	2200      	movs	r2, #0
 8019ec0:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8019ec2:	2316      	movs	r3, #22
 8019ec4:	18fb      	adds	r3, r7, r3
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < RU864_MAX_NB_CHANNELS; i += 16, k++ )
 8019eca:	2315      	movs	r3, #21
 8019ecc:	18fb      	adds	r3, r7, r3
 8019ece:	2200      	movs	r2, #0
 8019ed0:	701a      	strb	r2, [r3, #0]
 8019ed2:	2314      	movs	r3, #20
 8019ed4:	18fb      	adds	r3, r7, r3
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	701a      	strb	r2, [r3, #0]
 8019eda:	e0b4      	b.n	801a046 <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8019edc:	2313      	movs	r3, #19
 8019ede:	18fb      	adds	r3, r7, r3
 8019ee0:	2200      	movs	r2, #0
 8019ee2:	701a      	strb	r2, [r3, #0]
 8019ee4:	e09d      	b.n	801a022 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8019ee6:	2314      	movs	r3, #20
 8019ee8:	18fb      	adds	r3, r7, r3
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	005b      	lsls	r3, r3, #1
 8019eee:	68ba      	ldr	r2, [r7, #8]
 8019ef0:	18d3      	adds	r3, r2, r3
 8019ef2:	881b      	ldrh	r3, [r3, #0]
 8019ef4:	001a      	movs	r2, r3
 8019ef6:	2313      	movs	r3, #19
 8019ef8:	18fb      	adds	r3, r7, r3
 8019efa:	781b      	ldrb	r3, [r3, #0]
 8019efc:	411a      	asrs	r2, r3
 8019efe:	0013      	movs	r3, r2
 8019f00:	2201      	movs	r2, #1
 8019f02:	4013      	ands	r3, r2
 8019f04:	d100      	bne.n	8019f08 <CountNbOfEnabledChannels+0x68>
 8019f06:	e086      	b.n	801a016 <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8019f08:	2315      	movs	r3, #21
 8019f0a:	18fb      	adds	r3, r7, r3
 8019f0c:	781a      	ldrb	r2, [r3, #0]
 8019f0e:	2313      	movs	r3, #19
 8019f10:	18fb      	adds	r3, r7, r3
 8019f12:	781b      	ldrb	r3, [r3, #0]
 8019f14:	18d3      	adds	r3, r2, r3
 8019f16:	001a      	movs	r2, r3
 8019f18:	0013      	movs	r3, r2
 8019f1a:	005b      	lsls	r3, r3, #1
 8019f1c:	189b      	adds	r3, r3, r2
 8019f1e:	009b      	lsls	r3, r3, #2
 8019f20:	001a      	movs	r2, r3
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	189b      	adds	r3, r3, r2
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d06f      	beq.n	801a00c <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8019f2c:	230f      	movs	r3, #15
 8019f2e:	18fb      	adds	r3, r7, r3
 8019f30:	781b      	ldrb	r3, [r3, #0]
 8019f32:	2201      	movs	r2, #1
 8019f34:	4053      	eors	r3, r2
 8019f36:	b2db      	uxtb	r3, r3
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d008      	beq.n	8019f4e <CountNbOfEnabledChannels+0xae>
                {
                    if( ( RU864_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8019f3c:	2313      	movs	r3, #19
 8019f3e:	18fb      	adds	r3, r7, r3
 8019f40:	781b      	ldrb	r3, [r3, #0]
 8019f42:	2203      	movs	r2, #3
 8019f44:	411a      	asrs	r2, r3
 8019f46:	0013      	movs	r3, r2
 8019f48:	2201      	movs	r2, #1
 8019f4a:	4013      	ands	r3, r2
 8019f4c:	d060      	beq.n	801a010 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8019f4e:	230e      	movs	r3, #14
 8019f50:	18fb      	adds	r3, r7, r3
 8019f52:	2000      	movs	r0, #0
 8019f54:	5618      	ldrsb	r0, [r3, r0]
 8019f56:	2415      	movs	r4, #21
 8019f58:	193b      	adds	r3, r7, r4
 8019f5a:	781a      	ldrb	r2, [r3, #0]
 8019f5c:	2513      	movs	r5, #19
 8019f5e:	197b      	adds	r3, r7, r5
 8019f60:	781b      	ldrb	r3, [r3, #0]
 8019f62:	18d3      	adds	r3, r2, r3
 8019f64:	001a      	movs	r2, r3
 8019f66:	0013      	movs	r3, r2
 8019f68:	005b      	lsls	r3, r3, #1
 8019f6a:	189b      	adds	r3, r3, r2
 8019f6c:	009b      	lsls	r3, r3, #2
 8019f6e:	001a      	movs	r2, r3
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	189b      	adds	r3, r3, r2
 8019f74:	7a1b      	ldrb	r3, [r3, #8]
 8019f76:	011b      	lsls	r3, r3, #4
 8019f78:	b25b      	sxtb	r3, r3
 8019f7a:	111b      	asrs	r3, r3, #4
 8019f7c:	b25b      	sxtb	r3, r3
 8019f7e:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8019f80:	193b      	adds	r3, r7, r4
 8019f82:	781a      	ldrb	r2, [r3, #0]
 8019f84:	197b      	adds	r3, r7, r5
 8019f86:	781b      	ldrb	r3, [r3, #0]
 8019f88:	18d3      	adds	r3, r2, r3
 8019f8a:	001a      	movs	r2, r3
 8019f8c:	0013      	movs	r3, r2
 8019f8e:	005b      	lsls	r3, r3, #1
 8019f90:	189b      	adds	r3, r3, r2
 8019f92:	009b      	lsls	r3, r3, #2
 8019f94:	001a      	movs	r2, r3
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	189b      	adds	r3, r3, r2
 8019f9a:	7a1b      	ldrb	r3, [r3, #8]
 8019f9c:	b25b      	sxtb	r3, r3
 8019f9e:	111b      	asrs	r3, r3, #4
 8019fa0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8019fa2:	001a      	movs	r2, r3
 8019fa4:	f7fa f9ec 	bl	8014380 <RegionCommonValueInRange>
 8019fa8:	1e03      	subs	r3, r0, #0
 8019faa:	d033      	beq.n	801a014 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8019fac:	2315      	movs	r3, #21
 8019fae:	18fb      	adds	r3, r7, r3
 8019fb0:	781a      	ldrb	r2, [r3, #0]
 8019fb2:	2313      	movs	r3, #19
 8019fb4:	18fb      	adds	r3, r7, r3
 8019fb6:	781b      	ldrb	r3, [r3, #0]
 8019fb8:	18d3      	adds	r3, r2, r3
 8019fba:	001a      	movs	r2, r3
 8019fbc:	0013      	movs	r3, r2
 8019fbe:	005b      	lsls	r3, r3, #1
 8019fc0:	189b      	adds	r3, r3, r2
 8019fc2:	009b      	lsls	r3, r3, #2
 8019fc4:	001a      	movs	r2, r3
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	189b      	adds	r3, r3, r2
 8019fca:	7a5b      	ldrb	r3, [r3, #9]
 8019fcc:	011b      	lsls	r3, r3, #4
 8019fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019fd0:	18d3      	adds	r3, r2, r3
 8019fd2:	68db      	ldr	r3, [r3, #12]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d006      	beq.n	8019fe6 <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8019fd8:	2116      	movs	r1, #22
 8019fda:	187b      	adds	r3, r7, r1
 8019fdc:	781a      	ldrb	r2, [r3, #0]
 8019fde:	187b      	adds	r3, r7, r1
 8019fe0:	3201      	adds	r2, #1
 8019fe2:	701a      	strb	r2, [r3, #0]
                    continue;
 8019fe4:	e017      	b.n	801a016 <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8019fe6:	2217      	movs	r2, #23
 8019fe8:	18bb      	adds	r3, r7, r2
 8019fea:	781b      	ldrb	r3, [r3, #0]
 8019fec:	18ba      	adds	r2, r7, r2
 8019fee:	1c59      	adds	r1, r3, #1
 8019ff0:	7011      	strb	r1, [r2, #0]
 8019ff2:	001a      	movs	r2, r3
 8019ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ff6:	189b      	adds	r3, r3, r2
 8019ff8:	2215      	movs	r2, #21
 8019ffa:	18b9      	adds	r1, r7, r2
 8019ffc:	2213      	movs	r2, #19
 8019ffe:	18ba      	adds	r2, r7, r2
 801a000:	7809      	ldrb	r1, [r1, #0]
 801a002:	7812      	ldrb	r2, [r2, #0]
 801a004:	188a      	adds	r2, r1, r2
 801a006:	b2d2      	uxtb	r2, r2
 801a008:	701a      	strb	r2, [r3, #0]
 801a00a:	e004      	b.n	801a016 <CountNbOfEnabledChannels+0x176>
                    continue;
 801a00c:	46c0      	nop			; (mov r8, r8)
 801a00e:	e002      	b.n	801a016 <CountNbOfEnabledChannels+0x176>
                        continue;
 801a010:	46c0      	nop			; (mov r8, r8)
 801a012:	e000      	b.n	801a016 <CountNbOfEnabledChannels+0x176>
                    continue;
 801a014:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801a016:	2113      	movs	r1, #19
 801a018:	187b      	adds	r3, r7, r1
 801a01a:	781a      	ldrb	r2, [r3, #0]
 801a01c:	187b      	adds	r3, r7, r1
 801a01e:	3201      	adds	r2, #1
 801a020:	701a      	strb	r2, [r3, #0]
 801a022:	2313      	movs	r3, #19
 801a024:	18fb      	adds	r3, r7, r3
 801a026:	781b      	ldrb	r3, [r3, #0]
 801a028:	2b0f      	cmp	r3, #15
 801a02a:	d800      	bhi.n	801a02e <CountNbOfEnabledChannels+0x18e>
 801a02c:	e75b      	b.n	8019ee6 <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < RU864_MAX_NB_CHANNELS; i += 16, k++ )
 801a02e:	2215      	movs	r2, #21
 801a030:	18bb      	adds	r3, r7, r2
 801a032:	18ba      	adds	r2, r7, r2
 801a034:	7812      	ldrb	r2, [r2, #0]
 801a036:	3210      	adds	r2, #16
 801a038:	701a      	strb	r2, [r3, #0]
 801a03a:	2114      	movs	r1, #20
 801a03c:	187b      	adds	r3, r7, r1
 801a03e:	781a      	ldrb	r2, [r3, #0]
 801a040:	187b      	adds	r3, r7, r1
 801a042:	3201      	adds	r2, #1
 801a044:	701a      	strb	r2, [r3, #0]
 801a046:	2315      	movs	r3, #21
 801a048:	18fb      	adds	r3, r7, r3
 801a04a:	781b      	ldrb	r3, [r3, #0]
 801a04c:	2b07      	cmp	r3, #7
 801a04e:	d800      	bhi.n	801a052 <CountNbOfEnabledChannels+0x1b2>
 801a050:	e744      	b.n	8019edc <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 801a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a054:	2216      	movs	r2, #22
 801a056:	18ba      	adds	r2, r7, r2
 801a058:	7812      	ldrb	r2, [r2, #0]
 801a05a:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801a05c:	2317      	movs	r3, #23
 801a05e:	18fb      	adds	r3, r7, r3
 801a060:	781b      	ldrb	r3, [r3, #0]
}
 801a062:	0018      	movs	r0, r3
 801a064:	46bd      	mov	sp, r7
 801a066:	b006      	add	sp, #24
 801a068:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a06c <RegionRU864GetPhyParam>:

PhyParam_t RegionRU864GetPhyParam( GetPhyParams_t* getPhy )
{
 801a06c:	b580      	push	{r7, lr}
 801a06e:	b084      	sub	sp, #16
 801a070:	af00      	add	r7, sp, #0
 801a072:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a074:	2308      	movs	r3, #8
 801a076:	18fb      	adds	r3, r7, r3
 801a078:	2200      	movs	r2, #0
 801a07a:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	781b      	ldrb	r3, [r3, #0]
 801a080:	2b31      	cmp	r3, #49	; 0x31
 801a082:	d900      	bls.n	801a086 <RegionRU864GetPhyParam+0x1a>
 801a084:	e0c4      	b.n	801a210 <RegionRU864GetPhyParam+0x1a4>
 801a086:	009a      	lsls	r2, r3, #2
 801a088:	4b69      	ldr	r3, [pc, #420]	; (801a230 <RegionRU864GetPhyParam+0x1c4>)
 801a08a:	18d3      	adds	r3, r2, r3
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = RU864_RX_MIN_DATARATE;
 801a090:	2308      	movs	r3, #8
 801a092:	18fb      	adds	r3, r7, r3
 801a094:	2200      	movs	r2, #0
 801a096:	601a      	str	r2, [r3, #0]
            break;
 801a098:	e0bb      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = RU864_TX_MIN_DATARATE;
 801a09a:	2308      	movs	r3, #8
 801a09c:	18fb      	adds	r3, r7, r3
 801a09e:	2200      	movs	r2, #0
 801a0a0:	601a      	str	r2, [r3, #0]
            break;
 801a0a2:	e0b6      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = RU864_DEFAULT_DATARATE;
 801a0a4:	2308      	movs	r3, #8
 801a0a6:	18fb      	adds	r3, r7, r3
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	601a      	str	r2, [r3, #0]
            break;
 801a0ac:	e0b1      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, RU864_TX_MIN_DATARATE );
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	785b      	ldrb	r3, [r3, #1]
 801a0b2:	b25b      	sxtb	r3, r3
 801a0b4:	2100      	movs	r1, #0
 801a0b6:	0018      	movs	r0, r3
 801a0b8:	f7ff fe5b 	bl	8019d72 <GetNextLowerTxDr>
 801a0bc:	0003      	movs	r3, r0
 801a0be:	001a      	movs	r2, r3
 801a0c0:	2308      	movs	r3, #8
 801a0c2:	18fb      	adds	r3, r7, r3
 801a0c4:	601a      	str	r2, [r3, #0]
            break;
 801a0c6:	e0a4      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = RU864_DEFAULT_TX_POWER;
 801a0c8:	2308      	movs	r3, #8
 801a0ca:	18fb      	adds	r3, r7, r3
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	601a      	str	r2, [r3, #0]
            break;
 801a0d0:	e09f      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = RU864_ADR_ACK_LIMIT;
 801a0d2:	2308      	movs	r3, #8
 801a0d4:	18fb      	adds	r3, r7, r3
 801a0d6:	2240      	movs	r2, #64	; 0x40
 801a0d8:	601a      	str	r2, [r3, #0]
            break;
 801a0da:	e09a      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = RU864_ADR_ACK_DELAY;
 801a0dc:	2308      	movs	r3, #8
 801a0de:	18fb      	adds	r3, r7, r3
 801a0e0:	2220      	movs	r2, #32
 801a0e2:	601a      	str	r2, [r3, #0]
            break;
 801a0e4:	e095      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateRU864[getPhy->Datarate];
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	785b      	ldrb	r3, [r3, #1]
 801a0ea:	b25b      	sxtb	r3, r3
 801a0ec:	001a      	movs	r2, r3
 801a0ee:	4b51      	ldr	r3, [pc, #324]	; (801a234 <RegionRU864GetPhyParam+0x1c8>)
 801a0f0:	5c9b      	ldrb	r3, [r3, r2]
 801a0f2:	001a      	movs	r2, r3
 801a0f4:	2308      	movs	r3, #8
 801a0f6:	18fb      	adds	r3, r7, r3
 801a0f8:	601a      	str	r2, [r3, #0]
            break;
 801a0fa:	e08a      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterRU864[getPhy->Datarate];
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	785b      	ldrb	r3, [r3, #1]
 801a100:	b25b      	sxtb	r3, r3
 801a102:	001a      	movs	r2, r3
 801a104:	4b4c      	ldr	r3, [pc, #304]	; (801a238 <RegionRU864GetPhyParam+0x1cc>)
 801a106:	5c9b      	ldrb	r3, [r3, r2]
 801a108:	001a      	movs	r2, r3
 801a10a:	2308      	movs	r3, #8
 801a10c:	18fb      	adds	r3, r7, r3
 801a10e:	601a      	str	r2, [r3, #0]
            break;
 801a110:	e07f      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = RU864_DUTY_CYCLE_ENABLED;
 801a112:	2308      	movs	r3, #8
 801a114:	18fb      	adds	r3, r7, r3
 801a116:	2201      	movs	r2, #1
 801a118:	601a      	str	r2, [r3, #0]
            break;
 801a11a:	e07a      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = RU864_MAX_RX_WINDOW;
 801a11c:	2308      	movs	r3, #8
 801a11e:	18fb      	adds	r3, r7, r3
 801a120:	4a46      	ldr	r2, [pc, #280]	; (801a23c <RegionRU864GetPhyParam+0x1d0>)
 801a122:	601a      	str	r2, [r3, #0]
            break;
 801a124:	e075      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = RU864_RECEIVE_DELAY1;
 801a126:	2308      	movs	r3, #8
 801a128:	18fb      	adds	r3, r7, r3
 801a12a:	22fa      	movs	r2, #250	; 0xfa
 801a12c:	0092      	lsls	r2, r2, #2
 801a12e:	601a      	str	r2, [r3, #0]
            break;
 801a130:	e06f      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = RU864_RECEIVE_DELAY2;
 801a132:	2308      	movs	r3, #8
 801a134:	18fb      	adds	r3, r7, r3
 801a136:	22fa      	movs	r2, #250	; 0xfa
 801a138:	00d2      	lsls	r2, r2, #3
 801a13a:	601a      	str	r2, [r3, #0]
            break;
 801a13c:	e069      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = RU864_JOIN_ACCEPT_DELAY1;
 801a13e:	2308      	movs	r3, #8
 801a140:	18fb      	adds	r3, r7, r3
 801a142:	4a3f      	ldr	r2, [pc, #252]	; (801a240 <RegionRU864GetPhyParam+0x1d4>)
 801a144:	601a      	str	r2, [r3, #0]
            break;
 801a146:	e064      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = RU864_JOIN_ACCEPT_DELAY2;
 801a148:	2308      	movs	r3, #8
 801a14a:	18fb      	adds	r3, r7, r3
 801a14c:	4a3d      	ldr	r2, [pc, #244]	; (801a244 <RegionRU864GetPhyParam+0x1d8>)
 801a14e:	601a      	str	r2, [r3, #0]
            break;
 801a150:	e05f      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = RU864_MAX_FCNT_GAP;
 801a152:	2308      	movs	r3, #8
 801a154:	18fb      	adds	r3, r7, r3
 801a156:	2280      	movs	r2, #128	; 0x80
 801a158:	01d2      	lsls	r2, r2, #7
 801a15a:	601a      	str	r2, [r3, #0]
            break;
 801a15c:	e059      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( RU864_ACKTIMEOUT + randr( -RU864_ACK_TIMEOUT_RND, RU864_ACK_TIMEOUT_RND ) );
 801a15e:	23fa      	movs	r3, #250	; 0xfa
 801a160:	009b      	lsls	r3, r3, #2
 801a162:	4a39      	ldr	r2, [pc, #228]	; (801a248 <RegionRU864GetPhyParam+0x1dc>)
 801a164:	0019      	movs	r1, r3
 801a166:	0010      	movs	r0, r2
 801a168:	f002 fda2 	bl	801ccb0 <randr>
 801a16c:	0003      	movs	r3, r0
 801a16e:	22fa      	movs	r2, #250	; 0xfa
 801a170:	00d2      	lsls	r2, r2, #3
 801a172:	4694      	mov	ip, r2
 801a174:	4463      	add	r3, ip
 801a176:	001a      	movs	r2, r3
 801a178:	2308      	movs	r3, #8
 801a17a:	18fb      	adds	r3, r7, r3
 801a17c:	601a      	str	r2, [r3, #0]
            break;
 801a17e:	e048      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = RU864_DEFAULT_RX1_DR_OFFSET;
 801a180:	2308      	movs	r3, #8
 801a182:	18fb      	adds	r3, r7, r3
 801a184:	2200      	movs	r2, #0
 801a186:	601a      	str	r2, [r3, #0]
            break;
 801a188:	e043      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = RU864_RX_WND_2_FREQ;
 801a18a:	2308      	movs	r3, #8
 801a18c:	18fb      	adds	r3, r7, r3
 801a18e:	4a2f      	ldr	r2, [pc, #188]	; (801a24c <RegionRU864GetPhyParam+0x1e0>)
 801a190:	601a      	str	r2, [r3, #0]
            break;
 801a192:	e03e      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = RU864_RX_WND_2_DR;
 801a194:	2308      	movs	r3, #8
 801a196:	18fb      	adds	r3, r7, r3
 801a198:	2200      	movs	r2, #0
 801a19a:	601a      	str	r2, [r3, #0]
            break;
 801a19c:	e039      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 801a19e:	2308      	movs	r3, #8
 801a1a0:	18fb      	adds	r3, r7, r3
 801a1a2:	4a2b      	ldr	r2, [pc, #172]	; (801a250 <RegionRU864GetPhyParam+0x1e4>)
 801a1a4:	601a      	str	r2, [r3, #0]
            break;
 801a1a6:	e034      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801a1a8:	2308      	movs	r3, #8
 801a1aa:	18fb      	adds	r3, r7, r3
 801a1ac:	4a29      	ldr	r2, [pc, #164]	; (801a254 <RegionRU864GetPhyParam+0x1e8>)
 801a1ae:	601a      	str	r2, [r3, #0]
            break;
 801a1b0:	e02f      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = RU864_MAX_NB_CHANNELS;
 801a1b2:	2308      	movs	r3, #8
 801a1b4:	18fb      	adds	r3, r7, r3
 801a1b6:	2208      	movs	r2, #8
 801a1b8:	601a      	str	r2, [r3, #0]
            break;
 801a1ba:	e02a      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801a1bc:	2308      	movs	r3, #8
 801a1be:	18fb      	adds	r3, r7, r3
 801a1c0:	4a25      	ldr	r2, [pc, #148]	; (801a258 <RegionRU864GetPhyParam+0x1ec>)
 801a1c2:	601a      	str	r2, [r3, #0]
            break;
 801a1c4:	e025      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 801a1c6:	2308      	movs	r3, #8
 801a1c8:	18fb      	adds	r3, r7, r3
 801a1ca:	2200      	movs	r2, #0
 801a1cc:	601a      	str	r2, [r3, #0]
            break;
 801a1ce:	e020      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = RU864_DEFAULT_MAX_EIRP;
 801a1d0:	2308      	movs	r3, #8
 801a1d2:	18fb      	adds	r3, r7, r3
 801a1d4:	2283      	movs	r2, #131	; 0x83
 801a1d6:	05d2      	lsls	r2, r2, #23
 801a1d8:	601a      	str	r2, [r3, #0]
            break;
 801a1da:	e01a      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = RU864_DEFAULT_ANTENNA_GAIN;
 801a1dc:	2308      	movs	r3, #8
 801a1de:	18fb      	adds	r3, r7, r3
 801a1e0:	4a1e      	ldr	r2, [pc, #120]	; (801a25c <RegionRU864GetPhyParam+0x1f0>)
 801a1e2:	601a      	str	r2, [r3, #0]
            break;
 801a1e4:	e015      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RU864_BEACON_CHANNEL_FREQ;
 801a1e6:	2308      	movs	r3, #8
 801a1e8:	18fb      	adds	r3, r7, r3
 801a1ea:	4a18      	ldr	r2, [pc, #96]	; (801a24c <RegionRU864GetPhyParam+0x1e0>)
 801a1ec:	601a      	str	r2, [r3, #0]
            break;
 801a1ee:	e010      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = RU864_BEACON_SIZE;
 801a1f0:	2108      	movs	r1, #8
 801a1f2:	187b      	adds	r3, r7, r1
 801a1f4:	2211      	movs	r2, #17
 801a1f6:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = RU864_RFU1_SIZE;
 801a1f8:	187b      	adds	r3, r7, r1
 801a1fa:	2202      	movs	r2, #2
 801a1fc:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = RU864_RFU2_SIZE;
 801a1fe:	187b      	adds	r3, r7, r1
 801a200:	2200      	movs	r2, #0
 801a202:	709a      	strb	r2, [r3, #2]
            break;
 801a204:	e005      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = RU864_BEACON_CHANNEL_DR;
 801a206:	2308      	movs	r3, #8
 801a208:	18fb      	adds	r3, r7, r3
 801a20a:	2203      	movs	r2, #3
 801a20c:	601a      	str	r2, [r3, #0]
            break;
 801a20e:	e000      	b.n	801a212 <RegionRU864GetPhyParam+0x1a6>
        }
        default:
        {
            break;
 801a210:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 801a212:	210c      	movs	r1, #12
 801a214:	187b      	adds	r3, r7, r1
 801a216:	2208      	movs	r2, #8
 801a218:	18ba      	adds	r2, r7, r2
 801a21a:	6812      	ldr	r2, [r2, #0]
 801a21c:	601a      	str	r2, [r3, #0]
 801a21e:	187b      	adds	r3, r7, r1
 801a220:	2200      	movs	r2, #0
 801a222:	681a      	ldr	r2, [r3, #0]
 801a224:	0013      	movs	r3, r2
}
 801a226:	0018      	movs	r0, r3
 801a228:	46bd      	mov	sp, r7
 801a22a:	b004      	add	sp, #16
 801a22c:	bd80      	pop	{r7, pc}
 801a22e:	46c0      	nop			; (mov r8, r8)
 801a230:	08028744 	.word	0x08028744
 801a234:	08028734 	.word	0x08028734
 801a238:	0802873c 	.word	0x0802873c
 801a23c:	00000bb8 	.word	0x00000bb8
 801a240:	00001388 	.word	0x00001388
 801a244:	00001770 	.word	0x00001770
 801a248:	fffffc18 	.word	0xfffffc18
 801a24c:	33cd69e0 	.word	0x33cd69e0
 801a250:	20001838 	.word	0x20001838
 801a254:	2000183a 	.word	0x2000183a
 801a258:	200017c8 	.word	0x200017c8
 801a25c:	4009999a 	.word	0x4009999a

0801a260 <RegionRU864SetBandTxDone>:

void RegionRU864SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b082      	sub	sp, #8
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	7858      	ldrb	r0, [r3, #1]
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	781b      	ldrb	r3, [r3, #0]
 801a270:	0019      	movs	r1, r3
 801a272:	4a0a      	ldr	r2, [pc, #40]	; (801a29c <RegionRU864SetBandTxDone+0x3c>)
 801a274:	000b      	movs	r3, r1
 801a276:	005b      	lsls	r3, r3, #1
 801a278:	185b      	adds	r3, r3, r1
 801a27a:	009b      	lsls	r3, r3, #2
 801a27c:	18d3      	adds	r3, r2, r3
 801a27e:	3309      	adds	r3, #9
 801a280:	781b      	ldrb	r3, [r3, #0]
 801a282:	3306      	adds	r3, #6
 801a284:	011a      	lsls	r2, r3, #4
 801a286:	4b05      	ldr	r3, [pc, #20]	; (801a29c <RegionRU864SetBandTxDone+0x3c>)
 801a288:	18d1      	adds	r1, r2, r3
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	685b      	ldr	r3, [r3, #4]
 801a28e:	001a      	movs	r2, r3
 801a290:	f7fa f94e 	bl	8014530 <RegionCommonSetBandTxDone>
}
 801a294:	46c0      	nop			; (mov r8, r8)
 801a296:	46bd      	mov	sp, r7
 801a298:	b002      	add	sp, #8
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	200017c8 	.word	0x200017c8

0801a2a0 <RegionRU864InitDefaults>:

void RegionRU864InitDefaults( InitDefaultsParams_t* params )
{
 801a2a0:	b590      	push	{r4, r7, lr}
 801a2a2:	b087      	sub	sp, #28
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
    Band_t bands[RU864_MAX_NB_BANDS] =
 801a2a8:	2108      	movs	r1, #8
 801a2aa:	187b      	adds	r3, r7, r1
 801a2ac:	2264      	movs	r2, #100	; 0x64
 801a2ae:	801a      	strh	r2, [r3, #0]
 801a2b0:	187b      	adds	r3, r7, r1
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	709a      	strb	r2, [r3, #2]
 801a2b6:	187b      	adds	r3, r7, r1
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	605a      	str	r2, [r3, #4]
 801a2bc:	187b      	adds	r3, r7, r1
 801a2be:	2200      	movs	r2, #0
 801a2c0:	609a      	str	r2, [r3, #8]
 801a2c2:	187b      	adds	r3, r7, r1
 801a2c4:	2200      	movs	r2, #0
 801a2c6:	60da      	str	r2, [r3, #12]
    {
        RU864_BAND0
    };

    switch( params->Type )
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	791b      	ldrb	r3, [r3, #4]
 801a2cc:	2b01      	cmp	r3, #1
 801a2ce:	d02b      	beq.n	801a328 <RegionRU864InitDefaults+0x88>
 801a2d0:	2b02      	cmp	r3, #2
 801a2d2:	d01d      	beq.n	801a310 <RegionRU864InitDefaults+0x70>
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d000      	beq.n	801a2da <RegionRU864InitDefaults+0x3a>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801a2d8:	e033      	b.n	801a342 <RegionRU864InitDefaults+0xa2>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * RU864_MAX_NB_BANDS );
 801a2da:	2308      	movs	r3, #8
 801a2dc:	18f9      	adds	r1, r7, r3
 801a2de:	4b1b      	ldr	r3, [pc, #108]	; (801a34c <RegionRU864InitDefaults+0xac>)
 801a2e0:	2210      	movs	r2, #16
 801a2e2:	0018      	movs	r0, r3
 801a2e4:	f002 fcfa 	bl	801ccdc <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) RU864_LC1;
 801a2e8:	4b19      	ldr	r3, [pc, #100]	; (801a350 <RegionRU864InitDefaults+0xb0>)
 801a2ea:	4a1a      	ldr	r2, [pc, #104]	; (801a354 <RegionRU864InitDefaults+0xb4>)
 801a2ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 801a2ee:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) RU864_LC2;
 801a2f0:	4b17      	ldr	r3, [pc, #92]	; (801a350 <RegionRU864InitDefaults+0xb0>)
 801a2f2:	4a19      	ldr	r2, [pc, #100]	; (801a358 <RegionRU864InitDefaults+0xb8>)
 801a2f4:	330c      	adds	r3, #12
 801a2f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 801a2f8:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 801a2fa:	4b15      	ldr	r3, [pc, #84]	; (801a350 <RegionRU864InitDefaults+0xb0>)
 801a2fc:	2272      	movs	r2, #114	; 0x72
 801a2fe:	2103      	movs	r1, #3
 801a300:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 801a302:	4916      	ldr	r1, [pc, #88]	; (801a35c <RegionRU864InitDefaults+0xbc>)
 801a304:	4b16      	ldr	r3, [pc, #88]	; (801a360 <RegionRU864InitDefaults+0xc0>)
 801a306:	2201      	movs	r2, #1
 801a308:	0018      	movs	r0, r3
 801a30a:	f7fa f8e2 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 801a30e:	e018      	b.n	801a342 <RegionRU864InitDefaults+0xa2>
            if( params->NvmCtx != 0 )
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d013      	beq.n	801a340 <RegionRU864InitDefaults+0xa0>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6819      	ldr	r1, [r3, #0]
 801a31c:	4b0c      	ldr	r3, [pc, #48]	; (801a350 <RegionRU864InitDefaults+0xb0>)
 801a31e:	2274      	movs	r2, #116	; 0x74
 801a320:	0018      	movs	r0, r3
 801a322:	f002 fcdb 	bl	801ccdc <memcpy1>
            break;
 801a326:	e00b      	b.n	801a340 <RegionRU864InitDefaults+0xa0>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 801a328:	4b09      	ldr	r3, [pc, #36]	; (801a350 <RegionRU864InitDefaults+0xb0>)
 801a32a:	2270      	movs	r2, #112	; 0x70
 801a32c:	5a9a      	ldrh	r2, [r3, r2]
 801a32e:	4b08      	ldr	r3, [pc, #32]	; (801a350 <RegionRU864InitDefaults+0xb0>)
 801a330:	2172      	movs	r1, #114	; 0x72
 801a332:	5a5b      	ldrh	r3, [r3, r1]
 801a334:	4313      	orrs	r3, r2
 801a336:	b299      	uxth	r1, r3
 801a338:	4b05      	ldr	r3, [pc, #20]	; (801a350 <RegionRU864InitDefaults+0xb0>)
 801a33a:	2270      	movs	r2, #112	; 0x70
 801a33c:	5299      	strh	r1, [r3, r2]
            break;
 801a33e:	e000      	b.n	801a342 <RegionRU864InitDefaults+0xa2>
            break;
 801a340:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801a342:	46c0      	nop			; (mov r8, r8)
 801a344:	46bd      	mov	sp, r7
 801a346:	b007      	add	sp, #28
 801a348:	bd90      	pop	{r4, r7, pc}
 801a34a:	46c0      	nop			; (mov r8, r8)
 801a34c:	20001828 	.word	0x20001828
 801a350:	200017c8 	.word	0x200017c8
 801a354:	08026bd8 	.word	0x08026bd8
 801a358:	08026be4 	.word	0x08026be4
 801a35c:	2000183a 	.word	0x2000183a
 801a360:	20001838 	.word	0x20001838

0801a364 <RegionRU864ApplyCFList>:
            return false;
    }
}

void RegionRU864ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801a364:	b590      	push	{r4, r7, lr}
 801a366:	b08b      	sub	sp, #44	; 0x2c
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801a36c:	2318      	movs	r3, #24
 801a36e:	18fb      	adds	r3, r7, r3
 801a370:	2250      	movs	r2, #80	; 0x50
 801a372:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	791b      	ldrb	r3, [r3, #4]
 801a378:	2b10      	cmp	r3, #16
 801a37a:	d000      	beq.n	801a37e <RegionRU864ApplyCFList+0x1a>
 801a37c:	e07d      	b.n	801a47a <RegionRU864ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	330f      	adds	r3, #15
 801a384:	781b      	ldrb	r3, [r3, #0]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d000      	beq.n	801a38c <RegionRU864ApplyCFList+0x28>
 801a38a:	e078      	b.n	801a47e <RegionRU864ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801a38c:	2327      	movs	r3, #39	; 0x27
 801a38e:	18fb      	adds	r3, r7, r3
 801a390:	2200      	movs	r2, #0
 801a392:	701a      	strb	r2, [r3, #0]
 801a394:	2326      	movs	r3, #38	; 0x26
 801a396:	18fb      	adds	r3, r7, r3
 801a398:	2202      	movs	r2, #2
 801a39a:	701a      	strb	r2, [r3, #0]
 801a39c:	e067      	b.n	801a46e <RegionRU864ApplyCFList+0x10a>
    {
        if( chanIdx < ( RU864_NUMB_CHANNELS_CF_LIST + RU864_NUMB_DEFAULT_CHANNELS ) )
 801a39e:	2326      	movs	r3, #38	; 0x26
 801a3a0:	18fb      	adds	r3, r7, r3
 801a3a2:	781b      	ldrb	r3, [r3, #0]
 801a3a4:	2b06      	cmp	r3, #6
 801a3a6:	d82e      	bhi.n	801a406 <RegionRU864ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	681a      	ldr	r2, [r3, #0]
 801a3ac:	2427      	movs	r4, #39	; 0x27
 801a3ae:	193b      	adds	r3, r7, r4
 801a3b0:	781b      	ldrb	r3, [r3, #0]
 801a3b2:	18d3      	adds	r3, r2, r3
 801a3b4:	781b      	ldrb	r3, [r3, #0]
 801a3b6:	001a      	movs	r2, r3
 801a3b8:	2018      	movs	r0, #24
 801a3ba:	183b      	adds	r3, r7, r0
 801a3bc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801a3be:	183b      	adds	r3, r7, r0
 801a3c0:	681a      	ldr	r2, [r3, #0]
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	6819      	ldr	r1, [r3, #0]
 801a3c6:	193b      	adds	r3, r7, r4
 801a3c8:	781b      	ldrb	r3, [r3, #0]
 801a3ca:	3301      	adds	r3, #1
 801a3cc:	18cb      	adds	r3, r1, r3
 801a3ce:	781b      	ldrb	r3, [r3, #0]
 801a3d0:	021b      	lsls	r3, r3, #8
 801a3d2:	431a      	orrs	r2, r3
 801a3d4:	183b      	adds	r3, r7, r0
 801a3d6:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801a3d8:	183b      	adds	r3, r7, r0
 801a3da:	681a      	ldr	r2, [r3, #0]
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	6819      	ldr	r1, [r3, #0]
 801a3e0:	193b      	adds	r3, r7, r4
 801a3e2:	781b      	ldrb	r3, [r3, #0]
 801a3e4:	3302      	adds	r3, #2
 801a3e6:	18cb      	adds	r3, r1, r3
 801a3e8:	781b      	ldrb	r3, [r3, #0]
 801a3ea:	041b      	lsls	r3, r3, #16
 801a3ec:	431a      	orrs	r2, r3
 801a3ee:	183b      	adds	r3, r7, r0
 801a3f0:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 801a3f2:	183b      	adds	r3, r7, r0
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	2264      	movs	r2, #100	; 0x64
 801a3f8:	435a      	muls	r2, r3
 801a3fa:	183b      	adds	r3, r7, r0
 801a3fc:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801a3fe:	183b      	adds	r3, r7, r0
 801a400:	2200      	movs	r2, #0
 801a402:	605a      	str	r2, [r3, #4]
 801a404:	e009      	b.n	801a41a <RegionRU864ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 801a406:	2118      	movs	r1, #24
 801a408:	187b      	adds	r3, r7, r1
 801a40a:	2200      	movs	r2, #0
 801a40c:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 801a40e:	187b      	adds	r3, r7, r1
 801a410:	2200      	movs	r2, #0
 801a412:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 801a414:	187b      	adds	r3, r7, r1
 801a416:	2200      	movs	r2, #0
 801a418:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 801a41a:	2318      	movs	r3, #24
 801a41c:	18fb      	adds	r3, r7, r3
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d00e      	beq.n	801a442 <RegionRU864ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 801a424:	2110      	movs	r1, #16
 801a426:	187b      	adds	r3, r7, r1
 801a428:	2218      	movs	r2, #24
 801a42a:	18ba      	adds	r2, r7, r2
 801a42c:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 801a42e:	187b      	adds	r3, r7, r1
 801a430:	2226      	movs	r2, #38	; 0x26
 801a432:	18ba      	adds	r2, r7, r2
 801a434:	7812      	ldrb	r2, [r2, #0]
 801a436:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionRU864ChannelAdd( &channelAdd );
 801a438:	187b      	adds	r3, r7, r1
 801a43a:	0018      	movs	r0, r3
 801a43c:	f000 fd7c 	bl	801af38 <RegionRU864ChannelAdd>
 801a440:	e009      	b.n	801a456 <RegionRU864ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801a442:	210c      	movs	r1, #12
 801a444:	187b      	adds	r3, r7, r1
 801a446:	2226      	movs	r2, #38	; 0x26
 801a448:	18ba      	adds	r2, r7, r2
 801a44a:	7812      	ldrb	r2, [r2, #0]
 801a44c:	701a      	strb	r2, [r3, #0]

            RegionRU864ChannelsRemove( &channelRemove );
 801a44e:	187b      	adds	r3, r7, r1
 801a450:	0018      	movs	r0, r3
 801a452:	f000 fe2b 	bl	801b0ac <RegionRU864ChannelsRemove>
    for( uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801a456:	2227      	movs	r2, #39	; 0x27
 801a458:	18bb      	adds	r3, r7, r2
 801a45a:	18ba      	adds	r2, r7, r2
 801a45c:	7812      	ldrb	r2, [r2, #0]
 801a45e:	3203      	adds	r2, #3
 801a460:	701a      	strb	r2, [r3, #0]
 801a462:	2126      	movs	r1, #38	; 0x26
 801a464:	187b      	adds	r3, r7, r1
 801a466:	781a      	ldrb	r2, [r3, #0]
 801a468:	187b      	adds	r3, r7, r1
 801a46a:	3201      	adds	r2, #1
 801a46c:	701a      	strb	r2, [r3, #0]
 801a46e:	2326      	movs	r3, #38	; 0x26
 801a470:	18fb      	adds	r3, r7, r3
 801a472:	781b      	ldrb	r3, [r3, #0]
 801a474:	2b07      	cmp	r3, #7
 801a476:	d992      	bls.n	801a39e <RegionRU864ApplyCFList+0x3a>
 801a478:	e002      	b.n	801a480 <RegionRU864ApplyCFList+0x11c>
        return;
 801a47a:	46c0      	nop			; (mov r8, r8)
 801a47c:	e000      	b.n	801a480 <RegionRU864ApplyCFList+0x11c>
        return;
 801a47e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801a480:	46bd      	mov	sp, r7
 801a482:	b00b      	add	sp, #44	; 0x2c
 801a484:	bd90      	pop	{r4, r7, pc}
	...

0801a488 <RegionRU864ComputeRxWindowParameters>:
    }
    return true;
}

void RegionRU864ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801a488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a48a:	b08b      	sub	sp, #44	; 0x2c
 801a48c:	af04      	add	r7, sp, #16
 801a48e:	60ba      	str	r2, [r7, #8]
 801a490:	607b      	str	r3, [r7, #4]
 801a492:	250f      	movs	r5, #15
 801a494:	197b      	adds	r3, r7, r5
 801a496:	1c02      	adds	r2, r0, #0
 801a498:	701a      	strb	r2, [r3, #0]
 801a49a:	230e      	movs	r3, #14
 801a49c:	18fb      	adds	r3, r7, r3
 801a49e:	1c0a      	adds	r2, r1, #0
 801a4a0:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	2400      	movs	r4, #0
 801a4a6:	613b      	str	r3, [r7, #16]
 801a4a8:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, RU864_RX_MAX_DATARATE );
 801a4aa:	197b      	adds	r3, r7, r5
 801a4ac:	781b      	ldrb	r3, [r3, #0]
 801a4ae:	b25a      	sxtb	r2, r3
 801a4b0:	2a07      	cmp	r2, #7
 801a4b2:	dd00      	ble.n	801a4b6 <RegionRU864ComputeRxWindowParameters+0x2e>
 801a4b4:	2307      	movs	r3, #7
 801a4b6:	b25a      	sxtb	r2, r3
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	785b      	ldrb	r3, [r3, #1]
 801a4c0:	b25b      	sxtb	r3, r3
 801a4c2:	0018      	movs	r0, r3
 801a4c4:	f7ff fc7e 	bl	8019dc4 <GetBandwidth>
 801a4c8:	0003      	movs	r3, r0
 801a4ca:	b2da      	uxtb	r2, r3
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	785b      	ldrb	r3, [r3, #1]
 801a4d4:	b25b      	sxtb	r3, r3
 801a4d6:	2b07      	cmp	r3, #7
 801a4d8:	d10d      	bne.n	801a4f6 <RegionRU864ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesRU864[rxConfigParams->Datarate] );
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	785b      	ldrb	r3, [r3, #1]
 801a4de:	b25b      	sxtb	r3, r3
 801a4e0:	001a      	movs	r2, r3
 801a4e2:	4b1b      	ldr	r3, [pc, #108]	; (801a550 <RegionRU864ComputeRxWindowParameters+0xc8>)
 801a4e4:	5c9b      	ldrb	r3, [r3, r2]
 801a4e6:	0018      	movs	r0, r3
 801a4e8:	f7fa fa5a 	bl	80149a0 <RegionCommonComputeSymbolTimeFsk>
 801a4ec:	0003      	movs	r3, r0
 801a4ee:	000c      	movs	r4, r1
 801a4f0:	613b      	str	r3, [r7, #16]
 801a4f2:	617c      	str	r4, [r7, #20]
 801a4f4:	e013      	b.n	801a51e <RegionRU864ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesRU864[rxConfigParams->Datarate], BandwidthsRU864[rxConfigParams->Datarate] );
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	785b      	ldrb	r3, [r3, #1]
 801a4fa:	b25b      	sxtb	r3, r3
 801a4fc:	001a      	movs	r2, r3
 801a4fe:	4b14      	ldr	r3, [pc, #80]	; (801a550 <RegionRU864ComputeRxWindowParameters+0xc8>)
 801a500:	5c98      	ldrb	r0, [r3, r2]
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	785b      	ldrb	r3, [r3, #1]
 801a506:	b25b      	sxtb	r3, r3
 801a508:	001a      	movs	r2, r3
 801a50a:	4b12      	ldr	r3, [pc, #72]	; (801a554 <RegionRU864ComputeRxWindowParameters+0xcc>)
 801a50c:	0092      	lsls	r2, r2, #2
 801a50e:	58d3      	ldr	r3, [r2, r3]
 801a510:	0019      	movs	r1, r3
 801a512:	f7fa fa19 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 801a516:	0003      	movs	r3, r0
 801a518:	000c      	movs	r4, r1
 801a51a:	613b      	str	r3, [r7, #16]
 801a51c:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801a51e:	4b0e      	ldr	r3, [pc, #56]	; (801a558 <RegionRU864ComputeRxWindowParameters+0xd0>)
 801a520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a522:	4798      	blx	r3
 801a524:	0006      	movs	r6, r0
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	3308      	adds	r3, #8
 801a52a:	687a      	ldr	r2, [r7, #4]
 801a52c:	320c      	adds	r2, #12
 801a52e:	68bd      	ldr	r5, [r7, #8]
 801a530:	210e      	movs	r1, #14
 801a532:	1879      	adds	r1, r7, r1
 801a534:	780c      	ldrb	r4, [r1, #0]
 801a536:	6938      	ldr	r0, [r7, #16]
 801a538:	6979      	ldr	r1, [r7, #20]
 801a53a:	9202      	str	r2, [sp, #8]
 801a53c:	9301      	str	r3, [sp, #4]
 801a53e:	9600      	str	r6, [sp, #0]
 801a540:	002b      	movs	r3, r5
 801a542:	0022      	movs	r2, r4
 801a544:	f7fa fa48 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 801a548:	46c0      	nop			; (mov r8, r8)
 801a54a:	46bd      	mov	sp, r7
 801a54c:	b007      	add	sp, #28
 801a54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a550:	0802870c 	.word	0x0802870c
 801a554:	08028714 	.word	0x08028714
 801a558:	08028964 	.word	0x08028964

0801a55c <RegionRU864RxConfig>:

bool RegionRU864RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a55e:	b091      	sub	sp, #68	; 0x44
 801a560:	af0a      	add	r7, sp, #40	; 0x28
 801a562:	6078      	str	r0, [r7, #4]
 801a564:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801a566:	230f      	movs	r3, #15
 801a568:	18fb      	adds	r3, r7, r3
 801a56a:	687a      	ldr	r2, [r7, #4]
 801a56c:	7852      	ldrb	r2, [r2, #1]
 801a56e:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801a570:	2316      	movs	r3, #22
 801a572:	18fb      	adds	r3, r7, r3
 801a574:	2200      	movs	r2, #0
 801a576:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 801a578:	230e      	movs	r3, #14
 801a57a:	18fb      	adds	r3, r7, r3
 801a57c:	2200      	movs	r2, #0
 801a57e:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	685b      	ldr	r3, [r3, #4]
 801a584:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801a586:	4b64      	ldr	r3, [pc, #400]	; (801a718 <RegionRU864RxConfig+0x1bc>)
 801a588:	68db      	ldr	r3, [r3, #12]
 801a58a:	4798      	blx	r3
 801a58c:	1e03      	subs	r3, r0, #0
 801a58e:	d001      	beq.n	801a594 <RegionRU864RxConfig+0x38>
    {
        return false;
 801a590:	2300      	movs	r3, #0
 801a592:	e0bc      	b.n	801a70e <RegionRU864RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	7cdb      	ldrb	r3, [r3, #19]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d122      	bne.n	801a5e2 <RegionRU864RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	781b      	ldrb	r3, [r3, #0]
 801a5a0:	0019      	movs	r1, r3
 801a5a2:	4a5e      	ldr	r2, [pc, #376]	; (801a71c <RegionRU864RxConfig+0x1c0>)
 801a5a4:	000b      	movs	r3, r1
 801a5a6:	005b      	lsls	r3, r3, #1
 801a5a8:	185b      	adds	r3, r3, r1
 801a5aa:	009b      	lsls	r3, r3, #2
 801a5ac:	589b      	ldr	r3, [r3, r2]
 801a5ae:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	781b      	ldrb	r3, [r3, #0]
 801a5b4:	0019      	movs	r1, r3
 801a5b6:	4a59      	ldr	r2, [pc, #356]	; (801a71c <RegionRU864RxConfig+0x1c0>)
 801a5b8:	000b      	movs	r3, r1
 801a5ba:	005b      	lsls	r3, r3, #1
 801a5bc:	185b      	adds	r3, r3, r1
 801a5be:	009b      	lsls	r3, r3, #2
 801a5c0:	18d3      	adds	r3, r2, r3
 801a5c2:	3304      	adds	r3, #4
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d00b      	beq.n	801a5e2 <RegionRU864RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	781b      	ldrb	r3, [r3, #0]
 801a5ce:	0019      	movs	r1, r3
 801a5d0:	4a52      	ldr	r2, [pc, #328]	; (801a71c <RegionRU864RxConfig+0x1c0>)
 801a5d2:	000b      	movs	r3, r1
 801a5d4:	005b      	lsls	r3, r3, #1
 801a5d6:	185b      	adds	r3, r3, r1
 801a5d8:	009b      	lsls	r3, r3, #2
 801a5da:	18d3      	adds	r3, r2, r3
 801a5dc:	3304      	adds	r3, #4
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesRU864[dr];
 801a5e2:	240f      	movs	r4, #15
 801a5e4:	193b      	adds	r3, r7, r4
 801a5e6:	781b      	ldrb	r3, [r3, #0]
 801a5e8:	b25b      	sxtb	r3, r3
 801a5ea:	4a4d      	ldr	r2, [pc, #308]	; (801a720 <RegionRU864RxConfig+0x1c4>)
 801a5ec:	5cd2      	ldrb	r2, [r2, r3]
 801a5ee:	230e      	movs	r3, #14
 801a5f0:	18fb      	adds	r3, r7, r3
 801a5f2:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801a5f4:	4b48      	ldr	r3, [pc, #288]	; (801a718 <RegionRU864RxConfig+0x1bc>)
 801a5f6:	695b      	ldr	r3, [r3, #20]
 801a5f8:	693a      	ldr	r2, [r7, #16]
 801a5fa:	0010      	movs	r0, r2
 801a5fc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801a5fe:	193b      	adds	r3, r7, r4
 801a600:	781b      	ldrb	r3, [r3, #0]
 801a602:	b25b      	sxtb	r3, r3
 801a604:	2b07      	cmp	r3, #7
 801a606:	d12f      	bne.n	801a668 <RegionRU864RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 801a608:	2117      	movs	r1, #23
 801a60a:	187b      	adds	r3, r7, r1
 801a60c:	2200      	movs	r2, #0
 801a60e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801a610:	4b41      	ldr	r3, [pc, #260]	; (801a718 <RegionRU864RxConfig+0x1bc>)
 801a612:	6a1c      	ldr	r4, [r3, #32]
 801a614:	230e      	movs	r3, #14
 801a616:	18fb      	adds	r3, r7, r3
 801a618:	2200      	movs	r2, #0
 801a61a:	569a      	ldrsb	r2, [r3, r2]
 801a61c:	0013      	movs	r3, r2
 801a61e:	015b      	lsls	r3, r3, #5
 801a620:	1a9b      	subs	r3, r3, r2
 801a622:	009b      	lsls	r3, r3, #2
 801a624:	189b      	adds	r3, r3, r2
 801a626:	00db      	lsls	r3, r3, #3
 801a628:	001e      	movs	r6, r3
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	689b      	ldr	r3, [r3, #8]
 801a62e:	b29b      	uxth	r3, r3
 801a630:	687a      	ldr	r2, [r7, #4]
 801a632:	7c92      	ldrb	r2, [r2, #18]
 801a634:	4d3b      	ldr	r5, [pc, #236]	; (801a724 <RegionRU864RxConfig+0x1c8>)
 801a636:	1879      	adds	r1, r7, r1
 801a638:	7808      	ldrb	r0, [r1, #0]
 801a63a:	9209      	str	r2, [sp, #36]	; 0x24
 801a63c:	2200      	movs	r2, #0
 801a63e:	9208      	str	r2, [sp, #32]
 801a640:	2200      	movs	r2, #0
 801a642:	9207      	str	r2, [sp, #28]
 801a644:	2200      	movs	r2, #0
 801a646:	9206      	str	r2, [sp, #24]
 801a648:	2201      	movs	r2, #1
 801a64a:	9205      	str	r2, [sp, #20]
 801a64c:	2200      	movs	r2, #0
 801a64e:	9204      	str	r2, [sp, #16]
 801a650:	2200      	movs	r2, #0
 801a652:	9203      	str	r2, [sp, #12]
 801a654:	9302      	str	r3, [sp, #8]
 801a656:	2305      	movs	r3, #5
 801a658:	9301      	str	r3, [sp, #4]
 801a65a:	4b33      	ldr	r3, [pc, #204]	; (801a728 <RegionRU864RxConfig+0x1cc>)
 801a65c:	9300      	str	r3, [sp, #0]
 801a65e:	2300      	movs	r3, #0
 801a660:	0032      	movs	r2, r6
 801a662:	0029      	movs	r1, r5
 801a664:	47a0      	blx	r4
 801a666:	e029      	b.n	801a6bc <RegionRU864RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 801a668:	2117      	movs	r1, #23
 801a66a:	187b      	adds	r3, r7, r1
 801a66c:	2201      	movs	r2, #1
 801a66e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801a670:	4b29      	ldr	r3, [pc, #164]	; (801a718 <RegionRU864RxConfig+0x1bc>)
 801a672:	6a1c      	ldr	r4, [r3, #32]
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	789b      	ldrb	r3, [r3, #2]
 801a678:	001e      	movs	r6, r3
 801a67a:	230e      	movs	r3, #14
 801a67c:	18fb      	adds	r3, r7, r3
 801a67e:	2500      	movs	r5, #0
 801a680:	575d      	ldrsb	r5, [r3, r5]
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	689b      	ldr	r3, [r3, #8]
 801a686:	b29b      	uxth	r3, r3
 801a688:	687a      	ldr	r2, [r7, #4]
 801a68a:	7c92      	ldrb	r2, [r2, #18]
 801a68c:	1879      	adds	r1, r7, r1
 801a68e:	7808      	ldrb	r0, [r1, #0]
 801a690:	9209      	str	r2, [sp, #36]	; 0x24
 801a692:	2201      	movs	r2, #1
 801a694:	9208      	str	r2, [sp, #32]
 801a696:	2200      	movs	r2, #0
 801a698:	9207      	str	r2, [sp, #28]
 801a69a:	2200      	movs	r2, #0
 801a69c:	9206      	str	r2, [sp, #24]
 801a69e:	2200      	movs	r2, #0
 801a6a0:	9205      	str	r2, [sp, #20]
 801a6a2:	2200      	movs	r2, #0
 801a6a4:	9204      	str	r2, [sp, #16]
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	9203      	str	r2, [sp, #12]
 801a6aa:	9302      	str	r3, [sp, #8]
 801a6ac:	2308      	movs	r3, #8
 801a6ae:	9301      	str	r3, [sp, #4]
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	9300      	str	r3, [sp, #0]
 801a6b4:	2301      	movs	r3, #1
 801a6b6:	002a      	movs	r2, r5
 801a6b8:	0031      	movs	r1, r6
 801a6ba:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	7c5b      	ldrb	r3, [r3, #17]
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d009      	beq.n	801a6d8 <RegionRU864RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterRU864[dr];
 801a6c4:	230f      	movs	r3, #15
 801a6c6:	18fb      	adds	r3, r7, r3
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	569a      	ldrsb	r2, [r3, r2]
 801a6cc:	2316      	movs	r3, #22
 801a6ce:	18fb      	adds	r3, r7, r3
 801a6d0:	4916      	ldr	r1, [pc, #88]	; (801a72c <RegionRU864RxConfig+0x1d0>)
 801a6d2:	5c8a      	ldrb	r2, [r1, r2]
 801a6d4:	701a      	strb	r2, [r3, #0]
 801a6d6:	e008      	b.n	801a6ea <RegionRU864RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateRU864[dr];
 801a6d8:	230f      	movs	r3, #15
 801a6da:	18fb      	adds	r3, r7, r3
 801a6dc:	2200      	movs	r2, #0
 801a6de:	569a      	ldrsb	r2, [r3, r2]
 801a6e0:	2316      	movs	r3, #22
 801a6e2:	18fb      	adds	r3, r7, r3
 801a6e4:	4912      	ldr	r1, [pc, #72]	; (801a730 <RegionRU864RxConfig+0x1d4>)
 801a6e6:	5c8a      	ldrb	r2, [r1, r2]
 801a6e8:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801a6ea:	4b0b      	ldr	r3, [pc, #44]	; (801a718 <RegionRU864RxConfig+0x1bc>)
 801a6ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6ee:	2216      	movs	r2, #22
 801a6f0:	18ba      	adds	r2, r7, r2
 801a6f2:	7812      	ldrb	r2, [r2, #0]
 801a6f4:	320d      	adds	r2, #13
 801a6f6:	b2d1      	uxtb	r1, r2
 801a6f8:	2217      	movs	r2, #23
 801a6fa:	18ba      	adds	r2, r7, r2
 801a6fc:	7812      	ldrb	r2, [r2, #0]
 801a6fe:	0010      	movs	r0, r2
 801a700:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	220f      	movs	r2, #15
 801a706:	18ba      	adds	r2, r7, r2
 801a708:	7812      	ldrb	r2, [r2, #0]
 801a70a:	701a      	strb	r2, [r3, #0]
    return true;
 801a70c:	2301      	movs	r3, #1
}
 801a70e:	0018      	movs	r0, r3
 801a710:	46bd      	mov	sp, r7
 801a712:	b007      	add	sp, #28
 801a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a716:	46c0      	nop			; (mov r8, r8)
 801a718:	08028964 	.word	0x08028964
 801a71c:	200017c8 	.word	0x200017c8
 801a720:	0802870c 	.word	0x0802870c
 801a724:	0000c350 	.word	0x0000c350
 801a728:	00014585 	.word	0x00014585
 801a72c:	0802873c 	.word	0x0802873c
 801a730:	08028734 	.word	0x08028734

0801a734 <RegionRU864TxConfig>:

bool RegionRU864TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801a734:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a736:	b093      	sub	sp, #76	; 0x4c
 801a738:	af0a      	add	r7, sp, #40	; 0x28
 801a73a:	60f8      	str	r0, [r7, #12]
 801a73c:	60b9      	str	r1, [r7, #8]
 801a73e:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesRU864[txConfig->Datarate];
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	785b      	ldrb	r3, [r3, #1]
 801a744:	b25b      	sxtb	r3, r3
 801a746:	001a      	movs	r2, r3
 801a748:	4b60      	ldr	r3, [pc, #384]	; (801a8cc <RegionRU864TxConfig+0x198>)
 801a74a:	5c9a      	ldrb	r2, [r3, r2]
 801a74c:	231e      	movs	r3, #30
 801a74e:	18fb      	adds	r3, r7, r3
 801a750:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	2002      	movs	r0, #2
 801a756:	5618      	ldrsb	r0, [r3, r0]
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	781b      	ldrb	r3, [r3, #0]
 801a75c:	0019      	movs	r1, r3
 801a75e:	4a5c      	ldr	r2, [pc, #368]	; (801a8d0 <RegionRU864TxConfig+0x19c>)
 801a760:	000b      	movs	r3, r1
 801a762:	005b      	lsls	r3, r3, #1
 801a764:	185b      	adds	r3, r3, r1
 801a766:	009b      	lsls	r3, r3, #2
 801a768:	18d3      	adds	r3, r2, r3
 801a76a:	3309      	adds	r3, #9
 801a76c:	781b      	ldrb	r3, [r3, #0]
 801a76e:	4a58      	ldr	r2, [pc, #352]	; (801a8d0 <RegionRU864TxConfig+0x19c>)
 801a770:	3306      	adds	r3, #6
 801a772:	011b      	lsls	r3, r3, #4
 801a774:	18d3      	adds	r3, r2, r3
 801a776:	3302      	adds	r3, #2
 801a778:	2100      	movs	r1, #0
 801a77a:	5659      	ldrsb	r1, [r3, r1]
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	2201      	movs	r2, #1
 801a780:	569a      	ldrsb	r2, [r3, r2]
 801a782:	251d      	movs	r5, #29
 801a784:	197c      	adds	r4, r7, r5
 801a786:	4b53      	ldr	r3, [pc, #332]	; (801a8d4 <RegionRU864TxConfig+0x1a0>)
 801a788:	f7ff fb3a 	bl	8019e00 <LimitTxPower>
 801a78c:	0003      	movs	r3, r0
 801a78e:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	785b      	ldrb	r3, [r3, #1]
 801a794:	b25b      	sxtb	r3, r3
 801a796:	0018      	movs	r0, r3
 801a798:	f7ff fb14 	bl	8019dc4 <GetBandwidth>
 801a79c:	0003      	movs	r3, r0
 801a79e:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 801a7a0:	2017      	movs	r0, #23
 801a7a2:	183b      	adds	r3, r7, r0
 801a7a4:	2200      	movs	r2, #0
 801a7a6:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	6859      	ldr	r1, [r3, #4]
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	689a      	ldr	r2, [r3, #8]
 801a7b0:	183c      	adds	r4, r7, r0
 801a7b2:	197b      	adds	r3, r7, r5
 801a7b4:	781b      	ldrb	r3, [r3, #0]
 801a7b6:	b25b      	sxtb	r3, r3
 801a7b8:	0018      	movs	r0, r3
 801a7ba:	f7fa f991 	bl	8014ae0 <RegionCommonComputeTxPower>
 801a7be:	0003      	movs	r3, r0
 801a7c0:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801a7c2:	4b45      	ldr	r3, [pc, #276]	; (801a8d8 <RegionRU864TxConfig+0x1a4>)
 801a7c4:	695a      	ldr	r2, [r3, #20]
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	781b      	ldrb	r3, [r3, #0]
 801a7ca:	0018      	movs	r0, r3
 801a7cc:	4940      	ldr	r1, [pc, #256]	; (801a8d0 <RegionRU864TxConfig+0x19c>)
 801a7ce:	0003      	movs	r3, r0
 801a7d0:	005b      	lsls	r3, r3, #1
 801a7d2:	181b      	adds	r3, r3, r0
 801a7d4:	009b      	lsls	r3, r3, #2
 801a7d6:	585b      	ldr	r3, [r3, r1]
 801a7d8:	0018      	movs	r0, r3
 801a7da:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	785b      	ldrb	r3, [r3, #1]
 801a7e0:	b25b      	sxtb	r3, r3
 801a7e2:	2b07      	cmp	r3, #7
 801a7e4:	d12d      	bne.n	801a842 <RegionRU864TxConfig+0x10e>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801a7e6:	201f      	movs	r0, #31
 801a7e8:	183b      	adds	r3, r7, r0
 801a7ea:	2200      	movs	r2, #0
 801a7ec:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 801a7ee:	4b3a      	ldr	r3, [pc, #232]	; (801a8d8 <RegionRU864TxConfig+0x1a4>)
 801a7f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a7f2:	231e      	movs	r3, #30
 801a7f4:	18fb      	adds	r3, r7, r3
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	569a      	ldrsb	r2, [r3, r2]
 801a7fa:	0013      	movs	r3, r2
 801a7fc:	015b      	lsls	r3, r3, #5
 801a7fe:	1a9b      	subs	r3, r3, r2
 801a800:	009b      	lsls	r3, r3, #2
 801a802:	189b      	adds	r3, r3, r2
 801a804:	00db      	lsls	r3, r3, #3
 801a806:	001d      	movs	r5, r3
 801a808:	69ba      	ldr	r2, [r7, #24]
 801a80a:	4e34      	ldr	r6, [pc, #208]	; (801a8dc <RegionRU864TxConfig+0x1a8>)
 801a80c:	2317      	movs	r3, #23
 801a80e:	18fb      	adds	r3, r7, r3
 801a810:	2100      	movs	r1, #0
 801a812:	5659      	ldrsb	r1, [r3, r1]
 801a814:	183b      	adds	r3, r7, r0
 801a816:	7818      	ldrb	r0, [r3, #0]
 801a818:	4b31      	ldr	r3, [pc, #196]	; (801a8e0 <RegionRU864TxConfig+0x1ac>)
 801a81a:	9308      	str	r3, [sp, #32]
 801a81c:	2300      	movs	r3, #0
 801a81e:	9307      	str	r3, [sp, #28]
 801a820:	2300      	movs	r3, #0
 801a822:	9306      	str	r3, [sp, #24]
 801a824:	2300      	movs	r3, #0
 801a826:	9305      	str	r3, [sp, #20]
 801a828:	2301      	movs	r3, #1
 801a82a:	9304      	str	r3, [sp, #16]
 801a82c:	2300      	movs	r3, #0
 801a82e:	9303      	str	r3, [sp, #12]
 801a830:	2305      	movs	r3, #5
 801a832:	9302      	str	r3, [sp, #8]
 801a834:	2300      	movs	r3, #0
 801a836:	9301      	str	r3, [sp, #4]
 801a838:	9500      	str	r5, [sp, #0]
 801a83a:	0013      	movs	r3, r2
 801a83c:	0032      	movs	r2, r6
 801a83e:	47a0      	blx	r4
 801a840:	e024      	b.n	801a88c <RegionRU864TxConfig+0x158>
    }
    else
    {
        modem = MODEM_LORA;
 801a842:	201f      	movs	r0, #31
 801a844:	183b      	adds	r3, r7, r0
 801a846:	2201      	movs	r2, #1
 801a848:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 801a84a:	4b23      	ldr	r3, [pc, #140]	; (801a8d8 <RegionRU864TxConfig+0x1a4>)
 801a84c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a84e:	231e      	movs	r3, #30
 801a850:	18fb      	adds	r3, r7, r3
 801a852:	781b      	ldrb	r3, [r3, #0]
 801a854:	b25b      	sxtb	r3, r3
 801a856:	69bd      	ldr	r5, [r7, #24]
 801a858:	2217      	movs	r2, #23
 801a85a:	18ba      	adds	r2, r7, r2
 801a85c:	2100      	movs	r1, #0
 801a85e:	5651      	ldrsb	r1, [r2, r1]
 801a860:	183a      	adds	r2, r7, r0
 801a862:	7810      	ldrb	r0, [r2, #0]
 801a864:	4a1e      	ldr	r2, [pc, #120]	; (801a8e0 <RegionRU864TxConfig+0x1ac>)
 801a866:	9208      	str	r2, [sp, #32]
 801a868:	2200      	movs	r2, #0
 801a86a:	9207      	str	r2, [sp, #28]
 801a86c:	2200      	movs	r2, #0
 801a86e:	9206      	str	r2, [sp, #24]
 801a870:	2200      	movs	r2, #0
 801a872:	9205      	str	r2, [sp, #20]
 801a874:	2201      	movs	r2, #1
 801a876:	9204      	str	r2, [sp, #16]
 801a878:	2200      	movs	r2, #0
 801a87a:	9203      	str	r2, [sp, #12]
 801a87c:	2208      	movs	r2, #8
 801a87e:	9202      	str	r2, [sp, #8]
 801a880:	2201      	movs	r2, #1
 801a882:	9201      	str	r2, [sp, #4]
 801a884:	9300      	str	r3, [sp, #0]
 801a886:	002b      	movs	r3, r5
 801a888:	2200      	movs	r2, #0
 801a88a:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801a88c:	4b12      	ldr	r3, [pc, #72]	; (801a8d8 <RegionRU864TxConfig+0x1a4>)
 801a88e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a890:	68fa      	ldr	r2, [r7, #12]
 801a892:	8992      	ldrh	r2, [r2, #12]
 801a894:	b2d1      	uxtb	r1, r2
 801a896:	241f      	movs	r4, #31
 801a898:	193a      	adds	r2, r7, r4
 801a89a:	7812      	ldrb	r2, [r2, #0]
 801a89c:	0010      	movs	r0, r2
 801a89e:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 801a8a0:	4b0d      	ldr	r3, [pc, #52]	; (801a8d8 <RegionRU864TxConfig+0x1a4>)
 801a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8a4:	68fa      	ldr	r2, [r7, #12]
 801a8a6:	8992      	ldrh	r2, [r2, #12]
 801a8a8:	b2d1      	uxtb	r1, r2
 801a8aa:	193a      	adds	r2, r7, r4
 801a8ac:	7812      	ldrb	r2, [r2, #0]
 801a8ae:	0010      	movs	r0, r2
 801a8b0:	4798      	blx	r3
 801a8b2:	0002      	movs	r2, r0
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801a8b8:	68bb      	ldr	r3, [r7, #8]
 801a8ba:	221d      	movs	r2, #29
 801a8bc:	18ba      	adds	r2, r7, r2
 801a8be:	7812      	ldrb	r2, [r2, #0]
 801a8c0:	701a      	strb	r2, [r3, #0]
    return true;
 801a8c2:	2301      	movs	r3, #1
}
 801a8c4:	0018      	movs	r0, r3
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	b009      	add	sp, #36	; 0x24
 801a8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8cc:	0802870c 	.word	0x0802870c
 801a8d0:	200017c8 	.word	0x200017c8
 801a8d4:	20001838 	.word	0x20001838
 801a8d8:	08028964 	.word	0x08028964
 801a8dc:	000061a8 	.word	0x000061a8
 801a8e0:	00000bb8 	.word	0x00000bb8

0801a8e4 <RegionRU864LinkAdrReq>:

uint8_t RegionRU864LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801a8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8e6:	b093      	sub	sp, #76	; 0x4c
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	60f8      	str	r0, [r7, #12]
 801a8ec:	60b9      	str	r1, [r7, #8]
 801a8ee:	607a      	str	r2, [r7, #4]
 801a8f0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801a8f2:	2347      	movs	r3, #71	; 0x47
 801a8f4:	18fb      	adds	r3, r7, r3
 801a8f6:	2207      	movs	r2, #7
 801a8f8:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801a8fa:	2344      	movs	r3, #68	; 0x44
 801a8fc:	18fb      	adds	r3, r7, r3
 801a8fe:	2200      	movs	r2, #0
 801a900:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801a902:	2346      	movs	r3, #70	; 0x46
 801a904:	18fb      	adds	r3, r7, r3
 801a906:	2200      	movs	r2, #0
 801a908:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 801a90a:	233a      	movs	r3, #58	; 0x3a
 801a90c:	18fb      	adds	r3, r7, r3
 801a90e:	2200      	movs	r2, #0
 801a910:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801a912:	e09e      	b.n	801aa52 <RegionRU864LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	685a      	ldr	r2, [r3, #4]
 801a918:	2346      	movs	r3, #70	; 0x46
 801a91a:	18fb      	adds	r3, r7, r3
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	18d3      	adds	r3, r2, r3
 801a920:	2544      	movs	r5, #68	; 0x44
 801a922:	197c      	adds	r4, r7, r5
 801a924:	223c      	movs	r2, #60	; 0x3c
 801a926:	18ba      	adds	r2, r7, r2
 801a928:	0011      	movs	r1, r2
 801a92a:	0018      	movs	r0, r3
 801a92c:	f7f9 ff10 	bl	8014750 <RegionCommonParseLinkAdrReq>
 801a930:	0003      	movs	r3, r0
 801a932:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801a934:	197b      	adds	r3, r7, r5
 801a936:	781b      	ldrb	r3, [r3, #0]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d100      	bne.n	801a93e <RegionRU864LinkAdrReq+0x5a>
 801a93c:	e092      	b.n	801aa64 <RegionRU864LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801a93e:	2246      	movs	r2, #70	; 0x46
 801a940:	18bb      	adds	r3, r7, r2
 801a942:	18b9      	adds	r1, r7, r2
 801a944:	2244      	movs	r2, #68	; 0x44
 801a946:	18ba      	adds	r2, r7, r2
 801a948:	7809      	ldrb	r1, [r1, #0]
 801a94a:	7812      	ldrb	r2, [r2, #0]
 801a94c:	188a      	adds	r2, r1, r2
 801a94e:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801a950:	2347      	movs	r3, #71	; 0x47
 801a952:	18fb      	adds	r3, r7, r3
 801a954:	2207      	movs	r2, #7
 801a956:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801a958:	213c      	movs	r1, #60	; 0x3c
 801a95a:	187b      	adds	r3, r7, r1
 801a95c:	889a      	ldrh	r2, [r3, #4]
 801a95e:	233a      	movs	r3, #58	; 0x3a
 801a960:	18fb      	adds	r3, r7, r3
 801a962:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801a964:	187b      	adds	r3, r7, r1
 801a966:	78db      	ldrb	r3, [r3, #3]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d10c      	bne.n	801a986 <RegionRU864LinkAdrReq+0xa2>
 801a96c:	233a      	movs	r3, #58	; 0x3a
 801a96e:	18fb      	adds	r3, r7, r3
 801a970:	881b      	ldrh	r3, [r3, #0]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d107      	bne.n	801a986 <RegionRU864LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 801a976:	2247      	movs	r2, #71	; 0x47
 801a978:	18bb      	adds	r3, r7, r2
 801a97a:	18ba      	adds	r2, r7, r2
 801a97c:	7812      	ldrb	r2, [r2, #0]
 801a97e:	2101      	movs	r1, #1
 801a980:	438a      	bics	r2, r1
 801a982:	701a      	strb	r2, [r3, #0]
 801a984:	e065      	b.n	801aa52 <RegionRU864LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801a986:	233c      	movs	r3, #60	; 0x3c
 801a988:	18fb      	adds	r3, r7, r3
 801a98a:	78db      	ldrb	r3, [r3, #3]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d004      	beq.n	801a99a <RegionRU864LinkAdrReq+0xb6>
 801a990:	233c      	movs	r3, #60	; 0x3c
 801a992:	18fb      	adds	r3, r7, r3
 801a994:	78db      	ldrb	r3, [r3, #3]
 801a996:	2b05      	cmp	r3, #5
 801a998:	d904      	bls.n	801a9a4 <RegionRU864LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801a99a:	233c      	movs	r3, #60	; 0x3c
 801a99c:	18fb      	adds	r3, r7, r3
 801a99e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801a9a0:	2b06      	cmp	r3, #6
 801a9a2:	d907      	bls.n	801a9b4 <RegionRU864LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801a9a4:	2247      	movs	r2, #71	; 0x47
 801a9a6:	18bb      	adds	r3, r7, r2
 801a9a8:	18ba      	adds	r2, r7, r2
 801a9aa:	7812      	ldrb	r2, [r2, #0]
 801a9ac:	2101      	movs	r1, #1
 801a9ae:	438a      	bics	r2, r1
 801a9b0:	701a      	strb	r2, [r3, #0]
 801a9b2:	e04e      	b.n	801aa52 <RegionRU864LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 801a9b4:	2345      	movs	r3, #69	; 0x45
 801a9b6:	18fb      	adds	r3, r7, r3
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	701a      	strb	r2, [r3, #0]
 801a9bc:	e044      	b.n	801aa48 <RegionRU864LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801a9be:	233c      	movs	r3, #60	; 0x3c
 801a9c0:	18fb      	adds	r3, r7, r3
 801a9c2:	78db      	ldrb	r3, [r3, #3]
 801a9c4:	2b06      	cmp	r3, #6
 801a9c6:	d11b      	bne.n	801aa00 <RegionRU864LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 801a9c8:	2345      	movs	r3, #69	; 0x45
 801a9ca:	18fb      	adds	r3, r7, r3
 801a9cc:	781a      	ldrb	r2, [r3, #0]
 801a9ce:	496e      	ldr	r1, [pc, #440]	; (801ab88 <RegionRU864LinkAdrReq+0x2a4>)
 801a9d0:	0013      	movs	r3, r2
 801a9d2:	005b      	lsls	r3, r3, #1
 801a9d4:	189b      	adds	r3, r3, r2
 801a9d6:	009b      	lsls	r3, r3, #2
 801a9d8:	585b      	ldr	r3, [r3, r1]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d02e      	beq.n	801aa3c <RegionRU864LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 801a9de:	2345      	movs	r3, #69	; 0x45
 801a9e0:	18fb      	adds	r3, r7, r3
 801a9e2:	781b      	ldrb	r3, [r3, #0]
 801a9e4:	2201      	movs	r2, #1
 801a9e6:	409a      	lsls	r2, r3
 801a9e8:	0013      	movs	r3, r2
 801a9ea:	b21a      	sxth	r2, r3
 801a9ec:	213a      	movs	r1, #58	; 0x3a
 801a9ee:	187b      	adds	r3, r7, r1
 801a9f0:	881b      	ldrh	r3, [r3, #0]
 801a9f2:	b21b      	sxth	r3, r3
 801a9f4:	4313      	orrs	r3, r2
 801a9f6:	b21b      	sxth	r3, r3
 801a9f8:	b29a      	uxth	r2, r3
 801a9fa:	187b      	adds	r3, r7, r1
 801a9fc:	801a      	strh	r2, [r3, #0]
 801a9fe:	e01d      	b.n	801aa3c <RegionRU864LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801aa00:	233a      	movs	r3, #58	; 0x3a
 801aa02:	18fb      	adds	r3, r7, r3
 801aa04:	881b      	ldrh	r3, [r3, #0]
 801aa06:	001a      	movs	r2, r3
 801aa08:	2345      	movs	r3, #69	; 0x45
 801aa0a:	18fb      	adds	r3, r7, r3
 801aa0c:	781b      	ldrb	r3, [r3, #0]
 801aa0e:	411a      	asrs	r2, r3
 801aa10:	0013      	movs	r3, r2
 801aa12:	2201      	movs	r2, #1
 801aa14:	4013      	ands	r3, r2
 801aa16:	d011      	beq.n	801aa3c <RegionRU864LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 801aa18:	2345      	movs	r3, #69	; 0x45
 801aa1a:	18fb      	adds	r3, r7, r3
 801aa1c:	781a      	ldrb	r2, [r3, #0]
 801aa1e:	495a      	ldr	r1, [pc, #360]	; (801ab88 <RegionRU864LinkAdrReq+0x2a4>)
 801aa20:	0013      	movs	r3, r2
 801aa22:	005b      	lsls	r3, r3, #1
 801aa24:	189b      	adds	r3, r3, r2
 801aa26:	009b      	lsls	r3, r3, #2
 801aa28:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d106      	bne.n	801aa3c <RegionRU864LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801aa2e:	2247      	movs	r2, #71	; 0x47
 801aa30:	18bb      	adds	r3, r7, r2
 801aa32:	18ba      	adds	r2, r7, r2
 801aa34:	7812      	ldrb	r2, [r2, #0]
 801aa36:	2101      	movs	r1, #1
 801aa38:	438a      	bics	r2, r1
 801aa3a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++ )
 801aa3c:	2145      	movs	r1, #69	; 0x45
 801aa3e:	187b      	adds	r3, r7, r1
 801aa40:	781a      	ldrb	r2, [r3, #0]
 801aa42:	187b      	adds	r3, r7, r1
 801aa44:	3201      	adds	r2, #1
 801aa46:	701a      	strb	r2, [r3, #0]
 801aa48:	2345      	movs	r3, #69	; 0x45
 801aa4a:	18fb      	adds	r3, r7, r3
 801aa4c:	781b      	ldrb	r3, [r3, #0]
 801aa4e:	2b07      	cmp	r3, #7
 801aa50:	d9b5      	bls.n	801a9be <RegionRU864LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	7a1b      	ldrb	r3, [r3, #8]
 801aa56:	2246      	movs	r2, #70	; 0x46
 801aa58:	18ba      	adds	r2, r7, r2
 801aa5a:	7812      	ldrb	r2, [r2, #0]
 801aa5c:	429a      	cmp	r2, r3
 801aa5e:	d200      	bcs.n	801aa62 <RegionRU864LinkAdrReq+0x17e>
 801aa60:	e758      	b.n	801a914 <RegionRU864LinkAdrReq+0x30>
 801aa62:	e000      	b.n	801aa66 <RegionRU864LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 801aa64:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801aa66:	2134      	movs	r1, #52	; 0x34
 801aa68:	187b      	adds	r3, r7, r1
 801aa6a:	2201      	movs	r2, #1
 801aa6c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	7a5a      	ldrb	r2, [r3, #9]
 801aa72:	187b      	adds	r3, r7, r1
 801aa74:	709a      	strb	r2, [r3, #2]
    phyParam = RegionRU864GetPhyParam( &getPhy );
 801aa76:	187b      	adds	r3, r7, r1
 801aa78:	0018      	movs	r0, r3
 801aa7a:	f7ff faf7 	bl	801a06c <RegionRU864GetPhyParam>
 801aa7e:	0003      	movs	r3, r0
 801aa80:	001a      	movs	r2, r3
 801aa82:	2030      	movs	r0, #48	; 0x30
 801aa84:	183b      	adds	r3, r7, r0
 801aa86:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 801aa88:	2110      	movs	r1, #16
 801aa8a:	187b      	adds	r3, r7, r1
 801aa8c:	2447      	movs	r4, #71	; 0x47
 801aa8e:	193a      	adds	r2, r7, r4
 801aa90:	7812      	ldrb	r2, [r2, #0]
 801aa92:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	7a9a      	ldrb	r2, [r3, #10]
 801aa98:	187b      	adds	r3, r7, r1
 801aa9a:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801aa9c:	253c      	movs	r5, #60	; 0x3c
 801aa9e:	197b      	adds	r3, r7, r5
 801aaa0:	2201      	movs	r2, #1
 801aaa2:	569a      	ldrsb	r2, [r3, r2]
 801aaa4:	187b      	adds	r3, r7, r1
 801aaa6:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801aaa8:	197b      	adds	r3, r7, r5
 801aaaa:	2202      	movs	r2, #2
 801aaac:	569a      	ldrsb	r2, [r3, r2]
 801aaae:	187b      	adds	r3, r7, r1
 801aab0:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801aab2:	197b      	adds	r3, r7, r5
 801aab4:	781a      	ldrb	r2, [r3, #0]
 801aab6:	187b      	adds	r3, r7, r1
 801aab8:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	220b      	movs	r2, #11
 801aabe:	569a      	ldrsb	r2, [r3, r2]
 801aac0:	187b      	adds	r3, r7, r1
 801aac2:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	220c      	movs	r2, #12
 801aac8:	569a      	ldrsb	r2, [r3, r2]
 801aaca:	187b      	adds	r3, r7, r1
 801aacc:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	7b5b      	ldrb	r3, [r3, #13]
 801aad2:	b25a      	sxtb	r2, r3
 801aad4:	187b      	adds	r3, r7, r1
 801aad6:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = RU864_MAX_NB_CHANNELS;
 801aad8:	187b      	adds	r3, r7, r1
 801aada:	2208      	movs	r2, #8
 801aadc:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801aade:	187b      	adds	r3, r7, r1
 801aae0:	223a      	movs	r2, #58	; 0x3a
 801aae2:	18ba      	adds	r2, r7, r2
 801aae4:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801aae6:	183b      	adds	r3, r7, r0
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	b25a      	sxtb	r2, r3
 801aaec:	0008      	movs	r0, r1
 801aaee:	183b      	adds	r3, r7, r0
 801aaf0:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = RU864_TX_MAX_DATARATE;
 801aaf2:	183b      	adds	r3, r7, r0
 801aaf4:	2207      	movs	r2, #7
 801aaf6:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 801aaf8:	183b      	adds	r3, r7, r0
 801aafa:	4a23      	ldr	r2, [pc, #140]	; (801ab88 <RegionRU864LinkAdrReq+0x2a4>)
 801aafc:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = RU864_MIN_TX_POWER;
 801aafe:	183b      	adds	r3, r7, r0
 801ab00:	2207      	movs	r2, #7
 801ab02:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = RU864_MAX_TX_POWER;
 801ab04:	183b      	adds	r3, r7, r0
 801ab06:	2200      	movs	r2, #0
 801ab08:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801ab0a:	183b      	adds	r3, r7, r0
 801ab0c:	68fa      	ldr	r2, [r7, #12]
 801ab0e:	6812      	ldr	r2, [r2, #0]
 801ab10:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801ab12:	0026      	movs	r6, r4
 801ab14:	193c      	adds	r4, r7, r4
 801ab16:	0029      	movs	r1, r5
 801ab18:	187d      	adds	r5, r7, r1
 801ab1a:	187b      	adds	r3, r7, r1
 801ab1c:	1c9a      	adds	r2, r3, #2
 801ab1e:	187b      	adds	r3, r7, r1
 801ab20:	1c59      	adds	r1, r3, #1
 801ab22:	1838      	adds	r0, r7, r0
 801ab24:	002b      	movs	r3, r5
 801ab26:	f7f9 fe69 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 801ab2a:	0003      	movs	r3, r0
 801ab2c:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801ab2e:	0034      	movs	r4, r6
 801ab30:	193b      	adds	r3, r7, r4
 801ab32:	781b      	ldrb	r3, [r3, #0]
 801ab34:	2b07      	cmp	r3, #7
 801ab36:	d10b      	bne.n	801ab50 <RegionRU864LinkAdrReq+0x26c>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 801ab38:	4b14      	ldr	r3, [pc, #80]	; (801ab8c <RegionRU864LinkAdrReq+0x2a8>)
 801ab3a:	2202      	movs	r2, #2
 801ab3c:	2100      	movs	r1, #0
 801ab3e:	0018      	movs	r0, r3
 801ab40:	f002 f908 	bl	801cd54 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 801ab44:	233a      	movs	r3, #58	; 0x3a
 801ab46:	18fb      	adds	r3, r7, r3
 801ab48:	8819      	ldrh	r1, [r3, #0]
 801ab4a:	4b0f      	ldr	r3, [pc, #60]	; (801ab88 <RegionRU864LinkAdrReq+0x2a4>)
 801ab4c:	2270      	movs	r2, #112	; 0x70
 801ab4e:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801ab50:	213c      	movs	r1, #60	; 0x3c
 801ab52:	187b      	adds	r3, r7, r1
 801ab54:	2201      	movs	r2, #1
 801ab56:	569a      	ldrsb	r2, [r3, r2]
 801ab58:	68bb      	ldr	r3, [r7, #8]
 801ab5a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801ab5c:	187b      	adds	r3, r7, r1
 801ab5e:	2202      	movs	r2, #2
 801ab60:	569a      	ldrsb	r2, [r3, r2]
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801ab66:	187b      	adds	r3, r7, r1
 801ab68:	781a      	ldrb	r2, [r3, #0]
 801ab6a:	683b      	ldr	r3, [r7, #0]
 801ab6c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801ab6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ab70:	2246      	movs	r2, #70	; 0x46
 801ab72:	18ba      	adds	r2, r7, r2
 801ab74:	7812      	ldrb	r2, [r2, #0]
 801ab76:	701a      	strb	r2, [r3, #0]

    return status;
 801ab78:	2347      	movs	r3, #71	; 0x47
 801ab7a:	18fb      	adds	r3, r7, r3
 801ab7c:	781b      	ldrb	r3, [r3, #0]
}
 801ab7e:	0018      	movs	r0, r3
 801ab80:	46bd      	mov	sp, r7
 801ab82:	b013      	add	sp, #76	; 0x4c
 801ab84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab86:	46c0      	nop			; (mov r8, r8)
 801ab88:	200017c8 	.word	0x200017c8
 801ab8c:	20001838 	.word	0x20001838

0801ab90 <RegionRU864RxParamSetupReq>:

uint8_t RegionRU864RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b084      	sub	sp, #16
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801ab98:	230f      	movs	r3, #15
 801ab9a:	18fb      	adds	r3, r7, r3
 801ab9c:	2207      	movs	r2, #7
 801ab9e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	685b      	ldr	r3, [r3, #4]
 801aba4:	0018      	movs	r0, r3
 801aba6:	f7ff f953 	bl	8019e50 <VerifyRfFreq>
 801abaa:	0003      	movs	r3, r0
 801abac:	001a      	movs	r2, r3
 801abae:	2301      	movs	r3, #1
 801abb0:	4053      	eors	r3, r2
 801abb2:	b2db      	uxtb	r3, r3
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d006      	beq.n	801abc6 <RegionRU864RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 801abb8:	220f      	movs	r2, #15
 801abba:	18bb      	adds	r3, r7, r2
 801abbc:	18ba      	adds	r2, r7, r2
 801abbe:	7812      	ldrb	r2, [r2, #0]
 801abc0:	2101      	movs	r1, #1
 801abc2:	438a      	bics	r2, r1
 801abc4:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE ) == false )
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	781b      	ldrb	r3, [r3, #0]
 801abca:	b25b      	sxtb	r3, r3
 801abcc:	2207      	movs	r2, #7
 801abce:	2100      	movs	r1, #0
 801abd0:	0018      	movs	r0, r3
 801abd2:	f7f9 fbd5 	bl	8014380 <RegionCommonValueInRange>
 801abd6:	1e03      	subs	r3, r0, #0
 801abd8:	d106      	bne.n	801abe8 <RegionRU864RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801abda:	220f      	movs	r2, #15
 801abdc:	18bb      	adds	r3, r7, r2
 801abde:	18ba      	adds	r2, r7, r2
 801abe0:	7812      	ldrb	r2, [r2, #0]
 801abe2:	2102      	movs	r1, #2
 801abe4:	438a      	bics	r2, r1
 801abe6:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, RU864_MIN_RX1_DR_OFFSET, RU864_MAX_RX1_DR_OFFSET ) == false )
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	785b      	ldrb	r3, [r3, #1]
 801abec:	b25b      	sxtb	r3, r3
 801abee:	2205      	movs	r2, #5
 801abf0:	2100      	movs	r1, #0
 801abf2:	0018      	movs	r0, r3
 801abf4:	f7f9 fbc4 	bl	8014380 <RegionCommonValueInRange>
 801abf8:	1e03      	subs	r3, r0, #0
 801abfa:	d106      	bne.n	801ac0a <RegionRU864RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801abfc:	220f      	movs	r2, #15
 801abfe:	18bb      	adds	r3, r7, r2
 801ac00:	18ba      	adds	r2, r7, r2
 801ac02:	7812      	ldrb	r2, [r2, #0]
 801ac04:	2104      	movs	r1, #4
 801ac06:	438a      	bics	r2, r1
 801ac08:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801ac0a:	230f      	movs	r3, #15
 801ac0c:	18fb      	adds	r3, r7, r3
 801ac0e:	781b      	ldrb	r3, [r3, #0]
}
 801ac10:	0018      	movs	r0, r3
 801ac12:	46bd      	mov	sp, r7
 801ac14:	b004      	add	sp, #16
 801ac16:	bd80      	pop	{r7, pc}

0801ac18 <RegionRU864NewChannelReq>:

uint8_t RegionRU864NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b086      	sub	sp, #24
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801ac20:	2317      	movs	r3, #23
 801ac22:	18fb      	adds	r3, r7, r3
 801ac24:	2203      	movs	r2, #3
 801ac26:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d119      	bne.n	801ac66 <RegionRU864NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	791b      	ldrb	r3, [r3, #4]
 801ac36:	b25b      	sxtb	r3, r3
 801ac38:	b2da      	uxtb	r2, r3
 801ac3a:	2108      	movs	r1, #8
 801ac3c:	187b      	adds	r3, r7, r1
 801ac3e:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionRU864ChannelsRemove( &channelRemove ) == false )
 801ac40:	187b      	adds	r3, r7, r1
 801ac42:	0018      	movs	r0, r3
 801ac44:	f000 fa32 	bl	801b0ac <RegionRU864ChannelsRemove>
 801ac48:	0003      	movs	r3, r0
 801ac4a:	001a      	movs	r2, r3
 801ac4c:	2301      	movs	r3, #1
 801ac4e:	4053      	eors	r3, r2
 801ac50:	b2db      	uxtb	r3, r3
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d043      	beq.n	801acde <RegionRU864NewChannelReq+0xc6>
        {
            status &= 0xFC;
 801ac56:	2217      	movs	r2, #23
 801ac58:	18bb      	adds	r3, r7, r2
 801ac5a:	18ba      	adds	r2, r7, r2
 801ac5c:	7812      	ldrb	r2, [r2, #0]
 801ac5e:	2103      	movs	r1, #3
 801ac60:	438a      	bics	r2, r1
 801ac62:	701a      	strb	r2, [r3, #0]
 801ac64:	e03b      	b.n	801acde <RegionRU864NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681a      	ldr	r2, [r3, #0]
 801ac6a:	210c      	movs	r1, #12
 801ac6c:	187b      	adds	r3, r7, r1
 801ac6e:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	791b      	ldrb	r3, [r3, #4]
 801ac74:	b25b      	sxtb	r3, r3
 801ac76:	b2da      	uxtb	r2, r3
 801ac78:	187b      	adds	r3, r7, r1
 801ac7a:	711a      	strb	r2, [r3, #4]

        switch( RegionRU864ChannelAdd( &channelAdd ) )
 801ac7c:	187b      	adds	r3, r7, r1
 801ac7e:	0018      	movs	r0, r3
 801ac80:	f000 f95a 	bl	801af38 <RegionRU864ChannelAdd>
 801ac84:	0003      	movs	r3, r0
 801ac86:	2b04      	cmp	r3, #4
 801ac88:	d008      	beq.n	801ac9c <RegionRU864NewChannelReq+0x84>
 801ac8a:	dc02      	bgt.n	801ac92 <RegionRU864NewChannelReq+0x7a>
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d025      	beq.n	801acdc <RegionRU864NewChannelReq+0xc4>
 801ac90:	e01c      	b.n	801accc <RegionRU864NewChannelReq+0xb4>
 801ac92:	2b05      	cmp	r3, #5
 801ac94:	d00a      	beq.n	801acac <RegionRU864NewChannelReq+0x94>
 801ac96:	2b06      	cmp	r3, #6
 801ac98:	d010      	beq.n	801acbc <RegionRU864NewChannelReq+0xa4>
 801ac9a:	e017      	b.n	801accc <RegionRU864NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801ac9c:	2217      	movs	r2, #23
 801ac9e:	18bb      	adds	r3, r7, r2
 801aca0:	18ba      	adds	r2, r7, r2
 801aca2:	7812      	ldrb	r2, [r2, #0]
 801aca4:	2101      	movs	r1, #1
 801aca6:	438a      	bics	r2, r1
 801aca8:	701a      	strb	r2, [r3, #0]
                break;
 801acaa:	e018      	b.n	801acde <RegionRU864NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801acac:	2217      	movs	r2, #23
 801acae:	18bb      	adds	r3, r7, r2
 801acb0:	18ba      	adds	r2, r7, r2
 801acb2:	7812      	ldrb	r2, [r2, #0]
 801acb4:	2102      	movs	r1, #2
 801acb6:	438a      	bics	r2, r1
 801acb8:	701a      	strb	r2, [r3, #0]
                break;
 801acba:	e010      	b.n	801acde <RegionRU864NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801acbc:	2217      	movs	r2, #23
 801acbe:	18bb      	adds	r3, r7, r2
 801acc0:	18ba      	adds	r2, r7, r2
 801acc2:	7812      	ldrb	r2, [r2, #0]
 801acc4:	2103      	movs	r1, #3
 801acc6:	438a      	bics	r2, r1
 801acc8:	701a      	strb	r2, [r3, #0]
                break;
 801acca:	e008      	b.n	801acde <RegionRU864NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 801accc:	2217      	movs	r2, #23
 801acce:	18bb      	adds	r3, r7, r2
 801acd0:	18ba      	adds	r2, r7, r2
 801acd2:	7812      	ldrb	r2, [r2, #0]
 801acd4:	2103      	movs	r1, #3
 801acd6:	438a      	bics	r2, r1
 801acd8:	701a      	strb	r2, [r3, #0]
                break;
 801acda:	e000      	b.n	801acde <RegionRU864NewChannelReq+0xc6>
                break;
 801acdc:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801acde:	2317      	movs	r3, #23
 801ace0:	18fb      	adds	r3, r7, r3
 801ace2:	781b      	ldrb	r3, [r3, #0]
}
 801ace4:	0018      	movs	r0, r3
 801ace6:	46bd      	mov	sp, r7
 801ace8:	b006      	add	sp, #24
 801acea:	bd80      	pop	{r7, pc}

0801acec <RegionRU864TxParamSetupReq>:

int8_t RegionRU864TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b082      	sub	sp, #8
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]
    return -1;
 801acf4:	2301      	movs	r3, #1
 801acf6:	425b      	negs	r3, r3
}
 801acf8:	0018      	movs	r0, r3
 801acfa:	46bd      	mov	sp, r7
 801acfc:	b002      	add	sp, #8
 801acfe:	bd80      	pop	{r7, pc}

0801ad00 <RegionRU864DlChannelReq>:

uint8_t RegionRU864DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b084      	sub	sp, #16
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801ad08:	230f      	movs	r3, #15
 801ad0a:	18fb      	adds	r3, r7, r3
 801ad0c:	2203      	movs	r2, #3
 801ad0e:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	685b      	ldr	r3, [r3, #4]
 801ad14:	0018      	movs	r0, r3
 801ad16:	f7ff f89b 	bl	8019e50 <VerifyRfFreq>
 801ad1a:	0003      	movs	r3, r0
 801ad1c:	001a      	movs	r2, r3
 801ad1e:	2301      	movs	r3, #1
 801ad20:	4053      	eors	r3, r2
 801ad22:	b2db      	uxtb	r3, r3
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d006      	beq.n	801ad36 <RegionRU864DlChannelReq+0x36>
    {
        status &= 0xFE;
 801ad28:	220f      	movs	r2, #15
 801ad2a:	18bb      	adds	r3, r7, r2
 801ad2c:	18ba      	adds	r2, r7, r2
 801ad2e:	7812      	ldrb	r2, [r2, #0]
 801ad30:	2101      	movs	r1, #1
 801ad32:	438a      	bics	r2, r1
 801ad34:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	781b      	ldrb	r3, [r3, #0]
 801ad3a:	0019      	movs	r1, r3
 801ad3c:	4a13      	ldr	r2, [pc, #76]	; (801ad8c <RegionRU864DlChannelReq+0x8c>)
 801ad3e:	000b      	movs	r3, r1
 801ad40:	005b      	lsls	r3, r3, #1
 801ad42:	185b      	adds	r3, r3, r1
 801ad44:	009b      	lsls	r3, r3, #2
 801ad46:	589b      	ldr	r3, [r3, r2]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d106      	bne.n	801ad5a <RegionRU864DlChannelReq+0x5a>
    {
        status &= 0xFD;
 801ad4c:	220f      	movs	r2, #15
 801ad4e:	18bb      	adds	r3, r7, r2
 801ad50:	18ba      	adds	r2, r7, r2
 801ad52:	7812      	ldrb	r2, [r2, #0]
 801ad54:	2102      	movs	r1, #2
 801ad56:	438a      	bics	r2, r1
 801ad58:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801ad5a:	230f      	movs	r3, #15
 801ad5c:	18fb      	adds	r3, r7, r3
 801ad5e:	781b      	ldrb	r3, [r3, #0]
 801ad60:	2b03      	cmp	r3, #3
 801ad62:	d10c      	bne.n	801ad7e <RegionRU864DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	781b      	ldrb	r3, [r3, #0]
 801ad68:	0018      	movs	r0, r3
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	685a      	ldr	r2, [r3, #4]
 801ad6e:	4907      	ldr	r1, [pc, #28]	; (801ad8c <RegionRU864DlChannelReq+0x8c>)
 801ad70:	0003      	movs	r3, r0
 801ad72:	005b      	lsls	r3, r3, #1
 801ad74:	181b      	adds	r3, r3, r0
 801ad76:	009b      	lsls	r3, r3, #2
 801ad78:	18cb      	adds	r3, r1, r3
 801ad7a:	3304      	adds	r3, #4
 801ad7c:	601a      	str	r2, [r3, #0]
    }

    return status;
 801ad7e:	230f      	movs	r3, #15
 801ad80:	18fb      	adds	r3, r7, r3
 801ad82:	781b      	ldrb	r3, [r3, #0]
}
 801ad84:	0018      	movs	r0, r3
 801ad86:	46bd      	mov	sp, r7
 801ad88:	b004      	add	sp, #16
 801ad8a:	bd80      	pop	{r7, pc}
 801ad8c:	200017c8 	.word	0x200017c8

0801ad90 <RegionRU864CalcBackOff>:
{
    return currentDr;
}

void RegionRU864CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b088      	sub	sp, #32
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 801ad98:	210c      	movs	r1, #12
 801ad9a:	187b      	adds	r3, r7, r1
 801ad9c:	4a12      	ldr	r2, [pc, #72]	; (801ade8 <RegionRU864CalcBackOff+0x58>)
 801ad9e:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 801ada0:	187b      	adds	r3, r7, r1
 801ada2:	4a12      	ldr	r2, [pc, #72]	; (801adec <RegionRU864CalcBackOff+0x5c>)
 801ada4:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	785a      	ldrb	r2, [r3, #1]
 801adaa:	187b      	adds	r3, r7, r1
 801adac:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	781a      	ldrb	r2, [r3, #0]
 801adb2:	187b      	adds	r3, r7, r1
 801adb4:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	789a      	ldrb	r2, [r3, #2]
 801adba:	187b      	adds	r3, r7, r1
 801adbc:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	78da      	ldrb	r2, [r3, #3]
 801adc2:	187b      	adds	r3, r7, r1
 801adc4:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	685a      	ldr	r2, [r3, #4]
 801adca:	187b      	adds	r3, r7, r1
 801adcc:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	689a      	ldr	r2, [r3, #8]
 801add2:	187b      	adds	r3, r7, r1
 801add4:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801add6:	187b      	adds	r3, r7, r1
 801add8:	0018      	movs	r0, r3
 801adda:	f7f9 feb9 	bl	8014b50 <RegionCommonCalcBackOff>
}
 801adde:	46c0      	nop			; (mov r8, r8)
 801ade0:	46bd      	mov	sp, r7
 801ade2:	b008      	add	sp, #32
 801ade4:	bd80      	pop	{r7, pc}
 801ade6:	46c0      	nop			; (mov r8, r8)
 801ade8:	200017c8 	.word	0x200017c8
 801adec:	20001828 	.word	0x20001828

0801adf0 <RegionRU864NextChannel>:

LoRaMacStatus_t RegionRU864NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801adf0:	b5b0      	push	{r4, r5, r7, lr}
 801adf2:	b08e      	sub	sp, #56	; 0x38
 801adf4:	af04      	add	r7, sp, #16
 801adf6:	60f8      	str	r0, [r7, #12]
 801adf8:	60b9      	str	r1, [r7, #8]
 801adfa:	607a      	str	r2, [r7, #4]
 801adfc:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801adfe:	2327      	movs	r3, #39	; 0x27
 801ae00:	18fb      	adds	r3, r7, r3
 801ae02:	2200      	movs	r2, #0
 801ae04:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801ae06:	231f      	movs	r3, #31
 801ae08:	18fb      	adds	r3, r7, r3
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[RU864_MAX_NB_CHANNELS] = { 0 };
 801ae0e:	2314      	movs	r3, #20
 801ae10:	18fb      	adds	r3, r7, r3
 801ae12:	0018      	movs	r0, r3
 801ae14:	2308      	movs	r3, #8
 801ae16:	001a      	movs	r2, r3
 801ae18:	2100      	movs	r1, #0
 801ae1a:	f00b f889 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 801ae1e:	2300      	movs	r3, #0
 801ae20:	623b      	str	r3, [r7, #32]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801ae22:	4b42      	ldr	r3, [pc, #264]	; (801af2c <RegionRU864NextChannel+0x13c>)
 801ae24:	2201      	movs	r2, #1
 801ae26:	2100      	movs	r1, #0
 801ae28:	0018      	movs	r0, r3
 801ae2a:	f7f9 fb11 	bl	8014450 <RegionCommonCountChannels>
 801ae2e:	1e03      	subs	r3, r0, #0
 801ae30:	d108      	bne.n	801ae44 <RegionRU864NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801ae32:	4b3f      	ldr	r3, [pc, #252]	; (801af30 <RegionRU864NextChannel+0x140>)
 801ae34:	2270      	movs	r2, #112	; 0x70
 801ae36:	5a9b      	ldrh	r3, [r3, r2]
 801ae38:	2203      	movs	r2, #3
 801ae3a:	4313      	orrs	r3, r2
 801ae3c:	b299      	uxth	r1, r3
 801ae3e:	4b3c      	ldr	r3, [pc, #240]	; (801af30 <RegionRU864NextChannel+0x140>)
 801ae40:	2270      	movs	r2, #112	; 0x70
 801ae42:	5299      	strh	r1, [r3, r2]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	681c      	ldr	r4, [r3, #0]
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	685b      	ldr	r3, [r3, #4]
 801ae4c:	0018      	movs	r0, r3
 801ae4e:	f001 ff06 	bl	801cc5e <TimerGetElapsedTime>
 801ae52:	0003      	movs	r3, r0
 801ae54:	429c      	cmp	r4, r3
 801ae56:	d824      	bhi.n	801aea2 <RegionRU864NextChannel+0xb2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801ae58:	683b      	ldr	r3, [r7, #0]
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, RU864_MAX_NB_BANDS );
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	7a58      	ldrb	r0, [r3, #9]
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	7a99      	ldrb	r1, [r3, #10]
 801ae66:	4a33      	ldr	r2, [pc, #204]	; (801af34 <RegionRU864NextChannel+0x144>)
 801ae68:	2301      	movs	r3, #1
 801ae6a:	f7f9 fb7c 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 801ae6e:	0003      	movs	r3, r0
 801ae70:	623b      	str	r3, [r7, #32]

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	7a58      	ldrb	r0, [r3, #9]
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	7a1b      	ldrb	r3, [r3, #8]
 801ae7a:	b25b      	sxtb	r3, r3
 801ae7c:	b2d9      	uxtb	r1, r3
 801ae7e:	2327      	movs	r3, #39	; 0x27
 801ae80:	18fc      	adds	r4, r7, r3
 801ae82:	4d2b      	ldr	r5, [pc, #172]	; (801af30 <RegionRU864NextChannel+0x140>)
 801ae84:	4a29      	ldr	r2, [pc, #164]	; (801af2c <RegionRU864NextChannel+0x13c>)
 801ae86:	231f      	movs	r3, #31
 801ae88:	18fb      	adds	r3, r7, r3
 801ae8a:	9302      	str	r3, [sp, #8]
 801ae8c:	2314      	movs	r3, #20
 801ae8e:	18fb      	adds	r3, r7, r3
 801ae90:	9301      	str	r3, [sp, #4]
 801ae92:	4b28      	ldr	r3, [pc, #160]	; (801af34 <RegionRU864NextChannel+0x144>)
 801ae94:	9300      	str	r3, [sp, #0]
 801ae96:	002b      	movs	r3, r5
 801ae98:	f7ff f802 	bl	8019ea0 <CountNbOfEnabledChannels>
 801ae9c:	0003      	movs	r3, r0
 801ae9e:	7023      	strb	r3, [r4, #0]
 801aea0:	e010      	b.n	801aec4 <RegionRU864NextChannel+0xd4>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 801aea2:	211f      	movs	r1, #31
 801aea4:	187b      	adds	r3, r7, r1
 801aea6:	781b      	ldrb	r3, [r3, #0]
 801aea8:	3301      	adds	r3, #1
 801aeaa:	b2da      	uxtb	r2, r3
 801aeac:	187b      	adds	r3, r7, r1
 801aeae:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	681c      	ldr	r4, [r3, #0]
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	685b      	ldr	r3, [r3, #4]
 801aeb8:	0018      	movs	r0, r3
 801aeba:	f001 fed0 	bl	801cc5e <TimerGetElapsedTime>
 801aebe:	0003      	movs	r3, r0
 801aec0:	1ae3      	subs	r3, r4, r3
 801aec2:	623b      	str	r3, [r7, #32]
    }

    if( nbEnabledChannels > 0 )
 801aec4:	2327      	movs	r3, #39	; 0x27
 801aec6:	18fb      	adds	r3, r7, r3
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d012      	beq.n	801aef4 <RegionRU864NextChannel+0x104>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801aece:	2327      	movs	r3, #39	; 0x27
 801aed0:	18fb      	adds	r3, r7, r3
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	3b01      	subs	r3, #1
 801aed6:	0019      	movs	r1, r3
 801aed8:	2000      	movs	r0, #0
 801aeda:	f001 fee9 	bl	801ccb0 <randr>
 801aede:	0002      	movs	r2, r0
 801aee0:	2314      	movs	r3, #20
 801aee2:	18fb      	adds	r3, r7, r3
 801aee4:	5c9a      	ldrb	r2, [r3, r2]
 801aee6:	68bb      	ldr	r3, [r7, #8]
 801aee8:	701a      	strb	r2, [r3, #0]

        *time = 0;
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	2200      	movs	r2, #0
 801aeee:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801aef0:	2300      	movs	r3, #0
 801aef2:	e016      	b.n	801af22 <RegionRU864NextChannel+0x132>
    }
    else
    {
        if( delayTx > 0 )
 801aef4:	231f      	movs	r3, #31
 801aef6:	18fb      	adds	r3, r7, r3
 801aef8:	781b      	ldrb	r3, [r3, #0]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d004      	beq.n	801af08 <RegionRU864NextChannel+0x118>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	6a3a      	ldr	r2, [r7, #32]
 801af02:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801af04:	230b      	movs	r3, #11
 801af06:	e00c      	b.n	801af22 <RegionRU864NextChannel+0x132>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801af08:	4b09      	ldr	r3, [pc, #36]	; (801af30 <RegionRU864NextChannel+0x140>)
 801af0a:	2270      	movs	r2, #112	; 0x70
 801af0c:	5a9b      	ldrh	r3, [r3, r2]
 801af0e:	2203      	movs	r2, #3
 801af10:	4313      	orrs	r3, r2
 801af12:	b299      	uxth	r1, r3
 801af14:	4b06      	ldr	r3, [pc, #24]	; (801af30 <RegionRU864NextChannel+0x140>)
 801af16:	2270      	movs	r2, #112	; 0x70
 801af18:	5299      	strh	r1, [r3, r2]
        *time = 0;
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	2200      	movs	r2, #0
 801af1e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801af20:	230c      	movs	r3, #12
    }
}
 801af22:	0018      	movs	r0, r3
 801af24:	46bd      	mov	sp, r7
 801af26:	b00a      	add	sp, #40	; 0x28
 801af28:	bdb0      	pop	{r4, r5, r7, pc}
 801af2a:	46c0      	nop			; (mov r8, r8)
 801af2c:	20001838 	.word	0x20001838
 801af30:	200017c8 	.word	0x200017c8
 801af34:	20001828 	.word	0x20001828

0801af38 <RegionRU864ChannelAdd>:

LoRaMacStatus_t RegionRU864ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801af38:	b590      	push	{r4, r7, lr}
 801af3a:	b085      	sub	sp, #20
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 801af40:	230f      	movs	r3, #15
 801af42:	18fb      	adds	r3, r7, r3
 801af44:	2200      	movs	r2, #0
 801af46:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 801af48:	230e      	movs	r3, #14
 801af4a:	18fb      	adds	r3, r7, r3
 801af4c:	2200      	movs	r2, #0
 801af4e:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 801af50:	210d      	movs	r1, #13
 801af52:	187b      	adds	r3, r7, r1
 801af54:	687a      	ldr	r2, [r7, #4]
 801af56:	7912      	ldrb	r2, [r2, #4]
 801af58:	701a      	strb	r2, [r3, #0]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 801af5a:	187b      	adds	r3, r7, r1
 801af5c:	781b      	ldrb	r3, [r3, #0]
 801af5e:	2b01      	cmp	r3, #1
 801af60:	d801      	bhi.n	801af66 <RegionRU864ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801af62:	2306      	movs	r3, #6
 801af64:	e09c      	b.n	801b0a0 <RegionRU864ChannelAdd+0x168>
    }

    if( id >= RU864_MAX_NB_CHANNELS )
 801af66:	230d      	movs	r3, #13
 801af68:	18fb      	adds	r3, r7, r3
 801af6a:	781b      	ldrb	r3, [r3, #0]
 801af6c:	2b07      	cmp	r3, #7
 801af6e:	d901      	bls.n	801af74 <RegionRU864ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801af70:	2303      	movs	r3, #3
 801af72:	e095      	b.n	801b0a0 <RegionRU864ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	7a1b      	ldrb	r3, [r3, #8]
 801af7a:	011b      	lsls	r3, r3, #4
 801af7c:	b25b      	sxtb	r3, r3
 801af7e:	111b      	asrs	r3, r3, #4
 801af80:	b25b      	sxtb	r3, r3
 801af82:	2207      	movs	r2, #7
 801af84:	2100      	movs	r1, #0
 801af86:	0018      	movs	r0, r3
 801af88:	f7f9 f9fa 	bl	8014380 <RegionCommonValueInRange>
 801af8c:	1e03      	subs	r3, r0, #0
 801af8e:	d103      	bne.n	801af98 <RegionRU864ChannelAdd+0x60>
    {
        drInvalid = true;
 801af90:	230f      	movs	r3, #15
 801af92:	18fb      	adds	r3, r7, r3
 801af94:	2201      	movs	r2, #1
 801af96:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE ) == false )
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	7a1b      	ldrb	r3, [r3, #8]
 801af9e:	b25b      	sxtb	r3, r3
 801afa0:	111b      	asrs	r3, r3, #4
 801afa2:	b25b      	sxtb	r3, r3
 801afa4:	2207      	movs	r2, #7
 801afa6:	2100      	movs	r1, #0
 801afa8:	0018      	movs	r0, r3
 801afaa:	f7f9 f9e9 	bl	8014380 <RegionCommonValueInRange>
 801afae:	1e03      	subs	r3, r0, #0
 801afb0:	d103      	bne.n	801afba <RegionRU864ChannelAdd+0x82>
    {
        drInvalid = true;
 801afb2:	230f      	movs	r3, #15
 801afb4:	18fb      	adds	r3, r7, r3
 801afb6:	2201      	movs	r2, #1
 801afb8:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	7a1b      	ldrb	r3, [r3, #8]
 801afc0:	011b      	lsls	r3, r3, #4
 801afc2:	b25b      	sxtb	r3, r3
 801afc4:	111b      	asrs	r3, r3, #4
 801afc6:	b25a      	sxtb	r2, r3
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	7a1b      	ldrb	r3, [r3, #8]
 801afce:	b25b      	sxtb	r3, r3
 801afd0:	111b      	asrs	r3, r3, #4
 801afd2:	b25b      	sxtb	r3, r3
 801afd4:	429a      	cmp	r2, r3
 801afd6:	dd03      	ble.n	801afe0 <RegionRU864ChannelAdd+0xa8>
    {
        drInvalid = true;
 801afd8:	230f      	movs	r3, #15
 801afda:	18fb      	adds	r3, r7, r3
 801afdc:	2201      	movs	r2, #1
 801afde:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 801afe0:	230e      	movs	r3, #14
 801afe2:	18fb      	adds	r3, r7, r3
 801afe4:	781b      	ldrb	r3, [r3, #0]
 801afe6:	2201      	movs	r2, #1
 801afe8:	4053      	eors	r3, r2
 801afea:	b2db      	uxtb	r3, r3
 801afec:	2b00      	cmp	r3, #0
 801afee:	d010      	beq.n	801b012 <RegionRU864ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	0018      	movs	r0, r3
 801aff8:	f7fe ff2a 	bl	8019e50 <VerifyRfFreq>
 801affc:	0003      	movs	r3, r0
 801affe:	001a      	movs	r2, r3
 801b000:	2301      	movs	r3, #1
 801b002:	4053      	eors	r3, r2
 801b004:	b2db      	uxtb	r3, r3
 801b006:	2b00      	cmp	r3, #0
 801b008:	d003      	beq.n	801b012 <RegionRU864ChannelAdd+0xda>
        {
            freqInvalid = true;
 801b00a:	230e      	movs	r3, #14
 801b00c:	18fb      	adds	r3, r7, r3
 801b00e:	2201      	movs	r2, #1
 801b010:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801b012:	230f      	movs	r3, #15
 801b014:	18fb      	adds	r3, r7, r3
 801b016:	781b      	ldrb	r3, [r3, #0]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d006      	beq.n	801b02a <RegionRU864ChannelAdd+0xf2>
 801b01c:	230e      	movs	r3, #14
 801b01e:	18fb      	adds	r3, r7, r3
 801b020:	781b      	ldrb	r3, [r3, #0]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d001      	beq.n	801b02a <RegionRU864ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801b026:	2306      	movs	r3, #6
 801b028:	e03a      	b.n	801b0a0 <RegionRU864ChannelAdd+0x168>
    }
    if( drInvalid == true )
 801b02a:	230f      	movs	r3, #15
 801b02c:	18fb      	adds	r3, r7, r3
 801b02e:	781b      	ldrb	r3, [r3, #0]
 801b030:	2b00      	cmp	r3, #0
 801b032:	d001      	beq.n	801b038 <RegionRU864ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801b034:	2305      	movs	r3, #5
 801b036:	e033      	b.n	801b0a0 <RegionRU864ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 801b038:	230e      	movs	r3, #14
 801b03a:	18fb      	adds	r3, r7, r3
 801b03c:	781b      	ldrb	r3, [r3, #0]
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d001      	beq.n	801b046 <RegionRU864ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801b042:	2304      	movs	r3, #4
 801b044:	e02c      	b.n	801b0a0 <RegionRU864ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 801b046:	200d      	movs	r0, #13
 801b048:	0004      	movs	r4, r0
 801b04a:	183b      	adds	r3, r7, r0
 801b04c:	781a      	ldrb	r2, [r3, #0]
 801b04e:	0013      	movs	r3, r2
 801b050:	005b      	lsls	r3, r3, #1
 801b052:	189b      	adds	r3, r3, r2
 801b054:	009b      	lsls	r3, r3, #2
 801b056:	4a14      	ldr	r2, [pc, #80]	; (801b0a8 <RegionRU864ChannelAdd+0x170>)
 801b058:	1898      	adds	r0, r3, r2
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	220c      	movs	r2, #12
 801b060:	0019      	movs	r1, r3
 801b062:	f001 fe3b 	bl	801ccdc <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 801b066:	0020      	movs	r0, r4
 801b068:	183b      	adds	r3, r7, r0
 801b06a:	781a      	ldrb	r2, [r3, #0]
 801b06c:	490e      	ldr	r1, [pc, #56]	; (801b0a8 <RegionRU864ChannelAdd+0x170>)
 801b06e:	0013      	movs	r3, r2
 801b070:	005b      	lsls	r3, r3, #1
 801b072:	189b      	adds	r3, r3, r2
 801b074:	009b      	lsls	r3, r3, #2
 801b076:	18cb      	adds	r3, r1, r3
 801b078:	3309      	adds	r3, #9
 801b07a:	2200      	movs	r2, #0
 801b07c:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 801b07e:	4b0a      	ldr	r3, [pc, #40]	; (801b0a8 <RegionRU864ChannelAdd+0x170>)
 801b080:	2270      	movs	r2, #112	; 0x70
 801b082:	5a9b      	ldrh	r3, [r3, r2]
 801b084:	b21a      	sxth	r2, r3
 801b086:	183b      	adds	r3, r7, r0
 801b088:	781b      	ldrb	r3, [r3, #0]
 801b08a:	2101      	movs	r1, #1
 801b08c:	4099      	lsls	r1, r3
 801b08e:	000b      	movs	r3, r1
 801b090:	b21b      	sxth	r3, r3
 801b092:	4313      	orrs	r3, r2
 801b094:	b21b      	sxth	r3, r3
 801b096:	b299      	uxth	r1, r3
 801b098:	4b03      	ldr	r3, [pc, #12]	; (801b0a8 <RegionRU864ChannelAdd+0x170>)
 801b09a:	2270      	movs	r2, #112	; 0x70
 801b09c:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 801b09e:	2300      	movs	r3, #0
}
 801b0a0:	0018      	movs	r0, r3
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	b005      	add	sp, #20
 801b0a6:	bd90      	pop	{r4, r7, pc}
 801b0a8:	200017c8 	.word	0x200017c8

0801b0ac <RegionRU864ChannelsRemove>:

bool RegionRU864ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801b0ac:	b590      	push	{r4, r7, lr}
 801b0ae:	b085      	sub	sp, #20
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 801b0b4:	210f      	movs	r1, #15
 801b0b6:	187b      	adds	r3, r7, r1
 801b0b8:	687a      	ldr	r2, [r7, #4]
 801b0ba:	7812      	ldrb	r2, [r2, #0]
 801b0bc:	701a      	strb	r2, [r3, #0]

    if( id < RU864_NUMB_DEFAULT_CHANNELS )
 801b0be:	187b      	adds	r3, r7, r1
 801b0c0:	781b      	ldrb	r3, [r3, #0]
 801b0c2:	2b01      	cmp	r3, #1
 801b0c4:	d801      	bhi.n	801b0ca <RegionRU864ChannelsRemove+0x1e>
    {
        return false;
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	e015      	b.n	801b0f6 <RegionRU864ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801b0ca:	240f      	movs	r4, #15
 801b0cc:	193b      	adds	r3, r7, r4
 801b0ce:	781a      	ldrb	r2, [r3, #0]
 801b0d0:	490b      	ldr	r1, [pc, #44]	; (801b100 <RegionRU864ChannelsRemove+0x54>)
 801b0d2:	0013      	movs	r3, r2
 801b0d4:	005b      	lsls	r3, r3, #1
 801b0d6:	189b      	adds	r3, r3, r2
 801b0d8:	009b      	lsls	r3, r3, #2
 801b0da:	18cb      	adds	r3, r1, r3
 801b0dc:	220c      	movs	r2, #12
 801b0de:	2100      	movs	r1, #0
 801b0e0:	0018      	movs	r0, r3
 801b0e2:	f00a ff25 	bl	8025f30 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, RU864_MAX_NB_CHANNELS );
 801b0e6:	193b      	adds	r3, r7, r4
 801b0e8:	7819      	ldrb	r1, [r3, #0]
 801b0ea:	4b06      	ldr	r3, [pc, #24]	; (801b104 <RegionRU864ChannelsRemove+0x58>)
 801b0ec:	2208      	movs	r2, #8
 801b0ee:	0018      	movs	r0, r3
 801b0f0:	f7f9 f96c 	bl	80143cc <RegionCommonChanDisable>
 801b0f4:	0003      	movs	r3, r0
}
 801b0f6:	0018      	movs	r0, r3
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	b005      	add	sp, #20
 801b0fc:	bd90      	pop	{r4, r7, pc}
 801b0fe:	46c0      	nop			; (mov r8, r8)
 801b100:	200017c8 	.word	0x200017c8
 801b104:	20001838 	.word	0x20001838

0801b108 <RegionRU864ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionRU864ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b108:	b590      	push	{r4, r7, lr}
 801b10a:	b085      	sub	sp, #20
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	0004      	movs	r4, r0
 801b110:	0008      	movs	r0, r1
 801b112:	0011      	movs	r1, r2
 801b114:	1dfb      	adds	r3, r7, #7
 801b116:	1c22      	adds	r2, r4, #0
 801b118:	701a      	strb	r2, [r3, #0]
 801b11a:	1dbb      	adds	r3, r7, #6
 801b11c:	1c02      	adds	r2, r0, #0
 801b11e:	701a      	strb	r2, [r3, #0]
 801b120:	1d7b      	adds	r3, r7, #5
 801b122:	1c0a      	adds	r2, r1, #0
 801b124:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801b126:	1dbb      	adds	r3, r7, #6
 801b128:	781a      	ldrb	r2, [r3, #0]
 801b12a:	1d7b      	adds	r3, r7, #5
 801b12c:	781b      	ldrb	r3, [r3, #0]
 801b12e:	1ad3      	subs	r3, r2, r3
 801b130:	b2da      	uxtb	r2, r3
 801b132:	210f      	movs	r1, #15
 801b134:	187b      	adds	r3, r7, r1
 801b136:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 801b138:	187b      	adds	r3, r7, r1
 801b13a:	781b      	ldrb	r3, [r3, #0]
 801b13c:	2b7f      	cmp	r3, #127	; 0x7f
 801b13e:	d903      	bls.n	801b148 <RegionRU864ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 801b140:	230f      	movs	r3, #15
 801b142:	18fb      	adds	r3, r7, r3
 801b144:	2200      	movs	r2, #0
 801b146:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 801b148:	230f      	movs	r3, #15
 801b14a:	18fb      	adds	r3, r7, r3
 801b14c:	781b      	ldrb	r3, [r3, #0]
}
 801b14e:	0018      	movs	r0, r3
 801b150:	46bd      	mov	sp, r7
 801b152:	b005      	add	sp, #20
 801b154:	bd90      	pop	{r4, r7, pc}

0801b156 <GetNextLowerTxDr>:
 */
static RegionUS915NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801b156:	b580      	push	{r7, lr}
 801b158:	b084      	sub	sp, #16
 801b15a:	af00      	add	r7, sp, #0
 801b15c:	0002      	movs	r2, r0
 801b15e:	1dfb      	adds	r3, r7, #7
 801b160:	701a      	strb	r2, [r3, #0]
 801b162:	1dbb      	adds	r3, r7, #6
 801b164:	1c0a      	adds	r2, r1, #0
 801b166:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 801b168:	230f      	movs	r3, #15
 801b16a:	18fb      	adds	r3, r7, r3
 801b16c:	2200      	movs	r2, #0
 801b16e:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 801b170:	1dfa      	adds	r2, r7, #7
 801b172:	1dbb      	adds	r3, r7, #6
 801b174:	7812      	ldrb	r2, [r2, #0]
 801b176:	b252      	sxtb	r2, r2
 801b178:	781b      	ldrb	r3, [r3, #0]
 801b17a:	b25b      	sxtb	r3, r3
 801b17c:	429a      	cmp	r2, r3
 801b17e:	d105      	bne.n	801b18c <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 801b180:	230f      	movs	r3, #15
 801b182:	18fb      	adds	r3, r7, r3
 801b184:	1dba      	adds	r2, r7, #6
 801b186:	7812      	ldrb	r2, [r2, #0]
 801b188:	701a      	strb	r2, [r3, #0]
 801b18a:	e005      	b.n	801b198 <GetNextLowerTxDr+0x42>
    }
    else
    {
        nextLowerDr = dr - 1;
 801b18c:	1dfb      	adds	r3, r7, #7
 801b18e:	781a      	ldrb	r2, [r3, #0]
 801b190:	230f      	movs	r3, #15
 801b192:	18fb      	adds	r3, r7, r3
 801b194:	3a01      	subs	r2, #1
 801b196:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 801b198:	230f      	movs	r3, #15
 801b19a:	18fb      	adds	r3, r7, r3
 801b19c:	781b      	ldrb	r3, [r3, #0]
 801b19e:	b25b      	sxtb	r3, r3
}
 801b1a0:	0018      	movs	r0, r3
 801b1a2:	46bd      	mov	sp, r7
 801b1a4:	b004      	add	sp, #16
 801b1a6:	bd80      	pop	{r7, pc}

0801b1a8 <FindAvailable125kHzChannels>:
 * \param [OUT] availableChannels Number of available 125 kHz channels.
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint8_t* findAvailableChannelsIndex, uint16_t channelMaskRemaining, uint8_t* availableChannels )
{
 801b1a8:	b580      	push	{r7, lr}
 801b1aa:	b086      	sub	sp, #24
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	60f8      	str	r0, [r7, #12]
 801b1b0:	607a      	str	r2, [r7, #4]
 801b1b2:	230a      	movs	r3, #10
 801b1b4:	18fb      	adds	r3, r7, r3
 801b1b6:	1c0a      	adds	r2, r1, #0
 801b1b8:	801a      	strh	r2, [r3, #0]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801b1ba:	68fb      	ldr	r3, [r7, #12]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d002      	beq.n	801b1c6 <FindAvailable125kHzChannels+0x1e>
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d101      	bne.n	801b1ca <FindAvailable125kHzChannels+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801b1c6:	2303      	movs	r3, #3
 801b1c8:	e02d      	b.n	801b226 <FindAvailable125kHzChannels+0x7e>
    }

    // Initialize counter
    *availableChannels = 0;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	2200      	movs	r2, #0
 801b1ce:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801b1d0:	2317      	movs	r3, #23
 801b1d2:	18fb      	adds	r3, r7, r3
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	701a      	strb	r2, [r3, #0]
 801b1d8:	e01f      	b.n	801b21a <FindAvailable125kHzChannels+0x72>
    {
        // Find available channels
        if( ( channelMaskRemaining & ( 1 << i ) ) != 0 )
 801b1da:	230a      	movs	r3, #10
 801b1dc:	18fb      	adds	r3, r7, r3
 801b1de:	881a      	ldrh	r2, [r3, #0]
 801b1e0:	2317      	movs	r3, #23
 801b1e2:	18fb      	adds	r3, r7, r3
 801b1e4:	781b      	ldrb	r3, [r3, #0]
 801b1e6:	411a      	asrs	r2, r3
 801b1e8:	0013      	movs	r3, r2
 801b1ea:	2201      	movs	r2, #1
 801b1ec:	4013      	ands	r3, r2
 801b1ee:	d00e      	beq.n	801b20e <FindAvailable125kHzChannels+0x66>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	781b      	ldrb	r3, [r3, #0]
 801b1f4:	001a      	movs	r2, r3
 801b1f6:	68fb      	ldr	r3, [r7, #12]
 801b1f8:	189b      	adds	r3, r3, r2
 801b1fa:	2217      	movs	r2, #23
 801b1fc:	18ba      	adds	r2, r7, r2
 801b1fe:	7812      	ldrb	r2, [r2, #0]
 801b200:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	781b      	ldrb	r3, [r3, #0]
 801b206:	3301      	adds	r3, #1
 801b208:	b2da      	uxtb	r2, r3
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801b20e:	2117      	movs	r1, #23
 801b210:	187b      	adds	r3, r7, r1
 801b212:	781a      	ldrb	r2, [r3, #0]
 801b214:	187b      	adds	r3, r7, r1
 801b216:	3201      	adds	r2, #1
 801b218:	701a      	strb	r2, [r3, #0]
 801b21a:	2317      	movs	r3, #23
 801b21c:	18fb      	adds	r3, r7, r3
 801b21e:	781b      	ldrb	r3, [r3, #0]
 801b220:	2b07      	cmp	r3, #7
 801b222:	d9da      	bls.n	801b1da <FindAvailable125kHzChannels+0x32>
        }
    }

    return LORAMAC_STATUS_OK;
 801b224:	2300      	movs	r3, #0
}
 801b226:	0018      	movs	r0, r3
 801b228:	46bd      	mov	sp, r7
 801b22a:	b006      	add	sp, #24
 801b22c:	bd80      	pop	{r7, pc}
	...

0801b230 <ComputeNext125kHzJoinChannel>:
 * \param [OUT] newChannelIndex Index of available channel.
 *
 * \retval Status
 */
static LoRaMacStatus_t ComputeNext125kHzJoinChannel( uint8_t* newChannelIndex )
{
 801b230:	b590      	push	{r4, r7, lr}
 801b232:	b087      	sub	sp, #28
 801b234:	af00      	add	r7, sp, #0
 801b236:	6078      	str	r0, [r7, #4]
    uint8_t currentChannelsMaskRemainingIndex;
    uint16_t channelMaskRemaining;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801b238:	230c      	movs	r3, #12
 801b23a:	18fb      	adds	r3, r7, r3
 801b23c:	0018      	movs	r0, r3
 801b23e:	2308      	movs	r3, #8
 801b240:	001a      	movs	r2, r3
 801b242:	2100      	movs	r1, #0
 801b244:	f00a fe74 	bl	8025f30 <memset>
    uint8_t availableChannels = 0;
 801b248:	230b      	movs	r3, #11
 801b24a:	18fb      	adds	r3, r7, r3
 801b24c:	2200      	movs	r2, #0
 801b24e:	701a      	strb	r2, [r3, #0]
    uint8_t startIndex = NvmCtx.JoinChannelGroupsCurrentIndex;
 801b250:	2315      	movs	r3, #21
 801b252:	18fb      	adds	r3, r7, r3
 801b254:	4946      	ldr	r1, [pc, #280]	; (801b370 <ComputeNext125kHzJoinChannel+0x140>)
 801b256:	22e5      	movs	r2, #229	; 0xe5
 801b258:	0092      	lsls	r2, r2, #2
 801b25a:	5c8a      	ldrb	r2, [r1, r2]
 801b25c:	701a      	strb	r2, [r3, #0]

    // Null pointer check
    if( newChannelIndex == NULL )
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d101      	bne.n	801b268 <ComputeNext125kHzJoinChannel+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801b264:	2303      	movs	r3, #3
 801b266:	e07f      	b.n	801b368 <ComputeNext125kHzJoinChannel+0x138>
    }

    do {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelsMaskRemainingIndex = (uint8_t) startIndex / 2;
 801b268:	2314      	movs	r3, #20
 801b26a:	18fb      	adds	r3, r7, r3
 801b26c:	2115      	movs	r1, #21
 801b26e:	187a      	adds	r2, r7, r1
 801b270:	7812      	ldrb	r2, [r2, #0]
 801b272:	0852      	lsrs	r2, r2, #1
 801b274:	701a      	strb	r2, [r3, #0]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801b276:	187b      	adds	r3, r7, r1
 801b278:	781b      	ldrb	r3, [r3, #0]
 801b27a:	2201      	movs	r2, #1
 801b27c:	4013      	ands	r3, r2
 801b27e:	b2db      	uxtb	r3, r3
 801b280:	2b00      	cmp	r3, #0
 801b282:	d10f      	bne.n	801b2a4 <ComputeNext125kHzJoinChannel+0x74>
        {
            channelMaskRemaining = ( NvmCtx.ChannelsMaskRemaining[currentChannelsMaskRemainingIndex] & 0x00FF );
 801b284:	2314      	movs	r3, #20
 801b286:	18fb      	adds	r3, r7, r3
 801b288:	781b      	ldrb	r3, [r3, #0]
 801b28a:	4a39      	ldr	r2, [pc, #228]	; (801b370 <ComputeNext125kHzJoinChannel+0x140>)
 801b28c:	33bd      	adds	r3, #189	; 0xbd
 801b28e:	33ff      	adds	r3, #255	; 0xff
 801b290:	005b      	lsls	r3, r3, #1
 801b292:	18d3      	adds	r3, r2, r3
 801b294:	3304      	adds	r3, #4
 801b296:	881a      	ldrh	r2, [r3, #0]
 801b298:	2316      	movs	r3, #22
 801b29a:	18fb      	adds	r3, r7, r3
 801b29c:	21ff      	movs	r1, #255	; 0xff
 801b29e:	400a      	ands	r2, r1
 801b2a0:	801a      	strh	r2, [r3, #0]
 801b2a2:	e00d      	b.n	801b2c0 <ComputeNext125kHzJoinChannel+0x90>
        }
        else
        {
            channelMaskRemaining = ( ( NvmCtx.ChannelsMaskRemaining[currentChannelsMaskRemainingIndex] >> 8 ) & 0x00FF );
 801b2a4:	2314      	movs	r3, #20
 801b2a6:	18fb      	adds	r3, r7, r3
 801b2a8:	781b      	ldrb	r3, [r3, #0]
 801b2aa:	4a31      	ldr	r2, [pc, #196]	; (801b370 <ComputeNext125kHzJoinChannel+0x140>)
 801b2ac:	33bd      	adds	r3, #189	; 0xbd
 801b2ae:	33ff      	adds	r3, #255	; 0xff
 801b2b0:	005b      	lsls	r3, r3, #1
 801b2b2:	18d3      	adds	r3, r2, r3
 801b2b4:	3304      	adds	r3, #4
 801b2b6:	881a      	ldrh	r2, [r3, #0]
 801b2b8:	2316      	movs	r3, #22
 801b2ba:	18fb      	adds	r3, r7, r3
 801b2bc:	0a12      	lsrs	r2, r2, #8
 801b2be:	801a      	strh	r2, [r3, #0]
        }


        if( FindAvailable125kHzChannels( findAvailableChannelsIndex, channelMaskRemaining, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b2c0:	230b      	movs	r3, #11
 801b2c2:	18fa      	adds	r2, r7, r3
 801b2c4:	2316      	movs	r3, #22
 801b2c6:	18fb      	adds	r3, r7, r3
 801b2c8:	8819      	ldrh	r1, [r3, #0]
 801b2ca:	230c      	movs	r3, #12
 801b2cc:	18fb      	adds	r3, r7, r3
 801b2ce:	0018      	movs	r0, r3
 801b2d0:	f7ff ff6a 	bl	801b1a8 <FindAvailable125kHzChannels>
 801b2d4:	0003      	movs	r3, r0
 801b2d6:	2b03      	cmp	r3, #3
 801b2d8:	d101      	bne.n	801b2de <ComputeNext125kHzJoinChannel+0xae>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801b2da:	2303      	movs	r3, #3
 801b2dc:	e044      	b.n	801b368 <ComputeNext125kHzJoinChannel+0x138>
        }

        if ( availableChannels > 0 )
 801b2de:	230b      	movs	r3, #11
 801b2e0:	18fb      	adds	r3, r7, r3
 801b2e2:	781b      	ldrb	r3, [r3, #0]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d014      	beq.n	801b312 <ComputeNext125kHzJoinChannel+0xe2>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 801b2e8:	2315      	movs	r3, #21
 801b2ea:	18fb      	adds	r3, r7, r3
 801b2ec:	781b      	ldrb	r3, [r3, #0]
 801b2ee:	00db      	lsls	r3, r3, #3
 801b2f0:	b2dc      	uxtb	r4, r3
 801b2f2:	230b      	movs	r3, #11
 801b2f4:	18fb      	adds	r3, r7, r3
 801b2f6:	781b      	ldrb	r3, [r3, #0]
 801b2f8:	3b01      	subs	r3, #1
 801b2fa:	0019      	movs	r1, r3
 801b2fc:	2000      	movs	r0, #0
 801b2fe:	f001 fcd7 	bl	801ccb0 <randr>
 801b302:	0002      	movs	r2, r0
 801b304:	230c      	movs	r3, #12
 801b306:	18fb      	adds	r3, r7, r3
 801b308:	5c9b      	ldrb	r3, [r3, r2]
 801b30a:	18e3      	adds	r3, r4, r3
 801b30c:	b2da      	uxtb	r2, r3
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 801b312:	2115      	movs	r1, #21
 801b314:	187b      	adds	r3, r7, r1
 801b316:	781a      	ldrb	r2, [r3, #0]
 801b318:	187b      	adds	r3, r7, r1
 801b31a:	3201      	adds	r2, #1
 801b31c:	701a      	strb	r2, [r3, #0]
        if ( startIndex > 7 )
 801b31e:	187b      	adds	r3, r7, r1
 801b320:	781b      	ldrb	r3, [r3, #0]
 801b322:	2b07      	cmp	r3, #7
 801b324:	d903      	bls.n	801b32e <ComputeNext125kHzJoinChannel+0xfe>
        {
            startIndex = 0;
 801b326:	2315      	movs	r3, #21
 801b328:	18fb      	adds	r3, r7, r3
 801b32a:	2200      	movs	r2, #0
 801b32c:	701a      	strb	r2, [r3, #0]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != NvmCtx.JoinChannelGroupsCurrentIndex ) );
 801b32e:	230b      	movs	r3, #11
 801b330:	18fb      	adds	r3, r7, r3
 801b332:	781b      	ldrb	r3, [r3, #0]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d108      	bne.n	801b34a <ComputeNext125kHzJoinChannel+0x11a>
 801b338:	4a0d      	ldr	r2, [pc, #52]	; (801b370 <ComputeNext125kHzJoinChannel+0x140>)
 801b33a:	23e5      	movs	r3, #229	; 0xe5
 801b33c:	009b      	lsls	r3, r3, #2
 801b33e:	5cd3      	ldrb	r3, [r2, r3]
 801b340:	2215      	movs	r2, #21
 801b342:	18ba      	adds	r2, r7, r2
 801b344:	7812      	ldrb	r2, [r2, #0]
 801b346:	429a      	cmp	r2, r3
 801b348:	d18e      	bne.n	801b268 <ComputeNext125kHzJoinChannel+0x38>

    if ( availableChannels > 0 )
 801b34a:	230b      	movs	r3, #11
 801b34c:	18fb      	adds	r3, r7, r3
 801b34e:	781b      	ldrb	r3, [r3, #0]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d008      	beq.n	801b366 <ComputeNext125kHzJoinChannel+0x136>
    {
        NvmCtx.JoinChannelGroupsCurrentIndex = startIndex;
 801b354:	4a06      	ldr	r2, [pc, #24]	; (801b370 <ComputeNext125kHzJoinChannel+0x140>)
 801b356:	2315      	movs	r3, #21
 801b358:	18f9      	adds	r1, r7, r3
 801b35a:	23e5      	movs	r3, #229	; 0xe5
 801b35c:	009b      	lsls	r3, r3, #2
 801b35e:	7809      	ldrb	r1, [r1, #0]
 801b360:	54d1      	strb	r1, [r2, r3]
        return LORAMAC_STATUS_OK;
 801b362:	2300      	movs	r3, #0
 801b364:	e000      	b.n	801b368 <ComputeNext125kHzJoinChannel+0x138>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b366:	2303      	movs	r3, #3
}
 801b368:	0018      	movs	r0, r3
 801b36a:	46bd      	mov	sp, r7
 801b36c:	b007      	add	sp, #28
 801b36e:	bd90      	pop	{r4, r7, pc}
 801b370:	2000183c 	.word	0x2000183c

0801b374 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b082      	sub	sp, #8
 801b378:	af00      	add	r7, sp, #0
 801b37a:	6078      	str	r0, [r7, #4]
    switch( BandwidthsUS915[drIndex] )
 801b37c:	4b09      	ldr	r3, [pc, #36]	; (801b3a4 <GetBandwidth+0x30>)
 801b37e:	687a      	ldr	r2, [r7, #4]
 801b380:	0092      	lsls	r2, r2, #2
 801b382:	58d3      	ldr	r3, [r2, r3]
 801b384:	4a08      	ldr	r2, [pc, #32]	; (801b3a8 <GetBandwidth+0x34>)
 801b386:	4293      	cmp	r3, r2
 801b388:	d004      	beq.n	801b394 <GetBandwidth+0x20>
 801b38a:	4a08      	ldr	r2, [pc, #32]	; (801b3ac <GetBandwidth+0x38>)
 801b38c:	4293      	cmp	r3, r2
 801b38e:	d003      	beq.n	801b398 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 801b390:	2300      	movs	r3, #0
 801b392:	e002      	b.n	801b39a <GetBandwidth+0x26>
        case 250000:
            return 1;
 801b394:	2301      	movs	r3, #1
 801b396:	e000      	b.n	801b39a <GetBandwidth+0x26>
        case 500000:
            return 2;
 801b398:	2302      	movs	r3, #2
    }
}
 801b39a:	0018      	movs	r0, r3
 801b39c:	46bd      	mov	sp, r7
 801b39e:	b002      	add	sp, #8
 801b3a0:	bd80      	pop	{r7, pc}
 801b3a2:	46c0      	nop			; (mov r8, r8)
 801b3a4:	0802881c 	.word	0x0802881c
 801b3a8:	0003d090 	.word	0x0003d090
 801b3ac:	0007a120 	.word	0x0007a120

0801b3b0 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801b3b0:	b590      	push	{r4, r7, lr}
 801b3b2:	b085      	sub	sp, #20
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	0004      	movs	r4, r0
 801b3b8:	0008      	movs	r0, r1
 801b3ba:	0011      	movs	r1, r2
 801b3bc:	603b      	str	r3, [r7, #0]
 801b3be:	1dfb      	adds	r3, r7, #7
 801b3c0:	1c22      	adds	r2, r4, #0
 801b3c2:	701a      	strb	r2, [r3, #0]
 801b3c4:	1dbb      	adds	r3, r7, #6
 801b3c6:	1c02      	adds	r2, r0, #0
 801b3c8:	701a      	strb	r2, [r3, #0]
 801b3ca:	1d7b      	adds	r3, r7, #5
 801b3cc:	1c0a      	adds	r2, r1, #0
 801b3ce:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 801b3d0:	210f      	movs	r1, #15
 801b3d2:	187b      	adds	r3, r7, r1
 801b3d4:	1dfa      	adds	r2, r7, #7
 801b3d6:	7812      	ldrb	r2, [r2, #0]
 801b3d8:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 801b3da:	187a      	adds	r2, r7, r1
 801b3dc:	1dbb      	adds	r3, r7, #6
 801b3de:	1df9      	adds	r1, r7, #7
 801b3e0:	780c      	ldrb	r4, [r1, #0]
 801b3e2:	781b      	ldrb	r3, [r3, #0]
 801b3e4:	b258      	sxtb	r0, r3
 801b3e6:	b261      	sxtb	r1, r4
 801b3e8:	4288      	cmp	r0, r1
 801b3ea:	da00      	bge.n	801b3ee <LimitTxPower+0x3e>
 801b3ec:	1c23      	adds	r3, r4, #0
 801b3ee:	7013      	strb	r3, [r2, #0]

    if( datarate == DR_4 )
 801b3f0:	1d7b      	adds	r3, r7, #5
 801b3f2:	781b      	ldrb	r3, [r3, #0]
 801b3f4:	b25b      	sxtb	r3, r3
 801b3f6:	2b04      	cmp	r3, #4
 801b3f8:	d109      	bne.n	801b40e <LimitTxPower+0x5e>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801b3fa:	230f      	movs	r3, #15
 801b3fc:	18fa      	adds	r2, r7, r3
 801b3fe:	1dfb      	adds	r3, r7, #7
 801b400:	781b      	ldrb	r3, [r3, #0]
 801b402:	b259      	sxtb	r1, r3
 801b404:	2902      	cmp	r1, #2
 801b406:	da00      	bge.n	801b40a <LimitTxPower+0x5a>
 801b408:	2302      	movs	r3, #2
 801b40a:	7013      	strb	r3, [r2, #0]
 801b40c:	e011      	b.n	801b432 <LimitTxPower+0x82>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801b40e:	683b      	ldr	r3, [r7, #0]
 801b410:	2204      	movs	r2, #4
 801b412:	2100      	movs	r1, #0
 801b414:	0018      	movs	r0, r3
 801b416:	f7f9 f81b 	bl	8014450 <RegionCommonCountChannels>
 801b41a:	0003      	movs	r3, r0
 801b41c:	2b31      	cmp	r3, #49	; 0x31
 801b41e:	d808      	bhi.n	801b432 <LimitTxPower+0x82>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801b420:	230f      	movs	r3, #15
 801b422:	18fa      	adds	r2, r7, r3
 801b424:	1dfb      	adds	r3, r7, #7
 801b426:	781b      	ldrb	r3, [r3, #0]
 801b428:	b259      	sxtb	r1, r3
 801b42a:	2905      	cmp	r1, #5
 801b42c:	da00      	bge.n	801b430 <LimitTxPower+0x80>
 801b42e:	2305      	movs	r3, #5
 801b430:	7013      	strb	r3, [r2, #0]
        }
    }
    return txPowerResult;
 801b432:	230f      	movs	r3, #15
 801b434:	18fb      	adds	r3, r7, r3
 801b436:	781b      	ldrb	r3, [r3, #0]
 801b438:	b25b      	sxtb	r3, r3
}
 801b43a:	0018      	movs	r0, r3
 801b43c:	46bd      	mov	sp, r7
 801b43e:	b005      	add	sp, #20
 801b440:	bd90      	pop	{r4, r7, pc}
	...

0801b444 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b082      	sub	sp, #8
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801b44c:	4b18      	ldr	r3, [pc, #96]	; (801b4b0 <VerifyRfFreq+0x6c>)
 801b44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b450:	687a      	ldr	r2, [r7, #4]
 801b452:	0010      	movs	r0, r2
 801b454:	4798      	blx	r3
 801b456:	0003      	movs	r3, r0
 801b458:	001a      	movs	r2, r3
 801b45a:	2301      	movs	r3, #1
 801b45c:	4053      	eors	r3, r2
 801b45e:	b2db      	uxtb	r3, r3
 801b460:	2b00      	cmp	r3, #0
 801b462:	d001      	beq.n	801b468 <VerifyRfFreq+0x24>
    {
        return false;
 801b464:	2300      	movs	r3, #0
 801b466:	e01e      	b.n	801b4a6 <VerifyRfFreq+0x62>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	4a12      	ldr	r2, [pc, #72]	; (801b4b4 <VerifyRfFreq+0x70>)
 801b46c:	4293      	cmp	r3, r2
 801b46e:	d90d      	bls.n	801b48c <VerifyRfFreq+0x48>
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	4a11      	ldr	r2, [pc, #68]	; (801b4b8 <VerifyRfFreq+0x74>)
 801b474:	4293      	cmp	r3, r2
 801b476:	d809      	bhi.n	801b48c <VerifyRfFreq+0x48>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	4a10      	ldr	r2, [pc, #64]	; (801b4bc <VerifyRfFreq+0x78>)
 801b47c:	4694      	mov	ip, r2
 801b47e:	4463      	add	r3, ip
 801b480:	490f      	ldr	r1, [pc, #60]	; (801b4c0 <VerifyRfFreq+0x7c>)
 801b482:	0018      	movs	r0, r3
 801b484:	f7e4 fece 	bl	8000224 <__aeabi_uidivmod>
 801b488:	1e0b      	subs	r3, r1, #0
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801b48a:	d001      	beq.n	801b490 <VerifyRfFreq+0x4c>
    {
        return false;
 801b48c:	2300      	movs	r3, #0
 801b48e:	e00a      	b.n	801b4a6 <VerifyRfFreq+0x62>
    }

    // Test for frequency range - take RX and TX freqencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	4a0c      	ldr	r2, [pc, #48]	; (801b4c4 <VerifyRfFreq+0x80>)
 801b494:	4293      	cmp	r3, r2
 801b496:	d903      	bls.n	801b4a0 <VerifyRfFreq+0x5c>
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	4a07      	ldr	r2, [pc, #28]	; (801b4b8 <VerifyRfFreq+0x74>)
 801b49c:	4293      	cmp	r3, r2
 801b49e:	d901      	bls.n	801b4a4 <VerifyRfFreq+0x60>
    {
        return false;
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	e000      	b.n	801b4a6 <VerifyRfFreq+0x62>
    }
    return true;
 801b4a4:	2301      	movs	r3, #1
}
 801b4a6:	0018      	movs	r0, r3
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	b002      	add	sp, #8
 801b4ac:	bd80      	pop	{r7, pc}
 801b4ae:	46c0      	nop			; (mov r8, r8)
 801b4b0:	08028964 	.word	0x08028964
 801b4b4:	3708709f 	.word	0x3708709f
 801b4b8:	374886e0 	.word	0x374886e0
 801b4bc:	c8f78f60 	.word	0xc8f78f60
 801b4c0:	000927c0 	.word	0x000927c0
 801b4c4:	35c8015f 	.word	0x35c8015f

0801b4c8 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 801b4c8:	b5b0      	push	{r4, r5, r7, lr}
 801b4ca:	b086      	sub	sp, #24
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	60b9      	str	r1, [r7, #8]
 801b4d0:	607a      	str	r2, [r7, #4]
 801b4d2:	603b      	str	r3, [r7, #0]
 801b4d4:	230f      	movs	r3, #15
 801b4d6:	18fb      	adds	r3, r7, r3
 801b4d8:	1c02      	adds	r2, r0, #0
 801b4da:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 801b4dc:	2317      	movs	r3, #23
 801b4de:	18fb      	adds	r3, r7, r3
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 801b4e4:	2316      	movs	r3, #22
 801b4e6:	18fb      	adds	r3, r7, r3
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < US915_MAX_NB_CHANNELS; i += 16, k++ )
 801b4ec:	2315      	movs	r3, #21
 801b4ee:	18fb      	adds	r3, r7, r3
 801b4f0:	2200      	movs	r2, #0
 801b4f2:	701a      	strb	r2, [r3, #0]
 801b4f4:	2314      	movs	r3, #20
 801b4f6:	18fb      	adds	r3, r7, r3
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	701a      	strb	r2, [r3, #0]
 801b4fc:	e0a0      	b.n	801b640 <CountNbOfEnabledChannels+0x178>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801b4fe:	2313      	movs	r3, #19
 801b500:	18fb      	adds	r3, r7, r3
 801b502:	2200      	movs	r2, #0
 801b504:	701a      	strb	r2, [r3, #0]
 801b506:	e089      	b.n	801b61c <CountNbOfEnabledChannels+0x154>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 801b508:	2314      	movs	r3, #20
 801b50a:	18fb      	adds	r3, r7, r3
 801b50c:	781b      	ldrb	r3, [r3, #0]
 801b50e:	005b      	lsls	r3, r3, #1
 801b510:	68ba      	ldr	r2, [r7, #8]
 801b512:	18d3      	adds	r3, r2, r3
 801b514:	881b      	ldrh	r3, [r3, #0]
 801b516:	001a      	movs	r2, r3
 801b518:	2313      	movs	r3, #19
 801b51a:	18fb      	adds	r3, r7, r3
 801b51c:	781b      	ldrb	r3, [r3, #0]
 801b51e:	411a      	asrs	r2, r3
 801b520:	0013      	movs	r3, r2
 801b522:	2201      	movs	r2, #1
 801b524:	4013      	ands	r3, r2
 801b526:	d073      	beq.n	801b610 <CountNbOfEnabledChannels+0x148>
            {
                if( channels[i + j].Frequency == 0 )
 801b528:	2315      	movs	r3, #21
 801b52a:	18fb      	adds	r3, r7, r3
 801b52c:	781a      	ldrb	r2, [r3, #0]
 801b52e:	2313      	movs	r3, #19
 801b530:	18fb      	adds	r3, r7, r3
 801b532:	781b      	ldrb	r3, [r3, #0]
 801b534:	18d3      	adds	r3, r2, r3
 801b536:	001a      	movs	r2, r3
 801b538:	0013      	movs	r3, r2
 801b53a:	005b      	lsls	r3, r3, #1
 801b53c:	189b      	adds	r3, r3, r2
 801b53e:	009b      	lsls	r3, r3, #2
 801b540:	001a      	movs	r2, r3
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	189b      	adds	r3, r3, r2
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d05e      	beq.n	801b60a <CountNbOfEnabledChannels+0x142>
                { // Check if the channel is enabled
                    continue;
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801b54c:	230f      	movs	r3, #15
 801b54e:	18fb      	adds	r3, r7, r3
 801b550:	2000      	movs	r0, #0
 801b552:	5618      	ldrsb	r0, [r3, r0]
 801b554:	2415      	movs	r4, #21
 801b556:	193b      	adds	r3, r7, r4
 801b558:	781a      	ldrb	r2, [r3, #0]
 801b55a:	2513      	movs	r5, #19
 801b55c:	197b      	adds	r3, r7, r5
 801b55e:	781b      	ldrb	r3, [r3, #0]
 801b560:	18d3      	adds	r3, r2, r3
 801b562:	001a      	movs	r2, r3
 801b564:	0013      	movs	r3, r2
 801b566:	005b      	lsls	r3, r3, #1
 801b568:	189b      	adds	r3, r3, r2
 801b56a:	009b      	lsls	r3, r3, #2
 801b56c:	001a      	movs	r2, r3
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	189b      	adds	r3, r3, r2
 801b572:	7a1b      	ldrb	r3, [r3, #8]
 801b574:	011b      	lsls	r3, r3, #4
 801b576:	b25b      	sxtb	r3, r3
 801b578:	111b      	asrs	r3, r3, #4
 801b57a:	b25b      	sxtb	r3, r3
 801b57c:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 801b57e:	193b      	adds	r3, r7, r4
 801b580:	781a      	ldrb	r2, [r3, #0]
 801b582:	197b      	adds	r3, r7, r5
 801b584:	781b      	ldrb	r3, [r3, #0]
 801b586:	18d3      	adds	r3, r2, r3
 801b588:	001a      	movs	r2, r3
 801b58a:	0013      	movs	r3, r2
 801b58c:	005b      	lsls	r3, r3, #1
 801b58e:	189b      	adds	r3, r3, r2
 801b590:	009b      	lsls	r3, r3, #2
 801b592:	001a      	movs	r2, r3
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	189b      	adds	r3, r3, r2
 801b598:	7a1b      	ldrb	r3, [r3, #8]
 801b59a:	b25b      	sxtb	r3, r3
 801b59c:	111b      	asrs	r3, r3, #4
 801b59e:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801b5a0:	001a      	movs	r2, r3
 801b5a2:	f7f8 feed 	bl	8014380 <RegionCommonValueInRange>
 801b5a6:	1e03      	subs	r3, r0, #0
 801b5a8:	d031      	beq.n	801b60e <CountNbOfEnabledChannels+0x146>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 801b5aa:	2315      	movs	r3, #21
 801b5ac:	18fb      	adds	r3, r7, r3
 801b5ae:	781a      	ldrb	r2, [r3, #0]
 801b5b0:	2313      	movs	r3, #19
 801b5b2:	18fb      	adds	r3, r7, r3
 801b5b4:	781b      	ldrb	r3, [r3, #0]
 801b5b6:	18d3      	adds	r3, r2, r3
 801b5b8:	001a      	movs	r2, r3
 801b5ba:	0013      	movs	r3, r2
 801b5bc:	005b      	lsls	r3, r3, #1
 801b5be:	189b      	adds	r3, r3, r2
 801b5c0:	009b      	lsls	r3, r3, #2
 801b5c2:	001a      	movs	r2, r3
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	189b      	adds	r3, r3, r2
 801b5c8:	7a5b      	ldrb	r3, [r3, #9]
 801b5ca:	011b      	lsls	r3, r3, #4
 801b5cc:	683a      	ldr	r2, [r7, #0]
 801b5ce:	18d3      	adds	r3, r2, r3
 801b5d0:	68db      	ldr	r3, [r3, #12]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d006      	beq.n	801b5e4 <CountNbOfEnabledChannels+0x11c>
                { // Check if the band is available for transmission
                    delayTransmission++;
 801b5d6:	2116      	movs	r1, #22
 801b5d8:	187b      	adds	r3, r7, r1
 801b5da:	781a      	ldrb	r2, [r3, #0]
 801b5dc:	187b      	adds	r3, r7, r1
 801b5de:	3201      	adds	r2, #1
 801b5e0:	701a      	strb	r2, [r3, #0]
                    continue;
 801b5e2:	e015      	b.n	801b610 <CountNbOfEnabledChannels+0x148>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 801b5e4:	2217      	movs	r2, #23
 801b5e6:	18bb      	adds	r3, r7, r2
 801b5e8:	781b      	ldrb	r3, [r3, #0]
 801b5ea:	18ba      	adds	r2, r7, r2
 801b5ec:	1c59      	adds	r1, r3, #1
 801b5ee:	7011      	strb	r1, [r2, #0]
 801b5f0:	001a      	movs	r2, r3
 801b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5f4:	189b      	adds	r3, r3, r2
 801b5f6:	2215      	movs	r2, #21
 801b5f8:	18b9      	adds	r1, r7, r2
 801b5fa:	2213      	movs	r2, #19
 801b5fc:	18ba      	adds	r2, r7, r2
 801b5fe:	7809      	ldrb	r1, [r1, #0]
 801b600:	7812      	ldrb	r2, [r2, #0]
 801b602:	188a      	adds	r2, r1, r2
 801b604:	b2d2      	uxtb	r2, r2
 801b606:	701a      	strb	r2, [r3, #0]
 801b608:	e002      	b.n	801b610 <CountNbOfEnabledChannels+0x148>
                    continue;
 801b60a:	46c0      	nop			; (mov r8, r8)
 801b60c:	e000      	b.n	801b610 <CountNbOfEnabledChannels+0x148>
                    continue;
 801b60e:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801b610:	2113      	movs	r1, #19
 801b612:	187b      	adds	r3, r7, r1
 801b614:	781a      	ldrb	r2, [r3, #0]
 801b616:	187b      	adds	r3, r7, r1
 801b618:	3201      	adds	r2, #1
 801b61a:	701a      	strb	r2, [r3, #0]
 801b61c:	2313      	movs	r3, #19
 801b61e:	18fb      	adds	r3, r7, r3
 801b620:	781b      	ldrb	r3, [r3, #0]
 801b622:	2b0f      	cmp	r3, #15
 801b624:	d800      	bhi.n	801b628 <CountNbOfEnabledChannels+0x160>
 801b626:	e76f      	b.n	801b508 <CountNbOfEnabledChannels+0x40>
    for( uint8_t i = 0, k = 0; i < US915_MAX_NB_CHANNELS; i += 16, k++ )
 801b628:	2215      	movs	r2, #21
 801b62a:	18bb      	adds	r3, r7, r2
 801b62c:	18ba      	adds	r2, r7, r2
 801b62e:	7812      	ldrb	r2, [r2, #0]
 801b630:	3210      	adds	r2, #16
 801b632:	701a      	strb	r2, [r3, #0]
 801b634:	2114      	movs	r1, #20
 801b636:	187b      	adds	r3, r7, r1
 801b638:	781a      	ldrb	r2, [r3, #0]
 801b63a:	187b      	adds	r3, r7, r1
 801b63c:	3201      	adds	r2, #1
 801b63e:	701a      	strb	r2, [r3, #0]
 801b640:	2315      	movs	r3, #21
 801b642:	18fb      	adds	r3, r7, r3
 801b644:	781b      	ldrb	r3, [r3, #0]
 801b646:	2b47      	cmp	r3, #71	; 0x47
 801b648:	d800      	bhi.n	801b64c <CountNbOfEnabledChannels+0x184>
 801b64a:	e758      	b.n	801b4fe <CountNbOfEnabledChannels+0x36>
            }
        }
    }

    *delayTx = delayTransmission;
 801b64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b64e:	2216      	movs	r2, #22
 801b650:	18ba      	adds	r2, r7, r2
 801b652:	7812      	ldrb	r2, [r2, #0]
 801b654:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 801b656:	2317      	movs	r3, #23
 801b658:	18fb      	adds	r3, r7, r3
 801b65a:	781b      	ldrb	r3, [r3, #0]
}
 801b65c:	0018      	movs	r0, r3
 801b65e:	46bd      	mov	sp, r7
 801b660:	b006      	add	sp, #24
 801b662:	bdb0      	pop	{r4, r5, r7, pc}

0801b664 <RegionUS915GetPhyParam>:

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801b664:	b580      	push	{r7, lr}
 801b666:	b084      	sub	sp, #16
 801b668:	af00      	add	r7, sp, #0
 801b66a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801b66c:	2308      	movs	r3, #8
 801b66e:	18fb      	adds	r3, r7, r3
 801b670:	2200      	movs	r2, #0
 801b672:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	781b      	ldrb	r3, [r3, #0]
 801b678:	2b34      	cmp	r3, #52	; 0x34
 801b67a:	d900      	bls.n	801b67e <RegionUS915GetPhyParam+0x1a>
 801b67c:	e0d7      	b.n	801b82e <RegionUS915GetPhyParam+0x1ca>
 801b67e:	009a      	lsls	r2, r3, #2
 801b680:	4b72      	ldr	r3, [pc, #456]	; (801b84c <RegionUS915GetPhyParam+0x1e8>)
 801b682:	18d3      	adds	r3, r2, r3
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801b688:	2308      	movs	r3, #8
 801b68a:	18fb      	adds	r3, r7, r3
 801b68c:	2208      	movs	r2, #8
 801b68e:	601a      	str	r2, [r3, #0]
            break;
 801b690:	e0ce      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801b692:	2308      	movs	r3, #8
 801b694:	18fb      	adds	r3, r7, r3
 801b696:	2200      	movs	r2, #0
 801b698:	601a      	str	r2, [r3, #0]
            break;
 801b69a:	e0c9      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801b69c:	2308      	movs	r3, #8
 801b69e:	18fb      	adds	r3, r7, r3
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	601a      	str	r2, [r3, #0]
            break;
 801b6a4:	e0c4      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, US915_TX_MIN_DATARATE );
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	785b      	ldrb	r3, [r3, #1]
 801b6aa:	b25b      	sxtb	r3, r3
 801b6ac:	2100      	movs	r1, #0
 801b6ae:	0018      	movs	r0, r3
 801b6b0:	f7ff fd51 	bl	801b156 <GetNextLowerTxDr>
 801b6b4:	0003      	movs	r3, r0
 801b6b6:	001a      	movs	r2, r3
 801b6b8:	2308      	movs	r3, #8
 801b6ba:	18fb      	adds	r3, r7, r3
 801b6bc:	601a      	str	r2, [r3, #0]
            break;
 801b6be:	e0b7      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801b6c0:	2308      	movs	r3, #8
 801b6c2:	18fb      	adds	r3, r7, r3
 801b6c4:	2200      	movs	r2, #0
 801b6c6:	601a      	str	r2, [r3, #0]
            break;
 801b6c8:	e0b2      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801b6ca:	2308      	movs	r3, #8
 801b6cc:	18fb      	adds	r3, r7, r3
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	601a      	str	r2, [r3, #0]
            break;
 801b6d2:	e0ad      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = US915_ADR_ACK_LIMIT;
 801b6d4:	2308      	movs	r3, #8
 801b6d6:	18fb      	adds	r3, r7, r3
 801b6d8:	2240      	movs	r2, #64	; 0x40
 801b6da:	601a      	str	r2, [r3, #0]
            break;
 801b6dc:	e0a8      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = US915_ADR_ACK_DELAY;
 801b6de:	2308      	movs	r3, #8
 801b6e0:	18fb      	adds	r3, r7, r3
 801b6e2:	2220      	movs	r2, #32
 801b6e4:	601a      	str	r2, [r3, #0]
            break;
 801b6e6:	e0a3      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	785b      	ldrb	r3, [r3, #1]
 801b6ec:	b25b      	sxtb	r3, r3
 801b6ee:	001a      	movs	r2, r3
 801b6f0:	4b57      	ldr	r3, [pc, #348]	; (801b850 <RegionUS915GetPhyParam+0x1ec>)
 801b6f2:	5c9b      	ldrb	r3, [r3, r2]
 801b6f4:	001a      	movs	r2, r3
 801b6f6:	2308      	movs	r3, #8
 801b6f8:	18fb      	adds	r3, r7, r3
 801b6fa:	601a      	str	r2, [r3, #0]
            break;
 801b6fc:	e098      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	785b      	ldrb	r3, [r3, #1]
 801b702:	b25b      	sxtb	r3, r3
 801b704:	001a      	movs	r2, r3
 801b706:	4b53      	ldr	r3, [pc, #332]	; (801b854 <RegionUS915GetPhyParam+0x1f0>)
 801b708:	5c9b      	ldrb	r3, [r3, r2]
 801b70a:	001a      	movs	r2, r3
 801b70c:	2308      	movs	r3, #8
 801b70e:	18fb      	adds	r3, r7, r3
 801b710:	601a      	str	r2, [r3, #0]
            break;
 801b712:	e08d      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801b714:	2308      	movs	r3, #8
 801b716:	18fb      	adds	r3, r7, r3
 801b718:	2200      	movs	r2, #0
 801b71a:	601a      	str	r2, [r3, #0]
            break;
 801b71c:	e088      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801b71e:	2308      	movs	r3, #8
 801b720:	18fb      	adds	r3, r7, r3
 801b722:	4a4d      	ldr	r2, [pc, #308]	; (801b858 <RegionUS915GetPhyParam+0x1f4>)
 801b724:	601a      	str	r2, [r3, #0]
            break;
 801b726:	e083      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = US915_RECEIVE_DELAY1;
 801b728:	2308      	movs	r3, #8
 801b72a:	18fb      	adds	r3, r7, r3
 801b72c:	22fa      	movs	r2, #250	; 0xfa
 801b72e:	0092      	lsls	r2, r2, #2
 801b730:	601a      	str	r2, [r3, #0]
            break;
 801b732:	e07d      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = US915_RECEIVE_DELAY2;
 801b734:	2308      	movs	r3, #8
 801b736:	18fb      	adds	r3, r7, r3
 801b738:	22fa      	movs	r2, #250	; 0xfa
 801b73a:	00d2      	lsls	r2, r2, #3
 801b73c:	601a      	str	r2, [r3, #0]
            break;
 801b73e:	e077      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = US915_JOIN_ACCEPT_DELAY1;
 801b740:	2308      	movs	r3, #8
 801b742:	18fb      	adds	r3, r7, r3
 801b744:	4a45      	ldr	r2, [pc, #276]	; (801b85c <RegionUS915GetPhyParam+0x1f8>)
 801b746:	601a      	str	r2, [r3, #0]
            break;
 801b748:	e072      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = US915_JOIN_ACCEPT_DELAY2;
 801b74a:	2308      	movs	r3, #8
 801b74c:	18fb      	adds	r3, r7, r3
 801b74e:	4a44      	ldr	r2, [pc, #272]	; (801b860 <RegionUS915GetPhyParam+0x1fc>)
 801b750:	601a      	str	r2, [r3, #0]
            break;
 801b752:	e06d      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = US915_MAX_FCNT_GAP;
 801b754:	2308      	movs	r3, #8
 801b756:	18fb      	adds	r3, r7, r3
 801b758:	2280      	movs	r2, #128	; 0x80
 801b75a:	01d2      	lsls	r2, r2, #7
 801b75c:	601a      	str	r2, [r3, #0]
            break;
 801b75e:	e067      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( US915_ACKTIMEOUT + randr( -US915_ACK_TIMEOUT_RND, US915_ACK_TIMEOUT_RND ) );
 801b760:	23fa      	movs	r3, #250	; 0xfa
 801b762:	009b      	lsls	r3, r3, #2
 801b764:	4a3f      	ldr	r2, [pc, #252]	; (801b864 <RegionUS915GetPhyParam+0x200>)
 801b766:	0019      	movs	r1, r3
 801b768:	0010      	movs	r0, r2
 801b76a:	f001 faa1 	bl	801ccb0 <randr>
 801b76e:	0003      	movs	r3, r0
 801b770:	22fa      	movs	r2, #250	; 0xfa
 801b772:	00d2      	lsls	r2, r2, #3
 801b774:	4694      	mov	ip, r2
 801b776:	4463      	add	r3, ip
 801b778:	001a      	movs	r2, r3
 801b77a:	2308      	movs	r3, #8
 801b77c:	18fb      	adds	r3, r7, r3
 801b77e:	601a      	str	r2, [r3, #0]
            break;
 801b780:	e056      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = US915_DEFAULT_RX1_DR_OFFSET;
 801b782:	2308      	movs	r3, #8
 801b784:	18fb      	adds	r3, r7, r3
 801b786:	2200      	movs	r2, #0
 801b788:	601a      	str	r2, [r3, #0]
            break;
 801b78a:	e051      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801b78c:	2308      	movs	r3, #8
 801b78e:	18fb      	adds	r3, r7, r3
 801b790:	4a35      	ldr	r2, [pc, #212]	; (801b868 <RegionUS915GetPhyParam+0x204>)
 801b792:	601a      	str	r2, [r3, #0]
            break;
 801b794:	e04c      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801b796:	2308      	movs	r3, #8
 801b798:	18fb      	adds	r3, r7, r3
 801b79a:	2208      	movs	r2, #8
 801b79c:	601a      	str	r2, [r3, #0]
            break;
 801b79e:	e047      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 801b7a0:	2308      	movs	r3, #8
 801b7a2:	18fb      	adds	r3, r7, r3
 801b7a4:	4a31      	ldr	r2, [pc, #196]	; (801b86c <RegionUS915GetPhyParam+0x208>)
 801b7a6:	601a      	str	r2, [r3, #0]
            break;
 801b7a8:	e042      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801b7aa:	2308      	movs	r3, #8
 801b7ac:	18fb      	adds	r3, r7, r3
 801b7ae:	4a30      	ldr	r2, [pc, #192]	; (801b870 <RegionUS915GetPhyParam+0x20c>)
 801b7b0:	601a      	str	r2, [r3, #0]
            break;
 801b7b2:	e03d      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801b7b4:	2308      	movs	r3, #8
 801b7b6:	18fb      	adds	r3, r7, r3
 801b7b8:	2248      	movs	r2, #72	; 0x48
 801b7ba:	601a      	str	r2, [r3, #0]
            break;
 801b7bc:	e038      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801b7be:	2308      	movs	r3, #8
 801b7c0:	18fb      	adds	r3, r7, r3
 801b7c2:	4a2c      	ldr	r2, [pc, #176]	; (801b874 <RegionUS915GetPhyParam+0x210>)
 801b7c4:	601a      	str	r2, [r3, #0]
            break;
 801b7c6:	e033      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 801b7c8:	2308      	movs	r3, #8
 801b7ca:	18fb      	adds	r3, r7, r3
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	601a      	str	r2, [r3, #0]
            break;
 801b7d0:	e02e      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + (float) 2.15;
 801b7d2:	2308      	movs	r3, #8
 801b7d4:	18fb      	adds	r3, r7, r3
 801b7d6:	4a28      	ldr	r2, [pc, #160]	; (801b878 <RegionUS915GetPhyParam+0x214>)
 801b7d8:	601a      	str	r2, [r3, #0]
            break;
 801b7da:	e029      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801b7dc:	2308      	movs	r3, #8
 801b7de:	18fb      	adds	r3, r7, r3
 801b7e0:	2200      	movs	r2, #0
 801b7e2:	601a      	str	r2, [r3, #0]
            break;
 801b7e4:	e024      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = US915_BEACON_CHANNEL_FREQ;
 801b7e6:	2308      	movs	r3, #8
 801b7e8:	18fb      	adds	r3, r7, r3
 801b7ea:	4a1f      	ldr	r2, [pc, #124]	; (801b868 <RegionUS915GetPhyParam+0x204>)
 801b7ec:	601a      	str	r2, [r3, #0]
            break;
 801b7ee:	e01f      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801b7f0:	2108      	movs	r1, #8
 801b7f2:	187b      	adds	r3, r7, r1
 801b7f4:	2217      	movs	r2, #23
 801b7f6:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801b7f8:	187b      	adds	r3, r7, r1
 801b7fa:	2205      	movs	r2, #5
 801b7fc:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801b7fe:	187b      	adds	r3, r7, r1
 801b800:	2203      	movs	r2, #3
 801b802:	709a      	strb	r2, [r3, #2]
            break;
 801b804:	e014      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801b806:	2308      	movs	r3, #8
 801b808:	18fb      	adds	r3, r7, r3
 801b80a:	2208      	movs	r2, #8
 801b80c:	601a      	str	r2, [r3, #0]
            break;
 801b80e:	e00f      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_CHANNEL_STEPWIDTH:
        {
            phyParam.Value = US915_BEACON_CHANNEL_STEPWIDTH;
 801b810:	2308      	movs	r3, #8
 801b812:	18fb      	adds	r3, r7, r3
 801b814:	4a19      	ldr	r2, [pc, #100]	; (801b87c <RegionUS915GetPhyParam+0x218>)
 801b816:	601a      	str	r2, [r3, #0]
            break;
 801b818:	e00a      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801b81a:	2308      	movs	r3, #8
 801b81c:	18fb      	adds	r3, r7, r3
 801b81e:	2208      	movs	r2, #8
 801b820:	601a      	str	r2, [r3, #0]
            break;
 801b822:	e005      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801b824:	2308      	movs	r3, #8
 801b826:	18fb      	adds	r3, r7, r3
 801b828:	2208      	movs	r2, #8
 801b82a:	601a      	str	r2, [r3, #0]
            break;
 801b82c:	e000      	b.n	801b830 <RegionUS915GetPhyParam+0x1cc>
        }
        default:
        {
            break;
 801b82e:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 801b830:	210c      	movs	r1, #12
 801b832:	187b      	adds	r3, r7, r1
 801b834:	2208      	movs	r2, #8
 801b836:	18ba      	adds	r2, r7, r2
 801b838:	6812      	ldr	r2, [r2, #0]
 801b83a:	601a      	str	r2, [r3, #0]
 801b83c:	187b      	adds	r3, r7, r1
 801b83e:	2200      	movs	r2, #0
 801b840:	681a      	ldr	r2, [r3, #0]
 801b842:	0013      	movs	r3, r2
}
 801b844:	0018      	movs	r0, r3
 801b846:	46bd      	mov	sp, r7
 801b848:	b004      	add	sp, #16
 801b84a:	bd80      	pop	{r7, pc}
 801b84c:	08028890 	.word	0x08028890
 801b850:	08028870 	.word	0x08028870
 801b854:	08028880 	.word	0x08028880
 801b858:	00000bb8 	.word	0x00000bb8
 801b85c:	00001388 	.word	0x00001388
 801b860:	00001770 	.word	0x00001770
 801b864:	fffffc18 	.word	0xfffffc18
 801b868:	370870a0 	.word	0x370870a0
 801b86c:	20001bac 	.word	0x20001bac
 801b870:	20001bc4 	.word	0x20001bc4
 801b874:	2000183c 	.word	0x2000183c
 801b878:	4200999a 	.word	0x4200999a
 801b87c:	000927c0 	.word	0x000927c0

0801b880 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801b880:	b580      	push	{r7, lr}
 801b882:	b082      	sub	sp, #8
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	7858      	ldrb	r0, [r3, #1]
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	781b      	ldrb	r3, [r3, #0]
 801b890:	0019      	movs	r1, r3
 801b892:	4a0a      	ldr	r2, [pc, #40]	; (801b8bc <RegionUS915SetBandTxDone+0x3c>)
 801b894:	000b      	movs	r3, r1
 801b896:	005b      	lsls	r3, r3, #1
 801b898:	185b      	adds	r3, r3, r1
 801b89a:	009b      	lsls	r3, r3, #2
 801b89c:	18d3      	adds	r3, r2, r3
 801b89e:	3309      	adds	r3, #9
 801b8a0:	781b      	ldrb	r3, [r3, #0]
 801b8a2:	3336      	adds	r3, #54	; 0x36
 801b8a4:	011a      	lsls	r2, r3, #4
 801b8a6:	4b05      	ldr	r3, [pc, #20]	; (801b8bc <RegionUS915SetBandTxDone+0x3c>)
 801b8a8:	18d1      	adds	r1, r2, r3
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	685b      	ldr	r3, [r3, #4]
 801b8ae:	001a      	movs	r2, r3
 801b8b0:	f7f8 fe3e 	bl	8014530 <RegionCommonSetBandTxDone>
}
 801b8b4:	46c0      	nop			; (mov r8, r8)
 801b8b6:	46bd      	mov	sp, r7
 801b8b8:	b002      	add	sp, #8
 801b8ba:	bd80      	pop	{r7, pc}
 801b8bc:	2000183c 	.word	0x2000183c

0801b8c0 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801b8c0:	b590      	push	{r4, r7, lr}
 801b8c2:	b089      	sub	sp, #36	; 0x24
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
    Band_t bands[US915_MAX_NB_BANDS] =
 801b8c8:	210c      	movs	r1, #12
 801b8ca:	187b      	adds	r3, r7, r1
 801b8cc:	2201      	movs	r2, #1
 801b8ce:	801a      	strh	r2, [r3, #0]
 801b8d0:	187b      	adds	r3, r7, r1
 801b8d2:	2200      	movs	r2, #0
 801b8d4:	709a      	strb	r2, [r3, #2]
 801b8d6:	187b      	adds	r3, r7, r1
 801b8d8:	2200      	movs	r2, #0
 801b8da:	605a      	str	r2, [r3, #4]
 801b8dc:	187b      	adds	r3, r7, r1
 801b8de:	2200      	movs	r2, #0
 801b8e0:	609a      	str	r2, [r3, #8]
 801b8e2:	187b      	adds	r3, r7, r1
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	60da      	str	r2, [r3, #12]
    {
       US915_BAND0
    };

    switch( params->Type )
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	791b      	ldrb	r3, [r3, #4]
 801b8ec:	2b01      	cmp	r3, #1
 801b8ee:	d100      	bne.n	801b8f2 <RegionUS915InitDefaults+0x32>
 801b8f0:	e0bd      	b.n	801ba6e <RegionUS915InitDefaults+0x1ae>
 801b8f2:	2b02      	cmp	r3, #2
 801b8f4:	d100      	bne.n	801b8f8 <RegionUS915InitDefaults+0x38>
 801b8f6:	e0ad      	b.n	801ba54 <RegionUS915InitDefaults+0x194>
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d000      	beq.n	801b8fe <RegionUS915InitDefaults+0x3e>
            }
            break;
        }
        default:
        {
            break;
 801b8fc:	e0eb      	b.n	801bad6 <RegionUS915InitDefaults+0x216>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801b8fe:	230c      	movs	r3, #12
 801b900:	18f9      	adds	r1, r7, r3
 801b902:	4b77      	ldr	r3, [pc, #476]	; (801bae0 <RegionUS915InitDefaults+0x220>)
 801b904:	2210      	movs	r2, #16
 801b906:	0018      	movs	r0, r3
 801b908:	f001 f9e8 	bl	801ccdc <memcpy1>
            NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 801b90c:	4a75      	ldr	r2, [pc, #468]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b90e:	23e5      	movs	r3, #229	; 0xe5
 801b910:	009b      	lsls	r3, r3, #2
 801b912:	2100      	movs	r1, #0
 801b914:	54d1      	strb	r1, [r2, r3]
            NvmCtx.JoinTrialsCounter = 0;
 801b916:	4b73      	ldr	r3, [pc, #460]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b918:	4a73      	ldr	r2, [pc, #460]	; (801bae8 <RegionUS915InitDefaults+0x228>)
 801b91a:	2100      	movs	r1, #0
 801b91c:	5499      	strb	r1, [r3, r2]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801b91e:	231f      	movs	r3, #31
 801b920:	18fb      	adds	r3, r7, r3
 801b922:	2200      	movs	r2, #0
 801b924:	701a      	strb	r2, [r3, #0]
 801b926:	e02c      	b.n	801b982 <RegionUS915InitDefaults+0xc2>
                NvmCtx.Channels[i].Frequency = 902300000 + i * 200000;
 801b928:	201f      	movs	r0, #31
 801b92a:	183b      	adds	r3, r7, r0
 801b92c:	781b      	ldrb	r3, [r3, #0]
 801b92e:	4a6f      	ldr	r2, [pc, #444]	; (801baec <RegionUS915InitDefaults+0x22c>)
 801b930:	4353      	muls	r3, r2
 801b932:	4a6f      	ldr	r2, [pc, #444]	; (801baf0 <RegionUS915InitDefaults+0x230>)
 801b934:	1899      	adds	r1, r3, r2
 801b936:	0004      	movs	r4, r0
 801b938:	183b      	adds	r3, r7, r0
 801b93a:	781a      	ldrb	r2, [r3, #0]
 801b93c:	0008      	movs	r0, r1
 801b93e:	4969      	ldr	r1, [pc, #420]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b940:	0013      	movs	r3, r2
 801b942:	005b      	lsls	r3, r3, #1
 801b944:	189b      	adds	r3, r3, r2
 801b946:	009b      	lsls	r3, r3, #2
 801b948:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801b94a:	0020      	movs	r0, r4
 801b94c:	183b      	adds	r3, r7, r0
 801b94e:	781a      	ldrb	r2, [r3, #0]
 801b950:	4964      	ldr	r1, [pc, #400]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b952:	0013      	movs	r3, r2
 801b954:	005b      	lsls	r3, r3, #1
 801b956:	189b      	adds	r3, r3, r2
 801b958:	009b      	lsls	r3, r3, #2
 801b95a:	18cb      	adds	r3, r1, r3
 801b95c:	3308      	adds	r3, #8
 801b95e:	2230      	movs	r2, #48	; 0x30
 801b960:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 801b962:	183b      	adds	r3, r7, r0
 801b964:	781a      	ldrb	r2, [r3, #0]
 801b966:	495f      	ldr	r1, [pc, #380]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b968:	0013      	movs	r3, r2
 801b96a:	005b      	lsls	r3, r3, #1
 801b96c:	189b      	adds	r3, r3, r2
 801b96e:	009b      	lsls	r3, r3, #2
 801b970:	18cb      	adds	r3, r1, r3
 801b972:	3309      	adds	r3, #9
 801b974:	2200      	movs	r2, #0
 801b976:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801b978:	183b      	adds	r3, r7, r0
 801b97a:	781a      	ldrb	r2, [r3, #0]
 801b97c:	183b      	adds	r3, r7, r0
 801b97e:	3201      	adds	r2, #1
 801b980:	701a      	strb	r2, [r3, #0]
 801b982:	231f      	movs	r3, #31
 801b984:	18fb      	adds	r3, r7, r3
 801b986:	781b      	ldrb	r3, [r3, #0]
 801b988:	2b3f      	cmp	r3, #63	; 0x3f
 801b98a:	d9cd      	bls.n	801b928 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801b98c:	231e      	movs	r3, #30
 801b98e:	18fb      	adds	r3, r7, r3
 801b990:	2240      	movs	r2, #64	; 0x40
 801b992:	701a      	strb	r2, [r3, #0]
 801b994:	e02d      	b.n	801b9f2 <RegionUS915InitDefaults+0x132>
                NvmCtx.Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801b996:	201e      	movs	r0, #30
 801b998:	183b      	adds	r3, r7, r0
 801b99a:	781b      	ldrb	r3, [r3, #0]
 801b99c:	3b40      	subs	r3, #64	; 0x40
 801b99e:	4a55      	ldr	r2, [pc, #340]	; (801baf4 <RegionUS915InitDefaults+0x234>)
 801b9a0:	4353      	muls	r3, r2
 801b9a2:	4a55      	ldr	r2, [pc, #340]	; (801baf8 <RegionUS915InitDefaults+0x238>)
 801b9a4:	1899      	adds	r1, r3, r2
 801b9a6:	0004      	movs	r4, r0
 801b9a8:	183b      	adds	r3, r7, r0
 801b9aa:	781a      	ldrb	r2, [r3, #0]
 801b9ac:	0008      	movs	r0, r1
 801b9ae:	494d      	ldr	r1, [pc, #308]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b9b0:	0013      	movs	r3, r2
 801b9b2:	005b      	lsls	r3, r3, #1
 801b9b4:	189b      	adds	r3, r3, r2
 801b9b6:	009b      	lsls	r3, r3, #2
 801b9b8:	5058      	str	r0, [r3, r1]
                NvmCtx.Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801b9ba:	0020      	movs	r0, r4
 801b9bc:	183b      	adds	r3, r7, r0
 801b9be:	781a      	ldrb	r2, [r3, #0]
 801b9c0:	4948      	ldr	r1, [pc, #288]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b9c2:	0013      	movs	r3, r2
 801b9c4:	005b      	lsls	r3, r3, #1
 801b9c6:	189b      	adds	r3, r3, r2
 801b9c8:	009b      	lsls	r3, r3, #2
 801b9ca:	18cb      	adds	r3, r1, r3
 801b9cc:	3308      	adds	r3, #8
 801b9ce:	2244      	movs	r2, #68	; 0x44
 801b9d0:	701a      	strb	r2, [r3, #0]
                NvmCtx.Channels[i].Band = 0;
 801b9d2:	183b      	adds	r3, r7, r0
 801b9d4:	781a      	ldrb	r2, [r3, #0]
 801b9d6:	4943      	ldr	r1, [pc, #268]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b9d8:	0013      	movs	r3, r2
 801b9da:	005b      	lsls	r3, r3, #1
 801b9dc:	189b      	adds	r3, r3, r2
 801b9de:	009b      	lsls	r3, r3, #2
 801b9e0:	18cb      	adds	r3, r1, r3
 801b9e2:	3309      	adds	r3, #9
 801b9e4:	2200      	movs	r2, #0
 801b9e6:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801b9e8:	183b      	adds	r3, r7, r0
 801b9ea:	781a      	ldrb	r2, [r3, #0]
 801b9ec:	183b      	adds	r3, r7, r0
 801b9ee:	3201      	adds	r2, #1
 801b9f0:	701a      	strb	r2, [r3, #0]
 801b9f2:	231e      	movs	r3, #30
 801b9f4:	18fb      	adds	r3, r7, r3
 801b9f6:	781b      	ldrb	r3, [r3, #0]
 801b9f8:	2b47      	cmp	r3, #71	; 0x47
 801b9fa:	d9cc      	bls.n	801b996 <RegionUS915InitDefaults+0xd6>
            NvmCtx.ChannelsDefaultMask[0] = 0xFFFF;
 801b9fc:	4a39      	ldr	r2, [pc, #228]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801b9fe:	23e2      	movs	r3, #226	; 0xe2
 801ba00:	009b      	lsls	r3, r3, #2
 801ba02:	2101      	movs	r1, #1
 801ba04:	4249      	negs	r1, r1
 801ba06:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[1] = 0xFFFF;
 801ba08:	4b36      	ldr	r3, [pc, #216]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801ba0a:	4a3c      	ldr	r2, [pc, #240]	; (801bafc <RegionUS915InitDefaults+0x23c>)
 801ba0c:	2101      	movs	r1, #1
 801ba0e:	4249      	negs	r1, r1
 801ba10:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[2] = 0xFFFF;
 801ba12:	4a34      	ldr	r2, [pc, #208]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801ba14:	23e3      	movs	r3, #227	; 0xe3
 801ba16:	009b      	lsls	r3, r3, #2
 801ba18:	2101      	movs	r1, #1
 801ba1a:	4249      	negs	r1, r1
 801ba1c:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[3] = 0xFFFF;
 801ba1e:	4b31      	ldr	r3, [pc, #196]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801ba20:	4a37      	ldr	r2, [pc, #220]	; (801bb00 <RegionUS915InitDefaults+0x240>)
 801ba22:	2101      	movs	r1, #1
 801ba24:	4249      	negs	r1, r1
 801ba26:	5299      	strh	r1, [r3, r2]
            NvmCtx.ChannelsDefaultMask[4] = 0x00FF;
 801ba28:	4a2e      	ldr	r2, [pc, #184]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801ba2a:	23e4      	movs	r3, #228	; 0xe4
 801ba2c:	009b      	lsls	r3, r3, #2
 801ba2e:	21ff      	movs	r1, #255	; 0xff
 801ba30:	52d1      	strh	r1, [r2, r3]
            NvmCtx.ChannelsDefaultMask[5] = 0x0000;
 801ba32:	4b2c      	ldr	r3, [pc, #176]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801ba34:	4a33      	ldr	r2, [pc, #204]	; (801bb04 <RegionUS915InitDefaults+0x244>)
 801ba36:	2100      	movs	r1, #0
 801ba38:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 801ba3a:	4933      	ldr	r1, [pc, #204]	; (801bb08 <RegionUS915InitDefaults+0x248>)
 801ba3c:	4b33      	ldr	r3, [pc, #204]	; (801bb0c <RegionUS915InitDefaults+0x24c>)
 801ba3e:	2206      	movs	r2, #6
 801ba40:	0018      	movs	r0, r3
 801ba42:	f7f8 fd46 	bl	80144d2 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 6 );
 801ba46:	4931      	ldr	r1, [pc, #196]	; (801bb0c <RegionUS915InitDefaults+0x24c>)
 801ba48:	4b31      	ldr	r3, [pc, #196]	; (801bb10 <RegionUS915InitDefaults+0x250>)
 801ba4a:	2206      	movs	r2, #6
 801ba4c:	0018      	movs	r0, r3
 801ba4e:	f7f8 fd40 	bl	80144d2 <RegionCommonChanMaskCopy>
            break;
 801ba52:	e040      	b.n	801bad6 <RegionUS915InitDefaults+0x216>
            if( params->NvmCtx != 0 )
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d03b      	beq.n	801bad4 <RegionUS915InitDefaults+0x214>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	6819      	ldr	r1, [r3, #0]
 801ba60:	23e6      	movs	r3, #230	; 0xe6
 801ba62:	009a      	lsls	r2, r3, #2
 801ba64:	4b1f      	ldr	r3, [pc, #124]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801ba66:	0018      	movs	r0, r3
 801ba68:	f001 f938 	bl	801ccdc <memcpy1>
            break;
 801ba6c:	e032      	b.n	801bad4 <RegionUS915InitDefaults+0x214>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 6 );
 801ba6e:	4926      	ldr	r1, [pc, #152]	; (801bb08 <RegionUS915InitDefaults+0x248>)
 801ba70:	4b26      	ldr	r3, [pc, #152]	; (801bb0c <RegionUS915InitDefaults+0x24c>)
 801ba72:	2206      	movs	r2, #6
 801ba74:	0018      	movs	r0, r3
 801ba76:	f7f8 fd2c 	bl	80144d2 <RegionCommonChanMaskCopy>
            for( uint8_t i = 0; i < 6; i++ )
 801ba7a:	231d      	movs	r3, #29
 801ba7c:	18fb      	adds	r3, r7, r3
 801ba7e:	2200      	movs	r2, #0
 801ba80:	701a      	strb	r2, [r3, #0]
 801ba82:	e021      	b.n	801bac8 <RegionUS915InitDefaults+0x208>
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 801ba84:	201d      	movs	r0, #29
 801ba86:	183b      	adds	r3, r7, r0
 801ba88:	781b      	ldrb	r3, [r3, #0]
 801ba8a:	4a16      	ldr	r2, [pc, #88]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801ba8c:	33bd      	adds	r3, #189	; 0xbd
 801ba8e:	33ff      	adds	r3, #255	; 0xff
 801ba90:	005b      	lsls	r3, r3, #1
 801ba92:	18d3      	adds	r3, r2, r3
 801ba94:	3304      	adds	r3, #4
 801ba96:	881a      	ldrh	r2, [r3, #0]
 801ba98:	183b      	adds	r3, r7, r0
 801ba9a:	7819      	ldrb	r1, [r3, #0]
 801ba9c:	4b11      	ldr	r3, [pc, #68]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801ba9e:	31b9      	adds	r1, #185	; 0xb9
 801baa0:	31ff      	adds	r1, #255	; 0xff
 801baa2:	0049      	lsls	r1, r1, #1
 801baa4:	5ac9      	ldrh	r1, [r1, r3]
 801baa6:	183b      	adds	r3, r7, r0
 801baa8:	781b      	ldrb	r3, [r3, #0]
 801baaa:	400a      	ands	r2, r1
 801baac:	b291      	uxth	r1, r2
 801baae:	4a0d      	ldr	r2, [pc, #52]	; (801bae4 <RegionUS915InitDefaults+0x224>)
 801bab0:	33bd      	adds	r3, #189	; 0xbd
 801bab2:	33ff      	adds	r3, #255	; 0xff
 801bab4:	005b      	lsls	r3, r3, #1
 801bab6:	18d3      	adds	r3, r2, r3
 801bab8:	3304      	adds	r3, #4
 801baba:	1c0a      	adds	r2, r1, #0
 801babc:	801a      	strh	r2, [r3, #0]
            for( uint8_t i = 0; i < 6; i++ )
 801babe:	183b      	adds	r3, r7, r0
 801bac0:	781a      	ldrb	r2, [r3, #0]
 801bac2:	183b      	adds	r3, r7, r0
 801bac4:	3201      	adds	r2, #1
 801bac6:	701a      	strb	r2, [r3, #0]
 801bac8:	231d      	movs	r3, #29
 801baca:	18fb      	adds	r3, r7, r3
 801bacc:	781b      	ldrb	r3, [r3, #0]
 801bace:	2b05      	cmp	r3, #5
 801bad0:	d9d8      	bls.n	801ba84 <RegionUS915InitDefaults+0x1c4>
            break;
 801bad2:	e000      	b.n	801bad6 <RegionUS915InitDefaults+0x216>
            break;
 801bad4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801bad6:	46c0      	nop			; (mov r8, r8)
 801bad8:	46bd      	mov	sp, r7
 801bada:	b009      	add	sp, #36	; 0x24
 801badc:	bd90      	pop	{r4, r7, pc}
 801bade:	46c0      	nop			; (mov r8, r8)
 801bae0:	20001b9c 	.word	0x20001b9c
 801bae4:	2000183c 	.word	0x2000183c
 801bae8:	00000395 	.word	0x00000395
 801baec:	00030d40 	.word	0x00030d40
 801baf0:	35c80160 	.word	0x35c80160
 801baf4:	00186a00 	.word	0x00186a00
 801baf8:	35d2afc0 	.word	0x35d2afc0
 801bafc:	0000038a 	.word	0x0000038a
 801bb00:	0000038e 	.word	0x0000038e
 801bb04:	00000392 	.word	0x00000392
 801bb08:	20001bc4 	.word	0x20001bc4
 801bb0c:	20001bac 	.word	0x20001bac
 801bb10:	20001bb8 	.word	0x20001bb8

0801bb14 <RegionUS915ApplyCFList>:
            return false;
    }
}

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801bb14:	b590      	push	{r4, r7, lr}
 801bb16:	b085      	sub	sp, #20
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	791b      	ldrb	r3, [r3, #4]
 801bb20:	2b10      	cmp	r3, #16
 801bb22:	d000      	beq.n	801bb26 <RegionUS915ApplyCFList+0x12>
 801bb24:	e07d      	b.n	801bc22 <RegionUS915ApplyCFList+0x10e>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	330f      	adds	r3, #15
 801bb2c:	781b      	ldrb	r3, [r3, #0]
 801bb2e:	2b01      	cmp	r3, #1
 801bb30:	d000      	beq.n	801bb34 <RegionUS915ApplyCFList+0x20>
 801bb32:	e078      	b.n	801bc26 <RegionUS915ApplyCFList+0x112>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801bb34:	230f      	movs	r3, #15
 801bb36:	18fb      	adds	r3, r7, r3
 801bb38:	2200      	movs	r2, #0
 801bb3a:	701a      	strb	r2, [r3, #0]
 801bb3c:	230e      	movs	r3, #14
 801bb3e:	18fb      	adds	r3, r7, r3
 801bb40:	2200      	movs	r2, #0
 801bb42:	701a      	strb	r2, [r3, #0]
 801bb44:	e067      	b.n	801bc16 <RegionUS915ApplyCFList+0x102>
    {
        NvmCtx.ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	681a      	ldr	r2, [r3, #0]
 801bb4a:	240e      	movs	r4, #14
 801bb4c:	193b      	adds	r3, r7, r4
 801bb4e:	781b      	ldrb	r3, [r3, #0]
 801bb50:	18d3      	adds	r3, r2, r3
 801bb52:	7819      	ldrb	r1, [r3, #0]
 801bb54:	200f      	movs	r0, #15
 801bb56:	183b      	adds	r3, r7, r0
 801bb58:	781a      	ldrb	r2, [r3, #0]
 801bb5a:	b289      	uxth	r1, r1
 801bb5c:	4b34      	ldr	r3, [pc, #208]	; (801bc30 <RegionUS915ApplyCFList+0x11c>)
 801bb5e:	32b9      	adds	r2, #185	; 0xb9
 801bb60:	32ff      	adds	r2, #255	; 0xff
 801bb62:	0052      	lsls	r2, r2, #1
 801bb64:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801bb66:	183b      	adds	r3, r7, r0
 801bb68:	781a      	ldrb	r2, [r3, #0]
 801bb6a:	4b31      	ldr	r3, [pc, #196]	; (801bc30 <RegionUS915ApplyCFList+0x11c>)
 801bb6c:	32b9      	adds	r2, #185	; 0xb9
 801bb6e:	32ff      	adds	r2, #255	; 0xff
 801bb70:	0052      	lsls	r2, r2, #1
 801bb72:	5ad1      	ldrh	r1, [r2, r3]
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	681a      	ldr	r2, [r3, #0]
 801bb78:	193b      	adds	r3, r7, r4
 801bb7a:	781b      	ldrb	r3, [r3, #0]
 801bb7c:	3301      	adds	r3, #1
 801bb7e:	18d3      	adds	r3, r2, r3
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	b29b      	uxth	r3, r3
 801bb84:	021b      	lsls	r3, r3, #8
 801bb86:	b29b      	uxth	r3, r3
 801bb88:	183a      	adds	r2, r7, r0
 801bb8a:	7812      	ldrb	r2, [r2, #0]
 801bb8c:	430b      	orrs	r3, r1
 801bb8e:	b299      	uxth	r1, r3
 801bb90:	4b27      	ldr	r3, [pc, #156]	; (801bc30 <RegionUS915ApplyCFList+0x11c>)
 801bb92:	32b9      	adds	r2, #185	; 0xb9
 801bb94:	32ff      	adds	r2, #255	; 0xff
 801bb96:	0052      	lsls	r2, r2, #1
 801bb98:	52d1      	strh	r1, [r2, r3]
        if( chMaskItr == 4 )
 801bb9a:	183b      	adds	r3, r7, r0
 801bb9c:	781b      	ldrb	r3, [r3, #0]
 801bb9e:	2b04      	cmp	r3, #4
 801bba0:	d111      	bne.n	801bbc6 <RegionUS915ApplyCFList+0xb2>
        {
            NvmCtx.ChannelsMask[chMaskItr] = NvmCtx.ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801bba2:	210f      	movs	r1, #15
 801bba4:	187b      	adds	r3, r7, r1
 801bba6:	781a      	ldrb	r2, [r3, #0]
 801bba8:	4b21      	ldr	r3, [pc, #132]	; (801bc30 <RegionUS915ApplyCFList+0x11c>)
 801bbaa:	32b9      	adds	r2, #185	; 0xb9
 801bbac:	32ff      	adds	r2, #255	; 0xff
 801bbae:	0052      	lsls	r2, r2, #1
 801bbb0:	5ad3      	ldrh	r3, [r2, r3]
 801bbb2:	187a      	adds	r2, r7, r1
 801bbb4:	7812      	ldrb	r2, [r2, #0]
 801bbb6:	21ff      	movs	r1, #255	; 0xff
 801bbb8:	400b      	ands	r3, r1
 801bbba:	b299      	uxth	r1, r3
 801bbbc:	4b1c      	ldr	r3, [pc, #112]	; (801bc30 <RegionUS915ApplyCFList+0x11c>)
 801bbbe:	32b9      	adds	r2, #185	; 0xb9
 801bbc0:	32ff      	adds	r2, #255	; 0xff
 801bbc2:	0052      	lsls	r2, r2, #1
 801bbc4:	52d1      	strh	r1, [r2, r3]
        }
        // Set the channel mask to the remaining
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
 801bbc6:	200f      	movs	r0, #15
 801bbc8:	183b      	adds	r3, r7, r0
 801bbca:	781b      	ldrb	r3, [r3, #0]
 801bbcc:	4a18      	ldr	r2, [pc, #96]	; (801bc30 <RegionUS915ApplyCFList+0x11c>)
 801bbce:	33bd      	adds	r3, #189	; 0xbd
 801bbd0:	33ff      	adds	r3, #255	; 0xff
 801bbd2:	005b      	lsls	r3, r3, #1
 801bbd4:	18d3      	adds	r3, r2, r3
 801bbd6:	3304      	adds	r3, #4
 801bbd8:	881a      	ldrh	r2, [r3, #0]
 801bbda:	183b      	adds	r3, r7, r0
 801bbdc:	7819      	ldrb	r1, [r3, #0]
 801bbde:	4b14      	ldr	r3, [pc, #80]	; (801bc30 <RegionUS915ApplyCFList+0x11c>)
 801bbe0:	31b9      	adds	r1, #185	; 0xb9
 801bbe2:	31ff      	adds	r1, #255	; 0xff
 801bbe4:	0049      	lsls	r1, r1, #1
 801bbe6:	5ac9      	ldrh	r1, [r1, r3]
 801bbe8:	183b      	adds	r3, r7, r0
 801bbea:	781b      	ldrb	r3, [r3, #0]
 801bbec:	400a      	ands	r2, r1
 801bbee:	b291      	uxth	r1, r2
 801bbf0:	4a0f      	ldr	r2, [pc, #60]	; (801bc30 <RegionUS915ApplyCFList+0x11c>)
 801bbf2:	33bd      	adds	r3, #189	; 0xbd
 801bbf4:	33ff      	adds	r3, #255	; 0xff
 801bbf6:	005b      	lsls	r3, r3, #1
 801bbf8:	18d3      	adds	r3, r2, r3
 801bbfa:	3304      	adds	r3, #4
 801bbfc:	1c0a      	adds	r2, r1, #0
 801bbfe:	801a      	strh	r2, [r3, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801bc00:	183b      	adds	r3, r7, r0
 801bc02:	781a      	ldrb	r2, [r3, #0]
 801bc04:	183b      	adds	r3, r7, r0
 801bc06:	3201      	adds	r2, #1
 801bc08:	701a      	strb	r2, [r3, #0]
 801bc0a:	220e      	movs	r2, #14
 801bc0c:	18bb      	adds	r3, r7, r2
 801bc0e:	18ba      	adds	r2, r7, r2
 801bc10:	7812      	ldrb	r2, [r2, #0]
 801bc12:	3202      	adds	r2, #2
 801bc14:	701a      	strb	r2, [r3, #0]
 801bc16:	230f      	movs	r3, #15
 801bc18:	18fb      	adds	r3, r7, r3
 801bc1a:	781b      	ldrb	r3, [r3, #0]
 801bc1c:	2b04      	cmp	r3, #4
 801bc1e:	d992      	bls.n	801bb46 <RegionUS915ApplyCFList+0x32>
 801bc20:	e002      	b.n	801bc28 <RegionUS915ApplyCFList+0x114>
        return;
 801bc22:	46c0      	nop			; (mov r8, r8)
 801bc24:	e000      	b.n	801bc28 <RegionUS915ApplyCFList+0x114>
        return;
 801bc26:	46c0      	nop			; (mov r8, r8)
    }
}
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	b005      	add	sp, #20
 801bc2c:	bd90      	pop	{r4, r7, pc}
 801bc2e:	46c0      	nop			; (mov r8, r8)
 801bc30:	2000183c 	.word	0x2000183c

0801bc34 <RegionUS915ComputeRxWindowParameters>:
    }
    return true;
}

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801bc34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc36:	b08b      	sub	sp, #44	; 0x2c
 801bc38:	af04      	add	r7, sp, #16
 801bc3a:	60ba      	str	r2, [r7, #8]
 801bc3c:	607b      	str	r3, [r7, #4]
 801bc3e:	250f      	movs	r5, #15
 801bc40:	197b      	adds	r3, r7, r5
 801bc42:	1c02      	adds	r2, r0, #0
 801bc44:	701a      	strb	r2, [r3, #0]
 801bc46:	230e      	movs	r3, #14
 801bc48:	18fb      	adds	r3, r7, r3
 801bc4a:	1c0a      	adds	r2, r1, #0
 801bc4c:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 801bc4e:	2300      	movs	r3, #0
 801bc50:	2400      	movs	r4, #0
 801bc52:	613b      	str	r3, [r7, #16]
 801bc54:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801bc56:	197b      	adds	r3, r7, r5
 801bc58:	781b      	ldrb	r3, [r3, #0]
 801bc5a:	b25a      	sxtb	r2, r3
 801bc5c:	2a0d      	cmp	r2, #13
 801bc5e:	dd00      	ble.n	801bc62 <RegionUS915ComputeRxWindowParameters+0x2e>
 801bc60:	230d      	movs	r3, #13
 801bc62:	b25a      	sxtb	r2, r3
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	785b      	ldrb	r3, [r3, #1]
 801bc6c:	b25b      	sxtb	r3, r3
 801bc6e:	0018      	movs	r0, r3
 801bc70:	f7ff fb80 	bl	801b374 <GetBandwidth>
 801bc74:	0003      	movs	r3, r0
 801bc76:	b2da      	uxtb	r2, r3
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	709a      	strb	r2, [r3, #2]

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	785b      	ldrb	r3, [r3, #1]
 801bc80:	b25b      	sxtb	r3, r3
 801bc82:	001a      	movs	r2, r3
 801bc84:	4b14      	ldr	r3, [pc, #80]	; (801bcd8 <RegionUS915ComputeRxWindowParameters+0xa4>)
 801bc86:	5c98      	ldrb	r0, [r3, r2]
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	785b      	ldrb	r3, [r3, #1]
 801bc8c:	b25b      	sxtb	r3, r3
 801bc8e:	001a      	movs	r2, r3
 801bc90:	4b12      	ldr	r3, [pc, #72]	; (801bcdc <RegionUS915ComputeRxWindowParameters+0xa8>)
 801bc92:	0092      	lsls	r2, r2, #2
 801bc94:	58d3      	ldr	r3, [r2, r3]
 801bc96:	0019      	movs	r1, r3
 801bc98:	f7f8 fe56 	bl	8014948 <RegionCommonComputeSymbolTimeLoRa>
 801bc9c:	0003      	movs	r3, r0
 801bc9e:	000c      	movs	r4, r1
 801bca0:	613b      	str	r3, [r7, #16]
 801bca2:	617c      	str	r4, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801bca4:	4b0e      	ldr	r3, [pc, #56]	; (801bce0 <RegionUS915ComputeRxWindowParameters+0xac>)
 801bca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bca8:	4798      	blx	r3
 801bcaa:	0006      	movs	r6, r0
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	3308      	adds	r3, #8
 801bcb0:	687a      	ldr	r2, [r7, #4]
 801bcb2:	320c      	adds	r2, #12
 801bcb4:	68bd      	ldr	r5, [r7, #8]
 801bcb6:	210e      	movs	r1, #14
 801bcb8:	1879      	adds	r1, r7, r1
 801bcba:	780c      	ldrb	r4, [r1, #0]
 801bcbc:	6938      	ldr	r0, [r7, #16]
 801bcbe:	6979      	ldr	r1, [r7, #20]
 801bcc0:	9202      	str	r2, [sp, #8]
 801bcc2:	9301      	str	r3, [sp, #4]
 801bcc4:	9600      	str	r6, [sp, #0]
 801bcc6:	002b      	movs	r3, r5
 801bcc8:	0022      	movs	r2, r4
 801bcca:	f7f8 fe85 	bl	80149d8 <RegionCommonComputeRxWindowParameters>
}
 801bcce:	46c0      	nop			; (mov r8, r8)
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	b007      	add	sp, #28
 801bcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcd6:	46c0      	nop			; (mov r8, r8)
 801bcd8:	0802880c 	.word	0x0802880c
 801bcdc:	0802881c 	.word	0x0802881c
 801bce0:	08028964 	.word	0x08028964

0801bce4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801bce4:	b5b0      	push	{r4, r5, r7, lr}
 801bce6:	b090      	sub	sp, #64	; 0x40
 801bce8:	af0a      	add	r7, sp, #40	; 0x28
 801bcea:	6078      	str	r0, [r7, #4]
 801bcec:	6039      	str	r1, [r7, #0]
    int8_t dr = rxConfig->Datarate;
 801bcee:	230f      	movs	r3, #15
 801bcf0:	18fb      	adds	r3, r7, r3
 801bcf2:	687a      	ldr	r2, [r7, #4]
 801bcf4:	7852      	ldrb	r2, [r2, #1]
 801bcf6:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801bcf8:	2317      	movs	r3, #23
 801bcfa:	18fb      	adds	r3, r7, r3
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 801bd00:	230e      	movs	r3, #14
 801bd02:	18fb      	adds	r3, r7, r3
 801bd04:	2200      	movs	r2, #0
 801bd06:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	685b      	ldr	r3, [r3, #4]
 801bd0c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801bd0e:	4b39      	ldr	r3, [pc, #228]	; (801bdf4 <RegionUS915RxConfig+0x110>)
 801bd10:	68db      	ldr	r3, [r3, #12]
 801bd12:	4798      	blx	r3
 801bd14:	1e03      	subs	r3, r0, #0
 801bd16:	d001      	beq.n	801bd1c <RegionUS915RxConfig+0x38>
    {
        return false;
 801bd18:	2300      	movs	r3, #0
 801bd1a:	e067      	b.n	801bdec <RegionUS915RxConfig+0x108>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	7cdb      	ldrb	r3, [r3, #19]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d10a      	bne.n	801bd3a <RegionUS915RxConfig+0x56>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	781b      	ldrb	r3, [r3, #0]
 801bd28:	001a      	movs	r2, r3
 801bd2a:	2307      	movs	r3, #7
 801bd2c:	4013      	ands	r3, r2
 801bd2e:	4a32      	ldr	r2, [pc, #200]	; (801bdf8 <RegionUS915RxConfig+0x114>)
 801bd30:	4353      	muls	r3, r2
 801bd32:	4a32      	ldr	r2, [pc, #200]	; (801bdfc <RegionUS915RxConfig+0x118>)
 801bd34:	4694      	mov	ip, r2
 801bd36:	4463      	add	r3, ip
 801bd38:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801bd3a:	230f      	movs	r3, #15
 801bd3c:	18fb      	adds	r3, r7, r3
 801bd3e:	781b      	ldrb	r3, [r3, #0]
 801bd40:	b25b      	sxtb	r3, r3
 801bd42:	4a2f      	ldr	r2, [pc, #188]	; (801be00 <RegionUS915RxConfig+0x11c>)
 801bd44:	5cd2      	ldrb	r2, [r2, r3]
 801bd46:	250e      	movs	r5, #14
 801bd48:	197b      	adds	r3, r7, r5
 801bd4a:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 801bd4c:	4b29      	ldr	r3, [pc, #164]	; (801bdf4 <RegionUS915RxConfig+0x110>)
 801bd4e:	695b      	ldr	r3, [r3, #20]
 801bd50:	693a      	ldr	r2, [r7, #16]
 801bd52:	0010      	movs	r0, r2
 801bd54:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801bd56:	4b27      	ldr	r3, [pc, #156]	; (801bdf4 <RegionUS915RxConfig+0x110>)
 801bd58:	6a1c      	ldr	r4, [r3, #32]
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	789b      	ldrb	r3, [r3, #2]
 801bd5e:	0018      	movs	r0, r3
 801bd60:	197b      	adds	r3, r7, r5
 801bd62:	2100      	movs	r1, #0
 801bd64:	5659      	ldrsb	r1, [r3, r1]
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	689b      	ldr	r3, [r3, #8]
 801bd6a:	b29b      	uxth	r3, r3
 801bd6c:	687a      	ldr	r2, [r7, #4]
 801bd6e:	7c92      	ldrb	r2, [r2, #18]
 801bd70:	9209      	str	r2, [sp, #36]	; 0x24
 801bd72:	2201      	movs	r2, #1
 801bd74:	9208      	str	r2, [sp, #32]
 801bd76:	2200      	movs	r2, #0
 801bd78:	9207      	str	r2, [sp, #28]
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	9206      	str	r2, [sp, #24]
 801bd7e:	2200      	movs	r2, #0
 801bd80:	9205      	str	r2, [sp, #20]
 801bd82:	2200      	movs	r2, #0
 801bd84:	9204      	str	r2, [sp, #16]
 801bd86:	2200      	movs	r2, #0
 801bd88:	9203      	str	r2, [sp, #12]
 801bd8a:	9302      	str	r3, [sp, #8]
 801bd8c:	2308      	movs	r3, #8
 801bd8e:	9301      	str	r3, [sp, #4]
 801bd90:	2300      	movs	r3, #0
 801bd92:	9300      	str	r3, [sp, #0]
 801bd94:	2301      	movs	r3, #1
 801bd96:	000a      	movs	r2, r1
 801bd98:	0001      	movs	r1, r0
 801bd9a:	2001      	movs	r0, #1
 801bd9c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	7c5b      	ldrb	r3, [r3, #17]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d009      	beq.n	801bdba <RegionUS915RxConfig+0xd6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801bda6:	230f      	movs	r3, #15
 801bda8:	18fb      	adds	r3, r7, r3
 801bdaa:	2200      	movs	r2, #0
 801bdac:	569a      	ldrsb	r2, [r3, r2]
 801bdae:	2317      	movs	r3, #23
 801bdb0:	18fb      	adds	r3, r7, r3
 801bdb2:	4914      	ldr	r1, [pc, #80]	; (801be04 <RegionUS915RxConfig+0x120>)
 801bdb4:	5c8a      	ldrb	r2, [r1, r2]
 801bdb6:	701a      	strb	r2, [r3, #0]
 801bdb8:	e008      	b.n	801bdcc <RegionUS915RxConfig+0xe8>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801bdba:	230f      	movs	r3, #15
 801bdbc:	18fb      	adds	r3, r7, r3
 801bdbe:	2200      	movs	r2, #0
 801bdc0:	569a      	ldrsb	r2, [r3, r2]
 801bdc2:	2317      	movs	r3, #23
 801bdc4:	18fb      	adds	r3, r7, r3
 801bdc6:	4910      	ldr	r1, [pc, #64]	; (801be08 <RegionUS915RxConfig+0x124>)
 801bdc8:	5c8a      	ldrb	r2, [r1, r2]
 801bdca:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801bdcc:	4b09      	ldr	r3, [pc, #36]	; (801bdf4 <RegionUS915RxConfig+0x110>)
 801bdce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bdd0:	2217      	movs	r2, #23
 801bdd2:	18ba      	adds	r2, r7, r2
 801bdd4:	7812      	ldrb	r2, [r2, #0]
 801bdd6:	320d      	adds	r2, #13
 801bdd8:	b2d2      	uxtb	r2, r2
 801bdda:	0011      	movs	r1, r2
 801bddc:	2001      	movs	r0, #1
 801bdde:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801bde0:	683b      	ldr	r3, [r7, #0]
 801bde2:	220f      	movs	r2, #15
 801bde4:	18ba      	adds	r2, r7, r2
 801bde6:	7812      	ldrb	r2, [r2, #0]
 801bde8:	701a      	strb	r2, [r3, #0]
    return true;
 801bdea:	2301      	movs	r3, #1
}
 801bdec:	0018      	movs	r0, r3
 801bdee:	46bd      	mov	sp, r7
 801bdf0:	b006      	add	sp, #24
 801bdf2:	bdb0      	pop	{r4, r5, r7, pc}
 801bdf4:	08028964 	.word	0x08028964
 801bdf8:	000927c0 	.word	0x000927c0
 801bdfc:	370870a0 	.word	0x370870a0
 801be00:	0802880c 	.word	0x0802880c
 801be04:	08028880 	.word	0x08028880
 801be08:	08028870 	.word	0x08028870

0801be0c <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801be0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be0e:	b093      	sub	sp, #76	; 0x4c
 801be10:	af0a      	add	r7, sp, #40	; 0x28
 801be12:	60f8      	str	r0, [r7, #12]
 801be14:	60b9      	str	r1, [r7, #8]
 801be16:	607a      	str	r2, [r7, #4]
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	785b      	ldrb	r3, [r3, #1]
 801be1c:	b25b      	sxtb	r3, r3
 801be1e:	001a      	movs	r2, r3
 801be20:	4b41      	ldr	r3, [pc, #260]	; (801bf28 <RegionUS915TxConfig+0x11c>)
 801be22:	5c9a      	ldrb	r2, [r3, r2]
 801be24:	231f      	movs	r3, #31
 801be26:	18fb      	adds	r3, r7, r3
 801be28:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	2002      	movs	r0, #2
 801be2e:	5618      	ldrsb	r0, [r3, r0]
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	781b      	ldrb	r3, [r3, #0]
 801be34:	0019      	movs	r1, r3
 801be36:	4a3d      	ldr	r2, [pc, #244]	; (801bf2c <RegionUS915TxConfig+0x120>)
 801be38:	000b      	movs	r3, r1
 801be3a:	005b      	lsls	r3, r3, #1
 801be3c:	185b      	adds	r3, r3, r1
 801be3e:	009b      	lsls	r3, r3, #2
 801be40:	18d3      	adds	r3, r2, r3
 801be42:	3309      	adds	r3, #9
 801be44:	781b      	ldrb	r3, [r3, #0]
 801be46:	4a39      	ldr	r2, [pc, #228]	; (801bf2c <RegionUS915TxConfig+0x120>)
 801be48:	3336      	adds	r3, #54	; 0x36
 801be4a:	011b      	lsls	r3, r3, #4
 801be4c:	18d3      	adds	r3, r2, r3
 801be4e:	3302      	adds	r3, #2
 801be50:	2100      	movs	r1, #0
 801be52:	5659      	ldrsb	r1, [r3, r1]
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	2201      	movs	r2, #1
 801be58:	569a      	ldrsb	r2, [r3, r2]
 801be5a:	251e      	movs	r5, #30
 801be5c:	197c      	adds	r4, r7, r5
 801be5e:	4b34      	ldr	r3, [pc, #208]	; (801bf30 <RegionUS915TxConfig+0x124>)
 801be60:	f7ff faa6 	bl	801b3b0 <LimitTxPower>
 801be64:	0003      	movs	r3, r0
 801be66:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 801be68:	68fb      	ldr	r3, [r7, #12]
 801be6a:	785b      	ldrb	r3, [r3, #1]
 801be6c:	b25b      	sxtb	r3, r3
 801be6e:	0018      	movs	r0, r3
 801be70:	f7ff fa80 	bl	801b374 <GetBandwidth>
 801be74:	0003      	movs	r3, r0
 801be76:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 801be78:	2617      	movs	r6, #23
 801be7a:	19bb      	adds	r3, r7, r6
 801be7c:	2200      	movs	r2, #0
 801be7e:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801be80:	19bc      	adds	r4, r7, r6
 801be82:	2200      	movs	r2, #0
 801be84:	492b      	ldr	r1, [pc, #172]	; (801bf34 <RegionUS915TxConfig+0x128>)
 801be86:	197b      	adds	r3, r7, r5
 801be88:	781b      	ldrb	r3, [r3, #0]
 801be8a:	b25b      	sxtb	r3, r3
 801be8c:	0018      	movs	r0, r3
 801be8e:	f7f8 fe27 	bl	8014ae0 <RegionCommonComputeTxPower>
 801be92:	0003      	movs	r3, r0
 801be94:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801be96:	4b28      	ldr	r3, [pc, #160]	; (801bf38 <RegionUS915TxConfig+0x12c>)
 801be98:	695a      	ldr	r2, [r3, #20]
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	781b      	ldrb	r3, [r3, #0]
 801be9e:	0018      	movs	r0, r3
 801bea0:	4922      	ldr	r1, [pc, #136]	; (801bf2c <RegionUS915TxConfig+0x120>)
 801bea2:	0003      	movs	r3, r0
 801bea4:	005b      	lsls	r3, r3, #1
 801bea6:	181b      	adds	r3, r3, r0
 801bea8:	009b      	lsls	r3, r3, #2
 801beaa:	585b      	ldr	r3, [r3, r1]
 801beac:	0018      	movs	r0, r3
 801beae:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000 );
 801beb0:	4b21      	ldr	r3, [pc, #132]	; (801bf38 <RegionUS915TxConfig+0x12c>)
 801beb2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801beb4:	231f      	movs	r3, #31
 801beb6:	18fb      	adds	r3, r7, r3
 801beb8:	781b      	ldrb	r3, [r3, #0]
 801beba:	b25b      	sxtb	r3, r3
 801bebc:	69b8      	ldr	r0, [r7, #24]
 801bebe:	19ba      	adds	r2, r7, r6
 801bec0:	2100      	movs	r1, #0
 801bec2:	5651      	ldrsb	r1, [r2, r1]
 801bec4:	4a1d      	ldr	r2, [pc, #116]	; (801bf3c <RegionUS915TxConfig+0x130>)
 801bec6:	9208      	str	r2, [sp, #32]
 801bec8:	2200      	movs	r2, #0
 801beca:	9207      	str	r2, [sp, #28]
 801becc:	2200      	movs	r2, #0
 801bece:	9206      	str	r2, [sp, #24]
 801bed0:	2200      	movs	r2, #0
 801bed2:	9205      	str	r2, [sp, #20]
 801bed4:	2201      	movs	r2, #1
 801bed6:	9204      	str	r2, [sp, #16]
 801bed8:	2200      	movs	r2, #0
 801beda:	9203      	str	r2, [sp, #12]
 801bedc:	2208      	movs	r2, #8
 801bede:	9202      	str	r2, [sp, #8]
 801bee0:	2201      	movs	r2, #1
 801bee2:	9201      	str	r2, [sp, #4]
 801bee4:	9300      	str	r3, [sp, #0]
 801bee6:	0003      	movs	r3, r0
 801bee8:	2200      	movs	r2, #0
 801beea:	2001      	movs	r0, #1
 801beec:	47a0      	blx	r4
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    //log_info("TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801beee:	4b12      	ldr	r3, [pc, #72]	; (801bf38 <RegionUS915TxConfig+0x12c>)
 801bef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bef2:	68fa      	ldr	r2, [r7, #12]
 801bef4:	8992      	ldrh	r2, [r2, #12]
 801bef6:	b2d2      	uxtb	r2, r2
 801bef8:	0011      	movs	r1, r2
 801befa:	2001      	movs	r0, #1
 801befc:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( MODEM_LORA, txConfig->PktLen );
 801befe:	4b0e      	ldr	r3, [pc, #56]	; (801bf38 <RegionUS915TxConfig+0x12c>)
 801bf00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf02:	68fa      	ldr	r2, [r7, #12]
 801bf04:	8992      	ldrh	r2, [r2, #12]
 801bf06:	b2d2      	uxtb	r2, r2
 801bf08:	0011      	movs	r1, r2
 801bf0a:	2001      	movs	r0, #1
 801bf0c:	4798      	blx	r3
 801bf0e:	0002      	movs	r2, r0
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	601a      	str	r2, [r3, #0]
    *txPower = txPowerLimited;
 801bf14:	68bb      	ldr	r3, [r7, #8]
 801bf16:	197a      	adds	r2, r7, r5
 801bf18:	7812      	ldrb	r2, [r2, #0]
 801bf1a:	701a      	strb	r2, [r3, #0]

    return true;
 801bf1c:	2301      	movs	r3, #1
}
 801bf1e:	0018      	movs	r0, r3
 801bf20:	46bd      	mov	sp, r7
 801bf22:	b009      	add	sp, #36	; 0x24
 801bf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf26:	46c0      	nop			; (mov r8, r8)
 801bf28:	0802880c 	.word	0x0802880c
 801bf2c:	2000183c 	.word	0x2000183c
 801bf30:	20001bac 	.word	0x20001bac
 801bf34:	41f00000 	.word	0x41f00000
 801bf38:	08028964 	.word	0x08028964
 801bf3c:	00000bb8 	.word	0x00000bb8

0801bf40 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801bf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf42:	b095      	sub	sp, #84	; 0x54
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	60f8      	str	r0, [r7, #12]
 801bf48:	60b9      	str	r1, [r7, #8]
 801bf4a:	607a      	str	r2, [r7, #4]
 801bf4c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801bf4e:	234f      	movs	r3, #79	; 0x4f
 801bf50:	18fb      	adds	r3, r7, r3
 801bf52:	2207      	movs	r2, #7
 801bf54:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 801bf56:	234b      	movs	r3, #75	; 0x4b
 801bf58:	18fb      	adds	r3, r7, r3
 801bf5a:	2200      	movs	r2, #0
 801bf5c:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801bf5e:	234e      	movs	r3, #78	; 0x4e
 801bf60:	18fb      	adds	r3, r7, r3
 801bf62:	2200      	movs	r2, #0
 801bf64:	701a      	strb	r2, [r3, #0]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801bf66:	2438      	movs	r4, #56	; 0x38
 801bf68:	193b      	adds	r3, r7, r4
 801bf6a:	0018      	movs	r0, r3
 801bf6c:	230c      	movs	r3, #12
 801bf6e:	001a      	movs	r2, r3
 801bf70:	2100      	movs	r1, #0
 801bf72:	f009 ffdd 	bl	8025f30 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 801bf76:	49a3      	ldr	r1, [pc, #652]	; (801c204 <RegionUS915LinkAdrReq+0x2c4>)
 801bf78:	193b      	adds	r3, r7, r4
 801bf7a:	2206      	movs	r2, #6
 801bf7c:	0018      	movs	r0, r3
 801bf7e:	f7f8 faa8 	bl	80144d2 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801bf82:	e136      	b.n	801c1f2 <RegionUS915LinkAdrReq+0x2b2>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	685a      	ldr	r2, [r3, #4]
 801bf88:	234e      	movs	r3, #78	; 0x4e
 801bf8a:	18fb      	adds	r3, r7, r3
 801bf8c:	781b      	ldrb	r3, [r3, #0]
 801bf8e:	18d3      	adds	r3, r2, r3
 801bf90:	254b      	movs	r5, #75	; 0x4b
 801bf92:	197c      	adds	r4, r7, r5
 801bf94:	2244      	movs	r2, #68	; 0x44
 801bf96:	18ba      	adds	r2, r7, r2
 801bf98:	0011      	movs	r1, r2
 801bf9a:	0018      	movs	r0, r3
 801bf9c:	f7f8 fbd8 	bl	8014750 <RegionCommonParseLinkAdrReq>
 801bfa0:	0003      	movs	r3, r0
 801bfa2:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801bfa4:	197b      	adds	r3, r7, r5
 801bfa6:	781b      	ldrb	r3, [r3, #0]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d100      	bne.n	801bfae <RegionUS915LinkAdrReq+0x6e>
 801bfac:	e12e      	b.n	801c20c <RegionUS915LinkAdrReq+0x2cc>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801bfae:	224e      	movs	r2, #78	; 0x4e
 801bfb0:	18bb      	adds	r3, r7, r2
 801bfb2:	18b9      	adds	r1, r7, r2
 801bfb4:	224b      	movs	r2, #75	; 0x4b
 801bfb6:	18ba      	adds	r2, r7, r2
 801bfb8:	7809      	ldrb	r1, [r1, #0]
 801bfba:	7812      	ldrb	r2, [r2, #0]
 801bfbc:	188a      	adds	r2, r1, r2
 801bfbe:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801bfc0:	234f      	movs	r3, #79	; 0x4f
 801bfc2:	18fb      	adds	r3, r7, r3
 801bfc4:	2207      	movs	r2, #7
 801bfc6:	701a      	strb	r2, [r3, #0]

        if( linkAdrParams.ChMaskCtrl == 6 )
 801bfc8:	2344      	movs	r3, #68	; 0x44
 801bfca:	18fb      	adds	r3, r7, r3
 801bfcc:	78db      	ldrb	r3, [r3, #3]
 801bfce:	2b06      	cmp	r3, #6
 801bfd0:	d119      	bne.n	801c006 <RegionUS915LinkAdrReq+0xc6>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801bfd2:	2138      	movs	r1, #56	; 0x38
 801bfd4:	187b      	adds	r3, r7, r1
 801bfd6:	2201      	movs	r2, #1
 801bfd8:	4252      	negs	r2, r2
 801bfda:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0xFFFF;
 801bfdc:	187b      	adds	r3, r7, r1
 801bfde:	2201      	movs	r2, #1
 801bfe0:	4252      	negs	r2, r2
 801bfe2:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0xFFFF;
 801bfe4:	187b      	adds	r3, r7, r1
 801bfe6:	2201      	movs	r2, #1
 801bfe8:	4252      	negs	r2, r2
 801bfea:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0xFFFF;
 801bfec:	187b      	adds	r3, r7, r1
 801bfee:	2201      	movs	r2, #1
 801bff0:	4252      	negs	r2, r2
 801bff2:	80da      	strh	r2, [r3, #6]
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801bff4:	2344      	movs	r3, #68	; 0x44
 801bff6:	18fb      	adds	r3, r7, r3
 801bff8:	889b      	ldrh	r3, [r3, #4]
 801bffa:	22ff      	movs	r2, #255	; 0xff
 801bffc:	4013      	ands	r3, r2
 801bffe:	b29a      	uxth	r2, r3
 801c000:	187b      	adds	r3, r7, r1
 801c002:	811a      	strh	r2, [r3, #8]
 801c004:	e0f5      	b.n	801c1f2 <RegionUS915LinkAdrReq+0x2b2>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801c006:	2344      	movs	r3, #68	; 0x44
 801c008:	18fb      	adds	r3, r7, r3
 801c00a:	78db      	ldrb	r3, [r3, #3]
 801c00c:	2b07      	cmp	r3, #7
 801c00e:	d115      	bne.n	801c03c <RegionUS915LinkAdrReq+0xfc>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801c010:	2138      	movs	r1, #56	; 0x38
 801c012:	187b      	adds	r3, r7, r1
 801c014:	2200      	movs	r2, #0
 801c016:	801a      	strh	r2, [r3, #0]
            channelsMask[1] = 0x0000;
 801c018:	187b      	adds	r3, r7, r1
 801c01a:	2200      	movs	r2, #0
 801c01c:	805a      	strh	r2, [r3, #2]
            channelsMask[2] = 0x0000;
 801c01e:	187b      	adds	r3, r7, r1
 801c020:	2200      	movs	r2, #0
 801c022:	809a      	strh	r2, [r3, #4]
            channelsMask[3] = 0x0000;
 801c024:	187b      	adds	r3, r7, r1
 801c026:	2200      	movs	r2, #0
 801c028:	80da      	strh	r2, [r3, #6]
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801c02a:	2344      	movs	r3, #68	; 0x44
 801c02c:	18fb      	adds	r3, r7, r3
 801c02e:	889b      	ldrh	r3, [r3, #4]
 801c030:	22ff      	movs	r2, #255	; 0xff
 801c032:	4013      	ands	r3, r2
 801c034:	b29a      	uxth	r2, r3
 801c036:	187b      	adds	r3, r7, r1
 801c038:	811a      	strh	r2, [r3, #8]
 801c03a:	e0da      	b.n	801c1f2 <RegionUS915LinkAdrReq+0x2b2>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801c03c:	2344      	movs	r3, #68	; 0x44
 801c03e:	18fb      	adds	r3, r7, r3
 801c040:	78db      	ldrb	r3, [r3, #3]
 801c042:	2b05      	cmp	r3, #5
 801c044:	d000      	beq.n	801c048 <RegionUS915LinkAdrReq+0x108>
 801c046:	e0ca      	b.n	801c1de <RegionUS915LinkAdrReq+0x29e>
        {
            // Start value for comparision
            uint8_t bitMask = 1;
 801c048:	234a      	movs	r3, #74	; 0x4a
 801c04a:	18fb      	adds	r3, r7, r3
 801c04c:	2201      	movs	r2, #1
 801c04e:	701a      	strb	r2, [r3, #0]

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801c050:	234d      	movs	r3, #77	; 0x4d
 801c052:	18fb      	adds	r3, r7, r3
 801c054:	2200      	movs	r2, #0
 801c056:	701a      	strb	r2, [r3, #0]

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801c058:	234c      	movs	r3, #76	; 0x4c
 801c05a:	18fb      	adds	r3, r7, r3
 801c05c:	2200      	movs	r2, #0
 801c05e:	701a      	strb	r2, [r3, #0]
 801c060:	e0b6      	b.n	801c1d0 <RegionUS915LinkAdrReq+0x290>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801c062:	2344      	movs	r3, #68	; 0x44
 801c064:	18fb      	adds	r3, r7, r3
 801c066:	889b      	ldrh	r3, [r3, #4]
 801c068:	001a      	movs	r2, r3
 801c06a:	23ff      	movs	r3, #255	; 0xff
 801c06c:	4013      	ands	r3, r2
 801c06e:	224a      	movs	r2, #74	; 0x4a
 801c070:	18ba      	adds	r2, r7, r2
 801c072:	7811      	ldrb	r1, [r2, #0]
 801c074:	224c      	movs	r2, #76	; 0x4c
 801c076:	18ba      	adds	r2, r7, r2
 801c078:	7812      	ldrb	r2, [r2, #0]
 801c07a:	4091      	lsls	r1, r2
 801c07c:	000a      	movs	r2, r1
 801c07e:	4013      	ands	r3, r2
 801c080:	d04e      	beq.n	801c120 <RegionUS915LinkAdrReq+0x1e0>
                {
                    if( ( i % 2 ) == 0 )
 801c082:	234c      	movs	r3, #76	; 0x4c
 801c084:	18fb      	adds	r3, r7, r3
 801c086:	781b      	ldrb	r3, [r3, #0]
 801c088:	2201      	movs	r2, #1
 801c08a:	4013      	ands	r3, r2
 801c08c:	b2db      	uxtb	r3, r3
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d120      	bne.n	801c0d4 <RegionUS915LinkAdrReq+0x194>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801c092:	214d      	movs	r1, #77	; 0x4d
 801c094:	187b      	adds	r3, r7, r1
 801c096:	781a      	ldrb	r2, [r3, #0]
 801c098:	2038      	movs	r0, #56	; 0x38
 801c09a:	183b      	adds	r3, r7, r0
 801c09c:	0052      	lsls	r2, r2, #1
 801c09e:	5ad3      	ldrh	r3, [r2, r3]
 801c0a0:	187a      	adds	r2, r7, r1
 801c0a2:	7812      	ldrb	r2, [r2, #0]
 801c0a4:	21ff      	movs	r1, #255	; 0xff
 801c0a6:	430b      	orrs	r3, r1
 801c0a8:	b299      	uxth	r1, r3
 801c0aa:	183b      	adds	r3, r7, r0
 801c0ac:	0052      	lsls	r2, r2, #1
 801c0ae:	52d1      	strh	r1, [r2, r3]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801c0b0:	183b      	adds	r3, r7, r0
 801c0b2:	891b      	ldrh	r3, [r3, #8]
 801c0b4:	b21a      	sxth	r2, r3
 801c0b6:	234a      	movs	r3, #74	; 0x4a
 801c0b8:	18fb      	adds	r3, r7, r3
 801c0ba:	7819      	ldrb	r1, [r3, #0]
 801c0bc:	234c      	movs	r3, #76	; 0x4c
 801c0be:	18fb      	adds	r3, r7, r3
 801c0c0:	781b      	ldrb	r3, [r3, #0]
 801c0c2:	4099      	lsls	r1, r3
 801c0c4:	000b      	movs	r3, r1
 801c0c6:	b21b      	sxth	r3, r3
 801c0c8:	4313      	orrs	r3, r2
 801c0ca:	b21b      	sxth	r3, r3
 801c0cc:	b29a      	uxth	r2, r3
 801c0ce:	183b      	adds	r3, r7, r0
 801c0d0:	811a      	strh	r2, [r3, #8]
 801c0d2:	e077      	b.n	801c1c4 <RegionUS915LinkAdrReq+0x284>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801c0d4:	204d      	movs	r0, #77	; 0x4d
 801c0d6:	183b      	adds	r3, r7, r0
 801c0d8:	781a      	ldrb	r2, [r3, #0]
 801c0da:	2438      	movs	r4, #56	; 0x38
 801c0dc:	193b      	adds	r3, r7, r4
 801c0de:	0052      	lsls	r2, r2, #1
 801c0e0:	5ad3      	ldrh	r3, [r2, r3]
 801c0e2:	183a      	adds	r2, r7, r0
 801c0e4:	7812      	ldrb	r2, [r2, #0]
 801c0e6:	4948      	ldr	r1, [pc, #288]	; (801c208 <RegionUS915LinkAdrReq+0x2c8>)
 801c0e8:	430b      	orrs	r3, r1
 801c0ea:	b299      	uxth	r1, r3
 801c0ec:	193b      	adds	r3, r7, r4
 801c0ee:	0052      	lsls	r2, r2, #1
 801c0f0:	52d1      	strh	r1, [r2, r3]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801c0f2:	193b      	adds	r3, r7, r4
 801c0f4:	891b      	ldrh	r3, [r3, #8]
 801c0f6:	b21a      	sxth	r2, r3
 801c0f8:	234a      	movs	r3, #74	; 0x4a
 801c0fa:	18fb      	adds	r3, r7, r3
 801c0fc:	7819      	ldrb	r1, [r3, #0]
 801c0fe:	234c      	movs	r3, #76	; 0x4c
 801c100:	18fb      	adds	r3, r7, r3
 801c102:	781b      	ldrb	r3, [r3, #0]
 801c104:	4099      	lsls	r1, r3
 801c106:	000b      	movs	r3, r1
 801c108:	b21b      	sxth	r3, r3
 801c10a:	4313      	orrs	r3, r2
 801c10c:	b21b      	sxth	r3, r3
 801c10e:	b29a      	uxth	r2, r3
 801c110:	193b      	adds	r3, r7, r4
 801c112:	811a      	strh	r2, [r3, #8]
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801c114:	183b      	adds	r3, r7, r0
 801c116:	781a      	ldrb	r2, [r3, #0]
 801c118:	183b      	adds	r3, r7, r0
 801c11a:	3201      	adds	r2, #1
 801c11c:	701a      	strb	r2, [r3, #0]
 801c11e:	e051      	b.n	801c1c4 <RegionUS915LinkAdrReq+0x284>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801c120:	234c      	movs	r3, #76	; 0x4c
 801c122:	18fb      	adds	r3, r7, r3
 801c124:	781b      	ldrb	r3, [r3, #0]
 801c126:	2201      	movs	r2, #1
 801c128:	4013      	ands	r3, r2
 801c12a:	b2db      	uxtb	r3, r3
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d122      	bne.n	801c176 <RegionUS915LinkAdrReq+0x236>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801c130:	214d      	movs	r1, #77	; 0x4d
 801c132:	187b      	adds	r3, r7, r1
 801c134:	781a      	ldrb	r2, [r3, #0]
 801c136:	2038      	movs	r0, #56	; 0x38
 801c138:	183b      	adds	r3, r7, r0
 801c13a:	0052      	lsls	r2, r2, #1
 801c13c:	5ad3      	ldrh	r3, [r2, r3]
 801c13e:	187a      	adds	r2, r7, r1
 801c140:	7812      	ldrb	r2, [r2, #0]
 801c142:	21ff      	movs	r1, #255	; 0xff
 801c144:	438b      	bics	r3, r1
 801c146:	b299      	uxth	r1, r3
 801c148:	183b      	adds	r3, r7, r0
 801c14a:	0052      	lsls	r2, r2, #1
 801c14c:	52d1      	strh	r1, [r2, r3]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801c14e:	183b      	adds	r3, r7, r0
 801c150:	891b      	ldrh	r3, [r3, #8]
 801c152:	b21b      	sxth	r3, r3
 801c154:	224a      	movs	r2, #74	; 0x4a
 801c156:	18ba      	adds	r2, r7, r2
 801c158:	7811      	ldrb	r1, [r2, #0]
 801c15a:	224c      	movs	r2, #76	; 0x4c
 801c15c:	18ba      	adds	r2, r7, r2
 801c15e:	7812      	ldrb	r2, [r2, #0]
 801c160:	4091      	lsls	r1, r2
 801c162:	000a      	movs	r2, r1
 801c164:	b212      	sxth	r2, r2
 801c166:	43d2      	mvns	r2, r2
 801c168:	b212      	sxth	r2, r2
 801c16a:	4013      	ands	r3, r2
 801c16c:	b21b      	sxth	r3, r3
 801c16e:	b29a      	uxth	r2, r3
 801c170:	183b      	adds	r3, r7, r0
 801c172:	811a      	strh	r2, [r3, #8]
 801c174:	e026      	b.n	801c1c4 <RegionUS915LinkAdrReq+0x284>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801c176:	204d      	movs	r0, #77	; 0x4d
 801c178:	183b      	adds	r3, r7, r0
 801c17a:	781a      	ldrb	r2, [r3, #0]
 801c17c:	2438      	movs	r4, #56	; 0x38
 801c17e:	193b      	adds	r3, r7, r4
 801c180:	0052      	lsls	r2, r2, #1
 801c182:	5ad3      	ldrh	r3, [r2, r3]
 801c184:	183a      	adds	r2, r7, r0
 801c186:	7812      	ldrb	r2, [r2, #0]
 801c188:	21ff      	movs	r1, #255	; 0xff
 801c18a:	400b      	ands	r3, r1
 801c18c:	b299      	uxth	r1, r3
 801c18e:	193b      	adds	r3, r7, r4
 801c190:	0052      	lsls	r2, r2, #1
 801c192:	52d1      	strh	r1, [r2, r3]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801c194:	193b      	adds	r3, r7, r4
 801c196:	891b      	ldrh	r3, [r3, #8]
 801c198:	b21b      	sxth	r3, r3
 801c19a:	224a      	movs	r2, #74	; 0x4a
 801c19c:	18ba      	adds	r2, r7, r2
 801c19e:	7811      	ldrb	r1, [r2, #0]
 801c1a0:	224c      	movs	r2, #76	; 0x4c
 801c1a2:	18ba      	adds	r2, r7, r2
 801c1a4:	7812      	ldrb	r2, [r2, #0]
 801c1a6:	4091      	lsls	r1, r2
 801c1a8:	000a      	movs	r2, r1
 801c1aa:	b212      	sxth	r2, r2
 801c1ac:	43d2      	mvns	r2, r2
 801c1ae:	b212      	sxth	r2, r2
 801c1b0:	4013      	ands	r3, r2
 801c1b2:	b21b      	sxth	r3, r3
 801c1b4:	b29a      	uxth	r2, r3
 801c1b6:	193b      	adds	r3, r7, r4
 801c1b8:	811a      	strh	r2, [r3, #8]
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801c1ba:	183b      	adds	r3, r7, r0
 801c1bc:	781a      	ldrb	r2, [r3, #0]
 801c1be:	183b      	adds	r3, r7, r0
 801c1c0:	3201      	adds	r2, #1
 801c1c2:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i <= 7; i++ )
 801c1c4:	214c      	movs	r1, #76	; 0x4c
 801c1c6:	187b      	adds	r3, r7, r1
 801c1c8:	781a      	ldrb	r2, [r3, #0]
 801c1ca:	187b      	adds	r3, r7, r1
 801c1cc:	3201      	adds	r2, #1
 801c1ce:	701a      	strb	r2, [r3, #0]
 801c1d0:	234c      	movs	r3, #76	; 0x4c
 801c1d2:	18fb      	adds	r3, r7, r3
 801c1d4:	781b      	ldrb	r3, [r3, #0]
 801c1d6:	2b07      	cmp	r3, #7
 801c1d8:	d800      	bhi.n	801c1dc <RegionUS915LinkAdrReq+0x29c>
 801c1da:	e742      	b.n	801c062 <RegionUS915LinkAdrReq+0x122>
 801c1dc:	e009      	b.n	801c1f2 <RegionUS915LinkAdrReq+0x2b2>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801c1de:	2144      	movs	r1, #68	; 0x44
 801c1e0:	187b      	adds	r3, r7, r1
 801c1e2:	78db      	ldrb	r3, [r3, #3]
 801c1e4:	001a      	movs	r2, r3
 801c1e6:	187b      	adds	r3, r7, r1
 801c1e8:	8899      	ldrh	r1, [r3, #4]
 801c1ea:	2338      	movs	r3, #56	; 0x38
 801c1ec:	18fb      	adds	r3, r7, r3
 801c1ee:	0052      	lsls	r2, r2, #1
 801c1f0:	52d1      	strh	r1, [r2, r3]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	7a1b      	ldrb	r3, [r3, #8]
 801c1f6:	224e      	movs	r2, #78	; 0x4e
 801c1f8:	18ba      	adds	r2, r7, r2
 801c1fa:	7812      	ldrb	r2, [r2, #0]
 801c1fc:	429a      	cmp	r2, r3
 801c1fe:	d200      	bcs.n	801c202 <RegionUS915LinkAdrReq+0x2c2>
 801c200:	e6c0      	b.n	801bf84 <RegionUS915LinkAdrReq+0x44>
 801c202:	e004      	b.n	801c20e <RegionUS915LinkAdrReq+0x2ce>
 801c204:	20001bac 	.word	0x20001bac
 801c208:	ffffff00 	.word	0xffffff00
            break; // break loop, since no more request has been found
 801c20c:	46c0      	nop			; (mov r8, r8)
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801c20e:	2344      	movs	r3, #68	; 0x44
 801c210:	18fb      	adds	r3, r7, r3
 801c212:	785b      	ldrb	r3, [r3, #1]
 801c214:	b25b      	sxtb	r3, r3
 801c216:	2b03      	cmp	r3, #3
 801c218:	dc10      	bgt.n	801c23c <RegionUS915LinkAdrReq+0x2fc>
 801c21a:	2338      	movs	r3, #56	; 0x38
 801c21c:	18fb      	adds	r3, r7, r3
 801c21e:	2204      	movs	r2, #4
 801c220:	2100      	movs	r1, #0
 801c222:	0018      	movs	r0, r3
 801c224:	f7f8 f914 	bl	8014450 <RegionCommonCountChannels>
 801c228:	0003      	movs	r3, r0
 801c22a:	2b01      	cmp	r3, #1
 801c22c:	d806      	bhi.n	801c23c <RegionUS915LinkAdrReq+0x2fc>
    {
        status &= 0xFE; // Channel mask KO
 801c22e:	224f      	movs	r2, #79	; 0x4f
 801c230:	18bb      	adds	r3, r7, r2
 801c232:	18ba      	adds	r2, r7, r2
 801c234:	7812      	ldrb	r2, [r2, #0]
 801c236:	2101      	movs	r1, #1
 801c238:	438a      	bics	r2, r1
 801c23a:	701a      	strb	r2, [r3, #0]
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801c23c:	2134      	movs	r1, #52	; 0x34
 801c23e:	187b      	adds	r3, r7, r1
 801c240:	2201      	movs	r2, #1
 801c242:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801c244:	68fb      	ldr	r3, [r7, #12]
 801c246:	7a5a      	ldrb	r2, [r3, #9]
 801c248:	187b      	adds	r3, r7, r1
 801c24a:	709a      	strb	r2, [r3, #2]
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801c24c:	187b      	adds	r3, r7, r1
 801c24e:	0018      	movs	r0, r3
 801c250:	f7ff fa08 	bl	801b664 <RegionUS915GetPhyParam>
 801c254:	0003      	movs	r3, r0
 801c256:	001a      	movs	r2, r3
 801c258:	2030      	movs	r0, #48	; 0x30
 801c25a:	183b      	adds	r3, r7, r0
 801c25c:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 801c25e:	2110      	movs	r1, #16
 801c260:	187b      	adds	r3, r7, r1
 801c262:	244f      	movs	r4, #79	; 0x4f
 801c264:	193a      	adds	r2, r7, r4
 801c266:	7812      	ldrb	r2, [r2, #0]
 801c268:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	7a9a      	ldrb	r2, [r3, #10]
 801c26e:	187b      	adds	r3, r7, r1
 801c270:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801c272:	2544      	movs	r5, #68	; 0x44
 801c274:	197b      	adds	r3, r7, r5
 801c276:	2201      	movs	r2, #1
 801c278:	569a      	ldrsb	r2, [r3, r2]
 801c27a:	187b      	adds	r3, r7, r1
 801c27c:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801c27e:	197b      	adds	r3, r7, r5
 801c280:	2202      	movs	r2, #2
 801c282:	569a      	ldrsb	r2, [r3, r2]
 801c284:	187b      	adds	r3, r7, r1
 801c286:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801c288:	197b      	adds	r3, r7, r5
 801c28a:	781a      	ldrb	r2, [r3, #0]
 801c28c:	187b      	adds	r3, r7, r1
 801c28e:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	220b      	movs	r2, #11
 801c294:	569a      	ldrsb	r2, [r3, r2]
 801c296:	187b      	adds	r3, r7, r1
 801c298:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	220c      	movs	r2, #12
 801c29e:	569a      	ldrsb	r2, [r3, r2]
 801c2a0:	187b      	adds	r3, r7, r1
 801c2a2:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	7b5b      	ldrb	r3, [r3, #13]
 801c2a8:	b25a      	sxtb	r2, r3
 801c2aa:	187b      	adds	r3, r7, r1
 801c2ac:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801c2ae:	187b      	adds	r3, r7, r1
 801c2b0:	2248      	movs	r2, #72	; 0x48
 801c2b2:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801c2b4:	187b      	adds	r3, r7, r1
 801c2b6:	2238      	movs	r2, #56	; 0x38
 801c2b8:	18ba      	adds	r2, r7, r2
 801c2ba:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801c2bc:	183b      	adds	r3, r7, r0
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	b25a      	sxtb	r2, r3
 801c2c2:	0008      	movs	r0, r1
 801c2c4:	183b      	adds	r3, r7, r0
 801c2c6:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801c2c8:	183b      	adds	r3, r7, r0
 801c2ca:	2204      	movs	r2, #4
 801c2cc:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 801c2ce:	183b      	adds	r3, r7, r0
 801c2d0:	4a40      	ldr	r2, [pc, #256]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c2d2:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801c2d4:	183b      	adds	r3, r7, r0
 801c2d6:	220a      	movs	r2, #10
 801c2d8:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801c2da:	183b      	adds	r3, r7, r0
 801c2dc:	2200      	movs	r2, #0
 801c2de:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801c2e0:	183b      	adds	r3, r7, r0
 801c2e2:	68fa      	ldr	r2, [r7, #12]
 801c2e4:	6812      	ldr	r2, [r2, #0]
 801c2e6:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801c2e8:	0026      	movs	r6, r4
 801c2ea:	193c      	adds	r4, r7, r4
 801c2ec:	0029      	movs	r1, r5
 801c2ee:	187d      	adds	r5, r7, r1
 801c2f0:	187b      	adds	r3, r7, r1
 801c2f2:	1c9a      	adds	r2, r3, #2
 801c2f4:	187b      	adds	r3, r7, r1
 801c2f6:	1c59      	adds	r1, r3, #1
 801c2f8:	1838      	adds	r0, r7, r0
 801c2fa:	002b      	movs	r3, r5
 801c2fc:	f7f8 fa7e 	bl	80147fc <RegionCommonLinkAdrReqVerifyParams>
 801c300:	0003      	movs	r3, r0
 801c302:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801c304:	0034      	movs	r4, r6
 801c306:	193b      	adds	r3, r7, r4
 801c308:	781b      	ldrb	r3, [r3, #0]
 801c30a:	2b07      	cmp	r3, #7
 801c30c:	d146      	bne.n	801c39c <RegionUS915LinkAdrReq+0x45c>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 801c30e:	2338      	movs	r3, #56	; 0x38
 801c310:	18f9      	adds	r1, r7, r3
 801c312:	4b31      	ldr	r3, [pc, #196]	; (801c3d8 <RegionUS915LinkAdrReq+0x498>)
 801c314:	2206      	movs	r2, #6
 801c316:	0018      	movs	r0, r3
 801c318:	f7f8 f8db 	bl	80144d2 <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 801c31c:	4a2d      	ldr	r2, [pc, #180]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c31e:	23df      	movs	r3, #223	; 0xdf
 801c320:	009b      	lsls	r3, r3, #2
 801c322:	5ad3      	ldrh	r3, [r2, r3]
 801c324:	492b      	ldr	r1, [pc, #172]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c326:	22dc      	movs	r2, #220	; 0xdc
 801c328:	0092      	lsls	r2, r2, #2
 801c32a:	5a8a      	ldrh	r2, [r1, r2]
 801c32c:	4013      	ands	r3, r2
 801c32e:	b299      	uxth	r1, r3
 801c330:	4a28      	ldr	r2, [pc, #160]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c332:	23df      	movs	r3, #223	; 0xdf
 801c334:	009b      	lsls	r3, r3, #2
 801c336:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
 801c338:	4b26      	ldr	r3, [pc, #152]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c33a:	4a28      	ldr	r2, [pc, #160]	; (801c3dc <RegionUS915LinkAdrReq+0x49c>)
 801c33c:	5a9b      	ldrh	r3, [r3, r2]
 801c33e:	4a25      	ldr	r2, [pc, #148]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c340:	4927      	ldr	r1, [pc, #156]	; (801c3e0 <RegionUS915LinkAdrReq+0x4a0>)
 801c342:	5a52      	ldrh	r2, [r2, r1]
 801c344:	4013      	ands	r3, r2
 801c346:	b299      	uxth	r1, r3
 801c348:	4b22      	ldr	r3, [pc, #136]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c34a:	4a24      	ldr	r2, [pc, #144]	; (801c3dc <RegionUS915LinkAdrReq+0x49c>)
 801c34c:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 801c34e:	4a21      	ldr	r2, [pc, #132]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c350:	23e0      	movs	r3, #224	; 0xe0
 801c352:	009b      	lsls	r3, r3, #2
 801c354:	5ad3      	ldrh	r3, [r2, r3]
 801c356:	491f      	ldr	r1, [pc, #124]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c358:	22dd      	movs	r2, #221	; 0xdd
 801c35a:	0092      	lsls	r2, r2, #2
 801c35c:	5a8a      	ldrh	r2, [r1, r2]
 801c35e:	4013      	ands	r3, r2
 801c360:	b299      	uxth	r1, r3
 801c362:	4a1c      	ldr	r2, [pc, #112]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c364:	23e0      	movs	r3, #224	; 0xe0
 801c366:	009b      	lsls	r3, r3, #2
 801c368:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
 801c36a:	4b1a      	ldr	r3, [pc, #104]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c36c:	4a1d      	ldr	r2, [pc, #116]	; (801c3e4 <RegionUS915LinkAdrReq+0x4a4>)
 801c36e:	5a9b      	ldrh	r3, [r3, r2]
 801c370:	4a18      	ldr	r2, [pc, #96]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c372:	491d      	ldr	r1, [pc, #116]	; (801c3e8 <RegionUS915LinkAdrReq+0x4a8>)
 801c374:	5a52      	ldrh	r2, [r2, r1]
 801c376:	4013      	ands	r3, r2
 801c378:	b299      	uxth	r1, r3
 801c37a:	4b16      	ldr	r3, [pc, #88]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c37c:	4a19      	ldr	r2, [pc, #100]	; (801c3e4 <RegionUS915LinkAdrReq+0x4a4>)
 801c37e:	5299      	strh	r1, [r3, r2]
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 801c380:	4a14      	ldr	r2, [pc, #80]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c382:	23de      	movs	r3, #222	; 0xde
 801c384:	009b      	lsls	r3, r3, #2
 801c386:	5ad1      	ldrh	r1, [r2, r3]
 801c388:	4a12      	ldr	r2, [pc, #72]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c38a:	23e1      	movs	r3, #225	; 0xe1
 801c38c:	009b      	lsls	r3, r3, #2
 801c38e:	52d1      	strh	r1, [r2, r3]
        NvmCtx.ChannelsMaskRemaining[5] = NvmCtx.ChannelsMask[5];
 801c390:	4b10      	ldr	r3, [pc, #64]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c392:	4a16      	ldr	r2, [pc, #88]	; (801c3ec <RegionUS915LinkAdrReq+0x4ac>)
 801c394:	5a99      	ldrh	r1, [r3, r2]
 801c396:	4b0f      	ldr	r3, [pc, #60]	; (801c3d4 <RegionUS915LinkAdrReq+0x494>)
 801c398:	4a15      	ldr	r2, [pc, #84]	; (801c3f0 <RegionUS915LinkAdrReq+0x4b0>)
 801c39a:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801c39c:	2144      	movs	r1, #68	; 0x44
 801c39e:	187b      	adds	r3, r7, r1
 801c3a0:	2201      	movs	r2, #1
 801c3a2:	569a      	ldrsb	r2, [r3, r2]
 801c3a4:	68bb      	ldr	r3, [r7, #8]
 801c3a6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801c3a8:	187b      	adds	r3, r7, r1
 801c3aa:	2202      	movs	r2, #2
 801c3ac:	569a      	ldrsb	r2, [r3, r2]
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801c3b2:	187b      	adds	r3, r7, r1
 801c3b4:	781a      	ldrb	r2, [r3, #0]
 801c3b6:	683b      	ldr	r3, [r7, #0]
 801c3b8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801c3ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c3bc:	224e      	movs	r2, #78	; 0x4e
 801c3be:	18ba      	adds	r2, r7, r2
 801c3c0:	7812      	ldrb	r2, [r2, #0]
 801c3c2:	701a      	strb	r2, [r3, #0]

    return status;
 801c3c4:	234f      	movs	r3, #79	; 0x4f
 801c3c6:	18fb      	adds	r3, r7, r3
 801c3c8:	781b      	ldrb	r3, [r3, #0]
}
 801c3ca:	0018      	movs	r0, r3
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	b015      	add	sp, #84	; 0x54
 801c3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3d2:	46c0      	nop			; (mov r8, r8)
 801c3d4:	2000183c 	.word	0x2000183c
 801c3d8:	20001bac 	.word	0x20001bac
 801c3dc:	0000037e 	.word	0x0000037e
 801c3e0:	00000372 	.word	0x00000372
 801c3e4:	00000382 	.word	0x00000382
 801c3e8:	00000376 	.word	0x00000376
 801c3ec:	0000037a 	.word	0x0000037a
 801c3f0:	00000386 	.word	0x00000386

0801c3f4 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801c3f4:	b580      	push	{r7, lr}
 801c3f6:	b084      	sub	sp, #16
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801c3fc:	230f      	movs	r3, #15
 801c3fe:	18fb      	adds	r3, r7, r3
 801c400:	2207      	movs	r2, #7
 801c402:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	685b      	ldr	r3, [r3, #4]
 801c408:	0018      	movs	r0, r3
 801c40a:	f7ff f81b 	bl	801b444 <VerifyRfFreq>
 801c40e:	0003      	movs	r3, r0
 801c410:	001a      	movs	r2, r3
 801c412:	2301      	movs	r3, #1
 801c414:	4053      	eors	r3, r2
 801c416:	b2db      	uxtb	r3, r3
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d006      	beq.n	801c42a <RegionUS915RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 801c41c:	220f      	movs	r2, #15
 801c41e:	18bb      	adds	r3, r7, r2
 801c420:	18ba      	adds	r2, r7, r2
 801c422:	7812      	ldrb	r2, [r2, #0]
 801c424:	2101      	movs	r1, #1
 801c426:	438a      	bics	r2, r1
 801c428:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	781b      	ldrb	r3, [r3, #0]
 801c42e:	b25b      	sxtb	r3, r3
 801c430:	220d      	movs	r2, #13
 801c432:	2108      	movs	r1, #8
 801c434:	0018      	movs	r0, r3
 801c436:	f7f7 ffa3 	bl	8014380 <RegionCommonValueInRange>
 801c43a:	1e03      	subs	r3, r0, #0
 801c43c:	d106      	bne.n	801c44c <RegionUS915RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801c43e:	220f      	movs	r2, #15
 801c440:	18bb      	adds	r3, r7, r2
 801c442:	18ba      	adds	r2, r7, r2
 801c444:	7812      	ldrb	r2, [r2, #0]
 801c446:	2102      	movs	r1, #2
 801c448:	438a      	bics	r2, r1
 801c44a:	701a      	strb	r2, [r3, #0]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	781b      	ldrb	r3, [r3, #0]
 801c450:	b25b      	sxtb	r3, r3
 801c452:	2207      	movs	r2, #7
 801c454:	2105      	movs	r1, #5
 801c456:	0018      	movs	r0, r3
 801c458:	f7f7 ff92 	bl	8014380 <RegionCommonValueInRange>
 801c45c:	0003      	movs	r3, r0
 801c45e:	2b01      	cmp	r3, #1
 801c460:	d004      	beq.n	801c46c <RegionUS915RxParamSetupReq+0x78>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	781b      	ldrb	r3, [r3, #0]
 801c466:	b25b      	sxtb	r3, r3
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801c468:	2b0d      	cmp	r3, #13
 801c46a:	dd06      	ble.n	801c47a <RegionUS915RxParamSetupReq+0x86>
    {
        status &= 0xFD; // Datarate KO
 801c46c:	220f      	movs	r2, #15
 801c46e:	18bb      	adds	r3, r7, r2
 801c470:	18ba      	adds	r2, r7, r2
 801c472:	7812      	ldrb	r2, [r2, #0]
 801c474:	2102      	movs	r1, #2
 801c476:	438a      	bics	r2, r1
 801c478:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	785b      	ldrb	r3, [r3, #1]
 801c47e:	b25b      	sxtb	r3, r3
 801c480:	2203      	movs	r2, #3
 801c482:	2100      	movs	r1, #0
 801c484:	0018      	movs	r0, r3
 801c486:	f7f7 ff7b 	bl	8014380 <RegionCommonValueInRange>
 801c48a:	1e03      	subs	r3, r0, #0
 801c48c:	d106      	bne.n	801c49c <RegionUS915RxParamSetupReq+0xa8>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801c48e:	220f      	movs	r2, #15
 801c490:	18bb      	adds	r3, r7, r2
 801c492:	18ba      	adds	r2, r7, r2
 801c494:	7812      	ldrb	r2, [r2, #0]
 801c496:	2104      	movs	r1, #4
 801c498:	438a      	bics	r2, r1
 801c49a:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801c49c:	230f      	movs	r3, #15
 801c49e:	18fb      	adds	r3, r7, r3
 801c4a0:	781b      	ldrb	r3, [r3, #0]
}
 801c4a2:	0018      	movs	r0, r3
 801c4a4:	46bd      	mov	sp, r7
 801c4a6:	b004      	add	sp, #16
 801c4a8:	bd80      	pop	{r7, pc}

0801c4aa <RegionUS915NewChannelReq>:

uint8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801c4aa:	b580      	push	{r7, lr}
 801c4ac:	b082      	sub	sp, #8
 801c4ae:	af00      	add	r7, sp, #0
 801c4b0:	6078      	str	r0, [r7, #4]
    // Datarate and frequency KO
    return 0;
 801c4b2:	2300      	movs	r3, #0
}
 801c4b4:	0018      	movs	r0, r3
 801c4b6:	46bd      	mov	sp, r7
 801c4b8:	b002      	add	sp, #8
 801c4ba:	bd80      	pop	{r7, pc}

0801c4bc <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b082      	sub	sp, #8
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
    return -1;
 801c4c4:	2301      	movs	r3, #1
 801c4c6:	425b      	negs	r3, r3
}
 801c4c8:	0018      	movs	r0, r3
 801c4ca:	46bd      	mov	sp, r7
 801c4cc:	b002      	add	sp, #8
 801c4ce:	bd80      	pop	{r7, pc}

0801c4d0 <RegionUS915DlChannelReq>:

uint8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b082      	sub	sp, #8
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
    return 0;
 801c4d8:	2300      	movs	r3, #0
}
 801c4da:	0018      	movs	r0, r3
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	b002      	add	sp, #8
 801c4e0:	bd80      	pop	{r7, pc}
	...

0801c4e4 <RegionUS915CalcBackOff>:
    }
    return currentDr;
}

void RegionUS915CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 801c4e4:	b580      	push	{r7, lr}
 801c4e6:	b088      	sub	sp, #32
 801c4e8:	af00      	add	r7, sp, #0
 801c4ea:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 801c4ec:	210c      	movs	r1, #12
 801c4ee:	187b      	adds	r3, r7, r1
 801c4f0:	4a12      	ldr	r2, [pc, #72]	; (801c53c <RegionUS915CalcBackOff+0x58>)
 801c4f2:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 801c4f4:	187b      	adds	r3, r7, r1
 801c4f6:	4a12      	ldr	r2, [pc, #72]	; (801c540 <RegionUS915CalcBackOff+0x5c>)
 801c4f8:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	785a      	ldrb	r2, [r3, #1]
 801c4fe:	187b      	adds	r3, r7, r1
 801c500:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	781a      	ldrb	r2, [r3, #0]
 801c506:	187b      	adds	r3, r7, r1
 801c508:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	789a      	ldrb	r2, [r3, #2]
 801c50e:	187b      	adds	r3, r7, r1
 801c510:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	78da      	ldrb	r2, [r3, #3]
 801c516:	187b      	adds	r3, r7, r1
 801c518:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	685a      	ldr	r2, [r3, #4]
 801c51e:	187b      	adds	r3, r7, r1
 801c520:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	689a      	ldr	r2, [r3, #8]
 801c526:	187b      	adds	r3, r7, r1
 801c528:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801c52a:	187b      	adds	r3, r7, r1
 801c52c:	0018      	movs	r0, r3
 801c52e:	f7f8 fb0f 	bl	8014b50 <RegionCommonCalcBackOff>
}
 801c532:	46c0      	nop			; (mov r8, r8)
 801c534:	46bd      	mov	sp, r7
 801c536:	b008      	add	sp, #32
 801c538:	bd80      	pop	{r7, pc}
 801c53a:	46c0      	nop			; (mov r8, r8)
 801c53c:	2000183c 	.word	0x2000183c
 801c540:	20001b9c 	.word	0x20001b9c

0801c544 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801c544:	b5b0      	push	{r4, r5, r7, lr}
 801c546:	b09c      	sub	sp, #112	; 0x70
 801c548:	af02      	add	r7, sp, #8
 801c54a:	60f8      	str	r0, [r7, #12]
 801c54c:	60b9      	str	r1, [r7, #8]
 801c54e:	607a      	str	r2, [r7, #4]
 801c550:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801c552:	2367      	movs	r3, #103	; 0x67
 801c554:	18fb      	adds	r3, r7, r3
 801c556:	2200      	movs	r2, #0
 801c558:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801c55a:	235e      	movs	r3, #94	; 0x5e
 801c55c:	18fb      	adds	r3, r7, r3
 801c55e:	2200      	movs	r2, #0
 801c560:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801c562:	2314      	movs	r3, #20
 801c564:	18fb      	adds	r3, r7, r3
 801c566:	0018      	movs	r0, r3
 801c568:	2348      	movs	r3, #72	; 0x48
 801c56a:	001a      	movs	r2, r3
 801c56c:	2100      	movs	r1, #0
 801c56e:	f009 fcdf 	bl	8025f30 <memset>
    TimerTime_t nextTxDelay = 0;
 801c572:	2300      	movs	r3, #0
 801c574:	663b      	str	r3, [r7, #96]	; 0x60
    uint8_t newChannelIndex;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 801c576:	4b68      	ldr	r3, [pc, #416]	; (801c718 <RegionUS915NextChannel+0x1d4>)
 801c578:	2204      	movs	r2, #4
 801c57a:	2100      	movs	r1, #0
 801c57c:	0018      	movs	r0, r3
 801c57e:	f7f7 ff67 	bl	8014450 <RegionCommonCountChannels>
 801c582:	1e03      	subs	r3, r0, #0
 801c584:	d10a      	bne.n	801c59c <RegionUS915NextChannel+0x58>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 801c586:	4965      	ldr	r1, [pc, #404]	; (801c71c <RegionUS915NextChannel+0x1d8>)
 801c588:	4b63      	ldr	r3, [pc, #396]	; (801c718 <RegionUS915NextChannel+0x1d4>)
 801c58a:	2204      	movs	r2, #4
 801c58c:	0018      	movs	r0, r3
 801c58e:	f7f7 ffa0 	bl	80144d2 <RegionCommonChanMaskCopy>

        NvmCtx.JoinChannelGroupsCurrentIndex = 0;
 801c592:	4a63      	ldr	r2, [pc, #396]	; (801c720 <RegionUS915NextChannel+0x1dc>)
 801c594:	23e5      	movs	r3, #229	; 0xe5
 801c596:	009b      	lsls	r3, r3, #2
 801c598:	2100      	movs	r1, #0
 801c59a:	54d1      	strb	r1, [r2, r3]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	7a1b      	ldrb	r3, [r3, #8]
 801c5a0:	b25b      	sxtb	r3, r3
 801c5a2:	2b03      	cmp	r3, #3
 801c5a4:	dd0f      	ble.n	801c5c6 <RegionUS915NextChannel+0x82>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801c5a6:	4a5e      	ldr	r2, [pc, #376]	; (801c720 <RegionUS915NextChannel+0x1dc>)
 801c5a8:	23e1      	movs	r3, #225	; 0xe1
 801c5aa:	009b      	lsls	r3, r3, #2
 801c5ac:	5ad3      	ldrh	r3, [r2, r3]
 801c5ae:	001a      	movs	r2, r3
 801c5b0:	23ff      	movs	r3, #255	; 0xff
 801c5b2:	4013      	ands	r3, r2
 801c5b4:	d107      	bne.n	801c5c6 <RegionUS915NextChannel+0x82>
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 801c5b6:	4a5a      	ldr	r2, [pc, #360]	; (801c720 <RegionUS915NextChannel+0x1dc>)
 801c5b8:	23de      	movs	r3, #222	; 0xde
 801c5ba:	009b      	lsls	r3, r3, #2
 801c5bc:	5ad1      	ldrh	r1, [r2, r3]
 801c5be:	4a58      	ldr	r2, [pc, #352]	; (801c720 <RegionUS915NextChannel+0x1dc>)
 801c5c0:	23e1      	movs	r3, #225	; 0xe1
 801c5c2:	009b      	lsls	r3, r3, #2
 801c5c4:	52d1      	strh	r1, [r2, r3]
        }
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	681c      	ldr	r4, [r3, #0]
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	685b      	ldr	r3, [r3, #4]
 801c5ce:	0018      	movs	r0, r3
 801c5d0:	f000 fb45 	bl	801cc5e <TimerGetElapsedTime>
 801c5d4:	0003      	movs	r3, r0
 801c5d6:	429c      	cmp	r4, r3
 801c5d8:	d821      	bhi.n	801c61e <RegionUS915NextChannel+0xda>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801c5da:	683b      	ldr	r3, [r7, #0]
 801c5dc:	2200      	movs	r2, #0
 801c5de:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, US915_MAX_NB_BANDS );
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	7a58      	ldrb	r0, [r3, #9]
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	7a99      	ldrb	r1, [r3, #10]
 801c5e8:	4a4e      	ldr	r2, [pc, #312]	; (801c724 <RegionUS915NextChannel+0x1e0>)
 801c5ea:	2301      	movs	r3, #1
 801c5ec:	f7f7 ffbb 	bl	8014566 <RegionCommonUpdateBandTimeOff>
 801c5f0:	0003      	movs	r3, r0
 801c5f2:	663b      	str	r3, [r7, #96]	; 0x60

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Datarate,
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	7a1b      	ldrb	r3, [r3, #8]
 801c5f8:	b25b      	sxtb	r3, r3
 801c5fa:	b2d8      	uxtb	r0, r3
 801c5fc:	2367      	movs	r3, #103	; 0x67
 801c5fe:	18fc      	adds	r4, r7, r3
 801c600:	4d48      	ldr	r5, [pc, #288]	; (801c724 <RegionUS915NextChannel+0x1e0>)
 801c602:	4a47      	ldr	r2, [pc, #284]	; (801c720 <RegionUS915NextChannel+0x1dc>)
 801c604:	4944      	ldr	r1, [pc, #272]	; (801c718 <RegionUS915NextChannel+0x1d4>)
 801c606:	235e      	movs	r3, #94	; 0x5e
 801c608:	18fb      	adds	r3, r7, r3
 801c60a:	9301      	str	r3, [sp, #4]
 801c60c:	2314      	movs	r3, #20
 801c60e:	18fb      	adds	r3, r7, r3
 801c610:	9300      	str	r3, [sp, #0]
 801c612:	002b      	movs	r3, r5
 801c614:	f7fe ff58 	bl	801b4c8 <CountNbOfEnabledChannels>
 801c618:	0003      	movs	r3, r0
 801c61a:	7023      	strb	r3, [r4, #0]
 801c61c:	e010      	b.n	801c640 <RegionUS915NextChannel+0xfc>
                                                      NvmCtx.ChannelsMaskRemaining, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 801c61e:	215e      	movs	r1, #94	; 0x5e
 801c620:	187b      	adds	r3, r7, r1
 801c622:	781b      	ldrb	r3, [r3, #0]
 801c624:	3301      	adds	r3, #1
 801c626:	b2da      	uxtb	r2, r3
 801c628:	187b      	adds	r3, r7, r1
 801c62a:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	681c      	ldr	r4, [r3, #0]
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	685b      	ldr	r3, [r3, #4]
 801c634:	0018      	movs	r0, r3
 801c636:	f000 fb12 	bl	801cc5e <TimerGetElapsedTime>
 801c63a:	0003      	movs	r3, r0
 801c63c:	1ae3      	subs	r3, r4, r3
 801c63e:	663b      	str	r3, [r7, #96]	; 0x60
    }

    if( nbEnabledChannels > 0 )
 801c640:	2367      	movs	r3, #103	; 0x67
 801c642:	18fb      	adds	r3, r7, r3
 801c644:	781b      	ldrb	r3, [r3, #0]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d054      	beq.n	801c6f4 <RegionUS915NextChannel+0x1b0>
    {
        if( nextChanParams->Joined == true )
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	7a5b      	ldrb	r3, [r3, #9]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d00e      	beq.n	801c670 <RegionUS915NextChannel+0x12c>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801c652:	2367      	movs	r3, #103	; 0x67
 801c654:	18fb      	adds	r3, r7, r3
 801c656:	781b      	ldrb	r3, [r3, #0]
 801c658:	3b01      	subs	r3, #1
 801c65a:	0019      	movs	r1, r3
 801c65c:	2000      	movs	r0, #0
 801c65e:	f000 fb27 	bl	801ccb0 <randr>
 801c662:	0002      	movs	r2, r0
 801c664:	2314      	movs	r3, #20
 801c666:	18fb      	adds	r3, r7, r3
 801c668:	5c9a      	ldrb	r2, [r3, r2]
 801c66a:	68bb      	ldr	r3, [r7, #8]
 801c66c:	701a      	strb	r2, [r3, #0]
 801c66e:	e035      	b.n	801c6dc <RegionUS915NextChannel+0x198>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	7a1b      	ldrb	r3, [r3, #8]
 801c674:	b25b      	sxtb	r3, r3
 801c676:	2b00      	cmp	r3, #0
 801c678:	d10f      	bne.n	801c69a <RegionUS915NextChannel+0x156>
            {
                if( ComputeNext125kHzJoinChannel( &newChannelIndex ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801c67a:	2313      	movs	r3, #19
 801c67c:	18fb      	adds	r3, r7, r3
 801c67e:	0018      	movs	r0, r3
 801c680:	f7fe fdd6 	bl	801b230 <ComputeNext125kHzJoinChannel>
 801c684:	0003      	movs	r3, r0
 801c686:	2b03      	cmp	r3, #3
 801c688:	d101      	bne.n	801c68e <RegionUS915NextChannel+0x14a>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801c68a:	2303      	movs	r3, #3
 801c68c:	e040      	b.n	801c710 <RegionUS915NextChannel+0x1cc>
                }
                *channel = newChannelIndex;
 801c68e:	2313      	movs	r3, #19
 801c690:	18fb      	adds	r3, r7, r3
 801c692:	781a      	ldrb	r2, [r3, #0]
 801c694:	68bb      	ldr	r3, [r7, #8]
 801c696:	701a      	strb	r2, [r3, #0]
 801c698:	e020      	b.n	801c6dc <RegionUS915NextChannel+0x198>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801c69a:	235f      	movs	r3, #95	; 0x5f
 801c69c:	18fb      	adds	r3, r7, r3
 801c69e:	2200      	movs	r2, #0
 801c6a0:	701a      	strb	r2, [r3, #0]
                while( ( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801c6a2:	e005      	b.n	801c6b0 <RegionUS915NextChannel+0x16c>
                {
                    i++;
 801c6a4:	215f      	movs	r1, #95	; 0x5f
 801c6a6:	187b      	adds	r3, r7, r1
 801c6a8:	781a      	ldrb	r2, [r3, #0]
 801c6aa:	187b      	adds	r3, r7, r1
 801c6ac:	3201      	adds	r2, #1
 801c6ae:	701a      	strb	r2, [r3, #0]
                while( ( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801c6b0:	4a1b      	ldr	r2, [pc, #108]	; (801c720 <RegionUS915NextChannel+0x1dc>)
 801c6b2:	23e1      	movs	r3, #225	; 0xe1
 801c6b4:	009b      	lsls	r3, r3, #2
 801c6b6:	5ad3      	ldrh	r3, [r2, r3]
 801c6b8:	001a      	movs	r2, r3
 801c6ba:	23ff      	movs	r3, #255	; 0xff
 801c6bc:	401a      	ands	r2, r3
 801c6be:	235f      	movs	r3, #95	; 0x5f
 801c6c0:	18fb      	adds	r3, r7, r3
 801c6c2:	781b      	ldrb	r3, [r3, #0]
 801c6c4:	411a      	asrs	r2, r3
 801c6c6:	0013      	movs	r3, r2
 801c6c8:	2201      	movs	r2, #1
 801c6ca:	4013      	ands	r3, r2
 801c6cc:	d0ea      	beq.n	801c6a4 <RegionUS915NextChannel+0x160>
                }
                *channel = 64 + i;
 801c6ce:	235f      	movs	r3, #95	; 0x5f
 801c6d0:	18fb      	adds	r3, r7, r3
 801c6d2:	781b      	ldrb	r3, [r3, #0]
 801c6d4:	3340      	adds	r3, #64	; 0x40
 801c6d6:	b2da      	uxtb	r2, r3
 801c6d8:	68bb      	ldr	r3, [r7, #8]
 801c6da:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801c6dc:	68bb      	ldr	r3, [r7, #8]
 801c6de:	7819      	ldrb	r1, [r3, #0]
 801c6e0:	4b0d      	ldr	r3, [pc, #52]	; (801c718 <RegionUS915NextChannel+0x1d4>)
 801c6e2:	2248      	movs	r2, #72	; 0x48
 801c6e4:	0018      	movs	r0, r3
 801c6e6:	f7f7 fe71 	bl	80143cc <RegionCommonChanDisable>

        *time = 0;
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	e00d      	b.n	801c710 <RegionUS915NextChannel+0x1cc>
    }
    else
    {
        if( delayTx > 0 )
 801c6f4:	235e      	movs	r3, #94	; 0x5e
 801c6f6:	18fb      	adds	r3, r7, r3
 801c6f8:	781b      	ldrb	r3, [r3, #0]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d004      	beq.n	801c708 <RegionUS915NextChannel+0x1c4>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c702:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801c704:	230b      	movs	r3, #11
 801c706:	e003      	b.n	801c710 <RegionUS915NextChannel+0x1cc>
        }
        // Datarate not supported by any channel
        *time = 0;
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	2200      	movs	r2, #0
 801c70c:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801c70e:	230c      	movs	r3, #12
    }
}
 801c710:	0018      	movs	r0, r3
 801c712:	46bd      	mov	sp, r7
 801c714:	b01a      	add	sp, #104	; 0x68
 801c716:	bdb0      	pop	{r4, r5, r7, pc}
 801c718:	20001bb8 	.word	0x20001bb8
 801c71c:	20001bac 	.word	0x20001bac
 801c720:	2000183c 	.word	0x2000183c
 801c724:	20001b9c 	.word	0x20001b9c

0801c728 <RegionUS915ApplyDrOffset>:

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
}

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801c728:	b590      	push	{r4, r7, lr}
 801c72a:	b085      	sub	sp, #20
 801c72c:	af00      	add	r7, sp, #0
 801c72e:	0004      	movs	r4, r0
 801c730:	0008      	movs	r0, r1
 801c732:	0011      	movs	r1, r2
 801c734:	1dfb      	adds	r3, r7, #7
 801c736:	1c22      	adds	r2, r4, #0
 801c738:	701a      	strb	r2, [r3, #0]
 801c73a:	1dbb      	adds	r3, r7, #6
 801c73c:	1c02      	adds	r2, r0, #0
 801c73e:	701a      	strb	r2, [r3, #0]
 801c740:	1d7b      	adds	r3, r7, #5
 801c742:	1c0a      	adds	r2, r1, #0
 801c744:	701a      	strb	r2, [r3, #0]
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801c746:	1dbb      	adds	r3, r7, #6
 801c748:	2100      	movs	r1, #0
 801c74a:	5659      	ldrsb	r1, [r3, r1]
 801c74c:	1d7b      	adds	r3, r7, #5
 801c74e:	2200      	movs	r2, #0
 801c750:	569a      	ldrsb	r2, [r3, r2]
 801c752:	240f      	movs	r4, #15
 801c754:	193b      	adds	r3, r7, r4
 801c756:	480a      	ldr	r0, [pc, #40]	; (801c780 <RegionUS915ApplyDrOffset+0x58>)
 801c758:	0089      	lsls	r1, r1, #2
 801c75a:	1841      	adds	r1, r0, r1
 801c75c:	5c8a      	ldrb	r2, [r1, r2]
 801c75e:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 801c760:	193b      	adds	r3, r7, r4
 801c762:	781b      	ldrb	r3, [r3, #0]
 801c764:	2b7f      	cmp	r3, #127	; 0x7f
 801c766:	d903      	bls.n	801c770 <RegionUS915ApplyDrOffset+0x48>
    {
        datarate = DR_0;
 801c768:	230f      	movs	r3, #15
 801c76a:	18fb      	adds	r3, r7, r3
 801c76c:	2200      	movs	r2, #0
 801c76e:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 801c770:	230f      	movs	r3, #15
 801c772:	18fb      	adds	r3, r7, r3
 801c774:	781b      	ldrb	r3, [r3, #0]
}
 801c776:	0018      	movs	r0, r3
 801c778:	46bd      	mov	sp, r7
 801c77a:	b005      	add	sp, #20
 801c77c:	bd90      	pop	{r4, r7, pc}
 801c77e:	46c0      	nop			; (mov r8, r8)
 801c780:	0802885c 	.word	0x0802885c

0801c784 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c784:	b082      	sub	sp, #8
 801c786:	b580      	push	{r7, lr}
 801c788:	b086      	sub	sp, #24
 801c78a:	af00      	add	r7, sp, #0
 801c78c:	60f8      	str	r0, [r7, #12]
 801c78e:	1d38      	adds	r0, r7, #4
 801c790:	6001      	str	r1, [r0, #0]
 801c792:	6042      	str	r2, [r0, #4]
 801c794:	2204      	movs	r2, #4
 801c796:	2120      	movs	r1, #32
 801c798:	468c      	mov	ip, r1
 801c79a:	44bc      	add	ip, r7
 801c79c:	4462      	add	r2, ip
 801c79e:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c7a0:	2110      	movs	r1, #16
 801c7a2:	187b      	adds	r3, r7, r1
 801c7a4:	2200      	movs	r2, #0
 801c7a6:	601a      	str	r2, [r3, #0]
 801c7a8:	187b      	adds	r3, r7, r1
 801c7aa:	2200      	movs	r2, #0
 801c7ac:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 801c7ae:	1d3b      	adds	r3, r7, #4
 801c7b0:	681a      	ldr	r2, [r3, #0]
 801c7b2:	2304      	movs	r3, #4
 801c7b4:	2020      	movs	r0, #32
 801c7b6:	4684      	mov	ip, r0
 801c7b8:	44bc      	add	ip, r7
 801c7ba:	4463      	add	r3, ip
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	18d2      	adds	r2, r2, r3
 801c7c0:	187b      	adds	r3, r7, r1
 801c7c2:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c7c4:	1d3b      	adds	r3, r7, #4
 801c7c6:	2204      	movs	r2, #4
 801c7c8:	5e9b      	ldrsh	r3, [r3, r2]
 801c7ca:	b29a      	uxth	r2, r3
 801c7cc:	2304      	movs	r3, #4
 801c7ce:	2020      	movs	r0, #32
 801c7d0:	4684      	mov	ip, r0
 801c7d2:	44bc      	add	ip, r7
 801c7d4:	4463      	add	r3, ip
 801c7d6:	2004      	movs	r0, #4
 801c7d8:	5e1b      	ldrsh	r3, [r3, r0]
 801c7da:	b29b      	uxth	r3, r3
 801c7dc:	18d3      	adds	r3, r2, r3
 801c7de:	b29b      	uxth	r3, r3
 801c7e0:	b21a      	sxth	r2, r3
 801c7e2:	187b      	adds	r3, r7, r1
 801c7e4:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 801c7e6:	187b      	adds	r3, r7, r1
 801c7e8:	2204      	movs	r2, #4
 801c7ea:	5e9b      	ldrsh	r3, [r3, r2]
 801c7ec:	4a0f      	ldr	r2, [pc, #60]	; (801c82c <SysTimeAdd+0xa8>)
 801c7ee:	4293      	cmp	r3, r2
 801c7f0:	dd10      	ble.n	801c814 <SysTimeAdd+0x90>
    {
        c.Seconds++;
 801c7f2:	2110      	movs	r1, #16
 801c7f4:	187b      	adds	r3, r7, r1
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	1c5a      	adds	r2, r3, #1
 801c7fa:	187b      	adds	r3, r7, r1
 801c7fc:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 801c7fe:	187b      	adds	r3, r7, r1
 801c800:	2204      	movs	r2, #4
 801c802:	5e9b      	ldrsh	r3, [r3, r2]
 801c804:	b29b      	uxth	r3, r3
 801c806:	4a0a      	ldr	r2, [pc, #40]	; (801c830 <SysTimeAdd+0xac>)
 801c808:	4694      	mov	ip, r2
 801c80a:	4463      	add	r3, ip
 801c80c:	b29b      	uxth	r3, r3
 801c80e:	b21a      	sxth	r2, r3
 801c810:	187b      	adds	r3, r7, r1
 801c812:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	2210      	movs	r2, #16
 801c818:	18ba      	adds	r2, r7, r2
 801c81a:	ca03      	ldmia	r2!, {r0, r1}
 801c81c:	c303      	stmia	r3!, {r0, r1}
}
 801c81e:	68f8      	ldr	r0, [r7, #12]
 801c820:	46bd      	mov	sp, r7
 801c822:	b006      	add	sp, #24
 801c824:	bc80      	pop	{r7}
 801c826:	bc08      	pop	{r3}
 801c828:	b002      	add	sp, #8
 801c82a:	4718      	bx	r3
 801c82c:	000003e7 	.word	0x000003e7
 801c830:	fffffc18 	.word	0xfffffc18

0801c834 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c834:	b082      	sub	sp, #8
 801c836:	b580      	push	{r7, lr}
 801c838:	b086      	sub	sp, #24
 801c83a:	af00      	add	r7, sp, #0
 801c83c:	60f8      	str	r0, [r7, #12]
 801c83e:	1d38      	adds	r0, r7, #4
 801c840:	6001      	str	r1, [r0, #0]
 801c842:	6042      	str	r2, [r0, #4]
 801c844:	2204      	movs	r2, #4
 801c846:	2120      	movs	r1, #32
 801c848:	468c      	mov	ip, r1
 801c84a:	44bc      	add	ip, r7
 801c84c:	4462      	add	r2, ip
 801c84e:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c850:	2110      	movs	r1, #16
 801c852:	187b      	adds	r3, r7, r1
 801c854:	2200      	movs	r2, #0
 801c856:	601a      	str	r2, [r3, #0]
 801c858:	187b      	adds	r3, r7, r1
 801c85a:	2200      	movs	r2, #0
 801c85c:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 801c85e:	1d3b      	adds	r3, r7, #4
 801c860:	681a      	ldr	r2, [r3, #0]
 801c862:	2304      	movs	r3, #4
 801c864:	2020      	movs	r0, #32
 801c866:	4684      	mov	ip, r0
 801c868:	44bc      	add	ip, r7
 801c86a:	4463      	add	r3, ip
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	1ad2      	subs	r2, r2, r3
 801c870:	187b      	adds	r3, r7, r1
 801c872:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c874:	1d3b      	adds	r3, r7, #4
 801c876:	2204      	movs	r2, #4
 801c878:	5e9b      	ldrsh	r3, [r3, r2]
 801c87a:	b29a      	uxth	r2, r3
 801c87c:	2304      	movs	r3, #4
 801c87e:	2020      	movs	r0, #32
 801c880:	4684      	mov	ip, r0
 801c882:	44bc      	add	ip, r7
 801c884:	4463      	add	r3, ip
 801c886:	2004      	movs	r0, #4
 801c888:	5e1b      	ldrsh	r3, [r3, r0]
 801c88a:	b29b      	uxth	r3, r3
 801c88c:	1ad3      	subs	r3, r2, r3
 801c88e:	b29b      	uxth	r3, r3
 801c890:	b21a      	sxth	r2, r3
 801c892:	187b      	adds	r3, r7, r1
 801c894:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 801c896:	187b      	adds	r3, r7, r1
 801c898:	2204      	movs	r2, #4
 801c89a:	5e9b      	ldrsh	r3, [r3, r2]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	da11      	bge.n	801c8c4 <SysTimeSub+0x90>
    {
        c.Seconds--;
 801c8a0:	2110      	movs	r1, #16
 801c8a2:	187b      	adds	r3, r7, r1
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	1e5a      	subs	r2, r3, #1
 801c8a8:	187b      	adds	r3, r7, r1
 801c8aa:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 801c8ac:	187b      	adds	r3, r7, r1
 801c8ae:	2204      	movs	r2, #4
 801c8b0:	5e9b      	ldrsh	r3, [r3, r2]
 801c8b2:	b29b      	uxth	r3, r3
 801c8b4:	22fa      	movs	r2, #250	; 0xfa
 801c8b6:	0092      	lsls	r2, r2, #2
 801c8b8:	4694      	mov	ip, r2
 801c8ba:	4463      	add	r3, ip
 801c8bc:	b29b      	uxth	r3, r3
 801c8be:	b21a      	sxth	r2, r3
 801c8c0:	187b      	adds	r3, r7, r1
 801c8c2:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	2210      	movs	r2, #16
 801c8c8:	18ba      	adds	r2, r7, r2
 801c8ca:	ca03      	ldmia	r2!, {r0, r1}
 801c8cc:	c303      	stmia	r3!, {r0, r1}
}
 801c8ce:	68f8      	ldr	r0, [r7, #12]
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	b006      	add	sp, #24
 801c8d4:	bc80      	pop	{r7}
 801c8d6:	bc08      	pop	{r3}
 801c8d8:	b002      	add	sp, #8
 801c8da:	4718      	bx	r3

0801c8dc <SysTimeSet>:


void SysTimeSet( SysTime_t sysTime )
{
 801c8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8de:	b085      	sub	sp, #20
 801c8e0:	af00      	add	r7, sp, #0
 801c8e2:	003b      	movs	r3, r7
 801c8e4:	6018      	str	r0, [r3, #0]
 801c8e6:	6059      	str	r1, [r3, #4]

	uint64_t t = sysTime.Seconds;
 801c8e8:	003b      	movs	r3, r7
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	60bb      	str	r3, [r7, #8]
 801c8ee:	2300      	movs	r3, #0
 801c8f0:	60fb      	str	r3, [r7, #12]
	t *= 1000;
 801c8f2:	22fa      	movs	r2, #250	; 0xfa
 801c8f4:	0092      	lsls	r2, r2, #2
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	68b8      	ldr	r0, [r7, #8]
 801c8fa:	68f9      	ldr	r1, [r7, #12]
 801c8fc:	f7e3 fe3e 	bl	800057c <__aeabi_lmul>
 801c900:	0003      	movs	r3, r0
 801c902:	000c      	movs	r4, r1
 801c904:	60bb      	str	r3, [r7, #8]
 801c906:	60fc      	str	r4, [r7, #12]
	t += sysTime.SubSeconds;
 801c908:	003b      	movs	r3, r7
 801c90a:	2204      	movs	r2, #4
 801c90c:	5e9b      	ldrsh	r3, [r3, r2]
 801c90e:	001d      	movs	r5, r3
 801c910:	17db      	asrs	r3, r3, #31
 801c912:	001e      	movs	r6, r3
 801c914:	68bb      	ldr	r3, [r7, #8]
 801c916:	68fc      	ldr	r4, [r7, #12]
 801c918:	195b      	adds	r3, r3, r5
 801c91a:	4174      	adcs	r4, r6
 801c91c:	60bb      	str	r3, [r7, #8]
 801c91e:	60fc      	str	r4, [r7, #12]
    itsdk_time_set_ms(t);
 801c920:	68bb      	ldr	r3, [r7, #8]
 801c922:	68fc      	ldr	r4, [r7, #12]
 801c924:	0018      	movs	r0, r3
 801c926:	0021      	movs	r1, r4
 801c928:	f007 fab2 	bl	8023e90 <itsdk_time_set_ms>
    DeltaTime = SysTimeSub( sysTime, calendarTime );


    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
    */
}
 801c92c:	46c0      	nop			; (mov r8, r8)
 801c92e:	46bd      	mov	sp, r7
 801c930:	b005      	add	sp, #20
 801c932:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c934 <SysTimeGet>:


SysTime_t SysTimeGet( void )
{
 801c934:	b5b0      	push	{r4, r5, r7, lr}
 801c936:	b086      	sub	sp, #24
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]

    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c93c:	2008      	movs	r0, #8
 801c93e:	183b      	adds	r3, r7, r0
 801c940:	2200      	movs	r2, #0
 801c942:	601a      	str	r2, [r3, #0]
 801c944:	0005      	movs	r5, r0
 801c946:	183b      	adds	r3, r7, r0
 801c948:	2200      	movs	r2, #0
 801c94a:	809a      	strh	r2, [r3, #4]
	uint64_t t = itsdk_time_get_ms();
 801c94c:	f007 fada 	bl	8023f04 <itsdk_time_get_ms>
 801c950:	0003      	movs	r3, r0
 801c952:	000c      	movs	r4, r1
 801c954:	613b      	str	r3, [r7, #16]
 801c956:	617c      	str	r4, [r7, #20]
	sysTime.Seconds = t / 1000;
 801c958:	6938      	ldr	r0, [r7, #16]
 801c95a:	6979      	ldr	r1, [r7, #20]
 801c95c:	22fa      	movs	r2, #250	; 0xfa
 801c95e:	0092      	lsls	r2, r2, #2
 801c960:	2300      	movs	r3, #0
 801c962:	f7e3 fdeb 	bl	800053c <__aeabi_uldivmod>
 801c966:	0003      	movs	r3, r0
 801c968:	000c      	movs	r4, r1
 801c96a:	001a      	movs	r2, r3
 801c96c:	0028      	movs	r0, r5
 801c96e:	183b      	adds	r3, r7, r0
 801c970:	601a      	str	r2, [r3, #0]
	sysTime.SubSeconds = t - (sysTime.Seconds*1000);
 801c972:	693b      	ldr	r3, [r7, #16]
 801c974:	697c      	ldr	r4, [r7, #20]
 801c976:	b29a      	uxth	r2, r3
 801c978:	183b      	adds	r3, r7, r0
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	b29b      	uxth	r3, r3
 801c97e:	21fa      	movs	r1, #250	; 0xfa
 801c980:	0089      	lsls	r1, r1, #2
 801c982:	434b      	muls	r3, r1
 801c984:	b29b      	uxth	r3, r3
 801c986:	1ad3      	subs	r3, r2, r3
 801c988:	b29b      	uxth	r3, r3
 801c98a:	b21a      	sxth	r2, r3
 801c98c:	183b      	adds	r3, r7, r0
 801c98e:	809a      	strh	r2, [r3, #4]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
*/
    return sysTime;
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	183a      	adds	r2, r7, r0
 801c994:	ca03      	ldmia	r2!, {r0, r1}
 801c996:	c303      	stmia	r3!, {r0, r1}
}
 801c998:	6878      	ldr	r0, [r7, #4]
 801c99a:	46bd      	mov	sp, r7
 801c99c:	b006      	add	sp, #24
 801c99e:	bdb0      	pop	{r4, r5, r7, pc}

0801c9a0 <removeFromList>:
 */

/**
 * Remove a element from the list
 */
static void removeFromList( TimerEvent_t *obj ) {
 801c9a0:	b580      	push	{r7, lr}
 801c9a2:	b084      	sub	sp, #16
 801c9a4:	af00      	add	r7, sp, #0
 801c9a6:	6078      	str	r0, [r7, #4]
	if( TimerListHead == obj ) {
 801c9a8:	4b11      	ldr	r3, [pc, #68]	; (801c9f0 <removeFromList+0x50>)
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	687a      	ldr	r2, [r7, #4]
 801c9ae:	429a      	cmp	r2, r3
 801c9b0:	d105      	bne.n	801c9be <removeFromList+0x1e>
		TimerListHead = TimerListHead->Next;
 801c9b2:	4b0f      	ldr	r3, [pc, #60]	; (801c9f0 <removeFromList+0x50>)
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	695a      	ldr	r2, [r3, #20]
 801c9b8:	4b0d      	ldr	r3, [pc, #52]	; (801c9f0 <removeFromList+0x50>)
 801c9ba:	601a      	str	r2, [r3, #0]
			   break;
		   }
		   cur = cur->Next;
		}
	}
}
 801c9bc:	e014      	b.n	801c9e8 <removeFromList+0x48>
		TimerEvent_t* cur = TimerListHead;
 801c9be:	4b0c      	ldr	r3, [pc, #48]	; (801c9f0 <removeFromList+0x50>)
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 801c9c4:	e00d      	b.n	801c9e2 <removeFromList+0x42>
		   if( cur->Next == obj ) {
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	695b      	ldr	r3, [r3, #20]
 801c9ca:	687a      	ldr	r2, [r7, #4]
 801c9cc:	429a      	cmp	r2, r3
 801c9ce:	d105      	bne.n	801c9dc <removeFromList+0x3c>
			   cur->Next = obj->Next;
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	695a      	ldr	r2, [r3, #20]
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	615a      	str	r2, [r3, #20]
			   break;
 801c9d8:	46c0      	nop			; (mov r8, r8)
}
 801c9da:	e005      	b.n	801c9e8 <removeFromList+0x48>
		   cur = cur->Next;
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	695b      	ldr	r3, [r3, #20]
 801c9e0:	60fb      	str	r3, [r7, #12]
		while( cur != NULL ) {
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d1ee      	bne.n	801c9c6 <removeFromList+0x26>
}
 801c9e8:	46c0      	nop			; (mov r8, r8)
 801c9ea:	46bd      	mov	sp, r7
 801c9ec:	b004      	add	sp, #16
 801c9ee:	bd80      	pop	{r7, pc}
 801c9f0:	20001bd4 	.word	0x20001bd4

0801c9f4 <TimerExists>:

/**
 * Check if the Object to be added is not already in the list
 */
static bool TimerExists( TimerEvent_t *obj )
{
 801c9f4:	b580      	push	{r7, lr}
 801c9f6:	b084      	sub	sp, #16
 801c9f8:	af00      	add	r7, sp, #0
 801c9fa:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801c9fc:	4b0a      	ldr	r3, [pc, #40]	; (801ca28 <TimerExists+0x34>)
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	60fb      	str	r3, [r7, #12]

  while( cur != NULL ) {
 801ca02:	e008      	b.n	801ca16 <TimerExists+0x22>
    if( cur == obj ) {
 801ca04:	68fa      	ldr	r2, [r7, #12]
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d101      	bne.n	801ca10 <TimerExists+0x1c>
      return true;
 801ca0c:	2301      	movs	r3, #1
 801ca0e:	e006      	b.n	801ca1e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	695b      	ldr	r3, [r3, #20]
 801ca14:	60fb      	str	r3, [r7, #12]
  while( cur != NULL ) {
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d1f3      	bne.n	801ca04 <TimerExists+0x10>
  }
  return false;
 801ca1c:	2300      	movs	r3, #0

}
 801ca1e:	0018      	movs	r0, r3
 801ca20:	46bd      	mov	sp, r7
 801ca22:	b004      	add	sp, #16
 801ca24:	bd80      	pop	{r7, pc}
 801ca26:	46c0      	nop			; (mov r8, r8)
 801ca28:	20001bd4 	.word	0x20001bd4

0801ca2c <TimerInsertTimer>:

/**
 * Insert the timer, as we manage it with no order, just put it on the head
 */
static void TimerInsertTimer( TimerEvent_t *obj)
{
 801ca2c:	b580      	push	{r7, lr}
 801ca2e:	b082      	sub	sp, #8
 801ca30:	af00      	add	r7, sp, #0
 801ca32:	6078      	str	r0, [r7, #4]
	obj->Next = TimerListHead;
 801ca34:	4b05      	ldr	r3, [pc, #20]	; (801ca4c <TimerInsertTimer+0x20>)
 801ca36:	681a      	ldr	r2, [r3, #0]
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	615a      	str	r2, [r3, #20]
	TimerListHead = obj;
 801ca3c:	4b03      	ldr	r3, [pc, #12]	; (801ca4c <TimerInsertTimer+0x20>)
 801ca3e:	687a      	ldr	r2, [r7, #4]
 801ca40:	601a      	str	r2, [r3, #0]
}
 801ca42:	46c0      	nop			; (mov r8, r8)
 801ca44:	46bd      	mov	sp, r7
 801ca46:	b002      	add	sp, #8
 801ca48:	bd80      	pop	{r7, pc}
 801ca4a:	46c0      	nop			; (mov r8, r8)
 801ca4c:	20001bd4 	.word	0x20001bd4

0801ca50 <TimerCallback>:


/** *********************************************************************************
 * This is the callback used for all the timer, it calls the callback function
 */
static void TimerCallback( uint32_t value ) {
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b084      	sub	sp, #16
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]

	TimerEvent_t *obj = (TimerEvent_t *)value;
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	60fb      	str	r3, [r7, #12]
	LOG_DEBUG_LORAWAN(("TimerCallback (%d)\r\n",obj->ReloadValue));
	obj->IsStarted = false;
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	2200      	movs	r2, #0
 801ca60:	721a      	strb	r2, [r3, #8]
	if (obj->Callback != NULL) {
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	68db      	ldr	r3, [r3, #12]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d006      	beq.n	801ca78 <TimerCallback+0x28>
		obj->Callback(obj->Context);
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	68da      	ldr	r2, [r3, #12]
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	691b      	ldr	r3, [r3, #16]
 801ca72:	0018      	movs	r0, r3
 801ca74:	4790      	blx	r2
 801ca76:	e004      	b.n	801ca82 <TimerCallback+0x32>
	} else {
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_NOCALLBACK,0);
 801ca78:	4b06      	ldr	r3, [pc, #24]	; (801ca94 <TimerCallback+0x44>)
 801ca7a:	2100      	movs	r1, #0
 801ca7c:	0018      	movs	r0, r3
 801ca7e:	f006 f9e3 	bl	8022e48 <itsdk_error_report>
	}
	removeFromList(obj);
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	0018      	movs	r0, r3
 801ca86:	f7ff ff8b 	bl	801c9a0 <removeFromList>
}
 801ca8a:	46c0      	nop			; (mov r8, r8)
 801ca8c:	46bd      	mov	sp, r7
 801ca8e:	b004      	add	sp, #16
 801ca90:	bd80      	pop	{r7, pc}
 801ca92:	46c0      	nop			; (mov r8, r8)
 801ca94:	c0000104 	.word	0xc0000104

0801ca98 <TimerInit>:
/** ***********************************************************************************
 * Add / remove timer ...
 */

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 801ca98:	b580      	push	{r7, lr}
 801ca9a:	b082      	sub	sp, #8
 801ca9c:	af00      	add	r7, sp, #0
 801ca9e:	6078      	str	r0, [r7, #4]
 801caa0:	6039      	str	r1, [r7, #0]
  LOG_DEBUG_LORAWAN(("TimerInit\r\n"));

  obj->Timestamp = 0;
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	2200      	movs	r2, #0
 801caa6:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	2200      	movs	r2, #0
 801caac:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	2200      	movs	r2, #0
 801cab2:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	2200      	movs	r2, #0
 801cab8:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	683a      	ldr	r2, [r7, #0]
 801cabe:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	2200      	movs	r2, #0
 801cac4:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	2200      	movs	r2, #0
 801caca:	615a      	str	r2, [r3, #20]
}
 801cacc:	46c0      	nop			; (mov r8, r8)
 801cace:	46bd      	mov	sp, r7
 801cad0:	b002      	add	sp, #8
 801cad2:	bd80      	pop	{r7, pc}

0801cad4 <TimerSetValue>:
 * This is changing the duration of the timer. The value is given in ms.
 * We search for the itsdk timer structure and update it when running.
 * If not running the timestamp field will keep the value in ms.
 */
void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b084      	sub	sp, #16
 801cad8:	af00      	add	r7, sp, #0
 801cada:	6078      	str	r0, [r7, #4]
 801cadc:	6039      	str	r1, [r7, #0]
	LOG_DEBUG_LORAWAN(("TimerSetValue %d\r\n",value));
	// search the real timer based on the context
	itsdk_stimer_slot_t * t = itsdk_stimer_get(TimerCallback,(uint32_t)obj);
 801cade:	687a      	ldr	r2, [r7, #4]
 801cae0:	4b11      	ldr	r3, [pc, #68]	; (801cb28 <TimerSetValue+0x54>)
 801cae2:	0011      	movs	r1, r2
 801cae4:	0018      	movs	r0, r3
 801cae6:	f007 fb19 	bl	802411c <itsdk_stimer_get>
 801caea:	0003      	movs	r3, r0
 801caec:	60fb      	str	r3, [r7, #12]
	if ( t != NULL ) {
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d00e      	beq.n	801cb12 <TimerSetValue+0x3e>
		// best is to stop the timer and restart it with the new duration
		TimerStop(obj);
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	0018      	movs	r0, r3
 801caf8:	f000 f86e 	bl	801cbd8 <TimerStop>
		obj->Timestamp = value;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	683a      	ldr	r2, [r7, #0]
 801cb00:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	683a      	ldr	r2, [r7, #0]
 801cb06:	605a      	str	r2, [r3, #4]
		TimerStart(obj);
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	0018      	movs	r0, r3
 801cb0c:	f000 f80e 	bl	801cb2c <TimerStart>
	} else {
		// the timer is not running, so we just need to update the local structure
		obj->Timestamp = value;
		obj->ReloadValue = value;
	}
}
 801cb10:	e005      	b.n	801cb1e <TimerSetValue+0x4a>
		obj->Timestamp = value;
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	683a      	ldr	r2, [r7, #0]
 801cb16:	601a      	str	r2, [r3, #0]
		obj->ReloadValue = value;
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	683a      	ldr	r2, [r7, #0]
 801cb1c:	605a      	str	r2, [r3, #4]
}
 801cb1e:	46c0      	nop			; (mov r8, r8)
 801cb20:	46bd      	mov	sp, r7
 801cb22:	b004      	add	sp, #16
 801cb24:	bd80      	pop	{r7, pc}
 801cb26:	46c0      	nop			; (mov r8, r8)
 801cb28:	0801ca51 	.word	0x0801ca51

0801cb2c <TimerStart>:

/**
 * Add a Timer in the list and start it using the it_sdk timer module
 */
void TimerStart( TimerEvent_t *obj )
{
 801cb2c:	b5b0      	push	{r4, r5, r7, lr}
 801cb2e:	b084      	sub	sp, #16
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("St %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 801cb34:	f008 fab6 	bl	80250a4 <itsdk_enterCriticalSection>
	// do not add a timer already existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == true ) ) {
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d005      	beq.n	801cb4a <TimerStart+0x1e>
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	0018      	movs	r0, r3
 801cb42:	f7ff ff57 	bl	801c9f4 <TimerExists>
 801cb46:	1e03      	subs	r3, r0, #0
 801cb48:	d007      	beq.n	801cb5a <TimerStart+0x2e>
		itsdk_leaveCriticalSection();
 801cb4a:	f008 fabf 	bl	80250cc <itsdk_leaveCriticalSection>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_ALREADY_SET,0);
 801cb4e:	4b1e      	ldr	r3, [pc, #120]	; (801cbc8 <TimerStart+0x9c>)
 801cb50:	2100      	movs	r1, #0
 801cb52:	0018      	movs	r0, r3
 801cb54:	f006 f978 	bl	8022e48 <itsdk_error_report>
	    return;
 801cb58:	e032      	b.n	801cbc0 <TimerStart+0x94>
	}
	obj->Timestamp = obj->ReloadValue;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	685a      	ldr	r2, [r3, #4]
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	601a      	str	r2, [r3, #0]
	obj->IsStarted = true;
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	2201      	movs	r2, #1
 801cb66:	721a      	strb	r2, [r3, #8]
	obj->IsNext2Expire = false;
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	725a      	strb	r2, [r3, #9]

	if( TimerListHead == NULL ) {
 801cb6e:	4b17      	ldr	r3, [pc, #92]	; (801cbcc <TimerStart+0xa0>)
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d106      	bne.n	801cb84 <TimerStart+0x58>
		obj->Next = NULL;
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	2200      	movs	r2, #0
 801cb7a:	615a      	str	r2, [r3, #20]
		TimerListHead = obj;
 801cb7c:	4b13      	ldr	r3, [pc, #76]	; (801cbcc <TimerStart+0xa0>)
 801cb7e:	687a      	ldr	r2, [r7, #4]
 801cb80:	601a      	str	r2, [r3, #0]
 801cb82:	e003      	b.n	801cb8c <TimerStart+0x60>
	} else {
	  // obj->Timestamp += elapsedTime; Not needed
      TimerInsertTimer( obj);
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	0018      	movs	r0, r3
 801cb88:	f7ff ff50 	bl	801ca2c <TimerInsertTimer>
	}
	itsdk_timer_return_t ret = itsdk_stimer_register(
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	6858      	ldr	r0, [r3, #4]
 801cb90:	687a      	ldr	r2, [r7, #4]
 801cb92:	250f      	movs	r5, #15
 801cb94:	197c      	adds	r4, r7, r5
 801cb96:	490e      	ldr	r1, [pc, #56]	; (801cbd0 <TimerStart+0xa4>)
 801cb98:	2300      	movs	r3, #0
 801cb9a:	f007 f9e5 	bl	8023f68 <itsdk_stimer_register>
 801cb9e:	0003      	movs	r3, r0
 801cba0:	7023      	strb	r3, [r4, #0]
									obj->ReloadValue,
									TimerCallback,
									(uint32_t)obj,
									TIMER_ACCEPT_LOWPOWER
		 	 	 	 	 	   );
	if ( ret != TIMER_INIT_SUCCESS ) {
 801cba2:	197b      	adds	r3, r7, r5
 801cba4:	781b      	ldrb	r3, [r3, #0]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d008      	beq.n	801cbbc <TimerStart+0x90>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_LORAWAN_TIME_INITFLD,(uint16_t)ret);
 801cbaa:	230f      	movs	r3, #15
 801cbac:	18fb      	adds	r3, r7, r3
 801cbae:	781b      	ldrb	r3, [r3, #0]
 801cbb0:	b29b      	uxth	r3, r3
 801cbb2:	4a08      	ldr	r2, [pc, #32]	; (801cbd4 <TimerStart+0xa8>)
 801cbb4:	0019      	movs	r1, r3
 801cbb6:	0010      	movs	r0, r2
 801cbb8:	f006 f946 	bl	8022e48 <itsdk_error_report>
	}
	itsdk_leaveCriticalSection();
 801cbbc:	f008 fa86 	bl	80250cc <itsdk_leaveCriticalSection>

}
 801cbc0:	46bd      	mov	sp, r7
 801cbc2:	b004      	add	sp, #16
 801cbc4:	bdb0      	pop	{r4, r5, r7, pc}
 801cbc6:	46c0      	nop			; (mov r8, r8)
 801cbc8:	80000011 	.word	0x80000011
 801cbcc:	20001bd4 	.word	0x20001bd4
 801cbd0:	0801ca51 	.word	0x0801ca51
 801cbd4:	d0000105 	.word	0xd0000105

0801cbd8 <TimerStop>:

/**
 *
 */
void TimerStop( TimerEvent_t *obj ) 
{
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	b082      	sub	sp, #8
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	6078      	str	r0, [r7, #4]
	LOG_INFO_LORAWAN(("Sp %d ms\r\n",obj->ReloadValue));

	itsdk_enterCriticalSection();
 801cbe0:	f008 fa60 	bl	80250a4 <itsdk_enterCriticalSection>
	// do not stop a non existing
	if( ( obj == NULL ) || ( TimerExists( obj ) == false ) ) {
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d00a      	beq.n	801cc00 <TimerStop+0x28>
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	0018      	movs	r0, r3
 801cbee:	f7ff ff01 	bl	801c9f4 <TimerExists>
 801cbf2:	0003      	movs	r3, r0
 801cbf4:	001a      	movs	r2, r3
 801cbf6:	2301      	movs	r3, #1
 801cbf8:	4053      	eors	r3, r2
 801cbfa:	b2db      	uxtb	r3, r3
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d002      	beq.n	801cc06 <TimerStop+0x2e>
		itsdk_leaveCriticalSection();
 801cc00:	f008 fa64 	bl	80250cc <itsdk_leaveCriticalSection>
	    return;
 801cc04:	e012      	b.n	801cc2c <TimerStop+0x54>
	}

	if (obj->IsStarted) {
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	7a1b      	ldrb	r3, [r3, #8]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d008      	beq.n	801cc20 <TimerStop+0x48>
		itsdk_stimer_stop(
 801cc0e:	687a      	ldr	r2, [r7, #4]
 801cc10:	4b08      	ldr	r3, [pc, #32]	; (801cc34 <TimerStop+0x5c>)
 801cc12:	0011      	movs	r1, r2
 801cc14:	0018      	movs	r0, r3
 801cc16:	f007 fa15 	bl	8024044 <itsdk_stimer_stop>
							TimerCallback,
							(uint32_t)obj
						);
		obj->IsStarted = false;
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	721a      	strb	r2, [r3, #8]
	}
	removeFromList(obj);
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	0018      	movs	r0, r3
 801cc24:	f7ff febc 	bl	801c9a0 <removeFromList>
	itsdk_leaveCriticalSection();
 801cc28:	f008 fa50 	bl	80250cc <itsdk_leaveCriticalSection>
}  
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	b002      	add	sp, #8
 801cc30:	bd80      	pop	{r7, pc}
 801cc32:	46c0      	nop			; (mov r8, r8)
 801cc34:	0801ca51 	.word	0x0801ca51

0801cc38 <TimerIsStarted>:
  TimerStop( obj );
  TimerStart( obj );
}

bool TimerIsStarted( TimerEvent_t *obj )
{
 801cc38:	b580      	push	{r7, lr}
 801cc3a:	b082      	sub	sp, #8
 801cc3c:	af00      	add	r7, sp, #0
 801cc3e:	6078      	str	r0, [r7, #4]
  return obj->IsStarted;
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	7a1b      	ldrb	r3, [r3, #8]
}
 801cc44:	0018      	movs	r0, r3
 801cc46:	46bd      	mov	sp, r7
 801cc48:	b002      	add	sp, #8
 801cc4a:	bd80      	pop	{r7, pc}

0801cc4c <TimerGetCurrentTime>:




TimerTime_t TimerGetCurrentTime( void )
{
 801cc4c:	b5b0      	push	{r4, r5, r7, lr}
 801cc4e:	af00      	add	r7, sp, #0
	return (uint32_t)itsdk_time_get_ms();
 801cc50:	f007 f958 	bl	8023f04 <itsdk_time_get_ms>
 801cc54:	0003      	movs	r3, r0
 801cc56:	000c      	movs	r4, r1
}
 801cc58:	0018      	movs	r0, r3
 801cc5a:	46bd      	mov	sp, r7
 801cc5c:	bdb0      	pop	{r4, r5, r7, pc}

0801cc5e <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 801cc5e:	b580      	push	{r7, lr}
 801cc60:	b082      	sub	sp, #8
 801cc62:	af00      	add	r7, sp, #0
 801cc64:	6078      	str	r0, [r7, #4]
	return TimerGetCurrentTime() - past;
 801cc66:	f7ff fff1 	bl	801cc4c <TimerGetCurrentTime>
 801cc6a:	0002      	movs	r2, r0
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	1ad3      	subs	r3, r2, r3
}
 801cc70:	0018      	movs	r0, r3
 801cc72:	46bd      	mov	sp, r7
 801cc74:	b002      	add	sp, #8
 801cc76:	bd80      	pop	{r7, pc}

0801cc78 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801cc7c:	4b08      	ldr	r3, [pc, #32]	; (801cca0 <rand1+0x28>)
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	4a08      	ldr	r2, [pc, #32]	; (801cca4 <rand1+0x2c>)
 801cc82:	4353      	muls	r3, r2
 801cc84:	4a08      	ldr	r2, [pc, #32]	; (801cca8 <rand1+0x30>)
 801cc86:	189a      	adds	r2, r3, r2
 801cc88:	4b05      	ldr	r3, [pc, #20]	; (801cca0 <rand1+0x28>)
 801cc8a:	601a      	str	r2, [r3, #0]
 801cc8c:	4b04      	ldr	r3, [pc, #16]	; (801cca0 <rand1+0x28>)
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	4906      	ldr	r1, [pc, #24]	; (801ccac <rand1+0x34>)
 801cc92:	0018      	movs	r0, r3
 801cc94:	f7e3 fac6 	bl	8000224 <__aeabi_uidivmod>
 801cc98:	000b      	movs	r3, r1
}
 801cc9a:	0018      	movs	r0, r3
 801cc9c:	46bd      	mov	sp, r7
 801cc9e:	bd80      	pop	{r7, pc}
 801cca0:	20000024 	.word	0x20000024
 801cca4:	41c64e6d 	.word	0x41c64e6d
 801cca8:	00003039 	.word	0x00003039
 801ccac:	7fffffff 	.word	0x7fffffff

0801ccb0 <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801ccb0:	b580      	push	{r7, lr}
 801ccb2:	b082      	sub	sp, #8
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	6078      	str	r0, [r7, #4]
 801ccb8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801ccba:	f7ff ffdd 	bl	801cc78 <rand1>
 801ccbe:	683a      	ldr	r2, [r7, #0]
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	1ad3      	subs	r3, r2, r3
 801ccc4:	3301      	adds	r3, #1
 801ccc6:	0019      	movs	r1, r3
 801ccc8:	f7e3 fb96 	bl	80003f8 <__aeabi_idivmod>
 801cccc:	000b      	movs	r3, r1
 801ccce:	001a      	movs	r2, r3
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	18d3      	adds	r3, r2, r3
}
 801ccd4:	0018      	movs	r0, r3
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	b002      	add	sp, #8
 801ccda:	bd80      	pop	{r7, pc}

0801ccdc <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	b084      	sub	sp, #16
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	60f8      	str	r0, [r7, #12]
 801cce4:	60b9      	str	r1, [r7, #8]
 801cce6:	1dbb      	adds	r3, r7, #6
 801cce8:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801ccea:	e007      	b.n	801ccfc <memcpy1+0x20>
    {
        *dst++ = *src++;
 801ccec:	68ba      	ldr	r2, [r7, #8]
 801ccee:	1c53      	adds	r3, r2, #1
 801ccf0:	60bb      	str	r3, [r7, #8]
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	1c59      	adds	r1, r3, #1
 801ccf6:	60f9      	str	r1, [r7, #12]
 801ccf8:	7812      	ldrb	r2, [r2, #0]
 801ccfa:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801ccfc:	1dbb      	adds	r3, r7, #6
 801ccfe:	881b      	ldrh	r3, [r3, #0]
 801cd00:	1dba      	adds	r2, r7, #6
 801cd02:	1e59      	subs	r1, r3, #1
 801cd04:	8011      	strh	r1, [r2, #0]
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d1f0      	bne.n	801ccec <memcpy1+0x10>
    }
}
 801cd0a:	46c0      	nop			; (mov r8, r8)
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	b004      	add	sp, #16
 801cd10:	bd80      	pop	{r7, pc}

0801cd12 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801cd12:	b580      	push	{r7, lr}
 801cd14:	b084      	sub	sp, #16
 801cd16:	af00      	add	r7, sp, #0
 801cd18:	60f8      	str	r0, [r7, #12]
 801cd1a:	60b9      	str	r1, [r7, #8]
 801cd1c:	1dbb      	adds	r3, r7, #6
 801cd1e:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 801cd20:	1dbb      	adds	r3, r7, #6
 801cd22:	881b      	ldrh	r3, [r3, #0]
 801cd24:	3b01      	subs	r3, #1
 801cd26:	68fa      	ldr	r2, [r7, #12]
 801cd28:	18d3      	adds	r3, r2, r3
 801cd2a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801cd2c:	e007      	b.n	801cd3e <memcpyr+0x2c>
    {
        *dst-- = *src++;
 801cd2e:	68ba      	ldr	r2, [r7, #8]
 801cd30:	1c53      	adds	r3, r2, #1
 801cd32:	60bb      	str	r3, [r7, #8]
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	1e59      	subs	r1, r3, #1
 801cd38:	60f9      	str	r1, [r7, #12]
 801cd3a:	7812      	ldrb	r2, [r2, #0]
 801cd3c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801cd3e:	1dbb      	adds	r3, r7, #6
 801cd40:	881b      	ldrh	r3, [r3, #0]
 801cd42:	1dba      	adds	r2, r7, #6
 801cd44:	1e59      	subs	r1, r3, #1
 801cd46:	8011      	strh	r1, [r2, #0]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d1f0      	bne.n	801cd2e <memcpyr+0x1c>
    }
}
 801cd4c:	46c0      	nop			; (mov r8, r8)
 801cd4e:	46bd      	mov	sp, r7
 801cd50:	b004      	add	sp, #16
 801cd52:	bd80      	pop	{r7, pc}

0801cd54 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801cd54:	b580      	push	{r7, lr}
 801cd56:	b082      	sub	sp, #8
 801cd58:	af00      	add	r7, sp, #0
 801cd5a:	6078      	str	r0, [r7, #4]
 801cd5c:	0008      	movs	r0, r1
 801cd5e:	0011      	movs	r1, r2
 801cd60:	1cfb      	adds	r3, r7, #3
 801cd62:	1c02      	adds	r2, r0, #0
 801cd64:	701a      	strb	r2, [r3, #0]
 801cd66:	003b      	movs	r3, r7
 801cd68:	1c0a      	adds	r2, r1, #0
 801cd6a:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801cd6c:	e005      	b.n	801cd7a <memset1+0x26>
    {
        *dst++ = value;
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	1c5a      	adds	r2, r3, #1
 801cd72:	607a      	str	r2, [r7, #4]
 801cd74:	1cfa      	adds	r2, r7, #3
 801cd76:	7812      	ldrb	r2, [r2, #0]
 801cd78:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801cd7a:	003b      	movs	r3, r7
 801cd7c:	881b      	ldrh	r3, [r3, #0]
 801cd7e:	003a      	movs	r2, r7
 801cd80:	1e59      	subs	r1, r3, #1
 801cd82:	8011      	strh	r1, [r2, #0]
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d1f2      	bne.n	801cd6e <memset1+0x1a>
    }
}
 801cd88:	46c0      	nop			; (mov r8, r8)
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	b002      	add	sp, #8
 801cd8e:	bd80      	pop	{r7, pc}

0801cd90 <SX1276InitLowPower>:

/**
 * Init the SX1276 device and switch it to low power.
 * This allows to have a basic init before executing the full radio init
 */
void SX1276InitLowPower( void ) {
 801cd90:	b580      	push	{r7, lr}
 801cd92:	af00      	add	r7, sp, #0

    LOG_INFO_SX1276((">> mSX1276InitLowPower\r\n"));

	gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 801cd94:	2380      	movs	r3, #128	; 0x80
 801cd96:	015b      	lsls	r3, r3, #5
 801cd98:	2200      	movs	r2, #0
 801cd9a:	0019      	movs	r1, r3
 801cd9c:	2000      	movs	r0, #0
 801cd9e:	f007 fdf7 	bl	8024990 <gpio_configure>
    TCXO_ON();
 801cda2:	2380      	movs	r3, #128	; 0x80
 801cda4:	015b      	lsls	r3, r3, #5
 801cda6:	0019      	movs	r1, r3
 801cda8:	2000      	movs	r0, #0
 801cdaa:	f007 fff9 	bl	8024da0 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_WAKEUP_TIME);
 801cdae:	2035      	movs	r0, #53	; 0x35
 801cdb0:	f008 f952 	bl	8025058 <itsdk_delayMs>
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 801cdb4:	220e      	movs	r2, #14
 801cdb6:	2110      	movs	r1, #16
 801cdb8:	2001      	movs	r0, #1
 801cdba:	f007 fde9 	bl	8024990 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801cdbe:	220e      	movs	r2, #14
 801cdc0:	2102      	movs	r1, #2
 801cdc2:	2001      	movs	r0, #1
 801cdc4:	f007 fde4 	bl	8024990 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 801cdc8:	220e      	movs	r2, #14
 801cdca:	2101      	movs	r1, #1
 801cdcc:	2001      	movs	r0, #1
 801cdce:	f007 fddf 	bl	8024990 <gpio_configure>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 801cdd2:	2380      	movs	r3, #128	; 0x80
 801cdd4:	019b      	lsls	r3, r3, #6
 801cdd6:	220e      	movs	r2, #14
 801cdd8:	0019      	movs	r1, r3
 801cdda:	2002      	movs	r0, #2
 801cddc:	f007 fdd8 	bl	8024990 <gpio_configure>
		if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
			gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
		}
	#endif

 	gpio_configure(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN, GPIO_OUTPUT_PULLUP );
 801cde0:	2380      	movs	r3, #128	; 0x80
 801cde2:	021b      	lsls	r3, r3, #8
 801cde4:	2201      	movs	r2, #1
 801cde6:	0019      	movs	r1, r3
 801cde8:	2000      	movs	r0, #0
 801cdea:	f007 fdd1 	bl	8024990 <gpio_configure>
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801cdee:	2380      	movs	r3, #128	; 0x80
 801cdf0:	021b      	lsls	r3, r3, #8
 801cdf2:	0019      	movs	r1, r3
 801cdf4:	2000      	movs	r0, #0
 801cdf6:	f007 ffd3 	bl	8024da0 <gpio_set>
	SX1276Reset();
 801cdfa:	f001 fead 	bl	801eb58 <SX1276Reset>
	SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | RF_OPMODE_SLEEP  );	// SLEEP mode is 1uA when Standby Mode is 1,6mA
 801cdfe:	2001      	movs	r0, #1
 801ce00:	f001 ff80 	bl	801ed04 <SX1276Read>
 801ce04:	0003      	movs	r3, r0
 801ce06:	001a      	movs	r2, r3
 801ce08:	2307      	movs	r3, #7
 801ce0a:	439a      	bics	r2, r3
 801ce0c:	0013      	movs	r3, r2
 801ce0e:	b2db      	uxtb	r3, r3
 801ce10:	0019      	movs	r1, r3
 801ce12:	2001      	movs	r0, #1
 801ce14:	f001 ff62 	bl	801ecdc <SX1276Write>
	SX1276SetAntSwLowPower(true);
 801ce18:	2001      	movs	r0, #1
 801ce1a:	f000 f9fc 	bl	801d216 <SX1276SetAntSwLowPower>
	itsdk_delayMs(10);
 801ce1e:	200a      	movs	r0, #10
 801ce20:	f008 f91a 	bl	8025058 <itsdk_delayMs>
	TCXO_OFF();
 801ce24:	2380      	movs	r3, #128	; 0x80
 801ce26:	015b      	lsls	r3, r3, #5
 801ce28:	0019      	movs	r1, r3
 801ce2a:	2000      	movs	r0, #0
 801ce2c:	f007 ffd0 	bl	8024dd0 <gpio_reset>

}
 801ce30:	46c0      	nop			; (mov r8, r8)
 801ce32:	46bd      	mov	sp, r7
 801ce34:	bd80      	pop	{r7, pc}

0801ce36 <SX1276GetWakeTime>:


uint32_t SX1276GetWakeTime( void )
{
 801ce36:	b580      	push	{r7, lr}
 801ce38:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276GetWakeTime\r\n"));
  return  0;
 801ce3a:	2300      	movs	r3, #0
}
 801ce3c:	0018      	movs	r0, r3
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	bd80      	pop	{r7, pc}

0801ce42 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 801ce42:	b580      	push	{r7, lr}
 801ce44:	b082      	sub	sp, #8
 801ce46:	af00      	add	r7, sp, #0
 801ce48:	0002      	movs	r2, r0
 801ce4a:	1dfb      	adds	r3, r7, #7
 801ce4c:	701a      	strb	r2, [r3, #0]
  LOG_INFO_SX1276((">> mSX1276SetXO (%s)\r\n",((state==SET)?"ON":"OFF")));

  if (state == SET )
 801ce4e:	1dfb      	adds	r3, r7, #7
 801ce50:	781b      	ldrb	r3, [r3, #0]
 801ce52:	2b01      	cmp	r3, #1
 801ce54:	d109      	bne.n	801ce6a <SX1276SetXO+0x28>
  {
    TCXO_ON(); 
 801ce56:	2380      	movs	r3, #128	; 0x80
 801ce58:	015b      	lsls	r3, r3, #5
 801ce5a:	0019      	movs	r1, r3
 801ce5c:	2000      	movs	r0, #0
 801ce5e:	f007 ff9f 	bl	8024da0 <gpio_set>
    itsdk_delayMs(ITSDK_MURATA_TCXO_WARMUP);
 801ce62:	2032      	movs	r0, #50	; 0x32
 801ce64:	f008 f8f8 	bl	8025058 <itsdk_delayMs>
  else
  {
	itsdk_delayMs(10);
    TCXO_OFF(); 
  }
}
 801ce68:	e008      	b.n	801ce7c <SX1276SetXO+0x3a>
	itsdk_delayMs(10);
 801ce6a:	200a      	movs	r0, #10
 801ce6c:	f008 f8f4 	bl	8025058 <itsdk_delayMs>
    TCXO_OFF(); 
 801ce70:	2380      	movs	r3, #128	; 0x80
 801ce72:	015b      	lsls	r3, r3, #5
 801ce74:	0019      	movs	r1, r3
 801ce76:	2000      	movs	r0, #0
 801ce78:	f007 ffaa 	bl	8024dd0 <gpio_reset>
}
 801ce7c:	46c0      	nop			; (mov r8, r8)
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	b002      	add	sp, #8
 801ce82:	bd80      	pop	{r7, pc}

0801ce84 <SX1276IoInit>:
 * --
 * Ensure the IRQ are configured later by calling SX1276IoIrqInit or equivalent.
 * For sigfox STLL_Radio_IoInit does the job.
 */
void SX1276IoInit( void )
{
 801ce84:	b580      	push	{r7, lr}
 801ce86:	af00      	add	r7, sp, #0
  LOG_INFO_SX1276((">> mSX1276IoInit\r\n"));

  SX1276BoardInit( &BoardCallbacks );
 801ce88:	4b11      	ldr	r3, [pc, #68]	; (801ced0 <SX1276IoInit+0x4c>)
 801ce8a:	0018      	movs	r0, r3
 801ce8c:	f000 fa48 	bl	801d320 <SX1276BoardInit>
  if ( ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 801ce90:	220e      	movs	r2, #14
 801ce92:	2110      	movs	r1, #16
 801ce94:	2001      	movs	r0, #1
 801ce96:	f007 fd7b 	bl	8024990 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801ce9a:	220e      	movs	r2, #14
 801ce9c:	2102      	movs	r1, #2
 801ce9e:	2001      	movs	r0, #1
 801cea0:	f007 fd76 	bl	8024990 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 801cea4:	220e      	movs	r2, #14
 801cea6:	2101      	movs	r1, #1
 801cea8:	2001      	movs	r0, #1
 801ceaa:	f007 fd71 	bl	8024990 <gpio_configure>
  }
  if ( ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 801ceae:	2380      	movs	r3, #128	; 0x80
 801ceb0:	019b      	lsls	r3, r3, #6
 801ceb2:	220e      	movs	r2, #14
 801ceb4:	0019      	movs	r1, r3
 801ceb6:	2002      	movs	r0, #2
 801ceb8:	f007 fd6a 	bl	8024990 <gpio_configure>
#ifdef RADIO_DIO_5
  if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
     gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
  }
#endif
  gpio_configure(ITSDK_SX1276_TCXO_VCC_BANK, ITSDK_SX1276_TCXO_VCC_PIN, GPIO_OUTPUT_PP );
 801cebc:	2380      	movs	r3, #128	; 0x80
 801cebe:	015b      	lsls	r3, r3, #5
 801cec0:	2200      	movs	r2, #0
 801cec2:	0019      	movs	r1, r3
 801cec4:	2000      	movs	r0, #0
 801cec6:	f007 fd63 	bl	8024990 <gpio_configure>

}
 801ceca:	46c0      	nop			; (mov r8, r8)
 801cecc:	46bd      	mov	sp, r7
 801cece:	bd80      	pop	{r7, pc}
 801ced0:	20000028 	.word	0x20000028

0801ced4 <SX1276IoIrqInit>:


gpio_irq_chain_t __sx1276_gpio_irq[6] = { 0 };
void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 801ced4:	b580      	push	{r7, lr}
 801ced6:	b082      	sub	sp, #8
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276IoIrqInit\r\n"));


	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 801cedc:	2110      	movs	r1, #16
 801cede:	2001      	movs	r0, #1
 801cee0:	f007 ffda 	bl	8024e98 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_INTERRUPT_RISING );
 801cee4:	2207      	movs	r2, #7
 801cee6:	2110      	movs	r1, #16
 801cee8:	2001      	movs	r0, #1
 801ceea:	f007 fd51 	bl	8024990 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,IRQ_HIGH_PRIORITY,0);
 801ceee:	2300      	movs	r3, #0
 801cef0:	2200      	movs	r2, #0
 801cef2:	2110      	movs	r1, #16
 801cef4:	2001      	movs	r0, #1
 801cef6:	f007 ffa7 	bl	8024e48 <gpio_interruptPriority>
		__sx1276_gpio_irq[0].irq_func = (void (*)(uint16_t))irqHandlers[0];
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	681a      	ldr	r2, [r3, #0]
 801cefe:	4b39      	ldr	r3, [pc, #228]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cf00:	601a      	str	r2, [r3, #0]
		__sx1276_gpio_irq[0].pinMask = ITSDK_SX1276_DIO_0_PIN;
 801cf02:	4b38      	ldr	r3, [pc, #224]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cf04:	2210      	movs	r2, #16
 801cf06:	809a      	strh	r2, [r3, #4]
		gpio_registerIrqAction(&__sx1276_gpio_irq[0]);
 801cf08:	4b36      	ldr	r3, [pc, #216]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cf0a:	0018      	movs	r0, r3
 801cf0c:	f008 f81c 	bl	8024f48 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 801cf10:	2110      	movs	r1, #16
 801cf12:	2001      	movs	r0, #1
 801cf14:	f007 ff74 	bl	8024e00 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 801cf18:	2102      	movs	r1, #2
 801cf1a:	2001      	movs	r0, #1
 801cf1c:	f007 ffbc 	bl	8024e98 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_INTERRUPT_RISING );
 801cf20:	2207      	movs	r2, #7
 801cf22:	2102      	movs	r1, #2
 801cf24:	2001      	movs	r0, #1
 801cf26:	f007 fd33 	bl	8024990 <gpio_configure>
  	    gpio_interruptPriority(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,IRQ_HIGH_PRIORITY,0);
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	2200      	movs	r2, #0
 801cf2e:	2102      	movs	r1, #2
 801cf30:	2001      	movs	r0, #1
 801cf32:	f007 ff89 	bl	8024e48 <gpio_interruptPriority>
		__sx1276_gpio_irq[1].irq_func = (void (*)(uint16_t))irqHandlers[1];
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	685a      	ldr	r2, [r3, #4]
 801cf3a:	4b2a      	ldr	r3, [pc, #168]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cf3c:	60da      	str	r2, [r3, #12]
		__sx1276_gpio_irq[1].pinMask = ITSDK_SX1276_DIO_1_PIN;
 801cf3e:	4b29      	ldr	r3, [pc, #164]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cf40:	2202      	movs	r2, #2
 801cf42:	821a      	strh	r2, [r3, #16]
		gpio_registerIrqAction(&__sx1276_gpio_irq[1]);
 801cf44:	4b28      	ldr	r3, [pc, #160]	; (801cfe8 <SX1276IoIrqInit+0x114>)
 801cf46:	0018      	movs	r0, r3
 801cf48:	f007 fffe 	bl	8024f48 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 801cf4c:	2102      	movs	r1, #2
 801cf4e:	2001      	movs	r0, #1
 801cf50:	f007 ff56 	bl	8024e00 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 801cf54:	2101      	movs	r1, #1
 801cf56:	2001      	movs	r0, #1
 801cf58:	f007 ff9e 	bl	8024e98 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_INTERRUPT_RISING );
 801cf5c:	2207      	movs	r2, #7
 801cf5e:	2101      	movs	r1, #1
 801cf60:	2001      	movs	r0, #1
 801cf62:	f007 fd15 	bl	8024990 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,IRQ_HIGH_PRIORITY,0);
 801cf66:	2300      	movs	r3, #0
 801cf68:	2200      	movs	r2, #0
 801cf6a:	2101      	movs	r1, #1
 801cf6c:	2001      	movs	r0, #1
 801cf6e:	f007 ff6b 	bl	8024e48 <gpio_interruptPriority>
		__sx1276_gpio_irq[2].irq_func = (void (*)(uint16_t))irqHandlers[2];
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	689a      	ldr	r2, [r3, #8]
 801cf76:	4b1b      	ldr	r3, [pc, #108]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cf78:	619a      	str	r2, [r3, #24]
		__sx1276_gpio_irq[2].pinMask = ITSDK_SX1276_DIO_2_PIN;
 801cf7a:	4b1a      	ldr	r3, [pc, #104]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cf7c:	2201      	movs	r2, #1
 801cf7e:	839a      	strh	r2, [r3, #28]
		gpio_registerIrqAction(&__sx1276_gpio_irq[2]);
 801cf80:	4b1a      	ldr	r3, [pc, #104]	; (801cfec <SX1276IoIrqInit+0x118>)
 801cf82:	0018      	movs	r0, r3
 801cf84:	f007 ffe0 	bl	8024f48 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 801cf88:	2101      	movs	r1, #1
 801cf8a:	2001      	movs	r0, #1
 801cf8c:	f007 ff38 	bl	8024e00 <gpio_interruptEnable>
	}

	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 801cf90:	2380      	movs	r3, #128	; 0x80
 801cf92:	019b      	lsls	r3, r3, #6
 801cf94:	0019      	movs	r1, r3
 801cf96:	2002      	movs	r0, #2
 801cf98:	f007 ff7e 	bl	8024e98 <gpio_interruptClear>
	    gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_INTERRUPT_RISING );
 801cf9c:	2380      	movs	r3, #128	; 0x80
 801cf9e:	019b      	lsls	r3, r3, #6
 801cfa0:	2207      	movs	r2, #7
 801cfa2:	0019      	movs	r1, r3
 801cfa4:	2002      	movs	r0, #2
 801cfa6:	f007 fcf3 	bl	8024990 <gpio_configure>
		gpio_interruptPriority(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,IRQ_HIGH_PRIORITY,0);
 801cfaa:	2380      	movs	r3, #128	; 0x80
 801cfac:	0199      	lsls	r1, r3, #6
 801cfae:	2300      	movs	r3, #0
 801cfb0:	2200      	movs	r2, #0
 801cfb2:	2002      	movs	r0, #2
 801cfb4:	f007 ff48 	bl	8024e48 <gpio_interruptPriority>
		__sx1276_gpio_irq[3].irq_func = (void (*)(uint16_t))irqHandlers[3];
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	68da      	ldr	r2, [r3, #12]
 801cfbc:	4b09      	ldr	r3, [pc, #36]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cfbe:	625a      	str	r2, [r3, #36]	; 0x24
		__sx1276_gpio_irq[3].pinMask = ITSDK_SX1276_DIO_3_PIN;
 801cfc0:	4b08      	ldr	r3, [pc, #32]	; (801cfe4 <SX1276IoIrqInit+0x110>)
 801cfc2:	2280      	movs	r2, #128	; 0x80
 801cfc4:	0192      	lsls	r2, r2, #6
 801cfc6:	851a      	strh	r2, [r3, #40]	; 0x28
		gpio_registerIrqAction(&__sx1276_gpio_irq[3]);
 801cfc8:	4b09      	ldr	r3, [pc, #36]	; (801cff0 <SX1276IoIrqInit+0x11c>)
 801cfca:	0018      	movs	r0, r3
 801cfcc:	f007 ffbc 	bl	8024f48 <gpio_registerIrqAction>
		gpio_interruptEnable(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 801cfd0:	2380      	movs	r3, #128	; 0x80
 801cfd2:	019b      	lsls	r3, r3, #6
 801cfd4:	0019      	movs	r1, r3
 801cfd6:	2002      	movs	r0, #2
 801cfd8:	f007 ff12 	bl	8024e00 <gpio_interruptEnable>
    if ( ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
        gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_INTERRUPT_RISING );
    }
#endif

}
 801cfdc:	46c0      	nop			; (mov r8, r8)
 801cfde:	46bd      	mov	sp, r7
 801cfe0:	b002      	add	sp, #8
 801cfe2:	bd80      	pop	{r7, pc}
 801cfe4:	20001bd8 	.word	0x20001bd8
 801cfe8:	20001be4 	.word	0x20001be4
 801cfec:	20001bf0 	.word	0x20001bf0
 801cff0:	20001bfc 	.word	0x20001bfc

0801cff4 <SX1276IoDeInit>:



void SX1276IoDeInit( void )
{
 801cff4:	b580      	push	{r7, lr}
 801cff6:	af00      	add	r7, sp, #0

  LOG_INFO_SX1276((">> mSX1276IoDeInit\r\n"));
	if (ITSDK_SX1276_DIO_0_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN, GPIO_ANALOG );
 801cff8:	220e      	movs	r2, #14
 801cffa:	2110      	movs	r1, #16
 801cffc:	2001      	movs	r0, #1
 801cffe:	f007 fcc7 	bl	8024990 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_0_BANK, ITSDK_SX1276_DIO_0_PIN);
 801d002:	2110      	movs	r1, #16
 801d004:	2001      	movs	r0, #1
 801d006:	f007 ff47 	bl	8024e98 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_1_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN, GPIO_ANALOG );
 801d00a:	220e      	movs	r2, #14
 801d00c:	2102      	movs	r1, #2
 801d00e:	2001      	movs	r0, #1
 801d010:	f007 fcbe 	bl	8024990 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_1_BANK, ITSDK_SX1276_DIO_1_PIN);
 801d014:	2102      	movs	r1, #2
 801d016:	2001      	movs	r0, #1
 801d018:	f007 ff3e 	bl	8024e98 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_2_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN, GPIO_ANALOG );
 801d01c:	220e      	movs	r2, #14
 801d01e:	2101      	movs	r1, #1
 801d020:	2001      	movs	r0, #1
 801d022:	f007 fcb5 	bl	8024990 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_2_BANK, ITSDK_SX1276_DIO_2_PIN);
 801d026:	2101      	movs	r1, #1
 801d028:	2001      	movs	r0, #1
 801d02a:	f007 ff35 	bl	8024e98 <gpio_interruptClear>
	}
	if (ITSDK_SX1276_DIO_3_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN, GPIO_ANALOG );
 801d02e:	2380      	movs	r3, #128	; 0x80
 801d030:	019b      	lsls	r3, r3, #6
 801d032:	220e      	movs	r2, #14
 801d034:	0019      	movs	r1, r3
 801d036:	2002      	movs	r0, #2
 801d038:	f007 fcaa 	bl	8024990 <gpio_configure>
	    gpio_interruptClear(ITSDK_SX1276_DIO_3_BANK, ITSDK_SX1276_DIO_3_PIN);
 801d03c:	2380      	movs	r3, #128	; 0x80
 801d03e:	019b      	lsls	r3, r3, #6
 801d040:	0019      	movs	r1, r3
 801d042:	2002      	movs	r0, #2
 801d044:	f007 ff28 	bl	8024e98 <gpio_interruptClear>
	if (ITSDK_SX1276_DIO_5_PIN != __LP_GPIO_NONE ) {
		gpio_configure(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN, GPIO_ANALOG );
	    gpio_interruptClear(ITSDK_SX1276_DIO_5_BANK, ITSDK_SX1276_DIO_5_PIN);
	}
#endif
}
 801d048:	46c0      	nop			; (mov r8, r8)
 801d04a:	46bd      	mov	sp, r7
 801d04c:	bd80      	pop	{r7, pc}

0801d04e <SX1276SetRfTxPower>:


void SX1276SetRfTxPower( int8_t power )
{
 801d04e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d050:	b085      	sub	sp, #20
 801d052:	af00      	add	r7, sp, #0
 801d054:	0002      	movs	r2, r0
 801d056:	1dfb      	adds	r3, r7, #7
 801d058:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetRfTxPower (%d)\r\n",power));

    uint8_t paConfig = 0;
 801d05a:	250f      	movs	r5, #15
 801d05c:	197b      	adds	r3, r7, r5
 801d05e:	2200      	movs	r2, #0
 801d060:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801d062:	260e      	movs	r6, #14
 801d064:	19bb      	adds	r3, r7, r6
 801d066:	2200      	movs	r2, #0
 801d068:	701a      	strb	r2, [r3, #0]
	#ifdef ITSDK_RADIO_POWER_OFFSET
    power += ITSDK_RADIO_POWER_OFFSET;
	#endif


    paConfig = SX1276Read( REG_PACONFIG );
 801d06a:	197c      	adds	r4, r7, r5
 801d06c:	2009      	movs	r0, #9
 801d06e:	f001 fe49 	bl	801ed04 <SX1276Read>
 801d072:	0003      	movs	r3, r0
 801d074:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801d076:	19bc      	adds	r4, r7, r6
 801d078:	204d      	movs	r0, #77	; 0x4d
 801d07a:	f001 fe43 	bl	801ed04 <SX1276Read>
 801d07e:	0003      	movs	r3, r0
 801d080:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 801d082:	197b      	adds	r3, r7, r5
 801d084:	781b      	ldrb	r3, [r3, #0]
 801d086:	b25b      	sxtb	r3, r3
 801d088:	227f      	movs	r2, #127	; 0x7f
 801d08a:	4013      	ands	r3, r2
 801d08c:	b25c      	sxtb	r4, r3
 801d08e:	1dfb      	adds	r3, r7, #7
 801d090:	781b      	ldrb	r3, [r3, #0]
 801d092:	0018      	movs	r0, r3
 801d094:	f000 f8ae 	bl	801d1f4 <SX1276GetPaSelect>
 801d098:	0003      	movs	r3, r0
 801d09a:	b25b      	sxtb	r3, r3
 801d09c:	4323      	orrs	r3, r4
 801d09e:	b25a      	sxtb	r2, r3
 801d0a0:	197b      	adds	r3, r7, r5
 801d0a2:	701a      	strb	r2, [r3, #0]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 801d0a4:	197b      	adds	r3, r7, r5
 801d0a6:	197a      	adds	r2, r7, r5
 801d0a8:	7812      	ldrb	r2, [r2, #0]
 801d0aa:	2170      	movs	r1, #112	; 0x70
 801d0ac:	430a      	orrs	r2, r1
 801d0ae:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801d0b0:	197b      	adds	r3, r7, r5
 801d0b2:	781b      	ldrb	r3, [r3, #0]
 801d0b4:	b25b      	sxtb	r3, r3
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	da67      	bge.n	801d18a <SX1276SetRfTxPower+0x13c>
    {
        if( power > 17 )
 801d0ba:	1dfb      	adds	r3, r7, #7
 801d0bc:	781b      	ldrb	r3, [r3, #0]
 801d0be:	b25b      	sxtb	r3, r3
 801d0c0:	2b11      	cmp	r3, #17
 801d0c2:	dd07      	ble.n	801d0d4 <SX1276SetRfTxPower+0x86>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801d0c4:	220e      	movs	r2, #14
 801d0c6:	18bb      	adds	r3, r7, r2
 801d0c8:	18ba      	adds	r2, r7, r2
 801d0ca:	7812      	ldrb	r2, [r2, #0]
 801d0cc:	2107      	movs	r1, #7
 801d0ce:	430a      	orrs	r2, r1
 801d0d0:	701a      	strb	r2, [r3, #0]
 801d0d2:	e00b      	b.n	801d0ec <SX1276SetRfTxPower+0x9e>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801d0d4:	210e      	movs	r1, #14
 801d0d6:	187b      	adds	r3, r7, r1
 801d0d8:	781b      	ldrb	r3, [r3, #0]
 801d0da:	b25b      	sxtb	r3, r3
 801d0dc:	2207      	movs	r2, #7
 801d0de:	4393      	bics	r3, r2
 801d0e0:	b25b      	sxtb	r3, r3
 801d0e2:	2204      	movs	r2, #4
 801d0e4:	4313      	orrs	r3, r2
 801d0e6:	b25a      	sxtb	r2, r3
 801d0e8:	187b      	adds	r3, r7, r1
 801d0ea:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801d0ec:	230e      	movs	r3, #14
 801d0ee:	18fb      	adds	r3, r7, r3
 801d0f0:	781b      	ldrb	r3, [r3, #0]
 801d0f2:	2207      	movs	r2, #7
 801d0f4:	4013      	ands	r3, r2
 801d0f6:	2b07      	cmp	r3, #7
 801d0f8:	d123      	bne.n	801d142 <SX1276SetRfTxPower+0xf4>
        {
            if( power < 5 )
 801d0fa:	1dfb      	adds	r3, r7, #7
 801d0fc:	781b      	ldrb	r3, [r3, #0]
 801d0fe:	b25b      	sxtb	r3, r3
 801d100:	2b04      	cmp	r3, #4
 801d102:	dc02      	bgt.n	801d10a <SX1276SetRfTxPower+0xbc>
            {
                power = 5;
 801d104:	1dfb      	adds	r3, r7, #7
 801d106:	2205      	movs	r2, #5
 801d108:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801d10a:	1dfb      	adds	r3, r7, #7
 801d10c:	781b      	ldrb	r3, [r3, #0]
 801d10e:	b25b      	sxtb	r3, r3
 801d110:	2b14      	cmp	r3, #20
 801d112:	dd02      	ble.n	801d11a <SX1276SetRfTxPower+0xcc>
            {
                power = 20;
 801d114:	1dfb      	adds	r3, r7, #7
 801d116:	2214      	movs	r2, #20
 801d118:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801d11a:	200f      	movs	r0, #15
 801d11c:	183b      	adds	r3, r7, r0
 801d11e:	781b      	ldrb	r3, [r3, #0]
 801d120:	b25b      	sxtb	r3, r3
 801d122:	220f      	movs	r2, #15
 801d124:	4393      	bics	r3, r2
 801d126:	b25a      	sxtb	r2, r3
 801d128:	1dfb      	adds	r3, r7, #7
 801d12a:	781b      	ldrb	r3, [r3, #0]
 801d12c:	3b05      	subs	r3, #5
 801d12e:	b2db      	uxtb	r3, r3
 801d130:	b25b      	sxtb	r3, r3
 801d132:	210f      	movs	r1, #15
 801d134:	400b      	ands	r3, r1
 801d136:	b25b      	sxtb	r3, r3
 801d138:	4313      	orrs	r3, r2
 801d13a:	b25a      	sxtb	r2, r3
 801d13c:	183b      	adds	r3, r7, r0
 801d13e:	701a      	strb	r2, [r3, #0]
 801d140:	e046      	b.n	801d1d0 <SX1276SetRfTxPower+0x182>
        }
        else
        {
            if( power < 2 )
 801d142:	1dfb      	adds	r3, r7, #7
 801d144:	781b      	ldrb	r3, [r3, #0]
 801d146:	b25b      	sxtb	r3, r3
 801d148:	2b01      	cmp	r3, #1
 801d14a:	dc02      	bgt.n	801d152 <SX1276SetRfTxPower+0x104>
            {
                power = 2;
 801d14c:	1dfb      	adds	r3, r7, #7
 801d14e:	2202      	movs	r2, #2
 801d150:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801d152:	1dfb      	adds	r3, r7, #7
 801d154:	781b      	ldrb	r3, [r3, #0]
 801d156:	b25b      	sxtb	r3, r3
 801d158:	2b11      	cmp	r3, #17
 801d15a:	dd02      	ble.n	801d162 <SX1276SetRfTxPower+0x114>
            {
                power = 17;
 801d15c:	1dfb      	adds	r3, r7, #7
 801d15e:	2211      	movs	r2, #17
 801d160:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801d162:	200f      	movs	r0, #15
 801d164:	183b      	adds	r3, r7, r0
 801d166:	781b      	ldrb	r3, [r3, #0]
 801d168:	b25b      	sxtb	r3, r3
 801d16a:	220f      	movs	r2, #15
 801d16c:	4393      	bics	r3, r2
 801d16e:	b25a      	sxtb	r2, r3
 801d170:	1dfb      	adds	r3, r7, #7
 801d172:	781b      	ldrb	r3, [r3, #0]
 801d174:	3b02      	subs	r3, #2
 801d176:	b2db      	uxtb	r3, r3
 801d178:	b25b      	sxtb	r3, r3
 801d17a:	210f      	movs	r1, #15
 801d17c:	400b      	ands	r3, r1
 801d17e:	b25b      	sxtb	r3, r3
 801d180:	4313      	orrs	r3, r2
 801d182:	b25a      	sxtb	r2, r3
 801d184:	183b      	adds	r3, r7, r0
 801d186:	701a      	strb	r2, [r3, #0]
 801d188:	e022      	b.n	801d1d0 <SX1276SetRfTxPower+0x182>
        }
    }
    else
    {
        if( power < -1 )
 801d18a:	1dfb      	adds	r3, r7, #7
 801d18c:	781b      	ldrb	r3, [r3, #0]
 801d18e:	b25b      	sxtb	r3, r3
 801d190:	3301      	adds	r3, #1
 801d192:	da02      	bge.n	801d19a <SX1276SetRfTxPower+0x14c>
        {
            power = -1;
 801d194:	1dfb      	adds	r3, r7, #7
 801d196:	22ff      	movs	r2, #255	; 0xff
 801d198:	701a      	strb	r2, [r3, #0]
        }
        if( power > 14 )
 801d19a:	1dfb      	adds	r3, r7, #7
 801d19c:	781b      	ldrb	r3, [r3, #0]
 801d19e:	b25b      	sxtb	r3, r3
 801d1a0:	2b0e      	cmp	r3, #14
 801d1a2:	dd02      	ble.n	801d1aa <SX1276SetRfTxPower+0x15c>
        {
            power = 14;
 801d1a4:	1dfb      	adds	r3, r7, #7
 801d1a6:	220e      	movs	r2, #14
 801d1a8:	701a      	strb	r2, [r3, #0]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 801d1aa:	200f      	movs	r0, #15
 801d1ac:	183b      	adds	r3, r7, r0
 801d1ae:	781b      	ldrb	r3, [r3, #0]
 801d1b0:	b25b      	sxtb	r3, r3
 801d1b2:	220f      	movs	r2, #15
 801d1b4:	4393      	bics	r3, r2
 801d1b6:	b25a      	sxtb	r2, r3
 801d1b8:	1dfb      	adds	r3, r7, #7
 801d1ba:	781b      	ldrb	r3, [r3, #0]
 801d1bc:	3301      	adds	r3, #1
 801d1be:	b2db      	uxtb	r3, r3
 801d1c0:	b25b      	sxtb	r3, r3
 801d1c2:	210f      	movs	r1, #15
 801d1c4:	400b      	ands	r3, r1
 801d1c6:	b25b      	sxtb	r3, r3
 801d1c8:	4313      	orrs	r3, r2
 801d1ca:	b25a      	sxtb	r2, r3
 801d1cc:	183b      	adds	r3, r7, r0
 801d1ce:	701a      	strb	r2, [r3, #0]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801d1d0:	230f      	movs	r3, #15
 801d1d2:	18fb      	adds	r3, r7, r3
 801d1d4:	781b      	ldrb	r3, [r3, #0]
 801d1d6:	0019      	movs	r1, r3
 801d1d8:	2009      	movs	r0, #9
 801d1da:	f001 fd7f 	bl	801ecdc <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801d1de:	230e      	movs	r3, #14
 801d1e0:	18fb      	adds	r3, r7, r3
 801d1e2:	781b      	ldrb	r3, [r3, #0]
 801d1e4:	0019      	movs	r1, r3
 801d1e6:	204d      	movs	r0, #77	; 0x4d
 801d1e8:	f001 fd78 	bl	801ecdc <SX1276Write>
}
 801d1ec:	46c0      	nop			; (mov r8, r8)
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	b005      	add	sp, #20
 801d1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d1f4 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint8_t power )
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b082      	sub	sp, #8
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	0002      	movs	r2, r0
 801d1fc:	1dfb      	adds	r3, r7, #7
 801d1fe:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276GetPaSelect\r\n"));

    if (power >14)
 801d200:	1dfb      	adds	r3, r7, #7
 801d202:	781b      	ldrb	r3, [r3, #0]
 801d204:	2b0e      	cmp	r3, #14
 801d206:	d901      	bls.n	801d20c <SX1276GetPaSelect+0x18>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 801d208:	2380      	movs	r3, #128	; 0x80
 801d20a:	e000      	b.n	801d20e <SX1276GetPaSelect+0x1a>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 801d20c:	2300      	movs	r3, #0
    }
}
 801d20e:	0018      	movs	r0, r3
 801d210:	46bd      	mov	sp, r7
 801d212:	b002      	add	sp, #8
 801d214:	bd80      	pop	{r7, pc}

0801d216 <SX1276SetAntSwLowPower>:

/**
 * Switch PA Low power (true) or Full power (false)
 */
void SX1276SetAntSwLowPower( bool status )
{
 801d216:	b580      	push	{r7, lr}
 801d218:	b082      	sub	sp, #8
 801d21a:	af00      	add	r7, sp, #0
 801d21c:	0002      	movs	r2, r0
 801d21e:	1dfb      	adds	r3, r7, #7
 801d220:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSwLowPower (%s)\r\n",((status)?"LP":"FP")));

    if( status == false )
 801d222:	1dfb      	adds	r3, r7, #7
 801d224:	781b      	ldrb	r3, [r3, #0]
 801d226:	2201      	movs	r2, #1
 801d228:	4053      	eors	r3, r2
 801d22a:	b2db      	uxtb	r3, r3
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d01b      	beq.n	801d268 <SX1276SetAntSwLowPower+0x52>
    {
    	// FP
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_OUTPUT_PP );
 801d230:	2200      	movs	r2, #0
 801d232:	2102      	movs	r1, #2
 801d234:	2000      	movs	r0, #0
 801d236:	f007 fbab 	bl	8024990 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801d23a:	2102      	movs	r1, #2
 801d23c:	2000      	movs	r0, #0
 801d23e:	f007 fdc7 	bl	8024dd0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_OUTPUT_PP );
 801d242:	2200      	movs	r2, #0
 801d244:	2102      	movs	r1, #2
 801d246:	2002      	movs	r0, #2
 801d248:	f007 fba2 	bl	8024990 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 801d24c:	2102      	movs	r1, #2
 801d24e:	2002      	movs	r0, #2
 801d250:	f007 fdbe 	bl	8024dd0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_OUTPUT_PP );
 801d254:	2200      	movs	r2, #0
 801d256:	2104      	movs	r1, #4
 801d258:	2002      	movs	r0, #2
 801d25a:	f007 fb99 	bl	8024990 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 801d25e:	2104      	movs	r1, #4
 801d260:	2002      	movs	r0, #2
 801d262:	f007 fdb5 	bl	8024dd0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
    }
}
 801d266:	e01a      	b.n	801d29e <SX1276SetAntSwLowPower+0x88>
    	gpio_configure(ITSDK_MURATA_ANTSW_RX_BANK, ITSDK_MURATA_ANTSW_RX_PIN, GPIO_ANALOG );
 801d268:	220e      	movs	r2, #14
 801d26a:	2102      	movs	r1, #2
 801d26c:	2000      	movs	r0, #0
 801d26e:	f007 fb8f 	bl	8024990 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801d272:	2102      	movs	r1, #2
 801d274:	2000      	movs	r0, #0
 801d276:	f007 fdab 	bl	8024dd0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXBOOST_BANK, ITSDK_MURATA_ANTSW_TXBOOST_PIN, GPIO_ANALOG );
 801d27a:	220e      	movs	r2, #14
 801d27c:	2102      	movs	r1, #2
 801d27e:	2002      	movs	r0, #2
 801d280:	f007 fb86 	bl	8024990 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 801d284:	2102      	movs	r1, #2
 801d286:	2002      	movs	r0, #2
 801d288:	f007 fda2 	bl	8024dd0 <gpio_reset>
    	gpio_configure(ITSDK_MURATA_ANTSW_TXRFO_BANK, ITSDK_MURATA_ANTSW_TXRFO_PIN, GPIO_ANALOG );
 801d28c:	220e      	movs	r2, #14
 801d28e:	2104      	movs	r1, #4
 801d290:	2002      	movs	r0, #2
 801d292:	f007 fb7d 	bl	8024990 <gpio_configure>
    	gpio_reset(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 801d296:	2104      	movs	r1, #4
 801d298:	2002      	movs	r0, #2
 801d29a:	f007 fd99 	bl	8024dd0 <gpio_reset>
}
 801d29e:	46c0      	nop			; (mov r8, r8)
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	b002      	add	sp, #8
 801d2a4:	bd80      	pop	{r7, pc}
	...

0801d2a8 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 801d2a8:	b590      	push	{r4, r7, lr}
 801d2aa:	b085      	sub	sp, #20
 801d2ac:	af00      	add	r7, sp, #0
 801d2ae:	0002      	movs	r2, r0
 801d2b0:	1dfb      	adds	r3, r7, #7
 801d2b2:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> mSX1276SetAntSw (%d)\r\n",opMode));

    uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801d2b4:	230f      	movs	r3, #15
 801d2b6:	18fc      	adds	r4, r7, r3
 801d2b8:	2009      	movs	r0, #9
 801d2ba:	f001 fd23 	bl	801ed04 <SX1276Read>
 801d2be:	0003      	movs	r3, r0
 801d2c0:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 801d2c2:	1dfb      	adds	r3, r7, #7
 801d2c4:	781b      	ldrb	r3, [r3, #0]
 801d2c6:	2b03      	cmp	r3, #3
 801d2c8:	d112      	bne.n	801d2f0 <SX1276SetAntSw+0x48>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST ) {
 801d2ca:	230f      	movs	r3, #15
 801d2cc:	18fb      	adds	r3, r7, r3
 801d2ce:	781b      	ldrb	r3, [r3, #0]
 801d2d0:	b25b      	sxtb	r3, r3
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	da04      	bge.n	801d2e0 <SX1276SetAntSw+0x38>
    	LOG_INFO_SX1276(("   PABOOST\r\n"));
    	gpio_set(ITSDK_MURATA_ANTSW_TXBOOST_BANK,ITSDK_MURATA_ANTSW_TXBOOST_PIN);
 801d2d6:	2102      	movs	r1, #2
 801d2d8:	2002      	movs	r0, #2
 801d2da:	f007 fd61 	bl	8024da0 <gpio_set>
 801d2de:	e003      	b.n	801d2e8 <SX1276SetAntSw+0x40>
      } else {
      	LOG_INFO_SX1276(("   RFO\r\n"));
        gpio_set(ITSDK_MURATA_ANTSW_TXRFO_BANK,ITSDK_MURATA_ANTSW_TXRFO_PIN);
 801d2e0:	2104      	movs	r1, #4
 801d2e2:	2002      	movs	r0, #2
 801d2e4:	f007 fd5c 	bl	8024da0 <gpio_set>
      }
      SX1276.RxTx = 1;
 801d2e8:	4b07      	ldr	r3, [pc, #28]	; (801d308 <SX1276SetAntSw+0x60>)
 801d2ea:	2201      	movs	r2, #1
 801d2ec:	701a      	strb	r2, [r3, #0]
      break;
 801d2ee:	e007      	b.n	801d300 <SX1276SetAntSw+0x58>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     LOG_INFO_SX1276(("   Rx Mode\r\n"));
     SX1276.RxTx = 0;
 801d2f0:	4b05      	ldr	r3, [pc, #20]	; (801d308 <SX1276SetAntSw+0x60>)
 801d2f2:	2200      	movs	r2, #0
 801d2f4:	701a      	strb	r2, [r3, #0]
     gpio_set(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN);
 801d2f6:	2102      	movs	r1, #2
 801d2f8:	2000      	movs	r0, #0
 801d2fa:	f007 fd51 	bl	8024da0 <gpio_set>
     break;
 801d2fe:	46c0      	nop			; (mov r8, r8)
    }
}
 801d300:	46c0      	nop			; (mov r8, r8)
 801d302:	46bd      	mov	sp, r7
 801d304:	b005      	add	sp, #20
 801d306:	bd90      	pop	{r4, r7, pc}
 801d308:	20002150 	.word	0x20002150

0801d30c <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b082      	sub	sp, #8
 801d310:	af00      	add	r7, sp, #0
 801d312:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> mSX1276CheckRfFrequency\r\n"));

    // Implement check. Currently all frequencies are supported
    return true;
 801d314:	2301      	movs	r3, #1
}
 801d316:	0018      	movs	r0, r3
 801d318:	46bd      	mov	sp, r7
 801d31a:	b002      	add	sp, #8
 801d31c:	bd80      	pop	{r7, pc}
	...

0801d320 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b082      	sub	sp, #8
 801d324:	af00      	add	r7, sp, #0
 801d326:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276BoardInit\r\n"));

    LoRaBoardCallbacks =callbacks;
 801d328:	4b03      	ldr	r3, [pc, #12]	; (801d338 <SX1276BoardInit+0x18>)
 801d32a:	687a      	ldr	r2, [r7, #4]
 801d32c:	601a      	str	r2, [r3, #0]
}
 801d32e:	46c0      	nop			; (mov r8, r8)
 801d330:	46bd      	mov	sp, r7
 801d332:	b002      	add	sp, #8
 801d334:	bd80      	pop	{r7, pc}
 801d336:	46c0      	nop			; (mov r8, r8)
 801d338:	20001d24 	.word	0x20001d24

0801d33c <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t * events )
{
 801d33c:	b590      	push	{r4, r7, lr}
 801d33e:	b085      	sub	sp, #20
 801d340:	af00      	add	r7, sp, #0
 801d342:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276Init\r\n"));

    uint8_t i;
    RadioEvents = events;
 801d344:	4b33      	ldr	r3, [pc, #204]	; (801d414 <SX1276Init+0xd8>)
 801d346:	687a      	ldr	r2, [r7, #4]
 801d348:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 801d34a:	4a33      	ldr	r2, [pc, #204]	; (801d418 <SX1276Init+0xdc>)
 801d34c:	4b33      	ldr	r3, [pc, #204]	; (801d41c <SX1276Init+0xe0>)
 801d34e:	0011      	movs	r1, r2
 801d350:	0018      	movs	r0, r3
 801d352:	f7ff fba1 	bl	801ca98 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 801d356:	4a30      	ldr	r2, [pc, #192]	; (801d418 <SX1276Init+0xdc>)
 801d358:	4b31      	ldr	r3, [pc, #196]	; (801d420 <SX1276Init+0xe4>)
 801d35a:	0011      	movs	r1, r2
 801d35c:	0018      	movs	r0, r3
 801d35e:	f7ff fb9b 	bl	801ca98 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 801d362:	4a2d      	ldr	r2, [pc, #180]	; (801d418 <SX1276Init+0xdc>)
 801d364:	4b2f      	ldr	r3, [pc, #188]	; (801d424 <SX1276Init+0xe8>)
 801d366:	0011      	movs	r1, r2
 801d368:	0018      	movs	r0, r3
 801d36a:	f7ff fb95 	bl	801ca98 <TimerInit>


    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 801d36e:	4b2e      	ldr	r3, [pc, #184]	; (801d428 <SX1276Init+0xec>)
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	2001      	movs	r0, #1
 801d376:	4798      	blx	r3

    SX1276Reset( );
 801d378:	f001 fbee 	bl	801eb58 <SX1276Reset>
    RxChainCalibration( );
 801d37c:	f000 f936 	bl	801d5ec <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801d380:	2000      	movs	r0, #0
 801d382:	f001 fc03 	bl	801eb8c <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 801d386:	4b28      	ldr	r3, [pc, #160]	; (801d428 <SX1276Init+0xec>)
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	689b      	ldr	r3, [r3, #8]
 801d38c:	4a27      	ldr	r2, [pc, #156]	; (801d42c <SX1276Init+0xf0>)
 801d38e:	0010      	movs	r0, r2
 801d390:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801d392:	230f      	movs	r3, #15
 801d394:	18fb      	adds	r3, r7, r3
 801d396:	2200      	movs	r2, #0
 801d398:	701a      	strb	r2, [r3, #0]
 801d39a:	e025      	b.n	801d3e8 <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 801d39c:	240f      	movs	r4, #15
 801d39e:	193b      	adds	r3, r7, r4
 801d3a0:	781a      	ldrb	r2, [r3, #0]
 801d3a2:	4923      	ldr	r1, [pc, #140]	; (801d430 <SX1276Init+0xf4>)
 801d3a4:	0013      	movs	r3, r2
 801d3a6:	005b      	lsls	r3, r3, #1
 801d3a8:	189b      	adds	r3, r3, r2
 801d3aa:	5c5b      	ldrb	r3, [r3, r1]
 801d3ac:	0018      	movs	r0, r3
 801d3ae:	f001 fc3d 	bl	801ec2c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801d3b2:	193b      	adds	r3, r7, r4
 801d3b4:	781a      	ldrb	r2, [r3, #0]
 801d3b6:	491e      	ldr	r1, [pc, #120]	; (801d430 <SX1276Init+0xf4>)
 801d3b8:	0013      	movs	r3, r2
 801d3ba:	005b      	lsls	r3, r3, #1
 801d3bc:	189b      	adds	r3, r3, r2
 801d3be:	18cb      	adds	r3, r1, r3
 801d3c0:	3301      	adds	r3, #1
 801d3c2:	781b      	ldrb	r3, [r3, #0]
 801d3c4:	b298      	uxth	r0, r3
 801d3c6:	193b      	adds	r3, r7, r4
 801d3c8:	781a      	ldrb	r2, [r3, #0]
 801d3ca:	4919      	ldr	r1, [pc, #100]	; (801d430 <SX1276Init+0xf4>)
 801d3cc:	0013      	movs	r3, r2
 801d3ce:	005b      	lsls	r3, r3, #1
 801d3d0:	189b      	adds	r3, r3, r2
 801d3d2:	18cb      	adds	r3, r1, r3
 801d3d4:	3302      	adds	r3, #2
 801d3d6:	781b      	ldrb	r3, [r3, #0]
 801d3d8:	0019      	movs	r1, r3
 801d3da:	f001 fc7f 	bl	801ecdc <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801d3de:	193b      	adds	r3, r7, r4
 801d3e0:	781a      	ldrb	r2, [r3, #0]
 801d3e2:	193b      	adds	r3, r7, r4
 801d3e4:	3201      	adds	r2, #1
 801d3e6:	701a      	strb	r2, [r3, #0]
 801d3e8:	230f      	movs	r3, #15
 801d3ea:	18fb      	adds	r3, r7, r3
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	2b0f      	cmp	r3, #15
 801d3f0:	d9d4      	bls.n	801d39c <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 801d3f2:	2000      	movs	r0, #0
 801d3f4:	f001 fc1a 	bl	801ec2c <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 801d3f8:	4b0e      	ldr	r3, [pc, #56]	; (801d434 <SX1276Init+0xf8>)
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 801d3fe:	4b0a      	ldr	r3, [pc, #40]	; (801d428 <SX1276Init+0xec>)
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	685b      	ldr	r3, [r3, #4]
 801d404:	4798      	blx	r3
 801d406:	0003      	movs	r3, r0
 801d408:	3335      	adds	r3, #53	; 0x35
}
 801d40a:	0018      	movs	r0, r3
 801d40c:	46bd      	mov	sp, r7
 801d40e:	b005      	add	sp, #20
 801d410:	bd90      	pop	{r4, r7, pc}
 801d412:	46c0      	nop			; (mov r8, r8)
 801d414:	20001c20 	.word	0x20001c20
 801d418:	0801ef7d 	.word	0x0801ef7d
 801d41c:	20002120 	.word	0x20002120
 801d420:	200021b8 	.word	0x200021b8
 801d424:	20002138 	.word	0x20002138
 801d428:	20001d24 	.word	0x20001d24
 801d42c:	20000040 	.word	0x20000040
 801d430:	080289d8 	.word	0x080289d8
 801d434:	20002150 	.word	0x20002150

0801d438 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 801d438:	b580      	push	{r7, lr}
 801d43a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetStatus\r\n"));

    return SX1276.Settings.State;
 801d43c:	4b02      	ldr	r3, [pc, #8]	; (801d448 <SX1276GetStatus+0x10>)
 801d43e:	791b      	ldrb	r3, [r3, #4]
}
 801d440:	0018      	movs	r0, r3
 801d442:	46bd      	mov	sp, r7
 801d444:	bd80      	pop	{r7, pc}
 801d446:	46c0      	nop			; (mov r8, r8)
 801d448:	20002150 	.word	0x20002150

0801d44c <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 801d44c:	b590      	push	{r4, r7, lr}
 801d44e:	b087      	sub	sp, #28
 801d450:	af00      	add	r7, sp, #0
 801d452:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetChannel %d\r\n",freq));

    uint32_t channel;

    SX1276.Settings.Channel = freq;
 801d454:	4b1d      	ldr	r3, [pc, #116]	; (801d4cc <SX1276SetChannel+0x80>)
 801d456:	687a      	ldr	r2, [r7, #4]
 801d458:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	491c      	ldr	r1, [pc, #112]	; (801d4d0 <SX1276SetChannel+0x84>)
 801d45e:	0018      	movs	r0, r3
 801d460:	f7e2 fe5a 	bl	8000118 <__udivsi3>
 801d464:	0003      	movs	r3, r0
 801d466:	617b      	str	r3, [r7, #20]
 801d468:	6979      	ldr	r1, [r7, #20]
 801d46a:	000b      	movs	r3, r1
 801d46c:	015b      	lsls	r3, r3, #5
 801d46e:	1a5b      	subs	r3, r3, r1
 801d470:	019a      	lsls	r2, r3, #6
 801d472:	1ad2      	subs	r2, r2, r3
 801d474:	00d2      	lsls	r2, r2, #3
 801d476:	1853      	adds	r3, r2, r1
 801d478:	687a      	ldr	r2, [r7, #4]
 801d47a:	1ad3      	subs	r3, r2, r3
 801d47c:	613b      	str	r3, [r7, #16]
 801d47e:	697b      	ldr	r3, [r7, #20]
 801d480:	021c      	lsls	r4, r3, #8
 801d482:	693b      	ldr	r3, [r7, #16]
 801d484:	021b      	lsls	r3, r3, #8
 801d486:	4a13      	ldr	r2, [pc, #76]	; (801d4d4 <SX1276SetChannel+0x88>)
 801d488:	4694      	mov	ip, r2
 801d48a:	4463      	add	r3, ip
 801d48c:	4910      	ldr	r1, [pc, #64]	; (801d4d0 <SX1276SetChannel+0x84>)
 801d48e:	0018      	movs	r0, r3
 801d490:	f7e2 fe42 	bl	8000118 <__udivsi3>
 801d494:	0003      	movs	r3, r0
 801d496:	18e3      	adds	r3, r4, r3
 801d498:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	0c1b      	lsrs	r3, r3, #16
 801d49e:	b2db      	uxtb	r3, r3
 801d4a0:	0019      	movs	r1, r3
 801d4a2:	2006      	movs	r0, #6
 801d4a4:	f001 fc1a 	bl	801ecdc <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	0a1b      	lsrs	r3, r3, #8
 801d4ac:	b2db      	uxtb	r3, r3
 801d4ae:	0019      	movs	r1, r3
 801d4b0:	2007      	movs	r0, #7
 801d4b2:	f001 fc13 	bl	801ecdc <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	b2db      	uxtb	r3, r3
 801d4ba:	0019      	movs	r1, r3
 801d4bc:	2008      	movs	r0, #8
 801d4be:	f001 fc0d 	bl	801ecdc <SX1276Write>
}
 801d4c2:	46c0      	nop			; (mov r8, r8)
 801d4c4:	46bd      	mov	sp, r7
 801d4c6:	b007      	add	sp, #28
 801d4c8:	bd90      	pop	{r4, r7, pc}
 801d4ca:	46c0      	nop			; (mov r8, r8)
 801d4cc:	20002150 	.word	0x20002150
 801d4d0:	00003d09 	.word	0x00003d09
 801d4d4:	00001e84 	.word	0x00001e84

0801d4d8 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801d4d8:	b5b0      	push	{r4, r5, r7, lr}
 801d4da:	b086      	sub	sp, #24
 801d4dc:	af00      	add	r7, sp, #0
 801d4de:	60b9      	str	r1, [r7, #8]
 801d4e0:	0011      	movs	r1, r2
 801d4e2:	607b      	str	r3, [r7, #4]
 801d4e4:	240f      	movs	r4, #15
 801d4e6:	193b      	adds	r3, r7, r4
 801d4e8:	1c02      	adds	r2, r0, #0
 801d4ea:	701a      	strb	r2, [r3, #0]
 801d4ec:	230c      	movs	r3, #12
 801d4ee:	18fb      	adds	r3, r7, r3
 801d4f0:	1c0a      	adds	r2, r1, #0
 801d4f2:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276IsChannelFree\r\n"));

    bool status = true;
 801d4f4:	2317      	movs	r3, #23
 801d4f6:	18fb      	adds	r3, r7, r3
 801d4f8:	2201      	movs	r2, #1
 801d4fa:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801d4fc:	2314      	movs	r3, #20
 801d4fe:	18fb      	adds	r3, r7, r3
 801d500:	2200      	movs	r2, #0
 801d502:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 801d504:	2300      	movs	r3, #0
 801d506:	613b      	str	r3, [r7, #16]

    SX1276SetModem( modem );
 801d508:	193b      	adds	r3, r7, r4
 801d50a:	781b      	ldrb	r3, [r3, #0]
 801d50c:	0018      	movs	r0, r3
 801d50e:	f001 fb8d 	bl	801ec2c <SX1276SetModem>

    SX1276SetChannel( freq );
 801d512:	68bb      	ldr	r3, [r7, #8]
 801d514:	0018      	movs	r0, r3
 801d516:	f7ff ff99 	bl	801d44c <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801d51a:	2005      	movs	r0, #5
 801d51c:	f001 fb36 	bl	801eb8c <SX1276SetOpMode>

    DelayMs( 1 );
 801d520:	2001      	movs	r0, #1
 801d522:	f007 fd99 	bl	8025058 <itsdk_delayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 801d526:	f7ff fb91 	bl	801cc4c <TimerGetCurrentTime>
 801d52a:	0003      	movs	r3, r0
 801d52c:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801d52e:	e017      	b.n	801d560 <SX1276IsChannelFree+0x88>
    {
        rssi = SX1276ReadRssi( modem );
 801d530:	2514      	movs	r5, #20
 801d532:	197c      	adds	r4, r7, r5
 801d534:	230f      	movs	r3, #15
 801d536:	18fb      	adds	r3, r7, r3
 801d538:	781b      	ldrb	r3, [r3, #0]
 801d53a:	0018      	movs	r0, r3
 801d53c:	f001 fac0 	bl	801eac0 <SX1276ReadRssi>
 801d540:	0003      	movs	r3, r0
 801d542:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 801d544:	197a      	adds	r2, r7, r5
 801d546:	230c      	movs	r3, #12
 801d548:	18fb      	adds	r3, r7, r3
 801d54a:	2100      	movs	r1, #0
 801d54c:	5e52      	ldrsh	r2, [r2, r1]
 801d54e:	2100      	movs	r1, #0
 801d550:	5e5b      	ldrsh	r3, [r3, r1]
 801d552:	429a      	cmp	r2, r3
 801d554:	dd04      	ble.n	801d560 <SX1276IsChannelFree+0x88>
        {
            status = false;
 801d556:	2317      	movs	r3, #23
 801d558:	18fb      	adds	r3, r7, r3
 801d55a:	2200      	movs	r2, #0
 801d55c:	701a      	strb	r2, [r3, #0]
            break;
 801d55e:	e007      	b.n	801d570 <SX1276IsChannelFree+0x98>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801d560:	693b      	ldr	r3, [r7, #16]
 801d562:	0018      	movs	r0, r3
 801d564:	f7ff fb7b 	bl	801cc5e <TimerGetElapsedTime>
 801d568:	0002      	movs	r2, r0
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	4293      	cmp	r3, r2
 801d56e:	d8df      	bhi.n	801d530 <SX1276IsChannelFree+0x58>
        }
    }
    SX1276SetSleep( );
 801d570:	f000 ffde 	bl	801e530 <SX1276SetSleep>
    return status;
 801d574:	2317      	movs	r3, #23
 801d576:	18fb      	adds	r3, r7, r3
 801d578:	781b      	ldrb	r3, [r3, #0]
}
 801d57a:	0018      	movs	r0, r3
 801d57c:	46bd      	mov	sp, r7
 801d57e:	b006      	add	sp, #24
 801d580:	bdb0      	pop	{r4, r5, r7, pc}

0801d582 <SX1276Random>:

uint32_t SX1276Random( void )
{
 801d582:	b580      	push	{r7, lr}
 801d584:	b082      	sub	sp, #8
 801d586:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Random\r\n"));

    uint8_t i;
    uint32_t rnd = 0;
 801d588:	2300      	movs	r3, #0
 801d58a:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 801d58c:	2001      	movs	r0, #1
 801d58e:	f001 fb4d 	bl	801ec2c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801d592:	21ff      	movs	r1, #255	; 0xff
 801d594:	2011      	movs	r0, #17
 801d596:	f001 fba1 	bl	801ecdc <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801d59a:	2005      	movs	r0, #5
 801d59c:	f001 faf6 	bl	801eb8c <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 801d5a0:	1dfb      	adds	r3, r7, #7
 801d5a2:	2200      	movs	r2, #0
 801d5a4:	701a      	strb	r2, [r3, #0]
 801d5a6:	e015      	b.n	801d5d4 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 801d5a8:	2001      	movs	r0, #1
 801d5aa:	f007 fd55 	bl	8025058 <itsdk_delayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 801d5ae:	202c      	movs	r0, #44	; 0x2c
 801d5b0:	f001 fba8 	bl	801ed04 <SX1276Read>
 801d5b4:	0003      	movs	r3, r0
 801d5b6:	001a      	movs	r2, r3
 801d5b8:	2301      	movs	r3, #1
 801d5ba:	401a      	ands	r2, r3
 801d5bc:	1dfb      	adds	r3, r7, #7
 801d5be:	781b      	ldrb	r3, [r3, #0]
 801d5c0:	409a      	lsls	r2, r3
 801d5c2:	0013      	movs	r3, r2
 801d5c4:	683a      	ldr	r2, [r7, #0]
 801d5c6:	4313      	orrs	r3, r2
 801d5c8:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 801d5ca:	1dfb      	adds	r3, r7, #7
 801d5cc:	781a      	ldrb	r2, [r3, #0]
 801d5ce:	1dfb      	adds	r3, r7, #7
 801d5d0:	3201      	adds	r2, #1
 801d5d2:	701a      	strb	r2, [r3, #0]
 801d5d4:	1dfb      	adds	r3, r7, #7
 801d5d6:	781b      	ldrb	r3, [r3, #0]
 801d5d8:	2b1f      	cmp	r3, #31
 801d5da:	d9e5      	bls.n	801d5a8 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 801d5dc:	f000 ffa8 	bl	801e530 <SX1276SetSleep>

    return rnd;
 801d5e0:	683b      	ldr	r3, [r7, #0]
}
 801d5e2:	0018      	movs	r0, r3
 801d5e4:	46bd      	mov	sp, r7
 801d5e6:	b002      	add	sp, #8
 801d5e8:	bd80      	pop	{r7, pc}
	...

0801d5ec <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 801d5ec:	b590      	push	{r4, r7, lr}
 801d5ee:	b087      	sub	sp, #28
 801d5f0:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 801d5f2:	2317      	movs	r3, #23
 801d5f4:	18fc      	adds	r4, r7, r3
 801d5f6:	2009      	movs	r0, #9
 801d5f8:	f001 fb84 	bl	801ed04 <SX1276Read>
 801d5fc:	0003      	movs	r3, r0
 801d5fe:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801d600:	2006      	movs	r0, #6
 801d602:	f001 fb7f 	bl	801ed04 <SX1276Read>
 801d606:	0003      	movs	r3, r0
 801d608:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801d60a:	2007      	movs	r0, #7
 801d60c:	f001 fb7a 	bl	801ed04 <SX1276Read>
 801d610:	0003      	movs	r3, r0
 801d612:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801d614:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801d616:	2008      	movs	r0, #8
 801d618:	f001 fb74 	bl	801ed04 <SX1276Read>
 801d61c:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801d61e:	4323      	orrs	r3, r4
 801d620:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 801d622:	693b      	ldr	r3, [r7, #16]
 801d624:	0a1b      	lsrs	r3, r3, #8
 801d626:	60fb      	str	r3, [r7, #12]
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	021b      	lsls	r3, r3, #8
 801d62c:	693a      	ldr	r2, [r7, #16]
 801d62e:	1ad3      	subs	r3, r2, r3
 801d630:	60bb      	str	r3, [r7, #8]
 801d632:	68f9      	ldr	r1, [r7, #12]
 801d634:	000b      	movs	r3, r1
 801d636:	015b      	lsls	r3, r3, #5
 801d638:	1a5b      	subs	r3, r3, r1
 801d63a:	019a      	lsls	r2, r3, #6
 801d63c:	1ad2      	subs	r2, r2, r3
 801d63e:	00d2      	lsls	r2, r2, #3
 801d640:	1850      	adds	r0, r2, r1
 801d642:	68b9      	ldr	r1, [r7, #8]
 801d644:	000b      	movs	r3, r1
 801d646:	015b      	lsls	r3, r3, #5
 801d648:	1a5b      	subs	r3, r3, r1
 801d64a:	019a      	lsls	r2, r3, #6
 801d64c:	1ad2      	subs	r2, r2, r3
 801d64e:	00d2      	lsls	r2, r2, #3
 801d650:	1853      	adds	r3, r2, r1
 801d652:	3380      	adds	r3, #128	; 0x80
 801d654:	0a1b      	lsrs	r3, r3, #8
 801d656:	18c3      	adds	r3, r0, r3
 801d658:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801d65a:	2100      	movs	r1, #0
 801d65c:	2009      	movs	r0, #9
 801d65e:	f001 fb3d 	bl	801ecdc <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801d662:	203b      	movs	r0, #59	; 0x3b
 801d664:	f001 fb4e 	bl	801ed04 <SX1276Read>
 801d668:	0003      	movs	r3, r0
 801d66a:	001a      	movs	r2, r3
 801d66c:	2340      	movs	r3, #64	; 0x40
 801d66e:	4313      	orrs	r3, r2
 801d670:	b2db      	uxtb	r3, r3
 801d672:	0019      	movs	r1, r3
 801d674:	203b      	movs	r0, #59	; 0x3b
 801d676:	f001 fb31 	bl	801ecdc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801d67a:	46c0      	nop			; (mov r8, r8)
 801d67c:	203b      	movs	r0, #59	; 0x3b
 801d67e:	f001 fb41 	bl	801ed04 <SX1276Read>
 801d682:	0003      	movs	r3, r0
 801d684:	001a      	movs	r2, r3
 801d686:	2320      	movs	r3, #32
 801d688:	4013      	ands	r3, r2
 801d68a:	2b20      	cmp	r3, #32
 801d68c:	d0f6      	beq.n	801d67c <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 801d68e:	4b14      	ldr	r3, [pc, #80]	; (801d6e0 <RxChainCalibration+0xf4>)
 801d690:	0018      	movs	r0, r3
 801d692:	f7ff fedb 	bl	801d44c <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801d696:	203b      	movs	r0, #59	; 0x3b
 801d698:	f001 fb34 	bl	801ed04 <SX1276Read>
 801d69c:	0003      	movs	r3, r0
 801d69e:	001a      	movs	r2, r3
 801d6a0:	2340      	movs	r3, #64	; 0x40
 801d6a2:	4313      	orrs	r3, r2
 801d6a4:	b2db      	uxtb	r3, r3
 801d6a6:	0019      	movs	r1, r3
 801d6a8:	203b      	movs	r0, #59	; 0x3b
 801d6aa:	f001 fb17 	bl	801ecdc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801d6ae:	46c0      	nop			; (mov r8, r8)
 801d6b0:	203b      	movs	r0, #59	; 0x3b
 801d6b2:	f001 fb27 	bl	801ed04 <SX1276Read>
 801d6b6:	0003      	movs	r3, r0
 801d6b8:	001a      	movs	r2, r3
 801d6ba:	2320      	movs	r3, #32
 801d6bc:	4013      	ands	r3, r2
 801d6be:	2b20      	cmp	r3, #32
 801d6c0:	d0f6      	beq.n	801d6b0 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 801d6c2:	2317      	movs	r3, #23
 801d6c4:	18fb      	adds	r3, r7, r3
 801d6c6:	781b      	ldrb	r3, [r3, #0]
 801d6c8:	0019      	movs	r1, r3
 801d6ca:	2009      	movs	r0, #9
 801d6cc:	f001 fb06 	bl	801ecdc <SX1276Write>
    SX1276SetChannel( initialFreq );
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	0018      	movs	r0, r3
 801d6d4:	f7ff feba 	bl	801d44c <SX1276SetChannel>
}
 801d6d8:	46c0      	nop			; (mov r8, r8)
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	b007      	add	sp, #28
 801d6de:	bd90      	pop	{r4, r7, pc}
 801d6e0:	33bca100 	.word	0x33bca100

0801d6e4 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d6e4:	b580      	push	{r7, lr}
 801d6e6:	b084      	sub	sp, #16
 801d6e8:	af00      	add	r7, sp, #0
 801d6ea:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> GetFskBandwidthRegValue\r\n"));

    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801d6ec:	230f      	movs	r3, #15
 801d6ee:	18fb      	adds	r3, r7, r3
 801d6f0:	2200      	movs	r2, #0
 801d6f2:	701a      	strb	r2, [r3, #0]
 801d6f4:	e021      	b.n	801d73a <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 801d6f6:	230f      	movs	r3, #15
 801d6f8:	18fb      	adds	r3, r7, r3
 801d6fa:	781a      	ldrb	r2, [r3, #0]
 801d6fc:	4b14      	ldr	r3, [pc, #80]	; (801d750 <GetFskBandwidthRegValue+0x6c>)
 801d6fe:	00d2      	lsls	r2, r2, #3
 801d700:	58d3      	ldr	r3, [r2, r3]
 801d702:	687a      	ldr	r2, [r7, #4]
 801d704:	429a      	cmp	r2, r3
 801d706:	d312      	bcc.n	801d72e <GetFskBandwidthRegValue+0x4a>
 801d708:	230f      	movs	r3, #15
 801d70a:	18fb      	adds	r3, r7, r3
 801d70c:	781b      	ldrb	r3, [r3, #0]
 801d70e:	1c5a      	adds	r2, r3, #1
 801d710:	4b0f      	ldr	r3, [pc, #60]	; (801d750 <GetFskBandwidthRegValue+0x6c>)
 801d712:	00d2      	lsls	r2, r2, #3
 801d714:	58d3      	ldr	r3, [r2, r3]
 801d716:	687a      	ldr	r2, [r7, #4]
 801d718:	429a      	cmp	r2, r3
 801d71a:	d208      	bcs.n	801d72e <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 801d71c:	230f      	movs	r3, #15
 801d71e:	18fb      	adds	r3, r7, r3
 801d720:	781b      	ldrb	r3, [r3, #0]
 801d722:	4a0b      	ldr	r2, [pc, #44]	; (801d750 <GetFskBandwidthRegValue+0x6c>)
 801d724:	00db      	lsls	r3, r3, #3
 801d726:	18d3      	adds	r3, r2, r3
 801d728:	3304      	adds	r3, #4
 801d72a:	781b      	ldrb	r3, [r3, #0]
 801d72c:	e00b      	b.n	801d746 <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801d72e:	210f      	movs	r1, #15
 801d730:	187b      	adds	r3, r7, r1
 801d732:	781a      	ldrb	r2, [r3, #0]
 801d734:	187b      	adds	r3, r7, r1
 801d736:	3201      	adds	r2, #1
 801d738:	701a      	strb	r2, [r3, #0]
 801d73a:	230f      	movs	r3, #15
 801d73c:	18fb      	adds	r3, r7, r3
 801d73e:	781b      	ldrb	r3, [r3, #0]
 801d740:	2b14      	cmp	r3, #20
 801d742:	d9d8      	bls.n	801d6f6 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d744:	e7fe      	b.n	801d744 <GetFskBandwidthRegValue+0x60>
}
 801d746:	0018      	movs	r0, r3
 801d748:	46bd      	mov	sp, r7
 801d74a:	b004      	add	sp, #16
 801d74c:	bd80      	pop	{r7, pc}
 801d74e:	46c0      	nop			; (mov r8, r8)
 801d750:	08028a08 	.word	0x08028a08

0801d754 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 801d754:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d756:	46c6      	mov	lr, r8
 801d758:	b500      	push	{lr}
 801d75a:	b084      	sub	sp, #16
 801d75c:	af00      	add	r7, sp, #0
 801d75e:	60b9      	str	r1, [r7, #8]
 801d760:	607a      	str	r2, [r7, #4]
 801d762:	0019      	movs	r1, r3
 801d764:	240f      	movs	r4, #15
 801d766:	193b      	adds	r3, r7, r4
 801d768:	1c02      	adds	r2, r0, #0
 801d76a:	701a      	strb	r2, [r3, #0]
 801d76c:	230e      	movs	r3, #14
 801d76e:	18fb      	adds	r3, r7, r3
 801d770:	1c0a      	adds	r2, r1, #0
 801d772:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetRxConfig\r\n"));

    SX1276SetModem( modem );
 801d774:	193b      	adds	r3, r7, r4
 801d776:	781b      	ldrb	r3, [r3, #0]
 801d778:	0018      	movs	r0, r3
 801d77a:	f001 fa57 	bl	801ec2c <SX1276SetModem>

    switch( modem )
 801d77e:	193b      	adds	r3, r7, r4
 801d780:	781b      	ldrb	r3, [r3, #0]
 801d782:	2b00      	cmp	r3, #0
 801d784:	d003      	beq.n	801d78e <SX1276SetRxConfig+0x3a>
 801d786:	2b01      	cmp	r3, #1
 801d788:	d100      	bne.n	801d78c <SX1276SetRxConfig+0x38>
 801d78a:	e100      	b.n	801d98e <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801d78c:	e274      	b.n	801dc78 <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801d78e:	4bc0      	ldr	r3, [pc, #768]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d790:	68ba      	ldr	r2, [r7, #8]
 801d792:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 801d794:	4bbe      	ldr	r3, [pc, #760]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d796:	687a      	ldr	r2, [r7, #4]
 801d798:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 801d79a:	4bbd      	ldr	r3, [pc, #756]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d79e:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 801d7a0:	4bbb      	ldr	r3, [pc, #748]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d7a2:	222c      	movs	r2, #44	; 0x2c
 801d7a4:	2108      	movs	r1, #8
 801d7a6:	468c      	mov	ip, r1
 801d7a8:	44bc      	add	ip, r7
 801d7aa:	4462      	add	r2, ip
 801d7ac:	2122      	movs	r1, #34	; 0x22
 801d7ae:	7812      	ldrb	r2, [r2, #0]
 801d7b0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 801d7b2:	4bb7      	ldr	r3, [pc, #732]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d7b4:	2130      	movs	r1, #48	; 0x30
 801d7b6:	2008      	movs	r0, #8
 801d7b8:	183a      	adds	r2, r7, r0
 801d7ba:	1852      	adds	r2, r2, r1
 801d7bc:	2123      	movs	r1, #35	; 0x23
 801d7be:	7812      	ldrb	r2, [r2, #0]
 801d7c0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801d7c2:	4bb3      	ldr	r3, [pc, #716]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d7c4:	2134      	movs	r1, #52	; 0x34
 801d7c6:	183a      	adds	r2, r7, r0
 801d7c8:	1852      	adds	r2, r2, r1
 801d7ca:	2124      	movs	r1, #36	; 0x24
 801d7cc:	7812      	ldrb	r2, [r2, #0]
 801d7ce:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801d7d0:	4baf      	ldr	r3, [pc, #700]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d7d2:	2220      	movs	r2, #32
 801d7d4:	2120      	movs	r1, #32
 801d7d6:	468c      	mov	ip, r1
 801d7d8:	2108      	movs	r1, #8
 801d7da:	4688      	mov	r8, r1
 801d7dc:	44b8      	add	r8, r7
 801d7de:	44c4      	add	ip, r8
 801d7e0:	4462      	add	r2, ip
 801d7e2:	2125      	movs	r1, #37	; 0x25
 801d7e4:	7812      	ldrb	r2, [r2, #0]
 801d7e6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 801d7e8:	4ba9      	ldr	r3, [pc, #676]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d7ea:	2224      	movs	r2, #36	; 0x24
 801d7ec:	2120      	movs	r1, #32
 801d7ee:	468c      	mov	ip, r1
 801d7f0:	2108      	movs	r1, #8
 801d7f2:	4688      	mov	r8, r1
 801d7f4:	44b8      	add	r8, r7
 801d7f6:	44c4      	add	ip, r8
 801d7f8:	4462      	add	r2, ip
 801d7fa:	2126      	movs	r1, #38	; 0x26
 801d7fc:	7812      	ldrb	r2, [r2, #0]
 801d7fe:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 801d800:	4ba3      	ldr	r3, [pc, #652]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d802:	2624      	movs	r6, #36	; 0x24
 801d804:	183a      	adds	r2, r7, r0
 801d806:	1992      	adds	r2, r2, r6
 801d808:	8812      	ldrh	r2, [r2, #0]
 801d80a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 801d80c:	2328      	movs	r3, #40	; 0x28
 801d80e:	2208      	movs	r2, #8
 801d810:	4694      	mov	ip, r2
 801d812:	44bc      	add	ip, r7
 801d814:	4463      	add	r3, ip
 801d816:	881b      	ldrh	r3, [r3, #0]
 801d818:	0018      	movs	r0, r3
 801d81a:	f7e4 ffff 	bl	800281c <__aeabi_i2d>
 801d81e:	0004      	movs	r4, r0
 801d820:	000d      	movs	r5, r1
 801d822:	6878      	ldr	r0, [r7, #4]
 801d824:	f7e5 f834 	bl	8002890 <__aeabi_ui2d>
 801d828:	0002      	movs	r2, r0
 801d82a:	000b      	movs	r3, r1
 801d82c:	2000      	movs	r0, #0
 801d82e:	4999      	ldr	r1, [pc, #612]	; (801da94 <SX1276SetRxConfig+0x340>)
 801d830:	f7e3 fdfa 	bl	8001428 <__aeabi_ddiv>
 801d834:	0002      	movs	r2, r0
 801d836:	000b      	movs	r3, r1
 801d838:	0010      	movs	r0, r2
 801d83a:	0019      	movs	r1, r3
 801d83c:	2200      	movs	r2, #0
 801d83e:	4b96      	ldr	r3, [pc, #600]	; (801da98 <SX1276SetRxConfig+0x344>)
 801d840:	f7e4 f9fc 	bl	8001c3c <__aeabi_dmul>
 801d844:	0002      	movs	r2, r0
 801d846:	000b      	movs	r3, r1
 801d848:	0020      	movs	r0, r4
 801d84a:	0029      	movs	r1, r5
 801d84c:	f7e4 f9f6 	bl	8001c3c <__aeabi_dmul>
 801d850:	0003      	movs	r3, r0
 801d852:	000c      	movs	r4, r1
 801d854:	0018      	movs	r0, r3
 801d856:	0021      	movs	r1, r4
 801d858:	2200      	movs	r2, #0
 801d85a:	4b90      	ldr	r3, [pc, #576]	; (801da9c <SX1276SetRxConfig+0x348>)
 801d85c:	f7e4 f9ee 	bl	8001c3c <__aeabi_dmul>
 801d860:	0003      	movs	r3, r0
 801d862:	000c      	movs	r4, r1
 801d864:	0018      	movs	r0, r3
 801d866:	0021      	movs	r1, r4
 801d868:	f7e2 feb2 	bl	80005d0 <__aeabi_d2uiz>
 801d86c:	0002      	movs	r2, r0
 801d86e:	4b88      	ldr	r3, [pc, #544]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d870:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801d872:	6878      	ldr	r0, [r7, #4]
 801d874:	f7e5 f80c 	bl	8002890 <__aeabi_ui2d>
 801d878:	0003      	movs	r3, r0
 801d87a:	000c      	movs	r4, r1
 801d87c:	001a      	movs	r2, r3
 801d87e:	0023      	movs	r3, r4
 801d880:	2000      	movs	r0, #0
 801d882:	4987      	ldr	r1, [pc, #540]	; (801daa0 <SX1276SetRxConfig+0x34c>)
 801d884:	f7e3 fdd0 	bl	8001428 <__aeabi_ddiv>
 801d888:	0003      	movs	r3, r0
 801d88a:	000c      	movs	r4, r1
 801d88c:	0018      	movs	r0, r3
 801d88e:	0021      	movs	r1, r4
 801d890:	f7e2 fe9e 	bl	80005d0 <__aeabi_d2uiz>
 801d894:	0003      	movs	r3, r0
 801d896:	b29b      	uxth	r3, r3
 801d898:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	0a1b      	lsrs	r3, r3, #8
 801d89e:	b2db      	uxtb	r3, r3
 801d8a0:	0019      	movs	r1, r3
 801d8a2:	2002      	movs	r0, #2
 801d8a4:	f001 fa1a 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	b2db      	uxtb	r3, r3
 801d8ac:	0019      	movs	r1, r3
 801d8ae:	2003      	movs	r0, #3
 801d8b0:	f001 fa14 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 801d8b4:	68bb      	ldr	r3, [r7, #8]
 801d8b6:	0018      	movs	r0, r3
 801d8b8:	f7ff ff14 	bl	801d6e4 <GetFskBandwidthRegValue>
 801d8bc:	0003      	movs	r3, r0
 801d8be:	0019      	movs	r1, r3
 801d8c0:	2012      	movs	r0, #18
 801d8c2:	f001 fa0b 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 801d8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8c8:	0018      	movs	r0, r3
 801d8ca:	f7ff ff0b 	bl	801d6e4 <GetFskBandwidthRegValue>
 801d8ce:	0003      	movs	r3, r0
 801d8d0:	0019      	movs	r1, r3
 801d8d2:	2013      	movs	r0, #19
 801d8d4:	f001 fa02 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801d8d8:	2008      	movs	r0, #8
 801d8da:	0004      	movs	r4, r0
 801d8dc:	183b      	adds	r3, r7, r0
 801d8de:	199b      	adds	r3, r3, r6
 801d8e0:	881b      	ldrh	r3, [r3, #0]
 801d8e2:	0a1b      	lsrs	r3, r3, #8
 801d8e4:	b29b      	uxth	r3, r3
 801d8e6:	b2db      	uxtb	r3, r3
 801d8e8:	0019      	movs	r1, r3
 801d8ea:	2025      	movs	r0, #37	; 0x25
 801d8ec:	f001 f9f6 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801d8f0:	193b      	adds	r3, r7, r4
 801d8f2:	199b      	adds	r3, r3, r6
 801d8f4:	881b      	ldrh	r3, [r3, #0]
 801d8f6:	b2db      	uxtb	r3, r3
 801d8f8:	0019      	movs	r1, r3
 801d8fa:	2026      	movs	r0, #38	; 0x26
 801d8fc:	f001 f9ee 	bl	801ecdc <SX1276Write>
            if( fixLen == 1 )
 801d900:	222c      	movs	r2, #44	; 0x2c
 801d902:	193b      	adds	r3, r7, r4
 801d904:	189b      	adds	r3, r3, r2
 801d906:	781b      	ldrb	r3, [r3, #0]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d00a      	beq.n	801d922 <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 801d90c:	2330      	movs	r3, #48	; 0x30
 801d90e:	2208      	movs	r2, #8
 801d910:	4694      	mov	ip, r2
 801d912:	44bc      	add	ip, r7
 801d914:	4463      	add	r3, ip
 801d916:	781b      	ldrb	r3, [r3, #0]
 801d918:	0019      	movs	r1, r3
 801d91a:	2032      	movs	r0, #50	; 0x32
 801d91c:	f001 f9de 	bl	801ecdc <SX1276Write>
 801d920:	e003      	b.n	801d92a <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 801d922:	21ff      	movs	r1, #255	; 0xff
 801d924:	2032      	movs	r0, #50	; 0x32
 801d926:	f001 f9d9 	bl	801ecdc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801d92a:	2030      	movs	r0, #48	; 0x30
 801d92c:	f001 f9ea 	bl	801ed04 <SX1276Read>
 801d930:	0003      	movs	r3, r0
 801d932:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801d934:	226f      	movs	r2, #111	; 0x6f
 801d936:	4013      	ands	r3, r2
 801d938:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801d93a:	232c      	movs	r3, #44	; 0x2c
 801d93c:	2108      	movs	r1, #8
 801d93e:	468c      	mov	ip, r1
 801d940:	44bc      	add	ip, r7
 801d942:	4463      	add	r3, ip
 801d944:	781b      	ldrb	r3, [r3, #0]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d001      	beq.n	801d94e <SX1276SetRxConfig+0x1fa>
 801d94a:	2300      	movs	r3, #0
 801d94c:	e001      	b.n	801d952 <SX1276SetRxConfig+0x1fe>
 801d94e:	2380      	movs	r3, #128	; 0x80
 801d950:	425b      	negs	r3, r3
 801d952:	4313      	orrs	r3, r2
 801d954:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801d956:	2334      	movs	r3, #52	; 0x34
 801d958:	2108      	movs	r1, #8
 801d95a:	468c      	mov	ip, r1
 801d95c:	44bc      	add	ip, r7
 801d95e:	4463      	add	r3, ip
 801d960:	781b      	ldrb	r3, [r3, #0]
 801d962:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801d964:	b25b      	sxtb	r3, r3
 801d966:	4313      	orrs	r3, r2
 801d968:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801d96a:	b2db      	uxtb	r3, r3
 801d96c:	0019      	movs	r1, r3
 801d96e:	2030      	movs	r0, #48	; 0x30
 801d970:	f001 f9b4 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801d974:	2031      	movs	r0, #49	; 0x31
 801d976:	f001 f9c5 	bl	801ed04 <SX1276Read>
 801d97a:	0003      	movs	r3, r0
 801d97c:	001a      	movs	r2, r3
 801d97e:	2340      	movs	r3, #64	; 0x40
 801d980:	4313      	orrs	r3, r2
 801d982:	b2db      	uxtb	r3, r3
 801d984:	0019      	movs	r1, r3
 801d986:	2031      	movs	r0, #49	; 0x31
 801d988:	f001 f9a8 	bl	801ecdc <SX1276Write>
        break;
 801d98c:	e174      	b.n	801dc78 <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 801d98e:	68bb      	ldr	r3, [r7, #8]
 801d990:	2b02      	cmp	r3, #2
 801d992:	d900      	bls.n	801d996 <SX1276SetRxConfig+0x242>
                while( 1 );
 801d994:	e7fe      	b.n	801d994 <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 801d996:	68bb      	ldr	r3, [r7, #8]
 801d998:	3307      	adds	r3, #7
 801d99a:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801d99c:	4b3c      	ldr	r3, [pc, #240]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d99e:	68ba      	ldr	r2, [r7, #8]
 801d9a0:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801d9a2:	4b3b      	ldr	r3, [pc, #236]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d9a4:	687a      	ldr	r2, [r7, #4]
 801d9a6:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801d9a8:	4b39      	ldr	r3, [pc, #228]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d9aa:	220e      	movs	r2, #14
 801d9ac:	18ba      	adds	r2, r7, r2
 801d9ae:	214d      	movs	r1, #77	; 0x4d
 801d9b0:	7812      	ldrb	r2, [r2, #0]
 801d9b2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801d9b4:	4b36      	ldr	r3, [pc, #216]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d9b6:	2224      	movs	r2, #36	; 0x24
 801d9b8:	2108      	movs	r1, #8
 801d9ba:	468c      	mov	ip, r1
 801d9bc:	44bc      	add	ip, r7
 801d9be:	4462      	add	r2, ip
 801d9c0:	214e      	movs	r1, #78	; 0x4e
 801d9c2:	8812      	ldrh	r2, [r2, #0]
 801d9c4:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801d9c6:	4b32      	ldr	r3, [pc, #200]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d9c8:	222c      	movs	r2, #44	; 0x2c
 801d9ca:	2108      	movs	r1, #8
 801d9cc:	468c      	mov	ip, r1
 801d9ce:	44bc      	add	ip, r7
 801d9d0:	4462      	add	r2, ip
 801d9d2:	2150      	movs	r1, #80	; 0x50
 801d9d4:	7812      	ldrb	r2, [r2, #0]
 801d9d6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 801d9d8:	4b2d      	ldr	r3, [pc, #180]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d9da:	2230      	movs	r2, #48	; 0x30
 801d9dc:	2108      	movs	r1, #8
 801d9de:	468c      	mov	ip, r1
 801d9e0:	44bc      	add	ip, r7
 801d9e2:	4462      	add	r2, ip
 801d9e4:	2151      	movs	r1, #81	; 0x51
 801d9e6:	7812      	ldrb	r2, [r2, #0]
 801d9e8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801d9ea:	4b29      	ldr	r3, [pc, #164]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d9ec:	2234      	movs	r2, #52	; 0x34
 801d9ee:	2108      	movs	r1, #8
 801d9f0:	468c      	mov	ip, r1
 801d9f2:	44bc      	add	ip, r7
 801d9f4:	4462      	add	r2, ip
 801d9f6:	2152      	movs	r1, #82	; 0x52
 801d9f8:	7812      	ldrb	r2, [r2, #0]
 801d9fa:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801d9fc:	4b24      	ldr	r3, [pc, #144]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801d9fe:	2238      	movs	r2, #56	; 0x38
 801da00:	2108      	movs	r1, #8
 801da02:	468c      	mov	ip, r1
 801da04:	44bc      	add	ip, r7
 801da06:	4462      	add	r2, ip
 801da08:	2153      	movs	r1, #83	; 0x53
 801da0a:	7812      	ldrb	r2, [r2, #0]
 801da0c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801da0e:	4b20      	ldr	r3, [pc, #128]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801da10:	223c      	movs	r2, #60	; 0x3c
 801da12:	2108      	movs	r1, #8
 801da14:	468c      	mov	ip, r1
 801da16:	44bc      	add	ip, r7
 801da18:	4462      	add	r2, ip
 801da1a:	2154      	movs	r1, #84	; 0x54
 801da1c:	7812      	ldrb	r2, [r2, #0]
 801da1e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801da20:	4b1b      	ldr	r3, [pc, #108]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801da22:	2220      	movs	r2, #32
 801da24:	2120      	movs	r1, #32
 801da26:	468c      	mov	ip, r1
 801da28:	2108      	movs	r1, #8
 801da2a:	4688      	mov	r8, r1
 801da2c:	44b8      	add	r8, r7
 801da2e:	44c4      	add	ip, r8
 801da30:	4462      	add	r2, ip
 801da32:	2155      	movs	r1, #85	; 0x55
 801da34:	7812      	ldrb	r2, [r2, #0]
 801da36:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 801da38:	4b15      	ldr	r3, [pc, #84]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801da3a:	2224      	movs	r2, #36	; 0x24
 801da3c:	2120      	movs	r1, #32
 801da3e:	468c      	mov	ip, r1
 801da40:	2108      	movs	r1, #8
 801da42:	4688      	mov	r8, r1
 801da44:	44b8      	add	r8, r7
 801da46:	44c4      	add	ip, r8
 801da48:	4462      	add	r2, ip
 801da4a:	2156      	movs	r1, #86	; 0x56
 801da4c:	7812      	ldrb	r2, [r2, #0]
 801da4e:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	2b0c      	cmp	r3, #12
 801da54:	d902      	bls.n	801da5c <SX1276SetRxConfig+0x308>
                datarate = 12;
 801da56:	230c      	movs	r3, #12
 801da58:	607b      	str	r3, [r7, #4]
 801da5a:	e004      	b.n	801da66 <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	2b05      	cmp	r3, #5
 801da60:	d801      	bhi.n	801da66 <SX1276SetRxConfig+0x312>
                datarate = 6;
 801da62:	2306      	movs	r3, #6
 801da64:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801da66:	68bb      	ldr	r3, [r7, #8]
 801da68:	2b07      	cmp	r3, #7
 801da6a:	d105      	bne.n	801da78 <SX1276SetRxConfig+0x324>
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	2b0b      	cmp	r3, #11
 801da70:	d008      	beq.n	801da84 <SX1276SetRxConfig+0x330>
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	2b0c      	cmp	r3, #12
 801da76:	d005      	beq.n	801da84 <SX1276SetRxConfig+0x330>
 801da78:	68bb      	ldr	r3, [r7, #8]
 801da7a:	2b08      	cmp	r3, #8
 801da7c:	d112      	bne.n	801daa4 <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	2b0c      	cmp	r3, #12
 801da82:	d10f      	bne.n	801daa4 <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801da84:	4b02      	ldr	r3, [pc, #8]	; (801da90 <SX1276SetRxConfig+0x33c>)
 801da86:	224c      	movs	r2, #76	; 0x4c
 801da88:	2101      	movs	r1, #1
 801da8a:	5499      	strb	r1, [r3, r2]
 801da8c:	e00e      	b.n	801daac <SX1276SetRxConfig+0x358>
 801da8e:	46c0      	nop			; (mov r8, r8)
 801da90:	20002150 	.word	0x20002150
 801da94:	3ff00000 	.word	0x3ff00000
 801da98:	40200000 	.word	0x40200000
 801da9c:	408f4000 	.word	0x408f4000
 801daa0:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801daa4:	4b77      	ldr	r3, [pc, #476]	; (801dc84 <SX1276SetRxConfig+0x530>)
 801daa6:	224c      	movs	r2, #76	; 0x4c
 801daa8:	2100      	movs	r1, #0
 801daaa:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801daac:	201d      	movs	r0, #29
 801daae:	f001 f929 	bl	801ed04 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801dab2:	68bb      	ldr	r3, [r7, #8]
 801dab4:	b2db      	uxtb	r3, r3
 801dab6:	011b      	lsls	r3, r3, #4
 801dab8:	b2da      	uxtb	r2, r3
 801daba:	230e      	movs	r3, #14
 801dabc:	18fb      	adds	r3, r7, r3
 801dabe:	781b      	ldrb	r3, [r3, #0]
 801dac0:	18db      	adds	r3, r3, r3
 801dac2:	b2db      	uxtb	r3, r3
 801dac4:	4313      	orrs	r3, r2
 801dac6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801dac8:	242c      	movs	r4, #44	; 0x2c
 801daca:	2608      	movs	r6, #8
 801dacc:	19bb      	adds	r3, r7, r6
 801dace:	191b      	adds	r3, r3, r4
 801dad0:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801dad2:	4313      	orrs	r3, r2
 801dad4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801dad6:	0019      	movs	r1, r3
 801dad8:	201d      	movs	r0, #29
 801dada:	f001 f8ff 	bl	801ecdc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801dade:	201e      	movs	r0, #30
 801dae0:	f001 f910 	bl	801ed04 <SX1276Read>
 801dae4:	0003      	movs	r3, r0
 801dae6:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 801dae8:	2308      	movs	r3, #8
 801daea:	4013      	ands	r3, r2
 801daec:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	b2db      	uxtb	r3, r3
 801daf2:	011b      	lsls	r3, r3, #4
 801daf4:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 801daf6:	4313      	orrs	r3, r2
 801daf8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 801dafa:	2334      	movs	r3, #52	; 0x34
 801dafc:	2108      	movs	r1, #8
 801dafe:	468c      	mov	ip, r1
 801db00:	44bc      	add	ip, r7
 801db02:	4463      	add	r3, ip
 801db04:	781b      	ldrb	r3, [r3, #0]
 801db06:	009b      	lsls	r3, r3, #2
 801db08:	b2db      	uxtb	r3, r3
 801db0a:	4313      	orrs	r3, r2
 801db0c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 801db0e:	2528      	movs	r5, #40	; 0x28
 801db10:	19bb      	adds	r3, r7, r6
 801db12:	195b      	adds	r3, r3, r5
 801db14:	881b      	ldrh	r3, [r3, #0]
 801db16:	0a1b      	lsrs	r3, r3, #8
 801db18:	b29b      	uxth	r3, r3
 801db1a:	b2db      	uxtb	r3, r3
 801db1c:	2103      	movs	r1, #3
 801db1e:	400b      	ands	r3, r1
 801db20:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801db22:	4313      	orrs	r3, r2
 801db24:	b2db      	uxtb	r3, r3
 801db26:	0019      	movs	r1, r3
 801db28:	201e      	movs	r0, #30
 801db2a:	f001 f8d7 	bl	801ecdc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801db2e:	2026      	movs	r0, #38	; 0x26
 801db30:	f001 f8e8 	bl	801ed04 <SX1276Read>
 801db34:	0003      	movs	r3, r0
 801db36:	b25b      	sxtb	r3, r3
 801db38:	2208      	movs	r2, #8
 801db3a:	4393      	bics	r3, r2
 801db3c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801db3e:	4b51      	ldr	r3, [pc, #324]	; (801dc84 <SX1276SetRxConfig+0x530>)
 801db40:	214c      	movs	r1, #76	; 0x4c
 801db42:	5c5b      	ldrb	r3, [r3, r1]
 801db44:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801db46:	b25b      	sxtb	r3, r3
 801db48:	4313      	orrs	r3, r2
 801db4a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801db4c:	b2db      	uxtb	r3, r3
 801db4e:	0019      	movs	r1, r3
 801db50:	2026      	movs	r0, #38	; 0x26
 801db52:	f001 f8c3 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 801db56:	19bb      	adds	r3, r7, r6
 801db58:	195b      	adds	r3, r3, r5
 801db5a:	881b      	ldrh	r3, [r3, #0]
 801db5c:	b2db      	uxtb	r3, r3
 801db5e:	0019      	movs	r1, r3
 801db60:	201f      	movs	r0, #31
 801db62:	f001 f8bb 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801db66:	2524      	movs	r5, #36	; 0x24
 801db68:	19bb      	adds	r3, r7, r6
 801db6a:	195b      	adds	r3, r3, r5
 801db6c:	881b      	ldrh	r3, [r3, #0]
 801db6e:	0a1b      	lsrs	r3, r3, #8
 801db70:	b29b      	uxth	r3, r3
 801db72:	b2db      	uxtb	r3, r3
 801db74:	0019      	movs	r1, r3
 801db76:	2020      	movs	r0, #32
 801db78:	f001 f8b0 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 801db7c:	19bb      	adds	r3, r7, r6
 801db7e:	195b      	adds	r3, r3, r5
 801db80:	881b      	ldrh	r3, [r3, #0]
 801db82:	b2db      	uxtb	r3, r3
 801db84:	0019      	movs	r1, r3
 801db86:	2021      	movs	r0, #33	; 0x21
 801db88:	f001 f8a8 	bl	801ecdc <SX1276Write>
            if( fixLen == 1 )
 801db8c:	19bb      	adds	r3, r7, r6
 801db8e:	191b      	adds	r3, r3, r4
 801db90:	781b      	ldrb	r3, [r3, #0]
 801db92:	2b00      	cmp	r3, #0
 801db94:	d009      	beq.n	801dbaa <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 801db96:	2330      	movs	r3, #48	; 0x30
 801db98:	2208      	movs	r2, #8
 801db9a:	4694      	mov	ip, r2
 801db9c:	44bc      	add	ip, r7
 801db9e:	4463      	add	r3, ip
 801dba0:	781b      	ldrb	r3, [r3, #0]
 801dba2:	0019      	movs	r1, r3
 801dba4:	2022      	movs	r0, #34	; 0x22
 801dba6:	f001 f899 	bl	801ecdc <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801dbaa:	4b36      	ldr	r3, [pc, #216]	; (801dc84 <SX1276SetRxConfig+0x530>)
 801dbac:	2253      	movs	r2, #83	; 0x53
 801dbae:	5c9b      	ldrb	r3, [r3, r2]
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d013      	beq.n	801dbdc <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801dbb4:	2044      	movs	r0, #68	; 0x44
 801dbb6:	f001 f8a5 	bl	801ed04 <SX1276Read>
 801dbba:	0003      	movs	r3, r0
 801dbbc:	001a      	movs	r2, r3
 801dbbe:	2380      	movs	r3, #128	; 0x80
 801dbc0:	425b      	negs	r3, r3
 801dbc2:	4313      	orrs	r3, r2
 801dbc4:	b2db      	uxtb	r3, r3
 801dbc6:	0019      	movs	r1, r3
 801dbc8:	2044      	movs	r0, #68	; 0x44
 801dbca:	f001 f887 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801dbce:	4b2d      	ldr	r3, [pc, #180]	; (801dc84 <SX1276SetRxConfig+0x530>)
 801dbd0:	2254      	movs	r2, #84	; 0x54
 801dbd2:	5c9b      	ldrb	r3, [r3, r2]
 801dbd4:	0019      	movs	r1, r3
 801dbd6:	2024      	movs	r0, #36	; 0x24
 801dbd8:	f001 f880 	bl	801ecdc <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 801dbdc:	68bb      	ldr	r3, [r7, #8]
 801dbde:	2b09      	cmp	r3, #9
 801dbe0:	d10d      	bne.n	801dbfe <SX1276SetRxConfig+0x4aa>
 801dbe2:	4b28      	ldr	r3, [pc, #160]	; (801dc84 <SX1276SetRxConfig+0x530>)
 801dbe4:	689b      	ldr	r3, [r3, #8]
 801dbe6:	4a28      	ldr	r2, [pc, #160]	; (801dc88 <SX1276SetRxConfig+0x534>)
 801dbe8:	4293      	cmp	r3, r2
 801dbea:	d908      	bls.n	801dbfe <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 801dbec:	2102      	movs	r1, #2
 801dbee:	2036      	movs	r0, #54	; 0x36
 801dbf0:	f001 f874 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 801dbf4:	2164      	movs	r1, #100	; 0x64
 801dbf6:	203a      	movs	r0, #58	; 0x3a
 801dbf8:	f001 f870 	bl	801ecdc <SX1276Write>
 801dbfc:	e00f      	b.n	801dc1e <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 801dbfe:	68bb      	ldr	r3, [r7, #8]
 801dc00:	2b09      	cmp	r3, #9
 801dc02:	d108      	bne.n	801dc16 <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 801dc04:	2102      	movs	r1, #2
 801dc06:	2036      	movs	r0, #54	; 0x36
 801dc08:	f001 f868 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 801dc0c:	217f      	movs	r1, #127	; 0x7f
 801dc0e:	203a      	movs	r0, #58	; 0x3a
 801dc10:	f001 f864 	bl	801ecdc <SX1276Write>
 801dc14:	e003      	b.n	801dc1e <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 801dc16:	2103      	movs	r1, #3
 801dc18:	2036      	movs	r0, #54	; 0x36
 801dc1a:	f001 f85f 	bl	801ecdc <SX1276Write>
            if( datarate == 6 )
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	2b06      	cmp	r3, #6
 801dc22:	d114      	bne.n	801dc4e <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801dc24:	2031      	movs	r0, #49	; 0x31
 801dc26:	f001 f86d 	bl	801ed04 <SX1276Read>
 801dc2a:	0003      	movs	r3, r0
 801dc2c:	b25b      	sxtb	r3, r3
 801dc2e:	2207      	movs	r2, #7
 801dc30:	4393      	bics	r3, r2
 801dc32:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801dc34:	2205      	movs	r2, #5
 801dc36:	4313      	orrs	r3, r2
 801dc38:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801dc3a:	b2db      	uxtb	r3, r3
 801dc3c:	0019      	movs	r1, r3
 801dc3e:	2031      	movs	r0, #49	; 0x31
 801dc40:	f001 f84c 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801dc44:	210c      	movs	r1, #12
 801dc46:	2037      	movs	r0, #55	; 0x37
 801dc48:	f001 f848 	bl	801ecdc <SX1276Write>
        break;
 801dc4c:	e013      	b.n	801dc76 <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801dc4e:	2031      	movs	r0, #49	; 0x31
 801dc50:	f001 f858 	bl	801ed04 <SX1276Read>
 801dc54:	0003      	movs	r3, r0
 801dc56:	b25b      	sxtb	r3, r3
 801dc58:	2207      	movs	r2, #7
 801dc5a:	4393      	bics	r3, r2
 801dc5c:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801dc5e:	2203      	movs	r2, #3
 801dc60:	4313      	orrs	r3, r2
 801dc62:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801dc64:	b2db      	uxtb	r3, r3
 801dc66:	0019      	movs	r1, r3
 801dc68:	2031      	movs	r0, #49	; 0x31
 801dc6a:	f001 f837 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801dc6e:	210a      	movs	r1, #10
 801dc70:	2037      	movs	r0, #55	; 0x37
 801dc72:	f001 f833 	bl	801ecdc <SX1276Write>
        break;
 801dc76:	46c0      	nop			; (mov r8, r8)
}
 801dc78:	46c0      	nop			; (mov r8, r8)
 801dc7a:	46bd      	mov	sp, r7
 801dc7c:	b004      	add	sp, #16
 801dc7e:	bc04      	pop	{r2}
 801dc80:	4690      	mov	r8, r2
 801dc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc84:	20002150 	.word	0x20002150
 801dc88:	1f4add40 	.word	0x1f4add40

0801dc8c <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801dc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc8e:	b085      	sub	sp, #20
 801dc90:	af00      	add	r7, sp, #0
 801dc92:	60ba      	str	r2, [r7, #8]
 801dc94:	607b      	str	r3, [r7, #4]
 801dc96:	240f      	movs	r4, #15
 801dc98:	193b      	adds	r3, r7, r4
 801dc9a:	1c02      	adds	r2, r0, #0
 801dc9c:	701a      	strb	r2, [r3, #0]
 801dc9e:	250e      	movs	r5, #14
 801dca0:	197b      	adds	r3, r7, r5
 801dca2:	1c0a      	adds	r2, r1, #0
 801dca4:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxConfig\r\n"));

    SX1276SetModem( modem );
 801dca6:	193b      	adds	r3, r7, r4
 801dca8:	781b      	ldrb	r3, [r3, #0]
 801dcaa:	0018      	movs	r0, r3
 801dcac:	f000 ffbe 	bl	801ec2c <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 801dcb0:	4be5      	ldr	r3, [pc, #916]	; (801e048 <SX1276SetTxConfig+0x3bc>)
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	68db      	ldr	r3, [r3, #12]
 801dcb6:	197a      	adds	r2, r7, r5
 801dcb8:	7812      	ldrb	r2, [r2, #0]
 801dcba:	b252      	sxtb	r2, r2
 801dcbc:	0010      	movs	r0, r2
 801dcbe:	4798      	blx	r3

    switch( modem )
 801dcc0:	193b      	adds	r3, r7, r4
 801dcc2:	781b      	ldrb	r3, [r3, #0]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d003      	beq.n	801dcd0 <SX1276SetTxConfig+0x44>
 801dcc8:	2b01      	cmp	r3, #1
 801dcca:	d100      	bne.n	801dcce <SX1276SetTxConfig+0x42>
 801dccc:	e0b1      	b.n	801de32 <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801dcce:	e1d8      	b.n	801e082 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 801dcd0:	4bde      	ldr	r3, [pc, #888]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dcd2:	220e      	movs	r2, #14
 801dcd4:	18ba      	adds	r2, r7, r2
 801dcd6:	7812      	ldrb	r2, [r2, #0]
 801dcd8:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 801dcda:	4bdc      	ldr	r3, [pc, #880]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dcdc:	68ba      	ldr	r2, [r7, #8]
 801dcde:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801dce0:	4bda      	ldr	r3, [pc, #872]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dce2:	687a      	ldr	r2, [r7, #4]
 801dce4:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 801dce6:	4bd9      	ldr	r3, [pc, #868]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dcea:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 801dcec:	4bd7      	ldr	r3, [pc, #860]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dcee:	2528      	movs	r5, #40	; 0x28
 801dcf0:	2408      	movs	r4, #8
 801dcf2:	193a      	adds	r2, r7, r4
 801dcf4:	1952      	adds	r2, r2, r5
 801dcf6:	8812      	ldrh	r2, [r2, #0]
 801dcf8:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 801dcfa:	4bd4      	ldr	r3, [pc, #848]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dcfc:	262c      	movs	r6, #44	; 0x2c
 801dcfe:	193a      	adds	r2, r7, r4
 801dd00:	1992      	adds	r2, r2, r6
 801dd02:	2122      	movs	r1, #34	; 0x22
 801dd04:	7812      	ldrb	r2, [r2, #0]
 801dd06:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801dd08:	4bd0      	ldr	r3, [pc, #832]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dd0a:	2230      	movs	r2, #48	; 0x30
 801dd0c:	2108      	movs	r1, #8
 801dd0e:	468c      	mov	ip, r1
 801dd10:	44bc      	add	ip, r7
 801dd12:	4462      	add	r2, ip
 801dd14:	2124      	movs	r1, #36	; 0x24
 801dd16:	7812      	ldrb	r2, [r2, #0]
 801dd18:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801dd1a:	4bcc      	ldr	r3, [pc, #816]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dd1c:	223c      	movs	r2, #60	; 0x3c
 801dd1e:	2108      	movs	r1, #8
 801dd20:	468c      	mov	ip, r1
 801dd22:	44bc      	add	ip, r7
 801dd24:	4462      	add	r2, ip
 801dd26:	2125      	movs	r1, #37	; 0x25
 801dd28:	7812      	ldrb	r2, [r2, #0]
 801dd2a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 801dd2c:	4bc7      	ldr	r3, [pc, #796]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dd2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801dd30:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 801dd32:	68b8      	ldr	r0, [r7, #8]
 801dd34:	f7e4 fdac 	bl	8002890 <__aeabi_ui2d>
 801dd38:	2200      	movs	r2, #0
 801dd3a:	4bc5      	ldr	r3, [pc, #788]	; (801e050 <SX1276SetTxConfig+0x3c4>)
 801dd3c:	f7e3 fb74 	bl	8001428 <__aeabi_ddiv>
 801dd40:	0003      	movs	r3, r0
 801dd42:	000c      	movs	r4, r1
 801dd44:	0018      	movs	r0, r3
 801dd46:	0021      	movs	r1, r4
 801dd48:	f7e2 fc42 	bl	80005d0 <__aeabi_d2uiz>
 801dd4c:	0003      	movs	r3, r0
 801dd4e:	b29b      	uxth	r3, r3
 801dd50:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 801dd52:	68bb      	ldr	r3, [r7, #8]
 801dd54:	0a1b      	lsrs	r3, r3, #8
 801dd56:	b2db      	uxtb	r3, r3
 801dd58:	0019      	movs	r1, r3
 801dd5a:	2004      	movs	r0, #4
 801dd5c:	f000 ffbe 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 801dd60:	68bb      	ldr	r3, [r7, #8]
 801dd62:	b2db      	uxtb	r3, r3
 801dd64:	0019      	movs	r1, r3
 801dd66:	2005      	movs	r0, #5
 801dd68:	f000 ffb8 	bl	801ecdc <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801dd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd6e:	f7e4 fd8f 	bl	8002890 <__aeabi_ui2d>
 801dd72:	0003      	movs	r3, r0
 801dd74:	000c      	movs	r4, r1
 801dd76:	001a      	movs	r2, r3
 801dd78:	0023      	movs	r3, r4
 801dd7a:	2000      	movs	r0, #0
 801dd7c:	49b5      	ldr	r1, [pc, #724]	; (801e054 <SX1276SetTxConfig+0x3c8>)
 801dd7e:	f7e3 fb53 	bl	8001428 <__aeabi_ddiv>
 801dd82:	0003      	movs	r3, r0
 801dd84:	000c      	movs	r4, r1
 801dd86:	0018      	movs	r0, r3
 801dd88:	0021      	movs	r1, r4
 801dd8a:	f7e2 fc21 	bl	80005d0 <__aeabi_d2uiz>
 801dd8e:	0003      	movs	r3, r0
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801dd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd96:	0a1b      	lsrs	r3, r3, #8
 801dd98:	b2db      	uxtb	r3, r3
 801dd9a:	0019      	movs	r1, r3
 801dd9c:	2002      	movs	r0, #2
 801dd9e:	f000 ff9d 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dda4:	b2db      	uxtb	r3, r3
 801dda6:	0019      	movs	r1, r3
 801dda8:	2003      	movs	r0, #3
 801ddaa:	f000 ff97 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801ddae:	2408      	movs	r4, #8
 801ddb0:	193b      	adds	r3, r7, r4
 801ddb2:	195b      	adds	r3, r3, r5
 801ddb4:	881b      	ldrh	r3, [r3, #0]
 801ddb6:	0a1b      	lsrs	r3, r3, #8
 801ddb8:	b29b      	uxth	r3, r3
 801ddba:	b2db      	uxtb	r3, r3
 801ddbc:	0019      	movs	r1, r3
 801ddbe:	2025      	movs	r0, #37	; 0x25
 801ddc0:	f000 ff8c 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 801ddc4:	193b      	adds	r3, r7, r4
 801ddc6:	195b      	adds	r3, r3, r5
 801ddc8:	881b      	ldrh	r3, [r3, #0]
 801ddca:	b2db      	uxtb	r3, r3
 801ddcc:	0019      	movs	r1, r3
 801ddce:	2026      	movs	r0, #38	; 0x26
 801ddd0:	f000 ff84 	bl	801ecdc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801ddd4:	2030      	movs	r0, #48	; 0x30
 801ddd6:	f000 ff95 	bl	801ed04 <SX1276Read>
 801ddda:	0003      	movs	r3, r0
 801dddc:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801ddde:	226f      	movs	r2, #111	; 0x6f
 801dde0:	4013      	ands	r3, r2
 801dde2:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801dde4:	193b      	adds	r3, r7, r4
 801dde6:	199b      	adds	r3, r3, r6
 801dde8:	781b      	ldrb	r3, [r3, #0]
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d001      	beq.n	801ddf2 <SX1276SetTxConfig+0x166>
 801ddee:	2300      	movs	r3, #0
 801ddf0:	e001      	b.n	801ddf6 <SX1276SetTxConfig+0x16a>
 801ddf2:	2380      	movs	r3, #128	; 0x80
 801ddf4:	425b      	negs	r3, r3
 801ddf6:	4313      	orrs	r3, r2
 801ddf8:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801ddfa:	2330      	movs	r3, #48	; 0x30
 801ddfc:	2108      	movs	r1, #8
 801ddfe:	468c      	mov	ip, r1
 801de00:	44bc      	add	ip, r7
 801de02:	4463      	add	r3, ip
 801de04:	781b      	ldrb	r3, [r3, #0]
 801de06:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801de08:	b25b      	sxtb	r3, r3
 801de0a:	4313      	orrs	r3, r2
 801de0c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801de0e:	b2db      	uxtb	r3, r3
 801de10:	0019      	movs	r1, r3
 801de12:	2030      	movs	r0, #48	; 0x30
 801de14:	f000 ff62 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801de18:	2031      	movs	r0, #49	; 0x31
 801de1a:	f000 ff73 	bl	801ed04 <SX1276Read>
 801de1e:	0003      	movs	r3, r0
 801de20:	001a      	movs	r2, r3
 801de22:	2340      	movs	r3, #64	; 0x40
 801de24:	4313      	orrs	r3, r2
 801de26:	b2db      	uxtb	r3, r3
 801de28:	0019      	movs	r1, r3
 801de2a:	2031      	movs	r0, #49	; 0x31
 801de2c:	f000 ff56 	bl	801ecdc <SX1276Write>
        break;
 801de30:	e127      	b.n	801e082 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 801de32:	4b86      	ldr	r3, [pc, #536]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801de34:	220e      	movs	r2, #14
 801de36:	18ba      	adds	r2, r7, r2
 801de38:	2140      	movs	r1, #64	; 0x40
 801de3a:	7812      	ldrb	r2, [r2, #0]
 801de3c:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	2b02      	cmp	r3, #2
 801de42:	d900      	bls.n	801de46 <SX1276SetTxConfig+0x1ba>
                while( 1 );
 801de44:	e7fe      	b.n	801de44 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	3307      	adds	r3, #7
 801de4a:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801de4c:	4b7f      	ldr	r3, [pc, #508]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801de4e:	687a      	ldr	r2, [r7, #4]
 801de50:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801de52:	4b7e      	ldr	r3, [pc, #504]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801de54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de56:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801de58:	4b7c      	ldr	r3, [pc, #496]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801de5a:	2224      	movs	r2, #36	; 0x24
 801de5c:	2108      	movs	r1, #8
 801de5e:	468c      	mov	ip, r1
 801de60:	44bc      	add	ip, r7
 801de62:	4462      	add	r2, ip
 801de64:	214d      	movs	r1, #77	; 0x4d
 801de66:	7812      	ldrb	r2, [r2, #0]
 801de68:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801de6a:	4b78      	ldr	r3, [pc, #480]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801de6c:	2228      	movs	r2, #40	; 0x28
 801de6e:	2108      	movs	r1, #8
 801de70:	468c      	mov	ip, r1
 801de72:	44bc      	add	ip, r7
 801de74:	4462      	add	r2, ip
 801de76:	214e      	movs	r1, #78	; 0x4e
 801de78:	8812      	ldrh	r2, [r2, #0]
 801de7a:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801de7c:	4b73      	ldr	r3, [pc, #460]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801de7e:	222c      	movs	r2, #44	; 0x2c
 801de80:	2108      	movs	r1, #8
 801de82:	468c      	mov	ip, r1
 801de84:	44bc      	add	ip, r7
 801de86:	4462      	add	r2, ip
 801de88:	2150      	movs	r1, #80	; 0x50
 801de8a:	7812      	ldrb	r2, [r2, #0]
 801de8c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801de8e:	4b6f      	ldr	r3, [pc, #444]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801de90:	2234      	movs	r2, #52	; 0x34
 801de92:	2108      	movs	r1, #8
 801de94:	468c      	mov	ip, r1
 801de96:	44bc      	add	ip, r7
 801de98:	4462      	add	r2, ip
 801de9a:	2153      	movs	r1, #83	; 0x53
 801de9c:	7812      	ldrb	r2, [r2, #0]
 801de9e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801dea0:	4b6a      	ldr	r3, [pc, #424]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dea2:	2238      	movs	r2, #56	; 0x38
 801dea4:	2108      	movs	r1, #8
 801dea6:	468c      	mov	ip, r1
 801dea8:	44bc      	add	ip, r7
 801deaa:	4462      	add	r2, ip
 801deac:	2154      	movs	r1, #84	; 0x54
 801deae:	7812      	ldrb	r2, [r2, #0]
 801deb0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801deb2:	4b66      	ldr	r3, [pc, #408]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801deb4:	2230      	movs	r2, #48	; 0x30
 801deb6:	2108      	movs	r1, #8
 801deb8:	468c      	mov	ip, r1
 801deba:	44bc      	add	ip, r7
 801debc:	4462      	add	r2, ip
 801debe:	2152      	movs	r1, #82	; 0x52
 801dec0:	7812      	ldrb	r2, [r2, #0]
 801dec2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801dec4:	4b61      	ldr	r3, [pc, #388]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dec6:	223c      	movs	r2, #60	; 0x3c
 801dec8:	2108      	movs	r1, #8
 801deca:	468c      	mov	ip, r1
 801decc:	44bc      	add	ip, r7
 801dece:	4462      	add	r2, ip
 801ded0:	2155      	movs	r1, #85	; 0x55
 801ded2:	7812      	ldrb	r2, [r2, #0]
 801ded4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 801ded6:	4b5d      	ldr	r3, [pc, #372]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801ded8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801deda:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 801dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dede:	2b0c      	cmp	r3, #12
 801dee0:	d902      	bls.n	801dee8 <SX1276SetTxConfig+0x25c>
                datarate = 12;
 801dee2:	230c      	movs	r3, #12
 801dee4:	62bb      	str	r3, [r7, #40]	; 0x28
 801dee6:	e004      	b.n	801def2 <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 801dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801deea:	2b05      	cmp	r3, #5
 801deec:	d801      	bhi.n	801def2 <SX1276SetTxConfig+0x266>
                datarate = 6;
 801deee:	2306      	movs	r3, #6
 801def0:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	2b07      	cmp	r3, #7
 801def6:	d105      	bne.n	801df04 <SX1276SetTxConfig+0x278>
 801def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801defa:	2b0b      	cmp	r3, #11
 801defc:	d008      	beq.n	801df10 <SX1276SetTxConfig+0x284>
 801defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df00:	2b0c      	cmp	r3, #12
 801df02:	d005      	beq.n	801df10 <SX1276SetTxConfig+0x284>
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	2b08      	cmp	r3, #8
 801df08:	d107      	bne.n	801df1a <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df0c:	2b0c      	cmp	r3, #12
 801df0e:	d104      	bne.n	801df1a <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801df10:	4b4e      	ldr	r3, [pc, #312]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801df12:	224c      	movs	r2, #76	; 0x4c
 801df14:	2101      	movs	r1, #1
 801df16:	5499      	strb	r1, [r3, r2]
 801df18:	e003      	b.n	801df22 <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801df1a:	4b4c      	ldr	r3, [pc, #304]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801df1c:	224c      	movs	r2, #76	; 0x4c
 801df1e:	2100      	movs	r1, #0
 801df20:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801df22:	4b4a      	ldr	r3, [pc, #296]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801df24:	2253      	movs	r2, #83	; 0x53
 801df26:	5c9b      	ldrb	r3, [r3, r2]
 801df28:	2b00      	cmp	r3, #0
 801df2a:	d013      	beq.n	801df54 <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801df2c:	2044      	movs	r0, #68	; 0x44
 801df2e:	f000 fee9 	bl	801ed04 <SX1276Read>
 801df32:	0003      	movs	r3, r0
 801df34:	001a      	movs	r2, r3
 801df36:	2380      	movs	r3, #128	; 0x80
 801df38:	425b      	negs	r3, r3
 801df3a:	4313      	orrs	r3, r2
 801df3c:	b2db      	uxtb	r3, r3
 801df3e:	0019      	movs	r1, r3
 801df40:	2044      	movs	r0, #68	; 0x44
 801df42:	f000 fecb 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801df46:	4b41      	ldr	r3, [pc, #260]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801df48:	2254      	movs	r2, #84	; 0x54
 801df4a:	5c9b      	ldrb	r3, [r3, r2]
 801df4c:	0019      	movs	r1, r3
 801df4e:	2024      	movs	r0, #36	; 0x24
 801df50:	f000 fec4 	bl	801ecdc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801df54:	201d      	movs	r0, #29
 801df56:	f000 fed5 	bl	801ed04 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	b2db      	uxtb	r3, r3
 801df5e:	011b      	lsls	r3, r3, #4
 801df60:	b2da      	uxtb	r2, r3
 801df62:	2324      	movs	r3, #36	; 0x24
 801df64:	2108      	movs	r1, #8
 801df66:	468c      	mov	ip, r1
 801df68:	44bc      	add	ip, r7
 801df6a:	4463      	add	r3, ip
 801df6c:	781b      	ldrb	r3, [r3, #0]
 801df6e:	18db      	adds	r3, r3, r3
 801df70:	b2db      	uxtb	r3, r3
 801df72:	4313      	orrs	r3, r2
 801df74:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801df76:	232c      	movs	r3, #44	; 0x2c
 801df78:	2108      	movs	r1, #8
 801df7a:	468c      	mov	ip, r1
 801df7c:	44bc      	add	ip, r7
 801df7e:	4463      	add	r3, ip
 801df80:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801df82:	4313      	orrs	r3, r2
 801df84:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801df86:	0019      	movs	r1, r3
 801df88:	201d      	movs	r0, #29
 801df8a:	f000 fea7 	bl	801ecdc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801df8e:	201e      	movs	r0, #30
 801df90:	f000 feb8 	bl	801ed04 <SX1276Read>
 801df94:	0003      	movs	r3, r0
 801df96:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801df98:	230b      	movs	r3, #11
 801df9a:	4013      	ands	r3, r2
 801df9c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfa0:	b2db      	uxtb	r3, r3
 801dfa2:	011b      	lsls	r3, r3, #4
 801dfa4:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801dfa6:	4313      	orrs	r3, r2
 801dfa8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801dfaa:	2330      	movs	r3, #48	; 0x30
 801dfac:	2108      	movs	r1, #8
 801dfae:	468c      	mov	ip, r1
 801dfb0:	44bc      	add	ip, r7
 801dfb2:	4463      	add	r3, ip
 801dfb4:	781b      	ldrb	r3, [r3, #0]
 801dfb6:	009b      	lsls	r3, r3, #2
 801dfb8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801dfba:	4313      	orrs	r3, r2
 801dfbc:	b2db      	uxtb	r3, r3
 801dfbe:	0019      	movs	r1, r3
 801dfc0:	201e      	movs	r0, #30
 801dfc2:	f000 fe8b 	bl	801ecdc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801dfc6:	2026      	movs	r0, #38	; 0x26
 801dfc8:	f000 fe9c 	bl	801ed04 <SX1276Read>
 801dfcc:	0003      	movs	r3, r0
 801dfce:	b25b      	sxtb	r3, r3
 801dfd0:	2208      	movs	r2, #8
 801dfd2:	4393      	bics	r3, r2
 801dfd4:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801dfd6:	4b1d      	ldr	r3, [pc, #116]	; (801e04c <SX1276SetTxConfig+0x3c0>)
 801dfd8:	214c      	movs	r1, #76	; 0x4c
 801dfda:	5c5b      	ldrb	r3, [r3, r1]
 801dfdc:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801dfde:	b25b      	sxtb	r3, r3
 801dfe0:	4313      	orrs	r3, r2
 801dfe2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801dfe4:	b2db      	uxtb	r3, r3
 801dfe6:	0019      	movs	r1, r3
 801dfe8:	2026      	movs	r0, #38	; 0x26
 801dfea:	f000 fe77 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801dfee:	2428      	movs	r4, #40	; 0x28
 801dff0:	2508      	movs	r5, #8
 801dff2:	197b      	adds	r3, r7, r5
 801dff4:	191b      	adds	r3, r3, r4
 801dff6:	881b      	ldrh	r3, [r3, #0]
 801dff8:	0a1b      	lsrs	r3, r3, #8
 801dffa:	b29b      	uxth	r3, r3
 801dffc:	b2db      	uxtb	r3, r3
 801dffe:	0019      	movs	r1, r3
 801e000:	2020      	movs	r0, #32
 801e002:	f000 fe6b 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801e006:	197b      	adds	r3, r7, r5
 801e008:	191b      	adds	r3, r3, r4
 801e00a:	881b      	ldrh	r3, [r3, #0]
 801e00c:	b2db      	uxtb	r3, r3
 801e00e:	0019      	movs	r1, r3
 801e010:	2021      	movs	r0, #33	; 0x21
 801e012:	f000 fe63 	bl	801ecdc <SX1276Write>
            if( datarate == 6 )
 801e016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e018:	2b06      	cmp	r3, #6
 801e01a:	d11d      	bne.n	801e058 <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801e01c:	2031      	movs	r0, #49	; 0x31
 801e01e:	f000 fe71 	bl	801ed04 <SX1276Read>
 801e022:	0003      	movs	r3, r0
 801e024:	b25b      	sxtb	r3, r3
 801e026:	2207      	movs	r2, #7
 801e028:	4393      	bics	r3, r2
 801e02a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801e02c:	2205      	movs	r2, #5
 801e02e:	4313      	orrs	r3, r2
 801e030:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801e032:	b2db      	uxtb	r3, r3
 801e034:	0019      	movs	r1, r3
 801e036:	2031      	movs	r0, #49	; 0x31
 801e038:	f000 fe50 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801e03c:	210c      	movs	r1, #12
 801e03e:	2037      	movs	r0, #55	; 0x37
 801e040:	f000 fe4c 	bl	801ecdc <SX1276Write>
        break;
 801e044:	e01c      	b.n	801e080 <SX1276SetTxConfig+0x3f4>
 801e046:	46c0      	nop			; (mov r8, r8)
 801e048:	20001d24 	.word	0x20001d24
 801e04c:	20002150 	.word	0x20002150
 801e050:	404e8480 	.word	0x404e8480
 801e054:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801e058:	2031      	movs	r0, #49	; 0x31
 801e05a:	f000 fe53 	bl	801ed04 <SX1276Read>
 801e05e:	0003      	movs	r3, r0
 801e060:	b25b      	sxtb	r3, r3
 801e062:	2207      	movs	r2, #7
 801e064:	4393      	bics	r3, r2
 801e066:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801e068:	2203      	movs	r2, #3
 801e06a:	4313      	orrs	r3, r2
 801e06c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801e06e:	b2db      	uxtb	r3, r3
 801e070:	0019      	movs	r1, r3
 801e072:	2031      	movs	r0, #49	; 0x31
 801e074:	f000 fe32 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801e078:	210a      	movs	r1, #10
 801e07a:	2037      	movs	r0, #55	; 0x37
 801e07c:	f000 fe2e 	bl	801ecdc <SX1276Write>
        break;
 801e080:	46c0      	nop			; (mov r8, r8)
}
 801e082:	46c0      	nop			; (mov r8, r8)
 801e084:	46bd      	mov	sp, r7
 801e086:	b005      	add	sp, #20
 801e088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e08a:	46c0      	nop			; (mov r8, r8)

0801e08c <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 801e08c:	b5b0      	push	{r4, r5, r7, lr}
 801e08e:	b094      	sub	sp, #80	; 0x50
 801e090:	af00      	add	r7, sp, #0
 801e092:	0002      	movs	r2, r0
 801e094:	1dfb      	adds	r3, r7, #7
 801e096:	701a      	strb	r2, [r3, #0]
 801e098:	1dbb      	adds	r3, r7, #6
 801e09a:	1c0a      	adds	r2, r1, #0
 801e09c:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276GetTimeOnAir\r\n"));

    uint32_t airTime = 0;
 801e09e:	2300      	movs	r3, #0
 801e0a0:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 801e0a2:	1dfb      	adds	r3, r7, #7
 801e0a4:	781b      	ldrb	r3, [r3, #0]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d003      	beq.n	801e0b2 <SX1276GetTimeOnAir+0x26>
 801e0aa:	2b01      	cmp	r3, #1
 801e0ac:	d100      	bne.n	801e0b0 <SX1276GetTimeOnAir+0x24>
 801e0ae:	e086      	b.n	801e1be <SX1276GetTimeOnAir+0x132>
 801e0b0:	e164      	b.n	801e37c <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801e0b2:	4bb5      	ldr	r3, [pc, #724]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e0b4:	8c1b      	ldrh	r3, [r3, #32]
 801e0b6:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 801e0b8:	2027      	movs	r0, #39	; 0x27
 801e0ba:	f000 fe23 	bl	801ed04 <SX1276Read>
 801e0be:	0003      	movs	r3, r0
 801e0c0:	001a      	movs	r2, r3
 801e0c2:	23f8      	movs	r3, #248	; 0xf8
 801e0c4:	439a      	bics	r2, r3
 801e0c6:	0013      	movs	r3, r2
 801e0c8:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801e0ca:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 801e0cc:	0018      	movs	r0, r3
 801e0ce:	f7e4 fba5 	bl	800281c <__aeabi_i2d>
 801e0d2:	0004      	movs	r4, r0
 801e0d4:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 801e0d6:	4bac      	ldr	r3, [pc, #688]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e0d8:	2222      	movs	r2, #34	; 0x22
 801e0da:	5c9b      	ldrb	r3, [r3, r2]
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d002      	beq.n	801e0e6 <SX1276GetTimeOnAir+0x5a>
 801e0e0:	2000      	movs	r0, #0
 801e0e2:	2100      	movs	r1, #0
 801e0e4:	e001      	b.n	801e0ea <SX1276GetTimeOnAir+0x5e>
 801e0e6:	2000      	movs	r0, #0
 801e0e8:	49a8      	ldr	r1, [pc, #672]	; (801e38c <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 801e0ea:	0022      	movs	r2, r4
 801e0ec:	002b      	movs	r3, r5
 801e0ee:	f7e2 fe7f 	bl	8000df0 <__aeabi_dadd>
 801e0f2:	0003      	movs	r3, r0
 801e0f4:	000c      	movs	r4, r1
 801e0f6:	0025      	movs	r5, r4
 801e0f8:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801e0fa:	2030      	movs	r0, #48	; 0x30
 801e0fc:	f000 fe02 	bl	801ed04 <SX1276Read>
 801e100:	0003      	movs	r3, r0
 801e102:	001a      	movs	r2, r3
 801e104:	23f9      	movs	r3, #249	; 0xf9
 801e106:	439a      	bics	r2, r3
 801e108:	1e13      	subs	r3, r2, #0
 801e10a:	d002      	beq.n	801e112 <SX1276GetTimeOnAir+0x86>
 801e10c:	2000      	movs	r0, #0
 801e10e:	499f      	ldr	r1, [pc, #636]	; (801e38c <SX1276GetTimeOnAir+0x300>)
 801e110:	e001      	b.n	801e116 <SX1276GetTimeOnAir+0x8a>
 801e112:	2000      	movs	r0, #0
 801e114:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 801e116:	0022      	movs	r2, r4
 801e118:	002b      	movs	r3, r5
 801e11a:	f7e2 fe69 	bl	8000df0 <__aeabi_dadd>
 801e11e:	0003      	movs	r3, r0
 801e120:	000c      	movs	r4, r1
 801e122:	0025      	movs	r5, r4
 801e124:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 801e126:	1dbb      	adds	r3, r7, #6
 801e128:	781b      	ldrb	r3, [r3, #0]
 801e12a:	0018      	movs	r0, r3
 801e12c:	f7e4 fb76 	bl	800281c <__aeabi_i2d>
 801e130:	0002      	movs	r2, r0
 801e132:	000b      	movs	r3, r1
 801e134:	0020      	movs	r0, r4
 801e136:	0029      	movs	r1, r5
 801e138:	f7e2 fe5a 	bl	8000df0 <__aeabi_dadd>
 801e13c:	0003      	movs	r3, r0
 801e13e:	000c      	movs	r4, r1
 801e140:	0025      	movs	r5, r4
 801e142:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 801e144:	4b90      	ldr	r3, [pc, #576]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e146:	2224      	movs	r2, #36	; 0x24
 801e148:	5c9b      	ldrb	r3, [r3, r2]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	d003      	beq.n	801e156 <SX1276GetTimeOnAir+0xca>
 801e14e:	2000      	movs	r0, #0
 801e150:	2180      	movs	r1, #128	; 0x80
 801e152:	05c9      	lsls	r1, r1, #23
 801e154:	e001      	b.n	801e15a <SX1276GetTimeOnAir+0xce>
 801e156:	2000      	movs	r0, #0
 801e158:	2100      	movs	r1, #0
                                     pktLen +
 801e15a:	0022      	movs	r2, r4
 801e15c:	002b      	movs	r3, r5
 801e15e:	f7e2 fe47 	bl	8000df0 <__aeabi_dadd>
 801e162:	0003      	movs	r3, r0
 801e164:	000c      	movs	r4, r1
 801e166:	0018      	movs	r0, r3
 801e168:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801e16a:	2200      	movs	r2, #0
 801e16c:	4b88      	ldr	r3, [pc, #544]	; (801e390 <SX1276GetTimeOnAir+0x304>)
 801e16e:	f7e3 fd65 	bl	8001c3c <__aeabi_dmul>
 801e172:	0003      	movs	r3, r0
 801e174:	000c      	movs	r4, r1
 801e176:	0025      	movs	r5, r4
 801e178:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 801e17a:	4b83      	ldr	r3, [pc, #524]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e17c:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 801e17e:	0018      	movs	r0, r3
 801e180:	f7e4 fb86 	bl	8002890 <__aeabi_ui2d>
 801e184:	0002      	movs	r2, r0
 801e186:	000b      	movs	r3, r1
 801e188:	0020      	movs	r0, r4
 801e18a:	0029      	movs	r1, r5
 801e18c:	f7e3 f94c 	bl	8001428 <__aeabi_ddiv>
 801e190:	0003      	movs	r3, r0
 801e192:	000c      	movs	r4, r1
 801e194:	0018      	movs	r0, r3
 801e196:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 801e198:	2200      	movs	r2, #0
 801e19a:	4b7e      	ldr	r3, [pc, #504]	; (801e394 <SX1276GetTimeOnAir+0x308>)
 801e19c:	f7e3 fd4e 	bl	8001c3c <__aeabi_dmul>
 801e1a0:	0003      	movs	r3, r0
 801e1a2:	000c      	movs	r4, r1
 801e1a4:	0018      	movs	r0, r3
 801e1a6:	0021      	movs	r1, r4
 801e1a8:	f008 fbd2 	bl	8026950 <round>
 801e1ac:	0003      	movs	r3, r0
 801e1ae:	000c      	movs	r4, r1
 801e1b0:	0018      	movs	r0, r3
 801e1b2:	0021      	movs	r1, r4
 801e1b4:	f7e2 fa0c 	bl	80005d0 <__aeabi_d2uiz>
 801e1b8:	0003      	movs	r3, r0
 801e1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 801e1bc:	e0de      	b.n	801e37c <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 801e1be:	2300      	movs	r3, #0
 801e1c0:	2400      	movs	r4, #0
 801e1c2:	643b      	str	r3, [r7, #64]	; 0x40
 801e1c4:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 801e1c6:	4b70      	ldr	r3, [pc, #448]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e1ca:	2b08      	cmp	r3, #8
 801e1cc:	d008      	beq.n	801e1e0 <SX1276GetTimeOnAir+0x154>
 801e1ce:	2b09      	cmp	r3, #9
 801e1d0:	d00b      	beq.n	801e1ea <SX1276GetTimeOnAir+0x15e>
 801e1d2:	2b07      	cmp	r3, #7
 801e1d4:	d10e      	bne.n	801e1f4 <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	4c6f      	ldr	r4, [pc, #444]	; (801e398 <SX1276GetTimeOnAir+0x30c>)
 801e1da:	643b      	str	r3, [r7, #64]	; 0x40
 801e1dc:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801e1de:	e009      	b.n	801e1f4 <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	4c6e      	ldr	r4, [pc, #440]	; (801e39c <SX1276GetTimeOnAir+0x310>)
 801e1e4:	643b      	str	r3, [r7, #64]	; 0x40
 801e1e6:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801e1e8:	e004      	b.n	801e1f4 <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	4c6c      	ldr	r4, [pc, #432]	; (801e3a0 <SX1276GetTimeOnAir+0x314>)
 801e1ee:	643b      	str	r3, [r7, #64]	; 0x40
 801e1f0:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 801e1f2:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 801e1f4:	4b64      	ldr	r3, [pc, #400]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e1f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e1f8:	2201      	movs	r2, #1
 801e1fa:	409a      	lsls	r2, r3
 801e1fc:	0013      	movs	r3, r2
 801e1fe:	0018      	movs	r0, r3
 801e200:	f7e4 fb0c 	bl	800281c <__aeabi_i2d>
 801e204:	0003      	movs	r3, r0
 801e206:	000c      	movs	r4, r1
 801e208:	001a      	movs	r2, r3
 801e20a:	0023      	movs	r3, r4
 801e20c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801e20e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801e210:	f7e3 f90a 	bl	8001428 <__aeabi_ddiv>
 801e214:	0003      	movs	r3, r0
 801e216:	000c      	movs	r4, r1
 801e218:	63bb      	str	r3, [r7, #56]	; 0x38
 801e21a:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 801e21c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e220:	2000      	movs	r0, #0
 801e222:	495a      	ldr	r1, [pc, #360]	; (801e38c <SX1276GetTimeOnAir+0x300>)
 801e224:	f7e3 f900 	bl	8001428 <__aeabi_ddiv>
 801e228:	0003      	movs	r3, r0
 801e22a:	000c      	movs	r4, r1
 801e22c:	633b      	str	r3, [r7, #48]	; 0x30
 801e22e:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 801e230:	4b55      	ldr	r3, [pc, #340]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e232:	224e      	movs	r2, #78	; 0x4e
 801e234:	5a9b      	ldrh	r3, [r3, r2]
 801e236:	0018      	movs	r0, r3
 801e238:	f7e4 faf0 	bl	800281c <__aeabi_i2d>
 801e23c:	2200      	movs	r2, #0
 801e23e:	4b59      	ldr	r3, [pc, #356]	; (801e3a4 <SX1276GetTimeOnAir+0x318>)
 801e240:	f7e2 fdd6 	bl	8000df0 <__aeabi_dadd>
 801e244:	0003      	movs	r3, r0
 801e246:	000c      	movs	r4, r1
 801e248:	001a      	movs	r2, r3
 801e24a:	0023      	movs	r3, r4
 801e24c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e24e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e250:	f7e3 fcf4 	bl	8001c3c <__aeabi_dmul>
 801e254:	0003      	movs	r3, r0
 801e256:	000c      	movs	r4, r1
 801e258:	62bb      	str	r3, [r7, #40]	; 0x28
 801e25a:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801e25c:	1dbb      	adds	r3, r7, #6
 801e25e:	781b      	ldrb	r3, [r3, #0]
 801e260:	00db      	lsls	r3, r3, #3
 801e262:	001a      	movs	r2, r3
 801e264:	4b48      	ldr	r3, [pc, #288]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e268:	009b      	lsls	r3, r3, #2
 801e26a:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 801e26c:	4a46      	ldr	r2, [pc, #280]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e26e:	2152      	movs	r1, #82	; 0x52
 801e270:	5c52      	ldrb	r2, [r2, r1]
 801e272:	0112      	lsls	r2, r2, #4
 801e274:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 801e276:	4b44      	ldr	r3, [pc, #272]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e278:	2150      	movs	r1, #80	; 0x50
 801e27a:	5c5b      	ldrb	r3, [r3, r1]
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d001      	beq.n	801e284 <SX1276GetTimeOnAir+0x1f8>
 801e280:	2314      	movs	r3, #20
 801e282:	e000      	b.n	801e286 <SX1276GetTimeOnAir+0x1fa>
 801e284:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 801e286:	1ad3      	subs	r3, r2, r3
 801e288:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801e28a:	0018      	movs	r0, r3
 801e28c:	f7e4 fb00 	bl	8002890 <__aeabi_ui2d>
 801e290:	0004      	movs	r4, r0
 801e292:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 801e294:	4b3c      	ldr	r3, [pc, #240]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 801e298:	4b3b      	ldr	r3, [pc, #236]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e29a:	214c      	movs	r1, #76	; 0x4c
 801e29c:	5c5b      	ldrb	r3, [r3, r1]
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d001      	beq.n	801e2a6 <SX1276GetTimeOnAir+0x21a>
 801e2a2:	2302      	movs	r3, #2
 801e2a4:	e000      	b.n	801e2a8 <SX1276GetTimeOnAir+0x21c>
 801e2a6:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 801e2a8:	1ad3      	subs	r3, r2, r3
 801e2aa:	009b      	lsls	r3, r3, #2
 801e2ac:	0018      	movs	r0, r3
 801e2ae:	f7e4 faef 	bl	8002890 <__aeabi_ui2d>
 801e2b2:	0002      	movs	r2, r0
 801e2b4:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801e2b6:	0020      	movs	r0, r4
 801e2b8:	0029      	movs	r1, r5
 801e2ba:	f7e3 f8b5 	bl	8001428 <__aeabi_ddiv>
 801e2be:	0003      	movs	r3, r0
 801e2c0:	000c      	movs	r4, r1
 801e2c2:	0018      	movs	r0, r3
 801e2c4:	0021      	movs	r1, r4
 801e2c6:	f008 fa3f 	bl	8026748 <ceil>
 801e2ca:	0004      	movs	r4, r0
 801e2cc:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 801e2ce:	4b2e      	ldr	r3, [pc, #184]	; (801e388 <SX1276GetTimeOnAir+0x2fc>)
 801e2d0:	224d      	movs	r2, #77	; 0x4d
 801e2d2:	5c9b      	ldrb	r3, [r3, r2]
 801e2d4:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 801e2d6:	0018      	movs	r0, r3
 801e2d8:	f7e4 faa0 	bl	800281c <__aeabi_i2d>
 801e2dc:	0002      	movs	r2, r0
 801e2de:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 801e2e0:	0020      	movs	r0, r4
 801e2e2:	0029      	movs	r1, r5
 801e2e4:	f7e3 fcaa 	bl	8001c3c <__aeabi_dmul>
 801e2e8:	0003      	movs	r3, r0
 801e2ea:	000c      	movs	r4, r1
 801e2ec:	623b      	str	r3, [r7, #32]
 801e2ee:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 801e2f0:	2200      	movs	r2, #0
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	6a38      	ldr	r0, [r7, #32]
 801e2f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e2f8:	f7e2 f8ae 	bl	8000458 <__aeabi_dcmpgt>
 801e2fc:	1e03      	subs	r3, r0, #0
 801e2fe:	d008      	beq.n	801e312 <SX1276GetTimeOnAir+0x286>
 801e300:	2200      	movs	r2, #0
 801e302:	4b23      	ldr	r3, [pc, #140]	; (801e390 <SX1276GetTimeOnAir+0x304>)
 801e304:	6a38      	ldr	r0, [r7, #32]
 801e306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e308:	f7e2 fd72 	bl	8000df0 <__aeabi_dadd>
 801e30c:	0003      	movs	r3, r0
 801e30e:	000c      	movs	r4, r1
 801e310:	e001      	b.n	801e316 <SX1276GetTimeOnAir+0x28a>
 801e312:	2300      	movs	r3, #0
 801e314:	4c1e      	ldr	r4, [pc, #120]	; (801e390 <SX1276GetTimeOnAir+0x304>)
 801e316:	61bb      	str	r3, [r7, #24]
 801e318:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 801e31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e31e:	69b8      	ldr	r0, [r7, #24]
 801e320:	69f9      	ldr	r1, [r7, #28]
 801e322:	f7e3 fc8b 	bl	8001c3c <__aeabi_dmul>
 801e326:	0003      	movs	r3, r0
 801e328:	000c      	movs	r4, r1
 801e32a:	613b      	str	r3, [r7, #16]
 801e32c:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 801e32e:	693a      	ldr	r2, [r7, #16]
 801e330:	697b      	ldr	r3, [r7, #20]
 801e332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e336:	f7e2 fd5b 	bl	8000df0 <__aeabi_dadd>
 801e33a:	0003      	movs	r3, r0
 801e33c:	000c      	movs	r4, r1
 801e33e:	60bb      	str	r3, [r7, #8]
 801e340:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 801e342:	2200      	movs	r2, #0
 801e344:	4b13      	ldr	r3, [pc, #76]	; (801e394 <SX1276GetTimeOnAir+0x308>)
 801e346:	68b8      	ldr	r0, [r7, #8]
 801e348:	68f9      	ldr	r1, [r7, #12]
 801e34a:	f7e3 fc77 	bl	8001c3c <__aeabi_dmul>
 801e34e:	0003      	movs	r3, r0
 801e350:	000c      	movs	r4, r1
 801e352:	0018      	movs	r0, r3
 801e354:	0021      	movs	r1, r4
 801e356:	4a14      	ldr	r2, [pc, #80]	; (801e3a8 <SX1276GetTimeOnAir+0x31c>)
 801e358:	4b14      	ldr	r3, [pc, #80]	; (801e3ac <SX1276GetTimeOnAir+0x320>)
 801e35a:	f7e2 fd49 	bl	8000df0 <__aeabi_dadd>
 801e35e:	0003      	movs	r3, r0
 801e360:	000c      	movs	r4, r1
 801e362:	0018      	movs	r0, r3
 801e364:	0021      	movs	r1, r4
 801e366:	f008 fa71 	bl	802684c <floor>
 801e36a:	0003      	movs	r3, r0
 801e36c:	000c      	movs	r4, r1
 801e36e:	0018      	movs	r0, r3
 801e370:	0021      	movs	r1, r4
 801e372:	f7e2 f92d 	bl	80005d0 <__aeabi_d2uiz>
 801e376:	0003      	movs	r3, r0
 801e378:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 801e37a:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 801e37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801e37e:	0018      	movs	r0, r3
 801e380:	46bd      	mov	sp, r7
 801e382:	b014      	add	sp, #80	; 0x50
 801e384:	bdb0      	pop	{r4, r5, r7, pc}
 801e386:	46c0      	nop			; (mov r8, r8)
 801e388:	20002150 	.word	0x20002150
 801e38c:	3ff00000 	.word	0x3ff00000
 801e390:	40200000 	.word	0x40200000
 801e394:	408f4000 	.word	0x408f4000
 801e398:	40fe8480 	.word	0x40fe8480
 801e39c:	410e8480 	.word	0x410e8480
 801e3a0:	411e8480 	.word	0x411e8480
 801e3a4:	40110000 	.word	0x40110000
 801e3a8:	d916872b 	.word	0xd916872b
 801e3ac:	3feff7ce 	.word	0x3feff7ce

0801e3b0 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801e3b0:	b580      	push	{r7, lr}
 801e3b2:	b084      	sub	sp, #16
 801e3b4:	af00      	add	r7, sp, #0
 801e3b6:	6078      	str	r0, [r7, #4]
 801e3b8:	000a      	movs	r2, r1
 801e3ba:	1cfb      	adds	r3, r7, #3
 801e3bc:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276Send %d bytes\r\n",size));

    uint32_t txTimeout = 0;
 801e3be:	2300      	movs	r3, #0
 801e3c0:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801e3c2:	4b59      	ldr	r3, [pc, #356]	; (801e528 <SX1276Send+0x178>)
 801e3c4:	795b      	ldrb	r3, [r3, #5]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d002      	beq.n	801e3d0 <SX1276Send+0x20>
 801e3ca:	2b01      	cmp	r3, #1
 801e3cc:	d04c      	beq.n	801e468 <SX1276Send+0xb8>
 801e3ce:	e0a2      	b.n	801e516 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801e3d0:	4b55      	ldr	r3, [pc, #340]	; (801e528 <SX1276Send+0x178>)
 801e3d2:	2200      	movs	r2, #0
 801e3d4:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801e3d6:	1cfb      	adds	r3, r7, #3
 801e3d8:	781b      	ldrb	r3, [r3, #0]
 801e3da:	b29a      	uxth	r2, r3
 801e3dc:	4b52      	ldr	r3, [pc, #328]	; (801e528 <SX1276Send+0x178>)
 801e3de:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801e3e0:	4b51      	ldr	r3, [pc, #324]	; (801e528 <SX1276Send+0x178>)
 801e3e2:	2222      	movs	r2, #34	; 0x22
 801e3e4:	5c9b      	ldrb	r3, [r3, r2]
 801e3e6:	2201      	movs	r2, #1
 801e3e8:	4053      	eors	r3, r2
 801e3ea:	b2db      	uxtb	r3, r3
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d005      	beq.n	801e3fc <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801e3f0:	1cfb      	adds	r3, r7, #3
 801e3f2:	2101      	movs	r1, #1
 801e3f4:	0018      	movs	r0, r3
 801e3f6:	f000 fd3b 	bl	801ee70 <SX1276WriteFifo>
 801e3fa:	e005      	b.n	801e408 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801e3fc:	1cfb      	adds	r3, r7, #3
 801e3fe:	781b      	ldrb	r3, [r3, #0]
 801e400:	0019      	movs	r1, r3
 801e402:	2032      	movs	r0, #50	; 0x32
 801e404:	f000 fc6a 	bl	801ecdc <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801e408:	1cfb      	adds	r3, r7, #3
 801e40a:	781b      	ldrb	r3, [r3, #0]
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d009      	beq.n	801e424 <SX1276Send+0x74>
 801e410:	1cfb      	adds	r3, r7, #3
 801e412:	781b      	ldrb	r3, [r3, #0]
 801e414:	2b40      	cmp	r3, #64	; 0x40
 801e416:	d805      	bhi.n	801e424 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801e418:	1cfb      	adds	r3, r7, #3
 801e41a:	7819      	ldrb	r1, [r3, #0]
 801e41c:	4b42      	ldr	r3, [pc, #264]	; (801e528 <SX1276Send+0x178>)
 801e41e:	223f      	movs	r2, #63	; 0x3f
 801e420:	5499      	strb	r1, [r3, r2]
 801e422:	e00b      	b.n	801e43c <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 801e424:	1cfb      	adds	r3, r7, #3
 801e426:	781b      	ldrb	r3, [r3, #0]
 801e428:	b29a      	uxth	r2, r3
 801e42a:	6879      	ldr	r1, [r7, #4]
 801e42c:	4b3f      	ldr	r3, [pc, #252]	; (801e52c <SX1276Send+0x17c>)
 801e42e:	0018      	movs	r0, r3
 801e430:	f7fe fc54 	bl	801ccdc <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801e434:	4b3c      	ldr	r3, [pc, #240]	; (801e528 <SX1276Send+0x178>)
 801e436:	223f      	movs	r2, #63	; 0x3f
 801e438:	2120      	movs	r1, #32
 801e43a:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801e43c:	4b3a      	ldr	r3, [pc, #232]	; (801e528 <SX1276Send+0x178>)
 801e43e:	223f      	movs	r2, #63	; 0x3f
 801e440:	5c9a      	ldrb	r2, [r3, r2]
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	0011      	movs	r1, r2
 801e446:	0018      	movs	r0, r3
 801e448:	f000 fd12 	bl	801ee70 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801e44c:	4b36      	ldr	r3, [pc, #216]	; (801e528 <SX1276Send+0x178>)
 801e44e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801e450:	4b35      	ldr	r3, [pc, #212]	; (801e528 <SX1276Send+0x178>)
 801e452:	213f      	movs	r1, #63	; 0x3f
 801e454:	5c5b      	ldrb	r3, [r3, r1]
 801e456:	b29b      	uxth	r3, r3
 801e458:	18d3      	adds	r3, r2, r3
 801e45a:	b29a      	uxth	r2, r3
 801e45c:	4b32      	ldr	r3, [pc, #200]	; (801e528 <SX1276Send+0x178>)
 801e45e:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801e460:	4b31      	ldr	r3, [pc, #196]	; (801e528 <SX1276Send+0x178>)
 801e462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e464:	60fb      	str	r3, [r7, #12]
        }
        break;
 801e466:	e056      	b.n	801e516 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801e468:	4b2f      	ldr	r3, [pc, #188]	; (801e528 <SX1276Send+0x178>)
 801e46a:	2255      	movs	r2, #85	; 0x55
 801e46c:	5c9b      	ldrb	r3, [r3, r2]
 801e46e:	2b00      	cmp	r3, #0
 801e470:	d011      	beq.n	801e496 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801e472:	2033      	movs	r0, #51	; 0x33
 801e474:	f000 fc46 	bl	801ed04 <SX1276Read>
 801e478:	0003      	movs	r3, r0
 801e47a:	001a      	movs	r2, r3
 801e47c:	2341      	movs	r3, #65	; 0x41
 801e47e:	439a      	bics	r2, r3
 801e480:	0013      	movs	r3, r2
 801e482:	b2db      	uxtb	r3, r3
 801e484:	0019      	movs	r1, r3
 801e486:	2033      	movs	r0, #51	; 0x33
 801e488:	f000 fc28 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801e48c:	2119      	movs	r1, #25
 801e48e:	203b      	movs	r0, #59	; 0x3b
 801e490:	f000 fc24 	bl	801ecdc <SX1276Write>
 801e494:	e013      	b.n	801e4be <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801e496:	2033      	movs	r0, #51	; 0x33
 801e498:	f000 fc34 	bl	801ed04 <SX1276Read>
 801e49c:	0003      	movs	r3, r0
 801e49e:	b25b      	sxtb	r3, r3
 801e4a0:	2241      	movs	r2, #65	; 0x41
 801e4a2:	4393      	bics	r3, r2
 801e4a4:	b25b      	sxtb	r3, r3
 801e4a6:	2201      	movs	r2, #1
 801e4a8:	4313      	orrs	r3, r2
 801e4aa:	b25b      	sxtb	r3, r3
 801e4ac:	b2db      	uxtb	r3, r3
 801e4ae:	0019      	movs	r1, r3
 801e4b0:	2033      	movs	r0, #51	; 0x33
 801e4b2:	f000 fc13 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801e4b6:	211d      	movs	r1, #29
 801e4b8:	203b      	movs	r0, #59	; 0x3b
 801e4ba:	f000 fc0f 	bl	801ecdc <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801e4be:	1cfb      	adds	r3, r7, #3
 801e4c0:	7819      	ldrb	r1, [r3, #0]
 801e4c2:	4b19      	ldr	r3, [pc, #100]	; (801e528 <SX1276Send+0x178>)
 801e4c4:	2264      	movs	r2, #100	; 0x64
 801e4c6:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801e4c8:	1cfb      	adds	r3, r7, #3
 801e4ca:	781b      	ldrb	r3, [r3, #0]
 801e4cc:	0019      	movs	r1, r3
 801e4ce:	2022      	movs	r0, #34	; 0x22
 801e4d0:	f000 fc04 	bl	801ecdc <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801e4d4:	2100      	movs	r1, #0
 801e4d6:	200e      	movs	r0, #14
 801e4d8:	f000 fc00 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801e4dc:	2100      	movs	r1, #0
 801e4de:	200d      	movs	r0, #13
 801e4e0:	f000 fbfc 	bl	801ecdc <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801e4e4:	2001      	movs	r0, #1
 801e4e6:	f000 fc0d 	bl	801ed04 <SX1276Read>
 801e4ea:	0003      	movs	r3, r0
 801e4ec:	001a      	movs	r2, r3
 801e4ee:	23f8      	movs	r3, #248	; 0xf8
 801e4f0:	439a      	bics	r2, r3
 801e4f2:	1e13      	subs	r3, r2, #0
 801e4f4:	d104      	bne.n	801e500 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801e4f6:	f000 f835 	bl	801e564 <SX1276SetStby>
                DelayMs( 1 );
 801e4fa:	2001      	movs	r0, #1
 801e4fc:	f006 fdac 	bl	8025058 <itsdk_delayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801e500:	1cfb      	adds	r3, r7, #3
 801e502:	781a      	ldrb	r2, [r3, #0]
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	0011      	movs	r1, r2
 801e508:	0018      	movs	r0, r3
 801e50a:	f000 fcb1 	bl	801ee70 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801e50e:	4b06      	ldr	r3, [pc, #24]	; (801e528 <SX1276Send+0x178>)
 801e510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e512:	60fb      	str	r3, [r7, #12]
        }
        break;
 801e514:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	0018      	movs	r0, r3
 801e51a:	f000 f9cd 	bl	801e8b8 <SX1276SetTx>
}
 801e51e:	46c0      	nop			; (mov r8, r8)
 801e520:	46bd      	mov	sp, r7
 801e522:	b004      	add	sp, #16
 801e524:	bd80      	pop	{r7, pc}
 801e526:	46c0      	nop			; (mov r8, r8)
 801e528:	20002150 	.word	0x20002150
 801e52c:	20001c24 	.word	0x20001c24

0801e530 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801e530:	b580      	push	{r7, lr}
 801e532:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetSleep\r\n"));

    TimerStop( &RxTimeoutTimer );
 801e534:	4b08      	ldr	r3, [pc, #32]	; (801e558 <SX1276SetSleep+0x28>)
 801e536:	0018      	movs	r0, r3
 801e538:	f7fe fb4e 	bl	801cbd8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 801e53c:	4b07      	ldr	r3, [pc, #28]	; (801e55c <SX1276SetSleep+0x2c>)
 801e53e:	0018      	movs	r0, r3
 801e540:	f7fe fb4a 	bl	801cbd8 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801e544:	2000      	movs	r0, #0
 801e546:	f000 fb21 	bl	801eb8c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801e54a:	4b05      	ldr	r3, [pc, #20]	; (801e560 <SX1276SetSleep+0x30>)
 801e54c:	2200      	movs	r2, #0
 801e54e:	711a      	strb	r2, [r3, #4]
}
 801e550:	46c0      	nop			; (mov r8, r8)
 801e552:	46bd      	mov	sp, r7
 801e554:	bd80      	pop	{r7, pc}
 801e556:	46c0      	nop			; (mov r8, r8)
 801e558:	200021b8 	.word	0x200021b8
 801e55c:	20002120 	.word	0x20002120
 801e560:	20002150 	.word	0x20002150

0801e564 <SX1276SetStby>:

void SX1276SetStby( void )
{
 801e564:	b580      	push	{r7, lr}
 801e566:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276SetStby\r\n"));

    TimerStop( &RxTimeoutTimer );
 801e568:	4b08      	ldr	r3, [pc, #32]	; (801e58c <SX1276SetStby+0x28>)
 801e56a:	0018      	movs	r0, r3
 801e56c:	f7fe fb34 	bl	801cbd8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 801e570:	4b07      	ldr	r3, [pc, #28]	; (801e590 <SX1276SetStby+0x2c>)
 801e572:	0018      	movs	r0, r3
 801e574:	f7fe fb30 	bl	801cbd8 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801e578:	2001      	movs	r0, #1
 801e57a:	f000 fb07 	bl	801eb8c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801e57e:	4b05      	ldr	r3, [pc, #20]	; (801e594 <SX1276SetStby+0x30>)
 801e580:	2200      	movs	r2, #0
 801e582:	711a      	strb	r2, [r3, #4]
}
 801e584:	46c0      	nop			; (mov r8, r8)
 801e586:	46bd      	mov	sp, r7
 801e588:	bd80      	pop	{r7, pc}
 801e58a:	46c0      	nop			; (mov r8, r8)
 801e58c:	200021b8 	.word	0x200021b8
 801e590:	20002120 	.word	0x20002120
 801e594:	20002150 	.word	0x20002150

0801e598 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801e598:	b580      	push	{r7, lr}
 801e59a:	b084      	sub	sp, #16
 801e59c:	af00      	add	r7, sp, #0
 801e59e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276SetRx (%d)\r\n",timeout));

    bool rxContinuous = false;
 801e5a0:	230f      	movs	r3, #15
 801e5a2:	18fb      	adds	r3, r7, r3
 801e5a4:	2200      	movs	r2, #0
 801e5a6:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.Modem )
 801e5a8:	4bb8      	ldr	r3, [pc, #736]	; (801e88c <SX1276SetRx+0x2f4>)
 801e5aa:	795b      	ldrb	r3, [r3, #5]
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d002      	beq.n	801e5b6 <SX1276SetRx+0x1e>
 801e5b0:	2b01      	cmp	r3, #1
 801e5b2:	d041      	beq.n	801e638 <SX1276SetRx+0xa0>
 801e5b4:	e128      	b.n	801e808 <SX1276SetRx+0x270>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801e5b6:	230f      	movs	r3, #15
 801e5b8:	18fb      	adds	r3, r7, r3
 801e5ba:	4ab4      	ldr	r2, [pc, #720]	; (801e88c <SX1276SetRx+0x2f4>)
 801e5bc:	2126      	movs	r1, #38	; 0x26
 801e5be:	5c52      	ldrb	r2, [r2, r1]
 801e5c0:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801e5c2:	2040      	movs	r0, #64	; 0x40
 801e5c4:	f000 fb9e 	bl	801ed04 <SX1276Read>
 801e5c8:	0003      	movs	r3, r0
 801e5ca:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801e5cc:	2203      	movs	r2, #3
 801e5ce:	4013      	ands	r3, r2
 801e5d0:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801e5d2:	220c      	movs	r2, #12
 801e5d4:	4313      	orrs	r3, r2
 801e5d6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801e5d8:	b2db      	uxtb	r3, r3
 801e5da:	0019      	movs	r1, r3
 801e5dc:	2040      	movs	r0, #64	; 0x40
 801e5de:	f000 fb7d 	bl	801ecdc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801e5e2:	2041      	movs	r0, #65	; 0x41
 801e5e4:	f000 fb8e 	bl	801ed04 <SX1276Read>
 801e5e8:	0003      	movs	r3, r0
 801e5ea:	001a      	movs	r2, r3
 801e5ec:	233f      	movs	r3, #63	; 0x3f
 801e5ee:	425b      	negs	r3, r3
 801e5f0:	4313      	orrs	r3, r2
 801e5f2:	b2db      	uxtb	r3, r3
 801e5f4:	0019      	movs	r1, r3
 801e5f6:	2041      	movs	r0, #65	; 0x41
 801e5f8:	f000 fb70 	bl	801ecdc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801e5fc:	2035      	movs	r0, #53	; 0x35
 801e5fe:	f000 fb81 	bl	801ed04 <SX1276Read>
 801e602:	0003      	movs	r3, r0
 801e604:	001a      	movs	r2, r3
 801e606:	233f      	movs	r3, #63	; 0x3f
 801e608:	4013      	ands	r3, r2
 801e60a:	b2d9      	uxtb	r1, r3
 801e60c:	4b9f      	ldr	r3, [pc, #636]	; (801e88c <SX1276SetRx+0x2f4>)
 801e60e:	223e      	movs	r2, #62	; 0x3e
 801e610:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801e612:	211e      	movs	r1, #30
 801e614:	200d      	movs	r0, #13
 801e616:	f000 fb61 	bl	801ecdc <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801e61a:	4b9c      	ldr	r3, [pc, #624]	; (801e88c <SX1276SetRx+0x2f4>)
 801e61c:	2230      	movs	r2, #48	; 0x30
 801e61e:	2100      	movs	r1, #0
 801e620:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801e622:	4b9a      	ldr	r3, [pc, #616]	; (801e88c <SX1276SetRx+0x2f4>)
 801e624:	2231      	movs	r2, #49	; 0x31
 801e626:	2100      	movs	r1, #0
 801e628:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801e62a:	4b98      	ldr	r3, [pc, #608]	; (801e88c <SX1276SetRx+0x2f4>)
 801e62c:	2200      	movs	r2, #0
 801e62e:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801e630:	4b96      	ldr	r3, [pc, #600]	; (801e88c <SX1276SetRx+0x2f4>)
 801e632:	2200      	movs	r2, #0
 801e634:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801e636:	e0e7      	b.n	801e808 <SX1276SetRx+0x270>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801e638:	4b94      	ldr	r3, [pc, #592]	; (801e88c <SX1276SetRx+0x2f4>)
 801e63a:	2255      	movs	r2, #85	; 0x55
 801e63c:	5c9b      	ldrb	r3, [r3, r2]
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d010      	beq.n	801e664 <SX1276SetRx+0xcc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801e642:	2033      	movs	r0, #51	; 0x33
 801e644:	f000 fb5e 	bl	801ed04 <SX1276Read>
 801e648:	0003      	movs	r3, r0
 801e64a:	001a      	movs	r2, r3
 801e64c:	2341      	movs	r3, #65	; 0x41
 801e64e:	4313      	orrs	r3, r2
 801e650:	b2db      	uxtb	r3, r3
 801e652:	0019      	movs	r1, r3
 801e654:	2033      	movs	r0, #51	; 0x33
 801e656:	f000 fb41 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801e65a:	2119      	movs	r1, #25
 801e65c:	203b      	movs	r0, #59	; 0x3b
 801e65e:	f000 fb3d 	bl	801ecdc <SX1276Write>
 801e662:	e013      	b.n	801e68c <SX1276SetRx+0xf4>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801e664:	2033      	movs	r0, #51	; 0x33
 801e666:	f000 fb4d 	bl	801ed04 <SX1276Read>
 801e66a:	0003      	movs	r3, r0
 801e66c:	b25b      	sxtb	r3, r3
 801e66e:	2241      	movs	r2, #65	; 0x41
 801e670:	4393      	bics	r3, r2
 801e672:	b25b      	sxtb	r3, r3
 801e674:	2201      	movs	r2, #1
 801e676:	4313      	orrs	r3, r2
 801e678:	b25b      	sxtb	r3, r3
 801e67a:	b2db      	uxtb	r3, r3
 801e67c:	0019      	movs	r1, r3
 801e67e:	2033      	movs	r0, #51	; 0x33
 801e680:	f000 fb2c 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801e684:	211d      	movs	r1, #29
 801e686:	203b      	movs	r0, #59	; 0x3b
 801e688:	f000 fb28 	bl	801ecdc <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801e68c:	4b7f      	ldr	r3, [pc, #508]	; (801e88c <SX1276SetRx+0x2f4>)
 801e68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e690:	2b08      	cmp	r3, #8
 801e692:	d900      	bls.n	801e696 <SX1276SetRx+0xfe>
 801e694:	e076      	b.n	801e784 <SX1276SetRx+0x1ec>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801e696:	2031      	movs	r0, #49	; 0x31
 801e698:	f000 fb34 	bl	801ed04 <SX1276Read>
 801e69c:	0003      	movs	r3, r0
 801e69e:	001a      	movs	r2, r3
 801e6a0:	237f      	movs	r3, #127	; 0x7f
 801e6a2:	4013      	ands	r3, r2
 801e6a4:	b2db      	uxtb	r3, r3
 801e6a6:	0019      	movs	r1, r3
 801e6a8:	2031      	movs	r0, #49	; 0x31
 801e6aa:	f000 fb17 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801e6ae:	2100      	movs	r1, #0
 801e6b0:	2030      	movs	r0, #48	; 0x30
 801e6b2:	f000 fb13 	bl	801ecdc <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801e6b6:	4b75      	ldr	r3, [pc, #468]	; (801e88c <SX1276SetRx+0x2f4>)
 801e6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e6ba:	2b08      	cmp	r3, #8
 801e6bc:	d86f      	bhi.n	801e79e <SX1276SetRx+0x206>
 801e6be:	009a      	lsls	r2, r3, #2
 801e6c0:	4b73      	ldr	r3, [pc, #460]	; (801e890 <SX1276SetRx+0x2f8>)
 801e6c2:	18d3      	adds	r3, r2, r3
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801e6c8:	2148      	movs	r1, #72	; 0x48
 801e6ca:	202f      	movs	r0, #47	; 0x2f
 801e6cc:	f000 fb06 	bl	801ecdc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801e6d0:	4b6e      	ldr	r3, [pc, #440]	; (801e88c <SX1276SetRx+0x2f4>)
 801e6d2:	689b      	ldr	r3, [r3, #8]
 801e6d4:	4a6f      	ldr	r2, [pc, #444]	; (801e894 <SX1276SetRx+0x2fc>)
 801e6d6:	4694      	mov	ip, r2
 801e6d8:	4463      	add	r3, ip
 801e6da:	0018      	movs	r0, r3
 801e6dc:	f7fe feb6 	bl	801d44c <SX1276SetChannel>
                    break;
 801e6e0:	e05d      	b.n	801e79e <SX1276SetRx+0x206>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e6e2:	2144      	movs	r1, #68	; 0x44
 801e6e4:	202f      	movs	r0, #47	; 0x2f
 801e6e6:	f000 faf9 	bl	801ecdc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801e6ea:	4b68      	ldr	r3, [pc, #416]	; (801e88c <SX1276SetRx+0x2f4>)
 801e6ec:	689b      	ldr	r3, [r3, #8]
 801e6ee:	4a6a      	ldr	r2, [pc, #424]	; (801e898 <SX1276SetRx+0x300>)
 801e6f0:	4694      	mov	ip, r2
 801e6f2:	4463      	add	r3, ip
 801e6f4:	0018      	movs	r0, r3
 801e6f6:	f7fe fea9 	bl	801d44c <SX1276SetChannel>
                    break;
 801e6fa:	e050      	b.n	801e79e <SX1276SetRx+0x206>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e6fc:	2144      	movs	r1, #68	; 0x44
 801e6fe:	202f      	movs	r0, #47	; 0x2f
 801e700:	f000 faec 	bl	801ecdc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801e704:	4b61      	ldr	r3, [pc, #388]	; (801e88c <SX1276SetRx+0x2f4>)
 801e706:	689b      	ldr	r3, [r3, #8]
 801e708:	4a64      	ldr	r2, [pc, #400]	; (801e89c <SX1276SetRx+0x304>)
 801e70a:	4694      	mov	ip, r2
 801e70c:	4463      	add	r3, ip
 801e70e:	0018      	movs	r0, r3
 801e710:	f7fe fe9c 	bl	801d44c <SX1276SetChannel>
                    break;
 801e714:	e043      	b.n	801e79e <SX1276SetRx+0x206>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e716:	2144      	movs	r1, #68	; 0x44
 801e718:	202f      	movs	r0, #47	; 0x2f
 801e71a:	f000 fadf 	bl	801ecdc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801e71e:	4b5b      	ldr	r3, [pc, #364]	; (801e88c <SX1276SetRx+0x2f4>)
 801e720:	689b      	ldr	r3, [r3, #8]
 801e722:	4a5f      	ldr	r2, [pc, #380]	; (801e8a0 <SX1276SetRx+0x308>)
 801e724:	4694      	mov	ip, r2
 801e726:	4463      	add	r3, ip
 801e728:	0018      	movs	r0, r3
 801e72a:	f7fe fe8f 	bl	801d44c <SX1276SetChannel>
                    break;
 801e72e:	e036      	b.n	801e79e <SX1276SetRx+0x206>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e730:	2144      	movs	r1, #68	; 0x44
 801e732:	202f      	movs	r0, #47	; 0x2f
 801e734:	f000 fad2 	bl	801ecdc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801e738:	4b54      	ldr	r3, [pc, #336]	; (801e88c <SX1276SetRx+0x2f4>)
 801e73a:	689b      	ldr	r3, [r3, #8]
 801e73c:	4a59      	ldr	r2, [pc, #356]	; (801e8a4 <SX1276SetRx+0x30c>)
 801e73e:	4694      	mov	ip, r2
 801e740:	4463      	add	r3, ip
 801e742:	0018      	movs	r0, r3
 801e744:	f7fe fe82 	bl	801d44c <SX1276SetChannel>
                    break;
 801e748:	e029      	b.n	801e79e <SX1276SetRx+0x206>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801e74a:	2144      	movs	r1, #68	; 0x44
 801e74c:	202f      	movs	r0, #47	; 0x2f
 801e74e:	f000 fac5 	bl	801ecdc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801e752:	4b4e      	ldr	r3, [pc, #312]	; (801e88c <SX1276SetRx+0x2f4>)
 801e754:	689b      	ldr	r3, [r3, #8]
 801e756:	4a54      	ldr	r2, [pc, #336]	; (801e8a8 <SX1276SetRx+0x310>)
 801e758:	4694      	mov	ip, r2
 801e75a:	4463      	add	r3, ip
 801e75c:	0018      	movs	r0, r3
 801e75e:	f7fe fe75 	bl	801d44c <SX1276SetChannel>
                    break;
 801e762:	e01c      	b.n	801e79e <SX1276SetRx+0x206>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801e764:	2140      	movs	r1, #64	; 0x40
 801e766:	202f      	movs	r0, #47	; 0x2f
 801e768:	f000 fab8 	bl	801ecdc <SX1276Write>
                    break;
 801e76c:	e017      	b.n	801e79e <SX1276SetRx+0x206>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801e76e:	2140      	movs	r1, #64	; 0x40
 801e770:	202f      	movs	r0, #47	; 0x2f
 801e772:	f000 fab3 	bl	801ecdc <SX1276Write>
                    break;
 801e776:	e012      	b.n	801e79e <SX1276SetRx+0x206>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801e778:	2140      	movs	r1, #64	; 0x40
 801e77a:	202f      	movs	r0, #47	; 0x2f
 801e77c:	f000 faae 	bl	801ecdc <SX1276Write>
                    break;
 801e780:	46c0      	nop			; (mov r8, r8)
 801e782:	e00c      	b.n	801e79e <SX1276SetRx+0x206>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801e784:	2031      	movs	r0, #49	; 0x31
 801e786:	f000 fabd 	bl	801ed04 <SX1276Read>
 801e78a:	0003      	movs	r3, r0
 801e78c:	001a      	movs	r2, r3
 801e78e:	2380      	movs	r3, #128	; 0x80
 801e790:	425b      	negs	r3, r3
 801e792:	4313      	orrs	r3, r2
 801e794:	b2db      	uxtb	r3, r3
 801e796:	0019      	movs	r1, r3
 801e798:	2031      	movs	r0, #49	; 0x31
 801e79a:	f000 fa9f 	bl	801ecdc <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801e79e:	230f      	movs	r3, #15
 801e7a0:	18fb      	adds	r3, r7, r3
 801e7a2:	4a3a      	ldr	r2, [pc, #232]	; (801e88c <SX1276SetRx+0x2f4>)
 801e7a4:	2156      	movs	r1, #86	; 0x56
 801e7a6:	5c52      	ldrb	r2, [r2, r1]
 801e7a8:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801e7aa:	4b38      	ldr	r3, [pc, #224]	; (801e88c <SX1276SetRx+0x2f4>)
 801e7ac:	2253      	movs	r2, #83	; 0x53
 801e7ae:	5c9b      	ldrb	r3, [r3, r2]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d010      	beq.n	801e7d6 <SX1276SetRx+0x23e>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801e7b4:	211d      	movs	r1, #29
 801e7b6:	2011      	movs	r0, #17
 801e7b8:	f000 fa90 	bl	801ecdc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801e7bc:	2040      	movs	r0, #64	; 0x40
 801e7be:	f000 faa1 	bl	801ed04 <SX1276Read>
 801e7c2:	0003      	movs	r3, r0
 801e7c4:	001a      	movs	r2, r3
 801e7c6:	2333      	movs	r3, #51	; 0x33
 801e7c8:	4013      	ands	r3, r2
 801e7ca:	b2db      	uxtb	r3, r3
 801e7cc:	0019      	movs	r1, r3
 801e7ce:	2040      	movs	r0, #64	; 0x40
 801e7d0:	f000 fa84 	bl	801ecdc <SX1276Write>
 801e7d4:	e00f      	b.n	801e7f6 <SX1276SetRx+0x25e>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801e7d6:	211f      	movs	r1, #31
 801e7d8:	2011      	movs	r0, #17
 801e7da:	f000 fa7f 	bl	801ecdc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801e7de:	2040      	movs	r0, #64	; 0x40
 801e7e0:	f000 fa90 	bl	801ed04 <SX1276Read>
 801e7e4:	0003      	movs	r3, r0
 801e7e6:	001a      	movs	r2, r3
 801e7e8:	233f      	movs	r3, #63	; 0x3f
 801e7ea:	4013      	ands	r3, r2
 801e7ec:	b2db      	uxtb	r3, r3
 801e7ee:	0019      	movs	r1, r3
 801e7f0:	2040      	movs	r0, #64	; 0x40
 801e7f2:	f000 fa73 	bl	801ecdc <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801e7f6:	2100      	movs	r1, #0
 801e7f8:	200f      	movs	r0, #15
 801e7fa:	f000 fa6f 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801e7fe:	2100      	movs	r1, #0
 801e800:	200d      	movs	r0, #13
 801e802:	f000 fa6b 	bl	801ecdc <SX1276Write>
        }
        break;
 801e806:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801e808:	2380      	movs	r3, #128	; 0x80
 801e80a:	005a      	lsls	r2, r3, #1
 801e80c:	4b27      	ldr	r3, [pc, #156]	; (801e8ac <SX1276SetRx+0x314>)
 801e80e:	2100      	movs	r1, #0
 801e810:	0018      	movs	r0, r3
 801e812:	f007 fb8d 	bl	8025f30 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801e816:	4b1d      	ldr	r3, [pc, #116]	; (801e88c <SX1276SetRx+0x2f4>)
 801e818:	2201      	movs	r2, #1
 801e81a:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d009      	beq.n	801e836 <SX1276SetRx+0x29e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801e822:	687a      	ldr	r2, [r7, #4]
 801e824:	4b22      	ldr	r3, [pc, #136]	; (801e8b0 <SX1276SetRx+0x318>)
 801e826:	0011      	movs	r1, r2
 801e828:	0018      	movs	r0, r3
 801e82a:	f7fe f953 	bl	801cad4 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 801e82e:	4b20      	ldr	r3, [pc, #128]	; (801e8b0 <SX1276SetRx+0x318>)
 801e830:	0018      	movs	r0, r3
 801e832:	f7fe f97b 	bl	801cb2c <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801e836:	4b15      	ldr	r3, [pc, #84]	; (801e88c <SX1276SetRx+0x2f4>)
 801e838:	795b      	ldrb	r3, [r3, #5]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d116      	bne.n	801e86c <SX1276SetRx+0x2d4>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801e83e:	2005      	movs	r0, #5
 801e840:	f000 f9a4 	bl	801eb8c <SX1276SetOpMode>

        if( rxContinuous == false )
 801e844:	230f      	movs	r3, #15
 801e846:	18fb      	adds	r3, r7, r3
 801e848:	781b      	ldrb	r3, [r3, #0]
 801e84a:	2201      	movs	r2, #1
 801e84c:	4053      	eors	r3, r2
 801e84e:	b2db      	uxtb	r3, r3
 801e850:	2b00      	cmp	r3, #0
 801e852:	d017      	beq.n	801e884 <SX1276SetRx+0x2ec>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801e854:	4b0d      	ldr	r3, [pc, #52]	; (801e88c <SX1276SetRx+0x2f4>)
 801e856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e858:	4b16      	ldr	r3, [pc, #88]	; (801e8b4 <SX1276SetRx+0x31c>)
 801e85a:	0011      	movs	r1, r2
 801e85c:	0018      	movs	r0, r3
 801e85e:	f7fe f939 	bl	801cad4 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 801e862:	4b14      	ldr	r3, [pc, #80]	; (801e8b4 <SX1276SetRx+0x31c>)
 801e864:	0018      	movs	r0, r3
 801e866:	f7fe f961 	bl	801cb2c <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801e86a:	e00b      	b.n	801e884 <SX1276SetRx+0x2ec>
        if( rxContinuous == true )
 801e86c:	230f      	movs	r3, #15
 801e86e:	18fb      	adds	r3, r7, r3
 801e870:	781b      	ldrb	r3, [r3, #0]
 801e872:	2b00      	cmp	r3, #0
 801e874:	d003      	beq.n	801e87e <SX1276SetRx+0x2e6>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801e876:	2005      	movs	r0, #5
 801e878:	f000 f988 	bl	801eb8c <SX1276SetOpMode>
}
 801e87c:	e002      	b.n	801e884 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801e87e:	2006      	movs	r0, #6
 801e880:	f000 f984 	bl	801eb8c <SX1276SetOpMode>
}
 801e884:	46c0      	nop			; (mov r8, r8)
 801e886:	46bd      	mov	sp, r7
 801e888:	b004      	add	sp, #16
 801e88a:	bd80      	pop	{r7, pc}
 801e88c:	20002150 	.word	0x20002150
 801e890:	08028ab8 	.word	0x08028ab8
 801e894:	00001e82 	.word	0x00001e82
 801e898:	000028b4 	.word	0x000028b4
 801e89c:	00003d04 	.word	0x00003d04
 801e8a0:	0000515e 	.word	0x0000515e
 801e8a4:	00007a12 	.word	0x00007a12
 801e8a8:	0000a2c6 	.word	0x0000a2c6
 801e8ac:	20001c24 	.word	0x20001c24
 801e8b0:	200021b8 	.word	0x200021b8
 801e8b4:	20002138 	.word	0x20002138

0801e8b8 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 801e8b8:	b580      	push	{r7, lr}
 801e8ba:	b082      	sub	sp, #8
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	6078      	str	r0, [r7, #4]
    LOG_INFO_SX1276((">> SX1276SetTx (%d)\r\n",timeout));

    TimerSetValue( &TxTimeoutTimer, timeout );
 801e8c0:	687a      	ldr	r2, [r7, #4]
 801e8c2:	4b38      	ldr	r3, [pc, #224]	; (801e9a4 <SX1276SetTx+0xec>)
 801e8c4:	0011      	movs	r1, r2
 801e8c6:	0018      	movs	r0, r3
 801e8c8:	f7fe f904 	bl	801cad4 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 801e8cc:	4b36      	ldr	r3, [pc, #216]	; (801e9a8 <SX1276SetTx+0xf0>)
 801e8ce:	795b      	ldrb	r3, [r3, #5]
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	d002      	beq.n	801e8da <SX1276SetTx+0x22>
 801e8d4:	2b01      	cmp	r3, #1
 801e8d6:	d028      	beq.n	801e92a <SX1276SetTx+0x72>
 801e8d8:	e056      	b.n	801e988 <SX1276SetTx+0xd0>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801e8da:	2040      	movs	r0, #64	; 0x40
 801e8dc:	f000 fa12 	bl	801ed04 <SX1276Read>
 801e8e0:	0003      	movs	r3, r0
 801e8e2:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 801e8e4:	2203      	movs	r2, #3
 801e8e6:	4013      	ands	r3, r2
 801e8e8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 801e8ea:	2210      	movs	r2, #16
 801e8ec:	4313      	orrs	r3, r2
 801e8ee:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801e8f0:	b2db      	uxtb	r3, r3
 801e8f2:	0019      	movs	r1, r3
 801e8f4:	2040      	movs	r0, #64	; 0x40
 801e8f6:	f000 f9f1 	bl	801ecdc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801e8fa:	2041      	movs	r0, #65	; 0x41
 801e8fc:	f000 fa02 	bl	801ed04 <SX1276Read>
 801e900:	0003      	movs	r3, r0
 801e902:	001a      	movs	r2, r3
 801e904:	233e      	movs	r3, #62	; 0x3e
 801e906:	4013      	ands	r3, r2
 801e908:	b2db      	uxtb	r3, r3
 801e90a:	0019      	movs	r1, r3
 801e90c:	2041      	movs	r0, #65	; 0x41
 801e90e:	f000 f9e5 	bl	801ecdc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801e912:	2035      	movs	r0, #53	; 0x35
 801e914:	f000 f9f6 	bl	801ed04 <SX1276Read>
 801e918:	0003      	movs	r3, r0
 801e91a:	001a      	movs	r2, r3
 801e91c:	233f      	movs	r3, #63	; 0x3f
 801e91e:	4013      	ands	r3, r2
 801e920:	b2d9      	uxtb	r1, r3
 801e922:	4b21      	ldr	r3, [pc, #132]	; (801e9a8 <SX1276SetTx+0xf0>)
 801e924:	223e      	movs	r2, #62	; 0x3e
 801e926:	5499      	strb	r1, [r3, r2]
        }
        break;
 801e928:	e02e      	b.n	801e988 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801e92a:	4b1f      	ldr	r3, [pc, #124]	; (801e9a8 <SX1276SetTx+0xf0>)
 801e92c:	2253      	movs	r2, #83	; 0x53
 801e92e:	5c9b      	ldrb	r3, [r3, r2]
 801e930:	2b00      	cmp	r3, #0
 801e932:	d014      	beq.n	801e95e <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801e934:	21f5      	movs	r1, #245	; 0xf5
 801e936:	2011      	movs	r0, #17
 801e938:	f000 f9d0 	bl	801ecdc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801e93c:	2040      	movs	r0, #64	; 0x40
 801e93e:	f000 f9e1 	bl	801ed04 <SX1276Read>
 801e942:	0003      	movs	r3, r0
 801e944:	b25b      	sxtb	r3, r3
 801e946:	2233      	movs	r2, #51	; 0x33
 801e948:	4013      	ands	r3, r2
 801e94a:	b25b      	sxtb	r3, r3
 801e94c:	2240      	movs	r2, #64	; 0x40
 801e94e:	4313      	orrs	r3, r2
 801e950:	b25b      	sxtb	r3, r3
 801e952:	b2db      	uxtb	r3, r3
 801e954:	0019      	movs	r1, r3
 801e956:	2040      	movs	r0, #64	; 0x40
 801e958:	f000 f9c0 	bl	801ecdc <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801e95c:	e013      	b.n	801e986 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801e95e:	21f7      	movs	r1, #247	; 0xf7
 801e960:	2011      	movs	r0, #17
 801e962:	f000 f9bb 	bl	801ecdc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801e966:	2040      	movs	r0, #64	; 0x40
 801e968:	f000 f9cc 	bl	801ed04 <SX1276Read>
 801e96c:	0003      	movs	r3, r0
 801e96e:	b25b      	sxtb	r3, r3
 801e970:	223f      	movs	r2, #63	; 0x3f
 801e972:	4013      	ands	r3, r2
 801e974:	b25b      	sxtb	r3, r3
 801e976:	2240      	movs	r2, #64	; 0x40
 801e978:	4313      	orrs	r3, r2
 801e97a:	b25b      	sxtb	r3, r3
 801e97c:	b2db      	uxtb	r3, r3
 801e97e:	0019      	movs	r1, r3
 801e980:	2040      	movs	r0, #64	; 0x40
 801e982:	f000 f9ab 	bl	801ecdc <SX1276Write>
        break;
 801e986:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801e988:	4b07      	ldr	r3, [pc, #28]	; (801e9a8 <SX1276SetTx+0xf0>)
 801e98a:	2202      	movs	r2, #2
 801e98c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801e98e:	4b05      	ldr	r3, [pc, #20]	; (801e9a4 <SX1276SetTx+0xec>)
 801e990:	0018      	movs	r0, r3
 801e992:	f7fe f8cb 	bl	801cb2c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801e996:	2003      	movs	r0, #3
 801e998:	f000 f8f8 	bl	801eb8c <SX1276SetOpMode>
}
 801e99c:	46c0      	nop			; (mov r8, r8)
 801e99e:	46bd      	mov	sp, r7
 801e9a0:	b002      	add	sp, #8
 801e9a2:	bd80      	pop	{r7, pc}
 801e9a4:	20002120 	.word	0x20002120
 801e9a8:	20002150 	.word	0x20002150

0801e9ac <SX1276StartCad>:

void SX1276StartCad( void )
{
 801e9ac:	b580      	push	{r7, lr}
 801e9ae:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276StartCad\r\n"));

    switch( SX1276.Settings.Modem )
 801e9b0:	4b11      	ldr	r3, [pc, #68]	; (801e9f8 <SX1276StartCad+0x4c>)
 801e9b2:	795b      	ldrb	r3, [r3, #5]
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d01a      	beq.n	801e9ee <SX1276StartCad+0x42>
 801e9b8:	2b01      	cmp	r3, #1
 801e9ba:	d000      	beq.n	801e9be <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801e9bc:	e018      	b.n	801e9f0 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801e9be:	21fa      	movs	r1, #250	; 0xfa
 801e9c0:	2011      	movs	r0, #17
 801e9c2:	f000 f98b 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801e9c6:	2040      	movs	r0, #64	; 0x40
 801e9c8:	f000 f99c 	bl	801ed04 <SX1276Read>
 801e9cc:	0003      	movs	r3, r0
 801e9ce:	001a      	movs	r2, r3
 801e9d0:	2303      	movs	r3, #3
 801e9d2:	439a      	bics	r2, r3
 801e9d4:	0013      	movs	r3, r2
 801e9d6:	b2db      	uxtb	r3, r3
 801e9d8:	0019      	movs	r1, r3
 801e9da:	2040      	movs	r0, #64	; 0x40
 801e9dc:	f000 f97e 	bl	801ecdc <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801e9e0:	4b05      	ldr	r3, [pc, #20]	; (801e9f8 <SX1276StartCad+0x4c>)
 801e9e2:	2203      	movs	r2, #3
 801e9e4:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801e9e6:	2007      	movs	r0, #7
 801e9e8:	f000 f8d0 	bl	801eb8c <SX1276SetOpMode>
        break;
 801e9ec:	e000      	b.n	801e9f0 <SX1276StartCad+0x44>
        break;
 801e9ee:	46c0      	nop			; (mov r8, r8)
    }
}
 801e9f0:	46c0      	nop			; (mov r8, r8)
 801e9f2:	46bd      	mov	sp, r7
 801e9f4:	bd80      	pop	{r7, pc}
 801e9f6:	46c0      	nop			; (mov r8, r8)
 801e9f8:	20002150 	.word	0x20002150

0801e9fc <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801e9fc:	b580      	push	{r7, lr}
 801e9fe:	b08e      	sub	sp, #56	; 0x38
 801ea00:	af0a      	add	r7, sp, #40	; 0x28
 801ea02:	6078      	str	r0, [r7, #4]
 801ea04:	0008      	movs	r0, r1
 801ea06:	0011      	movs	r1, r2
 801ea08:	1cfb      	adds	r3, r7, #3
 801ea0a:	1c02      	adds	r2, r0, #0
 801ea0c:	701a      	strb	r2, [r3, #0]
 801ea0e:	003b      	movs	r3, r7
 801ea10:	1c0a      	adds	r2, r1, #0
 801ea12:	801a      	strh	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetTxContinuousWave\r\n"));

    uint32_t timeout = ( uint32_t )( time * 1000 );
 801ea14:	003b      	movs	r3, r7
 801ea16:	881a      	ldrh	r2, [r3, #0]
 801ea18:	0013      	movs	r3, r2
 801ea1a:	015b      	lsls	r3, r3, #5
 801ea1c:	1a9b      	subs	r3, r3, r2
 801ea1e:	009b      	lsls	r3, r3, #2
 801ea20:	189b      	adds	r3, r3, r2
 801ea22:	00db      	lsls	r3, r3, #3
 801ea24:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	0018      	movs	r0, r3
 801ea2a:	f7fe fd0f 	bl	801d44c <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801ea2e:	1cfb      	adds	r3, r7, #3
 801ea30:	2100      	movs	r1, #0
 801ea32:	5659      	ldrsb	r1, [r3, r1]
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	9308      	str	r3, [sp, #32]
 801ea38:	2300      	movs	r3, #0
 801ea3a:	9307      	str	r3, [sp, #28]
 801ea3c:	2300      	movs	r3, #0
 801ea3e:	9306      	str	r3, [sp, #24]
 801ea40:	2300      	movs	r3, #0
 801ea42:	9305      	str	r3, [sp, #20]
 801ea44:	2300      	movs	r3, #0
 801ea46:	9304      	str	r3, [sp, #16]
 801ea48:	2300      	movs	r3, #0
 801ea4a:	9303      	str	r3, [sp, #12]
 801ea4c:	2305      	movs	r3, #5
 801ea4e:	9302      	str	r3, [sp, #8]
 801ea50:	2300      	movs	r3, #0
 801ea52:	9301      	str	r3, [sp, #4]
 801ea54:	2396      	movs	r3, #150	; 0x96
 801ea56:	015b      	lsls	r3, r3, #5
 801ea58:	9300      	str	r3, [sp, #0]
 801ea5a:	2300      	movs	r3, #0
 801ea5c:	2200      	movs	r2, #0
 801ea5e:	2000      	movs	r0, #0
 801ea60:	f7ff f914 	bl	801dc8c <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801ea64:	2031      	movs	r0, #49	; 0x31
 801ea66:	f000 f94d 	bl	801ed04 <SX1276Read>
 801ea6a:	0003      	movs	r3, r0
 801ea6c:	001a      	movs	r2, r3
 801ea6e:	2340      	movs	r3, #64	; 0x40
 801ea70:	439a      	bics	r2, r3
 801ea72:	0013      	movs	r3, r2
 801ea74:	b2db      	uxtb	r3, r3
 801ea76:	0019      	movs	r1, r3
 801ea78:	2031      	movs	r0, #49	; 0x31
 801ea7a:	f000 f92f 	bl	801ecdc <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801ea7e:	21f0      	movs	r1, #240	; 0xf0
 801ea80:	2040      	movs	r0, #64	; 0x40
 801ea82:	f000 f92b 	bl	801ecdc <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801ea86:	21a0      	movs	r1, #160	; 0xa0
 801ea88:	2041      	movs	r0, #65	; 0x41
 801ea8a:	f000 f927 	bl	801ecdc <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ea8e:	68fa      	ldr	r2, [r7, #12]
 801ea90:	4b09      	ldr	r3, [pc, #36]	; (801eab8 <SX1276SetTxContinuousWave+0xbc>)
 801ea92:	0011      	movs	r1, r2
 801ea94:	0018      	movs	r0, r3
 801ea96:	f7fe f81d 	bl	801cad4 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 801ea9a:	4b08      	ldr	r3, [pc, #32]	; (801eabc <SX1276SetTxContinuousWave+0xc0>)
 801ea9c:	2202      	movs	r2, #2
 801ea9e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801eaa0:	4b05      	ldr	r3, [pc, #20]	; (801eab8 <SX1276SetTxContinuousWave+0xbc>)
 801eaa2:	0018      	movs	r0, r3
 801eaa4:	f7fe f842 	bl	801cb2c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801eaa8:	2003      	movs	r0, #3
 801eaaa:	f000 f86f 	bl	801eb8c <SX1276SetOpMode>
}
 801eaae:	46c0      	nop			; (mov r8, r8)
 801eab0:	46bd      	mov	sp, r7
 801eab2:	b004      	add	sp, #16
 801eab4:	bd80      	pop	{r7, pc}
 801eab6:	46c0      	nop			; (mov r8, r8)
 801eab8:	20002120 	.word	0x20002120
 801eabc:	20002150 	.word	0x20002150

0801eac0 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801eac0:	b580      	push	{r7, lr}
 801eac2:	b084      	sub	sp, #16
 801eac4:	af00      	add	r7, sp, #0
 801eac6:	0002      	movs	r2, r0
 801eac8:	1dfb      	adds	r3, r7, #7
 801eaca:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276ReadRssi\r\n"));

    int16_t rssi = 0;
 801eacc:	230e      	movs	r3, #14
 801eace:	18fb      	adds	r3, r7, r3
 801ead0:	2200      	movs	r2, #0
 801ead2:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801ead4:	1dfb      	adds	r3, r7, #7
 801ead6:	781b      	ldrb	r3, [r3, #0]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d002      	beq.n	801eae2 <SX1276ReadRssi+0x22>
 801eadc:	2b01      	cmp	r3, #1
 801eade:	d00d      	beq.n	801eafc <SX1276ReadRssi+0x3c>
 801eae0:	e027      	b.n	801eb32 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801eae2:	2011      	movs	r0, #17
 801eae4:	f000 f90e 	bl	801ed04 <SX1276Read>
 801eae8:	0003      	movs	r3, r0
 801eaea:	085b      	lsrs	r3, r3, #1
 801eaec:	b2db      	uxtb	r3, r3
 801eaee:	b29b      	uxth	r3, r3
 801eaf0:	425b      	negs	r3, r3
 801eaf2:	b29a      	uxth	r2, r3
 801eaf4:	230e      	movs	r3, #14
 801eaf6:	18fb      	adds	r3, r7, r3
 801eaf8:	801a      	strh	r2, [r3, #0]
        break;
 801eafa:	e020      	b.n	801eb3e <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801eafc:	4b14      	ldr	r3, [pc, #80]	; (801eb50 <SX1276ReadRssi+0x90>)
 801eafe:	689b      	ldr	r3, [r3, #8]
 801eb00:	4a14      	ldr	r2, [pc, #80]	; (801eb54 <SX1276ReadRssi+0x94>)
 801eb02:	4293      	cmp	r3, r2
 801eb04:	d90a      	bls.n	801eb1c <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801eb06:	201b      	movs	r0, #27
 801eb08:	f000 f8fc 	bl	801ed04 <SX1276Read>
 801eb0c:	0003      	movs	r3, r0
 801eb0e:	b29b      	uxth	r3, r3
 801eb10:	3b9d      	subs	r3, #157	; 0x9d
 801eb12:	b29a      	uxth	r2, r3
 801eb14:	230e      	movs	r3, #14
 801eb16:	18fb      	adds	r3, r7, r3
 801eb18:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801eb1a:	e010      	b.n	801eb3e <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801eb1c:	201b      	movs	r0, #27
 801eb1e:	f000 f8f1 	bl	801ed04 <SX1276Read>
 801eb22:	0003      	movs	r3, r0
 801eb24:	b29b      	uxth	r3, r3
 801eb26:	3ba4      	subs	r3, #164	; 0xa4
 801eb28:	b29a      	uxth	r2, r3
 801eb2a:	230e      	movs	r3, #14
 801eb2c:	18fb      	adds	r3, r7, r3
 801eb2e:	801a      	strh	r2, [r3, #0]
        break;
 801eb30:	e005      	b.n	801eb3e <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801eb32:	230e      	movs	r3, #14
 801eb34:	18fb      	adds	r3, r7, r3
 801eb36:	2201      	movs	r2, #1
 801eb38:	4252      	negs	r2, r2
 801eb3a:	801a      	strh	r2, [r3, #0]
        break;
 801eb3c:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801eb3e:	230e      	movs	r3, #14
 801eb40:	18fb      	adds	r3, r7, r3
 801eb42:	2200      	movs	r2, #0
 801eb44:	5e9b      	ldrsh	r3, [r3, r2]
}
 801eb46:	0018      	movs	r0, r3
 801eb48:	46bd      	mov	sp, r7
 801eb4a:	b004      	add	sp, #16
 801eb4c:	bd80      	pop	{r7, pc}
 801eb4e:	46c0      	nop			; (mov r8, r8)
 801eb50:	20002150 	.word	0x20002150
 801eb54:	1f4add40 	.word	0x1f4add40

0801eb58 <SX1276Reset>:

void SX1276Reset( void )
{
 801eb58:	b580      	push	{r7, lr}
 801eb5a:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276Reset\r\n"));

	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_OUTPUT_PP);
 801eb5c:	2200      	movs	r2, #0
 801eb5e:	2101      	movs	r1, #1
 801eb60:	2002      	movs	r0, #2
 801eb62:	f005 ff15 	bl	8024990 <gpio_configure>
	gpio_reset(ITSDK_SX1276_RESET_BANK, ITSDK_SX1276_RESET_PIN);
 801eb66:	2101      	movs	r1, #1
 801eb68:	2002      	movs	r0, #2
 801eb6a:	f006 f931 	bl	8024dd0 <gpio_reset>
	itsdk_delayMs(2);
 801eb6e:	2002      	movs	r0, #2
 801eb70:	f006 fa72 	bl	8025058 <itsdk_delayMs>
	gpio_configure(ITSDK_SX1276_RESET_BANK,ITSDK_SX1276_RESET_PIN,GPIO_INPUT);
 801eb74:	2204      	movs	r2, #4
 801eb76:	2101      	movs	r1, #1
 801eb78:	2002      	movs	r0, #2
 801eb7a:	f005 ff09 	bl	8024990 <gpio_configure>
	itsdk_delayMs(10);
 801eb7e:	200a      	movs	r0, #10
 801eb80:	f006 fa6a 	bl	8025058 <itsdk_delayMs>
}
 801eb84:	46c0      	nop			; (mov r8, r8)
 801eb86:	46bd      	mov	sp, r7
 801eb88:	bd80      	pop	{r7, pc}
	...

0801eb8c <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	b082      	sub	sp, #8
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	0002      	movs	r2, r0
 801eb94:	1dfb      	adds	r3, r7, #7
 801eb96:	701a      	strb	r2, [r3, #0]
		LOG_INFO_SX1276(("Others)\r\n"));
		break;
	}
#endif

    if( opMode == RF_OPMODE_SLEEP )
 801eb98:	1dfb      	adds	r3, r7, #7
 801eb9a:	781b      	ldrb	r3, [r3, #0]
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	d11c      	bne.n	801ebda <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801eba0:	2001      	movs	r0, #1
 801eba2:	f000 f8af 	bl	801ed04 <SX1276Read>
 801eba6:	0003      	movs	r3, r0
 801eba8:	b25b      	sxtb	r3, r3
 801ebaa:	2207      	movs	r2, #7
 801ebac:	4393      	bics	r3, r2
 801ebae:	b25a      	sxtb	r2, r3
 801ebb0:	1dfb      	adds	r3, r7, #7
 801ebb2:	781b      	ldrb	r3, [r3, #0]
 801ebb4:	b25b      	sxtb	r3, r3
 801ebb6:	4313      	orrs	r3, r2
 801ebb8:	b25b      	sxtb	r3, r3
 801ebba:	b2db      	uxtb	r3, r3
 801ebbc:	0019      	movs	r1, r3
 801ebbe:	2001      	movs	r0, #1
 801ebc0:	f000 f88c 	bl	801ecdc <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 801ebc4:	4b18      	ldr	r3, [pc, #96]	; (801ec28 <SX1276SetOpMode+0x9c>)
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	691b      	ldr	r3, [r3, #16]
 801ebca:	2001      	movs	r0, #1
 801ebcc:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 801ebce:	4b16      	ldr	r3, [pc, #88]	; (801ec28 <SX1276SetOpMode+0x9c>)
 801ebd0:	681b      	ldr	r3, [r3, #0]
 801ebd2:	681b      	ldr	r3, [r3, #0]
 801ebd4:	2000      	movs	r0, #0
 801ebd6:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801ebd8:	e022      	b.n	801ec20 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 801ebda:	4b13      	ldr	r3, [pc, #76]	; (801ec28 <SX1276SetOpMode+0x9c>)
 801ebdc:	681b      	ldr	r3, [r3, #0]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	2001      	movs	r0, #1
 801ebe2:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 801ebe4:	4b10      	ldr	r3, [pc, #64]	; (801ec28 <SX1276SetOpMode+0x9c>)
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	691b      	ldr	r3, [r3, #16]
 801ebea:	2000      	movs	r0, #0
 801ebec:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 801ebee:	4b0e      	ldr	r3, [pc, #56]	; (801ec28 <SX1276SetOpMode+0x9c>)
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	695b      	ldr	r3, [r3, #20]
 801ebf4:	1dfa      	adds	r2, r7, #7
 801ebf6:	7812      	ldrb	r2, [r2, #0]
 801ebf8:	0010      	movs	r0, r2
 801ebfa:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ebfc:	2001      	movs	r0, #1
 801ebfe:	f000 f881 	bl	801ed04 <SX1276Read>
 801ec02:	0003      	movs	r3, r0
 801ec04:	b25b      	sxtb	r3, r3
 801ec06:	2207      	movs	r2, #7
 801ec08:	4393      	bics	r3, r2
 801ec0a:	b25a      	sxtb	r2, r3
 801ec0c:	1dfb      	adds	r3, r7, #7
 801ec0e:	781b      	ldrb	r3, [r3, #0]
 801ec10:	b25b      	sxtb	r3, r3
 801ec12:	4313      	orrs	r3, r2
 801ec14:	b25b      	sxtb	r3, r3
 801ec16:	b2db      	uxtb	r3, r3
 801ec18:	0019      	movs	r1, r3
 801ec1a:	2001      	movs	r0, #1
 801ec1c:	f000 f85e 	bl	801ecdc <SX1276Write>
}
 801ec20:	46c0      	nop			; (mov r8, r8)
 801ec22:	46bd      	mov	sp, r7
 801ec24:	b002      	add	sp, #8
 801ec26:	bd80      	pop	{r7, pc}
 801ec28:	20001d24 	.word	0x20001d24

0801ec2c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801ec2c:	b580      	push	{r7, lr}
 801ec2e:	b082      	sub	sp, #8
 801ec30:	af00      	add	r7, sp, #0
 801ec32:	0002      	movs	r2, r0
 801ec34:	1dfb      	adds	r3, r7, #7
 801ec36:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetModem (%s)\r\n",((modem==MODEM_LORA)?"LORA":"FSK")));

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801ec38:	2001      	movs	r0, #1
 801ec3a:	f000 f863 	bl	801ed04 <SX1276Read>
 801ec3e:	0003      	movs	r3, r0
 801ec40:	b25b      	sxtb	r3, r3
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	da03      	bge.n	801ec4e <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801ec46:	4b24      	ldr	r3, [pc, #144]	; (801ecd8 <SX1276SetModem+0xac>)
 801ec48:	2201      	movs	r2, #1
 801ec4a:	715a      	strb	r2, [r3, #5]
 801ec4c:	e002      	b.n	801ec54 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801ec4e:	4b22      	ldr	r3, [pc, #136]	; (801ecd8 <SX1276SetModem+0xac>)
 801ec50:	2200      	movs	r2, #0
 801ec52:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801ec54:	4b20      	ldr	r3, [pc, #128]	; (801ecd8 <SX1276SetModem+0xac>)
 801ec56:	795b      	ldrb	r3, [r3, #5]
 801ec58:	1dfa      	adds	r2, r7, #7
 801ec5a:	7812      	ldrb	r2, [r2, #0]
 801ec5c:	429a      	cmp	r2, r3
 801ec5e:	d037      	beq.n	801ecd0 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801ec60:	4b1d      	ldr	r3, [pc, #116]	; (801ecd8 <SX1276SetModem+0xac>)
 801ec62:	1dfa      	adds	r2, r7, #7
 801ec64:	7812      	ldrb	r2, [r2, #0]
 801ec66:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801ec68:	4b1b      	ldr	r3, [pc, #108]	; (801ecd8 <SX1276SetModem+0xac>)
 801ec6a:	795b      	ldrb	r3, [r3, #5]
 801ec6c:	2b01      	cmp	r3, #1
 801ec6e:	d016      	beq.n	801ec9e <SX1276SetModem+0x72>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 801ec70:	f7ff fc5e 	bl	801e530 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801ec74:	2001      	movs	r0, #1
 801ec76:	f000 f845 	bl	801ed04 <SX1276Read>
 801ec7a:	0003      	movs	r3, r0
 801ec7c:	001a      	movs	r2, r3
 801ec7e:	237f      	movs	r3, #127	; 0x7f
 801ec80:	4013      	ands	r3, r2
 801ec82:	b2db      	uxtb	r3, r3
 801ec84:	0019      	movs	r1, r3
 801ec86:	2001      	movs	r0, #1
 801ec88:	f000 f828 	bl	801ecdc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801ec8c:	2100      	movs	r1, #0
 801ec8e:	2040      	movs	r0, #64	; 0x40
 801ec90:	f000 f824 	bl	801ecdc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801ec94:	2130      	movs	r1, #48	; 0x30
 801ec96:	2041      	movs	r0, #65	; 0x41
 801ec98:	f000 f820 	bl	801ecdc <SX1276Write>
        break;
 801ec9c:	e019      	b.n	801ecd2 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetSleep( );
 801ec9e:	f7ff fc47 	bl	801e530 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801eca2:	2001      	movs	r0, #1
 801eca4:	f000 f82e 	bl	801ed04 <SX1276Read>
 801eca8:	0003      	movs	r3, r0
 801ecaa:	001a      	movs	r2, r3
 801ecac:	2380      	movs	r3, #128	; 0x80
 801ecae:	425b      	negs	r3, r3
 801ecb0:	4313      	orrs	r3, r2
 801ecb2:	b2db      	uxtb	r3, r3
 801ecb4:	0019      	movs	r1, r3
 801ecb6:	2001      	movs	r0, #1
 801ecb8:	f000 f810 	bl	801ecdc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801ecbc:	2100      	movs	r1, #0
 801ecbe:	2040      	movs	r0, #64	; 0x40
 801ecc0:	f000 f80c 	bl	801ecdc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801ecc4:	2100      	movs	r1, #0
 801ecc6:	2041      	movs	r0, #65	; 0x41
 801ecc8:	f000 f808 	bl	801ecdc <SX1276Write>
        break;
 801eccc:	46c0      	nop			; (mov r8, r8)
 801ecce:	e000      	b.n	801ecd2 <SX1276SetModem+0xa6>
        return;
 801ecd0:	46c0      	nop			; (mov r8, r8)
    }
}
 801ecd2:	46bd      	mov	sp, r7
 801ecd4:	b002      	add	sp, #8
 801ecd6:	bd80      	pop	{r7, pc}
 801ecd8:	20002150 	.word	0x20002150

0801ecdc <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b082      	sub	sp, #8
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	0002      	movs	r2, r0
 801ece4:	1dbb      	adds	r3, r7, #6
 801ece6:	801a      	strh	r2, [r3, #0]
 801ece8:	1d7b      	adds	r3, r7, #5
 801ecea:	1c0a      	adds	r2, r1, #0
 801ecec:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Write\r\n"));

    SX1276WriteBuffer( addr, &data, 1 );
 801ecee:	1d79      	adds	r1, r7, #5
 801ecf0:	1dbb      	adds	r3, r7, #6
 801ecf2:	881b      	ldrh	r3, [r3, #0]
 801ecf4:	2201      	movs	r2, #1
 801ecf6:	0018      	movs	r0, r3
 801ecf8:	f000 f818 	bl	801ed2c <SX1276WriteBuffer>
}
 801ecfc:	46c0      	nop			; (mov r8, r8)
 801ecfe:	46bd      	mov	sp, r7
 801ed00:	b002      	add	sp, #8
 801ed02:	bd80      	pop	{r7, pc}

0801ed04 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 801ed04:	b590      	push	{r4, r7, lr}
 801ed06:	b085      	sub	sp, #20
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	0002      	movs	r2, r0
 801ed0c:	1dbb      	adds	r3, r7, #6
 801ed0e:	801a      	strh	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276Read\r\n"));

    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801ed10:	240f      	movs	r4, #15
 801ed12:	1939      	adds	r1, r7, r4
 801ed14:	1dbb      	adds	r3, r7, #6
 801ed16:	881b      	ldrh	r3, [r3, #0]
 801ed18:	2201      	movs	r2, #1
 801ed1a:	0018      	movs	r0, r3
 801ed1c:	f000 f854 	bl	801edc8 <SX1276ReadBuffer>
    return data;
 801ed20:	193b      	adds	r3, r7, r4
 801ed22:	781b      	ldrb	r3, [r3, #0]
}
 801ed24:	0018      	movs	r0, r3
 801ed26:	46bd      	mov	sp, r7
 801ed28:	b005      	add	sp, #20
 801ed2a:	bd90      	pop	{r4, r7, pc}

0801ed2c <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801ed2c:	b590      	push	{r4, r7, lr}
 801ed2e:	b085      	sub	sp, #20
 801ed30:	af00      	add	r7, sp, #0
 801ed32:	6039      	str	r1, [r7, #0]
 801ed34:	0011      	movs	r1, r2
 801ed36:	1dbb      	adds	r3, r7, #6
 801ed38:	1c02      	adds	r2, r0, #0
 801ed3a:	801a      	strh	r2, [r3, #0]
 801ed3c:	1d7b      	adds	r3, r7, #5
 801ed3e:	1c0a      	adds	r2, r1, #0
 801ed40:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801ed42:	2380      	movs	r3, #128	; 0x80
 801ed44:	021b      	lsls	r3, r3, #8
 801ed46:	0019      	movs	r1, r3
 801ed48:	2000      	movs	r0, #0
 801ed4a:	f006 f841 	bl	8024dd0 <gpio_reset>

	uint16_t tx = addr | 0x80;
 801ed4e:	1dbb      	adds	r3, r7, #6
 801ed50:	881b      	ldrh	r3, [r3, #0]
 801ed52:	2280      	movs	r2, #128	; 0x80
 801ed54:	4313      	orrs	r3, r2
 801ed56:	b29a      	uxth	r2, r3
 801ed58:	210c      	movs	r1, #12
 801ed5a:	187b      	adds	r3, r7, r1
 801ed5c:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801ed5e:	230a      	movs	r3, #10
 801ed60:	18fa      	adds	r2, r7, r3
 801ed62:	1879      	adds	r1, r7, r1
 801ed64:	4817      	ldr	r0, [pc, #92]	; (801edc4 <SX1276WriteBuffer+0x98>)
 801ed66:	2301      	movs	r3, #1
 801ed68:	f007 f87c 	bl	8025e64 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 801ed6c:	230f      	movs	r3, #15
 801ed6e:	18fb      	adds	r3, r7, r3
 801ed70:	2200      	movs	r2, #0
 801ed72:	701a      	strb	r2, [r3, #0]
 801ed74:	e015      	b.n	801eda2 <SX1276WriteBuffer+0x76>
    {
    	tx = buffer[i];
 801ed76:	240f      	movs	r4, #15
 801ed78:	193b      	adds	r3, r7, r4
 801ed7a:	781b      	ldrb	r3, [r3, #0]
 801ed7c:	683a      	ldr	r2, [r7, #0]
 801ed7e:	18d3      	adds	r3, r2, r3
 801ed80:	781b      	ldrb	r3, [r3, #0]
 801ed82:	b29a      	uxth	r2, r3
 801ed84:	210c      	movs	r1, #12
 801ed86:	187b      	adds	r3, r7, r1
 801ed88:	801a      	strh	r2, [r3, #0]
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801ed8a:	230a      	movs	r3, #10
 801ed8c:	18fa      	adds	r2, r7, r3
 801ed8e:	1879      	adds	r1, r7, r1
 801ed90:	480c      	ldr	r0, [pc, #48]	; (801edc4 <SX1276WriteBuffer+0x98>)
 801ed92:	2301      	movs	r3, #1
 801ed94:	f007 f866 	bl	8025e64 <spi_rwRegister>
    for( i = 0; i < size; i++ )
 801ed98:	193b      	adds	r3, r7, r4
 801ed9a:	781a      	ldrb	r2, [r3, #0]
 801ed9c:	193b      	adds	r3, r7, r4
 801ed9e:	3201      	adds	r2, #1
 801eda0:	701a      	strb	r2, [r3, #0]
 801eda2:	230f      	movs	r3, #15
 801eda4:	18fa      	adds	r2, r7, r3
 801eda6:	1d7b      	adds	r3, r7, #5
 801eda8:	7812      	ldrb	r2, [r2, #0]
 801edaa:	781b      	ldrb	r3, [r3, #0]
 801edac:	429a      	cmp	r2, r3
 801edae:	d3e2      	bcc.n	801ed76 <SX1276WriteBuffer+0x4a>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801edb0:	2380      	movs	r3, #128	; 0x80
 801edb2:	021b      	lsls	r3, r3, #8
 801edb4:	0019      	movs	r1, r3
 801edb6:	2000      	movs	r0, #0
 801edb8:	f005 fff2 	bl	8024da0 <gpio_set>
}
 801edbc:	46c0      	nop			; (mov r8, r8)
 801edbe:	46bd      	mov	sp, r7
 801edc0:	b005      	add	sp, #20
 801edc2:	bd90      	pop	{r4, r7, pc}
 801edc4:	20001fb4 	.word	0x20001fb4

0801edc8 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801edc8:	b590      	push	{r4, r7, lr}
 801edca:	b085      	sub	sp, #20
 801edcc:	af00      	add	r7, sp, #0
 801edce:	6039      	str	r1, [r7, #0]
 801edd0:	0011      	movs	r1, r2
 801edd2:	1dbb      	adds	r3, r7, #6
 801edd4:	1c02      	adds	r2, r0, #0
 801edd6:	801a      	strh	r2, [r3, #0]
 801edd8:	1d7b      	adds	r3, r7, #5
 801edda:	1c0a      	adds	r2, r1, #0
 801eddc:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadBuffer\r\n"));

    uint8_t i;

    //NSS = 0;
	gpio_reset(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801edde:	2380      	movs	r3, #128	; 0x80
 801ede0:	021b      	lsls	r3, r3, #8
 801ede2:	0019      	movs	r1, r3
 801ede4:	2000      	movs	r0, #0
 801ede6:	f005 fff3 	bl	8024dd0 <gpio_reset>

	uint16_t tx = addr & 0x7f;
 801edea:	1dbb      	adds	r3, r7, #6
 801edec:	881b      	ldrh	r3, [r3, #0]
 801edee:	227f      	movs	r2, #127	; 0x7f
 801edf0:	4013      	ands	r3, r2
 801edf2:	b29a      	uxth	r2, r3
 801edf4:	210c      	movs	r1, #12
 801edf6:	187b      	adds	r3, r7, r1
 801edf8:	801a      	strh	r2, [r3, #0]
	uint16_t rx;
	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801edfa:	230a      	movs	r3, #10
 801edfc:	18fa      	adds	r2, r7, r3
 801edfe:	000c      	movs	r4, r1
 801ee00:	1879      	adds	r1, r7, r1
 801ee02:	481a      	ldr	r0, [pc, #104]	; (801ee6c <SX1276ReadBuffer+0xa4>)
 801ee04:	2301      	movs	r3, #1
 801ee06:	f007 f82d 	bl	8025e64 <spi_rwRegister>

	tx = 0;
 801ee0a:	0021      	movs	r1, r4
 801ee0c:	187b      	adds	r3, r7, r1
 801ee0e:	2200      	movs	r2, #0
 801ee10:	801a      	strh	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801ee12:	230f      	movs	r3, #15
 801ee14:	18fb      	adds	r3, r7, r3
 801ee16:	2200      	movs	r2, #0
 801ee18:	701a      	strb	r2, [r3, #0]
 801ee1a:	e015      	b.n	801ee48 <SX1276ReadBuffer+0x80>
    {
    	spi_rwRegister(&ITSDK_SX1276_SPI,(uint8_t*)&tx,(uint8_t*)&rx,1);
 801ee1c:	240a      	movs	r4, #10
 801ee1e:	193a      	adds	r2, r7, r4
 801ee20:	230c      	movs	r3, #12
 801ee22:	18f9      	adds	r1, r7, r3
 801ee24:	4811      	ldr	r0, [pc, #68]	; (801ee6c <SX1276ReadBuffer+0xa4>)
 801ee26:	2301      	movs	r3, #1
 801ee28:	f007 f81c 	bl	8025e64 <spi_rwRegister>
    	buffer[i] = rx;
 801ee2c:	193b      	adds	r3, r7, r4
 801ee2e:	8819      	ldrh	r1, [r3, #0]
 801ee30:	200f      	movs	r0, #15
 801ee32:	183b      	adds	r3, r7, r0
 801ee34:	781b      	ldrb	r3, [r3, #0]
 801ee36:	683a      	ldr	r2, [r7, #0]
 801ee38:	18d3      	adds	r3, r2, r3
 801ee3a:	b2ca      	uxtb	r2, r1
 801ee3c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801ee3e:	183b      	adds	r3, r7, r0
 801ee40:	781a      	ldrb	r2, [r3, #0]
 801ee42:	183b      	adds	r3, r7, r0
 801ee44:	3201      	adds	r2, #1
 801ee46:	701a      	strb	r2, [r3, #0]
 801ee48:	230f      	movs	r3, #15
 801ee4a:	18fa      	adds	r2, r7, r3
 801ee4c:	1d7b      	adds	r3, r7, #5
 801ee4e:	7812      	ldrb	r2, [r2, #0]
 801ee50:	781b      	ldrb	r3, [r3, #0]
 801ee52:	429a      	cmp	r2, r3
 801ee54:	d3e2      	bcc.n	801ee1c <SX1276ReadBuffer+0x54>
    }

    //NSS = 1;
	gpio_set(ITSDK_SX1276_NSS_BANK, ITSDK_SX1276_NSS_PIN);
 801ee56:	2380      	movs	r3, #128	; 0x80
 801ee58:	021b      	lsls	r3, r3, #8
 801ee5a:	0019      	movs	r1, r3
 801ee5c:	2000      	movs	r0, #0
 801ee5e:	f005 ff9f 	bl	8024da0 <gpio_set>
}
 801ee62:	46c0      	nop			; (mov r8, r8)
 801ee64:	46bd      	mov	sp, r7
 801ee66:	b005      	add	sp, #20
 801ee68:	bd90      	pop	{r4, r7, pc}
 801ee6a:	46c0      	nop			; (mov r8, r8)
 801ee6c:	20001fb4 	.word	0x20001fb4

0801ee70 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801ee70:	b580      	push	{r7, lr}
 801ee72:	b082      	sub	sp, #8
 801ee74:	af00      	add	r7, sp, #0
 801ee76:	6078      	str	r0, [r7, #4]
 801ee78:	000a      	movs	r2, r1
 801ee7a:	1cfb      	adds	r3, r7, #3
 801ee7c:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276WriteFifo\r\n"));
    SX1276WriteBuffer( 0, buffer, size );
 801ee7e:	1cfb      	adds	r3, r7, #3
 801ee80:	781a      	ldrb	r2, [r3, #0]
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	0019      	movs	r1, r3
 801ee86:	2000      	movs	r0, #0
 801ee88:	f7ff ff50 	bl	801ed2c <SX1276WriteBuffer>
}
 801ee8c:	46c0      	nop			; (mov r8, r8)
 801ee8e:	46bd      	mov	sp, r7
 801ee90:	b002      	add	sp, #8
 801ee92:	bd80      	pop	{r7, pc}

0801ee94 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801ee94:	b580      	push	{r7, lr}
 801ee96:	b082      	sub	sp, #8
 801ee98:	af00      	add	r7, sp, #0
 801ee9a:	6078      	str	r0, [r7, #4]
 801ee9c:	000a      	movs	r2, r1
 801ee9e:	1cfb      	adds	r3, r7, #3
 801eea0:	701a      	strb	r2, [r3, #0]
	//LOG_INFO_SX1276((">> SX1276ReadFifo\r\n"));
    SX1276ReadBuffer( 0, buffer, size );
 801eea2:	1cfb      	adds	r3, r7, #3
 801eea4:	781a      	ldrb	r2, [r3, #0]
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	0019      	movs	r1, r3
 801eeaa:	2000      	movs	r0, #0
 801eeac:	f7ff ff8c 	bl	801edc8 <SX1276ReadBuffer>
}
 801eeb0:	46c0      	nop			; (mov r8, r8)
 801eeb2:	46bd      	mov	sp, r7
 801eeb4:	b002      	add	sp, #8
 801eeb6:	bd80      	pop	{r7, pc}

0801eeb8 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801eeb8:	b580      	push	{r7, lr}
 801eeba:	b082      	sub	sp, #8
 801eebc:	af00      	add	r7, sp, #0
 801eebe:	0002      	movs	r2, r0
 801eec0:	1dfb      	adds	r3, r7, #7
 801eec2:	701a      	strb	r2, [r3, #0]
 801eec4:	1dbb      	adds	r3, r7, #6
 801eec6:	1c0a      	adds	r2, r1, #0
 801eec8:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetMaxPayloadLength\r\n"));
    SX1276SetModem( modem );
 801eeca:	1dfb      	adds	r3, r7, #7
 801eecc:	781b      	ldrb	r3, [r3, #0]
 801eece:	0018      	movs	r0, r3
 801eed0:	f7ff feac 	bl	801ec2c <SX1276SetModem>

    switch( modem )
 801eed4:	1dfb      	adds	r3, r7, #7
 801eed6:	781b      	ldrb	r3, [r3, #0]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d002      	beq.n	801eee2 <SX1276SetMaxPayloadLength+0x2a>
 801eedc:	2b01      	cmp	r3, #1
 801eede:	d00f      	beq.n	801ef00 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801eee0:	e016      	b.n	801ef10 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801eee2:	4b0d      	ldr	r3, [pc, #52]	; (801ef18 <SX1276SetMaxPayloadLength+0x60>)
 801eee4:	2222      	movs	r2, #34	; 0x22
 801eee6:	5c9b      	ldrb	r3, [r3, r2]
 801eee8:	2201      	movs	r2, #1
 801eeea:	4053      	eors	r3, r2
 801eeec:	b2db      	uxtb	r3, r3
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d00d      	beq.n	801ef0e <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801eef2:	1dbb      	adds	r3, r7, #6
 801eef4:	781b      	ldrb	r3, [r3, #0]
 801eef6:	0019      	movs	r1, r3
 801eef8:	2032      	movs	r0, #50	; 0x32
 801eefa:	f7ff feef 	bl	801ecdc <SX1276Write>
        break;
 801eefe:	e006      	b.n	801ef0e <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801ef00:	1dbb      	adds	r3, r7, #6
 801ef02:	781b      	ldrb	r3, [r3, #0]
 801ef04:	0019      	movs	r1, r3
 801ef06:	2023      	movs	r0, #35	; 0x23
 801ef08:	f7ff fee8 	bl	801ecdc <SX1276Write>
        break;
 801ef0c:	e000      	b.n	801ef10 <SX1276SetMaxPayloadLength+0x58>
        break;
 801ef0e:	46c0      	nop			; (mov r8, r8)
}
 801ef10:	46c0      	nop			; (mov r8, r8)
 801ef12:	46bd      	mov	sp, r7
 801ef14:	b002      	add	sp, #8
 801ef16:	bd80      	pop	{r7, pc}
 801ef18:	20002150 	.word	0x20002150

0801ef1c <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801ef1c:	b580      	push	{r7, lr}
 801ef1e:	b082      	sub	sp, #8
 801ef20:	af00      	add	r7, sp, #0
 801ef22:	0002      	movs	r2, r0
 801ef24:	1dfb      	adds	r3, r7, #7
 801ef26:	701a      	strb	r2, [r3, #0]
	LOG_INFO_SX1276((">> SX1276SetPublicNetwork\r\n"));

    SX1276SetModem( MODEM_LORA );
 801ef28:	2001      	movs	r0, #1
 801ef2a:	f7ff fe7f 	bl	801ec2c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801ef2e:	4b0b      	ldr	r3, [pc, #44]	; (801ef5c <SX1276SetPublicNetwork+0x40>)
 801ef30:	1dfa      	adds	r2, r7, #7
 801ef32:	215c      	movs	r1, #92	; 0x5c
 801ef34:	7812      	ldrb	r2, [r2, #0]
 801ef36:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801ef38:	1dfb      	adds	r3, r7, #7
 801ef3a:	781b      	ldrb	r3, [r3, #0]
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	d004      	beq.n	801ef4a <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801ef40:	2134      	movs	r1, #52	; 0x34
 801ef42:	2039      	movs	r0, #57	; 0x39
 801ef44:	f7ff feca 	bl	801ecdc <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801ef48:	e003      	b.n	801ef52 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801ef4a:	2112      	movs	r1, #18
 801ef4c:	2039      	movs	r0, #57	; 0x39
 801ef4e:	f7ff fec5 	bl	801ecdc <SX1276Write>
}
 801ef52:	46c0      	nop			; (mov r8, r8)
 801ef54:	46bd      	mov	sp, r7
 801ef56:	b002      	add	sp, #8
 801ef58:	bd80      	pop	{r7, pc}
 801ef5a:	46c0      	nop			; (mov r8, r8)
 801ef5c:	20002150 	.word	0x20002150

0801ef60 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801ef60:	b580      	push	{r7, lr}
 801ef62:	af00      	add	r7, sp, #0
	LOG_INFO_SX1276((">> SX1276GetWakeupTime\r\n"));

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + ITSDK_MURATA_WAKEUP_TIME;
 801ef64:	4b04      	ldr	r3, [pc, #16]	; (801ef78 <SX1276GetWakeupTime+0x18>)
 801ef66:	681b      	ldr	r3, [r3, #0]
 801ef68:	685b      	ldr	r3, [r3, #4]
 801ef6a:	4798      	blx	r3
 801ef6c:	0003      	movs	r3, r0
 801ef6e:	3335      	adds	r3, #53	; 0x35
}
 801ef70:	0018      	movs	r0, r3
 801ef72:	46bd      	mov	sp, r7
 801ef74:	bd80      	pop	{r7, pc}
 801ef76:	46c0      	nop			; (mov r8, r8)
 801ef78:	20001d24 	.word	0x20001d24

0801ef7c <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 801ef7c:	b590      	push	{r4, r7, lr}
 801ef7e:	b085      	sub	sp, #20
 801ef80:	af00      	add	r7, sp, #0
 801ef82:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnTimeoutIrq\r\n"));

    switch( SX1276.Settings.State )
 801ef84:	4b51      	ldr	r3, [pc, #324]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801ef86:	791b      	ldrb	r3, [r3, #4]
 801ef88:	2b01      	cmp	r3, #1
 801ef8a:	d002      	beq.n	801ef92 <SX1276OnTimeoutIrq+0x16>
 801ef8c:	2b02      	cmp	r3, #2
 801ef8e:	d045      	beq.n	801f01c <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801ef90:	e098      	b.n	801f0c4 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801ef92:	4b4e      	ldr	r3, [pc, #312]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801ef94:	795b      	ldrb	r3, [r3, #5]
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d132      	bne.n	801f000 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801ef9a:	4b4c      	ldr	r3, [pc, #304]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801ef9c:	2230      	movs	r2, #48	; 0x30
 801ef9e:	2100      	movs	r1, #0
 801efa0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801efa2:	4b4a      	ldr	r3, [pc, #296]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801efa4:	2231      	movs	r2, #49	; 0x31
 801efa6:	2100      	movs	r1, #0
 801efa8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801efaa:	4b48      	ldr	r3, [pc, #288]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801efac:	2200      	movs	r2, #0
 801efae:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801efb0:	4b46      	ldr	r3, [pc, #280]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801efb2:	2200      	movs	r2, #0
 801efb4:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801efb6:	210b      	movs	r1, #11
 801efb8:	203e      	movs	r0, #62	; 0x3e
 801efba:	f7ff fe8f 	bl	801ecdc <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801efbe:	2110      	movs	r1, #16
 801efc0:	203f      	movs	r0, #63	; 0x3f
 801efc2:	f7ff fe8b 	bl	801ecdc <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801efc6:	4b41      	ldr	r3, [pc, #260]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801efc8:	2226      	movs	r2, #38	; 0x26
 801efca:	5c9b      	ldrb	r3, [r3, r2]
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d010      	beq.n	801eff2 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801efd0:	200d      	movs	r0, #13
 801efd2:	f7ff fe97 	bl	801ed04 <SX1276Read>
 801efd6:	0003      	movs	r3, r0
 801efd8:	001a      	movs	r2, r3
 801efda:	2340      	movs	r3, #64	; 0x40
 801efdc:	4313      	orrs	r3, r2
 801efde:	b2db      	uxtb	r3, r3
 801efe0:	0019      	movs	r1, r3
 801efe2:	200d      	movs	r0, #13
 801efe4:	f7ff fe7a 	bl	801ecdc <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 801efe8:	4b39      	ldr	r3, [pc, #228]	; (801f0d0 <SX1276OnTimeoutIrq+0x154>)
 801efea:	0018      	movs	r0, r3
 801efec:	f7fd fd9e 	bl	801cb2c <TimerStart>
 801eff0:	e006      	b.n	801f000 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 801eff2:	4b36      	ldr	r3, [pc, #216]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801eff4:	2200      	movs	r2, #0
 801eff6:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801eff8:	4b35      	ldr	r3, [pc, #212]	; (801f0d0 <SX1276OnTimeoutIrq+0x154>)
 801effa:	0018      	movs	r0, r3
 801effc:	f7fd fdec 	bl	801cbd8 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801f000:	4b34      	ldr	r3, [pc, #208]	; (801f0d4 <SX1276OnTimeoutIrq+0x158>)
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	2b00      	cmp	r3, #0
 801f006:	d05a      	beq.n	801f0be <SX1276OnTimeoutIrq+0x142>
 801f008:	4b32      	ldr	r3, [pc, #200]	; (801f0d4 <SX1276OnTimeoutIrq+0x158>)
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	68db      	ldr	r3, [r3, #12]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d055      	beq.n	801f0be <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 801f012:	4b30      	ldr	r3, [pc, #192]	; (801f0d4 <SX1276OnTimeoutIrq+0x158>)
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	68db      	ldr	r3, [r3, #12]
 801f018:	4798      	blx	r3
        break;
 801f01a:	e050      	b.n	801f0be <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 801f01c:	f7ff fd9c 	bl	801eb58 <SX1276Reset>
        RxChainCalibration( );
 801f020:	f7fe fae4 	bl	801d5ec <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801f024:	2000      	movs	r0, #0
 801f026:	f7ff fdb1 	bl	801eb8c <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801f02a:	230f      	movs	r3, #15
 801f02c:	18fb      	adds	r3, r7, r3
 801f02e:	2200      	movs	r2, #0
 801f030:	701a      	strb	r2, [r3, #0]
 801f032:	e025      	b.n	801f080 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801f034:	240f      	movs	r4, #15
 801f036:	193b      	adds	r3, r7, r4
 801f038:	781a      	ldrb	r2, [r3, #0]
 801f03a:	4927      	ldr	r1, [pc, #156]	; (801f0d8 <SX1276OnTimeoutIrq+0x15c>)
 801f03c:	0013      	movs	r3, r2
 801f03e:	005b      	lsls	r3, r3, #1
 801f040:	189b      	adds	r3, r3, r2
 801f042:	5c5b      	ldrb	r3, [r3, r1]
 801f044:	0018      	movs	r0, r3
 801f046:	f7ff fdf1 	bl	801ec2c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801f04a:	193b      	adds	r3, r7, r4
 801f04c:	781a      	ldrb	r2, [r3, #0]
 801f04e:	4922      	ldr	r1, [pc, #136]	; (801f0d8 <SX1276OnTimeoutIrq+0x15c>)
 801f050:	0013      	movs	r3, r2
 801f052:	005b      	lsls	r3, r3, #1
 801f054:	189b      	adds	r3, r3, r2
 801f056:	18cb      	adds	r3, r1, r3
 801f058:	3301      	adds	r3, #1
 801f05a:	781b      	ldrb	r3, [r3, #0]
 801f05c:	b298      	uxth	r0, r3
 801f05e:	193b      	adds	r3, r7, r4
 801f060:	781a      	ldrb	r2, [r3, #0]
 801f062:	491d      	ldr	r1, [pc, #116]	; (801f0d8 <SX1276OnTimeoutIrq+0x15c>)
 801f064:	0013      	movs	r3, r2
 801f066:	005b      	lsls	r3, r3, #1
 801f068:	189b      	adds	r3, r3, r2
 801f06a:	18cb      	adds	r3, r1, r3
 801f06c:	3302      	adds	r3, #2
 801f06e:	781b      	ldrb	r3, [r3, #0]
 801f070:	0019      	movs	r1, r3
 801f072:	f7ff fe33 	bl	801ecdc <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801f076:	193b      	adds	r3, r7, r4
 801f078:	781a      	ldrb	r2, [r3, #0]
 801f07a:	193b      	adds	r3, r7, r4
 801f07c:	3201      	adds	r2, #1
 801f07e:	701a      	strb	r2, [r3, #0]
 801f080:	230f      	movs	r3, #15
 801f082:	18fb      	adds	r3, r7, r3
 801f084:	781b      	ldrb	r3, [r3, #0]
 801f086:	2b0f      	cmp	r3, #15
 801f088:	d9d4      	bls.n	801f034 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 801f08a:	2000      	movs	r0, #0
 801f08c:	f7ff fdce 	bl	801ec2c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801f090:	4b0e      	ldr	r3, [pc, #56]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801f092:	225c      	movs	r2, #92	; 0x5c
 801f094:	5c9b      	ldrb	r3, [r3, r2]
 801f096:	0018      	movs	r0, r3
 801f098:	f7ff ff40 	bl	801ef1c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801f09c:	4b0b      	ldr	r3, [pc, #44]	; (801f0cc <SX1276OnTimeoutIrq+0x150>)
 801f09e:	2200      	movs	r2, #0
 801f0a0:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801f0a2:	4b0c      	ldr	r3, [pc, #48]	; (801f0d4 <SX1276OnTimeoutIrq+0x158>)
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d00b      	beq.n	801f0c2 <SX1276OnTimeoutIrq+0x146>
 801f0aa:	4b0a      	ldr	r3, [pc, #40]	; (801f0d4 <SX1276OnTimeoutIrq+0x158>)
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	685b      	ldr	r3, [r3, #4]
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	d006      	beq.n	801f0c2 <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 801f0b4:	4b07      	ldr	r3, [pc, #28]	; (801f0d4 <SX1276OnTimeoutIrq+0x158>)
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	685b      	ldr	r3, [r3, #4]
 801f0ba:	4798      	blx	r3
        break;
 801f0bc:	e001      	b.n	801f0c2 <SX1276OnTimeoutIrq+0x146>
        break;
 801f0be:	46c0      	nop			; (mov r8, r8)
 801f0c0:	e000      	b.n	801f0c4 <SX1276OnTimeoutIrq+0x148>
        break;
 801f0c2:	46c0      	nop			; (mov r8, r8)
    }
}
 801f0c4:	46c0      	nop			; (mov r8, r8)
 801f0c6:	46bd      	mov	sp, r7
 801f0c8:	b005      	add	sp, #20
 801f0ca:	bd90      	pop	{r4, r7, pc}
 801f0cc:	20002150 	.word	0x20002150
 801f0d0:	20002138 	.word	0x20002138
 801f0d4:	20001c20 	.word	0x20001c20
 801f0d8:	080289d8 	.word	0x080289d8

0801f0dc <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 801f0dc:	b5b0      	push	{r4, r5, r7, lr}
 801f0de:	b084      	sub	sp, #16
 801f0e0:	af00      	add	r7, sp, #0
 801f0e2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio0Irq\r\n"));

    volatile uint8_t irqFlags = 0;
 801f0e4:	230d      	movs	r3, #13
 801f0e6:	18fb      	adds	r3, r7, r3
 801f0e8:	2200      	movs	r2, #0
 801f0ea:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801f0ec:	4bca      	ldr	r3, [pc, #808]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f0ee:	791b      	ldrb	r3, [r3, #4]
 801f0f0:	2b01      	cmp	r3, #1
 801f0f2:	d003      	beq.n	801f0fc <SX1276OnDio0Irq+0x20>
 801f0f4:	2b02      	cmp	r3, #2
 801f0f6:	d100      	bne.n	801f0fa <SX1276OnDio0Irq+0x1e>
 801f0f8:	e1f2      	b.n	801f4e0 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 801f0fa:	e20f      	b.n	801f51c <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 801f0fc:	4bc6      	ldr	r3, [pc, #792]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f0fe:	795b      	ldrb	r3, [r3, #5]
 801f100:	2b00      	cmp	r3, #0
 801f102:	d003      	beq.n	801f10c <SX1276OnDio0Irq+0x30>
 801f104:	2b01      	cmp	r3, #1
 801f106:	d100      	bne.n	801f10a <SX1276OnDio0Irq+0x2e>
 801f108:	e0eb      	b.n	801f2e2 <SX1276OnDio0Irq+0x206>
                break;
 801f10a:	e1e8      	b.n	801f4de <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801f10c:	4bc2      	ldr	r3, [pc, #776]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f10e:	2224      	movs	r2, #36	; 0x24
 801f110:	5c9b      	ldrb	r3, [r3, r2]
 801f112:	2b00      	cmp	r3, #0
 801f114:	d057      	beq.n	801f1c6 <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801f116:	203f      	movs	r0, #63	; 0x3f
 801f118:	f7ff fdf4 	bl	801ed04 <SX1276Read>
 801f11c:	0003      	movs	r3, r0
 801f11e:	001a      	movs	r2, r3
 801f120:	210d      	movs	r1, #13
 801f122:	187b      	adds	r3, r7, r1
 801f124:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801f126:	187b      	adds	r3, r7, r1
 801f128:	781b      	ldrb	r3, [r3, #0]
 801f12a:	b2db      	uxtb	r3, r3
 801f12c:	001a      	movs	r2, r3
 801f12e:	2302      	movs	r3, #2
 801f130:	4013      	ands	r3, r2
 801f132:	2b02      	cmp	r3, #2
 801f134:	d047      	beq.n	801f1c6 <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801f136:	210b      	movs	r1, #11
 801f138:	203e      	movs	r0, #62	; 0x3e
 801f13a:	f7ff fdcf 	bl	801ecdc <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801f13e:	2110      	movs	r1, #16
 801f140:	203f      	movs	r0, #63	; 0x3f
 801f142:	f7ff fdcb 	bl	801ecdc <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801f146:	4bb5      	ldr	r3, [pc, #724]	; (801f41c <SX1276OnDio0Irq+0x340>)
 801f148:	0018      	movs	r0, r3
 801f14a:	f7fd fd45 	bl	801cbd8 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801f14e:	4bb2      	ldr	r3, [pc, #712]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f150:	2226      	movs	r2, #38	; 0x26
 801f152:	5c9b      	ldrb	r3, [r3, r2]
 801f154:	2201      	movs	r2, #1
 801f156:	4053      	eors	r3, r2
 801f158:	b2db      	uxtb	r3, r3
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d007      	beq.n	801f16e <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 801f15e:	4bb0      	ldr	r3, [pc, #704]	; (801f420 <SX1276OnDio0Irq+0x344>)
 801f160:	0018      	movs	r0, r3
 801f162:	f7fd fd39 	bl	801cbd8 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 801f166:	4bac      	ldr	r3, [pc, #688]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f168:	2200      	movs	r2, #0
 801f16a:	711a      	strb	r2, [r3, #4]
 801f16c:	e00f      	b.n	801f18e <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801f16e:	200d      	movs	r0, #13
 801f170:	f7ff fdc8 	bl	801ed04 <SX1276Read>
 801f174:	0003      	movs	r3, r0
 801f176:	001a      	movs	r2, r3
 801f178:	2340      	movs	r3, #64	; 0x40
 801f17a:	4313      	orrs	r3, r2
 801f17c:	b2db      	uxtb	r3, r3
 801f17e:	0019      	movs	r1, r3
 801f180:	200d      	movs	r0, #13
 801f182:	f7ff fdab 	bl	801ecdc <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 801f186:	4ba6      	ldr	r3, [pc, #664]	; (801f420 <SX1276OnDio0Irq+0x344>)
 801f188:	0018      	movs	r0, r3
 801f18a:	f7fd fccf 	bl	801cb2c <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801f18e:	4ba5      	ldr	r3, [pc, #660]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	2b00      	cmp	r3, #0
 801f194:	d008      	beq.n	801f1a8 <SX1276OnDio0Irq+0xcc>
 801f196:	4ba3      	ldr	r3, [pc, #652]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	691b      	ldr	r3, [r3, #16]
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	d003      	beq.n	801f1a8 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 801f1a0:	4ba0      	ldr	r3, [pc, #640]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	691b      	ldr	r3, [r3, #16]
 801f1a6:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801f1a8:	4b9b      	ldr	r3, [pc, #620]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f1aa:	2230      	movs	r2, #48	; 0x30
 801f1ac:	2100      	movs	r1, #0
 801f1ae:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801f1b0:	4b99      	ldr	r3, [pc, #612]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f1b2:	2231      	movs	r2, #49	; 0x31
 801f1b4:	2100      	movs	r1, #0
 801f1b6:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801f1b8:	4b97      	ldr	r3, [pc, #604]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801f1be:	4b96      	ldr	r3, [pc, #600]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f1c0:	2200      	movs	r2, #0
 801f1c2:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801f1c4:	e18b      	b.n	801f4de <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801f1c6:	4b94      	ldr	r3, [pc, #592]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f1c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f1ca:	2b00      	cmp	r3, #0
 801f1cc:	d12d      	bne.n	801f22a <SX1276OnDio0Irq+0x14e>
 801f1ce:	4b92      	ldr	r3, [pc, #584]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f1d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	d129      	bne.n	801f22a <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801f1d6:	4b90      	ldr	r3, [pc, #576]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f1d8:	2222      	movs	r2, #34	; 0x22
 801f1da:	5c9b      	ldrb	r3, [r3, r2]
 801f1dc:	2201      	movs	r2, #1
 801f1de:	4053      	eors	r3, r2
 801f1e0:	b2db      	uxtb	r3, r3
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d005      	beq.n	801f1f2 <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801f1e6:	4b90      	ldr	r3, [pc, #576]	; (801f428 <SX1276OnDio0Irq+0x34c>)
 801f1e8:	2101      	movs	r1, #1
 801f1ea:	0018      	movs	r0, r3
 801f1ec:	f7ff fe52 	bl	801ee94 <SX1276ReadFifo>
 801f1f0:	e006      	b.n	801f200 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801f1f2:	2032      	movs	r0, #50	; 0x32
 801f1f4:	f7ff fd86 	bl	801ed04 <SX1276Read>
 801f1f8:	0003      	movs	r3, r0
 801f1fa:	b29a      	uxth	r2, r3
 801f1fc:	4b86      	ldr	r3, [pc, #536]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f1fe:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f200:	4b85      	ldr	r3, [pc, #532]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f202:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f204:	001a      	movs	r2, r3
 801f206:	4b89      	ldr	r3, [pc, #548]	; (801f42c <SX1276OnDio0Irq+0x350>)
 801f208:	18d0      	adds	r0, r2, r3
 801f20a:	4b83      	ldr	r3, [pc, #524]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f20c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f20e:	b2da      	uxtb	r2, r3
 801f210:	4b81      	ldr	r3, [pc, #516]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f212:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f214:	b2db      	uxtb	r3, r3
 801f216:	1ad3      	subs	r3, r2, r3
 801f218:	b2db      	uxtb	r3, r3
 801f21a:	0019      	movs	r1, r3
 801f21c:	f7ff fe3a 	bl	801ee94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f220:	4b7d      	ldr	r3, [pc, #500]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f222:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801f224:	4b7c      	ldr	r3, [pc, #496]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f226:	879a      	strh	r2, [r3, #60]	; 0x3c
 801f228:	e013      	b.n	801f252 <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f22a:	4b7b      	ldr	r3, [pc, #492]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f22c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f22e:	001a      	movs	r2, r3
 801f230:	4b7e      	ldr	r3, [pc, #504]	; (801f42c <SX1276OnDio0Irq+0x350>)
 801f232:	18d0      	adds	r0, r2, r3
 801f234:	4b78      	ldr	r3, [pc, #480]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f236:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f238:	b2da      	uxtb	r2, r3
 801f23a:	4b77      	ldr	r3, [pc, #476]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f23c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f23e:	b2db      	uxtb	r3, r3
 801f240:	1ad3      	subs	r3, r2, r3
 801f242:	b2db      	uxtb	r3, r3
 801f244:	0019      	movs	r1, r3
 801f246:	f7ff fe25 	bl	801ee94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f24a:	4b73      	ldr	r3, [pc, #460]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f24c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801f24e:	4b72      	ldr	r3, [pc, #456]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f250:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801f252:	4b72      	ldr	r3, [pc, #456]	; (801f41c <SX1276OnDio0Irq+0x340>)
 801f254:	0018      	movs	r0, r3
 801f256:	f7fd fcbf 	bl	801cbd8 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801f25a:	4b6f      	ldr	r3, [pc, #444]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f25c:	2226      	movs	r2, #38	; 0x26
 801f25e:	5c9b      	ldrb	r3, [r3, r2]
 801f260:	2201      	movs	r2, #1
 801f262:	4053      	eors	r3, r2
 801f264:	b2db      	uxtb	r3, r3
 801f266:	2b00      	cmp	r3, #0
 801f268:	d007      	beq.n	801f27a <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 801f26a:	4b6b      	ldr	r3, [pc, #428]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f26c:	2200      	movs	r2, #0
 801f26e:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801f270:	4b6b      	ldr	r3, [pc, #428]	; (801f420 <SX1276OnDio0Irq+0x344>)
 801f272:	0018      	movs	r0, r3
 801f274:	f7fd fcb0 	bl	801cbd8 <TimerStop>
 801f278:	e00f      	b.n	801f29a <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801f27a:	200d      	movs	r0, #13
 801f27c:	f7ff fd42 	bl	801ed04 <SX1276Read>
 801f280:	0003      	movs	r3, r0
 801f282:	001a      	movs	r2, r3
 801f284:	2340      	movs	r3, #64	; 0x40
 801f286:	4313      	orrs	r3, r2
 801f288:	b2db      	uxtb	r3, r3
 801f28a:	0019      	movs	r1, r3
 801f28c:	200d      	movs	r0, #13
 801f28e:	f7ff fd25 	bl	801ecdc <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 801f292:	4b63      	ldr	r3, [pc, #396]	; (801f420 <SX1276OnDio0Irq+0x344>)
 801f294:	0018      	movs	r0, r3
 801f296:	f7fd fc49 	bl	801cb2c <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801f29a:	4b62      	ldr	r3, [pc, #392]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d010      	beq.n	801f2c4 <SX1276OnDio0Irq+0x1e8>
 801f2a2:	4b60      	ldr	r3, [pc, #384]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	689b      	ldr	r3, [r3, #8]
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d00b      	beq.n	801f2c4 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801f2ac:	4b5d      	ldr	r3, [pc, #372]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	689c      	ldr	r4, [r3, #8]
 801f2b2:	4b59      	ldr	r3, [pc, #356]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f2b4:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801f2b6:	4b58      	ldr	r3, [pc, #352]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f2b8:	2232      	movs	r2, #50	; 0x32
 801f2ba:	569b      	ldrsb	r3, [r3, r2]
 801f2bc:	b21a      	sxth	r2, r3
 801f2be:	485b      	ldr	r0, [pc, #364]	; (801f42c <SX1276OnDio0Irq+0x350>)
 801f2c0:	2300      	movs	r3, #0
 801f2c2:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801f2c4:	4b54      	ldr	r3, [pc, #336]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f2c6:	2230      	movs	r2, #48	; 0x30
 801f2c8:	2100      	movs	r1, #0
 801f2ca:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801f2cc:	4b52      	ldr	r3, [pc, #328]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f2ce:	2231      	movs	r2, #49	; 0x31
 801f2d0:	2100      	movs	r1, #0
 801f2d2:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801f2d4:	4b50      	ldr	r3, [pc, #320]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f2d6:	2200      	movs	r2, #0
 801f2d8:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801f2da:	4b4f      	ldr	r3, [pc, #316]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f2dc:	2200      	movs	r2, #0
 801f2de:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801f2e0:	e0fd      	b.n	801f4de <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801f2e2:	2140      	movs	r1, #64	; 0x40
 801f2e4:	2012      	movs	r0, #18
 801f2e6:	f7ff fcf9 	bl	801ecdc <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801f2ea:	2012      	movs	r0, #18
 801f2ec:	f7ff fd0a 	bl	801ed04 <SX1276Read>
 801f2f0:	0003      	movs	r3, r0
 801f2f2:	001a      	movs	r2, r3
 801f2f4:	210d      	movs	r1, #13
 801f2f6:	187b      	adds	r3, r7, r1
 801f2f8:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801f2fa:	187b      	adds	r3, r7, r1
 801f2fc:	781b      	ldrb	r3, [r3, #0]
 801f2fe:	b2db      	uxtb	r3, r3
 801f300:	001a      	movs	r2, r3
 801f302:	2320      	movs	r3, #32
 801f304:	4013      	ands	r3, r2
 801f306:	2b20      	cmp	r3, #32
 801f308:	d122      	bne.n	801f350 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801f30a:	2120      	movs	r1, #32
 801f30c:	2012      	movs	r0, #18
 801f30e:	f7ff fce5 	bl	801ecdc <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801f312:	4b41      	ldr	r3, [pc, #260]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f314:	2256      	movs	r2, #86	; 0x56
 801f316:	5c9b      	ldrb	r3, [r3, r2]
 801f318:	2201      	movs	r2, #1
 801f31a:	4053      	eors	r3, r2
 801f31c:	b2db      	uxtb	r3, r3
 801f31e:	2b00      	cmp	r3, #0
 801f320:	d002      	beq.n	801f328 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 801f322:	4b3d      	ldr	r3, [pc, #244]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f324:	2200      	movs	r2, #0
 801f326:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801f328:	4b3c      	ldr	r3, [pc, #240]	; (801f41c <SX1276OnDio0Irq+0x340>)
 801f32a:	0018      	movs	r0, r3
 801f32c:	f7fd fc54 	bl	801cbd8 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801f330:	4b3c      	ldr	r3, [pc, #240]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d100      	bne.n	801f33a <SX1276OnDio0Irq+0x25e>
 801f338:	e0ce      	b.n	801f4d8 <SX1276OnDio0Irq+0x3fc>
 801f33a:	4b3a      	ldr	r3, [pc, #232]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	691b      	ldr	r3, [r3, #16]
 801f340:	2b00      	cmp	r3, #0
 801f342:	d100      	bne.n	801f346 <SX1276OnDio0Irq+0x26a>
 801f344:	e0c8      	b.n	801f4d8 <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 801f346:	4b37      	ldr	r3, [pc, #220]	; (801f424 <SX1276OnDio0Irq+0x348>)
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	691b      	ldr	r3, [r3, #16]
 801f34c:	4798      	blx	r3
                        break;
 801f34e:	e0c3      	b.n	801f4d8 <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801f350:	2019      	movs	r0, #25
 801f352:	f7ff fcd7 	bl	801ed04 <SX1276Read>
 801f356:	0003      	movs	r3, r0
 801f358:	b25b      	sxtb	r3, r3
 801f35a:	3302      	adds	r3, #2
 801f35c:	109b      	asrs	r3, r3, #2
 801f35e:	b259      	sxtb	r1, r3
 801f360:	4b2d      	ldr	r3, [pc, #180]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f362:	2260      	movs	r2, #96	; 0x60
 801f364:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801f366:	201a      	movs	r0, #26
 801f368:	f7ff fccc 	bl	801ed04 <SX1276Read>
 801f36c:	0003      	movs	r3, r0
 801f36e:	001a      	movs	r2, r3
 801f370:	230e      	movs	r3, #14
 801f372:	18fb      	adds	r3, r7, r3
 801f374:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801f376:	4b28      	ldr	r3, [pc, #160]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f378:	2260      	movs	r2, #96	; 0x60
 801f37a:	569b      	ldrsb	r3, [r3, r2]
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	da34      	bge.n	801f3ea <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801f380:	4b25      	ldr	r3, [pc, #148]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f382:	689b      	ldr	r3, [r3, #8]
 801f384:	4a2a      	ldr	r2, [pc, #168]	; (801f430 <SX1276OnDio0Irq+0x354>)
 801f386:	4293      	cmp	r3, r2
 801f388:	d917      	bls.n	801f3ba <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801f38a:	210e      	movs	r1, #14
 801f38c:	187b      	adds	r3, r7, r1
 801f38e:	2200      	movs	r2, #0
 801f390:	5e9b      	ldrsh	r3, [r3, r2]
 801f392:	111b      	asrs	r3, r3, #4
 801f394:	b21b      	sxth	r3, r3
 801f396:	b29a      	uxth	r2, r3
 801f398:	187b      	adds	r3, r7, r1
 801f39a:	881b      	ldrh	r3, [r3, #0]
 801f39c:	18d3      	adds	r3, r2, r3
 801f39e:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801f3a0:	4b1d      	ldr	r3, [pc, #116]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f3a2:	2160      	movs	r1, #96	; 0x60
 801f3a4:	565b      	ldrsb	r3, [r3, r1]
 801f3a6:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801f3a8:	18d3      	adds	r3, r2, r3
 801f3aa:	b29b      	uxth	r3, r3
 801f3ac:	3b9d      	subs	r3, #157	; 0x9d
 801f3ae:	b29b      	uxth	r3, r3
 801f3b0:	b219      	sxth	r1, r3
 801f3b2:	4b19      	ldr	r3, [pc, #100]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f3b4:	2262      	movs	r2, #98	; 0x62
 801f3b6:	5299      	strh	r1, [r3, r2]
 801f3b8:	e04d      	b.n	801f456 <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801f3ba:	210e      	movs	r1, #14
 801f3bc:	187b      	adds	r3, r7, r1
 801f3be:	2200      	movs	r2, #0
 801f3c0:	5e9b      	ldrsh	r3, [r3, r2]
 801f3c2:	111b      	asrs	r3, r3, #4
 801f3c4:	b21b      	sxth	r3, r3
 801f3c6:	b29a      	uxth	r2, r3
 801f3c8:	187b      	adds	r3, r7, r1
 801f3ca:	881b      	ldrh	r3, [r3, #0]
 801f3cc:	18d3      	adds	r3, r2, r3
 801f3ce:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801f3d0:	4b11      	ldr	r3, [pc, #68]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f3d2:	2160      	movs	r1, #96	; 0x60
 801f3d4:	565b      	ldrsb	r3, [r3, r1]
 801f3d6:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801f3d8:	18d3      	adds	r3, r2, r3
 801f3da:	b29b      	uxth	r3, r3
 801f3dc:	3ba4      	subs	r3, #164	; 0xa4
 801f3de:	b29b      	uxth	r3, r3
 801f3e0:	b219      	sxth	r1, r3
 801f3e2:	4b0d      	ldr	r3, [pc, #52]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f3e4:	2262      	movs	r2, #98	; 0x62
 801f3e6:	5299      	strh	r1, [r3, r2]
 801f3e8:	e035      	b.n	801f456 <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801f3ea:	4b0b      	ldr	r3, [pc, #44]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f3ec:	689b      	ldr	r3, [r3, #8]
 801f3ee:	4a10      	ldr	r2, [pc, #64]	; (801f430 <SX1276OnDio0Irq+0x354>)
 801f3f0:	4293      	cmp	r3, r2
 801f3f2:	d91f      	bls.n	801f434 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801f3f4:	210e      	movs	r1, #14
 801f3f6:	187b      	adds	r3, r7, r1
 801f3f8:	2200      	movs	r2, #0
 801f3fa:	5e9b      	ldrsh	r3, [r3, r2]
 801f3fc:	111b      	asrs	r3, r3, #4
 801f3fe:	b21b      	sxth	r3, r3
 801f400:	b29a      	uxth	r2, r3
 801f402:	187b      	adds	r3, r7, r1
 801f404:	881b      	ldrh	r3, [r3, #0]
 801f406:	18d3      	adds	r3, r2, r3
 801f408:	b29b      	uxth	r3, r3
 801f40a:	3b9d      	subs	r3, #157	; 0x9d
 801f40c:	b29b      	uxth	r3, r3
 801f40e:	b219      	sxth	r1, r3
 801f410:	4b01      	ldr	r3, [pc, #4]	; (801f418 <SX1276OnDio0Irq+0x33c>)
 801f412:	2262      	movs	r2, #98	; 0x62
 801f414:	5299      	strh	r1, [r3, r2]
 801f416:	e01e      	b.n	801f456 <SX1276OnDio0Irq+0x37a>
 801f418:	20002150 	.word	0x20002150
 801f41c:	200021b8 	.word	0x200021b8
 801f420:	20002138 	.word	0x20002138
 801f424:	20001c20 	.word	0x20001c20
 801f428:	2000218a 	.word	0x2000218a
 801f42c:	20001c24 	.word	0x20001c24
 801f430:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801f434:	210e      	movs	r1, #14
 801f436:	187b      	adds	r3, r7, r1
 801f438:	2200      	movs	r2, #0
 801f43a:	5e9b      	ldrsh	r3, [r3, r2]
 801f43c:	111b      	asrs	r3, r3, #4
 801f43e:	b21b      	sxth	r3, r3
 801f440:	b29a      	uxth	r2, r3
 801f442:	187b      	adds	r3, r7, r1
 801f444:	881b      	ldrh	r3, [r3, #0]
 801f446:	18d3      	adds	r3, r2, r3
 801f448:	b29b      	uxth	r3, r3
 801f44a:	3ba4      	subs	r3, #164	; 0xa4
 801f44c:	b29b      	uxth	r3, r3
 801f44e:	b219      	sxth	r1, r3
 801f450:	4b34      	ldr	r3, [pc, #208]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f452:	2262      	movs	r2, #98	; 0x62
 801f454:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801f456:	2013      	movs	r0, #19
 801f458:	f7ff fc54 	bl	801ed04 <SX1276Read>
 801f45c:	0003      	movs	r3, r0
 801f45e:	0019      	movs	r1, r3
 801f460:	4b30      	ldr	r3, [pc, #192]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f462:	2264      	movs	r2, #100	; 0x64
 801f464:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801f466:	2010      	movs	r0, #16
 801f468:	f7ff fc4c 	bl	801ed04 <SX1276Read>
 801f46c:	0003      	movs	r3, r0
 801f46e:	0019      	movs	r1, r3
 801f470:	200d      	movs	r0, #13
 801f472:	f7ff fc33 	bl	801ecdc <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801f476:	4b2b      	ldr	r3, [pc, #172]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f478:	2264      	movs	r2, #100	; 0x64
 801f47a:	5c9a      	ldrb	r2, [r3, r2]
 801f47c:	4b2a      	ldr	r3, [pc, #168]	; (801f528 <SX1276OnDio0Irq+0x44c>)
 801f47e:	0011      	movs	r1, r2
 801f480:	0018      	movs	r0, r3
 801f482:	f7ff fd07 	bl	801ee94 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801f486:	4b27      	ldr	r3, [pc, #156]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f488:	2256      	movs	r2, #86	; 0x56
 801f48a:	5c9b      	ldrb	r3, [r3, r2]
 801f48c:	2201      	movs	r2, #1
 801f48e:	4053      	eors	r3, r2
 801f490:	b2db      	uxtb	r3, r3
 801f492:	2b00      	cmp	r3, #0
 801f494:	d002      	beq.n	801f49c <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 801f496:	4b23      	ldr	r3, [pc, #140]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f498:	2200      	movs	r2, #0
 801f49a:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801f49c:	4b23      	ldr	r3, [pc, #140]	; (801f52c <SX1276OnDio0Irq+0x450>)
 801f49e:	0018      	movs	r0, r3
 801f4a0:	f7fd fb9a 	bl	801cbd8 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801f4a4:	4b22      	ldr	r3, [pc, #136]	; (801f530 <SX1276OnDio0Irq+0x454>)
 801f4a6:	681b      	ldr	r3, [r3, #0]
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d017      	beq.n	801f4dc <SX1276OnDio0Irq+0x400>
 801f4ac:	4b20      	ldr	r3, [pc, #128]	; (801f530 <SX1276OnDio0Irq+0x454>)
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	689b      	ldr	r3, [r3, #8]
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d012      	beq.n	801f4dc <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801f4b6:	4b1e      	ldr	r3, [pc, #120]	; (801f530 <SX1276OnDio0Irq+0x454>)
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	689c      	ldr	r4, [r3, #8]
 801f4bc:	4b19      	ldr	r3, [pc, #100]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f4be:	2264      	movs	r2, #100	; 0x64
 801f4c0:	5c9b      	ldrb	r3, [r3, r2]
 801f4c2:	b299      	uxth	r1, r3
 801f4c4:	4b17      	ldr	r3, [pc, #92]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f4c6:	2262      	movs	r2, #98	; 0x62
 801f4c8:	5e9d      	ldrsh	r5, [r3, r2]
 801f4ca:	4b16      	ldr	r3, [pc, #88]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f4cc:	2260      	movs	r2, #96	; 0x60
 801f4ce:	569b      	ldrsb	r3, [r3, r2]
 801f4d0:	4815      	ldr	r0, [pc, #84]	; (801f528 <SX1276OnDio0Irq+0x44c>)
 801f4d2:	002a      	movs	r2, r5
 801f4d4:	47a0      	blx	r4
                break;
 801f4d6:	e001      	b.n	801f4dc <SX1276OnDio0Irq+0x400>
                        break;
 801f4d8:	46c0      	nop			; (mov r8, r8)
 801f4da:	e01f      	b.n	801f51c <SX1276OnDio0Irq+0x440>
                break;
 801f4dc:	46c0      	nop			; (mov r8, r8)
            break;
 801f4de:	e01d      	b.n	801f51c <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 801f4e0:	4b14      	ldr	r3, [pc, #80]	; (801f534 <SX1276OnDio0Irq+0x458>)
 801f4e2:	0018      	movs	r0, r3
 801f4e4:	f7fd fb78 	bl	801cbd8 <TimerStop>
            switch( SX1276.Settings.Modem )
 801f4e8:	4b0e      	ldr	r3, [pc, #56]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f4ea:	795b      	ldrb	r3, [r3, #5]
 801f4ec:	2b01      	cmp	r3, #1
 801f4ee:	d103      	bne.n	801f4f8 <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801f4f0:	2108      	movs	r1, #8
 801f4f2:	2012      	movs	r0, #18
 801f4f4:	f7ff fbf2 	bl	801ecdc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801f4f8:	4b0a      	ldr	r3, [pc, #40]	; (801f524 <SX1276OnDio0Irq+0x448>)
 801f4fa:	2200      	movs	r2, #0
 801f4fc:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801f4fe:	4b0c      	ldr	r3, [pc, #48]	; (801f530 <SX1276OnDio0Irq+0x454>)
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	2b00      	cmp	r3, #0
 801f504:	d008      	beq.n	801f518 <SX1276OnDio0Irq+0x43c>
 801f506:	4b0a      	ldr	r3, [pc, #40]	; (801f530 <SX1276OnDio0Irq+0x454>)
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	d003      	beq.n	801f518 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 801f510:	4b07      	ldr	r3, [pc, #28]	; (801f530 <SX1276OnDio0Irq+0x454>)
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	681b      	ldr	r3, [r3, #0]
 801f516:	4798      	blx	r3
                break;
 801f518:	46c0      	nop			; (mov r8, r8)
            break;
 801f51a:	46c0      	nop			; (mov r8, r8)
    }
}
 801f51c:	46c0      	nop			; (mov r8, r8)
 801f51e:	46bd      	mov	sp, r7
 801f520:	b004      	add	sp, #16
 801f522:	bdb0      	pop	{r4, r5, r7, pc}
 801f524:	20002150 	.word	0x20002150
 801f528:	20001c24 	.word	0x20001c24
 801f52c:	200021b8 	.word	0x200021b8
 801f530:	20001c20 	.word	0x20001c20
 801f534:	20002120 	.word	0x20002120

0801f538 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 801f538:	b580      	push	{r7, lr}
 801f53a:	b082      	sub	sp, #8
 801f53c:	af00      	add	r7, sp, #0
 801f53e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio1Irq\r\n"));

    switch( SX1276.Settings.State )
 801f540:	4b61      	ldr	r3, [pc, #388]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f542:	791b      	ldrb	r3, [r3, #4]
 801f544:	2b01      	cmp	r3, #1
 801f546:	d003      	beq.n	801f550 <SX1276OnDio1Irq+0x18>
 801f548:	2b02      	cmp	r3, #2
 801f54a:	d100      	bne.n	801f54e <SX1276OnDio1Irq+0x16>
 801f54c:	e078      	b.n	801f640 <SX1276OnDio1Irq+0x108>
            default:
                break;
            }
            break;
        default:
            break;
 801f54e:	e0b6      	b.n	801f6be <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 801f550:	4b5d      	ldr	r3, [pc, #372]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f552:	795b      	ldrb	r3, [r3, #5]
 801f554:	2b00      	cmp	r3, #0
 801f556:	d002      	beq.n	801f55e <SX1276OnDio1Irq+0x26>
 801f558:	2b01      	cmp	r3, #1
 801f55a:	d057      	beq.n	801f60c <SX1276OnDio1Irq+0xd4>
                break;
 801f55c:	e06f      	b.n	801f63e <SX1276OnDio1Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801f55e:	4b5a      	ldr	r3, [pc, #360]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f560:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f562:	2b00      	cmp	r3, #0
 801f564:	d118      	bne.n	801f598 <SX1276OnDio1Irq+0x60>
 801f566:	4b58      	ldr	r3, [pc, #352]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f568:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	d114      	bne.n	801f598 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801f56e:	4b56      	ldr	r3, [pc, #344]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f570:	2222      	movs	r2, #34	; 0x22
 801f572:	5c9b      	ldrb	r3, [r3, r2]
 801f574:	2201      	movs	r2, #1
 801f576:	4053      	eors	r3, r2
 801f578:	b2db      	uxtb	r3, r3
 801f57a:	2b00      	cmp	r3, #0
 801f57c:	d005      	beq.n	801f58a <SX1276OnDio1Irq+0x52>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801f57e:	4b53      	ldr	r3, [pc, #332]	; (801f6cc <SX1276OnDio1Irq+0x194>)
 801f580:	2101      	movs	r1, #1
 801f582:	0018      	movs	r0, r3
 801f584:	f7ff fc86 	bl	801ee94 <SX1276ReadFifo>
 801f588:	e006      	b.n	801f598 <SX1276OnDio1Irq+0x60>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801f58a:	2032      	movs	r0, #50	; 0x32
 801f58c:	f7ff fbba 	bl	801ed04 <SX1276Read>
 801f590:	0003      	movs	r3, r0
 801f592:	b29a      	uxth	r2, r3
 801f594:	4b4c      	ldr	r3, [pc, #304]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f596:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801f598:	4b4b      	ldr	r3, [pc, #300]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f59a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f59c:	001a      	movs	r2, r3
 801f59e:	4b4a      	ldr	r3, [pc, #296]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5a0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f5a2:	1ad3      	subs	r3, r2, r3
 801f5a4:	4a48      	ldr	r2, [pc, #288]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5a6:	213e      	movs	r1, #62	; 0x3e
 801f5a8:	5c52      	ldrb	r2, [r2, r1]
 801f5aa:	4293      	cmp	r3, r2
 801f5ac:	db19      	blt.n	801f5e2 <SX1276OnDio1Irq+0xaa>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801f5ae:	4b46      	ldr	r3, [pc, #280]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f5b2:	001a      	movs	r2, r3
 801f5b4:	4b46      	ldr	r3, [pc, #280]	; (801f6d0 <SX1276OnDio1Irq+0x198>)
 801f5b6:	18d0      	adds	r0, r2, r3
 801f5b8:	4b43      	ldr	r3, [pc, #268]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5ba:	223e      	movs	r2, #62	; 0x3e
 801f5bc:	5c9b      	ldrb	r3, [r3, r2]
 801f5be:	3b01      	subs	r3, #1
 801f5c0:	b2db      	uxtb	r3, r3
 801f5c2:	0019      	movs	r1, r3
 801f5c4:	f7ff fc66 	bl	801ee94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801f5c8:	4b3f      	ldr	r3, [pc, #252]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5ca:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801f5cc:	4b3e      	ldr	r3, [pc, #248]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5ce:	213e      	movs	r1, #62	; 0x3e
 801f5d0:	5c5b      	ldrb	r3, [r3, r1]
 801f5d2:	b29b      	uxth	r3, r3
 801f5d4:	18d3      	adds	r3, r2, r3
 801f5d6:	b29b      	uxth	r3, r3
 801f5d8:	3b01      	subs	r3, #1
 801f5da:	b29a      	uxth	r2, r3
 801f5dc:	4b3a      	ldr	r3, [pc, #232]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5de:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801f5e0:	e02d      	b.n	801f63e <SX1276OnDio1Irq+0x106>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f5e2:	4b39      	ldr	r3, [pc, #228]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f5e6:	001a      	movs	r2, r3
 801f5e8:	4b39      	ldr	r3, [pc, #228]	; (801f6d0 <SX1276OnDio1Irq+0x198>)
 801f5ea:	18d0      	adds	r0, r2, r3
 801f5ec:	4b36      	ldr	r3, [pc, #216]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5ee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f5f0:	b2da      	uxtb	r2, r3
 801f5f2:	4b35      	ldr	r3, [pc, #212]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f5f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f5f6:	b2db      	uxtb	r3, r3
 801f5f8:	1ad3      	subs	r3, r2, r3
 801f5fa:	b2db      	uxtb	r3, r3
 801f5fc:	0019      	movs	r1, r3
 801f5fe:	f7ff fc49 	bl	801ee94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f602:	4b31      	ldr	r3, [pc, #196]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f604:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801f606:	4b30      	ldr	r3, [pc, #192]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f608:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801f60a:	e018      	b.n	801f63e <SX1276OnDio1Irq+0x106>
                TimerStop( &RxTimeoutTimer );
 801f60c:	4b31      	ldr	r3, [pc, #196]	; (801f6d4 <SX1276OnDio1Irq+0x19c>)
 801f60e:	0018      	movs	r0, r3
 801f610:	f7fd fae2 	bl	801cbd8 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801f614:	2180      	movs	r1, #128	; 0x80
 801f616:	2012      	movs	r0, #18
 801f618:	f7ff fb60 	bl	801ecdc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801f61c:	4b2a      	ldr	r3, [pc, #168]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f61e:	2200      	movs	r2, #0
 801f620:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801f622:	4b2d      	ldr	r3, [pc, #180]	; (801f6d8 <SX1276OnDio1Irq+0x1a0>)
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	2b00      	cmp	r3, #0
 801f628:	d008      	beq.n	801f63c <SX1276OnDio1Irq+0x104>
 801f62a:	4b2b      	ldr	r3, [pc, #172]	; (801f6d8 <SX1276OnDio1Irq+0x1a0>)
 801f62c:	681b      	ldr	r3, [r3, #0]
 801f62e:	68db      	ldr	r3, [r3, #12]
 801f630:	2b00      	cmp	r3, #0
 801f632:	d003      	beq.n	801f63c <SX1276OnDio1Irq+0x104>
                    RadioEvents->RxTimeout( );
 801f634:	4b28      	ldr	r3, [pc, #160]	; (801f6d8 <SX1276OnDio1Irq+0x1a0>)
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	68db      	ldr	r3, [r3, #12]
 801f63a:	4798      	blx	r3
                break;
 801f63c:	46c0      	nop			; (mov r8, r8)
            break;
 801f63e:	e03e      	b.n	801f6be <SX1276OnDio1Irq+0x186>
            switch( SX1276.Settings.Modem )
 801f640:	4b21      	ldr	r3, [pc, #132]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f642:	795b      	ldrb	r3, [r3, #5]
 801f644:	2b00      	cmp	r3, #0
 801f646:	d002      	beq.n	801f64e <SX1276OnDio1Irq+0x116>
 801f648:	2b01      	cmp	r3, #1
 801f64a:	d036      	beq.n	801f6ba <SX1276OnDio1Irq+0x182>
                break;
 801f64c:	e036      	b.n	801f6bc <SX1276OnDio1Irq+0x184>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801f64e:	4b1e      	ldr	r3, [pc, #120]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f650:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f652:	001a      	movs	r2, r3
 801f654:	4b1c      	ldr	r3, [pc, #112]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f656:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f658:	1ad3      	subs	r3, r2, r3
 801f65a:	4a1b      	ldr	r2, [pc, #108]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f65c:	213f      	movs	r1, #63	; 0x3f
 801f65e:	5c52      	ldrb	r2, [r2, r1]
 801f660:	4293      	cmp	r3, r2
 801f662:	dd15      	ble.n	801f690 <SX1276OnDio1Irq+0x158>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801f664:	4b18      	ldr	r3, [pc, #96]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f666:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f668:	001a      	movs	r2, r3
 801f66a:	4b19      	ldr	r3, [pc, #100]	; (801f6d0 <SX1276OnDio1Irq+0x198>)
 801f66c:	18d0      	adds	r0, r2, r3
 801f66e:	4b16      	ldr	r3, [pc, #88]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f670:	223f      	movs	r2, #63	; 0x3f
 801f672:	5c9b      	ldrb	r3, [r3, r2]
 801f674:	0019      	movs	r1, r3
 801f676:	f7ff fbfb 	bl	801ee70 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801f67a:	4b13      	ldr	r3, [pc, #76]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f67c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801f67e:	4b12      	ldr	r3, [pc, #72]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f680:	213f      	movs	r1, #63	; 0x3f
 801f682:	5c5b      	ldrb	r3, [r3, r1]
 801f684:	b29b      	uxth	r3, r3
 801f686:	18d3      	adds	r3, r2, r3
 801f688:	b29a      	uxth	r2, r3
 801f68a:	4b0f      	ldr	r3, [pc, #60]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f68c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801f68e:	e015      	b.n	801f6bc <SX1276OnDio1Irq+0x184>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801f690:	4b0d      	ldr	r3, [pc, #52]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f692:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f694:	001a      	movs	r2, r3
 801f696:	4b0e      	ldr	r3, [pc, #56]	; (801f6d0 <SX1276OnDio1Irq+0x198>)
 801f698:	18d0      	adds	r0, r2, r3
 801f69a:	4b0b      	ldr	r3, [pc, #44]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f69c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801f69e:	b2da      	uxtb	r2, r3
 801f6a0:	4b09      	ldr	r3, [pc, #36]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f6a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801f6a4:	b2db      	uxtb	r3, r3
 801f6a6:	1ad3      	subs	r3, r2, r3
 801f6a8:	b2db      	uxtb	r3, r3
 801f6aa:	0019      	movs	r1, r3
 801f6ac:	f7ff fbe0 	bl	801ee70 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801f6b0:	4b05      	ldr	r3, [pc, #20]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f6b2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801f6b4:	4b04      	ldr	r3, [pc, #16]	; (801f6c8 <SX1276OnDio1Irq+0x190>)
 801f6b6:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801f6b8:	e000      	b.n	801f6bc <SX1276OnDio1Irq+0x184>
                break;
 801f6ba:	46c0      	nop			; (mov r8, r8)
            break;
 801f6bc:	46c0      	nop			; (mov r8, r8)
    }
}
 801f6be:	46c0      	nop			; (mov r8, r8)
 801f6c0:	46bd      	mov	sp, r7
 801f6c2:	b002      	add	sp, #8
 801f6c4:	bd80      	pop	{r7, pc}
 801f6c6:	46c0      	nop			; (mov r8, r8)
 801f6c8:	20002150 	.word	0x20002150
 801f6cc:	2000218a 	.word	0x2000218a
 801f6d0:	20001c24 	.word	0x20001c24
 801f6d4:	200021b8 	.word	0x200021b8
 801f6d8:	20001c20 	.word	0x20001c20

0801f6dc <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 801f6dc:	b590      	push	{r4, r7, lr}
 801f6de:	b087      	sub	sp, #28
 801f6e0:	af00      	add	r7, sp, #0
 801f6e2:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio2Irq\r\n"));

    uint32_t afcChannel = 0;
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 801f6e8:	4b5c      	ldr	r3, [pc, #368]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f6ea:	791b      	ldrb	r3, [r3, #4]
 801f6ec:	2b01      	cmp	r3, #1
 801f6ee:	d003      	beq.n	801f6f8 <SX1276OnDio2Irq+0x1c>
 801f6f0:	2b02      	cmp	r3, #2
 801f6f2:	d100      	bne.n	801f6f6 <SX1276OnDio2Irq+0x1a>
 801f6f4:	e083      	b.n	801f7fe <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 801f6f6:	e0ad      	b.n	801f854 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801f6f8:	4b58      	ldr	r3, [pc, #352]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f6fa:	795b      	ldrb	r3, [r3, #5]
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d002      	beq.n	801f706 <SX1276OnDio2Irq+0x2a>
 801f700:	2b01      	cmp	r3, #1
 801f702:	d058      	beq.n	801f7b6 <SX1276OnDio2Irq+0xda>
                break;
 801f704:	e07a      	b.n	801f7fc <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801f706:	4b55      	ldr	r3, [pc, #340]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f708:	2230      	movs	r2, #48	; 0x30
 801f70a:	2101      	movs	r1, #1
 801f70c:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 801f70e:	4b53      	ldr	r3, [pc, #332]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f710:	2230      	movs	r2, #48	; 0x30
 801f712:	5c9b      	ldrb	r3, [r3, r2]
 801f714:	2b01      	cmp	r3, #1
 801f716:	d16e      	bne.n	801f7f6 <SX1276OnDio2Irq+0x11a>
 801f718:	4b50      	ldr	r3, [pc, #320]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f71a:	2231      	movs	r2, #49	; 0x31
 801f71c:	5c9b      	ldrb	r3, [r3, r2]
 801f71e:	2b00      	cmp	r3, #0
 801f720:	d169      	bne.n	801f7f6 <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 801f722:	4b4f      	ldr	r3, [pc, #316]	; (801f860 <SX1276OnDio2Irq+0x184>)
 801f724:	0018      	movs	r0, r3
 801f726:	f7fd fa57 	bl	801cbd8 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801f72a:	4b4c      	ldr	r3, [pc, #304]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f72c:	2231      	movs	r2, #49	; 0x31
 801f72e:	2101      	movs	r1, #1
 801f730:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801f732:	2011      	movs	r0, #17
 801f734:	f7ff fae6 	bl	801ed04 <SX1276Read>
 801f738:	0003      	movs	r3, r0
 801f73a:	085b      	lsrs	r3, r3, #1
 801f73c:	b2db      	uxtb	r3, r3
 801f73e:	425b      	negs	r3, r3
 801f740:	b2db      	uxtb	r3, r3
 801f742:	b259      	sxtb	r1, r3
 801f744:	4b45      	ldr	r3, [pc, #276]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f746:	2232      	movs	r2, #50	; 0x32
 801f748:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801f74a:	201b      	movs	r0, #27
 801f74c:	f7ff fada 	bl	801ed04 <SX1276Read>
 801f750:	0003      	movs	r3, r0
 801f752:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801f754:	201c      	movs	r0, #28
 801f756:	f7ff fad5 	bl	801ed04 <SX1276Read>
 801f75a:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801f75c:	4323      	orrs	r3, r4
 801f75e:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801f760:	697b      	ldr	r3, [r7, #20]
 801f762:	0a1b      	lsrs	r3, r3, #8
 801f764:	613b      	str	r3, [r7, #16]
 801f766:	693b      	ldr	r3, [r7, #16]
 801f768:	021b      	lsls	r3, r3, #8
 801f76a:	697a      	ldr	r2, [r7, #20]
 801f76c:	1ad3      	subs	r3, r2, r3
 801f76e:	60fb      	str	r3, [r7, #12]
 801f770:	6939      	ldr	r1, [r7, #16]
 801f772:	000b      	movs	r3, r1
 801f774:	015b      	lsls	r3, r3, #5
 801f776:	1a5b      	subs	r3, r3, r1
 801f778:	019a      	lsls	r2, r3, #6
 801f77a:	1ad2      	subs	r2, r2, r3
 801f77c:	00d2      	lsls	r2, r2, #3
 801f77e:	1850      	adds	r0, r2, r1
 801f780:	68f9      	ldr	r1, [r7, #12]
 801f782:	000b      	movs	r3, r1
 801f784:	015b      	lsls	r3, r3, #5
 801f786:	1a5b      	subs	r3, r3, r1
 801f788:	019a      	lsls	r2, r3, #6
 801f78a:	1ad2      	subs	r2, r2, r3
 801f78c:	00d2      	lsls	r2, r2, #3
 801f78e:	1853      	adds	r3, r2, r1
 801f790:	3380      	adds	r3, #128	; 0x80
 801f792:	0a1b      	lsrs	r3, r3, #8
 801f794:	18c3      	adds	r3, r0, r3
 801f796:	001a      	movs	r2, r3
 801f798:	4b30      	ldr	r3, [pc, #192]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f79a:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801f79c:	200c      	movs	r0, #12
 801f79e:	f7ff fab1 	bl	801ed04 <SX1276Read>
 801f7a2:	0003      	movs	r3, r0
 801f7a4:	095b      	lsrs	r3, r3, #5
 801f7a6:	b2db      	uxtb	r3, r3
 801f7a8:	2207      	movs	r2, #7
 801f7aa:	4013      	ands	r3, r2
 801f7ac:	b2d9      	uxtb	r1, r3
 801f7ae:	4b2b      	ldr	r3, [pc, #172]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f7b0:	2238      	movs	r2, #56	; 0x38
 801f7b2:	5499      	strb	r1, [r3, r2]
                break;
 801f7b4:	e01f      	b.n	801f7f6 <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801f7b6:	4b29      	ldr	r3, [pc, #164]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f7b8:	2253      	movs	r2, #83	; 0x53
 801f7ba:	5c9b      	ldrb	r3, [r3, r2]
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	d01c      	beq.n	801f7fa <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801f7c0:	2102      	movs	r1, #2
 801f7c2:	2012      	movs	r0, #18
 801f7c4:	f7ff fa8a 	bl	801ecdc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801f7c8:	4b26      	ldr	r3, [pc, #152]	; (801f864 <SX1276OnDio2Irq+0x188>)
 801f7ca:	681b      	ldr	r3, [r3, #0]
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d014      	beq.n	801f7fa <SX1276OnDio2Irq+0x11e>
 801f7d0:	4b24      	ldr	r3, [pc, #144]	; (801f864 <SX1276OnDio2Irq+0x188>)
 801f7d2:	681b      	ldr	r3, [r3, #0]
 801f7d4:	695b      	ldr	r3, [r3, #20]
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d00f      	beq.n	801f7fa <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801f7da:	4b22      	ldr	r3, [pc, #136]	; (801f864 <SX1276OnDio2Irq+0x188>)
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	695c      	ldr	r4, [r3, #20]
 801f7e0:	201c      	movs	r0, #28
 801f7e2:	f7ff fa8f 	bl	801ed04 <SX1276Read>
 801f7e6:	0003      	movs	r3, r0
 801f7e8:	001a      	movs	r2, r3
 801f7ea:	233f      	movs	r3, #63	; 0x3f
 801f7ec:	4013      	ands	r3, r2
 801f7ee:	b2db      	uxtb	r3, r3
 801f7f0:	0018      	movs	r0, r3
 801f7f2:	47a0      	blx	r4
                break;
 801f7f4:	e001      	b.n	801f7fa <SX1276OnDio2Irq+0x11e>
                break;
 801f7f6:	46c0      	nop			; (mov r8, r8)
 801f7f8:	e02c      	b.n	801f854 <SX1276OnDio2Irq+0x178>
                break;
 801f7fa:	46c0      	nop			; (mov r8, r8)
            break;
 801f7fc:	e02a      	b.n	801f854 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801f7fe:	4b17      	ldr	r3, [pc, #92]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f800:	795b      	ldrb	r3, [r3, #5]
 801f802:	2b00      	cmp	r3, #0
 801f804:	d022      	beq.n	801f84c <SX1276OnDio2Irq+0x170>
 801f806:	2b01      	cmp	r3, #1
 801f808:	d000      	beq.n	801f80c <SX1276OnDio2Irq+0x130>
                break;
 801f80a:	e022      	b.n	801f852 <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801f80c:	4b13      	ldr	r3, [pc, #76]	; (801f85c <SX1276OnDio2Irq+0x180>)
 801f80e:	2253      	movs	r2, #83	; 0x53
 801f810:	5c9b      	ldrb	r3, [r3, r2]
 801f812:	2b00      	cmp	r3, #0
 801f814:	d01c      	beq.n	801f850 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801f816:	2102      	movs	r1, #2
 801f818:	2012      	movs	r0, #18
 801f81a:	f7ff fa5f 	bl	801ecdc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801f81e:	4b11      	ldr	r3, [pc, #68]	; (801f864 <SX1276OnDio2Irq+0x188>)
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	2b00      	cmp	r3, #0
 801f824:	d014      	beq.n	801f850 <SX1276OnDio2Irq+0x174>
 801f826:	4b0f      	ldr	r3, [pc, #60]	; (801f864 <SX1276OnDio2Irq+0x188>)
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	695b      	ldr	r3, [r3, #20]
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	d00f      	beq.n	801f850 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801f830:	4b0c      	ldr	r3, [pc, #48]	; (801f864 <SX1276OnDio2Irq+0x188>)
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	695c      	ldr	r4, [r3, #20]
 801f836:	201c      	movs	r0, #28
 801f838:	f7ff fa64 	bl	801ed04 <SX1276Read>
 801f83c:	0003      	movs	r3, r0
 801f83e:	001a      	movs	r2, r3
 801f840:	233f      	movs	r3, #63	; 0x3f
 801f842:	4013      	ands	r3, r2
 801f844:	b2db      	uxtb	r3, r3
 801f846:	0018      	movs	r0, r3
 801f848:	47a0      	blx	r4
                break;
 801f84a:	e001      	b.n	801f850 <SX1276OnDio2Irq+0x174>
                break;
 801f84c:	46c0      	nop			; (mov r8, r8)
 801f84e:	e000      	b.n	801f852 <SX1276OnDio2Irq+0x176>
                break;
 801f850:	46c0      	nop			; (mov r8, r8)
            break;
 801f852:	46c0      	nop			; (mov r8, r8)
    }
}
 801f854:	46c0      	nop			; (mov r8, r8)
 801f856:	46bd      	mov	sp, r7
 801f858:	b007      	add	sp, #28
 801f85a:	bd90      	pop	{r4, r7, pc}
 801f85c:	20002150 	.word	0x20002150
 801f860:	20002138 	.word	0x20002138
 801f864:	20001c20 	.word	0x20001c20

0801f868 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 801f868:	b580      	push	{r7, lr}
 801f86a:	b082      	sub	sp, #8
 801f86c:	af00      	add	r7, sp, #0
 801f86e:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio3Irq\r\n"));

    switch( SX1276.Settings.Modem )
 801f870:	4b1e      	ldr	r3, [pc, #120]	; (801f8ec <SX1276OnDio3Irq+0x84>)
 801f872:	795b      	ldrb	r3, [r3, #5]
 801f874:	2b00      	cmp	r3, #0
 801f876:	d031      	beq.n	801f8dc <SX1276OnDio3Irq+0x74>
 801f878:	2b01      	cmp	r3, #1
 801f87a:	d000      	beq.n	801f87e <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801f87c:	e031      	b.n	801f8e2 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801f87e:	2012      	movs	r0, #18
 801f880:	f7ff fa40 	bl	801ed04 <SX1276Read>
 801f884:	0003      	movs	r3, r0
 801f886:	001a      	movs	r2, r3
 801f888:	2301      	movs	r3, #1
 801f88a:	4013      	ands	r3, r2
 801f88c:	2b01      	cmp	r3, #1
 801f88e:	d112      	bne.n	801f8b6 <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801f890:	2105      	movs	r1, #5
 801f892:	2012      	movs	r0, #18
 801f894:	f7ff fa22 	bl	801ecdc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801f898:	4b15      	ldr	r3, [pc, #84]	; (801f8f0 <SX1276OnDio3Irq+0x88>)
 801f89a:	681b      	ldr	r3, [r3, #0]
 801f89c:	2b00      	cmp	r3, #0
 801f89e:	d01f      	beq.n	801f8e0 <SX1276OnDio3Irq+0x78>
 801f8a0:	4b13      	ldr	r3, [pc, #76]	; (801f8f0 <SX1276OnDio3Irq+0x88>)
 801f8a2:	681b      	ldr	r3, [r3, #0]
 801f8a4:	699b      	ldr	r3, [r3, #24]
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	d01a      	beq.n	801f8e0 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 801f8aa:	4b11      	ldr	r3, [pc, #68]	; (801f8f0 <SX1276OnDio3Irq+0x88>)
 801f8ac:	681b      	ldr	r3, [r3, #0]
 801f8ae:	699b      	ldr	r3, [r3, #24]
 801f8b0:	2001      	movs	r0, #1
 801f8b2:	4798      	blx	r3
        break;
 801f8b4:	e014      	b.n	801f8e0 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801f8b6:	2104      	movs	r1, #4
 801f8b8:	2012      	movs	r0, #18
 801f8ba:	f7ff fa0f 	bl	801ecdc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801f8be:	4b0c      	ldr	r3, [pc, #48]	; (801f8f0 <SX1276OnDio3Irq+0x88>)
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	d00c      	beq.n	801f8e0 <SX1276OnDio3Irq+0x78>
 801f8c6:	4b0a      	ldr	r3, [pc, #40]	; (801f8f0 <SX1276OnDio3Irq+0x88>)
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	699b      	ldr	r3, [r3, #24]
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	d007      	beq.n	801f8e0 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 801f8d0:	4b07      	ldr	r3, [pc, #28]	; (801f8f0 <SX1276OnDio3Irq+0x88>)
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	699b      	ldr	r3, [r3, #24]
 801f8d6:	2000      	movs	r0, #0
 801f8d8:	4798      	blx	r3
        break;
 801f8da:	e001      	b.n	801f8e0 <SX1276OnDio3Irq+0x78>
        break;
 801f8dc:	46c0      	nop			; (mov r8, r8)
 801f8de:	e000      	b.n	801f8e2 <SX1276OnDio3Irq+0x7a>
        break;
 801f8e0:	46c0      	nop			; (mov r8, r8)
    }
}
 801f8e2:	46c0      	nop			; (mov r8, r8)
 801f8e4:	46bd      	mov	sp, r7
 801f8e6:	b002      	add	sp, #8
 801f8e8:	bd80      	pop	{r7, pc}
 801f8ea:	46c0      	nop			; (mov r8, r8)
 801f8ec:	20002150 	.word	0x20002150
 801f8f0:	20001c20 	.word	0x20001c20

0801f8f4 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 801f8f4:	b580      	push	{r7, lr}
 801f8f6:	b082      	sub	sp, #8
 801f8f8:	af00      	add	r7, sp, #0
 801f8fa:	6078      	str	r0, [r7, #4]
	LOG_INFO_SX1276((">> SX1276OnDio4Irq\r\n"));

    switch( SX1276.Settings.Modem )
 801f8fc:	4b0b      	ldr	r3, [pc, #44]	; (801f92c <SX1276OnDio4Irq+0x38>)
 801f8fe:	795b      	ldrb	r3, [r3, #5]
 801f900:	2b00      	cmp	r3, #0
 801f902:	d002      	beq.n	801f90a <SX1276OnDio4Irq+0x16>
 801f904:	2b01      	cmp	r3, #1
 801f906:	d00a      	beq.n	801f91e <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801f908:	e00c      	b.n	801f924 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801f90a:	4b08      	ldr	r3, [pc, #32]	; (801f92c <SX1276OnDio4Irq+0x38>)
 801f90c:	2230      	movs	r2, #48	; 0x30
 801f90e:	5c9b      	ldrb	r3, [r3, r2]
 801f910:	2b00      	cmp	r3, #0
 801f912:	d106      	bne.n	801f922 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801f914:	4b05      	ldr	r3, [pc, #20]	; (801f92c <SX1276OnDio4Irq+0x38>)
 801f916:	2230      	movs	r2, #48	; 0x30
 801f918:	2101      	movs	r1, #1
 801f91a:	5499      	strb	r1, [r3, r2]
        break;
 801f91c:	e001      	b.n	801f922 <SX1276OnDio4Irq+0x2e>
        break;
 801f91e:	46c0      	nop			; (mov r8, r8)
 801f920:	e000      	b.n	801f924 <SX1276OnDio4Irq+0x30>
        break;
 801f922:	46c0      	nop			; (mov r8, r8)
    }
}
 801f924:	46c0      	nop			; (mov r8, r8)
 801f926:	46bd      	mov	sp, r7
 801f928:	b002      	add	sp, #8
 801f92a:	bd80      	pop	{r7, pc}
 801f92c:	20002150 	.word	0x20002150

0801f930 <_itsdk_console_private>:

/**
 * Dafault Operation
 */

static itsdk_console_return_e _itsdk_console_private(char * buffer, uint8_t sz) {
 801f930:	b5b0      	push	{r4, r5, r7, lr}
 801f932:	b084      	sub	sp, #16
 801f934:	af00      	add	r7, sp, #0
 801f936:	6078      	str	r0, [r7, #4]
 801f938:	000a      	movs	r2, r1
 801f93a:	1cfb      	adds	r3, r7, #3
 801f93c:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 801f93e:	1cfb      	adds	r3, r7, #3
 801f940:	781b      	ldrb	r3, [r3, #0]
 801f942:	2b01      	cmp	r3, #1
 801f944:	d000      	beq.n	801f948 <_itsdk_console_private+0x18>
 801f946:	e0d1      	b.n	801faec <_itsdk_console_private+0x1bc>
		switch ( buffer[0] ) {
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	781b      	ldrb	r3, [r3, #0]
 801f94c:	3b3f      	subs	r3, #63	; 0x3f
 801f94e:	2b35      	cmp	r3, #53	; 0x35
 801f950:	d900      	bls.n	801f954 <_itsdk_console_private+0x24>
 801f952:	e0e5      	b.n	801fb20 <_itsdk_console_private+0x1f0>
 801f954:	009a      	lsls	r2, r3, #2
 801f956:	4b78      	ldr	r3, [pc, #480]	; (801fb38 <_itsdk_console_private+0x208>)
 801f958:	18d3      	adds	r3, r2, r3
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	469f      	mov	pc, r3
		case '?':
			// help
			_itsdk_console_printf("X          : exit console\r\n");
 801f95e:	4b77      	ldr	r3, [pc, #476]	; (801fb3c <_itsdk_console_private+0x20c>)
 801f960:	0018      	movs	r0, r3
 801f962:	f000 fa0f 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("R          : reset device\r\n");
 801f966:	4b76      	ldr	r3, [pc, #472]	; (801fb40 <_itsdk_console_private+0x210>)
 801f968:	0018      	movs	r0, r3
 801f96a:	f000 fa0b 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("R!         : clear the whole eeprom\r\n");
 801f96e:	4b75      	ldr	r3, [pc, #468]	; (801fb44 <_itsdk_console_private+0x214>)
 801f970:	0018      	movs	r0, r3
 801f972:	f000 fa07 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("l / L      : switch LowPower ON / OFF\r\n");
 801f976:	4b74      	ldr	r3, [pc, #464]	; (801fb48 <_itsdk_console_private+0x218>)
 801f978:	0018      	movs	r0, r3
 801f97a:	f000 fa03 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("s          : print device state\r\n");
 801f97e:	4b73      	ldr	r3, [pc, #460]	; (801fb4c <_itsdk_console_private+0x21c>)
 801f980:	0018      	movs	r0, r3
 801f982:	f000 f9ff 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("t          : print current time in S\r\n");
 801f986:	4b72      	ldr	r3, [pc, #456]	; (801fb50 <_itsdk_console_private+0x220>)
 801f988:	0018      	movs	r0, r3
 801f98a:	f000 f9fb 	bl	801fd84 <_itsdk_console_printf>
#if ITSDK_WITH_ADC != __ADC_NONE
			_itsdk_console_printf("T          : print current cpu temperature in oC\r\n");
 801f98e:	4b71      	ldr	r3, [pc, #452]	; (801fb54 <_itsdk_console_private+0x224>)
 801f990:	0018      	movs	r0, r3
 801f992:	f000 f9f7 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("b          : print battery level\r\n");
 801f996:	4b70      	ldr	r3, [pc, #448]	; (801fb58 <_itsdk_console_private+0x228>)
 801f998:	0018      	movs	r0, r3
 801f99a:	f000 f9f3 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("B          : print VCC level\r\n");
 801f99e:	4b6f      	ldr	r3, [pc, #444]	; (801fb5c <_itsdk_console_private+0x22c>)
 801f9a0:	0018      	movs	r0, r3
 801f9a2:	f000 f9ef 	bl	801fd84 <_itsdk_console_printf>
#endif
			_itsdk_console_printf("r          : print last Reset Cause\r\n");
 801f9a6:	4b6e      	ldr	r3, [pc, #440]	; (801fb60 <_itsdk_console_private+0x230>)
 801f9a8:	0018      	movs	r0, r3
 801f9aa:	f000 f9eb 	bl	801fd84 <_itsdk_console_printf>
#if ITSDK_RADIO_CERTIF == __ENABLE && (ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE )
			_itsdk_console_printf("c:0:nnn    : CW for CE tests with power\r\n");
			_itsdk_console_printf("c:1:nnn    : CW for EU Sigfox tests with power\r\n");
#endif

			return ITSDK_CONSOLE_SUCCES;
 801f9ae:	2300      	movs	r3, #0
 801f9b0:	e0bd      	b.n	801fb2e <_itsdk_console_private+0x1fe>
		case 'X':
			// exit console
			__console.loginState=0;
 801f9b2:	4b6c      	ldr	r3, [pc, #432]	; (801fb64 <_itsdk_console_private+0x234>)
 801f9b4:	781a      	ldrb	r2, [r3, #0]
 801f9b6:	2101      	movs	r1, #1
 801f9b8:	438a      	bics	r2, r1
 801f9ba:	701a      	strb	r2, [r3, #0]
			goto success;
 801f9bc:	e0b2      	b.n	801fb24 <_itsdk_console_private+0x1f4>
		case 't':
			// print time
			_itsdk_console_printf("Run time is %d s\r\n",(uint32_t)(itsdk_time_get_ms()/1000L));
 801f9be:	f004 faa1 	bl	8023f04 <itsdk_time_get_ms>
 801f9c2:	22fa      	movs	r2, #250	; 0xfa
 801f9c4:	0092      	lsls	r2, r2, #2
 801f9c6:	2300      	movs	r3, #0
 801f9c8:	f7e0 fdb8 	bl	800053c <__aeabi_uldivmod>
 801f9cc:	0003      	movs	r3, r0
 801f9ce:	000c      	movs	r4, r1
 801f9d0:	001a      	movs	r2, r3
 801f9d2:	4b65      	ldr	r3, [pc, #404]	; (801fb68 <_itsdk_console_private+0x238>)
 801f9d4:	0011      	movs	r1, r2
 801f9d6:	0018      	movs	r0, r3
 801f9d8:	f000 f9d4 	bl	801fd84 <_itsdk_console_printf>
			goto success;
 801f9dc:	e0a2      	b.n	801fb24 <_itsdk_console_private+0x1f4>
#if ITSDK_WITH_ADC != __ADC_NONE
		case 'T':
			// print temperature
			{
			uint16_t t = adc_getTemperature();
 801f9de:	f004 fda3 	bl	8024528 <adc_getTemperature>
 801f9e2:	0003      	movs	r3, r0
 801f9e4:	001a      	movs	r2, r3
 801f9e6:	240e      	movs	r4, #14
 801f9e8:	193b      	adds	r3, r7, r4
 801f9ea:	801a      	strh	r2, [r3, #0]
			_itsdk_console_printf("Temperature is %d.%doC\r\n",t/100,t-((t/100)*100));
 801f9ec:	193b      	adds	r3, r7, r4
 801f9ee:	881b      	ldrh	r3, [r3, #0]
 801f9f0:	2164      	movs	r1, #100	; 0x64
 801f9f2:	0018      	movs	r0, r3
 801f9f4:	f7e0 fb90 	bl	8000118 <__udivsi3>
 801f9f8:	0003      	movs	r3, r0
 801f9fa:	b29b      	uxth	r3, r3
 801f9fc:	001d      	movs	r5, r3
 801f9fe:	0022      	movs	r2, r4
 801fa00:	18bb      	adds	r3, r7, r2
 801fa02:	881c      	ldrh	r4, [r3, #0]
 801fa04:	18bb      	adds	r3, r7, r2
 801fa06:	881b      	ldrh	r3, [r3, #0]
 801fa08:	2164      	movs	r1, #100	; 0x64
 801fa0a:	0018      	movs	r0, r3
 801fa0c:	f7e0 fb84 	bl	8000118 <__udivsi3>
 801fa10:	0003      	movs	r3, r0
 801fa12:	b29b      	uxth	r3, r3
 801fa14:	001a      	movs	r2, r3
 801fa16:	0013      	movs	r3, r2
 801fa18:	065b      	lsls	r3, r3, #25
 801fa1a:	1a9b      	subs	r3, r3, r2
 801fa1c:	009b      	lsls	r3, r3, #2
 801fa1e:	189b      	adds	r3, r3, r2
 801fa20:	00db      	lsls	r3, r3, #3
 801fa22:	1a9b      	subs	r3, r3, r2
 801fa24:	009b      	lsls	r3, r3, #2
 801fa26:	18e2      	adds	r2, r4, r3
 801fa28:	4b50      	ldr	r3, [pc, #320]	; (801fb6c <_itsdk_console_private+0x23c>)
 801fa2a:	0029      	movs	r1, r5
 801fa2c:	0018      	movs	r0, r3
 801fa2e:	f000 f9a9 	bl	801fd84 <_itsdk_console_printf>
			goto success;
 801fa32:	e077      	b.n	801fb24 <_itsdk_console_private+0x1f4>
			}
		case 'b':
			// battery level
			_itsdk_console_printf("Battery level %dmV\r\n",(uint32_t)(adc_getVBat()));
 801fa34:	f004 fe00 	bl	8024638 <adc_getVBat>
 801fa38:	0003      	movs	r3, r0
 801fa3a:	001a      	movs	r2, r3
 801fa3c:	4b4c      	ldr	r3, [pc, #304]	; (801fb70 <_itsdk_console_private+0x240>)
 801fa3e:	0011      	movs	r1, r2
 801fa40:	0018      	movs	r0, r3
 801fa42:	f000 f99f 	bl	801fd84 <_itsdk_console_printf>
			goto success;
 801fa46:	e06d      	b.n	801fb24 <_itsdk_console_private+0x1f4>
		case 'B':
			// Vcc level
			_itsdk_console_printf("VCC level %dmV\r\n",(uint32_t)(adc_getVdd()));
 801fa48:	f004 fdc6 	bl	80245d8 <adc_getVdd>
 801fa4c:	0003      	movs	r3, r0
 801fa4e:	001a      	movs	r2, r3
 801fa50:	4b48      	ldr	r3, [pc, #288]	; (801fb74 <_itsdk_console_private+0x244>)
 801fa52:	0011      	movs	r1, r2
 801fa54:	0018      	movs	r0, r3
 801fa56:	f000 f995 	bl	801fd84 <_itsdk_console_printf>
			goto success;
 801fa5a:	e063      	b.n	801fb24 <_itsdk_console_private+0x1f4>
#endif
		case 'r':
			// Last Reset cause
			_itsdk_console_printf("Reset: ");
 801fa5c:	4b46      	ldr	r3, [pc, #280]	; (801fb78 <_itsdk_console_private+0x248>)
 801fa5e:	0018      	movs	r0, r3
 801fa60:	f000 f990 	bl	801fd84 <_itsdk_console_printf>
			switch(itsdk_state.lastResetCause) {
 801fa64:	4b45      	ldr	r3, [pc, #276]	; (801fb7c <_itsdk_console_private+0x24c>)
 801fa66:	781b      	ldrb	r3, [r3, #0]
 801fa68:	2b06      	cmp	r3, #6
 801fa6a:	d827      	bhi.n	801fabc <_itsdk_console_private+0x18c>
 801fa6c:	009a      	lsls	r2, r3, #2
 801fa6e:	4b44      	ldr	r3, [pc, #272]	; (801fb80 <_itsdk_console_private+0x250>)
 801fa70:	18d3      	adds	r3, r2, r3
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	469f      	mov	pc, r3
			case RESET_CAUSE_BOR: _itsdk_console_printf("BOR\r\n"); break;
 801fa76:	4b43      	ldr	r3, [pc, #268]	; (801fb84 <_itsdk_console_private+0x254>)
 801fa78:	0018      	movs	r0, r3
 801fa7a:	f000 f983 	bl	801fd84 <_itsdk_console_printf>
 801fa7e:	e022      	b.n	801fac6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_RESET_PIN: _itsdk_console_printf("RESET PIN\r\n"); break;
 801fa80:	4b41      	ldr	r3, [pc, #260]	; (801fb88 <_itsdk_console_private+0x258>)
 801fa82:	0018      	movs	r0, r3
 801fa84:	f000 f97e 	bl	801fd84 <_itsdk_console_printf>
 801fa88:	e01d      	b.n	801fac6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_POWER_ON: _itsdk_console_printf("POWER ON\r\n"); break;
 801fa8a:	4b40      	ldr	r3, [pc, #256]	; (801fb8c <_itsdk_console_private+0x25c>)
 801fa8c:	0018      	movs	r0, r3
 801fa8e:	f000 f979 	bl	801fd84 <_itsdk_console_printf>
 801fa92:	e018      	b.n	801fac6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_SOFTWARE: _itsdk_console_printf("SOFT\r\n"); break;
 801fa94:	4b3e      	ldr	r3, [pc, #248]	; (801fb90 <_itsdk_console_private+0x260>)
 801fa96:	0018      	movs	r0, r3
 801fa98:	f000 f974 	bl	801fd84 <_itsdk_console_printf>
 801fa9c:	e013      	b.n	801fac6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_IWDG: _itsdk_console_printf("IWDG\r\n"); break;
 801fa9e:	4b3d      	ldr	r3, [pc, #244]	; (801fb94 <_itsdk_console_private+0x264>)
 801faa0:	0018      	movs	r0, r3
 801faa2:	f000 f96f 	bl	801fd84 <_itsdk_console_printf>
 801faa6:	e00e      	b.n	801fac6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_WWDG: _itsdk_console_printf("WWDG\r\n"); break;
 801faa8:	4b3b      	ldr	r3, [pc, #236]	; (801fb98 <_itsdk_console_private+0x268>)
 801faaa:	0018      	movs	r0, r3
 801faac:	f000 f96a 	bl	801fd84 <_itsdk_console_printf>
 801fab0:	e009      	b.n	801fac6 <_itsdk_console_private+0x196>
			case RESET_CAUSE_LOWPOWER: _itsdk_console_printf("LOW POWER"); break;
 801fab2:	4b3a      	ldr	r3, [pc, #232]	; (801fb9c <_itsdk_console_private+0x26c>)
 801fab4:	0018      	movs	r0, r3
 801fab6:	f000 f965 	bl	801fd84 <_itsdk_console_printf>
 801faba:	e004      	b.n	801fac6 <_itsdk_console_private+0x196>
			default:
				_itsdk_console_printf("UNKNOWN\r\n"); break;
 801fabc:	4b38      	ldr	r3, [pc, #224]	; (801fba0 <_itsdk_console_private+0x270>)
 801fabe:	0018      	movs	r0, r3
 801fac0:	f000 f960 	bl	801fd84 <_itsdk_console_printf>
 801fac4:	46c0      	nop			; (mov r8, r8)
			}
			goto success;
 801fac6:	e02d      	b.n	801fb24 <_itsdk_console_private+0x1f4>
		case 'R':
			// Reset device
			_itsdk_console_printf("OK\r\n");
 801fac8:	4b36      	ldr	r3, [pc, #216]	; (801fba4 <_itsdk_console_private+0x274>)
 801faca:	0018      	movs	r0, r3
 801facc:	f000 f95a 	bl	801fd84 <_itsdk_console_printf>
			itsdk_reset();
 801fad0:	f005 fa70 	bl	8024fb4 <itsdk_reset>
			_itsdk_console_printf("KO\r\n");			// never reached...
 801fad4:	4b34      	ldr	r3, [pc, #208]	; (801fba8 <_itsdk_console_private+0x278>)
 801fad6:	0018      	movs	r0, r3
 801fad8:	f000 f954 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 801fadc:	2302      	movs	r3, #2
 801fade:	e026      	b.n	801fb2e <_itsdk_console_private+0x1fe>
		case 'l':
			// switch lowPower On
			lowPower_enable();
 801fae0:	f003 fdaa 	bl	8023638 <lowPower_enable>
			goto success;
 801fae4:	e01e      	b.n	801fb24 <_itsdk_console_private+0x1f4>
		case 'L':
			// switch LowPower Off
			lowPower_disable();
 801fae6:	f003 fdb1 	bl	802364c <lowPower_disable>
			goto success;
 801faea:	e01b      	b.n	801fb24 <_itsdk_console_private+0x1f4>
		}
	} else if (sz==2) {
 801faec:	1cfb      	adds	r3, r7, #3
 801faee:	781b      	ldrb	r3, [r3, #0]
 801faf0:	2b02      	cmp	r3, #2
 801faf2:	d115      	bne.n	801fb20 <_itsdk_console_private+0x1f0>
		if ( buffer[0] == 'R' && buffer[1] == '!' ) {
 801faf4:	687b      	ldr	r3, [r7, #4]
 801faf6:	781b      	ldrb	r3, [r3, #0]
 801faf8:	2b52      	cmp	r3, #82	; 0x52
 801fafa:	d111      	bne.n	801fb20 <_itsdk_console_private+0x1f0>
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	3301      	adds	r3, #1
 801fb00:	781b      	ldrb	r3, [r3, #0]
 801fb02:	2b21      	cmp	r3, #33	; 0x21
 801fb04:	d10c      	bne.n	801fb20 <_itsdk_console_private+0x1f0>
			// Clear all the eeprom content the reset - hard factory default
			_itsdk_console_printf("OK\r\n");
 801fb06:	4b27      	ldr	r3, [pc, #156]	; (801fba4 <_itsdk_console_private+0x274>)
 801fb08:	0018      	movs	r0, r3
 801fb0a:	f000 f93b 	bl	801fd84 <_itsdk_console_printf>
			eeprom_clearAllEprom();
 801fb0e:	f000 fc23 	bl	8020358 <eeprom_clearAllEprom>
			itsdk_delayMs(100);
 801fb12:	2064      	movs	r0, #100	; 0x64
 801fb14:	f005 faa0 	bl	8025058 <itsdk_delayMs>
			itsdk_reset();
 801fb18:	f005 fa4c 	bl	8024fb4 <itsdk_reset>
			return ITSDK_CONSOLE_FAILED;
 801fb1c:	2302      	movs	r3, #2
 801fb1e:	e006      	b.n	801fb2e <_itsdk_console_private+0x1fe>
			 goto success;
		 } else goto failed;
		}
	}
#endif
	return ITSDK_CONSOLE_NOTFOUND;
 801fb20:	2301      	movs	r3, #1
 801fb22:	e004      	b.n	801fb2e <_itsdk_console_private+0x1fe>

success:
	_itsdk_console_printf("OK\r\n");
 801fb24:	4b1f      	ldr	r3, [pc, #124]	; (801fba4 <_itsdk_console_private+0x274>)
 801fb26:	0018      	movs	r0, r3
 801fb28:	f000 f92c 	bl	801fd84 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 801fb2c:	2300      	movs	r3, #0
failed:
	_itsdk_console_printf("KO\r\n");
	return ITSDK_CONSOLE_FAILED;
}
 801fb2e:	0018      	movs	r0, r3
 801fb30:	46bd      	mov	sp, r7
 801fb32:	b004      	add	sp, #16
 801fb34:	bdb0      	pop	{r4, r5, r7, pc}
 801fb36:	46c0      	nop			; (mov r8, r8)
 801fb38:	08028adc 	.word	0x08028adc
 801fb3c:	08026bf0 	.word	0x08026bf0
 801fb40:	08026c0c 	.word	0x08026c0c
 801fb44:	08026c28 	.word	0x08026c28
 801fb48:	08026c50 	.word	0x08026c50
 801fb4c:	08026c78 	.word	0x08026c78
 801fb50:	08026c9c 	.word	0x08026c9c
 801fb54:	08026cc4 	.word	0x08026cc4
 801fb58:	08026cf8 	.word	0x08026cf8
 801fb5c:	08026d1c 	.word	0x08026d1c
 801fb60:	08026d3c 	.word	0x08026d3c
 801fb64:	20001d28 	.word	0x20001d28
 801fb68:	08026d64 	.word	0x08026d64
 801fb6c:	08026d78 	.word	0x08026d78
 801fb70:	08026d94 	.word	0x08026d94
 801fb74:	08026dac 	.word	0x08026dac
 801fb78:	08026dc0 	.word	0x08026dc0
 801fb7c:	20002208 	.word	0x20002208
 801fb80:	08028bb4 	.word	0x08028bb4
 801fb84:	08026dc8 	.word	0x08026dc8
 801fb88:	08026dd0 	.word	0x08026dd0
 801fb8c:	08026ddc 	.word	0x08026ddc
 801fb90:	08026de8 	.word	0x08026de8
 801fb94:	08026df0 	.word	0x08026df0
 801fb98:	08026df8 	.word	0x08026df8
 801fb9c:	08026e00 	.word	0x08026e00
 801fba0:	08026e0c 	.word	0x08026e0c
 801fba4:	08026e18 	.word	0x08026e18
 801fba8:	08026e20 	.word	0x08026e20

0801fbac <_itsdk_console_public>:

static itsdk_console_return_e _itsdk_console_public(char * buffer, uint8_t sz) {
 801fbac:	b580      	push	{r7, lr}
 801fbae:	b082      	sub	sp, #8
 801fbb0:	af00      	add	r7, sp, #0
 801fbb2:	6078      	str	r0, [r7, #4]
 801fbb4:	000a      	movs	r2, r1
 801fbb6:	1cfb      	adds	r3, r7, #3
 801fbb8:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 801fbba:	1cfb      	adds	r3, r7, #3
 801fbbc:	781b      	ldrb	r3, [r3, #0]
 801fbbe:	2b01      	cmp	r3, #1
 801fbc0:	d14c      	bne.n	801fc5c <_itsdk_console_public+0xb0>
		switch ( buffer[0] ) {
 801fbc2:	687b      	ldr	r3, [r7, #4]
 801fbc4:	781b      	ldrb	r3, [r3, #0]
 801fbc6:	2b6f      	cmp	r3, #111	; 0x6f
 801fbc8:	d020      	beq.n	801fc0c <_itsdk_console_public+0x60>
 801fbca:	dc04      	bgt.n	801fbd6 <_itsdk_console_public+0x2a>
 801fbcc:	2b21      	cmp	r3, #33	; 0x21
 801fbce:	d023      	beq.n	801fc18 <_itsdk_console_public+0x6c>
 801fbd0:	2b3f      	cmp	r3, #63	; 0x3f
 801fbd2:	d005      	beq.n	801fbe0 <_itsdk_console_public+0x34>
 801fbd4:	e042      	b.n	801fc5c <_itsdk_console_public+0xb0>
 801fbd6:	2b73      	cmp	r3, #115	; 0x73
 801fbd8:	d03c      	beq.n	801fc54 <_itsdk_console_public+0xa8>
 801fbda:	2b76      	cmp	r3, #118	; 0x76
 801fbdc:	d026      	beq.n	801fc2c <_itsdk_console_public+0x80>
 801fbde:	e03d      	b.n	801fc5c <_itsdk_console_public+0xb0>
		case '?':
			// help
			_itsdk_console_printf("--- Common\r\n");
 801fbe0:	4b21      	ldr	r3, [pc, #132]	; (801fc68 <_itsdk_console_public+0xbc>)
 801fbe2:	0018      	movs	r0, r3
 801fbe4:	f000 f8ce 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("?          : print help\r\n");
 801fbe8:	4b20      	ldr	r3, [pc, #128]	; (801fc6c <_itsdk_console_public+0xc0>)
 801fbea:	0018      	movs	r0, r3
 801fbec:	f000 f8ca 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("!          : print copyright\r\n");
 801fbf0:	4b1f      	ldr	r3, [pc, #124]	; (801fc70 <_itsdk_console_public+0xc4>)
 801fbf2:	0018      	movs	r0, r3
 801fbf4:	f000 f8c6 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("v          : print version\r\n");
 801fbf8:	4b1e      	ldr	r3, [pc, #120]	; (801fc74 <_itsdk_console_public+0xc8>)
 801fbfa:	0018      	movs	r0, r3
 801fbfc:	f000 f8c2 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("o          : print OK\r\n");
 801fc00:	4b1d      	ldr	r3, [pc, #116]	; (801fc78 <_itsdk_console_public+0xcc>)
 801fc02:	0018      	movs	r0, r3
 801fc04:	f000 f8be 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801fc08:	2300      	movs	r3, #0
 801fc0a:	e028      	b.n	801fc5e <_itsdk_console_public+0xb2>
			break;
		case 'o':
			_itsdk_console_printf("OK\r\n");
 801fc0c:	4b1b      	ldr	r3, [pc, #108]	; (801fc7c <_itsdk_console_public+0xd0>)
 801fc0e:	0018      	movs	r0, r3
 801fc10:	f000 f8b8 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801fc14:	2300      	movs	r3, #0
 801fc16:	e022      	b.n	801fc5e <_itsdk_console_public+0xb2>
			break;
		case '!':
			// Copyright
			_itsdk_console_printf("IT_SDK - (c) 2020 - Paul Pinault aka Disk91\r\n");
 801fc18:	4b19      	ldr	r3, [pc, #100]	; (801fc80 <_itsdk_console_public+0xd4>)
 801fc1a:	0018      	movs	r0, r3
 801fc1c:	f000 f8b2 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf(ITSKD_CONSOLE_COPYRIGHT);
 801fc20:	4b18      	ldr	r3, [pc, #96]	; (801fc84 <_itsdk_console_public+0xd8>)
 801fc22:	0018      	movs	r0, r3
 801fc24:	f000 f8ae 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801fc28:	2300      	movs	r3, #0
 801fc2a:	e018      	b.n	801fc5e <_itsdk_console_public+0xb2>
			break;
		case 'v':
			// Version
			_itsdk_console_printf("FW Version %s\r\n",ITSDK_USER_VERSION);
 801fc2c:	4a16      	ldr	r2, [pc, #88]	; (801fc88 <_itsdk_console_public+0xdc>)
 801fc2e:	4b17      	ldr	r3, [pc, #92]	; (801fc8c <_itsdk_console_public+0xe0>)
 801fc30:	0011      	movs	r1, r2
 801fc32:	0018      	movs	r0, r3
 801fc34:	f000 f8a6 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("Build %s %s\r\n",__DATE__, __TIME__);
 801fc38:	4a15      	ldr	r2, [pc, #84]	; (801fc90 <_itsdk_console_public+0xe4>)
 801fc3a:	4916      	ldr	r1, [pc, #88]	; (801fc94 <_itsdk_console_public+0xe8>)
 801fc3c:	4b16      	ldr	r3, [pc, #88]	; (801fc98 <_itsdk_console_public+0xec>)
 801fc3e:	0018      	movs	r0, r3
 801fc40:	f000 f8a0 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("IT_SDK Version %s\r\n",ITSDK_VERSION);
 801fc44:	4a15      	ldr	r2, [pc, #84]	; (801fc9c <_itsdk_console_public+0xf0>)
 801fc46:	4b16      	ldr	r3, [pc, #88]	; (801fca0 <_itsdk_console_public+0xf4>)
 801fc48:	0011      	movs	r1, r2
 801fc4a:	0018      	movs	r0, r3
 801fc4c:	f000 f89a 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 801fc50:	2300      	movs	r3, #0
 801fc52:	e004      	b.n	801fc5e <_itsdk_console_public+0xb2>
			break;
		case 's':
			// State
			itsdk_print_state();
 801fc54:	f001 f852 	bl	8020cfc <itsdk_print_state>
			return ITSDK_CONSOLE_SUCCES;
 801fc58:	2300      	movs	r3, #0
 801fc5a:	e000      	b.n	801fc5e <_itsdk_console_public+0xb2>
			break;
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 801fc5c:	2301      	movs	r3, #1
}
 801fc5e:	0018      	movs	r0, r3
 801fc60:	46bd      	mov	sp, r7
 801fc62:	b002      	add	sp, #8
 801fc64:	bd80      	pop	{r7, pc}
 801fc66:	46c0      	nop			; (mov r8, r8)
 801fc68:	08026e28 	.word	0x08026e28
 801fc6c:	08026e38 	.word	0x08026e38
 801fc70:	08026e54 	.word	0x08026e54
 801fc74:	08026e74 	.word	0x08026e74
 801fc78:	08026e94 	.word	0x08026e94
 801fc7c:	08026e18 	.word	0x08026e18
 801fc80:	08026eac 	.word	0x08026eac
 801fc84:	08026edc 	.word	0x08026edc
 801fc88:	08026ef4 	.word	0x08026ef4
 801fc8c:	08026ef8 	.word	0x08026ef8
 801fc90:	08026f08 	.word	0x08026f08
 801fc94:	08026f14 	.word	0x08026f14
 801fc98:	08026f20 	.word	0x08026f20
 801fc9c:	08026f30 	.word	0x08026f30
 801fca0:	08026f40 	.word	0x08026f40

0801fca4 <itsdk_console_setup>:


/**
 * Setup the console & associated chain
 */
void itsdk_console_setup() {
 801fca4:	b580      	push	{r7, lr}
 801fca6:	af00      	add	r7, sp, #0
	__console.expire = 0;
 801fca8:	4b0c      	ldr	r3, [pc, #48]	; (801fcdc <itsdk_console_setup+0x38>)
 801fcaa:	2200      	movs	r2, #0
 801fcac:	62da      	str	r2, [r3, #44]	; 0x2c
	__console.loginState = 0;
 801fcae:	4b0b      	ldr	r3, [pc, #44]	; (801fcdc <itsdk_console_setup+0x38>)
 801fcb0:	781a      	ldrb	r2, [r3, #0]
 801fcb2:	2101      	movs	r1, #1
 801fcb4:	438a      	bics	r2, r1
 801fcb6:	701a      	strb	r2, [r3, #0]
	__console.pBuffer = 0;
 801fcb8:	4b08      	ldr	r3, [pc, #32]	; (801fcdc <itsdk_console_setup+0x38>)
 801fcba:	781a      	ldrb	r2, [r3, #0]
 801fcbc:	2101      	movs	r1, #1
 801fcbe:	400a      	ands	r2, r1
 801fcc0:	701a      	strb	r2, [r3, #0]
	__console_head_chain.console_private = _itsdk_console_private;
 801fcc2:	4b07      	ldr	r3, [pc, #28]	; (801fce0 <itsdk_console_setup+0x3c>)
 801fcc4:	4a07      	ldr	r2, [pc, #28]	; (801fce4 <itsdk_console_setup+0x40>)
 801fcc6:	601a      	str	r2, [r3, #0]
	__console_head_chain.console_public = _itsdk_console_public;
 801fcc8:	4b05      	ldr	r3, [pc, #20]	; (801fce0 <itsdk_console_setup+0x3c>)
 801fcca:	4a07      	ldr	r2, [pc, #28]	; (801fce8 <itsdk_console_setup+0x44>)
 801fccc:	605a      	str	r2, [r3, #4]
	__console_head_chain.next = NULL;
 801fcce:	4b04      	ldr	r3, [pc, #16]	; (801fce0 <itsdk_console_setup+0x3c>)
 801fcd0:	2200      	movs	r2, #0
 801fcd2:	609a      	str	r2, [r3, #8]
}
 801fcd4:	46c0      	nop			; (mov r8, r8)
 801fcd6:	46bd      	mov	sp, r7
 801fcd8:	bd80      	pop	{r7, pc}
 801fcda:	46c0      	nop			; (mov r8, r8)
 801fcdc:	20001d28 	.word	0x20001d28
 801fce0:	20001d58 	.word	0x20001d58
 801fce4:	0801f931 	.word	0x0801f931
 801fce8:	0801fbad 	.word	0x0801fbad

0801fcec <itsdk_console_loop>:

/**
 * This function is call on every wake-up to proceed the pending characters on the serial
 * port and call the associated services.
 */
void itsdk_console_loop() {
 801fcec:	b5b0      	push	{r4, r5, r7, lr}
 801fcee:	b084      	sub	sp, #16
 801fcf0:	af00      	add	r7, sp, #0

	char c;
	serial_read_response_e r;

	// Check the expiration
	if ( __console.loginState == 1 ) {
 801fcf2:	4b22      	ldr	r3, [pc, #136]	; (801fd7c <itsdk_console_loop+0x90>)
 801fcf4:	781b      	ldrb	r3, [r3, #0]
 801fcf6:	2201      	movs	r2, #1
 801fcf8:	4013      	ands	r3, r2
 801fcfa:	b2db      	uxtb	r3, r3
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d021      	beq.n	801fd44 <itsdk_console_loop+0x58>
		uint64_t s = itsdk_time_get_ms()/1000;
 801fd00:	f004 f900 	bl	8023f04 <itsdk_time_get_ms>
 801fd04:	22fa      	movs	r2, #250	; 0xfa
 801fd06:	0092      	lsls	r2, r2, #2
 801fd08:	2300      	movs	r3, #0
 801fd0a:	f7e0 fc17 	bl	800053c <__aeabi_uldivmod>
 801fd0e:	0002      	movs	r2, r0
 801fd10:	000b      	movs	r3, r1
 801fd12:	60ba      	str	r2, [r7, #8]
 801fd14:	60fb      	str	r3, [r7, #12]
		if ( __console.expire < s ) {
 801fd16:	4b19      	ldr	r3, [pc, #100]	; (801fd7c <itsdk_console_loop+0x90>)
 801fd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fd1a:	001c      	movs	r4, r3
 801fd1c:	2300      	movs	r3, #0
 801fd1e:	001d      	movs	r5, r3
 801fd20:	68fb      	ldr	r3, [r7, #12]
 801fd22:	42ab      	cmp	r3, r5
 801fd24:	d805      	bhi.n	801fd32 <itsdk_console_loop+0x46>
 801fd26:	68fb      	ldr	r3, [r7, #12]
 801fd28:	42ab      	cmp	r3, r5
 801fd2a:	d10b      	bne.n	801fd44 <itsdk_console_loop+0x58>
 801fd2c:	68bb      	ldr	r3, [r7, #8]
 801fd2e:	42a3      	cmp	r3, r4
 801fd30:	d908      	bls.n	801fd44 <itsdk_console_loop+0x58>
			 __console.loginState = 0;
 801fd32:	4b12      	ldr	r3, [pc, #72]	; (801fd7c <itsdk_console_loop+0x90>)
 801fd34:	781a      	ldrb	r2, [r3, #0]
 801fd36:	2101      	movs	r1, #1
 801fd38:	438a      	bics	r2, r1
 801fd3a:	701a      	strb	r2, [r3, #0]
			 _itsdk_console_printf("logout\r\n");
 801fd3c:	4b10      	ldr	r3, [pc, #64]	; (801fd80 <itsdk_console_loop+0x94>)
 801fd3e:	0018      	movs	r0, r3
 801fd40:	f000 f820 	bl	801fd84 <_itsdk_console_printf>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif
  #if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	do {
		 r = serial2_read(&c);
 801fd44:	1dfc      	adds	r4, r7, #7
 801fd46:	1dbb      	adds	r3, r7, #6
 801fd48:	0018      	movs	r0, r3
 801fd4a:	f005 fa61 	bl	8025210 <serial2_read>
 801fd4e:	0003      	movs	r3, r0
 801fd50:	7023      	strb	r3, [r4, #0]
		 if ( r == SERIAL_READ_SUCCESS || r == SERIAL_READ_PENDING_CHAR) {
 801fd52:	1dfb      	adds	r3, r7, #7
 801fd54:	781b      	ldrb	r3, [r3, #0]
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d003      	beq.n	801fd62 <itsdk_console_loop+0x76>
 801fd5a:	1dfb      	adds	r3, r7, #7
 801fd5c:	781b      	ldrb	r3, [r3, #0]
 801fd5e:	2b01      	cmp	r3, #1
 801fd60:	d104      	bne.n	801fd6c <itsdk_console_loop+0x80>
			 _itsdk_console_processChar(c);
 801fd62:	1dbb      	adds	r3, r7, #6
 801fd64:	781b      	ldrb	r3, [r3, #0]
 801fd66:	0018      	movs	r0, r3
 801fd68:	f000 f97e 	bl	8020068 <_itsdk_console_processChar>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
 801fd6c:	1dfb      	adds	r3, r7, #7
 801fd6e:	781b      	ldrb	r3, [r3, #0]
 801fd70:	2b01      	cmp	r3, #1
 801fd72:	d0e7      	beq.n	801fd44 <itsdk_console_loop+0x58>
			 _itsdk_console_processChar(c);
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif

}
 801fd74:	46c0      	nop			; (mov r8, r8)
 801fd76:	46bd      	mov	sp, r7
 801fd78:	b004      	add	sp, #16
 801fd7a:	bdb0      	pop	{r4, r5, r7, pc}
 801fd7c:	20001d28 	.word	0x20001d28
 801fd80:	08026f54 	.word	0x08026f54

0801fd84 <_itsdk_console_printf>:
void itsdk_console_customProcess_char(char c) {
	_itsdk_console_processChar(c);
}
#endif

void _itsdk_console_printf(char *format, ...) {
 801fd84:	b40f      	push	{r0, r1, r2, r3}
 801fd86:	b580      	push	{r7, lr}
 801fd88:	b096      	sub	sp, #88	; 0x58
 801fd8a:	af00      	add	r7, sp, #0
	va_list args;
	char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
    va_start(args,format);
 801fd8c:	2364      	movs	r3, #100	; 0x64
 801fd8e:	18fb      	adds	r3, r7, r3
 801fd90:	657b      	str	r3, [r7, #84]	; 0x54
	vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 801fd92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fd94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fd96:	1d38      	adds	r0, r7, #4
 801fd98:	2150      	movs	r1, #80	; 0x50
 801fd9a:	f006 f8fd 	bl	8025f98 <vsniprintf>
	va_end(args);
#if ( ITSDK_CONSOLE_SERIAL & ( __UART_LPUART1 | __UART_USART1 ) ) > 0
	serial1_print(fmtBuffer);
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	serial2_print(fmtBuffer);
 801fd9e:	1d3b      	adds	r3, r7, #4
 801fda0:	0018      	movs	r0, r3
 801fda2:	f005 fa1d 	bl	80251e0 <serial2_print>
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_CUSTOM ) > 0
	itsdk_console_customSerial_print(fmtBuffer);
#endif
}
 801fda6:	46c0      	nop			; (mov r8, r8)
 801fda8:	46bd      	mov	sp, r7
 801fdaa:	b016      	add	sp, #88	; 0x58
 801fdac:	bc80      	pop	{r7}
 801fdae:	bc08      	pop	{r3}
 801fdb0:	b004      	add	sp, #16
 801fdb2:	4718      	bx	r3

0801fdb4 <_itsdk_console_processLine>:

// =================================================================================================
// Processing input
// =================================================================================================

static void _itsdk_console_processLine() {
 801fdb4:	b5b0      	push	{r4, r5, r7, lr}
 801fdb6:	b090      	sub	sp, #64	; 0x40
 801fdb8:	af00      	add	r7, sp, #0

	// Empty line
	if ( __console.pBuffer == 0 ) return;
 801fdba:	4ba5      	ldr	r3, [pc, #660]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fdbc:	781b      	ldrb	r3, [r3, #0]
 801fdbe:	2201      	movs	r2, #1
 801fdc0:	4393      	bics	r3, r2
 801fdc2:	b2db      	uxtb	r3, r3
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	d100      	bne.n	801fdca <_itsdk_console_processLine+0x16>
 801fdc8:	e13d      	b.n	8020046 <_itsdk_console_processLine+0x292>

	// Clean the buffer
	if ( __console.pBuffer > 0 && __console.serialBuffer[__console.pBuffer-1] == '\r' ) {
 801fdca:	4ba1      	ldr	r3, [pc, #644]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fdcc:	781b      	ldrb	r3, [r3, #0]
 801fdce:	2201      	movs	r2, #1
 801fdd0:	4393      	bics	r3, r2
 801fdd2:	b2db      	uxtb	r3, r3
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d01d      	beq.n	801fe14 <_itsdk_console_processLine+0x60>
 801fdd8:	4b9d      	ldr	r3, [pc, #628]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fdda:	781b      	ldrb	r3, [r3, #0]
 801fddc:	061b      	lsls	r3, r3, #24
 801fdde:	0e5b      	lsrs	r3, r3, #25
 801fde0:	b2db      	uxtb	r3, r3
 801fde2:	3b01      	subs	r3, #1
 801fde4:	4a9a      	ldr	r2, [pc, #616]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fde6:	18d3      	adds	r3, r2, r3
 801fde8:	785b      	ldrb	r3, [r3, #1]
 801fdea:	2b0d      	cmp	r3, #13
 801fdec:	d112      	bne.n	801fe14 <_itsdk_console_processLine+0x60>
		__console.pBuffer--;
 801fdee:	4b98      	ldr	r3, [pc, #608]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fdf0:	781b      	ldrb	r3, [r3, #0]
 801fdf2:	061b      	lsls	r3, r3, #24
 801fdf4:	0e5b      	lsrs	r3, r3, #25
 801fdf6:	b2db      	uxtb	r3, r3
 801fdf8:	337f      	adds	r3, #127	; 0x7f
 801fdfa:	1c1a      	adds	r2, r3, #0
 801fdfc:	237f      	movs	r3, #127	; 0x7f
 801fdfe:	4013      	ands	r3, r2
 801fe00:	b2da      	uxtb	r2, r3
 801fe02:	4b93      	ldr	r3, [pc, #588]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe04:	1890      	adds	r0, r2, r2
 801fe06:	781a      	ldrb	r2, [r3, #0]
 801fe08:	2101      	movs	r1, #1
 801fe0a:	400a      	ands	r2, r1
 801fe0c:	1c11      	adds	r1, r2, #0
 801fe0e:	1c02      	adds	r2, r0, #0
 801fe10:	430a      	orrs	r2, r1
 801fe12:	701a      	strb	r2, [r3, #0]
	}
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 801fe14:	4b8e      	ldr	r3, [pc, #568]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe16:	781b      	ldrb	r3, [r3, #0]
 801fe18:	061b      	lsls	r3, r3, #24
 801fe1a:	0e5b      	lsrs	r3, r3, #25
 801fe1c:	b2db      	uxtb	r3, r3
 801fe1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fe20:	e008      	b.n	801fe34 <_itsdk_console_processLine+0x80>
		__console.serialBuffer[i] = 0;
 801fe22:	4a8b      	ldr	r2, [pc, #556]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe26:	18d3      	adds	r3, r2, r3
 801fe28:	3301      	adds	r3, #1
 801fe2a:	2200      	movs	r2, #0
 801fe2c:	701a      	strb	r2, [r3, #0]
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 801fe2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe30:	3301      	adds	r3, #1
 801fe32:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fe34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe36:	2b27      	cmp	r3, #39	; 0x27
 801fe38:	ddf3      	ble.n	801fe22 <_itsdk_console_processLine+0x6e>
	}

	if ( __console.loginState == 0 ) {
 801fe3a:	4b85      	ldr	r3, [pc, #532]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe3c:	781b      	ldrb	r3, [r3, #0]
 801fe3e:	2201      	movs	r2, #1
 801fe40:	4013      	ands	r3, r2
 801fe42:	b2db      	uxtb	r3, r3
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d000      	beq.n	801fe4a <_itsdk_console_processLine+0x96>
 801fe48:	e08e      	b.n	801ff68 <_itsdk_console_processLine+0x1b4>
		// console locked

		// We are going to remove the possible \r and create a 16B array with leading 0 to match with
		// the console password field in Secure Store
		// Password max size is 15 byte.
		if ( __console.pBuffer < 16 ) {
 801fe4a:	4b81      	ldr	r3, [pc, #516]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe4c:	781b      	ldrb	r3, [r3, #0]
 801fe4e:	061b      	lsls	r3, r3, #24
 801fe50:	0e5b      	lsrs	r3, r3, #25
 801fe52:	b2db      	uxtb	r3, r3
 801fe54:	2b0f      	cmp	r3, #15
 801fe56:	d82e      	bhi.n	801feb6 <_itsdk_console_processLine+0x102>
			 __console.loginState=1;
 801fe58:	4b7d      	ldr	r3, [pc, #500]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe5a:	781a      	ldrb	r2, [r3, #0]
 801fe5c:	2101      	movs	r1, #1
 801fe5e:	430a      	orrs	r2, r1
 801fe60:	701a      	strb	r2, [r3, #0]
			#if ITSDK_WITH_SECURESTORE == __DISABLE
				uint8_t passwd[16] = ITSDK_SECSTORE_CONSOLEKEY;
			#else
				uint8_t passwd[16];
				itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, passwd);
 801fe62:	003b      	movs	r3, r7
 801fe64:	0019      	movs	r1, r3
 801fe66:	2000      	movs	r0, #0
 801fe68:	f001 f8d4 	bl	8021014 <itsdk_secstore_readBlock>
			#endif
				for ( int i = 0 ; i < 16 ; i++) {
 801fe6c:	2300      	movs	r3, #0
 801fe6e:	63bb      	str	r3, [r7, #56]	; 0x38
 801fe70:	e019      	b.n	801fea6 <_itsdk_console_processLine+0xf2>
					if (__console.serialBuffer[i] != passwd[i] && __console.loginState == 1) __console.loginState=0;
 801fe72:	4a77      	ldr	r2, [pc, #476]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe76:	18d3      	adds	r3, r2, r3
 801fe78:	3301      	adds	r3, #1
 801fe7a:	781a      	ldrb	r2, [r3, #0]
 801fe7c:	0039      	movs	r1, r7
 801fe7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe80:	18cb      	adds	r3, r1, r3
 801fe82:	781b      	ldrb	r3, [r3, #0]
 801fe84:	429a      	cmp	r2, r3
 801fe86:	d00b      	beq.n	801fea0 <_itsdk_console_processLine+0xec>
 801fe88:	4b71      	ldr	r3, [pc, #452]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe8a:	781b      	ldrb	r3, [r3, #0]
 801fe8c:	2201      	movs	r2, #1
 801fe8e:	4013      	ands	r3, r2
 801fe90:	b2db      	uxtb	r3, r3
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d004      	beq.n	801fea0 <_itsdk_console_processLine+0xec>
 801fe96:	4b6e      	ldr	r3, [pc, #440]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fe98:	781a      	ldrb	r2, [r3, #0]
 801fe9a:	2101      	movs	r1, #1
 801fe9c:	438a      	bics	r2, r1
 801fe9e:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < 16 ; i++) {
 801fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fea2:	3301      	adds	r3, #1
 801fea4:	63bb      	str	r3, [r7, #56]	; 0x38
 801fea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fea8:	2b0f      	cmp	r3, #15
 801feaa:	dde2      	ble.n	801fe72 <_itsdk_console_processLine+0xbe>
				}
				bzero(passwd,16);
 801feac:	003b      	movs	r3, r7
 801feae:	2110      	movs	r1, #16
 801feb0:	0018      	movs	r0, r3
 801feb2:	f005 fff0 	bl	8025e96 <bzero>
		}
		if ( __console.loginState == 1 ) {
 801feb6:	4b66      	ldr	r3, [pc, #408]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801feb8:	781b      	ldrb	r3, [r3, #0]
 801feba:	2201      	movs	r2, #1
 801febc:	4013      	ands	r3, r2
 801febe:	b2db      	uxtb	r3, r3
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d015      	beq.n	801fef0 <_itsdk_console_processLine+0x13c>
			// Login sucess
			uint64_t s = itsdk_time_get_ms()/1000;
 801fec4:	f004 f81e 	bl	8023f04 <itsdk_time_get_ms>
 801fec8:	22fa      	movs	r2, #250	; 0xfa
 801feca:	0092      	lsls	r2, r2, #2
 801fecc:	2300      	movs	r3, #0
 801fece:	f7e0 fb35 	bl	800053c <__aeabi_uldivmod>
 801fed2:	0003      	movs	r3, r0
 801fed4:	000c      	movs	r4, r1
 801fed6:	613b      	str	r3, [r7, #16]
 801fed8:	617c      	str	r4, [r7, #20]
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 801feda:	693b      	ldr	r3, [r7, #16]
 801fedc:	332d      	adds	r3, #45	; 0x2d
 801fede:	33ff      	adds	r3, #255	; 0xff
 801fee0:	001a      	movs	r2, r3
 801fee2:	4b5b      	ldr	r3, [pc, #364]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fee4:	62da      	str	r2, [r3, #44]	; 0x2c
			_itsdk_console_printf("OK\r\n");
 801fee6:	4b5b      	ldr	r3, [pc, #364]	; (8020054 <_itsdk_console_processLine+0x2a0>)
 801fee8:	0018      	movs	r0, r3
 801feea:	f7ff ff4b 	bl	801fd84 <_itsdk_console_printf>
 801feee:	e0ab      	b.n	8020048 <_itsdk_console_processLine+0x294>
		} else {
			// Login Failed This can be a public operation request
			itsdk_console_chain_t * c = &__console_head_chain;
 801fef0:	4b59      	ldr	r3, [pc, #356]	; (8020058 <_itsdk_console_processLine+0x2a4>)
 801fef2:	637b      	str	r3, [r7, #52]	; 0x34
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 801fef4:	2333      	movs	r3, #51	; 0x33
 801fef6:	18fb      	adds	r3, r7, r3
 801fef8:	2201      	movs	r2, #1
 801fefa:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 801fefc:	e022      	b.n	801ff44 <_itsdk_console_processLine+0x190>
				if ( c->console_public != NULL ) {
 801fefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff00:	685b      	ldr	r3, [r3, #4]
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	d01a      	beq.n	801ff3c <_itsdk_console_processLine+0x188>
  				   lret= c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801ff06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff08:	685b      	ldr	r3, [r3, #4]
 801ff0a:	4a51      	ldr	r2, [pc, #324]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801ff0c:	7812      	ldrb	r2, [r2, #0]
 801ff0e:	0612      	lsls	r2, r2, #24
 801ff10:	0e52      	lsrs	r2, r2, #25
 801ff12:	b2d2      	uxtb	r2, r2
 801ff14:	0011      	movs	r1, r2
 801ff16:	251e      	movs	r5, #30
 801ff18:	197c      	adds	r4, r7, r5
 801ff1a:	4a50      	ldr	r2, [pc, #320]	; (802005c <_itsdk_console_processLine+0x2a8>)
 801ff1c:	0010      	movs	r0, r2
 801ff1e:	4798      	blx	r3
 801ff20:	0003      	movs	r3, r0
 801ff22:	7023      	strb	r3, [r4, #0]
				   switch ( lret ) {
 801ff24:	197b      	adds	r3, r7, r5
 801ff26:	781b      	ldrb	r3, [r3, #0]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d002      	beq.n	801ff32 <_itsdk_console_processLine+0x17e>
 801ff2c:	2b02      	cmp	r3, #2
 801ff2e:	d000      	beq.n	801ff32 <_itsdk_console_processLine+0x17e>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:
					      break;
 801ff30:	e005      	b.n	801ff3e <_itsdk_console_processLine+0x18a>
						  ret = ITSDK_CONSOLE_SUCCES;
 801ff32:	2333      	movs	r3, #51	; 0x33
 801ff34:	18fb      	adds	r3, r7, r3
 801ff36:	2200      	movs	r2, #0
 801ff38:	701a      	strb	r2, [r3, #0]
						  break;
 801ff3a:	e000      	b.n	801ff3e <_itsdk_console_processLine+0x18a>
				   }
				}
 801ff3c:	46c0      	nop			; (mov r8, r8)
			   c = c->next;
 801ff3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff40:	689b      	ldr	r3, [r3, #8]
 801ff42:	637b      	str	r3, [r7, #52]	; 0x34
			while ( c != NULL ) {
 801ff44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	d1d9      	bne.n	801fefe <_itsdk_console_processLine+0x14a>
			}
			// Print the password prompt only when it was not a command
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 801ff4a:	2333      	movs	r3, #51	; 0x33
 801ff4c:	18fb      	adds	r3, r7, r3
 801ff4e:	781b      	ldrb	r3, [r3, #0]
 801ff50:	2b01      	cmp	r3, #1
 801ff52:	d000      	beq.n	801ff56 <_itsdk_console_processLine+0x1a2>
 801ff54:	e078      	b.n	8020048 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("password:\r\n");
 801ff56:	4b42      	ldr	r3, [pc, #264]	; (8020060 <_itsdk_console_processLine+0x2ac>)
 801ff58:	0018      	movs	r0, r3
 801ff5a:	f7ff ff13 	bl	801fd84 <_itsdk_console_printf>
				_itsdk_console_printf("KO\r\n");
 801ff5e:	4b41      	ldr	r3, [pc, #260]	; (8020064 <_itsdk_console_processLine+0x2b0>)
 801ff60:	0018      	movs	r0, r3
 801ff62:	f7ff ff0f 	bl	801fd84 <_itsdk_console_printf>
 801ff66:	e06f      	b.n	8020048 <_itsdk_console_processLine+0x294>
			}
		}
	} else {
		if (__console.pBuffer > 0) {
 801ff68:	4b39      	ldr	r3, [pc, #228]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801ff6a:	781b      	ldrb	r3, [r3, #0]
 801ff6c:	2201      	movs	r2, #1
 801ff6e:	4393      	bics	r3, r2
 801ff70:	b2db      	uxtb	r3, r3
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d068      	beq.n	8020048 <_itsdk_console_processLine+0x294>
			// We are logged

			// Update session expiration
			uint64_t s = itsdk_time_get_ms()/1000;
 801ff76:	f003 ffc5 	bl	8023f04 <itsdk_time_get_ms>
 801ff7a:	22fa      	movs	r2, #250	; 0xfa
 801ff7c:	0092      	lsls	r2, r2, #2
 801ff7e:	2300      	movs	r3, #0
 801ff80:	f7e0 fadc 	bl	800053c <__aeabi_uldivmod>
 801ff84:	0003      	movs	r3, r0
 801ff86:	000c      	movs	r4, r1
 801ff88:	623b      	str	r3, [r7, #32]
 801ff8a:	627c      	str	r4, [r7, #36]	; 0x24
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 801ff8c:	6a3b      	ldr	r3, [r7, #32]
 801ff8e:	332d      	adds	r3, #45	; 0x2d
 801ff90:	33ff      	adds	r3, #255	; 0xff
 801ff92:	001a      	movs	r2, r3
 801ff94:	4b2e      	ldr	r3, [pc, #184]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801ff96:	62da      	str	r2, [r3, #44]	; 0x2c

			// Process command
			itsdk_console_chain_t * c = &__console_head_chain;
 801ff98:	4b2f      	ldr	r3, [pc, #188]	; (8020058 <_itsdk_console_processLine+0x2a4>)
 801ff9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 801ff9c:	232b      	movs	r3, #43	; 0x2b
 801ff9e:	18fb      	adds	r3, r7, r3
 801ffa0:	2201      	movs	r2, #1
 801ffa2:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 801ffa4:	e042      	b.n	802002c <_itsdk_console_processLine+0x278>
			  if ( c->console_public != NULL ) {
 801ffa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffa8:	685b      	ldr	r3, [r3, #4]
 801ffaa:	2b00      	cmp	r3, #0
 801ffac:	d01a      	beq.n	801ffe4 <_itsdk_console_processLine+0x230>
				  lret = c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801ffae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffb0:	685b      	ldr	r3, [r3, #4]
 801ffb2:	4a27      	ldr	r2, [pc, #156]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801ffb4:	7812      	ldrb	r2, [r2, #0]
 801ffb6:	0612      	lsls	r2, r2, #24
 801ffb8:	0e52      	lsrs	r2, r2, #25
 801ffba:	b2d2      	uxtb	r2, r2
 801ffbc:	0011      	movs	r1, r2
 801ffbe:	251f      	movs	r5, #31
 801ffc0:	197c      	adds	r4, r7, r5
 801ffc2:	4a26      	ldr	r2, [pc, #152]	; (802005c <_itsdk_console_processLine+0x2a8>)
 801ffc4:	0010      	movs	r0, r2
 801ffc6:	4798      	blx	r3
 801ffc8:	0003      	movs	r3, r0
 801ffca:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 801ffcc:	197b      	adds	r3, r7, r5
 801ffce:	781b      	ldrb	r3, [r3, #0]
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d002      	beq.n	801ffda <_itsdk_console_processLine+0x226>
 801ffd4:	2b02      	cmp	r3, #2
 801ffd6:	d000      	beq.n	801ffda <_itsdk_console_processLine+0x226>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 801ffd8:	e005      	b.n	801ffe6 <_itsdk_console_processLine+0x232>
						  ret = ITSDK_CONSOLE_SUCCES;
 801ffda:	232b      	movs	r3, #43	; 0x2b
 801ffdc:	18fb      	adds	r3, r7, r3
 801ffde:	2200      	movs	r2, #0
 801ffe0:	701a      	strb	r2, [r3, #0]
						  break;
 801ffe2:	e000      	b.n	801ffe6 <_itsdk_console_processLine+0x232>
				   }
			  }
 801ffe4:	46c0      	nop			; (mov r8, r8)
			  if ( c->console_private != NULL ) {
 801ffe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffe8:	681b      	ldr	r3, [r3, #0]
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	d01a      	beq.n	8020024 <_itsdk_console_processLine+0x270>
				  lret = c->console_private((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 801ffee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	4a17      	ldr	r2, [pc, #92]	; (8020050 <_itsdk_console_processLine+0x29c>)
 801fff4:	7812      	ldrb	r2, [r2, #0]
 801fff6:	0612      	lsls	r2, r2, #24
 801fff8:	0e52      	lsrs	r2, r2, #25
 801fffa:	b2d2      	uxtb	r2, r2
 801fffc:	0011      	movs	r1, r2
 801fffe:	251f      	movs	r5, #31
 8020000:	197c      	adds	r4, r7, r5
 8020002:	4a16      	ldr	r2, [pc, #88]	; (802005c <_itsdk_console_processLine+0x2a8>)
 8020004:	0010      	movs	r0, r2
 8020006:	4798      	blx	r3
 8020008:	0003      	movs	r3, r0
 802000a:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 802000c:	197b      	adds	r3, r7, r5
 802000e:	781b      	ldrb	r3, [r3, #0]
 8020010:	2b00      	cmp	r3, #0
 8020012:	d002      	beq.n	802001a <_itsdk_console_processLine+0x266>
 8020014:	2b02      	cmp	r3, #2
 8020016:	d000      	beq.n	802001a <_itsdk_console_processLine+0x266>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 8020018:	e005      	b.n	8020026 <_itsdk_console_processLine+0x272>
						  ret = ITSDK_CONSOLE_SUCCES;
 802001a:	232b      	movs	r3, #43	; 0x2b
 802001c:	18fb      	adds	r3, r7, r3
 802001e:	2200      	movs	r2, #0
 8020020:	701a      	strb	r2, [r3, #0]
						  break;
 8020022:	e000      	b.n	8020026 <_itsdk_console_processLine+0x272>
				   }
			  }
 8020024:	46c0      	nop			; (mov r8, r8)
			  c = c->next;
 8020026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020028:	689b      	ldr	r3, [r3, #8]
 802002a:	62fb      	str	r3, [r7, #44]	; 0x2c
			while ( c != NULL ) {
 802002c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802002e:	2b00      	cmp	r3, #0
 8020030:	d1b9      	bne.n	801ffa6 <_itsdk_console_processLine+0x1f2>
			}
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 8020032:	232b      	movs	r3, #43	; 0x2b
 8020034:	18fb      	adds	r3, r7, r3
 8020036:	781b      	ldrb	r3, [r3, #0]
 8020038:	2b01      	cmp	r3, #1
 802003a:	d105      	bne.n	8020048 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("KO\r\n");
 802003c:	4b09      	ldr	r3, [pc, #36]	; (8020064 <_itsdk_console_processLine+0x2b0>)
 802003e:	0018      	movs	r0, r3
 8020040:	f7ff fea0 	bl	801fd84 <_itsdk_console_printf>
 8020044:	e000      	b.n	8020048 <_itsdk_console_processLine+0x294>
	if ( __console.pBuffer == 0 ) return;
 8020046:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 8020048:	46bd      	mov	sp, r7
 802004a:	b010      	add	sp, #64	; 0x40
 802004c:	bdb0      	pop	{r4, r5, r7, pc}
 802004e:	46c0      	nop			; (mov r8, r8)
 8020050:	20001d28 	.word	0x20001d28
 8020054:	08026e18 	.word	0x08026e18
 8020058:	20001d58 	.word	0x20001d58
 802005c:	20001d29 	.word	0x20001d29
 8020060:	08026f60 	.word	0x08026f60
 8020064:	08026e20 	.word	0x08026e20

08020068 <_itsdk_console_processChar>:

/**
 * Process 1 char read
 */
static void _itsdk_console_processChar(char c) {
 8020068:	b580      	push	{r7, lr}
 802006a:	b082      	sub	sp, #8
 802006c:	af00      	add	r7, sp, #0
 802006e:	0002      	movs	r2, r0
 8020070:	1dfb      	adds	r3, r7, #7
 8020072:	701a      	strb	r2, [r3, #0]

	if ( c == '\n' || c == '\r' || c == '\0' ) {
 8020074:	1dfb      	adds	r3, r7, #7
 8020076:	781b      	ldrb	r3, [r3, #0]
 8020078:	2b0a      	cmp	r3, #10
 802007a:	d007      	beq.n	802008c <_itsdk_console_processChar+0x24>
 802007c:	1dfb      	adds	r3, r7, #7
 802007e:	781b      	ldrb	r3, [r3, #0]
 8020080:	2b0d      	cmp	r3, #13
 8020082:	d003      	beq.n	802008c <_itsdk_console_processChar+0x24>
 8020084:	1dfb      	adds	r3, r7, #7
 8020086:	781b      	ldrb	r3, [r3, #0]
 8020088:	2b00      	cmp	r3, #0
 802008a:	d10e      	bne.n	80200aa <_itsdk_console_processChar+0x42>
		if ( __console.pBuffer > 0 ) {
 802008c:	4b1c      	ldr	r3, [pc, #112]	; (8020100 <_itsdk_console_processChar+0x98>)
 802008e:	781b      	ldrb	r3, [r3, #0]
 8020090:	2201      	movs	r2, #1
 8020092:	4393      	bics	r3, r2
 8020094:	b2db      	uxtb	r3, r3
 8020096:	2b00      	cmp	r3, #0
 8020098:	d02d      	beq.n	80200f6 <_itsdk_console_processChar+0x8e>
//			log_info("RET");
			_itsdk_console_processLine();
 802009a:	f7ff fe8b 	bl	801fdb4 <_itsdk_console_processLine>
			__console.pBuffer = 0;
 802009e:	4b18      	ldr	r3, [pc, #96]	; (8020100 <_itsdk_console_processChar+0x98>)
 80200a0:	781a      	ldrb	r2, [r3, #0]
 80200a2:	2101      	movs	r1, #1
 80200a4:	400a      	ands	r2, r1
 80200a6:	701a      	strb	r2, [r3, #0]
		if ( __console.pBuffer > 0 ) {
 80200a8:	e025      	b.n	80200f6 <_itsdk_console_processChar+0x8e>
		}
//		log_info("ESC");
	} else {
		if ( __console.pBuffer < ITSDK_CONSOLE_LINEBUFFER ) {
 80200aa:	4b15      	ldr	r3, [pc, #84]	; (8020100 <_itsdk_console_processChar+0x98>)
 80200ac:	781b      	ldrb	r3, [r3, #0]
 80200ae:	061b      	lsls	r3, r3, #24
 80200b0:	0e5b      	lsrs	r3, r3, #25
 80200b2:	b2db      	uxtb	r3, r3
 80200b4:	2b27      	cmp	r3, #39	; 0x27
 80200b6:	d81e      	bhi.n	80200f6 <_itsdk_console_processChar+0x8e>

//			if ( c > 32 ) {
//			  log_info("[%c]",c);
//			} else log_info("(%02X)",c);

			__console.serialBuffer[__console.pBuffer] = c;
 80200b8:	4b11      	ldr	r3, [pc, #68]	; (8020100 <_itsdk_console_processChar+0x98>)
 80200ba:	781b      	ldrb	r3, [r3, #0]
 80200bc:	061b      	lsls	r3, r3, #24
 80200be:	0e5b      	lsrs	r3, r3, #25
 80200c0:	b2db      	uxtb	r3, r3
 80200c2:	001a      	movs	r2, r3
 80200c4:	4b0e      	ldr	r3, [pc, #56]	; (8020100 <_itsdk_console_processChar+0x98>)
 80200c6:	189b      	adds	r3, r3, r2
 80200c8:	1dfa      	adds	r2, r7, #7
 80200ca:	7812      	ldrb	r2, [r2, #0]
 80200cc:	705a      	strb	r2, [r3, #1]
			__console.pBuffer++;
 80200ce:	4b0c      	ldr	r3, [pc, #48]	; (8020100 <_itsdk_console_processChar+0x98>)
 80200d0:	781b      	ldrb	r3, [r3, #0]
 80200d2:	061b      	lsls	r3, r3, #24
 80200d4:	0e5b      	lsrs	r3, r3, #25
 80200d6:	b2db      	uxtb	r3, r3
 80200d8:	3301      	adds	r3, #1
 80200da:	1c1a      	adds	r2, r3, #0
 80200dc:	237f      	movs	r3, #127	; 0x7f
 80200de:	4013      	ands	r3, r2
 80200e0:	b2da      	uxtb	r2, r3
 80200e2:	4b07      	ldr	r3, [pc, #28]	; (8020100 <_itsdk_console_processChar+0x98>)
 80200e4:	1890      	adds	r0, r2, r2
 80200e6:	781a      	ldrb	r2, [r3, #0]
 80200e8:	2101      	movs	r1, #1
 80200ea:	400a      	ands	r2, r1
 80200ec:	1c11      	adds	r1, r2, #0
 80200ee:	1c02      	adds	r2, r0, #0
 80200f0:	430a      	orrs	r2, r1
 80200f2:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80200f4:	e7ff      	b.n	80200f6 <_itsdk_console_processChar+0x8e>
 80200f6:	46c0      	nop			; (mov r8, r8)
 80200f8:	46bd      	mov	sp, r7
 80200fa:	b002      	add	sp, #8
 80200fc:	bd80      	pop	{r7, pc}
 80200fe:	46c0      	nop			; (mov r8, r8)
 8020100:	20001d28 	.word	0x20001d28

08020104 <itsdk_console_registerCommand>:

/**
 * Add an action to the chain, the action **must be** static
 * The action list is added at end of the chain
 */
void itsdk_console_registerCommand(itsdk_console_chain_t * chain) {
 8020104:	b580      	push	{r7, lr}
 8020106:	b084      	sub	sp, #16
 8020108:	af00      	add	r7, sp, #0
 802010a:	6078      	str	r0, [r7, #4]
	itsdk_console_chain_t * c = &__console_head_chain;
 802010c:	4b13      	ldr	r3, [pc, #76]	; (802015c <itsdk_console_registerCommand+0x58>)
 802010e:	60fb      	str	r3, [r7, #12]
	if ( c->console_private != _itsdk_console_private ) {
 8020110:	68fb      	ldr	r3, [r7, #12]
 8020112:	681a      	ldr	r2, [r3, #0]
 8020114:	4b12      	ldr	r3, [pc, #72]	; (8020160 <itsdk_console_registerCommand+0x5c>)
 8020116:	429a      	cmp	r2, r3
 8020118:	d008      	beq.n	802012c <itsdk_console_registerCommand+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONSOLE_NOTSETUP,0);
 802011a:	4b12      	ldr	r3, [pc, #72]	; (8020164 <itsdk_console_registerCommand+0x60>)
 802011c:	2100      	movs	r1, #0
 802011e:	0018      	movs	r0, r3
 8020120:	f002 fe92 	bl	8022e48 <itsdk_error_report>
	}

	while ( c->next != NULL && c->next != chain ) {
 8020124:	e002      	b.n	802012c <itsdk_console_registerCommand+0x28>
	  c = c->next;
 8020126:	68fb      	ldr	r3, [r7, #12]
 8020128:	689b      	ldr	r3, [r3, #8]
 802012a:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->next != chain ) {
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	689b      	ldr	r3, [r3, #8]
 8020130:	2b00      	cmp	r3, #0
 8020132:	d004      	beq.n	802013e <itsdk_console_registerCommand+0x3a>
 8020134:	68fb      	ldr	r3, [r7, #12]
 8020136:	689b      	ldr	r3, [r3, #8]
 8020138:	687a      	ldr	r2, [r7, #4]
 802013a:	429a      	cmp	r2, r3
 802013c:	d1f3      	bne.n	8020126 <itsdk_console_registerCommand+0x22>
	}
	if ( c->next != chain ) {
 802013e:	68fb      	ldr	r3, [r7, #12]
 8020140:	689b      	ldr	r3, [r3, #8]
 8020142:	687a      	ldr	r2, [r7, #4]
 8020144:	429a      	cmp	r2, r3
 8020146:	d005      	beq.n	8020154 <itsdk_console_registerCommand+0x50>
		// the Action is not already existing
		c->next=chain;
 8020148:	68fb      	ldr	r3, [r7, #12]
 802014a:	687a      	ldr	r2, [r7, #4]
 802014c:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 802014e:	687b      	ldr	r3, [r7, #4]
 8020150:	2200      	movs	r2, #0
 8020152:	609a      	str	r2, [r3, #8]
	}
}
 8020154:	46c0      	nop			; (mov r8, r8)
 8020156:	46bd      	mov	sp, r7
 8020158:	b004      	add	sp, #16
 802015a:	bd80      	pop	{r7, pc}
 802015c:	20001d58 	.word	0x20001d58
 8020160:	0801f931 	.word	0x0801f931
 8020164:	c0000003 	.word	0xc0000003

08020168 <eeprom_write_config>:
 * ---> ErrorReport
 * ---> Sigfox Nvm
 * ---> Configuration (*) here
 * ---> UserLand
 */
itsdk_bool_e eeprom_write_config(void * data, uint16_t len, uint8_t version) {
 8020168:	b590      	push	{r4, r7, lr}
 802016a:	b089      	sub	sp, #36	; 0x24
 802016c:	af00      	add	r7, sp, #0
 802016e:	6078      	str	r0, [r7, #4]
 8020170:	0008      	movs	r0, r1
 8020172:	0011      	movs	r1, r2
 8020174:	1cbb      	adds	r3, r7, #2
 8020176:	1c02      	adds	r2, r0, #0
 8020178:	801a      	strh	r2, [r3, #0]
 802017a:	1c7b      	adds	r3, r7, #1
 802017c:	1c0a      	adds	r2, r1, #0
 802017e:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC_CONFIG;
 8020180:	2410      	movs	r4, #16
 8020182:	193b      	adds	r3, r7, r4
 8020184:	4a17      	ldr	r2, [pc, #92]	; (80201e4 <eeprom_write_config+0x7c>)
 8020186:	801a      	strh	r2, [r3, #0]
	t.size = len;
 8020188:	193b      	adds	r3, r7, r4
 802018a:	1cba      	adds	r2, r7, #2
 802018c:	8812      	ldrh	r2, [r2, #0]
 802018e:	809a      	strh	r2, [r3, #4]
	t.version = version;
 8020190:	193b      	adds	r3, r7, r4
 8020192:	1c7a      	adds	r2, r7, #1
 8020194:	7812      	ldrb	r2, [r2, #0]
 8020196:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 8020198:	1cbb      	adds	r3, r7, #2
 802019a:	881a      	ldrh	r2, [r3, #0]
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	0011      	movs	r1, r2
 80201a0:	0018      	movs	r0, r3
 80201a2:	f003 faa5 	bl	80236f0 <itsdk_computeCRC32>
 80201a6:	0002      	movs	r2, r0
 80201a8:	193b      	adds	r3, r7, r4
 80201aa:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 80201ac:	2300      	movs	r3, #0
 80201ae:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 80201b0:	230c      	movs	r3, #12
 80201b2:	18fb      	adds	r3, r7, r3
 80201b4:	0018      	movs	r0, r3
 80201b6:	f000 f88f 	bl	80202d8 <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 80201ba:	68f9      	ldr	r1, [r7, #12]
 80201bc:	193a      	adds	r2, r7, r4
 80201be:	2310      	movs	r3, #16
 80201c0:	2000      	movs	r0, #0
 80201c2:	f005 f8cb 	bl	802535c <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 80201c6:	68fb      	ldr	r3, [r7, #12]
 80201c8:	3310      	adds	r3, #16
 80201ca:	0019      	movs	r1, r3
 80201cc:	1cbb      	adds	r3, r7, #2
 80201ce:	881b      	ldrh	r3, [r3, #0]
 80201d0:	687a      	ldr	r2, [r7, #4]
 80201d2:	2000      	movs	r0, #0
 80201d4:	f005 f8c2 	bl	802535c <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return BOOL_TRUE;
 80201d8:	2301      	movs	r3, #1
}
 80201da:	0018      	movs	r0, r3
 80201dc:	46bd      	mov	sp, r7
 80201de:	b009      	add	sp, #36	; 0x24
 80201e0:	bd90      	pop	{r4, r7, pc}
 80201e2:	46c0      	nop			; (mov r8, r8)
 80201e4:	ffffa5fc 	.word	0xffffa5fc

080201e8 <eeprom_read_config>:
 * ---> Configuration (*) here
 * ---> UserLand
 * BypassTest option allows to read the configuration even if the size has changed an dcrc is invalid
 * Version change is detected with a normal read (bypassTest=BOOL_TRUE), get a False with versiuonR != 0
 */
itsdk_bool_e eeprom_read_config(void * data, uint16_t len, uint8_t version, uint8_t * versionR, itsdk_bool_e bypassTest) {
 80201e8:	b5b0      	push	{r4, r5, r7, lr}
 80201ea:	b08a      	sub	sp, #40	; 0x28
 80201ec:	af00      	add	r7, sp, #0
 80201ee:	60f8      	str	r0, [r7, #12]
 80201f0:	0008      	movs	r0, r1
 80201f2:	0011      	movs	r1, r2
 80201f4:	607b      	str	r3, [r7, #4]
 80201f6:	230a      	movs	r3, #10
 80201f8:	18fb      	adds	r3, r7, r3
 80201fa:	1c02      	adds	r2, r0, #0
 80201fc:	801a      	strh	r2, [r3, #0]
 80201fe:	2309      	movs	r3, #9
 8020200:	18fb      	adds	r3, r7, r3
 8020202:	1c0a      	adds	r2, r1, #0
 8020204:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 8020206:	2300      	movs	r3, #0
 8020208:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 802020a:	2310      	movs	r3, #16
 802020c:	18fb      	adds	r3, r7, r3
 802020e:	0018      	movs	r0, r3
 8020210:	f000 f862 	bl	80202d8 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8020214:	6939      	ldr	r1, [r7, #16]
 8020216:	2414      	movs	r4, #20
 8020218:	193a      	adds	r2, r7, r4
 802021a:	2310      	movs	r3, #16
 802021c:	2000      	movs	r0, #0
 802021e:	f005 f941 	bl	80254a4 <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC_CONFIG ) {
 8020222:	193b      	adds	r3, r7, r4
 8020224:	881b      	ldrh	r3, [r3, #0]
 8020226:	4a2b      	ldr	r2, [pc, #172]	; (80202d4 <eeprom_read_config+0xec>)
 8020228:	4293      	cmp	r3, r2
 802022a:	d004      	beq.n	8020236 <eeprom_read_config+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	2200      	movs	r2, #0
 8020230:	701a      	strb	r2, [r3, #0]
		return BOOL_FALSE;
 8020232:	2300      	movs	r3, #0
 8020234:	e049      	b.n	80202ca <eeprom_read_config+0xe2>
	}
	*versionR=t.version;
 8020236:	2114      	movs	r1, #20
 8020238:	187b      	adds	r3, r7, r1
 802023a:	789a      	ldrb	r2, [r3, #2]
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	701a      	strb	r2, [r3, #0]

	if ( t.version != version ) {
 8020240:	187b      	adds	r3, r7, r1
 8020242:	789b      	ldrb	r3, [r3, #2]
 8020244:	2209      	movs	r2, #9
 8020246:	18ba      	adds	r2, r7, r2
 8020248:	7812      	ldrb	r2, [r2, #0]
 802024a:	429a      	cmp	r2, r3
 802024c:	d001      	beq.n	8020252 <eeprom_read_config+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return BOOL_FALSE;
 802024e:	2300      	movs	r3, #0
 8020250:	e03b      	b.n	80202ca <eeprom_read_config+0xe2>
	}

	if ( t.size != len && ! bypassTest ) {
 8020252:	2314      	movs	r3, #20
 8020254:	18fb      	adds	r3, r7, r3
 8020256:	889b      	ldrh	r3, [r3, #4]
 8020258:	220a      	movs	r2, #10
 802025a:	18ba      	adds	r2, r7, r2
 802025c:	8812      	ldrh	r2, [r2, #0]
 802025e:	429a      	cmp	r2, r3
 8020260:	d009      	beq.n	8020276 <eeprom_read_config+0x8e>
 8020262:	2330      	movs	r3, #48	; 0x30
 8020264:	2208      	movs	r2, #8
 8020266:	4694      	mov	ip, r2
 8020268:	44bc      	add	ip, r7
 802026a:	4463      	add	r3, ip
 802026c:	781b      	ldrb	r3, [r3, #0]
 802026e:	2b00      	cmp	r3, #0
 8020270:	d101      	bne.n	8020276 <eeprom_read_config+0x8e>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return BOOL_FALSE;
 8020272:	2300      	movs	r3, #0
 8020274:	e029      	b.n	80202ca <eeprom_read_config+0xe2>
	} else {
		len = t.size;
 8020276:	200a      	movs	r0, #10
 8020278:	183b      	adds	r3, r7, r0
 802027a:	2514      	movs	r5, #20
 802027c:	197a      	adds	r2, r7, r5
 802027e:	8892      	ldrh	r2, [r2, #4]
 8020280:	801a      	strh	r2, [r3, #0]
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8020282:	693b      	ldr	r3, [r7, #16]
 8020284:	3310      	adds	r3, #16
 8020286:	0019      	movs	r1, r3
 8020288:	0004      	movs	r4, r0
 802028a:	183b      	adds	r3, r7, r0
 802028c:	881b      	ldrh	r3, [r3, #0]
 802028e:	68fa      	ldr	r2, [r7, #12]
 8020290:	2000      	movs	r0, #0
 8020292:	f005 f907 	bl	80254a4 <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 8020296:	0020      	movs	r0, r4
 8020298:	183b      	adds	r3, r7, r0
 802029a:	881a      	ldrh	r2, [r3, #0]
 802029c:	68fb      	ldr	r3, [r7, #12]
 802029e:	0011      	movs	r1, r2
 80202a0:	0018      	movs	r0, r3
 80202a2:	f003 fa25 	bl	80236f0 <itsdk_computeCRC32>
 80202a6:	0003      	movs	r3, r0
 80202a8:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc && ! bypassTest ) {
 80202aa:	197b      	adds	r3, r7, r5
 80202ac:	689b      	ldr	r3, [r3, #8]
 80202ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80202b0:	429a      	cmp	r2, r3
 80202b2:	d009      	beq.n	80202c8 <eeprom_read_config+0xe0>
 80202b4:	2330      	movs	r3, #48	; 0x30
 80202b6:	2208      	movs	r2, #8
 80202b8:	4694      	mov	ip, r2
 80202ba:	44bc      	add	ip, r7
 80202bc:	4463      	add	r3, ip
 80202be:	781b      	ldrb	r3, [r3, #0]
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	d101      	bne.n	80202c8 <eeprom_read_config+0xe0>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return BOOL_FALSE;
 80202c4:	2300      	movs	r3, #0
 80202c6:	e000      	b.n	80202ca <eeprom_read_config+0xe2>
	}

	return BOOL_TRUE;
 80202c8:	2301      	movs	r3, #1
}
 80202ca:	0018      	movs	r0, r3
 80202cc:	46bd      	mov	sp, r7
 80202ce:	b00a      	add	sp, #40	; 0x28
 80202d0:	bdb0      	pop	{r4, r5, r7, pc}
 80202d2:	46c0      	nop			; (mov r8, r8)
 80202d4:	0000a5fc 	.word	0x0000a5fc

080202d8 <eeprom_getConfigOffset>:

/**
 * Compute the EEPROM Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
itsdk_bool_e eeprom_getConfigOffset(uint32_t * _offset) {
 80202d8:	b580      	push	{r7, lr}
 80202da:	b086      	sub	sp, #24
 80202dc:	af00      	add	r7, sp, #0
 80202de:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 80202e0:	2300      	movs	r3, #0
 80202e2:	613b      	str	r3, [r7, #16]
 80202e4:	2300      	movs	r3, #0
 80202e6:	60fb      	str	r3, [r7, #12]
 80202e8:	2300      	movs	r3, #0
 80202ea:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 80202ec:	2310      	movs	r3, #16
 80202ee:	18fb      	adds	r3, r7, r3
 80202f0:	0018      	movs	r0, r3
 80202f2:	f000 fde6 	bl	8020ec2 <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 80202f6:	230c      	movs	r3, #12
 80202f8:	18fb      	adds	r3, r7, r3
 80202fa:	0018      	movs	r0, r3
 80202fc:	f002 fec9 	bl	8023092 <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	681a      	ldr	r2, [r3, #0]
 8020304:	6939      	ldr	r1, [r7, #16]
 8020306:	68fb      	ldr	r3, [r7, #12]
 8020308:	18c9      	adds	r1, r1, r3
 802030a:	697b      	ldr	r3, [r7, #20]
 802030c:	18cb      	adds	r3, r1, r3
 802030e:	18d2      	adds	r2, r2, r3
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	601a      	str	r2, [r3, #0]
  return BOOL_TRUE;
 8020314:	2301      	movs	r3, #1
}
 8020316:	0018      	movs	r0, r3
 8020318:	46bd      	mov	sp, r7
 802031a:	b006      	add	sp, #24
 802031c:	bd80      	pop	{r7, pc}

0802031e <eeprom_getConfigSize>:

/**
 * Get the EEprom config size from the config header
 * it includes the header size
 */
itsdk_bool_e eeprom_getConfigSize(uint32_t * _size) {
 802031e:	b590      	push	{r4, r7, lr}
 8020320:	b089      	sub	sp, #36	; 0x24
 8020322:	af00      	add	r7, sp, #0
 8020324:	6078      	str	r0, [r7, #4]
	t_eeprom_entry t;

	uint32_t offset = 0;
 8020326:	2300      	movs	r3, #0
 8020328:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 802032a:	230c      	movs	r3, #12
 802032c:	18fb      	adds	r3, r7, r3
 802032e:	0018      	movs	r0, r3
 8020330:	f7ff ffd2 	bl	80202d8 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8020334:	68f9      	ldr	r1, [r7, #12]
 8020336:	2410      	movs	r4, #16
 8020338:	193a      	adds	r2, r7, r4
 802033a:	2310      	movs	r3, #16
 802033c:	2000      	movs	r0, #0
 802033e:	f005 f8b1 	bl	80254a4 <_eeprom_read>

	*_size = sizeof(t) + t.size;
 8020342:	193b      	adds	r3, r7, r4
 8020344:	889b      	ldrh	r3, [r3, #4]
 8020346:	3310      	adds	r3, #16
 8020348:	001a      	movs	r2, r3
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	601a      	str	r2, [r3, #0]
	return BOOL_TRUE;
 802034e:	2301      	movs	r3, #1
}
 8020350:	0018      	movs	r0, r3
 8020352:	46bd      	mov	sp, r7
 8020354:	b009      	add	sp, #36	; 0x24
 8020356:	bd90      	pop	{r4, r7, pc}

08020358 <eeprom_clearAllEprom>:
}

/**
 * Clear (write 0) into the whole BANK0
 */
void eeprom_clearAllEprom() {
 8020358:	b580      	push	{r7, lr}
 802035a:	b082      	sub	sp, #8
 802035c:	af00      	add	r7, sp, #0
	uint32_t v  = 0;
 802035e:	2300      	movs	r3, #0
 8020360:	603b      	str	r3, [r7, #0]
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8020362:	2300      	movs	r3, #0
 8020364:	607b      	str	r3, [r7, #4]
 8020366:	e008      	b.n	802037a <eeprom_clearAllEprom+0x22>
		_eeprom_write(ITDT_EEPROM_BANK0, i, (void *) &v, sizeof(v));
 8020368:	6879      	ldr	r1, [r7, #4]
 802036a:	003a      	movs	r2, r7
 802036c:	2304      	movs	r3, #4
 802036e:	2000      	movs	r0, #0
 8020370:	f004 fff4 	bl	802535c <_eeprom_write>
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	3304      	adds	r3, #4
 8020378:	607b      	str	r3, [r7, #4]
 802037a:	687b      	ldr	r3, [r7, #4]
 802037c:	4a03      	ldr	r2, [pc, #12]	; (802038c <eeprom_clearAllEprom+0x34>)
 802037e:	4293      	cmp	r3, r2
 8020380:	ddf2      	ble.n	8020368 <eeprom_clearAllEprom+0x10>
	}
}
 8020382:	46c0      	nop			; (mov r8, r8)
 8020384:	46bd      	mov	sp, r7
 8020386:	b002      	add	sp, #8
 8020388:	bd80      	pop	{r7, pc}
 802038a:	46c0      	nop			; (mov r8, r8)
 802038c:	000017ff 	.word	0x000017ff

08020390 <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 8020390:	b580      	push	{r7, lr}
 8020392:	af00      	add	r7, sp, #0
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,0);
 8020394:	4b1b      	ldr	r3, [pc, #108]	; (8020404 <itsdk_config_sdk_resetToFactory+0x74>)
 8020396:	2100      	movs	r1, #0
 8020398:	0018      	movs	r0, r3
 802039a:	f002 fd55 	bl	8022e48 <itsdk_error_report>

		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 802039e:	4b1a      	ldr	r3, [pc, #104]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203a0:	2216      	movs	r2, #22
 80203a2:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 80203a4:	4b18      	ldr	r3, [pc, #96]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203a6:	2218      	movs	r2, #24
 80203a8:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 80203aa:	4b17      	ldr	r3, [pc, #92]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203ac:	2202      	movs	r2, #2
 80203ae:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 80203b0:	4b15      	ldr	r3, [pc, #84]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203b2:	7a9a      	ldrb	r2, [r3, #10]
 80203b4:	213f      	movs	r1, #63	; 0x3f
 80203b6:	400a      	ands	r2, r1
 80203b8:	1c11      	adds	r1, r2, #0
 80203ba:	2240      	movs	r2, #64	; 0x40
 80203bc:	430a      	orrs	r2, r1
 80203be:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 80203c0:	4b11      	ldr	r3, [pc, #68]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203c2:	7a9a      	ldrb	r2, [r3, #10]
 80203c4:	2130      	movs	r1, #48	; 0x30
 80203c6:	438a      	bics	r2, r1
 80203c8:	1c11      	adds	r1, r2, #0
 80203ca:	2210      	movs	r2, #16
 80203cc:	430a      	orrs	r2, r1
 80203ce:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 80203d0:	4b0d      	ldr	r3, [pc, #52]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203d2:	7a9a      	ldrb	r2, [r3, #10]
 80203d4:	2103      	movs	r1, #3
 80203d6:	438a      	bics	r2, r1
 80203d8:	1c11      	adds	r1, r2, #0
 80203da:	2201      	movs	r2, #1
 80203dc:	430a      	orrs	r2, r1
 80203de:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 80203e0:	4b09      	ldr	r3, [pc, #36]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203e2:	7a9a      	ldrb	r2, [r3, #10]
 80203e4:	210c      	movs	r1, #12
 80203e6:	438a      	bics	r2, r1
 80203e8:	1c11      	adds	r1, r2, #0
 80203ea:	2204      	movs	r2, #4
 80203ec:	430a      	orrs	r2, r1
 80203ee:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 80203f0:	4b05      	ldr	r3, [pc, #20]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203f2:	2200      	movs	r2, #0
 80203f4:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 80203f6:	4b04      	ldr	r3, [pc, #16]	; (8020408 <itsdk_config_sdk_resetToFactory+0x78>)
 80203f8:	2220      	movs	r2, #32
 80203fa:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 80203fc:	2302      	movs	r3, #2
	}
 80203fe:	0018      	movs	r0, r3
 8020400:	46bd      	mov	sp, r7
 8020402:	bd80      	pop	{r7, pc}
 8020404:	10000073 	.word	0x10000073
 8020408:	200021ec 	.word	0x200021ec

0802040c <itsdk_config_app_resetToFactory>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overide - reset the app to factory default
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 802040c:	b580      	push	{r7, lr}
 802040e:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8020410:	4b05      	ldr	r3, [pc, #20]	; (8020428 <itsdk_config_app_resetToFactory+0x1c>)
 8020412:	2201      	movs	r2, #1
 8020414:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8020416:	4b05      	ldr	r3, [pc, #20]	; (802042c <itsdk_config_app_resetToFactory+0x20>)
 8020418:	2100      	movs	r1, #0
 802041a:	0018      	movs	r0, r3
 802041c:	f002 fd14 	bl	8022e48 <itsdk_error_report>
			return CONFIG_FAILED;
 8020420:	2304      	movs	r3, #4
		}
 8020422:	0018      	movs	r0, r3
 8020424:	46bd      	mov	sp, r7
 8020426:	bd80      	pop	{r7, pc}
 8020428:	200021ec 	.word	0x200021ec
 802042c:	40000070 	.word	0x40000070

08020430 <itsdk_config_app_upgradeConfiguration>:
		/**
		 * This function need to be overide - upgrade the app configuration
		 */
		__weak itsdk_config_ret_e itsdk_config_app_upgradeConfiguration() {
 8020430:	b580      	push	{r7, lr}
 8020432:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8020434:	4b05      	ldr	r3, [pc, #20]	; (802044c <itsdk_config_app_upgradeConfiguration+0x1c>)
 8020436:	2201      	movs	r2, #1
 8020438:	761a      	strb	r2, [r3, #24]
		    //ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,1);
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 802043a:	4b05      	ldr	r3, [pc, #20]	; (8020450 <itsdk_config_app_upgradeConfiguration+0x20>)
 802043c:	2100      	movs	r1, #0
 802043e:	0018      	movs	r0, r3
 8020440:	f002 fd02 	bl	8022e48 <itsdk_error_report>
			return CONFIG_FAILED;
 8020444:	2304      	movs	r3, #4
		}
 8020446:	0018      	movs	r0, r3
 8020448:	46bd      	mov	sp, r7
 802044a:	bd80      	pop	{r7, pc}
 802044c:	200021ec 	.word	0x200021ec
 8020450:	40000070 	.word	0x40000070

08020454 <itsdk_config_resetToFactory>:
	#endif

	/**
	 * Reset to factory default update eeprom & shadow
	 */
	itsdk_config_ret_e itsdk_config_resetToFactory() {
 8020454:	b5b0      	push	{r4, r5, r7, lr}
 8020456:	af00      	add	r7, sp, #0
		 itsdk_config_sdk_resetToFactory();
 8020458:	f7ff ff9a 	bl	8020390 <itsdk_config_sdk_resetToFactory>
		 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		 itsdk_config_app_resetToFactory();
 802045c:	f7ff ffd6 	bl	802040c <itsdk_config_app_resetToFactory>
		 #endif
		 #if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
		 eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8020460:	4b0b      	ldr	r3, [pc, #44]	; (8020490 <itsdk_config_resetToFactory+0x3c>)
 8020462:	2201      	movs	r2, #1
 8020464:	211c      	movs	r1, #28
 8020466:	0018      	movs	r0, r3
 8020468:	f7ff fe7e 	bl	8020168 <eeprom_write_config>
		 #endif
	     bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 802046c:	4b09      	ldr	r3, [pc, #36]	; (8020494 <itsdk_config_resetToFactory+0x40>)
 802046e:	4a08      	ldr	r2, [pc, #32]	; (8020490 <itsdk_config_resetToFactory+0x3c>)
 8020470:	ca13      	ldmia	r2!, {r0, r1, r4}
 8020472:	c313      	stmia	r3!, {r0, r1, r4}
 8020474:	ca13      	ldmia	r2!, {r0, r1, r4}
 8020476:	c313      	stmia	r3!, {r0, r1, r4}
 8020478:	6812      	ldr	r2, [r2, #0]
 802047a:	601a      	str	r2, [r3, #0]
		 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 802047c:	4b06      	ldr	r3, [pc, #24]	; (8020498 <itsdk_config_resetToFactory+0x44>)
 802047e:	2103      	movs	r1, #3
 8020480:	0018      	movs	r0, r3
 8020482:	f002 fce1 	bl	8022e48 <itsdk_error_report>
	     return CONFIG_SUCCESS;
 8020486:	2300      	movs	r3, #0
	}
 8020488:	0018      	movs	r0, r3
 802048a:	46bd      	mov	sp, r7
 802048c:	bdb0      	pop	{r4, r5, r7, pc}
 802048e:	46c0      	nop			; (mov r8, r8)
 8020490:	200021ec 	.word	0x200021ec
 8020494:	200021d0 	.word	0x200021d0
 8020498:	50000071 	.word	0x50000071

0802049c <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 802049c:	b590      	push	{r4, r7, lr}
 802049e:	b087      	sub	sp, #28
 80204a0:	af02      	add	r7, sp, #8
 80204a2:	0002      	movs	r2, r0
 80204a4:	1dfb      	adds	r3, r7, #7
 80204a6:	701a      	strb	r2, [r3, #0]

#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_configMng.console_private = _itsdk_config_consolePriv;
 80204a8:	4b60      	ldr	r3, [pc, #384]	; (802062c <itsdk_config_loadConfiguration+0x190>)
 80204aa:	4a61      	ldr	r2, [pc, #388]	; (8020630 <itsdk_config_loadConfiguration+0x194>)
 80204ac:	601a      	str	r2, [r3, #0]
	__console_configMng.console_public = _itsdk_config_consolePublic;
 80204ae:	4b5f      	ldr	r3, [pc, #380]	; (802062c <itsdk_config_loadConfiguration+0x190>)
 80204b0:	4a60      	ldr	r2, [pc, #384]	; (8020634 <itsdk_config_loadConfiguration+0x198>)
 80204b2:	605a      	str	r2, [r3, #4]
	__console_configMng.next = NULL;
 80204b4:	4b5d      	ldr	r3, [pc, #372]	; (802062c <itsdk_config_loadConfiguration+0x190>)
 80204b6:	2200      	movs	r2, #0
 80204b8:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_configMng);
 80204ba:	4b5c      	ldr	r3, [pc, #368]	; (802062c <itsdk_config_loadConfiguration+0x190>)
 80204bc:	0018      	movs	r0, r3
 80204be:	f7ff fe21 	bl	8020104 <itsdk_console_registerCommand>
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v;
  uint8_t requestFactoryReset = 0;
 80204c2:	230f      	movs	r3, #15
 80204c4:	18fb      	adds	r3, r7, r3
 80204c6:	2200      	movs	r2, #0
 80204c8:	701a      	strb	r2, [r3, #0]
  uint8_t configUpdated = 0;
 80204ca:	230e      	movs	r3, #14
 80204cc:	18fb      	adds	r3, r7, r3
 80204ce:	2200      	movs	r2, #0
 80204d0:	701a      	strb	r2, [r3, #0]

  if ( mode != CONFIG_FORCE_TO_FACTORY ) {
 80204d2:	1dfb      	adds	r3, r7, #7
 80204d4:	781b      	ldrb	r3, [r3, #0]
 80204d6:	2b01      	cmp	r3, #1
 80204d8:	d100      	bne.n	80204dc <itsdk_config_loadConfiguration+0x40>
 80204da:	e071      	b.n	80205c0 <itsdk_config_loadConfiguration+0x124>
     if ( ! eeprom_read_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION,&v, true) ) {
 80204dc:	230d      	movs	r3, #13
 80204de:	18fa      	adds	r2, r7, r3
 80204e0:	4855      	ldr	r0, [pc, #340]	; (8020638 <itsdk_config_loadConfiguration+0x19c>)
 80204e2:	2301      	movs	r3, #1
 80204e4:	9300      	str	r3, [sp, #0]
 80204e6:	0013      	movs	r3, r2
 80204e8:	2201      	movs	r2, #1
 80204ea:	211c      	movs	r1, #28
 80204ec:	f7ff fe7c 	bl	80201e8 <eeprom_read_config>
 80204f0:	1e03      	subs	r3, r0, #0
 80204f2:	d11c      	bne.n	802052e <itsdk_config_loadConfiguration+0x92>
		 // failed to read configuration
		 if ( v == 0 ) {
 80204f4:	230d      	movs	r3, #13
 80204f6:	18fb      	adds	r3, r7, r3
 80204f8:	781b      	ldrb	r3, [r3, #0]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d109      	bne.n	8020512 <itsdk_config_loadConfiguration+0x76>
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMAGIC,0);
 80204fe:	4b4f      	ldr	r3, [pc, #316]	; (802063c <itsdk_config_loadConfiguration+0x1a0>)
 8020500:	2100      	movs	r1, #0
 8020502:	0018      	movs	r0, r3
 8020504:	f002 fca0 	bl	8022e48 <itsdk_error_report>
			requestFactoryReset=1;
 8020508:	230f      	movs	r3, #15
 802050a:	18fb      	adds	r3, r7, r3
 802050c:	2201      	movs	r2, #1
 802050e:	701a      	strb	r2, [r3, #0]
 8020510:	e00d      	b.n	802052e <itsdk_config_loadConfiguration+0x92>
		 } else if ( v!= ITSDK_CONFIGURATION_MNG_VERSION ) {
 8020512:	230d      	movs	r3, #13
 8020514:	18fb      	adds	r3, r7, r3
 8020516:	781b      	ldrb	r3, [r3, #0]
 8020518:	2b01      	cmp	r3, #1
 802051a:	d008      	beq.n	802052e <itsdk_config_loadConfiguration+0x92>
  		    // magic is invalid or MNG version has changed... impossible to migrate
  		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_CONFIG_BADMNGV,0);
 802051c:	4b48      	ldr	r3, [pc, #288]	; (8020640 <itsdk_config_loadConfiguration+0x1a4>)
 802051e:	2100      	movs	r1, #0
 8020520:	0018      	movs	r0, r3
 8020522:	f002 fc91 	bl	8022e48 <itsdk_error_report>
			requestFactoryReset=1;
 8020526:	230f      	movs	r3, #15
 8020528:	18fb      	adds	r3, r7, r3
 802052a:	2201      	movs	r2, #1
 802052c:	701a      	strb	r2, [r3, #0]
	  }
   	  // we have a config loaded but it can be a wrong one
	  // Process SDK
      //   management remains the same but the version & size may have changed.
	  //   migration is possible
	  if ( requestFactoryReset == 0 && (itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION || itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) ) {
 802052e:	230f      	movs	r3, #15
 8020530:	18fb      	adds	r3, r7, r3
 8020532:	781b      	ldrb	r3, [r3, #0]
 8020534:	2b00      	cmp	r3, #0
 8020536:	d121      	bne.n	802057c <itsdk_config_loadConfiguration+0xe0>
 8020538:	4b3f      	ldr	r3, [pc, #252]	; (8020638 <itsdk_config_loadConfiguration+0x19c>)
 802053a:	781b      	ldrb	r3, [r3, #0]
 802053c:	2b16      	cmp	r3, #22
 802053e:	d103      	bne.n	8020548 <itsdk_config_loadConfiguration+0xac>
 8020540:	4b3d      	ldr	r3, [pc, #244]	; (8020638 <itsdk_config_loadConfiguration+0x19c>)
 8020542:	885b      	ldrh	r3, [r3, #2]
 8020544:	2b18      	cmp	r3, #24
 8020546:	d019      	beq.n	802057c <itsdk_config_loadConfiguration+0xe0>
	     // SDK version has changed or compilation option has changed
	     if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 8020548:	4b3b      	ldr	r3, [pc, #236]	; (8020638 <itsdk_config_loadConfiguration+0x19c>)
 802054a:	885b      	ldrh	r3, [r3, #2]
 802054c:	2b18      	cmp	r3, #24
 802054e:	d009      	beq.n	8020564 <itsdk_config_loadConfiguration+0xc8>
	 	    // and the size has changed so we need to force a reset
		    requestFactoryReset=1;
 8020550:	230f      	movs	r3, #15
 8020552:	18fb      	adds	r3, r7, r3
 8020554:	2201      	movs	r2, #1
 8020556:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,0);
 8020558:	4b3a      	ldr	r3, [pc, #232]	; (8020644 <itsdk_config_loadConfiguration+0x1a8>)
 802055a:	2100      	movs	r1, #0
 802055c:	0018      	movs	r0, r3
 802055e:	f002 fc73 	bl	8022e48 <itsdk_error_report>
 8020562:	e00b      	b.n	802057c <itsdk_config_loadConfiguration+0xe0>
		 } else {
		    // migration is possible ...
			//  if ( itsdk_config.sdk.version < 0x17 ) {
			//  }
		    itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 8020564:	4b34      	ldr	r3, [pc, #208]	; (8020638 <itsdk_config_loadConfiguration+0x19c>)
 8020566:	2216      	movs	r2, #22
 8020568:	701a      	strb	r2, [r3, #0]

		    configUpdated = 1;
 802056a:	230e      	movs	r3, #14
 802056c:	18fb      	adds	r3, r7, r3
 802056e:	2201      	movs	r2, #1
 8020570:	701a      	strb	r2, [r3, #0]
		    ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKCNF_UPGRADED,ITSDK_CONFIGURATION_SDK_VERSION);
 8020572:	4b35      	ldr	r3, [pc, #212]	; (8020648 <itsdk_config_loadConfiguration+0x1ac>)
 8020574:	2116      	movs	r1, #22
 8020576:	0018      	movs	r0, r3
 8020578:	f002 fc66 	bl	8022e48 <itsdk_error_report>
		 }
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( requestFactoryReset == 0 && itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 802057c:	230f      	movs	r3, #15
 802057e:	18fb      	adds	r3, r7, r3
 8020580:	781b      	ldrb	r3, [r3, #0]
 8020582:	2b00      	cmp	r3, #0
 8020584:	d120      	bne.n	80205c8 <itsdk_config_loadConfiguration+0x12c>
 8020586:	4b2c      	ldr	r3, [pc, #176]	; (8020638 <itsdk_config_loadConfiguration+0x19c>)
 8020588:	7e1b      	ldrb	r3, [r3, #24]
 802058a:	2b01      	cmp	r3, #1
 802058c:	d01c      	beq.n	80205c8 <itsdk_config_loadConfiguration+0x12c>
		 // version has changed an upgrade can be possible, lets application level to decide.
		 if ( itsdk_config_app_upgradeConfiguration() == CONFIG_UPGRADED ) {
 802058e:	f7ff ff4f 	bl	8020430 <itsdk_config_app_upgradeConfiguration>
 8020592:	0003      	movs	r3, r0
 8020594:	2b03      	cmp	r3, #3
 8020596:	d109      	bne.n	80205ac <itsdk_config_loadConfiguration+0x110>
			 // at least the version has been upgraded
			 configUpdated = 1;
 8020598:	230e      	movs	r3, #14
 802059a:	18fb      	adds	r3, r7, r3
 802059c:	2201      	movs	r2, #1
 802059e:	701a      	strb	r2, [r3, #0]
			 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_APPCNF_UPGRADED,ITSDK_CONFIGURATION_APP_VERSION);
 80205a0:	4b2a      	ldr	r3, [pc, #168]	; (802064c <itsdk_config_loadConfiguration+0x1b0>)
 80205a2:	2101      	movs	r1, #1
 80205a4:	0018      	movs	r0, r3
 80205a6:	f002 fc4f 	bl	8022e48 <itsdk_error_report>
 80205aa:	e00d      	b.n	80205c8 <itsdk_config_loadConfiguration+0x12c>
		 } else {
			 requestFactoryReset = 1;
 80205ac:	230f      	movs	r3, #15
 80205ae:	18fb      	adds	r3, r7, r3
 80205b0:	2201      	movs	r2, #1
 80205b2:	701a      	strb	r2, [r3, #0]
  		     ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_MIGRATE_FAILED,1);
 80205b4:	4b23      	ldr	r3, [pc, #140]	; (8020644 <itsdk_config_loadConfiguration+0x1a8>)
 80205b6:	2101      	movs	r1, #1
 80205b8:	0018      	movs	r0, r3
 80205ba:	f002 fc45 	bl	8022e48 <itsdk_error_report>
 80205be:	e003      	b.n	80205c8 <itsdk_config_loadConfiguration+0x12c>
		 }
      }
	  #endif

   } else requestFactoryReset = 1;
 80205c0:	230f      	movs	r3, #15
 80205c2:	18fb      	adds	r3, r7, r3
 80205c4:	2201      	movs	r2, #1
 80205c6:	701a      	strb	r2, [r3, #0]


   if ( requestFactoryReset == 1 ) {
 80205c8:	230f      	movs	r3, #15
 80205ca:	18fb      	adds	r3, r7, r3
 80205cc:	781b      	ldrb	r3, [r3, #0]
 80205ce:	2b01      	cmp	r3, #1
 80205d0:	d10c      	bne.n	80205ec <itsdk_config_loadConfiguration+0x150>
	  itsdk_config_sdk_resetToFactory();
 80205d2:	f7ff fedd 	bl	8020390 <itsdk_config_sdk_resetToFactory>
	  itsdk_config_app_resetToFactory();
 80205d6:	f7ff ff19 	bl	802040c <itsdk_config_app_resetToFactory>
	  configUpdated = 1;
 80205da:	230e      	movs	r3, #14
 80205dc:	18fb      	adds	r3, r7, r3
 80205de:	2201      	movs	r2, #1
 80205e0:	701a      	strb	r2, [r3, #0]
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 80205e2:	4b1b      	ldr	r3, [pc, #108]	; (8020650 <itsdk_config_loadConfiguration+0x1b4>)
 80205e4:	2103      	movs	r1, #3
 80205e6:	0018      	movs	r0, r3
 80205e8:	f002 fc2e 	bl	8022e48 <itsdk_error_report>
   }

   if (configUpdated == 1) {
 80205ec:	230e      	movs	r3, #14
 80205ee:	18fb      	adds	r3, r7, r3
 80205f0:	781b      	ldrb	r3, [r3, #0]
 80205f2:	2b01      	cmp	r3, #1
 80205f4:	d105      	bne.n	8020602 <itsdk_config_loadConfiguration+0x166>
	  // need to store the configuration
      eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 80205f6:	4b10      	ldr	r3, [pc, #64]	; (8020638 <itsdk_config_loadConfiguration+0x19c>)
 80205f8:	2201      	movs	r2, #1
 80205fa:	211c      	movs	r1, #28
 80205fc:	0018      	movs	r0, r3
 80205fe:	f7ff fdb3 	bl	8020168 <eeprom_write_config>
   }
   bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8020602:	4b14      	ldr	r3, [pc, #80]	; (8020654 <itsdk_config_loadConfiguration+0x1b8>)
 8020604:	4a0c      	ldr	r2, [pc, #48]	; (8020638 <itsdk_config_loadConfiguration+0x19c>)
 8020606:	ca13      	ldmia	r2!, {r0, r1, r4}
 8020608:	c313      	stmia	r3!, {r0, r1, r4}
 802060a:	ca13      	ldmia	r2!, {r0, r1, r4}
 802060c:	c313      	stmia	r3!, {r0, r1, r4}
 802060e:	6812      	ldr	r2, [r2, #0]
 8020610:	601a      	str	r2, [r3, #0]
	  itsdk_config_app_resetToFactory();
    #endif
      bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 #endif

   return ( requestFactoryReset == 1 )?CONFIG_RESTORED_FROM_FACTORY:CONFIG_LOADED;
 8020612:	230f      	movs	r3, #15
 8020614:	18fb      	adds	r3, r7, r3
 8020616:	781b      	ldrb	r3, [r3, #0]
 8020618:	2b01      	cmp	r3, #1
 802061a:	d101      	bne.n	8020620 <itsdk_config_loadConfiguration+0x184>
 802061c:	2302      	movs	r3, #2
 802061e:	e000      	b.n	8020622 <itsdk_config_loadConfiguration+0x186>
 8020620:	2301      	movs	r3, #1

}
 8020622:	0018      	movs	r0, r3
 8020624:	46bd      	mov	sp, r7
 8020626:	b005      	add	sp, #20
 8020628:	bd90      	pop	{r4, r7, pc}
 802062a:	46c0      	nop			; (mov r8, r8)
 802062c:	20001d64 	.word	0x20001d64
 8020630:	0802084d 	.word	0x0802084d
 8020634:	08020705 	.word	0x08020705
 8020638:	200021ec 	.word	0x200021ec
 802063c:	40000076 	.word	0x40000076
 8020640:	40000077 	.word	0x40000077
 8020644:	50000078 	.word	0x50000078
 8020648:	10000074 	.word	0x10000074
 802064c:	10000075 	.word	0x10000075
 8020650:	50000071 	.word	0x50000071
 8020654:	200021d0 	.word	0x200021d0

08020658 <itsdk_config_app_commitConfiguration>:
// CONFIG SHADOW
// ====================================================================================================

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC

__weak itsdk_config_ret_e itsdk_config_app_commitConfiguration() {
 8020658:	b580      	push	{r7, lr}
 802065a:	af00      	add	r7, sp, #0
	return CONFIG_SUCCESS;
 802065c:	2300      	movs	r3, #0
}
 802065e:	0018      	movs	r0, r3
 8020660:	46bd      	mov	sp, r7
 8020662:	bd80      	pop	{r7, pc}

08020664 <itsdk_config_commitConfiguration>:

/**
 * Commit a shadow configuration into the standard config.
 * Save it
 */
itsdk_config_ret_e itsdk_config_commitConfiguration(itsdk_config_commit_mode_e mode) {
 8020664:	b5b0      	push	{r4, r5, r7, lr}
 8020666:	b084      	sub	sp, #16
 8020668:	af00      	add	r7, sp, #0
 802066a:	0002      	movs	r2, r0
 802066c:	1dfb      	adds	r3, r7, #7
 802066e:	701a      	strb	r2, [r3, #0]

 itsdk_config_ret_e r = itsdk_config_app_commitConfiguration();
 8020670:	250f      	movs	r5, #15
 8020672:	197c      	adds	r4, r7, r5
 8020674:	f7ff fff0 	bl	8020658 <itsdk_config_app_commitConfiguration>
 8020678:	0003      	movs	r3, r0
 802067a:	7023      	strb	r3, [r4, #0]
 if ( r != CONFIG_SUCCESS ) return r;
 802067c:	197b      	adds	r3, r7, r5
 802067e:	781b      	ldrb	r3, [r3, #0]
 8020680:	2b00      	cmp	r3, #0
 8020682:	d003      	beq.n	802068c <itsdk_config_commitConfiguration+0x28>
 8020684:	230f      	movs	r3, #15
 8020686:	18fb      	adds	r3, r7, r3
 8020688:	781b      	ldrb	r3, [r3, #0]
 802068a:	e023      	b.n	80206d4 <itsdk_config_commitConfiguration+0x70>

 bcopy(&itsdk_config_shadow,&itsdk_config,sizeof(itsdk_configuration_nvm_t));
 802068c:	4b13      	ldr	r3, [pc, #76]	; (80206dc <itsdk_config_commitConfiguration+0x78>)
 802068e:	4a14      	ldr	r2, [pc, #80]	; (80206e0 <itsdk_config_commitConfiguration+0x7c>)
 8020690:	ca13      	ldmia	r2!, {r0, r1, r4}
 8020692:	c313      	stmia	r3!, {r0, r1, r4}
 8020694:	ca13      	ldmia	r2!, {r0, r1, r4}
 8020696:	c313      	stmia	r3!, {r0, r1, r4}
 8020698:	6812      	ldr	r2, [r2, #0]
 802069a:	601a      	str	r2, [r3, #0]
 ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_COMMIT_NEW_CONF,0);
 802069c:	2100      	movs	r1, #0
 802069e:	2072      	movs	r0, #114	; 0x72
 80206a0:	f002 fbd2 	bl	8022e48 <itsdk_error_report>

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
 if ( mode == CONFIG_COMMIT_SAVE || mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 80206a4:	1dfb      	adds	r3, r7, #7
 80206a6:	781b      	ldrb	r3, [r3, #0]
 80206a8:	2b01      	cmp	r3, #1
 80206aa:	d003      	beq.n	80206b4 <itsdk_config_commitConfiguration+0x50>
 80206ac:	1dfb      	adds	r3, r7, #7
 80206ae:	781b      	ldrb	r3, [r3, #0]
 80206b0:	2b02      	cmp	r3, #2
 80206b2:	d105      	bne.n	80206c0 <itsdk_config_commitConfiguration+0x5c>
     eeprom_write_config(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 80206b4:	4b09      	ldr	r3, [pc, #36]	; (80206dc <itsdk_config_commitConfiguration+0x78>)
 80206b6:	2201      	movs	r2, #1
 80206b8:	211c      	movs	r1, #28
 80206ba:	0018      	movs	r0, r3
 80206bc:	f7ff fd54 	bl	8020168 <eeprom_write_config>
 }
 if ( mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 80206c0:	1dfb      	adds	r3, r7, #7
 80206c2:	781b      	ldrb	r3, [r3, #0]
 80206c4:	2b02      	cmp	r3, #2
 80206c6:	d104      	bne.n	80206d2 <itsdk_config_commitConfiguration+0x6e>
	 itsdk_delayMs(200);
 80206c8:	20c8      	movs	r0, #200	; 0xc8
 80206ca:	f004 fcc5 	bl	8025058 <itsdk_delayMs>
	 itsdk_reset();
 80206ce:	f004 fc71 	bl	8024fb4 <itsdk_reset>
 }
#endif
 return CONFIG_SUCCESS;
 80206d2:	2300      	movs	r3, #0
}
 80206d4:	0018      	movs	r0, r3
 80206d6:	46bd      	mov	sp, r7
 80206d8:	b004      	add	sp, #16
 80206da:	bdb0      	pop	{r4, r5, r7, pc}
 80206dc:	200021ec 	.word	0x200021ec
 80206e0:	200021d0 	.word	0x200021d0

080206e4 <itsdk_config_app_printConfig>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak void itsdk_config_app_printConfig(itsdk_configuration_nvm_t * c) {
 80206e4:	b580      	push	{r7, lr}
 80206e6:	b082      	sub	sp, #8
 80206e8:	af00      	add	r7, sp, #0
 80206ea:	6078      	str	r0, [r7, #4]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 80206ec:	4b04      	ldr	r3, [pc, #16]	; (8020700 <itsdk_config_app_printConfig+0x1c>)
 80206ee:	2100      	movs	r1, #0
 80206f0:	0018      	movs	r0, r3
 80206f2:	f002 fba9 	bl	8022e48 <itsdk_error_report>
			return;
 80206f6:	46c0      	nop			; (mov r8, r8)
		}
 80206f8:	46bd      	mov	sp, r7
 80206fa:	b002      	add	sp, #8
 80206fc:	bd80      	pop	{r7, pc}
 80206fe:	46c0      	nop			; (mov r8, r8)
 8020700:	40000070 	.word	0x40000070

08020704 <_itsdk_config_consolePublic>:

	#endif // ITSDK_WITH_CONFIGURATION_APP

	static itsdk_console_return_e _itsdk_config_consolePublic(char * buffer, uint8_t sz) {
 8020704:	b580      	push	{r7, lr}
 8020706:	b084      	sub	sp, #16
 8020708:	af00      	add	r7, sp, #0
 802070a:	6078      	str	r0, [r7, #4]
 802070c:	000a      	movs	r2, r1
 802070e:	1cfb      	adds	r3, r7, #3
 8020710:	701a      	strb	r2, [r3, #0]
	   if ( sz == 1 ) {
 8020712:	1cfb      	adds	r3, r7, #3
 8020714:	781b      	ldrb	r3, [r3, #0]
 8020716:	2b01      	cmp	r3, #1
 8020718:	d000      	beq.n	802071c <_itsdk_config_consolePublic+0x18>
 802071a:	e074      	b.n	8020806 <_itsdk_config_consolePublic+0x102>
		  switch(buffer[0]){
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	781b      	ldrb	r3, [r3, #0]
 8020720:	2b43      	cmp	r3, #67	; 0x43
 8020722:	d012      	beq.n	802074a <_itsdk_config_consolePublic+0x46>
 8020724:	2b63      	cmp	r3, #99	; 0x63
 8020726:	d010      	beq.n	802074a <_itsdk_config_consolePublic+0x46>
 8020728:	2b3f      	cmp	r3, #63	; 0x3f
 802072a:	d000      	beq.n	802072e <_itsdk_config_consolePublic+0x2a>
				  _itsdk_console_printf("OK\r\n");
				}
				return ITSDK_CONSOLE_SUCCES;
				break;
			default:
				break;
 802072c:	e06c      	b.n	8020808 <_itsdk_config_consolePublic+0x104>
				_itsdk_console_printf("--- ConfigMng\r\n");
 802072e:	4b39      	ldr	r3, [pc, #228]	; (8020814 <_itsdk_config_consolePublic+0x110>)
 8020730:	0018      	movs	r0, r3
 8020732:	f7ff fb27 	bl	801fd84 <_itsdk_console_printf>
				_itsdk_console_printf("c          : print config\r\n");
 8020736:	4b38      	ldr	r3, [pc, #224]	; (8020818 <_itsdk_config_consolePublic+0x114>)
 8020738:	0018      	movs	r0, r3
 802073a:	f7ff fb23 	bl	801fd84 <_itsdk_console_printf>
				_itsdk_console_printf("C          : print shadow config\r\n");
 802073e:	4b37      	ldr	r3, [pc, #220]	; (802081c <_itsdk_config_consolePublic+0x118>)
 8020740:	0018      	movs	r0, r3
 8020742:	f7ff fb1f 	bl	801fd84 <_itsdk_console_printf>
			  return ITSDK_CONSOLE_SUCCES;
 8020746:	2300      	movs	r3, #0
 8020748:	e05f      	b.n	802080a <_itsdk_config_consolePublic+0x106>
					itsdk_configuration_nvm_t * _c = &itsdk_config;
 802074a:	4b35      	ldr	r3, [pc, #212]	; (8020820 <_itsdk_config_consolePublic+0x11c>)
 802074c:	60fb      	str	r3, [r7, #12]
					if (buffer[0]=='C') _c = &itsdk_config_shadow;
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	781b      	ldrb	r3, [r3, #0]
 8020752:	2b43      	cmp	r3, #67	; 0x43
 8020754:	d101      	bne.n	802075a <_itsdk_config_consolePublic+0x56>
 8020756:	4b33      	ldr	r3, [pc, #204]	; (8020824 <_itsdk_config_consolePublic+0x120>)
 8020758:	60fb      	str	r3, [r7, #12]
					_itsdk_console_printf("sdk.version : %02X\r\n",_c->sdk.version);
 802075a:	68fb      	ldr	r3, [r7, #12]
 802075c:	781b      	ldrb	r3, [r3, #0]
 802075e:	001a      	movs	r2, r3
 8020760:	4b31      	ldr	r3, [pc, #196]	; (8020828 <_itsdk_config_consolePublic+0x124>)
 8020762:	0011      	movs	r1, r2
 8020764:	0018      	movs	r0, r3
 8020766:	f7ff fb0d 	bl	801fd84 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeNetwork : %d\r\n",_c->sdk.activeNetwork);
 802076a:	68fb      	ldr	r3, [r7, #12]
 802076c:	88db      	ldrh	r3, [r3, #6]
 802076e:	001a      	movs	r2, r3
 8020770:	4b2e      	ldr	r3, [pc, #184]	; (802082c <_itsdk_config_consolePublic+0x128>)
 8020772:	0011      	movs	r1, r2
 8020774:	0018      	movs	r0, r3
 8020776:	f7ff fb05 	bl	801fd84 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeRegion : %04X\r\n",_c->sdk.activeRegion);
 802077a:	68fb      	ldr	r3, [r7, #12]
 802077c:	891b      	ldrh	r3, [r3, #8]
 802077e:	001a      	movs	r2, r3
 8020780:	4b2b      	ldr	r3, [pc, #172]	; (8020830 <_itsdk_config_consolePublic+0x12c>)
 8020782:	0011      	movs	r1, r2
 8020784:	0018      	movs	r0, r3
 8020786:	f7ff fafd 	bl	801fd84 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.adrmode : %d\r\n",_c->sdk.lorawan.adrMode);
 802078a:	68fb      	ldr	r3, [r7, #12]
 802078c:	7a9b      	ldrb	r3, [r3, #10]
 802078e:	061b      	lsls	r3, r3, #24
 8020790:	0f9b      	lsrs	r3, r3, #30
 8020792:	b2db      	uxtb	r3, r3
 8020794:	001a      	movs	r2, r3
 8020796:	4b27      	ldr	r3, [pc, #156]	; (8020834 <_itsdk_config_consolePublic+0x130>)
 8020798:	0011      	movs	r1, r2
 802079a:	0018      	movs	r0, r3
 802079c:	f7ff faf2 	bl	801fd84 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.devEuiType : %d\r\n",_c->sdk.lorawan.devEuiType);
 80207a0:	68fb      	ldr	r3, [r7, #12]
 80207a2:	7a9b      	ldrb	r3, [r3, #10]
 80207a4:	069b      	lsls	r3, r3, #26
 80207a6:	0f9b      	lsrs	r3, r3, #30
 80207a8:	b2db      	uxtb	r3, r3
 80207aa:	001a      	movs	r2, r3
 80207ac:	4b22      	ldr	r3, [pc, #136]	; (8020838 <_itsdk_config_consolePublic+0x134>)
 80207ae:	0011      	movs	r1, r2
 80207b0:	0018      	movs	r0, r3
 80207b2:	f7ff fae7 	bl	801fd84 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.joinMode : %d\r\n",_c->sdk.lorawan.joinMode);
 80207b6:	68fb      	ldr	r3, [r7, #12]
 80207b8:	7a9b      	ldrb	r3, [r3, #10]
 80207ba:	079b      	lsls	r3, r3, #30
 80207bc:	0f9b      	lsrs	r3, r3, #30
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	001a      	movs	r2, r3
 80207c2:	4b1e      	ldr	r3, [pc, #120]	; (802083c <_itsdk_config_consolePublic+0x138>)
 80207c4:	0011      	movs	r1, r2
 80207c6:	0018      	movs	r0, r3
 80207c8:	f7ff fadc 	bl	801fd84 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.networkType : %d\r\n",_c->sdk.lorawan.networkType);
 80207cc:	68fb      	ldr	r3, [r7, #12]
 80207ce:	7a9b      	ldrb	r3, [r3, #10]
 80207d0:	071b      	lsls	r3, r3, #28
 80207d2:	0f9b      	lsrs	r3, r3, #30
 80207d4:	b2db      	uxtb	r3, r3
 80207d6:	001a      	movs	r2, r3
 80207d8:	4b19      	ldr	r3, [pc, #100]	; (8020840 <_itsdk_config_consolePublic+0x13c>)
 80207da:	0011      	movs	r1, r2
 80207dc:	0018      	movs	r0, r3
 80207de:	f7ff fad1 	bl	801fd84 <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.retries : %d\r\n",_c->sdk.lorawan.retries);
 80207e2:	68fb      	ldr	r3, [r7, #12]
 80207e4:	7adb      	ldrb	r3, [r3, #11]
 80207e6:	001a      	movs	r2, r3
 80207e8:	4b16      	ldr	r3, [pc, #88]	; (8020844 <_itsdk_config_consolePublic+0x140>)
 80207ea:	0011      	movs	r1, r2
 80207ec:	0018      	movs	r0, r3
 80207ee:	f7ff fac9 	bl	801fd84 <_itsdk_console_printf>
					   itsdk_config_app_printConfig(_c);
 80207f2:	68fb      	ldr	r3, [r7, #12]
 80207f4:	0018      	movs	r0, r3
 80207f6:	f7ff ff75 	bl	80206e4 <itsdk_config_app_printConfig>
				  _itsdk_console_printf("OK\r\n");
 80207fa:	4b13      	ldr	r3, [pc, #76]	; (8020848 <_itsdk_config_consolePublic+0x144>)
 80207fc:	0018      	movs	r0, r3
 80207fe:	f7ff fac1 	bl	801fd84 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8020802:	2300      	movs	r3, #0
 8020804:	e001      	b.n	802080a <_itsdk_config_consolePublic+0x106>
		  }
	  } //Sz == 1
 8020806:	46c0      	nop			; (mov r8, r8)
	  return ITSDK_CONSOLE_NOTFOUND;
 8020808:	2301      	movs	r3, #1
	}
 802080a:	0018      	movs	r0, r3
 802080c:	46bd      	mov	sp, r7
 802080e:	b004      	add	sp, #16
 8020810:	bd80      	pop	{r7, pc}
 8020812:	46c0      	nop			; (mov r8, r8)
 8020814:	08026f6c 	.word	0x08026f6c
 8020818:	08026f7c 	.word	0x08026f7c
 802081c:	08026f98 	.word	0x08026f98
 8020820:	200021ec 	.word	0x200021ec
 8020824:	200021d0 	.word	0x200021d0
 8020828:	08026fbc 	.word	0x08026fbc
 802082c:	08026fd4 	.word	0x08026fd4
 8020830:	08026ff0 	.word	0x08026ff0
 8020834:	0802700c 	.word	0x0802700c
 8020838:	08027024 	.word	0x08027024
 802083c:	08027040 	.word	0x08027040
 8020840:	0802705c 	.word	0x0802705c
 8020844:	08027078 	.word	0x08027078
 8020848:	08027090 	.word	0x08027090

0802084c <_itsdk_config_consolePriv>:

static itsdk_console_return_e _itsdk_config_consolePriv(char * buffer, uint8_t sz) {
 802084c:	b5b0      	push	{r4, r5, r7, lr}
 802084e:	b088      	sub	sp, #32
 8020850:	af00      	add	r7, sp, #0
 8020852:	6078      	str	r0, [r7, #4]
 8020854:	000a      	movs	r2, r1
 8020856:	1cfb      	adds	r3, r7, #3
 8020858:	701a      	strb	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	if ( sz == 1 ) {
 802085a:	1cfb      	adds	r3, r7, #3
 802085c:	781b      	ldrb	r3, [r3, #0]
 802085e:	2b01      	cmp	r3, #1
 8020860:	d000      	beq.n	8020864 <_itsdk_config_consolePriv+0x18>
 8020862:	e098      	b.n	8020996 <_itsdk_config_consolePriv+0x14a>
	  switch(buffer[0]){
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	781b      	ldrb	r3, [r3, #0]
 8020868:	2b46      	cmp	r3, #70	; 0x46
 802086a:	d03b      	beq.n	80208e4 <_itsdk_config_consolePriv+0x98>
 802086c:	dc02      	bgt.n	8020874 <_itsdk_config_consolePriv+0x28>
 802086e:	2b3f      	cmp	r3, #63	; 0x3f
 8020870:	d005      	beq.n	802087e <_itsdk_config_consolePriv+0x32>
			  _itsdk_console_printf("OK\r\n");
			 return ITSDK_CONSOLE_SUCCES;
			}
		#endif
		default:
			break;
 8020872:	e21c      	b.n	8020cae <_itsdk_config_consolePriv+0x462>
	  switch(buffer[0]){
 8020874:	2b53      	cmp	r3, #83	; 0x53
 8020876:	d02c      	beq.n	80208d2 <_itsdk_config_consolePriv+0x86>
 8020878:	2b6d      	cmp	r3, #109	; 0x6d
 802087a:	d040      	beq.n	80208fe <_itsdk_config_consolePriv+0xb2>
			break;
 802087c:	e217      	b.n	8020cae <_itsdk_config_consolePriv+0x462>
			  _itsdk_console_printf("S          : commit configuration\r\n");
 802087e:	4bd9      	ldr	r3, [pc, #868]	; (8020be4 <_itsdk_config_consolePriv+0x398>)
 8020880:	0018      	movs	r0, r3
 8020882:	f7ff fa7f 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("F          : restore factory default config\r\n");
 8020886:	4bd8      	ldr	r3, [pc, #864]	; (8020be8 <_itsdk_config_consolePriv+0x39c>)
 8020888:	0018      	movs	r0, r3
 802088a:	f7ff fa7b 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("m          : see eeprom configuration\r\n");
 802088e:	4bd7      	ldr	r3, [pc, #860]	; (8020bec <_itsdk_config_consolePriv+0x3a0>)
 8020890:	0018      	movs	r0, r3
 8020892:	f7ff fa77 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:N:x     : sdk.activeNetwork 1:SFX 2:LoRa\r\n");
 8020896:	4bd6      	ldr	r3, [pc, #856]	; (8020bf0 <_itsdk_config_consolePriv+0x3a4>)
 8020898:	0018      	movs	r0, r3
 802089a:	f7ff fa73 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:R:xxxx  : sdk.activeRegion __PLWAN_REGION_xx\r\n");
 802089e:	4bd5      	ldr	r3, [pc, #852]	; (8020bf4 <_itsdk_config_consolePriv+0x3a8>)
 80208a0:	0018      	movs	r0, r3
 80208a2:	f7ff fa6f 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:0:x     : lora.adrmode 1:OFF/2:ON\r\n");
 80208a6:	4bd4      	ldr	r3, [pc, #848]	; (8020bf8 <_itsdk_config_consolePriv+0x3ac>)
 80208a8:	0018      	movs	r0, r3
 80208aa:	f7ff fa6b 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:1:x     : lora.devEuiType 1:STATIC/2:GENERATED\r\n");
 80208ae:	4bd3      	ldr	r3, [pc, #844]	; (8020bfc <_itsdk_config_consolePriv+0x3b0>)
 80208b0:	0018      	movs	r0, r3
 80208b2:	f7ff fa67 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:2:x     : lora.joinMode 1:OTAA/2:ABP\r\n");
 80208b6:	4bd2      	ldr	r3, [pc, #840]	; (8020c00 <_itsdk_config_consolePriv+0x3b4>)
 80208b8:	0018      	movs	r0, r3
 80208ba:	f7ff fa63 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:3:x     : lora.networkType 1:PUBLIC/2:PRIVATE\r\n");
 80208be:	4bd1      	ldr	r3, [pc, #836]	; (8020c04 <_itsdk_config_consolePriv+0x3b8>)
 80208c0:	0018      	movs	r0, r3
 80208c2:	f7ff fa5f 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("SC:4:nn    : lora.retries 00..99\r\n");
 80208c6:	4bd0      	ldr	r3, [pc, #832]	; (8020c08 <_itsdk_config_consolePriv+0x3bc>)
 80208c8:	0018      	movs	r0, r3
 80208ca:	f7ff fa5b 	bl	801fd84 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 80208ce:	2300      	movs	r3, #0
 80208d0:	e1ee      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 80208d2:	2001      	movs	r0, #1
 80208d4:	f7ff fec6 	bl	8020664 <itsdk_config_commitConfiguration>
			_itsdk_console_printf("OK\r\n");
 80208d8:	4bcc      	ldr	r3, [pc, #816]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 80208da:	0018      	movs	r0, r3
 80208dc:	f7ff fa52 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80208e0:	2300      	movs	r3, #0
 80208e2:	e1e5      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 80208e4:	4bca      	ldr	r3, [pc, #808]	; (8020c10 <_itsdk_config_consolePriv+0x3c4>)
 80208e6:	2103      	movs	r1, #3
 80208e8:	0018      	movs	r0, r3
 80208ea:	f002 faad 	bl	8022e48 <itsdk_error_report>
			  itsdk_config_resetToFactory();
 80208ee:	f7ff fdb1 	bl	8020454 <itsdk_config_resetToFactory>
			  _itsdk_console_printf("OK\r\n");
 80208f2:	4bc6      	ldr	r3, [pc, #792]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 80208f4:	0018      	movs	r0, r3
 80208f6:	f7ff fa45 	bl	801fd84 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 80208fa:	2300      	movs	r3, #0
 80208fc:	e1d8      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			  uint32_t offset = 0;
 80208fe:	2300      	movs	r3, #0
 8020900:	617b      	str	r3, [r7, #20]
			  uint32_t size = 0;
 8020902:	2300      	movs	r3, #0
 8020904:	60fb      	str	r3, [r7, #12]
			  uint32_t totSize = 0;
 8020906:	2300      	movs	r3, #0
 8020908:	613b      	str	r3, [r7, #16]
			  	itsdk_secstore_getStoreSize(&size);
 802090a:	240c      	movs	r4, #12
 802090c:	193b      	adds	r3, r7, r4
 802090e:	0018      	movs	r0, r3
 8020910:	f000 fad7 	bl	8020ec2 <itsdk_secstore_getStoreSize>
			  	_itsdk_console_printf("SecureStore: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 8020914:	68fa      	ldr	r2, [r7, #12]
 8020916:	697b      	ldr	r3, [r7, #20]
 8020918:	18d2      	adds	r2, r2, r3
 802091a:	68fb      	ldr	r3, [r7, #12]
 802091c:	6979      	ldr	r1, [r7, #20]
 802091e:	48bd      	ldr	r0, [pc, #756]	; (8020c14 <_itsdk_config_consolePriv+0x3c8>)
 8020920:	f7ff fa30 	bl	801fd84 <_itsdk_console_printf>
			  	offset += size;
 8020924:	68fb      	ldr	r3, [r7, #12]
 8020926:	697a      	ldr	r2, [r7, #20]
 8020928:	18d3      	adds	r3, r2, r3
 802092a:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 802092c:	68fb      	ldr	r3, [r7, #12]
 802092e:	693a      	ldr	r2, [r7, #16]
 8020930:	18d3      	adds	r3, r2, r3
 8020932:	613b      	str	r3, [r7, #16]
			  	itsdk_error_getSize(&size);
 8020934:	193b      	adds	r3, r7, r4
 8020936:	0018      	movs	r0, r3
 8020938:	f002 fbab 	bl	8023092 <itsdk_error_getSize>
			  	_itsdk_console_printf("ErrorLog: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 802093c:	68fa      	ldr	r2, [r7, #12]
 802093e:	697b      	ldr	r3, [r7, #20]
 8020940:	18d2      	adds	r2, r2, r3
 8020942:	68fb      	ldr	r3, [r7, #12]
 8020944:	6979      	ldr	r1, [r7, #20]
 8020946:	48b4      	ldr	r0, [pc, #720]	; (8020c18 <_itsdk_config_consolePriv+0x3cc>)
 8020948:	f7ff fa1c 	bl	801fd84 <_itsdk_console_printf>
			  	offset += size;
 802094c:	68fb      	ldr	r3, [r7, #12]
 802094e:	697a      	ldr	r2, [r7, #20]
 8020950:	18d3      	adds	r3, r2, r3
 8020952:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8020954:	68fb      	ldr	r3, [r7, #12]
 8020956:	693a      	ldr	r2, [r7, #16]
 8020958:	18d3      	adds	r3, r2, r3
 802095a:	613b      	str	r3, [r7, #16]
			  eeprom_getConfigSize(&size);
 802095c:	193b      	adds	r3, r7, r4
 802095e:	0018      	movs	r0, r3
 8020960:	f7ff fcdd 	bl	802031e <eeprom_getConfigSize>
  		  	  totSize += size;
 8020964:	68fb      	ldr	r3, [r7, #12]
 8020966:	693a      	ldr	r2, [r7, #16]
 8020968:	18d3      	adds	r3, r2, r3
 802096a:	613b      	str	r3, [r7, #16]
			  _itsdk_console_printf("ApplicationConfig: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 802096c:	68fa      	ldr	r2, [r7, #12]
 802096e:	697b      	ldr	r3, [r7, #20]
 8020970:	18d2      	adds	r2, r2, r3
 8020972:	68fb      	ldr	r3, [r7, #12]
 8020974:	6979      	ldr	r1, [r7, #20]
 8020976:	48a9      	ldr	r0, [pc, #676]	; (8020c1c <_itsdk_config_consolePriv+0x3d0>)
 8020978:	f7ff fa04 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("UsedMemory: %dB on %dB\r\n",totSize,ITSDK_EPROM_SIZE);
 802097c:	23c0      	movs	r3, #192	; 0xc0
 802097e:	015a      	lsls	r2, r3, #5
 8020980:	6939      	ldr	r1, [r7, #16]
 8020982:	4ba7      	ldr	r3, [pc, #668]	; (8020c20 <_itsdk_config_consolePriv+0x3d4>)
 8020984:	0018      	movs	r0, r3
 8020986:	f7ff f9fd 	bl	801fd84 <_itsdk_console_printf>
			  _itsdk_console_printf("OK\r\n");
 802098a:	4ba0      	ldr	r3, [pc, #640]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 802098c:	0018      	movs	r0, r3
 802098e:	f7ff f9f9 	bl	801fd84 <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 8020992:	2300      	movs	r3, #0
 8020994:	e18c      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
	  }
	} else if ( sz == 4 ) {
 8020996:	1cfb      	adds	r3, r7, #3
 8020998:	781b      	ldrb	r3, [r3, #0]
 802099a:	2b04      	cmp	r3, #4
 802099c:	d116      	bne.n	80209cc <_itsdk_config_consolePriv+0x180>
		if ( buffer[0] == 's' && buffer[1] == 'c' && buffer[2] == ':' ) {
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	781b      	ldrb	r3, [r3, #0]
 80209a2:	2b73      	cmp	r3, #115	; 0x73
 80209a4:	d000      	beq.n	80209a8 <_itsdk_config_consolePriv+0x15c>
 80209a6:	e182      	b.n	8020cae <_itsdk_config_consolePriv+0x462>
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	3301      	adds	r3, #1
 80209ac:	781b      	ldrb	r3, [r3, #0]
 80209ae:	2b63      	cmp	r3, #99	; 0x63
 80209b0:	d000      	beq.n	80209b4 <_itsdk_config_consolePriv+0x168>
 80209b2:	e17c      	b.n	8020cae <_itsdk_config_consolePriv+0x462>
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	3302      	adds	r3, #2
 80209b8:	781b      	ldrb	r3, [r3, #0]
 80209ba:	2b3a      	cmp	r3, #58	; 0x3a
 80209bc:	d000      	beq.n	80209c0 <_itsdk_config_consolePriv+0x174>
 80209be:	e176      	b.n	8020cae <_itsdk_config_consolePriv+0x462>
						return ITSDK_CONSOLE_SUCCES;
					}
					break;
				#endif
				default:
					_itsdk_console_printf("KO\r\n");
 80209c0:	4b98      	ldr	r3, [pc, #608]	; (8020c24 <_itsdk_config_consolePriv+0x3d8>)
 80209c2:	0018      	movs	r0, r3
 80209c4:	f7ff f9de 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 80209c8:	2302      	movs	r3, #2
 80209ca:	e171      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			}
		}
	} else if ( sz >= 6 ) {
 80209cc:	1cfb      	adds	r3, r7, #3
 80209ce:	781b      	ldrb	r3, [r3, #0]
 80209d0:	2b05      	cmp	r3, #5
 80209d2:	d800      	bhi.n	80209d6 <_itsdk_config_consolePriv+0x18a>
 80209d4:	e168      	b.n	8020ca8 <_itsdk_config_consolePriv+0x45c>
		if ( buffer[0] == 'S' && buffer[1] == 'C' && buffer[2] == ':' && buffer[4] == ':' ) {
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	781b      	ldrb	r3, [r3, #0]
 80209da:	2b53      	cmp	r3, #83	; 0x53
 80209dc:	d000      	beq.n	80209e0 <_itsdk_config_consolePriv+0x194>
 80209de:	e163      	b.n	8020ca8 <_itsdk_config_consolePriv+0x45c>
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	3301      	adds	r3, #1
 80209e4:	781b      	ldrb	r3, [r3, #0]
 80209e6:	2b43      	cmp	r3, #67	; 0x43
 80209e8:	d000      	beq.n	80209ec <_itsdk_config_consolePriv+0x1a0>
 80209ea:	e15d      	b.n	8020ca8 <_itsdk_config_consolePriv+0x45c>
 80209ec:	687b      	ldr	r3, [r7, #4]
 80209ee:	3302      	adds	r3, #2
 80209f0:	781b      	ldrb	r3, [r3, #0]
 80209f2:	2b3a      	cmp	r3, #58	; 0x3a
 80209f4:	d000      	beq.n	80209f8 <_itsdk_config_consolePriv+0x1ac>
 80209f6:	e157      	b.n	8020ca8 <_itsdk_config_consolePriv+0x45c>
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	3304      	adds	r3, #4
 80209fc:	781b      	ldrb	r3, [r3, #0]
 80209fe:	2b3a      	cmp	r3, #58	; 0x3a
 8020a00:	d000      	beq.n	8020a04 <_itsdk_config_consolePriv+0x1b8>
 8020a02:	e151      	b.n	8020ca8 <_itsdk_config_consolePriv+0x45c>
			switch(buffer[3]) {
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	3303      	adds	r3, #3
 8020a08:	781b      	ldrb	r3, [r3, #0]
 8020a0a:	3b30      	subs	r3, #48	; 0x30
 8020a0c:	2b22      	cmp	r3, #34	; 0x22
 8020a0e:	d900      	bls.n	8020a12 <_itsdk_config_consolePriv+0x1c6>
 8020a10:	e14c      	b.n	8020cac <_itsdk_config_consolePriv+0x460>
 8020a12:	009a      	lsls	r2, r3, #2
 8020a14:	4b84      	ldr	r3, [pc, #528]	; (8020c28 <_itsdk_config_consolePriv+0x3dc>)
 8020a16:	18d3      	adds	r3, r2, r3
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	469f      	mov	pc, r3
			#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case 'N': {
				// sdk.activeNetwork
				switch ( buffer[5] ) {
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	3305      	adds	r3, #5
 8020a20:	781b      	ldrb	r3, [r3, #0]
 8020a22:	2b31      	cmp	r3, #49	; 0x31
 8020a24:	d007      	beq.n	8020a36 <_itsdk_config_consolePriv+0x1ea>
 8020a26:	2b32      	cmp	r3, #50	; 0x32
 8020a28:	d009      	beq.n	8020a3e <_itsdk_config_consolePriv+0x1f2>
 8020a2a:	2b30      	cmp	r3, #48	; 0x30
 8020a2c:	d10b      	bne.n	8020a46 <_itsdk_config_consolePriv+0x1fa>
					case '0':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_NONE;
 8020a2e:	4b7f      	ldr	r3, [pc, #508]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020a30:	2200      	movs	r2, #0
 8020a32:	80da      	strh	r2, [r3, #6]
					   break;
 8020a34:	e00d      	b.n	8020a52 <_itsdk_config_consolePriv+0x206>
					case '1':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_SIGFOX;
 8020a36:	4b7d      	ldr	r3, [pc, #500]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020a38:	2201      	movs	r2, #1
 8020a3a:	80da      	strh	r2, [r3, #6]
					   break;
 8020a3c:	e009      	b.n	8020a52 <_itsdk_config_consolePriv+0x206>
					case '2':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_LORAWAN;
 8020a3e:	4b7b      	ldr	r3, [pc, #492]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020a40:	2202      	movs	r2, #2
 8020a42:	80da      	strh	r2, [r3, #6]
					   break;
 8020a44:	e005      	b.n	8020a52 <_itsdk_config_consolePriv+0x206>
					default:
						_itsdk_console_printf("KO\r\n");
 8020a46:	4b77      	ldr	r3, [pc, #476]	; (8020c24 <_itsdk_config_consolePriv+0x3d8>)
 8020a48:	0018      	movs	r0, r3
 8020a4a:	f7ff f99b 	bl	801fd84 <_itsdk_console_printf>
						return ITSDK_CONSOLE_FAILED;
 8020a4e:	2302      	movs	r3, #2
 8020a50:	e12e      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				}
				_itsdk_console_printf("OK\r\n");
 8020a52:	4b6e      	ldr	r3, [pc, #440]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020a54:	0018      	movs	r0, r3
 8020a56:	f7ff f995 	bl	801fd84 <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8020a5a:	2300      	movs	r3, #0
 8020a5c:	e128      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			}
			case 'R': {
				if ( itdt_isHexString( &buffer[5],4,false) ) {
 8020a5e:	687b      	ldr	r3, [r7, #4]
 8020a60:	3305      	adds	r3, #5
 8020a62:	2200      	movs	r2, #0
 8020a64:	2104      	movs	r1, #4
 8020a66:	0018      	movs	r0, r3
 8020a68:	f002 ffaf 	bl	80239ca <itdt_isHexString>
 8020a6c:	1e03      	subs	r3, r0, #0
 8020a6e:	d01b      	beq.n	8020aa8 <_itsdk_config_consolePriv+0x25c>
					uint16_t v = itdt_convertHexChar4Int(&buffer[5]);
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	3305      	adds	r3, #5
 8020a74:	251e      	movs	r5, #30
 8020a76:	197c      	adds	r4, r7, r5
 8020a78:	0018      	movs	r0, r3
 8020a7a:	f002 fefa 	bl	8023872 <itdt_convertHexChar4Int>
 8020a7e:	0003      	movs	r3, r0
 8020a80:	8023      	strh	r3, [r4, #0]
					if ( itdt_count_bits_1(v) <= 1 ) {
 8020a82:	197b      	adds	r3, r7, r5
 8020a84:	881b      	ldrh	r3, [r3, #0]
 8020a86:	0018      	movs	r0, r3
 8020a88:	f002 ffeb 	bl	8023a62 <itdt_count_bits_1>
 8020a8c:	0003      	movs	r3, r0
 8020a8e:	2b01      	cmp	r3, #1
 8020a90:	d80a      	bhi.n	8020aa8 <_itsdk_config_consolePriv+0x25c>
						itsdk_config_shadow.sdk.activeRegion = v;
 8020a92:	4b66      	ldr	r3, [pc, #408]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020a94:	221e      	movs	r2, #30
 8020a96:	18ba      	adds	r2, r7, r2
 8020a98:	8812      	ldrh	r2, [r2, #0]
 8020a9a:	811a      	strh	r2, [r3, #8]
						_itsdk_console_printf("OK\r\n");
 8020a9c:	4b5b      	ldr	r3, [pc, #364]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020a9e:	0018      	movs	r0, r3
 8020aa0:	f7ff f970 	bl	801fd84 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8020aa4:	2300      	movs	r3, #0
 8020aa6:	e103      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8020aa8:	4b5e      	ldr	r3, [pc, #376]	; (8020c24 <_itsdk_config_consolePriv+0x3d8>)
 8020aaa:	0018      	movs	r0, r3
 8020aac:	f7ff f96a 	bl	801fd84 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020ab0:	2302      	movs	r3, #2
 8020ab2:	e0fd      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			#endif

 	 	 	#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case '0':
				// lora.adrmode
				if ( buffer[5] == '1' ) {
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	3305      	adds	r3, #5
 8020ab8:	781b      	ldrb	r3, [r3, #0]
 8020aba:	2b31      	cmp	r3, #49	; 0x31
 8020abc:	d10d      	bne.n	8020ada <_itsdk_config_consolePriv+0x28e>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 8020abe:	4b5b      	ldr	r3, [pc, #364]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020ac0:	7a9a      	ldrb	r2, [r3, #10]
 8020ac2:	213f      	movs	r1, #63	; 0x3f
 8020ac4:	400a      	ands	r2, r1
 8020ac6:	1c11      	adds	r1, r2, #0
 8020ac8:	2240      	movs	r2, #64	; 0x40
 8020aca:	430a      	orrs	r2, r1
 8020acc:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020ace:	4b4f      	ldr	r3, [pc, #316]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020ad0:	0018      	movs	r0, r3
 8020ad2:	f7ff f957 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020ad6:	2300      	movs	r3, #0
 8020ad8:	e0ea      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8020ada:	687b      	ldr	r3, [r7, #4]
 8020adc:	3305      	adds	r3, #5
 8020ade:	781b      	ldrb	r3, [r3, #0]
 8020ae0:	2b32      	cmp	r3, #50	; 0x32
 8020ae2:	d10e      	bne.n	8020b02 <_itsdk_config_consolePriv+0x2b6>
			    	itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 8020ae4:	4b51      	ldr	r3, [pc, #324]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020ae6:	7a9a      	ldrb	r2, [r3, #10]
 8020ae8:	213f      	movs	r1, #63	; 0x3f
 8020aea:	400a      	ands	r2, r1
 8020aec:	1c11      	adds	r1, r2, #0
 8020aee:	2280      	movs	r2, #128	; 0x80
 8020af0:	4252      	negs	r2, r2
 8020af2:	430a      	orrs	r2, r1
 8020af4:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020af6:	4b45      	ldr	r3, [pc, #276]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020af8:	0018      	movs	r0, r3
 8020afa:	f7ff f943 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020afe:	2300      	movs	r3, #0
 8020b00:	e0d6      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8020b02:	4b48      	ldr	r3, [pc, #288]	; (8020c24 <_itsdk_config_consolePriv+0x3d8>)
 8020b04:	0018      	movs	r0, r3
 8020b06:	f7ff f93d 	bl	801fd84 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020b0a:	2302      	movs	r3, #2
 8020b0c:	e0d0      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				break;
			case '1':
				// lora.devEuiType
				if ( buffer[5] == '1' ) {
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	3305      	adds	r3, #5
 8020b12:	781b      	ldrb	r3, [r3, #0]
 8020b14:	2b31      	cmp	r3, #49	; 0x31
 8020b16:	d10d      	bne.n	8020b34 <_itsdk_config_consolePriv+0x2e8>
					itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_STATIC;
 8020b18:	4b44      	ldr	r3, [pc, #272]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020b1a:	7a9a      	ldrb	r2, [r3, #10]
 8020b1c:	2130      	movs	r1, #48	; 0x30
 8020b1e:	438a      	bics	r2, r1
 8020b20:	1c11      	adds	r1, r2, #0
 8020b22:	2210      	movs	r2, #16
 8020b24:	430a      	orrs	r2, r1
 8020b26:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020b28:	4b38      	ldr	r3, [pc, #224]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020b2a:	0018      	movs	r0, r3
 8020b2c:	f7ff f92a 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020b30:	2300      	movs	r3, #0
 8020b32:	e0bd      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	3305      	adds	r3, #5
 8020b38:	781b      	ldrb	r3, [r3, #0]
 8020b3a:	2b32      	cmp	r3, #50	; 0x32
 8020b3c:	d10d      	bne.n	8020b5a <_itsdk_config_consolePriv+0x30e>
			    	itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_GENERATED;
 8020b3e:	4b3b      	ldr	r3, [pc, #236]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020b40:	7a9a      	ldrb	r2, [r3, #10]
 8020b42:	2130      	movs	r1, #48	; 0x30
 8020b44:	438a      	bics	r2, r1
 8020b46:	1c11      	adds	r1, r2, #0
 8020b48:	2220      	movs	r2, #32
 8020b4a:	430a      	orrs	r2, r1
 8020b4c:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020b4e:	4b2f      	ldr	r3, [pc, #188]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020b50:	0018      	movs	r0, r3
 8020b52:	f7ff f917 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020b56:	2300      	movs	r3, #0
 8020b58:	e0aa      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8020b5a:	4b32      	ldr	r3, [pc, #200]	; (8020c24 <_itsdk_config_consolePriv+0x3d8>)
 8020b5c:	0018      	movs	r0, r3
 8020b5e:	f7ff f911 	bl	801fd84 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020b62:	2302      	movs	r3, #2
 8020b64:	e0a4      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				break;
			case '2':
				// lora.joinMode
				if ( buffer[5] == '1' ) {
 8020b66:	687b      	ldr	r3, [r7, #4]
 8020b68:	3305      	adds	r3, #5
 8020b6a:	781b      	ldrb	r3, [r3, #0]
 8020b6c:	2b31      	cmp	r3, #49	; 0x31
 8020b6e:	d10d      	bne.n	8020b8c <_itsdk_config_consolePriv+0x340>
					itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_OTAA;
 8020b70:	4b2e      	ldr	r3, [pc, #184]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020b72:	7a9a      	ldrb	r2, [r3, #10]
 8020b74:	2103      	movs	r1, #3
 8020b76:	438a      	bics	r2, r1
 8020b78:	1c11      	adds	r1, r2, #0
 8020b7a:	2201      	movs	r2, #1
 8020b7c:	430a      	orrs	r2, r1
 8020b7e:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020b80:	4b22      	ldr	r3, [pc, #136]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020b82:	0018      	movs	r0, r3
 8020b84:	f7ff f8fe 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020b88:	2300      	movs	r3, #0
 8020b8a:	e091      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				}
			    if ( buffer[5] == '2' ) {
 8020b8c:	687b      	ldr	r3, [r7, #4]
 8020b8e:	3305      	adds	r3, #5
 8020b90:	781b      	ldrb	r3, [r3, #0]
 8020b92:	2b32      	cmp	r3, #50	; 0x32
 8020b94:	d10d      	bne.n	8020bb2 <_itsdk_config_consolePriv+0x366>
			    	itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_ABP;
 8020b96:	4b25      	ldr	r3, [pc, #148]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020b98:	7a9a      	ldrb	r2, [r3, #10]
 8020b9a:	2103      	movs	r1, #3
 8020b9c:	438a      	bics	r2, r1
 8020b9e:	1c11      	adds	r1, r2, #0
 8020ba0:	2202      	movs	r2, #2
 8020ba2:	430a      	orrs	r2, r1
 8020ba4:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020ba6:	4b19      	ldr	r3, [pc, #100]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020ba8:	0018      	movs	r0, r3
 8020baa:	f7ff f8eb 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020bae:	2300      	movs	r3, #0
 8020bb0:	e07e      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8020bb2:	4b1c      	ldr	r3, [pc, #112]	; (8020c24 <_itsdk_config_consolePriv+0x3d8>)
 8020bb4:	0018      	movs	r0, r3
 8020bb6:	f7ff f8e5 	bl	801fd84 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020bba:	2302      	movs	r3, #2
 8020bbc:	e078      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				break;
			case '3':
				// lora.networkType
				if ( buffer[5] == '1' ) {
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	3305      	adds	r3, #5
 8020bc2:	781b      	ldrb	r3, [r3, #0]
 8020bc4:	2b31      	cmp	r3, #49	; 0x31
 8020bc6:	d133      	bne.n	8020c30 <_itsdk_config_consolePriv+0x3e4>
					itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PUBLIC;
 8020bc8:	4b18      	ldr	r3, [pc, #96]	; (8020c2c <_itsdk_config_consolePriv+0x3e0>)
 8020bca:	7a9a      	ldrb	r2, [r3, #10]
 8020bcc:	210c      	movs	r1, #12
 8020bce:	438a      	bics	r2, r1
 8020bd0:	1c11      	adds	r1, r2, #0
 8020bd2:	2204      	movs	r2, #4
 8020bd4:	430a      	orrs	r2, r1
 8020bd6:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020bd8:	4b0c      	ldr	r3, [pc, #48]	; (8020c0c <_itsdk_config_consolePriv+0x3c0>)
 8020bda:	0018      	movs	r0, r3
 8020bdc:	f7ff f8d2 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020be0:	2300      	movs	r3, #0
 8020be2:	e065      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
 8020be4:	08027098 	.word	0x08027098
 8020be8:	080270bc 	.word	0x080270bc
 8020bec:	080270ec 	.word	0x080270ec
 8020bf0:	08027114 	.word	0x08027114
 8020bf4:	08027144 	.word	0x08027144
 8020bf8:	08027178 	.word	0x08027178
 8020bfc:	080271a0 	.word	0x080271a0
 8020c00:	080271d4 	.word	0x080271d4
 8020c04:	08027200 	.word	0x08027200
 8020c08:	08027234 	.word	0x08027234
 8020c0c:	08027090 	.word	0x08027090
 8020c10:	50000071 	.word	0x50000071
 8020c14:	08027258 	.word	0x08027258
 8020c18:	0802727c 	.word	0x0802727c
 8020c1c:	080272a0 	.word	0x080272a0
 8020c20:	080272cc 	.word	0x080272cc
 8020c24:	080272e8 	.word	0x080272e8
 8020c28:	08028bd0 	.word	0x08028bd0
 8020c2c:	200021d0 	.word	0x200021d0
				}
			    if ( buffer[5] == '2' ) {
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	3305      	adds	r3, #5
 8020c34:	781b      	ldrb	r3, [r3, #0]
 8020c36:	2b32      	cmp	r3, #50	; 0x32
 8020c38:	d10d      	bne.n	8020c56 <_itsdk_config_consolePriv+0x40a>
			    	itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PRIVATE;
 8020c3a:	4b1f      	ldr	r3, [pc, #124]	; (8020cb8 <_itsdk_config_consolePriv+0x46c>)
 8020c3c:	7a9a      	ldrb	r2, [r3, #10]
 8020c3e:	210c      	movs	r1, #12
 8020c40:	438a      	bics	r2, r1
 8020c42:	1c11      	adds	r1, r2, #0
 8020c44:	2208      	movs	r2, #8
 8020c46:	430a      	orrs	r2, r1
 8020c48:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8020c4a:	4b1c      	ldr	r3, [pc, #112]	; (8020cbc <_itsdk_config_consolePriv+0x470>)
 8020c4c:	0018      	movs	r0, r3
 8020c4e:	f7ff f899 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8020c52:	2300      	movs	r3, #0
 8020c54:	e02c      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
			    }
				_itsdk_console_printf("KO\r\n");
 8020c56:	4b1a      	ldr	r3, [pc, #104]	; (8020cc0 <_itsdk_config_consolePriv+0x474>)
 8020c58:	0018      	movs	r0, r3
 8020c5a:	f7ff f893 	bl	801fd84 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020c5e:	2302      	movs	r3, #2
 8020c60:	e026      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				break;
			case '4':
				// lora.retries
				if ( sz >= 7 ) {
 8020c62:	1cfb      	adds	r3, r7, #3
 8020c64:	781b      	ldrb	r3, [r3, #0]
 8020c66:	2b06      	cmp	r3, #6
 8020c68:	d918      	bls.n	8020c9c <_itsdk_config_consolePriv+0x450>
					int v = itdt_convertDecCharNInt(&buffer[5],2);
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	3305      	adds	r3, #5
 8020c6e:	2102      	movs	r1, #2
 8020c70:	0018      	movs	r0, r3
 8020c72:	f002 fe23 	bl	80238bc <itdt_convertDecCharNInt>
 8020c76:	0003      	movs	r3, r0
 8020c78:	61bb      	str	r3, [r7, #24]
					if ( v != ITSDK_INVALID_VALUE_32B && v <= 5 ) {
 8020c7a:	69bb      	ldr	r3, [r7, #24]
 8020c7c:	4a11      	ldr	r2, [pc, #68]	; (8020cc4 <_itsdk_config_consolePriv+0x478>)
 8020c7e:	4293      	cmp	r3, r2
 8020c80:	d00c      	beq.n	8020c9c <_itsdk_config_consolePriv+0x450>
 8020c82:	69bb      	ldr	r3, [r7, #24]
 8020c84:	2b05      	cmp	r3, #5
 8020c86:	dc09      	bgt.n	8020c9c <_itsdk_config_consolePriv+0x450>
						itsdk_config_shadow.sdk.lorawan.retries = v;
 8020c88:	69bb      	ldr	r3, [r7, #24]
 8020c8a:	b2da      	uxtb	r2, r3
 8020c8c:	4b0a      	ldr	r3, [pc, #40]	; (8020cb8 <_itsdk_config_consolePriv+0x46c>)
 8020c8e:	72da      	strb	r2, [r3, #11]
						_itsdk_console_printf("OK\r\n");
 8020c90:	4b0a      	ldr	r3, [pc, #40]	; (8020cbc <_itsdk_config_consolePriv+0x470>)
 8020c92:	0018      	movs	r0, r3
 8020c94:	f7ff f876 	bl	801fd84 <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8020c98:	2300      	movs	r3, #0
 8020c9a:	e009      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8020c9c:	4b08      	ldr	r3, [pc, #32]	; (8020cc0 <_itsdk_config_consolePriv+0x474>)
 8020c9e:	0018      	movs	r0, r3
 8020ca0:	f7ff f870 	bl	801fd84 <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8020ca4:	2302      	movs	r3, #2
 8020ca6:	e003      	b.n	8020cb0 <_itsdk_config_consolePriv+0x464>
				break;
			#endif	// ITSDK_WITH_SIGFOX_LIB
			default:
				break;
			}
		}
 8020ca8:	46c0      	nop			; (mov r8, r8)
 8020caa:	e000      	b.n	8020cae <_itsdk_config_consolePriv+0x462>
				break;
 8020cac:	46c0      	nop			; (mov r8, r8)
	}
#endif
  return ITSDK_CONSOLE_NOTFOUND;
 8020cae:	2301      	movs	r3, #1
}
 8020cb0:	0018      	movs	r0, r3
 8020cb2:	46bd      	mov	sp, r7
 8020cb4:	b008      	add	sp, #32
 8020cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8020cb8:	200021d0 	.word	0x200021d0
 8020cbc:	08027090 	.word	0x08027090
 8020cc0:	080272e8 	.word	0x080272e8
 8020cc4:	0fffffff 	.word	0x0fffffff

08020cc8 <itsdk_state_init>:
#endif
#include <it_sdk/lorawan/lorawan.h>

itsdk_state_t itsdk_state;

void itsdk_state_init() {
 8020cc8:	b5b0      	push	{r4, r5, r7, lr}
 8020cca:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 8020ccc:	4a09      	ldr	r2, [pc, #36]	; (8020cf4 <itsdk_state_init+0x2c>)
 8020cce:	2300      	movs	r3, #0
 8020cd0:	2400      	movs	r4, #0
 8020cd2:	6093      	str	r3, [r2, #8]
 8020cd4:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 8020cd6:	f004 f973 	bl	8024fc0 <itsdk_getResetCause>
 8020cda:	0003      	movs	r3, r0
 8020cdc:	001a      	movs	r2, r3
 8020cde:	4b05      	ldr	r3, [pc, #20]	; (8020cf4 <itsdk_state_init+0x2c>)
 8020ce0:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 8020ce2:	4b05      	ldr	r3, [pc, #20]	; (8020cf8 <itsdk_state_init+0x30>)
 8020ce4:	88db      	ldrh	r3, [r3, #6]
 8020ce6:	b2da      	uxtb	r2, r3
 8020ce8:	4b02      	ldr	r3, [pc, #8]	; (8020cf4 <itsdk_state_init+0x2c>)
 8020cea:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 8020cec:	46c0      	nop			; (mov r8, r8)
}
 8020cee:	46bd      	mov	sp, r7
 8020cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8020cf2:	46c0      	nop			; (mov r8, r8)
 8020cf4:	20002208 	.word	0x20002208
 8020cf8:	200021ec 	.word	0x200021ec

08020cfc <itsdk_print_state>:

#if ITSDK_WITH_CONSOLE == __ENABLE
void itsdk_print_state() {
 8020cfc:	b5b0      	push	{r4, r5, r7, lr}
 8020cfe:	af00      	add	r7, sp, #0
	_itsdk_console_printf("state.lastWakeUpTimeUs %d ms\r\n",(uint32_t)(itsdk_state.lastWakeUpTimeUs/1000));
 8020d00:	4b19      	ldr	r3, [pc, #100]	; (8020d68 <itsdk_print_state+0x6c>)
 8020d02:	6898      	ldr	r0, [r3, #8]
 8020d04:	68d9      	ldr	r1, [r3, #12]
 8020d06:	22fa      	movs	r2, #250	; 0xfa
 8020d08:	0092      	lsls	r2, r2, #2
 8020d0a:	2300      	movs	r3, #0
 8020d0c:	f7df fc16 	bl	800053c <__aeabi_uldivmod>
 8020d10:	0003      	movs	r3, r0
 8020d12:	000c      	movs	r4, r1
 8020d14:	001a      	movs	r2, r3
 8020d16:	4b15      	ldr	r3, [pc, #84]	; (8020d6c <itsdk_print_state+0x70>)
 8020d18:	0011      	movs	r1, r2
 8020d1a:	0018      	movs	r0, r3
 8020d1c:	f7ff f832 	bl	801fd84 <_itsdk_console_printf>
	_itsdk_console_printf("state.lastResetCause 0x%X \r\n",(uint32_t)(itsdk_state.lastResetCause));
 8020d20:	4b11      	ldr	r3, [pc, #68]	; (8020d68 <itsdk_print_state+0x6c>)
 8020d22:	781b      	ldrb	r3, [r3, #0]
 8020d24:	001a      	movs	r2, r3
 8020d26:	4b12      	ldr	r3, [pc, #72]	; (8020d70 <itsdk_print_state+0x74>)
 8020d28:	0011      	movs	r1, r2
 8020d2a:	0018      	movs	r0, r3
 8020d2c:	f7ff f82a 	bl	801fd84 <_itsdk_console_printf>
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	_itsdk_console_printf("state.activeNetwork : %d\r\n",itsdk_state.activeNetwork);
 8020d30:	4b0d      	ldr	r3, [pc, #52]	; (8020d68 <itsdk_print_state+0x6c>)
 8020d32:	785b      	ldrb	r3, [r3, #1]
 8020d34:	001a      	movs	r2, r3
 8020d36:	4b0f      	ldr	r3, [pc, #60]	; (8020d74 <itsdk_print_state+0x78>)
 8020d38:	0011      	movs	r1, r2
 8020d3a:	0018      	movs	r0, r3
 8020d3c:	f7ff f822 	bl	801fd84 <_itsdk_console_printf>
	#if ITSDK_WITH_SIGFOX_LIB == __ENABLE
	#endif
   #endif
#endif
#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
	if ( itsdk_state.activeNetwork == __ACTIV_NETWORK_LORAWAN ) {
 8020d40:	4b09      	ldr	r3, [pc, #36]	; (8020d68 <itsdk_print_state+0x6c>)
 8020d42:	785b      	ldrb	r3, [r3, #1]
 8020d44:	2b02      	cmp	r3, #2
 8020d46:	d10b      	bne.n	8020d60 <itsdk_print_state+0x64>
  	  _itsdk_console_printf("state.lorawan.joined: %c\r\n",(itsdk_lorawan_hasjoined()?'Y':'N'));
 8020d48:	f002 fbdc 	bl	8023504 <itsdk_lorawan_hasjoined>
 8020d4c:	1e03      	subs	r3, r0, #0
 8020d4e:	d001      	beq.n	8020d54 <itsdk_print_state+0x58>
 8020d50:	2359      	movs	r3, #89	; 0x59
 8020d52:	e000      	b.n	8020d56 <itsdk_print_state+0x5a>
 8020d54:	234e      	movs	r3, #78	; 0x4e
 8020d56:	4a08      	ldr	r2, [pc, #32]	; (8020d78 <itsdk_print_state+0x7c>)
 8020d58:	0019      	movs	r1, r3
 8020d5a:	0010      	movs	r0, r2
 8020d5c:	f7ff f812 	bl	801fd84 <_itsdk_console_printf>
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

}
 8020d60:	46c0      	nop			; (mov r8, r8)
 8020d62:	46bd      	mov	sp, r7
 8020d64:	bdb0      	pop	{r4, r5, r7, pc}
 8020d66:	46c0      	nop			; (mov r8, r8)
 8020d68:	20002208 	.word	0x20002208
 8020d6c:	080272f0 	.word	0x080272f0
 8020d70:	08027310 	.word	0x08027310
 8020d74:	08027330 	.word	0x08027330
 8020d78:	0802734c 	.word	0x0802734c

08020d7c <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 8020d7c:	b580      	push	{r7, lr}
 8020d7e:	b086      	sub	sp, #24
 8020d80:	af00      	add	r7, sp, #0
 8020d82:	60f8      	str	r0, [r7, #12]
 8020d84:	60b9      	str	r1, [r7, #8]
 8020d86:	1dfb      	adds	r3, r7, #7
 8020d88:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 8020d8a:	2300      	movs	r3, #0
 8020d8c:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 8020d8e:	1dfb      	adds	r3, r7, #7
 8020d90:	781b      	ldrb	r3, [r3, #0]
 8020d92:	2b13      	cmp	r3, #19
 8020d94:	d83d      	bhi.n	8020e12 <_itsdk_secstore_getOffset+0x96>
 8020d96:	009a      	lsls	r2, r3, #2
 8020d98:	4b27      	ldr	r3, [pc, #156]	; (8020e38 <_itsdk_secstore_getOffset+0xbc>)
 8020d9a:	18d3      	adds	r3, r2, r3
 8020d9c:	681b      	ldr	r3, [r3, #0]
 8020d9e:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 8020da0:	693b      	ldr	r3, [r7, #16]
 8020da2:	617b      	str	r3, [r7, #20]
		break;
 8020da4:	e037      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 8020da6:	2301      	movs	r3, #1
 8020da8:	e041      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 8020daa:	693b      	ldr	r3, [r7, #16]
 8020dac:	3310      	adds	r3, #16
 8020dae:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020db0:	e031      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 8020db2:	693b      	ldr	r3, [r7, #16]
 8020db4:	3320      	adds	r3, #32
 8020db6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020db8:	e02d      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 8020dba:	693b      	ldr	r3, [r7, #16]
 8020dbc:	3330      	adds	r3, #48	; 0x30
 8020dbe:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020dc0:	e029      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 8020dc2:	693b      	ldr	r3, [r7, #16]
 8020dc4:	3340      	adds	r3, #64	; 0x40
 8020dc6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020dc8:	e025      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 8020dca:	693b      	ldr	r3, [r7, #16]
 8020dcc:	3350      	adds	r3, #80	; 0x50
 8020dce:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020dd0:	e021      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 8020dd2:	693b      	ldr	r3, [r7, #16]
 8020dd4:	3310      	adds	r3, #16
 8020dd6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020dd8:	e01d      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 8020dda:	693b      	ldr	r3, [r7, #16]
 8020ddc:	3320      	adds	r3, #32
 8020dde:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020de0:	e019      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 8020de2:	693b      	ldr	r3, [r7, #16]
 8020de4:	3330      	adds	r3, #48	; 0x30
 8020de6:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8020de8:	e015      	b.n	8020e16 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dea:	2301      	movs	r3, #1
 8020dec:	e01f      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dee:	2301      	movs	r3, #1
 8020df0:	e01d      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020df2:	2301      	movs	r3, #1
 8020df4:	e01b      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020df6:	2301      	movs	r3, #1
 8020df8:	e019      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dfa:	2301      	movs	r3, #1
 8020dfc:	e017      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020dfe:	2301      	movs	r3, #1
 8020e00:	e015      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020e02:	2301      	movs	r3, #1
 8020e04:	e013      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020e06:	2301      	movs	r3, #1
 8020e08:	e011      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020e0a:	2301      	movs	r3, #1
 8020e0c:	e00f      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8020e0e:	2301      	movs	r3, #1
 8020e10:	e00d      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 8020e12:	2301      	movs	r3, #1
 8020e14:	e00b      	b.n	8020e2e <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 8020e16:	697b      	ldr	r3, [r7, #20]
 8020e18:	091b      	lsrs	r3, r3, #4
 8020e1a:	b2da      	uxtb	r2, r3
 8020e1c:	68bb      	ldr	r3, [r7, #8]
 8020e1e:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 8020e20:	697b      	ldr	r3, [r7, #20]
 8020e22:	3310      	adds	r3, #16
 8020e24:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 8020e26:	68fb      	ldr	r3, [r7, #12]
 8020e28:	697a      	ldr	r2, [r7, #20]
 8020e2a:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8020e2c:	2300      	movs	r3, #0
}
 8020e2e:	0018      	movs	r0, r3
 8020e30:	46bd      	mov	sp, r7
 8020e32:	b006      	add	sp, #24
 8020e34:	bd80      	pop	{r7, pc}
 8020e36:	46c0      	nop			; (mov r8, r8)
 8020e38:	08028c5c 	.word	0x08028c5c

08020e3c <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 8020e3c:	b580      	push	{r7, lr}
 8020e3e:	b084      	sub	sp, #16
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 8020e44:	210f      	movs	r1, #15
 8020e46:	187b      	adds	r3, r7, r1
 8020e48:	2201      	movs	r2, #1
 8020e4a:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 8020e4c:	187b      	adds	r3, r7, r1
 8020e4e:	187a      	adds	r2, r7, r1
 8020e50:	7812      	ldrb	r2, [r2, #0]
 8020e52:	3205      	adds	r2, #5
 8020e54:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 8020e56:	187b      	adds	r3, r7, r1
 8020e58:	187a      	adds	r2, r7, r1
 8020e5a:	7812      	ldrb	r2, [r2, #0]
 8020e5c:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	187a      	adds	r2, r7, r1
 8020e62:	7812      	ldrb	r2, [r2, #0]
 8020e64:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 8020e66:	2300      	movs	r3, #0
}
 8020e68:	0018      	movs	r0, r3
 8020e6a:	46bd      	mov	sp, r7
 8020e6c:	b004      	add	sp, #16
 8020e6e:	bd80      	pop	{r7, pc}

08020e70 <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 8020e70:	b590      	push	{r4, r7, lr}
 8020e72:	b085      	sub	sp, #20
 8020e74:	af00      	add	r7, sp, #0
 8020e76:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 8020e78:	687a      	ldr	r2, [r7, #4]
 8020e7a:	2310      	movs	r3, #16
 8020e7c:	2100      	movs	r1, #0
 8020e7e:	2000      	movs	r0, #0
 8020e80:	f004 fb10 	bl	80254a4 <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	781b      	ldrb	r3, [r3, #0]
 8020e88:	220f      	movs	r2, #15
 8020e8a:	4013      	ands	r3, r2
 8020e8c:	b2db      	uxtb	r3, r3
 8020e8e:	2b0c      	cmp	r3, #12
 8020e90:	d001      	beq.n	8020e96 <_itsdk_secstore_controlHeader+0x26>
 8020e92:	2302      	movs	r3, #2
 8020e94:	e011      	b.n	8020eba <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 8020e96:	240f      	movs	r4, #15
 8020e98:	193b      	adds	r3, r7, r4
 8020e9a:	0018      	movs	r0, r3
 8020e9c:	f7ff ffce 	bl	8020e3c <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 8020ea0:	687b      	ldr	r3, [r7, #4]
 8020ea2:	781b      	ldrb	r3, [r3, #0]
 8020ea4:	061b      	lsls	r3, r3, #24
 8020ea6:	0f1b      	lsrs	r3, r3, #28
 8020ea8:	b2db      	uxtb	r3, r3
 8020eaa:	001a      	movs	r2, r3
 8020eac:	193b      	adds	r3, r7, r4
 8020eae:	781b      	ldrb	r3, [r3, #0]
 8020eb0:	429a      	cmp	r2, r3
 8020eb2:	d001      	beq.n	8020eb8 <_itsdk_secstore_controlHeader+0x48>
 8020eb4:	2302      	movs	r3, #2
 8020eb6:	e000      	b.n	8020eba <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 8020eb8:	2300      	movs	r3, #0
}
 8020eba:	0018      	movs	r0, r3
 8020ebc:	46bd      	mov	sp, r7
 8020ebe:	b005      	add	sp, #20
 8020ec0:	bd90      	pop	{r4, r7, pc}

08020ec2 <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 8020ec2:	b580      	push	{r7, lr}
 8020ec4:	b082      	sub	sp, #8
 8020ec6:	af00      	add	r7, sp, #0
 8020ec8:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 8020eca:	687b      	ldr	r3, [r7, #4]
 8020ecc:	2270      	movs	r2, #112	; 0x70
 8020ece:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8020ed0:	2300      	movs	r3, #0
}
 8020ed2:	0018      	movs	r0, r3
 8020ed4:	46bd      	mov	sp, r7
 8020ed6:	b002      	add	sp, #8
 8020ed8:	bd80      	pop	{r7, pc}

08020eda <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 8020eda:	b580      	push	{r7, lr}
 8020edc:	b084      	sub	sp, #16
 8020ede:	af00      	add	r7, sp, #0
 8020ee0:	6078      	str	r0, [r7, #4]
 8020ee2:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8020ee4:	2308      	movs	r3, #8
 8020ee6:	18fb      	adds	r3, r7, r3
 8020ee8:	2104      	movs	r1, #4
 8020eea:	0018      	movs	r0, r3
 8020eec:	f004 f8fa 	bl	80250e4 <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 8020ef0:	2300      	movs	r3, #0
 8020ef2:	60fb      	str	r3, [r7, #12]
 8020ef4:	e081      	b.n	8020ffa <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 8020ef6:	68fb      	ldr	r3, [r7, #12]
 8020ef8:	2b01      	cmp	r3, #1
 8020efa:	dc21      	bgt.n	8020f40 <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8020efc:	68fb      	ldr	r3, [r7, #12]
 8020efe:	683a      	ldr	r2, [r7, #0]
 8020f00:	18d3      	adds	r3, r2, r3
 8020f02:	2208      	movs	r2, #8
 8020f04:	18b9      	adds	r1, r7, r2
 8020f06:	68fa      	ldr	r2, [r7, #12]
 8020f08:	188a      	adds	r2, r1, r2
 8020f0a:	7812      	ldrb	r2, [r2, #0]
 8020f0c:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 8020f0e:	68fb      	ldr	r3, [r7, #12]
 8020f10:	683a      	ldr	r2, [r7, #0]
 8020f12:	18d3      	adds	r3, r2, r3
 8020f14:	7819      	ldrb	r1, [r3, #0]
 8020f16:	68fb      	ldr	r3, [r7, #12]
 8020f18:	687a      	ldr	r2, [r7, #4]
 8020f1a:	18d3      	adds	r3, r2, r3
 8020f1c:	781a      	ldrb	r2, [r3, #0]
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	6838      	ldr	r0, [r7, #0]
 8020f22:	18c3      	adds	r3, r0, r3
 8020f24:	404a      	eors	r2, r1
 8020f26:	b2d2      	uxtb	r2, r2
 8020f28:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 8020f2a:	68fb      	ldr	r3, [r7, #12]
 8020f2c:	683a      	ldr	r2, [r7, #0]
 8020f2e:	18d3      	adds	r3, r2, r3
 8020f30:	781a      	ldrb	r2, [r3, #0]
 8020f32:	68fb      	ldr	r3, [r7, #12]
 8020f34:	6839      	ldr	r1, [r7, #0]
 8020f36:	18cb      	adds	r3, r1, r3
 8020f38:	3a33      	subs	r2, #51	; 0x33
 8020f3a:	b2d2      	uxtb	r2, r2
 8020f3c:	701a      	strb	r2, [r3, #0]
 8020f3e:	e059      	b.n	8020ff4 <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 8020f40:	68fb      	ldr	r3, [r7, #12]
 8020f42:	2b0d      	cmp	r3, #13
 8020f44:	dc33      	bgt.n	8020fae <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	3b02      	subs	r3, #2
 8020f4a:	687a      	ldr	r2, [r7, #4]
 8020f4c:	18d2      	adds	r2, r2, r3
 8020f4e:	68fb      	ldr	r3, [r7, #12]
 8020f50:	6839      	ldr	r1, [r7, #0]
 8020f52:	18cb      	adds	r3, r1, r3
 8020f54:	7812      	ldrb	r2, [r2, #0]
 8020f56:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 8020f58:	68fb      	ldr	r3, [r7, #12]
 8020f5a:	683a      	ldr	r2, [r7, #0]
 8020f5c:	18d3      	adds	r3, r2, r3
 8020f5e:	7819      	ldrb	r1, [r3, #0]
 8020f60:	68fb      	ldr	r3, [r7, #12]
 8020f62:	2203      	movs	r2, #3
 8020f64:	4013      	ands	r3, r2
 8020f66:	2208      	movs	r2, #8
 8020f68:	18ba      	adds	r2, r7, r2
 8020f6a:	5cd2      	ldrb	r2, [r2, r3]
 8020f6c:	68fb      	ldr	r3, [r7, #12]
 8020f6e:	6838      	ldr	r0, [r7, #0]
 8020f70:	18c3      	adds	r3, r0, r3
 8020f72:	404a      	eors	r2, r1
 8020f74:	b2d2      	uxtb	r2, r2
 8020f76:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 8020f78:	68fb      	ldr	r3, [r7, #12]
 8020f7a:	683a      	ldr	r2, [r7, #0]
 8020f7c:	18d3      	adds	r3, r2, r3
 8020f7e:	781a      	ldrb	r2, [r3, #0]
 8020f80:	68fb      	ldr	r3, [r7, #12]
 8020f82:	6839      	ldr	r1, [r7, #0]
 8020f84:	18cb      	adds	r3, r1, r3
 8020f86:	212c      	movs	r1, #44	; 0x2c
 8020f88:	404a      	eors	r2, r1
 8020f8a:	b2d2      	uxtb	r2, r2
 8020f8c:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 8020f8e:	68fb      	ldr	r3, [r7, #12]
 8020f90:	683a      	ldr	r2, [r7, #0]
 8020f92:	18d3      	adds	r3, r2, r3
 8020f94:	7819      	ldrb	r1, [r3, #0]
 8020f96:	68fb      	ldr	r3, [r7, #12]
 8020f98:	3b01      	subs	r3, #1
 8020f9a:	683a      	ldr	r2, [r7, #0]
 8020f9c:	18d3      	adds	r3, r2, r3
 8020f9e:	781a      	ldrb	r2, [r3, #0]
 8020fa0:	68fb      	ldr	r3, [r7, #12]
 8020fa2:	6838      	ldr	r0, [r7, #0]
 8020fa4:	18c3      	adds	r3, r0, r3
 8020fa6:	404a      	eors	r2, r1
 8020fa8:	b2d2      	uxtb	r2, r2
 8020faa:	701a      	strb	r2, [r3, #0]
 8020fac:	e022      	b.n	8020ff4 <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 8020fae:	68fb      	ldr	r3, [r7, #12]
 8020fb0:	3b0c      	subs	r3, #12
 8020fb2:	001a      	movs	r2, r3
 8020fb4:	68fb      	ldr	r3, [r7, #12]
 8020fb6:	6839      	ldr	r1, [r7, #0]
 8020fb8:	18cb      	adds	r3, r1, r3
 8020fba:	2108      	movs	r1, #8
 8020fbc:	1879      	adds	r1, r7, r1
 8020fbe:	5c8a      	ldrb	r2, [r1, r2]
 8020fc0:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 8020fc2:	68fb      	ldr	r3, [r7, #12]
 8020fc4:	683a      	ldr	r2, [r7, #0]
 8020fc6:	18d3      	adds	r3, r2, r3
 8020fc8:	7819      	ldrb	r1, [r3, #0]
 8020fca:	68fb      	ldr	r3, [r7, #12]
 8020fcc:	3b05      	subs	r3, #5
 8020fce:	687a      	ldr	r2, [r7, #4]
 8020fd0:	18d3      	adds	r3, r2, r3
 8020fd2:	781a      	ldrb	r2, [r3, #0]
 8020fd4:	68fb      	ldr	r3, [r7, #12]
 8020fd6:	6838      	ldr	r0, [r7, #0]
 8020fd8:	18c3      	adds	r3, r0, r3
 8020fda:	404a      	eors	r2, r1
 8020fdc:	b2d2      	uxtb	r2, r2
 8020fde:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 8020fe0:	68fb      	ldr	r3, [r7, #12]
 8020fe2:	683a      	ldr	r2, [r7, #0]
 8020fe4:	18d3      	adds	r3, r2, r3
 8020fe6:	781a      	ldrb	r2, [r3, #0]
 8020fe8:	68fb      	ldr	r3, [r7, #12]
 8020fea:	6839      	ldr	r1, [r7, #0]
 8020fec:	18cb      	adds	r3, r1, r3
 8020fee:	3a6f      	subs	r2, #111	; 0x6f
 8020ff0:	b2d2      	uxtb	r2, r2
 8020ff2:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8020ff4:	68fb      	ldr	r3, [r7, #12]
 8020ff6:	3301      	adds	r3, #1
 8020ff8:	60fb      	str	r3, [r7, #12]
 8020ffa:	68fb      	ldr	r3, [r7, #12]
 8020ffc:	2b0f      	cmp	r3, #15
 8020ffe:	dc00      	bgt.n	8021002 <itsdk_secstore_generateMasterKey+0x128>
 8021000:	e779      	b.n	8020ef6 <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 8021002:	683b      	ldr	r3, [r7, #0]
 8021004:	2110      	movs	r1, #16
 8021006:	0018      	movs	r0, r3
 8021008:	f000 fd96 	bl	8021b38 <itsdk_encrypt_cifferKey>
}
 802100c:	46c0      	nop			; (mov r8, r8)
 802100e:	46bd      	mov	sp, r7
 8021010:	b004      	add	sp, #16
 8021012:	bd80      	pop	{r7, pc}

08021014 <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8021014:	b590      	push	{r4, r7, lr}
 8021016:	b08d      	sub	sp, #52	; 0x34
 8021018:	af00      	add	r7, sp, #0
 802101a:	0002      	movs	r2, r0
 802101c:	6039      	str	r1, [r7, #0]
 802101e:	1dfb      	adds	r3, r7, #7
 8021020:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8021022:	2320      	movs	r3, #32
 8021024:	18fb      	adds	r3, r7, r3
 8021026:	0018      	movs	r0, r3
 8021028:	f7ff ff22 	bl	8020e70 <_itsdk_secstore_controlHeader>
 802102c:	1e03      	subs	r3, r0, #0
 802102e:	d001      	beq.n	8021034 <itsdk_secstore_readBlock+0x20>
 8021030:	2302      	movs	r3, #2
 8021032:	e038      	b.n	80210a6 <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 8021034:	2300      	movs	r3, #0
 8021036:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8021038:	211b      	movs	r1, #27
 802103a:	187b      	adds	r3, r7, r1
 802103c:	2200      	movs	r2, #0
 802103e:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8021040:	1dfb      	adds	r3, r7, #7
 8021042:	781a      	ldrb	r2, [r3, #0]
 8021044:	1879      	adds	r1, r7, r1
 8021046:	231c      	movs	r3, #28
 8021048:	18fb      	adds	r3, r7, r3
 802104a:	0018      	movs	r0, r3
 802104c:	f7ff fe96 	bl	8020d7c <_itsdk_secstore_getOffset>
 8021050:	1e03      	subs	r3, r0, #0
 8021052:	d001      	beq.n	8021058 <itsdk_secstore_readBlock+0x44>
 8021054:	2301      	movs	r3, #1
 8021056:	e026      	b.n	80210a6 <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 8021058:	2320      	movs	r3, #32
 802105a:	18fb      	adds	r3, r7, r3
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	021b      	lsls	r3, r3, #8
 8021060:	0c1b      	lsrs	r3, r3, #16
 8021062:	b29b      	uxth	r3, r3
 8021064:	001a      	movs	r2, r3
 8021066:	231b      	movs	r3, #27
 8021068:	18fb      	adds	r3, r7, r3
 802106a:	781b      	ldrb	r3, [r3, #0]
 802106c:	411a      	asrs	r2, r3
 802106e:	0013      	movs	r3, r2
 8021070:	2201      	movs	r2, #1
 8021072:	4013      	ands	r3, r2
 8021074:	d101      	bne.n	802107a <itsdk_secstore_readBlock+0x66>
 8021076:	2303      	movs	r3, #3
 8021078:	e015      	b.n	80210a6 <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 802107a:	69f9      	ldr	r1, [r7, #28]
 802107c:	683a      	ldr	r2, [r7, #0]
 802107e:	2310      	movs	r3, #16
 8021080:	2000      	movs	r0, #0
 8021082:	f004 fa0f 	bl	80254a4 <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8021086:	2408      	movs	r4, #8
 8021088:	193a      	adds	r2, r7, r4
 802108a:	2320      	movs	r3, #32
 802108c:	18fb      	adds	r3, r7, r3
 802108e:	3304      	adds	r3, #4
 8021090:	0011      	movs	r1, r2
 8021092:	0018      	movs	r0, r3
 8021094:	f7ff ff21 	bl	8020eda <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8021098:	193b      	adds	r3, r7, r4
 802109a:	6839      	ldr	r1, [r7, #0]
 802109c:	6838      	ldr	r0, [r7, #0]
 802109e:	2210      	movs	r2, #16
 80210a0:	f000 fd0a 	bl	8021ab8 <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 80210a4:	2300      	movs	r3, #0
}
 80210a6:	0018      	movs	r0, r3
 80210a8:	46bd      	mov	sp, r7
 80210aa:	b00d      	add	sp, #52	; 0x34
 80210ac:	bd90      	pop	{r4, r7, pc}

080210ae <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 80210ae:	b5b0      	push	{r4, r5, r7, lr}
 80210b0:	b08c      	sub	sp, #48	; 0x30
 80210b2:	af00      	add	r7, sp, #0
 80210b4:	0002      	movs	r2, r0
 80210b6:	6039      	str	r1, [r7, #0]
 80210b8:	1dfb      	adds	r3, r7, #7
 80210ba:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 80210bc:	2320      	movs	r3, #32
 80210be:	18fb      	adds	r3, r7, r3
 80210c0:	0018      	movs	r0, r3
 80210c2:	f7ff fed5 	bl	8020e70 <_itsdk_secstore_controlHeader>
 80210c6:	1e03      	subs	r3, r0, #0
 80210c8:	d001      	beq.n	80210ce <itsdk_secstore_writeBlock+0x20>
 80210ca:	2302      	movs	r3, #2
 80210cc:	e061      	b.n	8021192 <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 80210ce:	2300      	movs	r3, #0
 80210d0:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 80210d2:	211b      	movs	r1, #27
 80210d4:	187b      	adds	r3, r7, r1
 80210d6:	2200      	movs	r2, #0
 80210d8:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 80210da:	1dfb      	adds	r3, r7, #7
 80210dc:	781a      	ldrb	r2, [r3, #0]
 80210de:	1879      	adds	r1, r7, r1
 80210e0:	231c      	movs	r3, #28
 80210e2:	18fb      	adds	r3, r7, r3
 80210e4:	0018      	movs	r0, r3
 80210e6:	f7ff fe49 	bl	8020d7c <_itsdk_secstore_getOffset>
 80210ea:	1e03      	subs	r3, r0, #0
 80210ec:	d001      	beq.n	80210f2 <itsdk_secstore_writeBlock+0x44>
 80210ee:	2301      	movs	r3, #1
 80210f0:	e04f      	b.n	8021192 <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 80210f2:	2408      	movs	r4, #8
 80210f4:	193a      	adds	r2, r7, r4
 80210f6:	2520      	movs	r5, #32
 80210f8:	197b      	adds	r3, r7, r5
 80210fa:	3304      	adds	r3, #4
 80210fc:	0011      	movs	r1, r2
 80210fe:	0018      	movs	r0, r3
 8021100:	f7ff feeb 	bl	8020eda <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8021104:	193b      	adds	r3, r7, r4
 8021106:	6839      	ldr	r1, [r7, #0]
 8021108:	6838      	ldr	r0, [r7, #0]
 802110a:	2210      	movs	r2, #16
 802110c:	f000 fc90 	bl	8021a30 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8021110:	69f9      	ldr	r1, [r7, #28]
 8021112:	683a      	ldr	r2, [r7, #0]
 8021114:	2310      	movs	r3, #16
 8021116:	2000      	movs	r0, #0
 8021118:	f004 f920 	bl	802535c <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 802111c:	197b      	adds	r3, r7, r5
 802111e:	681b      	ldr	r3, [r3, #0]
 8021120:	021b      	lsls	r3, r3, #8
 8021122:	0c1b      	lsrs	r3, r3, #16
 8021124:	b29b      	uxth	r3, r3
 8021126:	001a      	movs	r2, r3
 8021128:	231b      	movs	r3, #27
 802112a:	18fb      	adds	r3, r7, r3
 802112c:	781b      	ldrb	r3, [r3, #0]
 802112e:	411a      	asrs	r2, r3
 8021130:	0013      	movs	r3, r2
 8021132:	2201      	movs	r2, #1
 8021134:	4013      	ands	r3, r2
 8021136:	d12b      	bne.n	8021190 <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 8021138:	2520      	movs	r5, #32
 802113a:	197b      	adds	r3, r7, r5
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	021b      	lsls	r3, r3, #8
 8021140:	0c1b      	lsrs	r3, r3, #16
 8021142:	b29b      	uxth	r3, r3
 8021144:	b21a      	sxth	r2, r3
 8021146:	231b      	movs	r3, #27
 8021148:	18fb      	adds	r3, r7, r3
 802114a:	781b      	ldrb	r3, [r3, #0]
 802114c:	0019      	movs	r1, r3
 802114e:	2301      	movs	r3, #1
 8021150:	408b      	lsls	r3, r1
 8021152:	b21b      	sxth	r3, r3
 8021154:	4313      	orrs	r3, r2
 8021156:	b21b      	sxth	r3, r3
 8021158:	b29a      	uxth	r2, r3
 802115a:	197b      	adds	r3, r7, r5
 802115c:	3301      	adds	r3, #1
 802115e:	21ff      	movs	r1, #255	; 0xff
 8021160:	4011      	ands	r1, r2
 8021162:	000c      	movs	r4, r1
 8021164:	7819      	ldrb	r1, [r3, #0]
 8021166:	2000      	movs	r0, #0
 8021168:	4001      	ands	r1, r0
 802116a:	1c08      	adds	r0, r1, #0
 802116c:	1c21      	adds	r1, r4, #0
 802116e:	4301      	orrs	r1, r0
 8021170:	7019      	strb	r1, [r3, #0]
 8021172:	0a12      	lsrs	r2, r2, #8
 8021174:	b290      	uxth	r0, r2
 8021176:	785a      	ldrb	r2, [r3, #1]
 8021178:	2100      	movs	r1, #0
 802117a:	400a      	ands	r2, r1
 802117c:	1c11      	adds	r1, r2, #0
 802117e:	1c02      	adds	r2, r0, #0
 8021180:	430a      	orrs	r2, r1
 8021182:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8021184:	197a      	adds	r2, r7, r5
 8021186:	2310      	movs	r3, #16
 8021188:	2100      	movs	r1, #0
 802118a:	2000      	movs	r0, #0
 802118c:	f004 f8e6 	bl	802535c <_eeprom_write>
	}

	return SS_SUCCESS;
 8021190:	2300      	movs	r3, #0
}
 8021192:	0018      	movs	r0, r3
 8021194:	46bd      	mov	sp, r7
 8021196:	b00c      	add	sp, #48	; 0x30
 8021198:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802119c <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 802119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802119e:	b08d      	sub	sp, #52	; 0x34
 80211a0:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 80211a2:	2020      	movs	r0, #32
 80211a4:	0004      	movs	r4, r0
 80211a6:	183b      	adds	r3, r7, r0
 80211a8:	781a      	ldrb	r2, [r3, #0]
 80211aa:	210f      	movs	r1, #15
 80211ac:	438a      	bics	r2, r1
 80211ae:	1c11      	adds	r1, r2, #0
 80211b0:	220c      	movs	r2, #12
 80211b2:	430a      	orrs	r2, r1
 80211b4:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 80211b6:	251f      	movs	r5, #31
 80211b8:	197b      	adds	r3, r7, r5
 80211ba:	0018      	movs	r0, r3
 80211bc:	f7ff fe3e 	bl	8020e3c <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 80211c0:	197b      	adds	r3, r7, r5
 80211c2:	781b      	ldrb	r3, [r3, #0]
 80211c4:	1c1a      	adds	r2, r3, #0
 80211c6:	230f      	movs	r3, #15
 80211c8:	4013      	ands	r3, r2
 80211ca:	b2da      	uxtb	r2, r3
 80211cc:	193b      	adds	r3, r7, r4
 80211ce:	0110      	lsls	r0, r2, #4
 80211d0:	781a      	ldrb	r2, [r3, #0]
 80211d2:	210f      	movs	r1, #15
 80211d4:	400a      	ands	r2, r1
 80211d6:	1c11      	adds	r1, r2, #0
 80211d8:	1c02      	adds	r2, r0, #0
 80211da:	430a      	orrs	r2, r1
 80211dc:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 80211de:	0020      	movs	r0, r4
 80211e0:	193b      	adds	r3, r7, r4
 80211e2:	3301      	adds	r3, #1
 80211e4:	781a      	ldrb	r2, [r3, #0]
 80211e6:	2100      	movs	r1, #0
 80211e8:	400a      	ands	r2, r1
 80211ea:	1c11      	adds	r1, r2, #0
 80211ec:	2201      	movs	r2, #1
 80211ee:	430a      	orrs	r2, r1
 80211f0:	701a      	strb	r2, [r3, #0]
 80211f2:	785a      	ldrb	r2, [r3, #1]
 80211f4:	2100      	movs	r1, #0
 80211f6:	400a      	ands	r2, r1
 80211f8:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 80211fa:	2110      	movs	r1, #16
 80211fc:	187b      	adds	r3, r7, r1
 80211fe:	4a15      	ldr	r2, [pc, #84]	; (8021254 <itsdk_secstore_init+0xb8>)
 8021200:	ca70      	ldmia	r2!, {r4, r5, r6}
 8021202:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 8021204:	183b      	adds	r3, r7, r0
 8021206:	187a      	adds	r2, r7, r1
 8021208:	3304      	adds	r3, #4
 802120a:	ca32      	ldmia	r2!, {r1, r4, r5}
 802120c:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 802120e:	183a      	adds	r2, r7, r0
 8021210:	2310      	movs	r3, #16
 8021212:	2100      	movs	r1, #0
 8021214:	2000      	movs	r0, #0
 8021216:	f004 f8a1 	bl	802535c <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 802121a:	0039      	movs	r1, r7
 802121c:	4a0e      	ldr	r2, [pc, #56]	; (8021258 <itsdk_secstore_init+0xbc>)
 802121e:	000b      	movs	r3, r1
 8021220:	ca11      	ldmia	r2!, {r0, r4}
 8021222:	c311      	stmia	r3!, {r0, r4}
 8021224:	7812      	ldrb	r2, [r2, #0]
 8021226:	701a      	strb	r2, [r3, #0]
 8021228:	2309      	movs	r3, #9
 802122a:	18cb      	adds	r3, r1, r3
 802122c:	2207      	movs	r2, #7
 802122e:	2100      	movs	r1, #0
 8021230:	0018      	movs	r0, r3
 8021232:	f004 fe7d 	bl	8025f30 <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 8021236:	003b      	movs	r3, r7
 8021238:	0019      	movs	r1, r3
 802123a:	2000      	movs	r0, #0
 802123c:	f7ff ff37 	bl	80210ae <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 8021240:	003b      	movs	r3, r7
 8021242:	2110      	movs	r1, #16
 8021244:	0018      	movs	r0, r3
 8021246:	f004 fe26 	bl	8025e96 <bzero>

	return SS_SUCCESS;
 802124a:	2300      	movs	r3, #0
}
 802124c:	0018      	movs	r0, r3
 802124e:	46bd      	mov	sp, r7
 8021250:	b00d      	add	sp, #52	; 0x34
 8021252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021254:	08027368 	.word	0x08027368
 8021258:	08027374 	.word	0x08027374

0802125c <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 802125c:	b580      	push	{r7, lr}
 802125e:	b084      	sub	sp, #16
 8021260:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 8021262:	003b      	movs	r3, r7
 8021264:	0018      	movs	r0, r3
 8021266:	f7ff fe03 	bl	8020e70 <_itsdk_secstore_controlHeader>
 802126a:	0003      	movs	r3, r0
}
 802126c:	0018      	movs	r0, r3
 802126e:	46bd      	mov	sp, r7
 8021270:	b004      	add	sp, #16
 8021272:	bd80      	pop	{r7, pc}

08021274 <_itsdk_secstore_writeBlockKey>:
								      }

/**
 * Write a block with a specified MasterKey
 */
static itsdk_secStoreReturn_e _itsdk_secstore_writeBlockKey(itsdk_secStoreBlocks_e blockType, uint8_t * buffer, uint8_t * masterKey) {
 8021274:	b580      	push	{r7, lr}
 8021276:	b086      	sub	sp, #24
 8021278:	af00      	add	r7, sp, #0
 802127a:	60b9      	str	r1, [r7, #8]
 802127c:	607a      	str	r2, [r7, #4]
 802127e:	210f      	movs	r1, #15
 8021280:	187b      	adds	r3, r7, r1
 8021282:	1c02      	adds	r2, r0, #0
 8021284:	701a      	strb	r2, [r3, #0]

	// Control the blockId validity
	uint32_t _offset = 0;
 8021286:	2300      	movs	r3, #0
 8021288:	617b      	str	r3, [r7, #20]
	uint8_t  _id = 0;
 802128a:	2013      	movs	r0, #19
 802128c:	183b      	adds	r3, r7, r0
 802128e:	2200      	movs	r2, #0
 8021290:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8021292:	187b      	adds	r3, r7, r1
 8021294:	781a      	ldrb	r2, [r3, #0]
 8021296:	1839      	adds	r1, r7, r0
 8021298:	2314      	movs	r3, #20
 802129a:	18fb      	adds	r3, r7, r3
 802129c:	0018      	movs	r0, r3
 802129e:	f7ff fd6d 	bl	8020d7c <_itsdk_secstore_getOffset>
 80212a2:	1e03      	subs	r3, r0, #0
 80212a4:	d001      	beq.n	80212aa <_itsdk_secstore_writeBlockKey+0x36>
 80212a6:	2301      	movs	r3, #1
 80212a8:	e00c      	b.n	80212c4 <_itsdk_secstore_writeBlockKey+0x50>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	68b9      	ldr	r1, [r7, #8]
 80212ae:	68b8      	ldr	r0, [r7, #8]
 80212b0:	2210      	movs	r2, #16
 80212b2:	f000 fbbd 	bl	8021a30 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 80212b6:	6979      	ldr	r1, [r7, #20]
 80212b8:	68ba      	ldr	r2, [r7, #8]
 80212ba:	2310      	movs	r3, #16
 80212bc:	2000      	movs	r0, #0
 80212be:	f004 f84d 	bl	802535c <_eeprom_write>

	return SS_SUCCESS;
 80212c2:	2300      	movs	r3, #0
}
 80212c4:	0018      	movs	r0, r3
 80212c6:	46bd      	mov	sp, r7
 80212c8:	b006      	add	sp, #24
 80212ca:	bd80      	pop	{r7, pc}

080212cc <_itsk_secstore_rekey>:


/**
 * Change the dyn key and update all the encrypted elements
 */
static itsdk_console_return_e _itsk_secstore_rekey(uint8_t * newKey){
 80212cc:	b580      	push	{r7, lr}
 80212ce:	b090      	sub	sp, #64	; 0x40
 80212d0:	af00      	add	r7, sp, #0
 80212d2:	6078      	str	r0, [r7, #4]

	itsdk_secStoreHead_t	_head;
	uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];

	// Control Header validity & load previous header
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) {
 80212d4:	232c      	movs	r3, #44	; 0x2c
 80212d6:	18fb      	adds	r3, r7, r3
 80212d8:	0018      	movs	r0, r3
 80212da:	f7ff fdc9 	bl	8020e70 <_itsdk_secstore_controlHeader>
 80212de:	1e03      	subs	r3, r0, #0
 80212e0:	d005      	beq.n	80212ee <_itsk_secstore_rekey+0x22>
		_itsdk_console_printf("KO\r\n");
 80212e2:	4b4b      	ldr	r3, [pc, #300]	; (8021410 <_itsk_secstore_rekey+0x144>)
 80212e4:	0018      	movs	r0, r3
 80212e6:	f7fe fd4d 	bl	801fd84 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 80212ea:	2302      	movs	r3, #2
 80212ec:	e08c      	b.n	8021408 <_itsk_secstore_rekey+0x13c>
	}

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(newKey,masterKey);
 80212ee:	230c      	movs	r3, #12
 80212f0:	18fa      	adds	r2, r7, r3
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	0011      	movs	r1, r2
 80212f6:	0018      	movs	r0, r3
 80212f8:	f7ff fdef 	bl	8020eda <itsdk_secstore_generateMasterKey>

	if ( itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, _b) != SS_FAILED_NOTSET ) {
 80212fc:	231c      	movs	r3, #28
 80212fe:	18fb      	adds	r3, r7, r3
 8021300:	0019      	movs	r1, r3
 8021302:	2000      	movs	r0, #0
 8021304:	f7ff fe86 	bl	8021014 <itsdk_secstore_readBlock>
 8021308:	0003      	movs	r3, r0
 802130a:	2b03      	cmp	r3, #3
 802130c:	d007      	beq.n	802131e <_itsk_secstore_rekey+0x52>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_CONSOLEKEY,_b,masterKey);
 802130e:	230c      	movs	r3, #12
 8021310:	18fa      	adds	r2, r7, r3
 8021312:	231c      	movs	r3, #28
 8021314:	18fb      	adds	r3, r7, r3
 8021316:	0019      	movs	r1, r3
 8021318:	2000      	movs	r0, #0
 802131a:	f7ff ffab 	bl	8021274 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_SIGFOXKEY,_b,masterKey);
	}
#endif
#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
	// we have more ABP in the UNION when Staticly compiled
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETIDDEVID, _b) != SS_FAILED_NOTSET ) {
 802131e:	231c      	movs	r3, #28
 8021320:	18fb      	adds	r3, r7, r3
 8021322:	0019      	movs	r1, r3
 8021324:	2002      	movs	r0, #2
 8021326:	f7ff fe75 	bl	8021014 <itsdk_secstore_readBlock>
 802132a:	0003      	movs	r3, r0
 802132c:	2b03      	cmp	r3, #3
 802132e:	d007      	beq.n	8021340 <_itsk_secstore_rekey+0x74>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETIDDEVID,_b,masterKey);
 8021330:	230c      	movs	r3, #12
 8021332:	18fa      	adds	r2, r7, r3
 8021334:	231c      	movs	r3, #28
 8021336:	18fb      	adds	r3, r7, r3
 8021338:	0019      	movs	r1, r3
 802133a:	2002      	movs	r0, #2
 802133c:	f7ff ff9a 	bl	8021274 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYF, _b) != SS_FAILED_NOTSET ) {
 8021340:	231c      	movs	r3, #28
 8021342:	18fb      	adds	r3, r7, r3
 8021344:	0019      	movs	r1, r3
 8021346:	2003      	movs	r0, #3
 8021348:	f7ff fe64 	bl	8021014 <itsdk_secstore_readBlock>
 802134c:	0003      	movs	r3, r0
 802134e:	2b03      	cmp	r3, #3
 8021350:	d007      	beq.n	8021362 <_itsk_secstore_rekey+0x96>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYF,_b,masterKey);
 8021352:	230c      	movs	r3, #12
 8021354:	18fa      	adds	r2, r7, r3
 8021356:	231c      	movs	r3, #28
 8021358:	18fb      	adds	r3, r7, r3
 802135a:	0019      	movs	r1, r3
 802135c:	2003      	movs	r0, #3
 802135e:	f7ff ff89 	bl	8021274 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYS, _b) != SS_FAILED_NOTSET ) {
 8021362:	231c      	movs	r3, #28
 8021364:	18fb      	adds	r3, r7, r3
 8021366:	0019      	movs	r1, r3
 8021368:	2004      	movs	r0, #4
 802136a:	f7ff fe53 	bl	8021014 <itsdk_secstore_readBlock>
 802136e:	0003      	movs	r3, r0
 8021370:	2b03      	cmp	r3, #3
 8021372:	d007      	beq.n	8021384 <_itsk_secstore_rekey+0xb8>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYS,_b,masterKey);
 8021374:	230c      	movs	r3, #12
 8021376:	18fa      	adds	r2, r7, r3
 8021378:	231c      	movs	r3, #28
 802137a:	18fb      	adds	r3, r7, r3
 802137c:	0019      	movs	r1, r3
 802137e:	2004      	movs	r0, #4
 8021380:	f7ff ff78 	bl	8021274 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETSKEY, _b) != SS_FAILED_NOTSET ) {
 8021384:	231c      	movs	r3, #28
 8021386:	18fb      	adds	r3, r7, r3
 8021388:	0019      	movs	r1, r3
 802138a:	2005      	movs	r0, #5
 802138c:	f7ff fe42 	bl	8021014 <itsdk_secstore_readBlock>
 8021390:	0003      	movs	r3, r0
 8021392:	2b03      	cmp	r3, #3
 8021394:	d007      	beq.n	80213a6 <_itsk_secstore_rekey+0xda>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETSKEY,_b,masterKey);
 8021396:	230c      	movs	r3, #12
 8021398:	18fa      	adds	r2, r7, r3
 802139a:	231c      	movs	r3, #28
 802139c:	18fb      	adds	r3, r7, r3
 802139e:	0019      	movs	r1, r3
 80213a0:	2005      	movs	r0, #5
 80213a2:	f7ff ff67 	bl	8021274 <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_APPSKEY, _b) != SS_FAILED_NOTSET ) {
 80213a6:	231c      	movs	r3, #28
 80213a8:	18fb      	adds	r3, r7, r3
 80213aa:	0019      	movs	r1, r3
 80213ac:	2006      	movs	r0, #6
 80213ae:	f7ff fe31 	bl	8021014 <itsdk_secstore_readBlock>
 80213b2:	0003      	movs	r3, r0
 80213b4:	2b03      	cmp	r3, #3
 80213b6:	d007      	beq.n	80213c8 <_itsk_secstore_rekey+0xfc>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_APPSKEY,_b,masterKey);
 80213b8:	230c      	movs	r3, #12
 80213ba:	18fa      	adds	r2, r7, r3
 80213bc:	231c      	movs	r3, #28
 80213be:	18fb      	adds	r3, r7, r3
 80213c0:	0019      	movs	r1, r3
 80213c2:	2006      	movs	r0, #6
 80213c4:	f7ff ff56 	bl	8021274 <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_USER7,_b,masterKey);
	}
#endif

	// Write Header
	for ( int i = 0 ; i < 12 ; i++) {
 80213c8:	2300      	movs	r3, #0
 80213ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213cc:	e00d      	b.n	80213ea <_itsk_secstore_rekey+0x11e>
		_head.dynamicKey[i] = newKey[i];
 80213ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213d0:	687a      	ldr	r2, [r7, #4]
 80213d2:	18d3      	adds	r3, r2, r3
 80213d4:	7819      	ldrb	r1, [r3, #0]
 80213d6:	232c      	movs	r3, #44	; 0x2c
 80213d8:	18fa      	adds	r2, r7, r3
 80213da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213dc:	18d3      	adds	r3, r2, r3
 80213de:	3304      	adds	r3, #4
 80213e0:	1c0a      	adds	r2, r1, #0
 80213e2:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 12 ; i++) {
 80213e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213e6:	3301      	adds	r3, #1
 80213e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213ec:	2b0b      	cmp	r3, #11
 80213ee:	ddee      	ble.n	80213ce <_itsk_secstore_rekey+0x102>
	}
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 80213f0:	232c      	movs	r3, #44	; 0x2c
 80213f2:	18fa      	adds	r2, r7, r3
 80213f4:	2310      	movs	r3, #16
 80213f6:	2100      	movs	r1, #0
 80213f8:	2000      	movs	r0, #0
 80213fa:	f003 ffaf 	bl	802535c <_eeprom_write>
	_itsdk_console_printf("OK\r\n");
 80213fe:	4b05      	ldr	r3, [pc, #20]	; (8021414 <_itsk_secstore_rekey+0x148>)
 8021400:	0018      	movs	r0, r3
 8021402:	f7fe fcbf 	bl	801fd84 <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 8021406:	2300      	movs	r3, #0
}
 8021408:	0018      	movs	r0, r3
 802140a:	46bd      	mov	sp, r7
 802140c:	b010      	add	sp, #64	; 0x40
 802140e:	bd80      	pop	{r7, pc}
 8021410:	08027384 	.word	0x08027384
 8021414:	0802738c 	.word	0x0802738c

08021418 <__checkAndConvert>:
/**
 * convert and verify a char * hex string into a uint8_t array
 * verify : size of the string regarding the sz
 * verify : format of the char to match Hex number
 */
static bool __checkAndConvert(char * str,uint8_t start,uint8_t stop,uint8_t sz,uint8_t * buf) {
 8021418:	b590      	push	{r4, r7, lr}
 802141a:	b085      	sub	sp, #20
 802141c:	af00      	add	r7, sp, #0
 802141e:	6078      	str	r0, [r7, #4]
 8021420:	000c      	movs	r4, r1
 8021422:	0010      	movs	r0, r2
 8021424:	0019      	movs	r1, r3
 8021426:	1cfb      	adds	r3, r7, #3
 8021428:	1c22      	adds	r2, r4, #0
 802142a:	701a      	strb	r2, [r3, #0]
 802142c:	1cbb      	adds	r3, r7, #2
 802142e:	1c02      	adds	r2, r0, #0
 8021430:	701a      	strb	r2, [r3, #0]
 8021432:	1c7b      	adds	r3, r7, #1
 8021434:	1c0a      	adds	r2, r1, #0
 8021436:	701a      	strb	r2, [r3, #0]
	if ( (stop - start) < 2*sz ) return false;
 8021438:	1cbb      	adds	r3, r7, #2
 802143a:	781a      	ldrb	r2, [r3, #0]
 802143c:	1cfb      	adds	r3, r7, #3
 802143e:	781b      	ldrb	r3, [r3, #0]
 8021440:	1ad2      	subs	r2, r2, r3
 8021442:	1c7b      	adds	r3, r7, #1
 8021444:	781b      	ldrb	r3, [r3, #0]
 8021446:	005b      	lsls	r3, r3, #1
 8021448:	429a      	cmp	r2, r3
 802144a:	da01      	bge.n	8021450 <__checkAndConvert+0x38>
 802144c:	2300      	movs	r3, #0
 802144e:	e034      	b.n	80214ba <__checkAndConvert+0xa2>
	int k = 0;
 8021450:	2300      	movs	r3, #0
 8021452:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 8021454:	1cfb      	adds	r3, r7, #3
 8021456:	781b      	ldrb	r3, [r3, #0]
 8021458:	60bb      	str	r3, [r7, #8]
 802145a:	e028      	b.n	80214ae <__checkAndConvert+0x96>
		if ( itdt_isHexChar(str[i],false) && itdt_isHexChar(str[i+1],false) ) {
 802145c:	68bb      	ldr	r3, [r7, #8]
 802145e:	687a      	ldr	r2, [r7, #4]
 8021460:	18d3      	adds	r3, r2, r3
 8021462:	781b      	ldrb	r3, [r3, #0]
 8021464:	2100      	movs	r1, #0
 8021466:	0018      	movs	r0, r3
 8021468:	f002 fa80 	bl	802396c <itdt_isHexChar>
 802146c:	1e03      	subs	r3, r0, #0
 802146e:	d01c      	beq.n	80214aa <__checkAndConvert+0x92>
 8021470:	68bb      	ldr	r3, [r7, #8]
 8021472:	3301      	adds	r3, #1
 8021474:	687a      	ldr	r2, [r7, #4]
 8021476:	18d3      	adds	r3, r2, r3
 8021478:	781b      	ldrb	r3, [r3, #0]
 802147a:	2100      	movs	r1, #0
 802147c:	0018      	movs	r0, r3
 802147e:	f002 fa75 	bl	802396c <itdt_isHexChar>
 8021482:	1e03      	subs	r3, r0, #0
 8021484:	d011      	beq.n	80214aa <__checkAndConvert+0x92>
			buf[k] = itdt_convertHexChar2Int(&str[i]);
 8021486:	68bb      	ldr	r3, [r7, #8]
 8021488:	687a      	ldr	r2, [r7, #4]
 802148a:	18d1      	adds	r1, r2, r3
 802148c:	68fb      	ldr	r3, [r7, #12]
 802148e:	6a3a      	ldr	r2, [r7, #32]
 8021490:	18d4      	adds	r4, r2, r3
 8021492:	0008      	movs	r0, r1
 8021494:	f002 f9ca 	bl	802382c <itdt_convertHexChar2Int>
 8021498:	0003      	movs	r3, r0
 802149a:	7023      	strb	r3, [r4, #0]
			k++;
 802149c:	68fb      	ldr	r3, [r7, #12]
 802149e:	3301      	adds	r3, #1
 80214a0:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 80214a2:	68bb      	ldr	r3, [r7, #8]
 80214a4:	3302      	adds	r3, #2
 80214a6:	60bb      	str	r3, [r7, #8]
 80214a8:	e001      	b.n	80214ae <__checkAndConvert+0x96>
		} else return false;
 80214aa:	2300      	movs	r3, #0
 80214ac:	e005      	b.n	80214ba <__checkAndConvert+0xa2>
	for ( int i = start ; i < stop ; i+=2 ) {
 80214ae:	1cbb      	adds	r3, r7, #2
 80214b0:	781b      	ldrb	r3, [r3, #0]
 80214b2:	68ba      	ldr	r2, [r7, #8]
 80214b4:	429a      	cmp	r2, r3
 80214b6:	dbd1      	blt.n	802145c <__checkAndConvert+0x44>
	}
	return true;
 80214b8:	2301      	movs	r3, #1
}
 80214ba:	0018      	movs	r0, r3
 80214bc:	46bd      	mov	sp, r7
 80214be:	b005      	add	sp, #20
 80214c0:	bd90      	pop	{r4, r7, pc}
	...

080214c4 <__updateField>:

static itsdk_console_return_e __updateField(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type) {
 80214c4:	b590      	push	{r4, r7, lr}
 80214c6:	b087      	sub	sp, #28
 80214c8:	af02      	add	r7, sp, #8
 80214ca:	60f8      	str	r0, [r7, #12]
 80214cc:	0008      	movs	r0, r1
 80214ce:	607a      	str	r2, [r7, #4]
 80214d0:	0019      	movs	r1, r3
 80214d2:	240b      	movs	r4, #11
 80214d4:	193b      	adds	r3, r7, r4
 80214d6:	1c02      	adds	r2, r0, #0
 80214d8:	701a      	strb	r2, [r3, #0]
 80214da:	230a      	movs	r3, #10
 80214dc:	18fb      	adds	r3, r7, r3
 80214de:	1c0a      	adds	r2, r1, #0
 80214e0:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,16,b) ) {
 80214e2:	193b      	adds	r3, r7, r4
 80214e4:	781a      	ldrb	r2, [r3, #0]
 80214e6:	68f8      	ldr	r0, [r7, #12]
 80214e8:	687b      	ldr	r3, [r7, #4]
 80214ea:	9300      	str	r3, [sp, #0]
 80214ec:	2310      	movs	r3, #16
 80214ee:	2105      	movs	r1, #5
 80214f0:	f7ff ff92 	bl	8021418 <__checkAndConvert>
 80214f4:	1e03      	subs	r3, r0, #0
 80214f6:	d01f      	beq.n	8021538 <__updateField+0x74>
		if ( type == ITSDK_SS_SIGFOXKEY ) {
 80214f8:	230a      	movs	r3, #10
 80214fa:	18fb      	adds	r3, r7, r3
 80214fc:	781b      	ldrb	r3, [r3, #0]
 80214fe:	2b01      	cmp	r3, #1
 8021500:	d104      	bne.n	802150c <__updateField+0x48>
		   itsdk_encrypt_cifferKey(b,16);
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	2110      	movs	r1, #16
 8021506:	0018      	movs	r0, r3
 8021508:	f000 fb16 	bl	8021b38 <itsdk_encrypt_cifferKey>
		}
		if ( itsdk_secstore_writeBlock(type, b) == SS_SUCCESS ) {
 802150c:	687a      	ldr	r2, [r7, #4]
 802150e:	230a      	movs	r3, #10
 8021510:	18fb      	adds	r3, r7, r3
 8021512:	781b      	ldrb	r3, [r3, #0]
 8021514:	0011      	movs	r1, r2
 8021516:	0018      	movs	r0, r3
 8021518:	f7ff fdc9 	bl	80210ae <itsdk_secstore_writeBlock>
 802151c:	1e03      	subs	r3, r0, #0
 802151e:	d105      	bne.n	802152c <__updateField+0x68>
			_itsdk_console_printf("OK\r\n");
 8021520:	4b0a      	ldr	r3, [pc, #40]	; (802154c <__updateField+0x88>)
 8021522:	0018      	movs	r0, r3
 8021524:	f7fe fc2e 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8021528:	2300      	movs	r3, #0
 802152a:	e00a      	b.n	8021542 <__updateField+0x7e>
		} else {
			_itsdk_console_printf("KO\r\n");
 802152c:	4b08      	ldr	r3, [pc, #32]	; (8021550 <__updateField+0x8c>)
 802152e:	0018      	movs	r0, r3
 8021530:	f7fe fc28 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 8021534:	2302      	movs	r3, #2
 8021536:	e004      	b.n	8021542 <__updateField+0x7e>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 8021538:	4b05      	ldr	r3, [pc, #20]	; (8021550 <__updateField+0x8c>)
 802153a:	0018      	movs	r0, r3
 802153c:	f7fe fc22 	bl	801fd84 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8021540:	2302      	movs	r3, #2
	}
}
 8021542:	0018      	movs	r0, r3
 8021544:	46bd      	mov	sp, r7
 8021546:	b005      	add	sp, #20
 8021548:	bd90      	pop	{r4, r7, pc}
 802154a:	46c0      	nop			; (mov r8, r8)
 802154c:	0802738c 	.word	0x0802738c
 8021550:	08027384 	.word	0x08027384

08021554 <__updateField2>:

static itsdk_console_return_e __updateField2(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type, uint8_t offset,uint8_t size) {
 8021554:	b590      	push	{r4, r7, lr}
 8021556:	b08d      	sub	sp, #52	; 0x34
 8021558:	af02      	add	r7, sp, #8
 802155a:	60f8      	str	r0, [r7, #12]
 802155c:	0008      	movs	r0, r1
 802155e:	607a      	str	r2, [r7, #4]
 8021560:	0019      	movs	r1, r3
 8021562:	240b      	movs	r4, #11
 8021564:	193b      	adds	r3, r7, r4
 8021566:	1c02      	adds	r2, r0, #0
 8021568:	701a      	strb	r2, [r3, #0]
 802156a:	230a      	movs	r3, #10
 802156c:	18fb      	adds	r3, r7, r3
 802156e:	1c0a      	adds	r2, r1, #0
 8021570:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,size,b) ) {
 8021572:	2334      	movs	r3, #52	; 0x34
 8021574:	2208      	movs	r2, #8
 8021576:	4694      	mov	ip, r2
 8021578:	44bc      	add	ip, r7
 802157a:	4463      	add	r3, ip
 802157c:	7819      	ldrb	r1, [r3, #0]
 802157e:	193b      	adds	r3, r7, r4
 8021580:	781a      	ldrb	r2, [r3, #0]
 8021582:	68f8      	ldr	r0, [r7, #12]
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	9300      	str	r3, [sp, #0]
 8021588:	000b      	movs	r3, r1
 802158a:	2105      	movs	r1, #5
 802158c:	f7ff ff44 	bl	8021418 <__checkAndConvert>
 8021590:	1e03      	subs	r3, r0, #0
 8021592:	d045      	beq.n	8021620 <__updateField2+0xcc>
		uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];
		if ( itsdk_secstore_readBlock(type, _b) != SS_SUCCESS ) {
 8021594:	2314      	movs	r3, #20
 8021596:	18fa      	adds	r2, r7, r3
 8021598:	230a      	movs	r3, #10
 802159a:	18fb      	adds	r3, r7, r3
 802159c:	781b      	ldrb	r3, [r3, #0]
 802159e:	0011      	movs	r1, r2
 80215a0:	0018      	movs	r0, r3
 80215a2:	f7ff fd37 	bl	8021014 <itsdk_secstore_readBlock>
 80215a6:	1e03      	subs	r3, r0, #0
 80215a8:	d005      	beq.n	80215b6 <__updateField2+0x62>
			_itsdk_console_printf("KO\r\n");
 80215aa:	4b22      	ldr	r3, [pc, #136]	; (8021634 <__updateField2+0xe0>)
 80215ac:	0018      	movs	r0, r3
 80215ae:	f7fe fbe9 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 80215b2:	2302      	movs	r3, #2
 80215b4:	e039      	b.n	802162a <__updateField2+0xd6>
		}
		for ( int i = 0 ; i < size ; i++) {
 80215b6:	2300      	movs	r3, #0
 80215b8:	627b      	str	r3, [r7, #36]	; 0x24
 80215ba:	e011      	b.n	80215e0 <__updateField2+0x8c>
			_b[i+offset] = b[i];
 80215bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215be:	687a      	ldr	r2, [r7, #4]
 80215c0:	18d2      	adds	r2, r2, r3
 80215c2:	2330      	movs	r3, #48	; 0x30
 80215c4:	2108      	movs	r1, #8
 80215c6:	468c      	mov	ip, r1
 80215c8:	44bc      	add	ip, r7
 80215ca:	4463      	add	r3, ip
 80215cc:	7819      	ldrb	r1, [r3, #0]
 80215ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215d0:	18cb      	adds	r3, r1, r3
 80215d2:	7811      	ldrb	r1, [r2, #0]
 80215d4:	2214      	movs	r2, #20
 80215d6:	18ba      	adds	r2, r7, r2
 80215d8:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i < size ; i++) {
 80215da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215dc:	3301      	adds	r3, #1
 80215de:	627b      	str	r3, [r7, #36]	; 0x24
 80215e0:	2334      	movs	r3, #52	; 0x34
 80215e2:	2208      	movs	r2, #8
 80215e4:	4694      	mov	ip, r2
 80215e6:	44bc      	add	ip, r7
 80215e8:	4463      	add	r3, ip
 80215ea:	781b      	ldrb	r3, [r3, #0]
 80215ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80215ee:	429a      	cmp	r2, r3
 80215f0:	dbe4      	blt.n	80215bc <__updateField2+0x68>
		}
		if ( itsdk_secstore_writeBlock(type, _b) == SS_SUCCESS ) {
 80215f2:	2314      	movs	r3, #20
 80215f4:	18fa      	adds	r2, r7, r3
 80215f6:	230a      	movs	r3, #10
 80215f8:	18fb      	adds	r3, r7, r3
 80215fa:	781b      	ldrb	r3, [r3, #0]
 80215fc:	0011      	movs	r1, r2
 80215fe:	0018      	movs	r0, r3
 8021600:	f7ff fd55 	bl	80210ae <itsdk_secstore_writeBlock>
 8021604:	1e03      	subs	r3, r0, #0
 8021606:	d105      	bne.n	8021614 <__updateField2+0xc0>
			_itsdk_console_printf("OK\r\n");
 8021608:	4b0b      	ldr	r3, [pc, #44]	; (8021638 <__updateField2+0xe4>)
 802160a:	0018      	movs	r0, r3
 802160c:	f7fe fbba 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8021610:	2300      	movs	r3, #0
 8021612:	e00a      	b.n	802162a <__updateField2+0xd6>
		} else {
			_itsdk_console_printf("KO\r\n");
 8021614:	4b07      	ldr	r3, [pc, #28]	; (8021634 <__updateField2+0xe0>)
 8021616:	0018      	movs	r0, r3
 8021618:	f7fe fbb4 	bl	801fd84 <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 802161c:	2302      	movs	r3, #2
 802161e:	e004      	b.n	802162a <__updateField2+0xd6>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 8021620:	4b04      	ldr	r3, [pc, #16]	; (8021634 <__updateField2+0xe0>)
 8021622:	0018      	movs	r0, r3
 8021624:	f7fe fbae 	bl	801fd84 <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8021628:	2302      	movs	r3, #2
	}
}
 802162a:	0018      	movs	r0, r3
 802162c:	46bd      	mov	sp, r7
 802162e:	b00b      	add	sp, #44	; 0x2c
 8021630:	bd90      	pop	{r4, r7, pc}
 8021632:	46c0      	nop			; (mov r8, r8)
 8021634:	08027384 	.word	0x08027384
 8021638:	0802738c 	.word	0x0802738c

0802163c <_itsdk_secStore_consolePriv>:

/**
 * Extends the console function
 */
static itsdk_console_return_e _itsdk_secStore_consolePriv(char * buffer, uint8_t sz) {
 802163c:	b5b0      	push	{r4, r5, r7, lr}
 802163e:	b090      	sub	sp, #64	; 0x40
 8021640:	af02      	add	r7, sp, #8
 8021642:	6078      	str	r0, [r7, #4]
 8021644:	000a      	movs	r2, r1
 8021646:	1cfb      	adds	r3, r7, #3
 8021648:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 802164a:	1cfb      	adds	r3, r7, #3
 802164c:	781b      	ldrb	r3, [r3, #0]
 802164e:	2b01      	cmp	r3, #1
 8021650:	d136      	bne.n	80216c0 <_itsdk_secStore_consolePriv+0x84>
		switch(buffer[0]){
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	781b      	ldrb	r3, [r3, #0]
 8021656:	2b3f      	cmp	r3, #63	; 0x3f
 8021658:	d000      	beq.n	802165c <_itsdk_secStore_consolePriv+0x20>
			_itsdk_console_printf("SS:P:xxxx  : User change key 7 (16B hex)\r\n");
		  #endif
		  return ITSDK_CONSOLE_SUCCES;
		  break;
		default:
			break;
 802165a:	e1cb      	b.n	80219f4 <_itsdk_secStore_consolePriv+0x3b8>
			_itsdk_console_printf("--- SecureStore\r\n");
 802165c:	4bd3      	ldr	r3, [pc, #844]	; (80219ac <_itsdk_secStore_consolePriv+0x370>)
 802165e:	0018      	movs	r0, r3
 8021660:	f7fe fb90 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("ss:R       : restore all SS to factory default\r\n");
 8021664:	4bd2      	ldr	r3, [pc, #840]	; (80219b0 <_itsdk_secStore_consolePriv+0x374>)
 8021666:	0018      	movs	r0, r3
 8021668:	f7fe fb8c 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("SS:0:xxxx  : change the secure store dyn Key (12B)\r\n");
 802166c:	4bd1      	ldr	r3, [pc, #836]	; (80219b4 <_itsdk_secStore_consolePriv+0x378>)
 802166e:	0018      	movs	r0, r3
 8021670:	f7fe fb88 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("SS:1:xxxx  : change the console password (max 15 char)\r\n");
 8021674:	4bd0      	ldr	r3, [pc, #832]	; (80219b8 <_itsdk_secStore_consolePriv+0x37c>)
 8021676:	0018      	movs	r0, r3
 8021678:	f7fe fb84 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("ss:Z       : LoRa restore factory setting\r\n");
 802167c:	4bcf      	ldr	r3, [pc, #828]	; (80219bc <_itsdk_secStore_consolePriv+0x380>)
 802167e:	0018      	movs	r0, r3
 8021680:	f7fe fb80 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("ss:9       : LoRa OTAA print DevEUI (8B hex)\r\n");
 8021684:	4bce      	ldr	r3, [pc, #824]	; (80219c0 <_itsdk_secStore_consolePriv+0x384>)
 8021686:	0018      	movs	r0, r3
 8021688:	f7fe fb7c 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("SS:9:xxxx  : LoRa OTAA change DevEUI (8B hex)\r\n");
 802168c:	4bcd      	ldr	r3, [pc, #820]	; (80219c4 <_itsdk_secStore_consolePriv+0x388>)
 802168e:	0018      	movs	r0, r3
 8021690:	f7fe fb78 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("ss:A       : LoRa OTAA print AppEUI (8B hex)\r\n");
 8021694:	4bcc      	ldr	r3, [pc, #816]	; (80219c8 <_itsdk_secStore_consolePriv+0x38c>)
 8021696:	0018      	movs	r0, r3
 8021698:	f7fe fb74 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("SS:A:xxxx  : LoRa OTAA change AppEUI (8B hex)\r\n");
 802169c:	4bcb      	ldr	r3, [pc, #812]	; (80219cc <_itsdk_secStore_consolePriv+0x390>)
 802169e:	0018      	movs	r0, r3
 80216a0:	f7fe fb70 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("SS:B:xxxx  : LoRa OTAA change AppKey (16B hex)\r\n");
 80216a4:	4bca      	ldr	r3, [pc, #808]	; (80219d0 <_itsdk_secStore_consolePriv+0x394>)
 80216a6:	0018      	movs	r0, r3
 80216a8:	f7fe fb6c 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("SS:C:xxxx  : LoRa OTAA change NwkKey (16B hex)\r\n");
 80216ac:	4bc9      	ldr	r3, [pc, #804]	; (80219d4 <_itsdk_secStore_consolePriv+0x398>)
 80216ae:	0018      	movs	r0, r3
 80216b0:	f7fe fb68 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("SS:D:xxxx  : LoRa OTAA change Nwk+App (16B hex)\r\n");
 80216b4:	4bc8      	ldr	r3, [pc, #800]	; (80219d8 <_itsdk_secStore_consolePriv+0x39c>)
 80216b6:	0018      	movs	r0, r3
 80216b8:	f7fe fb64 	bl	801fd84 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 80216bc:	2300      	movs	r3, #0
 80216be:	e19a      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
		}
	} else if ( sz >= 4 ) {
 80216c0:	1cfb      	adds	r3, r7, #3
 80216c2:	781b      	ldrb	r3, [r3, #0]
 80216c4:	2b03      	cmp	r3, #3
 80216c6:	d800      	bhi.n	80216ca <_itsdk_secStore_consolePriv+0x8e>
 80216c8:	e194      	b.n	80219f4 <_itsdk_secStore_consolePriv+0x3b8>
		uint8_t b[ITSDK_SECSTORE_BLOCKSZ];
		// READ CASE
		if ( buffer[0] == 's' && buffer[1] == 's' && buffer[2] == ':' ) {
 80216ca:	687b      	ldr	r3, [r7, #4]
 80216cc:	781b      	ldrb	r3, [r3, #0]
 80216ce:	2b73      	cmp	r3, #115	; 0x73
 80216d0:	d000      	beq.n	80216d4 <_itsdk_secStore_consolePriv+0x98>
 80216d2:	e096      	b.n	8021802 <_itsdk_secStore_consolePriv+0x1c6>
 80216d4:	687b      	ldr	r3, [r7, #4]
 80216d6:	3301      	adds	r3, #1
 80216d8:	781b      	ldrb	r3, [r3, #0]
 80216da:	2b73      	cmp	r3, #115	; 0x73
 80216dc:	d000      	beq.n	80216e0 <_itsdk_secStore_consolePriv+0xa4>
 80216de:	e090      	b.n	8021802 <_itsdk_secStore_consolePriv+0x1c6>
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	3302      	adds	r3, #2
 80216e4:	781b      	ldrb	r3, [r3, #0]
 80216e6:	2b3a      	cmp	r3, #58	; 0x3a
 80216e8:	d000      	beq.n	80216ec <_itsdk_secStore_consolePriv+0xb0>
 80216ea:	e08a      	b.n	8021802 <_itsdk_secStore_consolePriv+0x1c6>
			switch(buffer[3]) {
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	3303      	adds	r3, #3
 80216f0:	781b      	ldrb	r3, [r3, #0]
 80216f2:	3b39      	subs	r3, #57	; 0x39
 80216f4:	2b28      	cmp	r3, #40	; 0x28
 80216f6:	d900      	bls.n	80216fa <_itsdk_secStore_consolePriv+0xbe>
 80216f8:	e085      	b.n	8021806 <_itsdk_secStore_consolePriv+0x1ca>
 80216fa:	009a      	lsls	r2, r3, #2
 80216fc:	4bb7      	ldr	r3, [pc, #732]	; (80219dc <_itsdk_secStore_consolePriv+0x3a0>)
 80216fe:	18d3      	adds	r3, r2, r3
 8021700:	681b      	ldr	r3, [r3, #0]
 8021702:	469f      	mov	pc, r3
			case 'R':
				// all config factory default
				{
					uint8_t ret = 0;
 8021704:	2337      	movs	r3, #55	; 0x37
 8021706:	18fb      	adds	r3, r7, r3
 8021708:	2200      	movs	r2, #0
 802170a:	701a      	strb	r2, [r3, #0]
					#endif
					#if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
					  if ( itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE) != ENCRYPT_RETURN_SUCESS ) ret =1;
					#endif
					#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
					  if ( itsdk_lorawan_resetFactoryDefaults(true) != LORAWAN_RETURN_SUCESS ) ret=1;
 802170c:	2001      	movs	r0, #1
 802170e:	f001 ff05 	bl	802351c <itsdk_lorawan_resetFactoryDefaults>
 8021712:	1e03      	subs	r3, r0, #0
 8021714:	d003      	beq.n	802171e <_itsdk_secStore_consolePriv+0xe2>
 8021716:	2337      	movs	r3, #55	; 0x37
 8021718:	18fb      	adds	r3, r7, r3
 802171a:	2201      	movs	r2, #1
 802171c:	701a      	strb	r2, [r3, #0]
					#endif
					if ( ret == 0 ) {
 802171e:	2337      	movs	r3, #55	; 0x37
 8021720:	18fb      	adds	r3, r7, r3
 8021722:	781b      	ldrb	r3, [r3, #0]
 8021724:	2b00      	cmp	r3, #0
 8021726:	d105      	bne.n	8021734 <_itsdk_secStore_consolePriv+0xf8>
					  _itsdk_console_printf("OK\r\n");
 8021728:	4bad      	ldr	r3, [pc, #692]	; (80219e0 <_itsdk_secStore_consolePriv+0x3a4>)
 802172a:	0018      	movs	r0, r3
 802172c:	f7fe fb2a 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8021730:	2300      	movs	r3, #0
 8021732:	e160      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				    } else {
					  _itsdk_console_printf("KO\r\n");
 8021734:	4bab      	ldr	r3, [pc, #684]	; (80219e4 <_itsdk_secStore_consolePriv+0x3a8>)
 8021736:	0018      	movs	r0, r3
 8021738:	f7fe fb24 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 802173c:	2302      	movs	r3, #2
 802173e:	e15a      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				  }
				break;
			 #endif
			 #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
			  case 'Z':
				  if ( itsdk_lorawan_resetFactoryDefaults(true) == LORAWAN_RETURN_SUCESS ) {
 8021740:	2001      	movs	r0, #1
 8021742:	f001 feeb 	bl	802351c <itsdk_lorawan_resetFactoryDefaults>
 8021746:	1e03      	subs	r3, r0, #0
 8021748:	d105      	bne.n	8021756 <_itsdk_secStore_consolePriv+0x11a>
					  _itsdk_console_printf("OK\r\n");
 802174a:	4ba5      	ldr	r3, [pc, #660]	; (80219e0 <_itsdk_secStore_consolePriv+0x3a4>)
 802174c:	0018      	movs	r0, r3
 802174e:	f7fe fb19 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 8021752:	2300      	movs	r3, #0
 8021754:	e14f      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 8021756:	4ba3      	ldr	r3, [pc, #652]	; (80219e4 <_itsdk_secStore_consolePriv+0x3a8>)
 8021758:	0018      	movs	r0, r3
 802175a:	f7fe fb13 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 802175e:	2302      	movs	r3, #2
 8021760:	e149      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				  }
              #endif
              #if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			  case '9':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 8021762:	230c      	movs	r3, #12
 8021764:	18fb      	adds	r3, r7, r3
 8021766:	0019      	movs	r1, r3
 8021768:	2007      	movs	r0, #7
 802176a:	f7ff fc53 	bl	8021014 <itsdk_secstore_readBlock>
 802176e:	1e03      	subs	r3, r0, #0
 8021770:	d119      	bne.n	80217a6 <_itsdk_secStore_consolePriv+0x16a>
					  __console_print_hex(b,0,8);
 8021772:	2300      	movs	r3, #0
 8021774:	633b      	str	r3, [r7, #48]	; 0x30
 8021776:	e00d      	b.n	8021794 <_itsdk_secStore_consolePriv+0x158>
 8021778:	230c      	movs	r3, #12
 802177a:	18fa      	adds	r2, r7, r3
 802177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802177e:	18d3      	adds	r3, r2, r3
 8021780:	781b      	ldrb	r3, [r3, #0]
 8021782:	001a      	movs	r2, r3
 8021784:	4b98      	ldr	r3, [pc, #608]	; (80219e8 <_itsdk_secStore_consolePriv+0x3ac>)
 8021786:	0011      	movs	r1, r2
 8021788:	0018      	movs	r0, r3
 802178a:	f7fe fafb 	bl	801fd84 <_itsdk_console_printf>
 802178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021790:	3301      	adds	r3, #1
 8021792:	633b      	str	r3, [r7, #48]	; 0x30
 8021794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021796:	2b07      	cmp	r3, #7
 8021798:	ddee      	ble.n	8021778 <_itsdk_secStore_consolePriv+0x13c>
 802179a:	4b94      	ldr	r3, [pc, #592]	; (80219ec <_itsdk_secStore_consolePriv+0x3b0>)
 802179c:	0018      	movs	r0, r3
 802179e:	f7fe faf1 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 80217a2:	2300      	movs	r3, #0
 80217a4:	e127      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 80217a6:	4b8f      	ldr	r3, [pc, #572]	; (80219e4 <_itsdk_secStore_consolePriv+0x3a8>)
 80217a8:	0018      	movs	r0, r3
 80217aa:	f7fe faeb 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 80217ae:	2302      	movs	r3, #2
 80217b0:	e121      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				  }
			  case 'A':
			  case 'a':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 80217b2:	230c      	movs	r3, #12
 80217b4:	18fb      	adds	r3, r7, r3
 80217b6:	0019      	movs	r1, r3
 80217b8:	2007      	movs	r0, #7
 80217ba:	f7ff fc2b 	bl	8021014 <itsdk_secstore_readBlock>
 80217be:	1e03      	subs	r3, r0, #0
 80217c0:	d119      	bne.n	80217f6 <_itsdk_secStore_consolePriv+0x1ba>
					  __console_print_hex(b,8,8);
 80217c2:	2308      	movs	r3, #8
 80217c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80217c6:	e00d      	b.n	80217e4 <_itsdk_secStore_consolePriv+0x1a8>
 80217c8:	230c      	movs	r3, #12
 80217ca:	18fa      	adds	r2, r7, r3
 80217cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217ce:	18d3      	adds	r3, r2, r3
 80217d0:	781b      	ldrb	r3, [r3, #0]
 80217d2:	001a      	movs	r2, r3
 80217d4:	4b84      	ldr	r3, [pc, #528]	; (80219e8 <_itsdk_secStore_consolePriv+0x3ac>)
 80217d6:	0011      	movs	r1, r2
 80217d8:	0018      	movs	r0, r3
 80217da:	f7fe fad3 	bl	801fd84 <_itsdk_console_printf>
 80217de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217e0:	3301      	adds	r3, #1
 80217e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80217e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217e6:	2b0f      	cmp	r3, #15
 80217e8:	ddee      	ble.n	80217c8 <_itsdk_secStore_consolePriv+0x18c>
 80217ea:	4b80      	ldr	r3, [pc, #512]	; (80219ec <_itsdk_secStore_consolePriv+0x3b0>)
 80217ec:	0018      	movs	r0, r3
 80217ee:	f7fe fac9 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 80217f2:	2300      	movs	r3, #0
 80217f4:	e0ff      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 80217f6:	4b7b      	ldr	r3, [pc, #492]	; (80219e4 <_itsdk_secStore_consolePriv+0x3a8>)
 80217f8:	0018      	movs	r0, r3
 80217fa:	f7fe fac3 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 80217fe:	2302      	movs	r3, #2
 8021800:	e0f9      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				  return ITSDK_CONSOLE_SUCCES;
			  #endif
			  default:
				  break;
			}
		}
 8021802:	46c0      	nop			; (mov r8, r8)
 8021804:	e000      	b.n	8021808 <_itsdk_secStore_consolePriv+0x1cc>
				  break;
 8021806:	46c0      	nop			; (mov r8, r8)
		// WRITE CASE
		if ( buffer[0] == 'S' && buffer[1] == 'S' && buffer[2] == ':' && buffer[4] == ':' ) {
 8021808:	687b      	ldr	r3, [r7, #4]
 802180a:	781b      	ldrb	r3, [r3, #0]
 802180c:	2b53      	cmp	r3, #83	; 0x53
 802180e:	d000      	beq.n	8021812 <_itsdk_secStore_consolePriv+0x1d6>
 8021810:	e0f0      	b.n	80219f4 <_itsdk_secStore_consolePriv+0x3b8>
 8021812:	687b      	ldr	r3, [r7, #4]
 8021814:	3301      	adds	r3, #1
 8021816:	781b      	ldrb	r3, [r3, #0]
 8021818:	2b53      	cmp	r3, #83	; 0x53
 802181a:	d000      	beq.n	802181e <_itsdk_secStore_consolePriv+0x1e2>
 802181c:	e0ea      	b.n	80219f4 <_itsdk_secStore_consolePriv+0x3b8>
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	3302      	adds	r3, #2
 8021822:	781b      	ldrb	r3, [r3, #0]
 8021824:	2b3a      	cmp	r3, #58	; 0x3a
 8021826:	d000      	beq.n	802182a <_itsdk_secStore_consolePriv+0x1ee>
 8021828:	e0e4      	b.n	80219f4 <_itsdk_secStore_consolePriv+0x3b8>
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	3304      	adds	r3, #4
 802182e:	781b      	ldrb	r3, [r3, #0]
 8021830:	2b3a      	cmp	r3, #58	; 0x3a
 8021832:	d000      	beq.n	8021836 <_itsdk_secStore_consolePriv+0x1fa>
 8021834:	e0de      	b.n	80219f4 <_itsdk_secStore_consolePriv+0x3b8>
			int ssz = sz-5;
 8021836:	1cfb      	adds	r3, r7, #3
 8021838:	781b      	ldrb	r3, [r3, #0]
 802183a:	3b05      	subs	r3, #5
 802183c:	61fb      	str	r3, [r7, #28]
			switch(buffer[3]) {
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	3303      	adds	r3, #3
 8021842:	781b      	ldrb	r3, [r3, #0]
 8021844:	3b30      	subs	r3, #48	; 0x30
 8021846:	2b34      	cmp	r3, #52	; 0x34
 8021848:	d900      	bls.n	802184c <_itsdk_secStore_consolePriv+0x210>
 802184a:	e0d3      	b.n	80219f4 <_itsdk_secStore_consolePriv+0x3b8>
 802184c:	009a      	lsls	r2, r3, #2
 802184e:	4b68      	ldr	r3, [pc, #416]	; (80219f0 <_itsdk_secStore_consolePriv+0x3b4>)
 8021850:	18d3      	adds	r3, r2, r3
 8021852:	681b      	ldr	r3, [r3, #0]
 8021854:	469f      	mov	pc, r3
			case '0':
				// DYNKEY
				if ( __checkAndConvert(buffer,5,sz,12,b) ) {
 8021856:	1cfb      	adds	r3, r7, #3
 8021858:	781a      	ldrb	r2, [r3, #0]
 802185a:	6878      	ldr	r0, [r7, #4]
 802185c:	230c      	movs	r3, #12
 802185e:	18fb      	adds	r3, r7, r3
 8021860:	9300      	str	r3, [sp, #0]
 8021862:	230c      	movs	r3, #12
 8021864:	2105      	movs	r1, #5
 8021866:	f7ff fdd7 	bl	8021418 <__checkAndConvert>
 802186a:	1e03      	subs	r3, r0, #0
 802186c:	d006      	beq.n	802187c <_itsdk_secStore_consolePriv+0x240>
					return _itsk_secstore_rekey(b);
 802186e:	230c      	movs	r3, #12
 8021870:	18fb      	adds	r3, r7, r3
 8021872:	0018      	movs	r0, r3
 8021874:	f7ff fd2a 	bl	80212cc <_itsk_secstore_rekey>
 8021878:	0003      	movs	r3, r0
 802187a:	e0bc      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 802187c:	4b59      	ldr	r3, [pc, #356]	; (80219e4 <_itsdk_secStore_consolePriv+0x3a8>)
 802187e:	0018      	movs	r0, r3
 8021880:	f7fe fa80 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8021884:	2302      	movs	r3, #2
 8021886:	e0b6      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				}
			case '1':
				// ITSDK_SS_CONSOLEKEY
				if ( ssz > 15 ) {
 8021888:	69fb      	ldr	r3, [r7, #28]
 802188a:	2b0f      	cmp	r3, #15
 802188c:	dd05      	ble.n	802189a <_itsdk_secStore_consolePriv+0x25e>
					  _itsdk_console_printf("KO\r\n");
 802188e:	4b55      	ldr	r3, [pc, #340]	; (80219e4 <_itsdk_secStore_consolePriv+0x3a8>)
 8021890:	0018      	movs	r0, r3
 8021892:	f7fe fa77 	bl	801fd84 <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8021896:	2302      	movs	r3, #2
 8021898:	e0ad      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				}
				for ( int i = 0 ; i < ssz ; i++) {
 802189a:	2300      	movs	r3, #0
 802189c:	62bb      	str	r3, [r7, #40]	; 0x28
 802189e:	e00d      	b.n	80218bc <_itsdk_secStore_consolePriv+0x280>
					b[i] = buffer[i+5];
 80218a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218a2:	3305      	adds	r3, #5
 80218a4:	687a      	ldr	r2, [r7, #4]
 80218a6:	18d3      	adds	r3, r2, r3
 80218a8:	7819      	ldrb	r1, [r3, #0]
 80218aa:	230c      	movs	r3, #12
 80218ac:	18fa      	adds	r2, r7, r3
 80218ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218b0:	18d3      	adds	r3, r2, r3
 80218b2:	1c0a      	adds	r2, r1, #0
 80218b4:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < ssz ; i++) {
 80218b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218b8:	3301      	adds	r3, #1
 80218ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80218bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80218be:	69fb      	ldr	r3, [r7, #28]
 80218c0:	429a      	cmp	r2, r3
 80218c2:	dbed      	blt.n	80218a0 <_itsdk_secStore_consolePriv+0x264>
				}
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 80218c4:	69fb      	ldr	r3, [r7, #28]
 80218c6:	627b      	str	r3, [r7, #36]	; 0x24
 80218c8:	e008      	b.n	80218dc <_itsdk_secStore_consolePriv+0x2a0>
					b[i] = 0;
 80218ca:	230c      	movs	r3, #12
 80218cc:	18fa      	adds	r2, r7, r3
 80218ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218d0:	18d3      	adds	r3, r2, r3
 80218d2:	2200      	movs	r2, #0
 80218d4:	701a      	strb	r2, [r3, #0]
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 80218d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218d8:	3301      	adds	r3, #1
 80218da:	627b      	str	r3, [r7, #36]	; 0x24
 80218dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218de:	2b0f      	cmp	r3, #15
 80218e0:	ddf3      	ble.n	80218ca <_itsdk_secStore_consolePriv+0x28e>
				}
				if ( itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY, b) == SS_SUCCESS ) {
 80218e2:	230c      	movs	r3, #12
 80218e4:	18fb      	adds	r3, r7, r3
 80218e6:	0019      	movs	r1, r3
 80218e8:	2000      	movs	r0, #0
 80218ea:	f7ff fbe0 	bl	80210ae <itsdk_secstore_writeBlock>
 80218ee:	1e03      	subs	r3, r0, #0
 80218f0:	d105      	bne.n	80218fe <_itsdk_secStore_consolePriv+0x2c2>
					_itsdk_console_printf("OK\r\n");
 80218f2:	4b3b      	ldr	r3, [pc, #236]	; (80219e0 <_itsdk_secStore_consolePriv+0x3a4>)
 80218f4:	0018      	movs	r0, r3
 80218f6:	f7fe fa45 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80218fa:	2300      	movs	r3, #0
 80218fc:	e07b      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 80218fe:	4b39      	ldr	r3, [pc, #228]	; (80219e4 <_itsdk_secStore_consolePriv+0x3a8>)
 8021900:	0018      	movs	r0, r3
 8021902:	f7fe fa3f 	bl	801fd84 <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8021906:	2302      	movs	r3, #2
 8021908:	e075      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_ABP_APPSKEY);
		#endif
		#if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			case '9':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,0,8);
 802190a:	230c      	movs	r3, #12
 802190c:	18fa      	adds	r2, r7, r3
 802190e:	1cfb      	adds	r3, r7, #3
 8021910:	7819      	ldrb	r1, [r3, #0]
 8021912:	6878      	ldr	r0, [r7, #4]
 8021914:	2308      	movs	r3, #8
 8021916:	9301      	str	r3, [sp, #4]
 8021918:	2300      	movs	r3, #0
 802191a:	9300      	str	r3, [sp, #0]
 802191c:	2307      	movs	r3, #7
 802191e:	f7ff fe19 	bl	8021554 <__updateField2>
 8021922:	0003      	movs	r3, r0
 8021924:	e067      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
			case 'a':
			case 'A':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,8,8);
 8021926:	230c      	movs	r3, #12
 8021928:	18fa      	adds	r2, r7, r3
 802192a:	1cfb      	adds	r3, r7, #3
 802192c:	7819      	ldrb	r1, [r3, #0]
 802192e:	6878      	ldr	r0, [r7, #4]
 8021930:	2308      	movs	r3, #8
 8021932:	9301      	str	r3, [sp, #4]
 8021934:	2308      	movs	r3, #8
 8021936:	9300      	str	r3, [sp, #0]
 8021938:	2307      	movs	r3, #7
 802193a:	f7ff fe0b 	bl	8021554 <__updateField2>
 802193e:	0003      	movs	r3, r0
 8021940:	e059      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
			case 'b':
			case 'B':
				// ITSDK_SS_LORA_OTAA_APPKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 8021942:	230c      	movs	r3, #12
 8021944:	18fa      	adds	r2, r7, r3
 8021946:	1cfb      	adds	r3, r7, #3
 8021948:	7819      	ldrb	r1, [r3, #0]
 802194a:	6878      	ldr	r0, [r7, #4]
 802194c:	2308      	movs	r3, #8
 802194e:	f7ff fdb9 	bl	80214c4 <__updateField>
 8021952:	0003      	movs	r3, r0
 8021954:	e04f      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
			case 'c':
			case 'C':
				// ITSDK_SS_LORA_OTAA_NWKKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY);
 8021956:	230c      	movs	r3, #12
 8021958:	18fa      	adds	r2, r7, r3
 802195a:	1cfb      	adds	r3, r7, #3
 802195c:	7819      	ldrb	r1, [r3, #0]
 802195e:	6878      	ldr	r0, [r7, #4]
 8021960:	2309      	movs	r3, #9
 8021962:	f7ff fdaf 	bl	80214c4 <__updateField>
 8021966:	0003      	movs	r3, r0
 8021968:	e045      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
			case 'd':
			case 'D': {
				// ITSDK_SS_LORA_OTAA_APPKEY + ITSDK_SS_LORA_OTAA_NWKKEY
				itsdk_console_return_e ret;
				if ( (ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY)) == ITSDK_CONSOLE_SUCCES ) {
 802196a:	2523      	movs	r5, #35	; 0x23
 802196c:	197c      	adds	r4, r7, r5
 802196e:	230c      	movs	r3, #12
 8021970:	18fa      	adds	r2, r7, r3
 8021972:	1cfb      	adds	r3, r7, #3
 8021974:	7819      	ldrb	r1, [r3, #0]
 8021976:	6878      	ldr	r0, [r7, #4]
 8021978:	2309      	movs	r3, #9
 802197a:	f7ff fda3 	bl	80214c4 <__updateField>
 802197e:	0003      	movs	r3, r0
 8021980:	7023      	strb	r3, [r4, #0]
 8021982:	197b      	adds	r3, r7, r5
 8021984:	781b      	ldrb	r3, [r3, #0]
 8021986:	2b00      	cmp	r3, #0
 8021988:	d10b      	bne.n	80219a2 <_itsdk_secStore_consolePriv+0x366>
					ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 802198a:	2323      	movs	r3, #35	; 0x23
 802198c:	18fc      	adds	r4, r7, r3
 802198e:	230c      	movs	r3, #12
 8021990:	18fa      	adds	r2, r7, r3
 8021992:	1cfb      	adds	r3, r7, #3
 8021994:	7819      	ldrb	r1, [r3, #0]
 8021996:	6878      	ldr	r0, [r7, #4]
 8021998:	2308      	movs	r3, #8
 802199a:	f7ff fd93 	bl	80214c4 <__updateField>
 802199e:	0003      	movs	r3, r0
 80219a0:	7023      	strb	r3, [r4, #0]
				}
				return ret;
 80219a2:	2323      	movs	r3, #35	; 0x23
 80219a4:	18fb      	adds	r3, r7, r3
 80219a6:	781b      	ldrb	r3, [r3, #0]
 80219a8:	e025      	b.n	80219f6 <_itsdk_secStore_consolePriv+0x3ba>
 80219aa:	46c0      	nop			; (mov r8, r8)
 80219ac:	08027394 	.word	0x08027394
 80219b0:	080273a8 	.word	0x080273a8
 80219b4:	080273dc 	.word	0x080273dc
 80219b8:	08027414 	.word	0x08027414
 80219bc:	08027450 	.word	0x08027450
 80219c0:	0802747c 	.word	0x0802747c
 80219c4:	080274ac 	.word	0x080274ac
 80219c8:	080274dc 	.word	0x080274dc
 80219cc:	0802750c 	.word	0x0802750c
 80219d0:	0802753c 	.word	0x0802753c
 80219d4:	08027570 	.word	0x08027570
 80219d8:	080275a4 	.word	0x080275a4
 80219dc:	08028cac 	.word	0x08028cac
 80219e0:	0802738c 	.word	0x0802738c
 80219e4:	08027384 	.word	0x08027384
 80219e8:	080275d8 	.word	0x080275d8
 80219ec:	080275e0 	.word	0x080275e0
 80219f0:	08028d50 	.word	0x08028d50
				return __updateField(buffer, sz, b, ITSDK_SS_USER7);
	#endif
			} // switch
		} // Write case end
  } //Sz > 4
  return ITSDK_CONSOLE_NOTFOUND;
 80219f4:	2301      	movs	r3, #1
}
 80219f6:	0018      	movs	r0, r3
 80219f8:	46bd      	mov	sp, r7
 80219fa:	b00e      	add	sp, #56	; 0x38
 80219fc:	bdb0      	pop	{r4, r5, r7, pc}
 80219fe:	46c0      	nop			; (mov r8, r8)

08021a00 <itsdk_secStore_RegisterConsole>:
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 8021a00:	b580      	push	{r7, lr}
 8021a02:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
 8021a04:	4b08      	ldr	r3, [pc, #32]	; (8021a28 <itsdk_secStore_RegisterConsole+0x28>)
 8021a06:	4a09      	ldr	r2, [pc, #36]	; (8021a2c <itsdk_secStore_RegisterConsole+0x2c>)
 8021a08:	601a      	str	r2, [r3, #0]
	__console_secStore.console_public = NULL;
 8021a0a:	4b07      	ldr	r3, [pc, #28]	; (8021a28 <itsdk_secStore_RegisterConsole+0x28>)
 8021a0c:	2200      	movs	r2, #0
 8021a0e:	605a      	str	r2, [r3, #4]
	__console_secStore.next = NULL;
 8021a10:	4b05      	ldr	r3, [pc, #20]	; (8021a28 <itsdk_secStore_RegisterConsole+0x28>)
 8021a12:	2200      	movs	r2, #0
 8021a14:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_secStore);
 8021a16:	4b04      	ldr	r3, [pc, #16]	; (8021a28 <itsdk_secStore_RegisterConsole+0x28>)
 8021a18:	0018      	movs	r0, r3
 8021a1a:	f7fe fb73 	bl	8020104 <itsdk_console_registerCommand>
#endif
	return SS_SUCCESS;
 8021a1e:	2300      	movs	r3, #0
}
 8021a20:	0018      	movs	r0, r3
 8021a22:	46bd      	mov	sp, r7
 8021a24:	bd80      	pop	{r7, pc}
 8021a26:	46c0      	nop			; (mov r8, r8)
 8021a28:	20001d70 	.word	0x20001d70
 8021a2c:	0802163d 	.word	0x0802163d

08021a30 <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8021a30:	b5b0      	push	{r4, r5, r7, lr}
 8021a32:	b0b8      	sub	sp, #224	; 0xe0
 8021a34:	af00      	add	r7, sp, #0
 8021a36:	60f8      	str	r0, [r7, #12]
 8021a38:	60b9      	str	r1, [r7, #8]
 8021a3a:	603b      	str	r3, [r7, #0]
 8021a3c:	1dfb      	adds	r3, r7, #7
 8021a3e:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8021a40:	683b      	ldr	r3, [r7, #0]
 8021a42:	2110      	movs	r1, #16
 8021a44:	0018      	movs	r0, r3
 8021a46:	f000 f8cd 	bl	8021be4 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8021a4a:	24d0      	movs	r4, #208	; 0xd0
 8021a4c:	193a      	adds	r2, r7, r4
 8021a4e:	68fb      	ldr	r3, [r7, #12]
 8021a50:	0010      	movs	r0, r2
 8021a52:	0019      	movs	r1, r3
 8021a54:	2310      	movs	r3, #16
 8021a56:	001a      	movs	r2, r3
 8021a58:	f004 fa4e 	bl	8025ef8 <memcpy>
	bzero(ctx.Iv,16);
 8021a5c:	2510      	movs	r5, #16
 8021a5e:	197b      	adds	r3, r7, r5
 8021a60:	33b0      	adds	r3, #176	; 0xb0
 8021a62:	2110      	movs	r1, #16
 8021a64:	0018      	movs	r0, r3
 8021a66:	f004 fa16 	bl	8025e96 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8021a6a:	683a      	ldr	r2, [r7, #0]
 8021a6c:	197b      	adds	r3, r7, r5
 8021a6e:	0011      	movs	r1, r2
 8021a70:	0018      	movs	r0, r3
 8021a72:	f000 f9c5 	bl	8021e00 <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 8021a76:	1939      	adds	r1, r7, r4
 8021a78:	197b      	adds	r3, r7, r5
 8021a7a:	2210      	movs	r2, #16
 8021a7c:	0018      	movs	r0, r3
 8021a7e:	f001 f8d8 	bl	8022c32 <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 8021a82:	683b      	ldr	r3, [r7, #0]
 8021a84:	2110      	movs	r1, #16
 8021a86:	0018      	movs	r0, r3
 8021a88:	f000 f856 	bl	8021b38 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8021a8c:	68ba      	ldr	r2, [r7, #8]
 8021a8e:	193b      	adds	r3, r7, r4
 8021a90:	0010      	movs	r0, r2
 8021a92:	0019      	movs	r1, r3
 8021a94:	2310      	movs	r3, #16
 8021a96:	001a      	movs	r2, r3
 8021a98:	f004 fa2e 	bl	8025ef8 <memcpy>
	bzero(aesResult,16);
 8021a9c:	193b      	adds	r3, r7, r4
 8021a9e:	2110      	movs	r1, #16
 8021aa0:	0018      	movs	r0, r3
 8021aa2:	f004 f9f8 	bl	8025e96 <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 8021aa6:	197b      	adds	r3, r7, r5
 8021aa8:	21c0      	movs	r1, #192	; 0xc0
 8021aaa:	0018      	movs	r0, r3
 8021aac:	f004 f9f3 	bl	8025e96 <bzero>
}
 8021ab0:	46c0      	nop			; (mov r8, r8)
 8021ab2:	46bd      	mov	sp, r7
 8021ab4:	b038      	add	sp, #224	; 0xe0
 8021ab6:	bdb0      	pop	{r4, r5, r7, pc}

08021ab8 <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8021ab8:	b5b0      	push	{r4, r5, r7, lr}
 8021aba:	b0b8      	sub	sp, #224	; 0xe0
 8021abc:	af00      	add	r7, sp, #0
 8021abe:	60f8      	str	r0, [r7, #12]
 8021ac0:	60b9      	str	r1, [r7, #8]
 8021ac2:	603b      	str	r3, [r7, #0]
 8021ac4:	1dfb      	adds	r3, r7, #7
 8021ac6:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8021ac8:	683b      	ldr	r3, [r7, #0]
 8021aca:	2110      	movs	r1, #16
 8021acc:	0018      	movs	r0, r3
 8021ace:	f000 f889 	bl	8021be4 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8021ad2:	24d0      	movs	r4, #208	; 0xd0
 8021ad4:	193a      	adds	r2, r7, r4
 8021ad6:	68fb      	ldr	r3, [r7, #12]
 8021ad8:	0010      	movs	r0, r2
 8021ada:	0019      	movs	r1, r3
 8021adc:	2310      	movs	r3, #16
 8021ade:	001a      	movs	r2, r3
 8021ae0:	f004 fa0a 	bl	8025ef8 <memcpy>
	bzero(ctx.Iv,16);
 8021ae4:	2510      	movs	r5, #16
 8021ae6:	197b      	adds	r3, r7, r5
 8021ae8:	33b0      	adds	r3, #176	; 0xb0
 8021aea:	2110      	movs	r1, #16
 8021aec:	0018      	movs	r0, r3
 8021aee:	f004 f9d2 	bl	8025e96 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8021af2:	683a      	ldr	r2, [r7, #0]
 8021af4:	197b      	adds	r3, r7, r5
 8021af6:	0011      	movs	r1, r2
 8021af8:	0018      	movs	r0, r3
 8021afa:	f000 f981 	bl	8021e00 <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 8021afe:	1939      	adds	r1, r7, r4
 8021b00:	197b      	adds	r3, r7, r5
 8021b02:	2210      	movs	r2, #16
 8021b04:	0018      	movs	r0, r3
 8021b06:	f001 f8c3 	bl	8022c90 <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 8021b0a:	683b      	ldr	r3, [r7, #0]
 8021b0c:	2110      	movs	r1, #16
 8021b0e:	0018      	movs	r0, r3
 8021b10:	f000 f812 	bl	8021b38 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8021b14:	68ba      	ldr	r2, [r7, #8]
 8021b16:	193b      	adds	r3, r7, r4
 8021b18:	0010      	movs	r0, r2
 8021b1a:	0019      	movs	r1, r3
 8021b1c:	2310      	movs	r3, #16
 8021b1e:	001a      	movs	r2, r3
 8021b20:	f004 f9ea 	bl	8025ef8 <memcpy>
	bzero(aesResult,16);
 8021b24:	193b      	adds	r3, r7, r4
 8021b26:	2110      	movs	r1, #16
 8021b28:	0018      	movs	r0, r3
 8021b2a:	f004 f9b4 	bl	8025e96 <bzero>
}
 8021b2e:	46c0      	nop			; (mov r8, r8)
 8021b30:	46bd      	mov	sp, r7
 8021b32:	b038      	add	sp, #224	; 0xe0
 8021b34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021b38 <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 8021b38:	b580      	push	{r7, lr}
 8021b3a:	b084      	sub	sp, #16
 8021b3c:	af00      	add	r7, sp, #0
 8021b3e:	6078      	str	r0, [r7, #4]
 8021b40:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 8021b42:	683b      	ldr	r3, [r7, #0]
 8021b44:	2203      	movs	r2, #3
 8021b46:	4013      	ands	r3, r2
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	dd06      	ble.n	8021b5a <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 8021b4c:	683b      	ldr	r3, [r7, #0]
 8021b4e:	b29b      	uxth	r3, r3
 8021b50:	4a23      	ldr	r2, [pc, #140]	; (8021be0 <itsdk_encrypt_cifferKey+0xa8>)
 8021b52:	0019      	movs	r1, r3
 8021b54:	0010      	movs	r0, r2
 8021b56:	f001 f977 	bl	8022e48 <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 8021b5a:	2300      	movs	r3, #0
 8021b5c:	60fb      	str	r3, [r7, #12]
 8021b5e:	e037      	b.n	8021bd0 <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 8021b60:	68fb      	ldr	r3, [r7, #12]
 8021b62:	687a      	ldr	r2, [r7, #4]
 8021b64:	18d3      	adds	r3, r2, r3
 8021b66:	781a      	ldrb	r2, [r3, #0]
 8021b68:	68fb      	ldr	r3, [r7, #12]
 8021b6a:	6879      	ldr	r1, [r7, #4]
 8021b6c:	18cb      	adds	r3, r1, r3
 8021b6e:	2159      	movs	r1, #89	; 0x59
 8021b70:	4249      	negs	r1, r1
 8021b72:	404a      	eors	r2, r1
 8021b74:	b2d2      	uxtb	r2, r2
 8021b76:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 8021b78:	68fb      	ldr	r3, [r7, #12]
 8021b7a:	3301      	adds	r3, #1
 8021b7c:	687a      	ldr	r2, [r7, #4]
 8021b7e:	18d3      	adds	r3, r2, r3
 8021b80:	781a      	ldrb	r2, [r3, #0]
 8021b82:	68fb      	ldr	r3, [r7, #12]
 8021b84:	3301      	adds	r3, #1
 8021b86:	6879      	ldr	r1, [r7, #4]
 8021b88:	18cb      	adds	r3, r1, r3
 8021b8a:	2145      	movs	r1, #69	; 0x45
 8021b8c:	404a      	eors	r2, r1
 8021b8e:	b2d2      	uxtb	r2, r2
 8021b90:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 8021b92:	68fb      	ldr	r3, [r7, #12]
 8021b94:	3302      	adds	r3, #2
 8021b96:	687a      	ldr	r2, [r7, #4]
 8021b98:	18d3      	adds	r3, r2, r3
 8021b9a:	781a      	ldrb	r2, [r3, #0]
 8021b9c:	68fb      	ldr	r3, [r7, #12]
 8021b9e:	3302      	adds	r3, #2
 8021ba0:	6879      	ldr	r1, [r7, #4]
 8021ba2:	18cb      	adds	r3, r1, r3
 8021ba4:	2165      	movs	r1, #101	; 0x65
 8021ba6:	4249      	negs	r1, r1
 8021ba8:	404a      	eors	r2, r1
 8021baa:	b2d2      	uxtb	r2, r2
 8021bac:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 8021bae:	68fb      	ldr	r3, [r7, #12]
 8021bb0:	3303      	adds	r3, #3
 8021bb2:	687a      	ldr	r2, [r7, #4]
 8021bb4:	18d3      	adds	r3, r2, r3
 8021bb6:	781a      	ldrb	r2, [r3, #0]
 8021bb8:	68fb      	ldr	r3, [r7, #12]
 8021bba:	3303      	adds	r3, #3
 8021bbc:	6879      	ldr	r1, [r7, #4]
 8021bbe:	18cb      	adds	r3, r1, r3
 8021bc0:	213d      	movs	r1, #61	; 0x3d
 8021bc2:	4249      	negs	r1, r1
 8021bc4:	404a      	eors	r2, r1
 8021bc6:	b2d2      	uxtb	r2, r2
 8021bc8:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 8021bca:	68fb      	ldr	r3, [r7, #12]
 8021bcc:	3304      	adds	r3, #4
 8021bce:	60fb      	str	r3, [r7, #12]
 8021bd0:	68fa      	ldr	r2, [r7, #12]
 8021bd2:	683b      	ldr	r3, [r7, #0]
 8021bd4:	429a      	cmp	r2, r3
 8021bd6:	dbc3      	blt.n	8021b60 <itsdk_encrypt_cifferKey+0x28>
	}
}
 8021bd8:	46c0      	nop			; (mov r8, r8)
 8021bda:	46bd      	mov	sp, r7
 8021bdc:	b004      	add	sp, #16
 8021bde:	bd80      	pop	{r7, pc}
 8021be0:	d0000020 	.word	0xd0000020

08021be4 <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 8021be4:	b580      	push	{r7, lr}
 8021be6:	b082      	sub	sp, #8
 8021be8:	af00      	add	r7, sp, #0
 8021bea:	6078      	str	r0, [r7, #4]
 8021bec:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 8021bee:	683a      	ldr	r2, [r7, #0]
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	0011      	movs	r1, r2
 8021bf4:	0018      	movs	r0, r3
 8021bf6:	f7ff ff9f 	bl	8021b38 <itsdk_encrypt_cifferKey>
}
 8021bfa:	46c0      	nop			; (mov r8, r8)
 8021bfc:	46bd      	mov	sp, r7
 8021bfe:	b002      	add	sp, #8
 8021c00:	bd80      	pop	{r7, pc}

08021c02 <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(itsdk_bool_e force) {
 8021c02:	b580      	push	{r7, lr}
 8021c04:	b082      	sub	sp, #8
 8021c06:	af00      	add	r7, sp, #0
 8021c08:	0002      	movs	r2, r0
 8021c0a:	1dfb      	adds	r3, r7, #7
 8021c0c:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 8021c0e:	2300      	movs	r3, #0
}
 8021c10:	0018      	movs	r0, r3
 8021c12:	46bd      	mov	sp, r7
 8021c14:	b002      	add	sp, #8
 8021c16:	bd80      	pop	{r7, pc}

08021c18 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8021c18:	b590      	push	{r4, r7, lr}
 8021c1a:	b089      	sub	sp, #36	; 0x24
 8021c1c:	af00      	add	r7, sp, #0
 8021c1e:	6078      	str	r0, [r7, #4]
 8021c20:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8021c22:	2300      	movs	r3, #0
 8021c24:	61fb      	str	r3, [r7, #28]
 8021c26:	e030      	b.n	8021c8a <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8021c28:	69fb      	ldr	r3, [r7, #28]
 8021c2a:	009b      	lsls	r3, r3, #2
 8021c2c:	683a      	ldr	r2, [r7, #0]
 8021c2e:	18d2      	adds	r2, r2, r3
 8021c30:	69fb      	ldr	r3, [r7, #28]
 8021c32:	009b      	lsls	r3, r3, #2
 8021c34:	6879      	ldr	r1, [r7, #4]
 8021c36:	18cb      	adds	r3, r1, r3
 8021c38:	7812      	ldrb	r2, [r2, #0]
 8021c3a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8021c3c:	69fb      	ldr	r3, [r7, #28]
 8021c3e:	009b      	lsls	r3, r3, #2
 8021c40:	3301      	adds	r3, #1
 8021c42:	683a      	ldr	r2, [r7, #0]
 8021c44:	18d2      	adds	r2, r2, r3
 8021c46:	69fb      	ldr	r3, [r7, #28]
 8021c48:	009b      	lsls	r3, r3, #2
 8021c4a:	3301      	adds	r3, #1
 8021c4c:	6879      	ldr	r1, [r7, #4]
 8021c4e:	18cb      	adds	r3, r1, r3
 8021c50:	7812      	ldrb	r2, [r2, #0]
 8021c52:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8021c54:	69fb      	ldr	r3, [r7, #28]
 8021c56:	009b      	lsls	r3, r3, #2
 8021c58:	3302      	adds	r3, #2
 8021c5a:	683a      	ldr	r2, [r7, #0]
 8021c5c:	18d2      	adds	r2, r2, r3
 8021c5e:	69fb      	ldr	r3, [r7, #28]
 8021c60:	009b      	lsls	r3, r3, #2
 8021c62:	3302      	adds	r3, #2
 8021c64:	6879      	ldr	r1, [r7, #4]
 8021c66:	18cb      	adds	r3, r1, r3
 8021c68:	7812      	ldrb	r2, [r2, #0]
 8021c6a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8021c6c:	69fb      	ldr	r3, [r7, #28]
 8021c6e:	009b      	lsls	r3, r3, #2
 8021c70:	3303      	adds	r3, #3
 8021c72:	683a      	ldr	r2, [r7, #0]
 8021c74:	18d2      	adds	r2, r2, r3
 8021c76:	69fb      	ldr	r3, [r7, #28]
 8021c78:	009b      	lsls	r3, r3, #2
 8021c7a:	3303      	adds	r3, #3
 8021c7c:	6879      	ldr	r1, [r7, #4]
 8021c7e:	18cb      	adds	r3, r1, r3
 8021c80:	7812      	ldrb	r2, [r2, #0]
 8021c82:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8021c84:	69fb      	ldr	r3, [r7, #28]
 8021c86:	3301      	adds	r3, #1
 8021c88:	61fb      	str	r3, [r7, #28]
 8021c8a:	69fb      	ldr	r3, [r7, #28]
 8021c8c:	2b03      	cmp	r3, #3
 8021c8e:	d9cb      	bls.n	8021c28 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8021c90:	2304      	movs	r3, #4
 8021c92:	61fb      	str	r3, [r7, #28]
 8021c94:	e0a4      	b.n	8021de0 <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 8021c96:	69fb      	ldr	r3, [r7, #28]
 8021c98:	4a55      	ldr	r2, [pc, #340]	; (8021df0 <KeyExpansion+0x1d8>)
 8021c9a:	4694      	mov	ip, r2
 8021c9c:	4463      	add	r3, ip
 8021c9e:	009b      	lsls	r3, r3, #2
 8021ca0:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8021ca2:	687a      	ldr	r2, [r7, #4]
 8021ca4:	69bb      	ldr	r3, [r7, #24]
 8021ca6:	18d3      	adds	r3, r2, r3
 8021ca8:	781a      	ldrb	r2, [r3, #0]
 8021caa:	210c      	movs	r1, #12
 8021cac:	187b      	adds	r3, r7, r1
 8021cae:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 8021cb0:	69bb      	ldr	r3, [r7, #24]
 8021cb2:	3301      	adds	r3, #1
 8021cb4:	687a      	ldr	r2, [r7, #4]
 8021cb6:	18d3      	adds	r3, r2, r3
 8021cb8:	781a      	ldrb	r2, [r3, #0]
 8021cba:	187b      	adds	r3, r7, r1
 8021cbc:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 8021cbe:	69bb      	ldr	r3, [r7, #24]
 8021cc0:	3302      	adds	r3, #2
 8021cc2:	687a      	ldr	r2, [r7, #4]
 8021cc4:	18d3      	adds	r3, r2, r3
 8021cc6:	781a      	ldrb	r2, [r3, #0]
 8021cc8:	187b      	adds	r3, r7, r1
 8021cca:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 8021ccc:	69bb      	ldr	r3, [r7, #24]
 8021cce:	3303      	adds	r3, #3
 8021cd0:	687a      	ldr	r2, [r7, #4]
 8021cd2:	18d3      	adds	r3, r2, r3
 8021cd4:	781a      	ldrb	r2, [r3, #0]
 8021cd6:	187b      	adds	r3, r7, r1
 8021cd8:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 8021cda:	69fb      	ldr	r3, [r7, #28]
 8021cdc:	2203      	movs	r2, #3
 8021cde:	4013      	ands	r3, r2
 8021ce0:	d13b      	bne.n	8021d5a <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8021ce2:	2117      	movs	r1, #23
 8021ce4:	187b      	adds	r3, r7, r1
 8021ce6:	200c      	movs	r0, #12
 8021ce8:	183a      	adds	r2, r7, r0
 8021cea:	7812      	ldrb	r2, [r2, #0]
 8021cec:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 8021cee:	183b      	adds	r3, r7, r0
 8021cf0:	785a      	ldrb	r2, [r3, #1]
 8021cf2:	183b      	adds	r3, r7, r0
 8021cf4:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 8021cf6:	183b      	adds	r3, r7, r0
 8021cf8:	789a      	ldrb	r2, [r3, #2]
 8021cfa:	183b      	adds	r3, r7, r0
 8021cfc:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 8021cfe:	183b      	adds	r3, r7, r0
 8021d00:	78da      	ldrb	r2, [r3, #3]
 8021d02:	183b      	adds	r3, r7, r0
 8021d04:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 8021d06:	183b      	adds	r3, r7, r0
 8021d08:	187a      	adds	r2, r7, r1
 8021d0a:	7812      	ldrb	r2, [r2, #0]
 8021d0c:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8021d0e:	183b      	adds	r3, r7, r0
 8021d10:	781b      	ldrb	r3, [r3, #0]
 8021d12:	001a      	movs	r2, r3
 8021d14:	4b37      	ldr	r3, [pc, #220]	; (8021df4 <KeyExpansion+0x1dc>)
 8021d16:	5c9a      	ldrb	r2, [r3, r2]
 8021d18:	183b      	adds	r3, r7, r0
 8021d1a:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 8021d1c:	183b      	adds	r3, r7, r0
 8021d1e:	785b      	ldrb	r3, [r3, #1]
 8021d20:	001a      	movs	r2, r3
 8021d22:	4b34      	ldr	r3, [pc, #208]	; (8021df4 <KeyExpansion+0x1dc>)
 8021d24:	5c9a      	ldrb	r2, [r3, r2]
 8021d26:	183b      	adds	r3, r7, r0
 8021d28:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 8021d2a:	183b      	adds	r3, r7, r0
 8021d2c:	789b      	ldrb	r3, [r3, #2]
 8021d2e:	001a      	movs	r2, r3
 8021d30:	4b30      	ldr	r3, [pc, #192]	; (8021df4 <KeyExpansion+0x1dc>)
 8021d32:	5c9a      	ldrb	r2, [r3, r2]
 8021d34:	183b      	adds	r3, r7, r0
 8021d36:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 8021d38:	183b      	adds	r3, r7, r0
 8021d3a:	78db      	ldrb	r3, [r3, #3]
 8021d3c:	001a      	movs	r2, r3
 8021d3e:	4b2d      	ldr	r3, [pc, #180]	; (8021df4 <KeyExpansion+0x1dc>)
 8021d40:	5c9a      	ldrb	r2, [r3, r2]
 8021d42:	183b      	adds	r3, r7, r0
 8021d44:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8021d46:	183b      	adds	r3, r7, r0
 8021d48:	781a      	ldrb	r2, [r3, #0]
 8021d4a:	69fb      	ldr	r3, [r7, #28]
 8021d4c:	089b      	lsrs	r3, r3, #2
 8021d4e:	492a      	ldr	r1, [pc, #168]	; (8021df8 <KeyExpansion+0x1e0>)
 8021d50:	5ccb      	ldrb	r3, [r1, r3]
 8021d52:	4053      	eors	r3, r2
 8021d54:	b2da      	uxtb	r2, r3
 8021d56:	183b      	adds	r3, r7, r0
 8021d58:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8021d5a:	69fb      	ldr	r3, [r7, #28]
 8021d5c:	009b      	lsls	r3, r3, #2
 8021d5e:	613b      	str	r3, [r7, #16]
 8021d60:	69fb      	ldr	r3, [r7, #28]
 8021d62:	4a26      	ldr	r2, [pc, #152]	; (8021dfc <KeyExpansion+0x1e4>)
 8021d64:	4694      	mov	ip, r2
 8021d66:	4463      	add	r3, ip
 8021d68:	009b      	lsls	r3, r3, #2
 8021d6a:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8021d6c:	687a      	ldr	r2, [r7, #4]
 8021d6e:	69bb      	ldr	r3, [r7, #24]
 8021d70:	18d3      	adds	r3, r2, r3
 8021d72:	7819      	ldrb	r1, [r3, #0]
 8021d74:	240c      	movs	r4, #12
 8021d76:	193b      	adds	r3, r7, r4
 8021d78:	781a      	ldrb	r2, [r3, #0]
 8021d7a:	6878      	ldr	r0, [r7, #4]
 8021d7c:	693b      	ldr	r3, [r7, #16]
 8021d7e:	18c3      	adds	r3, r0, r3
 8021d80:	404a      	eors	r2, r1
 8021d82:	b2d2      	uxtb	r2, r2
 8021d84:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8021d86:	69bb      	ldr	r3, [r7, #24]
 8021d88:	3301      	adds	r3, #1
 8021d8a:	687a      	ldr	r2, [r7, #4]
 8021d8c:	18d3      	adds	r3, r2, r3
 8021d8e:	7819      	ldrb	r1, [r3, #0]
 8021d90:	193b      	adds	r3, r7, r4
 8021d92:	785a      	ldrb	r2, [r3, #1]
 8021d94:	693b      	ldr	r3, [r7, #16]
 8021d96:	3301      	adds	r3, #1
 8021d98:	6878      	ldr	r0, [r7, #4]
 8021d9a:	18c3      	adds	r3, r0, r3
 8021d9c:	404a      	eors	r2, r1
 8021d9e:	b2d2      	uxtb	r2, r2
 8021da0:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8021da2:	69bb      	ldr	r3, [r7, #24]
 8021da4:	3302      	adds	r3, #2
 8021da6:	687a      	ldr	r2, [r7, #4]
 8021da8:	18d3      	adds	r3, r2, r3
 8021daa:	7819      	ldrb	r1, [r3, #0]
 8021dac:	193b      	adds	r3, r7, r4
 8021dae:	789a      	ldrb	r2, [r3, #2]
 8021db0:	693b      	ldr	r3, [r7, #16]
 8021db2:	3302      	adds	r3, #2
 8021db4:	6878      	ldr	r0, [r7, #4]
 8021db6:	18c3      	adds	r3, r0, r3
 8021db8:	404a      	eors	r2, r1
 8021dba:	b2d2      	uxtb	r2, r2
 8021dbc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8021dbe:	69bb      	ldr	r3, [r7, #24]
 8021dc0:	3303      	adds	r3, #3
 8021dc2:	687a      	ldr	r2, [r7, #4]
 8021dc4:	18d3      	adds	r3, r2, r3
 8021dc6:	7819      	ldrb	r1, [r3, #0]
 8021dc8:	193b      	adds	r3, r7, r4
 8021dca:	78da      	ldrb	r2, [r3, #3]
 8021dcc:	693b      	ldr	r3, [r7, #16]
 8021dce:	3303      	adds	r3, #3
 8021dd0:	6878      	ldr	r0, [r7, #4]
 8021dd2:	18c3      	adds	r3, r0, r3
 8021dd4:	404a      	eors	r2, r1
 8021dd6:	b2d2      	uxtb	r2, r2
 8021dd8:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8021dda:	69fb      	ldr	r3, [r7, #28]
 8021ddc:	3301      	adds	r3, #1
 8021dde:	61fb      	str	r3, [r7, #28]
 8021de0:	69fb      	ldr	r3, [r7, #28]
 8021de2:	2b2b      	cmp	r3, #43	; 0x2b
 8021de4:	d800      	bhi.n	8021de8 <KeyExpansion+0x1d0>
 8021de6:	e756      	b.n	8021c96 <KeyExpansion+0x7e>
  }
}
 8021de8:	46c0      	nop			; (mov r8, r8)
 8021dea:	46bd      	mov	sp, r7
 8021dec:	b009      	add	sp, #36	; 0x24
 8021dee:	bd90      	pop	{r4, r7, pc}
 8021df0:	3fffffff 	.word	0x3fffffff
 8021df4:	08028e24 	.word	0x08028e24
 8021df8:	08029024 	.word	0x08029024
 8021dfc:	3ffffffc 	.word	0x3ffffffc

08021e00 <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8021e00:	b580      	push	{r7, lr}
 8021e02:	b082      	sub	sp, #8
 8021e04:	af00      	add	r7, sp, #0
 8021e06:	6078      	str	r0, [r7, #4]
 8021e08:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	683a      	ldr	r2, [r7, #0]
 8021e0e:	0011      	movs	r1, r2
 8021e10:	0018      	movs	r0, r3
 8021e12:	f7ff ff01 	bl	8021c18 <KeyExpansion>
}
 8021e16:	46c0      	nop			; (mov r8, r8)
 8021e18:	46bd      	mov	sp, r7
 8021e1a:	b002      	add	sp, #8
 8021e1c:	bd80      	pop	{r7, pc}

08021e1e <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 8021e1e:	b5b0      	push	{r4, r5, r7, lr}
 8021e20:	b086      	sub	sp, #24
 8021e22:	af00      	add	r7, sp, #0
 8021e24:	60b9      	str	r1, [r7, #8]
 8021e26:	607a      	str	r2, [r7, #4]
 8021e28:	230f      	movs	r3, #15
 8021e2a:	18fb      	adds	r3, r7, r3
 8021e2c:	1c02      	adds	r2, r0, #0
 8021e2e:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8021e30:	2317      	movs	r3, #23
 8021e32:	18fb      	adds	r3, r7, r3
 8021e34:	2200      	movs	r2, #0
 8021e36:	701a      	strb	r2, [r3, #0]
 8021e38:	e038      	b.n	8021eac <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 8021e3a:	2316      	movs	r3, #22
 8021e3c:	18fb      	adds	r3, r7, r3
 8021e3e:	2200      	movs	r2, #0
 8021e40:	701a      	strb	r2, [r3, #0]
 8021e42:	e028      	b.n	8021e96 <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8021e44:	2517      	movs	r5, #23
 8021e46:	197b      	adds	r3, r7, r5
 8021e48:	781a      	ldrb	r2, [r3, #0]
 8021e4a:	2416      	movs	r4, #22
 8021e4c:	193b      	adds	r3, r7, r4
 8021e4e:	781b      	ldrb	r3, [r3, #0]
 8021e50:	68b9      	ldr	r1, [r7, #8]
 8021e52:	0092      	lsls	r2, r2, #2
 8021e54:	188a      	adds	r2, r1, r2
 8021e56:	5cd0      	ldrb	r0, [r2, r3]
 8021e58:	230f      	movs	r3, #15
 8021e5a:	18fb      	adds	r3, r7, r3
 8021e5c:	781b      	ldrb	r3, [r3, #0]
 8021e5e:	009a      	lsls	r2, r3, #2
 8021e60:	197b      	adds	r3, r7, r5
 8021e62:	781b      	ldrb	r3, [r3, #0]
 8021e64:	18d3      	adds	r3, r2, r3
 8021e66:	009a      	lsls	r2, r3, #2
 8021e68:	193b      	adds	r3, r7, r4
 8021e6a:	781b      	ldrb	r3, [r3, #0]
 8021e6c:	18d3      	adds	r3, r2, r3
 8021e6e:	001a      	movs	r2, r3
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	189b      	adds	r3, r3, r2
 8021e74:	7819      	ldrb	r1, [r3, #0]
 8021e76:	197b      	adds	r3, r7, r5
 8021e78:	781a      	ldrb	r2, [r3, #0]
 8021e7a:	193b      	adds	r3, r7, r4
 8021e7c:	781b      	ldrb	r3, [r3, #0]
 8021e7e:	4041      	eors	r1, r0
 8021e80:	b2c8      	uxtb	r0, r1
 8021e82:	68b9      	ldr	r1, [r7, #8]
 8021e84:	0092      	lsls	r2, r2, #2
 8021e86:	188a      	adds	r2, r1, r2
 8021e88:	1c01      	adds	r1, r0, #0
 8021e8a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8021e8c:	193b      	adds	r3, r7, r4
 8021e8e:	193a      	adds	r2, r7, r4
 8021e90:	7812      	ldrb	r2, [r2, #0]
 8021e92:	3201      	adds	r2, #1
 8021e94:	701a      	strb	r2, [r3, #0]
 8021e96:	2316      	movs	r3, #22
 8021e98:	18fb      	adds	r3, r7, r3
 8021e9a:	781b      	ldrb	r3, [r3, #0]
 8021e9c:	2b03      	cmp	r3, #3
 8021e9e:	d9d1      	bls.n	8021e44 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 8021ea0:	2217      	movs	r2, #23
 8021ea2:	18bb      	adds	r3, r7, r2
 8021ea4:	18ba      	adds	r2, r7, r2
 8021ea6:	7812      	ldrb	r2, [r2, #0]
 8021ea8:	3201      	adds	r2, #1
 8021eaa:	701a      	strb	r2, [r3, #0]
 8021eac:	2317      	movs	r3, #23
 8021eae:	18fb      	adds	r3, r7, r3
 8021eb0:	781b      	ldrb	r3, [r3, #0]
 8021eb2:	2b03      	cmp	r3, #3
 8021eb4:	d9c1      	bls.n	8021e3a <AddRoundKey+0x1c>
    }
  }
}
 8021eb6:	46c0      	nop			; (mov r8, r8)
 8021eb8:	46bd      	mov	sp, r7
 8021eba:	b006      	add	sp, #24
 8021ebc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021ec0 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8021ec0:	b5b0      	push	{r4, r5, r7, lr}
 8021ec2:	b084      	sub	sp, #16
 8021ec4:	af00      	add	r7, sp, #0
 8021ec6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8021ec8:	230f      	movs	r3, #15
 8021eca:	18fb      	adds	r3, r7, r3
 8021ecc:	2200      	movs	r2, #0
 8021ece:	701a      	strb	r2, [r3, #0]
 8021ed0:	e02a      	b.n	8021f28 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8021ed2:	230e      	movs	r3, #14
 8021ed4:	18fb      	adds	r3, r7, r3
 8021ed6:	2200      	movs	r2, #0
 8021ed8:	701a      	strb	r2, [r3, #0]
 8021eda:	e01a      	b.n	8021f12 <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8021edc:	240e      	movs	r4, #14
 8021ede:	193b      	adds	r3, r7, r4
 8021ee0:	781a      	ldrb	r2, [r3, #0]
 8021ee2:	250f      	movs	r5, #15
 8021ee4:	197b      	adds	r3, r7, r5
 8021ee6:	781b      	ldrb	r3, [r3, #0]
 8021ee8:	6879      	ldr	r1, [r7, #4]
 8021eea:	0092      	lsls	r2, r2, #2
 8021eec:	188a      	adds	r2, r1, r2
 8021eee:	5cd3      	ldrb	r3, [r2, r3]
 8021ef0:	0018      	movs	r0, r3
 8021ef2:	193b      	adds	r3, r7, r4
 8021ef4:	781a      	ldrb	r2, [r3, #0]
 8021ef6:	197b      	adds	r3, r7, r5
 8021ef8:	781b      	ldrb	r3, [r3, #0]
 8021efa:	4910      	ldr	r1, [pc, #64]	; (8021f3c <SubBytes+0x7c>)
 8021efc:	5c08      	ldrb	r0, [r1, r0]
 8021efe:	6879      	ldr	r1, [r7, #4]
 8021f00:	0092      	lsls	r2, r2, #2
 8021f02:	188a      	adds	r2, r1, r2
 8021f04:	1c01      	adds	r1, r0, #0
 8021f06:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8021f08:	193b      	adds	r3, r7, r4
 8021f0a:	193a      	adds	r2, r7, r4
 8021f0c:	7812      	ldrb	r2, [r2, #0]
 8021f0e:	3201      	adds	r2, #1
 8021f10:	701a      	strb	r2, [r3, #0]
 8021f12:	230e      	movs	r3, #14
 8021f14:	18fb      	adds	r3, r7, r3
 8021f16:	781b      	ldrb	r3, [r3, #0]
 8021f18:	2b03      	cmp	r3, #3
 8021f1a:	d9df      	bls.n	8021edc <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8021f1c:	220f      	movs	r2, #15
 8021f1e:	18bb      	adds	r3, r7, r2
 8021f20:	18ba      	adds	r2, r7, r2
 8021f22:	7812      	ldrb	r2, [r2, #0]
 8021f24:	3201      	adds	r2, #1
 8021f26:	701a      	strb	r2, [r3, #0]
 8021f28:	230f      	movs	r3, #15
 8021f2a:	18fb      	adds	r3, r7, r3
 8021f2c:	781b      	ldrb	r3, [r3, #0]
 8021f2e:	2b03      	cmp	r3, #3
 8021f30:	d9cf      	bls.n	8021ed2 <SubBytes+0x12>
    }
  }
}
 8021f32:	46c0      	nop			; (mov r8, r8)
 8021f34:	46bd      	mov	sp, r7
 8021f36:	b004      	add	sp, #16
 8021f38:	bdb0      	pop	{r4, r5, r7, pc}
 8021f3a:	46c0      	nop			; (mov r8, r8)
 8021f3c:	08028e24 	.word	0x08028e24

08021f40 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8021f40:	b580      	push	{r7, lr}
 8021f42:	b084      	sub	sp, #16
 8021f44:	af00      	add	r7, sp, #0
 8021f46:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8021f48:	210f      	movs	r1, #15
 8021f4a:	187b      	adds	r3, r7, r1
 8021f4c:	687a      	ldr	r2, [r7, #4]
 8021f4e:	7852      	ldrb	r2, [r2, #1]
 8021f50:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	795a      	ldrb	r2, [r3, #5]
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	7a5a      	ldrb	r2, [r3, #9]
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8021f62:	687b      	ldr	r3, [r7, #4]
 8021f64:	7b5a      	ldrb	r2, [r3, #13]
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8021f6a:	687b      	ldr	r3, [r7, #4]
 8021f6c:	187a      	adds	r2, r7, r1
 8021f6e:	7812      	ldrb	r2, [r2, #0]
 8021f70:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8021f72:	187b      	adds	r3, r7, r1
 8021f74:	687a      	ldr	r2, [r7, #4]
 8021f76:	7892      	ldrb	r2, [r2, #2]
 8021f78:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	7a9a      	ldrb	r2, [r3, #10]
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8021f82:	687b      	ldr	r3, [r7, #4]
 8021f84:	187a      	adds	r2, r7, r1
 8021f86:	7812      	ldrb	r2, [r2, #0]
 8021f88:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8021f8a:	187b      	adds	r3, r7, r1
 8021f8c:	687a      	ldr	r2, [r7, #4]
 8021f8e:	7992      	ldrb	r2, [r2, #6]
 8021f90:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	7b9a      	ldrb	r2, [r3, #14]
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	187a      	adds	r2, r7, r1
 8021f9e:	7812      	ldrb	r2, [r2, #0]
 8021fa0:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8021fa2:	187b      	adds	r3, r7, r1
 8021fa4:	687a      	ldr	r2, [r7, #4]
 8021fa6:	78d2      	ldrb	r2, [r2, #3]
 8021fa8:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	7bda      	ldrb	r2, [r3, #15]
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	7ada      	ldrb	r2, [r3, #11]
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	79da      	ldrb	r2, [r3, #7]
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	187a      	adds	r2, r7, r1
 8021fc6:	7812      	ldrb	r2, [r2, #0]
 8021fc8:	71da      	strb	r2, [r3, #7]
}
 8021fca:	46c0      	nop			; (mov r8, r8)
 8021fcc:	46bd      	mov	sp, r7
 8021fce:	b004      	add	sp, #16
 8021fd0:	bd80      	pop	{r7, pc}

08021fd2 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8021fd2:	b580      	push	{r7, lr}
 8021fd4:	b082      	sub	sp, #8
 8021fd6:	af00      	add	r7, sp, #0
 8021fd8:	0002      	movs	r2, r0
 8021fda:	1dfb      	adds	r3, r7, #7
 8021fdc:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8021fde:	1dfb      	adds	r3, r7, #7
 8021fe0:	781b      	ldrb	r3, [r3, #0]
 8021fe2:	005b      	lsls	r3, r3, #1
 8021fe4:	b25a      	sxtb	r2, r3
 8021fe6:	1dfb      	adds	r3, r7, #7
 8021fe8:	781b      	ldrb	r3, [r3, #0]
 8021fea:	09db      	lsrs	r3, r3, #7
 8021fec:	b2db      	uxtb	r3, r3
 8021fee:	1c19      	adds	r1, r3, #0
 8021ff0:	1c0b      	adds	r3, r1, #0
 8021ff2:	18db      	adds	r3, r3, r3
 8021ff4:	185b      	adds	r3, r3, r1
 8021ff6:	1c19      	adds	r1, r3, #0
 8021ff8:	00c8      	lsls	r0, r1, #3
 8021ffa:	1c19      	adds	r1, r3, #0
 8021ffc:	1c03      	adds	r3, r0, #0
 8021ffe:	18cb      	adds	r3, r1, r3
 8022000:	b2db      	uxtb	r3, r3
 8022002:	b25b      	sxtb	r3, r3
 8022004:	4053      	eors	r3, r2
 8022006:	b25b      	sxtb	r3, r3
 8022008:	b2db      	uxtb	r3, r3
}
 802200a:	0018      	movs	r0, r3
 802200c:	46bd      	mov	sp, r7
 802200e:	b002      	add	sp, #8
 8022010:	bd80      	pop	{r7, pc}

08022012 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8022012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022014:	b085      	sub	sp, #20
 8022016:	af00      	add	r7, sp, #0
 8022018:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 802201a:	230f      	movs	r3, #15
 802201c:	18fb      	adds	r3, r7, r3
 802201e:	2200      	movs	r2, #0
 8022020:	701a      	strb	r2, [r3, #0]
 8022022:	e0f0      	b.n	8022206 <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 8022024:	250f      	movs	r5, #15
 8022026:	197b      	adds	r3, r7, r5
 8022028:	7819      	ldrb	r1, [r3, #0]
 802202a:	230e      	movs	r3, #14
 802202c:	18fb      	adds	r3, r7, r3
 802202e:	687a      	ldr	r2, [r7, #4]
 8022030:	0089      	lsls	r1, r1, #2
 8022032:	5c8a      	ldrb	r2, [r1, r2]
 8022034:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8022036:	197b      	adds	r3, r7, r5
 8022038:	781a      	ldrb	r2, [r3, #0]
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	0092      	lsls	r2, r2, #2
 802203e:	5cd2      	ldrb	r2, [r2, r3]
 8022040:	197b      	adds	r3, r7, r5
 8022042:	781b      	ldrb	r3, [r3, #0]
 8022044:	6879      	ldr	r1, [r7, #4]
 8022046:	009b      	lsls	r3, r3, #2
 8022048:	18cb      	adds	r3, r1, r3
 802204a:	3301      	adds	r3, #1
 802204c:	781b      	ldrb	r3, [r3, #0]
 802204e:	4053      	eors	r3, r2
 8022050:	b2da      	uxtb	r2, r3
 8022052:	197b      	adds	r3, r7, r5
 8022054:	781b      	ldrb	r3, [r3, #0]
 8022056:	6879      	ldr	r1, [r7, #4]
 8022058:	009b      	lsls	r3, r3, #2
 802205a:	18cb      	adds	r3, r1, r3
 802205c:	3302      	adds	r3, #2
 802205e:	781b      	ldrb	r3, [r3, #0]
 8022060:	4053      	eors	r3, r2
 8022062:	b2d9      	uxtb	r1, r3
 8022064:	197b      	adds	r3, r7, r5
 8022066:	781b      	ldrb	r3, [r3, #0]
 8022068:	687a      	ldr	r2, [r7, #4]
 802206a:	009b      	lsls	r3, r3, #2
 802206c:	18d3      	adds	r3, r2, r3
 802206e:	3303      	adds	r3, #3
 8022070:	781a      	ldrb	r2, [r3, #0]
 8022072:	230d      	movs	r3, #13
 8022074:	18fb      	adds	r3, r7, r3
 8022076:	404a      	eors	r2, r1
 8022078:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 802207a:	197b      	adds	r3, r7, r5
 802207c:	781a      	ldrb	r2, [r3, #0]
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	0092      	lsls	r2, r2, #2
 8022082:	5cd1      	ldrb	r1, [r2, r3]
 8022084:	197b      	adds	r3, r7, r5
 8022086:	781b      	ldrb	r3, [r3, #0]
 8022088:	687a      	ldr	r2, [r7, #4]
 802208a:	009b      	lsls	r3, r3, #2
 802208c:	18d3      	adds	r3, r2, r3
 802208e:	3301      	adds	r3, #1
 8022090:	781a      	ldrb	r2, [r3, #0]
 8022092:	200c      	movs	r0, #12
 8022094:	183b      	adds	r3, r7, r0
 8022096:	404a      	eors	r2, r1
 8022098:	701a      	strb	r2, [r3, #0]
 802209a:	183c      	adds	r4, r7, r0
 802209c:	0006      	movs	r6, r0
 802209e:	183b      	adds	r3, r7, r0
 80220a0:	781b      	ldrb	r3, [r3, #0]
 80220a2:	0018      	movs	r0, r3
 80220a4:	f7ff ff95 	bl	8021fd2 <xtime>
 80220a8:	0003      	movs	r3, r0
 80220aa:	7023      	strb	r3, [r4, #0]
 80220ac:	197b      	adds	r3, r7, r5
 80220ae:	781a      	ldrb	r2, [r3, #0]
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	0092      	lsls	r2, r2, #2
 80220b4:	5cd1      	ldrb	r1, [r2, r3]
 80220b6:	0030      	movs	r0, r6
 80220b8:	183a      	adds	r2, r7, r0
 80220ba:	230d      	movs	r3, #13
 80220bc:	18fb      	adds	r3, r7, r3
 80220be:	7812      	ldrb	r2, [r2, #0]
 80220c0:	781b      	ldrb	r3, [r3, #0]
 80220c2:	4053      	eors	r3, r2
 80220c4:	b2db      	uxtb	r3, r3
 80220c6:	197a      	adds	r2, r7, r5
 80220c8:	7812      	ldrb	r2, [r2, #0]
 80220ca:	404b      	eors	r3, r1
 80220cc:	b2d9      	uxtb	r1, r3
 80220ce:	687b      	ldr	r3, [r7, #4]
 80220d0:	0092      	lsls	r2, r2, #2
 80220d2:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80220d4:	197b      	adds	r3, r7, r5
 80220d6:	781b      	ldrb	r3, [r3, #0]
 80220d8:	687a      	ldr	r2, [r7, #4]
 80220da:	009b      	lsls	r3, r3, #2
 80220dc:	18d3      	adds	r3, r2, r3
 80220de:	3301      	adds	r3, #1
 80220e0:	7819      	ldrb	r1, [r3, #0]
 80220e2:	197b      	adds	r3, r7, r5
 80220e4:	781b      	ldrb	r3, [r3, #0]
 80220e6:	687a      	ldr	r2, [r7, #4]
 80220e8:	009b      	lsls	r3, r3, #2
 80220ea:	18d3      	adds	r3, r2, r3
 80220ec:	3302      	adds	r3, #2
 80220ee:	781a      	ldrb	r2, [r3, #0]
 80220f0:	183b      	adds	r3, r7, r0
 80220f2:	404a      	eors	r2, r1
 80220f4:	701a      	strb	r2, [r3, #0]
 80220f6:	183c      	adds	r4, r7, r0
 80220f8:	0006      	movs	r6, r0
 80220fa:	183b      	adds	r3, r7, r0
 80220fc:	781b      	ldrb	r3, [r3, #0]
 80220fe:	0018      	movs	r0, r3
 8022100:	f7ff ff67 	bl	8021fd2 <xtime>
 8022104:	0003      	movs	r3, r0
 8022106:	7023      	strb	r3, [r4, #0]
 8022108:	197b      	adds	r3, r7, r5
 802210a:	781b      	ldrb	r3, [r3, #0]
 802210c:	687a      	ldr	r2, [r7, #4]
 802210e:	009b      	lsls	r3, r3, #2
 8022110:	18d3      	adds	r3, r2, r3
 8022112:	3301      	adds	r3, #1
 8022114:	7819      	ldrb	r1, [r3, #0]
 8022116:	0030      	movs	r0, r6
 8022118:	183a      	adds	r2, r7, r0
 802211a:	230d      	movs	r3, #13
 802211c:	18fb      	adds	r3, r7, r3
 802211e:	7812      	ldrb	r2, [r2, #0]
 8022120:	781b      	ldrb	r3, [r3, #0]
 8022122:	4053      	eors	r3, r2
 8022124:	b2da      	uxtb	r2, r3
 8022126:	197b      	adds	r3, r7, r5
 8022128:	781b      	ldrb	r3, [r3, #0]
 802212a:	404a      	eors	r2, r1
 802212c:	b2d1      	uxtb	r1, r2
 802212e:	687a      	ldr	r2, [r7, #4]
 8022130:	009b      	lsls	r3, r3, #2
 8022132:	18d3      	adds	r3, r2, r3
 8022134:	3301      	adds	r3, #1
 8022136:	1c0a      	adds	r2, r1, #0
 8022138:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 802213a:	197b      	adds	r3, r7, r5
 802213c:	781b      	ldrb	r3, [r3, #0]
 802213e:	687a      	ldr	r2, [r7, #4]
 8022140:	009b      	lsls	r3, r3, #2
 8022142:	18d3      	adds	r3, r2, r3
 8022144:	3302      	adds	r3, #2
 8022146:	7819      	ldrb	r1, [r3, #0]
 8022148:	197b      	adds	r3, r7, r5
 802214a:	781b      	ldrb	r3, [r3, #0]
 802214c:	687a      	ldr	r2, [r7, #4]
 802214e:	009b      	lsls	r3, r3, #2
 8022150:	18d3      	adds	r3, r2, r3
 8022152:	3303      	adds	r3, #3
 8022154:	781a      	ldrb	r2, [r3, #0]
 8022156:	183b      	adds	r3, r7, r0
 8022158:	404a      	eors	r2, r1
 802215a:	701a      	strb	r2, [r3, #0]
 802215c:	183c      	adds	r4, r7, r0
 802215e:	0006      	movs	r6, r0
 8022160:	183b      	adds	r3, r7, r0
 8022162:	781b      	ldrb	r3, [r3, #0]
 8022164:	0018      	movs	r0, r3
 8022166:	f7ff ff34 	bl	8021fd2 <xtime>
 802216a:	0003      	movs	r3, r0
 802216c:	7023      	strb	r3, [r4, #0]
 802216e:	197b      	adds	r3, r7, r5
 8022170:	781b      	ldrb	r3, [r3, #0]
 8022172:	687a      	ldr	r2, [r7, #4]
 8022174:	009b      	lsls	r3, r3, #2
 8022176:	18d3      	adds	r3, r2, r3
 8022178:	3302      	adds	r3, #2
 802217a:	7819      	ldrb	r1, [r3, #0]
 802217c:	0030      	movs	r0, r6
 802217e:	183a      	adds	r2, r7, r0
 8022180:	230d      	movs	r3, #13
 8022182:	18fb      	adds	r3, r7, r3
 8022184:	7812      	ldrb	r2, [r2, #0]
 8022186:	781b      	ldrb	r3, [r3, #0]
 8022188:	4053      	eors	r3, r2
 802218a:	b2da      	uxtb	r2, r3
 802218c:	197b      	adds	r3, r7, r5
 802218e:	781b      	ldrb	r3, [r3, #0]
 8022190:	404a      	eors	r2, r1
 8022192:	b2d1      	uxtb	r1, r2
 8022194:	687a      	ldr	r2, [r7, #4]
 8022196:	009b      	lsls	r3, r3, #2
 8022198:	18d3      	adds	r3, r2, r3
 802219a:	3302      	adds	r3, #2
 802219c:	1c0a      	adds	r2, r1, #0
 802219e:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80221a0:	197b      	adds	r3, r7, r5
 80221a2:	781b      	ldrb	r3, [r3, #0]
 80221a4:	687a      	ldr	r2, [r7, #4]
 80221a6:	009b      	lsls	r3, r3, #2
 80221a8:	18d3      	adds	r3, r2, r3
 80221aa:	3303      	adds	r3, #3
 80221ac:	7819      	ldrb	r1, [r3, #0]
 80221ae:	183b      	adds	r3, r7, r0
 80221b0:	220e      	movs	r2, #14
 80221b2:	18ba      	adds	r2, r7, r2
 80221b4:	7812      	ldrb	r2, [r2, #0]
 80221b6:	404a      	eors	r2, r1
 80221b8:	701a      	strb	r2, [r3, #0]
 80221ba:	183c      	adds	r4, r7, r0
 80221bc:	0006      	movs	r6, r0
 80221be:	183b      	adds	r3, r7, r0
 80221c0:	781b      	ldrb	r3, [r3, #0]
 80221c2:	0018      	movs	r0, r3
 80221c4:	f7ff ff05 	bl	8021fd2 <xtime>
 80221c8:	0003      	movs	r3, r0
 80221ca:	7023      	strb	r3, [r4, #0]
 80221cc:	197b      	adds	r3, r7, r5
 80221ce:	781b      	ldrb	r3, [r3, #0]
 80221d0:	687a      	ldr	r2, [r7, #4]
 80221d2:	009b      	lsls	r3, r3, #2
 80221d4:	18d3      	adds	r3, r2, r3
 80221d6:	3303      	adds	r3, #3
 80221d8:	7819      	ldrb	r1, [r3, #0]
 80221da:	19ba      	adds	r2, r7, r6
 80221dc:	230d      	movs	r3, #13
 80221de:	18fb      	adds	r3, r7, r3
 80221e0:	7812      	ldrb	r2, [r2, #0]
 80221e2:	781b      	ldrb	r3, [r3, #0]
 80221e4:	4053      	eors	r3, r2
 80221e6:	b2da      	uxtb	r2, r3
 80221e8:	197b      	adds	r3, r7, r5
 80221ea:	781b      	ldrb	r3, [r3, #0]
 80221ec:	404a      	eors	r2, r1
 80221ee:	b2d1      	uxtb	r1, r2
 80221f0:	687a      	ldr	r2, [r7, #4]
 80221f2:	009b      	lsls	r3, r3, #2
 80221f4:	18d3      	adds	r3, r2, r3
 80221f6:	3303      	adds	r3, #3
 80221f8:	1c0a      	adds	r2, r1, #0
 80221fa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 80221fc:	197b      	adds	r3, r7, r5
 80221fe:	197a      	adds	r2, r7, r5
 8022200:	7812      	ldrb	r2, [r2, #0]
 8022202:	3201      	adds	r2, #1
 8022204:	701a      	strb	r2, [r3, #0]
 8022206:	230f      	movs	r3, #15
 8022208:	18fb      	adds	r3, r7, r3
 802220a:	781b      	ldrb	r3, [r3, #0]
 802220c:	2b03      	cmp	r3, #3
 802220e:	d800      	bhi.n	8022212 <MixColumns+0x200>
 8022210:	e708      	b.n	8022024 <MixColumns+0x12>
  }
}
 8022212:	46c0      	nop			; (mov r8, r8)
 8022214:	46bd      	mov	sp, r7
 8022216:	b005      	add	sp, #20
 8022218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802221a <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 802221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802221c:	b085      	sub	sp, #20
 802221e:	af00      	add	r7, sp, #0
 8022220:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8022222:	2300      	movs	r3, #0
 8022224:	60fb      	str	r3, [r7, #12]
 8022226:	e3c3      	b.n	80229b0 <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 8022228:	260b      	movs	r6, #11
 802222a:	19bb      	adds	r3, r7, r6
 802222c:	687a      	ldr	r2, [r7, #4]
 802222e:	68f9      	ldr	r1, [r7, #12]
 8022230:	0089      	lsls	r1, r1, #2
 8022232:	5c8a      	ldrb	r2, [r1, r2]
 8022234:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 8022236:	250a      	movs	r5, #10
 8022238:	197b      	adds	r3, r7, r5
 802223a:	6879      	ldr	r1, [r7, #4]
 802223c:	68fa      	ldr	r2, [r7, #12]
 802223e:	0092      	lsls	r2, r2, #2
 8022240:	188a      	adds	r2, r1, r2
 8022242:	3201      	adds	r2, #1
 8022244:	7812      	ldrb	r2, [r2, #0]
 8022246:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 8022248:	2409      	movs	r4, #9
 802224a:	193b      	adds	r3, r7, r4
 802224c:	6879      	ldr	r1, [r7, #4]
 802224e:	68fa      	ldr	r2, [r7, #12]
 8022250:	0092      	lsls	r2, r2, #2
 8022252:	188a      	adds	r2, r1, r2
 8022254:	3202      	adds	r2, #2
 8022256:	7812      	ldrb	r2, [r2, #0]
 8022258:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 802225a:	2308      	movs	r3, #8
 802225c:	18fb      	adds	r3, r7, r3
 802225e:	6879      	ldr	r1, [r7, #4]
 8022260:	68fa      	ldr	r2, [r7, #12]
 8022262:	0092      	lsls	r2, r2, #2
 8022264:	188a      	adds	r2, r1, r2
 8022266:	3203      	adds	r2, #3
 8022268:	7812      	ldrb	r2, [r2, #0]
 802226a:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 802226c:	19bb      	adds	r3, r7, r6
 802226e:	781b      	ldrb	r3, [r3, #0]
 8022270:	0018      	movs	r0, r3
 8022272:	f7ff feae 	bl	8021fd2 <xtime>
 8022276:	0003      	movs	r3, r0
 8022278:	0018      	movs	r0, r3
 802227a:	f7ff feaa 	bl	8021fd2 <xtime>
 802227e:	0003      	movs	r3, r0
 8022280:	0018      	movs	r0, r3
 8022282:	f7ff fea6 	bl	8021fd2 <xtime>
 8022286:	0003      	movs	r3, r0
 8022288:	0018      	movs	r0, r3
 802228a:	f7ff fea2 	bl	8021fd2 <xtime>
 802228e:	197b      	adds	r3, r7, r5
 8022290:	781b      	ldrb	r3, [r3, #0]
 8022292:	0018      	movs	r0, r3
 8022294:	f7ff fe9d 	bl	8021fd2 <xtime>
 8022298:	0003      	movs	r3, r0
 802229a:	0018      	movs	r0, r3
 802229c:	f7ff fe99 	bl	8021fd2 <xtime>
 80222a0:	197b      	adds	r3, r7, r5
 80222a2:	781b      	ldrb	r3, [r3, #0]
 80222a4:	0018      	movs	r0, r3
 80222a6:	f7ff fe94 	bl	8021fd2 <xtime>
 80222aa:	0003      	movs	r3, r0
 80222ac:	0018      	movs	r0, r3
 80222ae:	f7ff fe90 	bl	8021fd2 <xtime>
 80222b2:	0003      	movs	r3, r0
 80222b4:	0018      	movs	r0, r3
 80222b6:	f7ff fe8c 	bl	8021fd2 <xtime>
 80222ba:	0003      	movs	r3, r0
 80222bc:	0018      	movs	r0, r3
 80222be:	f7ff fe88 	bl	8021fd2 <xtime>
 80222c2:	193b      	adds	r3, r7, r4
 80222c4:	781b      	ldrb	r3, [r3, #0]
 80222c6:	0018      	movs	r0, r3
 80222c8:	f7ff fe83 	bl	8021fd2 <xtime>
 80222cc:	193b      	adds	r3, r7, r4
 80222ce:	781b      	ldrb	r3, [r3, #0]
 80222d0:	0018      	movs	r0, r3
 80222d2:	f7ff fe7e 	bl	8021fd2 <xtime>
 80222d6:	0003      	movs	r3, r0
 80222d8:	0018      	movs	r0, r3
 80222da:	f7ff fe7a 	bl	8021fd2 <xtime>
 80222de:	0003      	movs	r3, r0
 80222e0:	0018      	movs	r0, r3
 80222e2:	f7ff fe76 	bl	8021fd2 <xtime>
 80222e6:	0003      	movs	r3, r0
 80222e8:	0018      	movs	r0, r3
 80222ea:	f7ff fe72 	bl	8021fd2 <xtime>
 80222ee:	2308      	movs	r3, #8
 80222f0:	001c      	movs	r4, r3
 80222f2:	18fb      	adds	r3, r7, r3
 80222f4:	781b      	ldrb	r3, [r3, #0]
 80222f6:	0018      	movs	r0, r3
 80222f8:	f7ff fe6b 	bl	8021fd2 <xtime>
 80222fc:	0023      	movs	r3, r4
 80222fe:	001c      	movs	r4, r3
 8022300:	18fb      	adds	r3, r7, r3
 8022302:	781b      	ldrb	r3, [r3, #0]
 8022304:	0018      	movs	r0, r3
 8022306:	f7ff fe64 	bl	8021fd2 <xtime>
 802230a:	0003      	movs	r3, r0
 802230c:	0018      	movs	r0, r3
 802230e:	f7ff fe60 	bl	8021fd2 <xtime>
 8022312:	0023      	movs	r3, r4
 8022314:	18fb      	adds	r3, r7, r3
 8022316:	781b      	ldrb	r3, [r3, #0]
 8022318:	0018      	movs	r0, r3
 802231a:	f7ff fe5a 	bl	8021fd2 <xtime>
 802231e:	0003      	movs	r3, r0
 8022320:	0018      	movs	r0, r3
 8022322:	f7ff fe56 	bl	8021fd2 <xtime>
 8022326:	0003      	movs	r3, r0
 8022328:	0018      	movs	r0, r3
 802232a:	f7ff fe52 	bl	8021fd2 <xtime>
 802232e:	0003      	movs	r3, r0
 8022330:	0018      	movs	r0, r3
 8022332:	f7ff fe4e 	bl	8021fd2 <xtime>
 8022336:	19bb      	adds	r3, r7, r6
 8022338:	781b      	ldrb	r3, [r3, #0]
 802233a:	0018      	movs	r0, r3
 802233c:	f7ff fe49 	bl	8021fd2 <xtime>
 8022340:	0003      	movs	r3, r0
 8022342:	001c      	movs	r4, r3
 8022344:	19bb      	adds	r3, r7, r6
 8022346:	781b      	ldrb	r3, [r3, #0]
 8022348:	0018      	movs	r0, r3
 802234a:	f7ff fe42 	bl	8021fd2 <xtime>
 802234e:	0003      	movs	r3, r0
 8022350:	0018      	movs	r0, r3
 8022352:	f7ff fe3e 	bl	8021fd2 <xtime>
 8022356:	0003      	movs	r3, r0
 8022358:	4063      	eors	r3, r4
 802235a:	b2dc      	uxtb	r4, r3
 802235c:	19bb      	adds	r3, r7, r6
 802235e:	781b      	ldrb	r3, [r3, #0]
 8022360:	0018      	movs	r0, r3
 8022362:	f7ff fe36 	bl	8021fd2 <xtime>
 8022366:	0003      	movs	r3, r0
 8022368:	0018      	movs	r0, r3
 802236a:	f7ff fe32 	bl	8021fd2 <xtime>
 802236e:	0003      	movs	r3, r0
 8022370:	0018      	movs	r0, r3
 8022372:	f7ff fe2e 	bl	8021fd2 <xtime>
 8022376:	0003      	movs	r3, r0
 8022378:	4063      	eors	r3, r4
 802237a:	b2dc      	uxtb	r4, r3
 802237c:	197b      	adds	r3, r7, r5
 802237e:	781b      	ldrb	r3, [r3, #0]
 8022380:	0018      	movs	r0, r3
 8022382:	f7ff fe26 	bl	8021fd2 <xtime>
 8022386:	0003      	movs	r3, r0
 8022388:	001a      	movs	r2, r3
 802238a:	0029      	movs	r1, r5
 802238c:	197b      	adds	r3, r7, r5
 802238e:	781b      	ldrb	r3, [r3, #0]
 8022390:	4053      	eors	r3, r2
 8022392:	b2dd      	uxtb	r5, r3
 8022394:	187b      	adds	r3, r7, r1
 8022396:	781b      	ldrb	r3, [r3, #0]
 8022398:	0018      	movs	r0, r3
 802239a:	f7ff fe1a 	bl	8021fd2 <xtime>
 802239e:	0003      	movs	r3, r0
 80223a0:	0018      	movs	r0, r3
 80223a2:	f7ff fe16 	bl	8021fd2 <xtime>
 80223a6:	0003      	movs	r3, r0
 80223a8:	0018      	movs	r0, r3
 80223aa:	f7ff fe12 	bl	8021fd2 <xtime>
 80223ae:	0003      	movs	r3, r0
 80223b0:	406b      	eors	r3, r5
 80223b2:	b2db      	uxtb	r3, r3
 80223b4:	4063      	eors	r3, r4
 80223b6:	b2dc      	uxtb	r4, r3
 80223b8:	2309      	movs	r3, #9
 80223ba:	001d      	movs	r5, r3
 80223bc:	18fb      	adds	r3, r7, r3
 80223be:	781b      	ldrb	r3, [r3, #0]
 80223c0:	0018      	movs	r0, r3
 80223c2:	f7ff fe06 	bl	8021fd2 <xtime>
 80223c6:	0003      	movs	r3, r0
 80223c8:	0018      	movs	r0, r3
 80223ca:	f7ff fe02 	bl	8021fd2 <xtime>
 80223ce:	0003      	movs	r3, r0
 80223d0:	001a      	movs	r2, r3
 80223d2:	002b      	movs	r3, r5
 80223d4:	0018      	movs	r0, r3
 80223d6:	18fb      	adds	r3, r7, r3
 80223d8:	781b      	ldrb	r3, [r3, #0]
 80223da:	4053      	eors	r3, r2
 80223dc:	b2dd      	uxtb	r5, r3
 80223de:	0003      	movs	r3, r0
 80223e0:	18fb      	adds	r3, r7, r3
 80223e2:	781b      	ldrb	r3, [r3, #0]
 80223e4:	0018      	movs	r0, r3
 80223e6:	f7ff fdf4 	bl	8021fd2 <xtime>
 80223ea:	0003      	movs	r3, r0
 80223ec:	0018      	movs	r0, r3
 80223ee:	f7ff fdf0 	bl	8021fd2 <xtime>
 80223f2:	0003      	movs	r3, r0
 80223f4:	0018      	movs	r0, r3
 80223f6:	f7ff fdec 	bl	8021fd2 <xtime>
 80223fa:	0003      	movs	r3, r0
 80223fc:	406b      	eors	r3, r5
 80223fe:	b2db      	uxtb	r3, r3
 8022400:	4063      	eors	r3, r4
 8022402:	b2dc      	uxtb	r4, r3
 8022404:	2308      	movs	r3, #8
 8022406:	001d      	movs	r5, r3
 8022408:	18fb      	adds	r3, r7, r3
 802240a:	781b      	ldrb	r3, [r3, #0]
 802240c:	0018      	movs	r0, r3
 802240e:	f7ff fde0 	bl	8021fd2 <xtime>
 8022412:	0003      	movs	r3, r0
 8022414:	0018      	movs	r0, r3
 8022416:	f7ff fddc 	bl	8021fd2 <xtime>
 802241a:	0003      	movs	r3, r0
 802241c:	0018      	movs	r0, r3
 802241e:	f7ff fdd8 	bl	8021fd2 <xtime>
 8022422:	0003      	movs	r3, r0
 8022424:	001a      	movs	r2, r3
 8022426:	002b      	movs	r3, r5
 8022428:	18fb      	adds	r3, r7, r3
 802242a:	781b      	ldrb	r3, [r3, #0]
 802242c:	4053      	eors	r3, r2
 802242e:	b2db      	uxtb	r3, r3
 8022430:	4063      	eors	r3, r4
 8022432:	b2d9      	uxtb	r1, r3
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	68fa      	ldr	r2, [r7, #12]
 8022438:	0092      	lsls	r2, r2, #2
 802243a:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 802243c:	19bb      	adds	r3, r7, r6
 802243e:	781b      	ldrb	r3, [r3, #0]
 8022440:	0018      	movs	r0, r3
 8022442:	f7ff fdc6 	bl	8021fd2 <xtime>
 8022446:	19bb      	adds	r3, r7, r6
 8022448:	781b      	ldrb	r3, [r3, #0]
 802244a:	0018      	movs	r0, r3
 802244c:	f7ff fdc1 	bl	8021fd2 <xtime>
 8022450:	0003      	movs	r3, r0
 8022452:	0018      	movs	r0, r3
 8022454:	f7ff fdbd 	bl	8021fd2 <xtime>
 8022458:	19bb      	adds	r3, r7, r6
 802245a:	781b      	ldrb	r3, [r3, #0]
 802245c:	0018      	movs	r0, r3
 802245e:	f7ff fdb8 	bl	8021fd2 <xtime>
 8022462:	0003      	movs	r3, r0
 8022464:	0018      	movs	r0, r3
 8022466:	f7ff fdb4 	bl	8021fd2 <xtime>
 802246a:	0003      	movs	r3, r0
 802246c:	0018      	movs	r0, r3
 802246e:	f7ff fdb0 	bl	8021fd2 <xtime>
 8022472:	0003      	movs	r3, r0
 8022474:	0018      	movs	r0, r3
 8022476:	f7ff fdac 	bl	8021fd2 <xtime>
 802247a:	210a      	movs	r1, #10
 802247c:	000d      	movs	r5, r1
 802247e:	187b      	adds	r3, r7, r1
 8022480:	781b      	ldrb	r3, [r3, #0]
 8022482:	0018      	movs	r0, r3
 8022484:	f7ff fda5 	bl	8021fd2 <xtime>
 8022488:	0003      	movs	r3, r0
 802248a:	0018      	movs	r0, r3
 802248c:	f7ff fda1 	bl	8021fd2 <xtime>
 8022490:	0003      	movs	r3, r0
 8022492:	0018      	movs	r0, r3
 8022494:	f7ff fd9d 	bl	8021fd2 <xtime>
 8022498:	0003      	movs	r3, r0
 802249a:	0018      	movs	r0, r3
 802249c:	f7ff fd99 	bl	8021fd2 <xtime>
 80224a0:	2409      	movs	r4, #9
 80224a2:	193b      	adds	r3, r7, r4
 80224a4:	781b      	ldrb	r3, [r3, #0]
 80224a6:	0018      	movs	r0, r3
 80224a8:	f7ff fd93 	bl	8021fd2 <xtime>
 80224ac:	0003      	movs	r3, r0
 80224ae:	0018      	movs	r0, r3
 80224b0:	f7ff fd8f 	bl	8021fd2 <xtime>
 80224b4:	193b      	adds	r3, r7, r4
 80224b6:	781b      	ldrb	r3, [r3, #0]
 80224b8:	0018      	movs	r0, r3
 80224ba:	f7ff fd8a 	bl	8021fd2 <xtime>
 80224be:	0003      	movs	r3, r0
 80224c0:	0018      	movs	r0, r3
 80224c2:	f7ff fd86 	bl	8021fd2 <xtime>
 80224c6:	0003      	movs	r3, r0
 80224c8:	0018      	movs	r0, r3
 80224ca:	f7ff fd82 	bl	8021fd2 <xtime>
 80224ce:	0003      	movs	r3, r0
 80224d0:	0018      	movs	r0, r3
 80224d2:	f7ff fd7e 	bl	8021fd2 <xtime>
 80224d6:	2308      	movs	r3, #8
 80224d8:	001c      	movs	r4, r3
 80224da:	18fb      	adds	r3, r7, r3
 80224dc:	781b      	ldrb	r3, [r3, #0]
 80224de:	0018      	movs	r0, r3
 80224e0:	f7ff fd77 	bl	8021fd2 <xtime>
 80224e4:	0023      	movs	r3, r4
 80224e6:	18fb      	adds	r3, r7, r3
 80224e8:	781b      	ldrb	r3, [r3, #0]
 80224ea:	0018      	movs	r0, r3
 80224ec:	f7ff fd71 	bl	8021fd2 <xtime>
 80224f0:	0003      	movs	r3, r0
 80224f2:	0018      	movs	r0, r3
 80224f4:	f7ff fd6d 	bl	8021fd2 <xtime>
 80224f8:	0003      	movs	r3, r0
 80224fa:	0018      	movs	r0, r3
 80224fc:	f7ff fd69 	bl	8021fd2 <xtime>
 8022500:	0003      	movs	r3, r0
 8022502:	0018      	movs	r0, r3
 8022504:	f7ff fd65 	bl	8021fd2 <xtime>
 8022508:	19bb      	adds	r3, r7, r6
 802250a:	781b      	ldrb	r3, [r3, #0]
 802250c:	0018      	movs	r0, r3
 802250e:	f7ff fd60 	bl	8021fd2 <xtime>
 8022512:	0003      	movs	r3, r0
 8022514:	0018      	movs	r0, r3
 8022516:	f7ff fd5c 	bl	8021fd2 <xtime>
 802251a:	0003      	movs	r3, r0
 802251c:	0018      	movs	r0, r3
 802251e:	f7ff fd58 	bl	8021fd2 <xtime>
 8022522:	0003      	movs	r3, r0
 8022524:	001a      	movs	r2, r3
 8022526:	19bb      	adds	r3, r7, r6
 8022528:	781b      	ldrb	r3, [r3, #0]
 802252a:	4053      	eors	r3, r2
 802252c:	b2dc      	uxtb	r4, r3
 802252e:	197b      	adds	r3, r7, r5
 8022530:	781b      	ldrb	r3, [r3, #0]
 8022532:	0018      	movs	r0, r3
 8022534:	f7ff fd4d 	bl	8021fd2 <xtime>
 8022538:	0003      	movs	r3, r0
 802253a:	001d      	movs	r5, r3
 802253c:	230a      	movs	r3, #10
 802253e:	18fb      	adds	r3, r7, r3
 8022540:	781b      	ldrb	r3, [r3, #0]
 8022542:	0018      	movs	r0, r3
 8022544:	f7ff fd45 	bl	8021fd2 <xtime>
 8022548:	0003      	movs	r3, r0
 802254a:	0018      	movs	r0, r3
 802254c:	f7ff fd41 	bl	8021fd2 <xtime>
 8022550:	0003      	movs	r3, r0
 8022552:	406b      	eors	r3, r5
 8022554:	b2dd      	uxtb	r5, r3
 8022556:	230a      	movs	r3, #10
 8022558:	18fb      	adds	r3, r7, r3
 802255a:	781b      	ldrb	r3, [r3, #0]
 802255c:	0018      	movs	r0, r3
 802255e:	f7ff fd38 	bl	8021fd2 <xtime>
 8022562:	0003      	movs	r3, r0
 8022564:	0018      	movs	r0, r3
 8022566:	f7ff fd34 	bl	8021fd2 <xtime>
 802256a:	0003      	movs	r3, r0
 802256c:	0018      	movs	r0, r3
 802256e:	f7ff fd30 	bl	8021fd2 <xtime>
 8022572:	0003      	movs	r3, r0
 8022574:	406b      	eors	r3, r5
 8022576:	b2db      	uxtb	r3, r3
 8022578:	4063      	eors	r3, r4
 802257a:	b2dc      	uxtb	r4, r3
 802257c:	2209      	movs	r2, #9
 802257e:	0015      	movs	r5, r2
 8022580:	18bb      	adds	r3, r7, r2
 8022582:	781b      	ldrb	r3, [r3, #0]
 8022584:	0018      	movs	r0, r3
 8022586:	f7ff fd24 	bl	8021fd2 <xtime>
 802258a:	0003      	movs	r3, r0
 802258c:	001a      	movs	r2, r3
 802258e:	0029      	movs	r1, r5
 8022590:	187b      	adds	r3, r7, r1
 8022592:	781b      	ldrb	r3, [r3, #0]
 8022594:	4053      	eors	r3, r2
 8022596:	b2dd      	uxtb	r5, r3
 8022598:	187b      	adds	r3, r7, r1
 802259a:	781b      	ldrb	r3, [r3, #0]
 802259c:	0018      	movs	r0, r3
 802259e:	f7ff fd18 	bl	8021fd2 <xtime>
 80225a2:	0003      	movs	r3, r0
 80225a4:	0018      	movs	r0, r3
 80225a6:	f7ff fd14 	bl	8021fd2 <xtime>
 80225aa:	0003      	movs	r3, r0
 80225ac:	0018      	movs	r0, r3
 80225ae:	f7ff fd10 	bl	8021fd2 <xtime>
 80225b2:	0003      	movs	r3, r0
 80225b4:	406b      	eors	r3, r5
 80225b6:	b2db      	uxtb	r3, r3
 80225b8:	4063      	eors	r3, r4
 80225ba:	b2dc      	uxtb	r4, r3
 80225bc:	2208      	movs	r2, #8
 80225be:	0015      	movs	r5, r2
 80225c0:	18bb      	adds	r3, r7, r2
 80225c2:	781b      	ldrb	r3, [r3, #0]
 80225c4:	0018      	movs	r0, r3
 80225c6:	f7ff fd04 	bl	8021fd2 <xtime>
 80225ca:	0003      	movs	r3, r0
 80225cc:	0018      	movs	r0, r3
 80225ce:	f7ff fd00 	bl	8021fd2 <xtime>
 80225d2:	0003      	movs	r3, r0
 80225d4:	001a      	movs	r2, r3
 80225d6:	0028      	movs	r0, r5
 80225d8:	183b      	adds	r3, r7, r0
 80225da:	781b      	ldrb	r3, [r3, #0]
 80225dc:	4053      	eors	r3, r2
 80225de:	b2dd      	uxtb	r5, r3
 80225e0:	0002      	movs	r2, r0
 80225e2:	18bb      	adds	r3, r7, r2
 80225e4:	781b      	ldrb	r3, [r3, #0]
 80225e6:	0018      	movs	r0, r3
 80225e8:	f7ff fcf3 	bl	8021fd2 <xtime>
 80225ec:	0003      	movs	r3, r0
 80225ee:	0018      	movs	r0, r3
 80225f0:	f7ff fcef 	bl	8021fd2 <xtime>
 80225f4:	0003      	movs	r3, r0
 80225f6:	0018      	movs	r0, r3
 80225f8:	f7ff fceb 	bl	8021fd2 <xtime>
 80225fc:	0003      	movs	r3, r0
 80225fe:	406b      	eors	r3, r5
 8022600:	b2db      	uxtb	r3, r3
 8022602:	4063      	eors	r3, r4
 8022604:	b2d9      	uxtb	r1, r3
 8022606:	687a      	ldr	r2, [r7, #4]
 8022608:	68fb      	ldr	r3, [r7, #12]
 802260a:	009b      	lsls	r3, r3, #2
 802260c:	18d3      	adds	r3, r2, r3
 802260e:	3301      	adds	r3, #1
 8022610:	1c0a      	adds	r2, r1, #0
 8022612:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8022614:	19bb      	adds	r3, r7, r6
 8022616:	781b      	ldrb	r3, [r3, #0]
 8022618:	0018      	movs	r0, r3
 802261a:	f7ff fcda 	bl	8021fd2 <xtime>
 802261e:	19bb      	adds	r3, r7, r6
 8022620:	781b      	ldrb	r3, [r3, #0]
 8022622:	0018      	movs	r0, r3
 8022624:	f7ff fcd5 	bl	8021fd2 <xtime>
 8022628:	0003      	movs	r3, r0
 802262a:	0018      	movs	r0, r3
 802262c:	f7ff fcd1 	bl	8021fd2 <xtime>
 8022630:	0003      	movs	r3, r0
 8022632:	0018      	movs	r0, r3
 8022634:	f7ff fccd 	bl	8021fd2 <xtime>
 8022638:	0003      	movs	r3, r0
 802263a:	0018      	movs	r0, r3
 802263c:	f7ff fcc9 	bl	8021fd2 <xtime>
 8022640:	250a      	movs	r5, #10
 8022642:	197b      	adds	r3, r7, r5
 8022644:	781b      	ldrb	r3, [r3, #0]
 8022646:	0018      	movs	r0, r3
 8022648:	f7ff fcc3 	bl	8021fd2 <xtime>
 802264c:	197b      	adds	r3, r7, r5
 802264e:	781b      	ldrb	r3, [r3, #0]
 8022650:	0018      	movs	r0, r3
 8022652:	f7ff fcbe 	bl	8021fd2 <xtime>
 8022656:	0003      	movs	r3, r0
 8022658:	0018      	movs	r0, r3
 802265a:	f7ff fcba 	bl	8021fd2 <xtime>
 802265e:	197b      	adds	r3, r7, r5
 8022660:	781b      	ldrb	r3, [r3, #0]
 8022662:	0018      	movs	r0, r3
 8022664:	f7ff fcb5 	bl	8021fd2 <xtime>
 8022668:	0003      	movs	r3, r0
 802266a:	0018      	movs	r0, r3
 802266c:	f7ff fcb1 	bl	8021fd2 <xtime>
 8022670:	0003      	movs	r3, r0
 8022672:	0018      	movs	r0, r3
 8022674:	f7ff fcad 	bl	8021fd2 <xtime>
 8022678:	0003      	movs	r3, r0
 802267a:	0018      	movs	r0, r3
 802267c:	f7ff fca9 	bl	8021fd2 <xtime>
 8022680:	2109      	movs	r1, #9
 8022682:	187b      	adds	r3, r7, r1
 8022684:	781b      	ldrb	r3, [r3, #0]
 8022686:	0018      	movs	r0, r3
 8022688:	f7ff fca3 	bl	8021fd2 <xtime>
 802268c:	0003      	movs	r3, r0
 802268e:	0018      	movs	r0, r3
 8022690:	f7ff fc9f 	bl	8021fd2 <xtime>
 8022694:	0003      	movs	r3, r0
 8022696:	0018      	movs	r0, r3
 8022698:	f7ff fc9b 	bl	8021fd2 <xtime>
 802269c:	0003      	movs	r3, r0
 802269e:	0018      	movs	r0, r3
 80226a0:	f7ff fc97 	bl	8021fd2 <xtime>
 80226a4:	2408      	movs	r4, #8
 80226a6:	193b      	adds	r3, r7, r4
 80226a8:	781b      	ldrb	r3, [r3, #0]
 80226aa:	0018      	movs	r0, r3
 80226ac:	f7ff fc91 	bl	8021fd2 <xtime>
 80226b0:	0003      	movs	r3, r0
 80226b2:	0018      	movs	r0, r3
 80226b4:	f7ff fc8d 	bl	8021fd2 <xtime>
 80226b8:	193b      	adds	r3, r7, r4
 80226ba:	781b      	ldrb	r3, [r3, #0]
 80226bc:	0018      	movs	r0, r3
 80226be:	f7ff fc88 	bl	8021fd2 <xtime>
 80226c2:	0003      	movs	r3, r0
 80226c4:	0018      	movs	r0, r3
 80226c6:	f7ff fc84 	bl	8021fd2 <xtime>
 80226ca:	0003      	movs	r3, r0
 80226cc:	0018      	movs	r0, r3
 80226ce:	f7ff fc80 	bl	8021fd2 <xtime>
 80226d2:	0003      	movs	r3, r0
 80226d4:	0018      	movs	r0, r3
 80226d6:	f7ff fc7c 	bl	8021fd2 <xtime>
 80226da:	19bb      	adds	r3, r7, r6
 80226dc:	781b      	ldrb	r3, [r3, #0]
 80226de:	0018      	movs	r0, r3
 80226e0:	f7ff fc77 	bl	8021fd2 <xtime>
 80226e4:	0003      	movs	r3, r0
 80226e6:	0018      	movs	r0, r3
 80226e8:	f7ff fc73 	bl	8021fd2 <xtime>
 80226ec:	0003      	movs	r3, r0
 80226ee:	001a      	movs	r2, r3
 80226f0:	19bb      	adds	r3, r7, r6
 80226f2:	781b      	ldrb	r3, [r3, #0]
 80226f4:	4053      	eors	r3, r2
 80226f6:	b2dc      	uxtb	r4, r3
 80226f8:	19bb      	adds	r3, r7, r6
 80226fa:	781b      	ldrb	r3, [r3, #0]
 80226fc:	0018      	movs	r0, r3
 80226fe:	f7ff fc68 	bl	8021fd2 <xtime>
 8022702:	0003      	movs	r3, r0
 8022704:	0018      	movs	r0, r3
 8022706:	f7ff fc64 	bl	8021fd2 <xtime>
 802270a:	0003      	movs	r3, r0
 802270c:	0018      	movs	r0, r3
 802270e:	f7ff fc60 	bl	8021fd2 <xtime>
 8022712:	0003      	movs	r3, r0
 8022714:	4063      	eors	r3, r4
 8022716:	b2dc      	uxtb	r4, r3
 8022718:	197b      	adds	r3, r7, r5
 802271a:	781b      	ldrb	r3, [r3, #0]
 802271c:	0018      	movs	r0, r3
 802271e:	f7ff fc58 	bl	8021fd2 <xtime>
 8022722:	0003      	movs	r3, r0
 8022724:	0018      	movs	r0, r3
 8022726:	f7ff fc54 	bl	8021fd2 <xtime>
 802272a:	0003      	movs	r3, r0
 802272c:	0018      	movs	r0, r3
 802272e:	f7ff fc50 	bl	8021fd2 <xtime>
 8022732:	0003      	movs	r3, r0
 8022734:	001a      	movs	r2, r3
 8022736:	197b      	adds	r3, r7, r5
 8022738:	781b      	ldrb	r3, [r3, #0]
 802273a:	4053      	eors	r3, r2
 802273c:	b2db      	uxtb	r3, r3
 802273e:	4063      	eors	r3, r4
 8022740:	b2dc      	uxtb	r4, r3
 8022742:	2109      	movs	r1, #9
 8022744:	187b      	adds	r3, r7, r1
 8022746:	781b      	ldrb	r3, [r3, #0]
 8022748:	0018      	movs	r0, r3
 802274a:	f7ff fc42 	bl	8021fd2 <xtime>
 802274e:	0003      	movs	r3, r0
 8022750:	001d      	movs	r5, r3
 8022752:	2109      	movs	r1, #9
 8022754:	187b      	adds	r3, r7, r1
 8022756:	781b      	ldrb	r3, [r3, #0]
 8022758:	0018      	movs	r0, r3
 802275a:	f7ff fc3a 	bl	8021fd2 <xtime>
 802275e:	0003      	movs	r3, r0
 8022760:	0018      	movs	r0, r3
 8022762:	f7ff fc36 	bl	8021fd2 <xtime>
 8022766:	0003      	movs	r3, r0
 8022768:	406b      	eors	r3, r5
 802276a:	b2dd      	uxtb	r5, r3
 802276c:	2109      	movs	r1, #9
 802276e:	187b      	adds	r3, r7, r1
 8022770:	781b      	ldrb	r3, [r3, #0]
 8022772:	0018      	movs	r0, r3
 8022774:	f7ff fc2d 	bl	8021fd2 <xtime>
 8022778:	0003      	movs	r3, r0
 802277a:	0018      	movs	r0, r3
 802277c:	f7ff fc29 	bl	8021fd2 <xtime>
 8022780:	0003      	movs	r3, r0
 8022782:	0018      	movs	r0, r3
 8022784:	f7ff fc25 	bl	8021fd2 <xtime>
 8022788:	0003      	movs	r3, r0
 802278a:	406b      	eors	r3, r5
 802278c:	b2db      	uxtb	r3, r3
 802278e:	4063      	eors	r3, r4
 8022790:	b2dc      	uxtb	r4, r3
 8022792:	2308      	movs	r3, #8
 8022794:	001d      	movs	r5, r3
 8022796:	18fb      	adds	r3, r7, r3
 8022798:	781b      	ldrb	r3, [r3, #0]
 802279a:	0018      	movs	r0, r3
 802279c:	f7ff fc19 	bl	8021fd2 <xtime>
 80227a0:	0003      	movs	r3, r0
 80227a2:	001a      	movs	r2, r3
 80227a4:	0028      	movs	r0, r5
 80227a6:	183b      	adds	r3, r7, r0
 80227a8:	781b      	ldrb	r3, [r3, #0]
 80227aa:	4053      	eors	r3, r2
 80227ac:	b2dd      	uxtb	r5, r3
 80227ae:	0003      	movs	r3, r0
 80227b0:	18fb      	adds	r3, r7, r3
 80227b2:	781b      	ldrb	r3, [r3, #0]
 80227b4:	0018      	movs	r0, r3
 80227b6:	f7ff fc0c 	bl	8021fd2 <xtime>
 80227ba:	0003      	movs	r3, r0
 80227bc:	0018      	movs	r0, r3
 80227be:	f7ff fc08 	bl	8021fd2 <xtime>
 80227c2:	0003      	movs	r3, r0
 80227c4:	0018      	movs	r0, r3
 80227c6:	f7ff fc04 	bl	8021fd2 <xtime>
 80227ca:	0003      	movs	r3, r0
 80227cc:	406b      	eors	r3, r5
 80227ce:	b2db      	uxtb	r3, r3
 80227d0:	4063      	eors	r3, r4
 80227d2:	b2d9      	uxtb	r1, r3
 80227d4:	687a      	ldr	r2, [r7, #4]
 80227d6:	68fb      	ldr	r3, [r7, #12]
 80227d8:	009b      	lsls	r3, r3, #2
 80227da:	18d3      	adds	r3, r2, r3
 80227dc:	3302      	adds	r3, #2
 80227de:	1c0a      	adds	r2, r1, #0
 80227e0:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80227e2:	19bb      	adds	r3, r7, r6
 80227e4:	781b      	ldrb	r3, [r3, #0]
 80227e6:	0018      	movs	r0, r3
 80227e8:	f7ff fbf3 	bl	8021fd2 <xtime>
 80227ec:	0003      	movs	r3, r0
 80227ee:	0018      	movs	r0, r3
 80227f0:	f7ff fbef 	bl	8021fd2 <xtime>
 80227f4:	19bb      	adds	r3, r7, r6
 80227f6:	781b      	ldrb	r3, [r3, #0]
 80227f8:	0018      	movs	r0, r3
 80227fa:	f7ff fbea 	bl	8021fd2 <xtime>
 80227fe:	0003      	movs	r3, r0
 8022800:	0018      	movs	r0, r3
 8022802:	f7ff fbe6 	bl	8021fd2 <xtime>
 8022806:	0003      	movs	r3, r0
 8022808:	0018      	movs	r0, r3
 802280a:	f7ff fbe2 	bl	8021fd2 <xtime>
 802280e:	0003      	movs	r3, r0
 8022810:	0018      	movs	r0, r3
 8022812:	f7ff fbde 	bl	8021fd2 <xtime>
 8022816:	250a      	movs	r5, #10
 8022818:	197b      	adds	r3, r7, r5
 802281a:	781b      	ldrb	r3, [r3, #0]
 802281c:	0018      	movs	r0, r3
 802281e:	f7ff fbd8 	bl	8021fd2 <xtime>
 8022822:	197b      	adds	r3, r7, r5
 8022824:	781b      	ldrb	r3, [r3, #0]
 8022826:	0018      	movs	r0, r3
 8022828:	f7ff fbd3 	bl	8021fd2 <xtime>
 802282c:	0003      	movs	r3, r0
 802282e:	0018      	movs	r0, r3
 8022830:	f7ff fbcf 	bl	8021fd2 <xtime>
 8022834:	0003      	movs	r3, r0
 8022836:	0018      	movs	r0, r3
 8022838:	f7ff fbcb 	bl	8021fd2 <xtime>
 802283c:	0003      	movs	r3, r0
 802283e:	0018      	movs	r0, r3
 8022840:	f7ff fbc7 	bl	8021fd2 <xtime>
 8022844:	2109      	movs	r1, #9
 8022846:	000c      	movs	r4, r1
 8022848:	187b      	adds	r3, r7, r1
 802284a:	781b      	ldrb	r3, [r3, #0]
 802284c:	0018      	movs	r0, r3
 802284e:	f7ff fbc0 	bl	8021fd2 <xtime>
 8022852:	193b      	adds	r3, r7, r4
 8022854:	781b      	ldrb	r3, [r3, #0]
 8022856:	0018      	movs	r0, r3
 8022858:	f7ff fbbb 	bl	8021fd2 <xtime>
 802285c:	0003      	movs	r3, r0
 802285e:	0018      	movs	r0, r3
 8022860:	f7ff fbb7 	bl	8021fd2 <xtime>
 8022864:	193b      	adds	r3, r7, r4
 8022866:	781b      	ldrb	r3, [r3, #0]
 8022868:	0018      	movs	r0, r3
 802286a:	f7ff fbb2 	bl	8021fd2 <xtime>
 802286e:	0003      	movs	r3, r0
 8022870:	0018      	movs	r0, r3
 8022872:	f7ff fbae 	bl	8021fd2 <xtime>
 8022876:	0003      	movs	r3, r0
 8022878:	0018      	movs	r0, r3
 802287a:	f7ff fbaa 	bl	8021fd2 <xtime>
 802287e:	0003      	movs	r3, r0
 8022880:	0018      	movs	r0, r3
 8022882:	f7ff fba6 	bl	8021fd2 <xtime>
 8022886:	2308      	movs	r3, #8
 8022888:	18fb      	adds	r3, r7, r3
 802288a:	781b      	ldrb	r3, [r3, #0]
 802288c:	0018      	movs	r0, r3
 802288e:	f7ff fba0 	bl	8021fd2 <xtime>
 8022892:	0003      	movs	r3, r0
 8022894:	0018      	movs	r0, r3
 8022896:	f7ff fb9c 	bl	8021fd2 <xtime>
 802289a:	0003      	movs	r3, r0
 802289c:	0018      	movs	r0, r3
 802289e:	f7ff fb98 	bl	8021fd2 <xtime>
 80228a2:	0003      	movs	r3, r0
 80228a4:	0018      	movs	r0, r3
 80228a6:	f7ff fb94 	bl	8021fd2 <xtime>
 80228aa:	19bb      	adds	r3, r7, r6
 80228ac:	781b      	ldrb	r3, [r3, #0]
 80228ae:	0018      	movs	r0, r3
 80228b0:	f7ff fb8f 	bl	8021fd2 <xtime>
 80228b4:	0003      	movs	r3, r0
 80228b6:	001a      	movs	r2, r3
 80228b8:	19bb      	adds	r3, r7, r6
 80228ba:	781b      	ldrb	r3, [r3, #0]
 80228bc:	4053      	eors	r3, r2
 80228be:	b2dc      	uxtb	r4, r3
 80228c0:	19bb      	adds	r3, r7, r6
 80228c2:	781b      	ldrb	r3, [r3, #0]
 80228c4:	0018      	movs	r0, r3
 80228c6:	f7ff fb84 	bl	8021fd2 <xtime>
 80228ca:	0003      	movs	r3, r0
 80228cc:	0018      	movs	r0, r3
 80228ce:	f7ff fb80 	bl	8021fd2 <xtime>
 80228d2:	0003      	movs	r3, r0
 80228d4:	0018      	movs	r0, r3
 80228d6:	f7ff fb7c 	bl	8021fd2 <xtime>
 80228da:	0003      	movs	r3, r0
 80228dc:	4063      	eors	r3, r4
 80228de:	b2dc      	uxtb	r4, r3
 80228e0:	197b      	adds	r3, r7, r5
 80228e2:	781b      	ldrb	r3, [r3, #0]
 80228e4:	0018      	movs	r0, r3
 80228e6:	f7ff fb74 	bl	8021fd2 <xtime>
 80228ea:	0003      	movs	r3, r0
 80228ec:	0018      	movs	r0, r3
 80228ee:	f7ff fb70 	bl	8021fd2 <xtime>
 80228f2:	0003      	movs	r3, r0
 80228f4:	001a      	movs	r2, r3
 80228f6:	0029      	movs	r1, r5
 80228f8:	197b      	adds	r3, r7, r5
 80228fa:	781b      	ldrb	r3, [r3, #0]
 80228fc:	4053      	eors	r3, r2
 80228fe:	b2dd      	uxtb	r5, r3
 8022900:	187b      	adds	r3, r7, r1
 8022902:	781b      	ldrb	r3, [r3, #0]
 8022904:	0018      	movs	r0, r3
 8022906:	f7ff fb64 	bl	8021fd2 <xtime>
 802290a:	0003      	movs	r3, r0
 802290c:	0018      	movs	r0, r3
 802290e:	f7ff fb60 	bl	8021fd2 <xtime>
 8022912:	0003      	movs	r3, r0
 8022914:	0018      	movs	r0, r3
 8022916:	f7ff fb5c 	bl	8021fd2 <xtime>
 802291a:	0003      	movs	r3, r0
 802291c:	406b      	eors	r3, r5
 802291e:	b2db      	uxtb	r3, r3
 8022920:	4063      	eors	r3, r4
 8022922:	b2dc      	uxtb	r4, r3
 8022924:	2509      	movs	r5, #9
 8022926:	197b      	adds	r3, r7, r5
 8022928:	781b      	ldrb	r3, [r3, #0]
 802292a:	0018      	movs	r0, r3
 802292c:	f7ff fb51 	bl	8021fd2 <xtime>
 8022930:	0003      	movs	r3, r0
 8022932:	0018      	movs	r0, r3
 8022934:	f7ff fb4d 	bl	8021fd2 <xtime>
 8022938:	0003      	movs	r3, r0
 802293a:	0018      	movs	r0, r3
 802293c:	f7ff fb49 	bl	8021fd2 <xtime>
 8022940:	0003      	movs	r3, r0
 8022942:	001a      	movs	r2, r3
 8022944:	197b      	adds	r3, r7, r5
 8022946:	781b      	ldrb	r3, [r3, #0]
 8022948:	4053      	eors	r3, r2
 802294a:	b2db      	uxtb	r3, r3
 802294c:	4063      	eors	r3, r4
 802294e:	b2dc      	uxtb	r4, r3
 8022950:	2608      	movs	r6, #8
 8022952:	19bb      	adds	r3, r7, r6
 8022954:	781b      	ldrb	r3, [r3, #0]
 8022956:	0018      	movs	r0, r3
 8022958:	f7ff fb3b 	bl	8021fd2 <xtime>
 802295c:	0003      	movs	r3, r0
 802295e:	001d      	movs	r5, r3
 8022960:	19bb      	adds	r3, r7, r6
 8022962:	781b      	ldrb	r3, [r3, #0]
 8022964:	0018      	movs	r0, r3
 8022966:	f7ff fb34 	bl	8021fd2 <xtime>
 802296a:	0003      	movs	r3, r0
 802296c:	0018      	movs	r0, r3
 802296e:	f7ff fb30 	bl	8021fd2 <xtime>
 8022972:	0003      	movs	r3, r0
 8022974:	406b      	eors	r3, r5
 8022976:	b2dd      	uxtb	r5, r3
 8022978:	19bb      	adds	r3, r7, r6
 802297a:	781b      	ldrb	r3, [r3, #0]
 802297c:	0018      	movs	r0, r3
 802297e:	f7ff fb28 	bl	8021fd2 <xtime>
 8022982:	0003      	movs	r3, r0
 8022984:	0018      	movs	r0, r3
 8022986:	f7ff fb24 	bl	8021fd2 <xtime>
 802298a:	0003      	movs	r3, r0
 802298c:	0018      	movs	r0, r3
 802298e:	f7ff fb20 	bl	8021fd2 <xtime>
 8022992:	0003      	movs	r3, r0
 8022994:	406b      	eors	r3, r5
 8022996:	b2db      	uxtb	r3, r3
 8022998:	4063      	eors	r3, r4
 802299a:	b2d9      	uxtb	r1, r3
 802299c:	687a      	ldr	r2, [r7, #4]
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	009b      	lsls	r3, r3, #2
 80229a2:	18d3      	adds	r3, r2, r3
 80229a4:	3303      	adds	r3, #3
 80229a6:	1c0a      	adds	r2, r1, #0
 80229a8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 80229aa:	68fb      	ldr	r3, [r7, #12]
 80229ac:	3301      	adds	r3, #1
 80229ae:	60fb      	str	r3, [r7, #12]
 80229b0:	68fb      	ldr	r3, [r7, #12]
 80229b2:	2b03      	cmp	r3, #3
 80229b4:	dc00      	bgt.n	80229b8 <InvMixColumns+0x79e>
 80229b6:	e437      	b.n	8022228 <InvMixColumns+0xe>
  }
}
 80229b8:	46c0      	nop			; (mov r8, r8)
 80229ba:	46bd      	mov	sp, r7
 80229bc:	b005      	add	sp, #20
 80229be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080229c0 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 80229c0:	b5b0      	push	{r4, r5, r7, lr}
 80229c2:	b084      	sub	sp, #16
 80229c4:	af00      	add	r7, sp, #0
 80229c6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80229c8:	230f      	movs	r3, #15
 80229ca:	18fb      	adds	r3, r7, r3
 80229cc:	2200      	movs	r2, #0
 80229ce:	701a      	strb	r2, [r3, #0]
 80229d0:	e02a      	b.n	8022a28 <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 80229d2:	230e      	movs	r3, #14
 80229d4:	18fb      	adds	r3, r7, r3
 80229d6:	2200      	movs	r2, #0
 80229d8:	701a      	strb	r2, [r3, #0]
 80229da:	e01a      	b.n	8022a12 <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 80229dc:	240e      	movs	r4, #14
 80229de:	193b      	adds	r3, r7, r4
 80229e0:	781a      	ldrb	r2, [r3, #0]
 80229e2:	250f      	movs	r5, #15
 80229e4:	197b      	adds	r3, r7, r5
 80229e6:	781b      	ldrb	r3, [r3, #0]
 80229e8:	6879      	ldr	r1, [r7, #4]
 80229ea:	0092      	lsls	r2, r2, #2
 80229ec:	188a      	adds	r2, r1, r2
 80229ee:	5cd3      	ldrb	r3, [r2, r3]
 80229f0:	0018      	movs	r0, r3
 80229f2:	193b      	adds	r3, r7, r4
 80229f4:	781a      	ldrb	r2, [r3, #0]
 80229f6:	197b      	adds	r3, r7, r5
 80229f8:	781b      	ldrb	r3, [r3, #0]
 80229fa:	4910      	ldr	r1, [pc, #64]	; (8022a3c <InvSubBytes+0x7c>)
 80229fc:	5c08      	ldrb	r0, [r1, r0]
 80229fe:	6879      	ldr	r1, [r7, #4]
 8022a00:	0092      	lsls	r2, r2, #2
 8022a02:	188a      	adds	r2, r1, r2
 8022a04:	1c01      	adds	r1, r0, #0
 8022a06:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8022a08:	193b      	adds	r3, r7, r4
 8022a0a:	193a      	adds	r2, r7, r4
 8022a0c:	7812      	ldrb	r2, [r2, #0]
 8022a0e:	3201      	adds	r2, #1
 8022a10:	701a      	strb	r2, [r3, #0]
 8022a12:	230e      	movs	r3, #14
 8022a14:	18fb      	adds	r3, r7, r3
 8022a16:	781b      	ldrb	r3, [r3, #0]
 8022a18:	2b03      	cmp	r3, #3
 8022a1a:	d9df      	bls.n	80229dc <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8022a1c:	220f      	movs	r2, #15
 8022a1e:	18bb      	adds	r3, r7, r2
 8022a20:	18ba      	adds	r2, r7, r2
 8022a22:	7812      	ldrb	r2, [r2, #0]
 8022a24:	3201      	adds	r2, #1
 8022a26:	701a      	strb	r2, [r3, #0]
 8022a28:	230f      	movs	r3, #15
 8022a2a:	18fb      	adds	r3, r7, r3
 8022a2c:	781b      	ldrb	r3, [r3, #0]
 8022a2e:	2b03      	cmp	r3, #3
 8022a30:	d9cf      	bls.n	80229d2 <InvSubBytes+0x12>
    }
  }
}
 8022a32:	46c0      	nop			; (mov r8, r8)
 8022a34:	46bd      	mov	sp, r7
 8022a36:	b004      	add	sp, #16
 8022a38:	bdb0      	pop	{r4, r5, r7, pc}
 8022a3a:	46c0      	nop			; (mov r8, r8)
 8022a3c:	08028f24 	.word	0x08028f24

08022a40 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8022a40:	b580      	push	{r7, lr}
 8022a42:	b084      	sub	sp, #16
 8022a44:	af00      	add	r7, sp, #0
 8022a46:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8022a48:	210f      	movs	r1, #15
 8022a4a:	187b      	adds	r3, r7, r1
 8022a4c:	687a      	ldr	r2, [r7, #4]
 8022a4e:	7b52      	ldrb	r2, [r2, #13]
 8022a50:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	7a5a      	ldrb	r2, [r3, #9]
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	795a      	ldrb	r2, [r3, #5]
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	785a      	ldrb	r2, [r3, #1]
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	187a      	adds	r2, r7, r1
 8022a6e:	7812      	ldrb	r2, [r2, #0]
 8022a70:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8022a72:	187b      	adds	r3, r7, r1
 8022a74:	687a      	ldr	r2, [r7, #4]
 8022a76:	7892      	ldrb	r2, [r2, #2]
 8022a78:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	7a9a      	ldrb	r2, [r3, #10]
 8022a7e:	687b      	ldr	r3, [r7, #4]
 8022a80:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	187a      	adds	r2, r7, r1
 8022a86:	7812      	ldrb	r2, [r2, #0]
 8022a88:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8022a8a:	187b      	adds	r3, r7, r1
 8022a8c:	687a      	ldr	r2, [r7, #4]
 8022a8e:	7992      	ldrb	r2, [r2, #6]
 8022a90:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8022a92:	687b      	ldr	r3, [r7, #4]
 8022a94:	7b9a      	ldrb	r2, [r3, #14]
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	187a      	adds	r2, r7, r1
 8022a9e:	7812      	ldrb	r2, [r2, #0]
 8022aa0:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8022aa2:	187b      	adds	r3, r7, r1
 8022aa4:	687a      	ldr	r2, [r7, #4]
 8022aa6:	78d2      	ldrb	r2, [r2, #3]
 8022aa8:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 8022aaa:	687b      	ldr	r3, [r7, #4]
 8022aac:	79da      	ldrb	r2, [r3, #7]
 8022aae:	687b      	ldr	r3, [r7, #4]
 8022ab0:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	7ada      	ldrb	r2, [r3, #11]
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	7bda      	ldrb	r2, [r3, #15]
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	187a      	adds	r2, r7, r1
 8022ac6:	7812      	ldrb	r2, [r2, #0]
 8022ac8:	73da      	strb	r2, [r3, #15]
}
 8022aca:	46c0      	nop			; (mov r8, r8)
 8022acc:	46bd      	mov	sp, r7
 8022ace:	b004      	add	sp, #16
 8022ad0:	bd80      	pop	{r7, pc}

08022ad2 <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 8022ad2:	b590      	push	{r4, r7, lr}
 8022ad4:	b085      	sub	sp, #20
 8022ad6:	af00      	add	r7, sp, #0
 8022ad8:	6078      	str	r0, [r7, #4]
 8022ada:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8022adc:	240f      	movs	r4, #15
 8022ade:	193b      	adds	r3, r7, r4
 8022ae0:	2200      	movs	r2, #0
 8022ae2:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8022ae4:	683a      	ldr	r2, [r7, #0]
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	0019      	movs	r1, r3
 8022aea:	2000      	movs	r0, #0
 8022aec:	f7ff f997 	bl	8021e1e <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 8022af0:	193b      	adds	r3, r7, r4
 8022af2:	2201      	movs	r2, #1
 8022af4:	701a      	strb	r2, [r3, #0]
 8022af6:	e018      	b.n	8022b2a <Cipher+0x58>
  {
    SubBytes(state);
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	0018      	movs	r0, r3
 8022afc:	f7ff f9e0 	bl	8021ec0 <SubBytes>
    ShiftRows(state);
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	0018      	movs	r0, r3
 8022b04:	f7ff fa1c 	bl	8021f40 <ShiftRows>
    MixColumns(state);
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	0018      	movs	r0, r3
 8022b0c:	f7ff fa81 	bl	8022012 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8022b10:	683a      	ldr	r2, [r7, #0]
 8022b12:	6879      	ldr	r1, [r7, #4]
 8022b14:	240f      	movs	r4, #15
 8022b16:	193b      	adds	r3, r7, r4
 8022b18:	781b      	ldrb	r3, [r3, #0]
 8022b1a:	0018      	movs	r0, r3
 8022b1c:	f7ff f97f 	bl	8021e1e <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 8022b20:	193b      	adds	r3, r7, r4
 8022b22:	193a      	adds	r2, r7, r4
 8022b24:	7812      	ldrb	r2, [r2, #0]
 8022b26:	3201      	adds	r2, #1
 8022b28:	701a      	strb	r2, [r3, #0]
 8022b2a:	230f      	movs	r3, #15
 8022b2c:	18fb      	adds	r3, r7, r3
 8022b2e:	781b      	ldrb	r3, [r3, #0]
 8022b30:	2b09      	cmp	r3, #9
 8022b32:	d9e1      	bls.n	8022af8 <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	0018      	movs	r0, r3
 8022b38:	f7ff f9c2 	bl	8021ec0 <SubBytes>
  ShiftRows(state);
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	0018      	movs	r0, r3
 8022b40:	f7ff f9fe 	bl	8021f40 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 8022b44:	683a      	ldr	r2, [r7, #0]
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	0019      	movs	r1, r3
 8022b4a:	200a      	movs	r0, #10
 8022b4c:	f7ff f967 	bl	8021e1e <AddRoundKey>
}
 8022b50:	46c0      	nop			; (mov r8, r8)
 8022b52:	46bd      	mov	sp, r7
 8022b54:	b005      	add	sp, #20
 8022b56:	bd90      	pop	{r4, r7, pc}

08022b58 <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 8022b58:	b590      	push	{r4, r7, lr}
 8022b5a:	b085      	sub	sp, #20
 8022b5c:	af00      	add	r7, sp, #0
 8022b5e:	6078      	str	r0, [r7, #4]
 8022b60:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8022b62:	240f      	movs	r4, #15
 8022b64:	193b      	adds	r3, r7, r4
 8022b66:	2200      	movs	r2, #0
 8022b68:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8022b6a:	683a      	ldr	r2, [r7, #0]
 8022b6c:	687b      	ldr	r3, [r7, #4]
 8022b6e:	0019      	movs	r1, r3
 8022b70:	200a      	movs	r0, #10
 8022b72:	f7ff f954 	bl	8021e1e <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 8022b76:	193b      	adds	r3, r7, r4
 8022b78:	2209      	movs	r2, #9
 8022b7a:	701a      	strb	r2, [r3, #0]
 8022b7c:	e018      	b.n	8022bb0 <InvCipher+0x58>
  {
    InvShiftRows(state);
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	0018      	movs	r0, r3
 8022b82:	f7ff ff5d 	bl	8022a40 <InvShiftRows>
    InvSubBytes(state);
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	0018      	movs	r0, r3
 8022b8a:	f7ff ff19 	bl	80229c0 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8022b8e:	683a      	ldr	r2, [r7, #0]
 8022b90:	6879      	ldr	r1, [r7, #4]
 8022b92:	240f      	movs	r4, #15
 8022b94:	193b      	adds	r3, r7, r4
 8022b96:	781b      	ldrb	r3, [r3, #0]
 8022b98:	0018      	movs	r0, r3
 8022b9a:	f7ff f940 	bl	8021e1e <AddRoundKey>
    InvMixColumns(state);
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	0018      	movs	r0, r3
 8022ba2:	f7ff fb3a 	bl	802221a <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 8022ba6:	193b      	adds	r3, r7, r4
 8022ba8:	193a      	adds	r2, r7, r4
 8022baa:	7812      	ldrb	r2, [r2, #0]
 8022bac:	3a01      	subs	r2, #1
 8022bae:	701a      	strb	r2, [r3, #0]
 8022bb0:	230f      	movs	r3, #15
 8022bb2:	18fb      	adds	r3, r7, r3
 8022bb4:	781b      	ldrb	r3, [r3, #0]
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	d1e1      	bne.n	8022b7e <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	0018      	movs	r0, r3
 8022bbe:	f7ff ff3f 	bl	8022a40 <InvShiftRows>
  InvSubBytes(state);
 8022bc2:	687b      	ldr	r3, [r7, #4]
 8022bc4:	0018      	movs	r0, r3
 8022bc6:	f7ff fefb 	bl	80229c0 <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 8022bca:	683a      	ldr	r2, [r7, #0]
 8022bcc:	687b      	ldr	r3, [r7, #4]
 8022bce:	0019      	movs	r1, r3
 8022bd0:	2000      	movs	r0, #0
 8022bd2:	f7ff f924 	bl	8021e1e <AddRoundKey>
}
 8022bd6:	46c0      	nop			; (mov r8, r8)
 8022bd8:	46bd      	mov	sp, r7
 8022bda:	b005      	add	sp, #20
 8022bdc:	bd90      	pop	{r4, r7, pc}

08022bde <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 8022bde:	b590      	push	{r4, r7, lr}
 8022be0:	b085      	sub	sp, #20
 8022be2:	af00      	add	r7, sp, #0
 8022be4:	6078      	str	r0, [r7, #4]
 8022be6:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8022be8:	230f      	movs	r3, #15
 8022bea:	18fb      	adds	r3, r7, r3
 8022bec:	2200      	movs	r2, #0
 8022bee:	701a      	strb	r2, [r3, #0]
 8022bf0:	e016      	b.n	8022c20 <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 8022bf2:	240f      	movs	r4, #15
 8022bf4:	193b      	adds	r3, r7, r4
 8022bf6:	781b      	ldrb	r3, [r3, #0]
 8022bf8:	687a      	ldr	r2, [r7, #4]
 8022bfa:	18d3      	adds	r3, r2, r3
 8022bfc:	7819      	ldrb	r1, [r3, #0]
 8022bfe:	193b      	adds	r3, r7, r4
 8022c00:	781b      	ldrb	r3, [r3, #0]
 8022c02:	683a      	ldr	r2, [r7, #0]
 8022c04:	18d3      	adds	r3, r2, r3
 8022c06:	781a      	ldrb	r2, [r3, #0]
 8022c08:	193b      	adds	r3, r7, r4
 8022c0a:	781b      	ldrb	r3, [r3, #0]
 8022c0c:	6878      	ldr	r0, [r7, #4]
 8022c0e:	18c3      	adds	r3, r0, r3
 8022c10:	404a      	eors	r2, r1
 8022c12:	b2d2      	uxtb	r2, r2
 8022c14:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8022c16:	193b      	adds	r3, r7, r4
 8022c18:	193a      	adds	r2, r7, r4
 8022c1a:	7812      	ldrb	r2, [r2, #0]
 8022c1c:	3201      	adds	r2, #1
 8022c1e:	701a      	strb	r2, [r3, #0]
 8022c20:	230f      	movs	r3, #15
 8022c22:	18fb      	adds	r3, r7, r3
 8022c24:	781b      	ldrb	r3, [r3, #0]
 8022c26:	2b0f      	cmp	r3, #15
 8022c28:	d9e3      	bls.n	8022bf2 <XorWithIv+0x14>
  }
}
 8022c2a:	46c0      	nop			; (mov r8, r8)
 8022c2c:	46bd      	mov	sp, r7
 8022c2e:	b005      	add	sp, #20
 8022c30:	bd90      	pop	{r4, r7, pc}

08022c32 <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 8022c32:	b580      	push	{r7, lr}
 8022c34:	b086      	sub	sp, #24
 8022c36:	af00      	add	r7, sp, #0
 8022c38:	60f8      	str	r0, [r7, #12]
 8022c3a:	60b9      	str	r1, [r7, #8]
 8022c3c:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 8022c3e:	68fb      	ldr	r3, [r7, #12]
 8022c40:	33b0      	adds	r3, #176	; 0xb0
 8022c42:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8022c44:	2300      	movs	r3, #0
 8022c46:	617b      	str	r3, [r7, #20]
 8022c48:	e013      	b.n	8022c72 <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 8022c4a:	693a      	ldr	r2, [r7, #16]
 8022c4c:	68bb      	ldr	r3, [r7, #8]
 8022c4e:	0011      	movs	r1, r2
 8022c50:	0018      	movs	r0, r3
 8022c52:	f7ff ffc4 	bl	8022bde <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 8022c56:	68fa      	ldr	r2, [r7, #12]
 8022c58:	68bb      	ldr	r3, [r7, #8]
 8022c5a:	0011      	movs	r1, r2
 8022c5c:	0018      	movs	r0, r3
 8022c5e:	f7ff ff38 	bl	8022ad2 <Cipher>
    Iv = buf;
 8022c62:	68bb      	ldr	r3, [r7, #8]
 8022c64:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 8022c66:	68bb      	ldr	r3, [r7, #8]
 8022c68:	3310      	adds	r3, #16
 8022c6a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8022c6c:	697b      	ldr	r3, [r7, #20]
 8022c6e:	3310      	adds	r3, #16
 8022c70:	617b      	str	r3, [r7, #20]
 8022c72:	697a      	ldr	r2, [r7, #20]
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	429a      	cmp	r2, r3
 8022c78:	d3e7      	bcc.n	8022c4a <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 8022c7a:	68fb      	ldr	r3, [r7, #12]
 8022c7c:	33b0      	adds	r3, #176	; 0xb0
 8022c7e:	6939      	ldr	r1, [r7, #16]
 8022c80:	2210      	movs	r2, #16
 8022c82:	0018      	movs	r0, r3
 8022c84:	f003 f938 	bl	8025ef8 <memcpy>
}
 8022c88:	46c0      	nop			; (mov r8, r8)
 8022c8a:	46bd      	mov	sp, r7
 8022c8c:	b006      	add	sp, #24
 8022c8e:	bd80      	pop	{r7, pc}

08022c90 <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 8022c90:	b590      	push	{r4, r7, lr}
 8022c92:	b08b      	sub	sp, #44	; 0x2c
 8022c94:	af00      	add	r7, sp, #0
 8022c96:	60f8      	str	r0, [r7, #12]
 8022c98:	60b9      	str	r1, [r7, #8]
 8022c9a:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8022ca0:	e026      	b.n	8022cf0 <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8022ca2:	2414      	movs	r4, #20
 8022ca4:	193a      	adds	r2, r7, r4
 8022ca6:	68bb      	ldr	r3, [r7, #8]
 8022ca8:	0010      	movs	r0, r2
 8022caa:	0019      	movs	r1, r3
 8022cac:	2310      	movs	r3, #16
 8022cae:	001a      	movs	r2, r3
 8022cb0:	f003 f922 	bl	8025ef8 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 8022cb4:	68fa      	ldr	r2, [r7, #12]
 8022cb6:	68bb      	ldr	r3, [r7, #8]
 8022cb8:	0011      	movs	r1, r2
 8022cba:	0018      	movs	r0, r3
 8022cbc:	f7ff ff4c 	bl	8022b58 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8022cc0:	68fb      	ldr	r3, [r7, #12]
 8022cc2:	33b0      	adds	r3, #176	; 0xb0
 8022cc4:	001a      	movs	r2, r3
 8022cc6:	68bb      	ldr	r3, [r7, #8]
 8022cc8:	0011      	movs	r1, r2
 8022cca:	0018      	movs	r0, r3
 8022ccc:	f7ff ff87 	bl	8022bde <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8022cd0:	68fb      	ldr	r3, [r7, #12]
 8022cd2:	33b0      	adds	r3, #176	; 0xb0
 8022cd4:	001a      	movs	r2, r3
 8022cd6:	193b      	adds	r3, r7, r4
 8022cd8:	0010      	movs	r0, r2
 8022cda:	0019      	movs	r1, r3
 8022cdc:	2310      	movs	r3, #16
 8022cde:	001a      	movs	r2, r3
 8022ce0:	f003 f90a 	bl	8025ef8 <memcpy>
    buf += AES_BLOCKLEN;
 8022ce4:	68bb      	ldr	r3, [r7, #8]
 8022ce6:	3310      	adds	r3, #16
 8022ce8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8022cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022cec:	3310      	adds	r3, #16
 8022cee:	627b      	str	r3, [r7, #36]	; 0x24
 8022cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022cf2:	687b      	ldr	r3, [r7, #4]
 8022cf4:	429a      	cmp	r2, r3
 8022cf6:	d3d4      	bcc.n	8022ca2 <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 8022cf8:	46c0      	nop			; (mov r8, r8)
 8022cfa:	46bd      	mov	sp, r7
 8022cfc:	b00b      	add	sp, #44	; 0x2c
 8022cfe:	bd90      	pop	{r4, r7, pc}

08022d00 <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 8022d00:	b580      	push	{r7, lr}
 8022d02:	b084      	sub	sp, #16
 8022d04:	af00      	add	r7, sp, #0
 8022d06:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8022d08:	2300      	movs	r3, #0
 8022d0a:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8022d0c:	230c      	movs	r3, #12
 8022d0e:	18fb      	adds	r3, r7, r3
 8022d10:	0018      	movs	r0, r3
 8022d12:	f7fe f8d6 	bl	8020ec2 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8022d16:	68f9      	ldr	r1, [r7, #12]
 8022d18:	687a      	ldr	r2, [r7, #4]
 8022d1a:	2308      	movs	r3, #8
 8022d1c:	2000      	movs	r0, #0
 8022d1e:	f002 fbc1 	bl	80254a4 <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 8022d22:	687b      	ldr	r3, [r7, #4]
 8022d24:	881b      	ldrh	r3, [r3, #0]
 8022d26:	4a05      	ldr	r2, [pc, #20]	; (8022d3c <_itsdk_error_readHeader+0x3c>)
 8022d28:	4293      	cmp	r3, r2
 8022d2a:	d001      	beq.n	8022d30 <_itsdk_error_readHeader+0x30>
 8022d2c:	2301      	movs	r3, #1
 8022d2e:	e000      	b.n	8022d32 <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 8022d30:	2300      	movs	r3, #0
}
 8022d32:	0018      	movs	r0, r3
 8022d34:	46bd      	mov	sp, r7
 8022d36:	b004      	add	sp, #16
 8022d38:	bd80      	pop	{r7, pc}
 8022d3a:	46c0      	nop			; (mov r8, r8)
 8022d3c:	0000ae73 	.word	0x0000ae73

08022d40 <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 8022d40:	b580      	push	{r7, lr}
 8022d42:	b084      	sub	sp, #16
 8022d44:	af00      	add	r7, sp, #0
 8022d46:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8022d48:	2300      	movs	r3, #0
 8022d4a:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8022d4c:	230c      	movs	r3, #12
 8022d4e:	18fb      	adds	r3, r7, r3
 8022d50:	0018      	movs	r0, r3
 8022d52:	f7fe f8b6 	bl	8020ec2 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8022d56:	68f9      	ldr	r1, [r7, #12]
 8022d58:	687a      	ldr	r2, [r7, #4]
 8022d5a:	2308      	movs	r3, #8
 8022d5c:	2000      	movs	r0, #0
 8022d5e:	f002 fafd 	bl	802535c <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 8022d62:	2300      	movs	r3, #0
}
 8022d64:	0018      	movs	r0, r3
 8022d66:	46bd      	mov	sp, r7
 8022d68:	b004      	add	sp, #16
 8022d6a:	bd80      	pop	{r7, pc}

08022d6c <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 8022d6c:	b580      	push	{r7, lr}
 8022d6e:	b084      	sub	sp, #16
 8022d70:	af00      	add	r7, sp, #0
 8022d72:	0002      	movs	r2, r0
 8022d74:	6039      	str	r1, [r7, #0]
 8022d76:	1dbb      	adds	r3, r7, #6
 8022d78:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8022d7a:	2300      	movs	r3, #0
 8022d7c:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8022d7e:	230c      	movs	r3, #12
 8022d80:	18fb      	adds	r3, r7, r3
 8022d82:	0018      	movs	r0, r3
 8022d84:	f7fe f89d 	bl	8020ec2 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8022d88:	1dbb      	adds	r3, r7, #6
 8022d8a:	881b      	ldrh	r3, [r3, #0]
 8022d8c:	00da      	lsls	r2, r3, #3
 8022d8e:	68fb      	ldr	r3, [r7, #12]
 8022d90:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 8022d92:	3308      	adds	r3, #8
 8022d94:	0019      	movs	r1, r3
 8022d96:	683a      	ldr	r2, [r7, #0]
 8022d98:	2308      	movs	r3, #8
 8022d9a:	2000      	movs	r0, #0
 8022d9c:	f002 fade 	bl	802535c <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 8022da0:	2300      	movs	r3, #0
}
 8022da2:	0018      	movs	r0, r3
 8022da4:	46bd      	mov	sp, r7
 8022da6:	b004      	add	sp, #16
 8022da8:	bd80      	pop	{r7, pc}

08022daa <_itsdk_error_read>:

/**
 * Read a given error Id from the NVM
 */
__weak itsdk_error_ret_e _itsdk_error_read(uint16_t blockId,itsdk_error_entry_t * e) {
 8022daa:	b580      	push	{r7, lr}
 8022dac:	b084      	sub	sp, #16
 8022dae:	af00      	add	r7, sp, #0
 8022db0:	0002      	movs	r2, r0
 8022db2:	6039      	str	r1, [r7, #0]
 8022db4:	1dbb      	adds	r3, r7, #6
 8022db6:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8022db8:	2300      	movs	r3, #0
 8022dba:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8022dbc:	230c      	movs	r3, #12
 8022dbe:	18fb      	adds	r3, r7, r3
 8022dc0:	0018      	movs	r0, r3
 8022dc2:	f7fe f87e 	bl	8020ec2 <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8022dc6:	1dbb      	adds	r3, r7, #6
 8022dc8:	881b      	ldrh	r3, [r3, #0]
 8022dca:	00da      	lsls	r2, r3, #3
 8022dcc:	68fb      	ldr	r3, [r7, #12]
 8022dce:	18d3      	adds	r3, r2, r3
	_eeprom_read(
 8022dd0:	3308      	adds	r3, #8
 8022dd2:	0019      	movs	r1, r3
 8022dd4:	683a      	ldr	r2, [r7, #0]
 8022dd6:	2308      	movs	r3, #8
 8022dd8:	2000      	movs	r0, #0
 8022dda:	f002 fb63 	bl	80254a4 <_eeprom_read>
		(void *)e, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 8022dde:	2300      	movs	r3, #0
}
 8022de0:	0018      	movs	r0, r3
 8022de2:	46bd      	mov	sp, r7
 8022de4:	b004      	add	sp, #16
 8022de6:	bd80      	pop	{r7, pc}

08022de8 <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 8022de8:	b580      	push	{r7, lr}
 8022dea:	b082      	sub	sp, #8
 8022dec:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 8022dee:	003b      	movs	r3, r7
 8022df0:	0018      	movs	r0, r3
 8022df2:	f7ff ff85 	bl	8022d00 <_itsdk_error_readHeader>
 8022df6:	0003      	movs	r3, r0
 8022df8:	2b01      	cmp	r3, #1
 8022dfa:	d10c      	bne.n	8022e16 <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 8022dfc:	003b      	movs	r3, r7
 8022dfe:	4a0f      	ldr	r2, [pc, #60]	; (8022e3c <itsdk_error_setup+0x54>)
 8022e00:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 8022e02:	003b      	movs	r3, r7
 8022e04:	2200      	movs	r2, #0
 8022e06:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 8022e08:	003b      	movs	r3, r7
 8022e0a:	2200      	movs	r2, #0
 8022e0c:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 8022e0e:	003b      	movs	r3, r7
 8022e10:	0018      	movs	r0, r3
 8022e12:	f7ff ff95 	bl	8022d40 <_itsdk_error_writeHeader>
	}
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_errorMng.console_private = _itsdk_error_consolePriv;
 8022e16:	4b0a      	ldr	r3, [pc, #40]	; (8022e40 <itsdk_error_setup+0x58>)
 8022e18:	4a0a      	ldr	r2, [pc, #40]	; (8022e44 <itsdk_error_setup+0x5c>)
 8022e1a:	601a      	str	r2, [r3, #0]
	__console_errorMng.console_public = NULL;
 8022e1c:	4b08      	ldr	r3, [pc, #32]	; (8022e40 <itsdk_error_setup+0x58>)
 8022e1e:	2200      	movs	r2, #0
 8022e20:	605a      	str	r2, [r3, #4]
	__console_errorMng.next = NULL;
 8022e22:	4b07      	ldr	r3, [pc, #28]	; (8022e40 <itsdk_error_setup+0x58>)
 8022e24:	2200      	movs	r2, #0
 8022e26:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_errorMng);
 8022e28:	4b05      	ldr	r3, [pc, #20]	; (8022e40 <itsdk_error_setup+0x58>)
 8022e2a:	0018      	movs	r0, r3
 8022e2c:	f7fd f96a 	bl	8020104 <itsdk_console_registerCommand>
#endif

	return ITSDK_ERROR_SUCCESS;
 8022e30:	2300      	movs	r3, #0
}
 8022e32:	0018      	movs	r0, r3
 8022e34:	46bd      	mov	sp, r7
 8022e36:	b002      	add	sp, #8
 8022e38:	bd80      	pop	{r7, pc}
 8022e3a:	46c0      	nop			; (mov r8, r8)
 8022e3c:	ffffae73 	.word	0xffffae73
 8022e40:	20001d7c 	.word	0x20001d7c
 8022e44:	080230ad 	.word	0x080230ad

08022e48 <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 8022e48:	b590      	push	{r4, r7, lr}
 8022e4a:	b08b      	sub	sp, #44	; 0x2c
 8022e4c:	af00      	add	r7, sp, #0
 8022e4e:	6078      	str	r0, [r7, #4]
 8022e50:	000a      	movs	r2, r1
 8022e52:	1cbb      	adds	r3, r7, #2
 8022e54:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 8022e56:	687a      	ldr	r2, [r7, #4]
 8022e58:	2380      	movs	r3, #128	; 0x80
 8022e5a:	055b      	lsls	r3, r3, #21
 8022e5c:	4013      	ands	r3, r2
 8022e5e:	d008      	beq.n	8022e72 <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 8022e60:	1cbb      	adds	r3, r7, #2
 8022e62:	881b      	ldrh	r3, [r3, #0]
 8022e64:	031b      	lsls	r3, r3, #12
 8022e66:	001a      	movs	r2, r3
 8022e68:	4b4b      	ldr	r3, [pc, #300]	; (8022f98 <itsdk_error_report+0x150>)
 8022e6a:	4013      	ands	r3, r2
 8022e6c:	687a      	ldr	r2, [r7, #4]
 8022e6e:	4313      	orrs	r3, r2
 8022e70:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 8022e72:	f001 f847 	bl	8023f04 <itsdk_time_get_ms>
 8022e76:	22fa      	movs	r2, #250	; 0xfa
 8022e78:	0092      	lsls	r2, r2, #2
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	f7dd fb5e 	bl	800053c <__aeabi_uldivmod>
 8022e80:	0003      	movs	r3, r0
 8022e82:	000c      	movs	r4, r1
 8022e84:	61bb      	str	r3, [r7, #24]
 8022e86:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 8022e88:	2110      	movs	r1, #16
 8022e8a:	187b      	adds	r3, r7, r1
 8022e8c:	687a      	ldr	r2, [r7, #4]
 8022e8e:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 8022e90:	69ba      	ldr	r2, [r7, #24]
 8022e92:	187b      	adds	r3, r7, r1
 8022e94:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 8022e96:	2308      	movs	r3, #8
 8022e98:	18fb      	adds	r3, r7, r3
 8022e9a:	0018      	movs	r0, r3
 8022e9c:	f7ff ff30 	bl	8022d00 <_itsdk_error_readHeader>
 8022ea0:	0003      	movs	r3, r0
 8022ea2:	2b01      	cmp	r3, #1
 8022ea4:	d101      	bne.n	8022eaa <itsdk_error_report+0x62>
 8022ea6:	2301      	movs	r3, #1
 8022ea8:	e072      	b.n	8022f90 <itsdk_error_report+0x148>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 8022eaa:	2408      	movs	r4, #8
 8022eac:	193b      	adds	r3, r7, r4
 8022eae:	889b      	ldrh	r3, [r3, #4]
 8022eb0:	2210      	movs	r2, #16
 8022eb2:	18ba      	adds	r2, r7, r2
 8022eb4:	0011      	movs	r1, r2
 8022eb6:	0018      	movs	r0, r3
 8022eb8:	f7ff ff58 	bl	8022d6c <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 8022ebc:	193b      	adds	r3, r7, r4
 8022ebe:	889b      	ldrh	r3, [r3, #4]
 8022ec0:	3301      	adds	r3, #1
 8022ec2:	4a36      	ldr	r2, [pc, #216]	; (8022f9c <itsdk_error_report+0x154>)
 8022ec4:	4013      	ands	r3, r2
 8022ec6:	d504      	bpl.n	8022ed2 <itsdk_error_report+0x8a>
 8022ec8:	3b01      	subs	r3, #1
 8022eca:	2240      	movs	r2, #64	; 0x40
 8022ecc:	4252      	negs	r2, r2
 8022ece:	4313      	orrs	r3, r2
 8022ed0:	3301      	adds	r3, #1
 8022ed2:	b29a      	uxth	r2, r3
 8022ed4:	2108      	movs	r1, #8
 8022ed6:	187b      	adds	r3, r7, r1
 8022ed8:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 8022eda:	187b      	adds	r3, r7, r1
 8022edc:	889a      	ldrh	r2, [r3, #4]
 8022ede:	187b      	adds	r3, r7, r1
 8022ee0:	885b      	ldrh	r3, [r3, #2]
 8022ee2:	429a      	cmp	r2, r3
 8022ee4:	d10f      	bne.n	8022f06 <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 8022ee6:	2308      	movs	r3, #8
 8022ee8:	18fb      	adds	r3, r7, r3
 8022eea:	885b      	ldrh	r3, [r3, #2]
 8022eec:	3301      	adds	r3, #1
 8022eee:	4a2b      	ldr	r2, [pc, #172]	; (8022f9c <itsdk_error_report+0x154>)
 8022ef0:	4013      	ands	r3, r2
 8022ef2:	d504      	bpl.n	8022efe <itsdk_error_report+0xb6>
 8022ef4:	3b01      	subs	r3, #1
 8022ef6:	2240      	movs	r2, #64	; 0x40
 8022ef8:	4252      	negs	r2, r2
 8022efa:	4313      	orrs	r3, r2
 8022efc:	3301      	adds	r3, #1
 8022efe:	b29a      	uxth	r2, r3
 8022f00:	2308      	movs	r3, #8
 8022f02:	18fb      	adds	r3, r7, r3
 8022f04:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 8022f06:	2308      	movs	r3, #8
 8022f08:	18fb      	adds	r3, r7, r3
 8022f0a:	0018      	movs	r0, r3
 8022f0c:	f7ff ff18 	bl	8022d40 <_itsdk_error_writeHeader>

	char t = 'S';
 8022f10:	2327      	movs	r3, #39	; 0x27
 8022f12:	18fb      	adds	r3, r7, r3
 8022f14:	2253      	movs	r2, #83	; 0x53
 8022f16:	701a      	strb	r2, [r3, #0]
	if ((error & ITSDK_ERROR_TYPE_MASK) == ITSDK_ERROR_TYPE_APP) {
 8022f18:	687a      	ldr	r2, [r7, #4]
 8022f1a:	2380      	movs	r3, #128	; 0x80
 8022f1c:	059b      	lsls	r3, r3, #22
 8022f1e:	4013      	ands	r3, r2
 8022f20:	d003      	beq.n	8022f2a <itsdk_error_report+0xe2>
		t = 'A';
 8022f22:	2327      	movs	r3, #39	; 0x27
 8022f24:	18fb      	adds	r3, r7, r3
 8022f26:	2241      	movs	r2, #65	; 0x41
 8022f28:	701a      	strb	r2, [r3, #0]
	}

	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 8022f2a:	687b      	ldr	r3, [r7, #4]
 8022f2c:	0f9b      	lsrs	r3, r3, #30
 8022f2e:	079a      	lsls	r2, r3, #30
 8022f30:	23c0      	movs	r3, #192	; 0xc0
 8022f32:	061b      	lsls	r3, r3, #24
 8022f34:	429a      	cmp	r2, r3
 8022f36:	d108      	bne.n	8022f4a <itsdk_error_report+0x102>
		log_error("[CRITICAL ERROR] %c 0x%08X\r\n",t,error);
 8022f38:	2327      	movs	r3, #39	; 0x27
 8022f3a:	18fb      	adds	r3, r7, r3
 8022f3c:	7819      	ldrb	r1, [r3, #0]
 8022f3e:	687a      	ldr	r2, [r7, #4]
 8022f40:	4b17      	ldr	r3, [pc, #92]	; (8022fa0 <itsdk_error_report+0x158>)
 8022f42:	0018      	movs	r0, r3
 8022f44:	f000 fa0c 	bl	8023360 <log_error>
		while(1);
 8022f48:	e7fe      	b.n	8022f48 <itsdk_error_report+0x100>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 8022f4a:	687b      	ldr	r3, [r7, #4]
 8022f4c:	2b00      	cmp	r3, #0
 8022f4e:	da08      	bge.n	8022f62 <itsdk_error_report+0x11a>
		log_error("[ERROR] %c 0x%08X\r\n",t,error);
 8022f50:	2327      	movs	r3, #39	; 0x27
 8022f52:	18fb      	adds	r3, r7, r3
 8022f54:	7819      	ldrb	r1, [r3, #0]
 8022f56:	687a      	ldr	r2, [r7, #4]
 8022f58:	4b12      	ldr	r3, [pc, #72]	; (8022fa4 <itsdk_error_report+0x15c>)
 8022f5a:	0018      	movs	r0, r3
 8022f5c:	f000 fa00 	bl	8023360 <log_error>
 8022f60:	e015      	b.n	8022f8e <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 8022f62:	687a      	ldr	r2, [r7, #4]
 8022f64:	2380      	movs	r3, #128	; 0x80
 8022f66:	05db      	lsls	r3, r3, #23
 8022f68:	4013      	ands	r3, r2
 8022f6a:	d008      	beq.n	8022f7e <itsdk_error_report+0x136>
		log_warn("[WARN] %c 0x%08X\r\n",t,error);
 8022f6c:	2327      	movs	r3, #39	; 0x27
 8022f6e:	18fb      	adds	r3, r7, r3
 8022f70:	7819      	ldrb	r1, [r3, #0]
 8022f72:	687a      	ldr	r2, [r7, #4]
 8022f74:	4b0c      	ldr	r3, [pc, #48]	; (8022fa8 <itsdk_error_report+0x160>)
 8022f76:	0018      	movs	r0, r3
 8022f78:	f000 fa38 	bl	80233ec <log_warn>
 8022f7c:	e007      	b.n	8022f8e <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] %c 0x%08X\r\n",t,error);
 8022f7e:	2327      	movs	r3, #39	; 0x27
 8022f80:	18fb      	adds	r3, r7, r3
 8022f82:	7819      	ldrb	r1, [r3, #0]
 8022f84:	687a      	ldr	r2, [r7, #4]
 8022f86:	4b09      	ldr	r3, [pc, #36]	; (8022fac <itsdk_error_report+0x164>)
 8022f88:	0018      	movs	r0, r3
 8022f8a:	f000 fa75 	bl	8023478 <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 8022f8e:	2300      	movs	r3, #0
}
 8022f90:	0018      	movs	r0, r3
 8022f92:	46bd      	mov	sp, r7
 8022f94:	b00b      	add	sp, #44	; 0x2c
 8022f96:	bd90      	pop	{r4, r7, pc}
 8022f98:	0ffff000 	.word	0x0ffff000
 8022f9c:	8000003f 	.word	0x8000003f
 8022fa0:	080275e4 	.word	0x080275e4
 8022fa4:	08027604 	.word	0x08027604
 8022fa8:	08027618 	.word	0x08027618
 8022fac:	0802762c 	.word	0x0802762c

08022fb0 <itsdk_error_get>:
 * When blockId is ITSDK_ERROR_FIRSTBLOCK the first available block is returned
 * Returns the next blockId to be read. ITSDK_ERROR_LASTBLOCK when no more to read
 * The blockId is updated with next block Id value.
 *
 */
itsdk_error_ret_e itsdk_error_get(uint16_t * blockId,itsdk_error_entry_t * e) {
 8022fb0:	b580      	push	{r7, lr}
 8022fb2:	b084      	sub	sp, #16
 8022fb4:	af00      	add	r7, sp, #0
 8022fb6:	6078      	str	r0, [r7, #4]
 8022fb8:	6039      	str	r1, [r7, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_SUCCESS ) {
 8022fba:	2308      	movs	r3, #8
 8022fbc:	18fb      	adds	r3, r7, r3
 8022fbe:	0018      	movs	r0, r3
 8022fc0:	f7ff fe9e 	bl	8022d00 <_itsdk_error_readHeader>
 8022fc4:	1e03      	subs	r3, r0, #0
 8022fc6:	d138      	bne.n	802303a <itsdk_error_get+0x8a>
		// Manage blockId request
		if ( *blockId == ITSDK_ERROR_FIRSTBLOCK ) {
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	881b      	ldrh	r3, [r3, #0]
 8022fcc:	4a22      	ldr	r2, [pc, #136]	; (8023058 <itsdk_error_get+0xa8>)
 8022fce:	4293      	cmp	r3, r2
 8022fd0:	d104      	bne.n	8022fdc <itsdk_error_get+0x2c>
			*blockId = h.readPt;
 8022fd2:	2308      	movs	r3, #8
 8022fd4:	18fb      	adds	r3, r7, r3
 8022fd6:	885a      	ldrh	r2, [r3, #2]
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	801a      	strh	r2, [r3, #0]
		}
		if ( *blockId != h.writePt ) {
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	881a      	ldrh	r2, [r3, #0]
 8022fe0:	2308      	movs	r3, #8
 8022fe2:	18fb      	adds	r3, r7, r3
 8022fe4:	889b      	ldrh	r3, [r3, #4]
 8022fe6:	429a      	cmp	r2, r3
 8022fe8:	d027      	beq.n	802303a <itsdk_error_get+0x8a>
			if ( *blockId < ITSDK_ERROR_BLOCKS ) {
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	881b      	ldrh	r3, [r3, #0]
 8022fee:	2b3f      	cmp	r3, #63	; 0x3f
 8022ff0:	d823      	bhi.n	802303a <itsdk_error_get+0x8a>
				// Read the block
				if ( _itsdk_error_read(*blockId,e) == ITSDK_ERROR_SUCCESS ) {
 8022ff2:	687b      	ldr	r3, [r7, #4]
 8022ff4:	881b      	ldrh	r3, [r3, #0]
 8022ff6:	683a      	ldr	r2, [r7, #0]
 8022ff8:	0011      	movs	r1, r2
 8022ffa:	0018      	movs	r0, r3
 8022ffc:	f7ff fed5 	bl	8022daa <_itsdk_error_read>
 8023000:	1e03      	subs	r3, r0, #0
 8023002:	d11a      	bne.n	802303a <itsdk_error_get+0x8a>
					*blockId = (*blockId + 1) % ITSDK_ERROR_BLOCKS;
 8023004:	687b      	ldr	r3, [r7, #4]
 8023006:	881b      	ldrh	r3, [r3, #0]
 8023008:	3301      	adds	r3, #1
 802300a:	4a14      	ldr	r2, [pc, #80]	; (802305c <itsdk_error_get+0xac>)
 802300c:	4013      	ands	r3, r2
 802300e:	d504      	bpl.n	802301a <itsdk_error_get+0x6a>
 8023010:	3b01      	subs	r3, #1
 8023012:	2240      	movs	r2, #64	; 0x40
 8023014:	4252      	negs	r2, r2
 8023016:	4313      	orrs	r3, r2
 8023018:	3301      	adds	r3, #1
 802301a:	b29a      	uxth	r2, r3
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	801a      	strh	r2, [r3, #0]
					if ( *blockId == h.writePt ) *blockId = ITSDK_ERROR_LASTBLOCK;
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	881a      	ldrh	r2, [r3, #0]
 8023024:	2308      	movs	r3, #8
 8023026:	18fb      	adds	r3, r7, r3
 8023028:	889b      	ldrh	r3, [r3, #4]
 802302a:	429a      	cmp	r2, r3
 802302c:	d103      	bne.n	8023036 <itsdk_error_get+0x86>
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	2201      	movs	r2, #1
 8023032:	4252      	negs	r2, r2
 8023034:	801a      	strh	r2, [r3, #0]
					return ITSDK_ERROR_SUCCESS;
 8023036:	2300      	movs	r3, #0
 8023038:	e00a      	b.n	8023050 <itsdk_error_get+0xa0>
				}
			}
		}
	}
	e->error = 0;
 802303a:	683b      	ldr	r3, [r7, #0]
 802303c:	2200      	movs	r2, #0
 802303e:	605a      	str	r2, [r3, #4]
	e->timeS = 0;
 8023040:	683b      	ldr	r3, [r7, #0]
 8023042:	2200      	movs	r2, #0
 8023044:	601a      	str	r2, [r3, #0]
	*blockId = ITSDK_ERROR_LASTBLOCK;
 8023046:	687b      	ldr	r3, [r7, #4]
 8023048:	2201      	movs	r2, #1
 802304a:	4252      	negs	r2, r2
 802304c:	801a      	strh	r2, [r3, #0]
	return ITSDK_ERROR_FAILED;
 802304e:	2301      	movs	r3, #1
}
 8023050:	0018      	movs	r0, r3
 8023052:	46bd      	mov	sp, r7
 8023054:	b004      	add	sp, #16
 8023056:	bd80      	pop	{r7, pc}
 8023058:	0000fffe 	.word	0x0000fffe
 802305c:	8000003f 	.word	0x8000003f

08023060 <itsdk_error_clear>:


/**
 * clear the error log history
 */
itsdk_error_ret_e itsdk_error_clear() {
 8023060:	b580      	push	{r7, lr}
 8023062:	b082      	sub	sp, #8
 8023064:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 8023066:	003b      	movs	r3, r7
 8023068:	0018      	movs	r0, r3
 802306a:	f7ff fe49 	bl	8022d00 <_itsdk_error_readHeader>
 802306e:	0003      	movs	r3, r0
 8023070:	2b01      	cmp	r3, #1
 8023072:	d101      	bne.n	8023078 <itsdk_error_clear+0x18>
 8023074:	2301      	movs	r3, #1
 8023076:	e008      	b.n	802308a <itsdk_error_clear+0x2a>
	h.readPt = h.writePt;
 8023078:	003b      	movs	r3, r7
 802307a:	889a      	ldrh	r2, [r3, #4]
 802307c:	003b      	movs	r3, r7
 802307e:	805a      	strh	r2, [r3, #2]
	_itsdk_error_writeHeader(&h);
 8023080:	003b      	movs	r3, r7
 8023082:	0018      	movs	r0, r3
 8023084:	f7ff fe5c 	bl	8022d40 <_itsdk_error_writeHeader>
	return ITSDK_ERROR_SUCCESS;
 8023088:	2300      	movs	r3, #0
}
 802308a:	0018      	movs	r0, r3
 802308c:	46bd      	mov	sp, r7
 802308e:	b002      	add	sp, #8
 8023090:	bd80      	pop	{r7, pc}

08023092 <itsdk_error_getSize>:

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 8023092:	b580      	push	{r7, lr}
 8023094:	b082      	sub	sp, #8
 8023096:	af00      	add	r7, sp, #0
 8023098:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	2282      	movs	r2, #130	; 0x82
 802309e:	0092      	lsls	r2, r2, #2
 80230a0:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 80230a2:	2300      	movs	r3, #0
}
 80230a4:	0018      	movs	r0, r3
 80230a6:	46bd      	mov	sp, r7
 80230a8:	b002      	add	sp, #8
 80230aa:	bd80      	pop	{r7, pc}

080230ac <_itsdk_error_consolePriv>:
// =================================================================================
// Console options
// =================================================================================

#if ITSDK_WITH_CONSOLE == __ENABLE
static itsdk_console_return_e _itsdk_error_consolePriv(char * buffer, uint8_t sz) {
 80230ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230ae:	b08b      	sub	sp, #44	; 0x2c
 80230b0:	af04      	add	r7, sp, #16
 80230b2:	6078      	str	r0, [r7, #4]
 80230b4:	000a      	movs	r2, r1
 80230b6:	1cfb      	adds	r3, r7, #3
 80230b8:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 80230ba:	1cfb      	adds	r3, r7, #3
 80230bc:	781b      	ldrb	r3, [r3, #0]
 80230be:	2b01      	cmp	r3, #1
 80230c0:	d000      	beq.n	80230c4 <_itsdk_error_consolePriv+0x18>
 80230c2:	e087      	b.n	80231d4 <_itsdk_error_consolePriv+0x128>
	  switch(buffer[0]){
 80230c4:	687b      	ldr	r3, [r7, #4]
 80230c6:	781b      	ldrb	r3, [r3, #0]
 80230c8:	2b45      	cmp	r3, #69	; 0x45
 80230ca:	d100      	bne.n	80230ce <_itsdk_error_consolePriv+0x22>
 80230cc:	e07a      	b.n	80231c4 <_itsdk_error_consolePriv+0x118>
 80230ce:	2b65      	cmp	r3, #101	; 0x65
 80230d0:	d010      	beq.n	80230f4 <_itsdk_error_consolePriv+0x48>
 80230d2:	2b3f      	cmp	r3, #63	; 0x3f
 80230d4:	d000      	beq.n	80230d8 <_itsdk_error_consolePriv+0x2c>
			itsdk_error_clear();
			_itsdk_console_printf("OK\r\n");
  		    return ITSDK_CONSOLE_SUCCES;
			break;
		default:
			break;
 80230d6:	e07e      	b.n	80231d6 <_itsdk_error_consolePriv+0x12a>
			_itsdk_console_printf("--- ErrorMng\r\n");
 80230d8:	4b41      	ldr	r3, [pc, #260]	; (80231e0 <_itsdk_error_consolePriv+0x134>)
 80230da:	0018      	movs	r0, r3
 80230dc:	f7fc fe52 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("e          : print errors log\r\n");
 80230e0:	4b40      	ldr	r3, [pc, #256]	; (80231e4 <_itsdk_error_consolePriv+0x138>)
 80230e2:	0018      	movs	r0, r3
 80230e4:	f7fc fe4e 	bl	801fd84 <_itsdk_console_printf>
			_itsdk_console_printf("E          : Clear the error logs\r\n");
 80230e8:	4b3f      	ldr	r3, [pc, #252]	; (80231e8 <_itsdk_error_consolePriv+0x13c>)
 80230ea:	0018      	movs	r0, r3
 80230ec:	f7fc fe4a 	bl	801fd84 <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 80230f0:	2300      	movs	r3, #0
 80230f2:	e071      	b.n	80231d8 <_itsdk_error_consolePriv+0x12c>
				uint16_t blockId = ITSDK_ERROR_FIRSTBLOCK;
 80230f4:	2314      	movs	r3, #20
 80230f6:	18fb      	adds	r3, r7, r3
 80230f8:	2202      	movs	r2, #2
 80230fa:	4252      	negs	r2, r2
 80230fc:	801a      	strh	r2, [r3, #0]
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 80230fe:	e051      	b.n	80231a4 <_itsdk_error_consolePriv+0xf8>
					switch (e.error & ITSDK_ERROR_LEVEL_MASK) {
 8023100:	230c      	movs	r3, #12
 8023102:	18fb      	adds	r3, r7, r3
 8023104:	685b      	ldr	r3, [r3, #4]
 8023106:	0f9b      	lsrs	r3, r3, #30
 8023108:	079b      	lsls	r3, r3, #30
 802310a:	2280      	movs	r2, #128	; 0x80
 802310c:	0612      	lsls	r2, r2, #24
 802310e:	4293      	cmp	r3, r2
 8023110:	d011      	beq.n	8023136 <_itsdk_error_consolePriv+0x8a>
 8023112:	22c0      	movs	r2, #192	; 0xc0
 8023114:	0612      	lsls	r2, r2, #24
 8023116:	4293      	cmp	r3, r2
 8023118:	d012      	beq.n	8023140 <_itsdk_error_consolePriv+0x94>
 802311a:	2280      	movs	r2, #128	; 0x80
 802311c:	05d2      	lsls	r2, r2, #23
 802311e:	4293      	cmp	r3, r2
 8023120:	d004      	beq.n	802312c <_itsdk_error_consolePriv+0x80>
					case ITSDK_ERROR_LEVEL_INFO:  l = 'I'; break;
 8023122:	2317      	movs	r3, #23
 8023124:	18fb      	adds	r3, r7, r3
 8023126:	2249      	movs	r2, #73	; 0x49
 8023128:	701a      	strb	r2, [r3, #0]
 802312a:	e00e      	b.n	802314a <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_WARN:  l = 'W'; break;
 802312c:	2317      	movs	r3, #23
 802312e:	18fb      	adds	r3, r7, r3
 8023130:	2257      	movs	r2, #87	; 0x57
 8023132:	701a      	strb	r2, [r3, #0]
 8023134:	e009      	b.n	802314a <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_ERROR: l = 'E'; break;
 8023136:	2317      	movs	r3, #23
 8023138:	18fb      	adds	r3, r7, r3
 802313a:	2245      	movs	r2, #69	; 0x45
 802313c:	701a      	strb	r2, [r3, #0]
 802313e:	e004      	b.n	802314a <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_FATAL: l = 'F'; break;
 8023140:	2317      	movs	r3, #23
 8023142:	18fb      	adds	r3, r7, r3
 8023144:	2246      	movs	r2, #70	; 0x46
 8023146:	701a      	strb	r2, [r3, #0]
 8023148:	46c0      	nop			; (mov r8, r8)
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 802314a:	2317      	movs	r3, #23
 802314c:	18fb      	adds	r3, r7, r3
 802314e:	781c      	ldrb	r4, [r3, #0]
 8023150:	220c      	movs	r2, #12
 8023152:	18bb      	adds	r3, r7, r2
 8023154:	681d      	ldr	r5, [r3, #0]
 8023156:	18bb      	adds	r3, r7, r2
 8023158:	685e      	ldr	r6, [r3, #4]
						(((e.error & ITSDK_ERROR_TYPE_APP) > 0) ? 'A' : 'S'),
 802315a:	18bb      	adds	r3, r7, r2
 802315c:	685a      	ldr	r2, [r3, #4]
 802315e:	2380      	movs	r3, #128	; 0x80
 8023160:	059b      	lsls	r3, r3, #22
 8023162:	4013      	ands	r3, r2
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8023164:	d001      	beq.n	802316a <_itsdk_error_consolePriv+0xbe>
 8023166:	2241      	movs	r2, #65	; 0x41
 8023168:	e000      	b.n	802316c <_itsdk_error_consolePriv+0xc0>
 802316a:	2253      	movs	r2, #83	; 0x53
						(e.error & ITSDK_ERROR_ERROR_MASK) >> ITSDK_ERROR_ERROR_SHIFT,
 802316c:	200c      	movs	r0, #12
 802316e:	183b      	adds	r3, r7, r0
 8023170:	685b      	ldr	r3, [r3, #4]
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8023172:	051b      	lsls	r3, r3, #20
 8023174:	0d19      	lsrs	r1, r3, #20
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 8023176:	183b      	adds	r3, r7, r0
 8023178:	6858      	ldr	r0, [r3, #4]
 802317a:	2380      	movs	r3, #128	; 0x80
 802317c:	055b      	lsls	r3, r3, #21
 802317e:	4003      	ands	r3, r0
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8023180:	d006      	beq.n	8023190 <_itsdk_error_consolePriv+0xe4>
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 8023182:	230c      	movs	r3, #12
 8023184:	18fb      	adds	r3, r7, r3
 8023186:	685b      	ldr	r3, [r3, #4]
 8023188:	0b1b      	lsrs	r3, r3, #12
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 802318a:	041b      	lsls	r3, r3, #16
 802318c:	0c1b      	lsrs	r3, r3, #16
 802318e:	e000      	b.n	8023192 <_itsdk_error_consolePriv+0xe6>
 8023190:	2300      	movs	r3, #0
 8023192:	4816      	ldr	r0, [pc, #88]	; (80231ec <_itsdk_error_consolePriv+0x140>)
 8023194:	9302      	str	r3, [sp, #8]
 8023196:	9101      	str	r1, [sp, #4]
 8023198:	9200      	str	r2, [sp, #0]
 802319a:	0033      	movs	r3, r6
 802319c:	002a      	movs	r2, r5
 802319e:	0021      	movs	r1, r4
 80231a0:	f7fc fdf0 	bl	801fd84 <_itsdk_console_printf>
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 80231a4:	230c      	movs	r3, #12
 80231a6:	18fa      	adds	r2, r7, r3
 80231a8:	2314      	movs	r3, #20
 80231aa:	18fb      	adds	r3, r7, r3
 80231ac:	0011      	movs	r1, r2
 80231ae:	0018      	movs	r0, r3
 80231b0:	f7ff fefe 	bl	8022fb0 <itsdk_error_get>
 80231b4:	1e03      	subs	r3, r0, #0
 80231b6:	d0a3      	beq.n	8023100 <_itsdk_error_consolePriv+0x54>
				_itsdk_console_printf("OK\r\n");
 80231b8:	4b0d      	ldr	r3, [pc, #52]	; (80231f0 <_itsdk_error_consolePriv+0x144>)
 80231ba:	0018      	movs	r0, r3
 80231bc:	f7fc fde2 	bl	801fd84 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 80231c0:	2300      	movs	r3, #0
 80231c2:	e009      	b.n	80231d8 <_itsdk_error_consolePriv+0x12c>
			itsdk_error_clear();
 80231c4:	f7ff ff4c 	bl	8023060 <itsdk_error_clear>
			_itsdk_console_printf("OK\r\n");
 80231c8:	4b09      	ldr	r3, [pc, #36]	; (80231f0 <_itsdk_error_consolePriv+0x144>)
 80231ca:	0018      	movs	r0, r3
 80231cc:	f7fc fdda 	bl	801fd84 <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 80231d0:	2300      	movs	r3, #0
 80231d2:	e001      	b.n	80231d8 <_itsdk_error_consolePriv+0x12c>
	  }
	} //Sz == 1
 80231d4:	46c0      	nop			; (mov r8, r8)
  return ITSDK_CONSOLE_NOTFOUND;
 80231d6:	2301      	movs	r3, #1
}
 80231d8:	0018      	movs	r0, r3
 80231da:	46bd      	mov	sp, r7
 80231dc:	b007      	add	sp, #28
 80231de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80231e0:	08027640 	.word	0x08027640
 80231e4:	08027650 	.word	0x08027650
 80231e8:	08027670 	.word	0x08027670
 80231ec:	08027694 	.word	0x08027694
 80231f0:	080276c0 	.word	0x080276c0

080231f4 <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 80231f4:	b580      	push	{r7, lr}
 80231f6:	b082      	sub	sp, #8
 80231f8:	af00      	add	r7, sp, #0
 80231fa:	0002      	movs	r2, r0
 80231fc:	1dbb      	adds	r3, r7, #6
 80231fe:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 8023200:	1dbb      	adds	r3, r7, #6
 8023202:	881b      	ldrh	r3, [r3, #0]
 8023204:	4a51      	ldr	r2, [pc, #324]	; (802334c <log_init+0x158>)
 8023206:	4013      	ands	r3, r2
 8023208:	17da      	asrs	r2, r3, #31
 802320a:	1ad3      	subs	r3, r2, r3
 802320c:	0fdb      	lsrs	r3, r3, #31
 802320e:	b2da      	uxtb	r2, r3
 8023210:	4b4f      	ldr	r3, [pc, #316]	; (8023350 <log_init+0x15c>)
 8023212:	2101      	movs	r1, #1
 8023214:	400a      	ands	r2, r1
 8023216:	1890      	adds	r0, r2, r2
 8023218:	781a      	ldrb	r2, [r3, #0]
 802321a:	2102      	movs	r1, #2
 802321c:	438a      	bics	r2, r1
 802321e:	1c11      	adds	r1, r2, #0
 8023220:	1c02      	adds	r2, r0, #0
 8023222:	430a      	orrs	r2, r1
 8023224:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 8023226:	1dbb      	adds	r3, r7, #6
 8023228:	881b      	ldrh	r3, [r3, #0]
 802322a:	4a4a      	ldr	r2, [pc, #296]	; (8023354 <log_init+0x160>)
 802322c:	4013      	ands	r3, r2
 802322e:	17da      	asrs	r2, r3, #31
 8023230:	1ad3      	subs	r3, r2, r3
 8023232:	0fdb      	lsrs	r3, r3, #31
 8023234:	b2da      	uxtb	r2, r3
 8023236:	4b46      	ldr	r3, [pc, #280]	; (8023350 <log_init+0x15c>)
 8023238:	2101      	movs	r1, #1
 802323a:	400a      	ands	r2, r1
 802323c:	0090      	lsls	r0, r2, #2
 802323e:	781a      	ldrb	r2, [r3, #0]
 8023240:	2104      	movs	r1, #4
 8023242:	438a      	bics	r2, r1
 8023244:	1c11      	adds	r1, r2, #0
 8023246:	1c02      	adds	r2, r0, #0
 8023248:	430a      	orrs	r2, r1
 802324a:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 802324c:	1dbb      	adds	r3, r7, #6
 802324e:	881b      	ldrh	r3, [r3, #0]
 8023250:	4a41      	ldr	r2, [pc, #260]	; (8023358 <log_init+0x164>)
 8023252:	4013      	ands	r3, r2
 8023254:	17da      	asrs	r2, r3, #31
 8023256:	1ad3      	subs	r3, r2, r3
 8023258:	0fdb      	lsrs	r3, r3, #31
 802325a:	b2da      	uxtb	r2, r3
 802325c:	4b3c      	ldr	r3, [pc, #240]	; (8023350 <log_init+0x15c>)
 802325e:	2101      	movs	r1, #1
 8023260:	400a      	ands	r2, r1
 8023262:	00d0      	lsls	r0, r2, #3
 8023264:	781a      	ldrb	r2, [r3, #0]
 8023266:	2108      	movs	r1, #8
 8023268:	438a      	bics	r2, r1
 802326a:	1c11      	adds	r1, r2, #0
 802326c:	1c02      	adds	r2, r0, #0
 802326e:	430a      	orrs	r2, r1
 8023270:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 8023272:	1dbb      	adds	r3, r7, #6
 8023274:	881b      	ldrh	r3, [r3, #0]
 8023276:	4a39      	ldr	r2, [pc, #228]	; (802335c <log_init+0x168>)
 8023278:	4013      	ands	r3, r2
 802327a:	17da      	asrs	r2, r3, #31
 802327c:	1ad3      	subs	r3, r2, r3
 802327e:	0fdb      	lsrs	r3, r3, #31
 8023280:	b2da      	uxtb	r2, r3
 8023282:	4b33      	ldr	r3, [pc, #204]	; (8023350 <log_init+0x15c>)
 8023284:	2101      	movs	r1, #1
 8023286:	400a      	ands	r2, r1
 8023288:	0110      	lsls	r0, r2, #4
 802328a:	781a      	ldrb	r2, [r3, #0]
 802328c:	2110      	movs	r1, #16
 802328e:	438a      	bics	r2, r1
 8023290:	1c11      	adds	r1, r2, #0
 8023292:	1c02      	adds	r2, r0, #0
 8023294:	430a      	orrs	r2, r1
 8023296:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 8023298:	1dbb      	adds	r3, r7, #6
 802329a:	881a      	ldrh	r2, [r3, #0]
 802329c:	23f0      	movs	r3, #240	; 0xf0
 802329e:	011b      	lsls	r3, r3, #4
 80232a0:	4013      	ands	r3, r2
 80232a2:	17da      	asrs	r2, r3, #31
 80232a4:	1ad3      	subs	r3, r2, r3
 80232a6:	0fdb      	lsrs	r3, r3, #31
 80232a8:	b2da      	uxtb	r2, r3
 80232aa:	4b29      	ldr	r3, [pc, #164]	; (8023350 <log_init+0x15c>)
 80232ac:	2101      	movs	r1, #1
 80232ae:	400a      	ands	r2, r1
 80232b0:	0150      	lsls	r0, r2, #5
 80232b2:	781a      	ldrb	r2, [r3, #0]
 80232b4:	2120      	movs	r1, #32
 80232b6:	438a      	bics	r2, r1
 80232b8:	1c11      	adds	r1, r2, #0
 80232ba:	1c02      	adds	r2, r0, #0
 80232bc:	430a      	orrs	r2, r1
 80232be:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 80232c0:	1dbb      	adds	r3, r7, #6
 80232c2:	881b      	ldrh	r3, [r3, #0]
 80232c4:	22f0      	movs	r2, #240	; 0xf0
 80232c6:	4013      	ands	r3, r2
 80232c8:	17da      	asrs	r2, r3, #31
 80232ca:	1ad3      	subs	r3, r2, r3
 80232cc:	0fdb      	lsrs	r3, r3, #31
 80232ce:	b2da      	uxtb	r2, r3
 80232d0:	4b1f      	ldr	r3, [pc, #124]	; (8023350 <log_init+0x15c>)
 80232d2:	2101      	movs	r1, #1
 80232d4:	400a      	ands	r2, r1
 80232d6:	0190      	lsls	r0, r2, #6
 80232d8:	781a      	ldrb	r2, [r3, #0]
 80232da:	2140      	movs	r1, #64	; 0x40
 80232dc:	438a      	bics	r2, r1
 80232de:	1c11      	adds	r1, r2, #0
 80232e0:	1c02      	adds	r2, r0, #0
 80232e2:	430a      	orrs	r2, r1
 80232e4:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 80232e6:	1dbb      	adds	r3, r7, #6
 80232e8:	881b      	ldrh	r3, [r3, #0]
 80232ea:	220f      	movs	r2, #15
 80232ec:	4013      	ands	r3, r2
 80232ee:	17da      	asrs	r2, r3, #31
 80232f0:	1ad3      	subs	r3, r2, r3
 80232f2:	0fdb      	lsrs	r3, r3, #31
 80232f4:	b2da      	uxtb	r2, r3
 80232f6:	4b16      	ldr	r3, [pc, #88]	; (8023350 <log_init+0x15c>)
 80232f8:	01d0      	lsls	r0, r2, #7
 80232fa:	781a      	ldrb	r2, [r3, #0]
 80232fc:	217f      	movs	r1, #127	; 0x7f
 80232fe:	400a      	ands	r2, r1
 8023300:	1c11      	adds	r1, r2, #0
 8023302:	1c02      	adds	r2, r0, #0
 8023304:	430a      	orrs	r2, r1
 8023306:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 8023308:	1dbb      	adds	r3, r7, #6
 802330a:	881a      	ldrh	r2, [r3, #0]
 802330c:	23f0      	movs	r3, #240	; 0xf0
 802330e:	021b      	lsls	r3, r3, #8
 8023310:	4013      	ands	r3, r2
 8023312:	17da      	asrs	r2, r3, #31
 8023314:	1ad3      	subs	r3, r2, r3
 8023316:	0fdb      	lsrs	r3, r3, #31
 8023318:	b2da      	uxtb	r2, r3
 802331a:	4b0d      	ldr	r3, [pc, #52]	; (8023350 <log_init+0x15c>)
 802331c:	2101      	movs	r1, #1
 802331e:	400a      	ands	r2, r1
 8023320:	0010      	movs	r0, r2
 8023322:	785a      	ldrb	r2, [r3, #1]
 8023324:	2101      	movs	r1, #1
 8023326:	438a      	bics	r2, r1
 8023328:	1c11      	adds	r1, r2, #0
 802332a:	1c02      	adds	r2, r0, #0
 802332c:	430a      	orrs	r2, r1
 802332e:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 8023330:	4b07      	ldr	r3, [pc, #28]	; (8023350 <log_init+0x15c>)
 8023332:	1dba      	adds	r2, r7, #6
 8023334:	8812      	ldrh	r2, [r2, #0]
 8023336:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 8023338:	4b05      	ldr	r3, [pc, #20]	; (8023350 <log_init+0x15c>)
 802333a:	781a      	ldrb	r2, [r3, #0]
 802333c:	2101      	movs	r1, #1
 802333e:	430a      	orrs	r2, r1
 8023340:	701a      	strb	r2, [r3, #0]
  return true;
 8023342:	2301      	movs	r3, #1
}
 8023344:	0018      	movs	r0, r3
 8023346:	46bd      	mov	sp, r7
 8023348:	b002      	add	sp, #8
 802334a:	bd80      	pop	{r7, pc}
 802334c:	00001111 	.word	0x00001111
 8023350:	20002218 	.word	0x20002218
 8023354:	00002222 	.word	0x00002222
 8023358:	00004444 	.word	0x00004444
 802335c:	00008888 	.word	0x00008888

08023360 <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 8023360:	b40f      	push	{r0, r1, r2, r3}
 8023362:	b580      	push	{r7, lr}
 8023364:	b096      	sub	sp, #88	; 0x58
 8023366:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 8023368:	4b1f      	ldr	r3, [pc, #124]	; (80233e8 <log_error+0x88>)
 802336a:	781b      	ldrb	r3, [r3, #0]
 802336c:	2202      	movs	r2, #2
 802336e:	4013      	ands	r3, r2
 8023370:	b2db      	uxtb	r3, r3
 8023372:	2b00      	cmp	r3, #0
 8023374:	d031      	beq.n	80233da <log_error+0x7a>
 8023376:	4b1c      	ldr	r3, [pc, #112]	; (80233e8 <log_error+0x88>)
 8023378:	781b      	ldrb	r3, [r3, #0]
 802337a:	2201      	movs	r2, #1
 802337c:	4013      	ands	r3, r2
 802337e:	b2db      	uxtb	r3, r3
 8023380:	2b00      	cmp	r3, #0
 8023382:	d02a      	beq.n	80233da <log_error+0x7a>
    va_start(args,format);
 8023384:	2364      	movs	r3, #100	; 0x64
 8023386:	18fb      	adds	r3, r7, r3
 8023388:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 802338a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802338c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802338e:	1d38      	adds	r0, r7, #4
 8023390:	2150      	movs	r1, #80	; 0x50
 8023392:	f002 fe01 	bl	8025f98 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 8023396:	4b14      	ldr	r3, [pc, #80]	; (80233e8 <log_error+0x88>)
 8023398:	781b      	ldrb	r3, [r3, #0]
 802339a:	2220      	movs	r2, #32
 802339c:	4013      	ands	r3, r2
 802339e:	b2db      	uxtb	r3, r3
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	d003      	beq.n	80233ac <log_error+0x4c>
      serial1_print(fmtBuffer);
 80233a4:	1d3b      	adds	r3, r7, #4
 80233a6:	0018      	movs	r0, r3
 80233a8:	f001 ff02 	bl	80251b0 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 80233ac:	4b0e      	ldr	r3, [pc, #56]	; (80233e8 <log_error+0x88>)
 80233ae:	781b      	ldrb	r3, [r3, #0]
 80233b0:	2240      	movs	r2, #64	; 0x40
 80233b2:	4013      	ands	r3, r2
 80233b4:	b2db      	uxtb	r3, r3
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	d003      	beq.n	80233c2 <log_error+0x62>
      serial2_print(fmtBuffer);
 80233ba:	1d3b      	adds	r3, r7, #4
 80233bc:	0018      	movs	r0, r3
 80233be:	f001 ff0f 	bl	80251e0 <serial2_print>
    }

    if ( __log.onDebug  ) {
 80233c2:	4b09      	ldr	r3, [pc, #36]	; (80233e8 <log_error+0x88>)
 80233c4:	781b      	ldrb	r3, [r3, #0]
 80233c6:	227f      	movs	r2, #127	; 0x7f
 80233c8:	4393      	bics	r3, r2
 80233ca:	b2db      	uxtb	r3, r3
 80233cc:	2b00      	cmp	r3, #0
 80233ce:	d004      	beq.n	80233da <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 80233d0:	1d3b      	adds	r3, r7, #4
 80233d2:	0019      	movs	r1, r3
 80233d4:	2003      	movs	r0, #3
 80233d6:	f001 ffb5 	bl	8025344 <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 80233da:	46c0      	nop			; (mov r8, r8)
 80233dc:	46bd      	mov	sp, r7
 80233de:	b016      	add	sp, #88	; 0x58
 80233e0:	bc80      	pop	{r7}
 80233e2:	bc08      	pop	{r3}
 80233e4:	b004      	add	sp, #16
 80233e6:	4718      	bx	r3
 80233e8:	20002218 	.word	0x20002218

080233ec <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 80233ec:	b40f      	push	{r0, r1, r2, r3}
 80233ee:	b580      	push	{r7, lr}
 80233f0:	b096      	sub	sp, #88	; 0x58
 80233f2:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 80233f4:	4b1f      	ldr	r3, [pc, #124]	; (8023474 <log_warn+0x88>)
 80233f6:	781b      	ldrb	r3, [r3, #0]
 80233f8:	2204      	movs	r2, #4
 80233fa:	4013      	ands	r3, r2
 80233fc:	b2db      	uxtb	r3, r3
 80233fe:	2b00      	cmp	r3, #0
 8023400:	d031      	beq.n	8023466 <log_warn+0x7a>
 8023402:	4b1c      	ldr	r3, [pc, #112]	; (8023474 <log_warn+0x88>)
 8023404:	781b      	ldrb	r3, [r3, #0]
 8023406:	2201      	movs	r2, #1
 8023408:	4013      	ands	r3, r2
 802340a:	b2db      	uxtb	r3, r3
 802340c:	2b00      	cmp	r3, #0
 802340e:	d02a      	beq.n	8023466 <log_warn+0x7a>
    va_start(args,format);
 8023410:	2364      	movs	r3, #100	; 0x64
 8023412:	18fb      	adds	r3, r7, r3
 8023414:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 8023416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802341a:	1d38      	adds	r0, r7, #4
 802341c:	2150      	movs	r1, #80	; 0x50
 802341e:	f002 fdbb 	bl	8025f98 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 8023422:	4b14      	ldr	r3, [pc, #80]	; (8023474 <log_warn+0x88>)
 8023424:	781b      	ldrb	r3, [r3, #0]
 8023426:	2220      	movs	r2, #32
 8023428:	4013      	ands	r3, r2
 802342a:	b2db      	uxtb	r3, r3
 802342c:	2b00      	cmp	r3, #0
 802342e:	d003      	beq.n	8023438 <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 8023430:	1d3b      	adds	r3, r7, #4
 8023432:	0018      	movs	r0, r3
 8023434:	f001 febc 	bl	80251b0 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 8023438:	4b0e      	ldr	r3, [pc, #56]	; (8023474 <log_warn+0x88>)
 802343a:	781b      	ldrb	r3, [r3, #0]
 802343c:	2240      	movs	r2, #64	; 0x40
 802343e:	4013      	ands	r3, r2
 8023440:	b2db      	uxtb	r3, r3
 8023442:	2b00      	cmp	r3, #0
 8023444:	d003      	beq.n	802344e <log_warn+0x62>
    	serial2_print(fmtBuffer);
 8023446:	1d3b      	adds	r3, r7, #4
 8023448:	0018      	movs	r0, r3
 802344a:	f001 fec9 	bl	80251e0 <serial2_print>
    }

    if ( __log.onDebug ) {
 802344e:	4b09      	ldr	r3, [pc, #36]	; (8023474 <log_warn+0x88>)
 8023450:	781b      	ldrb	r3, [r3, #0]
 8023452:	227f      	movs	r2, #127	; 0x7f
 8023454:	4393      	bics	r3, r2
 8023456:	b2db      	uxtb	r3, r3
 8023458:	2b00      	cmp	r3, #0
 802345a:	d004      	beq.n	8023466 <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 802345c:	1d3b      	adds	r3, r7, #4
 802345e:	0019      	movs	r1, r3
 8023460:	2002      	movs	r0, #2
 8023462:	f001 ff6f 	bl	8025344 <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 8023466:	46c0      	nop			; (mov r8, r8)
 8023468:	46bd      	mov	sp, r7
 802346a:	b016      	add	sp, #88	; 0x58
 802346c:	bc80      	pop	{r7}
 802346e:	bc08      	pop	{r3}
 8023470:	b004      	add	sp, #16
 8023472:	4718      	bx	r3
 8023474:	20002218 	.word	0x20002218

08023478 <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 8023478:	b40f      	push	{r0, r1, r2, r3}
 802347a:	b580      	push	{r7, lr}
 802347c:	b096      	sub	sp, #88	; 0x58
 802347e:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 8023480:	4b1f      	ldr	r3, [pc, #124]	; (8023500 <log_info+0x88>)
 8023482:	781b      	ldrb	r3, [r3, #0]
 8023484:	2208      	movs	r2, #8
 8023486:	4013      	ands	r3, r2
 8023488:	b2db      	uxtb	r3, r3
 802348a:	2b00      	cmp	r3, #0
 802348c:	d031      	beq.n	80234f2 <log_info+0x7a>
 802348e:	4b1c      	ldr	r3, [pc, #112]	; (8023500 <log_info+0x88>)
 8023490:	781b      	ldrb	r3, [r3, #0]
 8023492:	2201      	movs	r2, #1
 8023494:	4013      	ands	r3, r2
 8023496:	b2db      	uxtb	r3, r3
 8023498:	2b00      	cmp	r3, #0
 802349a:	d02a      	beq.n	80234f2 <log_info+0x7a>
    va_start(args,format);
 802349c:	2364      	movs	r3, #100	; 0x64
 802349e:	18fb      	adds	r3, r7, r3
 80234a0:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 80234a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80234a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80234a6:	1d38      	adds	r0, r7, #4
 80234a8:	2150      	movs	r1, #80	; 0x50
 80234aa:	f002 fd75 	bl	8025f98 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 80234ae:	4b14      	ldr	r3, [pc, #80]	; (8023500 <log_info+0x88>)
 80234b0:	781b      	ldrb	r3, [r3, #0]
 80234b2:	2220      	movs	r2, #32
 80234b4:	4013      	ands	r3, r2
 80234b6:	b2db      	uxtb	r3, r3
 80234b8:	2b00      	cmp	r3, #0
 80234ba:	d003      	beq.n	80234c4 <log_info+0x4c>
    	serial1_print(fmtBuffer);
 80234bc:	1d3b      	adds	r3, r7, #4
 80234be:	0018      	movs	r0, r3
 80234c0:	f001 fe76 	bl	80251b0 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 80234c4:	4b0e      	ldr	r3, [pc, #56]	; (8023500 <log_info+0x88>)
 80234c6:	781b      	ldrb	r3, [r3, #0]
 80234c8:	2240      	movs	r2, #64	; 0x40
 80234ca:	4013      	ands	r3, r2
 80234cc:	b2db      	uxtb	r3, r3
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	d003      	beq.n	80234da <log_info+0x62>
    	serial2_print(fmtBuffer);
 80234d2:	1d3b      	adds	r3, r7, #4
 80234d4:	0018      	movs	r0, r3
 80234d6:	f001 fe83 	bl	80251e0 <serial2_print>
    }

    if ( __log.onDebug ) {
 80234da:	4b09      	ldr	r3, [pc, #36]	; (8023500 <log_info+0x88>)
 80234dc:	781b      	ldrb	r3, [r3, #0]
 80234de:	227f      	movs	r2, #127	; 0x7f
 80234e0:	4393      	bics	r3, r2
 80234e2:	b2db      	uxtb	r3, r3
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	d004      	beq.n	80234f2 <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 80234e8:	1d3b      	adds	r3, r7, #4
 80234ea:	0019      	movs	r1, r3
 80234ec:	2001      	movs	r0, #1
 80234ee:	f001 ff29 	bl	8025344 <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 80234f2:	46c0      	nop			; (mov r8, r8)
 80234f4:	46bd      	mov	sp, r7
 80234f6:	b016      	add	sp, #88	; 0x58
 80234f8:	bc80      	pop	{r7}
 80234fa:	bc08      	pop	{r3}
 80234fc:	b004      	add	sp, #16
 80234fe:	4718      	bx	r3
 8023500:	20002218 	.word	0x20002218

08023504 <itsdk_lorawan_hasjoined>:
}

/**
 * Return true once the device has joined the the network
 */
bool itsdk_lorawan_hasjoined() {
 8023504:	b580      	push	{r7, lr}
 8023506:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_hasjoined\r\n"));
	return ( lorawan_driver_LORA_getJoinState() == LORAWAN_STATE_JOIN_SUCCESS);
 8023508:	f7e4 fb1a 	bl	8007b40 <lorawan_driver_LORA_getJoinState>
 802350c:	0003      	movs	r3, r0
 802350e:	3b03      	subs	r3, #3
 8023510:	425a      	negs	r2, r3
 8023512:	4153      	adcs	r3, r2
 8023514:	b2db      	uxtb	r3, r3
}
 8023516:	0018      	movs	r0, r3
 8023518:	46bd      	mov	sp, r7
 802351a:	bd80      	pop	{r7, pc}

0802351c <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 802351c:	b5b0      	push	{r4, r5, r7, lr}
 802351e:	b090      	sub	sp, #64	; 0x40
 8023520:	af00      	add	r7, sp, #0
 8023522:	0002      	movs	r2, r0
 8023524:	1dfb      	adds	r3, r7, #7
 8023526:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 8023528:	1dfb      	adds	r3, r7, #7
 802352a:	781b      	ldrb	r3, [r3, #0]
 802352c:	2b00      	cmp	r3, #0
 802352e:	d107      	bne.n	8023540 <itsdk_lorawan_resetFactoryDefaults+0x24>
 8023530:	232c      	movs	r3, #44	; 0x2c
 8023532:	18fb      	adds	r3, r7, r3
 8023534:	0019      	movs	r1, r3
 8023536:	2007      	movs	r0, #7
 8023538:	f7fd fd6c 	bl	8021014 <itsdk_secstore_readBlock>
 802353c:	1e03      	subs	r3, r0, #0
 802353e:	d038      	beq.n	80235b2 <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 8023540:	2324      	movs	r3, #36	; 0x24
 8023542:	18fb      	adds	r3, r7, r3
 8023544:	4a1d      	ldr	r2, [pc, #116]	; (80235bc <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 8023546:	ca03      	ldmia	r2!, {r0, r1}
 8023548:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 802354a:	231c      	movs	r3, #28
 802354c:	18fb      	adds	r3, r7, r3
 802354e:	4a1c      	ldr	r2, [pc, #112]	; (80235c0 <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 8023550:	ca03      	ldmia	r2!, {r0, r1}
 8023552:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 8023554:	2300      	movs	r3, #0
 8023556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023558:	e016      	b.n	8023588 <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 802355a:	2324      	movs	r3, #36	; 0x24
 802355c:	18fa      	adds	r2, r7, r3
 802355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023560:	18d3      	adds	r3, r2, r3
 8023562:	7819      	ldrb	r1, [r3, #0]
 8023564:	202c      	movs	r0, #44	; 0x2c
 8023566:	183a      	adds	r2, r7, r0
 8023568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802356a:	18d3      	adds	r3, r2, r3
 802356c:	1c0a      	adds	r2, r1, #0
 802356e:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 8023570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023572:	3308      	adds	r3, #8
 8023574:	221c      	movs	r2, #28
 8023576:	18b9      	adds	r1, r7, r2
 8023578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802357a:	188a      	adds	r2, r1, r2
 802357c:	7811      	ldrb	r1, [r2, #0]
 802357e:	183a      	adds	r2, r7, r0
 8023580:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 8023582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023584:	3301      	adds	r3, #1
 8023586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802358a:	2b07      	cmp	r3, #7
 802358c:	dde5      	ble.n	802355a <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 802358e:	232c      	movs	r3, #44	; 0x2c
 8023590:	18fb      	adds	r3, r7, r3
 8023592:	0019      	movs	r1, r3
 8023594:	2007      	movs	r0, #7
 8023596:	f7fd fd8a 	bl	80210ae <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 802359a:	210c      	movs	r1, #12
 802359c:	187b      	adds	r3, r7, r1
 802359e:	4a09      	ldr	r2, [pc, #36]	; (80235c4 <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 80235a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80235a2:	c331      	stmia	r3!, {r0, r4, r5}
 80235a4:	6812      	ldr	r2, [r2, #0]
 80235a6:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 80235a8:	187b      	adds	r3, r7, r1
 80235aa:	0019      	movs	r1, r3
 80235ac:	2008      	movs	r0, #8
 80235ae:	f7fd fd7e 	bl	80210ae <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 80235b2:	2300      	movs	r3, #0
}
 80235b4:	0018      	movs	r0, r3
 80235b6:	46bd      	mov	sp, r7
 80235b8:	b010      	add	sp, #64	; 0x40
 80235ba:	bdb0      	pop	{r4, r5, r7, pc}
 80235bc:	080276c8 	.word	0x080276c8
 80235c0:	080276d0 	.word	0x080276d0
 80235c4:	080276d8 	.word	0x080276d8

080235c8 <itsdk_lorawan_loop>:

/**
 * This function need to be called in the project_loop function
 * to manage the lorawan stack ( mandatory for async mode )
 */
void itsdk_lorawan_loop() {
 80235c8:	b580      	push	{r7, lr}
 80235ca:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_loop\r\n"));
	lorawan_driver_loop();
 80235cc:	f7e4 fa9c 	bl	8007b08 <lorawan_driver_loop>
}
 80235d0:	46c0      	nop			; (mov r8, r8)
 80235d2:	46bd      	mov	sp, r7
 80235d4:	bd80      	pop	{r7, pc}
	...

080235d8 <lowPower_switch>:
/**
 * Switch to low power mode selected for the expected platform
 */
void __attribute__((optimize("O3"))) lowPower_switch() {

	if (__lowPowerState==LOWPRW_ENABLE) {
 80235d8:	4b13      	ldr	r3, [pc, #76]	; (8023628 <lowPower_switch+0x50>)
void __attribute__((optimize("O3"))) lowPower_switch() {
 80235da:	b570      	push	{r4, r5, r6, lr}
	if (__lowPowerState==LOWPRW_ENABLE) {
 80235dc:	781b      	ldrb	r3, [r3, #0]
 80235de:	2b00      	cmp	r3, #0
 80235e0:	d000      	beq.n	80235e4 <lowPower_switch+0xc>
			}
			#endif
		}
	}

}
 80235e2:	bd70      	pop	{r4, r5, r6, pc}
			uint32_t schedDur = itdt_sched_nextRun();
 80235e4:	f000 fba6 	bl	8023d34 <itdt_sched_nextRun>
			if ( schedDur < duration ) duration = schedDur;
 80235e8:	4d10      	ldr	r5, [pc, #64]	; (802362c <lowPower_switch+0x54>)
			uint32_t schedDur = itdt_sched_nextRun();
 80235ea:	0004      	movs	r4, r0
			if ( schedDur < duration ) duration = schedDur;
 80235ec:	42a8      	cmp	r0, r5
 80235ee:	d809      	bhi.n	8023604 <lowPower_switch+0x2c>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 80235f0:	f000 fe2e 	bl	8024250 <itsdk_stimer_nextTimeoutMs>
 80235f4:	0003      	movs	r3, r0
 80235f6:	0020      	movs	r0, r4
 80235f8:	429c      	cmp	r4, r3
 80235fa:	d900      	bls.n	80235fe <lowPower_switch+0x26>
 80235fc:	0018      	movs	r0, r3
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 80235fe:	2805      	cmp	r0, #5
 8023600:	d9ef      	bls.n	80235e2 <lowPower_switch+0xa>
 8023602:	e004      	b.n	802360e <lowPower_switch+0x36>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 8023604:	f000 fe24 	bl	8024250 <itsdk_stimer_nextTimeoutMs>
			if ( maxDur < duration ) duration = maxDur;
 8023608:	42a8      	cmp	r0, r5
 802360a:	d9f8      	bls.n	80235fe <lowPower_switch+0x26>
			duration = ITSDK_LOWPOWER_RTC_MS;
 802360c:	4808      	ldr	r0, [pc, #32]	; (8023630 <lowPower_switch+0x58>)
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 802360e:	2100      	movs	r1, #0
 8023610:	f002 f81a 	bl	8025648 <stm32l_lowPowerSetup>
 8023614:	2800      	cmp	r0, #0
 8023616:	d1e4      	bne.n	80235e2 <lowPower_switch+0xa>
				stm32l_lowPowerResume(STM32L_LOWPOWER_NORMAL_STOP);
 8023618:	f002 f88e 	bl	8025738 <stm32l_lowPowerResume>
				itsdk_state.lastWakeUpTimeUs = itsdk_time_get_us();
 802361c:	f000 fc84 	bl	8023f28 <itsdk_time_get_us>
 8023620:	4b04      	ldr	r3, [pc, #16]	; (8023634 <lowPower_switch+0x5c>)
 8023622:	6098      	str	r0, [r3, #8]
 8023624:	60d9      	str	r1, [r3, #12]
}
 8023626:	e7dc      	b.n	80235e2 <lowPower_switch+0xa>
 8023628:	20001d88 	.word	0x20001d88
 802362c:	0000270f 	.word	0x0000270f
 8023630:	00002710 	.word	0x00002710
 8023634:	20002208 	.word	0x20002208

08023638 <lowPower_enable>:

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 8023638:	b580      	push	{r7, lr}
 802363a:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 802363c:	4b02      	ldr	r3, [pc, #8]	; (8023648 <lowPower_enable+0x10>)
 802363e:	2200      	movs	r2, #0
 8023640:	701a      	strb	r2, [r3, #0]
}
 8023642:	46c0      	nop			; (mov r8, r8)
 8023644:	46bd      	mov	sp, r7
 8023646:	bd80      	pop	{r7, pc}
 8023648:	20001d88 	.word	0x20001d88

0802364c <lowPower_disable>:

/**
 * Enable LowPower mode
 */
void lowPower_disable() {
 802364c:	b580      	push	{r7, lr}
 802364e:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_DISABLE;
 8023650:	4b02      	ldr	r3, [pc, #8]	; (802365c <lowPower_disable+0x10>)
 8023652:	2201      	movs	r2, #1
 8023654:	701a      	strb	r2, [r3, #0]
}
 8023656:	46c0      	nop			; (mov r8, r8)
 8023658:	46bd      	mov	sp, r7
 802365a:	bd80      	pop	{r7, pc}
 802365c:	20001d88 	.word	0x20001d88

08023660 <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 8023660:	b580      	push	{r7, lr}
 8023662:	af00      	add	r7, sp, #0

	itsdk_time_init();
 8023664:	f000 fc6c 	bl	8023f40 <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 8023668:	20f0      	movs	r0, #240	; 0xf0
 802366a:	f7ff fdc3 	bl	80231f4 <log_init>
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
	#endif
//	serial1_init(); //Fait planter
//	serial2_init();
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
 802366e:	f7fc fb19 	bl	801fca4 <itsdk_console_setup>
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 8023672:	f7ff fbb9 	bl	8022de8 <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 8023676:	f001 fca3 	bl	8024fc0 <itsdk_getResetCause>
 802367a:	0003      	movs	r3, r0
 802367c:	b29b      	uxth	r3, r3
 802367e:	4a11      	ldr	r2, [pc, #68]	; (80236c4 <itsdk_setup+0x64>)
 8023680:	0019      	movs	r1, r3
 8023682:	0010      	movs	r0, r2
 8023684:	f7ff fbe0 	bl	8022e48 <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 8023688:	f7fd fde8 	bl	802125c <itsdk_secstore_isInit>
 802368c:	1e03      	subs	r3, r0, #0
 802368e:	d008      	beq.n	80236a2 <itsdk_setup+0x42>
		  itsdk_secstore_init();
 8023690:	f7fd fd84 	bl	802119c <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE);
 8023694:	2001      	movs	r0, #1
 8023696:	f7fe fab4 	bl	8021c02 <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 802369a:	2001      	movs	r0, #1
 802369c:	f7ff ff3e 	bl	802351c <itsdk_lorawan_resetFactoryDefaults>
 80236a0:	e002      	b.n	80236a8 <itsdk_setup+0x48>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(BOOL_FALSE);	// on first boot init the ss communication credentials
 80236a2:	2000      	movs	r0, #0
 80236a4:	f7fe faad 	bl	8021c02 <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 80236a8:	f7fe f9aa 	bl	8021a00 <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 80236ac:	2000      	movs	r0, #0
 80236ae:	f7fc fef5 	bl	802049c <itsdk_config_loadConfiguration>
	itsdk_state_init();
 80236b2:	f7fd fb09 	bl	8020cc8 <itsdk_state_init>
	// Application setup
	project_setup();
 80236b6:	f7df fdcb 	bl	8003250 <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 80236ba:	f001 fcbf 	bl	802503c <itsdk_cleanResetCause>
    #endif

}
 80236be:	46c0      	nop			; (mov r8, r8)
 80236c0:	46bd      	mov	sp, r7
 80236c2:	bd80      	pop	{r7, pc}
 80236c4:	10000001 	.word	0x10000001

080236c8 <itsdk_loop>:
 * if the MCU have no lowpower mode. The function update the time component, call
 * all the recurrent SDK operations to be maintained.
 * When a scheduler has been activated it calls the scheduler task when needed.
 * Then is calls the project specific loop function.
 */
void itsdk_loop() {
 80236c8:	b580      	push	{r7, lr}
 80236ca:	af00      	add	r7, sp, #0

    #if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
	#endif
	#if ITSDK_TIMER_SLOTS > 0
	   itsdk_stimer_run();
 80236cc:	f000 fd64 	bl	8024198 <itsdk_stimer_run>
	#endif
	#if ITSDK_SHEDULER_TASKS > 0
	   itdt_sched_execute();
 80236d0:	f000 fa82 	bl	8023bd8 <itdt_sched_execute>
	   accel_process_loop();
    #endif
	#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE
	   gnss_process_loop(BOOL_FALSE);
	#endif
	project_loop();
 80236d4:	f7df fde8 	bl	80032a8 <project_loop>
	#if ITSDK_WITH_CONSOLE == __ENABLE
	   itsdk_console_loop();
 80236d8:	f7fc fb08 	bl	801fcec <itsdk_console_loop>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
		if ( itsdk_stimer_isLowPowerSwitchAutorized() ) {
 80236dc:	f000 fcf2 	bl	80240c4 <itsdk_stimer_isLowPowerSwitchAutorized>
 80236e0:	1e03      	subs	r3, r0, #0
 80236e2:	d001      	beq.n	80236e8 <itsdk_loop+0x20>
	#endif
			lowPower_switch();
 80236e4:	f7ff ff78 	bl	80235d8 <lowPower_switch>
	#if ITSDK_TIMER_SLOTS > 0
		}
	#endif
}
 80236e8:	46c0      	nop			; (mov r8, r8)
 80236ea:	46bd      	mov	sp, r7
 80236ec:	bd80      	pop	{r7, pc}
	...

080236f0 <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 80236f0:	b580      	push	{r7, lr}
 80236f2:	b086      	sub	sp, #24
 80236f4:	af00      	add	r7, sp, #0
 80236f6:	6078      	str	r0, [r7, #4]
 80236f8:	000a      	movs	r2, r1
 80236fa:	1cbb      	adds	r3, r7, #2
 80236fc:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 80236fe:	2301      	movs	r3, #1
 8023700:	425b      	negs	r3, r3
 8023702:	617b      	str	r3, [r7, #20]
  while (length--) {
 8023704:	e039      	b.n	802377a <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	1c5a      	adds	r2, r3, #1
 802370a:	607a      	str	r2, [r7, #4]
 802370c:	220e      	movs	r2, #14
 802370e:	18ba      	adds	r2, r7, r2
 8023710:	781b      	ldrb	r3, [r3, #0]
 8023712:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 8023714:	2380      	movs	r3, #128	; 0x80
 8023716:	613b      	str	r3, [r7, #16]
 8023718:	e02c      	b.n	8023774 <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 802371a:	697b      	ldr	r3, [r7, #20]
 802371c:	0fdb      	lsrs	r3, r3, #31
 802371e:	07da      	lsls	r2, r3, #31
 8023720:	230f      	movs	r3, #15
 8023722:	18fb      	adds	r3, r7, r3
 8023724:	1e51      	subs	r1, r2, #1
 8023726:	418a      	sbcs	r2, r1
 8023728:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 802372a:	230e      	movs	r3, #14
 802372c:	18fb      	adds	r3, r7, r3
 802372e:	781b      	ldrb	r3, [r3, #0]
 8023730:	693a      	ldr	r2, [r7, #16]
 8023732:	4013      	ands	r3, r2
 8023734:	d00f      	beq.n	8023756 <itsdk_computeCRC32+0x66>
        bit = !bit;
 8023736:	210f      	movs	r1, #15
 8023738:	187b      	adds	r3, r7, r1
 802373a:	781b      	ldrb	r3, [r3, #0]
 802373c:	1e5a      	subs	r2, r3, #1
 802373e:	4193      	sbcs	r3, r2
 8023740:	b2db      	uxtb	r3, r3
 8023742:	2201      	movs	r2, #1
 8023744:	4053      	eors	r3, r2
 8023746:	b2db      	uxtb	r3, r3
 8023748:	001a      	movs	r2, r3
 802374a:	187b      	adds	r3, r7, r1
 802374c:	701a      	strb	r2, [r3, #0]
 802374e:	781a      	ldrb	r2, [r3, #0]
 8023750:	2101      	movs	r1, #1
 8023752:	400a      	ands	r2, r1
 8023754:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 8023756:	697b      	ldr	r3, [r7, #20]
 8023758:	005b      	lsls	r3, r3, #1
 802375a:	617b      	str	r3, [r7, #20]
      if (bit) {
 802375c:	230f      	movs	r3, #15
 802375e:	18fb      	adds	r3, r7, r3
 8023760:	781b      	ldrb	r3, [r3, #0]
 8023762:	2b00      	cmp	r3, #0
 8023764:	d003      	beq.n	802376e <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 8023766:	697b      	ldr	r3, [r7, #20]
 8023768:	4a0a      	ldr	r2, [pc, #40]	; (8023794 <itsdk_computeCRC32+0xa4>)
 802376a:	4053      	eors	r3, r2
 802376c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 802376e:	693b      	ldr	r3, [r7, #16]
 8023770:	085b      	lsrs	r3, r3, #1
 8023772:	613b      	str	r3, [r7, #16]
 8023774:	693b      	ldr	r3, [r7, #16]
 8023776:	2b00      	cmp	r3, #0
 8023778:	d1cf      	bne.n	802371a <itsdk_computeCRC32+0x2a>
  while (length--) {
 802377a:	1cbb      	adds	r3, r7, #2
 802377c:	881b      	ldrh	r3, [r3, #0]
 802377e:	1cba      	adds	r2, r7, #2
 8023780:	1e59      	subs	r1, r3, #1
 8023782:	8011      	strh	r1, [r2, #0]
 8023784:	2b00      	cmp	r3, #0
 8023786:	d1be      	bne.n	8023706 <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 8023788:	697b      	ldr	r3, [r7, #20]
}
 802378a:	0018      	movs	r0, r3
 802378c:	46bd      	mov	sp, r7
 802378e:	b006      	add	sp, #24
 8023790:	bd80      	pop	{r7, pc}
 8023792:	46c0      	nop			; (mov r8, r8)
 8023794:	04c11db7 	.word	0x04c11db7

08023798 <itdt_convertNumChar2Int>:
}

/* -----------------------------------------------------------
 * Convert 0-9 char to 0-9 value
 */
uint8_t itdt_convertNumChar2Int(char c) {
 8023798:	b580      	push	{r7, lr}
 802379a:	b082      	sub	sp, #8
 802379c:	af00      	add	r7, sp, #0
 802379e:	0002      	movs	r2, r0
 80237a0:	1dfb      	adds	r3, r7, #7
 80237a2:	701a      	strb	r2, [r3, #0]
	  if ( c >= '0' && c <= '9' ) return c-'0';
 80237a4:	1dfb      	adds	r3, r7, #7
 80237a6:	781b      	ldrb	r3, [r3, #0]
 80237a8:	2b2f      	cmp	r3, #47	; 0x2f
 80237aa:	d908      	bls.n	80237be <itdt_convertNumChar2Int+0x26>
 80237ac:	1dfb      	adds	r3, r7, #7
 80237ae:	781b      	ldrb	r3, [r3, #0]
 80237b0:	2b39      	cmp	r3, #57	; 0x39
 80237b2:	d804      	bhi.n	80237be <itdt_convertNumChar2Int+0x26>
 80237b4:	1dfb      	adds	r3, r7, #7
 80237b6:	781b      	ldrb	r3, [r3, #0]
 80237b8:	3b30      	subs	r3, #48	; 0x30
 80237ba:	b2db      	uxtb	r3, r3
 80237bc:	e000      	b.n	80237c0 <itdt_convertNumChar2Int+0x28>
	  return 0xFF;
 80237be:	23ff      	movs	r3, #255	; 0xff
}
 80237c0:	0018      	movs	r0, r3
 80237c2:	46bd      	mov	sp, r7
 80237c4:	b002      	add	sp, #8
 80237c6:	bd80      	pop	{r7, pc}

080237c8 <itdt_convertHexChar2HalfInt>:

/* -----------------------------------------------------------
 * Convert a 0-F char to a 0-16 value
 */
uint8_t itdt_convertHexChar2HalfInt(char c) {
 80237c8:	b580      	push	{r7, lr}
 80237ca:	b082      	sub	sp, #8
 80237cc:	af00      	add	r7, sp, #0
 80237ce:	0002      	movs	r2, r0
 80237d0:	1dfb      	adds	r3, r7, #7
 80237d2:	701a      	strb	r2, [r3, #0]
  if ( c >= '0' && c <= '9' ) return c-'0';
 80237d4:	1dfb      	adds	r3, r7, #7
 80237d6:	781b      	ldrb	r3, [r3, #0]
 80237d8:	2b2f      	cmp	r3, #47	; 0x2f
 80237da:	d908      	bls.n	80237ee <itdt_convertHexChar2HalfInt+0x26>
 80237dc:	1dfb      	adds	r3, r7, #7
 80237de:	781b      	ldrb	r3, [r3, #0]
 80237e0:	2b39      	cmp	r3, #57	; 0x39
 80237e2:	d804      	bhi.n	80237ee <itdt_convertHexChar2HalfInt+0x26>
 80237e4:	1dfb      	adds	r3, r7, #7
 80237e6:	781b      	ldrb	r3, [r3, #0]
 80237e8:	3b30      	subs	r3, #48	; 0x30
 80237ea:	b2db      	uxtb	r3, r3
 80237ec:	e01a      	b.n	8023824 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'a' && c <= 'f' ) return 10+c-'a';
 80237ee:	1dfb      	adds	r3, r7, #7
 80237f0:	781b      	ldrb	r3, [r3, #0]
 80237f2:	2b60      	cmp	r3, #96	; 0x60
 80237f4:	d908      	bls.n	8023808 <itdt_convertHexChar2HalfInt+0x40>
 80237f6:	1dfb      	adds	r3, r7, #7
 80237f8:	781b      	ldrb	r3, [r3, #0]
 80237fa:	2b66      	cmp	r3, #102	; 0x66
 80237fc:	d804      	bhi.n	8023808 <itdt_convertHexChar2HalfInt+0x40>
 80237fe:	1dfb      	adds	r3, r7, #7
 8023800:	781b      	ldrb	r3, [r3, #0]
 8023802:	3b57      	subs	r3, #87	; 0x57
 8023804:	b2db      	uxtb	r3, r3
 8023806:	e00d      	b.n	8023824 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'A' && c <= 'F' ) return 10+c-'A';
 8023808:	1dfb      	adds	r3, r7, #7
 802380a:	781b      	ldrb	r3, [r3, #0]
 802380c:	2b40      	cmp	r3, #64	; 0x40
 802380e:	d908      	bls.n	8023822 <itdt_convertHexChar2HalfInt+0x5a>
 8023810:	1dfb      	adds	r3, r7, #7
 8023812:	781b      	ldrb	r3, [r3, #0]
 8023814:	2b46      	cmp	r3, #70	; 0x46
 8023816:	d804      	bhi.n	8023822 <itdt_convertHexChar2HalfInt+0x5a>
 8023818:	1dfb      	adds	r3, r7, #7
 802381a:	781b      	ldrb	r3, [r3, #0]
 802381c:	3b37      	subs	r3, #55	; 0x37
 802381e:	b2db      	uxtb	r3, r3
 8023820:	e000      	b.n	8023824 <itdt_convertHexChar2HalfInt+0x5c>
  return 0;
 8023822:	2300      	movs	r3, #0
}
 8023824:	0018      	movs	r0, r3
 8023826:	46bd      	mov	sp, r7
 8023828:	b002      	add	sp, #8
 802382a:	bd80      	pop	{r7, pc}

0802382c <itdt_convertHexChar2Int>:
}

/* -----------------------------------------------------------
 * Convert a "0"-"FF" value to 0-255 uint8_t value
 */
uint8_t itdt_convertHexChar2Int(char * v) {
 802382c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802382e:	b085      	sub	sp, #20
 8023830:	af00      	add	r7, sp, #0
 8023832:	6078      	str	r0, [r7, #4]
  uint8_t q0 = itdt_convertHexChar2HalfInt(v[0]);
 8023834:	687b      	ldr	r3, [r7, #4]
 8023836:	781b      	ldrb	r3, [r3, #0]
 8023838:	250f      	movs	r5, #15
 802383a:	197c      	adds	r4, r7, r5
 802383c:	0018      	movs	r0, r3
 802383e:	f7ff ffc3 	bl	80237c8 <itdt_convertHexChar2HalfInt>
 8023842:	0003      	movs	r3, r0
 8023844:	7023      	strb	r3, [r4, #0]
  uint8_t q1 = itdt_convertHexChar2HalfInt(v[1]);
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	3301      	adds	r3, #1
 802384a:	781b      	ldrb	r3, [r3, #0]
 802384c:	260e      	movs	r6, #14
 802384e:	19bc      	adds	r4, r7, r6
 8023850:	0018      	movs	r0, r3
 8023852:	f7ff ffb9 	bl	80237c8 <itdt_convertHexChar2HalfInt>
 8023856:	0003      	movs	r3, r0
 8023858:	7023      	strb	r3, [r4, #0]
  return (q0*16)+q1;
 802385a:	197b      	adds	r3, r7, r5
 802385c:	781b      	ldrb	r3, [r3, #0]
 802385e:	011b      	lsls	r3, r3, #4
 8023860:	b2da      	uxtb	r2, r3
 8023862:	19bb      	adds	r3, r7, r6
 8023864:	781b      	ldrb	r3, [r3, #0]
 8023866:	18d3      	adds	r3, r2, r3
 8023868:	b2db      	uxtb	r3, r3
}
 802386a:	0018      	movs	r0, r3
 802386c:	46bd      	mov	sp, r7
 802386e:	b005      	add	sp, #20
 8023870:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023872 <itdt_convertHexChar4Int>:
}

/* -----------------------------------------------------------
 *  Convert a 16bit hex string value into uint16_t value
 */
uint16_t itdt_convertHexChar4Int(char * v) {
 8023872:	b590      	push	{r4, r7, lr}
 8023874:	b085      	sub	sp, #20
 8023876:	af00      	add	r7, sp, #0
 8023878:	6078      	str	r0, [r7, #4]
  uint16_t ret = itdt_convertHexChar2Int(&v[0]);
 802387a:	687b      	ldr	r3, [r7, #4]
 802387c:	0018      	movs	r0, r3
 802387e:	f7ff ffd5 	bl	802382c <itdt_convertHexChar2Int>
 8023882:	0003      	movs	r3, r0
 8023884:	001a      	movs	r2, r3
 8023886:	240e      	movs	r4, #14
 8023888:	193b      	adds	r3, r7, r4
 802388a:	801a      	strh	r2, [r3, #0]
  ret <<= 8;
 802388c:	193b      	adds	r3, r7, r4
 802388e:	193a      	adds	r2, r7, r4
 8023890:	8812      	ldrh	r2, [r2, #0]
 8023892:	0212      	lsls	r2, r2, #8
 8023894:	801a      	strh	r2, [r3, #0]
  ret += itdt_convertHexChar2Int(&v[2]);
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	3302      	adds	r3, #2
 802389a:	0018      	movs	r0, r3
 802389c:	f7ff ffc6 	bl	802382c <itdt_convertHexChar2Int>
 80238a0:	0003      	movs	r3, r0
 80238a2:	b299      	uxth	r1, r3
 80238a4:	193b      	adds	r3, r7, r4
 80238a6:	193a      	adds	r2, r7, r4
 80238a8:	8812      	ldrh	r2, [r2, #0]
 80238aa:	188a      	adds	r2, r1, r2
 80238ac:	801a      	strh	r2, [r3, #0]
  return ret;
 80238ae:	193b      	adds	r3, r7, r4
 80238b0:	881b      	ldrh	r3, [r3, #0]
}
 80238b2:	0018      	movs	r0, r3
 80238b4:	46bd      	mov	sp, r7
 80238b6:	b005      	add	sp, #20
 80238b8:	bd90      	pop	{r4, r7, pc}
	...

080238bc <itdt_convertDecCharNInt>:

/**
 * Convert a signed decimal number from a string to
 * an Int32 value.
 */
int32_t itdt_convertDecCharNInt(char * v, int sz) {
 80238bc:	b5b0      	push	{r4, r5, r7, lr}
 80238be:	b086      	sub	sp, #24
 80238c0:	af00      	add	r7, sp, #0
 80238c2:	6078      	str	r0, [r7, #4]
 80238c4:	6039      	str	r1, [r7, #0]
	int sign = 1;
 80238c6:	2301      	movs	r3, #1
 80238c8:	617b      	str	r3, [r7, #20]
	if ( *v == '-' ) {
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	781b      	ldrb	r3, [r3, #0]
 80238ce:	2b2d      	cmp	r3, #45	; 0x2d
 80238d0:	d108      	bne.n	80238e4 <itdt_convertDecCharNInt+0x28>
	   sign = -1;
 80238d2:	2301      	movs	r3, #1
 80238d4:	425b      	negs	r3, r3
 80238d6:	617b      	str	r3, [r7, #20]
	   v++;
 80238d8:	687b      	ldr	r3, [r7, #4]
 80238da:	3301      	adds	r3, #1
 80238dc:	607b      	str	r3, [r7, #4]
	   sz--;
 80238de:	683b      	ldr	r3, [r7, #0]
 80238e0:	3b01      	subs	r3, #1
 80238e2:	603b      	str	r3, [r7, #0]
	}
	uint16_t ret = 0;
 80238e4:	2312      	movs	r3, #18
 80238e6:	18fb      	adds	r3, r7, r3
 80238e8:	2200      	movs	r2, #0
 80238ea:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 80238ec:	2300      	movs	r3, #0
 80238ee:	60fb      	str	r3, [r7, #12]
 80238f0:	e027      	b.n	8023942 <itdt_convertDecCharNInt+0x86>
	  ret *= 10;
 80238f2:	2312      	movs	r3, #18
 80238f4:	18fa      	adds	r2, r7, r3
 80238f6:	18fb      	adds	r3, r7, r3
 80238f8:	881b      	ldrh	r3, [r3, #0]
 80238fa:	1c19      	adds	r1, r3, #0
 80238fc:	0089      	lsls	r1, r1, #2
 80238fe:	18cb      	adds	r3, r1, r3
 8023900:	18db      	adds	r3, r3, r3
 8023902:	8013      	strh	r3, [r2, #0]
	  uint8_t c = itdt_convertNumChar2Int(*v);
 8023904:	687b      	ldr	r3, [r7, #4]
 8023906:	781b      	ldrb	r3, [r3, #0]
 8023908:	250b      	movs	r5, #11
 802390a:	197c      	adds	r4, r7, r5
 802390c:	0018      	movs	r0, r3
 802390e:	f7ff ff43 	bl	8023798 <itdt_convertNumChar2Int>
 8023912:	0003      	movs	r3, r0
 8023914:	7023      	strb	r3, [r4, #0]
	  if ( c == 0xFF ) return ITSDK_INVALID_VALUE_32B;
 8023916:	197b      	adds	r3, r7, r5
 8023918:	781b      	ldrb	r3, [r3, #0]
 802391a:	2bff      	cmp	r3, #255	; 0xff
 802391c:	d101      	bne.n	8023922 <itdt_convertDecCharNInt+0x66>
 802391e:	4b12      	ldr	r3, [pc, #72]	; (8023968 <itdt_convertDecCharNInt+0xac>)
 8023920:	e01d      	b.n	802395e <itdt_convertDecCharNInt+0xa2>
	  v++;
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	3301      	adds	r3, #1
 8023926:	607b      	str	r3, [r7, #4]
	  ret+= c;
 8023928:	230b      	movs	r3, #11
 802392a:	18fb      	adds	r3, r7, r3
 802392c:	781b      	ldrb	r3, [r3, #0]
 802392e:	b299      	uxth	r1, r3
 8023930:	2212      	movs	r2, #18
 8023932:	18bb      	adds	r3, r7, r2
 8023934:	18ba      	adds	r2, r7, r2
 8023936:	8812      	ldrh	r2, [r2, #0]
 8023938:	188a      	adds	r2, r1, r2
 802393a:	801a      	strh	r2, [r3, #0]
	for ( int i = 0 ; i < sz ; i++ ) {
 802393c:	68fb      	ldr	r3, [r7, #12]
 802393e:	3301      	adds	r3, #1
 8023940:	60fb      	str	r3, [r7, #12]
 8023942:	68fa      	ldr	r2, [r7, #12]
 8023944:	683b      	ldr	r3, [r7, #0]
 8023946:	429a      	cmp	r2, r3
 8023948:	dbd3      	blt.n	80238f2 <itdt_convertDecCharNInt+0x36>
	 }
	 ret *= sign;
 802394a:	697b      	ldr	r3, [r7, #20]
 802394c:	b29a      	uxth	r2, r3
 802394e:	2012      	movs	r0, #18
 8023950:	183b      	adds	r3, r7, r0
 8023952:	1839      	adds	r1, r7, r0
 8023954:	8809      	ldrh	r1, [r1, #0]
 8023956:	434a      	muls	r2, r1
 8023958:	801a      	strh	r2, [r3, #0]
	 return ret;
 802395a:	183b      	adds	r3, r7, r0
 802395c:	881b      	ldrh	r3, [r3, #0]
}
 802395e:	0018      	movs	r0, r3
 8023960:	46bd      	mov	sp, r7
 8023962:	b006      	add	sp, #24
 8023964:	bdb0      	pop	{r4, r5, r7, pc}
 8023966:	46c0      	nop			; (mov r8, r8)
 8023968:	0fffffff 	.word	0x0fffffff

0802396c <itdt_isHexChar>:
}

/* ----------------------------------------------------------
 * Verify a char is an Hex Char
 */
bool itdt_isHexChar(char c, bool upper) {
 802396c:	b580      	push	{r7, lr}
 802396e:	b082      	sub	sp, #8
 8023970:	af00      	add	r7, sp, #0
 8023972:	0002      	movs	r2, r0
 8023974:	1dfb      	adds	r3, r7, #7
 8023976:	701a      	strb	r2, [r3, #0]
 8023978:	1dbb      	adds	r3, r7, #6
 802397a:	1c0a      	adds	r2, r1, #0
 802397c:	701a      	strb	r2, [r3, #0]
  if (    (c >= '0' && c <= '9' )
 802397e:	1dfb      	adds	r3, r7, #7
 8023980:	781b      	ldrb	r3, [r3, #0]
 8023982:	2b2f      	cmp	r3, #47	; 0x2f
 8023984:	d903      	bls.n	802398e <itdt_isHexChar+0x22>
 8023986:	1dfb      	adds	r3, r7, #7
 8023988:	781b      	ldrb	r3, [r3, #0]
 802398a:	2b39      	cmp	r3, #57	; 0x39
 802398c:	d916      	bls.n	80239bc <itdt_isHexChar+0x50>
       || (c >= 'A' && c <= 'F' )
 802398e:	1dfb      	adds	r3, r7, #7
 8023990:	781b      	ldrb	r3, [r3, #0]
 8023992:	2b40      	cmp	r3, #64	; 0x40
 8023994:	d903      	bls.n	802399e <itdt_isHexChar+0x32>
 8023996:	1dfb      	adds	r3, r7, #7
 8023998:	781b      	ldrb	r3, [r3, #0]
 802399a:	2b46      	cmp	r3, #70	; 0x46
 802399c:	d90e      	bls.n	80239bc <itdt_isHexChar+0x50>
     || (!upper   && c >= 'a' && c <= 'f')
 802399e:	1dbb      	adds	r3, r7, #6
 80239a0:	781b      	ldrb	r3, [r3, #0]
 80239a2:	2201      	movs	r2, #1
 80239a4:	4053      	eors	r3, r2
 80239a6:	b2db      	uxtb	r3, r3
 80239a8:	2b00      	cmp	r3, #0
 80239aa:	d009      	beq.n	80239c0 <itdt_isHexChar+0x54>
 80239ac:	1dfb      	adds	r3, r7, #7
 80239ae:	781b      	ldrb	r3, [r3, #0]
 80239b0:	2b60      	cmp	r3, #96	; 0x60
 80239b2:	d905      	bls.n	80239c0 <itdt_isHexChar+0x54>
 80239b4:	1dfb      	adds	r3, r7, #7
 80239b6:	781b      	ldrb	r3, [r3, #0]
 80239b8:	2b66      	cmp	r3, #102	; 0x66
 80239ba:	d801      	bhi.n	80239c0 <itdt_isHexChar+0x54>
    ) {
    return true;
 80239bc:	2301      	movs	r3, #1
 80239be:	e000      	b.n	80239c2 <itdt_isHexChar+0x56>
  }
  return false;
 80239c0:	2300      	movs	r3, #0
}
 80239c2:	0018      	movs	r0, r3
 80239c4:	46bd      	mov	sp, r7
 80239c6:	b002      	add	sp, #8
 80239c8:	bd80      	pop	{r7, pc}

080239ca <itdt_isHexString>:

/* ----------------------------------------------------------
 * Verify a string is a valid Hex string with given size
 */
bool itdt_isHexString(char * str,int n,itsdk_bool_e upper) {
 80239ca:	b580      	push	{r7, lr}
 80239cc:	b086      	sub	sp, #24
 80239ce:	af00      	add	r7, sp, #0
 80239d0:	60f8      	str	r0, [r7, #12]
 80239d2:	60b9      	str	r1, [r7, #8]
 80239d4:	1dfb      	adds	r3, r7, #7
 80239d6:	701a      	strb	r2, [r3, #0]
  int i = 0;
 80239d8:	2300      	movs	r3, #0
 80239da:	617b      	str	r3, [r7, #20]
  while ( i < n && str[i] != 0 ) {
 80239dc:	e02d      	b.n	8023a3a <itdt_isHexString+0x70>
    if (    (str[i] >= '0' && str[i] <= '9' )
 80239de:	697b      	ldr	r3, [r7, #20]
 80239e0:	68fa      	ldr	r2, [r7, #12]
 80239e2:	18d3      	adds	r3, r2, r3
 80239e4:	781b      	ldrb	r3, [r3, #0]
 80239e6:	2b2f      	cmp	r3, #47	; 0x2f
 80239e8:	d905      	bls.n	80239f6 <itdt_isHexString+0x2c>
 80239ea:	697b      	ldr	r3, [r7, #20]
 80239ec:	68fa      	ldr	r2, [r7, #12]
 80239ee:	18d3      	adds	r3, r2, r3
 80239f0:	781b      	ldrb	r3, [r3, #0]
 80239f2:	2b39      	cmp	r3, #57	; 0x39
 80239f4:	d91b      	bls.n	8023a2e <itdt_isHexString+0x64>
       || (str[i] >= 'A' && str[i] <= 'F' )
 80239f6:	697b      	ldr	r3, [r7, #20]
 80239f8:	68fa      	ldr	r2, [r7, #12]
 80239fa:	18d3      	adds	r3, r2, r3
 80239fc:	781b      	ldrb	r3, [r3, #0]
 80239fe:	2b40      	cmp	r3, #64	; 0x40
 8023a00:	d905      	bls.n	8023a0e <itdt_isHexString+0x44>
 8023a02:	697b      	ldr	r3, [r7, #20]
 8023a04:	68fa      	ldr	r2, [r7, #12]
 8023a06:	18d3      	adds	r3, r2, r3
 8023a08:	781b      	ldrb	r3, [r3, #0]
 8023a0a:	2b46      	cmp	r3, #70	; 0x46
 8023a0c:	d90f      	bls.n	8023a2e <itdt_isHexString+0x64>
       || (!upper && str[i] >= 'a' && str[i] <= 'f')
 8023a0e:	1dfb      	adds	r3, r7, #7
 8023a10:	781b      	ldrb	r3, [r3, #0]
 8023a12:	2b00      	cmp	r3, #0
 8023a14:	d10f      	bne.n	8023a36 <itdt_isHexString+0x6c>
 8023a16:	697b      	ldr	r3, [r7, #20]
 8023a18:	68fa      	ldr	r2, [r7, #12]
 8023a1a:	18d3      	adds	r3, r2, r3
 8023a1c:	781b      	ldrb	r3, [r3, #0]
 8023a1e:	2b60      	cmp	r3, #96	; 0x60
 8023a20:	d909      	bls.n	8023a36 <itdt_isHexString+0x6c>
 8023a22:	697b      	ldr	r3, [r7, #20]
 8023a24:	68fa      	ldr	r2, [r7, #12]
 8023a26:	18d3      	adds	r3, r2, r3
 8023a28:	781b      	ldrb	r3, [r3, #0]
 8023a2a:	2b66      	cmp	r3, #102	; 0x66
 8023a2c:	d803      	bhi.n	8023a36 <itdt_isHexString+0x6c>
       ) {
      i++;
 8023a2e:	697b      	ldr	r3, [r7, #20]
 8023a30:	3301      	adds	r3, #1
 8023a32:	617b      	str	r3, [r7, #20]
 8023a34:	e001      	b.n	8023a3a <itdt_isHexString+0x70>
    } else {
      return false;
 8023a36:	2300      	movs	r3, #0
 8023a38:	e00f      	b.n	8023a5a <itdt_isHexString+0x90>
  while ( i < n && str[i] != 0 ) {
 8023a3a:	697a      	ldr	r2, [r7, #20]
 8023a3c:	68bb      	ldr	r3, [r7, #8]
 8023a3e:	429a      	cmp	r2, r3
 8023a40:	da05      	bge.n	8023a4e <itdt_isHexString+0x84>
 8023a42:	697b      	ldr	r3, [r7, #20]
 8023a44:	68fa      	ldr	r2, [r7, #12]
 8023a46:	18d3      	adds	r3, r2, r3
 8023a48:	781b      	ldrb	r3, [r3, #0]
 8023a4a:	2b00      	cmp	r3, #0
 8023a4c:	d1c7      	bne.n	80239de <itdt_isHexString+0x14>
    }
  }
  return ( i == n )?true:false;
 8023a4e:	697a      	ldr	r2, [r7, #20]
 8023a50:	68bb      	ldr	r3, [r7, #8]
 8023a52:	1ad3      	subs	r3, r2, r3
 8023a54:	425a      	negs	r2, r3
 8023a56:	4153      	adcs	r3, r2
 8023a58:	b2db      	uxtb	r3, r3
}
 8023a5a:	0018      	movs	r0, r3
 8023a5c:	46bd      	mov	sp, r7
 8023a5e:	b006      	add	sp, #24
 8023a60:	bd80      	pop	{r7, pc}

08023a62 <itdt_count_bits_1>:


/* ---------------------------------------------------
 * Count the number of bit at 1 in a given word
 */
uint8_t itdt_count_bits_1(uint32_t v) {
 8023a62:	b580      	push	{r7, lr}
 8023a64:	b084      	sub	sp, #16
 8023a66:	af00      	add	r7, sp, #0
 8023a68:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8023a6a:	230f      	movs	r3, #15
 8023a6c:	18fb      	adds	r3, r7, r3
 8023a6e:	2200      	movs	r2, #0
 8023a70:	701a      	strb	r2, [r3, #0]
	while ( v > 0 ) {
 8023a72:	e00c      	b.n	8023a8e <itdt_count_bits_1+0x2c>
		if ( v & 1 ) ret++;
 8023a74:	687b      	ldr	r3, [r7, #4]
 8023a76:	2201      	movs	r2, #1
 8023a78:	4013      	ands	r3, r2
 8023a7a:	d005      	beq.n	8023a88 <itdt_count_bits_1+0x26>
 8023a7c:	210f      	movs	r1, #15
 8023a7e:	187b      	adds	r3, r7, r1
 8023a80:	781a      	ldrb	r2, [r3, #0]
 8023a82:	187b      	adds	r3, r7, r1
 8023a84:	3201      	adds	r2, #1
 8023a86:	701a      	strb	r2, [r3, #0]
		v >>= 1;
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	085b      	lsrs	r3, r3, #1
 8023a8c:	607b      	str	r3, [r7, #4]
	while ( v > 0 ) {
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	2b00      	cmp	r3, #0
 8023a92:	d1ef      	bne.n	8023a74 <itdt_count_bits_1+0x12>
	}
	return ret;
 8023a94:	230f      	movs	r3, #15
 8023a96:	18fb      	adds	r3, r7, r3
 8023a98:	781b      	ldrb	r3, [r3, #0]
}
 8023a9a:	0018      	movs	r0, r3
 8023a9c:	46bd      	mov	sp, r7
 8023a9e:	b004      	add	sp, #16
 8023aa0:	bd80      	pop	{r7, pc}
	...

08023aa4 <itdt_sched_registerSched>:
/**
 * Register a new task in the scheduler with the given period in Ms and the
 * associated function to call. The mode params defines the scheduler behavior
 * Returns the scedId on success or ITSDK_SCHED_ERROR on error.
 */
uint8_t itdt_sched_registerSched(uint32_t periodMs,uint16_t mode, void (*f)(void)) {
 8023aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023aa6:	b085      	sub	sp, #20
 8023aa8:	af00      	add	r7, sp, #0
 8023aaa:	60f8      	str	r0, [r7, #12]
 8023aac:	607a      	str	r2, [r7, #4]
 8023aae:	230a      	movs	r3, #10
 8023ab0:	18fb      	adds	r3, r7, r3
 8023ab2:	1c0a      	adds	r2, r1, #0
 8023ab4:	801a      	strh	r2, [r3, #0]

	if ( periodMs > ITSDK_SCHED_MAX_PERIOD ) {
 8023ab6:	68fb      	ldr	r3, [r7, #12]
 8023ab8:	4a43      	ldr	r2, [pc, #268]	; (8023bc8 <itdt_sched_registerSched+0x124>)
 8023aba:	4293      	cmp	r3, r2
 8023abc:	d906      	bls.n	8023acc <itdt_sched_registerSched+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_SCHED_DURATION_OVERFLOW,0);
 8023abe:	4b43      	ldr	r3, [pc, #268]	; (8023bcc <itdt_sched_registerSched+0x128>)
 8023ac0:	2100      	movs	r1, #0
 8023ac2:	0018      	movs	r0, r3
 8023ac4:	f7ff f9c0 	bl	8022e48 <itsdk_error_report>
		return ITSDK_SCHED_ERROR;
 8023ac8:	23ff      	movs	r3, #255	; 0xff
 8023aca:	e079      	b.n	8023bc0 <itdt_sched_registerSched+0x11c>
	}
	if ( __sNum < ITSDK_SHEDULER_TASKS ) {
 8023acc:	4b40      	ldr	r3, [pc, #256]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023ace:	781b      	ldrb	r3, [r3, #0]
 8023ad0:	2b00      	cmp	r3, #0
 8023ad2:	d174      	bne.n	8023bbe <itdt_sched_registerSched+0x11a>
		__scheds[__sNum].func=f;
 8023ad4:	4b3e      	ldr	r3, [pc, #248]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023ad6:	781b      	ldrb	r3, [r3, #0]
 8023ad8:	4a3e      	ldr	r2, [pc, #248]	; (8023bd4 <itdt_sched_registerSched+0x130>)
 8023ada:	011b      	lsls	r3, r3, #4
 8023adc:	18d3      	adds	r3, r2, r3
 8023ade:	330c      	adds	r3, #12
 8023ae0:	687a      	ldr	r2, [r7, #4]
 8023ae2:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].period=periodMs;
 8023ae4:	4b3a      	ldr	r3, [pc, #232]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023ae6:	781b      	ldrb	r3, [r3, #0]
 8023ae8:	001e      	movs	r6, r3
 8023aea:	68fb      	ldr	r3, [r7, #12]
 8023aec:	021b      	lsls	r3, r3, #8
 8023aee:	0a1a      	lsrs	r2, r3, #8
 8023af0:	4938      	ldr	r1, [pc, #224]	; (8023bd4 <itdt_sched_registerSched+0x130>)
 8023af2:	2008      	movs	r0, #8
 8023af4:	0133      	lsls	r3, r6, #4
 8023af6:	18cb      	adds	r3, r1, r3
 8023af8:	181b      	adds	r3, r3, r0
 8023afa:	0212      	lsls	r2, r2, #8
 8023afc:	0a12      	lsrs	r2, r2, #8
 8023afe:	6819      	ldr	r1, [r3, #0]
 8023b00:	0e09      	lsrs	r1, r1, #24
 8023b02:	0609      	lsls	r1, r1, #24
 8023b04:	430a      	orrs	r2, r1
 8023b06:	601a      	str	r2, [r3, #0]
		__scheds[__sNum].nextRun=(mode & ITSDK_SCHED_CONF_IMMEDIATE)?itsdk_time_get_ms():itsdk_time_get_ms()+periodMs;
 8023b08:	230a      	movs	r3, #10
 8023b0a:	18fb      	adds	r3, r7, r3
 8023b0c:	881a      	ldrh	r2, [r3, #0]
 8023b0e:	2380      	movs	r3, #128	; 0x80
 8023b10:	005b      	lsls	r3, r3, #1
 8023b12:	4013      	ands	r3, r2
 8023b14:	d004      	beq.n	8023b20 <itdt_sched_registerSched+0x7c>
 8023b16:	f000 f9f5 	bl	8023f04 <itsdk_time_get_ms>
 8023b1a:	0003      	movs	r3, r0
 8023b1c:	000c      	movs	r4, r1
 8023b1e:	e00b      	b.n	8023b38 <itdt_sched_registerSched+0x94>
 8023b20:	f000 f9f0 	bl	8023f04 <itsdk_time_get_ms>
 8023b24:	0002      	movs	r2, r0
 8023b26:	000b      	movs	r3, r1
 8023b28:	68f9      	ldr	r1, [r7, #12]
 8023b2a:	000c      	movs	r4, r1
 8023b2c:	2100      	movs	r1, #0
 8023b2e:	000d      	movs	r5, r1
 8023b30:	1912      	adds	r2, r2, r4
 8023b32:	416b      	adcs	r3, r5
 8023b34:	001c      	movs	r4, r3
 8023b36:	0013      	movs	r3, r2
 8023b38:	4a25      	ldr	r2, [pc, #148]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023b3a:	7812      	ldrb	r2, [r2, #0]
 8023b3c:	4925      	ldr	r1, [pc, #148]	; (8023bd4 <itdt_sched_registerSched+0x130>)
 8023b3e:	0112      	lsls	r2, r2, #4
 8023b40:	188a      	adds	r2, r1, r2
 8023b42:	6013      	str	r3, [r2, #0]
 8023b44:	6054      	str	r4, [r2, #4]
		__scheds[__sNum].halt=(mode & ITSDK_SCHED_CONF_HALT)?1:0;
 8023b46:	250a      	movs	r5, #10
 8023b48:	197b      	adds	r3, r7, r5
 8023b4a:	881b      	ldrh	r3, [r3, #0]
 8023b4c:	105a      	asrs	r2, r3, #1
 8023b4e:	4b20      	ldr	r3, [pc, #128]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023b50:	781b      	ldrb	r3, [r3, #0]
 8023b52:	001c      	movs	r4, r3
 8023b54:	2301      	movs	r3, #1
 8023b56:	4013      	ands	r3, r2
 8023b58:	b2da      	uxtb	r2, r3
 8023b5a:	491e      	ldr	r1, [pc, #120]	; (8023bd4 <itdt_sched_registerSched+0x130>)
 8023b5c:	2008      	movs	r0, #8
 8023b5e:	0123      	lsls	r3, r4, #4
 8023b60:	18cb      	adds	r3, r1, r3
 8023b62:	181b      	adds	r3, r3, r0
 8023b64:	2101      	movs	r1, #1
 8023b66:	400a      	ands	r2, r1
 8023b68:	1890      	adds	r0, r2, r2
 8023b6a:	78da      	ldrb	r2, [r3, #3]
 8023b6c:	2102      	movs	r1, #2
 8023b6e:	438a      	bics	r2, r1
 8023b70:	1c11      	adds	r1, r2, #0
 8023b72:	1c02      	adds	r2, r0, #0
 8023b74:	430a      	orrs	r2, r1
 8023b76:	70da      	strb	r2, [r3, #3]
		__scheds[__sNum].skip=(mode & ITSDK_SCHED_CONF_SKIP)?1:0;
 8023b78:	4b15      	ldr	r3, [pc, #84]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023b7a:	781b      	ldrb	r3, [r3, #0]
 8023b7c:	001c      	movs	r4, r3
 8023b7e:	197b      	adds	r3, r7, r5
 8023b80:	881b      	ldrh	r3, [r3, #0]
 8023b82:	1c1a      	adds	r2, r3, #0
 8023b84:	2301      	movs	r3, #1
 8023b86:	4013      	ands	r3, r2
 8023b88:	b2da      	uxtb	r2, r3
 8023b8a:	4912      	ldr	r1, [pc, #72]	; (8023bd4 <itdt_sched_registerSched+0x130>)
 8023b8c:	2008      	movs	r0, #8
 8023b8e:	0123      	lsls	r3, r4, #4
 8023b90:	18cb      	adds	r3, r1, r3
 8023b92:	181b      	adds	r3, r3, r0
 8023b94:	2101      	movs	r1, #1
 8023b96:	400a      	ands	r2, r1
 8023b98:	0010      	movs	r0, r2
 8023b9a:	78da      	ldrb	r2, [r3, #3]
 8023b9c:	2101      	movs	r1, #1
 8023b9e:	438a      	bics	r2, r1
 8023ba0:	1c11      	adds	r1, r2, #0
 8023ba2:	1c02      	adds	r2, r0, #0
 8023ba4:	430a      	orrs	r2, r1
 8023ba6:	70da      	strb	r2, [r3, #3]
		__sNum++;
 8023ba8:	4b09      	ldr	r3, [pc, #36]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023baa:	781b      	ldrb	r3, [r3, #0]
 8023bac:	3301      	adds	r3, #1
 8023bae:	b2da      	uxtb	r2, r3
 8023bb0:	4b07      	ldr	r3, [pc, #28]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023bb2:	701a      	strb	r2, [r3, #0]
		return __sNum-1;
 8023bb4:	4b06      	ldr	r3, [pc, #24]	; (8023bd0 <itdt_sched_registerSched+0x12c>)
 8023bb6:	781b      	ldrb	r3, [r3, #0]
 8023bb8:	3b01      	subs	r3, #1
 8023bba:	b2db      	uxtb	r3, r3
 8023bbc:	e000      	b.n	8023bc0 <itdt_sched_registerSched+0x11c>
	} else return ITSDK_SCHED_ERROR;
 8023bbe:	23ff      	movs	r3, #255	; 0xff

}
 8023bc0:	0018      	movs	r0, r3
 8023bc2:	46bd      	mov	sp, r7
 8023bc4:	b005      	add	sp, #20
 8023bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bc8:	00ffffff 	.word	0x00ffffff
 8023bcc:	80000050 	.word	0x80000050
 8023bd0:	20001d89 	.word	0x20001d89
 8023bd4:	20002220 	.word	0x20002220

08023bd8 <itdt_sched_execute>:

/**
 * Task executor
 */
void itdt_sched_execute() {
 8023bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bda:	b087      	sub	sp, #28
 8023bdc:	af00      	add	r7, sp, #0

	uint64_t t = itsdk_time_get_ms();
 8023bde:	f000 f991 	bl	8023f04 <itsdk_time_get_ms>
 8023be2:	0003      	movs	r3, r0
 8023be4:	000c      	movs	r4, r1
 8023be6:	60bb      	str	r3, [r7, #8]
 8023be8:	60fc      	str	r4, [r7, #12]
	for (int i = 0 ; i < __sNum ; i++) {
 8023bea:	2300      	movs	r3, #0
 8023bec:	617b      	str	r3, [r7, #20]
 8023bee:	e091      	b.n	8023d14 <itdt_sched_execute+0x13c>
		do {
			if ( __scheds[i].nextRun <= t ) {
 8023bf0:	4a4e      	ldr	r2, [pc, #312]	; (8023d2c <itdt_sched_execute+0x154>)
 8023bf2:	697b      	ldr	r3, [r7, #20]
 8023bf4:	011b      	lsls	r3, r3, #4
 8023bf6:	18d3      	adds	r3, r2, r3
 8023bf8:	685c      	ldr	r4, [r3, #4]
 8023bfa:	681b      	ldr	r3, [r3, #0]
 8023bfc:	68fa      	ldr	r2, [r7, #12]
 8023bfe:	42a2      	cmp	r2, r4
 8023c00:	d332      	bcc.n	8023c68 <itdt_sched_execute+0x90>
 8023c02:	68fa      	ldr	r2, [r7, #12]
 8023c04:	42a2      	cmp	r2, r4
 8023c06:	d102      	bne.n	8023c0e <itdt_sched_execute+0x36>
 8023c08:	68ba      	ldr	r2, [r7, #8]
 8023c0a:	429a      	cmp	r2, r3
 8023c0c:	d32c      	bcc.n	8023c68 <itdt_sched_execute+0x90>
	 		    __scheds[i].nextRun += (uint64_t)__scheds[i].period;
 8023c0e:	4a47      	ldr	r2, [pc, #284]	; (8023d2c <itdt_sched_execute+0x154>)
 8023c10:	697b      	ldr	r3, [r7, #20]
 8023c12:	011b      	lsls	r3, r3, #4
 8023c14:	18d3      	adds	r3, r2, r3
 8023c16:	685c      	ldr	r4, [r3, #4]
 8023c18:	681b      	ldr	r3, [r3, #0]
 8023c1a:	4944      	ldr	r1, [pc, #272]	; (8023d2c <itdt_sched_execute+0x154>)
 8023c1c:	697a      	ldr	r2, [r7, #20]
 8023c1e:	2008      	movs	r0, #8
 8023c20:	0112      	lsls	r2, r2, #4
 8023c22:	188a      	adds	r2, r1, r2
 8023c24:	1812      	adds	r2, r2, r0
 8023c26:	6812      	ldr	r2, [r2, #0]
 8023c28:	0212      	lsls	r2, r2, #8
 8023c2a:	0a12      	lsrs	r2, r2, #8
 8023c2c:	0015      	movs	r5, r2
 8023c2e:	2200      	movs	r2, #0
 8023c30:	0016      	movs	r6, r2
 8023c32:	195b      	adds	r3, r3, r5
 8023c34:	4174      	adcs	r4, r6
 8023c36:	493d      	ldr	r1, [pc, #244]	; (8023d2c <itdt_sched_execute+0x154>)
 8023c38:	697a      	ldr	r2, [r7, #20]
 8023c3a:	0112      	lsls	r2, r2, #4
 8023c3c:	188a      	adds	r2, r1, r2
 8023c3e:	6013      	str	r3, [r2, #0]
 8023c40:	6054      	str	r4, [r2, #4]
				if ( !__scheds[i].halt ) {
 8023c42:	4a3a      	ldr	r2, [pc, #232]	; (8023d2c <itdt_sched_execute+0x154>)
 8023c44:	697b      	ldr	r3, [r7, #20]
 8023c46:	2108      	movs	r1, #8
 8023c48:	011b      	lsls	r3, r3, #4
 8023c4a:	18d3      	adds	r3, r2, r3
 8023c4c:	185b      	adds	r3, r3, r1
 8023c4e:	78db      	ldrb	r3, [r3, #3]
 8023c50:	079b      	lsls	r3, r3, #30
 8023c52:	0fdb      	lsrs	r3, r3, #31
 8023c54:	b2db      	uxtb	r3, r3
 8023c56:	2b00      	cmp	r3, #0
 8023c58:	d106      	bne.n	8023c68 <itdt_sched_execute+0x90>
					_LOG_SCHED(("[sched] (%d) exec @%ld\r\n",i,t));
					(*__scheds[i].func)();
 8023c5a:	4a34      	ldr	r2, [pc, #208]	; (8023d2c <itdt_sched_execute+0x154>)
 8023c5c:	697b      	ldr	r3, [r7, #20]
 8023c5e:	011b      	lsls	r3, r3, #4
 8023c60:	18d3      	adds	r3, r2, r3
 8023c62:	330c      	adds	r3, #12
 8023c64:	681b      	ldr	r3, [r3, #0]
 8023c66:	4798      	blx	r3
				}
			}
		} while (!__scheds[i].skip && __scheds[i].nextRun <= t );
 8023c68:	4a30      	ldr	r2, [pc, #192]	; (8023d2c <itdt_sched_execute+0x154>)
 8023c6a:	697b      	ldr	r3, [r7, #20]
 8023c6c:	2108      	movs	r1, #8
 8023c6e:	011b      	lsls	r3, r3, #4
 8023c70:	18d3      	adds	r3, r2, r3
 8023c72:	185b      	adds	r3, r3, r1
 8023c74:	78db      	ldrb	r3, [r3, #3]
 8023c76:	07db      	lsls	r3, r3, #31
 8023c78:	0fdb      	lsrs	r3, r3, #31
 8023c7a:	b2db      	uxtb	r3, r3
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	d12b      	bne.n	8023cd8 <itdt_sched_execute+0x100>
 8023c80:	4a2a      	ldr	r2, [pc, #168]	; (8023d2c <itdt_sched_execute+0x154>)
 8023c82:	697b      	ldr	r3, [r7, #20]
 8023c84:	011b      	lsls	r3, r3, #4
 8023c86:	18d3      	adds	r3, r2, r3
 8023c88:	685c      	ldr	r4, [r3, #4]
 8023c8a:	681b      	ldr	r3, [r3, #0]
 8023c8c:	68fa      	ldr	r2, [r7, #12]
 8023c8e:	42a2      	cmp	r2, r4
 8023c90:	d322      	bcc.n	8023cd8 <itdt_sched_execute+0x100>
 8023c92:	68fa      	ldr	r2, [r7, #12]
 8023c94:	42a2      	cmp	r2, r4
 8023c96:	d1ab      	bne.n	8023bf0 <itdt_sched_execute+0x18>
 8023c98:	68ba      	ldr	r2, [r7, #8]
 8023c9a:	429a      	cmp	r2, r3
 8023c9c:	d31c      	bcc.n	8023cd8 <itdt_sched_execute+0x100>
 8023c9e:	e7a7      	b.n	8023bf0 <itdt_sched_execute+0x18>
		while (__scheds[i].skip &&__scheds[i].nextRun <= t) __scheds[i].nextRun += __scheds[i].period;
 8023ca0:	4a22      	ldr	r2, [pc, #136]	; (8023d2c <itdt_sched_execute+0x154>)
 8023ca2:	697b      	ldr	r3, [r7, #20]
 8023ca4:	011b      	lsls	r3, r3, #4
 8023ca6:	18d3      	adds	r3, r2, r3
 8023ca8:	685c      	ldr	r4, [r3, #4]
 8023caa:	681b      	ldr	r3, [r3, #0]
 8023cac:	491f      	ldr	r1, [pc, #124]	; (8023d2c <itdt_sched_execute+0x154>)
 8023cae:	697a      	ldr	r2, [r7, #20]
 8023cb0:	2008      	movs	r0, #8
 8023cb2:	0112      	lsls	r2, r2, #4
 8023cb4:	188a      	adds	r2, r1, r2
 8023cb6:	1812      	adds	r2, r2, r0
 8023cb8:	6812      	ldr	r2, [r2, #0]
 8023cba:	0212      	lsls	r2, r2, #8
 8023cbc:	0a12      	lsrs	r2, r2, #8
 8023cbe:	603a      	str	r2, [r7, #0]
 8023cc0:	2200      	movs	r2, #0
 8023cc2:	607a      	str	r2, [r7, #4]
 8023cc4:	6839      	ldr	r1, [r7, #0]
 8023cc6:	687a      	ldr	r2, [r7, #4]
 8023cc8:	185b      	adds	r3, r3, r1
 8023cca:	4154      	adcs	r4, r2
 8023ccc:	4917      	ldr	r1, [pc, #92]	; (8023d2c <itdt_sched_execute+0x154>)
 8023cce:	697a      	ldr	r2, [r7, #20]
 8023cd0:	0112      	lsls	r2, r2, #4
 8023cd2:	188a      	adds	r2, r1, r2
 8023cd4:	6013      	str	r3, [r2, #0]
 8023cd6:	6054      	str	r4, [r2, #4]
 8023cd8:	4a14      	ldr	r2, [pc, #80]	; (8023d2c <itdt_sched_execute+0x154>)
 8023cda:	697b      	ldr	r3, [r7, #20]
 8023cdc:	2108      	movs	r1, #8
 8023cde:	011b      	lsls	r3, r3, #4
 8023ce0:	18d3      	adds	r3, r2, r3
 8023ce2:	185b      	adds	r3, r3, r1
 8023ce4:	78db      	ldrb	r3, [r3, #3]
 8023ce6:	07db      	lsls	r3, r3, #31
 8023ce8:	0fdb      	lsrs	r3, r3, #31
 8023cea:	b2db      	uxtb	r3, r3
 8023cec:	2b00      	cmp	r3, #0
 8023cee:	d00e      	beq.n	8023d0e <itdt_sched_execute+0x136>
 8023cf0:	4a0e      	ldr	r2, [pc, #56]	; (8023d2c <itdt_sched_execute+0x154>)
 8023cf2:	697b      	ldr	r3, [r7, #20]
 8023cf4:	011b      	lsls	r3, r3, #4
 8023cf6:	18d3      	adds	r3, r2, r3
 8023cf8:	685c      	ldr	r4, [r3, #4]
 8023cfa:	681b      	ldr	r3, [r3, #0]
 8023cfc:	68fa      	ldr	r2, [r7, #12]
 8023cfe:	42a2      	cmp	r2, r4
 8023d00:	d305      	bcc.n	8023d0e <itdt_sched_execute+0x136>
 8023d02:	68fa      	ldr	r2, [r7, #12]
 8023d04:	42a2      	cmp	r2, r4
 8023d06:	d1cb      	bne.n	8023ca0 <itdt_sched_execute+0xc8>
 8023d08:	68ba      	ldr	r2, [r7, #8]
 8023d0a:	429a      	cmp	r2, r3
 8023d0c:	d2c8      	bcs.n	8023ca0 <itdt_sched_execute+0xc8>
	for (int i = 0 ; i < __sNum ; i++) {
 8023d0e:	697b      	ldr	r3, [r7, #20]
 8023d10:	3301      	adds	r3, #1
 8023d12:	617b      	str	r3, [r7, #20]
 8023d14:	4b06      	ldr	r3, [pc, #24]	; (8023d30 <itdt_sched_execute+0x158>)
 8023d16:	781b      	ldrb	r3, [r3, #0]
 8023d18:	001a      	movs	r2, r3
 8023d1a:	697b      	ldr	r3, [r7, #20]
 8023d1c:	4293      	cmp	r3, r2
 8023d1e:	da00      	bge.n	8023d22 <itdt_sched_execute+0x14a>
 8023d20:	e766      	b.n	8023bf0 <itdt_sched_execute+0x18>
		_LOG_SCHED(("[sched] (%d) next @%ld\r\n",i,__scheds[i].nextRun));
	}

}
 8023d22:	46c0      	nop			; (mov r8, r8)
 8023d24:	46bd      	mov	sp, r7
 8023d26:	b007      	add	sp, #28
 8023d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d2a:	46c0      	nop			; (mov r8, r8)
 8023d2c:	20002220 	.word	0x20002220
 8023d30:	20001d89 	.word	0x20001d89

08023d34 <itdt_sched_nextRun>:
}

/**
 * Return time in ms to the next task running
 */
uint32_t itdt_sched_nextRun() {
 8023d34:	b590      	push	{r4, r7, lr}
 8023d36:	b087      	sub	sp, #28
 8023d38:	af00      	add	r7, sp, #0
	uint64_t min = 0;
 8023d3a:	2300      	movs	r3, #0
 8023d3c:	2400      	movs	r4, #0
 8023d3e:	613b      	str	r3, [r7, #16]
 8023d40:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 8023d42:	2300      	movs	r3, #0
 8023d44:	60fb      	str	r3, [r7, #12]
 8023d46:	e029      	b.n	8023d9c <itdt_sched_nextRun+0x68>
		if (  !__scheds[i].halt && (min == 0 || min > __scheds[i].nextRun) ) {
 8023d48:	4a28      	ldr	r2, [pc, #160]	; (8023dec <itdt_sched_nextRun+0xb8>)
 8023d4a:	68fb      	ldr	r3, [r7, #12]
 8023d4c:	2108      	movs	r1, #8
 8023d4e:	011b      	lsls	r3, r3, #4
 8023d50:	18d3      	adds	r3, r2, r3
 8023d52:	185b      	adds	r3, r3, r1
 8023d54:	78db      	ldrb	r3, [r3, #3]
 8023d56:	079b      	lsls	r3, r3, #30
 8023d58:	0fdb      	lsrs	r3, r3, #31
 8023d5a:	b2db      	uxtb	r3, r3
 8023d5c:	2b00      	cmp	r3, #0
 8023d5e:	d11a      	bne.n	8023d96 <itdt_sched_nextRun+0x62>
 8023d60:	693b      	ldr	r3, [r7, #16]
 8023d62:	697a      	ldr	r2, [r7, #20]
 8023d64:	4313      	orrs	r3, r2
 8023d66:	d00e      	beq.n	8023d86 <itdt_sched_nextRun+0x52>
 8023d68:	4a20      	ldr	r2, [pc, #128]	; (8023dec <itdt_sched_nextRun+0xb8>)
 8023d6a:	68fb      	ldr	r3, [r7, #12]
 8023d6c:	011b      	lsls	r3, r3, #4
 8023d6e:	18d3      	adds	r3, r2, r3
 8023d70:	685c      	ldr	r4, [r3, #4]
 8023d72:	681b      	ldr	r3, [r3, #0]
 8023d74:	697a      	ldr	r2, [r7, #20]
 8023d76:	42a2      	cmp	r2, r4
 8023d78:	d805      	bhi.n	8023d86 <itdt_sched_nextRun+0x52>
 8023d7a:	697a      	ldr	r2, [r7, #20]
 8023d7c:	42a2      	cmp	r2, r4
 8023d7e:	d10a      	bne.n	8023d96 <itdt_sched_nextRun+0x62>
 8023d80:	693a      	ldr	r2, [r7, #16]
 8023d82:	429a      	cmp	r2, r3
 8023d84:	d907      	bls.n	8023d96 <itdt_sched_nextRun+0x62>
			min = __scheds[i].nextRun;
 8023d86:	4a19      	ldr	r2, [pc, #100]	; (8023dec <itdt_sched_nextRun+0xb8>)
 8023d88:	68fb      	ldr	r3, [r7, #12]
 8023d8a:	011b      	lsls	r3, r3, #4
 8023d8c:	18d3      	adds	r3, r2, r3
 8023d8e:	685c      	ldr	r4, [r3, #4]
 8023d90:	681b      	ldr	r3, [r3, #0]
 8023d92:	613b      	str	r3, [r7, #16]
 8023d94:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 8023d96:	68fb      	ldr	r3, [r7, #12]
 8023d98:	3301      	adds	r3, #1
 8023d9a:	60fb      	str	r3, [r7, #12]
 8023d9c:	4b14      	ldr	r3, [pc, #80]	; (8023df0 <itdt_sched_nextRun+0xbc>)
 8023d9e:	781b      	ldrb	r3, [r3, #0]
 8023da0:	001a      	movs	r2, r3
 8023da2:	68fb      	ldr	r3, [r7, #12]
 8023da4:	4293      	cmp	r3, r2
 8023da6:	dbcf      	blt.n	8023d48 <itdt_sched_nextRun+0x14>
		}
	}
	if ( min > 0 ) {
 8023da8:	693b      	ldr	r3, [r7, #16]
 8023daa:	697a      	ldr	r2, [r7, #20]
 8023dac:	4313      	orrs	r3, r2
 8023dae:	d017      	beq.n	8023de0 <itdt_sched_nextRun+0xac>
		uint64_t t = itsdk_time_get_ms();
 8023db0:	f000 f8a8 	bl	8023f04 <itsdk_time_get_ms>
 8023db4:	0003      	movs	r3, r0
 8023db6:	000c      	movs	r4, r1
 8023db8:	603b      	str	r3, [r7, #0]
 8023dba:	607c      	str	r4, [r7, #4]
		if ( min >= t ){
 8023dbc:	687a      	ldr	r2, [r7, #4]
 8023dbe:	697b      	ldr	r3, [r7, #20]
 8023dc0:	429a      	cmp	r2, r3
 8023dc2:	d80b      	bhi.n	8023ddc <itdt_sched_nextRun+0xa8>
 8023dc4:	687a      	ldr	r2, [r7, #4]
 8023dc6:	697b      	ldr	r3, [r7, #20]
 8023dc8:	429a      	cmp	r2, r3
 8023dca:	d103      	bne.n	8023dd4 <itdt_sched_nextRun+0xa0>
 8023dcc:	683a      	ldr	r2, [r7, #0]
 8023dce:	693b      	ldr	r3, [r7, #16]
 8023dd0:	429a      	cmp	r2, r3
 8023dd2:	d803      	bhi.n	8023ddc <itdt_sched_nextRun+0xa8>
			return (uint32_t)(min - t);
 8023dd4:	693a      	ldr	r2, [r7, #16]
 8023dd6:	683b      	ldr	r3, [r7, #0]
 8023dd8:	1ad3      	subs	r3, r2, r3
 8023dda:	e003      	b.n	8023de4 <itdt_sched_nextRun+0xb0>
		} else {
			return 0;
 8023ddc:	2300      	movs	r3, #0
 8023dde:	e001      	b.n	8023de4 <itdt_sched_nextRun+0xb0>
		}
	} else {
		return __INFINITE_32B; // max duration
 8023de0:	2301      	movs	r3, #1
 8023de2:	425b      	negs	r3, r3
	}
}
 8023de4:	0018      	movs	r0, r3
 8023de6:	46bd      	mov	sp, r7
 8023de8:	b007      	add	sp, #28
 8023dea:	bd90      	pop	{r4, r7, pc}
 8023dec:	20002220 	.word	0x20002220
 8023df0:	20001d89 	.word	0x20001d89

08023df4 <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 8023df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023df6:	b087      	sub	sp, #28
 8023df8:	af00      	add	r7, sp, #0
 8023dfa:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 8023dfc:	68fb      	ldr	r3, [r7, #12]
 8023dfe:	603b      	str	r3, [r7, #0]
 8023e00:	2300      	movs	r3, #0
 8023e02:	607b      	str	r3, [r7, #4]
 8023e04:	22fa      	movs	r2, #250	; 0xfa
 8023e06:	0092      	lsls	r2, r2, #2
 8023e08:	2300      	movs	r3, #0
 8023e0a:	6838      	ldr	r0, [r7, #0]
 8023e0c:	6879      	ldr	r1, [r7, #4]
 8023e0e:	f7dc fbb5 	bl	800057c <__aeabi_lmul>
 8023e12:	0003      	movs	r3, r0
 8023e14:	000c      	movs	r4, r1
 8023e16:	0018      	movs	r0, r3
 8023e18:	0021      	movs	r1, r4
 8023e1a:	22fa      	movs	r2, #250	; 0xfa
 8023e1c:	0092      	lsls	r2, r2, #2
 8023e1e:	2300      	movs	r3, #0
 8023e20:	f7dc fb68 	bl	80004f4 <__aeabi_ldivmod>
 8023e24:	0003      	movs	r3, r0
 8023e26:	000c      	movs	r4, r1
 8023e28:	001a      	movs	r2, r3
 8023e2a:	68fb      	ldr	r3, [r7, #12]
 8023e2c:	189b      	adds	r3, r3, r2
 8023e2e:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 8023e30:	68fb      	ldr	r3, [r7, #12]
 8023e32:	001d      	movs	r5, r3
 8023e34:	2300      	movs	r3, #0
 8023e36:	001e      	movs	r6, r3
 8023e38:	4b12      	ldr	r3, [pc, #72]	; (8023e84 <itsdk_time_add_us+0x90>)
 8023e3a:	685c      	ldr	r4, [r3, #4]
 8023e3c:	681b      	ldr	r3, [r3, #0]
 8023e3e:	195b      	adds	r3, r3, r5
 8023e40:	4174      	adcs	r4, r6
 8023e42:	613b      	str	r3, [r7, #16]
 8023e44:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 8023e46:	4b0f      	ldr	r3, [pc, #60]	; (8023e84 <itsdk_time_add_us+0x90>)
 8023e48:	685c      	ldr	r4, [r3, #4]
 8023e4a:	681b      	ldr	r3, [r3, #0]
 8023e4c:	697a      	ldr	r2, [r7, #20]
 8023e4e:	42a2      	cmp	r2, r4
 8023e50:	d305      	bcc.n	8023e5e <itsdk_time_add_us+0x6a>
 8023e52:	697a      	ldr	r2, [r7, #20]
 8023e54:	42a2      	cmp	r2, r4
 8023e56:	d10b      	bne.n	8023e70 <itsdk_time_add_us+0x7c>
 8023e58:	693a      	ldr	r2, [r7, #16]
 8023e5a:	429a      	cmp	r2, r3
 8023e5c:	d208      	bcs.n	8023e70 <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 8023e5e:	4b0a      	ldr	r3, [pc, #40]	; (8023e88 <itsdk_time_add_us+0x94>)
 8023e60:	2201      	movs	r2, #1
 8023e62:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 8023e64:	4b09      	ldr	r3, [pc, #36]	; (8023e8c <itsdk_time_add_us+0x98>)
 8023e66:	781b      	ldrb	r3, [r3, #0]
 8023e68:	3301      	adds	r3, #1
 8023e6a:	b2da      	uxtb	r2, r3
 8023e6c:	4b07      	ldr	r3, [pc, #28]	; (8023e8c <itsdk_time_add_us+0x98>)
 8023e6e:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 8023e70:	4a04      	ldr	r2, [pc, #16]	; (8023e84 <itsdk_time_add_us+0x90>)
 8023e72:	693b      	ldr	r3, [r7, #16]
 8023e74:	697c      	ldr	r4, [r7, #20]
 8023e76:	6013      	str	r3, [r2, #0]
 8023e78:	6054      	str	r4, [r2, #4]
}
 8023e7a:	46c0      	nop			; (mov r8, r8)
 8023e7c:	46bd      	mov	sp, r7
 8023e7e:	b007      	add	sp, #28
 8023e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e82:	46c0      	nop			; (mov r8, r8)
 8023e84:	20001d90 	.word	0x20001d90
 8023e88:	20001d98 	.word	0x20001d98
 8023e8c:	20001d99 	.word	0x20001d99

08023e90 <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 8023e90:	b590      	push	{r4, r7, lr}
 8023e92:	b085      	sub	sp, #20
 8023e94:	af00      	add	r7, sp, #0
 8023e96:	6038      	str	r0, [r7, #0]
 8023e98:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 8023e9a:	22fa      	movs	r2, #250	; 0xfa
 8023e9c:	0092      	lsls	r2, r2, #2
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	6838      	ldr	r0, [r7, #0]
 8023ea2:	6879      	ldr	r1, [r7, #4]
 8023ea4:	f7dc fb6a 	bl	800057c <__aeabi_lmul>
 8023ea8:	0003      	movs	r3, r0
 8023eaa:	000c      	movs	r4, r1
 8023eac:	60bb      	str	r3, [r7, #8]
 8023eae:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 8023eb0:	4b10      	ldr	r3, [pc, #64]	; (8023ef4 <itsdk_time_set_ms+0x64>)
 8023eb2:	6819      	ldr	r1, [r3, #0]
 8023eb4:	685a      	ldr	r2, [r3, #4]
 8023eb6:	68bb      	ldr	r3, [r7, #8]
 8023eb8:	68fc      	ldr	r4, [r7, #12]
 8023eba:	1ac9      	subs	r1, r1, r3
 8023ebc:	41a2      	sbcs	r2, r4
 8023ebe:	000b      	movs	r3, r1
 8023ec0:	0014      	movs	r4, r2
 8023ec2:	2c00      	cmp	r4, #0
 8023ec4:	d103      	bne.n	8023ece <itsdk_time_set_ms+0x3e>
 8023ec6:	d10b      	bne.n	8023ee0 <itsdk_time_set_ms+0x50>
 8023ec8:	4a0b      	ldr	r2, [pc, #44]	; (8023ef8 <itsdk_time_set_ms+0x68>)
 8023eca:	4293      	cmp	r3, r2
 8023ecc:	d908      	bls.n	8023ee0 <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 8023ece:	4b0b      	ldr	r3, [pc, #44]	; (8023efc <itsdk_time_set_ms+0x6c>)
 8023ed0:	2201      	movs	r2, #1
 8023ed2:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 8023ed4:	4b0a      	ldr	r3, [pc, #40]	; (8023f00 <itsdk_time_set_ms+0x70>)
 8023ed6:	781b      	ldrb	r3, [r3, #0]
 8023ed8:	3301      	adds	r3, #1
 8023eda:	b2da      	uxtb	r2, r3
 8023edc:	4b08      	ldr	r3, [pc, #32]	; (8023f00 <itsdk_time_set_ms+0x70>)
 8023ede:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 8023ee0:	4a04      	ldr	r2, [pc, #16]	; (8023ef4 <itsdk_time_set_ms+0x64>)
 8023ee2:	68bb      	ldr	r3, [r7, #8]
 8023ee4:	68fc      	ldr	r4, [r7, #12]
 8023ee6:	6013      	str	r3, [r2, #0]
 8023ee8:	6054      	str	r4, [r2, #4]
}
 8023eea:	46c0      	nop			; (mov r8, r8)
 8023eec:	46bd      	mov	sp, r7
 8023eee:	b005      	add	sp, #20
 8023ef0:	bd90      	pop	{r4, r7, pc}
 8023ef2:	46c0      	nop			; (mov r8, r8)
 8023ef4:	20001d90 	.word	0x20001d90
 8023ef8:	000f4240 	.word	0x000f4240
 8023efc:	20001d98 	.word	0x20001d98
 8023f00:	20001d99 	.word	0x20001d99

08023f04 <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 8023f04:	b5b0      	push	{r4, r5, r7, lr}
 8023f06:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 8023f08:	4b06      	ldr	r3, [pc, #24]	; (8023f24 <itsdk_time_get_ms+0x20>)
 8023f0a:	6818      	ldr	r0, [r3, #0]
 8023f0c:	6859      	ldr	r1, [r3, #4]
 8023f0e:	22fa      	movs	r2, #250	; 0xfa
 8023f10:	0092      	lsls	r2, r2, #2
 8023f12:	2300      	movs	r3, #0
 8023f14:	f7dc fb12 	bl	800053c <__aeabi_uldivmod>
 8023f18:	0003      	movs	r3, r0
 8023f1a:	000c      	movs	r4, r1
}
 8023f1c:	0018      	movs	r0, r3
 8023f1e:	0021      	movs	r1, r4
 8023f20:	46bd      	mov	sp, r7
 8023f22:	bdb0      	pop	{r4, r5, r7, pc}
 8023f24:	20001d90 	.word	0x20001d90

08023f28 <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 8023f28:	b590      	push	{r4, r7, lr}
 8023f2a:	af00      	add	r7, sp, #0
	return __timeus;
 8023f2c:	4b03      	ldr	r3, [pc, #12]	; (8023f3c <itsdk_time_get_us+0x14>)
 8023f2e:	685c      	ldr	r4, [r3, #4]
 8023f30:	681b      	ldr	r3, [r3, #0]
}
 8023f32:	0018      	movs	r0, r3
 8023f34:	0021      	movs	r1, r4
 8023f36:	46bd      	mov	sp, r7
 8023f38:	bd90      	pop	{r4, r7, pc}
 8023f3a:	46c0      	nop			; (mov r8, r8)
 8023f3c:	20001d90 	.word	0x20001d90

08023f40 <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 8023f40:	b5b0      	push	{r4, r5, r7, lr}
 8023f42:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 8023f44:	f001 fe36 	bl	8025bb4 <rtc_resetTime>
	rtc_adjustTime();
 8023f48:	f001 feb8 	bl	8025cbc <rtc_adjustTime>
  #endif
	systick_adjustTime();
 8023f4c:	f001 ff14 	bl	8025d78 <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 8023f50:	f001 fd42 	bl	80259d8 <rtc_getTimestampMs>
 8023f54:	0003      	movs	r3, r0
 8023f56:	000c      	movs	r4, r1
 8023f58:	0018      	movs	r0, r3
 8023f5a:	0021      	movs	r1, r4
 8023f5c:	f7ff ff98 	bl	8023e90 <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 8023f60:	46c0      	nop			; (mov r8, r8)
 8023f62:	46bd      	mov	sp, r7
 8023f64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08023f68 <itsdk_stimer_register>:
itsdk_timer_return_t itsdk_stimer_register(
		uint32_t ms,
		void (*callback_func)(uint32_t value),
		uint32_t value,
		itsdk_timer_lpAccept allowLowPower
) {
 8023f68:	b5b0      	push	{r4, r5, r7, lr}
 8023f6a:	b086      	sub	sp, #24
 8023f6c:	af00      	add	r7, sp, #0
 8023f6e:	60f8      	str	r0, [r7, #12]
 8023f70:	60b9      	str	r1, [r7, #8]
 8023f72:	607a      	str	r2, [r7, #4]
 8023f74:	001a      	movs	r2, r3
 8023f76:	1cfb      	adds	r3, r7, #3
 8023f78:	701a      	strb	r2, [r3, #0]
		#endif
		return TIMER_TOO_SHORT;
	}
	*/

	int i = 0;
 8023f7a:	2300      	movs	r3, #0
 8023f7c:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 8023f7e:	e00e      	b.n	8023f9e <itsdk_stimer_register+0x36>
		if (__stimer_slots[i].inUse == false) {
 8023f80:	492f      	ldr	r1, [pc, #188]	; (8024040 <itsdk_stimer_register+0xd8>)
 8023f82:	697a      	ldr	r2, [r7, #20]
 8023f84:	0013      	movs	r3, r2
 8023f86:	005b      	lsls	r3, r3, #1
 8023f88:	189b      	adds	r3, r3, r2
 8023f8a:	00db      	lsls	r3, r3, #3
 8023f8c:	5c5b      	ldrb	r3, [r3, r1]
 8023f8e:	2201      	movs	r2, #1
 8023f90:	4053      	eors	r3, r2
 8023f92:	b2db      	uxtb	r3, r3
 8023f94:	2b00      	cmp	r3, #0
 8023f96:	d106      	bne.n	8023fa6 <itsdk_stimer_register+0x3e>
			break;
		}
		i++;
 8023f98:	697b      	ldr	r3, [r7, #20]
 8023f9a:	3301      	adds	r3, #1
 8023f9c:	617b      	str	r3, [r7, #20]
	while ( i < ITSDK_TIMER_SLOTS) {
 8023f9e:	697b      	ldr	r3, [r7, #20]
 8023fa0:	2b04      	cmp	r3, #4
 8023fa2:	dded      	ble.n	8023f80 <itsdk_stimer_register+0x18>
 8023fa4:	e000      	b.n	8023fa8 <itsdk_stimer_register+0x40>
			break;
 8023fa6:	46c0      	nop			; (mov r8, r8)
	}
	if ( i < ITSDK_TIMER_SLOTS ) {
 8023fa8:	697b      	ldr	r3, [r7, #20]
 8023faa:	2b04      	cmp	r3, #4
 8023fac:	dc42      	bgt.n	8024034 <itsdk_stimer_register+0xcc>
		__stimer_slots[i].inUse = true;
 8023fae:	4924      	ldr	r1, [pc, #144]	; (8024040 <itsdk_stimer_register+0xd8>)
 8023fb0:	697a      	ldr	r2, [r7, #20]
 8023fb2:	0013      	movs	r3, r2
 8023fb4:	005b      	lsls	r3, r3, #1
 8023fb6:	189b      	adds	r3, r3, r2
 8023fb8:	00db      	lsls	r3, r3, #3
 8023fba:	2201      	movs	r2, #1
 8023fbc:	545a      	strb	r2, [r3, r1]
		__stimer_slots[i].allowLowPower = ((allowLowPower==TIMER_ACCEPT_LOWPOWER)?true:false);
 8023fbe:	1cfb      	adds	r3, r7, #3
 8023fc0:	781b      	ldrb	r3, [r3, #0]
 8023fc2:	425a      	negs	r2, r3
 8023fc4:	4153      	adcs	r3, r2
 8023fc6:	b2d8      	uxtb	r0, r3
 8023fc8:	491d      	ldr	r1, [pc, #116]	; (8024040 <itsdk_stimer_register+0xd8>)
 8023fca:	697a      	ldr	r2, [r7, #20]
 8023fcc:	0013      	movs	r3, r2
 8023fce:	005b      	lsls	r3, r3, #1
 8023fd0:	189b      	adds	r3, r3, r2
 8023fd2:	00db      	lsls	r3, r3, #3
 8023fd4:	18cb      	adds	r3, r1, r3
 8023fd6:	3301      	adds	r3, #1
 8023fd8:	1c02      	adds	r2, r0, #0
 8023fda:	701a      	strb	r2, [r3, #0]
		__stimer_slots[i].customValue = value;
 8023fdc:	4918      	ldr	r1, [pc, #96]	; (8024040 <itsdk_stimer_register+0xd8>)
 8023fde:	697a      	ldr	r2, [r7, #20]
 8023fe0:	0013      	movs	r3, r2
 8023fe2:	005b      	lsls	r3, r3, #1
 8023fe4:	189b      	adds	r3, r3, r2
 8023fe6:	00db      	lsls	r3, r3, #3
 8023fe8:	18cb      	adds	r3, r1, r3
 8023fea:	3314      	adds	r3, #20
 8023fec:	687a      	ldr	r2, [r7, #4]
 8023fee:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].callback_func = callback_func;
 8023ff0:	4913      	ldr	r1, [pc, #76]	; (8024040 <itsdk_stimer_register+0xd8>)
 8023ff2:	697a      	ldr	r2, [r7, #20]
 8023ff4:	0013      	movs	r3, r2
 8023ff6:	005b      	lsls	r3, r3, #1
 8023ff8:	189b      	adds	r3, r3, r2
 8023ffa:	00db      	lsls	r3, r3, #3
 8023ffc:	18cb      	adds	r3, r1, r3
 8023ffe:	3310      	adds	r3, #16
 8024000:	68ba      	ldr	r2, [r7, #8]
 8024002:	601a      	str	r2, [r3, #0]
		__stimer_slots[i].timeoutMs = itsdk_time_get_ms()+(uint64_t)ms;
 8024004:	f7ff ff7e 	bl	8023f04 <itsdk_time_get_ms>
 8024008:	0002      	movs	r2, r0
 802400a:	000b      	movs	r3, r1
 802400c:	68f9      	ldr	r1, [r7, #12]
 802400e:	000c      	movs	r4, r1
 8024010:	2100      	movs	r1, #0
 8024012:	000d      	movs	r5, r1
 8024014:	1912      	adds	r2, r2, r4
 8024016:	416b      	adcs	r3, r5
 8024018:	0011      	movs	r1, r2
 802401a:	001a      	movs	r2, r3
 802401c:	4c08      	ldr	r4, [pc, #32]	; (8024040 <itsdk_stimer_register+0xd8>)
 802401e:	6978      	ldr	r0, [r7, #20]
 8024020:	0003      	movs	r3, r0
 8024022:	005b      	lsls	r3, r3, #1
 8024024:	181b      	adds	r3, r3, r0
 8024026:	00db      	lsls	r3, r3, #3
 8024028:	18e3      	adds	r3, r4, r3
 802402a:	3308      	adds	r3, #8
 802402c:	6019      	str	r1, [r3, #0]
 802402e:	605a      	str	r2, [r3, #4]
		return TIMER_INIT_SUCCESS;
 8024030:	2300      	movs	r3, #0
 8024032:	e000      	b.n	8024036 <itsdk_stimer_register+0xce>
	}
	#if (ITSDK_LOGGER_MODULE & __LOG_MOD_STIMER) > 0
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_STIMER_LIST_FULL,0);
	#endif
	return TIMER_LIST_FULL;
 8024034:	2303      	movs	r3, #3
}
 8024036:	0018      	movs	r0, r3
 8024038:	46bd      	mov	sp, r7
 802403a:	b006      	add	sp, #24
 802403c:	bdb0      	pop	{r4, r5, r7, pc}
 802403e:	46c0      	nop			; (mov r8, r8)
 8024040:	20001da0 	.word	0x20001da0

08024044 <itsdk_stimer_stop>:
 * identified by function pointer & value
 */
itsdk_timer_return_t itsdk_stimer_stop(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 8024044:	b580      	push	{r7, lr}
 8024046:	b084      	sub	sp, #16
 8024048:	af00      	add	r7, sp, #0
 802404a:	6078      	str	r0, [r7, #4]
 802404c:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 802404e:	2300      	movs	r3, #0
 8024050:	60fb      	str	r3, [r7, #12]
 8024052:	e02d      	b.n	80240b0 <itsdk_stimer_stop+0x6c>
		if (
				__stimer_slots[i].inUse == true
 8024054:	491a      	ldr	r1, [pc, #104]	; (80240c0 <itsdk_stimer_stop+0x7c>)
 8024056:	68fa      	ldr	r2, [r7, #12]
 8024058:	0013      	movs	r3, r2
 802405a:	005b      	lsls	r3, r3, #1
 802405c:	189b      	adds	r3, r3, r2
 802405e:	00db      	lsls	r3, r3, #3
 8024060:	5c5b      	ldrb	r3, [r3, r1]
		if (
 8024062:	2b00      	cmp	r3, #0
 8024064:	d021      	beq.n	80240aa <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].customValue == value
 8024066:	4916      	ldr	r1, [pc, #88]	; (80240c0 <itsdk_stimer_stop+0x7c>)
 8024068:	68fa      	ldr	r2, [r7, #12]
 802406a:	0013      	movs	r3, r2
 802406c:	005b      	lsls	r3, r3, #1
 802406e:	189b      	adds	r3, r3, r2
 8024070:	00db      	lsls	r3, r3, #3
 8024072:	18cb      	adds	r3, r1, r3
 8024074:	3314      	adds	r3, #20
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	683a      	ldr	r2, [r7, #0]
 802407a:	429a      	cmp	r2, r3
 802407c:	d115      	bne.n	80240aa <itsdk_stimer_stop+0x66>
			&&  __stimer_slots[i].callback_func == callback_func
 802407e:	4910      	ldr	r1, [pc, #64]	; (80240c0 <itsdk_stimer_stop+0x7c>)
 8024080:	68fa      	ldr	r2, [r7, #12]
 8024082:	0013      	movs	r3, r2
 8024084:	005b      	lsls	r3, r3, #1
 8024086:	189b      	adds	r3, r3, r2
 8024088:	00db      	lsls	r3, r3, #3
 802408a:	18cb      	adds	r3, r1, r3
 802408c:	3310      	adds	r3, #16
 802408e:	681b      	ldr	r3, [r3, #0]
 8024090:	687a      	ldr	r2, [r7, #4]
 8024092:	429a      	cmp	r2, r3
 8024094:	d109      	bne.n	80240aa <itsdk_stimer_stop+0x66>
		) {
			// found
			__stimer_slots[i].inUse = false;
 8024096:	490a      	ldr	r1, [pc, #40]	; (80240c0 <itsdk_stimer_stop+0x7c>)
 8024098:	68fa      	ldr	r2, [r7, #12]
 802409a:	0013      	movs	r3, r2
 802409c:	005b      	lsls	r3, r3, #1
 802409e:	189b      	adds	r3, r3, r2
 80240a0:	00db      	lsls	r3, r3, #3
 80240a2:	2200      	movs	r2, #0
 80240a4:	545a      	strb	r2, [r3, r1]
			return TIMER_INIT_SUCCESS;
 80240a6:	2300      	movs	r3, #0
 80240a8:	e006      	b.n	80240b8 <itsdk_stimer_stop+0x74>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 80240aa:	68fb      	ldr	r3, [r7, #12]
 80240ac:	3301      	adds	r3, #1
 80240ae:	60fb      	str	r3, [r7, #12]
 80240b0:	68fb      	ldr	r3, [r7, #12]
 80240b2:	2b04      	cmp	r3, #4
 80240b4:	ddce      	ble.n	8024054 <itsdk_stimer_stop+0x10>
		}
	}
	return TIMER_NOT_FOUND;
 80240b6:	2304      	movs	r3, #4
}
 80240b8:	0018      	movs	r0, r3
 80240ba:	46bd      	mov	sp, r7
 80240bc:	b004      	add	sp, #16
 80240be:	bd80      	pop	{r7, pc}
 80240c0:	20001da0 	.word	0x20001da0

080240c4 <itsdk_stimer_isLowPowerSwitchAutorized>:
 * Some soft timers need to have a precise timing and are not supporting
 * the variation due to the deep sleep RTC duration.
 * An improvement will be to moderate the RTC sleep duration to the duration
 * of these timer to avoid the timing GAP. See it later.
 */
bool itsdk_stimer_isLowPowerSwitchAutorized() {
 80240c4:	b580      	push	{r7, lr}
 80240c6:	b082      	sub	sp, #8
 80240c8:	af00      	add	r7, sp, #0
	int i = 0;
 80240ca:	2300      	movs	r3, #0
 80240cc:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 80240ce:	e01b      	b.n	8024108 <itsdk_stimer_isLowPowerSwitchAutorized+0x44>
		if (__stimer_slots[i].inUse && __stimer_slots[i].allowLowPower == false ) {
 80240d0:	4911      	ldr	r1, [pc, #68]	; (8024118 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 80240d2:	687a      	ldr	r2, [r7, #4]
 80240d4:	0013      	movs	r3, r2
 80240d6:	005b      	lsls	r3, r3, #1
 80240d8:	189b      	adds	r3, r3, r2
 80240da:	00db      	lsls	r3, r3, #3
 80240dc:	5c5b      	ldrb	r3, [r3, r1]
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d00f      	beq.n	8024102 <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
 80240e2:	490d      	ldr	r1, [pc, #52]	; (8024118 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 80240e4:	687a      	ldr	r2, [r7, #4]
 80240e6:	0013      	movs	r3, r2
 80240e8:	005b      	lsls	r3, r3, #1
 80240ea:	189b      	adds	r3, r3, r2
 80240ec:	00db      	lsls	r3, r3, #3
 80240ee:	18cb      	adds	r3, r1, r3
 80240f0:	3301      	adds	r3, #1
 80240f2:	781b      	ldrb	r3, [r3, #0]
 80240f4:	2201      	movs	r2, #1
 80240f6:	4053      	eors	r3, r2
 80240f8:	b2db      	uxtb	r3, r3
 80240fa:	2b00      	cmp	r3, #0
 80240fc:	d001      	beq.n	8024102 <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
			return false;
 80240fe:	2300      	movs	r3, #0
 8024100:	e006      	b.n	8024110 <itsdk_stimer_isLowPowerSwitchAutorized+0x4c>
		}
		i++;
 8024102:	687b      	ldr	r3, [r7, #4]
 8024104:	3301      	adds	r3, #1
 8024106:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 8024108:	687b      	ldr	r3, [r7, #4]
 802410a:	2b04      	cmp	r3, #4
 802410c:	dde0      	ble.n	80240d0 <itsdk_stimer_isLowPowerSwitchAutorized+0xc>
	}
	return true;
 802410e:	2301      	movs	r3, #1
}
 8024110:	0018      	movs	r0, r3
 8024112:	46bd      	mov	sp, r7
 8024114:	b002      	add	sp, #8
 8024116:	bd80      	pop	{r7, pc}
 8024118:	20001da0 	.word	0x20001da0

0802411c <itsdk_stimer_get>:
 * Get a timer structure from callback & value
 */
itsdk_stimer_slot_t * itsdk_stimer_get(
		void (*callback_func)(uint32_t value),
		uint32_t value
) {
 802411c:	b580      	push	{r7, lr}
 802411e:	b084      	sub	sp, #16
 8024120:	af00      	add	r7, sp, #0
 8024122:	6078      	str	r0, [r7, #4]
 8024124:	6039      	str	r1, [r7, #0]
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 8024126:	2300      	movs	r3, #0
 8024128:	60fb      	str	r3, [r7, #12]
 802412a:	e02b      	b.n	8024184 <itsdk_stimer_get+0x68>
		if (
				__stimer_slots[i].inUse == true
 802412c:	4919      	ldr	r1, [pc, #100]	; (8024194 <itsdk_stimer_get+0x78>)
 802412e:	68fa      	ldr	r2, [r7, #12]
 8024130:	0013      	movs	r3, r2
 8024132:	005b      	lsls	r3, r3, #1
 8024134:	189b      	adds	r3, r3, r2
 8024136:	00db      	lsls	r3, r3, #3
 8024138:	5c5b      	ldrb	r3, [r3, r1]
		if (
 802413a:	2b00      	cmp	r3, #0
 802413c:	d01f      	beq.n	802417e <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].customValue == value
 802413e:	4915      	ldr	r1, [pc, #84]	; (8024194 <itsdk_stimer_get+0x78>)
 8024140:	68fa      	ldr	r2, [r7, #12]
 8024142:	0013      	movs	r3, r2
 8024144:	005b      	lsls	r3, r3, #1
 8024146:	189b      	adds	r3, r3, r2
 8024148:	00db      	lsls	r3, r3, #3
 802414a:	18cb      	adds	r3, r1, r3
 802414c:	3314      	adds	r3, #20
 802414e:	681b      	ldr	r3, [r3, #0]
 8024150:	683a      	ldr	r2, [r7, #0]
 8024152:	429a      	cmp	r2, r3
 8024154:	d113      	bne.n	802417e <itsdk_stimer_get+0x62>
			&&  __stimer_slots[i].callback_func == callback_func
 8024156:	490f      	ldr	r1, [pc, #60]	; (8024194 <itsdk_stimer_get+0x78>)
 8024158:	68fa      	ldr	r2, [r7, #12]
 802415a:	0013      	movs	r3, r2
 802415c:	005b      	lsls	r3, r3, #1
 802415e:	189b      	adds	r3, r3, r2
 8024160:	00db      	lsls	r3, r3, #3
 8024162:	18cb      	adds	r3, r1, r3
 8024164:	3310      	adds	r3, #16
 8024166:	681b      	ldr	r3, [r3, #0]
 8024168:	687a      	ldr	r2, [r7, #4]
 802416a:	429a      	cmp	r2, r3
 802416c:	d107      	bne.n	802417e <itsdk_stimer_get+0x62>
		) {
			// found
			return  &__stimer_slots[i];
 802416e:	68fa      	ldr	r2, [r7, #12]
 8024170:	0013      	movs	r3, r2
 8024172:	005b      	lsls	r3, r3, #1
 8024174:	189b      	adds	r3, r3, r2
 8024176:	00db      	lsls	r3, r3, #3
 8024178:	4a06      	ldr	r2, [pc, #24]	; (8024194 <itsdk_stimer_get+0x78>)
 802417a:	189b      	adds	r3, r3, r2
 802417c:	e006      	b.n	802418c <itsdk_stimer_get+0x70>
	for (int i=0 ; i < ITSDK_TIMER_SLOTS ; i++) {
 802417e:	68fb      	ldr	r3, [r7, #12]
 8024180:	3301      	adds	r3, #1
 8024182:	60fb      	str	r3, [r7, #12]
 8024184:	68fb      	ldr	r3, [r7, #12]
 8024186:	2b04      	cmp	r3, #4
 8024188:	ddd0      	ble.n	802412c <itsdk_stimer_get+0x10>
		}
	}
	return NULL;
 802418a:	2300      	movs	r3, #0

}
 802418c:	0018      	movs	r0, r3
 802418e:	46bd      	mov	sp, r7
 8024190:	b004      	add	sp, #16
 8024192:	bd80      	pop	{r7, pc}
 8024194:	20001da0 	.word	0x20001da0

08024198 <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 8024198:	b590      	push	{r4, r7, lr}
 802419a:	b085      	sub	sp, #20
 802419c:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 802419e:	f7ff feb1 	bl	8023f04 <itsdk_time_get_ms>
 80241a2:	0003      	movs	r3, r0
 80241a4:	000c      	movs	r4, r1
 80241a6:	603b      	str	r3, [r7, #0]
 80241a8:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 80241aa:	2300      	movs	r3, #0
 80241ac:	60fb      	str	r3, [r7, #12]
 80241ae:	e045      	b.n	802423c <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 80241b0:	4926      	ldr	r1, [pc, #152]	; (802424c <itsdk_stimer_run+0xb4>)
 80241b2:	68fa      	ldr	r2, [r7, #12]
 80241b4:	0013      	movs	r3, r2
 80241b6:	005b      	lsls	r3, r3, #1
 80241b8:	189b      	adds	r3, r3, r2
 80241ba:	00db      	lsls	r3, r3, #3
 80241bc:	5c5b      	ldrb	r3, [r3, r1]
 80241be:	2b00      	cmp	r3, #0
 80241c0:	d039      	beq.n	8024236 <itsdk_stimer_run+0x9e>
 80241c2:	4922      	ldr	r1, [pc, #136]	; (802424c <itsdk_stimer_run+0xb4>)
 80241c4:	68fa      	ldr	r2, [r7, #12]
 80241c6:	0013      	movs	r3, r2
 80241c8:	005b      	lsls	r3, r3, #1
 80241ca:	189b      	adds	r3, r3, r2
 80241cc:	00db      	lsls	r3, r3, #3
 80241ce:	18cb      	adds	r3, r1, r3
 80241d0:	3308      	adds	r3, #8
 80241d2:	685c      	ldr	r4, [r3, #4]
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	687a      	ldr	r2, [r7, #4]
 80241d8:	42a2      	cmp	r2, r4
 80241da:	d32c      	bcc.n	8024236 <itsdk_stimer_run+0x9e>
 80241dc:	687a      	ldr	r2, [r7, #4]
 80241de:	42a2      	cmp	r2, r4
 80241e0:	d102      	bne.n	80241e8 <itsdk_stimer_run+0x50>
 80241e2:	683a      	ldr	r2, [r7, #0]
 80241e4:	429a      	cmp	r2, r3
 80241e6:	d326      	bcc.n	8024236 <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 80241e8:	4918      	ldr	r1, [pc, #96]	; (802424c <itsdk_stimer_run+0xb4>)
 80241ea:	68fa      	ldr	r2, [r7, #12]
 80241ec:	0013      	movs	r3, r2
 80241ee:	005b      	lsls	r3, r3, #1
 80241f0:	189b      	adds	r3, r3, r2
 80241f2:	00db      	lsls	r3, r3, #3
 80241f4:	2200      	movs	r2, #0
 80241f6:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 80241f8:	4914      	ldr	r1, [pc, #80]	; (802424c <itsdk_stimer_run+0xb4>)
 80241fa:	68fa      	ldr	r2, [r7, #12]
 80241fc:	0013      	movs	r3, r2
 80241fe:	005b      	lsls	r3, r3, #1
 8024200:	189b      	adds	r3, r3, r2
 8024202:	00db      	lsls	r3, r3, #3
 8024204:	18cb      	adds	r3, r1, r3
 8024206:	3310      	adds	r3, #16
 8024208:	681b      	ldr	r3, [r3, #0]
 802420a:	2b00      	cmp	r3, #0
 802420c:	d013      	beq.n	8024236 <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 802420e:	490f      	ldr	r1, [pc, #60]	; (802424c <itsdk_stimer_run+0xb4>)
 8024210:	68fa      	ldr	r2, [r7, #12]
 8024212:	0013      	movs	r3, r2
 8024214:	005b      	lsls	r3, r3, #1
 8024216:	189b      	adds	r3, r3, r2
 8024218:	00db      	lsls	r3, r3, #3
 802421a:	18cb      	adds	r3, r1, r3
 802421c:	3310      	adds	r3, #16
 802421e:	6819      	ldr	r1, [r3, #0]
 8024220:	480a      	ldr	r0, [pc, #40]	; (802424c <itsdk_stimer_run+0xb4>)
 8024222:	68fa      	ldr	r2, [r7, #12]
 8024224:	0013      	movs	r3, r2
 8024226:	005b      	lsls	r3, r3, #1
 8024228:	189b      	adds	r3, r3, r2
 802422a:	00db      	lsls	r3, r3, #3
 802422c:	18c3      	adds	r3, r0, r3
 802422e:	3314      	adds	r3, #20
 8024230:	681b      	ldr	r3, [r3, #0]
 8024232:	0018      	movs	r0, r3
 8024234:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8024236:	68fb      	ldr	r3, [r7, #12]
 8024238:	3301      	adds	r3, #1
 802423a:	60fb      	str	r3, [r7, #12]
 802423c:	68fb      	ldr	r3, [r7, #12]
 802423e:	2b04      	cmp	r3, #4
 8024240:	ddb6      	ble.n	80241b0 <itsdk_stimer_run+0x18>
		}
	}
}
 8024242:	46c0      	nop			; (mov r8, r8)
 8024244:	46bd      	mov	sp, r7
 8024246:	b005      	add	sp, #20
 8024248:	bd90      	pop	{r4, r7, pc}
 802424a:	46c0      	nop			; (mov r8, r8)
 802424c:	20001da0 	.word	0x20001da0

08024250 <itsdk_stimer_nextTimeoutMs>:

/**
 * Compute the number of Ms from Now to the next Timer to expire.
 * return ITSDK_STIMER_INFINITE when none are in execution or in the future.
 */
uint32_t itsdk_stimer_nextTimeoutMs(){
 8024250:	b590      	push	{r4, r7, lr}
 8024252:	b087      	sub	sp, #28
 8024254:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 8024256:	f7ff fe55 	bl	8023f04 <itsdk_time_get_ms>
 802425a:	0003      	movs	r3, r0
 802425c:	000c      	movs	r4, r1
 802425e:	603b      	str	r3, [r7, #0]
 8024260:	607c      	str	r4, [r7, #4]
	uint64_t min = __INFINITE_64B;
 8024262:	2301      	movs	r3, #1
 8024264:	425b      	negs	r3, r3
 8024266:	17dc      	asrs	r4, r3, #31
 8024268:	613b      	str	r3, [r7, #16]
 802426a:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 802426c:	2300      	movs	r3, #0
 802426e:	60fb      	str	r3, [r7, #12]
 8024270:	e03d      	b.n	80242ee <itsdk_stimer_nextTimeoutMs+0x9e>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs >= t ) {
 8024272:	492c      	ldr	r1, [pc, #176]	; (8024324 <itsdk_stimer_nextTimeoutMs+0xd4>)
 8024274:	68fa      	ldr	r2, [r7, #12]
 8024276:	0013      	movs	r3, r2
 8024278:	005b      	lsls	r3, r3, #1
 802427a:	189b      	adds	r3, r3, r2
 802427c:	00db      	lsls	r3, r3, #3
 802427e:	5c5b      	ldrb	r3, [r3, r1]
 8024280:	2b00      	cmp	r3, #0
 8024282:	d031      	beq.n	80242e8 <itsdk_stimer_nextTimeoutMs+0x98>
 8024284:	4927      	ldr	r1, [pc, #156]	; (8024324 <itsdk_stimer_nextTimeoutMs+0xd4>)
 8024286:	68fa      	ldr	r2, [r7, #12]
 8024288:	0013      	movs	r3, r2
 802428a:	005b      	lsls	r3, r3, #1
 802428c:	189b      	adds	r3, r3, r2
 802428e:	00db      	lsls	r3, r3, #3
 8024290:	18cb      	adds	r3, r1, r3
 8024292:	3308      	adds	r3, #8
 8024294:	685c      	ldr	r4, [r3, #4]
 8024296:	681b      	ldr	r3, [r3, #0]
 8024298:	687a      	ldr	r2, [r7, #4]
 802429a:	42a2      	cmp	r2, r4
 802429c:	d824      	bhi.n	80242e8 <itsdk_stimer_nextTimeoutMs+0x98>
 802429e:	687a      	ldr	r2, [r7, #4]
 80242a0:	42a2      	cmp	r2, r4
 80242a2:	d102      	bne.n	80242aa <itsdk_stimer_nextTimeoutMs+0x5a>
 80242a4:	683a      	ldr	r2, [r7, #0]
 80242a6:	429a      	cmp	r2, r3
 80242a8:	d81e      	bhi.n	80242e8 <itsdk_stimer_nextTimeoutMs+0x98>
			if ( __stimer_slots[i].timeoutMs < min ) min = __stimer_slots[i].timeoutMs;
 80242aa:	491e      	ldr	r1, [pc, #120]	; (8024324 <itsdk_stimer_nextTimeoutMs+0xd4>)
 80242ac:	68fa      	ldr	r2, [r7, #12]
 80242ae:	0013      	movs	r3, r2
 80242b0:	005b      	lsls	r3, r3, #1
 80242b2:	189b      	adds	r3, r3, r2
 80242b4:	00db      	lsls	r3, r3, #3
 80242b6:	18cb      	adds	r3, r1, r3
 80242b8:	3308      	adds	r3, #8
 80242ba:	685c      	ldr	r4, [r3, #4]
 80242bc:	681b      	ldr	r3, [r3, #0]
 80242be:	697a      	ldr	r2, [r7, #20]
 80242c0:	42a2      	cmp	r2, r4
 80242c2:	d805      	bhi.n	80242d0 <itsdk_stimer_nextTimeoutMs+0x80>
 80242c4:	697a      	ldr	r2, [r7, #20]
 80242c6:	42a2      	cmp	r2, r4
 80242c8:	d10e      	bne.n	80242e8 <itsdk_stimer_nextTimeoutMs+0x98>
 80242ca:	693a      	ldr	r2, [r7, #16]
 80242cc:	429a      	cmp	r2, r3
 80242ce:	d90b      	bls.n	80242e8 <itsdk_stimer_nextTimeoutMs+0x98>
 80242d0:	4914      	ldr	r1, [pc, #80]	; (8024324 <itsdk_stimer_nextTimeoutMs+0xd4>)
 80242d2:	68fa      	ldr	r2, [r7, #12]
 80242d4:	0013      	movs	r3, r2
 80242d6:	005b      	lsls	r3, r3, #1
 80242d8:	189b      	adds	r3, r3, r2
 80242da:	00db      	lsls	r3, r3, #3
 80242dc:	18cb      	adds	r3, r1, r3
 80242de:	3308      	adds	r3, #8
 80242e0:	685c      	ldr	r4, [r3, #4]
 80242e2:	681b      	ldr	r3, [r3, #0]
 80242e4:	613b      	str	r3, [r7, #16]
 80242e6:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 80242e8:	68fb      	ldr	r3, [r7, #12]
 80242ea:	3301      	adds	r3, #1
 80242ec:	60fb      	str	r3, [r7, #12]
 80242ee:	68fb      	ldr	r3, [r7, #12]
 80242f0:	2b04      	cmp	r3, #4
 80242f2:	ddbe      	ble.n	8024272 <itsdk_stimer_nextTimeoutMs+0x22>
		}
	}
	if ( min < __INFINITE_64B ) {
 80242f4:	693b      	ldr	r3, [r7, #16]
 80242f6:	3301      	adds	r3, #1
 80242f8:	d102      	bne.n	8024300 <itsdk_stimer_nextTimeoutMs+0xb0>
 80242fa:	697b      	ldr	r3, [r7, #20]
 80242fc:	3301      	adds	r3, #1
 80242fe:	d00b      	beq.n	8024318 <itsdk_stimer_nextTimeoutMs+0xc8>
		min = min - t;
 8024300:	6939      	ldr	r1, [r7, #16]
 8024302:	697a      	ldr	r2, [r7, #20]
 8024304:	683b      	ldr	r3, [r7, #0]
 8024306:	687c      	ldr	r4, [r7, #4]
 8024308:	1ac9      	subs	r1, r1, r3
 802430a:	41a2      	sbcs	r2, r4
 802430c:	000b      	movs	r3, r1
 802430e:	0014      	movs	r4, r2
 8024310:	613b      	str	r3, [r7, #16]
 8024312:	617c      	str	r4, [r7, #20]
		return min;
 8024314:	693b      	ldr	r3, [r7, #16]
 8024316:	e001      	b.n	802431c <itsdk_stimer_nextTimeoutMs+0xcc>
	}
	return __INFINITE_32B;
 8024318:	2301      	movs	r3, #1
 802431a:	425b      	negs	r3, r3
}
 802431c:	0018      	movs	r0, r3
 802431e:	46bd      	mov	sp, r7
 8024320:	b007      	add	sp, #28
 8024322:	bd90      	pop	{r4, r7, pc}
 8024324:	20001da0 	.word	0x20001da0

08024328 <__getAdcValue>:
#if ITSDK_ADC_OPTIMIZE_SIZE == __ENABLE

/**
 * Read adc
 */
uint32_t __getAdcValue(uint32_t channel, uint8_t oversampling) {
 8024328:	b580      	push	{r7, lr}
 802432a:	b084      	sub	sp, #16
 802432c:	af00      	add	r7, sp, #0
 802432e:	6078      	str	r0, [r7, #4]
 8024330:	000a      	movs	r2, r1
 8024332:	1cfb      	adds	r3, r7, #3
 8024334:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8024336:	b672      	cpsid	i
  uint32_t i;

  __disable_irq();

  // ADC RESET
  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;		// enable ADC clock
 8024338:	4b73      	ldr	r3, [pc, #460]	; (8024508 <__getAdcValue+0x1e0>)
 802433a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802433c:	4b72      	ldr	r3, [pc, #456]	; (8024508 <__getAdcValue+0x1e0>)
 802433e:	2180      	movs	r1, #128	; 0x80
 8024340:	0089      	lsls	r1, r1, #2
 8024342:	430a      	orrs	r2, r1
 8024344:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("nop");
 8024346:	46c0      	nop			; (mov r8, r8)
 8024348:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 802434a:	4b6f      	ldr	r3, [pc, #444]	; (8024508 <__getAdcValue+0x1e0>)
 802434c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802434e:	4b6e      	ldr	r3, [pc, #440]	; (8024508 <__getAdcValue+0x1e0>)
 8024350:	2180      	movs	r1, #128	; 0x80
 8024352:	0089      	lsls	r1, r1, #2
 8024354:	430a      	orrs	r2, r1
 8024356:	625a      	str	r2, [r3, #36]	; 0x24
 8024358:	46c0      	nop			; (mov r8, r8)
 802435a:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 802435c:	4b6a      	ldr	r3, [pc, #424]	; (8024508 <__getAdcValue+0x1e0>)
 802435e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024360:	4b69      	ldr	r3, [pc, #420]	; (8024508 <__getAdcValue+0x1e0>)
 8024362:	496a      	ldr	r1, [pc, #424]	; (802450c <__getAdcValue+0x1e4>)
 8024364:	400a      	ands	r2, r1
 8024366:	625a      	str	r2, [r3, #36]	; 0x24
 8024368:	46c0      	nop			; (mov r8, r8)
 802436a:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // Enable some basic parts
  ADC1->IER = 0;						// do not allow any interrupts
 802436c:	4b68      	ldr	r3, [pc, #416]	; (8024510 <__getAdcValue+0x1e8>)
 802436e:	2200      	movs	r2, #0
 8024370:	605a      	str	r2, [r3, #4]
  ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;		// select HSI16 clock
 8024372:	4b67      	ldr	r3, [pc, #412]	; (8024510 <__getAdcValue+0x1e8>)
 8024374:	691a      	ldr	r2, [r3, #16]
 8024376:	4b66      	ldr	r3, [pc, #408]	; (8024510 <__getAdcValue+0x1e8>)
 8024378:	0092      	lsls	r2, r2, #2
 802437a:	0892      	lsrs	r2, r2, #2
 802437c:	611a      	str	r2, [r3, #16]

  ADC1->CR |= ADC_CR_ADVREGEN;			// enable ADC voltage regulator, probably not required, because this is automatically activated
 802437e:	4b64      	ldr	r3, [pc, #400]	; (8024510 <__getAdcValue+0x1e8>)
 8024380:	689a      	ldr	r2, [r3, #8]
 8024382:	4b63      	ldr	r3, [pc, #396]	; (8024510 <__getAdcValue+0x1e8>)
 8024384:	2180      	movs	r1, #128	; 0x80
 8024386:	0549      	lsls	r1, r1, #21
 8024388:	430a      	orrs	r2, r1
 802438a:	609a      	str	r2, [r3, #8]
  ADC->CCR |= ADC_CCR_VREFEN; 			// Wake-up the VREFINT
 802438c:	4b61      	ldr	r3, [pc, #388]	; (8024514 <__getAdcValue+0x1ec>)
 802438e:	681a      	ldr	r2, [r3, #0]
 8024390:	4b60      	ldr	r3, [pc, #384]	; (8024514 <__getAdcValue+0x1ec>)
 8024392:	2180      	movs	r1, #128	; 0x80
 8024394:	03c9      	lsls	r1, r1, #15
 8024396:	430a      	orrs	r2, r1
 8024398:	601a      	str	r2, [r3, #0]
  ADC->CCR |= ADC_CCR_TSEN; 			// Wake-up the temperature sensor
 802439a:	4b5e      	ldr	r3, [pc, #376]	; (8024514 <__getAdcValue+0x1ec>)
 802439c:	681a      	ldr	r2, [r3, #0]
 802439e:	4b5d      	ldr	r3, [pc, #372]	; (8024514 <__getAdcValue+0x1ec>)
 80243a0:	2180      	movs	r1, #128	; 0x80
 80243a2:	0409      	lsls	r1, r1, #16
 80243a4:	430a      	orrs	r2, r1
 80243a6:	601a      	str	r2, [r3, #0]
 80243a8:	46c0      	nop			; (mov r8, r8)
 80243aa:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // CALIBRATION
  if ((ADC1->CR & ADC_CR_ADEN) != 0) {		// clear ADEN flag if required
 80243ac:	4b58      	ldr	r3, [pc, #352]	; (8024510 <__getAdcValue+0x1e8>)
 80243ae:	689b      	ldr	r3, [r3, #8]
 80243b0:	2201      	movs	r2, #1
 80243b2:	4013      	ands	r3, r2
 80243b4:	d005      	beq.n	80243c2 <__getAdcValue+0x9a>
    ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);
 80243b6:	4b56      	ldr	r3, [pc, #344]	; (8024510 <__getAdcValue+0x1e8>)
 80243b8:	689a      	ldr	r2, [r3, #8]
 80243ba:	4b55      	ldr	r3, [pc, #340]	; (8024510 <__getAdcValue+0x1e8>)
 80243bc:	2101      	movs	r1, #1
 80243be:	438a      	bics	r2, r1
 80243c0:	609a      	str	r2, [r3, #8]
  }
  ADC1->CR |= ADC_CR_ADCAL; 				// start calibration
 80243c2:	4b53      	ldr	r3, [pc, #332]	; (8024510 <__getAdcValue+0x1e8>)
 80243c4:	689a      	ldr	r2, [r3, #8]
 80243c6:	4b52      	ldr	r3, [pc, #328]	; (8024510 <__getAdcValue+0x1e8>)
 80243c8:	2180      	movs	r1, #128	; 0x80
 80243ca:	0609      	lsls	r1, r1, #24
 80243cc:	430a      	orrs	r2, r1
 80243ce:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_EOCAL) == 0);	// wait for calibration finished
 80243d0:	46c0      	nop			; (mov r8, r8)
 80243d2:	4b4f      	ldr	r3, [pc, #316]	; (8024510 <__getAdcValue+0x1e8>)
 80243d4:	681a      	ldr	r2, [r3, #0]
 80243d6:	2380      	movs	r3, #128	; 0x80
 80243d8:	011b      	lsls	r3, r3, #4
 80243da:	4013      	ands	r3, r2
 80243dc:	d0f9      	beq.n	80243d2 <__getAdcValue+0xaa>
  ADC1->ISR |= ADC_ISR_EOCAL; 				// clear the status flag, by writing 1 to it
 80243de:	4b4c      	ldr	r3, [pc, #304]	; (8024510 <__getAdcValue+0x1e8>)
 80243e0:	681a      	ldr	r2, [r3, #0]
 80243e2:	4b4b      	ldr	r3, [pc, #300]	; (8024510 <__getAdcValue+0x1e8>)
 80243e4:	2180      	movs	r1, #128	; 0x80
 80243e6:	0109      	lsls	r1, r1, #4
 80243e8:	430a      	orrs	r2, r1
 80243ea:	601a      	str	r2, [r3, #0]
 80243ec:	46c0      	nop			; (mov r8, r8)
 80243ee:	46c0      	nop			; (mov r8, r8)
 80243f0:	46c0      	nop			; (mov r8, r8)
 80243f2:	46c0      	nop			; (mov r8, r8)
 80243f4:	46c0      	nop			; (mov r8, r8)
 80243f6:	46c0      	nop			; (mov r8, r8)
 80243f8:	46c0      	nop			; (mov r8, r8)
 80243fa:	46c0      	nop			; (mov r8, r8)
 80243fc:	46c0      	nop			; (mov r8, r8)
 80243fe:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // ENABLE ADC
  ADC1->ISR |= ADC_ISR_ADRDY; 					// clear ready flag
 8024400:	4b43      	ldr	r3, [pc, #268]	; (8024510 <__getAdcValue+0x1e8>)
 8024402:	681a      	ldr	r2, [r3, #0]
 8024404:	4b42      	ldr	r3, [pc, #264]	; (8024510 <__getAdcValue+0x1e8>)
 8024406:	2101      	movs	r1, #1
 8024408:	430a      	orrs	r2, r1
 802440a:	601a      	str	r2, [r3, #0]
  ADC1->CR |= ADC_CR_ADEN; 						// enable ADC
 802440c:	4b40      	ldr	r3, [pc, #256]	; (8024510 <__getAdcValue+0x1e8>)
 802440e:	689a      	ldr	r2, [r3, #8]
 8024410:	4b3f      	ldr	r3, [pc, #252]	; (8024510 <__getAdcValue+0x1e8>)
 8024412:	2101      	movs	r1, #1
 8024414:	430a      	orrs	r2, r1
 8024416:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);		// wait for ADC
 8024418:	46c0      	nop			; (mov r8, r8)
 802441a:	4b3d      	ldr	r3, [pc, #244]	; (8024510 <__getAdcValue+0x1e8>)
 802441c:	681b      	ldr	r3, [r3, #0]
 802441e:	2201      	movs	r2, #1
 8024420:	4013      	ands	r3, r2
 8024422:	d0fa      	beq.n	802441a <__getAdcValue+0xf2>


  // CONFIGURE ADC
  ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN;				// software enabled conversion start
 8024424:	4b3a      	ldr	r3, [pc, #232]	; (8024510 <__getAdcValue+0x1e8>)
 8024426:	68da      	ldr	r2, [r3, #12]
 8024428:	4b39      	ldr	r3, [pc, #228]	; (8024510 <__getAdcValue+0x1e8>)
 802442a:	493b      	ldr	r1, [pc, #236]	; (8024518 <__getAdcValue+0x1f0>)
 802442c:	400a      	ands	r2, r1
 802442e:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;				// right alignment
 8024430:	4b37      	ldr	r3, [pc, #220]	; (8024510 <__getAdcValue+0x1e8>)
 8024432:	68da      	ldr	r2, [r3, #12]
 8024434:	4b36      	ldr	r3, [pc, #216]	; (8024510 <__getAdcValue+0x1e8>)
 8024436:	2120      	movs	r1, #32
 8024438:	438a      	bics	r2, r1
 802443a:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_RES;				// 12 bit resolution
 802443c:	4b34      	ldr	r3, [pc, #208]	; (8024510 <__getAdcValue+0x1e8>)
 802443e:	68da      	ldr	r2, [r3, #12]
 8024440:	4b33      	ldr	r3, [pc, #204]	; (8024510 <__getAdcValue+0x1e8>)
 8024442:	2118      	movs	r1, #24
 8024444:	438a      	bics	r2, r1
 8024446:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = channel & ADC_CHANNEL_MASK; 	// Select channel (1 << channel number)
 8024448:	4b31      	ldr	r3, [pc, #196]	; (8024510 <__getAdcValue+0x1e8>)
 802444a:	687a      	ldr	r2, [r7, #4]
 802444c:	0352      	lsls	r2, r2, #13
 802444e:	0b52      	lsrs	r2, r2, #13
 8024450:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
 8024452:	4b2f      	ldr	r3, [pc, #188]	; (8024510 <__getAdcValue+0x1e8>)
 8024454:	695a      	ldr	r2, [r3, #20]
 8024456:	4b2e      	ldr	r3, [pc, #184]	; (8024510 <__getAdcValue+0x1e8>)
 8024458:	2107      	movs	r1, #7
 802445a:	430a      	orrs	r2, r1
 802445c:	615a      	str	r2, [r3, #20]
  	  	  	  	  	  	  	  	  	  	  	  	// Select a sampling mode of 111 (very slow)

  // DO MUTIPLE READ & AVERAGE
  data = 0;
 802445e:	2300      	movs	r3, #0
 8024460:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 8024462:	2300      	movs	r3, #0
 8024464:	60bb      	str	r3, [r7, #8]
 8024466:	e013      	b.n	8024490 <__getAdcValue+0x168>
  {
    ADC1->CR |= ADC_CR_ADSTART; 				// start the ADC conversion
 8024468:	4b29      	ldr	r3, [pc, #164]	; (8024510 <__getAdcValue+0x1e8>)
 802446a:	689a      	ldr	r2, [r3, #8]
 802446c:	4b28      	ldr	r3, [pc, #160]	; (8024510 <__getAdcValue+0x1e8>)
 802446e:	2104      	movs	r1, #4
 8024470:	430a      	orrs	r2, r1
 8024472:	609a      	str	r2, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0); 	// wait end of conversion
 8024474:	46c0      	nop			; (mov r8, r8)
 8024476:	4b26      	ldr	r3, [pc, #152]	; (8024510 <__getAdcValue+0x1e8>)
 8024478:	681b      	ldr	r3, [r3, #0]
 802447a:	2204      	movs	r2, #4
 802447c:	4013      	ands	r3, r2
 802447e:	d0fa      	beq.n	8024476 <__getAdcValue+0x14e>
    data += ADC1->DR;							// get ADC result and clear the ISR_EOC flag
 8024480:	4b23      	ldr	r3, [pc, #140]	; (8024510 <__getAdcValue+0x1e8>)
 8024482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024484:	68fa      	ldr	r2, [r7, #12]
 8024486:	18d3      	adds	r3, r2, r3
 8024488:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 802448a:	68bb      	ldr	r3, [r7, #8]
 802448c:	3301      	adds	r3, #1
 802448e:	60bb      	str	r3, [r7, #8]
 8024490:	1cfb      	adds	r3, r7, #3
 8024492:	781b      	ldrb	r3, [r3, #0]
 8024494:	68ba      	ldr	r2, [r7, #8]
 8024496:	429a      	cmp	r2, r3
 8024498:	d3e6      	bcc.n	8024468 <__getAdcValue+0x140>
  }
  data = data / oversampling;
 802449a:	1cfb      	adds	r3, r7, #3
 802449c:	781b      	ldrb	r3, [r3, #0]
 802449e:	0019      	movs	r1, r3
 80244a0:	68f8      	ldr	r0, [r7, #12]
 80244a2:	f7db fe39 	bl	8000118 <__udivsi3>
 80244a6:	0003      	movs	r3, r0
 80244a8:	60fb      	str	r3, [r7, #12]

  // DISABLE ADC
  // at this point the end of sampling and end of sequence bits are also set in ISR registr
  if ( (ADC1->CR & ADC_CR_ADEN) != 0 )
 80244aa:	4b19      	ldr	r3, [pc, #100]	; (8024510 <__getAdcValue+0x1e8>)
 80244ac:	689b      	ldr	r3, [r3, #8]
 80244ae:	2201      	movs	r2, #1
 80244b0:	4013      	ands	r3, r2
 80244b2:	d00b      	beq.n	80244cc <__getAdcValue+0x1a4>
  {
    ADC1->CR |= ADC_CR_ADDIS; 					// disable ADC... maybe better execute a reset
 80244b4:	4b16      	ldr	r3, [pc, #88]	; (8024510 <__getAdcValue+0x1e8>)
 80244b6:	689a      	ldr	r2, [r3, #8]
 80244b8:	4b15      	ldr	r3, [pc, #84]	; (8024510 <__getAdcValue+0x1e8>)
 80244ba:	2102      	movs	r1, #2
 80244bc:	430a      	orrs	r2, r1
 80244be:	609a      	str	r2, [r3, #8]
    while ((ADC1->CR & ADC_CR_ADEN) != 0); 		// wait for ADC disable, ADEN is also cleared
 80244c0:	46c0      	nop			; (mov r8, r8)
 80244c2:	4b13      	ldr	r3, [pc, #76]	; (8024510 <__getAdcValue+0x1e8>)
 80244c4:	689b      	ldr	r3, [r3, #8]
 80244c6:	2201      	movs	r2, #1
 80244c8:	4013      	ands	r3, r2
 80244ca:	d1fa      	bne.n	80244c2 <__getAdcValue+0x19a>
  }

  // DISABLE OTHER PARTS, INCLUDING CLOCK
  ADC->CCR &= ~ADC_CCR_VREFEN; 					// disable VREFINT
 80244cc:	4b11      	ldr	r3, [pc, #68]	; (8024514 <__getAdcValue+0x1ec>)
 80244ce:	681a      	ldr	r2, [r3, #0]
 80244d0:	4b10      	ldr	r3, [pc, #64]	; (8024514 <__getAdcValue+0x1ec>)
 80244d2:	4912      	ldr	r1, [pc, #72]	; (802451c <__getAdcValue+0x1f4>)
 80244d4:	400a      	ands	r2, r1
 80244d6:	601a      	str	r2, [r3, #0]
  ADC->CCR &= ~ADC_CCR_TSEN; 					// disable temperature sensor
 80244d8:	4b0e      	ldr	r3, [pc, #56]	; (8024514 <__getAdcValue+0x1ec>)
 80244da:	681a      	ldr	r2, [r3, #0]
 80244dc:	4b0d      	ldr	r3, [pc, #52]	; (8024514 <__getAdcValue+0x1ec>)
 80244de:	4910      	ldr	r1, [pc, #64]	; (8024520 <__getAdcValue+0x1f8>)
 80244e0:	400a      	ands	r2, r1
 80244e2:	601a      	str	r2, [r3, #0]
  ADC1->CR &= ~ADC_CR_ADVREGEN;					// disable ADC voltage regulator
 80244e4:	4b0a      	ldr	r3, [pc, #40]	; (8024510 <__getAdcValue+0x1e8>)
 80244e6:	689a      	ldr	r2, [r3, #8]
 80244e8:	4b09      	ldr	r3, [pc, #36]	; (8024510 <__getAdcValue+0x1e8>)
 80244ea:	490e      	ldr	r1, [pc, #56]	; (8024524 <__getAdcValue+0x1fc>)
 80244ec:	400a      	ands	r2, r1
 80244ee:	609a      	str	r2, [r3, #8]
  RCC->APB2ENR &= ~RCC_APB2ENR_ADCEN;			// disable ADC clock
 80244f0:	4b05      	ldr	r3, [pc, #20]	; (8024508 <__getAdcValue+0x1e0>)
 80244f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80244f4:	4b04      	ldr	r3, [pc, #16]	; (8024508 <__getAdcValue+0x1e0>)
 80244f6:	4905      	ldr	r1, [pc, #20]	; (802450c <__getAdcValue+0x1e4>)
 80244f8:	400a      	ands	r2, r1
 80244fa:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 80244fc:	b662      	cpsie	i

  __enable_irq();
  return data;
 80244fe:	68fb      	ldr	r3, [r7, #12]
}
 8024500:	0018      	movs	r0, r3
 8024502:	46bd      	mov	sp, r7
 8024504:	b004      	add	sp, #16
 8024506:	bd80      	pop	{r7, pc}
 8024508:	40021000 	.word	0x40021000
 802450c:	fffffdff 	.word	0xfffffdff
 8024510:	40012400 	.word	0x40012400
 8024514:	40012708 	.word	0x40012708
 8024518:	fffff3ff 	.word	0xfffff3ff
 802451c:	ffbfffff 	.word	0xffbfffff
 8024520:	ff7fffff 	.word	0xff7fffff
 8024524:	efffffff 	.word	0xefffffff

08024528 <adc_getTemperature>:
/**
 * Return temperature from Adc the temp is in centi-degrés Celcius
 * Ensure to read Temperature at least 8ms after wake up ...
 * Time to get accurate getVdd response
 */
int16_t adc_getTemperature() {
 8024528:	b5b0      	push	{r4, r5, r7, lr}
 802452a:	b084      	sub	sp, #16
 802452c:	af00      	add	r7, sp, #0

	uint16_t vdd = adc_getVdd();
 802452e:	240e      	movs	r4, #14
 8024530:	0025      	movs	r5, r4
 8024532:	193c      	adds	r4, r7, r4
 8024534:	f000 f850 	bl	80245d8 <adc_getVdd>
 8024538:	0003      	movs	r3, r0
 802453a:	8023      	strh	r3, [r4, #0]
	uint32_t v = __getAdcValue(ADC_CHANNEL_TEMPSENSOR,ITSDK_ADC_OVERSAMPLING);
 802453c:	4b21      	ldr	r3, [pc, #132]	; (80245c4 <adc_getTemperature+0x9c>)
 802453e:	2110      	movs	r1, #16
 8024540:	0018      	movs	r0, r3
 8024542:	f7ff fef1 	bl	8024328 <__getAdcValue>
 8024546:	0003      	movs	r3, r0
 8024548:	60bb      	str	r3, [r7, #8]

	// adapt the calibration values to the current VDD reference
	uint16_t cal1_vdd = (*CAL1_VALUE * VDD_CALIB) / vdd;
 802454a:	4b1f      	ldr	r3, [pc, #124]	; (80245c8 <adc_getTemperature+0xa0>)
 802454c:	881b      	ldrh	r3, [r3, #0]
 802454e:	001a      	movs	r2, r3
 8024550:	4b1e      	ldr	r3, [pc, #120]	; (80245cc <adc_getTemperature+0xa4>)
 8024552:	435a      	muls	r2, r3
 8024554:	002c      	movs	r4, r5
 8024556:	193b      	adds	r3, r7, r4
 8024558:	881b      	ldrh	r3, [r3, #0]
 802455a:	0019      	movs	r1, r3
 802455c:	0010      	movs	r0, r2
 802455e:	f7db fe65 	bl	800022c <__divsi3>
 8024562:	0003      	movs	r3, r0
 8024564:	001a      	movs	r2, r3
 8024566:	1dbb      	adds	r3, r7, #6
 8024568:	801a      	strh	r2, [r3, #0]
	uint16_t cal2_vdd = (*CAL2_VALUE * VDD_CALIB) / vdd;
 802456a:	4b19      	ldr	r3, [pc, #100]	; (80245d0 <adc_getTemperature+0xa8>)
 802456c:	881b      	ldrh	r3, [r3, #0]
 802456e:	001a      	movs	r2, r3
 8024570:	4b16      	ldr	r3, [pc, #88]	; (80245cc <adc_getTemperature+0xa4>)
 8024572:	435a      	muls	r2, r3
 8024574:	193b      	adds	r3, r7, r4
 8024576:	881b      	ldrh	r3, [r3, #0]
 8024578:	0019      	movs	r1, r3
 802457a:	0010      	movs	r0, r2
 802457c:	f7db fe56 	bl	800022c <__divsi3>
 8024580:	0003      	movs	r3, r0
 8024582:	001a      	movs	r2, r3
 8024584:	1d3b      	adds	r3, r7, #4
 8024586:	801a      	strh	r2, [r3, #0]

	// convert in 0.01�C according to the calibration ref
	int32_t temperature = 100 * (CAL2_TEMP - CAL1_TEMP)*(v - cal1_vdd);
 8024588:	1dbb      	adds	r3, r7, #6
 802458a:	881b      	ldrh	r3, [r3, #0]
 802458c:	68ba      	ldr	r2, [r7, #8]
 802458e:	1ad3      	subs	r3, r2, r3
 8024590:	4a10      	ldr	r2, [pc, #64]	; (80245d4 <adc_getTemperature+0xac>)
 8024592:	4353      	muls	r3, r2
 8024594:	603b      	str	r3, [r7, #0]
	temperature /= (cal2_vdd - cal1_vdd);
 8024596:	1d3b      	adds	r3, r7, #4
 8024598:	881a      	ldrh	r2, [r3, #0]
 802459a:	1dbb      	adds	r3, r7, #6
 802459c:	881b      	ldrh	r3, [r3, #0]
 802459e:	1ad3      	subs	r3, r2, r3
 80245a0:	0019      	movs	r1, r3
 80245a2:	6838      	ldr	r0, [r7, #0]
 80245a4:	f7db fe42 	bl	800022c <__divsi3>
 80245a8:	0003      	movs	r3, r0
 80245aa:	603b      	str	r3, [r7, #0]
    temperature = temperature + (100*CAL1_TEMP);
 80245ac:	683b      	ldr	r3, [r7, #0]
 80245ae:	4a07      	ldr	r2, [pc, #28]	; (80245cc <adc_getTemperature+0xa4>)
 80245b0:	4694      	mov	ip, r2
 80245b2:	4463      	add	r3, ip
 80245b4:	603b      	str	r3, [r7, #0]
    return (int16_t)temperature;
 80245b6:	683b      	ldr	r3, [r7, #0]
 80245b8:	b21b      	sxth	r3, r3

}
 80245ba:	0018      	movs	r0, r3
 80245bc:	46bd      	mov	sp, r7
 80245be:	b004      	add	sp, #16
 80245c0:	bdb0      	pop	{r4, r5, r7, pc}
 80245c2:	46c0      	nop			; (mov r8, r8)
 80245c4:	48040000 	.word	0x48040000
 80245c8:	1ff8007a 	.word	0x1ff8007a
 80245cc:	00000bb8 	.word	0x00000bb8
 80245d0:	1ff8007e 	.word	0x1ff8007e
 80245d4:	00002710 	.word	0x00002710

080245d8 <adc_getVdd>:
 * Return VDD in mV ( internal VDD )
 * Be Careful -> right after wakeup from STOP the
 * value can be invalid (200mv error). The solution is to
 * sleep a bit (8ms recommanded) before sampling Vdd
 */
uint16_t adc_getVdd() {
 80245d8:	b590      	push	{r4, r7, lr}
 80245da:	b083      	sub	sp, #12
 80245dc:	af00      	add	r7, sp, #0
	// The value measured is not good until we wait about 8ms after MCU wakeup from stop
	uint64_t t = ( itsdk_time_get_us() - itsdk_state.lastWakeUpTimeUs) / 1000;
 80245de:	f7ff fca3 	bl	8023f28 <itsdk_time_get_us>
 80245e2:	000a      	movs	r2, r1
 80245e4:	0001      	movs	r1, r0
 80245e6:	4b13      	ldr	r3, [pc, #76]	; (8024634 <adc_getVdd+0x5c>)
 80245e8:	68dc      	ldr	r4, [r3, #12]
 80245ea:	689b      	ldr	r3, [r3, #8]
 80245ec:	1ac9      	subs	r1, r1, r3
 80245ee:	41a2      	sbcs	r2, r4
 80245f0:	0008      	movs	r0, r1
 80245f2:	0011      	movs	r1, r2
 80245f4:	22fa      	movs	r2, #250	; 0xfa
 80245f6:	0092      	lsls	r2, r2, #2
 80245f8:	2300      	movs	r3, #0
 80245fa:	f7db ff9f 	bl	800053c <__aeabi_uldivmod>
 80245fe:	0003      	movs	r3, r0
 8024600:	000c      	movs	r4, r1
 8024602:	603b      	str	r3, [r7, #0]
 8024604:	607c      	str	r4, [r7, #4]
	if ( t < 8 ) {
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	2b00      	cmp	r3, #0
 802460a:	d10b      	bne.n	8024624 <adc_getVdd+0x4c>
 802460c:	687b      	ldr	r3, [r7, #4]
 802460e:	2b00      	cmp	r3, #0
 8024610:	d102      	bne.n	8024618 <adc_getVdd+0x40>
 8024612:	683b      	ldr	r3, [r7, #0]
 8024614:	2b07      	cmp	r3, #7
 8024616:	d805      	bhi.n	8024624 <adc_getVdd+0x4c>
		itsdk_delayMs(8 - t);
 8024618:	683b      	ldr	r3, [r7, #0]
 802461a:	2208      	movs	r2, #8
 802461c:	1ad3      	subs	r3, r2, r3
 802461e:	0018      	movs	r0, r3
 8024620:	f000 fd1a 	bl	8025058 <itsdk_delayMs>
	}
	return adc_getValue(0);
 8024624:	2000      	movs	r0, #0
 8024626:	f000 f813 	bl	8024650 <adc_getValue>
 802462a:	0003      	movs	r3, r0
}
 802462c:	0018      	movs	r0, r3
 802462e:	46bd      	mov	sp, r7
 8024630:	b003      	add	sp, #12
 8024632:	bd90      	pop	{r4, r7, pc}
 8024634:	20002208 	.word	0x20002208

08024638 <adc_getVBat>:

/**
 * Return VBAT in mV - external VDD when a VBAT pin has been configured with a voltage divider by 2
 * Assuming VBAT have a /2 in front of the ADC
 */
uint16_t adc_getVBat() {
 8024638:	b580      	push	{r7, lr}
 802463a:	af00      	add	r7, sp, #0
#if ITSDK_VBAT_ADC_PIN >= 0
	return adc_getValue(ITSDK_VBAT_ADC_PIN)*2;
 802463c:	2041      	movs	r0, #65	; 0x41
 802463e:	f000 f807 	bl	8024650 <adc_getValue>
 8024642:	0003      	movs	r3, r0
 8024644:	18db      	adds	r3, r3, r3
 8024646:	b29b      	uxth	r3, r3
#else
	return adc_getVdd();
#endif
}
 8024648:	0018      	movs	r0, r3
 802464a:	46bd      	mov	sp, r7
 802464c:	bd80      	pop	{r7, pc}
	...

08024650 <adc_getValue>:
/**
 * Return ADC Value for an external PIN or internal
 * Get the pin number (hardware one)...
 * Pin 0 = internal VDD
 */
uint16_t adc_getValue(uint32_t pin) {
 8024650:	b580      	push	{r7, lr}
 8024652:	b08c      	sub	sp, #48	; 0x30
 8024654:	af00      	add	r7, sp, #0
 8024656:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_TypeDef  	* GPIO_TypeDefStruct = GPIOA;
 8024658:	23a0      	movs	r3, #160	; 0xa0
 802465a:	05db      	lsls	r3, r3, #23
 802465c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802465e:	2108      	movs	r1, #8
 8024660:	187b      	adds	r3, r7, r1
 8024662:	2203      	movs	r2, #3
 8024664:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024666:	187b      	adds	r3, r7, r1
 8024668:	2200      	movs	r2, #0
 802466a:	609a      	str	r2, [r3, #8]
	uint32_t channel = 0;
 802466c:	2300      	movs	r3, #0
 802466e:	62bb      	str	r3, [r7, #40]	; 0x28
	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#elif  ITSDK_DEVICE == __DEVICE_STM32L072XX
	// For the BGA device I consider the pin number as Line||Column 65 => line 6 Column 5
	switch (pin) {
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	2b4d      	cmp	r3, #77	; 0x4d
 8024674:	d900      	bls.n	8024678 <adc_getValue+0x28>
 8024676:	e085      	b.n	8024784 <adc_getValue+0x134>
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	009a      	lsls	r2, r3, #2
 802467c:	4b5f      	ldr	r3, [pc, #380]	; (80247fc <adc_getValue+0x1ac>)
 802467e:	18d3      	adds	r3, r2, r3
 8024680:	681b      	ldr	r3, [r3, #0]
 8024682:	469f      	mov	pc, r3
	case 0:
		channel = ADC_CHANNEL_VREFINT; 	// VDD
 8024684:	4b5e      	ldr	r3, [pc, #376]	; (8024800 <adc_getValue+0x1b0>)
 8024686:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024688:	e083      	b.n	8024792 <adc_getValue+0x142>
	case 55:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 802468a:	2308      	movs	r3, #8
 802468c:	18fb      	adds	r3, r7, r3
 802468e:	2201      	movs	r2, #1
 8024690:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8024692:	23a0      	movs	r3, #160	; 0xa0
 8024694:	05db      	lsls	r3, r3, #23
 8024696:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_0;	// PA0
 8024698:	2301      	movs	r3, #1
 802469a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 802469c:	e079      	b.n	8024792 <adc_getValue+0x142>
	case 54:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 802469e:	2308      	movs	r3, #8
 80246a0:	18fb      	adds	r3, r7, r3
 80246a2:	2202      	movs	r2, #2
 80246a4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246a6:	23a0      	movs	r3, #160	; 0xa0
 80246a8:	05db      	lsls	r3, r3, #23
 80246aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_1;	// PA1
 80246ac:	4b55      	ldr	r3, [pc, #340]	; (8024804 <adc_getValue+0x1b4>)
 80246ae:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80246b0:	e06f      	b.n	8024792 <adc_getValue+0x142>
	case 66:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 80246b2:	2308      	movs	r3, #8
 80246b4:	18fb      	adds	r3, r7, r3
 80246b6:	2204      	movs	r2, #4
 80246b8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246ba:	23a0      	movs	r3, #160	; 0xa0
 80246bc:	05db      	lsls	r3, r3, #23
 80246be:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_2;	// PA2
 80246c0:	4b51      	ldr	r3, [pc, #324]	; (8024808 <adc_getValue+0x1b8>)
 80246c2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80246c4:	e065      	b.n	8024792 <adc_getValue+0x142>
	case 77:
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80246c6:	2308      	movs	r3, #8
 80246c8:	18fb      	adds	r3, r7, r3
 80246ca:	2208      	movs	r2, #8
 80246cc:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246ce:	23a0      	movs	r3, #160	; 0xa0
 80246d0:	05db      	lsls	r3, r3, #23
 80246d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_3;	// PA3
 80246d4:	4b4d      	ldr	r3, [pc, #308]	; (802480c <adc_getValue+0x1bc>)
 80246d6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80246d8:	e05b      	b.n	8024792 <adc_getValue+0x142>
	case 65:
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 80246da:	2308      	movs	r3, #8
 80246dc:	18fb      	adds	r3, r7, r3
 80246de:	2210      	movs	r2, #16
 80246e0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246e2:	23a0      	movs	r3, #160	; 0xa0
 80246e4:	05db      	lsls	r3, r3, #23
 80246e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_4; 	// PA4
 80246e8:	4b49      	ldr	r3, [pc, #292]	; (8024810 <adc_getValue+0x1c0>)
 80246ea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80246ec:	e051      	b.n	8024792 <adc_getValue+0x142>
	case 76:
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80246ee:	2308      	movs	r3, #8
 80246f0:	18fb      	adds	r3, r7, r3
 80246f2:	2220      	movs	r2, #32
 80246f4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 80246f6:	23a0      	movs	r3, #160	; 0xa0
 80246f8:	05db      	lsls	r3, r3, #23
 80246fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_5;	// PA5
 80246fc:	4b45      	ldr	r3, [pc, #276]	; (8024814 <adc_getValue+0x1c4>)
 80246fe:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024700:	e047      	b.n	8024792 <adc_getValue+0x142>
	case 75:
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8024702:	2308      	movs	r3, #8
 8024704:	18fb      	adds	r3, r7, r3
 8024706:	2240      	movs	r2, #64	; 0x40
 8024708:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 802470a:	23a0      	movs	r3, #160	; 0xa0
 802470c:	05db      	lsls	r3, r3, #23
 802470e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_6;	// PA6
 8024710:	4b41      	ldr	r3, [pc, #260]	; (8024818 <adc_getValue+0x1c8>)
 8024712:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024714:	e03d      	b.n	8024792 <adc_getValue+0x142>
	case 64:
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8024716:	2308      	movs	r3, #8
 8024718:	18fb      	adds	r3, r7, r3
 802471a:	2280      	movs	r2, #128	; 0x80
 802471c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 802471e:	23a0      	movs	r3, #160	; 0xa0
 8024720:	05db      	lsls	r3, r3, #23
 8024722:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_7;	// PA7
 8024724:	4b3d      	ldr	r3, [pc, #244]	; (802481c <adc_getValue+0x1cc>)
 8024726:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024728:	e033      	b.n	8024792 <adc_getValue+0x142>
	case 74:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 802472a:	2308      	movs	r3, #8
 802472c:	18fb      	adds	r3, r7, r3
 802472e:	2201      	movs	r2, #1
 8024730:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 8024732:	4b3b      	ldr	r3, [pc, #236]	; (8024820 <adc_getValue+0x1d0>)
 8024734:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_8;	// PB0
 8024736:	4b3b      	ldr	r3, [pc, #236]	; (8024824 <adc_getValue+0x1d4>)
 8024738:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 802473a:	e02a      	b.n	8024792 <adc_getValue+0x142>
	case 43:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 802473c:	2308      	movs	r3, #8
 802473e:	18fb      	adds	r3, r7, r3
 8024740:	2202      	movs	r2, #2
 8024742:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 8024744:	4b36      	ldr	r3, [pc, #216]	; (8024820 <adc_getValue+0x1d0>)
 8024746:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_9;	// PB1
 8024748:	4b37      	ldr	r3, [pc, #220]	; (8024828 <adc_getValue+0x1d8>)
 802474a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 802474c:	e021      	b.n	8024792 <adc_getValue+0x142>
	case 35:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 802474e:	2308      	movs	r3, #8
 8024750:	18fb      	adds	r3, r7, r3
 8024752:	2201      	movs	r2, #1
 8024754:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 8024756:	4b35      	ldr	r3, [pc, #212]	; (802482c <adc_getValue+0x1dc>)
 8024758:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_10;	// PC0
 802475a:	4b35      	ldr	r3, [pc, #212]	; (8024830 <adc_getValue+0x1e0>)
 802475c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 802475e:	e018      	b.n	8024792 <adc_getValue+0x142>
	case 34:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8024760:	2308      	movs	r3, #8
 8024762:	18fb      	adds	r3, r7, r3
 8024764:	2202      	movs	r2, #2
 8024766:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 8024768:	4b30      	ldr	r3, [pc, #192]	; (802482c <adc_getValue+0x1dc>)
 802476a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_11;	// PC1
 802476c:	4b31      	ldr	r3, [pc, #196]	; (8024834 <adc_getValue+0x1e4>)
 802476e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024770:	e00f      	b.n	8024792 <adc_getValue+0x142>
	case 57:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8024772:	2308      	movs	r3, #8
 8024774:	18fb      	adds	r3, r7, r3
 8024776:	2204      	movs	r2, #4
 8024778:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 802477a:	4b2c      	ldr	r3, [pc, #176]	; (802482c <adc_getValue+0x1dc>)
 802477c:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_12;	// PC2
 802477e:	4b2e      	ldr	r3, [pc, #184]	; (8024838 <adc_getValue+0x1e8>)
 8024780:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8024782:	e006      	b.n	8024792 <adc_getValue+0x142>

	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
 8024784:	687b      	ldr	r3, [r7, #4]
 8024786:	b29b      	uxth	r3, r3
 8024788:	4a2c      	ldr	r2, [pc, #176]	; (802483c <adc_getValue+0x1ec>)
 802478a:	0019      	movs	r1, r3
 802478c:	0010      	movs	r0, r2
 802478e:	f7fe fb5b 	bl	8022e48 <itsdk_error_report>
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#else
	#error DEVICE NOT DEFINED
#endif
	if(pin!= 0) {
 8024792:	687b      	ldr	r3, [r7, #4]
 8024794:	2b00      	cmp	r3, #0
 8024796:	d006      	beq.n	80247a6 <adc_getValue+0x156>
		HAL_GPIO_Init(GPIO_TypeDefStruct, &GPIO_InitStruct);
 8024798:	2308      	movs	r3, #8
 802479a:	18fa      	adds	r2, r7, r3
 802479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802479e:	0011      	movs	r1, r2
 80247a0:	0018      	movs	r0, r3
 80247a2:	f7df fe5b 	bl	800445c <HAL_GPIO_Init>
	}

	uint32_t v = __getAdcValue(channel,ITSDK_ADC_OVERSAMPLING);
 80247a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80247a8:	2110      	movs	r1, #16
 80247aa:	0018      	movs	r0, r3
 80247ac:	f7ff fdbc 	bl	8024328 <__getAdcValue>
 80247b0:	0003      	movs	r3, r0
 80247b2:	627b      	str	r3, [r7, #36]	; 0x24
	if (pin == 0) {
 80247b4:	687b      	ldr	r3, [r7, #4]
 80247b6:	2b00      	cmp	r3, #0
 80247b8:	d112      	bne.n	80247e0 <adc_getValue+0x190>
		if ( v == 0 ) return 0; // securing
 80247ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247bc:	2b00      	cmp	r3, #0
 80247be:	d101      	bne.n	80247c4 <adc_getValue+0x174>
 80247c0:	2300      	movs	r3, #0
 80247c2:	e017      	b.n	80247f4 <adc_getValue+0x1a4>
   	    int32_t vdd = ((int32_t)(*VREFINT_CAL) * VDD_CALIB) / v;
 80247c4:	4b1e      	ldr	r3, [pc, #120]	; (8024840 <adc_getValue+0x1f0>)
 80247c6:	881b      	ldrh	r3, [r3, #0]
 80247c8:	001a      	movs	r2, r3
 80247ca:	4b1e      	ldr	r3, [pc, #120]	; (8024844 <adc_getValue+0x1f4>)
 80247cc:	4353      	muls	r3, r2
 80247ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80247d0:	0018      	movs	r0, r3
 80247d2:	f7db fca1 	bl	8000118 <__udivsi3>
 80247d6:	0003      	movs	r3, r0
 80247d8:	61fb      	str	r3, [r7, #28]
	    return (uint16_t)vdd;
 80247da:	69fb      	ldr	r3, [r7, #28]
 80247dc:	b29b      	uxth	r3, r3
 80247de:	e009      	b.n	80247f4 <adc_getValue+0x1a4>
	} else {
		int32_t vdd = ((uint32_t)adc_getVdd() * v )/4096;
 80247e0:	f7ff fefa 	bl	80245d8 <adc_getVdd>
 80247e4:	0003      	movs	r3, r0
 80247e6:	001a      	movs	r2, r3
 80247e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247ea:	4353      	muls	r3, r2
 80247ec:	0b1b      	lsrs	r3, r3, #12
 80247ee:	623b      	str	r3, [r7, #32]
	    return (uint16_t)vdd;
 80247f0:	6a3b      	ldr	r3, [r7, #32]
 80247f2:	b29b      	uxth	r3, r3
	}

}
 80247f4:	0018      	movs	r0, r3
 80247f6:	46bd      	mov	sp, r7
 80247f8:	b00c      	add	sp, #48	; 0x30
 80247fa:	bd80      	pop	{r7, pc}
 80247fc:	08029030 	.word	0x08029030
 8024800:	44020000 	.word	0x44020000
 8024804:	04000002 	.word	0x04000002
 8024808:	08000004 	.word	0x08000004
 802480c:	0c000008 	.word	0x0c000008
 8024810:	10000010 	.word	0x10000010
 8024814:	14000020 	.word	0x14000020
 8024818:	18000040 	.word	0x18000040
 802481c:	1c000080 	.word	0x1c000080
 8024820:	50000400 	.word	0x50000400
 8024824:	20000100 	.word	0x20000100
 8024828:	24000200 	.word	0x24000200
 802482c:	50000800 	.word	0x50000800
 8024830:	28000400 	.word	0x28000400
 8024834:	2c000800 	.word	0x2c000800
 8024838:	30001000 	.word	0x30001000
 802483c:	d0000008 	.word	0xd0000008
 8024840:	1ff80078 	.word	0x1ff80078
 8024844:	00000bb8 	.word	0x00000bb8

08024848 <getPortFromBankId>:
#endif

/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 8024848:	b580      	push	{r7, lr}
 802484a:	b082      	sub	sp, #8
 802484c:	af00      	add	r7, sp, #0
 802484e:	0002      	movs	r2, r0
 8024850:	1dfb      	adds	r3, r7, #7
 8024852:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 8024854:	1dfb      	adds	r3, r7, #7
 8024856:	781b      	ldrb	r3, [r3, #0]
 8024858:	2b07      	cmp	r3, #7
 802485a:	d811      	bhi.n	8024880 <getPortFromBankId+0x38>
 802485c:	009a      	lsls	r2, r3, #2
 802485e:	4b0f      	ldr	r3, [pc, #60]	; (802489c <getPortFromBankId+0x54>)
 8024860:	18d3      	adds	r3, r2, r3
 8024862:	681b      	ldr	r3, [r3, #0]
 8024864:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 8024866:	23a0      	movs	r3, #160	; 0xa0
 8024868:	05db      	lsls	r3, r3, #23
 802486a:	e012      	b.n	8024892 <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 802486c:	4b0c      	ldr	r3, [pc, #48]	; (80248a0 <getPortFromBankId+0x58>)
 802486e:	e010      	b.n	8024892 <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 8024870:	4b0c      	ldr	r3, [pc, #48]	; (80248a4 <getPortFromBankId+0x5c>)
 8024872:	e00e      	b.n	8024892 <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 8024874:	4b0c      	ldr	r3, [pc, #48]	; (80248a8 <getPortFromBankId+0x60>)
 8024876:	e00c      	b.n	8024892 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 8024878:	4b0c      	ldr	r3, [pc, #48]	; (80248ac <getPortFromBankId+0x64>)
 802487a:	e00a      	b.n	8024892 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H: return GPIOH;
 802487c:	4b0c      	ldr	r3, [pc, #48]	; (80248b0 <getPortFromBankId+0x68>)
 802487e:	e008      	b.n	8024892 <getPortFromBankId+0x4a>
#endif
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 8024880:	1dfb      	adds	r3, r7, #7
 8024882:	781b      	ldrb	r3, [r3, #0]
 8024884:	b29b      	uxth	r3, r3
 8024886:	4a0b      	ldr	r2, [pc, #44]	; (80248b4 <getPortFromBankId+0x6c>)
 8024888:	0019      	movs	r1, r3
 802488a:	0010      	movs	r0, r2
 802488c:	f7fe fadc 	bl	8022e48 <itsdk_error_report>
	}
	return NULL;
 8024890:	2300      	movs	r3, #0
}
 8024892:	0018      	movs	r0, r3
 8024894:	46bd      	mov	sp, r7
 8024896:	b002      	add	sp, #8
 8024898:	bd80      	pop	{r7, pc}
 802489a:	46c0      	nop			; (mov r8, r8)
 802489c:	08029168 	.word	0x08029168
 80248a0:	50000400 	.word	0x50000400
 80248a4:	50000800 	.word	0x50000800
 80248a8:	50000c00 	.word	0x50000c00
 80248ac:	50001000 	.word	0x50001000
 80248b0:	50001c00 	.word	0x50001c00
 80248b4:	d0000004 	.word	0xd0000004

080248b8 <getPinNumFromPinVector>:

/**
 * Convert the pin vector (every pin is corresponding to a single bit) to a pin number.
 * Internal
 */
uint8_t getPinNumFromPinVector(uint16_t pinId) {
 80248b8:	b580      	push	{r7, lr}
 80248ba:	b084      	sub	sp, #16
 80248bc:	af00      	add	r7, sp, #0
 80248be:	0002      	movs	r2, r0
 80248c0:	1dbb      	adds	r3, r7, #6
 80248c2:	801a      	strh	r2, [r3, #0]
	uint8_t pinPos=0;
 80248c4:	230f      	movs	r3, #15
 80248c6:	18fb      	adds	r3, r7, r3
 80248c8:	2200      	movs	r2, #0
 80248ca:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xFF00 ) != 0) { pinPos |= 0x8; }
 80248cc:	1dbb      	adds	r3, r7, #6
 80248ce:	881a      	ldrh	r2, [r3, #0]
 80248d0:	23ff      	movs	r3, #255	; 0xff
 80248d2:	021b      	lsls	r3, r3, #8
 80248d4:	4013      	ands	r3, r2
 80248d6:	d006      	beq.n	80248e6 <getPinNumFromPinVector+0x2e>
 80248d8:	220f      	movs	r2, #15
 80248da:	18bb      	adds	r3, r7, r2
 80248dc:	18ba      	adds	r2, r7, r2
 80248de:	7812      	ldrb	r2, [r2, #0]
 80248e0:	2108      	movs	r1, #8
 80248e2:	430a      	orrs	r2, r1
 80248e4:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xF0F0 ) != 0) { pinPos |= 0x4; }
 80248e6:	1dbb      	adds	r3, r7, #6
 80248e8:	881b      	ldrh	r3, [r3, #0]
 80248ea:	4a14      	ldr	r2, [pc, #80]	; (802493c <getPinNumFromPinVector+0x84>)
 80248ec:	4013      	ands	r3, r2
 80248ee:	d006      	beq.n	80248fe <getPinNumFromPinVector+0x46>
 80248f0:	220f      	movs	r2, #15
 80248f2:	18bb      	adds	r3, r7, r2
 80248f4:	18ba      	adds	r2, r7, r2
 80248f6:	7812      	ldrb	r2, [r2, #0]
 80248f8:	2104      	movs	r1, #4
 80248fa:	430a      	orrs	r2, r1
 80248fc:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xCCCC ) != 0) { pinPos |= 0x2; }
 80248fe:	1dbb      	adds	r3, r7, #6
 8024900:	881b      	ldrh	r3, [r3, #0]
 8024902:	4a0f      	ldr	r2, [pc, #60]	; (8024940 <getPinNumFromPinVector+0x88>)
 8024904:	4013      	ands	r3, r2
 8024906:	d006      	beq.n	8024916 <getPinNumFromPinVector+0x5e>
 8024908:	220f      	movs	r2, #15
 802490a:	18bb      	adds	r3, r7, r2
 802490c:	18ba      	adds	r2, r7, r2
 802490e:	7812      	ldrb	r2, [r2, #0]
 8024910:	2102      	movs	r1, #2
 8024912:	430a      	orrs	r2, r1
 8024914:	701a      	strb	r2, [r3, #0]
	if ( ( pinId & 0xAAAA ) != 0) { pinPos |= 0x1; }
 8024916:	1dbb      	adds	r3, r7, #6
 8024918:	881b      	ldrh	r3, [r3, #0]
 802491a:	4a0a      	ldr	r2, [pc, #40]	; (8024944 <getPinNumFromPinVector+0x8c>)
 802491c:	4013      	ands	r3, r2
 802491e:	d006      	beq.n	802492e <getPinNumFromPinVector+0x76>
 8024920:	220f      	movs	r2, #15
 8024922:	18bb      	adds	r3, r7, r2
 8024924:	18ba      	adds	r2, r7, r2
 8024926:	7812      	ldrb	r2, [r2, #0]
 8024928:	2101      	movs	r1, #1
 802492a:	430a      	orrs	r2, r1
 802492c:	701a      	strb	r2, [r3, #0]
	return pinPos;
 802492e:	230f      	movs	r3, #15
 8024930:	18fb      	adds	r3, r7, r3
 8024932:	781b      	ldrb	r3, [r3, #0]
}
 8024934:	0018      	movs	r0, r3
 8024936:	46bd      	mov	sp, r7
 8024938:	b004      	add	sp, #16
 802493a:	bd80      	pop	{r7, pc}
 802493c:	0000f0f0 	.word	0x0000f0f0
 8024940:	0000cccc 	.word	0x0000cccc
 8024944:	0000aaaa 	.word	0x0000aaaa

08024948 <getIrqFromBankPin>:

/**
 * Convert a GPIO bank/pin into the corresponding ExtI line
 */
IRQn_Type getIrqFromBankPin(uint8_t bankId, uint16_t id) {
 8024948:	b5b0      	push	{r4, r5, r7, lr}
 802494a:	b084      	sub	sp, #16
 802494c:	af00      	add	r7, sp, #0
 802494e:	0002      	movs	r2, r0
 8024950:	1dfb      	adds	r3, r7, #7
 8024952:	701a      	strb	r2, [r3, #0]
 8024954:	1d3b      	adds	r3, r7, #4
 8024956:	1c0a      	adds	r2, r1, #0
 8024958:	801a      	strh	r2, [r3, #0]

	uint8_t pinPos = getPinNumFromPinVector(id);
 802495a:	250f      	movs	r5, #15
 802495c:	197c      	adds	r4, r7, r5
 802495e:	1d3b      	adds	r3, r7, #4
 8024960:	881b      	ldrh	r3, [r3, #0]
 8024962:	0018      	movs	r0, r3
 8024964:	f7ff ffa8 	bl	80248b8 <getPinNumFromPinVector>
 8024968:	0003      	movs	r3, r0
 802496a:	7023      	strb	r3, [r4, #0]
	if ( pinPos <= 1 ) {
 802496c:	197b      	adds	r3, r7, r5
 802496e:	781b      	ldrb	r3, [r3, #0]
 8024970:	2b01      	cmp	r3, #1
 8024972:	d801      	bhi.n	8024978 <getIrqFromBankPin+0x30>
		return EXTI0_1_IRQn;
 8024974:	2305      	movs	r3, #5
 8024976:	e007      	b.n	8024988 <getIrqFromBankPin+0x40>
	} else if ( pinPos <= 3 ) {
 8024978:	230f      	movs	r3, #15
 802497a:	18fb      	adds	r3, r7, r3
 802497c:	781b      	ldrb	r3, [r3, #0]
 802497e:	2b03      	cmp	r3, #3
 8024980:	d801      	bhi.n	8024986 <getIrqFromBankPin+0x3e>
		return EXTI2_3_IRQn;
 8024982:	2306      	movs	r3, #6
 8024984:	e000      	b.n	8024988 <getIrqFromBankPin+0x40>
	} else {
		return EXTI4_15_IRQn;
 8024986:	2307      	movs	r3, #7
	}
}
 8024988:	0018      	movs	r0, r3
 802498a:	46bd      	mov	sp, r7
 802498c:	b004      	add	sp, #16
 802498e:	bdb0      	pop	{r4, r5, r7, pc}

08024990 <gpio_configure>:


void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
 8024990:	b590      	push	{r4, r7, lr}
 8024992:	b085      	sub	sp, #20
 8024994:	af02      	add	r7, sp, #8
 8024996:	0004      	movs	r4, r0
 8024998:	0008      	movs	r0, r1
 802499a:	0011      	movs	r1, r2
 802499c:	1dfb      	adds	r3, r7, #7
 802499e:	1c22      	adds	r2, r4, #0
 80249a0:	701a      	strb	r2, [r3, #0]
 80249a2:	1d3b      	adds	r3, r7, #4
 80249a4:	1c02      	adds	r2, r0, #0
 80249a6:	801a      	strh	r2, [r3, #0]
 80249a8:	1dbb      	adds	r3, r7, #6
 80249aa:	1c0a      	adds	r2, r1, #0
 80249ac:	701a      	strb	r2, [r3, #0]
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
 80249ae:	1dbb      	adds	r3, r7, #6
 80249b0:	781a      	ldrb	r2, [r3, #0]
 80249b2:	1d3b      	adds	r3, r7, #4
 80249b4:	8819      	ldrh	r1, [r3, #0]
 80249b6:	1dfb      	adds	r3, r7, #7
 80249b8:	7818      	ldrb	r0, [r3, #0]
 80249ba:	2300      	movs	r3, #0
 80249bc:	9300      	str	r3, [sp, #0]
 80249be:	2300      	movs	r3, #0
 80249c0:	f000 f804 	bl	80249cc <gpio_configure_ext>
}
 80249c4:	46c0      	nop			; (mov r8, r8)
 80249c6:	46bd      	mov	sp, r7
 80249c8:	b003      	add	sp, #12
 80249ca:	bd90      	pop	{r4, r7, pc}

080249cc <gpio_configure_ext>:


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 80249cc:	b5b0      	push	{r4, r5, r7, lr}
 80249ce:	b08e      	sub	sp, #56	; 0x38
 80249d0:	af00      	add	r7, sp, #0
 80249d2:	0005      	movs	r5, r0
 80249d4:	000c      	movs	r4, r1
 80249d6:	0010      	movs	r0, r2
 80249d8:	0019      	movs	r1, r3
 80249da:	1dfb      	adds	r3, r7, #7
 80249dc:	1c2a      	adds	r2, r5, #0
 80249de:	701a      	strb	r2, [r3, #0]
 80249e0:	1d3b      	adds	r3, r7, #4
 80249e2:	1c22      	adds	r2, r4, #0
 80249e4:	801a      	strh	r2, [r3, #0]
 80249e6:	1dbb      	adds	r3, r7, #6
 80249e8:	1c02      	adds	r2, r0, #0
 80249ea:	701a      	strb	r2, [r3, #0]
 80249ec:	1cfb      	adds	r3, r7, #3
 80249ee:	1c0a      	adds	r2, r1, #0
 80249f0:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 80249f2:	1dfb      	adds	r3, r7, #7
 80249f4:	781b      	ldrb	r3, [r3, #0]
 80249f6:	2b07      	cmp	r3, #7
 80249f8:	d852      	bhi.n	8024aa0 <gpio_configure_ext+0xd4>
 80249fa:	009a      	lsls	r2, r3, #2
 80249fc:	4bd0      	ldr	r3, [pc, #832]	; (8024d40 <gpio_configure_ext+0x374>)
 80249fe:	18d3      	adds	r3, r2, r3
 8024a00:	681b      	ldr	r3, [r3, #0]
 8024a02:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 8024a04:	4bcf      	ldr	r3, [pc, #828]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a08:	4bce      	ldr	r3, [pc, #824]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a0a:	2101      	movs	r1, #1
 8024a0c:	430a      	orrs	r2, r1
 8024a0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a10:	4bcc      	ldr	r3, [pc, #816]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a14:	2201      	movs	r2, #1
 8024a16:	4013      	ands	r3, r2
 8024a18:	61fb      	str	r3, [r7, #28]
 8024a1a:	69fb      	ldr	r3, [r7, #28]
		  break;
 8024a1c:	e040      	b.n	8024aa0 <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 8024a1e:	4bc9      	ldr	r3, [pc, #804]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a22:	4bc8      	ldr	r3, [pc, #800]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a24:	2102      	movs	r1, #2
 8024a26:	430a      	orrs	r2, r1
 8024a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a2a:	4bc6      	ldr	r3, [pc, #792]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a2e:	2202      	movs	r2, #2
 8024a30:	4013      	ands	r3, r2
 8024a32:	61bb      	str	r3, [r7, #24]
 8024a34:	69bb      	ldr	r3, [r7, #24]
		  break;
 8024a36:	e033      	b.n	8024aa0 <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 8024a38:	4bc2      	ldr	r3, [pc, #776]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a3c:	4bc1      	ldr	r3, [pc, #772]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a3e:	2104      	movs	r1, #4
 8024a40:	430a      	orrs	r2, r1
 8024a42:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a44:	4bbf      	ldr	r3, [pc, #764]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a48:	2204      	movs	r2, #4
 8024a4a:	4013      	ands	r3, r2
 8024a4c:	617b      	str	r3, [r7, #20]
 8024a4e:	697b      	ldr	r3, [r7, #20]
		  break;
 8024a50:	e026      	b.n	8024aa0 <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 8024a52:	4bbc      	ldr	r3, [pc, #752]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a56:	4bbb      	ldr	r3, [pc, #748]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a58:	2108      	movs	r1, #8
 8024a5a:	430a      	orrs	r2, r1
 8024a5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a5e:	4bb9      	ldr	r3, [pc, #740]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a62:	2208      	movs	r2, #8
 8024a64:	4013      	ands	r3, r2
 8024a66:	613b      	str	r3, [r7, #16]
 8024a68:	693b      	ldr	r3, [r7, #16]
		  break;
 8024a6a:	e019      	b.n	8024aa0 <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 8024a6c:	4bb5      	ldr	r3, [pc, #724]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a70:	4bb4      	ldr	r3, [pc, #720]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a72:	2110      	movs	r1, #16
 8024a74:	430a      	orrs	r2, r1
 8024a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a78:	4bb2      	ldr	r3, [pc, #712]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a7c:	2210      	movs	r2, #16
 8024a7e:	4013      	ands	r3, r2
 8024a80:	60fb      	str	r3, [r7, #12]
 8024a82:	68fb      	ldr	r3, [r7, #12]
		  break;
 8024a84:	e00c      	b.n	8024aa0 <gpio_configure_ext+0xd4>
    #endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 8024a86:	4baf      	ldr	r3, [pc, #700]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a8a:	4bae      	ldr	r3, [pc, #696]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a8c:	2180      	movs	r1, #128	; 0x80
 8024a8e:	430a      	orrs	r2, r1
 8024a90:	62da      	str	r2, [r3, #44]	; 0x2c
 8024a92:	4bac      	ldr	r3, [pc, #688]	; (8024d44 <gpio_configure_ext+0x378>)
 8024a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a96:	2280      	movs	r2, #128	; 0x80
 8024a98:	4013      	ands	r3, r2
 8024a9a:	60bb      	str	r3, [r7, #8]
 8024a9c:	68bb      	ldr	r3, [r7, #8]
		  break;
 8024a9e:	46c0      	nop			; (mov r8, r8)
	#endif
	}

	GPIO_InitStruct.Pin = id;
 8024aa0:	1d3b      	adds	r3, r7, #4
 8024aa2:	881a      	ldrh	r2, [r3, #0]
 8024aa4:	2320      	movs	r3, #32
 8024aa6:	18fb      	adds	r3, r7, r3
 8024aa8:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 8024aaa:	1cfb      	adds	r3, r7, #3
 8024aac:	781b      	ldrb	r3, [r3, #0]
 8024aae:	2b00      	cmp	r3, #0
 8024ab0:	d002      	beq.n	8024ab8 <gpio_configure_ext+0xec>
 8024ab2:	2b01      	cmp	r3, #1
 8024ab4:	d005      	beq.n	8024ac2 <gpio_configure_ext+0xf6>
 8024ab6:	e009      	b.n	8024acc <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024ab8:	2320      	movs	r3, #32
 8024aba:	18fb      	adds	r3, r7, r3
 8024abc:	2200      	movs	r2, #0
 8024abe:	60da      	str	r2, [r3, #12]
		break;
 8024ac0:	e004      	b.n	8024acc <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024ac2:	2320      	movs	r3, #32
 8024ac4:	18fb      	adds	r3, r7, r3
 8024ac6:	2203      	movs	r2, #3
 8024ac8:	60da      	str	r2, [r3, #12]
		break;
 8024aca:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 8024acc:	1dbb      	adds	r3, r7, #6
 8024ace:	781b      	ldrb	r3, [r3, #0]
 8024ad0:	2b13      	cmp	r3, #19
 8024ad2:	d900      	bls.n	8024ad6 <gpio_configure_ext+0x10a>
 8024ad4:	e0a4      	b.n	8024c20 <gpio_configure_ext+0x254>
 8024ad6:	009a      	lsls	r2, r3, #2
 8024ad8:	4b9b      	ldr	r3, [pc, #620]	; (8024d48 <gpio_configure_ext+0x37c>)
 8024ada:	18d3      	adds	r3, r2, r3
 8024adc:	681b      	ldr	r3, [r3, #0]
 8024ade:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024ae0:	2120      	movs	r1, #32
 8024ae2:	187b      	adds	r3, r7, r1
 8024ae4:	2201      	movs	r2, #1
 8024ae6:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024ae8:	187b      	adds	r3, r7, r1
 8024aea:	2200      	movs	r2, #0
 8024aec:	609a      	str	r2, [r3, #8]
		break;
 8024aee:	e097      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024af0:	2120      	movs	r1, #32
 8024af2:	187b      	adds	r3, r7, r1
 8024af4:	2201      	movs	r2, #1
 8024af6:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024af8:	187b      	adds	r3, r7, r1
 8024afa:	2201      	movs	r2, #1
 8024afc:	609a      	str	r2, [r3, #8]
		break;
 8024afe:	e08f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024b00:	2120      	movs	r1, #32
 8024b02:	187b      	adds	r3, r7, r1
 8024b04:	2201      	movs	r2, #1
 8024b06:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024b08:	187b      	adds	r3, r7, r1
 8024b0a:	2202      	movs	r2, #2
 8024b0c:	609a      	str	r2, [r3, #8]
		break;
 8024b0e:	e087      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8024b10:	2120      	movs	r1, #32
 8024b12:	187b      	adds	r3, r7, r1
 8024b14:	2211      	movs	r2, #17
 8024b16:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b18:	187b      	adds	r3, r7, r1
 8024b1a:	2200      	movs	r2, #0
 8024b1c:	609a      	str	r2, [r3, #8]
		break;
 8024b1e:	e07f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024b20:	2120      	movs	r1, #32
 8024b22:	187b      	adds	r3, r7, r1
 8024b24:	2200      	movs	r2, #0
 8024b26:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b28:	187b      	adds	r3, r7, r1
 8024b2a:	2200      	movs	r2, #0
 8024b2c:	609a      	str	r2, [r3, #8]
		break;
 8024b2e:	e077      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024b30:	2120      	movs	r1, #32
 8024b32:	187b      	adds	r3, r7, r1
 8024b34:	2200      	movs	r2, #0
 8024b36:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024b38:	187b      	adds	r3, r7, r1
 8024b3a:	2201      	movs	r2, #1
 8024b3c:	609a      	str	r2, [r3, #8]
		break;
 8024b3e:	e06f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024b40:	2120      	movs	r1, #32
 8024b42:	187b      	adds	r3, r7, r1
 8024b44:	2200      	movs	r2, #0
 8024b46:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024b48:	187b      	adds	r3, r7, r1
 8024b4a:	2202      	movs	r2, #2
 8024b4c:	609a      	str	r2, [r3, #8]
		break;
 8024b4e:	e067      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8024b50:	2120      	movs	r1, #32
 8024b52:	187b      	adds	r3, r7, r1
 8024b54:	4a7d      	ldr	r2, [pc, #500]	; (8024d4c <gpio_configure_ext+0x380>)
 8024b56:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b58:	187b      	adds	r3, r7, r1
 8024b5a:	2200      	movs	r2, #0
 8024b5c:	609a      	str	r2, [r3, #8]
		break;
 8024b5e:	e05f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8024b60:	2120      	movs	r1, #32
 8024b62:	187b      	adds	r3, r7, r1
 8024b64:	4a79      	ldr	r2, [pc, #484]	; (8024d4c <gpio_configure_ext+0x380>)
 8024b66:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024b68:	187b      	adds	r3, r7, r1
 8024b6a:	2202      	movs	r2, #2
 8024b6c:	609a      	str	r2, [r3, #8]
		break;
 8024b6e:	e057      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8024b70:	2120      	movs	r1, #32
 8024b72:	187b      	adds	r3, r7, r1
 8024b74:	4a75      	ldr	r2, [pc, #468]	; (8024d4c <gpio_configure_ext+0x380>)
 8024b76:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024b78:	187b      	adds	r3, r7, r1
 8024b7a:	2201      	movs	r2, #1
 8024b7c:	609a      	str	r2, [r3, #8]
		break;
 8024b7e:	e04f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8024b80:	2120      	movs	r1, #32
 8024b82:	187b      	adds	r3, r7, r1
 8024b84:	4a72      	ldr	r2, [pc, #456]	; (8024d50 <gpio_configure_ext+0x384>)
 8024b86:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b88:	187b      	adds	r3, r7, r1
 8024b8a:	2200      	movs	r2, #0
 8024b8c:	609a      	str	r2, [r3, #8]
		break;
 8024b8e:	e047      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8024b90:	2120      	movs	r1, #32
 8024b92:	187b      	adds	r3, r7, r1
 8024b94:	4a6e      	ldr	r2, [pc, #440]	; (8024d50 <gpio_configure_ext+0x384>)
 8024b96:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024b98:	187b      	adds	r3, r7, r1
 8024b9a:	2201      	movs	r2, #1
 8024b9c:	609a      	str	r2, [r3, #8]
		break;
 8024b9e:	e03f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8024ba0:	2120      	movs	r1, #32
 8024ba2:	187b      	adds	r3, r7, r1
 8024ba4:	4a6a      	ldr	r2, [pc, #424]	; (8024d50 <gpio_configure_ext+0x384>)
 8024ba6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024ba8:	187b      	adds	r3, r7, r1
 8024baa:	2202      	movs	r2, #2
 8024bac:	609a      	str	r2, [r3, #8]
		break;
 8024bae:	e037      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8024bb0:	2120      	movs	r1, #32
 8024bb2:	187b      	adds	r3, r7, r1
 8024bb4:	4a67      	ldr	r2, [pc, #412]	; (8024d54 <gpio_configure_ext+0x388>)
 8024bb6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024bb8:	187b      	adds	r3, r7, r1
 8024bba:	2200      	movs	r2, #0
 8024bbc:	609a      	str	r2, [r3, #8]
		break;
 8024bbe:	e02f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024bc0:	2120      	movs	r1, #32
 8024bc2:	187b      	adds	r3, r7, r1
 8024bc4:	2203      	movs	r2, #3
 8024bc6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024bc8:	187b      	adds	r3, r7, r1
 8024bca:	2200      	movs	r2, #0
 8024bcc:	609a      	str	r2, [r3, #8]
		break;
 8024bce:	e027      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024bd0:	2120      	movs	r1, #32
 8024bd2:	187b      	adds	r3, r7, r1
 8024bd4:	2203      	movs	r2, #3
 8024bd6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024bd8:	187b      	adds	r3, r7, r1
 8024bda:	2200      	movs	r2, #0
 8024bdc:	609a      	str	r2, [r3, #8]
		break;
 8024bde:	e01f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024be0:	2120      	movs	r1, #32
 8024be2:	187b      	adds	r3, r7, r1
 8024be4:	2202      	movs	r2, #2
 8024be6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024be8:	187b      	adds	r3, r7, r1
 8024bea:	2200      	movs	r2, #0
 8024bec:	609a      	str	r2, [r3, #8]
	    break;
 8024bee:	e017      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024bf0:	2120      	movs	r1, #32
 8024bf2:	187b      	adds	r3, r7, r1
 8024bf4:	2202      	movs	r2, #2
 8024bf6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024bf8:	187b      	adds	r3, r7, r1
 8024bfa:	2201      	movs	r2, #1
 8024bfc:	609a      	str	r2, [r3, #8]
	    break;
 8024bfe:	e00f      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024c00:	2120      	movs	r1, #32
 8024c02:	187b      	adds	r3, r7, r1
 8024c04:	2202      	movs	r2, #2
 8024c06:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8024c08:	187b      	adds	r3, r7, r1
 8024c0a:	2202      	movs	r2, #2
 8024c0c:	609a      	str	r2, [r3, #8]
	    break;
 8024c0e:	e007      	b.n	8024c20 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8024c10:	2120      	movs	r1, #32
 8024c12:	187b      	adds	r3, r7, r1
 8024c14:	2212      	movs	r2, #18
 8024c16:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024c18:	187b      	adds	r3, r7, r1
 8024c1a:	2200      	movs	r2, #0
 8024c1c:	609a      	str	r2, [r3, #8]
	    break;
 8024c1e:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 8024c20:	2300      	movs	r3, #0
 8024c22:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 8024c24:	1dbb      	adds	r3, r7, #6
 8024c26:	781b      	ldrb	r3, [r3, #0]
 8024c28:	3b10      	subs	r3, #16
 8024c2a:	2b03      	cmp	r3, #3
 8024c2c:	d900      	bls.n	8024c30 <gpio_configure_ext+0x264>
 8024c2e:	e0a1      	b.n	8024d74 <gpio_configure_ext+0x3a8>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 8024c30:	2348      	movs	r3, #72	; 0x48
 8024c32:	18fb      	adds	r3, r7, r3
 8024c34:	781b      	ldrb	r3, [r3, #0]
 8024c36:	2b06      	cmp	r3, #6
 8024c38:	d900      	bls.n	8024c3c <gpio_configure_ext+0x270>
 8024c3a:	e092      	b.n	8024d62 <gpio_configure_ext+0x396>
 8024c3c:	009a      	lsls	r2, r3, #2
 8024c3e:	4b46      	ldr	r3, [pc, #280]	; (8024d58 <gpio_configure_ext+0x38c>)
 8024c40:	18d3      	adds	r3, r2, r3
 8024c42:	681b      	ldr	r3, [r3, #0]
 8024c44:	469f      	mov	pc, r3
		case ITSDK_GPIO_ALT_TIMER2_TR:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8024c46:	1dfb      	adds	r3, r7, #7
 8024c48:	781b      	ldrb	r3, [r3, #0]
 8024c4a:	2b00      	cmp	r3, #0
 8024c4c:	d10a      	bne.n	8024c64 <gpio_configure_ext+0x298>
 8024c4e:	1d3b      	adds	r3, r7, #4
 8024c50:	881a      	ldrh	r2, [r3, #0]
 8024c52:	2380      	movs	r3, #128	; 0x80
 8024c54:	021b      	lsls	r3, r3, #8
 8024c56:	429a      	cmp	r2, r3
 8024c58:	d104      	bne.n	8024c64 <gpio_configure_ext+0x298>
 8024c5a:	2320      	movs	r3, #32
 8024c5c:	18fb      	adds	r3, r7, r3
 8024c5e:	2202      	movs	r2, #2
 8024c60:	611a      	str	r2, [r3, #16]
 8024c62:	e01c      	b.n	8024c9e <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8024c64:	1dfb      	adds	r3, r7, #7
 8024c66:	781b      	ldrb	r3, [r3, #0]
 8024c68:	2b00      	cmp	r3, #0
 8024c6a:	d108      	bne.n	8024c7e <gpio_configure_ext+0x2b2>
 8024c6c:	1d3b      	adds	r3, r7, #4
 8024c6e:	881b      	ldrh	r3, [r3, #0]
 8024c70:	2b20      	cmp	r3, #32
 8024c72:	d104      	bne.n	8024c7e <gpio_configure_ext+0x2b2>
 8024c74:	2320      	movs	r3, #32
 8024c76:	18fb      	adds	r3, r7, r3
 8024c78:	2202      	movs	r2, #2
 8024c7a:	611a      	str	r2, [r3, #16]
 8024c7c:	e00f      	b.n	8024c9e <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8024c7e:	1dfb      	adds	r3, r7, #7
 8024c80:	781b      	ldrb	r3, [r3, #0]
 8024c82:	2b00      	cmp	r3, #0
 8024c84:	d108      	bne.n	8024c98 <gpio_configure_ext+0x2cc>
 8024c86:	1d3b      	adds	r3, r7, #4
 8024c88:	881b      	ldrh	r3, [r3, #0]
 8024c8a:	2b01      	cmp	r3, #1
 8024c8c:	d104      	bne.n	8024c98 <gpio_configure_ext+0x2cc>
 8024c8e:	2320      	movs	r3, #32
 8024c90:	18fb      	adds	r3, r7, r3
 8024c92:	2205      	movs	r2, #5
 8024c94:	611a      	str	r2, [r3, #16]
 8024c96:	e002      	b.n	8024c9e <gpio_configure_ext+0x2d2>
			else err=1;
 8024c98:	2301      	movs	r3, #1
 8024c9a:	637b      	str	r3, [r7, #52]	; 0x34
		#else
		  #warning This device will not accept alternate GPIO configuration: code is missing
		#endif
			break;
 8024c9c:	e062      	b.n	8024d64 <gpio_configure_ext+0x398>
 8024c9e:	e061      	b.n	8024d64 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_TIMER2_C1:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8024ca0:	1dfb      	adds	r3, r7, #7
 8024ca2:	781b      	ldrb	r3, [r3, #0]
 8024ca4:	2b00      	cmp	r3, #0
 8024ca6:	d10a      	bne.n	8024cbe <gpio_configure_ext+0x2f2>
 8024ca8:	1d3b      	adds	r3, r7, #4
 8024caa:	881a      	ldrh	r2, [r3, #0]
 8024cac:	2380      	movs	r3, #128	; 0x80
 8024cae:	021b      	lsls	r3, r3, #8
 8024cb0:	429a      	cmp	r2, r3
 8024cb2:	d104      	bne.n	8024cbe <gpio_configure_ext+0x2f2>
 8024cb4:	2320      	movs	r3, #32
 8024cb6:	18fb      	adds	r3, r7, r3
 8024cb8:	2205      	movs	r2, #5
 8024cba:	611a      	str	r2, [r3, #16]
 8024cbc:	e01c      	b.n	8024cf8 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8024cbe:	1dfb      	adds	r3, r7, #7
 8024cc0:	781b      	ldrb	r3, [r3, #0]
 8024cc2:	2b00      	cmp	r3, #0
 8024cc4:	d108      	bne.n	8024cd8 <gpio_configure_ext+0x30c>
 8024cc6:	1d3b      	adds	r3, r7, #4
 8024cc8:	881b      	ldrh	r3, [r3, #0]
 8024cca:	2b20      	cmp	r3, #32
 8024ccc:	d104      	bne.n	8024cd8 <gpio_configure_ext+0x30c>
 8024cce:	2320      	movs	r3, #32
 8024cd0:	18fb      	adds	r3, r7, r3
 8024cd2:	2205      	movs	r2, #5
 8024cd4:	611a      	str	r2, [r3, #16]
 8024cd6:	e00f      	b.n	8024cf8 <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8024cd8:	1dfb      	adds	r3, r7, #7
 8024cda:	781b      	ldrb	r3, [r3, #0]
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	d108      	bne.n	8024cf2 <gpio_configure_ext+0x326>
 8024ce0:	1d3b      	adds	r3, r7, #4
 8024ce2:	881b      	ldrh	r3, [r3, #0]
 8024ce4:	2b01      	cmp	r3, #1
 8024ce6:	d104      	bne.n	8024cf2 <gpio_configure_ext+0x326>
 8024ce8:	2320      	movs	r3, #32
 8024cea:	18fb      	adds	r3, r7, r3
 8024cec:	2202      	movs	r2, #2
 8024cee:	611a      	str	r2, [r3, #16]
 8024cf0:	e002      	b.n	8024cf8 <gpio_configure_ext+0x32c>
			else err=1;
 8024cf2:	2301      	movs	r3, #1
 8024cf4:	637b      	str	r3, [r7, #52]	; 0x34
		#endif
			break;
 8024cf6:	e035      	b.n	8024d64 <gpio_configure_ext+0x398>
 8024cf8:	e034      	b.n	8024d64 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_SCLK:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8024cfa:	1dfb      	adds	r3, r7, #7
 8024cfc:	781b      	ldrb	r3, [r3, #0]
 8024cfe:	2b00      	cmp	r3, #0
 8024d00:	d108      	bne.n	8024d14 <gpio_configure_ext+0x348>
 8024d02:	1d3b      	adds	r3, r7, #4
 8024d04:	881b      	ldrh	r3, [r3, #0]
 8024d06:	2b20      	cmp	r3, #32
 8024d08:	d104      	bne.n	8024d14 <gpio_configure_ext+0x348>
 8024d0a:	2320      	movs	r3, #32
 8024d0c:	18fb      	adds	r3, r7, r3
 8024d0e:	2200      	movs	r2, #0
 8024d10:	611a      	str	r2, [r3, #16]
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_3 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8024d12:	e027      	b.n	8024d64 <gpio_configure_ext+0x398>
				else err=1;
 8024d14:	2301      	movs	r3, #1
 8024d16:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8024d18:	e024      	b.n	8024d64 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MOSI:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8024d1a:	1dfb      	adds	r3, r7, #7
 8024d1c:	781b      	ldrb	r3, [r3, #0]
 8024d1e:	2b01      	cmp	r3, #1
 8024d20:	d108      	bne.n	8024d34 <gpio_configure_ext+0x368>
 8024d22:	1d3b      	adds	r3, r7, #4
 8024d24:	881b      	ldrh	r3, [r3, #0]
 8024d26:	2b20      	cmp	r3, #32
 8024d28:	d104      	bne.n	8024d34 <gpio_configure_ext+0x368>
 8024d2a:	2320      	movs	r3, #32
 8024d2c:	18fb      	adds	r3, r7, r3
 8024d2e:	2200      	movs	r2, #0
 8024d30:	611a      	str	r2, [r3, #16]
				if ( bank == __BANK_A && id == __LP_GPIO_7 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_A && id == __LP_GPIO_12 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8024d32:	e017      	b.n	8024d64 <gpio_configure_ext+0x398>
				else err=1;
 8024d34:	2301      	movs	r3, #1
 8024d36:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8024d38:	e014      	b.n	8024d64 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MISO:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 8024d3a:	2301      	movs	r3, #1
 8024d3c:	637b      	str	r3, [r7, #52]	; 0x34
				if ( bank == __BANK_A && id == __LP_GPIO_11 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_6 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_B && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8024d3e:	e011      	b.n	8024d64 <gpio_configure_ext+0x398>
 8024d40:	08029188 	.word	0x08029188
 8024d44:	40021000 	.word	0x40021000
 8024d48:	080291a8 	.word	0x080291a8
 8024d4c:	10110000 	.word	0x10110000
 8024d50:	10210000 	.word	0x10210000
 8024d54:	10310000 	.word	0x10310000
 8024d58:	080291f8 	.word	0x080291f8
		case ITSDK_GPIO_ALT_SPI1_NSS:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 8024d5c:	2301      	movs	r3, #1
 8024d5e:	637b      	str	r3, [r7, #52]	; 0x34
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 8024d60:	e000      	b.n	8024d64 <gpio_configure_ext+0x398>
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 8024d62:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 8024d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024d66:	2b00      	cmp	r3, #0
 8024d68:	dd06      	ble.n	8024d78 <gpio_configure_ext+0x3ac>
			log_error("Gpio - invalid alternate\r\n");
 8024d6a:	4b0c      	ldr	r3, [pc, #48]	; (8024d9c <gpio_configure_ext+0x3d0>)
 8024d6c:	0018      	movs	r0, r3
 8024d6e:	f7fe faf7 	bl	8023360 <log_error>
		}
		break;
 8024d72:	e001      	b.n	8024d78 <gpio_configure_ext+0x3ac>
	default:
		break;
 8024d74:	46c0      	nop			; (mov r8, r8)
 8024d76:	e000      	b.n	8024d7a <gpio_configure_ext+0x3ae>
		break;
 8024d78:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 8024d7a:	1dfb      	adds	r3, r7, #7
 8024d7c:	781b      	ldrb	r3, [r3, #0]
 8024d7e:	0018      	movs	r0, r3
 8024d80:	f7ff fd62 	bl	8024848 <getPortFromBankId>
 8024d84:	0002      	movs	r2, r0
 8024d86:	2320      	movs	r3, #32
 8024d88:	18fb      	adds	r3, r7, r3
 8024d8a:	0019      	movs	r1, r3
 8024d8c:	0010      	movs	r0, r2
 8024d8e:	f7df fb65 	bl	800445c <HAL_GPIO_Init>

}
 8024d92:	46c0      	nop			; (mov r8, r8)
 8024d94:	46bd      	mov	sp, r7
 8024d96:	b00e      	add	sp, #56	; 0x38
 8024d98:	bdb0      	pop	{r4, r5, r7, pc}
 8024d9a:	46c0      	nop			; (mov r8, r8)
 8024d9c:	080276e8 	.word	0x080276e8

08024da0 <gpio_set>:

void gpio_set(uint8_t bank, uint16_t id) {
 8024da0:	b580      	push	{r7, lr}
 8024da2:	b082      	sub	sp, #8
 8024da4:	af00      	add	r7, sp, #0
 8024da6:	0002      	movs	r2, r0
 8024da8:	1dfb      	adds	r3, r7, #7
 8024daa:	701a      	strb	r2, [r3, #0]
 8024dac:	1d3b      	adds	r3, r7, #4
 8024dae:	1c0a      	adds	r2, r1, #0
 8024db0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_SET);
 8024db2:	1dfb      	adds	r3, r7, #7
 8024db4:	781b      	ldrb	r3, [r3, #0]
 8024db6:	0018      	movs	r0, r3
 8024db8:	f7ff fd46 	bl	8024848 <getPortFromBankId>
 8024dbc:	1d3b      	adds	r3, r7, #4
 8024dbe:	881b      	ldrh	r3, [r3, #0]
 8024dc0:	2201      	movs	r2, #1
 8024dc2:	0019      	movs	r1, r3
 8024dc4:	f7df fcc8 	bl	8004758 <HAL_GPIO_WritePin>
}
 8024dc8:	46c0      	nop			; (mov r8, r8)
 8024dca:	46bd      	mov	sp, r7
 8024dcc:	b002      	add	sp, #8
 8024dce:	bd80      	pop	{r7, pc}

08024dd0 <gpio_reset>:

void gpio_reset(uint8_t bank, uint16_t id) {
 8024dd0:	b580      	push	{r7, lr}
 8024dd2:	b082      	sub	sp, #8
 8024dd4:	af00      	add	r7, sp, #0
 8024dd6:	0002      	movs	r2, r0
 8024dd8:	1dfb      	adds	r3, r7, #7
 8024dda:	701a      	strb	r2, [r3, #0]
 8024ddc:	1d3b      	adds	r3, r7, #4
 8024dde:	1c0a      	adds	r2, r1, #0
 8024de0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(getPortFromBankId(bank), id,GPIO_PIN_RESET);
 8024de2:	1dfb      	adds	r3, r7, #7
 8024de4:	781b      	ldrb	r3, [r3, #0]
 8024de6:	0018      	movs	r0, r3
 8024de8:	f7ff fd2e 	bl	8024848 <getPortFromBankId>
 8024dec:	1d3b      	adds	r3, r7, #4
 8024dee:	881b      	ldrh	r3, [r3, #0]
 8024df0:	2200      	movs	r2, #0
 8024df2:	0019      	movs	r1, r3
 8024df4:	f7df fcb0 	bl	8004758 <HAL_GPIO_WritePin>
}
 8024df8:	46c0      	nop			; (mov r8, r8)
 8024dfa:	46bd      	mov	sp, r7
 8024dfc:	b002      	add	sp, #8
 8024dfe:	bd80      	pop	{r7, pc}

08024e00 <gpio_interruptEnable>:
uint8_t gpio_read(uint8_t bank, uint16_t id) {
	return HAL_GPIO_ReadPin(getPortFromBankId(bank), id);
}


void gpio_interruptEnable(uint8_t bank, uint16_t id) {
 8024e00:	b580      	push	{r7, lr}
 8024e02:	b082      	sub	sp, #8
 8024e04:	af00      	add	r7, sp, #0
 8024e06:	0002      	movs	r2, r0
 8024e08:	1dfb      	adds	r3, r7, #7
 8024e0a:	701a      	strb	r2, [r3, #0]
 8024e0c:	1d3b      	adds	r3, r7, #4
 8024e0e:	1c0a      	adds	r2, r1, #0
 8024e10:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(getIrqFromBankPin(bank,id));
 8024e12:	1d3b      	adds	r3, r7, #4
 8024e14:	881a      	ldrh	r2, [r3, #0]
 8024e16:	1dfb      	adds	r3, r7, #7
 8024e18:	781b      	ldrb	r3, [r3, #0]
 8024e1a:	0011      	movs	r1, r2
 8024e1c:	0018      	movs	r0, r3
 8024e1e:	f7ff fd93 	bl	8024948 <getIrqFromBankPin>
 8024e22:	0003      	movs	r3, r0
 8024e24:	0018      	movs	r0, r3
 8024e26:	f7df faa4 	bl	8004372 <HAL_NVIC_EnableIRQ>
}
 8024e2a:	46c0      	nop			; (mov r8, r8)
 8024e2c:	46bd      	mov	sp, r7
 8024e2e:	b002      	add	sp, #8
 8024e30:	bd80      	pop	{r7, pc}

08024e32 <gpio_interruptDisableAll>:

void gpio_interruptDisable(uint8_t bank, uint16_t id) {
	HAL_NVIC_DisableIRQ(getIrqFromBankPin(bank,id));
}

void gpio_interruptDisableAll() {
 8024e32:	b580      	push	{r7, lr}
 8024e34:	af00      	add	r7, sp, #0
	  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8024e36:	2005      	movs	r0, #5
 8024e38:	f7df faab 	bl	8004392 <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8024e3c:	2007      	movs	r0, #7
 8024e3e:	f7df faa8 	bl	8004392 <HAL_NVIC_DisableIRQ>
}
 8024e42:	46c0      	nop			; (mov r8, r8)
 8024e44:	46bd      	mov	sp, r7
 8024e46:	bd80      	pop	{r7, pc}

08024e48 <gpio_interruptPriority>:

void gpio_interruptPriority(uint8_t bank, uint16_t id, uint8_t nPreemption, uint8_t nSubpriority) {
 8024e48:	b5b0      	push	{r4, r5, r7, lr}
 8024e4a:	b082      	sub	sp, #8
 8024e4c:	af00      	add	r7, sp, #0
 8024e4e:	0005      	movs	r5, r0
 8024e50:	000c      	movs	r4, r1
 8024e52:	0010      	movs	r0, r2
 8024e54:	0019      	movs	r1, r3
 8024e56:	1dfb      	adds	r3, r7, #7
 8024e58:	1c2a      	adds	r2, r5, #0
 8024e5a:	701a      	strb	r2, [r3, #0]
 8024e5c:	1d3b      	adds	r3, r7, #4
 8024e5e:	1c22      	adds	r2, r4, #0
 8024e60:	801a      	strh	r2, [r3, #0]
 8024e62:	1dbb      	adds	r3, r7, #6
 8024e64:	1c02      	adds	r2, r0, #0
 8024e66:	701a      	strb	r2, [r3, #0]
 8024e68:	1cfb      	adds	r3, r7, #3
 8024e6a:	1c0a      	adds	r2, r1, #0
 8024e6c:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SetPriority(getIrqFromBankPin(bank,id), nPreemption, nSubpriority);
 8024e6e:	1d3b      	adds	r3, r7, #4
 8024e70:	881a      	ldrh	r2, [r3, #0]
 8024e72:	1dfb      	adds	r3, r7, #7
 8024e74:	781b      	ldrb	r3, [r3, #0]
 8024e76:	0011      	movs	r1, r2
 8024e78:	0018      	movs	r0, r3
 8024e7a:	f7ff fd65 	bl	8024948 <getIrqFromBankPin>
 8024e7e:	0003      	movs	r3, r0
 8024e80:	0018      	movs	r0, r3
 8024e82:	1dbb      	adds	r3, r7, #6
 8024e84:	7819      	ldrb	r1, [r3, #0]
 8024e86:	1cfb      	adds	r3, r7, #3
 8024e88:	781b      	ldrb	r3, [r3, #0]
 8024e8a:	001a      	movs	r2, r3
 8024e8c:	f7df fa5c 	bl	8004348 <HAL_NVIC_SetPriority>
}
 8024e90:	46c0      	nop			; (mov r8, r8)
 8024e92:	46bd      	mov	sp, r7
 8024e94:	b002      	add	sp, #8
 8024e96:	bdb0      	pop	{r4, r5, r7, pc}

08024e98 <gpio_interruptClear>:

void gpio_interruptClear(uint8_t bank, uint16_t id) {
 8024e98:	b580      	push	{r7, lr}
 8024e9a:	b082      	sub	sp, #8
 8024e9c:	af00      	add	r7, sp, #0
 8024e9e:	0002      	movs	r2, r0
 8024ea0:	1dfb      	adds	r3, r7, #7
 8024ea2:	701a      	strb	r2, [r3, #0]
 8024ea4:	1d3b      	adds	r3, r7, #4
 8024ea6:	1c0a      	adds	r2, r1, #0
 8024ea8:	801a      	strh	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(id);
 8024eaa:	4b04      	ldr	r3, [pc, #16]	; (8024ebc <gpio_interruptClear+0x24>)
 8024eac:	1d3a      	adds	r2, r7, #4
 8024eae:	8812      	ldrh	r2, [r2, #0]
 8024eb0:	615a      	str	r2, [r3, #20]
}
 8024eb2:	46c0      	nop			; (mov r8, r8)
 8024eb4:	46bd      	mov	sp, r7
 8024eb6:	b002      	add	sp, #8
 8024eb8:	bd80      	pop	{r7, pc}
 8024eba:	46c0      	nop			; (mov r8, r8)
 8024ebc:	40010400 	.word	0x40010400

08024ec0 <HAL_GPIO_EXTI_Callback>:
#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
#else
void gpio_Callback(uint16_t GPIO_Pin)
#endif
{
 8024ec0:	b580      	push	{r7, lr}
 8024ec2:	b086      	sub	sp, #24
 8024ec4:	af00      	add	r7, sp, #0
 8024ec6:	0002      	movs	r2, r0
 8024ec8:	1dbb      	adds	r3, r7, #6
 8024eca:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 8024ecc:	4b1b      	ldr	r3, [pc, #108]	; (8024f3c <HAL_GPIO_EXTI_Callback+0x7c>)
 8024ece:	681b      	ldr	r3, [r3, #0]
 8024ed0:	2b00      	cmp	r3, #0
 8024ed2:	d00c      	beq.n	8024eee <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 8024ed4:	4b19      	ldr	r3, [pc, #100]	; (8024f3c <HAL_GPIO_EXTI_Callback+0x7c>)
 8024ed6:	681b      	ldr	r3, [r3, #0]
 8024ed8:	681b      	ldr	r3, [r3, #0]
 8024eda:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 8024edc:	693b      	ldr	r3, [r7, #16]
 8024ede:	2b00      	cmp	r3, #0
 8024ee0:	d005      	beq.n	8024eee <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 8024ee2:	1dbb      	adds	r3, r7, #6
 8024ee4:	881a      	ldrh	r2, [r3, #0]
 8024ee6:	693b      	ldr	r3, [r7, #16]
 8024ee8:	0010      	movs	r0, r2
 8024eea:	4798      	blx	r3
			return;
 8024eec:	e023      	b.n	8024f36 <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 8024eee:	4b14      	ldr	r3, [pc, #80]	; (8024f40 <HAL_GPIO_EXTI_Callback+0x80>)
 8024ef0:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 8024ef2:	e019      	b.n	8024f28 <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 8024ef4:	697b      	ldr	r3, [r7, #20]
 8024ef6:	681b      	ldr	r3, [r3, #0]
 8024ef8:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 8024efa:	68fb      	ldr	r3, [r7, #12]
 8024efc:	2b00      	cmp	r3, #0
 8024efe:	d010      	beq.n	8024f22 <HAL_GPIO_EXTI_Callback+0x62>
 8024f00:	697b      	ldr	r3, [r7, #20]
 8024f02:	889b      	ldrh	r3, [r3, #4]
 8024f04:	2b00      	cmp	r3, #0
 8024f06:	d007      	beq.n	8024f18 <HAL_GPIO_EXTI_Callback+0x58>
 8024f08:	697b      	ldr	r3, [r7, #20]
 8024f0a:	889b      	ldrh	r3, [r3, #4]
 8024f0c:	1dba      	adds	r2, r7, #6
 8024f0e:	8812      	ldrh	r2, [r2, #0]
 8024f10:	4013      	ands	r3, r2
 8024f12:	b29b      	uxth	r3, r3
 8024f14:	2b00      	cmp	r3, #0
 8024f16:	d004      	beq.n	8024f22 <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 8024f18:	1dbb      	adds	r3, r7, #6
 8024f1a:	881a      	ldrh	r2, [r3, #0]
 8024f1c:	68fb      	ldr	r3, [r7, #12]
 8024f1e:	0010      	movs	r0, r2
 8024f20:	4798      	blx	r3
		}
		c = c->next;
 8024f22:	697b      	ldr	r3, [r7, #20]
 8024f24:	689b      	ldr	r3, [r3, #8]
 8024f26:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 8024f28:	697b      	ldr	r3, [r7, #20]
 8024f2a:	2b00      	cmp	r3, #0
 8024f2c:	d1e2      	bne.n	8024ef4 <HAL_GPIO_EXTI_Callback+0x34>
	}
	#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8024f2e:	4b05      	ldr	r3, [pc, #20]	; (8024f44 <HAL_GPIO_EXTI_Callback+0x84>)
 8024f30:	1dba      	adds	r2, r7, #6
 8024f32:	8812      	ldrh	r2, [r2, #0]
 8024f34:	615a      	str	r2, [r3, #20]
	#endif
}
 8024f36:	46bd      	mov	sp, r7
 8024f38:	b006      	add	sp, #24
 8024f3a:	bd80      	pop	{r7, pc}
 8024f3c:	20001e24 	.word	0x20001e24
 8024f40:	20001e18 	.word	0x20001e18
 8024f44:	40010400 	.word	0x40010400

08024f48 <gpio_registerIrqAction>:
}

/**
 * Add an action to the chain, the action **must be** static
 */
void gpio_registerIrqAction(gpio_irq_chain_t * chain) {
 8024f48:	b580      	push	{r7, lr}
 8024f4a:	b084      	sub	sp, #16
 8024f4c:	af00      	add	r7, sp, #0
 8024f4e:	6078      	str	r0, [r7, #4]
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 8024f50:	4b0f      	ldr	r3, [pc, #60]	; (8024f90 <gpio_registerIrqAction+0x48>)
 8024f52:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 8024f54:	e002      	b.n	8024f5c <gpio_registerIrqAction+0x14>
	  c = c->next;
 8024f56:	68fb      	ldr	r3, [r7, #12]
 8024f58:	689b      	ldr	r3, [r3, #8]
 8024f5a:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->irq_func != chain->irq_func ) {
 8024f5c:	68fb      	ldr	r3, [r7, #12]
 8024f5e:	689b      	ldr	r3, [r3, #8]
 8024f60:	2b00      	cmp	r3, #0
 8024f62:	d005      	beq.n	8024f70 <gpio_registerIrqAction+0x28>
 8024f64:	68fb      	ldr	r3, [r7, #12]
 8024f66:	681a      	ldr	r2, [r3, #0]
 8024f68:	687b      	ldr	r3, [r7, #4]
 8024f6a:	681b      	ldr	r3, [r3, #0]
 8024f6c:	429a      	cmp	r2, r3
 8024f6e:	d1f2      	bne.n	8024f56 <gpio_registerIrqAction+0xe>
	}
	if ( c->irq_func != chain->irq_func ) {
 8024f70:	68fb      	ldr	r3, [r7, #12]
 8024f72:	681a      	ldr	r2, [r3, #0]
 8024f74:	687b      	ldr	r3, [r7, #4]
 8024f76:	681b      	ldr	r3, [r3, #0]
 8024f78:	429a      	cmp	r2, r3
 8024f7a:	d005      	beq.n	8024f88 <gpio_registerIrqAction+0x40>
		// the Action is not already existing
		c->next=chain;
 8024f7c:	68fb      	ldr	r3, [r7, #12]
 8024f7e:	687a      	ldr	r2, [r7, #4]
 8024f80:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 8024f82:	687b      	ldr	r3, [r7, #4]
 8024f84:	2200      	movs	r2, #0
 8024f86:	609a      	str	r2, [r3, #8]
	}
}
 8024f88:	46c0      	nop			; (mov r8, r8)
 8024f8a:	46bd      	mov	sp, r7
 8024f8c:	b004      	add	sp, #16
 8024f8e:	bd80      	pop	{r7, pc}
 8024f90:	20001e18 	.word	0x20001e18

08024f94 <NVIC_SystemReset>:
{
 8024f94:	b580      	push	{r7, lr}
 8024f96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8024f98:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8024f9c:	4b03      	ldr	r3, [pc, #12]	; (8024fac <NVIC_SystemReset+0x18>)
 8024f9e:	4a04      	ldr	r2, [pc, #16]	; (8024fb0 <NVIC_SystemReset+0x1c>)
 8024fa0:	60da      	str	r2, [r3, #12]
 8024fa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8024fa6:	46c0      	nop			; (mov r8, r8)
    __NOP();
 8024fa8:	e7fd      	b.n	8024fa6 <NVIC_SystemReset+0x12>
 8024faa:	46c0      	nop			; (mov r8, r8)
 8024fac:	e000ed00 	.word	0xe000ed00
 8024fb0:	05fa0004 	.word	0x05fa0004

08024fb4 <itsdk_reset>:
#include "stm32l0xx_hal.h"

/**
 * Reset the device
 */
void itsdk_reset() {
 8024fb4:	b580      	push	{r7, lr}
 8024fb6:	af00      	add	r7, sp, #0
	while(1) NVIC_SystemReset();
 8024fb8:	f7ff ffec 	bl	8024f94 <NVIC_SystemReset>
 8024fbc:	e7fc      	b.n	8024fb8 <itsdk_reset+0x4>
	...

08024fc0 <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 8024fc0:	b580      	push	{r7, lr}
 8024fc2:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 8024fc4:	4b1c      	ldr	r3, [pc, #112]	; (8025038 <itsdk_getResetCause+0x78>)
 8024fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	da01      	bge.n	8024fd0 <itsdk_getResetCause+0x10>
 8024fcc:	2306      	movs	r3, #6
 8024fce:	e030      	b.n	8025032 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 8024fd0:	4b19      	ldr	r3, [pc, #100]	; (8025038 <itsdk_getResetCause+0x78>)
 8024fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024fd4:	2380      	movs	r3, #128	; 0x80
 8024fd6:	05db      	lsls	r3, r3, #23
 8024fd8:	4013      	ands	r3, r2
 8024fda:	d001      	beq.n	8024fe0 <itsdk_getResetCause+0x20>
 8024fdc:	2305      	movs	r3, #5
 8024fde:	e028      	b.n	8025032 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 8024fe0:	4b15      	ldr	r3, [pc, #84]	; (8025038 <itsdk_getResetCause+0x78>)
 8024fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024fe4:	2380      	movs	r3, #128	; 0x80
 8024fe6:	059b      	lsls	r3, r3, #22
 8024fe8:	4013      	ands	r3, r2
 8024fea:	d001      	beq.n	8024ff0 <itsdk_getResetCause+0x30>
 8024fec:	2304      	movs	r3, #4
 8024fee:	e020      	b.n	8025032 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 8024ff0:	4b11      	ldr	r3, [pc, #68]	; (8025038 <itsdk_getResetCause+0x78>)
 8024ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8024ff4:	2380      	movs	r3, #128	; 0x80
 8024ff6:	055b      	lsls	r3, r3, #21
 8024ff8:	4013      	ands	r3, r2
 8024ffa:	d001      	beq.n	8025000 <itsdk_getResetCause+0x40>
 8024ffc:	2303      	movs	r3, #3
 8024ffe:	e018      	b.n	8025032 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 8025000:	4b0d      	ldr	r3, [pc, #52]	; (8025038 <itsdk_getResetCause+0x78>)
 8025002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8025004:	2380      	movs	r3, #128	; 0x80
 8025006:	051b      	lsls	r3, r3, #20
 8025008:	4013      	ands	r3, r2
 802500a:	d001      	beq.n	8025010 <itsdk_getResetCause+0x50>
 802500c:	2302      	movs	r3, #2
 802500e:	e010      	b.n	8025032 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 8025010:	4b09      	ldr	r3, [pc, #36]	; (8025038 <itsdk_getResetCause+0x78>)
 8025012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8025014:	2380      	movs	r3, #128	; 0x80
 8025016:	04db      	lsls	r3, r3, #19
 8025018:	4013      	ands	r3, r2
 802501a:	d001      	beq.n	8025020 <itsdk_getResetCause+0x60>
 802501c:	2301      	movs	r3, #1
 802501e:	e008      	b.n	8025032 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 8025020:	4b05      	ldr	r3, [pc, #20]	; (8025038 <itsdk_getResetCause+0x78>)
 8025022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8025024:	2380      	movs	r3, #128	; 0x80
 8025026:	049b      	lsls	r3, r3, #18
 8025028:	4013      	ands	r3, r2
 802502a:	d001      	beq.n	8025030 <itsdk_getResetCause+0x70>
 802502c:	2306      	movs	r3, #6
 802502e:	e000      	b.n	8025032 <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 8025030:	2307      	movs	r3, #7
}
 8025032:	0018      	movs	r0, r3
 8025034:	46bd      	mov	sp, r7
 8025036:	bd80      	pop	{r7, pc}
 8025038:	40021000 	.word	0x40021000

0802503c <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 802503c:	b580      	push	{r7, lr}
 802503e:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 8025040:	4b04      	ldr	r3, [pc, #16]	; (8025054 <itsdk_cleanResetCause+0x18>)
 8025042:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8025044:	4b03      	ldr	r3, [pc, #12]	; (8025054 <itsdk_cleanResetCause+0x18>)
 8025046:	2180      	movs	r1, #128	; 0x80
 8025048:	0409      	lsls	r1, r1, #16
 802504a:	430a      	orrs	r2, r1
 802504c:	651a      	str	r2, [r3, #80]	; 0x50
}
 802504e:	46c0      	nop			; (mov r8, r8)
 8025050:	46bd      	mov	sp, r7
 8025052:	bd80      	pop	{r7, pc}
 8025054:	40021000 	.word	0x40021000

08025058 <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 8025058:	b580      	push	{r7, lr}
 802505a:	b082      	sub	sp, #8
 802505c:	af00      	add	r7, sp, #0
 802505e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	0018      	movs	r0, r3
 8025064:	f7de fe24 	bl	8003cb0 <HAL_Delay>
}
 8025068:	46c0      	nop			; (mov r8, r8)
 802506a:	46bd      	mov	sp, r7
 802506c:	b002      	add	sp, #8
 802506e:	bd80      	pop	{r7, pc}

08025070 <itsdk_getIrqMask>:

/**
 * Get the IRQ Mask
 */
uint32_t itsdk_getIrqMask() {
 8025070:	b580      	push	{r7, lr}
 8025072:	b082      	sub	sp, #8
 8025074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8025076:	f3ef 8310 	mrs	r3, PRIMASK
 802507a:	607b      	str	r3, [r7, #4]
  return(result);
 802507c:	687b      	ldr	r3, [r7, #4]
	return __get_PRIMASK();
 802507e:	46c0      	nop			; (mov r8, r8)
}
 8025080:	0018      	movs	r0, r3
 8025082:	46bd      	mov	sp, r7
 8025084:	b002      	add	sp, #8
 8025086:	bd80      	pop	{r7, pc}

08025088 <itsdk_setIrqMask>:

/**
 * Set / Restore the IRQ Mask
 */
void itsdk_setIrqMask(uint32_t mask) {
 8025088:	b580      	push	{r7, lr}
 802508a:	b084      	sub	sp, #16
 802508c:	af00      	add	r7, sp, #0
 802508e:	6078      	str	r0, [r7, #4]
 8025090:	687b      	ldr	r3, [r7, #4]
 8025092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8025094:	68fb      	ldr	r3, [r7, #12]
 8025096:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(mask);
}
 802509a:	46c0      	nop			; (mov r8, r8)
 802509c:	46bd      	mov	sp, r7
 802509e:	b004      	add	sp, #16
 80250a0:	bd80      	pop	{r7, pc}
	...

080250a4 <itsdk_enterCriticalSection>:
/**
 * Enter a critical section / disable interrupt
 */
static uint32_t __interrupt_mask;
void itsdk_enterCriticalSection() {
 80250a4:	b580      	push	{r7, lr}
 80250a6:	b082      	sub	sp, #8
 80250a8:	af00      	add	r7, sp, #0
	__interrupt_mask = itsdk_getIrqMask();
 80250aa:	f7ff ffe1 	bl	8025070 <itsdk_getIrqMask>
 80250ae:	0002      	movs	r2, r0
 80250b0:	4b05      	ldr	r3, [pc, #20]	; (80250c8 <itsdk_enterCriticalSection+0x24>)
 80250b2:	601a      	str	r2, [r3, #0]
 80250b4:	2301      	movs	r3, #1
 80250b6:	607b      	str	r3, [r7, #4]
 80250b8:	687b      	ldr	r3, [r7, #4]
 80250ba:	f383 8810 	msr	PRIMASK, r3
	//__disable_irq();
	__set_PRIMASK(1);	// allows to capture but not execute the interruption appearing during the critical section execution
}
 80250be:	46c0      	nop			; (mov r8, r8)
 80250c0:	46bd      	mov	sp, r7
 80250c2:	b002      	add	sp, #8
 80250c4:	bd80      	pop	{r7, pc}
 80250c6:	46c0      	nop			; (mov r8, r8)
 80250c8:	20001e28 	.word	0x20001e28

080250cc <itsdk_leaveCriticalSection>:

/**
 * Restore the initial irq mask
 * to leave a critical secqtion
 */
void itsdk_leaveCriticalSection() {
 80250cc:	b580      	push	{r7, lr}
 80250ce:	af00      	add	r7, sp, #0
	itsdk_setIrqMask(__interrupt_mask);
 80250d0:	4b03      	ldr	r3, [pc, #12]	; (80250e0 <itsdk_leaveCriticalSection+0x14>)
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	0018      	movs	r0, r3
 80250d6:	f7ff ffd7 	bl	8025088 <itsdk_setIrqMask>
}
 80250da:	46c0      	nop			; (mov r8, r8)
 80250dc:	46bd      	mov	sp, r7
 80250de:	bd80      	pop	{r7, pc}
 80250e0:	20001e28 	.word	0x20001e28

080250e4 <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 80250e4:	b580      	push	{r7, lr}
 80250e6:	b086      	sub	sp, #24
 80250e8:	af00      	add	r7, sp, #0
 80250ea:	6078      	str	r0, [r7, #4]
 80250ec:	000a      	movs	r2, r1
 80250ee:	1cfb      	adds	r3, r7, #3
 80250f0:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 80250f2:	4b2c      	ldr	r3, [pc, #176]	; (80251a4 <itsdk_getUniqId+0xc0>)
 80250f4:	681b      	ldr	r3, [r3, #0]
 80250f6:	041a      	lsls	r2, r3, #16
 80250f8:	4b2b      	ldr	r3, [pc, #172]	; (80251a8 <itsdk_getUniqId+0xc4>)
 80250fa:	681b      	ldr	r3, [r3, #0]
 80250fc:	021b      	lsls	r3, r3, #8
 80250fe:	18d2      	adds	r2, r2, r3
 8025100:	4b2a      	ldr	r3, [pc, #168]	; (80251ac <itsdk_getUniqId+0xc8>)
 8025102:	681b      	ldr	r3, [r3, #0]
 8025104:	18d3      	adds	r3, r2, r3
 8025106:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 8025108:	2317      	movs	r3, #23
 802510a:	18fb      	adds	r3, r7, r3
 802510c:	2200      	movs	r2, #0
 802510e:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 8025110:	68fb      	ldr	r3, [r7, #12]
 8025112:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 8025114:	e03a      	b.n	802518c <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 8025116:	2317      	movs	r3, #23
 8025118:	18fb      	adds	r3, r7, r3
 802511a:	781b      	ldrb	r3, [r3, #0]
 802511c:	2203      	movs	r2, #3
 802511e:	4013      	ands	r3, r2
 8025120:	d11f      	bne.n	8025162 <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 8025122:	2317      	movs	r3, #23
 8025124:	18fb      	adds	r3, r7, r3
 8025126:	781b      	ldrb	r3, [r3, #0]
 8025128:	089b      	lsrs	r3, r3, #2
 802512a:	b2db      	uxtb	r3, r3
 802512c:	001a      	movs	r2, r3
 802512e:	2303      	movs	r3, #3
 8025130:	4013      	ands	r3, r2
 8025132:	2b01      	cmp	r3, #1
 8025134:	d008      	beq.n	8025148 <itsdk_getUniqId+0x64>
 8025136:	2b02      	cmp	r3, #2
 8025138:	d00b      	beq.n	8025152 <itsdk_getUniqId+0x6e>
 802513a:	2b00      	cmp	r3, #0
 802513c:	d10e      	bne.n	802515c <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 802513e:	68fb      	ldr	r3, [r7, #12]
 8025140:	4a18      	ldr	r2, [pc, #96]	; (80251a4 <itsdk_getUniqId+0xc0>)
 8025142:	4053      	eors	r3, r2
 8025144:	613b      	str	r3, [r7, #16]
 8025146:	e00d      	b.n	8025164 <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 8025148:	68fb      	ldr	r3, [r7, #12]
 802514a:	4a17      	ldr	r2, [pc, #92]	; (80251a8 <itsdk_getUniqId+0xc4>)
 802514c:	4053      	eors	r3, r2
 802514e:	613b      	str	r3, [r7, #16]
 8025150:	e008      	b.n	8025164 <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 8025152:	68fb      	ldr	r3, [r7, #12]
 8025154:	4a15      	ldr	r2, [pc, #84]	; (80251ac <itsdk_getUniqId+0xc8>)
 8025156:	4053      	eors	r3, r2
 8025158:	613b      	str	r3, [r7, #16]
 802515a:	e003      	b.n	8025164 <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 802515c:	68fb      	ldr	r3, [r7, #12]
 802515e:	613b      	str	r3, [r7, #16]
 8025160:	e000      	b.n	8025164 <itsdk_getUniqId+0x80>
			}
		}
 8025162:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 8025164:	2017      	movs	r0, #23
 8025166:	183b      	adds	r3, r7, r0
 8025168:	781b      	ldrb	r3, [r3, #0]
 802516a:	2203      	movs	r2, #3
 802516c:	4013      	ands	r3, r2
 802516e:	00db      	lsls	r3, r3, #3
 8025170:	693a      	ldr	r2, [r7, #16]
 8025172:	40da      	lsrs	r2, r3
 8025174:	0011      	movs	r1, r2
 8025176:	183b      	adds	r3, r7, r0
 8025178:	781b      	ldrb	r3, [r3, #0]
 802517a:	687a      	ldr	r2, [r7, #4]
 802517c:	18d3      	adds	r3, r2, r3
 802517e:	b2ca      	uxtb	r2, r1
 8025180:	701a      	strb	r2, [r3, #0]
		l++;
 8025182:	183b      	adds	r3, r7, r0
 8025184:	781a      	ldrb	r2, [r3, #0]
 8025186:	183b      	adds	r3, r7, r0
 8025188:	3201      	adds	r2, #1
 802518a:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 802518c:	2317      	movs	r3, #23
 802518e:	18fb      	adds	r3, r7, r3
 8025190:	781a      	ldrb	r2, [r3, #0]
 8025192:	1cfb      	adds	r3, r7, #3
 8025194:	781b      	ldrb	r3, [r3, #0]
 8025196:	b25b      	sxtb	r3, r3
 8025198:	429a      	cmp	r2, r3
 802519a:	dbbc      	blt.n	8025116 <itsdk_getUniqId+0x32>
	}

}
 802519c:	46c0      	nop			; (mov r8, r8)
 802519e:	46bd      	mov	sp, r7
 80251a0:	b006      	add	sp, #24
 80251a2:	bd80      	pop	{r7, pc}
 80251a4:	1ff80050 	.word	0x1ff80050
 80251a8:	1ff80054 	.word	0x1ff80054
 80251ac:	1ff80064 	.word	0x1ff80064

080251b0 <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 80251b0:	b580      	push	{r7, lr}
 80251b2:	b082      	sub	sp, #8
 80251b4:	af00      	add	r7, sp, #0
 80251b6:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
 80251b8:	687b      	ldr	r3, [r7, #4]
 80251ba:	0018      	movs	r0, r3
 80251bc:	f7da ffa4 	bl	8000108 <strlen>
 80251c0:	0003      	movs	r3, r0
 80251c2:	b29a      	uxth	r2, r3
 80251c4:	4b04      	ldr	r3, [pc, #16]	; (80251d8 <serial1_print+0x28>)
 80251c6:	6879      	ldr	r1, [r7, #4]
 80251c8:	4804      	ldr	r0, [pc, #16]	; (80251dc <serial1_print+0x2c>)
 80251ca:	f7e1 fbdf 	bl	800698c <HAL_UART_Transmit>
  #endif
}
 80251ce:	46c0      	nop			; (mov r8, r8)
 80251d0:	46bd      	mov	sp, r7
 80251d2:	b002      	add	sp, #8
 80251d4:	bd80      	pop	{r7, pc}
 80251d6:	46c0      	nop			; (mov r8, r8)
 80251d8:	0000ffff 	.word	0x0000ffff
 80251dc:	20001eb8 	.word	0x20001eb8

080251e0 <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 80251e0:	b580      	push	{r7, lr}
 80251e2:	b082      	sub	sp, #8
 80251e4:	af00      	add	r7, sp, #0
 80251e6:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 80251e8:	687b      	ldr	r3, [r7, #4]
 80251ea:	0018      	movs	r0, r3
 80251ec:	f7da ff8c 	bl	8000108 <strlen>
 80251f0:	0003      	movs	r3, r0
 80251f2:	b29a      	uxth	r2, r3
 80251f4:	4b04      	ldr	r3, [pc, #16]	; (8025208 <serial2_print+0x28>)
 80251f6:	6879      	ldr	r1, [r7, #4]
 80251f8:	4804      	ldr	r0, [pc, #16]	; (802520c <serial2_print+0x2c>)
 80251fa:	f7e1 fbc7 	bl	800698c <HAL_UART_Transmit>
  #endif
}
 80251fe:	46c0      	nop			; (mov r8, r8)
 8025200:	46bd      	mov	sp, r7
 8025202:	b002      	add	sp, #8
 8025204:	bd80      	pop	{r7, pc}
 8025206:	46c0      	nop			; (mov r8, r8)
 8025208:	0000ffff 	.word	0x0000ffff
 802520c:	20002048 	.word	0x20002048

08025210 <serial2_read>:
	char * eol = "\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)eol, strlen(eol),0xFFFF);
  #endif
}

serial_read_response_e serial2_read(char * ch) {
 8025210:	b580      	push	{r7, lr}
 8025212:	b082      	sub	sp, #8
 8025214:	af00      	add	r7, sp, #0
 8025216:	6078      	str	r0, [r7, #4]

#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0

	if ( __serial2_bufferRd != __serial2_bufferWr ) {
 8025218:	4b17      	ldr	r3, [pc, #92]	; (8025278 <serial2_read+0x68>)
 802521a:	781b      	ldrb	r3, [r3, #0]
 802521c:	b2da      	uxtb	r2, r3
 802521e:	4b17      	ldr	r3, [pc, #92]	; (802527c <serial2_read+0x6c>)
 8025220:	781b      	ldrb	r3, [r3, #0]
 8025222:	b2db      	uxtb	r3, r3
 8025224:	429a      	cmp	r2, r3
 8025226:	d021      	beq.n	802526c <serial2_read+0x5c>
		// char available
		*ch = __serial2_buffer[__serial2_bufferRd];
 8025228:	4b13      	ldr	r3, [pc, #76]	; (8025278 <serial2_read+0x68>)
 802522a:	781b      	ldrb	r3, [r3, #0]
 802522c:	b2db      	uxtb	r3, r3
 802522e:	001a      	movs	r2, r3
 8025230:	4b13      	ldr	r3, [pc, #76]	; (8025280 <serial2_read+0x70>)
 8025232:	5c9a      	ldrb	r2, [r3, r2]
 8025234:	687b      	ldr	r3, [r7, #4]
 8025236:	701a      	strb	r2, [r3, #0]
		itsdk_enterCriticalSection();
 8025238:	f7ff ff34 	bl	80250a4 <itsdk_enterCriticalSection>
		__serial2_bufferRd = (__serial2_bufferRd + 1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1);
 802523c:	4b0e      	ldr	r3, [pc, #56]	; (8025278 <serial2_read+0x68>)
 802523e:	781b      	ldrb	r3, [r3, #0]
 8025240:	b2db      	uxtb	r3, r3
 8025242:	3301      	adds	r3, #1
 8025244:	b2db      	uxtb	r3, r3
 8025246:	223f      	movs	r2, #63	; 0x3f
 8025248:	4013      	ands	r3, r2
 802524a:	b2da      	uxtb	r2, r3
 802524c:	4b0a      	ldr	r3, [pc, #40]	; (8025278 <serial2_read+0x68>)
 802524e:	701a      	strb	r2, [r3, #0]
		itsdk_leaveCriticalSection();
 8025250:	f7ff ff3c 	bl	80250cc <itsdk_leaveCriticalSection>
		if ( __serial2_bufferRd != __serial2_bufferWr ) {
 8025254:	4b08      	ldr	r3, [pc, #32]	; (8025278 <serial2_read+0x68>)
 8025256:	781b      	ldrb	r3, [r3, #0]
 8025258:	b2da      	uxtb	r2, r3
 802525a:	4b08      	ldr	r3, [pc, #32]	; (802527c <serial2_read+0x6c>)
 802525c:	781b      	ldrb	r3, [r3, #0]
 802525e:	b2db      	uxtb	r3, r3
 8025260:	429a      	cmp	r2, r3
 8025262:	d001      	beq.n	8025268 <serial2_read+0x58>
			return SERIAL_READ_PENDING_CHAR;
 8025264:	2301      	movs	r3, #1
 8025266:	e002      	b.n	802526e <serial2_read+0x5e>
		} else {
			return SERIAL_READ_SUCCESS;
 8025268:	2300      	movs	r3, #0
 802526a:	e000      	b.n	802526e <serial2_read+0x5e>
		}
	} else {
		return SERIAL_READ_NOCHAR;
 802526c:	2302      	movs	r3, #2
	return SERIAL_READ_NOCHAR;
  #else
	return SERIAL_READ_FAILED;
  #endif
#endif
}
 802526e:	0018      	movs	r0, r3
 8025270:	46bd      	mov	sp, r7
 8025272:	b002      	add	sp, #8
 8025274:	bd80      	pop	{r7, pc}
 8025276:	46c0      	nop			; (mov r8, r8)
 8025278:	2000227e 	.word	0x2000227e
 802527c:	20002235 	.word	0x20002235
 8025280:	20002238 	.word	0x20002238

08025284 <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8025284:	b580      	push	{r7, lr}
 8025286:	b082      	sub	sp, #8
 8025288:	af00      	add	r7, sp, #0
 802528a:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	2208      	movs	r2, #8
 8025292:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	681b      	ldr	r3, [r3, #0]
 8025298:	2204      	movs	r2, #4
 802529a:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	681b      	ldr	r3, [r3, #0]
 80252a0:	2202      	movs	r2, #2
 80252a2:	621a      	str	r2, [r3, #32]
}
 80252a4:	46c0      	nop			; (mov r8, r8)
 80252a6:	46bd      	mov	sp, r7
 80252a8:	b002      	add	sp, #8
 80252aa:	bd80      	pop	{r7, pc}

080252ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80252ac:	b580      	push	{r7, lr}
 80252ae:	b082      	sub	sp, #8
 80252b0:	af00      	add	r7, sp, #0
 80252b2:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART1)
 80252b4:	687b      	ldr	r3, [r7, #4]
 80252b6:	681b      	ldr	r3, [r3, #0]
 80252b8:	4a1c      	ldr	r2, [pc, #112]	; (802532c <HAL_UART_RxCpltCallback+0x80>)
 80252ba:	4293      	cmp	r3, r2
 80252bc:	d132      	bne.n	8025324 <HAL_UART_RxCpltCallback+0x78>
	  {
		  //log_info("toto uart wrapper.c l 413");
		  static indexOfReceive;
	    /* Transmit one byte with 100 ms timeout */
		  if ((char)byte == 'R'){
 80252be:	4b1c      	ldr	r3, [pc, #112]	; (8025330 <HAL_UART_RxCpltCallback+0x84>)
 80252c0:	781b      	ldrb	r3, [r3, #0]
 80252c2:	2b52      	cmp	r3, #82	; 0x52
 80252c4:	d102      	bne.n	80252cc <HAL_UART_RxCpltCallback+0x20>
			  indexOfReceive = 0;
 80252c6:	4b1b      	ldr	r3, [pc, #108]	; (8025334 <HAL_UART_RxCpltCallback+0x88>)
 80252c8:	2200      	movs	r2, #0
 80252ca:	601a      	str	r2, [r3, #0]
		  }
		  tabResult[indexOfReceive] = byte;
 80252cc:	4b19      	ldr	r3, [pc, #100]	; (8025334 <HAL_UART_RxCpltCallback+0x88>)
 80252ce:	681b      	ldr	r3, [r3, #0]
 80252d0:	4a17      	ldr	r2, [pc, #92]	; (8025330 <HAL_UART_RxCpltCallback+0x84>)
 80252d2:	7811      	ldrb	r1, [r2, #0]
 80252d4:	4a18      	ldr	r2, [pc, #96]	; (8025338 <HAL_UART_RxCpltCallback+0x8c>)
 80252d6:	54d1      	strb	r1, [r2, r3]
		  indexOfReceive++;
 80252d8:	4b16      	ldr	r3, [pc, #88]	; (8025334 <HAL_UART_RxCpltCallback+0x88>)
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	1c5a      	adds	r2, r3, #1
 80252de:	4b15      	ldr	r3, [pc, #84]	; (8025334 <HAL_UART_RxCpltCallback+0x88>)
 80252e0:	601a      	str	r2, [r3, #0]
	    /* Receive one byte in interrupt mode */
		  if (indexOfReceive!=5){
 80252e2:	4b14      	ldr	r3, [pc, #80]	; (8025334 <HAL_UART_RxCpltCallback+0x88>)
 80252e4:	681b      	ldr	r3, [r3, #0]
 80252e6:	2b05      	cmp	r3, #5
 80252e8:	d006      	beq.n	80252f8 <HAL_UART_RxCpltCallback+0x4c>
			  HAL_UART_Receive_IT(&huart1, &byte, 1);
 80252ea:	4911      	ldr	r1, [pc, #68]	; (8025330 <HAL_UART_RxCpltCallback+0x84>)
 80252ec:	4b13      	ldr	r3, [pc, #76]	; (802533c <HAL_UART_RxCpltCallback+0x90>)
 80252ee:	2201      	movs	r2, #1
 80252f0:	0018      	movs	r0, r3
 80252f2:	f7e1 fbf3 	bl	8006adc <HAL_UART_Receive_IT>
			  indexOfReceive = 0;
		  }

	  }

}
 80252f6:	e015      	b.n	8025324 <HAL_UART_RxCpltCallback+0x78>
			  tabToPrint[0] = 0x30; //Force to 0
 80252f8:	4b11      	ldr	r3, [pc, #68]	; (8025340 <HAL_UART_RxCpltCallback+0x94>)
 80252fa:	2230      	movs	r2, #48	; 0x30
 80252fc:	701a      	strb	r2, [r3, #0]
			  tabToPrint[1] = tabResult[1];
 80252fe:	4b0e      	ldr	r3, [pc, #56]	; (8025338 <HAL_UART_RxCpltCallback+0x8c>)
 8025300:	785a      	ldrb	r2, [r3, #1]
 8025302:	4b0f      	ldr	r3, [pc, #60]	; (8025340 <HAL_UART_RxCpltCallback+0x94>)
 8025304:	705a      	strb	r2, [r3, #1]
			  tabToPrint[2] = tabResult[2];
 8025306:	4b0c      	ldr	r3, [pc, #48]	; (8025338 <HAL_UART_RxCpltCallback+0x8c>)
 8025308:	789a      	ldrb	r2, [r3, #2]
 802530a:	4b0d      	ldr	r3, [pc, #52]	; (8025340 <HAL_UART_RxCpltCallback+0x94>)
 802530c:	709a      	strb	r2, [r3, #2]
			  tabToPrint[3] = tabResult[3];
 802530e:	4b0a      	ldr	r3, [pc, #40]	; (8025338 <HAL_UART_RxCpltCallback+0x8c>)
 8025310:	78da      	ldrb	r2, [r3, #3]
 8025312:	4b0b      	ldr	r3, [pc, #44]	; (8025340 <HAL_UART_RxCpltCallback+0x94>)
 8025314:	70da      	strb	r2, [r3, #3]
			  tabToPrint[4] = tabResult[4];
 8025316:	4b08      	ldr	r3, [pc, #32]	; (8025338 <HAL_UART_RxCpltCallback+0x8c>)
 8025318:	791a      	ldrb	r2, [r3, #4]
 802531a:	4b09      	ldr	r3, [pc, #36]	; (8025340 <HAL_UART_RxCpltCallback+0x94>)
 802531c:	711a      	strb	r2, [r3, #4]
			  indexOfReceive = 0;
 802531e:	4b05      	ldr	r3, [pc, #20]	; (8025334 <HAL_UART_RxCpltCallback+0x88>)
 8025320:	2200      	movs	r2, #0
 8025322:	601a      	str	r2, [r3, #0]
}
 8025324:	46c0      	nop			; (mov r8, r8)
 8025326:	46bd      	mov	sp, r7
 8025328:	b002      	add	sp, #8
 802532a:	bd80      	pop	{r7, pc}
 802532c:	40013800 	.word	0x40013800
 8025330:	2000227d 	.word	0x2000227d
 8025334:	20001e2c 	.word	0x20001e2c
 8025338:	20002230 	.word	0x20002230
 802533c:	20001eb8 	.word	0x20001eb8
 8025340:	20002278 	.word	0x20002278

08025344 <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 8025344:	b580      	push	{r7, lr}
 8025346:	b082      	sub	sp, #8
 8025348:	af00      	add	r7, sp, #0
 802534a:	0002      	movs	r2, r0
 802534c:	6039      	str	r1, [r7, #0]
 802534e:	1dfb      	adds	r3, r7, #7
 8025350:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 8025352:	46c0      	nop			; (mov r8, r8)
 8025354:	46bd      	mov	sp, r7
 8025356:	b002      	add	sp, #8
 8025358:	bd80      	pop	{r7, pc}
	...

0802535c <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 802535c:	b580      	push	{r7, lr}
 802535e:	b088      	sub	sp, #32
 8025360:	af00      	add	r7, sp, #0
 8025362:	60b9      	str	r1, [r7, #8]
 8025364:	607a      	str	r2, [r7, #4]
 8025366:	603b      	str	r3, [r7, #0]
 8025368:	210f      	movs	r1, #15
 802536a:	187b      	adds	r3, r7, r1
 802536c:	1c02      	adds	r2, r0, #0
 802536e:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 8025370:	687b      	ldr	r3, [r7, #4]
 8025372:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 8025374:	187b      	adds	r3, r7, r1
 8025376:	781b      	ldrb	r3, [r3, #0]
 8025378:	2b00      	cmp	r3, #0
 802537a:	d106      	bne.n	802538a <_eeprom_write+0x2e>
 802537c:	683a      	ldr	r2, [r7, #0]
 802537e:	68bb      	ldr	r3, [r7, #8]
 8025380:	18d2      	adds	r2, r2, r3
 8025382:	23c0      	movs	r3, #192	; 0xc0
 8025384:	015b      	lsls	r3, r3, #5
 8025386:	429a      	cmp	r2, r3
 8025388:	d906      	bls.n	8025398 <_eeprom_write+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 802538a:	683b      	ldr	r3, [r7, #0]
 802538c:	b29b      	uxth	r3, r3
 802538e:	4a3f      	ldr	r2, [pc, #252]	; (802548c <_eeprom_write+0x130>)
 8025390:	0019      	movs	r1, r3
 8025392:	0010      	movs	r0, r2
 8025394:	f7fd fd58 	bl	8022e48 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 8025398:	68bb      	ldr	r3, [r7, #8]
 802539a:	4a3d      	ldr	r2, [pc, #244]	; (8025490 <_eeprom_write+0x134>)
 802539c:	4694      	mov	ip, r2
 802539e:	4463      	add	r3, ip
 80253a0:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 80253a2:	69fb      	ldr	r3, [r7, #28]
 80253a4:	2203      	movs	r2, #3
 80253a6:	4013      	ands	r3, r2
 80253a8:	d006      	beq.n	80253b8 <_eeprom_write+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,1);
 80253aa:	4b3a      	ldr	r3, [pc, #232]	; (8025494 <_eeprom_write+0x138>)
 80253ac:	2101      	movs	r1, #1
 80253ae:	0018      	movs	r0, r3
 80253b0:	f7fd fd4a 	bl	8022e48 <itsdk_error_report>
	    return false;
 80253b4:	2300      	movs	r3, #0
 80253b6:	e064      	b.n	8025482 <_eeprom_write+0x126>
	}

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 80253b8:	4b37      	ldr	r3, [pc, #220]	; (8025498 <_eeprom_write+0x13c>)
 80253ba:	685b      	ldr	r3, [r3, #4]
 80253bc:	2201      	movs	r2, #1
 80253be:	4013      	ands	r3, r2
 80253c0:	d005      	beq.n	80253ce <_eeprom_write+0x72>
			FLASH->PEKEYR = FLASH_PEKEY1;
 80253c2:	4b35      	ldr	r3, [pc, #212]	; (8025498 <_eeprom_write+0x13c>)
 80253c4:	4a35      	ldr	r2, [pc, #212]	; (802549c <_eeprom_write+0x140>)
 80253c6:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 80253c8:	4b33      	ldr	r3, [pc, #204]	; (8025498 <_eeprom_write+0x13c>)
 80253ca:	4a35      	ldr	r2, [pc, #212]	; (80254a0 <_eeprom_write+0x144>)
 80253cc:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 80253ce:	2300      	movs	r3, #0
 80253d0:	61bb      	str	r3, [r7, #24]
 80253d2:	e04b      	b.n	802546c <_eeprom_write+0x110>
		v = _data[i] << 24;
 80253d4:	69bb      	ldr	r3, [r7, #24]
 80253d6:	697a      	ldr	r2, [r7, #20]
 80253d8:	18d3      	adds	r3, r2, r3
 80253da:	781b      	ldrb	r3, [r3, #0]
 80253dc:	061b      	lsls	r3, r3, #24
 80253de:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 80253e0:	69bb      	ldr	r3, [r7, #24]
 80253e2:	3301      	adds	r3, #1
 80253e4:	683a      	ldr	r2, [r7, #0]
 80253e6:	429a      	cmp	r2, r3
 80253e8:	dd07      	ble.n	80253fa <_eeprom_write+0x9e>
 80253ea:	69bb      	ldr	r3, [r7, #24]
 80253ec:	3301      	adds	r3, #1
 80253ee:	697a      	ldr	r2, [r7, #20]
 80253f0:	18d3      	adds	r3, r2, r3
 80253f2:	781b      	ldrb	r3, [r3, #0]
 80253f4:	041b      	lsls	r3, r3, #16
 80253f6:	001a      	movs	r2, r3
 80253f8:	e000      	b.n	80253fc <_eeprom_write+0xa0>
 80253fa:	2200      	movs	r2, #0
 80253fc:	693b      	ldr	r3, [r7, #16]
 80253fe:	189b      	adds	r3, r3, r2
 8025400:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 8025402:	69bb      	ldr	r3, [r7, #24]
 8025404:	3302      	adds	r3, #2
 8025406:	683a      	ldr	r2, [r7, #0]
 8025408:	429a      	cmp	r2, r3
 802540a:	dd07      	ble.n	802541c <_eeprom_write+0xc0>
 802540c:	69bb      	ldr	r3, [r7, #24]
 802540e:	3302      	adds	r3, #2
 8025410:	697a      	ldr	r2, [r7, #20]
 8025412:	18d3      	adds	r3, r2, r3
 8025414:	781b      	ldrb	r3, [r3, #0]
 8025416:	021b      	lsls	r3, r3, #8
 8025418:	001a      	movs	r2, r3
 802541a:	e000      	b.n	802541e <_eeprom_write+0xc2>
 802541c:	2200      	movs	r2, #0
 802541e:	693b      	ldr	r3, [r7, #16]
 8025420:	189b      	adds	r3, r3, r2
 8025422:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 8025424:	69bb      	ldr	r3, [r7, #24]
 8025426:	3303      	adds	r3, #3
 8025428:	683a      	ldr	r2, [r7, #0]
 802542a:	429a      	cmp	r2, r3
 802542c:	dd06      	ble.n	802543c <_eeprom_write+0xe0>
 802542e:	69bb      	ldr	r3, [r7, #24]
 8025430:	3303      	adds	r3, #3
 8025432:	697a      	ldr	r2, [r7, #20]
 8025434:	18d3      	adds	r3, r2, r3
 8025436:	781b      	ldrb	r3, [r3, #0]
 8025438:	001a      	movs	r2, r3
 802543a:	e000      	b.n	802543e <_eeprom_write+0xe2>
 802543c:	2200      	movs	r2, #0
 802543e:	693b      	ldr	r3, [r7, #16]
 8025440:	189b      	adds	r3, r3, r2
 8025442:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 8025444:	69fb      	ldr	r3, [r7, #28]
 8025446:	0018      	movs	r0, r3
 8025448:	f000 f8a6 	bl	8025598 <__eepromRead>
 802544c:	0002      	movs	r2, r0
 802544e:	693b      	ldr	r3, [r7, #16]
 8025450:	4293      	cmp	r3, r2
 8025452:	d005      	beq.n	8025460 <_eeprom_write+0x104>
 8025454:	693a      	ldr	r2, [r7, #16]
 8025456:	69fb      	ldr	r3, [r7, #28]
 8025458:	0011      	movs	r1, r2
 802545a:	0018      	movs	r0, r3
 802545c:	f000 f8a6 	bl	80255ac <__eepromWrite>
		_eepromAddr+=4;
 8025460:	69fb      	ldr	r3, [r7, #28]
 8025462:	3304      	adds	r3, #4
 8025464:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 8025466:	69bb      	ldr	r3, [r7, #24]
 8025468:	3304      	adds	r3, #4
 802546a:	61bb      	str	r3, [r7, #24]
 802546c:	69ba      	ldr	r2, [r7, #24]
 802546e:	683b      	ldr	r3, [r7, #0]
 8025470:	429a      	cmp	r2, r3
 8025472:	dbaf      	blt.n	80253d4 <_eeprom_write+0x78>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 8025474:	4b08      	ldr	r3, [pc, #32]	; (8025498 <_eeprom_write+0x13c>)
 8025476:	685a      	ldr	r2, [r3, #4]
 8025478:	4b07      	ldr	r3, [pc, #28]	; (8025498 <_eeprom_write+0x13c>)
 802547a:	2101      	movs	r1, #1
 802547c:	430a      	orrs	r2, r1
 802547e:	605a      	str	r2, [r3, #4]
	return true;
 8025480:	2301      	movs	r3, #1
}
 8025482:	0018      	movs	r0, r3
 8025484:	46bd      	mov	sp, r7
 8025486:	b008      	add	sp, #32
 8025488:	bd80      	pop	{r7, pc}
 802548a:	46c0      	nop			; (mov r8, r8)
 802548c:	d0000030 	.word	0xd0000030
 8025490:	08080000 	.word	0x08080000
 8025494:	d0000031 	.word	0xd0000031
 8025498:	40022000 	.word	0x40022000
 802549c:	89abcdef 	.word	0x89abcdef
 80254a0:	02030405 	.word	0x02030405

080254a4 <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 80254a4:	b580      	push	{r7, lr}
 80254a6:	b088      	sub	sp, #32
 80254a8:	af00      	add	r7, sp, #0
 80254aa:	60b9      	str	r1, [r7, #8]
 80254ac:	607a      	str	r2, [r7, #4]
 80254ae:	603b      	str	r3, [r7, #0]
 80254b0:	210f      	movs	r1, #15
 80254b2:	187b      	adds	r3, r7, r1
 80254b4:	1c02      	adds	r2, r0, #0
 80254b6:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 80254b8:	687b      	ldr	r3, [r7, #4]
 80254ba:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 80254bc:	187b      	adds	r3, r7, r1
 80254be:	781b      	ldrb	r3, [r3, #0]
 80254c0:	2b00      	cmp	r3, #0
 80254c2:	d106      	bne.n	80254d2 <_eeprom_read+0x2e>
 80254c4:	683a      	ldr	r2, [r7, #0]
 80254c6:	68bb      	ldr	r3, [r7, #8]
 80254c8:	18d2      	adds	r2, r2, r3
 80254ca:	23c0      	movs	r3, #192	; 0xc0
 80254cc:	015b      	lsls	r3, r3, #5
 80254ce:	429a      	cmp	r2, r3
 80254d0:	d906      	bls.n	80254e0 <_eeprom_read+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 80254d2:	683b      	ldr	r3, [r7, #0]
 80254d4:	b29b      	uxth	r3, r3
 80254d6:	4a2d      	ldr	r2, [pc, #180]	; (802558c <_eeprom_read+0xe8>)
 80254d8:	0019      	movs	r1, r3
 80254da:	0010      	movs	r0, r2
 80254dc:	f7fd fcb4 	bl	8022e48 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 80254e0:	68bb      	ldr	r3, [r7, #8]
 80254e2:	4a2b      	ldr	r2, [pc, #172]	; (8025590 <_eeprom_read+0xec>)
 80254e4:	4694      	mov	ip, r2
 80254e6:	4463      	add	r3, ip
 80254e8:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 80254ea:	69fb      	ldr	r3, [r7, #28]
 80254ec:	2203      	movs	r2, #3
 80254ee:	4013      	ands	r3, r2
 80254f0:	d006      	beq.n	8025500 <_eeprom_read+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,0);
 80254f2:	4b28      	ldr	r3, [pc, #160]	; (8025594 <_eeprom_read+0xf0>)
 80254f4:	2100      	movs	r1, #0
 80254f6:	0018      	movs	r0, r3
 80254f8:	f7fd fca6 	bl	8022e48 <itsdk_error_report>
	    return false;
 80254fc:	2300      	movs	r3, #0
 80254fe:	e040      	b.n	8025582 <_eeprom_read+0xde>
	}

	// Read data
	for (int i = 0; i < len; i += 4) {
 8025500:	2300      	movs	r3, #0
 8025502:	61bb      	str	r3, [r7, #24]
 8025504:	e038      	b.n	8025578 <_eeprom_read+0xd4>
		v = __eepromRead(_eepromAddr);
 8025506:	69fb      	ldr	r3, [r7, #28]
 8025508:	0018      	movs	r0, r3
 802550a:	f000 f845 	bl	8025598 <__eepromRead>
 802550e:	0003      	movs	r3, r0
 8025510:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 8025512:	693b      	ldr	r3, [r7, #16]
 8025514:	0e19      	lsrs	r1, r3, #24
 8025516:	69bb      	ldr	r3, [r7, #24]
 8025518:	697a      	ldr	r2, [r7, #20]
 802551a:	18d3      	adds	r3, r2, r3
 802551c:	b2ca      	uxtb	r2, r1
 802551e:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 8025520:	69bb      	ldr	r3, [r7, #24]
 8025522:	3301      	adds	r3, #1
 8025524:	683a      	ldr	r2, [r7, #0]
 8025526:	429a      	cmp	r2, r3
 8025528:	dd07      	ble.n	802553a <_eeprom_read+0x96>
 802552a:	693b      	ldr	r3, [r7, #16]
 802552c:	0c19      	lsrs	r1, r3, #16
 802552e:	69bb      	ldr	r3, [r7, #24]
 8025530:	3301      	adds	r3, #1
 8025532:	697a      	ldr	r2, [r7, #20]
 8025534:	18d3      	adds	r3, r2, r3
 8025536:	b2ca      	uxtb	r2, r1
 8025538:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 802553a:	69bb      	ldr	r3, [r7, #24]
 802553c:	3302      	adds	r3, #2
 802553e:	683a      	ldr	r2, [r7, #0]
 8025540:	429a      	cmp	r2, r3
 8025542:	dd07      	ble.n	8025554 <_eeprom_read+0xb0>
 8025544:	693b      	ldr	r3, [r7, #16]
 8025546:	0a19      	lsrs	r1, r3, #8
 8025548:	69bb      	ldr	r3, [r7, #24]
 802554a:	3302      	adds	r3, #2
 802554c:	697a      	ldr	r2, [r7, #20]
 802554e:	18d3      	adds	r3, r2, r3
 8025550:	b2ca      	uxtb	r2, r1
 8025552:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 8025554:	69bb      	ldr	r3, [r7, #24]
 8025556:	3303      	adds	r3, #3
 8025558:	683a      	ldr	r2, [r7, #0]
 802555a:	429a      	cmp	r2, r3
 802555c:	dd06      	ble.n	802556c <_eeprom_read+0xc8>
 802555e:	69bb      	ldr	r3, [r7, #24]
 8025560:	3303      	adds	r3, #3
 8025562:	697a      	ldr	r2, [r7, #20]
 8025564:	18d3      	adds	r3, r2, r3
 8025566:	693a      	ldr	r2, [r7, #16]
 8025568:	b2d2      	uxtb	r2, r2
 802556a:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 802556c:	69fb      	ldr	r3, [r7, #28]
 802556e:	3304      	adds	r3, #4
 8025570:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 8025572:	69bb      	ldr	r3, [r7, #24]
 8025574:	3304      	adds	r3, #4
 8025576:	61bb      	str	r3, [r7, #24]
 8025578:	69ba      	ldr	r2, [r7, #24]
 802557a:	683b      	ldr	r3, [r7, #0]
 802557c:	429a      	cmp	r2, r3
 802557e:	dbc2      	blt.n	8025506 <_eeprom_read+0x62>
	}
	return true;
 8025580:	2301      	movs	r3, #1
}
 8025582:	0018      	movs	r0, r3
 8025584:	46bd      	mov	sp, r7
 8025586:	b008      	add	sp, #32
 8025588:	bd80      	pop	{r7, pc}
 802558a:	46c0      	nop			; (mov r8, r8)
 802558c:	d0000030 	.word	0xd0000030
 8025590:	08080000 	.word	0x08080000
 8025594:	d0000031 	.word	0xd0000031

08025598 <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 8025598:	b580      	push	{r7, lr}
 802559a:	b082      	sub	sp, #8
 802559c:	af00      	add	r7, sp, #0
 802559e:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 80255a0:	687b      	ldr	r3, [r7, #4]
 80255a2:	681b      	ldr	r3, [r3, #0]
}
 80255a4:	0018      	movs	r0, r3
 80255a6:	46bd      	mov	sp, r7
 80255a8:	b002      	add	sp, #8
 80255aa:	bd80      	pop	{r7, pc}

080255ac <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 80255ac:	b580      	push	{r7, lr}
 80255ae:	b084      	sub	sp, #16
 80255b0:	af00      	add	r7, sp, #0
 80255b2:	6078      	str	r0, [r7, #4]
 80255b4:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 80255b6:	230e      	movs	r3, #14
 80255b8:	18fb      	adds	r3, r7, r3
 80255ba:	4a20      	ldr	r2, [pc, #128]	; (802563c <__eepromWrite+0x90>)
 80255bc:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 80255be:	e005      	b.n	80255cc <__eepromWrite+0x20>
 80255c0:	210e      	movs	r1, #14
 80255c2:	187b      	adds	r3, r7, r1
 80255c4:	881a      	ldrh	r2, [r3, #0]
 80255c6:	187b      	adds	r3, r7, r1
 80255c8:	3a01      	subs	r2, #1
 80255ca:	801a      	strh	r2, [r3, #0]
 80255cc:	4b1c      	ldr	r3, [pc, #112]	; (8025640 <__eepromWrite+0x94>)
 80255ce:	699b      	ldr	r3, [r3, #24]
 80255d0:	2201      	movs	r2, #1
 80255d2:	4013      	ands	r3, r2
 80255d4:	d004      	beq.n	80255e0 <__eepromWrite+0x34>
 80255d6:	230e      	movs	r3, #14
 80255d8:	18fb      	adds	r3, r7, r3
 80255da:	881b      	ldrh	r3, [r3, #0]
 80255dc:	2b00      	cmp	r3, #0
 80255de:	d1ef      	bne.n	80255c0 <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 80255e0:	230e      	movs	r3, #14
 80255e2:	18fb      	adds	r3, r7, r3
 80255e4:	881b      	ldrh	r3, [r3, #0]
 80255e6:	2b00      	cmp	r3, #0
 80255e8:	d101      	bne.n	80255ee <__eepromWrite+0x42>
 80255ea:	2300      	movs	r3, #0
 80255ec:	e021      	b.n	8025632 <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 80255ee:	4b14      	ldr	r3, [pc, #80]	; (8025640 <__eepromWrite+0x94>)
 80255f0:	685a      	ldr	r2, [r3, #4]
 80255f2:	4b13      	ldr	r3, [pc, #76]	; (8025640 <__eepromWrite+0x94>)
 80255f4:	4913      	ldr	r1, [pc, #76]	; (8025644 <__eepromWrite+0x98>)
 80255f6:	400a      	ands	r2, r1
 80255f8:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 80255fa:	687b      	ldr	r3, [r7, #4]
 80255fc:	683a      	ldr	r2, [r7, #0]
 80255fe:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 8025600:	e005      	b.n	802560e <__eepromWrite+0x62>
 8025602:	210e      	movs	r1, #14
 8025604:	187b      	adds	r3, r7, r1
 8025606:	881a      	ldrh	r2, [r3, #0]
 8025608:	187b      	adds	r3, r7, r1
 802560a:	3a01      	subs	r2, #1
 802560c:	801a      	strh	r2, [r3, #0]
 802560e:	4b0c      	ldr	r3, [pc, #48]	; (8025640 <__eepromWrite+0x94>)
 8025610:	699b      	ldr	r3, [r3, #24]
 8025612:	2201      	movs	r2, #1
 8025614:	4013      	ands	r3, r2
 8025616:	d004      	beq.n	8025622 <__eepromWrite+0x76>
 8025618:	230e      	movs	r3, #14
 802561a:	18fb      	adds	r3, r7, r3
 802561c:	881b      	ldrh	r3, [r3, #0]
 802561e:	2b00      	cmp	r3, #0
 8025620:	d1ef      	bne.n	8025602 <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 8025622:	230e      	movs	r3, #14
 8025624:	18fb      	adds	r3, r7, r3
 8025626:	881b      	ldrh	r3, [r3, #0]
 8025628:	2b00      	cmp	r3, #0
 802562a:	d101      	bne.n	8025630 <__eepromWrite+0x84>
 802562c:	2300      	movs	r3, #0
 802562e:	e000      	b.n	8025632 <__eepromWrite+0x86>

	return true;
 8025630:	2301      	movs	r3, #1
}
 8025632:	0018      	movs	r0, r3
 8025634:	46bd      	mov	sp, r7
 8025636:	b004      	add	sp, #16
 8025638:	bd80      	pop	{r7, pc}
 802563a:	46c0      	nop			; (mov r8, r8)
 802563c:	00002710 	.word	0x00002710
 8025640:	40022000 	.word	0x40022000
 8025644:	fffffeff 	.word	0xfffffeff

08025648 <stm32l_lowPowerSetup>:

/**
 * Setup the STM32L Low Power mode for the given amount of ms
 * 0xFFFFFFFF ms when no time limit
 */
stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerSetup(uint32_t durationMs, stm32_lowPowerMode_e mode) {
 8025648:	b570      	push	{r4, r5, r6, lr}
 802564a:	000c      	movs	r4, r1
 802564c:	b082      	sub	sp, #8
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// -------------------------------------------------------------
		// Configure the STM32L0x1 for switching to low power stop mode
		// -------------------------------------------------------------
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			if ( durationMs == __INFINITE_32B ) {
 802564e:	1c43      	adds	r3, r0, #1
 8025650:	d062      	beq.n	8025718 <stm32l_lowPowerSetup+0xd0>
				#endif
			}
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
		    } else {
			   return STM32L_LOWPOWER_TOOSHORT;
 8025652:	2301      	movs	r3, #1
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
 8025654:	2805      	cmp	r0, #5
 8025656:	d95c      	bls.n	8025712 <stm32l_lowPowerSetup+0xca>
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
 8025658:	f000 f942 	bl	80258e0 <rtc_configure4LowPower>
			}
		#endif
		HAL_SuspendTick();
 802565c:	f7de fb4a 	bl	8003cf4 <HAL_SuspendTick>
	    __HAL_RCC_PWR_CLK_ENABLE();				// Enable Power Control clock
 8025660:	2380      	movs	r3, #128	; 0x80
 8025662:	4a2e      	ldr	r2, [pc, #184]	; (802571c <stm32l_lowPowerSetup+0xd4>)
 8025664:	055b      	lsls	r3, r3, #21
 8025666:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8025668:	430b      	orrs	r3, r1
 802566a:	6393      	str	r3, [r2, #56]	; 0x38
 	    HAL_PWREx_EnableUltraLowPower();		// Ultra low power mode
 802566c:	f7df f8fe 	bl	800486c <HAL_PWREx_EnableUltraLowPower>
 	    HAL_PWREx_EnableFastWakeUp();			// Fast wake-up for ultra low power mode
 8025670:	f7df f8ee 	bl	8004850 <HAL_PWREx_EnableFastWakeUp>

 	    if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 8025674:	2c00      	cmp	r4, #0
 8025676:	d144      	bne.n	8025702 <stm32l_lowPowerSetup+0xba>
				while(__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET){};
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART1 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET){};
 8025678:	2280      	movs	r2, #128	; 0x80
 802567a:	4d29      	ldr	r5, [pc, #164]	; (8025720 <stm32l_lowPowerSetup+0xd8>)
 802567c:	0252      	lsls	r2, r2, #9
 802567e:	6829      	ldr	r1, [r5, #0]
 8025680:	69cb      	ldr	r3, [r1, #28]
 8025682:	4213      	tst	r3, r2
 8025684:	d1fc      	bne.n	8025680 <stm32l_lowPowerSetup+0x38>
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET){};
 8025686:	2180      	movs	r1, #128	; 0x80
 8025688:	4e26      	ldr	r6, [pc, #152]	; (8025724 <stm32l_lowPowerSetup+0xdc>)
 802568a:	0249      	lsls	r1, r1, #9
 802568c:	6833      	ldr	r3, [r6, #0]
 802568e:	69da      	ldr	r2, [r3, #28]
 8025690:	420a      	tst	r2, r1
 8025692:	d1fc      	bne.n	802568e <stm32l_lowPowerSetup+0x46>
			#endif


			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART2 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET){}
 8025694:	2480      	movs	r4, #128	; 0x80
 8025696:	03e4      	lsls	r4, r4, #15
 8025698:	69da      	ldr	r2, [r3, #28]
 802569a:	4222      	tst	r2, r4
 802569c:	d0fc      	beq.n	8025698 <stm32l_lowPowerSetup+0x50>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 802569e:	23c0      	movs	r3, #192	; 0xc0
 80256a0:	039b      	lsls	r3, r3, #14
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 80256a2:	0019      	movs	r1, r3
 80256a4:	9a01      	ldr	r2, [sp, #4]
 80256a6:	0030      	movs	r0, r6
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 80256a8:	9300      	str	r3, [sp, #0]
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 80256aa:	f7e2 f983 	bl	80079b4 <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80256ae:	6833      	ldr	r3, [r6, #0]
				HAL_UARTEx_EnableStopMode(&huart2);
 80256b0:	0030      	movs	r0, r6
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80256b2:	689a      	ldr	r2, [r3, #8]
 80256b4:	4314      	orrs	r4, r2
 80256b6:	609c      	str	r4, [r3, #8]
			  #endif
			#endif

			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART1 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 80256b8:	2480      	movs	r4, #128	; 0x80
				HAL_UARTEx_EnableStopMode(&huart2);
 80256ba:	f7e2 f9e1 	bl	8007a80 <HAL_UARTEx_EnableStopMode>
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET){}
 80256be:	682a      	ldr	r2, [r5, #0]
 80256c0:	03e4      	lsls	r4, r4, #15
 80256c2:	69d3      	ldr	r3, [r2, #28]
 80256c4:	4223      	tst	r3, r4
 80256c6:	d0fc      	beq.n	80256c2 <stm32l_lowPowerSetup+0x7a>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1,wakeup);
 80256c8:	9900      	ldr	r1, [sp, #0]
 80256ca:	9a01      	ldr	r2, [sp, #4]
 80256cc:	0028      	movs	r0, r5
 80256ce:	f7e2 f971 	bl	80079b4 <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80256d2:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart1);
 80256d4:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80256d6:	689a      	ldr	r2, [r3, #8]
 80256d8:	4314      	orrs	r4, r2
 80256da:	609c      	str	r4, [r3, #8]
				HAL_UARTEx_EnableStopMode(&huart1);
 80256dc:	f7e2 f9d0 	bl	8007a80 <HAL_UARTEx_EnableStopMode>
				#if (ITSDK_WITH_UART & __UART_USART1) > 0
					__HAL_RCC_USART1_CLK_DISABLE();
				#endif
			#endif

			_stm32l_disableGpios();					// Disable GPIOs based on configuration
 80256e0:	f000 f89a 	bl	8025818 <_stm32l_disableGpios>
			  // Register interrupt handler
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
																// (the previously existing handler will be bypassed)
			#else
			  gpio_interruptDisableAll();						// Disable GPIOs interrupts
 80256e4:	f7ff fba5 	bl	8024e32 <gpio_interruptDisableAll>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				__HAL_RCC_SPI1_CLK_DISABLE();
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				__HAL_RCC_TIM21_CLK_DISABLE();
 80256e8:	2204      	movs	r2, #4
				__HAL_RCC_SPI1_CLK_DISABLE();
 80256ea:	4b0c      	ldr	r3, [pc, #48]	; (802571c <stm32l_lowPowerSetup+0xd4>)
 80256ec:	4c0e      	ldr	r4, [pc, #56]	; (8025728 <stm32l_lowPowerSetup+0xe0>)
 80256ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_DISABLE();
 80256f0:	480e      	ldr	r0, [pc, #56]	; (802572c <stm32l_lowPowerSetup+0xe4>)
				__HAL_RCC_SPI1_CLK_DISABLE();
 80256f2:	4021      	ands	r1, r4
 80256f4:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_TIM21_CLK_DISABLE();
 80256f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80256f8:	4391      	bics	r1, r2
 80256fa:	6359      	str	r1, [r3, #52]	; 0x34
				__HAL_RCC_ADC1_CLK_DISABLE();
 80256fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80256fe:	4002      	ands	r2, r0
 8025700:	635a      	str	r2, [r3, #52]	; 0x34
		// ??? add ?? Not yet tested
		//__HAL_FLASH_SLEEP_POWERDOWN_ENABLE();


 	    // Switch to STOPMode
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 8025702:	22ff      	movs	r2, #255	; 0xff
 8025704:	4b0a      	ldr	r3, [pc, #40]	; (8025730 <stm32l_lowPowerSetup+0xe8>)
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			__lowPower_wakeup_pin=0xFFFF;
		#endif
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8025706:	2101      	movs	r1, #1
 8025708:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 802570a:	701a      	strb	r2, [r3, #0]
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 802570c:	f7df f86c 	bl	80047e8 <HAL_PWR_EnterSTOPMode>
	}
	return STM32L_LOWPOWER_SUCCESS;
 8025710:	2300      	movs	r3, #0
}
 8025712:	0018      	movs	r0, r3
 8025714:	b002      	add	sp, #8
 8025716:	bd70      	pop	{r4, r5, r6, pc}
					  durationMs = ITSDK_WDG_MS - 5;
 8025718:	4806      	ldr	r0, [pc, #24]	; (8025734 <stm32l_lowPowerSetup+0xec>)
 802571a:	e79d      	b.n	8025658 <stm32l_lowPowerSetup+0x10>
 802571c:	40021000 	.word	0x40021000
 8025720:	20001eb8 	.word	0x20001eb8
 8025724:	20002048 	.word	0x20002048
 8025728:	ffffefff 	.word	0xffffefff
 802572c:	fffffdff 	.word	0xfffffdff
 8025730:	20000058 	.word	0x20000058
 8025734:	00003e7b 	.word	0x00003e7b

08025738 <stm32l_lowPowerResume>:


stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerResume(stm32_lowPowerMode_e mode) {
 8025738:	b510      	push	{r4, lr}
 802573a:	0004      	movs	r4, r0
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// ------------------------------------------------------------
		// Restore from STOP MODE
		// ------------------------------------------------------------

		SystemClock_Config();
 802573c:	f7dd fcf2 	bl	8003124 <SystemClock_Config>
		HAL_SuspendTick();
 8025740:	f7de fad8 	bl	8003cf4 <HAL_SuspendTick>
		#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			rtc_disable4LowPower();
 8025744:	f000 f8dd 	bl	8025902 <rtc_disable4LowPower>
		#endif

		if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 8025748:	2c00      	cmp	r4, #0
 802574a:	d10f      	bne.n	802576c <stm32l_lowPowerResume+0x34>

			stm32l_lowPowerRestoreGpioConfig();
 802574c:	f7dd fc20 	bl	8002f90 <stm32l_lowPowerRestoreGpioConfig>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_I2C2 ) > 0
				HAL_I2C_MspInit(&hi2c2);
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI1 ) > 0
				HAL_SPI_MspInit(&hspi1);
 8025750:	4808      	ldr	r0, [pc, #32]	; (8025774 <stm32l_lowPowerResume+0x3c>)
 8025752:	f7dd ffab 	bl	80036ac <HAL_SPI_MspInit>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI2 ) > 0
				HAL_SPI_MspInit(&hspi2);
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				HAL_TIM_Base_MspInit(&htim21);
 8025756:	4808      	ldr	r0, [pc, #32]	; (8025778 <stm32l_lowPowerResume+0x40>)
 8025758:	f7de f924 	bl	80039a4 <HAL_TIM_Base_MspInit>
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_ENABLE();
 802575c:	2380      	movs	r3, #128	; 0x80
 802575e:	4a07      	ldr	r2, [pc, #28]	; (802577c <stm32l_lowPowerResume+0x44>)
 8025760:	009b      	lsls	r3, r3, #2
 8025762:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8025764:	430b      	orrs	r3, r1
 8025766:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_ADCEx_EnableVREFINT();
 8025768:	f7de fd06 	bl	8004178 <HAL_ADCEx_EnableVREFINT>
	} else {
		log_info("|");
	}
	#endif

	HAL_ResumeTick();
 802576c:	f7de fad0 	bl	8003d10 <HAL_ResumeTick>
	return STM32L_LOWPOWER_SUCCESS;
}
 8025770:	2000      	movs	r0, #0
 8025772:	bd10      	pop	{r4, pc}
 8025774:	20001fb4 	.word	0x20001fb4
 8025778:	2000200c 	.word	0x2000200c
 802577c:	40021000 	.word	0x40021000

08025780 <__GpioAnalog>:

/**
 * Switch the GPIO to Low Power
 */
void __GpioAnalog(GPIO_TypeDef  *GPIOx, uint16_t pins)
{
 8025780:	b580      	push	{r7, lr}
 8025782:	b086      	sub	sp, #24
 8025784:	af00      	add	r7, sp, #0
 8025786:	6078      	str	r0, [r7, #4]
 8025788:	000a      	movs	r2, r1
 802578a:	1cbb      	adds	r3, r7, #2
 802578c:	801a      	strh	r2, [r3, #0]
  uint32_t position = 0x00U;
 802578e:	2300      	movs	r3, #0
 8025790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8025792:	2300      	movs	r3, #0
 8025794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8025796:	2300      	movs	r3, #0
 8025798:	60fb      	str	r3, [r7, #12]

  // Configure the port pins //
  while ((pins >> position) != 0)
 802579a:	e033      	b.n	8025804 <__GpioAnalog+0x84>
  {
    iocurrent = (pins) & (1U << position);
 802579c:	1cbb      	adds	r3, r7, #2
 802579e:	881b      	ldrh	r3, [r3, #0]
 80257a0:	2101      	movs	r1, #1
 80257a2:	697a      	ldr	r2, [r7, #20]
 80257a4:	4091      	lsls	r1, r2
 80257a6:	000a      	movs	r2, r1
 80257a8:	4013      	ands	r3, r2
 80257aa:	613b      	str	r3, [r7, #16]
    if(iocurrent)
 80257ac:	693b      	ldr	r3, [r7, #16]
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	d025      	beq.n	80257fe <__GpioAnalog+0x7e>
    {
      // Configure IO Direction mode (Input, Output, Alternate or Analog)
      temp = GPIOx->MODER;
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	681b      	ldr	r3, [r3, #0]
 80257b6:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80257b8:	697b      	ldr	r3, [r7, #20]
 80257ba:	005b      	lsls	r3, r3, #1
 80257bc:	2203      	movs	r2, #3
 80257be:	409a      	lsls	r2, r3
 80257c0:	0013      	movs	r3, r2
 80257c2:	43da      	mvns	r2, r3
 80257c4:	68fb      	ldr	r3, [r7, #12]
 80257c6:	4013      	ands	r3, r2
 80257c8:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_MODE_ANALOG) << (position * 2U));
 80257ca:	697b      	ldr	r3, [r7, #20]
 80257cc:	005b      	lsls	r3, r3, #1
 80257ce:	2203      	movs	r2, #3
 80257d0:	409a      	lsls	r2, r3
 80257d2:	0013      	movs	r3, r2
 80257d4:	68fa      	ldr	r2, [r7, #12]
 80257d6:	4313      	orrs	r3, r2
 80257d8:	60fb      	str	r3, [r7, #12]
      GPIOx->MODER = temp;
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	68fa      	ldr	r2, [r7, #12]
 80257de:	601a      	str	r2, [r3, #0]

      // Activate the Pull-up or Pull down resistor for the current IO
      temp = GPIOx->PUPDR;
 80257e0:	687b      	ldr	r3, [r7, #4]
 80257e2:	68db      	ldr	r3, [r3, #12]
 80257e4:	60fb      	str	r3, [r7, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80257e6:	697b      	ldr	r3, [r7, #20]
 80257e8:	005b      	lsls	r3, r3, #1
 80257ea:	2203      	movs	r2, #3
 80257ec:	409a      	lsls	r2, r3
 80257ee:	0013      	movs	r3, r2
 80257f0:	43da      	mvns	r2, r3
 80257f2:	68fb      	ldr	r3, [r7, #12]
 80257f4:	4013      	ands	r3, r2
 80257f6:	60fb      	str	r3, [r7, #12]
      temp |= ((GPIO_NOPULL) << (position * 2U));
      GPIOx->PUPDR = temp;
 80257f8:	687b      	ldr	r3, [r7, #4]
 80257fa:	68fa      	ldr	r2, [r7, #12]
 80257fc:	60da      	str	r2, [r3, #12]
    }
    position++;
 80257fe:	697b      	ldr	r3, [r7, #20]
 8025800:	3301      	adds	r3, #1
 8025802:	617b      	str	r3, [r7, #20]
  while ((pins >> position) != 0)
 8025804:	1cbb      	adds	r3, r7, #2
 8025806:	881a      	ldrh	r2, [r3, #0]
 8025808:	697b      	ldr	r3, [r7, #20]
 802580a:	411a      	asrs	r2, r3
 802580c:	1e13      	subs	r3, r2, #0
 802580e:	d1c5      	bne.n	802579c <__GpioAnalog+0x1c>
  }
}
 8025810:	46c0      	nop			; (mov r8, r8)
 8025812:	46bd      	mov	sp, r7
 8025814:	b006      	add	sp, #24
 8025816:	bd80      	pop	{r7, pc}

08025818 <_stm32l_disableGpios>:

/**
 * Disable GPIOS for Low Power switching
 */
void _stm32l_disableGpios() {
 8025818:	b580      	push	{r7, lr}
 802581a:	af00      	add	r7, sp, #0
    /*       example because communication between ST-link and the device       		*/
    /*       under test is done through UART. All GPIO pins are disabled (set   		*/
    /*       to analog input mode) including  UART I/O pins.           					*/

#ifdef GPIOA
	__GpioAnalog(GPIOA,(~ITSDK_LOWPOWER_GPIO_A_KEEP) & (GPIOA_PIN_AVAILABLE));
 802581c:	4a1f      	ldr	r2, [pc, #124]	; (802589c <_stm32l_disableGpios+0x84>)
 802581e:	23a0      	movs	r3, #160	; 0xa0
 8025820:	05db      	lsls	r3, r3, #23
 8025822:	0011      	movs	r1, r2
 8025824:	0018      	movs	r0, r3
 8025826:	f7ff ffab 	bl	8025780 <__GpioAnalog>
		__HAL_RCC_GPIOA_CLK_DISABLE();
	}
#endif

#ifdef GPIOB
	__GpioAnalog(GPIOB,(~ITSDK_LOWPOWER_GPIO_B_KEEP) & (GPIOB_PIN_AVAILABLE));
 802582a:	4a1d      	ldr	r2, [pc, #116]	; (80258a0 <_stm32l_disableGpios+0x88>)
 802582c:	4b1d      	ldr	r3, [pc, #116]	; (80258a4 <_stm32l_disableGpios+0x8c>)
 802582e:	0011      	movs	r1, r2
 8025830:	0018      	movs	r0, r3
 8025832:	f7ff ffa5 	bl	8025780 <__GpioAnalog>
		__HAL_RCC_GPIOB_CLK_DISABLE();
	}
#endif

#ifdef GPIOC
	__GpioAnalog(GPIOC,(~ITSDK_LOWPOWER_GPIO_C_KEEP) & (GPIOC_PIN_AVAILABLE));
 8025836:	4a1c      	ldr	r2, [pc, #112]	; (80258a8 <_stm32l_disableGpios+0x90>)
 8025838:	4b1c      	ldr	r3, [pc, #112]	; (80258ac <_stm32l_disableGpios+0x94>)
 802583a:	0011      	movs	r1, r2
 802583c:	0018      	movs	r0, r3
 802583e:	f7ff ff9f 	bl	8025780 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_C_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOC_CLK_DISABLE();
 8025842:	4b1b      	ldr	r3, [pc, #108]	; (80258b0 <_stm32l_disableGpios+0x98>)
 8025844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025846:	4b1a      	ldr	r3, [pc, #104]	; (80258b0 <_stm32l_disableGpios+0x98>)
 8025848:	2104      	movs	r1, #4
 802584a:	438a      	bics	r2, r1
 802584c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOD
	__GpioAnalog(GPIOD,(~ITSDK_LOWPOWER_GPIO_D_KEEP) & (GPIOD_PIN_AVAILABLE));
 802584e:	4a16      	ldr	r2, [pc, #88]	; (80258a8 <_stm32l_disableGpios+0x90>)
 8025850:	4b18      	ldr	r3, [pc, #96]	; (80258b4 <_stm32l_disableGpios+0x9c>)
 8025852:	0011      	movs	r1, r2
 8025854:	0018      	movs	r0, r3
 8025856:	f7ff ff93 	bl	8025780 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_D_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOD_CLK_DISABLE();
 802585a:	4b15      	ldr	r3, [pc, #84]	; (80258b0 <_stm32l_disableGpios+0x98>)
 802585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802585e:	4b14      	ldr	r3, [pc, #80]	; (80258b0 <_stm32l_disableGpios+0x98>)
 8025860:	2108      	movs	r1, #8
 8025862:	438a      	bics	r2, r1
 8025864:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOE
	__GpioAnalog(GPIOE,(~ITSDK_LOWPOWER_GPIO_E_KEEP) & (GPIOE_PIN_AVAILABLE));
 8025866:	4a10      	ldr	r2, [pc, #64]	; (80258a8 <_stm32l_disableGpios+0x90>)
 8025868:	4b13      	ldr	r3, [pc, #76]	; (80258b8 <_stm32l_disableGpios+0xa0>)
 802586a:	0011      	movs	r1, r2
 802586c:	0018      	movs	r0, r3
 802586e:	f7ff ff87 	bl	8025780 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_E_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOE_CLK_DISABLE();
 8025872:	4b0f      	ldr	r3, [pc, #60]	; (80258b0 <_stm32l_disableGpios+0x98>)
 8025874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025876:	4b0e      	ldr	r3, [pc, #56]	; (80258b0 <_stm32l_disableGpios+0x98>)
 8025878:	2110      	movs	r1, #16
 802587a:	438a      	bics	r2, r1
 802587c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOH
	__GpioAnalog(GPIOH,(~ITSDK_LOWPOWER_GPIO_H_KEEP) & (GPIOH_PIN_AVAILABLE));
 802587e:	4a0f      	ldr	r2, [pc, #60]	; (80258bc <_stm32l_disableGpios+0xa4>)
 8025880:	4b0f      	ldr	r3, [pc, #60]	; (80258c0 <_stm32l_disableGpios+0xa8>)
 8025882:	0011      	movs	r1, r2
 8025884:	0018      	movs	r0, r3
 8025886:	f7ff ff7b 	bl	8025780 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_H_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOH_CLK_DISABLE();
 802588a:	4b09      	ldr	r3, [pc, #36]	; (80258b0 <_stm32l_disableGpios+0x98>)
 802588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802588e:	4b08      	ldr	r3, [pc, #32]	; (80258b0 <_stm32l_disableGpios+0x98>)
 8025890:	2180      	movs	r1, #128	; 0x80
 8025892:	438a      	bics	r2, r1
 8025894:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

}
 8025896:	46c0      	nop			; (mov r8, r8)
 8025898:	46bd      	mov	sp, r7
 802589a:	bd80      	pop	{r7, pc}
 802589c:	0000e0f3 	.word	0x0000e0f3
 80258a0:	0000ef7b 	.word	0x0000ef7b
 80258a4:	50000400 	.word	0x50000400
 80258a8:	0000ffff 	.word	0x0000ffff
 80258ac:	50000800 	.word	0x50000800
 80258b0:	40021000 	.word	0x40021000
 80258b4:	50000c00 	.word	0x50000c00
 80258b8:	50001000 	.word	0x50001000
 80258bc:	00000603 	.word	0x00000603
 80258c0:	50001c00 	.word	0x50001c00

080258c4 <HAL_UARTEx_WakeupCallback>:
}

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 80258c4:	b580      	push	{r7, lr}
 80258c6:	b082      	sub	sp, #8
 80258c8:	af00      	add	r7, sp, #0
 80258ca:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 80258cc:	4b03      	ldr	r3, [pc, #12]	; (80258dc <HAL_UARTEx_WakeupCallback+0x18>)
 80258ce:	2203      	movs	r2, #3
 80258d0:	701a      	strb	r2, [r3, #0]
}
 80258d2:	46c0      	nop			; (mov r8, r8)
 80258d4:	46bd      	mov	sp, r7
 80258d6:	b002      	add	sp, #8
 80258d8:	bd80      	pop	{r7, pc}
 80258da:	46c0      	nop			; (mov r8, r8)
 80258dc:	20000058 	.word	0x20000058

080258e0 <rtc_configure4LowPower>:


/**
 * Configure the RTC source clock for running LowPower
 */
void rtc_configure4LowPower(uint32_t ms) {
 80258e0:	b580      	push	{r7, lr}
 80258e2:	b082      	sub	sp, #8
 80258e4:	af00      	add	r7, sp, #0
 80258e6:	6078      	str	r0, [r7, #4]
	rtc_prepareSleepTime();
 80258e8:	f000 f99a 	bl	8025c20 <rtc_prepareSleepTime>
	if ( ms > 0 ) {
 80258ec:	687b      	ldr	r3, [r7, #4]
 80258ee:	2b00      	cmp	r3, #0
 80258f0:	d003      	beq.n	80258fa <rtc_configure4LowPower+0x1a>
		rtc_runRtcUntil(ms);
 80258f2:	687b      	ldr	r3, [r7, #4]
 80258f4:	0018      	movs	r0, r3
 80258f6:	f000 f80d 	bl	8025914 <rtc_runRtcUntil>
	}
}
 80258fa:	46c0      	nop			; (mov r8, r8)
 80258fc:	46bd      	mov	sp, r7
 80258fe:	b002      	add	sp, #8
 8025900:	bd80      	pop	{r7, pc}

08025902 <rtc_disable4LowPower>:

/**
 * Deactivate the WakeUpTimer for not having the IRQ looping
 */
void rtc_disable4LowPower() {
 8025902:	b580      	push	{r7, lr}
 8025904:	af00      	add	r7, sp, #0
	rtc_disableWakeUp();
 8025906:	f000 f85b 	bl	80259c0 <rtc_disableWakeUp>
    rtc_updateTimeAfterSleepTime();
 802590a:	f000 f99b 	bl	8025c44 <rtc_updateTimeAfterSleepTime>
}
 802590e:	46c0      	nop			; (mov r8, r8)
 8025910:	46bd      	mov	sp, r7
 8025912:	bd80      	pop	{r7, pc}

08025914 <rtc_runRtcUntil>:

/**
 * Run Rtc for a given time in ticks
 * Max is 16s
 */
void rtc_runRtcUntil(uint32_t ms) {
 8025914:	b580      	push	{r7, lr}
 8025916:	b084      	sub	sp, #16
 8025918:	af00      	add	r7, sp, #0
 802591a:	6078      	str	r0, [r7, #4]
	// Issue #48
	// it seems that timer is limited to 16bis (even if 32 bits in the HAL code)
	// So this is limiting in about 30s of sleeping time
	uint32_t ticks = rtc_getTicksFromDuration((uint32_t)ms);
 802591c:	687b      	ldr	r3, [r7, #4]
 802591e:	0018      	movs	r0, r3
 8025920:	f000 f816 	bl	8025950 <rtc_getTicksFromDuration>
 8025924:	0003      	movs	r3, r0
 8025926:	60fb      	str	r3, [r7, #12]
	if ( ticks < 65536 ) {
 8025928:	68fb      	ldr	r3, [r7, #12]
 802592a:	4a08      	ldr	r2, [pc, #32]	; (802594c <rtc_runRtcUntil+0x38>)
 802592c:	4293      	cmp	r3, r2
 802592e:	d804      	bhi.n	802593a <rtc_runRtcUntil+0x26>
	    rtc_runRtcUntilTicks(ticks);
 8025930:	68fb      	ldr	r3, [r7, #12]
 8025932:	0018      	movs	r0, r3
 8025934:	f000 f81c 	bl	8025970 <rtc_runRtcUntilTicks>
	} else {
		// If larger than 65535 we change the RTC clock to have a 1s time base and a longer period of time
		rtc_runRtcUntilMs(ms);
	}
}
 8025938:	e003      	b.n	8025942 <rtc_runRtcUntil+0x2e>
		rtc_runRtcUntilMs(ms);
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	0018      	movs	r0, r3
 802593e:	f000 f827 	bl	8025990 <rtc_runRtcUntilMs>
}
 8025942:	46c0      	nop			; (mov r8, r8)
 8025944:	46bd      	mov	sp, r7
 8025946:	b004      	add	sp, #16
 8025948:	bd80      	pop	{r7, pc}
 802594a:	46c0      	nop			; (mov r8, r8)
 802594c:	0000ffff 	.word	0x0000ffff

08025950 <rtc_getTicksFromDuration>:

/*
 * Convert a duration in ticks (Wake-Up Clock only)
 */
uint32_t rtc_getTicksFromDuration(uint32_t ms) {
 8025950:	b580      	push	{r7, lr}
 8025952:	b082      	sub	sp, #8
 8025954:	af00      	add	r7, sp, #0
 8025956:	6078      	str	r0, [r7, #4]
    return (ms * (ITSDK_RTC_CLKFREQ/16)) / 1000;
 8025958:	687b      	ldr	r3, [r7, #4]
 802595a:	02da      	lsls	r2, r3, #11
 802595c:	23fa      	movs	r3, #250	; 0xfa
 802595e:	0099      	lsls	r1, r3, #2
 8025960:	0010      	movs	r0, r2
 8025962:	f7da fbd9 	bl	8000118 <__udivsi3>
 8025966:	0003      	movs	r3, r0
}
 8025968:	0018      	movs	r0, r3
 802596a:	46bd      	mov	sp, r7
 802596c:	b002      	add	sp, #8
 802596e:	bd80      	pop	{r7, pc}

08025970 <rtc_runRtcUntilTicks>:
}

/**
 * Run the RTC for a given number of ticks
 */
void rtc_runRtcUntilTicks(uint32_t ticks) {
 8025970:	b580      	push	{r7, lr}
 8025972:	b082      	sub	sp, #8
 8025974:	af00      	add	r7, sp, #0
 8025976:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8025978:	6879      	ldr	r1, [r7, #4]
 802597a:	4b04      	ldr	r3, [pc, #16]	; (802598c <rtc_runRtcUntilTicks+0x1c>)
 802597c:	2200      	movs	r2, #0
 802597e:	0018      	movs	r0, r3
 8025980:	f7e0 fb82 	bl	8006088 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8025984:	46c0      	nop			; (mov r8, r8)
 8025986:	46bd      	mov	sp, r7
 8025988:	b002      	add	sp, #8
 802598a:	bd80      	pop	{r7, pc}
 802598c:	20001f38 	.word	0x20001f38

08025990 <rtc_runRtcUntilMs>:

/**
 * Run the RTC for a given number of ms
 */
void rtc_runRtcUntilMs(uint32_t ms) {
 8025990:	b580      	push	{r7, lr}
 8025992:	b082      	sub	sp, #8
 8025994:	af00      	add	r7, sp, #0
 8025996:	6078      	str	r0, [r7, #4]
	// the scale is 1 second
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (ms / 1000), RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8025998:	687a      	ldr	r2, [r7, #4]
 802599a:	23fa      	movs	r3, #250	; 0xfa
 802599c:	0099      	lsls	r1, r3, #2
 802599e:	0010      	movs	r0, r2
 80259a0:	f7da fbba 	bl	8000118 <__udivsi3>
 80259a4:	0003      	movs	r3, r0
 80259a6:	0019      	movs	r1, r3
 80259a8:	4b04      	ldr	r3, [pc, #16]	; (80259bc <rtc_runRtcUntilMs+0x2c>)
 80259aa:	2204      	movs	r2, #4
 80259ac:	0018      	movs	r0, r3
 80259ae:	f7e0 fb6b 	bl	8006088 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80259b2:	46c0      	nop			; (mov r8, r8)
 80259b4:	46bd      	mov	sp, r7
 80259b6:	b002      	add	sp, #8
 80259b8:	bd80      	pop	{r7, pc}
 80259ba:	46c0      	nop			; (mov r8, r8)
 80259bc:	20001f38 	.word	0x20001f38

080259c0 <rtc_disableWakeUp>:


void rtc_disableWakeUp() {
 80259c0:	b580      	push	{r7, lr}
 80259c2:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80259c4:	4b03      	ldr	r3, [pc, #12]	; (80259d4 <rtc_disableWakeUp+0x14>)
 80259c6:	0018      	movs	r0, r3
 80259c8:	f7e0 fc24 	bl	8006214 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 80259cc:	46c0      	nop			; (mov r8, r8)
 80259ce:	46bd      	mov	sp, r7
 80259d0:	bd80      	pop	{r7, pc}
 80259d2:	46c0      	nop			; (mov r8, r8)
 80259d4:	20001f38 	.word	0x20001f38

080259d8 <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 80259d8:	b5b0      	push	{r4, r5, r7, lr}
 80259da:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 80259dc:	2001      	movs	r0, #1
 80259de:	f000 f807 	bl	80259f0 <rtc_getTimestampMsRaw>
 80259e2:	0003      	movs	r3, r0
 80259e4:	000c      	movs	r4, r1
}
 80259e6:	0018      	movs	r0, r3
 80259e8:	0021      	movs	r1, r4
 80259ea:	46bd      	mov	sp, r7
 80259ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080259f0 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 80259f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80259f2:	b095      	sub	sp, #84	; 0x54
 80259f4:	af00      	add	r7, sp, #0
 80259f6:	0003      	movs	r3, r0
 80259f8:	222f      	movs	r2, #47	; 0x2f
 80259fa:	18ba      	adds	r2, r7, r2
 80259fc:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 80259fe:	210c      	movs	r1, #12
 8025a00:	000c      	movs	r4, r1
 8025a02:	2328      	movs	r3, #40	; 0x28
 8025a04:	469c      	mov	ip, r3
 8025a06:	44bc      	add	ip, r7
 8025a08:	4461      	add	r1, ip
 8025a0a:	4b61      	ldr	r3, [pc, #388]	; (8025b90 <rtc_getTimestampMsRaw+0x1a0>)
 8025a0c:	2200      	movs	r2, #0
 8025a0e:	0018      	movs	r0, r3
 8025a10:	f7df ffa8 	bl	8005964 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 8025a14:	2308      	movs	r3, #8
 8025a16:	2028      	movs	r0, #40	; 0x28
 8025a18:	183a      	adds	r2, r7, r0
 8025a1a:	18d1      	adds	r1, r2, r3
 8025a1c:	4b5c      	ldr	r3, [pc, #368]	; (8025b90 <rtc_getTimestampMsRaw+0x1a0>)
 8025a1e:	2200      	movs	r2, #0
 8025a20:	0018      	movs	r0, r3
 8025a22:	f7e0 f8a9 	bl	8005b78 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 8025a26:	0021      	movs	r1, r4
 8025a28:	2028      	movs	r0, #40	; 0x28
 8025a2a:	183b      	adds	r3, r7, r0
 8025a2c:	185b      	adds	r3, r3, r1
 8025a2e:	781b      	ldrb	r3, [r3, #0]
 8025a30:	001a      	movs	r2, r3
 8025a32:	4b58      	ldr	r3, [pc, #352]	; (8025b94 <rtc_getTimestampMsRaw+0x1a4>)
 8025a34:	4353      	muls	r3, r2
 8025a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a38:	2300      	movs	r3, #0
 8025a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 8025a3c:	183a      	adds	r2, r7, r0
 8025a3e:	1853      	adds	r3, r2, r1
 8025a40:	785b      	ldrb	r3, [r3, #1]
 8025a42:	001a      	movs	r2, r3
 8025a44:	4b54      	ldr	r3, [pc, #336]	; (8025b98 <rtc_getTimestampMsRaw+0x1a8>)
 8025a46:	4353      	muls	r3, r2
 8025a48:	623b      	str	r3, [r7, #32]
 8025a4a:	2300      	movs	r3, #0
 8025a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8025a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a50:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8025a52:	6a38      	ldr	r0, [r7, #32]
 8025a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025a56:	181b      	adds	r3, r3, r0
 8025a58:	414c      	adcs	r4, r1
 8025a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a5c:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 8025a5e:	210c      	movs	r1, #12
 8025a60:	0008      	movs	r0, r1
 8025a62:	2328      	movs	r3, #40	; 0x28
 8025a64:	18fa      	adds	r2, r7, r3
 8025a66:	1853      	adds	r3, r2, r1
 8025a68:	789b      	ldrb	r3, [r3, #2]
 8025a6a:	001a      	movs	r2, r3
 8025a6c:	0013      	movs	r3, r2
 8025a6e:	015b      	lsls	r3, r3, #5
 8025a70:	1a9b      	subs	r3, r3, r2
 8025a72:	009b      	lsls	r3, r3, #2
 8025a74:	189b      	adds	r3, r3, r2
 8025a76:	00db      	lsls	r3, r3, #3
 8025a78:	61bb      	str	r3, [r7, #24]
 8025a7a:	2300      	movs	r3, #0
 8025a7c:	61fb      	str	r3, [r7, #28]
 8025a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a80:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8025a82:	69b9      	ldr	r1, [r7, #24]
 8025a84:	69fa      	ldr	r2, [r7, #28]
 8025a86:	185b      	adds	r3, r3, r1
 8025a88:	4154      	adcs	r4, r2
 8025a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a8c:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 8025a8e:	0001      	movs	r1, r0
 8025a90:	2028      	movs	r0, #40	; 0x28
 8025a92:	183b      	adds	r3, r7, r0
 8025a94:	185b      	adds	r3, r3, r1
 8025a96:	689a      	ldr	r2, [r3, #8]
 8025a98:	183b      	adds	r3, r7, r0
 8025a9a:	185b      	adds	r3, r3, r1
 8025a9c:	685b      	ldr	r3, [r3, #4]
 8025a9e:	1ad2      	subs	r2, r2, r3
 8025aa0:	0013      	movs	r3, r2
 8025aa2:	015b      	lsls	r3, r3, #5
 8025aa4:	1a9b      	subs	r3, r3, r2
 8025aa6:	009b      	lsls	r3, r3, #2
 8025aa8:	189b      	adds	r3, r3, r2
 8025aaa:	00db      	lsls	r3, r3, #3
 8025aac:	001a      	movs	r2, r3
 8025aae:	183b      	adds	r3, r7, r0
 8025ab0:	185b      	adds	r3, r3, r1
 8025ab2:	689b      	ldr	r3, [r3, #8]
 8025ab4:	0019      	movs	r1, r3
 8025ab6:	0010      	movs	r0, r2
 8025ab8:	f7da fb2e 	bl	8000118 <__udivsi3>
 8025abc:	0003      	movs	r3, r0
 8025abe:	3301      	adds	r3, #1
 8025ac0:	613b      	str	r3, [r7, #16]
 8025ac2:	2300      	movs	r3, #0
 8025ac4:	617b      	str	r3, [r7, #20]
 8025ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025ac8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8025aca:	6939      	ldr	r1, [r7, #16]
 8025acc:	697a      	ldr	r2, [r7, #20]
 8025ace:	185b      	adds	r3, r3, r1
 8025ad0:	4154      	adcs	r4, r2
 8025ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8025ad4:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 8025ad6:	4b31      	ldr	r3, [pc, #196]	; (8025b9c <rtc_getTimestampMsRaw+0x1ac>)
 8025ad8:	681b      	ldr	r3, [r3, #0]
 8025ada:	001d      	movs	r5, r3
 8025adc:	2300      	movs	r3, #0
 8025ade:	001e      	movs	r6, r3
 8025ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025ae2:	42b3      	cmp	r3, r6
 8025ae4:	d305      	bcc.n	8025af2 <rtc_getTimestampMsRaw+0x102>
 8025ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025ae8:	42b3      	cmp	r3, r6
 8025aea:	d107      	bne.n	8025afc <rtc_getTimestampMsRaw+0x10c>
 8025aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025aee:	42ab      	cmp	r3, r5
 8025af0:	d204      	bcs.n	8025afc <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 8025af2:	4b2b      	ldr	r3, [pc, #172]	; (8025ba0 <rtc_getTimestampMsRaw+0x1b0>)
 8025af4:	681b      	ldr	r3, [r3, #0]
 8025af6:	1c5a      	adds	r2, r3, #1
 8025af8:	4b29      	ldr	r3, [pc, #164]	; (8025ba0 <rtc_getTimestampMsRaw+0x1b0>)
 8025afa:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 8025afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025afe:	4b27      	ldr	r3, [pc, #156]	; (8025b9c <rtc_getTimestampMsRaw+0x1ac>)
 8025b00:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 8025b02:	4b27      	ldr	r3, [pc, #156]	; (8025ba0 <rtc_getTimestampMsRaw+0x1b0>)
 8025b04:	681b      	ldr	r3, [r3, #0]
 8025b06:	60bb      	str	r3, [r7, #8]
 8025b08:	2300      	movs	r3, #0
 8025b0a:	60fb      	str	r3, [r7, #12]
 8025b0c:	4a25      	ldr	r2, [pc, #148]	; (8025ba4 <rtc_getTimestampMsRaw+0x1b4>)
 8025b0e:	2300      	movs	r3, #0
 8025b10:	68b8      	ldr	r0, [r7, #8]
 8025b12:	68f9      	ldr	r1, [r7, #12]
 8025b14:	f7da fd32 	bl	800057c <__aeabi_lmul>
 8025b18:	0003      	movs	r3, r0
 8025b1a:	000c      	movs	r4, r1
 8025b1c:	0019      	movs	r1, r3
 8025b1e:	0022      	movs	r2, r4
 8025b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025b22:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8025b24:	185b      	adds	r3, r3, r1
 8025b26:	4154      	adcs	r4, r2
 8025b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8025b2a:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 8025b2c:	232f      	movs	r3, #47	; 0x2f
 8025b2e:	18fb      	adds	r3, r7, r3
 8025b30:	781b      	ldrb	r3, [r3, #0]
 8025b32:	2b00      	cmp	r3, #0
 8025b34:	d024      	beq.n	8025b80 <rtc_getTimestampMsRaw+0x190>
 8025b36:	4b1c      	ldr	r3, [pc, #112]	; (8025ba8 <rtc_getTimestampMsRaw+0x1b8>)
 8025b38:	781b      	ldrb	r3, [r3, #0]
 8025b3a:	2b00      	cmp	r3, #0
 8025b3c:	d020      	beq.n	8025b80 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 8025b3e:	4b1b      	ldr	r3, [pc, #108]	; (8025bac <rtc_getTimestampMsRaw+0x1bc>)
 8025b40:	681b      	ldr	r3, [r3, #0]
 8025b42:	603b      	str	r3, [r7, #0]
 8025b44:	2300      	movs	r3, #0
 8025b46:	607b      	str	r3, [r7, #4]
 8025b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025b4c:	6838      	ldr	r0, [r7, #0]
 8025b4e:	6879      	ldr	r1, [r7, #4]
 8025b50:	f7da fd14 	bl	800057c <__aeabi_lmul>
 8025b54:	0003      	movs	r3, r0
 8025b56:	000c      	movs	r4, r1
 8025b58:	0018      	movs	r0, r3
 8025b5a:	0021      	movs	r1, r4
 8025b5c:	22fa      	movs	r2, #250	; 0xfa
 8025b5e:	0092      	lsls	r2, r2, #2
 8025b60:	2300      	movs	r3, #0
 8025b62:	f7da fceb 	bl	800053c <__aeabi_uldivmod>
 8025b66:	0003      	movs	r3, r0
 8025b68:	000c      	movs	r4, r1
 8025b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8025b6c:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 8025b6e:	4b10      	ldr	r3, [pc, #64]	; (8025bb0 <rtc_getTimestampMsRaw+0x1c0>)
 8025b70:	685c      	ldr	r4, [r3, #4]
 8025b72:	681b      	ldr	r3, [r3, #0]
 8025b74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8025b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025b78:	185b      	adds	r3, r3, r1
 8025b7a:	4154      	adcs	r4, r2
 8025b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8025b7e:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 8025b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025b82:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 8025b84:	0018      	movs	r0, r3
 8025b86:	0021      	movs	r1, r4
 8025b88:	46bd      	mov	sp, r7
 8025b8a:	b015      	add	sp, #84	; 0x54
 8025b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b8e:	46c0      	nop			; (mov r8, r8)
 8025b90:	20001f38 	.word	0x20001f38
 8025b94:	0036ee80 	.word	0x0036ee80
 8025b98:	0000ea60 	.word	0x0000ea60
 8025b9c:	20001e38 	.word	0x20001e38
 8025ba0:	20001e34 	.word	0x20001e34
 8025ba4:	05265c00 	.word	0x05265c00
 8025ba8:	20001e30 	.word	0x20001e30
 8025bac:	200022c0 	.word	0x200022c0
 8025bb0:	200022c8 	.word	0x200022c8

08025bb4 <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 8025bb4:	b580      	push	{r7, lr}
 8025bb6:	b086      	sub	sp, #24
 8025bb8:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 8025bba:	2114      	movs	r1, #20
 8025bbc:	187b      	adds	r3, r7, r1
 8025bbe:	2200      	movs	r2, #0
 8025bc0:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 8025bc2:	187b      	adds	r3, r7, r1
 8025bc4:	2201      	movs	r2, #1
 8025bc6:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 8025bc8:	187b      	adds	r3, r7, r1
 8025bca:	2201      	movs	r2, #1
 8025bcc:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 8025bce:	1879      	adds	r1, r7, r1
 8025bd0:	4b11      	ldr	r3, [pc, #68]	; (8025c18 <rtc_resetTime+0x64>)
 8025bd2:	2200      	movs	r2, #0
 8025bd4:	0018      	movs	r0, r3
 8025bd6:	f7df ff21 	bl	8005a1c <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 8025bda:	003b      	movs	r3, r7
 8025bdc:	2200      	movs	r2, #0
 8025bde:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 8025be0:	003b      	movs	r3, r7
 8025be2:	2200      	movs	r2, #0
 8025be4:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 8025be6:	003b      	movs	r3, r7
 8025be8:	2200      	movs	r2, #0
 8025bea:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 8025bec:	003b      	movs	r3, r7
 8025bee:	2200      	movs	r2, #0
 8025bf0:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8025bf2:	003b      	movs	r3, r7
 8025bf4:	2200      	movs	r2, #0
 8025bf6:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8025bf8:	003b      	movs	r3, r7
 8025bfa:	2200      	movs	r2, #0
 8025bfc:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 8025bfe:	0039      	movs	r1, r7
 8025c00:	4b05      	ldr	r3, [pc, #20]	; (8025c18 <rtc_resetTime+0x64>)
 8025c02:	2200      	movs	r2, #0
 8025c04:	0018      	movs	r0, r3
 8025c06:	f7df fde9 	bl	80057dc <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 8025c0a:	4b04      	ldr	r3, [pc, #16]	; (8025c1c <rtc_resetTime+0x68>)
 8025c0c:	2200      	movs	r2, #0
 8025c0e:	601a      	str	r2, [r3, #0]
}
 8025c10:	46c0      	nop			; (mov r8, r8)
 8025c12:	46bd      	mov	sp, r7
 8025c14:	b006      	add	sp, #24
 8025c16:	bd80      	pop	{r7, pc}
 8025c18:	20001f38 	.word	0x20001f38
 8025c1c:	20001e38 	.word	0x20001e38

08025c20 <rtc_prepareSleepTime>:

/**
 * Call before any sleep in case there is something to prepare with RTC
 * or others.
 */
void rtc_prepareSleepTime() {
 8025c20:	b580      	push	{r7, lr}
 8025c22:	af00      	add	r7, sp, #0
	__enable_systick=false;
 8025c24:	4b05      	ldr	r3, [pc, #20]	; (8025c3c <rtc_prepareSleepTime+0x1c>)
 8025c26:	2200      	movs	r2, #0
 8025c28:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN2 );

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8025c2a:	4b05      	ldr	r3, [pc, #20]	; (8025c40 <rtc_prepareSleepTime+0x20>)
 8025c2c:	681a      	ldr	r2, [r3, #0]
 8025c2e:	4b04      	ldr	r3, [pc, #16]	; (8025c40 <rtc_prepareSleepTime+0x20>)
 8025c30:	2104      	movs	r1, #4
 8025c32:	430a      	orrs	r2, r1
 8025c34:	601a      	str	r2, [r3, #0]
}
 8025c36:	46c0      	nop			; (mov r8, r8)
 8025c38:	46bd      	mov	sp, r7
 8025c3a:	bd80      	pop	{r7, pc}
 8025c3c:	20000059 	.word	0x20000059
 8025c40:	40007000 	.word	0x40007000

08025c44 <rtc_updateTimeAfterSleepTime>:


/**
 * Get the sleep duration based on RTC counter
 */
void rtc_updateTimeAfterSleepTime() {
 8025c44:	b5b0      	push	{r4, r5, r7, lr}
 8025c46:	af00      	add	r7, sp, #0

	itsdk_time_set_ms(rtc_getTimestampMs());
 8025c48:	f7ff fec6 	bl	80259d8 <rtc_getTimestampMs>
 8025c4c:	0003      	movs	r3, r0
 8025c4e:	000c      	movs	r4, r1
 8025c50:	0018      	movs	r0, r3
 8025c52:	0021      	movs	r1, r4
 8025c54:	f7fe f91c 	bl	8023e90 <itsdk_time_set_ms>
	__enable_systick=true;
 8025c58:	4b02      	ldr	r3, [pc, #8]	; (8025c64 <rtc_updateTimeAfterSleepTime+0x20>)
 8025c5a:	2201      	movs	r2, #1
 8025c5c:	701a      	strb	r2, [r3, #0]
}
 8025c5e:	46c0      	nop			; (mov r8, r8)
 8025c60:	46bd      	mov	sp, r7
 8025c62:	bdb0      	pop	{r4, r5, r7, pc}
 8025c64:	20000059 	.word	0x20000059

08025c68 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8025c68:	b580      	push	{r7, lr}
 8025c6a:	b084      	sub	sp, #16
 8025c6c:	af00      	add	r7, sp, #0
 8025c6e:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 8025c70:	4b0f      	ldr	r3, [pc, #60]	; (8025cb0 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 8025c72:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 8025c74:	e00c      	b.n	8025c90 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 8025c76:	68fb      	ldr	r3, [r7, #12]
 8025c78:	681b      	ldr	r3, [r3, #0]
 8025c7a:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 8025c7c:	68bb      	ldr	r3, [r7, #8]
 8025c7e:	2b00      	cmp	r3, #0
 8025c80:	d003      	beq.n	8025c8a <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 8025c82:	687a      	ldr	r2, [r7, #4]
 8025c84:	68bb      	ldr	r3, [r7, #8]
 8025c86:	0010      	movs	r0, r2
 8025c88:	4798      	blx	r3
		}
		c = c->next;
 8025c8a:	68fb      	ldr	r3, [r7, #12]
 8025c8c:	685b      	ldr	r3, [r3, #4]
 8025c8e:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 8025c90:	68fb      	ldr	r3, [r7, #12]
 8025c92:	2b00      	cmp	r3, #0
 8025c94:	d1ef      	bne.n	8025c76 <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8025c96:	4b07      	ldr	r3, [pc, #28]	; (8025cb4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8025c98:	681a      	ldr	r2, [r3, #0]
 8025c9a:	4b06      	ldr	r3, [pc, #24]	; (8025cb4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8025c9c:	2104      	movs	r1, #4
 8025c9e:	430a      	orrs	r2, r1
 8025ca0:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 8025ca2:	4b05      	ldr	r3, [pc, #20]	; (8025cb8 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 8025ca4:	2200      	movs	r2, #0
 8025ca6:	701a      	strb	r2, [r3, #0]
}
 8025ca8:	46c0      	nop			; (mov r8, r8)
 8025caa:	46bd      	mov	sp, r7
 8025cac:	b004      	add	sp, #16
 8025cae:	bd80      	pop	{r7, pc}
 8025cb0:	20001e3c 	.word	0x20001e3c
 8025cb4:	40007000 	.word	0x40007000
 8025cb8:	20000058 	.word	0x20000058

08025cbc <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 8025cbc:	b590      	push	{r4, r7, lr}
 8025cbe:	b083      	sub	sp, #12
 8025cc0:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 8025cc2:	f000 f825 	bl	8025d10 <rtc_calcClockRatio>
 8025cc6:	0003      	movs	r3, r0
 8025cc8:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 8025cca:	4b0e      	ldr	r3, [pc, #56]	; (8025d04 <rtc_adjustTime+0x48>)
 8025ccc:	781b      	ldrb	r3, [r3, #0]
 8025cce:	2b00      	cmp	r3, #0
 8025cd0:	d009      	beq.n	8025ce6 <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 8025cd2:	f7ff fe81 	bl	80259d8 <rtc_getTimestampMs>
 8025cd6:	0003      	movs	r3, r0
 8025cd8:	000c      	movs	r4, r1
 8025cda:	4a0b      	ldr	r2, [pc, #44]	; (8025d08 <rtc_adjustTime+0x4c>)
 8025cdc:	6013      	str	r3, [r2, #0]
 8025cde:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 8025ce0:	f7ff ff68 	bl	8025bb4 <rtc_resetTime>
 8025ce4:	e004      	b.n	8025cf0 <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 8025ce6:	4a08      	ldr	r2, [pc, #32]	; (8025d08 <rtc_adjustTime+0x4c>)
 8025ce8:	2300      	movs	r3, #0
 8025cea:	2400      	movs	r4, #0
 8025cec:	6013      	str	r3, [r2, #0]
 8025cee:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 8025cf0:	4b04      	ldr	r3, [pc, #16]	; (8025d04 <rtc_adjustTime+0x48>)
 8025cf2:	2201      	movs	r2, #1
 8025cf4:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 8025cf6:	4b05      	ldr	r3, [pc, #20]	; (8025d0c <rtc_adjustTime+0x50>)
 8025cf8:	687a      	ldr	r2, [r7, #4]
 8025cfa:	601a      	str	r2, [r3, #0]
#endif
}
 8025cfc:	46c0      	nop			; (mov r8, r8)
 8025cfe:	46bd      	mov	sp, r7
 8025d00:	b003      	add	sp, #12
 8025d02:	bd90      	pop	{r4, r7, pc}
 8025d04:	20001e30 	.word	0x20001e30
 8025d08:	200022c8 	.word	0x200022c8
 8025d0c:	200022c0 	.word	0x200022c0

08025d10 <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 8025d10:	b580      	push	{r7, lr}
 8025d12:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 8025d14:	23fa      	movs	r3, #250	; 0xfa
 8025d16:	009b      	lsls	r3, r3, #2
#endif
}
 8025d18:	0018      	movs	r0, r3
 8025d1a:	46bd      	mov	sp, r7
 8025d1c:	bd80      	pop	{r7, pc}
	...

08025d20 <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 8025d20:	b580      	push	{r7, lr}
 8025d22:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 8025d24:	4b10      	ldr	r3, [pc, #64]	; (8025d68 <HAL_IncTick+0x48>)
 8025d26:	781b      	ldrb	r3, [r3, #0]
 8025d28:	2b00      	cmp	r3, #0
 8025d2a:	d011      	beq.n	8025d50 <HAL_IncTick+0x30>
 8025d2c:	4b0f      	ldr	r3, [pc, #60]	; (8025d6c <HAL_IncTick+0x4c>)
 8025d2e:	681a      	ldr	r2, [r3, #0]
 8025d30:	0013      	movs	r3, r2
 8025d32:	015b      	lsls	r3, r3, #5
 8025d34:	1a9b      	subs	r3, r3, r2
 8025d36:	009b      	lsls	r3, r3, #2
 8025d38:	189b      	adds	r3, r3, r2
 8025d3a:	009b      	lsls	r3, r3, #2
 8025d3c:	001a      	movs	r2, r3
 8025d3e:	23fa      	movs	r3, #250	; 0xfa
 8025d40:	0099      	lsls	r1, r3, #2
 8025d42:	0010      	movs	r0, r2
 8025d44:	f7da f9e8 	bl	8000118 <__udivsi3>
 8025d48:	0003      	movs	r3, r0
 8025d4a:	0018      	movs	r0, r3
 8025d4c:	f7fe f852 	bl	8023df4 <itsdk_time_add_us>
	uwTick++;
 8025d50:	4b07      	ldr	r3, [pc, #28]	; (8025d70 <HAL_IncTick+0x50>)
 8025d52:	681b      	ldr	r3, [r3, #0]
 8025d54:	1c5a      	adds	r2, r3, #1
 8025d56:	4b06      	ldr	r3, [pc, #24]	; (8025d70 <HAL_IncTick+0x50>)
 8025d58:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 8025d5a:	4b06      	ldr	r3, [pc, #24]	; (8025d74 <HAL_IncTick+0x54>)
 8025d5c:	2202      	movs	r2, #2
 8025d5e:	701a      	strb	r2, [r3, #0]
}
 8025d60:	46c0      	nop			; (mov r8, r8)
 8025d62:	46bd      	mov	sp, r7
 8025d64:	bd80      	pop	{r7, pc}
 8025d66:	46c0      	nop			; (mov r8, r8)
 8025d68:	20000059 	.word	0x20000059
 8025d6c:	2000005c 	.word	0x2000005c
 8025d70:	200020c8 	.word	0x200020c8
 8025d74:	20000058 	.word	0x20000058

08025d78 <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 8025d78:	b590      	push	{r4, r7, lr}
 8025d7a:	b089      	sub	sp, #36	; 0x24
 8025d7c:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 8025d7e:	f7fe f8d3 	bl	8023f28 <itsdk_time_get_us>
 8025d82:	22fa      	movs	r2, #250	; 0xfa
 8025d84:	0092      	lsls	r2, r2, #2
 8025d86:	2300      	movs	r3, #0
 8025d88:	f7da fbd8 	bl	800053c <__aeabi_uldivmod>
 8025d8c:	0003      	movs	r3, r0
 8025d8e:	000c      	movs	r4, r1
 8025d90:	613b      	str	r3, [r7, #16]
 8025d92:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 8025d94:	2000      	movs	r0, #0
 8025d96:	f7ff fe2b 	bl	80259f0 <rtc_getTimestampMsRaw>
 8025d9a:	0003      	movs	r3, r0
 8025d9c:	000c      	movs	r4, r1
 8025d9e:	60bb      	str	r3, [r7, #8]
 8025da0:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 8025da2:	46c0      	nop			; (mov r8, r8)
 8025da4:	2000      	movs	r0, #0
 8025da6:	f7ff fe23 	bl	80259f0 <rtc_getTimestampMsRaw>
 8025daa:	000a      	movs	r2, r1
 8025dac:	0001      	movs	r1, r0
 8025dae:	68bb      	ldr	r3, [r7, #8]
 8025db0:	68fc      	ldr	r4, [r7, #12]
 8025db2:	1ac9      	subs	r1, r1, r3
 8025db4:	41a2      	sbcs	r2, r4
 8025db6:	000b      	movs	r3, r1
 8025db8:	0014      	movs	r4, r2
 8025dba:	2c00      	cmp	r4, #0
 8025dbc:	d103      	bne.n	8025dc6 <systick_adjustTime+0x4e>
 8025dbe:	d1f1      	bne.n	8025da4 <systick_adjustTime+0x2c>
 8025dc0:	2bc7      	cmp	r3, #199	; 0xc7
 8025dc2:	d800      	bhi.n	8025dc6 <systick_adjustTime+0x4e>
 8025dc4:	e7ee      	b.n	8025da4 <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 8025dc6:	f7fe f8af 	bl	8023f28 <itsdk_time_get_us>
 8025dca:	22fa      	movs	r2, #250	; 0xfa
 8025dcc:	0092      	lsls	r2, r2, #2
 8025dce:	2300      	movs	r3, #0
 8025dd0:	f7da fbb4 	bl	800053c <__aeabi_uldivmod>
 8025dd4:	0003      	movs	r3, r0
 8025dd6:	000c      	movs	r4, r1
 8025dd8:	603b      	str	r3, [r7, #0]
 8025dda:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 8025ddc:	6839      	ldr	r1, [r7, #0]
 8025dde:	687a      	ldr	r2, [r7, #4]
 8025de0:	693b      	ldr	r3, [r7, #16]
 8025de2:	697c      	ldr	r4, [r7, #20]
 8025de4:	1ac9      	subs	r1, r1, r3
 8025de6:	41a2      	sbcs	r2, r4
 8025de8:	000b      	movs	r3, r1
 8025dea:	0014      	movs	r4, r2
 8025dec:	001a      	movs	r2, r3
 8025dee:	0023      	movs	r3, r4
 8025df0:	4818      	ldr	r0, [pc, #96]	; (8025e54 <systick_adjustTime+0xdc>)
 8025df2:	2100      	movs	r1, #0
 8025df4:	f7da fba2 	bl	800053c <__aeabi_uldivmod>
 8025df8:	0003      	movs	r3, r0
 8025dfa:	000c      	movs	r4, r1
 8025dfc:	61bb      	str	r3, [r7, #24]
 8025dfe:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 8025e00:	69fb      	ldr	r3, [r7, #28]
 8025e02:	2b00      	cmp	r3, #0
 8025e04:	d111      	bne.n	8025e2a <systick_adjustTime+0xb2>
 8025e06:	69fb      	ldr	r3, [r7, #28]
 8025e08:	2b00      	cmp	r3, #0
 8025e0a:	d104      	bne.n	8025e16 <systick_adjustTime+0x9e>
 8025e0c:	69ba      	ldr	r2, [r7, #24]
 8025e0e:	23af      	movs	r3, #175	; 0xaf
 8025e10:	00db      	lsls	r3, r3, #3
 8025e12:	429a      	cmp	r2, r3
 8025e14:	d809      	bhi.n	8025e2a <systick_adjustTime+0xb2>
 8025e16:	69fb      	ldr	r3, [r7, #28]
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	d113      	bne.n	8025e44 <systick_adjustTime+0xcc>
 8025e1c:	69fb      	ldr	r3, [r7, #28]
 8025e1e:	2b00      	cmp	r3, #0
 8025e20:	d103      	bne.n	8025e2a <systick_adjustTime+0xb2>
 8025e22:	69bb      	ldr	r3, [r7, #24]
 8025e24:	4a0c      	ldr	r2, [pc, #48]	; (8025e58 <systick_adjustTime+0xe0>)
 8025e26:	4293      	cmp	r3, r2
 8025e28:	d80c      	bhi.n	8025e44 <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 8025e2a:	69bb      	ldr	r3, [r7, #24]
 8025e2c:	69fc      	ldr	r4, [r7, #28]
 8025e2e:	b29b      	uxth	r3, r3
 8025e30:	4a0a      	ldr	r2, [pc, #40]	; (8025e5c <systick_adjustTime+0xe4>)
 8025e32:	0019      	movs	r1, r3
 8025e34:	0010      	movs	r0, r2
 8025e36:	f7fd f807 	bl	8022e48 <itsdk_error_report>
		ratio = 1000;
 8025e3a:	23fa      	movs	r3, #250	; 0xfa
 8025e3c:	009b      	lsls	r3, r3, #2
 8025e3e:	2400      	movs	r4, #0
 8025e40:	61bb      	str	r3, [r7, #24]
 8025e42:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 8025e44:	69ba      	ldr	r2, [r7, #24]
 8025e46:	4b06      	ldr	r3, [pc, #24]	; (8025e60 <systick_adjustTime+0xe8>)
 8025e48:	601a      	str	r2, [r3, #0]
#endif
}
 8025e4a:	46c0      	nop			; (mov r8, r8)
 8025e4c:	46bd      	mov	sp, r7
 8025e4e:	b009      	add	sp, #36	; 0x24
 8025e50:	bd90      	pop	{r4, r7, pc}
 8025e52:	46c0      	nop			; (mov r8, r8)
 8025e54:	00030d40 	.word	0x00030d40
 8025e58:	00000257 	.word	0x00000257
 8025e5c:	90000061 	.word	0x90000061
 8025e60:	2000005c 	.word	0x2000005c

08025e64 <spi_rwRegister>:
_SPI_Status spi_rwRegister(
		SPI_HandleTypeDef * spi,
		uint8_t	* toTransmit,
		uint8_t * toReceive,
		uint8_t   sizeToTransmit
) {
 8025e64:	b590      	push	{r4, r7, lr}
 8025e66:	b087      	sub	sp, #28
 8025e68:	af02      	add	r7, sp, #8
 8025e6a:	60f8      	str	r0, [r7, #12]
 8025e6c:	60b9      	str	r1, [r7, #8]
 8025e6e:	607a      	str	r2, [r7, #4]
 8025e70:	001a      	movs	r2, r3
 8025e72:	1cfb      	adds	r3, r7, #3
 8025e74:	701a      	strb	r2, [r3, #0]
	return (_SPI_Status)HAL_SPI_TransmitReceive(
 8025e76:	1cfb      	adds	r3, r7, #3
 8025e78:	781b      	ldrb	r3, [r3, #0]
 8025e7a:	b29c      	uxth	r4, r3
 8025e7c:	687a      	ldr	r2, [r7, #4]
 8025e7e:	68b9      	ldr	r1, [r7, #8]
 8025e80:	68f8      	ldr	r0, [r7, #12]
 8025e82:	2364      	movs	r3, #100	; 0x64
 8025e84:	9300      	str	r3, [sp, #0]
 8025e86:	0023      	movs	r3, r4
 8025e88:	f7e0 fac2 	bl	8006410 <HAL_SPI_TransmitReceive>
 8025e8c:	0003      	movs	r3, r0
				toTransmit,
				toReceive,
				sizeToTransmit,
				ITSDK_SPI_TIMEOUT
		);
}
 8025e8e:	0018      	movs	r0, r3
 8025e90:	46bd      	mov	sp, r7
 8025e92:	b005      	add	sp, #20
 8025e94:	bd90      	pop	{r4, r7, pc}

08025e96 <bzero>:
 8025e96:	b510      	push	{r4, lr}
 8025e98:	000a      	movs	r2, r1
 8025e9a:	2100      	movs	r1, #0
 8025e9c:	f000 f848 	bl	8025f30 <memset>
 8025ea0:	bd10      	pop	{r4, pc}
	...

08025ea4 <__errno>:
 8025ea4:	4b01      	ldr	r3, [pc, #4]	; (8025eac <__errno+0x8>)
 8025ea6:	6818      	ldr	r0, [r3, #0]
 8025ea8:	4770      	bx	lr
 8025eaa:	46c0      	nop			; (mov r8, r8)
 8025eac:	20000060 	.word	0x20000060

08025eb0 <__libc_init_array>:
 8025eb0:	b570      	push	{r4, r5, r6, lr}
 8025eb2:	2600      	movs	r6, #0
 8025eb4:	4d0c      	ldr	r5, [pc, #48]	; (8025ee8 <__libc_init_array+0x38>)
 8025eb6:	4c0d      	ldr	r4, [pc, #52]	; (8025eec <__libc_init_array+0x3c>)
 8025eb8:	1b64      	subs	r4, r4, r5
 8025eba:	10a4      	asrs	r4, r4, #2
 8025ebc:	42a6      	cmp	r6, r4
 8025ebe:	d109      	bne.n	8025ed4 <__libc_init_array+0x24>
 8025ec0:	2600      	movs	r6, #0
 8025ec2:	f000 fd8f 	bl	80269e4 <_init>
 8025ec6:	4d0a      	ldr	r5, [pc, #40]	; (8025ef0 <__libc_init_array+0x40>)
 8025ec8:	4c0a      	ldr	r4, [pc, #40]	; (8025ef4 <__libc_init_array+0x44>)
 8025eca:	1b64      	subs	r4, r4, r5
 8025ecc:	10a4      	asrs	r4, r4, #2
 8025ece:	42a6      	cmp	r6, r4
 8025ed0:	d105      	bne.n	8025ede <__libc_init_array+0x2e>
 8025ed2:	bd70      	pop	{r4, r5, r6, pc}
 8025ed4:	00b3      	lsls	r3, r6, #2
 8025ed6:	58eb      	ldr	r3, [r5, r3]
 8025ed8:	4798      	blx	r3
 8025eda:	3601      	adds	r6, #1
 8025edc:	e7ee      	b.n	8025ebc <__libc_init_array+0xc>
 8025ede:	00b3      	lsls	r3, r6, #2
 8025ee0:	58eb      	ldr	r3, [r5, r3]
 8025ee2:	4798      	blx	r3
 8025ee4:	3601      	adds	r6, #1
 8025ee6:	e7f2      	b.n	8025ece <__libc_init_array+0x1e>
 8025ee8:	08029250 	.word	0x08029250
 8025eec:	08029250 	.word	0x08029250
 8025ef0:	08029250 	.word	0x08029250
 8025ef4:	08029254 	.word	0x08029254

08025ef8 <memcpy>:
 8025ef8:	2300      	movs	r3, #0
 8025efa:	b510      	push	{r4, lr}
 8025efc:	429a      	cmp	r2, r3
 8025efe:	d100      	bne.n	8025f02 <memcpy+0xa>
 8025f00:	bd10      	pop	{r4, pc}
 8025f02:	5ccc      	ldrb	r4, [r1, r3]
 8025f04:	54c4      	strb	r4, [r0, r3]
 8025f06:	3301      	adds	r3, #1
 8025f08:	e7f8      	b.n	8025efc <memcpy+0x4>

08025f0a <memmove>:
 8025f0a:	b510      	push	{r4, lr}
 8025f0c:	4288      	cmp	r0, r1
 8025f0e:	d902      	bls.n	8025f16 <memmove+0xc>
 8025f10:	188b      	adds	r3, r1, r2
 8025f12:	4298      	cmp	r0, r3
 8025f14:	d303      	bcc.n	8025f1e <memmove+0x14>
 8025f16:	2300      	movs	r3, #0
 8025f18:	e007      	b.n	8025f2a <memmove+0x20>
 8025f1a:	5c8b      	ldrb	r3, [r1, r2]
 8025f1c:	5483      	strb	r3, [r0, r2]
 8025f1e:	3a01      	subs	r2, #1
 8025f20:	d2fb      	bcs.n	8025f1a <memmove+0x10>
 8025f22:	bd10      	pop	{r4, pc}
 8025f24:	5ccc      	ldrb	r4, [r1, r3]
 8025f26:	54c4      	strb	r4, [r0, r3]
 8025f28:	3301      	adds	r3, #1
 8025f2a:	429a      	cmp	r2, r3
 8025f2c:	d1fa      	bne.n	8025f24 <memmove+0x1a>
 8025f2e:	e7f8      	b.n	8025f22 <memmove+0x18>

08025f30 <memset>:
 8025f30:	0003      	movs	r3, r0
 8025f32:	1812      	adds	r2, r2, r0
 8025f34:	4293      	cmp	r3, r2
 8025f36:	d100      	bne.n	8025f3a <memset+0xa>
 8025f38:	4770      	bx	lr
 8025f3a:	7019      	strb	r1, [r3, #0]
 8025f3c:	3301      	adds	r3, #1
 8025f3e:	e7f9      	b.n	8025f34 <memset+0x4>

08025f40 <_vsniprintf_r>:
 8025f40:	b530      	push	{r4, r5, lr}
 8025f42:	0014      	movs	r4, r2
 8025f44:	b09b      	sub	sp, #108	; 0x6c
 8025f46:	0005      	movs	r5, r0
 8025f48:	001a      	movs	r2, r3
 8025f4a:	2c00      	cmp	r4, #0
 8025f4c:	da05      	bge.n	8025f5a <_vsniprintf_r+0x1a>
 8025f4e:	238b      	movs	r3, #139	; 0x8b
 8025f50:	6003      	str	r3, [r0, #0]
 8025f52:	2001      	movs	r0, #1
 8025f54:	4240      	negs	r0, r0
 8025f56:	b01b      	add	sp, #108	; 0x6c
 8025f58:	bd30      	pop	{r4, r5, pc}
 8025f5a:	2382      	movs	r3, #130	; 0x82
 8025f5c:	4668      	mov	r0, sp
 8025f5e:	009b      	lsls	r3, r3, #2
 8025f60:	8183      	strh	r3, [r0, #12]
 8025f62:	2300      	movs	r3, #0
 8025f64:	9100      	str	r1, [sp, #0]
 8025f66:	9104      	str	r1, [sp, #16]
 8025f68:	429c      	cmp	r4, r3
 8025f6a:	d000      	beq.n	8025f6e <_vsniprintf_r+0x2e>
 8025f6c:	1e63      	subs	r3, r4, #1
 8025f6e:	9302      	str	r3, [sp, #8]
 8025f70:	9305      	str	r3, [sp, #20]
 8025f72:	2301      	movs	r3, #1
 8025f74:	4669      	mov	r1, sp
 8025f76:	425b      	negs	r3, r3
 8025f78:	81cb      	strh	r3, [r1, #14]
 8025f7a:	0028      	movs	r0, r5
 8025f7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025f7e:	f000 f879 	bl	8026074 <_svfiprintf_r>
 8025f82:	1c43      	adds	r3, r0, #1
 8025f84:	da01      	bge.n	8025f8a <_vsniprintf_r+0x4a>
 8025f86:	238b      	movs	r3, #139	; 0x8b
 8025f88:	602b      	str	r3, [r5, #0]
 8025f8a:	2c00      	cmp	r4, #0
 8025f8c:	d0e3      	beq.n	8025f56 <_vsniprintf_r+0x16>
 8025f8e:	2300      	movs	r3, #0
 8025f90:	9a00      	ldr	r2, [sp, #0]
 8025f92:	7013      	strb	r3, [r2, #0]
 8025f94:	e7df      	b.n	8025f56 <_vsniprintf_r+0x16>
	...

08025f98 <vsniprintf>:
 8025f98:	b507      	push	{r0, r1, r2, lr}
 8025f9a:	9300      	str	r3, [sp, #0]
 8025f9c:	0013      	movs	r3, r2
 8025f9e:	000a      	movs	r2, r1
 8025fa0:	0001      	movs	r1, r0
 8025fa2:	4802      	ldr	r0, [pc, #8]	; (8025fac <vsniprintf+0x14>)
 8025fa4:	6800      	ldr	r0, [r0, #0]
 8025fa6:	f7ff ffcb 	bl	8025f40 <_vsniprintf_r>
 8025faa:	bd0e      	pop	{r1, r2, r3, pc}
 8025fac:	20000060 	.word	0x20000060

08025fb0 <__ssputs_r>:
 8025fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025fb2:	688e      	ldr	r6, [r1, #8]
 8025fb4:	b085      	sub	sp, #20
 8025fb6:	0007      	movs	r7, r0
 8025fb8:	000c      	movs	r4, r1
 8025fba:	9203      	str	r2, [sp, #12]
 8025fbc:	9301      	str	r3, [sp, #4]
 8025fbe:	429e      	cmp	r6, r3
 8025fc0:	d83c      	bhi.n	802603c <__ssputs_r+0x8c>
 8025fc2:	2390      	movs	r3, #144	; 0x90
 8025fc4:	898a      	ldrh	r2, [r1, #12]
 8025fc6:	00db      	lsls	r3, r3, #3
 8025fc8:	421a      	tst	r2, r3
 8025fca:	d034      	beq.n	8026036 <__ssputs_r+0x86>
 8025fcc:	2503      	movs	r5, #3
 8025fce:	6909      	ldr	r1, [r1, #16]
 8025fd0:	6823      	ldr	r3, [r4, #0]
 8025fd2:	1a5b      	subs	r3, r3, r1
 8025fd4:	9302      	str	r3, [sp, #8]
 8025fd6:	6963      	ldr	r3, [r4, #20]
 8025fd8:	9802      	ldr	r0, [sp, #8]
 8025fda:	435d      	muls	r5, r3
 8025fdc:	0feb      	lsrs	r3, r5, #31
 8025fde:	195d      	adds	r5, r3, r5
 8025fe0:	9b01      	ldr	r3, [sp, #4]
 8025fe2:	106d      	asrs	r5, r5, #1
 8025fe4:	3301      	adds	r3, #1
 8025fe6:	181b      	adds	r3, r3, r0
 8025fe8:	42ab      	cmp	r3, r5
 8025fea:	d900      	bls.n	8025fee <__ssputs_r+0x3e>
 8025fec:	001d      	movs	r5, r3
 8025fee:	0553      	lsls	r3, r2, #21
 8025ff0:	d532      	bpl.n	8026058 <__ssputs_r+0xa8>
 8025ff2:	0029      	movs	r1, r5
 8025ff4:	0038      	movs	r0, r7
 8025ff6:	f000 fb07 	bl	8026608 <_malloc_r>
 8025ffa:	1e06      	subs	r6, r0, #0
 8025ffc:	d109      	bne.n	8026012 <__ssputs_r+0x62>
 8025ffe:	230c      	movs	r3, #12
 8026000:	603b      	str	r3, [r7, #0]
 8026002:	2340      	movs	r3, #64	; 0x40
 8026004:	2001      	movs	r0, #1
 8026006:	89a2      	ldrh	r2, [r4, #12]
 8026008:	4240      	negs	r0, r0
 802600a:	4313      	orrs	r3, r2
 802600c:	81a3      	strh	r3, [r4, #12]
 802600e:	b005      	add	sp, #20
 8026010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026012:	9a02      	ldr	r2, [sp, #8]
 8026014:	6921      	ldr	r1, [r4, #16]
 8026016:	f7ff ff6f 	bl	8025ef8 <memcpy>
 802601a:	89a3      	ldrh	r3, [r4, #12]
 802601c:	4a14      	ldr	r2, [pc, #80]	; (8026070 <__ssputs_r+0xc0>)
 802601e:	401a      	ands	r2, r3
 8026020:	2380      	movs	r3, #128	; 0x80
 8026022:	4313      	orrs	r3, r2
 8026024:	81a3      	strh	r3, [r4, #12]
 8026026:	9b02      	ldr	r3, [sp, #8]
 8026028:	6126      	str	r6, [r4, #16]
 802602a:	18f6      	adds	r6, r6, r3
 802602c:	6026      	str	r6, [r4, #0]
 802602e:	6165      	str	r5, [r4, #20]
 8026030:	9e01      	ldr	r6, [sp, #4]
 8026032:	1aed      	subs	r5, r5, r3
 8026034:	60a5      	str	r5, [r4, #8]
 8026036:	9b01      	ldr	r3, [sp, #4]
 8026038:	429e      	cmp	r6, r3
 802603a:	d900      	bls.n	802603e <__ssputs_r+0x8e>
 802603c:	9e01      	ldr	r6, [sp, #4]
 802603e:	0032      	movs	r2, r6
 8026040:	9903      	ldr	r1, [sp, #12]
 8026042:	6820      	ldr	r0, [r4, #0]
 8026044:	f7ff ff61 	bl	8025f0a <memmove>
 8026048:	68a3      	ldr	r3, [r4, #8]
 802604a:	2000      	movs	r0, #0
 802604c:	1b9b      	subs	r3, r3, r6
 802604e:	60a3      	str	r3, [r4, #8]
 8026050:	6823      	ldr	r3, [r4, #0]
 8026052:	199e      	adds	r6, r3, r6
 8026054:	6026      	str	r6, [r4, #0]
 8026056:	e7da      	b.n	802600e <__ssputs_r+0x5e>
 8026058:	002a      	movs	r2, r5
 802605a:	0038      	movs	r0, r7
 802605c:	f000 fb32 	bl	80266c4 <_realloc_r>
 8026060:	1e06      	subs	r6, r0, #0
 8026062:	d1e0      	bne.n	8026026 <__ssputs_r+0x76>
 8026064:	6921      	ldr	r1, [r4, #16]
 8026066:	0038      	movs	r0, r7
 8026068:	f000 fa84 	bl	8026574 <_free_r>
 802606c:	e7c7      	b.n	8025ffe <__ssputs_r+0x4e>
 802606e:	46c0      	nop			; (mov r8, r8)
 8026070:	fffffb7f 	.word	0xfffffb7f

08026074 <_svfiprintf_r>:
 8026074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026076:	b0a1      	sub	sp, #132	; 0x84
 8026078:	9003      	str	r0, [sp, #12]
 802607a:	001d      	movs	r5, r3
 802607c:	898b      	ldrh	r3, [r1, #12]
 802607e:	000f      	movs	r7, r1
 8026080:	0016      	movs	r6, r2
 8026082:	061b      	lsls	r3, r3, #24
 8026084:	d511      	bpl.n	80260aa <_svfiprintf_r+0x36>
 8026086:	690b      	ldr	r3, [r1, #16]
 8026088:	2b00      	cmp	r3, #0
 802608a:	d10e      	bne.n	80260aa <_svfiprintf_r+0x36>
 802608c:	2140      	movs	r1, #64	; 0x40
 802608e:	f000 fabb 	bl	8026608 <_malloc_r>
 8026092:	6038      	str	r0, [r7, #0]
 8026094:	6138      	str	r0, [r7, #16]
 8026096:	2800      	cmp	r0, #0
 8026098:	d105      	bne.n	80260a6 <_svfiprintf_r+0x32>
 802609a:	230c      	movs	r3, #12
 802609c:	9a03      	ldr	r2, [sp, #12]
 802609e:	3801      	subs	r0, #1
 80260a0:	6013      	str	r3, [r2, #0]
 80260a2:	b021      	add	sp, #132	; 0x84
 80260a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260a6:	2340      	movs	r3, #64	; 0x40
 80260a8:	617b      	str	r3, [r7, #20]
 80260aa:	2300      	movs	r3, #0
 80260ac:	ac08      	add	r4, sp, #32
 80260ae:	6163      	str	r3, [r4, #20]
 80260b0:	3320      	adds	r3, #32
 80260b2:	7663      	strb	r3, [r4, #25]
 80260b4:	3310      	adds	r3, #16
 80260b6:	76a3      	strb	r3, [r4, #26]
 80260b8:	9507      	str	r5, [sp, #28]
 80260ba:	0035      	movs	r5, r6
 80260bc:	782b      	ldrb	r3, [r5, #0]
 80260be:	2b00      	cmp	r3, #0
 80260c0:	d001      	beq.n	80260c6 <_svfiprintf_r+0x52>
 80260c2:	2b25      	cmp	r3, #37	; 0x25
 80260c4:	d146      	bne.n	8026154 <_svfiprintf_r+0xe0>
 80260c6:	1bab      	subs	r3, r5, r6
 80260c8:	9305      	str	r3, [sp, #20]
 80260ca:	d00c      	beq.n	80260e6 <_svfiprintf_r+0x72>
 80260cc:	0032      	movs	r2, r6
 80260ce:	0039      	movs	r1, r7
 80260d0:	9803      	ldr	r0, [sp, #12]
 80260d2:	f7ff ff6d 	bl	8025fb0 <__ssputs_r>
 80260d6:	1c43      	adds	r3, r0, #1
 80260d8:	d100      	bne.n	80260dc <_svfiprintf_r+0x68>
 80260da:	e0ae      	b.n	802623a <_svfiprintf_r+0x1c6>
 80260dc:	6962      	ldr	r2, [r4, #20]
 80260de:	9b05      	ldr	r3, [sp, #20]
 80260e0:	4694      	mov	ip, r2
 80260e2:	4463      	add	r3, ip
 80260e4:	6163      	str	r3, [r4, #20]
 80260e6:	782b      	ldrb	r3, [r5, #0]
 80260e8:	2b00      	cmp	r3, #0
 80260ea:	d100      	bne.n	80260ee <_svfiprintf_r+0x7a>
 80260ec:	e0a5      	b.n	802623a <_svfiprintf_r+0x1c6>
 80260ee:	2201      	movs	r2, #1
 80260f0:	2300      	movs	r3, #0
 80260f2:	4252      	negs	r2, r2
 80260f4:	6062      	str	r2, [r4, #4]
 80260f6:	a904      	add	r1, sp, #16
 80260f8:	3254      	adds	r2, #84	; 0x54
 80260fa:	1852      	adds	r2, r2, r1
 80260fc:	1c6e      	adds	r6, r5, #1
 80260fe:	6023      	str	r3, [r4, #0]
 8026100:	60e3      	str	r3, [r4, #12]
 8026102:	60a3      	str	r3, [r4, #8]
 8026104:	7013      	strb	r3, [r2, #0]
 8026106:	65a3      	str	r3, [r4, #88]	; 0x58
 8026108:	7831      	ldrb	r1, [r6, #0]
 802610a:	2205      	movs	r2, #5
 802610c:	4853      	ldr	r0, [pc, #332]	; (802625c <_svfiprintf_r+0x1e8>)
 802610e:	f000 fa25 	bl	802655c <memchr>
 8026112:	1c75      	adds	r5, r6, #1
 8026114:	2800      	cmp	r0, #0
 8026116:	d11f      	bne.n	8026158 <_svfiprintf_r+0xe4>
 8026118:	6822      	ldr	r2, [r4, #0]
 802611a:	06d3      	lsls	r3, r2, #27
 802611c:	d504      	bpl.n	8026128 <_svfiprintf_r+0xb4>
 802611e:	2353      	movs	r3, #83	; 0x53
 8026120:	a904      	add	r1, sp, #16
 8026122:	185b      	adds	r3, r3, r1
 8026124:	2120      	movs	r1, #32
 8026126:	7019      	strb	r1, [r3, #0]
 8026128:	0713      	lsls	r3, r2, #28
 802612a:	d504      	bpl.n	8026136 <_svfiprintf_r+0xc2>
 802612c:	2353      	movs	r3, #83	; 0x53
 802612e:	a904      	add	r1, sp, #16
 8026130:	185b      	adds	r3, r3, r1
 8026132:	212b      	movs	r1, #43	; 0x2b
 8026134:	7019      	strb	r1, [r3, #0]
 8026136:	7833      	ldrb	r3, [r6, #0]
 8026138:	2b2a      	cmp	r3, #42	; 0x2a
 802613a:	d016      	beq.n	802616a <_svfiprintf_r+0xf6>
 802613c:	0035      	movs	r5, r6
 802613e:	2100      	movs	r1, #0
 8026140:	200a      	movs	r0, #10
 8026142:	68e3      	ldr	r3, [r4, #12]
 8026144:	782a      	ldrb	r2, [r5, #0]
 8026146:	1c6e      	adds	r6, r5, #1
 8026148:	3a30      	subs	r2, #48	; 0x30
 802614a:	2a09      	cmp	r2, #9
 802614c:	d94e      	bls.n	80261ec <_svfiprintf_r+0x178>
 802614e:	2900      	cmp	r1, #0
 8026150:	d018      	beq.n	8026184 <_svfiprintf_r+0x110>
 8026152:	e010      	b.n	8026176 <_svfiprintf_r+0x102>
 8026154:	3501      	adds	r5, #1
 8026156:	e7b1      	b.n	80260bc <_svfiprintf_r+0x48>
 8026158:	4b40      	ldr	r3, [pc, #256]	; (802625c <_svfiprintf_r+0x1e8>)
 802615a:	6822      	ldr	r2, [r4, #0]
 802615c:	1ac0      	subs	r0, r0, r3
 802615e:	2301      	movs	r3, #1
 8026160:	4083      	lsls	r3, r0
 8026162:	4313      	orrs	r3, r2
 8026164:	6023      	str	r3, [r4, #0]
 8026166:	002e      	movs	r6, r5
 8026168:	e7ce      	b.n	8026108 <_svfiprintf_r+0x94>
 802616a:	9b07      	ldr	r3, [sp, #28]
 802616c:	1d19      	adds	r1, r3, #4
 802616e:	681b      	ldr	r3, [r3, #0]
 8026170:	9107      	str	r1, [sp, #28]
 8026172:	2b00      	cmp	r3, #0
 8026174:	db01      	blt.n	802617a <_svfiprintf_r+0x106>
 8026176:	930b      	str	r3, [sp, #44]	; 0x2c
 8026178:	e004      	b.n	8026184 <_svfiprintf_r+0x110>
 802617a:	425b      	negs	r3, r3
 802617c:	60e3      	str	r3, [r4, #12]
 802617e:	2302      	movs	r3, #2
 8026180:	4313      	orrs	r3, r2
 8026182:	6023      	str	r3, [r4, #0]
 8026184:	782b      	ldrb	r3, [r5, #0]
 8026186:	2b2e      	cmp	r3, #46	; 0x2e
 8026188:	d10a      	bne.n	80261a0 <_svfiprintf_r+0x12c>
 802618a:	786b      	ldrb	r3, [r5, #1]
 802618c:	2b2a      	cmp	r3, #42	; 0x2a
 802618e:	d135      	bne.n	80261fc <_svfiprintf_r+0x188>
 8026190:	9b07      	ldr	r3, [sp, #28]
 8026192:	3502      	adds	r5, #2
 8026194:	1d1a      	adds	r2, r3, #4
 8026196:	681b      	ldr	r3, [r3, #0]
 8026198:	9207      	str	r2, [sp, #28]
 802619a:	2b00      	cmp	r3, #0
 802619c:	db2b      	blt.n	80261f6 <_svfiprintf_r+0x182>
 802619e:	9309      	str	r3, [sp, #36]	; 0x24
 80261a0:	4e2f      	ldr	r6, [pc, #188]	; (8026260 <_svfiprintf_r+0x1ec>)
 80261a2:	7829      	ldrb	r1, [r5, #0]
 80261a4:	2203      	movs	r2, #3
 80261a6:	0030      	movs	r0, r6
 80261a8:	f000 f9d8 	bl	802655c <memchr>
 80261ac:	2800      	cmp	r0, #0
 80261ae:	d006      	beq.n	80261be <_svfiprintf_r+0x14a>
 80261b0:	2340      	movs	r3, #64	; 0x40
 80261b2:	1b80      	subs	r0, r0, r6
 80261b4:	4083      	lsls	r3, r0
 80261b6:	6822      	ldr	r2, [r4, #0]
 80261b8:	3501      	adds	r5, #1
 80261ba:	4313      	orrs	r3, r2
 80261bc:	6023      	str	r3, [r4, #0]
 80261be:	7829      	ldrb	r1, [r5, #0]
 80261c0:	2206      	movs	r2, #6
 80261c2:	4828      	ldr	r0, [pc, #160]	; (8026264 <_svfiprintf_r+0x1f0>)
 80261c4:	1c6e      	adds	r6, r5, #1
 80261c6:	7621      	strb	r1, [r4, #24]
 80261c8:	f000 f9c8 	bl	802655c <memchr>
 80261cc:	2800      	cmp	r0, #0
 80261ce:	d03c      	beq.n	802624a <_svfiprintf_r+0x1d6>
 80261d0:	4b25      	ldr	r3, [pc, #148]	; (8026268 <_svfiprintf_r+0x1f4>)
 80261d2:	2b00      	cmp	r3, #0
 80261d4:	d125      	bne.n	8026222 <_svfiprintf_r+0x1ae>
 80261d6:	2207      	movs	r2, #7
 80261d8:	9b07      	ldr	r3, [sp, #28]
 80261da:	3307      	adds	r3, #7
 80261dc:	4393      	bics	r3, r2
 80261de:	3308      	adds	r3, #8
 80261e0:	9307      	str	r3, [sp, #28]
 80261e2:	6963      	ldr	r3, [r4, #20]
 80261e4:	9a04      	ldr	r2, [sp, #16]
 80261e6:	189b      	adds	r3, r3, r2
 80261e8:	6163      	str	r3, [r4, #20]
 80261ea:	e766      	b.n	80260ba <_svfiprintf_r+0x46>
 80261ec:	4343      	muls	r3, r0
 80261ee:	2101      	movs	r1, #1
 80261f0:	189b      	adds	r3, r3, r2
 80261f2:	0035      	movs	r5, r6
 80261f4:	e7a6      	b.n	8026144 <_svfiprintf_r+0xd0>
 80261f6:	2301      	movs	r3, #1
 80261f8:	425b      	negs	r3, r3
 80261fa:	e7d0      	b.n	802619e <_svfiprintf_r+0x12a>
 80261fc:	2300      	movs	r3, #0
 80261fe:	200a      	movs	r0, #10
 8026200:	001a      	movs	r2, r3
 8026202:	3501      	adds	r5, #1
 8026204:	6063      	str	r3, [r4, #4]
 8026206:	7829      	ldrb	r1, [r5, #0]
 8026208:	1c6e      	adds	r6, r5, #1
 802620a:	3930      	subs	r1, #48	; 0x30
 802620c:	2909      	cmp	r1, #9
 802620e:	d903      	bls.n	8026218 <_svfiprintf_r+0x1a4>
 8026210:	2b00      	cmp	r3, #0
 8026212:	d0c5      	beq.n	80261a0 <_svfiprintf_r+0x12c>
 8026214:	9209      	str	r2, [sp, #36]	; 0x24
 8026216:	e7c3      	b.n	80261a0 <_svfiprintf_r+0x12c>
 8026218:	4342      	muls	r2, r0
 802621a:	2301      	movs	r3, #1
 802621c:	1852      	adds	r2, r2, r1
 802621e:	0035      	movs	r5, r6
 8026220:	e7f1      	b.n	8026206 <_svfiprintf_r+0x192>
 8026222:	ab07      	add	r3, sp, #28
 8026224:	9300      	str	r3, [sp, #0]
 8026226:	003a      	movs	r2, r7
 8026228:	4b10      	ldr	r3, [pc, #64]	; (802626c <_svfiprintf_r+0x1f8>)
 802622a:	0021      	movs	r1, r4
 802622c:	9803      	ldr	r0, [sp, #12]
 802622e:	e000      	b.n	8026232 <_svfiprintf_r+0x1be>
 8026230:	bf00      	nop
 8026232:	9004      	str	r0, [sp, #16]
 8026234:	9b04      	ldr	r3, [sp, #16]
 8026236:	3301      	adds	r3, #1
 8026238:	d1d3      	bne.n	80261e2 <_svfiprintf_r+0x16e>
 802623a:	89bb      	ldrh	r3, [r7, #12]
 802623c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802623e:	065b      	lsls	r3, r3, #25
 8026240:	d400      	bmi.n	8026244 <_svfiprintf_r+0x1d0>
 8026242:	e72e      	b.n	80260a2 <_svfiprintf_r+0x2e>
 8026244:	2001      	movs	r0, #1
 8026246:	4240      	negs	r0, r0
 8026248:	e72b      	b.n	80260a2 <_svfiprintf_r+0x2e>
 802624a:	ab07      	add	r3, sp, #28
 802624c:	9300      	str	r3, [sp, #0]
 802624e:	003a      	movs	r2, r7
 8026250:	4b06      	ldr	r3, [pc, #24]	; (802626c <_svfiprintf_r+0x1f8>)
 8026252:	0021      	movs	r1, r4
 8026254:	9803      	ldr	r0, [sp, #12]
 8026256:	f000 f879 	bl	802634c <_printf_i>
 802625a:	e7ea      	b.n	8026232 <_svfiprintf_r+0x1be>
 802625c:	08029214 	.word	0x08029214
 8026260:	0802921a 	.word	0x0802921a
 8026264:	0802921e 	.word	0x0802921e
 8026268:	00000000 	.word	0x00000000
 802626c:	08025fb1 	.word	0x08025fb1

08026270 <_printf_common>:
 8026270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026272:	0015      	movs	r5, r2
 8026274:	9301      	str	r3, [sp, #4]
 8026276:	688a      	ldr	r2, [r1, #8]
 8026278:	690b      	ldr	r3, [r1, #16]
 802627a:	9000      	str	r0, [sp, #0]
 802627c:	000c      	movs	r4, r1
 802627e:	4293      	cmp	r3, r2
 8026280:	da00      	bge.n	8026284 <_printf_common+0x14>
 8026282:	0013      	movs	r3, r2
 8026284:	0022      	movs	r2, r4
 8026286:	602b      	str	r3, [r5, #0]
 8026288:	3243      	adds	r2, #67	; 0x43
 802628a:	7812      	ldrb	r2, [r2, #0]
 802628c:	2a00      	cmp	r2, #0
 802628e:	d001      	beq.n	8026294 <_printf_common+0x24>
 8026290:	3301      	adds	r3, #1
 8026292:	602b      	str	r3, [r5, #0]
 8026294:	6823      	ldr	r3, [r4, #0]
 8026296:	069b      	lsls	r3, r3, #26
 8026298:	d502      	bpl.n	80262a0 <_printf_common+0x30>
 802629a:	682b      	ldr	r3, [r5, #0]
 802629c:	3302      	adds	r3, #2
 802629e:	602b      	str	r3, [r5, #0]
 80262a0:	2706      	movs	r7, #6
 80262a2:	6823      	ldr	r3, [r4, #0]
 80262a4:	401f      	ands	r7, r3
 80262a6:	d027      	beq.n	80262f8 <_printf_common+0x88>
 80262a8:	0023      	movs	r3, r4
 80262aa:	3343      	adds	r3, #67	; 0x43
 80262ac:	781b      	ldrb	r3, [r3, #0]
 80262ae:	1e5a      	subs	r2, r3, #1
 80262b0:	4193      	sbcs	r3, r2
 80262b2:	6822      	ldr	r2, [r4, #0]
 80262b4:	0692      	lsls	r2, r2, #26
 80262b6:	d430      	bmi.n	802631a <_printf_common+0xaa>
 80262b8:	0022      	movs	r2, r4
 80262ba:	9901      	ldr	r1, [sp, #4]
 80262bc:	3243      	adds	r2, #67	; 0x43
 80262be:	9800      	ldr	r0, [sp, #0]
 80262c0:	9e08      	ldr	r6, [sp, #32]
 80262c2:	47b0      	blx	r6
 80262c4:	1c43      	adds	r3, r0, #1
 80262c6:	d025      	beq.n	8026314 <_printf_common+0xa4>
 80262c8:	2306      	movs	r3, #6
 80262ca:	6820      	ldr	r0, [r4, #0]
 80262cc:	682a      	ldr	r2, [r5, #0]
 80262ce:	68e1      	ldr	r1, [r4, #12]
 80262d0:	4003      	ands	r3, r0
 80262d2:	2500      	movs	r5, #0
 80262d4:	2b04      	cmp	r3, #4
 80262d6:	d103      	bne.n	80262e0 <_printf_common+0x70>
 80262d8:	1a8d      	subs	r5, r1, r2
 80262da:	43eb      	mvns	r3, r5
 80262dc:	17db      	asrs	r3, r3, #31
 80262de:	401d      	ands	r5, r3
 80262e0:	68a3      	ldr	r3, [r4, #8]
 80262e2:	6922      	ldr	r2, [r4, #16]
 80262e4:	4293      	cmp	r3, r2
 80262e6:	dd01      	ble.n	80262ec <_printf_common+0x7c>
 80262e8:	1a9b      	subs	r3, r3, r2
 80262ea:	18ed      	adds	r5, r5, r3
 80262ec:	2700      	movs	r7, #0
 80262ee:	42bd      	cmp	r5, r7
 80262f0:	d120      	bne.n	8026334 <_printf_common+0xc4>
 80262f2:	2000      	movs	r0, #0
 80262f4:	e010      	b.n	8026318 <_printf_common+0xa8>
 80262f6:	3701      	adds	r7, #1
 80262f8:	68e3      	ldr	r3, [r4, #12]
 80262fa:	682a      	ldr	r2, [r5, #0]
 80262fc:	1a9b      	subs	r3, r3, r2
 80262fe:	42bb      	cmp	r3, r7
 8026300:	ddd2      	ble.n	80262a8 <_printf_common+0x38>
 8026302:	0022      	movs	r2, r4
 8026304:	2301      	movs	r3, #1
 8026306:	3219      	adds	r2, #25
 8026308:	9901      	ldr	r1, [sp, #4]
 802630a:	9800      	ldr	r0, [sp, #0]
 802630c:	9e08      	ldr	r6, [sp, #32]
 802630e:	47b0      	blx	r6
 8026310:	1c43      	adds	r3, r0, #1
 8026312:	d1f0      	bne.n	80262f6 <_printf_common+0x86>
 8026314:	2001      	movs	r0, #1
 8026316:	4240      	negs	r0, r0
 8026318:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802631a:	2030      	movs	r0, #48	; 0x30
 802631c:	18e1      	adds	r1, r4, r3
 802631e:	3143      	adds	r1, #67	; 0x43
 8026320:	7008      	strb	r0, [r1, #0]
 8026322:	0021      	movs	r1, r4
 8026324:	1c5a      	adds	r2, r3, #1
 8026326:	3145      	adds	r1, #69	; 0x45
 8026328:	7809      	ldrb	r1, [r1, #0]
 802632a:	18a2      	adds	r2, r4, r2
 802632c:	3243      	adds	r2, #67	; 0x43
 802632e:	3302      	adds	r3, #2
 8026330:	7011      	strb	r1, [r2, #0]
 8026332:	e7c1      	b.n	80262b8 <_printf_common+0x48>
 8026334:	0022      	movs	r2, r4
 8026336:	2301      	movs	r3, #1
 8026338:	321a      	adds	r2, #26
 802633a:	9901      	ldr	r1, [sp, #4]
 802633c:	9800      	ldr	r0, [sp, #0]
 802633e:	9e08      	ldr	r6, [sp, #32]
 8026340:	47b0      	blx	r6
 8026342:	1c43      	adds	r3, r0, #1
 8026344:	d0e6      	beq.n	8026314 <_printf_common+0xa4>
 8026346:	3701      	adds	r7, #1
 8026348:	e7d1      	b.n	80262ee <_printf_common+0x7e>
	...

0802634c <_printf_i>:
 802634c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802634e:	b089      	sub	sp, #36	; 0x24
 8026350:	9204      	str	r2, [sp, #16]
 8026352:	000a      	movs	r2, r1
 8026354:	3243      	adds	r2, #67	; 0x43
 8026356:	9305      	str	r3, [sp, #20]
 8026358:	9003      	str	r0, [sp, #12]
 802635a:	9202      	str	r2, [sp, #8]
 802635c:	7e0a      	ldrb	r2, [r1, #24]
 802635e:	000c      	movs	r4, r1
 8026360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026362:	2a6e      	cmp	r2, #110	; 0x6e
 8026364:	d100      	bne.n	8026368 <_printf_i+0x1c>
 8026366:	e086      	b.n	8026476 <_printf_i+0x12a>
 8026368:	d81f      	bhi.n	80263aa <_printf_i+0x5e>
 802636a:	2a63      	cmp	r2, #99	; 0x63
 802636c:	d033      	beq.n	80263d6 <_printf_i+0x8a>
 802636e:	d808      	bhi.n	8026382 <_printf_i+0x36>
 8026370:	2a00      	cmp	r2, #0
 8026372:	d100      	bne.n	8026376 <_printf_i+0x2a>
 8026374:	e08c      	b.n	8026490 <_printf_i+0x144>
 8026376:	2a58      	cmp	r2, #88	; 0x58
 8026378:	d04d      	beq.n	8026416 <_printf_i+0xca>
 802637a:	0025      	movs	r5, r4
 802637c:	3542      	adds	r5, #66	; 0x42
 802637e:	702a      	strb	r2, [r5, #0]
 8026380:	e030      	b.n	80263e4 <_printf_i+0x98>
 8026382:	2a64      	cmp	r2, #100	; 0x64
 8026384:	d001      	beq.n	802638a <_printf_i+0x3e>
 8026386:	2a69      	cmp	r2, #105	; 0x69
 8026388:	d1f7      	bne.n	802637a <_printf_i+0x2e>
 802638a:	6819      	ldr	r1, [r3, #0]
 802638c:	6825      	ldr	r5, [r4, #0]
 802638e:	1d0a      	adds	r2, r1, #4
 8026390:	0628      	lsls	r0, r5, #24
 8026392:	d529      	bpl.n	80263e8 <_printf_i+0x9c>
 8026394:	6808      	ldr	r0, [r1, #0]
 8026396:	601a      	str	r2, [r3, #0]
 8026398:	2800      	cmp	r0, #0
 802639a:	da03      	bge.n	80263a4 <_printf_i+0x58>
 802639c:	232d      	movs	r3, #45	; 0x2d
 802639e:	9a02      	ldr	r2, [sp, #8]
 80263a0:	4240      	negs	r0, r0
 80263a2:	7013      	strb	r3, [r2, #0]
 80263a4:	4e6b      	ldr	r6, [pc, #428]	; (8026554 <_printf_i+0x208>)
 80263a6:	270a      	movs	r7, #10
 80263a8:	e04f      	b.n	802644a <_printf_i+0xfe>
 80263aa:	2a73      	cmp	r2, #115	; 0x73
 80263ac:	d074      	beq.n	8026498 <_printf_i+0x14c>
 80263ae:	d808      	bhi.n	80263c2 <_printf_i+0x76>
 80263b0:	2a6f      	cmp	r2, #111	; 0x6f
 80263b2:	d01f      	beq.n	80263f4 <_printf_i+0xa8>
 80263b4:	2a70      	cmp	r2, #112	; 0x70
 80263b6:	d1e0      	bne.n	802637a <_printf_i+0x2e>
 80263b8:	2220      	movs	r2, #32
 80263ba:	6809      	ldr	r1, [r1, #0]
 80263bc:	430a      	orrs	r2, r1
 80263be:	6022      	str	r2, [r4, #0]
 80263c0:	e003      	b.n	80263ca <_printf_i+0x7e>
 80263c2:	2a75      	cmp	r2, #117	; 0x75
 80263c4:	d016      	beq.n	80263f4 <_printf_i+0xa8>
 80263c6:	2a78      	cmp	r2, #120	; 0x78
 80263c8:	d1d7      	bne.n	802637a <_printf_i+0x2e>
 80263ca:	0022      	movs	r2, r4
 80263cc:	2178      	movs	r1, #120	; 0x78
 80263ce:	3245      	adds	r2, #69	; 0x45
 80263d0:	7011      	strb	r1, [r2, #0]
 80263d2:	4e61      	ldr	r6, [pc, #388]	; (8026558 <_printf_i+0x20c>)
 80263d4:	e022      	b.n	802641c <_printf_i+0xd0>
 80263d6:	0025      	movs	r5, r4
 80263d8:	681a      	ldr	r2, [r3, #0]
 80263da:	3542      	adds	r5, #66	; 0x42
 80263dc:	1d11      	adds	r1, r2, #4
 80263de:	6019      	str	r1, [r3, #0]
 80263e0:	6813      	ldr	r3, [r2, #0]
 80263e2:	702b      	strb	r3, [r5, #0]
 80263e4:	2301      	movs	r3, #1
 80263e6:	e065      	b.n	80264b4 <_printf_i+0x168>
 80263e8:	6808      	ldr	r0, [r1, #0]
 80263ea:	601a      	str	r2, [r3, #0]
 80263ec:	0669      	lsls	r1, r5, #25
 80263ee:	d5d3      	bpl.n	8026398 <_printf_i+0x4c>
 80263f0:	b200      	sxth	r0, r0
 80263f2:	e7d1      	b.n	8026398 <_printf_i+0x4c>
 80263f4:	6819      	ldr	r1, [r3, #0]
 80263f6:	6825      	ldr	r5, [r4, #0]
 80263f8:	1d08      	adds	r0, r1, #4
 80263fa:	6018      	str	r0, [r3, #0]
 80263fc:	6808      	ldr	r0, [r1, #0]
 80263fe:	062e      	lsls	r6, r5, #24
 8026400:	d505      	bpl.n	802640e <_printf_i+0xc2>
 8026402:	4e54      	ldr	r6, [pc, #336]	; (8026554 <_printf_i+0x208>)
 8026404:	2708      	movs	r7, #8
 8026406:	2a6f      	cmp	r2, #111	; 0x6f
 8026408:	d01b      	beq.n	8026442 <_printf_i+0xf6>
 802640a:	270a      	movs	r7, #10
 802640c:	e019      	b.n	8026442 <_printf_i+0xf6>
 802640e:	066d      	lsls	r5, r5, #25
 8026410:	d5f7      	bpl.n	8026402 <_printf_i+0xb6>
 8026412:	b280      	uxth	r0, r0
 8026414:	e7f5      	b.n	8026402 <_printf_i+0xb6>
 8026416:	3145      	adds	r1, #69	; 0x45
 8026418:	4e4e      	ldr	r6, [pc, #312]	; (8026554 <_printf_i+0x208>)
 802641a:	700a      	strb	r2, [r1, #0]
 802641c:	6818      	ldr	r0, [r3, #0]
 802641e:	6822      	ldr	r2, [r4, #0]
 8026420:	1d01      	adds	r1, r0, #4
 8026422:	6800      	ldr	r0, [r0, #0]
 8026424:	6019      	str	r1, [r3, #0]
 8026426:	0615      	lsls	r5, r2, #24
 8026428:	d521      	bpl.n	802646e <_printf_i+0x122>
 802642a:	07d3      	lsls	r3, r2, #31
 802642c:	d502      	bpl.n	8026434 <_printf_i+0xe8>
 802642e:	2320      	movs	r3, #32
 8026430:	431a      	orrs	r2, r3
 8026432:	6022      	str	r2, [r4, #0]
 8026434:	2710      	movs	r7, #16
 8026436:	2800      	cmp	r0, #0
 8026438:	d103      	bne.n	8026442 <_printf_i+0xf6>
 802643a:	2320      	movs	r3, #32
 802643c:	6822      	ldr	r2, [r4, #0]
 802643e:	439a      	bics	r2, r3
 8026440:	6022      	str	r2, [r4, #0]
 8026442:	0023      	movs	r3, r4
 8026444:	2200      	movs	r2, #0
 8026446:	3343      	adds	r3, #67	; 0x43
 8026448:	701a      	strb	r2, [r3, #0]
 802644a:	6863      	ldr	r3, [r4, #4]
 802644c:	60a3      	str	r3, [r4, #8]
 802644e:	2b00      	cmp	r3, #0
 8026450:	db58      	blt.n	8026504 <_printf_i+0x1b8>
 8026452:	2204      	movs	r2, #4
 8026454:	6821      	ldr	r1, [r4, #0]
 8026456:	4391      	bics	r1, r2
 8026458:	6021      	str	r1, [r4, #0]
 802645a:	2800      	cmp	r0, #0
 802645c:	d154      	bne.n	8026508 <_printf_i+0x1bc>
 802645e:	9d02      	ldr	r5, [sp, #8]
 8026460:	2b00      	cmp	r3, #0
 8026462:	d05a      	beq.n	802651a <_printf_i+0x1ce>
 8026464:	0025      	movs	r5, r4
 8026466:	7833      	ldrb	r3, [r6, #0]
 8026468:	3542      	adds	r5, #66	; 0x42
 802646a:	702b      	strb	r3, [r5, #0]
 802646c:	e055      	b.n	802651a <_printf_i+0x1ce>
 802646e:	0655      	lsls	r5, r2, #25
 8026470:	d5db      	bpl.n	802642a <_printf_i+0xde>
 8026472:	b280      	uxth	r0, r0
 8026474:	e7d9      	b.n	802642a <_printf_i+0xde>
 8026476:	681a      	ldr	r2, [r3, #0]
 8026478:	680d      	ldr	r5, [r1, #0]
 802647a:	1d10      	adds	r0, r2, #4
 802647c:	6949      	ldr	r1, [r1, #20]
 802647e:	6018      	str	r0, [r3, #0]
 8026480:	6813      	ldr	r3, [r2, #0]
 8026482:	062e      	lsls	r6, r5, #24
 8026484:	d501      	bpl.n	802648a <_printf_i+0x13e>
 8026486:	6019      	str	r1, [r3, #0]
 8026488:	e002      	b.n	8026490 <_printf_i+0x144>
 802648a:	066d      	lsls	r5, r5, #25
 802648c:	d5fb      	bpl.n	8026486 <_printf_i+0x13a>
 802648e:	8019      	strh	r1, [r3, #0]
 8026490:	2300      	movs	r3, #0
 8026492:	9d02      	ldr	r5, [sp, #8]
 8026494:	6123      	str	r3, [r4, #16]
 8026496:	e04f      	b.n	8026538 <_printf_i+0x1ec>
 8026498:	681a      	ldr	r2, [r3, #0]
 802649a:	1d11      	adds	r1, r2, #4
 802649c:	6019      	str	r1, [r3, #0]
 802649e:	6815      	ldr	r5, [r2, #0]
 80264a0:	2100      	movs	r1, #0
 80264a2:	6862      	ldr	r2, [r4, #4]
 80264a4:	0028      	movs	r0, r5
 80264a6:	f000 f859 	bl	802655c <memchr>
 80264aa:	2800      	cmp	r0, #0
 80264ac:	d001      	beq.n	80264b2 <_printf_i+0x166>
 80264ae:	1b40      	subs	r0, r0, r5
 80264b0:	6060      	str	r0, [r4, #4]
 80264b2:	6863      	ldr	r3, [r4, #4]
 80264b4:	6123      	str	r3, [r4, #16]
 80264b6:	2300      	movs	r3, #0
 80264b8:	9a02      	ldr	r2, [sp, #8]
 80264ba:	7013      	strb	r3, [r2, #0]
 80264bc:	e03c      	b.n	8026538 <_printf_i+0x1ec>
 80264be:	6923      	ldr	r3, [r4, #16]
 80264c0:	002a      	movs	r2, r5
 80264c2:	9904      	ldr	r1, [sp, #16]
 80264c4:	9803      	ldr	r0, [sp, #12]
 80264c6:	9d05      	ldr	r5, [sp, #20]
 80264c8:	47a8      	blx	r5
 80264ca:	1c43      	adds	r3, r0, #1
 80264cc:	d03e      	beq.n	802654c <_printf_i+0x200>
 80264ce:	6823      	ldr	r3, [r4, #0]
 80264d0:	079b      	lsls	r3, r3, #30
 80264d2:	d415      	bmi.n	8026500 <_printf_i+0x1b4>
 80264d4:	9b07      	ldr	r3, [sp, #28]
 80264d6:	68e0      	ldr	r0, [r4, #12]
 80264d8:	4298      	cmp	r0, r3
 80264da:	da39      	bge.n	8026550 <_printf_i+0x204>
 80264dc:	0018      	movs	r0, r3
 80264de:	e037      	b.n	8026550 <_printf_i+0x204>
 80264e0:	0022      	movs	r2, r4
 80264e2:	2301      	movs	r3, #1
 80264e4:	3219      	adds	r2, #25
 80264e6:	9904      	ldr	r1, [sp, #16]
 80264e8:	9803      	ldr	r0, [sp, #12]
 80264ea:	9e05      	ldr	r6, [sp, #20]
 80264ec:	47b0      	blx	r6
 80264ee:	1c43      	adds	r3, r0, #1
 80264f0:	d02c      	beq.n	802654c <_printf_i+0x200>
 80264f2:	3501      	adds	r5, #1
 80264f4:	68e3      	ldr	r3, [r4, #12]
 80264f6:	9a07      	ldr	r2, [sp, #28]
 80264f8:	1a9b      	subs	r3, r3, r2
 80264fa:	42ab      	cmp	r3, r5
 80264fc:	dcf0      	bgt.n	80264e0 <_printf_i+0x194>
 80264fe:	e7e9      	b.n	80264d4 <_printf_i+0x188>
 8026500:	2500      	movs	r5, #0
 8026502:	e7f7      	b.n	80264f4 <_printf_i+0x1a8>
 8026504:	2800      	cmp	r0, #0
 8026506:	d0ad      	beq.n	8026464 <_printf_i+0x118>
 8026508:	9d02      	ldr	r5, [sp, #8]
 802650a:	0039      	movs	r1, r7
 802650c:	f7d9 fe8a 	bl	8000224 <__aeabi_uidivmod>
 8026510:	5c73      	ldrb	r3, [r6, r1]
 8026512:	3d01      	subs	r5, #1
 8026514:	702b      	strb	r3, [r5, #0]
 8026516:	2800      	cmp	r0, #0
 8026518:	d1f7      	bne.n	802650a <_printf_i+0x1be>
 802651a:	2f08      	cmp	r7, #8
 802651c:	d109      	bne.n	8026532 <_printf_i+0x1e6>
 802651e:	6823      	ldr	r3, [r4, #0]
 8026520:	07db      	lsls	r3, r3, #31
 8026522:	d506      	bpl.n	8026532 <_printf_i+0x1e6>
 8026524:	6863      	ldr	r3, [r4, #4]
 8026526:	6922      	ldr	r2, [r4, #16]
 8026528:	4293      	cmp	r3, r2
 802652a:	dc02      	bgt.n	8026532 <_printf_i+0x1e6>
 802652c:	2330      	movs	r3, #48	; 0x30
 802652e:	3d01      	subs	r5, #1
 8026530:	702b      	strb	r3, [r5, #0]
 8026532:	9b02      	ldr	r3, [sp, #8]
 8026534:	1b5b      	subs	r3, r3, r5
 8026536:	6123      	str	r3, [r4, #16]
 8026538:	9b05      	ldr	r3, [sp, #20]
 802653a:	aa07      	add	r2, sp, #28
 802653c:	9300      	str	r3, [sp, #0]
 802653e:	0021      	movs	r1, r4
 8026540:	9b04      	ldr	r3, [sp, #16]
 8026542:	9803      	ldr	r0, [sp, #12]
 8026544:	f7ff fe94 	bl	8026270 <_printf_common>
 8026548:	1c43      	adds	r3, r0, #1
 802654a:	d1b8      	bne.n	80264be <_printf_i+0x172>
 802654c:	2001      	movs	r0, #1
 802654e:	4240      	negs	r0, r0
 8026550:	b009      	add	sp, #36	; 0x24
 8026552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026554:	08029225 	.word	0x08029225
 8026558:	08029236 	.word	0x08029236

0802655c <memchr>:
 802655c:	b2c9      	uxtb	r1, r1
 802655e:	1882      	adds	r2, r0, r2
 8026560:	4290      	cmp	r0, r2
 8026562:	d101      	bne.n	8026568 <memchr+0xc>
 8026564:	2000      	movs	r0, #0
 8026566:	4770      	bx	lr
 8026568:	7803      	ldrb	r3, [r0, #0]
 802656a:	428b      	cmp	r3, r1
 802656c:	d0fb      	beq.n	8026566 <memchr+0xa>
 802656e:	3001      	adds	r0, #1
 8026570:	e7f6      	b.n	8026560 <memchr+0x4>
	...

08026574 <_free_r>:
 8026574:	b570      	push	{r4, r5, r6, lr}
 8026576:	0005      	movs	r5, r0
 8026578:	2900      	cmp	r1, #0
 802657a:	d010      	beq.n	802659e <_free_r+0x2a>
 802657c:	1f0c      	subs	r4, r1, #4
 802657e:	6823      	ldr	r3, [r4, #0]
 8026580:	2b00      	cmp	r3, #0
 8026582:	da00      	bge.n	8026586 <_free_r+0x12>
 8026584:	18e4      	adds	r4, r4, r3
 8026586:	0028      	movs	r0, r5
 8026588:	f000 f8d4 	bl	8026734 <__malloc_lock>
 802658c:	4a1d      	ldr	r2, [pc, #116]	; (8026604 <_free_r+0x90>)
 802658e:	6813      	ldr	r3, [r2, #0]
 8026590:	2b00      	cmp	r3, #0
 8026592:	d105      	bne.n	80265a0 <_free_r+0x2c>
 8026594:	6063      	str	r3, [r4, #4]
 8026596:	6014      	str	r4, [r2, #0]
 8026598:	0028      	movs	r0, r5
 802659a:	f000 f8cc 	bl	8026736 <__malloc_unlock>
 802659e:	bd70      	pop	{r4, r5, r6, pc}
 80265a0:	42a3      	cmp	r3, r4
 80265a2:	d909      	bls.n	80265b8 <_free_r+0x44>
 80265a4:	6821      	ldr	r1, [r4, #0]
 80265a6:	1860      	adds	r0, r4, r1
 80265a8:	4283      	cmp	r3, r0
 80265aa:	d1f3      	bne.n	8026594 <_free_r+0x20>
 80265ac:	6818      	ldr	r0, [r3, #0]
 80265ae:	685b      	ldr	r3, [r3, #4]
 80265b0:	1841      	adds	r1, r0, r1
 80265b2:	6021      	str	r1, [r4, #0]
 80265b4:	e7ee      	b.n	8026594 <_free_r+0x20>
 80265b6:	0013      	movs	r3, r2
 80265b8:	685a      	ldr	r2, [r3, #4]
 80265ba:	2a00      	cmp	r2, #0
 80265bc:	d001      	beq.n	80265c2 <_free_r+0x4e>
 80265be:	42a2      	cmp	r2, r4
 80265c0:	d9f9      	bls.n	80265b6 <_free_r+0x42>
 80265c2:	6819      	ldr	r1, [r3, #0]
 80265c4:	1858      	adds	r0, r3, r1
 80265c6:	42a0      	cmp	r0, r4
 80265c8:	d10b      	bne.n	80265e2 <_free_r+0x6e>
 80265ca:	6820      	ldr	r0, [r4, #0]
 80265cc:	1809      	adds	r1, r1, r0
 80265ce:	1858      	adds	r0, r3, r1
 80265d0:	6019      	str	r1, [r3, #0]
 80265d2:	4282      	cmp	r2, r0
 80265d4:	d1e0      	bne.n	8026598 <_free_r+0x24>
 80265d6:	6810      	ldr	r0, [r2, #0]
 80265d8:	6852      	ldr	r2, [r2, #4]
 80265da:	1841      	adds	r1, r0, r1
 80265dc:	6019      	str	r1, [r3, #0]
 80265de:	605a      	str	r2, [r3, #4]
 80265e0:	e7da      	b.n	8026598 <_free_r+0x24>
 80265e2:	42a0      	cmp	r0, r4
 80265e4:	d902      	bls.n	80265ec <_free_r+0x78>
 80265e6:	230c      	movs	r3, #12
 80265e8:	602b      	str	r3, [r5, #0]
 80265ea:	e7d5      	b.n	8026598 <_free_r+0x24>
 80265ec:	6821      	ldr	r1, [r4, #0]
 80265ee:	1860      	adds	r0, r4, r1
 80265f0:	4282      	cmp	r2, r0
 80265f2:	d103      	bne.n	80265fc <_free_r+0x88>
 80265f4:	6810      	ldr	r0, [r2, #0]
 80265f6:	6852      	ldr	r2, [r2, #4]
 80265f8:	1841      	adds	r1, r0, r1
 80265fa:	6021      	str	r1, [r4, #0]
 80265fc:	6062      	str	r2, [r4, #4]
 80265fe:	605c      	str	r4, [r3, #4]
 8026600:	e7ca      	b.n	8026598 <_free_r+0x24>
 8026602:	46c0      	nop			; (mov r8, r8)
 8026604:	20001e44 	.word	0x20001e44

08026608 <_malloc_r>:
 8026608:	2303      	movs	r3, #3
 802660a:	b570      	push	{r4, r5, r6, lr}
 802660c:	1ccd      	adds	r5, r1, #3
 802660e:	439d      	bics	r5, r3
 8026610:	3508      	adds	r5, #8
 8026612:	0006      	movs	r6, r0
 8026614:	2d0c      	cmp	r5, #12
 8026616:	d21e      	bcs.n	8026656 <_malloc_r+0x4e>
 8026618:	250c      	movs	r5, #12
 802661a:	42a9      	cmp	r1, r5
 802661c:	d81d      	bhi.n	802665a <_malloc_r+0x52>
 802661e:	0030      	movs	r0, r6
 8026620:	f000 f888 	bl	8026734 <__malloc_lock>
 8026624:	4a25      	ldr	r2, [pc, #148]	; (80266bc <_malloc_r+0xb4>)
 8026626:	6814      	ldr	r4, [r2, #0]
 8026628:	0021      	movs	r1, r4
 802662a:	2900      	cmp	r1, #0
 802662c:	d119      	bne.n	8026662 <_malloc_r+0x5a>
 802662e:	4c24      	ldr	r4, [pc, #144]	; (80266c0 <_malloc_r+0xb8>)
 8026630:	6823      	ldr	r3, [r4, #0]
 8026632:	2b00      	cmp	r3, #0
 8026634:	d103      	bne.n	802663e <_malloc_r+0x36>
 8026636:	0030      	movs	r0, r6
 8026638:	f000 f86a 	bl	8026710 <_sbrk_r>
 802663c:	6020      	str	r0, [r4, #0]
 802663e:	0029      	movs	r1, r5
 8026640:	0030      	movs	r0, r6
 8026642:	f000 f865 	bl	8026710 <_sbrk_r>
 8026646:	1c43      	adds	r3, r0, #1
 8026648:	d12b      	bne.n	80266a2 <_malloc_r+0x9a>
 802664a:	230c      	movs	r3, #12
 802664c:	0030      	movs	r0, r6
 802664e:	6033      	str	r3, [r6, #0]
 8026650:	f000 f871 	bl	8026736 <__malloc_unlock>
 8026654:	e003      	b.n	802665e <_malloc_r+0x56>
 8026656:	2d00      	cmp	r5, #0
 8026658:	dadf      	bge.n	802661a <_malloc_r+0x12>
 802665a:	230c      	movs	r3, #12
 802665c:	6033      	str	r3, [r6, #0]
 802665e:	2000      	movs	r0, #0
 8026660:	bd70      	pop	{r4, r5, r6, pc}
 8026662:	680b      	ldr	r3, [r1, #0]
 8026664:	1b5b      	subs	r3, r3, r5
 8026666:	d419      	bmi.n	802669c <_malloc_r+0x94>
 8026668:	2b0b      	cmp	r3, #11
 802666a:	d903      	bls.n	8026674 <_malloc_r+0x6c>
 802666c:	600b      	str	r3, [r1, #0]
 802666e:	18cc      	adds	r4, r1, r3
 8026670:	6025      	str	r5, [r4, #0]
 8026672:	e003      	b.n	802667c <_malloc_r+0x74>
 8026674:	684b      	ldr	r3, [r1, #4]
 8026676:	428c      	cmp	r4, r1
 8026678:	d10d      	bne.n	8026696 <_malloc_r+0x8e>
 802667a:	6013      	str	r3, [r2, #0]
 802667c:	0030      	movs	r0, r6
 802667e:	f000 f85a 	bl	8026736 <__malloc_unlock>
 8026682:	0020      	movs	r0, r4
 8026684:	2207      	movs	r2, #7
 8026686:	300b      	adds	r0, #11
 8026688:	1d23      	adds	r3, r4, #4
 802668a:	4390      	bics	r0, r2
 802668c:	1ac3      	subs	r3, r0, r3
 802668e:	d0e7      	beq.n	8026660 <_malloc_r+0x58>
 8026690:	425a      	negs	r2, r3
 8026692:	50e2      	str	r2, [r4, r3]
 8026694:	e7e4      	b.n	8026660 <_malloc_r+0x58>
 8026696:	6063      	str	r3, [r4, #4]
 8026698:	000c      	movs	r4, r1
 802669a:	e7ef      	b.n	802667c <_malloc_r+0x74>
 802669c:	000c      	movs	r4, r1
 802669e:	6849      	ldr	r1, [r1, #4]
 80266a0:	e7c3      	b.n	802662a <_malloc_r+0x22>
 80266a2:	2303      	movs	r3, #3
 80266a4:	1cc4      	adds	r4, r0, #3
 80266a6:	439c      	bics	r4, r3
 80266a8:	42a0      	cmp	r0, r4
 80266aa:	d0e1      	beq.n	8026670 <_malloc_r+0x68>
 80266ac:	1a21      	subs	r1, r4, r0
 80266ae:	0030      	movs	r0, r6
 80266b0:	f000 f82e 	bl	8026710 <_sbrk_r>
 80266b4:	1c43      	adds	r3, r0, #1
 80266b6:	d1db      	bne.n	8026670 <_malloc_r+0x68>
 80266b8:	e7c7      	b.n	802664a <_malloc_r+0x42>
 80266ba:	46c0      	nop			; (mov r8, r8)
 80266bc:	20001e44 	.word	0x20001e44
 80266c0:	20001e48 	.word	0x20001e48

080266c4 <_realloc_r>:
 80266c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266c6:	0007      	movs	r7, r0
 80266c8:	000d      	movs	r5, r1
 80266ca:	0016      	movs	r6, r2
 80266cc:	2900      	cmp	r1, #0
 80266ce:	d105      	bne.n	80266dc <_realloc_r+0x18>
 80266d0:	0011      	movs	r1, r2
 80266d2:	f7ff ff99 	bl	8026608 <_malloc_r>
 80266d6:	0004      	movs	r4, r0
 80266d8:	0020      	movs	r0, r4
 80266da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80266dc:	2a00      	cmp	r2, #0
 80266de:	d103      	bne.n	80266e8 <_realloc_r+0x24>
 80266e0:	f7ff ff48 	bl	8026574 <_free_r>
 80266e4:	0034      	movs	r4, r6
 80266e6:	e7f7      	b.n	80266d8 <_realloc_r+0x14>
 80266e8:	f000 f826 	bl	8026738 <_malloc_usable_size_r>
 80266ec:	002c      	movs	r4, r5
 80266ee:	42b0      	cmp	r0, r6
 80266f0:	d2f2      	bcs.n	80266d8 <_realloc_r+0x14>
 80266f2:	0031      	movs	r1, r6
 80266f4:	0038      	movs	r0, r7
 80266f6:	f7ff ff87 	bl	8026608 <_malloc_r>
 80266fa:	1e04      	subs	r4, r0, #0
 80266fc:	d0ec      	beq.n	80266d8 <_realloc_r+0x14>
 80266fe:	0029      	movs	r1, r5
 8026700:	0032      	movs	r2, r6
 8026702:	f7ff fbf9 	bl	8025ef8 <memcpy>
 8026706:	0029      	movs	r1, r5
 8026708:	0038      	movs	r0, r7
 802670a:	f7ff ff33 	bl	8026574 <_free_r>
 802670e:	e7e3      	b.n	80266d8 <_realloc_r+0x14>

08026710 <_sbrk_r>:
 8026710:	2300      	movs	r3, #0
 8026712:	b570      	push	{r4, r5, r6, lr}
 8026714:	4c06      	ldr	r4, [pc, #24]	; (8026730 <_sbrk_r+0x20>)
 8026716:	0005      	movs	r5, r0
 8026718:	0008      	movs	r0, r1
 802671a:	6023      	str	r3, [r4, #0]
 802671c:	f7dd f8ce 	bl	80038bc <_sbrk>
 8026720:	1c43      	adds	r3, r0, #1
 8026722:	d103      	bne.n	802672c <_sbrk_r+0x1c>
 8026724:	6823      	ldr	r3, [r4, #0]
 8026726:	2b00      	cmp	r3, #0
 8026728:	d000      	beq.n	802672c <_sbrk_r+0x1c>
 802672a:	602b      	str	r3, [r5, #0]
 802672c:	bd70      	pop	{r4, r5, r6, pc}
 802672e:	46c0      	nop			; (mov r8, r8)
 8026730:	200022d0 	.word	0x200022d0

08026734 <__malloc_lock>:
 8026734:	4770      	bx	lr

08026736 <__malloc_unlock>:
 8026736:	4770      	bx	lr

08026738 <_malloc_usable_size_r>:
 8026738:	1f0b      	subs	r3, r1, #4
 802673a:	681b      	ldr	r3, [r3, #0]
 802673c:	1f18      	subs	r0, r3, #4
 802673e:	2b00      	cmp	r3, #0
 8026740:	da01      	bge.n	8026746 <_malloc_usable_size_r+0xe>
 8026742:	580b      	ldr	r3, [r1, r0]
 8026744:	18c0      	adds	r0, r0, r3
 8026746:	4770      	bx	lr

08026748 <ceil>:
 8026748:	b5f0      	push	{r4, r5, r6, r7, lr}
 802674a:	004b      	lsls	r3, r1, #1
 802674c:	4a39      	ldr	r2, [pc, #228]	; (8026834 <ceil+0xec>)
 802674e:	0d5b      	lsrs	r3, r3, #21
 8026750:	b085      	sub	sp, #20
 8026752:	189e      	adds	r6, r3, r2
 8026754:	000c      	movs	r4, r1
 8026756:	0005      	movs	r5, r0
 8026758:	9003      	str	r0, [sp, #12]
 802675a:	2e13      	cmp	r6, #19
 802675c:	dc32      	bgt.n	80267c4 <ceil+0x7c>
 802675e:	2e00      	cmp	r6, #0
 8026760:	da13      	bge.n	802678a <ceil+0x42>
 8026762:	4a35      	ldr	r2, [pc, #212]	; (8026838 <ceil+0xf0>)
 8026764:	4b35      	ldr	r3, [pc, #212]	; (802683c <ceil+0xf4>)
 8026766:	f7da fb43 	bl	8000df0 <__aeabi_dadd>
 802676a:	2200      	movs	r2, #0
 802676c:	2300      	movs	r3, #0
 802676e:	f7d9 fe73 	bl	8000458 <__aeabi_dcmpgt>
 8026772:	2800      	cmp	r0, #0
 8026774:	d006      	beq.n	8026784 <ceil+0x3c>
 8026776:	2c00      	cmp	r4, #0
 8026778:	db57      	blt.n	802682a <ceil+0xe2>
 802677a:	432c      	orrs	r4, r5
 802677c:	2500      	movs	r5, #0
 802677e:	42ac      	cmp	r4, r5
 8026780:	d000      	beq.n	8026784 <ceil+0x3c>
 8026782:	4c2f      	ldr	r4, [pc, #188]	; (8026840 <ceil+0xf8>)
 8026784:	0028      	movs	r0, r5
 8026786:	0021      	movs	r1, r4
 8026788:	e026      	b.n	80267d8 <ceil+0x90>
 802678a:	4f2e      	ldr	r7, [pc, #184]	; (8026844 <ceil+0xfc>)
 802678c:	4137      	asrs	r7, r6
 802678e:	003b      	movs	r3, r7
 8026790:	400b      	ands	r3, r1
 8026792:	4303      	orrs	r3, r0
 8026794:	d020      	beq.n	80267d8 <ceil+0x90>
 8026796:	9000      	str	r0, [sp, #0]
 8026798:	9101      	str	r1, [sp, #4]
 802679a:	4a27      	ldr	r2, [pc, #156]	; (8026838 <ceil+0xf0>)
 802679c:	4b27      	ldr	r3, [pc, #156]	; (802683c <ceil+0xf4>)
 802679e:	9800      	ldr	r0, [sp, #0]
 80267a0:	9901      	ldr	r1, [sp, #4]
 80267a2:	f7da fb25 	bl	8000df0 <__aeabi_dadd>
 80267a6:	2200      	movs	r2, #0
 80267a8:	2300      	movs	r3, #0
 80267aa:	f7d9 fe55 	bl	8000458 <__aeabi_dcmpgt>
 80267ae:	2800      	cmp	r0, #0
 80267b0:	d0e8      	beq.n	8026784 <ceil+0x3c>
 80267b2:	2c00      	cmp	r4, #0
 80267b4:	dd03      	ble.n	80267be <ceil+0x76>
 80267b6:	2380      	movs	r3, #128	; 0x80
 80267b8:	035b      	lsls	r3, r3, #13
 80267ba:	4133      	asrs	r3, r6
 80267bc:	18e4      	adds	r4, r4, r3
 80267be:	43bc      	bics	r4, r7
 80267c0:	2500      	movs	r5, #0
 80267c2:	e7df      	b.n	8026784 <ceil+0x3c>
 80267c4:	2e33      	cmp	r6, #51	; 0x33
 80267c6:	dd09      	ble.n	80267dc <ceil+0x94>
 80267c8:	2380      	movs	r3, #128	; 0x80
 80267ca:	00db      	lsls	r3, r3, #3
 80267cc:	429e      	cmp	r6, r3
 80267ce:	d103      	bne.n	80267d8 <ceil+0x90>
 80267d0:	0002      	movs	r2, r0
 80267d2:	000b      	movs	r3, r1
 80267d4:	f7da fb0c 	bl	8000df0 <__aeabi_dadd>
 80267d8:	b005      	add	sp, #20
 80267da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80267dc:	2701      	movs	r7, #1
 80267de:	4a1a      	ldr	r2, [pc, #104]	; (8026848 <ceil+0x100>)
 80267e0:	427f      	negs	r7, r7
 80267e2:	189b      	adds	r3, r3, r2
 80267e4:	40df      	lsrs	r7, r3
 80267e6:	4238      	tst	r0, r7
 80267e8:	d0f6      	beq.n	80267d8 <ceil+0x90>
 80267ea:	9000      	str	r0, [sp, #0]
 80267ec:	9101      	str	r1, [sp, #4]
 80267ee:	4a12      	ldr	r2, [pc, #72]	; (8026838 <ceil+0xf0>)
 80267f0:	4b12      	ldr	r3, [pc, #72]	; (802683c <ceil+0xf4>)
 80267f2:	9800      	ldr	r0, [sp, #0]
 80267f4:	9901      	ldr	r1, [sp, #4]
 80267f6:	f7da fafb 	bl	8000df0 <__aeabi_dadd>
 80267fa:	2200      	movs	r2, #0
 80267fc:	2300      	movs	r3, #0
 80267fe:	f7d9 fe2b 	bl	8000458 <__aeabi_dcmpgt>
 8026802:	2800      	cmp	r0, #0
 8026804:	d0be      	beq.n	8026784 <ceil+0x3c>
 8026806:	2c00      	cmp	r4, #0
 8026808:	dd02      	ble.n	8026810 <ceil+0xc8>
 802680a:	2e14      	cmp	r6, #20
 802680c:	d102      	bne.n	8026814 <ceil+0xcc>
 802680e:	3401      	adds	r4, #1
 8026810:	43bd      	bics	r5, r7
 8026812:	e7b7      	b.n	8026784 <ceil+0x3c>
 8026814:	2334      	movs	r3, #52	; 0x34
 8026816:	1b9e      	subs	r6, r3, r6
 8026818:	3b33      	subs	r3, #51	; 0x33
 802681a:	40b3      	lsls	r3, r6
 802681c:	18ed      	adds	r5, r5, r3
 802681e:	9b03      	ldr	r3, [sp, #12]
 8026820:	429d      	cmp	r5, r3
 8026822:	419b      	sbcs	r3, r3
 8026824:	425b      	negs	r3, r3
 8026826:	18e4      	adds	r4, r4, r3
 8026828:	e7f2      	b.n	8026810 <ceil+0xc8>
 802682a:	2480      	movs	r4, #128	; 0x80
 802682c:	2500      	movs	r5, #0
 802682e:	0624      	lsls	r4, r4, #24
 8026830:	e7a8      	b.n	8026784 <ceil+0x3c>
 8026832:	46c0      	nop			; (mov r8, r8)
 8026834:	fffffc01 	.word	0xfffffc01
 8026838:	8800759c 	.word	0x8800759c
 802683c:	7e37e43c 	.word	0x7e37e43c
 8026840:	3ff00000 	.word	0x3ff00000
 8026844:	000fffff 	.word	0x000fffff
 8026848:	fffffbed 	.word	0xfffffbed

0802684c <floor>:
 802684c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802684e:	004b      	lsls	r3, r1, #1
 8026850:	4a39      	ldr	r2, [pc, #228]	; (8026938 <floor+0xec>)
 8026852:	0d5b      	lsrs	r3, r3, #21
 8026854:	b085      	sub	sp, #20
 8026856:	189e      	adds	r6, r3, r2
 8026858:	000c      	movs	r4, r1
 802685a:	0005      	movs	r5, r0
 802685c:	9003      	str	r0, [sp, #12]
 802685e:	2e13      	cmp	r6, #19
 8026860:	dc34      	bgt.n	80268cc <floor+0x80>
 8026862:	2e00      	cmp	r6, #0
 8026864:	da15      	bge.n	8026892 <floor+0x46>
 8026866:	4a35      	ldr	r2, [pc, #212]	; (802693c <floor+0xf0>)
 8026868:	4b35      	ldr	r3, [pc, #212]	; (8026940 <floor+0xf4>)
 802686a:	f7da fac1 	bl	8000df0 <__aeabi_dadd>
 802686e:	2200      	movs	r2, #0
 8026870:	2300      	movs	r3, #0
 8026872:	f7d9 fdf1 	bl	8000458 <__aeabi_dcmpgt>
 8026876:	2800      	cmp	r0, #0
 8026878:	d008      	beq.n	802688c <floor+0x40>
 802687a:	2c00      	cmp	r4, #0
 802687c:	da59      	bge.n	8026932 <floor+0xe6>
 802687e:	0063      	lsls	r3, r4, #1
 8026880:	085b      	lsrs	r3, r3, #1
 8026882:	432b      	orrs	r3, r5
 8026884:	2500      	movs	r5, #0
 8026886:	42ab      	cmp	r3, r5
 8026888:	d000      	beq.n	802688c <floor+0x40>
 802688a:	4c2e      	ldr	r4, [pc, #184]	; (8026944 <floor+0xf8>)
 802688c:	0028      	movs	r0, r5
 802688e:	0021      	movs	r1, r4
 8026890:	e026      	b.n	80268e0 <floor+0x94>
 8026892:	4f2d      	ldr	r7, [pc, #180]	; (8026948 <floor+0xfc>)
 8026894:	4137      	asrs	r7, r6
 8026896:	003b      	movs	r3, r7
 8026898:	400b      	ands	r3, r1
 802689a:	4303      	orrs	r3, r0
 802689c:	d020      	beq.n	80268e0 <floor+0x94>
 802689e:	9000      	str	r0, [sp, #0]
 80268a0:	9101      	str	r1, [sp, #4]
 80268a2:	4a26      	ldr	r2, [pc, #152]	; (802693c <floor+0xf0>)
 80268a4:	4b26      	ldr	r3, [pc, #152]	; (8026940 <floor+0xf4>)
 80268a6:	9800      	ldr	r0, [sp, #0]
 80268a8:	9901      	ldr	r1, [sp, #4]
 80268aa:	f7da faa1 	bl	8000df0 <__aeabi_dadd>
 80268ae:	2200      	movs	r2, #0
 80268b0:	2300      	movs	r3, #0
 80268b2:	f7d9 fdd1 	bl	8000458 <__aeabi_dcmpgt>
 80268b6:	2800      	cmp	r0, #0
 80268b8:	d0e8      	beq.n	802688c <floor+0x40>
 80268ba:	2c00      	cmp	r4, #0
 80268bc:	da03      	bge.n	80268c6 <floor+0x7a>
 80268be:	2380      	movs	r3, #128	; 0x80
 80268c0:	035b      	lsls	r3, r3, #13
 80268c2:	4133      	asrs	r3, r6
 80268c4:	18e4      	adds	r4, r4, r3
 80268c6:	43bc      	bics	r4, r7
 80268c8:	2500      	movs	r5, #0
 80268ca:	e7df      	b.n	802688c <floor+0x40>
 80268cc:	2e33      	cmp	r6, #51	; 0x33
 80268ce:	dd09      	ble.n	80268e4 <floor+0x98>
 80268d0:	2380      	movs	r3, #128	; 0x80
 80268d2:	00db      	lsls	r3, r3, #3
 80268d4:	429e      	cmp	r6, r3
 80268d6:	d103      	bne.n	80268e0 <floor+0x94>
 80268d8:	0002      	movs	r2, r0
 80268da:	000b      	movs	r3, r1
 80268dc:	f7da fa88 	bl	8000df0 <__aeabi_dadd>
 80268e0:	b005      	add	sp, #20
 80268e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80268e4:	2701      	movs	r7, #1
 80268e6:	4a19      	ldr	r2, [pc, #100]	; (802694c <floor+0x100>)
 80268e8:	427f      	negs	r7, r7
 80268ea:	189b      	adds	r3, r3, r2
 80268ec:	40df      	lsrs	r7, r3
 80268ee:	4238      	tst	r0, r7
 80268f0:	d0f6      	beq.n	80268e0 <floor+0x94>
 80268f2:	9000      	str	r0, [sp, #0]
 80268f4:	9101      	str	r1, [sp, #4]
 80268f6:	4a11      	ldr	r2, [pc, #68]	; (802693c <floor+0xf0>)
 80268f8:	4b11      	ldr	r3, [pc, #68]	; (8026940 <floor+0xf4>)
 80268fa:	9800      	ldr	r0, [sp, #0]
 80268fc:	9901      	ldr	r1, [sp, #4]
 80268fe:	f7da fa77 	bl	8000df0 <__aeabi_dadd>
 8026902:	2200      	movs	r2, #0
 8026904:	2300      	movs	r3, #0
 8026906:	f7d9 fda7 	bl	8000458 <__aeabi_dcmpgt>
 802690a:	2800      	cmp	r0, #0
 802690c:	d0be      	beq.n	802688c <floor+0x40>
 802690e:	2c00      	cmp	r4, #0
 8026910:	da02      	bge.n	8026918 <floor+0xcc>
 8026912:	2e14      	cmp	r6, #20
 8026914:	d102      	bne.n	802691c <floor+0xd0>
 8026916:	3401      	adds	r4, #1
 8026918:	43bd      	bics	r5, r7
 802691a:	e7b7      	b.n	802688c <floor+0x40>
 802691c:	2334      	movs	r3, #52	; 0x34
 802691e:	1b9e      	subs	r6, r3, r6
 8026920:	3b33      	subs	r3, #51	; 0x33
 8026922:	40b3      	lsls	r3, r6
 8026924:	18ed      	adds	r5, r5, r3
 8026926:	9b03      	ldr	r3, [sp, #12]
 8026928:	429d      	cmp	r5, r3
 802692a:	419b      	sbcs	r3, r3
 802692c:	425b      	negs	r3, r3
 802692e:	18e4      	adds	r4, r4, r3
 8026930:	e7f2      	b.n	8026918 <floor+0xcc>
 8026932:	2500      	movs	r5, #0
 8026934:	002c      	movs	r4, r5
 8026936:	e7a9      	b.n	802688c <floor+0x40>
 8026938:	fffffc01 	.word	0xfffffc01
 802693c:	8800759c 	.word	0x8800759c
 8026940:	7e37e43c 	.word	0x7e37e43c
 8026944:	bff00000 	.word	0xbff00000
 8026948:	000fffff 	.word	0x000fffff
 802694c:	fffffbed 	.word	0xfffffbed

08026950 <round>:
 8026950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026952:	004a      	lsls	r2, r1, #1
 8026954:	0007      	movs	r7, r0
 8026956:	481f      	ldr	r0, [pc, #124]	; (80269d4 <round+0x84>)
 8026958:	0d52      	lsrs	r2, r2, #21
 802695a:	1815      	adds	r5, r2, r0
 802695c:	000e      	movs	r6, r1
 802695e:	2d13      	cmp	r5, #19
 8026960:	dc18      	bgt.n	8026994 <round+0x44>
 8026962:	2d00      	cmp	r5, #0
 8026964:	da09      	bge.n	802697a <round+0x2a>
 8026966:	0fcb      	lsrs	r3, r1, #31
 8026968:	07db      	lsls	r3, r3, #31
 802696a:	2200      	movs	r2, #0
 802696c:	1c69      	adds	r1, r5, #1
 802696e:	d101      	bne.n	8026974 <round+0x24>
 8026970:	4919      	ldr	r1, [pc, #100]	; (80269d8 <round+0x88>)
 8026972:	430b      	orrs	r3, r1
 8026974:	0019      	movs	r1, r3
 8026976:	0010      	movs	r0, r2
 8026978:	e017      	b.n	80269aa <round+0x5a>
 802697a:	4a18      	ldr	r2, [pc, #96]	; (80269dc <round+0x8c>)
 802697c:	412a      	asrs	r2, r5
 802697e:	420a      	tst	r2, r1
 8026980:	d101      	bne.n	8026986 <round+0x36>
 8026982:	2f00      	cmp	r7, #0
 8026984:	d012      	beq.n	80269ac <round+0x5c>
 8026986:	2380      	movs	r3, #128	; 0x80
 8026988:	031b      	lsls	r3, r3, #12
 802698a:	412b      	asrs	r3, r5
 802698c:	199b      	adds	r3, r3, r6
 802698e:	4393      	bics	r3, r2
 8026990:	2200      	movs	r2, #0
 8026992:	e7ef      	b.n	8026974 <round+0x24>
 8026994:	2d33      	cmp	r5, #51	; 0x33
 8026996:	dd0b      	ble.n	80269b0 <round+0x60>
 8026998:	2380      	movs	r3, #128	; 0x80
 802699a:	00db      	lsls	r3, r3, #3
 802699c:	429d      	cmp	r5, r3
 802699e:	d105      	bne.n	80269ac <round+0x5c>
 80269a0:	003a      	movs	r2, r7
 80269a2:	000b      	movs	r3, r1
 80269a4:	0038      	movs	r0, r7
 80269a6:	f7da fa23 	bl	8000df0 <__aeabi_dadd>
 80269aa:	0007      	movs	r7, r0
 80269ac:	0038      	movs	r0, r7
 80269ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80269b0:	2601      	movs	r6, #1
 80269b2:	480b      	ldr	r0, [pc, #44]	; (80269e0 <round+0x90>)
 80269b4:	4276      	negs	r6, r6
 80269b6:	1812      	adds	r2, r2, r0
 80269b8:	40d6      	lsrs	r6, r2
 80269ba:	423e      	tst	r6, r7
 80269bc:	d0f6      	beq.n	80269ac <round+0x5c>
 80269be:	2233      	movs	r2, #51	; 0x33
 80269c0:	1b55      	subs	r5, r2, r5
 80269c2:	3a32      	subs	r2, #50	; 0x32
 80269c4:	40aa      	lsls	r2, r5
 80269c6:	19d2      	adds	r2, r2, r7
 80269c8:	42ba      	cmp	r2, r7
 80269ca:	41a4      	sbcs	r4, r4
 80269cc:	4264      	negs	r4, r4
 80269ce:	190b      	adds	r3, r1, r4
 80269d0:	43b2      	bics	r2, r6
 80269d2:	e7cf      	b.n	8026974 <round+0x24>
 80269d4:	fffffc01 	.word	0xfffffc01
 80269d8:	3ff00000 	.word	0x3ff00000
 80269dc:	000fffff 	.word	0x000fffff
 80269e0:	fffffbed 	.word	0xfffffbed

080269e4 <_init>:
 80269e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269e6:	46c0      	nop			; (mov r8, r8)
 80269e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269ea:	bc08      	pop	{r3}
 80269ec:	469e      	mov	lr, r3
 80269ee:	4770      	bx	lr

080269f0 <_fini>:
 80269f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269f2:	46c0      	nop			; (mov r8, r8)
 80269f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80269f6:	bc08      	pop	{r3}
 80269f8:	469e      	mov	lr, r3
 80269fa:	4770      	bx	lr
